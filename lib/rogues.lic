=begin

	Current achievable ranks with this script:
	Lock Mastery:       MASTER
	Stun Maneuvers:     MASTER
	Sweep:              MASTER
	Subdue:             MASTER
	Cheapshots:         MASTER
	Gambits:            0
	
	This script isn't finished yet! But it will be soon(ish) I hope.
	
	This script should work in any Rogue guild that has been properly tagged.
	
	Someday this script will replace ;rogue, but for now there will be two different scripts.
	
	;rogue can master all Rogue guild skills except Lock Mastery and Stun Maneuvers.
	
	To start simply start the script as:
	
	;rogues
	
	For instructions on how to use the script.
	
	There are many Lock Mastery tasks that can only be automated with ;tpick, so be sure to download that script and fill out the settings if you're running this script to master Lock Mastery.
	
	The script allows you to choose which tasks you want the script to work on and which tasks you want to skip, either with guild task vouchers or without. It also allows you to choose which Lock Mastery tasks you want to automate with ;tpick.
	
	Changelog:
	Version 29: Script can now make use of GIRD verb.
	Version 30: Added disabler option in setup menu to disable critters for short races so they can perform needed critter tasks.
	Version 31: Updated to work with the latest WEALTH changes.
	Version 32: Bug fix.
	Version 33: Fixed bug with script not recognizing anemones as flowers that can be watered.
	Version 34: Updated all instaces of Char.prof to Stats.prof and all instances of Char.level to Stats.level
	Version 35: Helping other people with their partner tasks wasn't working. It should be working now.
	Version 36: Fixed bug with Sweeping partner reps with the script not pulling the person up after sweeping them.
	Version 37: New version of ;rogues works with new version of ;tpick.
	Version 38: Fixed issue with script stalling if you needed to checkin.
	Version 39: Bug fix.
	Version 40: Fixed issue with script sometimes stalling when doing partner reps.
	Version 41: Bug fix.
	Version 42: Lock Mastery task adding clasps to containers should work in all cities now.
	
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 42

=end

@rogue_text_to_display = Array.new

@rogue_current_skill = script.vars[1]
if @rogue_current_skill =~ /check/i
	@rogue_current_skill = "Checkin"
elsif @rogue_current_skill =~ /swe/i
	@rogue_current_skill = "Sweep"
elsif @rogue_current_skill =~ /sub/i
	@rogue_current_skill = "Subdue"
elsif @rogue_current_skill =~ /stu/i
	@rogue_current_skill = "Stun Maneuvers"
elsif @rogue_current_skill =~ /loc|lmas/i
	@rogue_current_skill = "Lock Mastery"
elsif @rogue_current_skill =~ /che/i
	@rogue_current_skill = "Cheapshots"
elsif @rogue_current_skill =~ /gam/i
	@rogue_current_skill = "Gambits"
elsif @rogue_current_skill =~ /hel/i
	@rogue_current_skill = "Help"
elsif @rogue_current_skill =~ /set/i
	@rogue_current_skill = "Setup"
elsif @rogue_current_skill =~ /wed/i
	@rogue_current_skill = "Wedge"
elsif @rogue_current_skill =~ /part/i
	@rogue_current_skill = "Help Partner"
else
	@rogue_current_skill = nil
end

if script.vars[2].length > 0
	@rogue_partner_name = script.vars[2].capitalize
	@rogue_only_work_with_partner = script.vars[2].capitalize
elsif UserVars.rogues["partner_name"].length > 0
	@rogue_partner_name = UserVars.rogues["partner_name"].capitalize
	@rogue_only_work_with_partner = nil
else
	@rogue_partner_name = nil
	@rogue_only_work_with_partner = nil
end

if script.vars[3] =~ /\d+/
	@rogue_partner_room_number = script.vars[3].to_i
elsif UserVars.rogues["partner_room"] =~ /\d+/
	@rogue_partner_room_number = UserVars.rogues["partner_room"].to_i
else
	@rogue_partner_room_number = Room.current.id
end

if UserVars.rogues["get_promotions_from_partner"] =~ /yes/i
	@rogue_get_promotion_from_partner = true
else
	@rogue_get_promotion_from_partner = nil
end

if UserVars.rogues["automate_partner_reps"] =~ /full/i
	@rogue_automate_the_partner_reps = "full"
elsif UserVars.rogues["automate_partner_reps"] =~ /confirm/i
	@rogue_automate_the_partner_reps = "confirm"
elsif UserVars.rogues["automate_partner_reps"] =~ /none/i
	@rogue_automate_the_partner_reps = "none"
else
	@rogue_automate_the_partner_reps = nil
end

CharSettings['been_warned_about_lock_assemblies'] = nil unless CharSettings['been_warned_about_lock_assemblies']
@rogue_dark_corner_number = 0
@rogue_do_not_skip_this_task = nil
@rogue_current_task = nil
@rogue_number_of_vouchers_remaining = 0
@rogue_total_current_ranks = 0
@rogue_total_maximum_ranks = 0
@rogue_number_of_vouchers_used = 0
@rogue_voucher_limit_exit_or_continue = nil
@rogue_trap_components_first_turnin = nil
@rogue_trap_components_needed_array = Array.new
@rogue_created_wedges = Array.new
@rogue_sense_task_5_current_task = nil
@rogue_need_to_stance_down = nil
@rogue_guild_night_active = nil
$rogue_trick_to_use = nil
$rogue_need_to_measure_boxes = nil
$rogue_do_not_calibrate_calipers = nil
$rogue_calibrate_every_box = nil
$rogue_change_needed_lockpick = nil
@rogue_all_flower_names = /wildflower|iceflower|dandelion|begonia|iris|rose|wisteria|anemones|terracotta pot|terracotta planter/i

if UserVars.rogues["limit_vouchers"].length < 1
	@rogue_limit_voucher_usage = 10
else
	@rogue_limit_voucher_temp = UserVars.rogues["limit_vouchers"].split(",")
	$rogue_limit_voucher_temp[0].strip!
	$rogue_limit_voucher_temp[1].strip!
	@rogue_limit_voucher_usage = @rogue_limit_voucher_temp[0].to_i
	if @rogue_limit_voucher_temp[1] =~ /exit/i
		@rogue_voucher_limit_exit_or_continue = "Exit"
	elsif @rogue_limit_voucher_temp[1] =~ /continue/i
		@rogue_voucher_limit_exit_or_continue = "Continue"
	end
end

@rogues_exit_rogues_immediately = nil
@rogue_voucher_limit_exit_or_continue = "Exit" if @rogue_voucher_limit_exit_or_continue.nil?

@rogue_sweep_tasks_to_trade = UserVars.rogues["sweep_tasks_to_trade"].split(",")
@rogue_sweep_tasks_to_trade.each{ |i| i.strip! }

@rogue_subdue_tasks_to_trade = UserVars.rogues["subdue_tasks_to_trade"].split(",")
@rogue_subdue_tasks_to_trade.each{ |i| i.strip! }

@rogue_stun_maneuvers_tasks_to_trade = UserVars.rogues["stun_maneuvers_tasks_to_trade"].split(",")
@rogue_stun_maneuvers_tasks_to_trade.each{ |i| i.strip! }

@rogue_lock_mastery_tasks_to_trade = UserVars.rogues["lock_mastery_tasks_to_trade"].split(",")
@rogue_lock_mastery_tasks_to_trade.each{ |i| i.strip! }

@rogue_cheapshots_tasks_to_trade = UserVars.rogues["cheapshots_tasks_to_trade"].split(",")
@rogue_cheapshots_tasks_to_trade.each{ |i| i.strip! }

@rogue_gambits_tasks_to_trade = UserVars.rogues["gambits_tasks_to_trade"].split(",")
@rogue_gambits_tasks_to_trade.each{ |i| i.strip! }

@rogue_universal_tasks_to_trade = UserVars.rogues["universal_tasks_to_trade"].split(",")
@rogue_universal_tasks_to_trade.each{ |i| i.strip! }

@rogue_tasks_to_use_tpick_for = UserVars.rogues["tasks_to_use_tpick_for"].split(",")
@rogue_tasks_to_use_tpick_for.each{ |i| i.strip! }

if UserVars.rogues["stun_command"].length < 1
	@rogue_stun_command = "Guildmaster's special"
else
	@rogue_stun_command = UserVars.rogues["stun_command"]
end

if UserVars.rogues["stun_item"].length < 1
	@rogue_needed_stun_item = nil
else
	@rogue_needed_stun_item = UserVars.rogues["stun_item"]
end

@rogue_wedge_quality_data = [ "thin wooden wedge", "warped wooden wedge", "solid wooden wedge", "strong wooden wedge", "superior wooden wedge" ]

if UserVars.rogues["hunting_wait_time"] =~ /\d+/
	@rogue_wait_before_moving = UserVars.rogues["hunting_wait_time"].to_i
else
	@rogue_wait_before_moving = 1
end

@rogues_all_hunting_rooms = Array.new
temp_info = UserVars.rogues["hunting_area_rooms"].split(",")
temp_info.each{ |i| i.strip! }
temp_info.each{ |i| @rogues_all_hunting_rooms.push(i) unless @rogues_all_hunting_rooms.include?(i) }

@rogues_all_critters_to_hunt = Array.new
temp_info = UserVars.rogues["hunting_acceptable_critters"].split(",")
temp_info.each{ |i| i.strip! }
temp_info.each{ |i| @rogues_all_critters_to_hunt.push(i) unless @rogues_all_critters_to_hunt.include?(i) }

if Gem.loaded_specs["gtk3"]
	gtk_version = 3
else
	gtk_version = 2
end

setup = proc{
	Gtk.queue {
		$ROGUES_WINDOW = Gtk::Window.new
		$ROGUES_WINDOW.title = "Rogues"
		$ROGUES_WINDOW.set_border_width(10)
		
		#GTK2 and GTK3 nonsense:
		if gtk_version == 2
			$ROGUES_BOX = Gtk::VBox.new(false)
			$ROGUES_BOX.set_border_width(5)

			$ROGUES_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
			$ROGUES_VERTICAL_BOX2 = Gtk::VBox.new(false, 0)
			$ROGUES_VERTICAL_BOX3 = Gtk::VBox.new(false, 0)
			$ROGUES_VERTICAL_BOX4 = Gtk::VBox.new(false, 0)
			$ROGUES_VERTICAL_BOX5 = Gtk::VBox.new(false, 0)
			$ROGUES_VERTICAL_BOX6 = Gtk::VBox.new(false, 0)
		else
			$ROGUES_BOX = Gtk::Box.new(:vertical)
			$ROGUES_BOX.set_border_width(5)

			$ROGUES_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
			$ROGUES_VERTICAL_BOX2 = Gtk::Box.new(:vertical, 0)
			$ROGUES_VERTICAL_BOX3 = Gtk::Box.new(:vertical, 0)
			$ROGUES_VERTICAL_BOX4 = Gtk::Box.new(:vertical, 0)
			$ROGUES_VERTICAL_BOX5 = Gtk::Box.new(:vertical, 0)
			$ROGUES_VERTICAL_BOX6 = Gtk::Box.new(:vertical, 0)
		end
		#####

		$ROGUES_WINDOW.add($ROGUES_BOX)
		$ROGUES_NOTEBOOK = Gtk::Notebook.new
		$ROGUES_NOTEBOOK.set_show_border(true)
		$ROGUES_BOX.add($ROGUES_NOTEBOOK)
		$ROGUES_NOTEBOOK.append_page($ROGUES_VERTICAL_BOX1, Gtk::Label.new('Tasks Info'))
		$ROGUES_NOTEBOOK.append_page($ROGUES_VERTICAL_BOX2, Gtk::Label.new('Critter Info'))
		$ROGUES_NOTEBOOK.append_page($ROGUES_VERTICAL_BOX3, Gtk::Label.new('Partner Info'))
		$ROGUES_NOTEBOOK.append_page($ROGUES_VERTICAL_BOX4, Gtk::Label.new('Lock Mastery'))
		$ROGUES_NOTEBOOK.append_page($ROGUES_VERTICAL_BOX5, Gtk::Label.new('Stun Maneuvers'))
		$ROGUES_NOTEBOOK.append_page($ROGUES_VERTICAL_BOX6, Gtk::Label.new('Subdue and Cheapshots'))
		$ROGUES_ENTRY = Hash.new 
		$ROGUES_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$ROGUES_TABLE1 = Gtk::Table.new(6, 3, false)
		$ROGUES_TABLE1.row_spacings=10
		$ROGUES_TABLE1.column_spacings=3
		$ROGUES_VERTICAL_BOX1.pack_start($ROGUES_TABLE1, false, false, 0)
		
		$ROGUES_TABLE2 = Gtk::Table.new(6, 3, false)
		$ROGUES_TABLE2.row_spacings=3
		$ROGUES_TABLE2.column_spacings=3
		$ROGUES_VERTICAL_BOX2.pack_start($ROGUES_TABLE2, false, false, 0)
		
		$ROGUES_TABLE3 = Gtk::Table.new(6, 3, false)
		$ROGUES_TABLE3.row_spacings=3
		$ROGUES_TABLE3.column_spacings=3
		$ROGUES_VERTICAL_BOX3.pack_start($ROGUES_TABLE3, false, false, 0)
		
		$ROGUES_TABLE4 = Gtk::Table.new(6, 3, false)
		$ROGUES_TABLE4.row_spacings=3
		$ROGUES_TABLE4.column_spacings=3
		$ROGUES_VERTICAL_BOX4.pack_start($ROGUES_TABLE4, false, false, 0)
		
		$ROGUES_TABLE5 = Gtk::Table.new(6, 3, false)
		$ROGUES_TABLE5.row_spacings=3
		$ROGUES_TABLE5.column_spacings=3
		$ROGUES_VERTICAL_BOX5.pack_start($ROGUES_TABLE5, false, false, 0)
		
		$ROGUES_TABLE6 = Gtk::Table.new(6, 3, false)
		$ROGUES_TABLE6.row_spacings=3
		$ROGUES_TABLE6.column_spacings=3
		$ROGUES_VERTICAL_BOX6.pack_start($ROGUES_TABLE6, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $ROGUES_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.rogues[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$ROGUES_ENTRY[variable] = entry
		$ROGUES_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$ROGUES_ENTRY = Hash.new
		add_label_entry($ROGUES_TABLE1, "Use Guild Profession Boost", 'use_guild_profession_boost')
		add_label_entry($ROGUES_TABLE1, "Limit vouchers", 'limit_vouchers')
		add_label_entry($ROGUES_TABLE1, "Sweep tasks to trade", 'sweep_tasks_to_trade')
		add_label_entry($ROGUES_TABLE1, "Subdue tasks to trade", 'subdue_tasks_to_trade')
		add_label_entry($ROGUES_TABLE1, "Stun Maneuvers tasks to trade", 'stun_maneuvers_tasks_to_trade')
		add_label_entry($ROGUES_TABLE1, "Lock Mastery tasks to trade", 'lock_mastery_tasks_to_trade')
		add_label_entry($ROGUES_TABLE1, "Cheapshots tasks to trade", 'cheapshots_tasks_to_trade')
		add_label_entry($ROGUES_TABLE1, "Gambits tasks to trade", 'gambits_tasks_to_trade')
		add_label_entry($ROGUES_TABLE1, "Universal tasks to trade", 'universal_tasks_to_trade')
		add_label_entry($ROGUES_TABLE2, "Rooms", 'hunting_area_rooms')
		add_label_entry($ROGUES_TABLE2, "Main Hand", 'hunting_main_hand')
		add_label_entry($ROGUES_TABLE2, "Off Hand", 'hunting_off_hand')
		add_label_entry($ROGUES_TABLE2, "Wait time", 'hunting_wait_time')
		add_label_entry($ROGUES_TABLE2, "Critters", 'hunting_acceptable_critters')
		add_label_entry($ROGUES_TABLE2, "Disabler", 'hunting_disabler')
		add_label_entry($ROGUES_TABLE2, "Exit", 'rogues_exit_critter_reps')
		add_label_entry($ROGUES_TABLE3, "Partner Name", 'partner_name')
		add_label_entry($ROGUES_TABLE3, "Partner Room", 'partner_room')
		add_label_entry($ROGUES_TABLE3, "Get promotions from partner", 'get_promotions_from_partner')
		add_label_entry($ROGUES_TABLE3, "Automate partner reps", 'automate_partner_reps')
		add_label_entry($ROGUES_TABLE4, "Tasks to use ;tpick for", 'tasks_to_use_tpick_for')
		add_label_entry($ROGUES_TABLE4, "Use lmas focus during picking contests", 'use_lmas_focus_picking_contests')
		add_label_entry($ROGUES_TABLE5, "Shield", 'shield_for_stunman_shield')
		add_label_entry($ROGUES_TABLE5, "Weapon", 'weapon_for_stunman_weapon')
		add_label_entry($ROGUES_TABLE5, "Stun command", 'stun_command')
		add_label_entry($ROGUES_TABLE5, "Stun item", 'stun_item')
		add_label_entry($ROGUES_TABLE6, "Weapon", 'weapon_for_subdue_and_cheapshots')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $ROGUES_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.rogues[variable].nil? ? default : UserVars.rogues[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$ROGUES_ENTRY[variable] = checkbox
		$ROGUES_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$ROGUES_WINDOW.signal_connect("delete_event") {
			$ROGUES_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {

		label = Gtk::Label.new
		label.set_markup("
		<b>Use Guild Profession Boost:</b> Enter <b>yes</b> to have script use a Guild Profession boost before turning in a task.
		Script only uses a boost if one isn't currently active and if Guild Night isn't in effect.
		
		<b>Limit vouchers:</b> Enter the most vouchers you want to use at once to get a new task,
		and whether you want the script to <b>exit</b> or <b>continue</b> after reaching this number. Separate number and action by a comma.
		For example: 5, exit
		Would have the script exit if you don't get a task you want after using 5 vouchers.
		Another example: 3, continue
		Would have the script stop trying to get another task after 3 vouchers were used and finish whatever task
		it was given last and continue on.
		The default is 10 and exit if this setting is left blank.
		
		<b>All other settings:</b>
		Enter the numbers of the tasks you want to trade.
		You can see a list of tasks and their corresponding numbers by doing ;rogues help.
		You can also see the number of the task whenever you are assigned a particular task.
		Some tasks can't be traded.
		Separate each task by a comma. For example:
		1, 3, 5
		Entered in the \"Lock Mastery\" field would trade in tasks numbered 1, 3, and 5
		Keep in mind you must wait 15 minutes for a new task after you trade in a task without a voucher.
		<b>Universal tasks</b> are tasks that are used in more than one skill, such as cleaning windows and sweeping dust.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$ROGUES_TABLE1.attach(align, 1, 2, 8, 50)
		
		label = Gtk::Label.new
		label.set_markup("
		<b>SCRIPT WILL RUN YOU BACK TO TOWN IF YOU ARE LOW ON HEALTH OR ARE BLEEDING, BUT OTHERWISE WILL NOT HEAL YOU.
		BE SURE TO KEEP AN EYE ON YOUR CHARACTER'S HEALTH WHILE SCRIPT IS IN A HUNTING AREA.</b>
		
		<b>Rooms:</b> Enter all rooms you want to look for critters in, separate each room with a comma.
		Example: 100, 101, 102, 103
		<b>Main Hand:</b> Enter NOUN of your main hand. Enter GIRD to use the in game GIRD verb instead.
		If a weapon is specified in a task (for example Subdue) then that weapon will be used when doing those tasks.
		<b>Off Hand:</b> Enter NOUN of your off hand. Enter NOUN of off hand even if you entered GIRD in the Main Hand setting.
		This is so you still grab your Off Hand if you're doing a task which requires a different weapon, such as Subdue tasks.
		<b>Wait time:</b> Enter number of seconds to wait before moving to a new room. Script will always wait a minimum of 1 second.
		<b>Critters:</b> Enter NOUN of critters you want to attack, separate each with a comma.
		Example: kobold, rolton, orc
		<b>Disabler:</b> Enter action you want to perform if your character can't reach a tall target to perform task.
		For example enter \"sweep\" and script will sweep a critter if your character can't reach them.
		Leave blank to not use a disabler.
		NOTE: You CANNOT Kneebash a prone target.
		<b>Exit:</b> Enter <b>yes</b> to have script exit when receiving a critter rep. This is so you can do the reps manually.
		Once finished start the script again and script will turn in task and continue on.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$ROGUES_TABLE2.attach(align, 1, 2, 8, 50)
		
		label = Gtk::Label.new
		label.set_markup("
		<b>Partner Name:</b> Enter name of your partner. 
		<b>Partner Room:</b> Room number your partner is in. Script will bring you to this room whenever you have a partner task.
		You can also specify the name and room when starting the script. Example:
		;rogues sweep Bob 100
		If room is not specified then the script will go to whichever room you started the script in for partner reps.
		<b>Get promotions from partner:</b> Enter <b>yes</b> to get promotions from your partner instead of the NPC.
		If your partner isn't in the designated Partner Room or they don't promote you after asking several times
		then the script will get promoted by the NPC.
		
		<b>IMPORTANT: The following value must be filled out if you are using the script to help someone with their partner tasks.</b>
		READ ALL OF THE INFORMATION
		<b>Automate partner reps:</b> Options for how automated you want script to be. Enter one of the following in this setting:
		<b>full</b> Script will automatically begin helping someone with their task when asked.
		IMPORTANT The GMs might consider this \"botting\" behavior, even if you aren't afk, which is against POLICY.
		USE AT YOUR OWN RISK.
		<b>confirm</b> Script will ask you to enter the word \"shake\" (which has no third party messaging) before script helps partner.
		This should be a safe option to avoid breaking the botting rule.
		<b>none</b> When your partner asks for help the script will remember the needed information, prompt you to restart the script, then exit.
		When restarting the script it will automatically begin helping your partner.
		This is the safest option.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$ROGUES_TABLE3.attach(align, 1, 2, 8, 50)
		
		label = Gtk::Label.new
		label.set_markup("
		<b>Tasks to use ;tpick for:</b>
		<b>Enter the numbers of the tasks you want to automate via using the script ;tpick.
		You first must download ;tpick and run ;tpick setup and fill out the settings to get this to work properly.
		The script will finish tasks by using ;tpick at the nearest locksmith pool.
		Use the same numbers as used for trading in tasks, which can be found by doing ;rogues help.
		Not all tasks can make use of ;tpick, when you are assigned the task the script will say if ;tpick can be used.
		Separate each task by a comma. For example:
		3, 5, 7
		</b>
		
		<b>Use lmas focus during picking contests</b>:
		Enter <b>yes</b> to have lmas focus up while picking locks during picking contests.
		Script will always use lmas focus for disarming the traps regardless of this setting.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$ROGUES_TABLE4.attach(align, 1, 2, 8, 50)
		
		label = Gtk::Label.new
		label.set_markup("
		<b>Shield:</b> Enter the NOUN of the shield you will be using for Shield Stun Maneuvers.
		<b>Weapon:</b> Enter the NOUN of the weapon you will be using for Weapon and Item Stun Maneuvers.
		<b>Stun command:</b> If you have an item that can stun yourself with enter how you activate it here.
		For example enter <b>rub my skull</b> if rubbing a skull stuns you.
		Leave blank if you don't own such an item and the script will buy Guildmaster's specials. You need silvers in the local bank for this option.
		<b>Stun item:</b> Enter the NOUN of the item to stun you. ONLY enter a value here if you must be holding the item.
		If you are wearing the stunning item or have no stunning item then leave this line blank.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$ROGUES_TABLE5.attach(align, 1, 2, 8, 50)
		
		label = Gtk::Label.new
		label.set_markup("
		<b>Weapon:</b> Enter the NOUN of the weapon you will be using for Subdue and Cheapshot tasks.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$ROGUES_TABLE6.attach(align, 1, 2, 8, 50)

		$ROGUES_WINDOW.show_all
	}
        
	$ROGUES_SETUP_COMPLETED = false
	until($ROGUES_SETUP_COMPLETED)
		sleep 1
	end
	
	UserVars.rogues ||= Hash.new
	$ROGUES_ENTRY.keys.each { |key|
		if( $ROGUES_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $ROGUES_ENTRY[key].active?
			UserVars.rogues[key] = $ROGUES_ENTRY[key].active?
		else
			UserVars.rogues[key] = $ROGUES_ENTRY[key].text.strip.downcase
		end
	}

	UserVars.save()
        
	Gtk.queue {
		$ROGUES_WINDOW.destroy
	}
}

Thread.new{
	loop{
		wait_until{ running? "tpick" }
		wait_until{ !running? "tpick" }
		sleep 1
		put "look"
	}
}

before_dying{
	@rogue_automate_current_task_with_tpick = nil
	@rogue_the_current_task_is_finished = nil
	rogue_put_tools_away
}

def rogue_display_message
	_respond
	longest_string = 0
	@rogue_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@rogue_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@rogue_text_to_display = Array.new
end

def rogue_move_out_of_room
	move 'out' if checkpaths 'out'
	move checkpaths.first if checkroom =~ /Dark Corner/i
end

def rogue_find_nearest_target_room (target_room_description)
	if Room.current.id.nil?
		until Room.current.id
			@rogue_text_to_display.push("This room has no room ID so ;go2 won't work.")
			@rogue_text_to_display.push("Moving to a random room to see if the issue is fixed.")
			@rogue_text_to_display.push("You might have to manually move to a room with a room ID to continue.")
			rogue_display_message
			move checkpaths[rand]
		end
	end
	@rogue_dark_corner_number += 1
	rogue_move_out_of_room
	if target_room_description == "rogue guild toolbenchs"
		target_room = Map.list.find_all { |room| room.tags.include?("#{target_room_description}") || room.tags.include?("rogue guild workshop") }
	else
		target_room = Map.list.find_all { |room| room.tags.include?("#{target_room_description}") }
	end
	if target_room.count > 0
		rogue_go_2_that_room(Room.current.find_nearest(target_room))
	else
		@rogue_text_to_display.push("The required room doesn't appear to be tagged properly.")
		@rogue_text_to_display.push("Please contact Dreaven about this issue.")
		rogue_display_message
		exit
	end
end

def rogue_go_2_that_room (room_number)
	until Room.current.id == room_number.to_i
		kill_script "go2" if running? "go2"
		wait_until { !running? "go2" }
		start_script "go2", [room_number]
		wait_while{ running?('go2') }
		sleep 0.1
		break if dead?
	end
end

def rogue_put_tools_away
	if GameObj.right_hand.name == "soft rag" || GameObj.left_hand.name == "soft rag" || GameObj.right_hand.name == "wooden broom" || GameObj.left_hand.name == "wooden broom" || GameObj.right_hand.name == "burlap bag" || GameObj.left_hand.name == "burlap bag" || GameObj.right_hand.name == "watering can" || GameObj.left_hand.name == "watering can"
		@rogue_text_to_display.push("You have guild tools in your hands.")
		@rogue_text_to_display.push("Putting the tools away in the guild tool rack before continuing on.")
		rogue_display_message
		rogue_find_nearest_target_room ("rogue guild tools")
		fput "put rag on rack" if GameObj.right_hand.name == "soft rag" || GameObj.left_hand.name == "soft rag"
		fput "put broom on rack" if GameObj.right_hand.name == "wooden broom" || GameObj.left_hand.name == "wooden broom"
		fput "put bag on rack" if GameObj.right_hand.name == "burlap bag" || GameObj.left_hand.name == "burlap bag"
		fput "put can on rack" if GameObj.right_hand.name == "watering can" || GameObj.left_hand.name == "watering can"
	end
end

def rogue_find_needed_npc (npc_name)
	@rogue_npc = nil
	until @rogue_npc
		@rogue_npc = GameObj.npcs.find{ |i| i.name =~ /#{npc_name}/i }
		sleep 0.2
	end
end

def rogue_get_a_new_task
	@rogue_text_to_display.push("Heading to nearest Guild Administrator to get a task for #{@rogue_current_skill}.")
	rogue_display_message
	rogue_find_nearest_target_room ("rogue guild administrator")
	rogue_find_needed_npc ("Training Administrator")
	fput "ask ##{@rogue_npc.id} about training #{@rogue_current_skill}"
	while line = get
		if line =~ /Repeat this .* time|You need to finish the task I gave you before you can continue/
			@rogue_current_task = "Check next task"
			break
		elsif line =~ /you need to go concentrate on your other studies for a while/
			@rogue_text_to_display.push("You can't get a task because you can't earn anymore Rogue guild ranks at the moment.")
			@rogue_text_to_display.push("Earn some more experience to unlock more guild ranks then run ;rogues again.")
			rogue_display_message
			exit
		elsif line =~ /Come back in about (.*) minute/
			if $1 == "a"
				time_to_wait = 1
			else
				time_to_wait = $1.to_i
			end
			@rogue_text_to_display.push("You recently traded a task without a voucher and must wait #{time_to_wait} minutes before getting a new task.")
			@rogue_text_to_display.push("I will wait #{time_to_wait} minutes and then ask for another task.")
			@rogue_text_to_display.push("You can instead do ;k rogues to stop this script and restart it at another time.")
			rogue_display_message
			sleep (time_to_wait * 60)
			@rogue_current_task = "Get a new task"
			break
		end
	end
end

def rogue_check_hands
	until checkright.nil?
		waitrt?
		fput "stow #{checkright}"
		sleep 0.1
	end

	until checkleft.nil?
		waitrt?
		fput "stow #{checkleft}"
		sleep 0.1
	end
end

def rogue_display_help_message
	@rogue_text_to_display.push("Lock Mastery tasks to trade:")
	@rogue_text_to_display.push("1: Pick boxes under a variety of conditions")
	@rogue_text_to_display.push("2: Pick boxes using your latest trick in front of an audience")
	@rogue_text_to_display.push("3: Pick some tough boxes from creatures")
	@rogue_text_to_display.push("4: Measure then pick tough boxes")
	@rogue_text_to_display.push("5: Calibrate calipers in the field")
	@rogue_text_to_display.push("6: Pit your skills against a footpad")
	@rogue_text_to_display.push("7: Wedge open boxes")
	@rogue_text_to_display.push("8: Repair broken lockpicks")
	@rogue_text_to_display.push("9: Relock tough boxes")
	@rogue_text_to_display.push("10: Clasp some containers")
	@rogue_text_to_display.push("11: Create lock assemblies")
	@rogue_text_to_display.push("12: Cut keys")
	@rogue_text_to_display.push("13: Gather trap components")
	@rogue_text_to_display.push("14: Melt open plated boxes")
	@rogue_text_to_display.push("15: Customize lockpicks")
	@rogue_text_to_display.push("---------------------------------------")
	@rogue_text_to_display.push("Stun Maneuvers tasks to trade:")
	@rogue_text_to_display.push("1: Let a footpad shoot arrows at you")
	@rogue_text_to_display.push("2: Self stun tasks")
	@rogue_text_to_display.push("3: Play slap hands with a footpad")
	@rogue_text_to_display.push("---------------------------------------")
	@rogue_text_to_display.push("Subdue tasks to trade:")
	@rogue_text_to_display.push("1: Crush up some garlic")
	@rogue_text_to_display.push("2: Subdue some creatures")
	@rogue_text_to_display.push("3: Ding up a few melons")
	@rogue_text_to_display.push("---------------------------------------")
	@rogue_text_to_display.push("Sweep tasks to trade:")
	@rogue_text_to_display.push("1: Practice sweeping a partner")
	@rogue_text_to_display.push("2: Defend against sweep from a partner")
	@rogue_text_to_display.push("3: Practice sweeping creatures")
	@rogue_text_to_display.push("4: Sweep dummies")
	@rogue_text_to_display.push("---------------------------------------")
	@rogue_text_to_display.push("Cheapshots tasks to trade:")
	@rogue_text_to_display.push("1: Practice cheapshots on partner")
	@rogue_text_to_display.push("2: Defend against cheapshots from a partner")
	@rogue_text_to_display.push("3: Practice cheapshots on creatures")
	@rogue_text_to_display.push("---------------------------------------")
	@rogue_text_to_display.push("Universal tasks to trade:")
	@rogue_text_to_display.push("1: Clean windows")
	@rogue_text_to_display.push("2: Sweep floors")
	@rogue_text_to_display.push("3: Water plants")
	rogue_display_message
	exit
end

def rogue_wait_for_stamina(number)
	if checkstamina < number
		@rogue_text_to_display.push("Waiting for stamina.")
		rogue_display_message
		put "whisper ooc #{@rogue_helping_partner_name} I need to wait for stamina." if @rogue_helping_partner_name
		wait_until{ checkstamina(number) }
	end
end

def rogue_check_next_task
	@rogue_dark_corner_number += 1
	@rogue_current_task = nil
	@rogue_guild_night_active = nil
	fput "gld"
	while line = get
		if line =~ /You have no guild affiliation\./
			@rogue_current_task = "Join the guild"
			break
		elsif line =~ /You currently have (\d+) task trading vouchers?\./
			@rogue_number_of_vouchers_remaining = $1.to_i
		elsif line =~ /You currently have one rank out of a possible (\d+) for your training\./
			@rogue_total_current_ranks = 1
			@rogue_total_maximum_ranks = $1.to_i
		elsif line =~ /You currently have (\d+) ranks? out of a possible (\d+) for your training\./
			@rogue_total_current_ranks = $1.to_i
			@rogue_total_maximum_ranks = $2.to_i
		elsif (line =~ /You are a Master of #{@rogue_current_skill}\./) || (line =~ /You are a Master of Cheap Shot/ && @rogue_current_skill == "Cheapshots")
			@rogue_text_to_display.push("You have already mastered #{@rogue_current_skill}! Time to work on something else!")
			rogue_display_message
			exit
		elsif line =~ /You have (.*) ranks? in the #{@rogue_current_skill} skill\./ || (line =~ /You have (.*) ranks? in the Cheap Shot skill\./ && @rogue_current_skill == "Cheapshots")
			if $1 == "no"
				@rogue_current_skill_rank = 0
			else
				@rogue_current_skill_rank = $1.to_i
			end
			@rogue_current_task = "This task isn't yet coded."
			while line = get
				if line =~ /The Training Administrator told you to visit a master footpad for a talk\.|The Training Administrator told you to visit the footpads for some lessons\.|The Training Administrator told you to get some lessons from the footpads.|The Training Administrator told you to get lessons in (Footstomp|Nosetweak|Templeshot|Kneebash|Eyepoke|Throatchop) from a master footpad./
					@rogue_current_task = "Talk to master footpad"
				#Lock Mastery:
				elsif line =~ /The Training Administrator told you to pick some .* boxes under a variety of conditions\./
					@rogue_current_task = "Pick boxes under a variety of conditions"
				elsif line =~ /The Training Administrator told you to use some .* boxes to practice your latest trick for an audience\./
					@rogue_current_task = "Pick boxes using your latest trick in front of an audience"
				elsif line =~ /The Training Administrator told you to pick some tough boxes from creatures\./
					@rogue_current_task = "Pick some tough boxes from creatures"
				elsif line =~ /The Training Administrator told you to measure some tough boxes\, then pick \'em\./
					@rogue_current_task = "Measure then pick tough boxes"
				elsif line =~ /The Training Administrator told you to calibrate your calipers out in the field\./
					@rogue_current_task = "Calibrate calipers in the field"
				elsif line =~ /The Training Administrator told you to pit your skills against a footpad\./
					@rogue_current_task = "Pit your skills against a footpad"
				elsif line =~ /The Training Administrator told you to wedge open some boxes\./
					@rogue_current_task = "Wedge open boxes"
				elsif line =~ /The Training Administrator told you to relock some tough boxes\./
					@rogue_current_task = "Relock tough boxes"
				elsif line =~ /The Training Administrator told you to put clasps on some containers\./
					@rogue_current_task = "Clasp some containers"
				elsif line =~ /The Training Administrator told you to make some good locks\./
					@rogue_current_task = "Create lock assemblies"
				elsif line =~ /The Training Administrator told you to cut keys for some locks you make\./
					@rogue_current_task = "Cut keys"
				elsif line =~ /The Training Administrator told you to melt open some plated boxes\./
					@rogue_current_task = "Melt open plated boxes"
				elsif line =~ /The Training Administrator told you to extract some poison needles or jaw traps\./
					@rogue_trap_components_needed_list = "pair of small steel jaws, slender steel needle"
					@rogue_task_for_footpad_or_administrator = "Administrator"
					@rogue_current_task = "Gather trap components"
				elsif line =~ /The Training Administrator told you to extract some acid vials\./
					@rogue_trap_components_needed_list = "clear glass vial of light yellow acid"
					@rogue_task_for_footpad_or_administrator = "Administrator"
					@rogue_current_task = "Gather trap components"
				elsif line =~ /The Training Administrator told you to extract some magic crystal trap components\./
					@rogue_trap_components_needed_list = "(small) dark crystal, (various colors of) sphere"
					@rogue_task_for_footpad_or_administrator = "Administrator"
					@rogue_current_task = "Gather trap components"
				elsif line =~ /The Training Administrator told you to extract some vials from stun clouds or fire traps\./
					@rogue_trap_components_needed_list = "thick glass vial filled with murky red liquid, green-tinted vial filled with thick acrid smoke"
					@rogue_task_for_footpad_or_administrator = "Administrator"
					@rogue_current_task = "Gather trap components"
				elsif line =~ /The Training Administrator told you to customize some lockpicks and keys\./
					@rogue_task_for_footpad_or_administrator = "Administrator"
					@rogue_current_task = "Customize lockpicks"
				#Universal:
				elsif line =~ /The Training Administrator told you to clean the windows in the guild\.|The Training Administrator told you to clean the guild windows./
					@rogue_current_task = "Clean windows"
				elsif line =~ /The Training Administrator told you to sweep the guild courtyard\./
					@rogue_current_task = "Sweep floors"
				elsif line =~ /The Training Administrator told you to water the guild plants\./
					@rogue_current_task = "Water plants"
				#Stun Maneuvers
				elsif line =~ /The Training Administrator told you to let a footpad shoot arrows at you\./
					@rogue_current_task = "Let a footpad shoot arrows at you"
				elsif line =~ /The Training Administrator told you to practice readying your shield while stunned\./
					@rogue_current_task = "Readying your shield while stunned"
				elsif line =~ /The Training Administrator told you to practice getting your weapon while stunned\./
					@rogue_current_task = "Getting your weapon while stunned"
				elsif line =~ /The Training Administrator told you to practice picking stuff up while stunned\./
					@rogue_current_task = "Picking stuff up while stunned"
				elsif line =~ /The Training Administrator told you to practice standing up while stunned\./
					@rogue_current_task = "Standing up while stunned"
				elsif line =~ /The Training Administrator told you to practice defending yourself a little more while stunned\./
					@rogue_current_task = "Defending yourself a little more while stunned"
				elsif line =~ /The Training Administrator told you to practice defending yourself a lot more while stunned\./
					@rogue_current_task = "Defending yourself a lot more while stunned"
				elsif line =~ /The Training Administrator told you to practice attacking while stunned\./
					@rogue_current_task = "Attacking while stunned"
				elsif line =~ /The Training Administrator told you to play a few rounds of slap hands with a footpad\./
					@rogue_current_task = "Play slap hands with a footpad"
				#Subdue
				elsif line =~ /The Training Administrator told you to crush up some garlic\./
					@rogue_current_task = "Crush up some garlic"
				elsif line =~ /The Training Administrator told you to try and subdue some creatures\./
					@rogue_current_task = "Subdue some creatures"
				elsif line =~ /The Training Administrator told you to ding up a few melons at the subdue mannequins\./
					@rogue_current_task = "Ding up a few melons"
				elsif line =~ /The Training Administrator told you to see one of the footpads to learn a secret./
					@rogue_current_task = "Talk to master footpad"
				#Sweep
				elsif line =~ /The Training Administrator told you to practice sweeping a partner./
					@rogue_current_task = "Practice sweeping a partner"
				elsif line =~ /The Training Administrator told you to defend against a partner./
					@rogue_current_task = "Defend against sweep from a partner"
				elsif line =~ /The Training Administrator told you to practice sweeping creatures./
					@rogue_current_task = "Practice sweeping creatures"
				elsif line =~ /The Training Administrator told you to work out on the sweep dummies./
					@rogue_current_task = "Sweep dummies"
				#Cheapshots
				elsif line =~ /The Training Administrator told you to stomp some creatures' feet./
					@rogue_current_cheapshot = "footstomp"
					@rogue_current_task = "Practice cheapshots on creatures"
				elsif line =~ /The Training Administrator told you to tweak some creatures' noses./
					@rogue_current_cheapshot = "nosetweak"
					@rogue_current_task = "Practice cheapshots on creatures"
				elsif line =~ /The Training Administrator told you to practice templeshot on some creatures./
					@rogue_current_cheapshot = "templeshot"
					@rogue_current_task = "Practice cheapshots on creatures"
				elsif line =~ /The Training Administrator told you to kneecap some creatures./
					@rogue_current_cheapshot = "kneebash"
					@rogue_current_task = "Practice cheapshots on creatures"
				elsif line =~ /The Training Administrator told you to poke some creatures in the eyes./
					@rogue_current_cheapshot = "eyepoke"
					@rogue_current_task = "Practice cheapshots on creatures"
				elsif line =~ /The Training Administrator told you to practice throatchop on creatures./
					@rogue_current_cheapshot = "throatchop"
					@rogue_current_task = "Practice cheapshots on creatures"
				elsif line =~ /The Training Administrator told you to practice defending against footstomps./
					@rogue_current_task = "Defend against cheapshots from a partner"
					@rogue_current_cheapshot = "footstomp"
				elsif line =~ /The Training Administrator told you to practice footstomping a partner./
					@rogue_current_task = "Practice cheapshots on partner"
					@rogue_current_cheapshot = "footstomp"
				#Misc
				elsif line =~ /You have earned enough training points for your next rank\./
					@rogue_current_task = "Get promotion"
					break
				elsif line =~ /You are not currently training in this skill\.|You have not been assigned a current task for this skill\.|You have not yet been assigned a task for this skill rank\./
					@rogue_current_task = "Get a new task"
					break
				elsif line =~ /You have (.*) repetitions? remaining (?:for|to complete) this task\./
					if $1 == "no"
						@rogue_reps_remaining = 0
					else
						@rogue_reps_remaining = $1.to_i
					end
					@rogue_current_task = "Current task finished" if @rogue_reps_remaining == 0
					break
				end
			end
		elsif line =~ /It is currently a Guild Night|Most guild training points awards will be doubled/
			@rogue_guild_night_active = true
		elsif line =~ /Click GLD MENU for additional commands\./
			@rogue_current_task = "Get a new task" if @rogue_current_task.nil?
			break
		end
	end
end

def rogue_turnin_current_task
	@rogue_number_of_vouchers_used = 0
	@rogue_do_not_skip_this_task = nil
	@rogue_text_to_display.push("Your current task for #{@rogue_current_skill} is finished.")
	@rogue_text_to_display.push("Let's turn it in and get a new one.")
	rogue_display_message
	rogue_find_nearest_target_room ("rogue guild administrator")
	rogue_find_needed_npc ("Training Administrator")
	fput "boost guild profession" if UserVars.rogues["use_guild_profession_boost"] =~ /yes/i && @rogue_guild_night_active.nil? && !Effects::Buffs.active?('Guild Boost')
	2.times{ fput "ask ##{@rogue_npc.id} about training #{@rogue_current_skill}" }
	exit if @rogues_exit_rogues_immediately
	@rogue_current_task = "Check next task"
end

def rogue_get_promotion
	need_the_npc_guild_master = true
	got_promoted = nil
	if @rogue_get_promotion_from_partner
		need_the_npc_guild_master = nil
		@rogue_text_to_display.push("Getting a promotion in #{@rogue_current_skill} from your partner.")
		rogue_display_message
		rogue_go_2_that_room (@rogue_partner_room_number)
		sleep 1
		if !checkpcs.include?(@rogue_partner_name)
			@rogue_text_to_display.push("Your partner isn't in the designated \"Partner Room\".")
			@rogue_text_to_display.push("I will wait 10 seconds to see if your partner arrives.")
			rogue_display_message
			10.times{
				break if checkpcs.include?(@rogue_partner_name)
				sleep 1
			}
		end
		if !checkpcs.include?(@rogue_partner_name)
			need_the_npc_guild_master = true
			@rogue_text_to_display.push("Partner is still not here. Getting a promotion from the Guild Master.")
			rogue_display_message
		else
			@rogue_text_to_display.push("Your partner is here now.")
			@rogue_text_to_display.push("I will try 3 times every 10 seconds before I move on to the NPC Guild Master.")
			rogue_display_message
			3.times{
				result = dothistimeout "whisper ooc #{@rogue_partner_name} Can you please promote me in #{@rogue_current_skill}?", 10, /^#{@rogue_partner_name} offers to promote you to your next rank in/
				if result =~ /^#{@rogue_partner_name} offers to promote you to your next rank in/
					fput "gld accept"
					got_promoted = true
					break
				end
			}
			need_the_npc_guild_master = true if got_promoted.nil?
		end
	end
	if need_the_npc_guild_master
		@rogue_text_to_display.push("Getting a promotion in #{@rogue_current_skill} from a Guild Master.")
		rogue_display_message
		rogue_find_nearest_target_room ("rogue guild master")
		rogue_find_needed_npc ("Guild Master")
		fput "ask ##{@rogue_npc.id} about next in #{@rogue_current_skill}"
		while line = get
			if line =~ /You need to learn (.*) rank\(s\) of other skills before I can promote you in this skill again/
				@rogue_text_to_display.push("You need to get #{$1} ranks in other skills before you can rank up in #{@rogue_current_skill} again.")
				rogue_display_message
				exit
			elsif line =~ /Congratulations\, .*\, for achieving/
				break
			elsif line =~ /Congratulations, .*\, for mastering this skill\!/
				@rogue_text_to_display.push("Congratulations! You have mastered #{@rogue_current_skill}!")
				rogue_display_message
				exit
			elsif line =~ /says, \"You need to be checked in, first.\"/
				rogue_checkin_for_guild_dues
				break
			end
		end
	end
	@rogue_current_task = "Check next task"
end

def rogue_task_is_not_yet_coded
	@rogue_text_to_display.push("This task isn't yet coded. Look for future updates to ;rogues.")
	rogue_display_message
	exit
end

def rogue_trade_in_current_task
	rogue_find_nearest_target_room ("rogue guild administrator")
	rogue_find_needed_npc ("Training Administrator")
	fput "ask ##{@rogue_npc.id} about trade in #{@rogue_current_skill}"
	@rogue_current_task = "Get a new task"
end

def rogue_withdraw_silvers_from_bank (amount)
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
	fput "withdraw #{amount} silvers"
	enough_silvers = nil
	fput "wealth quiet"
	while line = get
		if line =~ /You have no silver with you.|You have but one silver with you./
			break
		elsif line =~ /You have (.*) silver with you./
			enough_silvers = true if $1.delete(",").to_i >= amount
			break
		end
	end
	if enough_silvers.nil?
		if @rogue_current_task == "Join the guild"
			@rogue_text_to_display.push("It costs 15,000 silvers to join the Rogue Guild and you don't seem to have enough silvers.")
			@rogue_text_to_display.push("Once you have deposited 15,000 silvers in the local bank then run the script again.")
		else
			@rogue_text_to_display.push("You don't have enough silvers to finish this task.")
			@rogue_text_to_display.push("Start script again after you have deposited at least 15,000 silvers in the local bank.")
		end
		rogue_display_message
		exit
	end
end

def rogue_join_the_guild
	@rogue_text_to_display.push("You haven't yet joined the Rogue Guild! Let's fix that.")
	rogue_display_message
	rogue_withdraw_silvers_from_bank (15000)
	@rogue_text_to_display.push("Got the silvers needed to join the Rogue Guild, so let's go join!")
	rogue_display_message
	rogue_find_nearest_target_room ("rogue guild master")
	rogue_find_needed_npc ("Guild Master")
	fput "ask ##{@rogue_npc.id} about membership"
	waitfor "Enter GLD ACCEPT to join this guild."
	fput "gld accept"
	@rogue_text_to_display.push("Excellent! You are now a member of the Rogue Guild!")
	@rogue_text_to_display.push("Now let's get to training!")
	rogue_display_message
	@rogue_current_task = "Get a new task"
end

def rogue_make_wooden_wedges (number)
	if @rogue_current_task == "Make wooden wedges"
		@rogue_text_to_display.push("Going to create #{number} wedges of at least \"#{@rogue_required_wedge_quality}\" quality.")
	else
		@rogue_text_to_display.push("Going to create #{number} wedges.")
	end
	rogue_display_message
	if @rogue_current_task == "Make wooden wedges"
		silvers_needed_per_wedge = 600
	else
		silvers_needed_per_wedge = 300
	end
	rogue_withdraw_silvers_from_bank (number * silvers_needed_per_wedge)
	rogue_find_nearest_target_room ("rogue guild toolbenchs")
	fput "go toolbench"
	@rogue_created_wedges = Array.new
	#if @rogue_current_task == "Make wooden wedges"
	#	loop{
	#		rogue_check_hands
	#		waitrt?
	#		fput "get my wedge"
	#		15.times{
	#			break if checkright || checkleft
	#			sleep 0.1	
	#		}
	#		break if checkright.nil? && checkleft.nil?
	#		fput "drop my wedge"
	#	}
	#end
	order_number = nil
	number_of_acceptable_wedges_created = 0
	loop{
		rogue_check_hands
		if order_number.nil?
			fput "read sign"
			while line = get
				if line =~ /(\d+)\.\) an uncarved wooden block\s+(\d+)/
					order_number = $1.to_i
					break
				end
			end
		end
		fput "order #{order_number}"
		fput "buy"
		while line = get
			if line =~ /A workshop attendant accepts your silvers\./
				break
			elsif line =~ /But you don\'t have enough\!/
				rogue_withdraw_silvers_from_bank (number * silvers_needed_per_wedge)
				rogue_find_nearest_target_room ("rogue guild toolbenchs")
				fput "go toolbench"
				fput "order #{order_number}"
				fput "buy"
				break
			end
		end
		tasks_to_perform = [ "carve my block", "carve my wedge", "rub my wedge" ]
		tasks_to_perform.each{ |task|
			loop{
				waitrt?
				result = dothistimeout "#{task}", 5, /Maybe if you were holding it first.|You can\'t carve that\!|You should RUB the wedge now\.|\(RUB the wedge in a guild workshop\)|Your .*wedge is ready for use\!|You rub .*wedge in your hand\.|Roundtime/
				if result =~ /Maybe if you were holding it first.|You can\'t carve that\!|You should RUB the wedge now\.|\(RUB the wedge in a guild workshop\)|Your .*wedge is ready for use\!|You rub .*wedge in your hand\./
					break
				elsif result =~ /Roundtime/
					nil
				end
			}
		}
		quality_of_current_wedge = nil
		until quality_of_current_wedge
			waitrt?
			result = dothistimeout "rub my wedge", 2, /You rub an? (.*) in your hand\./
			quality_of_current_wedge = $1 if result =~ /You rub an? (.*) in your hand\./
		end
		if @rogue_wedge_quality_data.index(quality_of_current_wedge).nil?
			@rogue_text_to_display.push("Either the quality of wedge you created isn't in my data or this is a bug.")
			@rogue_text_to_display.push("Either way please reach out to Dreaven and inform him you received this message.")
			@rogue_text_to_display.push("Also let him know the quality of wedge you created, which is: #{GameObj.right_hand.name}")
			quality_of_current_wedge = "superior wooden wedge"
			rogue_display_message
		end
		if @rogue_current_task == "Make wooden wedges"
			if @rogue_wedge_quality_data.index(quality_of_current_wedge) >= @rogue_wedge_quality_data.index(@rogue_required_wedge_quality)
				number_of_acceptable_wedges_created += 1
				@rogue_created_wedges.push(GameObj.right_hand.id)
			else
				fput "drop my wedge"
			end
		else
			number_of_acceptable_wedges_created += 1 
		end
		break if number_of_acceptable_wedges_created >= number
	}
	rogue_check_hands
	rogue_move_out_of_room
	exit if @rogue_current_skill == "Wedge"
end

def rogue_checkin_for_guild_dues
	@rogue_text_to_display.push("Finding nearest Rogue Guild Master to checkin for 3 months.")
	rogue_display_message
	rogue_withdraw_silvers_from_bank (15000)
	rogue_find_nearest_target_room ("rogue guild master")
	rogue_find_needed_npc ("Guild Master")
	3.times{ fput "ask ##{@rogue_npc.id} about checkin" }
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
end

def rogue_buy_lockpicks_to_break
	@rogue_text_to_display.push("Let's buy you some cheap lockpicks to break.")
	rogue_display_message
	rogue_withdraw_silvers_from_bank (@rogue_reps_remaining * 1000)
	rogue_find_nearest_target_room ("locksmith")
	order_number = nil
	@rogue_lockpicks_to_break_and_repair = Array.new
	@rogue_reps_remaining.times{
		if order_number.nil?
			fput "order"
			while line = get
				if line =~ /(\d+)\. .*steel/
					order_number = $1.to_i
					break
				end
			end
		end
		fput "order #{order_number}"
		fput "buy"
		wait_until{ checkright }
		@rogue_lockpicks_to_break_and_repair.push(GameObj.right_hand.id)
		until checkright.nil?
			waitrt?
			fput "stow right"
			sleep 0.2
		end
	}
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
	@rogue_text_to_display.push("Now let's break these picks!")
end

def rogue_ask_footpad_to_train
	@rogue_npc = GameObj.npcs.find{ |i| i.name =~ /Master Footpad/i }
	if @rogue_npc.nil?
		@rogue_text_to_display.push("Waiting for a master footpad to show up.")
		rogue_display_message
		until @rogue_npc
			@rogue_npc = GameObj.npcs.find{ |i| i.name =~ /Master Footpad/i }
			sleep 0.2
		end
	end
	fput "ask ##{@rogue_npc.id} about train #{@rogue_current_skill}"
end

def rogue_check_for_needed_item(item_name, item_type)
	missing_item = nil
	missing_item = true if item_name.length < 1
	if missing_item
		@rogue_text_to_display.push("You must set a #{item_type} to use in the setup menu by doing ;rogues setup.")
		@rogue_text_to_display.push("Then go to the \"#{@rogue_current_skill}\" tab and fill out the \"#{item_type}\" setting.")
		@rogue_text_to_display.push("Be sure to have this #{item_type} with you when doing #{@rogue_current_skill} which requires a #{item_type}.")
		rogue_display_message
		rogue_move_out_of_room
		exit
	end
	rogue_check_hands
	fput "get my #{item_name}"
	fput "remove my #{item_name}"
	sleep 1
	if checkright != item_name && checkleft != item_name
		@rogue_text_to_display.push("Could not find your #{item_type} for \"#{@rogue_current_skill}\".")
		@rogue_text_to_display.push("Be sure it is in an open container.")
		rogue_display_message
		rogue_move_out_of_room
		exit
	end
	rogue_check_hands unless @rogue_current_skill == "Subdue" || @rogue_current_skill == "Cheapshots"
end

def rogue_first_lmas_task
	table = GameObj.loot.find{ |i| i.name =~ /table/ }
	table = GameObj.room_desc.find{ |i| i.name =~ /table/ } if table.nil?
	until table.contents
		fput "look on ##{table.id}"
		sleep 0.1
	end
	fput "get lockpick from table"
	wait_until{ checkright }
	table.contents.each{ |i|
		waitrt?
		fput "pick ##{i.id}" 
	}
	until checkright.nil?
		waitrt?
		fput "give lockpick to ##{@rogue_npc.id}"
		sleep 0.1
	end
	waitfor "escorts you back to the training area."
end

def rogue_lmas_sense_task1
	fput "lmaster sense"
	while line = get
		if line =~ /As far as you can tell\, the area around you (?:has|is) (.*)\./
			fput "say #{$1}"
		elsif line =~ /\[You have (\d+) repetitions? remaining\.\]/
			fput "lmaster sense"
		elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	end
end

def rogue_lmas_sense_task2
	stuff_to_say = nil
	fput "lmaster sense"
	while line = get
		if line =~ /As far as you can tell\, the area around you (?:has|is) (.*)\./
			stuff_to_say = "#{$1}, "
			start_time = Time.now
			Thread.new{
				sleep 3
				put "look"
			}
			put "spell active"
			while line = get
				if line =~ /Presence/
					stuff_to_say += "Presence, "
				elsif line =~ /Sounds/
					stuff_to_say += "Sounds, "
				elsif line =~ /Weapon Deflection/
					stuff_to_say += "Weapon Deflection, "
				elsif line =~ /Interference/
					stuff_to_say += "Interference, "
				elsif line =~ /Song of Luck/
					stuff_to_say += "Song of Luck, "
				elsif line =~ /Self Control/
					stuff_to_say += "Self Control, "
				elsif line =~ /Lock Pick Enhancement/
					stuff_to_say += "Lock Pick Enhancement, "
				elsif line =~ /Disarm Enhancement/
					stuff_to_say += "Disarm Enhancement, "
				elsif Time.now > start_time + 2
					break
				end				
			end
			fput "say #{stuff_to_say.chop!.chop!}"
		elsif line =~ /\[You have (\d+) repetitions? remaining\.\]/
			stuff_to_say = nil
			if @rogue_sense_task_5_current_task
				@rogue_sense_task_5_current_task = nil
				break
			else
				fput "lmaster sense"
			end
		elsif line =~ /Try sensing again\.|sense again/
			stuff_to_say = nil
			fput "lmaster sense"
		elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			@rogue_sense_task_5_current_task = "finished"
			break
		end
	end
end

def rogue_lmas_sense_task3
	fput "lmaster sense"
	while line = get
		if line =~ /Under the current conditions\, you think you could probably handle (.*) trap/
			fput "say #{$1} trap"
		elsif line =~ /\[You have (\d+) repetitions? remaining\.\]/
			if @rogue_sense_task_5_current_task
				@rogue_sense_task_5_current_task = nil
				break
			else
				fput "lmaster sense"
			end
		elsif line =~ /Try sensing again\.|sense again/
			fput "lmaster sense"
		elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			@rogue_sense_task_5_current_task = "finished"
			break
		end
	end
end

def rogue_lmas_sense_task4
	fput "lmaster sense"
	while line = get
		if line =~ /Under the current conditions\, you think you could probably handle .* trap and an? (.*) with .*\./
			fput "say #{$1}"
		elsif line =~ /\[You have (\d+) repetitions? remaining\.\]/
			if @rogue_sense_task_5_current_task
				@rogue_sense_task_5_current_task = nil
				break
			else
				fput "lmaster sense"
			end
		elsif line =~ /Try sensing again\.|sense again/
			fput "lmaster sense"
		elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			@rogue_sense_task_5_current_task = "finished"
			break
		end
	end
end

def rogue_lmas_sense_task5
	loop{
		if @rogue_sense_task_5_current_task == "finished"
			break
		elsif @rogue_sense_task_5_current_task.nil?
			while line = get
				if line =~ /room conditions/
					@rogue_sense_task_5_current_task = "room conditions"
					break
				elsif line =~ /going for the best trap you can get/
					@rogue_sense_task_5_current_task = "best trap"
					break
				elsif line =~ /going for the best lock you can get/
					@rogue_sense_task_5_current_task = "best lock"
					break
				end
			end
		end
		if @rogue_sense_task_5_current_task == "room conditions"
			rogue_lmas_sense_task2
		elsif @rogue_sense_task_5_current_task == "best trap"
			rogue_lmas_sense_task3
		elsif @rogue_sense_task_5_current_task == "best lock"
			rogue_lmas_sense_task4
		end
	}
	@rogue_sense_task_5_current_task = nil
end

def rogue_lmas_measure_box
	wait_for_line = nil
	all_finished = nil
	loop{
		waitrt?
		fput "get calipers from table" if checkright !~ /calipers/ && checkleft !~ /calipers/
		result = dothistimeout "lmas measure box", 20, /Measuring carefully\, it looks to be an? (.*) \(.* in thief\-lingo difficulty ranking\)\.|\[You have .* repetitions? remaining\.\]|Give it another shot|try again|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /Measuring carefully\, it looks to be an? (.*) \(.* in thief\-lingo difficulty ranking\)\./
			fput "say #{$1}"
			wait_for_line = true
		end
		if wait_for_line
			wait_for_line = nil
			while line = get
				if line =~ /\[You have .* repetitions? remaining\.\]|try again|Give it another shot/
					break
				elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
					all_finished = true
					break
				end
			end
		end
		break if all_finished
		sleep 0.1
	}
end

def rogue_lmas_measure_and_pick_box
	wait_for_line = nil
	all_finished = nil
	fput "get calipers from table"
	fput "lmaster calibrate my calipers"
	waitrt?
	loop{
		result = dothistimeout "lmas measure box", 20, /Measuring carefully\, it looks to be an? (.*) \(.* in thief\-lingo difficulty ranking\)\./
		wait_for_line = true if result =~ /Measuring carefully\, it looks to be an? (.*) \(.* in thief\-lingo difficulty ranking\)\./
		if wait_for_line
			until checkright.nil? && checkleft.nil?
				waitrt?
				fput "put calipers on table"
				sleep 0.2
			end
			until checkright
				waitrt?
				fput "get vaalin lockpick from table"
				sleep 0.2
			end
			loop{
				waitrt?
				result = dothistimeout "pick box", 5, /It opens|Roundtime/
				if result =~ /It opens/
					break
				elsif result =~ /Roundtime/
					nil
				end
			}
			waitrt?
			until checkright.nil? && checkleft.nil?
				waitrt?
				fput "put lockpick on table"
				sleep 0.2
			end
			until checkright
				waitrt?
				fput "get calipers from table"
				sleep 0.2
			end
			loop{
				waitrt?
				result = dothistimeout "lmaster calibrate my calipers", 15, /but you\'re not that good|Roundtime/
				if result =~ /but you\'re not that good/
					break
				elsif result =~ /Roundtime/
					nil
				end
			}
			loop{
				waitrt?
				result = dothistimeout "give my calipers to ##{@rogue_npc.id}", 15, /\[You have .* repetitions? remaining\.\]|This still needs some work|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
				if result =~ /\[You have .* repetitions? remaining\.\]|This still needs some work/
					break
				elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
					all_finished = true
					break
				end
			}
		end
		waitrt?
		if all_finished
			break
		else
			until checkright
				waitrt?
				fput "get calipers from table"
				sleep 0.2
			end
		end
		sleep 0.1
	}
end

def rogue_create_wedges_for_task
	rogue_make_wooden_wedges (@rogue_reps_remaining)
	rogue_find_nearest_target_room ("rogue guild trainer")
	rogue_ask_footpad_to_train
	while line = get
		break if line =~ /\"If you gots a wedge for me\, hand it over\.\"|I\'ll accept a warped one|have to be at least of solid construction/
	end
	@rogue_created_wedges.each{ |wedge|
		fput "get ##{wedge}"
		wait_until { checkright || checkleft }
		fput "give my wedge to ##{@rogue_npc.id}"
		fput "drop my wedge"
	}
end

def rogue_appraise_lockpicks_with_footpad
	all_finished = nil
	loop{
		loop{
			waitrt?
			fput "get lockpick from table"
			15.times{
				break if checkright || checkleft
				sleep 0.1
			}
			break if checkright || checkleft
		}
		loop{
			waitrt?
			result = dothistimeout "lmas appraise my lockpick", 3, /Roundtime/
			break if result =~ /Roundtime/
		}
		loop{
			waitrt?
			result = dothistimeout "give my lockpick to ##{@rogue_npc.id}", 3, /\[You have \d+ repetitions? remaining\.\]|Try one more|Lemme rearrange these|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			if result =~ /\[You have \d+ repetitions? remaining\.\]|Try one more|Lemme rearrange these/
				break
			elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
				all_finished = true
				break
			end
			break if (checkright.nil? && checkleft.nil?)
		}
		break if all_finished
	}
end

def rogue_relock_boxes_with_footpad
	fput "get my lockpick"
	wait_until{ checkright }
	all_finished = nil
	loop{
		loop{
			waitrt?
			result = dothistimeout "lmas relock box on table", 3, /It locks\!/
			break if result =~ /It locks\!/
		}
		until checkleft
			waitrt?
			fput "get box from table"
			sleep 0.2
		end
		loop{
			waitrt?
			result = dothistimeout "give my box to ##{@rogue_npc.id}", 3, /\[You have .* repetitions? remaining\.\]|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			if result =~ /\[You have .* repetitions? remaining\.\]/
				break
			elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
				all_finished = true
				break
			end
			break if checkleft.nil?
		}
		break if all_finished
	}
	rogue_check_hands
end

def rogue_clasp_some_containers
	@rogue_text_to_display.push("Buying some cheap containers to add clasps to.")
	rogue_display_message
	rogue_withdraw_silvers_from_bank (@rogue_reps_remaining * 1300)
	rogue_find_nearest_target_room ("rogue guild shop")
	order_number = nil
	created_items_array = Array.new
	@rogue_reps_remaining.times{
		rogue_check_hands
		if order_number.nil?
			fput "order"
			while line = get
				if line =~ /(\d+)\. an? (\D+ )?sack\s*/
					order_number = $1.to_i
					break
				end
			end
		end
		fput "order #{order_number}"
		fput "buy"
		wait_until{ checkright }
		created_items_array.push(GameObj.right_hand.id)
		fput "stow right"
	}
	rogue_find_nearest_target_room ("rogue guild toolbenchs")
	fput "go toolbench"
	order_number = nil
	number = 0
	created_items_array.each{ |sack|
		@rogue_text_to_display.push("#{created_items_array.count - number} more sacks to add a clasp to.")
		rogue_display_message
		number += 1
		rogue_check_hands
		until checkright
			waitrt?
			fput "get ##{sack}"
			sleep 0.3
		end
		if order_number.nil?
			fput "read sign"
			while line = get
				if line =~ /(\d+)\.\) a slate grey steel clasp \s+(\d+)/
					order_number = $1.to_i
					break
				end
			end
		end
		fput "order #{order_number}"
		fput "buy"
		wait_until{ checkright && checkleft }
		loop{
			waitrt?
			result = dothistimeout "lmas clasp remove my sack", 3, /To confirm your choice\, enter LMASTER CLASP REMOVE my sack within 90 seconds\.|you carefully remove the clasp|does not have a clasp to remove/
			if result =~ /To confirm your choice\, enter LMASTER CLASP REMOVE my sack within 90 seconds\.|you carefully remove the clasp/
				nil
			elsif result =~ /does not have a clasp to remove/
				break
			end
		}
		until checkleft.nil?
			waitrt?
			fput "lmas clasp my sack"
			sleep 0.2
		end
		if @rogue_task_for_footpad_or_administrator == "Footpad"
			action_to_do = "stow"
		else
			action_to_do = "drop"
		end
		until checkright.nil?
			waitrt?
			fput "#{action_to_do} ##{sack}"
			sleep 0.3
		end
	}
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
	if @rogue_task_for_footpad_or_administrator == "Footpad"
		rogue_find_nearest_target_room ("rogue guild trainer")
		rogue_ask_footpad_to_train
		waitfor "it's useful to keep your containers closed"
		created_items_array.each{ |sack|
			rogue_check_hands
			until checkright
				waitrt?
				fput "get ##{sack}"
				sleep 0.3
			end
			fput "give ##{sack} to ##{@rogue_npc.id}"
			sleep 0.3
			fput "drop ##{sack}"
		}
	end
end

def rogue_create_lockpicks_for_task
	if @rogue_current_task == "Create lockpicks"
		@rogue_text_to_display.push("Creating some lockpicks.")
	elsif @rogue_current_task == "Customize lockpicks"
		@rogue_text_to_display.push("Creating then customizing some lockpicks.")
	end
	rogue_display_message
	rogue_withdraw_silvers_from_bank (@rogue_reps_remaining * 300)
	created_items_array = Array.new
	rogue_find_nearest_target_room ("rogue guild toolbenchs")
	fput "go toolbench"
	order_number = nil
	@rogue_reps_remaining.times{
		if @rogue_current_task == "Create lockpicks"
			@rogue_text_to_display.push("#{@rogue_reps_remaining - created_items_array.count} more lockpicks to create.")
		elsif @rogue_current_task == "Customize lockpicks"
			@rogue_text_to_display.push("#{@rogue_reps_remaining - created_items_array.count} more lockpicks to create and customize.")
		end
		rogue_display_message
		rogue_check_hands
		if order_number.nil?
			fput "read sign"
			while line = get
				if line =~ /(\d+)\.\) a thin bar of copper\s+(\d+)/
					order_number = $1.to_i
					break
				end
			end
		end
		fput "order #{order_number}"
		fput "buy"
		wait_until{ checkright }
		until checkright.nil?
			fput "lmas create"
			sleep 0.2
			waitrt?
		end
		if @rogue_current_task == "Create lockpicks"
			created_items_array.push(GameObj.left_hand.id) if checkleft
			until checkleft.nil?
				waitrt?
				fput "stow ##{GameObj.left_hand.id}"
				sleep 0.2
			end
		elsif @rogue_current_task == "Customize lockpicks"
			if checkleft
				fput "swap"
				2.times{ fput "lmas customize edge brass" }
				created_items_array.push(GameObj.right_hand.id)
				until checkright.nil?
					waitrt?
					if @rogue_task_for_footpad_or_administrator == "Footpad"
						fput "stow ##{GameObj.right_hand.id}"
					else
						fput "drop ##{GameObj.right_hand.id}"
					end
					sleep 0.2
				end
			end
		end
	}
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
	if @rogue_task_for_footpad_or_administrator == "Footpad"
		rogue_find_nearest_target_room ("rogue guild trainer")
		rogue_ask_footpad_to_train
		while line = get
			break if line =~ /while going to your local professional and picking up a lockpick|Now it\'s time to exercise your creative side/
		end
		created_items_array.each{ |lockpick|
			rogue_check_hands
			until checkright
				waitrt?
				fput "get ##{lockpick}"
				sleep 0.3
			end
			fput "give ##{lockpick} to ##{@rogue_npc.id}"
			sleep 0.3
			fput "drop ##{lockpick}"
		}
	end
end

def rogue_create_lock_assemblies
	@rogue_text_to_display.push("Creating some lock assemblies.")
	rogue_display_message
	if @rogue_task_for_footpad_or_administrator == "Administrator" && CharSettings['been_warned_about_lock_assemblies'].nil?
		@rogue_text_to_display.push("This task can get very expensive depending on your skill.")
		@rogue_text_to_display.push("The higher your skill in Picking Locks the more expensive it is to do these tasks.")
		@rogue_text_to_display.push("70 ranks in Picking Locks will only cost around 1200 silvers per rep.")
		@rogue_text_to_display.push("But 300 ranks in Picking Locks can cost around 8000 silvers PER REP.")
		@rogue_text_to_display.push("")
		@rogue_text_to_display.push("Be sure to keep an eye out to ensure you are gaining reps while doing this task.")
		@rogue_text_to_display.push("If you are not then stop the script and contact Dreaven about the issue.")
		@rogue_text_to_display.push("")
		@rogue_text_to_display.push("If you wish to proceed with this task simply NOD.")
		@rogue_text_to_display.push("Otherwise do ;k rogues and add this task to your list of tasks to skip.")
		rogue_display_message
		waitfor "You nod."
		CharSettings['been_warned_about_lock_assemblies'] = true
		@rogue_text_to_display.push("Sounds good! From now on you will automatically finish these tasks.")
		@rogue_text_to_display.push("You won't receive this warning message anymore.")
		rogue_display_message
		sleep 2
	end
	if @rogue_task_for_footpad_or_administrator == "Footpad"
		lock_to_create = ((Skills.to_bonus(Skills.pickinglocks) / 5) * 5) - 50
		rogue_withdraw_silvers_from_bank (@rogue_reps_remaining * 6000)
	else
		lock_to_create = ((Skills.to_bonus(Skills.pickinglocks) * 2.00) / 5).to_i * 5
		rogue_withdraw_silvers_from_bank (40000)
	end
	rogue_find_nearest_target_room ("rogue guild toolbenchs")
	created_items_array = Array.new
	fput "go toolbench"
	number = @rogue_reps_remaining
	@rogue_reps_remaining.times{
		@rogue_text_to_display.push("#{number} more lock assemblies to make.")
		rogue_display_message
		number -= 1
		loop{
			waitrt?
			result = dothistimeout "lmas lock create #{lock_to_create}", 3, /If this price is acceptable|Roundtime|But you don't have enough!/
			if result =~ /If this price is acceptable/
				nil
			elsif result =~ /Roundtime|But you don't have enough!/
				break
			end
		}
		wait_until{ checkright }
		created_items_array.push(GameObj.right_hand.id)
		rogue_check_hands
		if @rogue_task_for_footpad_or_administrator == "Administrator"
			rogue_move_out_of_room
			until checkright
				waitrt?
				fput "get my assembly"
				sleep 0.3
			end
			2.times{ fput "give my assembly to attendant" }
			fput "go toolbench"
		end
	}
	rogue_move_out_of_room
	if @rogue_task_for_footpad_or_administrator == "Footpad"
		@rogue_text_to_display.push("Handing assemblies to a footpad.")
		rogue_display_message
		rogue_find_nearest_target_room ("rogue guild trainer")
		rogue_ask_footpad_to_train
		waitfor "we like to make sure there're enough freelance lockmakers around to keep the system running smoothly"
		created_items_array.each{ |item|
			until checkright
				waitrt?
				fput "get ##{item}"
				sleep 0.3
			end
			fput "give ##{item} to ##{@rogue_npc.id}"
			rogue_check_hands
		}
		rogue_move_out_of_room
		@rogue_text_to_display.push("Selling assemblies back to the attendant to get some of your silvers back.")
		rogue_display_message
		rogue_find_nearest_target_room ("rogue guild toolbenchs")
		created_items_array.each{ |item|
			until checkright
				waitrt?
				fput "get ##{item}"
				sleep 0.3
			end
			2.times{ fput "give ##{item} to attendant" }
			rogue_check_hands
		}
	end
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
end

def rogue_turn_in_trap_components
	if @rogue_trap_components_first_turnin
		@rogue_trap_components_first_turnin = nil
		numbers_to_try = [ "first", "second", "third", "fourth", "fifth", "sixth", "seventh" ]
		all_done = nil
		@rogue_trap_components_needed_names.each{ |component|
			break if all_done
			numbers_to_try.each{ |number|
				waitrt?
				fput "get my #{number} #{component}"
				5.times{
					break if checkright
					sleep 0.1
				}
				if checkright.nil?
					break
				else
					result = dothistimeout "give my #{component} to ##{@rogue_npc.id}", 2, /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]|\[You have (\d+) repetitions? remaining\.\]|doesn\'t smell very fresh to me|glances at you and moves out of your reach/
					if result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
						all_done = true
						@rogue_reps_remaining = 0
					elsif result =~ /\[You have (\d+) repetitions? remaining\.\]/
						@rogue_reps_remaining = $1.to_i
					elsif result =~ /doesn\'t smell very fresh to me|glances at you and moves out of your reach/
						nil
					end
				end
				rogue_check_hands
				break if all_done
			}
		}
	end
	if @rogue_trap_components_needed_array.count > 0 && @rogue_reps_remaining > 0
		@rogue_trap_components_needed_array.each{ |component|
			waitrt?
			fput "get ##{component}"
			fput "give ##{component} to ##{@rogue_npc.id}"
			fput "stow ##{component}"
			rogue_check_hands
		}
	end
	@rogue_trap_components_needed_array = Array.new
	rogue_move_out_of_room
end

def rogue_cut_keys
	@rogue_text_to_display.push("Cutting some keys.")
	rogue_display_message
	rogue_withdraw_silvers_from_bank (5000)
	rogue_find_nearest_target_room ("rogue guild toolbenchs")
	order_number = nil
	fput "go toolbench"
	loop{
		waitrt?
		result = dothistimeout "lmas lock create 10", 3, /If this price is acceptable|Roundtime/
		if result =~ /If this price is acceptable/
			nil
		elsif result =~ /Roundtime/
			break
		end
	}
	rogue_check_hands
	until checkright
		waitrt?
		fput "get my assembly"
		sleep 0.3
	end
	number = @rogue_reps_remaining
	@rogue_reps_remaining.times{
		if order_number.nil?
			fput "read sign"
			while line = get
				if line =~ /(\d+)\.\) a steel key blank\s+(\d+)/
					order_number = $1.to_i
					break
				end
			end
		end
		@rogue_text_to_display.push("#{number} more keys to make.")
		rogue_display_message
		number -= 1
		fput "order #{order_number}"
		fput "buy"
		wait_until{ checkleft }
		loop{
			waitrt?
			result = dothistimeout "lmas cut", 3, /Roundtime/
			break if result =~ /Roundtime/
		}
		until checkleft.nil?
			waitrt?
			fput "drop my key"
			sleep 0.3
		end
	}
	rogue_move_out_of_room
	2.times{ fput "give my assembly to attendant" }
	rogue_find_nearest_target_room ("bank")
	fput "depo all"
end

def rogue_cheapshot_footpads
	fput "stance offensive" if checkstance != "offensive"
	fput "gld stance offensive"
	loop{
		rogue_stand_up
		rogue_wait_for_stamina(15)
		result = dothistimeout "cheapshot #{@rogue_current_cheapshot} ##{@rogue_npc.id}", 3, /You do not know how to .* barehanded yet!|Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /You do not know how to .* barehanded yet!/
			rogue_check_for_needed_item(UserVars.rogues["weapon_for_subdue_and_cheapshots"], "weapon") if checkright != UserVars.rogues["weapon_for_subdue_and_cheapshots"] && checkleft != UserVars.rogues["weapon_for_subdue_and_cheapshots"]
		elsif result =~ /Roundtime/
			waitrt?
		elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	}
end

def rogue_sweep_footpads
	fput "stance defensive" if checkstance != "defensive"
	fput "gld stance offensive"
	attacking_or_defending = nil
	loop{
		rogue_stand_up
		if attacking_or_defending == "defending"
			waitrt?
			fput "stance defensive" if checkstance != "defensive"
			waitfor "SMR result"
			attacking_or_defending = nil
		end
		waitrt?
		rogue_stand_up
		rogue_wait_for_stamina(15)
		fput "stance offensive" if checkstance != "offensive"
		result = dothistimeout "sweep ##{@rogue_npc.id}", 3, /hasn\'t instructed you to do that yet|is lying down|Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /Roundtime/
			waitrt?
		elsif result =~ /hasn\'t instructed you to do that yet/
			attacking_or_defending = "defending"
		elsif result =~ /is lying down/
			waitfor "stands back up"
		elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	}
end

def rogue_subdue_footpad_tasks
	rogue_check_hands
	loop{
		fput "stance offensive" if checkstance != "offensive"
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_subdue_and_cheapshots"], "weapon") if checkright != UserVars.rogues["weapon_for_subdue_and_cheapshots"] && checkleft != UserVars.rogues["weapon_for_subdue_and_cheapshots"]
		until hiding?
			waitrt?
			sleep 0.2
			fput "hide"
		end
		waitrt?
		result = dothistimeout "subdue mannequin", 3, /Try hiding first\.|You haven\'t learned how to subdue without a weapon\!|Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /Try hiding first\.|You haven\'t learned how to subdue without a weapon\!|Roundtime/
			waitrt?
		elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	}
end

def rogue_sweep_the_dummies
	rogue_find_nearest_target_room ("rogue guild dummies")
	fput "go dummies"
	loop{
		waitrt?
		rogue_stand_up
		rogue_wait_for_stamina(15)
		result = dothistimeout "sweep dummy", 3, /Roundtime|need to FIX it|It would be more beneficial to your training if you stopped it before proceeding|You\'re done with this task for now|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /Roundtime/
			nil
		elsif result =~ /need to FIX it/
			fput "fix dummy"
		elsif result =~ /It would be more beneficial to your training if you stopped it before proceeding/
			fput "touch dummy"
		elsif result =~ /You\'re done with this task for now|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	}
end

def rogue_crush_up_some_garlic
	rogue_find_nearest_target_room ("rogue guild kitchen")
	fput "go kitchen"
	loop{
		waitrt?
		rogue_wait_for_stamina(15)
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_subdue_and_cheapshots"], "weapon") if checkright != UserVars.rogues["weapon_for_subdue_and_cheapshots"] && checkleft != UserVars.rogues["weapon_for_subdue_and_cheapshots"]
		result = dothistimeout "subdue block", 3, /You need to have a weapon in hand to do that.|Roundtime|You\'re going to need to CLEAN the block before putting another clove on it.|You\'ll need to have a clove of garlic on the block before trying to smash it properly.|It\'s perfect\!  Put it in the pot now\!|You\'re done with this task for now|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /You need to have a weapon in hand to do that.|Roundtime/
			waitrt?
		elsif result =~ /You\'re going to need to CLEAN the block before putting another clove on it./
			fput "clean block"
		elsif result =~ /You\'ll need to have a clove of garlic on the block before trying to smash it properly./
			fput "clean block"
			fput "put clove on block"
		elsif result =~ /It\'s perfect\!  Put it in the pot now\!/
			fput "put block in pot"
		elsif result =~ /You\'re done with this task for now|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	}
end

def rogue_ready_hands_for_critter_reps
	if @rogue_current_skill == "Subdue" || @rogue_current_skill == "Cheapshots"
		if checkright != UserVars.rogues["weapon_for_subdue_and_cheapshots"]
			waitrt?
			fput "get my #{UserVars.rogues["weapon_for_subdue_and_cheapshots"]}"
		end
		if checkleft != UserVars.rogues["hunting_off_hand"] && UserVars.rogues["hunting_off_hand"].length > 0
			until checkleft.nil?
				waitrt?
				fput "stow left"
				sleep 0.2
			end
			fput "get my #{UserVars.rogues["hunting_off_hand"]}"
			fput "remove my #{UserVars.rogues["hunting_off_hand"]}"
		end
	else
		if UserVars.rogues["hunting_main_hand"] =~ /gird/i
			until checkright.nil?
				waitrt?
				fput "stow right"
				sleep 0.2
			end
			until checkleft.nil?
				waitrt?
				fput "stow left"
				sleep 0.2
			end
			fput "gird"
		else
			if checkright != UserVars.rogues["hunting_main_hand"] && UserVars.rogues["hunting_main_hand"].length > 0
				until checkright.nil?
					waitrt?
					fput "stow right"
					sleep 0.2
				end
				fput "get my #{UserVars.rogues["hunting_main_hand"]}"
				fput "remove my #{UserVars.rogues["hunting_main_hand"]}"
			end
			if checkleft != UserVars.rogues["hunting_off_hand"] && UserVars.rogues["hunting_off_hand"].length > 0
				until checkleft.nil?
					waitrt?
					fput "stow left"
					sleep 0.2
				end
				fput "get my #{UserVars.rogues["hunting_off_hand"]}"
				fput "remove my #{UserVars.rogues["hunting_off_hand"]}"
			end
		end
	end
end

def rogue_practice_on_critters
	if UserVars.rogues["rogues_exit_critter_reps"] =~ /yes/i
		@rogue_text_to_display.push("You have opted to have the script exit when receiving a critter task.")
		@rogue_text_to_display.push("This is the \"Exit\" setting under the \"Critter Info\" tab.")
		@rogue_text_to_display.push("Start the script again once you're finished with the task and the script")
		@rogue_text_to_display.push("will turn in the task and continue on.")
		rogue_display_message
		exit
	end
	if @rogues_all_hunting_rooms.count == 0
		@rogue_text_to_display.push("You must set rooms in which to look for critters in the setup menu by doing ;rogues setup.")
		@rogue_text_to_display.push("Then go to the \"Critter Info\" tab and fill out the \"Rooms\" setting.")
		@rogue_text_to_display.push("Instructions for how to fill out this setting can be found in the \"Critter Info\" tab.")
		rogue_display_message
		rogue_move_out_of_room
		exit
	end
	if @rogues_all_critters_to_hunt.count == 0
		@rogue_text_to_display.push("You must set which critters to attack in the setup menu by doing ;rogues setup.")
		@rogue_text_to_display.push("Then go to the \"Critter Info\" tab and fill out the \"Critters\" setting.")
		@rogue_text_to_display.push("Instructions for how to fill out this setting can be found in the \"Critter Info\" tab.")
		rogue_display_message
		rogue_move_out_of_room
		exit
	end
	@rogue_text_to_display.push("SCRIPT WON'T CHECK IF YOU ARE ABLE TO GET A REP FROM CRITTERS.")
	@rogue_text_to_display.push("BE SURE TO CHECK IF YOU CAN GET A REP FROM THE CRITTERS YOU ARE TARGETING.")
	rogue_display_message
	sleep 2
	if @rogue_current_skill == "Subdue" || @rogue_current_skill == "Cheapshots"
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_subdue_and_cheapshots"], "weapon") if checkright != UserVars.rogues["weapon_for_subdue_and_cheapshots"] && checkleft != UserVars.rogues["weapon_for_subdue_and_cheapshots"]
	end
	rogue_ready_hands_for_critter_reps
	wander_rooms = Array.new
	all_finished = nil
	loop{
		fput "stance defensive" if checkstance != "defensive"
		new_room_stuff_to_do = nil
		if !@rogues_all_hunting_rooms.include?(Room.current.id.to_s)
			rogue_go_2_that_room(@rogues_all_hunting_rooms.first)
		else
			room = Room.current
			acceptable_adjacent_rooms = room.wayto.keys & @rogues_all_hunting_rooms
			not_visited_rooms = acceptable_adjacent_rooms.find_all { |r| not wander_rooms.include?(r) }
			if not_visited_rooms.empty?
				next_room = wander_rooms.find { |r| acceptable_adjacent_rooms.include?(r) }
			else
				next_room = not_visited_rooms[rand(not_visited_rooms.length)]
			end
			if next_room
				wander_rooms.delete(next_room)
				wander_rooms.push(next_room)
				way = room.wayto[next_room]
				if way.class == String
					move(way)
					new_room_stuff_to_do = true
				else
					way.call
					new_room_stuff_to_do = true
				end
			else
				rogue_go_2_that_room(Room.current.find_nearest(@rogues_all_hunting_rooms.collect { |id| id.to_i }).to_s)
				new_room_stuff_to_do = true
			end
		end
		if new_room_stuff_to_do
			my_room = nil
			person_here = nil
			sleep 1
			
			person_here = checkpcs
			unless person_here
				if GameObj.loot.find{ |i| i.noun =~ /disk|coffin/ && i.name !~ /#{checkname}/ }
					person_here = true
				end
			end

			if person_here
				@rogue_text_to_display.push("Moving to a new room because someone is here.")
				rogue_display_message
			else
				my_room = Room.current.id
			end
		end
		if my_room
			loop{
				rogue_wound_check
				if @rogue_current_skill == "Sweep" || @rogue_current_cheapshot =~ /kneebash/i
					critter_target = GameObj.targets.find{ |critter| @rogues_all_critters_to_hunt.include?(critter.noun) && critter.status !~ /prone|lying/}
				else
					critter_target = GameObj.targets.find{ |critter| @rogues_all_critters_to_hunt.include?(critter.noun) }
				end
				if critter_target
					if checkstamina < 15
						@rogue_text_to_display.push("Low on stamina. Heading back to town to regain stamina.")
						rogue_display_message
						rogue_unhide
						fput "stance defensive" if checkstance != "defensive"
						start_script "go2", [@rogue_starting_room_when_script_started]
						wait_while{ running? "go2" }
						start_script "go2", ["town"]
						wait_while{ running? "go2" }
						@rogue_text_to_display.push("Waiting for stamina.")
						rogue_display_message
						wait_until{ percentstamina > 90 }
					else
						waitrt?
						fput "stance offensive" if checkstance != "offensive"
						rogue_ready_hands_for_critter_reps
						if @rogue_current_skill == "Subdue"
							until hiding?
								waitrt?
								fput "hide"
								sleep 0.1
							end
						end
						if @rogue_current_skill == "Subdue"
							action_to_perform = "subdue"
						elsif @rogue_current_skill == "Sweep"
							action_to_perform = "sweep"
						elsif @rogue_current_skill == "Cheapshots"
							action_to_perform = "cheapshot #{@rogue_current_cheapshot}"
						end
						result = dothistimeout "#{action_to_perform} ##{critter_target.id}", 2, /Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]|is out of reach/
						if result =~ /Roundtime/
							nil
						elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
							all_finished = true
							break
						elsif result =~ /is out of reach/ && UserVars.rogues["hunting_disabler"].length > 0
							waitrt?
							fput "#{UserVars.rogues["hunting_disabler"]} ##{critter_target.id}"
						end
					end
				else
					break
				end
			}
		end
		rogue_wound_check
		break if all_finished
		sleep @rogue_wait_before_moving
	}
	fput "stance defensive" if checkstance != "defensive"
	rogue_unhide
	start_script "go2", [@rogue_starting_room_when_script_started]
	wait_while{ running? "go2" }
end

def rogue_stand_up
	until standing?
		waitrt?
		fput "stand"
		sleep 0.2
	end
end

def rogue_ding_up_melons
	rogue_find_nearest_target_room ("rogue guild mannequin")
	fput "go mannequin"
	loop{
		waitrt?
		rogue_wait_for_stamina(15)
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_subdue_and_cheapshots"], "weapon") if checkright != UserVars.rogues["weapon_for_subdue_and_cheapshots"] && checkleft != UserVars.rogues["weapon_for_subdue_and_cheapshots"]
		rogue_stand_up
		result = dothistimeout "subdue mannequin", 3, /The mannequin needs a head before you can try to bop it\.|You need to CLEAN the battered melon off of the mannequin, first\.|Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /Roundtime/
			waitrt?
		elsif result =~ /The mannequin needs a head before you can try to bop it\./
			fput "clean mannequin"
			fput "put melon on mannequin"
		elsif result =~ /You need to CLEAN the battered melon off of the mannequin, first\./
			fput "clean mannequin"
		elsif result =~ /You\'re done with this task for now|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			break
		end
	}
end

def rogue_unhide
	until !hiding?
		waitrt?
		fput "unhide"
		sleep 0.1
	end
end

def rogue_wound_check
	all_wounds = Wounds.head, Wounds.neck, Wounds.abs, Wounds.lhand, Wounds.rhand, Wounds.larm, Wounds.rarm, Wounds.chest, Wounds.back, Wounds.rleg, Wounds.lleg, Wounds.nerves, Wounds.leye, Wounds.reye, Scars.head, Scars.neck, Scars.abs, Scars.lhand, Scars.rhand, Scars.larm, Scars.rarm, Scars.chest, Scars.back, Scars.rleg, Scars.lleg, Scars.nerves, Scars.leye, Scars.reye
	if all_wounds.any?{ |i| i > 1 } || percenthealth < 60
		@rogue_text_to_display.push("You are wounded. Heading back to town then exiting. Once you have fixed yourself up run the script again.")
		rogue_display_message
		waitrt?
		rogue_unhide
		fput "stance defensive" if checkstance != "defensive"
		start_script "go2", [@rogue_starting_room_when_script_started]
		wait_while{ running? "go2" }
		start_script "go2", ["town"]
		wait_while{ running? "go2" }
		@rogue_text_to_display.push("You are wounded. I have brought you back to town. Once you have fixed yourself up run the script again.")
		rogue_display_message
		exit
	end
end

def rogue_stun_man_footpad_tasks
	waitfor "Enter NOD to begin, or UNSTUN to take a break."
	if @rogue_stunman_current_command == "stunman shield"
		rogue_check_for_needed_item(UserVars.rogues["shield_for_stunman_shield"], "shield")
	elsif @rogue_stunman_current_command == "stunman weapon"
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_stunman_weapon"], "weapon")
	elsif @rogue_stunman_current_command == "stunman get"
		@rogue_stunman_current_command = "stunman get my #{UserVars.rogues["weapon_for_stunman_weapon"]}"
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_stunman_weapon"], "weapon")
	end
	fput "nod"
	loop{
		waitrt?
		rogue_wait_for_stamina(15)
		rogue_check_hands
		if @rogue_stunman_current_command == "stunman stand"
			until !standing?
				waitrt?
				wait_until{ !stunned? }
				fput "lay"
				sleep 0.3
			end
		elsif @rogue_stunman_current_command == "stunman stance1" || @rogue_stunman_current_command == "stunman stance2"
			wait_until{ !stunned? } if checkstance == "defensive"
			if !stunned?
				until checkstance == "offensive"
					waitrt?
					fput "stance offensive" if checkstance != "offensive"
					sleep 0.3
				end
			end
		end
		if stunned?
			result = dothistimeout "#{@rogue_stunman_current_command}", 3, /You\'re not stunned\.|Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			if result =~ /You\'re not stunned\./
				sleep 2
			elsif result =~ /Roundtime/
				waitrt?
			elsif result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
				break
			end
		end
		sleep 0.2
	}
	wait_until{ !stunned? }
	waitrt?
end

def rogue_water_plants
	rogue_find_nearest_target_room ("rogue guild tools")
	rogue_check_hands
	fput "get can from rack"
	all_target_rooms = Array.new
	target_room_list = Map.list.find_all{ |room| room.tags.include?('rogue guild plant') }
	target_room_list.each{ |i| all_target_rooms.push(i.id) if Room.current.path_to(i).count < 40 }
	loop{
		all_target_rooms.each{ |i|
			rogue_go_2_that_room(i)
			waitrt?
			target_plant_name = nil
			target_plant = GameObj.loot.find{ |loot| loot.name =~ @rogue_all_flower_names }
			target_plant = GameObj.room_desc.find{ |loot| loot.name =~ @rogue_all_flower_names } if target_plant.nil?
			target_plant_name = "anemones" if target_plant.name =~ /terracotta pot/i
			target_plant_name = "flowers" if target_plant.name =~ /terracotta planter/i
			if target_plant.nil?
				@rogue_text_to_display.push("I could not find a flower in this room.")
				@rogue_text_to_display.push("Please send the room description to Dreaven so he can fix this.")
				rogue_display_message
				sleep 1
			else
				until kneeling?
					waitrt?
					fput "kneel"
					sleep 0.2
				end
				if target_plant_name
					fput "water #{target_plant_name}"
				else
					fput "water ##{target_plant.id}"
				end
				while line = get
					if line =~ /\[You have (\d+) repetition\(s\) remaining\.\]/
						@rogue_reps_remaining = $1.to_i
						break
					elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
						@rogue_reps_remaining = 0
						break
					elsif line =~ /let someone else have a crack at it|What were you referring to\?/
						break
					end
				end
				rogue_stand_up
				break if @rogue_reps_remaining == 0
			end
		}
		break if @rogue_reps_remaining == 0
		rogue_find_nearest_target_room ("rogue guild tools")
		fput "put can on rack"
		fput "get can from rack"
		@rogue_text_to_display.push("No more plants to water at this time.")
		@rogue_text_to_display.push("I will try again every 60 seconds until this task is completed.")
		@rogue_text_to_display.push("It might take up to 3 minutes before I am able to water more plants.")
		rogue_display_message
		sleep 60
	}
	rogue_find_nearest_target_room ("rogue guild tools")
	fput "put can on rack"
end

def rogue_clean_windows
	rogue_find_nearest_target_room ("rogue guild tools")
	rogue_check_hands
	fput "get rag from rack"
	all_target_rooms = Array.new
	target_room_list = Map.list.find_all{ |room| room.tags.include?('rogue guild window') }
	target_room_list.each{ |i| all_target_rooms.push(i.id) if Room.current.path_to(i).count < 40 }
	loop{
		all_target_rooms.each{ |i|
			rogue_go_2_that_room(i)
			waitrt?
			fput "rub window"
			while line = get
				if line =~ /\[You have (\d+) repetition\(s\) remaining\.\]/
					@rogue_reps_remaining = $1.to_i
					break
				elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
					@rogue_reps_remaining = 0
					break
				elsif line =~ /That\'s enough cleaning for this window\, let someone else have a crack at it\.|What were you referring to\?/
					break
				end
			end
			break if @rogue_reps_remaining == 0
		}
		break if @rogue_reps_remaining == 0
		rogue_find_nearest_target_room ("rogue guild tools")
		fput "put rag on rack"
		fput "get rag from rack"
		@rogue_text_to_display.push("No more dirty windows to clean at this time.")
		@rogue_text_to_display.push("I will try again every 60 seconds until this task is completed.")
		@rogue_text_to_display.push("It might take up to 3 minutes before I am able to clean more windows.")
		rogue_display_message
		sleep 60
	}
	rogue_find_nearest_target_room ("rogue guild tools")
	fput "put rag on rack"
end

def rogue_sweep_floors
	rogue_find_nearest_target_room ("rogue guild tools")
	rogue_check_hands
	fput "get broom from rack"
	fput "get bag from rack"
	all_target_rooms = Array.new
	target_room_list = Map.list.find_all{ |room| room.tags.include?('rogue guild dirt') }
	target_room_list.each{ |i| all_target_rooms.push(i.id) if Room.current.path_to(i).count < 40 }
	loop{
		all_target_rooms.each{ |i|
			rogue_go_2_that_room(i)
			loop{
				waitrt?
				result = dothistimeout "push broom", 3, /You sweep up some dirt and begin collecting it into a pile\.|There is no dirt here to sweep\./
				if result =~ /You sweep up some dirt and begin collecting it into a pile\./
					nil
				elsif result =~ /There is no dirt here to sweep\./
					break
				end
			}
			fput "get pile"
			fput "look in my bag"
			while line = get
				if line =~ /It has room for more|The bag is empty/
					break
				elsif line =~ /The bag is full of dirt/
					rogue_find_nearest_target_room ("rogue guild tools")
					fput "put bag in bin"
					while line = get
						if line =~ /\[You have (\d+) repetition\(s\) remaining\.\]/
							@rogue_reps_remaining = $1.to_i
							break
						elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
							@rogue_reps_remaining = 0
							break
						end
					end
					break
				end
			end
			break if @rogue_reps_remaining == 0
		}
		break if @rogue_reps_remaining == 0
		rogue_find_nearest_target_room ("rogue guild tools")
		fput "put bag in bin"
	}
	rogue_find_nearest_target_room ("rogue guild tools")
	fput "put broom on rack"
	fput "put bag on rack"
end

def rogue_footpad_shoot_arrows_at_you
	actions_to_do = [ "lean left", "lean right", "duck", "jump" ]
	rogue_find_nearest_target_room ("rogue guild trainer")
	rogue_ask_footpad_to_train
	waitfor "Ya ready"
	loop{
		rogue_stand_up
		waitrt?
		result = dothistimeout "#{actions_to_do.sample}", 15, /You have to dodge.* more arrow|\[You have (\d+) repetition\(s\) remaining\.\]|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /You have to dodge.* more arrow/
			nil
		elsif result =~ /\[You have (\d+) repetition\(s\) remaining\.\]|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			rogue_move_out_of_room
			break
		end
	}
	@rogue_current_task = "Check next task"
end

def rogue_practice_stun_tasks_alone
	if @rogue_stun_command == "Guildmaster's special"
		@rogue_text_to_display.push("You haven't set an option for an item to stun you.")
		@rogue_text_to_display.push("No worries! I'll withdraw silvers from your bank and buy a Guildmaster's special.")
		rogue_display_message
	end
	if @rogue_stunman_current_command == "stunman shield"
		rogue_check_for_needed_item(UserVars.rogues["shield_for_stunman_shield"], "shield")
	elsif @rogue_stunman_current_command == "stunman weapon"
		rogue_check_for_needed_item(UserVars.rogues["weapon_for_stunman_weapon"], "weapon")
	end
	order_number = nil
	successful_action = nil
	until successful_action
		if (checkleft) && ((@rogue_stun_command == "Guildmaster's special" && GameObj.left_hand.name != "Guildmaster's special") || (@rogue_stun_command != "Guildmaster's special" && checkleft != @rogue_needed_stun_item))
			until checkleft.nil?
				wait_until{ !stunned? }
				fput "stow left"
				sleep 0.1
			end
		end
		if (checkright) && ((@rogue_stun_command == "Guildmaster's special" && GameObj.right_hand.name != "Guildmaster's special") || (@rogue_stun_command != "Guildmaster's special" && checkright != @rogue_needed_stun_item))
			until checkright.nil?
				wait_until{ !stunned? }
				fput "stow right"
				sleep 0.1
			end
		end
		wait_until{ !stunned? } if @rogue_stunman_current_command == "stunman stand" && standing?
		wait_until{ !stunned? } if (@rogue_stunman_current_command == "stunman stance1" || @rogue_stunman_current_command == "stunman stance2") && checkstance == "defensive"
		rogue_wait_for_stamina(15)
		if !stunned?
			if @rogue_stun_command == "Guildmaster's special" && GameObj.right_hand.name != "Guildmaster's special" && GameObj.left_hand.name != "Guildmaster's special"
				rogue_withdraw_silvers_from_bank (2000)
			else
				fput "get my #{@rogue_needed_stun_item}" if checkright != @rogue_needed_stun_item && checkleft != @rogue_needed_stun_item
			end
			rogue_find_nearest_target_room ("rogue guild bar")
			waitrt?
			if @rogue_stunman_current_command == "stunman stand"
				until !standing?
					waitrt?
					wait_until{ !stunned? }
					fput "lay"
					sleep 0.3
				end
			elsif @rogue_stunman_current_command == "stunman stance1" || @rogue_stunman_current_command == "stunman stance2"
				until checkstance == "offensive"
					waitrt?
					fput "stance offensive" if checkstance != "offensive"
					sleep 0.3
				end
			end
			if @rogue_stun_command == "Guildmaster's special"
				if order_number.nil?
					fput "order"
					while line = get
						if line =~ /(\d+)\. Guildmaster\'s Special\s+(\d+) silvers?\./
							order_number = $1.to_i
							break
						end
					end
				end
				fput "order #{order_number}" if GameObj.right_hand.name != "Guildmaster's special" && GameObj.left_hand.name != "Guildmaster's special"
				fput "drink my special"
			else
				fput "#{@rogue_stun_command}"
			end
		end
		waitrt?
		result = dothistimeout "#{@rogue_stunman_current_command}", 3, /\[You have .* repetition\(s\) remaining\.\]|Roundtime|\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
		if result =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
			successful_action = true
		elsif result =~ /\[You have .* repetition\(s\) remaining\.\]|Roundtime/
			nil
		end
		sleep 0.1
	end
	wait_until{ !stunned? }
	waitrt?
	if @rogue_stun_command == "Guildmaster's special"
		fput "drop my special" if (GameObj.right_hand.name == "Guildmaster's special" || GameObj.left_hand.name == "Guildmaster's special")
	else
		rogue_check_hands
	end
	
end

def rogue_play_slap_hands_with_footpad
	actions_to_do = [ "slap", "duck", "stop" ]
	rogue_find_nearest_target_room ("rogue guild trainer")
	rogue_ask_footpad_to_train
	waitfor "just put your hands on mine by choosing SLAP, DUCK or STOP"
	loop{
		rogue_stand_up
		waitrt?
		result = dothistimeout "#{actions_to_do.sample}", 15, /Current score|Roundtime|\[You have (\d+) repetition\(s\) remaining\.\]|What were you referring to\?|You duck your head\.|Usage\:/
		if result =~ /Current score|\[You have (\d+) repetition\(s\) remaining\.\]|Roundtime/
			nil
		elsif result =~ /What were you referring to\?|You duck your head\.|Usage\:/
			rogue_move_out_of_room
			break
		end
	}
end

def rogue_talk_to_master_footpad
	@rogue_text_to_display.push("Visiting a master footpad for your next task in #{@rogue_current_skill}.")
	rogue_display_message
	rogue_find_nearest_target_room ("rogue guild trainer")
	rogue_check_hands
	rogue_ask_footpad_to_train
	waitfor "pulls you aside for some instruction."
	while line = get
		#Lock Mastery
		if line =~ /Pick as many boxes on the table as you can/
			@rogue_current_task = "First Lock Mastery task"
			break
		elsif line =~ /\(then describe the room conditions in one sentence\)/
			@rogue_current_task = "Lock Mastery sense task 1"
			break
		elsif line =~ /\(then describe the room conditions and name any spells\, etc\, which are affecting you|room conditions and any spells affecting you/
			@rogue_current_task = "Lock Mastery sense task 2"
			break
		elsif line =~ /\(then describe the best trap you can get\)/
			@rogue_current_task = "Lock Mastery sense task 3"
			break
		elsif line =~ /\(then describe the best lock you can get\)/
			@rogue_current_task = "Lock Mastery sense task 4"
			break
		elsif line =~ /any number of different things you learned recently/
			@rogue_current_task = "Lock Mastery sense task 5"
			while line = get
				if line =~ /\(then describe the room conditions in one sentence\)/
					@rogue_sense_task_5_current_task = "room conditions"
					break
				elsif line =~ /\(then describe the room conditions and name any spells\, etc\, which are affecting you/
					@rogue_sense_task_5_current_task = "room conditions"
					break
				elsif line =~ /\(then describe the best trap you can get\)/
					@rogue_sense_task_5_current_task = "best trap"
					break
				elsif line =~ /\(then describe the best lock you can get\)/
					@rogue_sense_task_5_current_task = "best lock"
					break
				end
			end
			break
		elsif line =~ /\(Take the calipers from the table\, LMASTER MEASURE box\, then speak the box\'s difficulty aloud\)/
			@rogue_current_task = "Lock Mastery measure box"
			break
		elsif line =~ /\(Take the calipers from the table and LMASTER CALIBRATE them once to attune them to you\.  LMASTER MEASURE box\, pick the lock\, then LMASTER CALIBRATE the calipers to refine their tuning\.  When you can calibrate the calipers no further\, which may require picking the box several times\, return them to .*\.\)/
			@rogue_current_task = "Lock Mastery measure and pick box"
			break
		elsif line =~ /\"If you gots a wedge for me\, hand it over\.\"|I\'ll accept a warped one|have to be at least of solid construction/
			@rogue_required_wedge_quality = nil
			if line =~ /I\'ll accept a warped one/
				@rogue_required_wedge_quality = "warped wooden wedge"
			elsif line =~ /have to be at least of solid construction/
				@rogue_required_wedge_quality = "solid wooden wedge"
			end
			@rogue_required_wedge_quality = "warped wooden wedge" if @rogue_required_wedge_quality.nil?
			@rogue_current_task = "Make wooden wedges"
			break
		elsif line =~ /\(LMASTER APPRAISE \{lockpick\} for each pick\, and decide which is the best\.  To see a list of qualities you can assess\, use LMASTER APPRAISE HELP\)/
			@rogue_current_task = "Lock Mastery appraise lockpicks with footpad"
			break
		elsif line =~ /Nothin\' wrong with takin\' a busted pick to one of the professionals in town\, but they don\'t got nothin\' you don\'t got\, except maybe experience and good looks\./
			@rogue_current_task = "Repair broken lockpicks"
			break
		elsif line =~ /\(LMASTER RELOCK the box on the table\)/
			@rogue_current_task = "Relock boxes with footpad"
			break
		elsif line =~ /it\'s useful to keep your containers closed/
			@rogue_current_task = "Clasp some containers"
			break
		elsif line =~ /we like to make sure there\'re enough freelance lockmakers around to keep the system running smoothly/
			@rogue_current_task = "Make lock assemblies"
			break
		elsif line =~ /you can yank out poison needles from those pesky needle traps and the jaws/
			@rogue_trap_components_first_turnin = true
			@rogue_trap_components_needed_names = [ "small jaws", "steel needle" ]
			@rogue_trap_components_needed_nouns = [ "jaws", "needle" ]
			@rogue_trap_components_needed_list = "pair of small steel jaws, slender steel needle"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			@rogue_current_task = "Gather trap components"
			break
		elsif line =~ /you can also extract the vials of acid from some traps/
			@rogue_trap_components_first_turnin = true
			@rogue_trap_components_needed_names = [ "clear vial" ]
			@rogue_trap_components_needed_nouns = [ "vial" ]
			@rogue_trap_components_needed_list = "clear glass vial of light yellow acid"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			@rogue_current_task = "Gather trap components"
			break
		elsif line =~ /Another group of trap components I\'m sure you\'re eagerly awaiting to learn how to extract are those pretty crystals\./
			@rogue_trap_components_first_turnin = true
			@rogue_trap_components_needed_names = [ "dark crystal", "sphere" ]
			@rogue_trap_components_needed_nouns = [ "crystal", "sphere" ]
			@rogue_trap_components_needed_list = "(small) dark crystal, (various colors of) sphere"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			@rogue_current_task = "Gather trap components"
			break
		elsif line =~ /The last category of traps you can disarm are the ones that throw burning goo on you and the shocking cloud ones/
			@rogue_trap_components_first_turnin = true
			@rogue_trap_components_needed_names = [ "thick vial", "green vial" ]
			@rogue_trap_components_needed_nouns = [ "vial" ]
			@rogue_trap_components_needed_list = "thick glass vial filled with murky red liquid, green-tinted vial filled with thick acrid smoke"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			@rogue_current_task = "Gather trap components"
			break
		elsif line =~ /while going to your local professional and picking up a lockpick/
			@rogue_current_task = "Create lockpicks"
			break
		elsif line =~ /Now it\'s time to exercise your creative side/
			@rogue_dark_corner_number += 1
			@rogue_task_for_footpad_or_administrator = "Footpad"
			@rogue_current_task = "Customize lockpicks"
			break
		#Stun Maneuvers
		elsif line =~ /tosses the shield back into the corner/
			@rogue_stunman_current_command = "stunman shield"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		elsif line =~ /plucks up a sword from the corner\, and slides it into/
			@rogue_stunman_current_command = "stunman weapon"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		elsif line =~ /tosses the brick back into the corner/
			@rogue_stunman_current_command = "stunman get"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		elsif line =~ /Don\'t be afraid to hit me either/
			@rogue_stunman_current_command = "stunman attack"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		elsif line =~ /After a few moments [a-zA-Z]+ manages to pull [a-zA-Z]+ to [a-zA-Z]+ knees/
			@rogue_stunman_current_command = "stunman stand"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		elsif line =~ /Command\: STUNMAN STANCE2|Now I\'ll show you how STANCE2 is done right/
			@rogue_stunman_current_command = "stunman stance2"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		elsif line =~ /you can see [a-zA-Z]+ slowly force [a-zA-Z]+ to bring up [a-zA-Z]+ arms in protection/
			@rogue_stunman_current_command = "stunman stance1"
			@rogue_current_task = "Stun Maneuvers footpad tasks"
			break
		#Subdue
		elsif line =~ /Type SUBDUE mannequin to begin\./
			@rogue_current_task = "Subdue mannequin"
			break
		elsif line =~ /Youze gots enough skill now dat you can attempt it bare\-handed/
			@rogue_current_task = "Secret revealed"
			break
		#Sweep
		elsif line =~ /So sweep should just be used for combat|let me show ya da way this sweep thing works again|You try to sweep me while I try to sweep you|I\'ll sweep you\, you sweep me|now see how you do under combat/
			@rogue_current_task = "Sweep footpads"
			break
		#Cheapshots
		elsif line =~ /Type CHEAPSHOT (.*) [a-zA-Z]+ to begin./
			@rogue_current_task = "Cheapshot footpads"
			@rogue_current_cheapshot = $1.downcase
			break
		end
	end
	if @rogue_current_task == "Repair broken lockpicks"
		rogue_do_the_task("8", "Lock Mastery")
	elsif @rogue_current_task == "Gather trap components"
		rogue_do_the_task("13", "Lock Mastery")
	elsif @rogue_current_task == "Melt open plated boxes"
		rogue_do_the_task("14", "Lock Mastery")
	else
		if @rogue_current_task == "First Lock Mastery task"
			rogue_first_lmas_task
		elsif @rogue_current_task == "Lock Mastery sense task 1"
			rogue_lmas_sense_task1
		elsif @rogue_current_task == "Lock Mastery sense task 2"
			rogue_lmas_sense_task2
		elsif @rogue_current_task == "Lock Mastery sense task 3"
			rogue_lmas_sense_task3
		elsif @rogue_current_task == "Lock Mastery sense task 4"
			rogue_lmas_sense_task4
		elsif @rogue_current_task == "Lock Mastery sense task 5"
			rogue_lmas_sense_task5
		elsif @rogue_current_task == "Lock Mastery measure box"
			rogue_lmas_measure_box
		elsif @rogue_current_task == "Lock Mastery measure and pick box"
			rogue_lmas_measure_and_pick_box
		elsif @rogue_current_task == "Make wooden wedges"
			rogue_create_wedges_for_task
		elsif @rogue_current_task == "Lock Mastery appraise lockpicks with footpad"
			rogue_appraise_lockpicks_with_footpad
		elsif @rogue_current_task == "Relock boxes with footpad"
			rogue_relock_boxes_with_footpad
		elsif @rogue_current_task == "Clasp some containers"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			rogue_clasp_some_containers
		elsif @rogue_current_task == "Make lock assemblies"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			rogue_create_lock_assemblies
		elsif @rogue_current_task == "Create lockpicks" || @rogue_current_task == "Customize lockpicks"
			@rogue_task_for_footpad_or_administrator = "Footpad"
			rogue_create_lockpicks_for_task
		elsif @rogue_current_task == "Stun Maneuvers footpad tasks"
			rogue_stun_man_footpad_tasks
		elsif @rogue_current_task == "Subdue mannequin"
			rogue_subdue_footpad_tasks
		elsif @rogue_current_task == "Secret revealed"
			sleep 0.1
		elsif @rogue_current_task == "Sweep footpads"
			rogue_sweep_footpads
		elsif @rogue_current_task == "Cheapshot footpads"
			rogue_cheapshot_footpads
		end
		rogue_move_out_of_room
		@rogue_current_task = "Check next task"
	end
end

def rogue_practice_with_a_partner
	if @rogue_partner_name.nil?
		@rogue_text_to_display.push("You must specify the name of your partner.")
		@rogue_text_to_display.push("You can do this in the setup menu under the \"Partner Info\" tab.")
		@rogue_text_to_display.push("Or you can specify it when starting the script.")
		@rogue_text_to_display.push("Example: ;rogues sweep bob")
		rogue_display_message
		exit
	else
		rogue_go_2_that_room (@rogue_partner_room_number)
		sleep 1
		if !checkpcs.include?(@rogue_partner_name)
			@rogue_text_to_display.push("Your partner isn't in the designated \"Partner Room\".")
			@rogue_text_to_display.push("I will wait for your partner to arrive then we will begin.")
			@rogue_text_to_display.push("Or you can exit the script now.")
			rogue_display_message
			wait_until{ checkpcs.include?(@rogue_partner_name) }
		end
		fput "stance offensive"
		if @rogue_current_task == "Practice sweeping a partner"
			fput "gld stance offensive"
			@rogue_attack_to_perform = "sweep"
			what_to_ask_partner = "whisper ooc #{@rogue_partner_name} I need help with a Rogue guild task. Can I sweep you?"
		elsif @rogue_current_task == "Practice cheapshots on partner"
			fput "gld stance offensive"
			@rogue_attack_to_perform = "cheapshot #{@rogue_current_cheapshot}"
			what_to_ask_partner = "whisper ooc #{@rogue_partner_name} I need help with a Rogue guild task. Can I cheapshot you?"
		elsif @rogue_current_task == "Defend against sweep from a partner"
			fput "gld stance defensive"
			what_to_ask_partner = "whisper ooc #{@rogue_partner_name} I need help with a Rogue guild task. Can you sweep me?"
		elsif @rogue_current_task == "Defend against cheapshots from a partner"
			fput "gld stance defensive"
			what_to_ask_partner = "whisper ooc #{@rogue_partner_name} I need help with a Rogue guild task. Can you #{@rogue_current_cheapshot} me?"
		end
		loop{
			result = dothistimeout "#{what_to_ask_partner}", 10, /^\(OOC\) #{@rogue_partner_name}\'s player whispers, \"Sure! Let's do this!\"/
			break if result =~ /^\(OOC\) #{@rogue_partner_name}\'s player whispers, \"Sure! Let's do this!\"/
		}
		if @rogue_current_task == "Practice sweeping a partner" || @rogue_current_task == "Practice cheapshots on partner"
			all_finished = nil
			loop{
				person_to_pull_up = GameObj.pcs.find{ |pc| pc.noun == @rogue_partner_name }
				until person_to_pull_up.status !~ /sit|prone|kneel|lying/
					waitrt?
					fput "pull ##{person_to_pull_up.id}"
					sleep 0.2
				end
				rogue_stand_up
				break if all_finished
				waitrt?
				rogue_stance_down if @rogue_need_to_stance_down
				if checkstamina < 15
					@rogue_text_to_display.push("Waiting for stamina.")
					rogue_display_message
					put "whisper ooc #{@rogue_partner_name} I need to wait for stamina."
					wait_until{ checkstamina(15) }
				end
				fput "#{@rogue_attack_to_perform} #{@rogue_partner_name}"
				while line = get
					if line =~ /^\[SMR result\: (-?\d+) \(Open d100\: (-?\d+)/
						total_amount = $1.to_i
						roll = $2.to_i
						if roll <= 100 && roll > 0
							@rogue_need_to_stance_down = true if (total_amount - roll) >= 120
						end
						break if total_amount < 101
					elsif line =~ /Roundtime/
						break
					elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
						put "whisper ooc #{@rogue_partner_name} All finished with my task. Thank you!"
						all_finished = true
						break
					end
				end
			}
		elsif @rogue_current_task = "Defend against sweep from a partner"
			@rogue_stand_me_back_up = true
			Thread.new{
				loop{
					waitrt?
					put "stand" if !standing?
					break if @rogue_stand_me_back_up.nil?
					sleep 1
				}
			}
			while line = get
				if line =~ /\[You have (\d+) repetition\(s\) remaining\.\]/
					put "whisper ooc #{@rogue_partner_name} Again please."
				elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
					put "whisper ooc #{@rogue_partner_name} All finished with my task. Thank you!"
					break
				end
			end
			@rogue_stand_me_back_up = nil
		elsif @rogue_current_task = "Defend against cheapshots from a partner"
			while line = get
				if line =~ /\[You have (\d+) repetition\(s\) remaining\.\]/
					put "whisper ooc #{@rogue_partner_name} Again please."
				elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
					put "whisper ooc #{@rogue_partner_name} All finished with my task. Thank you!"
					break
				end
			end
		end
	end
end

def rogue_automate_task_with_tpick
	@rogue_dark_corner_number += 1
	@rogue_automate_current_task_with_tpick = true
	@rogue_text_to_display.push("You have opted to automate this task via ;tpick.")
	fput "lmas disarm on" if @rogue_current_task == "Gather trap components"
	if @rogue_current_task == "Pick boxes using your latest trick in front of an audience"
		if @rogue_current_skill_rank < 10
			$rogue_trick_to_use = "spin"
		elsif @rogue_current_skill_rank < 20
			$rogue_trick_to_use = "twist"
		elsif @rogue_current_skill_rank < 30
			$rogue_trick_to_use = "turn"
		elsif @rogue_current_skill_rank < 40
			$rogue_trick_to_use = "twirl"
		elsif @rogue_current_skill_rank < 50
			$rogue_trick_to_use = "toss"
		elsif @rogue_current_skill_rank < 60
			$rogue_trick_to_use = "bend"
		else
			$rogue_trick_to_use = "flip"
		end
		@rogue_text_to_display.push("I have updated the \"Trick\" setting in ;tpick to your latest trick.")
	elsif @rogue_current_task == "Measure then pick tough boxes" || @rogue_current_task == "Calibrate calipers in the field"
		$rogue_need_to_measure_boxes = true
		if @rogue_current_task == "Measure then pick tough boxes"
			$rogue_do_not_calibrate_calipers = true if @rogue_current_skill_rank < 10
		elsif @rogue_current_task == "Calibrate calipers in the field"
			$rogue_calibrate_every_box = true
		end
	elsif @rogue_current_task == "Wedge open boxes"
		fput "tap my wedge"
		while line = get
			if line =~ /^You tap/
				break
			elsif line =~ /^What were you referring to\?/
				rogue_make_wooden_wedges (3)
				break
			end
		end
	elsif @rogue_current_task == "Repair broken lockpicks"
		rogue_buy_lockpicks_to_break
	end
	if @rogue_current_task == "Gather trap components" && @rogue_trap_components_needed_names.find{ |name| name =~ /clear vial|thick vial|green vial/ }
		@rogue_text_to_display.push("Your current task is to gather vials.")
		@rogue_text_to_display.push(";tpick won't automatically bundle these vials as we gather them, even if it's set to do so.")
	end
	rogue_display_message
	@rogue_the_current_task_is_finished = nil
	target_room = Map.list.find_all { |room| room.tags.find{ |i| i =~ /boxpool/ } }
	rogue_go_2_that_room(Room.current.find_nearest(target_room))
	start_script "tpick", [ "worker" ]
	if @rogue_current_task == "Gather trap components" && @rogue_task_for_footpad_or_administrator == "Footpad"
		loop{
			if !running? "tpick"
				break
			elsif @rogue_trap_components_needed_array.count >= @rogue_reps_remaining
				@rogue_the_current_task_is_finished = true
				@rogue_reps_remaining = 0
				$rogue_calibrate_every_box = nil
				@rogue_text_to_display.push("Gathered enough trap components.")
				@rogue_text_to_display.push("Finishing up the current box then stopping ;tpick and resuming ;rogues.")
				rogue_display_message
				wait_until{ !running? "tpick" }
				break
			end
			sleep 0.2
		}
	else
		while line = get
			if line =~ /You feel like the .* requires too little skill to properly use and is not worthy of your vast expertise\./
				$rogue_change_needed_lockpick = true
				@rogue_text_to_display.push("The lockpick you have set in the ;tpick setting ';rogues Lockpick' isn't getting you a rep.")
				@rogue_text_to_display.push("I will try a better lockpick next time.")
				rogue_display_message
			elsif line =~ /\[You have (\d+) repetitions? remaining\.\]/
				@rogue_reps_remaining = $1.to_i
			elsif line =~ /\[You have completed your training task\.\]|\[You have completed this task\.\]|\[You have completed this .* task\.\]/
				@rogue_the_current_task_is_finished = true
				@rogue_reps_remaining = 0
				@rogue_text_to_display.push("Your task is completed.")
				@rogue_text_to_display.push("Finishing up the current box then stopping ;tpick and resuming ;rogues.")
				rogue_display_message
			end
			break if !running? "tpick"
		end
	end
	@rogue_automate_current_task_with_tpick = nil
	@rogue_the_current_task_is_finished = nil
	if @tpick_finished_with_current_rogue_task
		if @rogue_current_task == "Repair broken lockpicks"
			rogue_withdraw_silvers_from_bank (@rogue_reps_remaining * 300)
			rogue_find_nearest_target_room ("rogue guild toolbenchs")
			fput "go toolbench"
			order_number = nil
			@rogue_lockpicks_to_break_and_repair.each{ |pick|
				if order_number.nil?
					fput "read sign"
					while line = get
						if line =~ /(\d+)\.\) a thin steel wire\s+(\d+)/
							order_number = $1.to_i
							break
						end
					end
				end
				rogue_check_hands
				fput "get ##{pick}"
				fput "order #{order_number}"
				fput "buy"
				wait_until{ checkright && checkleft }
				fput "lmas repair my lockpick"
				waitrt?
			}
			rogue_check_hands
			rogue_find_nearest_target_room ("rogue guild trainer")
			rogue_ask_footpad_to_train
			while line = get
				break if line =~ /Nothin\' wrong with takin\' a busted pick to one of the professionals in town\, but they don\'t got nothin\' you don\'t got\, except maybe experience and good looks\./
			end
			@rogue_lockpicks_to_break_and_repair.each{ |pick|
				fput "get ##{pick}"
				wait_until{ checkright }
				fput "give ##{pick} to ##{@rogue_npc.id}"
				fput "drop ##{pick}"
			}
		end
	elsif @rogue_reps_remaining != 0
		if @rogue_current_task == "Wedge open boxes"
			fput "tap my wedge"
			while line = get
				if line =~ /^You tap/
					@rogue_text_to_display.push(";tpick stopped before all reps could be finished.")
					@rogue_text_to_display.push("Now exiting. Start ;rogues again to finish this task.")
					rogue_display_message
					exit
				elsif line =~ /^What were you referring to\?/
					rogue_make_wooden_wedges (3)
					break
				end
			end
		else
			@rogue_text_to_display.push(";tpick stopped before all reps could be finished.")
			@rogue_text_to_display.push("Now exiting. Start ;rogues again to finish this task.")
			rogue_display_message
			exit
		end
	end
	if @rogue_current_task == "Gather trap components" && @rogue_task_for_footpad_or_administrator == "Footpad"
		rogue_find_nearest_target_room ("rogue guild trainer")
		rogue_ask_footpad_to_train
		while line = get
			break if line =~ /you can yank out poison needles from those pesky needle traps and the jaws|you can also extract the vials of acid from some traps|Another group of trap components I\'m sure you\'re eagerly awaiting to learn how to extract are those pretty crystals\.|The last category of traps you can disarm are the ones that throw burning goo on you and the shocking cloud ones/
		end
		rogue_turn_in_trap_components
	end
end

def rogue_pit_skills_against_footpad
	rogue_find_nearest_target_room ("rogue guild trainer")
	rogue_ask_footpad_to_train
	waitfor "just nod to me"
	box_numbers = [ "first", "second", "third", "fourth", "fifth" ]
	fput "nod ##{@rogue_npc.id}"
	fput "lmas focus"
	box_numbers.each{ |i|
		box_needs_disarmed = nil
		loop{
			waitrt?
			result = dothistimeout "disarm #{i} box", 5, /You discover no traps|preventing its exit from the hole|Oddly enough\, the flag has \"BOOM\!\" written on it in\.|Suddenly\, a tiny flag pops out of a hole next to the lockplate with a metallic CLICK\!|you see what appears to be a little flag rolled around a thin rod/
			if result =~ /You discover no traps|preventing its exit from the hole|Oddly enough\, the flag has \"BOOM\!\" written on it in\.|Suddenly\, a tiny flag pops out of a hole next to the lockplate with a metallic CLICK\!/
				break
			elsif result =~ /you see what appears to be a little flag rolled around a thin rod/
				box_needs_disarmed = true
				break
			end
		}
		if box_needs_disarmed
			loop{
				waitrt?
				result = dothistimeout "disarm #{i} box", 5, /you nudge the end of the flag to one side|preventing its exit from the hole|Roundtime/
				if result =~ /you nudge the end of the flag to one side|preventing its exit from the hole/
					break
				elsif result =~ /Roundtime/
					nil
				end
			}
		end
	}
	waitrt?
	until checkright =~ /lockpick/ || checkleft =~ /lockpick/
		waitrt?
		fput "get vaalin lockpick from table"
		sleep 0.1
	end
	if UserVars.rogues["use_lmas_focus_picking_contests"] =~ /yes/i
		fput "lmas focus"
	else
		fput "stop lmaster focus"
	end
	box_numbers.each{ |i|
		loop{
			waitrt?
			result = dothistimeout "pick #{i} box", 5, /It opens\!|It does not appear to be locked|Roundtime/
			if result =~ /It opens\!|It does not appear to be locked/
				break
			elsif result =~ /Roundtime/
				nil
			end
		}
	}
	waitfor /Final scores|escorts you back to the training area/
	rogue_move_out_of_room
end

def rogue_check_to_trade_in_task
	rogue_move_out_of_room
	if @rogue_number_of_vouchers_used >= @rogue_limit_voucher_usage
		if @rogue_voucher_limit_exit_or_continue == "Continue"
			@rogue_text_to_display.push("According to your settings you want to continue if #{@rogue_limit_voucher_usage} vouchers are used to get one task.")
			@rogue_text_to_display.push("You can change this value in the setup menu via ;rogues setup.")
			rogue_display_message
			@rogue_do_not_skip_this_task = true
			@rogue_current_task = "Check next task"
		else
			@rogue_text_to_display.push("According to your settings you want to exit if #{@rogue_limit_voucher_usage} vouchers are used to get one task.")
			@rogue_text_to_display.push("You can change this value in the setup menu via ;rogues setup.")
			@rogue_text_to_display.push("Script is now exiting.")
			rogue_display_message
			exit
		end
	else
		@rogue_text_to_display.push("You have opted to trade in these tasks.")
		@rogue_text_to_display.push("Trading in this task and getting a new one.")
		rogue_display_message
		@rogue_number_of_vouchers_used += 1
		@rogue_current_task = "Trade in current task"
	end
end

def rogue_do_the_task(number, name_of_skill)
	@rogue_text_to_display.push("Your current task is: #{@rogue_current_task}.")
	@rogue_text_to_display.push("The required components for this task are: #{@rogue_trap_components_needed_list}.") if @rogue_current_task == "Gather trap components"
	@rogue_text_to_display.push("This task is \"#{number}\" for \"#{name_of_skill} tasks to trade\" in the setup menu.")
	if name_of_skill == "Universal"
		if @rogue_universal_tasks_to_trade.include?("#{number}") && @rogue_do_not_skip_this_task.nil?
			rogue_check_to_trade_in_task
		else
			rogue_display_message
			#Clean windows:
			if number == "1"
				rogue_clean_windows
			#Sweep floors:
			elsif number == "2"
				rogue_sweep_floors
			#Water plants
			elsif number == "3"
				rogue_water_plants
			end
			@rogue_current_task = "Check next task"
		end
	elsif name_of_skill == "Stun Maneuvers"
		if @rogue_stun_maneuvers_tasks_to_trade.include?("#{number}") && @rogue_do_not_skip_this_task.nil?
			rogue_check_to_trade_in_task
		else
			rogue_display_message
			#Let a footpad shoot arrows at you:
			if number == "1"
				rogue_footpad_shoot_arrows_at_you
			#Self stun tasks:
			elsif number == "2"
				if @rogue_current_task == "Readying your shield while stunned"
					@rogue_stunman_current_command = "stunman shield"
				elsif @rogue_current_task == "Getting your weapon while stunned"
					@rogue_stunman_current_command = "stunman weapon"
				elsif @rogue_current_task == "Picking stuff up while stunned"
					@rogue_stunman_current_command = "stunman get my #{UserVars.rogues["weapon_for_stunman_weapon"]}"
				elsif @rogue_current_task == "Standing up while stunned"
					@rogue_stunman_current_command = "stunman stand"
				elsif @rogue_current_task == "Defending yourself a little more while stunned"
					@rogue_stunman_current_command = "stunman stance1"
				elsif @rogue_current_task == "Defending yourself a lot more while stunned"
					@rogue_stunman_current_command = "stunman stance2"
				elsif @rogue_current_task == "Attacking while stunned"
					@rogue_stunman_current_command = "stunman attack"
				end
				rogue_practice_stun_tasks_alone
			#Play slap hands with a footpad:
			elsif number == "3"
				rogue_play_slap_hands_with_footpad
			end
			@rogue_current_task = "Check next task"
		end
	elsif name_of_skill == "Subdue"
		if @rogue_subdue_tasks_to_trade.include?("#{number}") && @rogue_do_not_skip_this_task.nil?
			rogue_check_to_trade_in_task
		else
			rogue_display_message
			#Crush up some garlic
			if number == "1"
				rogue_crush_up_some_garlic
			#Subdue some creatures
			elsif number == "2"
				rogue_practice_on_critters
			#Ding up a few melons
			elsif number == "3"
				rogue_ding_up_melons
			end
			@rogue_current_task = "Check next task"
		end
	elsif name_of_skill == "Sweep"
		if @rogue_sweep_tasks_to_trade.include?("#{number}") && @rogue_do_not_skip_this_task.nil?
			rogue_check_to_trade_in_task
		else
			rogue_display_message
			#Practice sweeping a partner
			if number == "1"
				rogue_practice_with_a_partner
			#Defend against sweep from a partner
			elsif number == "2"
				rogue_practice_with_a_partner
			#Practice sweeping creatures
			elsif number == "3"
				rogue_practice_on_critters
			#Sweep dummies
			elsif number == "4"
				rogue_sweep_the_dummies
			end
			@rogue_current_task = "Check next task"
		end
	elsif name_of_skill == "Cheapshots"
		if @rogue_cheapshots_tasks_to_trade.include?("#{number}") && @rogue_do_not_skip_this_task.nil?
			rogue_check_to_trade_in_task
		else
			rogue_display_message
			#Practice cheapshots on partner
			if number == "1"
				rogue_practice_with_a_partner
			#Defend against cheapshots from a partner
			elsif number == "2"
				rogue_practice_with_a_partner
			#Practice cheapshots on creatures
			elsif number == "3"
				rogue_practice_on_critters
			end
			@rogue_current_task = "Check next task"
		end
	elsif name_of_skill == "Lock Mastery"
		tasks_which_can_be_automated_with_tpick = [ "2", "3", "4", "5", "7", "8", "9", "13", "14" ]
		if @rogue_lock_mastery_tasks_to_trade.include?("#{number}") && @rogue_do_not_skip_this_task.nil?
			rogue_check_to_trade_in_task
		else
			if @rogue_tasks_to_use_tpick_for.include?("#{number}") && tasks_which_can_be_automated_with_tpick.include?("#{number}")
				rogue_turn_in_trap_components if @rogue_current_task == "Gather trap components" && @rogue_task_for_footpad_or_administrator == "Footpad"
				rogue_automate_task_with_tpick if @rogue_reps_remaining > 0
			elsif number == "6"
				#Pit your skills against a footpad
				rogue_display_message
				rogue_pit_skills_against_footpad
			elsif number == "10"
				#Clasp some containers
				@rogue_task_for_footpad_or_administrator = "Administrator"
				rogue_clasp_some_containers
			elsif number == "11"
				#Create lock assemblies
				@rogue_task_for_footpad_or_administrator = "Administrator"
				rogue_create_lock_assemblies
			elsif number == "12"
				#Cut keys
				rogue_cut_keys
			elsif number == "15"
				#Customize lockpicks
				rogue_create_lockpicks_for_task
			else
				#Pick boxes under a variety of conditions:
				if number == "1"
					@rogue_text_to_display.push("Unfortunately this task can't be automated.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("If you don't already have a parchment then ask the Training Administrator for a parchment.")
					@rogue_text_to_display.push("Read the parchment to see what kind of conditions you need to pick boxes in,")
					@rogue_text_to_display.push("then use LMASTER SENSE to find a suitable room.")
					@rogue_text_to_display.push("Read the parchment after every rep as the room conditions will change.")
					@rogue_text_to_display.push("If you have an Empath or Cleric friend they can use")
					@rogue_text_to_display.push("Light (205) and Spirit Fog (106) to change room conditions.")
				#Pick boxes using your latest trick in front of an audience:
				elsif number == "2"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push("Keep in mind there might not be enough people at the locksmith pool to get a rep.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("Audience reps usually require 4 people, Rogues count as 2, Rogue Guild Masters count as 3.")
					@rogue_text_to_display.push("Only picking the box requires an audience, the trap can be disarmed elsewhere.")
					@rogue_text_to_display.push("Be sure to use your latest trick when picking the box, which can be found by typing LMASTER.")
					@rogue_text_to_display.push("You can only get an audience rep once every 30 seconds.")
					@rogue_text_to_display.push("Remember this requires challenging boxes to get a rep.")
				#Pick some tough boxes from creatures:
				elsif number == "3"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("All you have to do is pick tough locks for your skill.")
					@rogue_text_to_display.push("When picking boxes keep an eye out for a line like this:")
					@rogue_text_to_display.push("You feel like the copper lockpick requires too little skill to properly use and is not worthy of your vast expertise.")
					@rogue_text_to_display.push("This indicates you must use a higher quality lockpick in order to gain reps.")
					@rogue_text_to_display.push("Also remember using higher quality lockpicks make the lock easier.")
					@rogue_text_to_display.push("So using a vaalin pick on a lock you could have picked with a vultite pick probably won't give a rep.")
					@rogue_text_to_display.push("Boxes from the Locksmith pool DO count towards reps.")
				#Measure then pick tough boxes
				elsif number == "4"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push("This task requires calipers so be sure to buy a set from the Rogue guild store.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("You have to measure the lock first by doing LMAS MEASURE then pick the lock.")
					@rogue_text_to_display.push("You will only get a rep for picking tough boxes.")
					@rogue_text_to_display.push("If you are using ;tpick for this task be sure the setting")
					@rogue_text_to_display.push("\"Calibrate on startup\" under \"More Other\" tab is NOT set to \"never\".")
					@rogue_text_to_display.push("Also if you haven't yet learned how to calibrate your calipers")
					@rogue_text_to_display.push("Then \"Calibrate on startup\" should be set to no")
					@rogue_text_to_display.push("And \"Calibrate count\" should be set to 999.")
					@rogue_text_to_display.push("The script should automatically adjust these settings for you if necessary.")
				#Calibrate calipers in the field
				elsif number == "5"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push("This task requires calipers so be sure to buy a set from the Rogue guild store.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("You have to measure a lock first by doing LMAS MEASURE")
					@rogue_text_to_display.push("Then pick the lock, then do LMAS CALIBRATE MY CALIPERS")
					@rogue_text_to_display.push("Lock difficulty doesn't seem to matter.")
					@rogue_text_to_display.push("If you are using ;tpick for this task be sure the setting")
					@rogue_text_to_display.push("\"Calibrate on startup\" under \"More Other\" tab is NOT set to \"never\".")
					@rogue_text_to_display.push("Also if you haven't yet learned how to calibrate your calipers")
					@rogue_text_to_display.push("Then \"Calibrate on startup\" should be set to no")
					@rogue_text_to_display.push("And \"Calibrate count\" should be set to 1.")
					@rogue_text_to_display.push("The script should automatically adjust these settings for you if necessary.")
				#Wedge open boxes
				elsif number == "7"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push(";rogues will create wedges for you when needed and ;tpick will automatically use wedges when needed.")
					@rogue_text_to_display.push("For ;tpick keep in mind some reps will require a plated box, fused tumblers")
					@rogue_text_to_display.push("or lock too difficult for you to pick with a lockpick.")
					@rogue_text_to_display.push("The locksmith pool generally gives you boxes that are within your skill range.")
					@rogue_text_to_display.push("So you will probably have to wait until you get plated boxes to finish this task with ;tpick.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("Wedge open a box with a wedge instead of picking it.")
					@rogue_text_to_display.push("Wedges can be used via doing LMAS WEDGE box.")
					@rogue_text_to_display.push("Some of the reps will require either a plated box, fused tumblers")
					@rogue_text_to_display.push("or lock too difficult for you to pick with a lockpick.")
				#Repair broken lockpicks
				elsif number == "8"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push(";rogues will automatically buy cheap lockpicks to break")
					@rogue_text_to_display.push("Then ;tpick will break them then ;rogues will repair them and hand them in.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("Go to a Rogue guild toolbench, repair broken lockpicks, then give the repaired lockpicks to a footpad.")
				#Relock tough boxes
				elsif number == "9"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push(";tpick will pick boxes at the locksmith pool then relock them.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("Pick a tough box then do LMAS RELOCK on the box to relock it.")
				#Gather trap components
				elsif number == "13"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push(";tpick will disarm boxes at a locksmith pool and gather the required components.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("Be sure to do: LMASTER DISARM ON")
					@rogue_text_to_display.push("Then disarm boxes until you get the required trap component.")
					@rogue_text_to_display.push("If a footpad told you to gather these then each component must be handed in to a footpad.")
					@rogue_text_to_display.push("If the administrator told you to gather these then they don't need to be handed in.")
					@rogue_text_to_display.push("The required components for this task are: #{@rogue_trap_components_needed_list}.")
					@rogue_text_to_display.push("Be sure to NOT BUNDLE vials into your locksmith toolkit if your task is to collect vials.")
					@rogue_text_to_display.push("You can't get them out after they have been bundled, so turn them in first then bundle them.")
					@rogue_text_to_display.push("Careful when using ;tpick because there is an option to automatically bundle vials as you find them.")
					@rogue_text_to_display.push("If you are automating this task with ;tpick then ;tpick won't automatically bundle them")
					@rogue_text_to_display.push("if you need them for your current task, even if you have ;tpick set to automatically bundle them.")
				#Melt open plated boxes
				elsif number == "14"
					@rogue_text_to_display.push("This task can be automated via ;tpick.")
					@rogue_text_to_display.push("To get a rep:")
					@rogue_text_to_display.push("Simply DISARM a plated box with acid vials bundled into your locksmith's container.")
					@rogue_text_to_display.push("Or you can POUR the acid vial onto a plated box.")
				end
				rogue_display_message
				exit
			end
			@rogue_current_task = "Check next task"
		end
	end
end

def rogue_do_next_task
	rogue_check_hands
	if @rogue_current_task == "Join the guild"
		rogue_join_the_guild
	elsif @rogue_current_task == "Get a new task"
		rogue_get_a_new_task
	elsif @rogue_current_task == "Check next task"
		rogue_check_next_task
	elsif @rogue_current_task == "Current task finished"
		rogue_turnin_current_task
	elsif @rogue_current_task == "Get promotion"
		rogue_get_promotion
	elsif @rogue_current_task == "This task isn't yet coded."
		rogue_task_is_not_yet_coded
	elsif @rogue_current_task == "Trade in current task"
		rogue_trade_in_current_task
	elsif @rogue_current_task == "Talk to master footpad"
		rogue_talk_to_master_footpad
	#Universal
	elsif @rogue_current_task == "Clean windows"
		rogue_do_the_task("1", "Universal")
	elsif @rogue_current_task == "Sweep floors"
		rogue_do_the_task("2", "Universal")
	elsif @rogue_current_task == "Water plants"
		rogue_do_the_task("3", "Universal")
	#Stun Maneuvers
	elsif @rogue_current_task == "Let a footpad shoot arrows at you"
		rogue_do_the_task("1", "Stun Maneuvers")
	elsif @rogue_current_task =~ /Readying your shield while stunned|Getting your weapon while stunned|Picking stuff up while stunned|Standing up while stunned|Defending yourself a little more while stunned|Defending yourself a lot more while stunned|Attacking while stunned/
		rogue_do_the_task("2", "Stun Maneuvers")
	elsif @rogue_current_task == "Play slap hands with a footpad"
		rogue_do_the_task("3", "Stun Maneuvers")
	#Subdue
	elsif @rogue_current_task == "Crush up some garlic"
		rogue_do_the_task("1", "Subdue")
	elsif @rogue_current_task == "Subdue some creatures"
		rogue_do_the_task("2", "Subdue")
	elsif @rogue_current_task == "Ding up a few melons"
		rogue_do_the_task("3", "Subdue")
	#Sweep
	elsif @rogue_current_task == "Practice sweeping a partner"
		rogue_do_the_task("1", "Sweep")
	elsif @rogue_current_task == "Defend against sweep from a partner"
		rogue_do_the_task("2", "Sweep")
	elsif @rogue_current_task == "Practice sweeping creatures"
		rogue_do_the_task("3", "Sweep")
	elsif @rogue_current_task == "Sweep dummies"
		rogue_do_the_task("4", "Sweep")
	#Cheapshots
	elsif @rogue_current_task == "Practice cheapshots on partner"
		rogue_do_the_task("1", "Cheapshots")
	elsif @rogue_current_task == "Defend against cheapshots from a partner"
		rogue_do_the_task("2", "Cheapshots")
	elsif @rogue_current_task == "Practice cheapshots on creatures"
		rogue_do_the_task("3", "Cheapshots")
	#Lock Mastery
	elsif @rogue_current_task == "Pick boxes under a variety of conditions"
		rogue_do_the_task("1", "Lock Mastery")
	elsif @rogue_current_task == "Pick boxes using your latest trick in front of an audience"
		rogue_do_the_task("2", "Lock Mastery")
	elsif @rogue_current_task == "Pick some tough boxes from creatures"
		rogue_do_the_task("3", "Lock Mastery")
	elsif @rogue_current_task == "Measure then pick tough boxes"
		rogue_do_the_task("4", "Lock Mastery")
	elsif @rogue_current_task == "Calibrate calipers in the field"
		rogue_do_the_task("5", "Lock Mastery")
	elsif @rogue_current_task == "Pit your skills against a footpad"
		rogue_do_the_task("6", "Lock Mastery")
	elsif @rogue_current_task == "Wedge open boxes"
		rogue_do_the_task("7", "Lock Mastery")
	elsif @rogue_current_task == "Relock tough boxes"
		rogue_do_the_task("9", "Lock Mastery")
	elsif @rogue_current_task == "Clasp some containers"
		rogue_do_the_task("10", "Lock Mastery")
	elsif @rogue_current_task == "Create lock assemblies"
		rogue_do_the_task("11", "Lock Mastery")
	elsif @rogue_current_task == "Cut keys"
		rogue_do_the_task("12", "Lock Mastery")
	elsif @rogue_current_task == "Gather trap components"
		rogue_do_the_task("13", "Lock Mastery")
	elsif @rogue_current_task == "Melt open plated boxes"
		rogue_do_the_task("14", "Lock Mastery")
	elsif @rogue_current_task == "Customize lockpicks"
		rogue_do_the_task("15", "Lock Mastery")
	end
end

def rogue_wait_to_help
	rogue_help_partner_with_task if @rogue_start_helping_partner && @rogue_restart_confirmed
	@rogue_start_helping_partner = nil
	@rogue_restart_confirmed = nil
	loop{
		@rogue_text_to_display.push("Waiting for someone to ask for help.")
		rogue_display_message
		while line = get
			if line =~ /^\(OOC\) (.*)\'s player whispers\, \"I need help with a Rogue guild task. (.*)\?\"/ || line =~ /^\(OOC\) (.*)\'s player whispers\, \"(Can you please promote me in) (.*)\?\"/
				@rogue_helping_partner_name = $1
				task = $2
				promote_skill = $3
				if task =~ /Can I [a-zA-Z]+ you/
					@rogue_partner_task = "Defend from partner"
				elsif task =~ /Can you ([a-zA-Z]+) me/
					@rogue_partner_task = "Attack partner: #{$1}"
					attack_type = $1
					if attack_type == "sweep"
						@rogue_attack_to_perform = "sweep"
					elsif attack_type =~ /footstomp/
						@rogue_attack_to_perform = "cheapshot #{attack_type}"
					end
				elsif task == "Can you please promote me in"
					@rogue_partner_task = "Promote"
					@rogue_partner_skill_to_promote = promote_skill
				end
				if @rogue_only_work_with_partner == @rogue_helping_partner_name || @rogue_only_work_with_partner.nil?
					if @rogue_automate_the_partner_reps == "full"
						@rogue_text_to_display.push("#{@rogue_helping_partner_name} is asking for help.")
					elsif @rogue_automate_the_partner_reps == "confirm"
						@rogue_text_to_display.push("#{@rogue_helping_partner_name} is asking for help.")
						@rogue_text_to_display.push("Enter \"shake\" into the game to proceed. This command has no third party messaging.")
						rogue_display_message
						waitfor "Shake what?"
					elsif @rogue_automate_the_partner_reps == "none"
						@rogue_start_helping_partner = true
						@rogue_text_to_display.push("#{@rogue_helping_partner_name} is asking for help.")
						@rogue_text_to_display.push("Script will now exit.")
						@rogue_text_to_display.push("To proceed start the script as: ;rogues #{@rogue_how_to_restart_script} confirm")
						rogue_display_message
						exit
					end
					rogue_help_partner_with_task
					@rogue_helping_partner_name = nil
					@rogue_partner_task = nil
					break
				end
			end
		end
	}
end

def rogue_help_partner_with_task
	fput "stance offensive"
	if @rogue_partner_task =~ /Attack/
		fput "gld stance offensive"
	elsif @rogue_partner_task =~ /Defend/
		fput "gld stance defensive"
	end
	if @rogue_partner_task == "Promote"
		fput "gld promote #{@rogue_helping_partner_name} in #{@rogue_partner_skill_to_promote}"
	else
		@rogue_text_to_display.push("Let's do this!")
		rogue_display_message
		put "whisper ooc #{@rogue_helping_partner_name} Sure! Let's do this!"
		all_finished = nil
		if @rogue_partner_task =~ /Attack/
			loop{
				person_to_pull_up = GameObj.pcs.find{ |pc| pc.noun == @rogue_helping_partner_name }
				until person_to_pull_up.status !~ /sit|prone|kneel|lying/
					waitrt?
					fput "pull ##{person_to_pull_up.id}"
					sleep 0.2
				end
				rogue_stand_up
				break if all_finished
				waitrt?
				rogue_stance_down if @rogue_need_to_stance_down
				rogue_wait_for_stamina(15)
				fput "#{@rogue_attack_to_perform} #{@rogue_helping_partner_name}"
				while line = get
					if line =~ /^\[SMR result\: (-?\d+) \(Open d100\: (-?\d+)/
						total_amount = $1.to_i
						roll = $2.to_i
						if roll <= 100
							@rogue_need_to_stance_down = true if (total_amount - roll) >= 120
						end
						break if total_amount < 101
					elsif line =~ /\(OOC\) #{@rogue_helping_partner_name}\'s player whispers\, \"Again please\.\"/
						break
					elsif line =~ /\(OOC\) #{@rogue_helping_partner_name}\'s player whispers\, \"All finished with my task\. Thank you\!\"/
						all_finished = true
						break
					end
				end
			}
		elsif @rogue_partner_task =~ /Defend/
			@rogue_stand_me_back_up = true
			Thread.new{
				loop{
					waitrt?
					put "stand" if !standing?
					break if @rogue_stand_me_back_up.nil?
					sleep 1
				}
			}
			while line = get
				break if line =~ /\(OOC\) #{@rogue_helping_partner_name}\'s player whispers\, \"All finished with my task\. Thank you\!\"/
			end
			@rogue_stand_me_back_up = nil
			rogue_stand_up
		end
	end
end

def rogue_stance_down
	if checkstance == "offensive"
		fput "stance advance"
	elsif checkstance == "advance"
		fput "stance forward"
	elsif checkstance == "forward"
		fput "stance neutral"
	elsif checkstance == "neutral"
		fput "stance guarded"
	elsif checkstance == "guarded"
		fput "stance defensive"
	end
	@rogue_need_to_stance_down = nil
end

if Stats.prof != "Rogue"
	@rogue_text_to_display.push("This script is for rogues only! What are you trying to pull here?")
	@rogue_text_to_display.push("If you ARE a Rogue enter INFO into the game and try again.")
	rogue_display_message
elsif Stats.level < 15
	@rogue_text_to_display.push("You must be level 15 to join a guild. Try again when you have reached level 15.")
	rogue_display_message
elsif @rogue_current_skill.nil?
	@rogue_text_to_display.push("You must specify a skill you want to work on when starting the script.")
	@rogue_text_to_display.push("The available options are: sweep, subdue, stun maneuvers, lock mastery, cheapshots, and gambits")
	@rogue_text_to_display.push("You only need to use the first 3 letters in a skill name, although using more works too.")
	@rogue_text_to_display.push("For example:")
	@rogue_text_to_display.push(";rogues stun maneuvers")
	@rogue_text_to_display.push(";rogues stun")
	@rogue_text_to_display.push(";rogues stu")
	@rogue_text_to_display.push("Would all work to start doing tasks for stun maneuvers.")
	@rogue_text_to_display.push("Also ;rogues lmas works for lock mastery.")
	@rogue_text_to_display.push("")
	@rogue_text_to_display.push("Partner information:")
	@rogue_text_to_display.push(";rogues partner - if you are helping another person with their guild tasks.")
	@rogue_text_to_display.push("You can specify a partner so you will only help that person.")
	@rogue_text_to_display.push("Example: ;rogues partner Bob")
	@rogue_text_to_display.push("Would only help Bob with partner tasks.")
	@rogue_text_to_display.push("Doing just ;rogues partner would help anyone who asks for help.")
	@rogue_text_to_display.push("")
	@rogue_text_to_display.push("All other commands:")
	@rogue_text_to_display.push(";rogues setup - to fill out settings.")
	@rogue_text_to_display.push(";rogues wedge <amount> - to create wedges, for example: ;rogues wedge 2")
	@rogue_text_to_display.push(";rogues checkin - to renew your guild dues for 3 months. This requires up to 15,000 silvers.")
	@rogue_text_to_display.push(";rogues help - for other help information.")
	rogue_display_message
elsif @rogue_current_skill == "Help"
	rogue_display_help_message
elsif @rogue_current_skill == "Setup"
	setup.call
elsif @rogue_current_skill == "Wedge"
	if script.vars[2]
		rogue_make_wooden_wedges (script.vars[2].to_i)
	else
		@rogue_text_to_display.push("You must specify how many wedges you want to make.")
		@rogue_text_to_display.push("For example: ;rogues wedge 2")
		rogue_display_message
	end
elsif @rogue_current_skill == "Checkin"
	rogue_checkin_for_guild_dues
else
	if @rogue_current_skill == "Gambits"
		@rogue_text_to_display.push("This script isn't yet setup to do #{@rogue_current_skill} tasks.")
		@rogue_text_to_display.push("The only available skills are Lock Mastery, Stun Maneuvers, Sweep, Subdue, and Cheapshots.")
		rogue_display_message
	else
		@rogue_current_task = "Check next task"
	end
end

if @rogue_current_skill == "Help Partner"
	if @rogue_automate_the_partner_reps.nil?
		@rogue_text_to_display.push("In order to help someone with their guild tasks you must fill out")
		@rogue_text_to_display.push("the \"Automate partner reps\" setting under the \"Partner info\" tab")
		@rogue_text_to_display.push("found in the setup menu.")
		rogue_display_message
		exit
	end
	if @rogue_only_work_with_partner
		@rogue_text_to_display.push("You are helping #{@rogue_only_work_with_partner} ONLY with their guild tasks.")
	else
		@rogue_text_to_display.push("You are helping ANYONE with their guild tasks.")
	end
	if @rogue_automate_the_partner_reps == "full"
		@rogue_text_to_display.push("Script is set to fully automate all partner tasks.")
		@rogue_text_to_display.push("DO NOT GO AFK UNLESS YOU ARE PLAYING IN SHATTERED.")
	elsif @rogue_automate_the_partner_reps == "confirm"
		@rogue_text_to_display.push("Script is set to ask you to enter the word \"shake\"")
		@rogue_text_to_display.push("before it helps a partner with any task.")
	elsif @rogue_automate_the_partner_reps == "none"
		@rogue_text_to_display.push("Script is set to prompt you to restart the script")
		@rogue_text_to_display.push("before it helps a partner with any task.")
	end
	@rogue_text_to_display.push("These settings can be changed in the setup menu.")
	rogue_display_message
	@rogue_how_to_restart_script = script.vars[0]
	@rogue_restart_confirmed = true if script.vars.any?{ |i| i =~ /confirm/i }
	rogue_wait_to_help
elsif @rogue_current_task
	fput "gld stance offensive"
	rogue_put_tools_away
	rogue_check_hands
	Dir.chdir("scripts"){
		if !File.exist?("companion-script-for-rogues.lic")
			@rogue_text_to_display.push("I need to create the script ;companion-script-for-rogues")
			@rogue_text_to_display.push("This script is required for ;rogues to run properly.")
			rogue_display_message
			File.open("companion-script-for-rogues.lic", "w+") { |file|
				file.write("#This is a companion script for ;rogues and is required for that script to run properly.\n")
				file.write("#;rogues created this script.\n")
				file.write("\n")
				file.write("Thread.new{\n")
				file.write("	loop{\n")
				file.write("		wait_until{ checkroom =~ /A Dark Corner/ }\n")
				file.write("		number_to_check_against = @rogue_dark_corner_number\n")
				file.write("		wait_until{ checkroom !~ /A Dark Corner/ }\n")
				file.write("		sleep 3\n")
				file.write("		if running? \"rogues\"\n")
				file.write("			if number_to_check_against == @rogue_dark_corner_number\n")
				file.write("				@rogue_text_to_display.push(\"You are no longer in the room with your trainer.\")\n")
				file.write("				@rogue_text_to_display.push(\"Restarting ;rogues.\")\n")
				file.write("				rogue_display_message\n")
				file.write("				kill_script \"rogues\" if running? \"rogues\"\n")
				file.write("				wait_while{ running? \"rogues\" }\n")
				file.write("				start_script \"rogues\", [@rogue_current_skill]\n")
				file.write("			end\n")
				file.write("		end\n")
				file.write("	}")
				file.write("}\n")
				file.write("\n")
				file.write("loop{\n")
				file.write("	wait_until { !running? \"rogues\" }\n")
				file.write("	sleep 5\n")
				file.write("	exit if !running? \"rogues\"\n")
				file.write("}\n")
			}
			sleep 2
			@rogue_text_to_display.push("I have created the script ;companion-script-for-rogues")
			@rogue_text_to_display.push("I only have to create this script when it does not exist so I shouldn't have to create it again.")
			@rogue_text_to_display.push("Unless the script is deleted.")
			@rogue_text_to_display.push("Have fun!")
			rogue_display_message
			sleep 6
		end
	}
	kill_script "companion-script-for-rogues" if running? "companion-script-for-rogues"
	wait_while{ running? "companion-script-for-rogues" }
	start_script "companion-script-for-rogues"
	if @rogue_partner_name
		@rogue_text_to_display.push("Your partner name: #{@rogue_partner_name}")
		@rogue_text_to_display.push("Your partner room: #{@rogue_partner_room_number}")
		rogue_display_message
	end
	rogue_move_out_of_room
	@rogue_starting_room_when_script_started = Room.current.id if Room.current.id
	@rogue_partner_room_number = Room.current.id if @rogue_partner_room_number.nil?
	loop{
		rogue_do_next_task
		sleep 0.1
	}
end