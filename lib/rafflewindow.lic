=begin
  Enhanced Raffle Script for Wrayth Window
  -----------------------------------------
  When you type "raffle list", the script captures raffle-related lines
  for 2 seconds, parses them into raffle objects, and outputs a formatted
  list of raffles to the "rafflewindow" (titled "raffles").
=end

require 'tzinfo'
require 'time'


hide_me

no_kill_all
setpriority(-1)

# --- Time conversion helper ---
def parse_et_to_local(time_string)
  TZInfo::DataSource.set(:ruby)
  eastern = TZInfo::Timezone.get('America/New_York')  # Eastern Time
  local   = TZInfo::Timezone.get('America/Chicago')     # Central Time
  et_time = eastern.local_to_utc(Time.parse(time_string))
  local.utc_to_local(et_time)
rescue
  Time.now + 999_999
end

# --- Global Variables ---
@raffle_lines = []    # Captured lines from the raffle list output
@current_raffle = nil # Temporary storage for a raffle block being parsed
@raffles = []         # Array of parsed raffle objects
$capture_until = nil  # Timestamp until which we capture lines

# --- Parsing Helpers ---
def finalize_current_raffle
  if @current_raffle && @current_raffle[:id]
    @raffles << @current_raffle
    @current_raffle = nil
  end
end

def parse_raffle_lines
  @raffles = []
  @current_raffle = nil
  @raffle_lines.each do |line|
    case line
    when /Raffle \#(.+) for \"(.+)\"\, Cost\: ([\d,]+) silver/
      finalize_current_raffle
      @current_raffle = {
        id: $1,
        item: $2,
        cost: $3.gsub(",", ""),
        online: false,
        purchased: false,
        winner: nil,
        draw_time: nil,
        object: "",
        location: ""
      }
    when /Location: (.+) at \[(.+)\]/
      if @current_raffle
        @current_raffle[:object] = $1
        @current_raffle[:location] = $2
      end
    when /Draws at: (.+) \(in .+\)/, /Drew at: (.+) \(.+\)/
      @current_raffle[:draw_time] = parse_et_to_local($1) if @current_raffle
    when /Characters (must|had to) be online in order to win/
      @current_raffle[:online] = true if @current_raffle
    when /You have purchased a ticket/
      @current_raffle[:purchased] = true if @current_raffle
    when /\*\*\* You are the (.+) winner of this raffle! \*\*\*/
      @current_raffle[:winner] = $1 if @current_raffle
    end
  end
  finalize_current_raffle
end

def format_raffle_info
  output = ""
  @raffles.each do |raffle|
    output += "Raffle ##{raffle[:id]} for \"#{raffle[:item]}\" (Cost: #{raffle[:cost]} silver)\n"
    output += "  Location: #{raffle[:object]} at [#{raffle[:location]}]\n"
    if raffle[:draw_time]
      output += "  Draws at: #{raffle[:draw_time].strftime('%a %b %e %I:%M:%S %p %Z')}\n"
    end
    output += "  Characters #{raffle[:online] ? 'must' : 'do not need'} be online in order to win.\n"
    output += "  #{'You have purchased a ticket.' if raffle[:purchased]}\n"
    output += "  #{raffle[:winner] ? "*** You are the #{raffle[:winner]} winner of this raffle! ***" : ""}\n"
    output += "\n"
  end
  output
end

# --- Wrayth Window Output Helper ---
def Raffle_Window(message)
  # Clears the window and outputs the complete message.
  puts "<clearStream id=\"rafflewindow\"/><pushStream id=\"rafflewindow\"/>#{message}<popStream/>"
end

# --- Create the Raffle Window ---
puts "<closeDialog id='rafflewindow'/><streamWindow id='rafflewindow' title='raffles' location='left' resident='true'></streamWindow>"

# --- before_dying Hook ---
before_dying {
  Raffle_Window("Raffle script is not running :(")
}

# --- Main Loop ---
while (line = get)
  # Start capturing when the user types "raffle list"
  if line =~ /raffles are currently active/i
    @raffle_lines = []    # Reset captured lines
    $capture_until = Time.now + 2  # Capture for 2 seconds
    Raffle_Window("Capturing raffle list...\n")
    next
  end

  # If we are within the capture period, capture relevant raffle lines
  if $capture_until && Time.now <= $capture_until
    if line =~ /Raffle \#/ || line =~ /Location:/ || line =~ /Draws at:/ || 
       line =~ /Drew at:/ || line =~ /Characters (must|had to) be online/ || 
       line =~ /You have purchased a ticket/ || line =~ /\*\*\* You are the/
      @raffle_lines << line
    end
  # Once capture period is over and we have captured lines, process them
  elsif $capture_until && Time.now > $capture_until && !@raffle_lines.empty?
    parse_raffle_lines
    formatted = format_raffle_info
    Raffle_Window(formatted)
    $capture_until = nil
  end
end