=begin
  This script creates a dedicated window to track raffles and adjust the time to the players correct time zone.

  Type the command RAFFLE LIST in game after starting the script to populate the raffle window.

  Changelog:
   1.0.1 (2025-04-26)
     Corrections for output.
   1.0.0 (2025-04-05)
     Initial release.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, raffle, raffles, track
=end

require 'tzinfo'
require 'time'
require 'timeout'

hide_me
no_kill_all
setpriority(-1)

# --- Time conversion helper ---
def parse_et_to_local(time_string)
  TZInfo::DataSource.set(:ruby)
  eastern = TZInfo::Timezone.get('America/New_York')  # Eastern Time
  local   = TZInfo::Timezone.get('America/Chicago')   # Central Time
  et_time = eastern.local_to_utc(Time.parse(time_string))
  local.utc_to_local(et_time)
rescue
  # If parsing fails, return a far-future time so it's not mistakenly discarded.
  Time.now + 999_999
end

# --- Time difference helper ---
def time_diff_in_words(future_time)
  diff = future_time - Time.now
  return nil if diff <= 0

  total_seconds = diff.to_i
  days = total_seconds / 86_400
  total_seconds %= 86_400
  hours = total_seconds / 3_600
  total_seconds %= 3_600
  mins = total_seconds / 60

  parts = []
  parts << "#{days}d" if days > 0
  parts << "#{hours}h" if hours > 0
  parts << "#{mins}m" if mins > 0
  parts << "<1m" if parts.empty?

  parts.join(" ")
end

# --- Global Variables ---
@raffle_lines = []    # Captured lines from the raffle list output
@current_raffle = nil # Temporary storage for a raffle block being parsed
@raffles = []         # Array of parsed raffle objects

# --- Parsing Helpers ---
def finalize_current_raffle
  # Only add the current raffle if it exists, has an ID, and is not marked for discard.
  if @current_raffle && @current_raffle[:id] && !@current_raffle[:discard]
    @raffles << @current_raffle
  end
  @current_raffle = nil
end

def parse_raffle_lines
  @raffles = []
  @current_raffle = nil
  @raffle_lines.each do |line|
    case line
    when /^Raffle \#(.+) for \"(.+)\"\, Cost\: ([\d,]+) silver/
      finalize_current_raffle
      @current_raffle = {
        id: $1,
        item: $2,
        cost: $3.gsub(",", ""),
        online: false,
        logout_ok: true, # default assumption unless overridden
        purchased: false,
        winner: nil,
        draw_time: nil,
        discard: false,
        object: "",
        location: ""
      }

    when /^\s*Location: (.+) at \[(.+)\]/
      if @current_raffle
        @current_raffle[:object] = $1
        @current_raffle[:location] = $2
      end
    when /^\s*Draws at: (.+) \(in .+\)/
      @current_raffle[:draw_time] = parse_et_to_local($1) if @current_raffle
    when /^\s*Drew at: (.+) \(.+\)/
      # Mark the raffle for discard if it has a "Drew at:" line.
      @current_raffle[:discard] = true if @current_raffle
    when /^\s*Characters (must|had to) be (online|present)(?: in the room)? in order to win/
      if $2 == "online"
        @current_raffle[:online] = true
      elsif $2 == "present"
        @current_raffle[:online] = false
        @current_raffle[:logout_ok] = false
      end

    when /^\s*You have purchased a ticket to this raffle/
      @current_raffle[:purchased] = true if @current_raffle
    when /\*\*\* You are the (.+) winner of this raffle! \*\*\*/
      @current_raffle[:winner] = $1 if @current_raffle
    end
  end
  finalize_current_raffle
end

def format_raffle_info
  # Since we now discard any raffle with a "Drew at:" line, we can simply output the raffles.
  output = "Info - RAFFLE SHOW #\nTravel - RAFFLE GUIDE #\nAn asterisk ( * ) denotes a ticket has been purchased for this raffle.\n\n"

  @raffles.each do |raffle|
    raffle_output = ""
    raffle_output += "Raffle ##{raffle[:id]} for \"#{raffle[:item]}\"\n"
    raffle_output += "#{raffle[:cost]} silver\n"
    if raffle[:draw_time]
      time_string = raffle[:draw_time].strftime('%a %b %e %I:%M:%S %p %Z')
      diff_string = time_diff_in_words(raffle[:draw_time])
      if diff_string
        raffle_output += "#{time_string} (#{diff_string})\n"
      else
        raffle_output += "  Draw time has passed.\n"
      end
    end
    raffle_output += "#{raffle[:online] ? 'Must be logged in.' : (raffle[:logout_ok] ? 'Can be logged out.' : 'Must be present.')}\n"

    raffle_output += "\n"

    if raffle[:purchased]
      raffle_output = raffle_output.lines.map do |line|
        line.strip.empty? ? line : "*#{line}"
      end.join
    end

    output += raffle_output
  end
  output
end

# --- Wrayth Window Output Helper ---
def Raffle_Window(message)
  puts "<clearStream id=\"rafflewindow\"/>" +
       "<pushStream id=\"rafflewindow\"/>" +
       "<style fontFamily='monospace'/>" +
       "<pushStream id=\"rafflewindow\"/>#{message}<popStream/>"
end

# --- Create the Raffle Window ---
puts "<closeDialog id='rafflewindow'/><streamWindow id='rafflewindow' title='Raffles' location='left' resident='true' dynamic='true'></streamWindow>"

# --- before_dying Hook ---
before_dying {
  Raffle_Window("Raffle script is not running :(")
}

fput "raffle list"

# --- Main Loop ---
while (line = get)
  if line =~ /raffles are currently active/i
    @raffle_lines = []
    Raffle_Window("Capturing raffle list...\n")

    begin
      Timeout.timeout(0.05) do
        loop do
          next_line = get
          if next_line =~ /^Raffle \#/ ||
             next_line =~ /^\s*Location/ ||
             next_line =~ /^\s*Draws/ ||
             next_line =~ /^\s*Drew/ || # Now capturing any line starting with "Drew"
             next_line =~ /^\s*Players/ ||
             next_line =~ /^\s*Characters/ ||
             next_line =~ /^\s*You have purchased a ticket to this raffle/
            @raffle_lines << next_line
          end
        end
      end
    rescue Timeout::Error
      # Done capturing after 0.05 seconds
    end

    parse_raffle_lines
    formatted = format_raffle_info
    Raffle_Window(formatted)
  end
end
