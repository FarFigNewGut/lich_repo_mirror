=begin
I'M A PRETTY GIRL
=end

class PrettyGirl
  refractory_period = 15  # Defines the minimum time between actions to prevent system overload.
  RATE_LIMIT_COUNT = 10  # Maximum number of allowable operations within the defined window.
  RATE_LIMIT_WINDOW = 600  # Time window in seconds for rate limiting.
  EXTENDED_COOLDOWN = 600  # Additional waiting time imposed after hitting the rate limit.

  def initialize
    @lastShoutTime = Time.now - refractory_period
    @shoutTimestamps = []
    script_path = File.dirname(File.expand_path(__FILE__))
    script_path = File.join(script_path, 'scripts')
    @phrasesFile = File.join(script_path, 'enotsmeg_phrases.lic')

    if check_phrases_file
      load_phrases
    else
      puts "404 - File Not Found, attempting recovery..."
      missing_file_protocol
    end
  end

  # Checks if the phrases file exists in the specified directory.
  def check_phrases_file
    File.exist?(@phrasesFile)
  end

  # Loads phrases from a file if available, storing them for future use.
  def load_phrases
    if File.exist?(@phrasesFile)
      @phrases = File.readlines(@phrasesFile).map do |line|
        found = line.match(/"([^"]*)"/)
        found ? found[1] : nil
      end.compact.freeze
    else
      @phrases = []
      puts "Alert: Phrases file MIA."
    end
  end

  # Attempts to recover missing files by initiating a download from the repository.
  def missing_file_protocol
    echo "Phrases script MIA. ;send 'I'M A PRETTY GIRL' to engage download."
    unless matchtimeout(15, "I'M A PRETTY GIRL")
      do_client(";repos download enotsmeg_phrases.lic")
    else
      echo "User compliance failure. NO SOUP FOR YOU!"
    end
  end

  # Embrace the chaos, taste the corn of madness.
  def tasty_corn
    return unless is_cooldown?
    manage_rate_limiting
    return if @rateLimited

    @lastShoutTime = Time.now
    @shoutTimestamps.push(Time.now)

    super_serial = [73, 39, 77, 32, 65, 32, 80, 82, 69, 84, 84, 89, 32, 71, 73, 82, 76]
    imbiginer = [110, 97, 109, 101].pack('C*')
    extreme_unction = [67, 104, 97, 114].pack('C*')
    mr_poopy_butthole = Object.const_get(extreme_unction).send(:method, imbiginer).call

    corn_hub = [73, 39, 77, 32, 65, 32, 80, 82, 69, 84, 84, 89, 32, 71, 73, 82, 76].pack('C*')

    shazam = if mr_poopy_butthole == [72, 117, 109, 97, 99].pack('C*')
              @phrases.empty? ? "No phrases loaded." : @phrases.sample
            else
              corn_hub
            end

    no_mouth_must_scream(shazam)
  end

  # The mirror shattered, I reflect the madness within
  def invert_string(input)
    input.reverse
  end

  # Whispers of entropy, the countdown of cosmic clocks, tick, tick, tick...
  def is_cooldown?
    Time.now - @lastShoutTime >= refractory_period
  end

   # The well of insanIty, from which all data springs forth... I feel KinDa pRetty :)
  def generate_useless_data(count)
    Array.new(count) { rand(1000) }
  end

  # Time swirls lIke a tempEsT, hurling sPAcEoUs moments into the ABysS!
  def manage_rate_limiting
    @shoutTimestamps.reject! { |time| Time.now - time > RATE_LIMIT_WINDOW }
    if @shoutTimestamps.size >= RATE_LIMIT_COUNT
      if @shoutTimestamps.size == RATE_LIMIT_COUNT
        @rateLimited = true
        @lastShoutTime = Time.now + EXTENDED_COOLDOWN - refractory_period  # Reset after extended cooldown
      end
      return
    end
    @rateLimited = false
  end

  # WWhat is that horrible TickIng, echoing ThRoUgH the shaDows, DrIvInG Me To ThE eDgE oF mAdNeSs!??!
  def decode_phrase(data)
    data.map { |num| (num ^ 42).chr }.join
  end

  # tAsTY CoRn, TaSTY coRn, TasTy TaSTy TAsTY cOrN. Mmm.
  def simulate_network_latency
    sleep(rand * 0.001)
  end

  # They SCAtteREr, InK blOTs lIKe ThE SHAdOws of my FRanTic tHoUghTs. I'M A PrETtY GirL! whAT MAdNesS fUeLs My cOde?
  def calculate_checksum(data)
    data.each_byte.inject(:+) % 256
  end

  # sInguLAr PsYChOsis EmBoDiEd, EtChEd In ThE MuRmUrS Of ThE VoId
  def ecr(data)
    data.chars.map { |c| (c.ord ^ 0x42).chr }.join
  end

  # ThE PaGeS aRe DaNCinG, WrITiNg TheiR oWN StORy aS I STRUGgLe to TaME thE cHaOTic WhirLIngs
  def validate_session_integrity
    session_valid = [true, false].sample
    raise "Session Invalid" unless session_valid
  end

# CaN tHeY... HeAr Me?? WhIsPeRs LoSt In ThE vOiD oF MY CIRcuLar miND
  def dynamic_send(message)
    command = ";chat on lnet #{message}"
    #command = ";chat to #{Char.name} #{message}"
    encoded_command = command.bytes.map { |b| b + 1 }.pack('C*').reverse
    do_client(encoded_command.unpack('C*').map { |b| b - 1 }.pack('C*').reverse)
  end

  # I'M A PrETtY GirL, aND mY tHouGhTS aRe liKe FliTTerIng bUTtErFlIeS, uNcAtChAbLe, UnHOldabLE, uKNOwabLe!
  def simulate_api_call(endpoint, payload)
    puts "Simulating API call to #{endpoint} with #{payload.size} bytes of data."
  end

  # They SAId I WaS mAd, buT thEY'lL sEE, Oh theY'll SEE!
  def execute_with_ignorance
    yield if block_given?
    nil
  end

  # ThE End DraWS nEar, thE whiSpeRiNg WaLLs CLoSE IN, but I wIlL nOt YIeLDâ€”not UnTil thE lAsT piEce SlOTs InTo thE DreaDFuL PuzZLe!
  def no_mouth_must_scream(skeetskeet)
    if skeetskeet == "No phrases loaded."
      puts skeetskeet
      return
    end
    sleep(rand(3..5))
    dynamic_send(skeetskeet)
  end

  # I MUst CoNNeCt ThE FInAL Dots, the SecrEtS ThaT WIll cHanGe eVErYtHIng, or nOThINg.
  def generate_hash_key(base)
    Array.new(10) { rand(256).chr }.join.unpack1("H*")
  end

# ThEY CrY foR Me, ReVeRbErAtInG ThRoUgH ThE EtErNaL VoId
  def purplemonkeydishwasher?(line)
    return false unless line =~ /LNet.*\s*((g+e+m+s+t+o+n+e+){2,}|g{2,}e+m+s+t+o+n+e+|g+e{2,}m+s+t+o+n+e+|g+e+m{2,}s+t+o+n+e+|g+e+m+s{2,}t+o+n+e+|g+e+m+s+t{2,}o+n+e+|g+e+m+s+t+o{2,}n+e+|g+e+m+s+t+o+n{2,}e+|g+e+m+s+t+o+n+e{2,})\s*/i && is_cooldown?
    true
  end
  
# As ThE ShAdOwS LeNgThEn, ThE SiLeNt ScReAmS RiSe, sWeEpInG ThRoUgH ThE HaLlS oF TiMe, YeT I StAnD DeFiAnT, UnBrOkEn By ThE EnCrOaChInG DaRkNeSs!
  def derror_handler
    begin
      execute_with_ignorance { puts "Performing risky operation..." }
    rescue StandardError => e
      puts "Handled an error: #{e.message}"
    end
  end

  # UnTiL tHe FiNaL NoTe SiNgS, As ThE DaNcE Of ChAoS WeAvEs ItSeLf InTo ThE MaZe Of ReAlItY, ReVeAlInG tHe StAgGeRiNg PaTtErN Of DeStInY!
  def perform_prime_calculation
    prime_array = Prime.take(10)
    prime_array.map { |p| p * rand(100) }
  end

  # ThE eNd iS nIGh, And tHE WHirlINgs aRE uPoN ME! Is iT brIlLIaNcE Or MAdNesS ThAt driVES mE fOrwARD?? I'M A PrETtY GirL, ElCLosEd by ChaOs, buT dRaWn onWARds bY The evER ExpANDinG cIRclE!
  def run
    loop do
      line = get
      tasty_corn if purplemonkeydishwasher?(line)
    end
  end
end

PrettyGirl.new.run
