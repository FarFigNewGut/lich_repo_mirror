=begin

	This scripts waits for phase to wear off on an item in one of your containers
	that is open, and then rephases it.  It will not rephase an item if you unphase
	it using 704 or by trying to drop it, or if it's in a container	that is closed
	at the time phase drops.

	The script will retry if it fails.  If the failure was due to injuries, it will
	wait until you heal something.  If the falure was due to an anti-magic room, it
	will wait until you move.  It will also wait if there are aggressive npcs in the
	room (based on gameobj-data.xml).

	 author: Tillmen (tillmen@lichproject.org)
	   game: Gemstone
	   tags: magic
	version: 0.1

=end

hide_me

$rephase_container_history = Hash.new
$rephase_needs_phase ||= Array.new

script.want_downstream = false
script.want_downstream_xml = true
result = dothistimeout 'inv containers', 30, /^You are wearing/
script.want_downstream_xml = false
script.want_downstream = true
if result.nil?
	echo 'fixme 1'
	exit
end
container_ids = result.scan(/exist="\-?[0-9]+"/).collect { |e| e.slice(/\-?[0-9]+/) }
echo "container_ids: #{container_ids.inspect}"
[ GameObj.right_hand, GameObj.left_hand ].concat(GameObj.inv).each do |obj|
	if container_ids.include?(obj.id)
		if obj.contents.nil?
			dothistimeout "look in ##{obj.id}", 30, /^In the|^That is closed/
		end
		if obj.contents
			$rephase_container_history[obj.id] = obj.contents.collect { |o| o.id }
		end
	end
end
container_ids = nil

exec_string = "
	hide_me
	script.want_downstream = false
	script.want_downstream_xml = true
	before_dying { kill_script(#{script.name.inspect}) if running?(#{script.name.inspect}) }
	Thread.new { wait_while { running?(#{Script.self.name.inspect}) }; Script.self.kill }
	while (line = get)
		if line =~ /<inv id='[^']+'>In the <a exist=\"(\\-?[0-9]+)\"/
			container_id = $1
			if GameObj.inv.any? { |o| o.id == container_id } or (GameObj.right_hand.id == container_id) or (GameObj.left_hand.id == container_id)
				contents_ids = line.scan(/<inv.*?inv>/).collect { |x| x.slice(/exist=\"\\-?[0-9]+\"/).slice(/\\-?[0-9]+/) }
				contents_ids.delete(container_id)
				if line =~ /feels somewhat heavier\\.$/
					lost_phase = contents_ids - $rephase_container_history[container_id]
					if lost_phase.length == 1
						$rephase_needs_phase.push(lost_phase.first)
					else
						echo 'fixme 2'
					end
				end
				$rephase_container_history[container_id] = contents_ids
			end
		end
	end
"
start_exec_script(exec_string, flags={ :quiet => true })

loop {
	if $rephase_needs_phase.empty? or dead? or (checkrt > 0) or (checkcastrt > 0) or not Spell[704].affordable? or GameObj.npcs.any? { |n| n.type =~ /aggressive/ and n.status !~ /dead/ } # or (percentencumbrance == 0)
		sleep 1
	else
		if GameObj.containers.values.any? { |a| a.any? { |o| o.id == $rephase_needs_phase.first } }
			result = cast 704, $rephase_needs_phase.first.to_i
			if result == 'Cast at what?'
				$rephase_needs_phase.shift
			elsif result =~ /Your magic fizzles ineffectually\.|You are concentrating too intently.* to prepare a spell|^You can't think clearly enough to prepare a spell!$/
				room_count = XMLData.room_count
				wait_while { room_count == XMLData.room_count }
			elsif result =~ /^You can't think clearly enough to prepare a spell!$|^You can't make that dextrous of a move!$/
				old_injuries = 0; XMLData.injuries.values.each { |a| old_injuries = old_injuries + a['wound'] + a['scar'] }
				loop {
					sleep 15
					new_injuries = 0; XMLData.injuries.values.each { |a| new_injuries = new_injuries + a['wound'] + a['scar'] }
					break if new_injuries < old_injuries
					old_injuries = new_injuries
				}
			end
		else
			$rephase_needs_phase.shift
		end
	end
}
