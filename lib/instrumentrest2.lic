=begin
--------------------------------------------------------------------------------
	Author: Demandred
	Contributor: Oweodry
	Version: 1.0
	
	04/02/2021

This script was nicely written by Oweodry, and he is the original author,
the only reason I'm listed here as author is because I can't upload in his name.
He wrote a wonderful script...

That being said, I've improved and fleshed out some extra options, as such:

;vars set instrument=<instrument noun>
	Just the NOUN for your instrument.
;vars set instrumentbag=<bag name>
	This can be a noun if it's unique in your	inventory, or match part or all of 
	the full name(careful, sometimes these are deceptive)
;vars set instrumentrooms=<roomid,roomid,roomid>
	A single room id(these are the numeric lich room ids) or a list of room ids
	(NO spaces, just commas) - this would replace the behavior where it checks
	if you're on a node, so you can play at a list of rooms you prefer (including 
	tables)

	( these can also all be set using ;vars setup )

	I also added a random style selector...so you're not just playing one thing.

	He had no version on the old one, so this is my version 1.0

	As a side note, you can opt to not enter any uservars info, and still use this
	script as it was originally, and it will still do randomized playing now. It
	will just work the old way mostly(just checking if you're on a room with the
	"node" tag)

--------------------------------------------------------------------------------
	OLD INFO PRE-DEMANDRED EDITS
--------------------------------------------------------------------------------
	Instrumentrest
  07/16/2012
  Oweodry

 Use :
  ;instrumentrest <container> <instrument>

 Details :
  This script plays an instrument while you rest. It has the following features:
  - Waits until your character is at a pre-defined list of nodes before playing
  - Won't trigger when herbheal or useherbs are running

 Notes :
  - No support or future updates are guaranteed
  - I'm likely to update the node list if any contributors adhere to my format
  - There are hard-coded variables
  - Sometimes go2 is somtimes so fast and instruments get stowed during climbs
  - Change the first pause timer if you want to play sooner
  - An open left hand is assumed

 Updates :
  - 10/20/2010 Released
  - 07/16/2012 Changed node list to use room tags (uploaded untested)
--------------------------------------------------------------------------------
=end

bag = nil
inst = nil
instrument_rooms = Array.new

# Present help string if 'help' is found in arguments
if script.vars.find { |val| val =~ /\bhelp\b/i }
	respond("Plays instrument while resting.")
	respond("Syntax:   ;instrumentrest <container> <instrument>")
	respond("It can also use the three following UserVars:")
	respond("UserVars.instrumentbag  - set: ;vars set instrumentbag=<bag noun or matched description>")
	respond("UserVars.instrument     - set: ;vars set instrument=<instrument noun>")
	respond("UserVars.instrumentrooms - set: ;vars set instrumentrooms=<roomid,roomid,etc>")
	respond("With the first two UserVars set, you can start the script with - ;instrumentrest2")
	respond("The third UserVar (instrumentrooms) is optional. With it set, it will only work in that/those room(s)(by lich id)")
	respond("This is useful if you want to practice at a table, where node is not a tag.")
	exit
end

# Demandred - setting up some uservars instead

# Setting up the rooms to play in if the var is populated
if !UserVars.instrumentrooms.nil?
	instrument_rooms = UserVars.instrumentrooms.split(",")
end

# Instrument container 
if UserVars.instrumentbag.nil?
	bag = GameObj.inv.find { |i| script.vars[1] =~ /#{i.name}|#{i.noun}/ }
else
	bag = GameObj.inv.find { |i| UserVars.instrumentbag =~ /#{i.name}|#{i.noun}/ }
end

if bag.contents.nil?
	result = dothistimeout "look in ##{bag.id}", 5, /^In the, |^There is nothing in the|^That is closed/
	if result =~ /That is closed/
		fput "open ##{bag.id}"
		dothistimeout "look in ##{bag.id}", 5, /^In the\, |^There is nothing in the/
	end
end

# Instrument
if UserVars.instrument.nil?
	inst = bag.contents.find { |i| i.name =~ /#{variable[2]}/ }
	if inst.nil?
		if checkright == "#{variable[2]}"
			inst = GameObj.right_hand
		elsif checkleft == "#{variable[2]}"
			inst = GameObj.left_hand
		end
	end
else
	inst = bag.contents.find { |i| i.name =~ /#{UserVars.instrument}/ }
	if inst.nil?
		if checkright == "#{UserVars.instrument}"
			inst = GameObj.right_hand
		elsif checkleft == "#{UserVars.instrument}"
			inst = GameObj.left_hand
		end
	end
end

# Make sure we found an instrument somewhere to use. If not: exit.
if inst.nil?
	echo "Ran into a problem and can't find your instrument in your hand or container."
	echo "Exiting."
	exit
end

# Timer
total_time=0
n = 0
i = 0

# Random styles to sample from
if inst.noun =~ /tambourine|cymbals/
	randstyle = [ "soft", "fast", "slow" ]
else
	randstyle = [ "joyful", "mournful", "soft", "fast", "slow", "intense", "jaunty", "flamboyant", "aimless", "somber", "inspiring" ]
end


before_dying {
	if [GameObj.right_hand.id, GameObj.left_hand.id].include?(inst.id)
		fput "stop playing"
		fput "put ##{inst.id} in ##{bag.id}"
	end
}

loop {

	# Make sure you're on a node (i.e. resting) - Demandred changed to only play at my table
	if instrument_rooms.nil? || instrument_rooms.empty?
		wait_until { Room.current.tags.include?("node") }
	else
		wait_until { instrument_rooms.include?(Room.current.id.to_s) }
	end
	# pause while picking boxes!
	wait_while{running? "tpick"}
	currentroom = Room.current.id
	# Change this pause timer if you want to play sooner
	pause '5s'
	# check for tpick again and go to next loop if it's running
	if Script.running?('tpick')
		next
	end
	# Check that you've been in one place a while
	if currentroom == Room.current.id and !running? "herbheal" and !running? "useherbs" and (!checkleft || checkleft == inst.noun) and (!checkright || checkright == inst.noun)
		
		# Get instrument out
		waitrt?
		if !checkright && !checkleft
			until checkright == inst.noun
				dothistimeout "get ##{inst.id}", 3, /You remove[ ].+[ ]from in .+\.|Get what\?|\.\.\.wait \d\d? seconds?\./
				pause 0.2
			end
		end
		if checkleft != inst.noun and checkright == inst.noun then fput "swap"
			if Char.prof == "Bard"
				fput "tune ##{inst.id}"
			end
			fput "play ##{inst.id} #{randstyle.sample}"
			n += 1
			echo "### Play cycle ##{n.to_s} (room checks: 1 sec / replays: 5 min 5 sec /)"; echo "### Total time playing: #{total_time/60} min"
		elsif checkleft != inst.noun and checkright != inst.noun
			echo "ERROR: No instrument?"
			exit
		else
			fput "play ##{inst.id} #{randstyle.sample}"
			n += 1
			echo "### Play cycle ##{n.to_s} (room checks: 1 sec / replays: 5 min 5 sec /)"; echo "### Total time playing: #{total_time/60} min"
		end

		# Check room number every second, every 5 minutes 5 seconds re-play instrument
		i = 0
		while currentroom == Room.current.id
			# check if we started tpick - if so stop playing and break out of the loop
			# also added a hand check to wait until the instrument isn't in a hand in tpick
			if Script.running?('tpick')
				if checkleft == inst.noun || checkright == inst.noun
					fput "stop playing"
					fput "put ##{inst.id} in ##{bag.id}"
				end
				break
			end
			pause '1s'
			i += 1
			total_time += 1
			if i == 305
				waitrt? 
				if Char.prof == "Bard"
					fput "tune ##{inst.id}"
				end
				fput "play ##{inst.id} #{randstyle.sample}"
				n += 1
				echo "### Play cycle ##{n.to_s} (room checks: 1 sec / replays: 5 min 5 sec /)"; echo "### Total time playing: #{total_time/60} min"
				i = 0
			end
		end

		# Put instrument away
		if checkleft == inst.noun
			waitrt?; fput "put ##{inst.id} in ##{bag.id}"
		end
	end

}
