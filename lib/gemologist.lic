
=begin
	# Author: Alastir
	# Version: 1.0
	
	Gem bottles should be stored in the deep chest of your locker.
	;go2 save locker=room number so it knows where to go.
	
=end

$expedite = true
$first_run = true

if $frontend == 'stormfront'
	fam_window_begin = "<pushStream id=\"loot\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

unless Room.current.id != 4
	puts("#{fam_window_begin}This room is not mapped in go2.  Go somewhere that is\r\n#{fam_window_end}")
	exit
end
starting_room_id = Room.current.id

go_home = proc{
	if Room.current.id == starting_room_id
	else
		puts("#{fam_window_begin}I am going to the resting room.\r\n#{fam_window_end}")
		start_script("go2", [ starting_room_id, '_disable_confirm_' ])
		wait_while { running?("go2")}
	end
}

go_gemshop = proc {
	puts("#{fam_window_begin}I am going to the gemshop.\r\n#{fam_window_end}")
	start_script "go2", [ "gemshop", '_disable_confirm_' ]
	wait_while { running?("go2")}
	}

go_guild = proc {
	if Room.current.id == 13048
	elsif Room.current.id == 3785
	else
		puts("#{fam_window_begin}I am going to the Adventurer's Guild.\r\n#{fam_window_end}")
		start_script("go2", [ "advguild", '_disable_confirm_' ])
		wait_while { running?("go2")}
	end
}

go_locker = proc{
	puts("#{fam_window_begin}I am going to your locker.\r\n#{fam_window_end}")
	start_script "go2", [ "locker", '_disable_confirm_' ]
	wait_while { running?("go2")}
	fput "open locker"
}

deposit_check = proc {
	if percentencumbrance >= 10
		start_script "go2", [ "bank", '_disable_confirm_' ]
		wait_while { running?("go2")}
		fput "deposit all"
	end
}

rest = proc {
	total_minutes = 0
	loop {
		if percentmind >= 90
			puts("#{fam_window_begin}\r\nI have been resting for #{total_minutes} minutes.\r\n#{fam_window_end}")
			sleep 60
			total_minutes += 1
		else
			break
		end
	}
}

should_rest = proc {

	if percentmind > 90
		#puts("#{fam_window_begin}\r\nYour mind is full, it's time to rest.\r\n#{fam_window_end}")
		go_home.call
		rest.call
	else
		#puts("#{fam_window_begin}\r\nYour mind is not full.\r\n#{fam_window_end}")
	end
}

sell_gems = proc {
	#Sell gems
		puts("#{fam_window_begin}I am going to sell #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
		quantity = "#{Vars.quantity}".to_i
		quantity.times {
			result = dothistimeout "get my #{Vars.gem}", 3, /^You remove|Get what?/
			if result =~ /^You remove/
				dothistimeout "sell #{Vars.gem}", 3, /gives it a careful examination and hands you/
			elsif result =~ /Get what?/
				#This should not happen?
				#go_home.call
			end
		}
		puts("#{fam_window_begin}I sold #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
}

success_wait = proc {
			puts("#{fam_window_begin}I successfully completed the gem bounty.\r\n#{fam_window_end}")
			deposit_check.call
			go_home.call
			loop {
				if Spell['Next Bounty'].active?
					time = Spell['Next Bounty'].timeleft
					total_time = time.round
					puts("#{fam_window_begin}Resting for #{total_time} minutes until I can get a bounty.\r\n#{fam_window_end}")
					sleep 60
				else
					should_rest.call
					break
				end
				}
}

turn_in_task = proc {
	puts("#{fam_window_begin}I am going to the Adventurer's Guild.\r\n#{fam_window_end}")
	start_script("go2", [ "advguild", '_disable_confirm_' ])
	wait_while { running?("go2")}
	fput "ask taskmaster about bounty"
	success_wait.call
}

second_bounty_check = proc {
	result = checkbounty
	if result =~ /The gem dealer in|has received orders from multiple customers requesting/
		puts("#{fam_window_begin}I have a gem bounty.\r\n#{fam_window_end}")
		go_gemshop.call
		sell_gems.call
		turn_in_task.call
	end
}

failed_rummage = proc {
	go_guild.call
	multifput "ask taskmaster about removal", "ask taskmaster about removal"
}

count_check = proc {
		puts("#{fam_window_begin}I am checking the portions of gem that I have.\r\n#{fam_window_end}")
		quantity = "#{Vars.quantity}".to_i
		result = dothistimeout "look in my bottle", 3, /Inside the (.*) you see (.*) portion(?:s) of/
		if result =~ /Inside the (.*) you see (.*) portion(?:s) of/
			portion = $2.to_i
			if portion == 0
				pause_script ("gemologist")
			elsif portion == nil
				pause_script ("gemologist")
			else
			end
		end
		if portion >= quantity
			puts("#{fam_window_begin}I have #{portion} portions and need #{quantity} gems.\r\n#{fam_window_end}")
		else
			puts("#{fam_window_begin}I have #{portion} portions and need #{quantity} gems.\r\n#{fam_window_end}")
			fput "put bottle in locker"
		end
}

rummage_wardrobe = proc {
	empty_hands
	if $plural == true
		respond "I am going to rummage for #{Vars.rummagegem}"
		result = dothistimeout("rummage in wardrobe ingredient #{Vars.rummagegem}", 5, /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove|You rummage through a clothing wardrobe, but can't seem to locate anything like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate anything like that\.|You rummage through a clothing wardrobe, but can't seem to locate any ingredient like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate any ingredient like that\./)
		if result =~ /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove/
			quantity = "#{Vars.quantity}".to_i
			count = "#{Vars.quantity}".to_i
			count_check.call
			
			quantity.times {
				result = dothistimeout "shake my bottle", 3, /^You give your (?:jar|bottle) a hard shake|You shake your (?:jar|bottle) a few times before you realize that it is empty\.|You'll need a free hand to hold what comes out of the (?:jar|bottle).|Shake what?|I could not find what you were referring to.|You are not holding that./
				if result =~ /^You give your (?:jar|bottle) a hard shake/
					count -= 1
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
					if count == 0
						puts("#{fam_window_begin}I was able to find #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
						dothistimeout "put my bottle in locker", 3, /^You put|^You place/
						dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
						go_gemshop.call
						sell_gems.call
						turn_in_task.call
					end
				elsif result =~ /You shake your (?:jar|bottle) a few times before you realize that it is empty\./
					#This is no longer needed with count_check
					puts("#{fam_window_begin}I am out of #{Vars.gem}.\r\n#{fam_window_end}")
					#Unable to complete bounty, get a new bounty.
					dothistimeout "put my bottle in locker", 3, /^You put|^You place/
					dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
					failed_rummage.call
				elsif result =~ /You'll need a free hand to hold what comes out of the (?:jar|bottle)./
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
				elsif result =~ /Shake what?|I could not find what you were referring to.|You are not holding that./
					fput "close locker"
					failed_rummage.call
					break
				end
			}
		elsif result =~ /You rummage through a clothing wardrobe, but can't seem to locate anything like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate anything like that\.|You rummage through a clothing wardrobe, but can't seem to locate any ingredient like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate any ingredient like that\./
			puts("#{fam_window_begin}I do not have #{Vars.gem} stored in my wardrobe, I have failed to find gems.\r\n#{fam_window_end}")
			fput "close locker"
			#Unable to complete bounty, get a new bounty.
			failed_rummage.call
			next
		end
	else
		respond "I am going to rummage for #{Vars.gem}"
		result = dothistimeout("rummage in wardrobe ingredient #{Vars.gem}", 5, /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove|You rummage through a clothing wardrobe, but can't seem to locate anything like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate anything like that\.|You rummage through a clothing wardrobe, but can't seem to locate any ingredient like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate any ingredient like that\./)
		if result =~ /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove/
			quantity = "#{Vars.quantity}".to_i
			count = "#{Vars.quantity}".to_i
			count_check.call
			
			quantity.times {
				result = dothistimeout "shake my bottle", 3, /^You give your (?:jar|bottle) a hard shake|You shake your (?:jar|bottle) a few times before you realize that it is empty\.|You'll need a free hand to hold what comes out of the (?:jar|bottle).|Shake what?|I could not find what you were referring to.|You are not holding that./
				if result =~ /^You give your (?:jar|bottle) a hard shake/
					Vars['gem'] = "#{GameObj.left_hand.name}"
					count -= 1
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
					if count == 0
						puts("#{fam_window_begin}I was able to find #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
						dothistimeout "put my bottle in locker", 3, /^You put|^You place/
						dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
						go_gemshop.call
						sell_gems.call
						turn_in_task.call
					end
				elsif result =~ /You shake your (?:jar|bottle) a few times before you realize that it is empty\./
					#This is no longer needed with count_check
					puts("#{fam_window_begin}I am out of #{Vars.gem}.\r\n#{fam_window_end}")
					dothistimeout "put my bottle in locker", 3, /^You put|^You place/
					dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
					#Unable to complete bounty, get a new bounty.
					failed_rummage.call
				elsif result =~ /You'll need a free hand to hold what comes out of the (?:jar|bottle)./
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
				elsif result =~ /Shake what?|I could not find what you were referring to.|You are not holding that./
					fput "close locker"
					failed_rummage.call
					break
				end
			}
		elsif result =~ /You rummage through a clothing wardrobe, but can't seem to locate anything like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate anything like that\.|You rummage through a clothing wardrobe, but can't seem to locate any ingredient like that.|You rummage through a clothing wardrobe\, but can\'t seem to locate any ingredient like that\./
			puts("#{fam_window_begin}I do not have #{Vars.gem} stored in my wardrobe, I have failed to find gems.\r\n#{fam_window_end}")
			fput "close locker"
			#Unable to complete bounty, get a new bounty.
			failed_rummage.call
			next
		end
	end
}

rummage_bin = proc {
	empty_hands
	if $plural == true
		respond "I am going to rummage for #{Vars.rummagegem}"
		result = dothistimeout("rummage in bin ingredient #{Vars.rummagegem}", 5, /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove|You rummage through a magical item bin, but can't seem to locate anything like that.|You rummage through a magical item bin\, but can\'t seem to locate anything like that\.|You rummage through a magical item bin, but can't seem to locate any ingredient like that.|You rummage through a magical item bin\, but can\'t seem to locate any ingredient like that\./)
		if result =~ /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove/
			quantity = "#{Vars.quantity}".to_i
			count = "#{Vars.quantity}".to_i
			count_check.call
			
			quantity.times {
				result = dothistimeout "shake my bottle", 3, /^You give your (?:jar|bottle) a hard shake|You shake your (?:jar|bottle) a few times before you realize that it is empty\.|You'll need a free hand to hold what comes out of the (?:jar|bottle).|Shake what?|I could not find what you were referring to.|You are not holding that./
				if result =~ /^You give your (?:jar|bottle) a hard shake/
					count -= 1
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
					if count == 0
						puts("#{fam_window_begin}I was able to find #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
						dothistimeout "put my bottle in locker", 3, /^You put|^You place/
						dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
						go_gemshop.call
						sell_gems.call
						turn_in_task.call
					end
				elsif result =~ /You shake your (?:jar|bottle) a few times before you realize that it is empty\./
					#This is no longer needed with count_check
					puts("#{fam_window_begin}I am out of #{Vars.gem}.\r\n#{fam_window_end}")
					#Unable to complete bounty, get a new bounty.
					dothistimeout "put my bottle in locker", 3, /^You put|^You place/
					dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
					failed_rummage.call
				elsif result =~ /You'll need a free hand to hold what comes out of the (?:jar|bottle)./
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
				elsif result =~ /Shake what?|I could not find what you were referring to.|You are not holding that./
					fput "close locker"
					failed_rummage.call
					break
				end
			}
		elsif result =~ /You rummage through a magical item bin, but can't seem to locate anything like that.|You rummage through a magical item bin\, but can\'t seem to locate anything like that\.|You rummage through a magical item bin, but can't seem to locate any ingredient like that.|You rummage through a magical item bin\, but can\'t seem to locate any ingredient like that\./
			puts("#{fam_window_begin}I do not have #{Vars.gem} stored in my bin, checking the wardrobe.\r\n#{fam_window_end}")
			rummage_wardrobe.call
			next
		end
	else
		respond "I am going to rummage for #{Vars.gem}"
		result = dothistimeout("rummage in bin ingredient #{Vars.gem}", 5, /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove|You rummage through a magical item bin, but can't seem to locate anything like that.|You rummage through a magical item bin\, but can\'t seem to locate anything like that\.|You rummage through a magical item bin, but can't seem to locate any ingredient like that.|You rummage through a magical item bin\, but can\'t seem to locate any ingredient like that\./)
		if result =~ /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove/
			quantity = "#{Vars.quantity}".to_i
			count = "#{Vars.quantity}".to_i
			count_check.call
			
			quantity.times {
				result = dothistimeout "shake my bottle", 3, /^You give your (?:jar|bottle) a hard shake|You shake your (?:jar|bottle) a few times before you realize that it is empty\.|You'll need a free hand to hold what comes out of the (?:jar|bottle).|Shake what?|I could not find what you were referring to.|You are not holding that./
				if result =~ /^You give your (?:jar|bottle) a hard shake/
					Vars['gem'] = "#{GameObj.left_hand.name}"
					count -= 1
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
					if count == 0
						puts("#{fam_window_begin}I was able to find #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
						dothistimeout "put my bottle in locker", 3, /^You put|^You place/
						dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
						go_gemshop.call
						sell_gems.call
						turn_in_task.call
					end
				elsif result =~ /You shake your (?:jar|bottle) a few times before you realize that it is empty\./
					#This is no longer needed with count_check
					puts("#{fam_window_begin}I am out of #{Vars.gem}.\r\n#{fam_window_end}")
					dothistimeout "put my bottle in locker", 3, /^You put|^You place/
					dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
					#Unable to complete bounty, get a new bounty.
					failed_rummage.call
				elsif result =~ /You'll need a free hand to hold what comes out of the (?:jar|bottle)./
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
				elsif result =~ /Shake what?|I could not find what you were referring to.|You are not holding that./
					fput "close locker"
					failed_rummage.call
					break
				end
			}
		elsif result =~ /You rummage through a magical item bin, but can't seem to locate anything like that.|You rummage through a magical item bin\, but can\'t seem to locate anything like that\.|You rummage through a magical item bin, but can't seem to locate any ingredient like that.|You rummage through a magical item bin\, but can\'t seem to locate any ingredient like that\./
			puts("#{fam_window_begin}I do not have #{Vars.gem} stored in my bin, checking the wardrobe.\r\n#{fam_window_end}")
			rummage_wardrobe.call
			next
		end
	end
}

rummage_chest = proc {
	empty_hands
	if $plural == true
		respond "I am going to rummage for #{Vars.rummagegem}"
		result = dothistimeout("rummage in chest ingredient #{Vars.rummagegem}", 5, /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove|You rummage through a deep chest, but can't seem to locate anything like that.|You rummage through a deep chest\, but can\'t seem to locate anything like that\.|You rummage through a deep chest, but can't seem to locate any ingredient like that.|You rummage through a deep chest\, but can\'t seem to locate any ingredient like that\./)
																																																																																										 #You rummage through a deep chest, but can't seem to locate any ingredient like that.
		if result =~ /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove/
			quantity = "#{Vars.quantity}".to_i
			count = "#{Vars.quantity}".to_i
			count_check.call

			quantity.times {
				result = dothistimeout "shake my bottle", 3, /^You give your (?:jar|bottle) a hard shake|You shake your (?:jar|bottle) a few times before you realize that it is empty\.|You'll need a free hand to hold what comes out of the (?:jar|bottle).|Shake what?|I could not find what you were referring to.|You are not holding that./
				if result =~ /^You give your (?:jar|bottle) a hard shake/
					count -= 1
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
					if count == 0
						puts("#{fam_window_begin}I was able to find #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
						dothistimeout "put my bottle in locker", 3, /^You put|^You place/
						dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
						go_gemshop.call
						sell_gems.call
						turn_in_task.call
					end
				elsif result =~ /You shake your (?:jar|bottle) a few times before you realize that it is empty\./
					#This is no longer needed with count_check
					puts("#{fam_window_begin}I am out of #{Vars.gem}.\r\n#{fam_window_end}")
					#Unable to complete bounty, get a new bounty.
					dothistimeout "put my bottle in locker", 3, /^You put|^You place/
					dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
					failed_rummage.call
				elsif result =~ /You'll need a free hand to hold what comes out of the (?:jar|bottle)./
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
				elsif result =~ /Shake what?|I could not find what you were referring to.|You are not holding that./
					fput "close locker"
					failed_rummage.call
					break
				end
			}
		elsif result =~ /You rummage through a deep chest, but can't seem to locate anything like that.|You rummage through a deep chest\, but can\'t seem to locate anything like that\.|You rummage through a deep chest, but can't seem to locate any ingredient like that.|You rummage through a deep chest\, but can\'t seem to locate any ingredient like that\./
																																														 #You rummage through a deep chest, but can't seem to locate any ingredient like that.
			puts("#{fam_window_begin}I do not have #{Vars.gem} stored in my chest, checking the bin.\r\n#{fam_window_end}")
			rummage_bin.call
			next
		end
	else
		respond "I am going to rummage for #{Vars.gem}"
		result = dothistimeout("rummage in chest ingredient #{Vars.gem}", 5, /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove|You rummage through a deep chest, but can't seem to locate anything like that.|You rummage through a deep chest\, but can\'t seem to locate anything like that\.|You rummage through a deep chest, but can't seem to locate any ingredient like that.|You rummage through a deep chest\, but can\'t seem to locate any ingredient like that\./)
		if result =~ /You rummage through the (?:deep chest|magical item bin|clothing wardrobe|weapon rack|armor stand|locker) and remove/
			quantity = "#{Vars.quantity}".to_i
			count = "#{Vars.quantity}".to_i
			count_check.call
			
			quantity.times {
				result = dothistimeout "shake my bottle", 3, /^You give your (?:jar|bottle) a hard shake|You shake your (?:jar|bottle) a few times before you realize that it is empty\.|You'll need a free hand to hold what comes out of the (?:jar|bottle).|Shake what?|I could not find what you were referring to.|You are not holding that./
				if result =~ /^You give your (?:jar|bottle) a hard shake/
					Vars['gem'] = "#{GameObj.left_hand.name}"
					count -= 1
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
					if count == 0
						puts("#{fam_window_begin}I was able to find #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
						dothistimeout "put my bottle in locker", 3, /^You put|^You place/
						dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
						go_gemshop.call
						sell_gems.call
						turn_in_task.call
						next
					end
				elsif result =~ /You shake your (?:jar|bottle) a few times before you realize that it is empty\./
					#This is no longer needed with count_check
					puts("#{fam_window_begin}I am out of #{Vars.gem}.\r\n#{fam_window_end}")
					dothistimeout "put my bottle in locker", 3, /^You put|^You place/
					dothistimeout "close locker", 3, /^You close|^You hear the faint creak of a pulley turning behind the wall./
					#Unable to complete bounty, get a new bounty.
					failed_rummage.call
				elsif result =~ /You'll need a free hand to hold what comes out of the (?:jar|bottle)./
					dothistimeout "put #{GameObj.left_hand.noun} in my #{Vars.gemsack}", 3, /^You put/
				elsif result =~ /Shake what?|I could not find what you were referring to.|You are not holding that./
					fput "close locker"
					failed_rummage.call
					break
				end
			}
		elsif result =~ /You rummage through a deep chest, but can't seem to locate anything like that.|You rummage through a deep chest\, but can\'t seem to locate anything like that\.|You rummage through a deep chest, but can't seem to locate any ingredient like that.|You rummage through a deep chest\, but can\'t seem to locate any ingredient like that\./
			puts("#{fam_window_begin}I do not have #{Vars.gem} stored in my chest, checking the bin.\r\n#{fam_window_end}")
			rummage_bin.call
			next
		end
	end
}

no_expedite = proc {
puts("#{fam_window_begin}no_expedite\r\n#{fam_window_end}")
	if percentmind >	90
		puts("#{fam_window_begin}\r\nYour mind is full, resting.\r\n#{fam_window_end}")
		sleep 60
	else
		loop {
				if Spell['Next Bounty'].active?
					time = Spell['Next Bounty'].timeleft
					total_time = time.round
					puts("#{fam_window_begin}Resting for #{total_time} minutes until I can get a bounty.\r\n#{fam_window_end}")
					sleep 60
				else
					puts("#{fam_window_begin}I'm ready to get a bounty.\r\n#{fam_window_end}")					
					break
				end
			}
	end
}

=begin
second_bounty_check = proc {
	result = checkbounty
	if result =~ /The local gem dealer|has an order to fill and wants our help.  Head over there and see what you can do./
			puts("#{fam_window_begin}I have a gem bounty, but need the gem and quantity.\r\n#{fam_window_end}")
			go_gemshop.call
			GameObj.npcs.each{|npc|      
			fput "ask #{npc} about bounty" }
	elsif result =~ /The gem dealer in|has received orders from multiple customers requesting/
			puts("#{fam_window_begin}I have a gem bounty.\r\n#{fam_window_end}")
			gem_bounty_check.call
			go_locker.call
			rummage_chest.call
			second_bounty_check.call
	else
			puts("#{fam_window_begin}I do not have a gem bounty.\r\n#{fam_window_end}")
			go_guild.call
			sleep 0.3
			#multifput "ask taskmaster about removal", "ask taskmaster about removal"
	end
}
=end

what_bounty = proc {
			result = checkbounty
			if result =~ /The local gem dealer/
				puts("#{fam_window_begin}I have a gem bounty.\r\n#{fam_window_end}")
			elsif result =~ /It appears they have a bandit problem they'd like you to solve./
				puts("#{fam_window_begin}This is a bandit bounty.\r\n#{fam_window_end}")
			elsif result =~ /It appears they need your help in tracking down some kind of lost heirloom./
				puts("#{fam_window_begin}This is an heirloom bounty.\r\n#{fam_window_end}")
			elsif result =~ /It appears they have a creature problem they'd like you to solve./
				puts("#{fam_window_begin}This is a creature bounty.\r\n#{fam_window_end}")
			elsif result =~ /A certain client has hired us to provide a protective escort on (?:his|her) upcoming journey./
				puts("#{fam_window_begin}This is an escort bounty.\r\n#{fam_window_end}")
			elsif result =~ /The local herbalist's assistant/
				puts("#{fam_window_begin}This is an herb bounty.\r\n#{fam_window_end}")
			end
}

get_bounty = proc {
			#puts("#{fam_window_begin}I am asking the taskmaster for a bounty.\r\n#{fam_window_end}")
			result = dothistimeout "ask taskmaster for bounty", 3, /Come back in about (.*) minutes if you want another task.|Come back in about a minute if you want another task.|The local gem dealer|It appears they have a bandit problem they'd like you to solve.|It appears they need your help in tracking down some kind of lost heirloom.|It appears they have a creature problem they'd like you to solve.|A certain client has hired us to provide a protective escort on (?:his|her) upcoming journey.|The local herbalist's assistant/
			if result =~ /Come back in about (.*) minutes if you want another task./
				#puts("#{fam_window_begin}I need to wait for a bounty, should I expedite?\r\n#{fam_window_end}")
				if $expedite == true
					#puts("#{fam_window_begin}I am going to try to expedite.\r\n#{fam_window_end}")
					result = dothistimeout("ask taskmaster about expedite", 5, /Very well, (.*).  I'll expedite your task reassignment.|You don't seem to have any expedited task reassignment vouchers|I can't expedite this task reassignment, (.*).  I still need to complete the paperwork on the task you just finished/)
					if result =~ /Very well, (.*).  I'll expedite your task reassignment./
						#puts("#{fam_window_begin}I was able to expedite for a new task.\r\n#{fam_window_end}")
						$expedite = true
						what_bounty.call
						#second_bounty_check.call
						#Goes back to Main Loop.
					elsif result =~ /You don't seem to have any expedited task reassignment vouchers/
						puts("#{fam_window_begin}I am unable to expedite.\r\n#{fam_window_end}")
						$expedite = false
						go_home.call
						no_expedite.call
					elsif result =~ /I can't expedite this task reassignment, (.*).  I still need to complete the paperwork on the task you just finished/
						success_wait.call
					elsif result =~ /Come back in about (.*) minutes if you want another task./
						success_wait.call
					end
				else
					go_home.call
					no_expedite.call
				end
			elsif result =~ /Come back in about a minute if you want another task./
			
			elsif result =~ /The local gem dealer/
				puts("#{fam_window_begin}I now have a gem bounty.\r\n#{fam_window_end}")
				respond "I received a gem bounty task."
			elsif result =~ /It appears they have a bandit problem they'd like you to solve./
				puts("#{fam_window_begin}This is a bandit bounty, I am removing this bounty.\r\n#{fam_window_end}")
				sleep 0.3
				multifput "ask taskmaster about removal", "ask taskmaster about removal"
				get_bounty.call
			elsif result =~ /It appears they need your help in tracking down some kind of lost heirloom./
				puts("#{fam_window_begin}This is an heirloom bounty, I am removing this bounty.\r\n#{fam_window_end}")
				sleep 0.3
				multifput "ask taskmaster about removal", "ask taskmaster about removal"
				get_bounty.call
			elsif result =~ /It appears they have a creature problem they'd like you to solve./
				puts("#{fam_window_begin}This is a creature bounty, I am removing this bounty.\r\n#{fam_window_end}")
				sleep 0.3
				multifput "ask taskmaster about removal", "ask taskmaster about removal"
				get_bounty.call
			elsif result =~ /A certain client has hired us to provide a protective escort on (?:his|her) upcoming journey./
				puts("#{fam_window_begin}This is an escort bounty, I am removing this bounty.\r\n#{fam_window_end}")
				sleep 0.3
				multifput "ask taskmaster about removal", "ask taskmaster about removal"
				get_bounty.call
			elsif result =~ /The local herbalist's assistant/
				puts("#{fam_window_begin}This is an herb bounty, I am removing this bounty.\r\n#{fam_window_end}")
				sleep 0.3
				multifput "ask taskmaster about removal", "ask taskmaster about removal"
				get_bounty.call
			end
}

gem_bounty_check = proc {
	result = checkbounty
	if result =~ /has received orders from multiple customers requesting (?:a|an|some)(?: piece of| shard of| tiny| small| medium| large| polished| light|) (.*).  You have been tasked to retrieve (.*) of them/
			Vars['gem'] = $1
			Vars['rummagegem'] = $1
			Vars['quantity'] = $2.to_i
			if $1 == "blue lapis lazuli"
				$plural = true
				Vars['rummagegem'] = "blue lapis"
				Vars['gem'] = "lapis"
			#end
			#if $1 == "star ruby"
			#	$plural = true
				#Vars['rummagegem'] = "star rubies"
			#elsif $1 == "uncut ruby"
			#	$plural = true
				#Vars['rummagegem'] = "uncut rubies"
			#elsif $1 == "sylvarraend ruby"
			#	$plural = true
				#Vars['rummagegem'] = "sylvarraend rubies"
			#elsif $1 == "dragon's-tear ruby"
			#	$plural = true
				#Vars['rummagegem'] = "dragon's tear rubies"
			elsif $1 == "uncut maernstrike diamonds"
				Vars['gem'] = "maernstrike diamond"
			elsif $1 == "uncut diamonds"
				Vars['gem'] = "uncut diamond"
				puts("#{fam_window_begin}\r\nI have a gem bounty for #{Vars.quantity} #{Vars.gem}.\r\n#{fam_window_end}")
			else
				$plural = false
			end
			respond "I have a gem bounty for #{Vars.quantity} #{Vars.gem}."
	else
			puts("#{fam_window_begin}I did not detect the gem type.\r\n#{fam_window_end}")
			pause_script("gemologist")
			#This shouldn't happen?
	end
}

bounty_check = proc {
	result = checkbounty
	if result =~ /The local gem dealer|has an order to fill and wants our help.  Head over there and see what you can do./
		#puts("#{fam_window_begin}I need the gem and quantity for this bounty.\r\n#{fam_window_end}")
		respond "I have a gem bounty, but need the gem and quantity"
		go_gemshop.call
		GameObj.npcs.each{|npc|      
		fput "ask #{npc} about bounty" }
		gem_bounty_check.call
	elsif result =~ /The gem dealer in|has received orders from multiple customers requesting/
		#puts("#{fam_window_begin}I have a gem bounty from the gemshop.\r\n#{fam_window_end}")
		respond "I have a gem bounty."
		gem_bounty_check.call
		go_locker.call
		rummage_chest.call
	elsif result =~ /You have succeeded/
		puts("#{fam_window_begin}I need to turn in this bounty to complete it.\r\n#{fam_window_end}")
		turn_in_task.call
	elsif result =~ /You are not currently assigned a task./
		go_guild.call
		get_bounty.call
	else
		#puts("#{fam_window_begin}I do not have a gem bounty.\r\n#{fam_window_end}")
		go_guild.call
		sleep 0.3
		multifput "ask taskmaster about removal", "ask taskmaster about removal"
		get_bounty.call
	end
}

expedite_check = proc {
	if $expedite == true
#		puts("#{fam_window_begin}\r\nI'm currently set to expedite.\r\n#{fam_window_end}")
	elsif $expedite == false
#		puts("#{fam_window_begin}\r\nI'm no longer set to expedite.\r\n#{fam_window_end}")
		loop {
			if Spell['Next Bounty'].active?
				time = Spell['Next Bounty'].timeleft
				total_time = time.round
				puts("#{fam_window_begin}Resting for #{total_time} minutes until I can get a bounty.\r\n#{fam_window_end}")
				sleep 60
			else
				puts("#{fam_window_begin}I'm ready to get a bounty.\r\n#{fam_window_end}")					
				break
			end
		}
	end
}

#START:
puts("#{fam_window_begin}Gemologist script has been activated!\r\n#{fam_window_end}")

loop {
	puts("#{fam_window_begin}Main loop!\r\n#{fam_window_end}")
	deposit_check.call
	expedite_check.call
	should_rest.call
	bounty_check.call
}


