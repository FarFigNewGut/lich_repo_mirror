=begin

	Friendlist v6.0 by Phoenixfir & Hazado
	Creates a dialog box which shows when people you specify are online.
	This script is in active development.  Recommend you set ';repo set-updatable friendList' to ensure you have the most recent version

	Instructions:
	Add ;friendList to your autostart list (recommended) or start manually.
	
	ENABLE THE LIST WINDOW IN THE WINDOWS DIALOG BOX
	
	Commands can be activated with either ';friendList' or 'friend' (as if it was a native GS4 command
	
	friend add (name)         to add people
	friend del (name)         to remove people
	friend list               to view your list
	friend import             to import from Befriend list
	friend reset all          to reset your entire list
	
	friend set show           to see user options.            !LOGON AND DEATH ANNOUNCEMENT CONTROLS!
	
	-----recent changes------
	6.0 - Added a few user options for controling how you see logon and death announcements as well as how often the list checks itself for accuracy.
	    - More bug fixes.  Should not see the Find output nearly as often.

	
	Known issues:
	FriendList will prevent you from logging off due to inactivity.
	Players who have SilentLogon enabled will not have their status changed until the next 15 minute synch cycle.  Nothing I can do about this, it's called Silent for a reason.
	Sometimes during moments of heavy screen activity the 'Find' output will be displayed on screen. 

=end

#Change Log
=begin
	6.0 - Added a few user options for controling how you see logon and death announcements as well as how often the list checks itself for accuracy.
	    - More bug fixes.  Should not see the Find output nearly as often.
	5.4 - Fixed bug which would sometimes display the results of the Find command
	5.3 - Fixed bug with Import feature
		- Fixed bug with not having any friends online.
	5.2 - Added debug tools to protect my sanity.
		- Also squelched those random blank spaces to protect yours.
		- Replaces list with a notification when script is killed.  
	5.1 - Various bug fixes.
		- List will now properly update itself every 15 minutes to better ensure accuracy.  
	5.0 - Complete rework of the input structure as well as detection of state changes.
	    - Premium logins should now be fully squelched.
	    - List updates once per second and does a full recheck every 15 minutes.
	    - Commands can be entered with keyword "friend" as if it was a native GS4 command.
	4.0 - Support to allow a list longer than 9 friends to appear online.  
	    - Initial support to squelch premium logging announcements.
	3.0 - Changes to input command structure and online list generation
	2.0 - Support for importing friends from your Befriend list
	1.0 - Initial release.
=end




#User options -------------------------------

if !CharSettings['show_all_log_flag_saved']												#true = see all logon/off notifications (not just friends)
	show_all_log_flag = CharSettings['show_all_log_flag_saved'] = false					#false = ignore all logon/off notifications
elsif CharSettings['show_all_log_flag_saved'] != (true or false)
	CharSettings['show_all_log_flag_saved'] = false
end
show_all_log_flag = CharSettings['show_all_log_flag_saved']

if !CharSettings['show_friend_log_flag_saved']											#true = see notifications when friends logon/off
	show_friend_log_flag = CharSettings['show_friend_log_flag_saved'] = true			#false = ignore friends' logon/off
elsif CharSettings['show_friend_log_flag_saved'] != (true or false)
	CharSettings['show_friend_log_flag_saved'] = false	
end
show_friend_log_flag = CharSettings['show_friend_log_flag_saved']

if !CharSettings['show_all_death_flag_saved']											#true = See notifications when friends log in/out
	show_all_death_flag = CharSettings['show_all_death_flag_saved'] = false
elsif CharSettings['show_all_death_flag_saved'] != (true or false)
	CharSettings['show_all_death_flag_saved'] = false	
end
show_all_death_flag = CharSettings['show_all_death_flag_saved']

if !CharSettings['show_friend_death_flag_saved']										#true = see all logon/off notifications (not just friends)
	show_friend_death_flag = CharSettings['show_friend_death_flag_saved'] = true
elsif CharSettings['show_friend_death_flag_saved'] != (true or false)
	CharSettings['show_friend_death_flag_saved'] = false	
end
show_friend_death_flag = CharSettings['show_friend_death_flag_saved']

if !CharSettings['synch_timer_saved']									
	synch_timer = CharSettings['synch_timer_saved'] = 10
elsif CharSettings['synch_timer_saved'] != 1..60
	CharSettings['synch_timer_saved'] = 10
end
synch_timer = CharSettings['synch_timer_saved']

#global vars --------------------------------
$friendlist_logon_buffer = []
$friendlist_command_array = [false, nil]

#script vars --------------------------------
CharSettings['friendlist'] = Array.new unless CharSettings['friendlist']
online = []
list = CharSettings['friendlist']
running = true
squelch_message = nil
squelch_find_list = nil
squelch_find_single = nil
monitor = nil
help = nil
print_list = nil
setting_list = nil
debug = false

#Downstream Hooks ---------------------------
squelch_message = proc{
	message_hook = proc { |s|
		if s =~ /Please rephrase that command\.|You will (now|no longer) see \w+ messages\.|Others will now be notified when you log \w+\./
			nil
			#echo s
		else
			s
		end
	}
	DownstreamHook.add('squelch-message', message_hook)
}

squelch_find_list = proc {																					#proc for checking the entire list, start reading in the middle where I indicated.
	list = CharSettings['friendlist']								
	if debug
		echo list
	end
	started = false	
	hook_proc = proc { |s|																					#The hook			
		if started																							#Once the hook has started.....
			if s =~ /<prompt|The usage for this command is/													#Find doesn't have a dedicated end-of-command so this is the best we can do for now
				started = false	
				DownstreamHook.remove('squelch-find-group')													#remove the hook obviously
				if !debug
					nil																						#and squelch the above.
				else 
					echo s
				end
			elsif s =~ /([a-zA-Z]+)/																		#some text was detected
				if !online.include?($1) and list.include?($1)												#if that text is on the list and isn't already on the online array
					online << $1																			#push it to the online array
					if debug	
						echo "Adding #{$1}"
					end
				elsif online.include?($1) and list.include?($1) and debug
					echo "Skipping #{$1}: Already detected"
				end
				if list.include?($1)																		#if that text was on the list....
					if !debug
						nil																					#then squelch it.
					else
						echo s
					end
				else
					s																						#otherwise print it as normal
				end
			elsif s =~ /\s/																					#Find has some blank lines so  this squelches those
				if !debug
					nil	
				else 
					echo s
				end
			else
				s																							#and of course everything else gets printed
			end
		elsif s =~ /^Brave.*Questing|There are no adventurers questing that match the names specified\./	#The strings that indicate the find command was sent so that the hook starts paying attention
			started = true
			if !debug
				nil																							#this squelches the above strings
			else 
				echo s
			end
		else
			s																								#everything else gets printed as normal
		end
	}

	#Start reading from here
	length = list.length.to_f																					#since Find only takes 9 names at a time, determine how many groups of 9 there are.
	groups = (length/9).ceil	
	while groups >= 1																							#do this for each group of 9
		DownstreamHook.add('squelch-find-group', hook_proc)														#add the hook
		while !DownstreamHook.list.include?("squelch-find-group")												#wait for the hook to be set
			pause 0.1
		end
		if debug
			echo "Hook set"
		end
		if !debug
			silence_me
		end
		fput "find #{list.join(" ")}"																			#the find command
		if !debug
			silence_me
		end
	
		if groups >= 2																							#if there are more than 1 groups remaining, rotate the list 9 times and decrement the group counter
			list.rotate!(9)
		end
		groups -= 1
		
		counter = 0
		while DownstreamHook.list.include?("squelch-find-group")												#wait for the hook to clear, but if it takes longer than 0.5 seconds, force it to clear.
			pause 0.1
			counter += 1
			if counter == 5
				DownstreamHook.remove('squelch-find-group')
			end
		end
		if debug
			echo "Hook removed"
		end
	end	
}

squelch_find_single = proc { |person|
	started = false
	hook_proc = proc { |s|
		if started
			if s =~ /<prompt|The usage for this command is/
				DownstreamHook.remove('squelch-find')
				if !debug
					nil	
				else 
					echo s
				end
			elsif 
				s =~ /([a-zA-Z]+)/											#person is online
				if !online.include?(person)
					online << person
				end
				if !debug
					nil	
				else 
					echo s
				end
			elsif s =~ /\s/
				if !debug
					nil	
				else 
					echo s
				end
			else
				s
			end
		elsif s =~ /^Brave.*Questing/
			started = true
			if !debug
				nil	
			else 
				echo s
			end
		elsif s =~ /There are no adventurers questing that match the names specified\./			#person is not online	
			if online.include?(person)
				online.delete(person)
			end	
			started = true
			if !debug
				nil	
			else 
				echo s
			end
		else
			s
		end
	}
	DownstreamHook.add('squelch-find', hook_proc)		#spin up hook_proc to capture output from find command
	silence_me
	put "find #{person}"			#determine if person is online or not via hook_proc
	silence_me
}

monitor = proc { |server_string|
	if server_string =~ /\<pushStream id\=\"logons\".*\"\>(\w+)\<\/a\>|\<pushStream id\=\"logons\".*\"\>([a-zA-Z]+)\'s\</
		person = "#{$1}"
		if list.include?(person)
			if show_friend_log_flag or show_all_log_flag
				$friendlist_logon_buffer << person	
				server_string
			end
		else
			if show_all_log_flag
				server_string
			else
				nil
			end
			#echo server_string
		end
	elsif server_string =~ /\<pushStream id\=\"death\"\/\>.*\"\>([a-zA-Z]+)\<\/a\>/
		person = "#{$1}"
		if list.include?(person) and show_friend_death_flag
			server_string
		elsif show_all_death_flag
			server_string
		else
			nil
		end
	else
		server_string
	end
}

#Procs --------------------------------------
help = proc {
	respond "----------------------------------------------------------------------------------------------------------------------------------------"
	respond "                                                                FRIENDLIST														         "
	respond "                                                          By Phoenixfir & Hazado	                            						 "
	respond ""
	respond "Add ;friendList to your autostart list (recommended) or start manually."
	respond ""
	respond "ENABLE THE LIST WINDOW IN THE WINDOWS DIALOG BOX."
	respond ""
	respond "Commands can be activated with either ';friendList' or 'friend' (as if it was a native GS4 command"
	respond ""
	respond "friend add (name)         to add people"
	respond "friend del (name)         to remove people"
	respond "friend list               to view your list"
	respond "friend import             to import from Befriend list"
	respond "friend reset all          to reset your entire list"
	respond ""
	respond "friend set show           to see user options.            !LOGON AND DEATH ANNOUNCEMENT CONTROLS!"
	respond ""
	respond "-----------------------------------------------------------------------------------------------------------------------------------------"
	respond ""
}

print_list = proc {
	tmp_list = list.sort_by { |word| word.downcase }
	respond "Your List of Friends"
	respond ""
	respond tmp_list
	respond ""
	respond ""
}

print_online = proc {
	tmp_online = online.sort_by { |word| word.downcase }
	respond "Your Online Friends"
	respond ""
	respond tmp_online
	respond ""
	respond ""
}

reset = proc {
	respond "Resetting FriendsList"
	CharSettings['friendlist'] = Array.new
	list = []
	online = []
}

import = proc {
	imported = []
	fput "befriend list"
	while line = get
		if line =~ /^Done\./
			break
		elsif line =~ /\d{1,2}\. (\w+)/
					 #/^\d{1,2}\. (.*) (is around( the city of)?|was not found in|is somewhere in)(.*)\./
			name = $1
			if !list.include?(name)
				CharSettings['friendlist'].push($1)
				imported << name
			end
		end
	end
	
	count = imported.length
	respond "Imported #{count} friends"
	if count != 0
		imported.each { |name|
			respond name		
		}
	end	
	if debug
		echo CharSettings['friendlist']
	end
	squelch_find_list.call
}

delete = proc {
	person = $friendlist_command_array[1]
	if person != nil
		if !list.include?(person)
			respond "This person isn't on the list!"
		else 
			CharSettings['friendlist'].delete(person)
			online.delete(person)
			respond "#{person} has been removed"
		end
	end
}

add = proc {
	person = $friendlist_command_array[1]
	if person != nil
		if list.include?(person)
			respond "This person is already on the list!"
		else 
			CharSettings['friendlist'].push(person)
			respond "#{person} has been added"
			squelch_find_single.call(person)
		end
	end
}

render = proc {
	online = online.sort_by { |word| word.downcase }

	finalstring = "<dialogData id='FriendList' clear='t'>"
	finalstring += "<label id = 'title', value = 'Online Friends', justify='1' anchor_top='top' top='0' left='1' width='189'/>"
	previousName = nil
	if running 
		online.each { |name|
			if previousName == nil 
				finalstring += "<label id = '#{name}', value = '#{name}', justify='4' anchor_top='title' top='0' left='1' height='nil' width='nil'/>"
				previousName = name
			else
				finalstring += "<label id = '#{name}', value = '#{name}', justify='4' anchor_top='#{previousName}' top='0' left='1' height='nil' width='nil'/>"
				previousName = name		
			end
		}
	else
		finalstring += "<label id = 'disabled', value = 'FriendList is not running', justify='1' anchor_top='title' top='0' left='1' height='nil' width='nil'/>"
	end
	finalstring += "</dialogData>"
	puts(finalstring)
}

settings = proc {
	arg = $friendlist_command_array[1].lstrip
	if arg =~ /log all(.*)/i
		arg = $1.lstrip
		if arg =~ /true|on|yes/i
			show_all_log_flag = CharSettings['show_all_log_flag_saved'] = true
			respond "You will now see logon/off notifications from all players"
		elsif arg =~ /false|off|no/i
			show_all_log_flag = CharSettings['show_all_log_flag_saved'] = false
			respond "You will no longer see logon/off notifications from all players"
		else
			echo "I didn't understand you."
			setting_list.call
		end
	elsif arg =~ /log friend(.*)/i
		arg = $1.lstrip
		if arg =~ /true|on|yes/i
			show_friend_log_flag = CharSettings['show_friend_log_flag_saved'] = true
			respond "You will now see logon/off notifications from your friends"
		elsif arg =~ /false|off|no/i
			show_friend_log_flag = CharSettings['show_friend_log_flag_saved'] = false
			respond "You will no longer see logon/off notifications from your friends"
		else
			echo "I didn't understand you."
			setting_list.call
		end	
	elsif arg =~ /death all(.*)/i
		arg = $1.lstrip
		if arg =~ /true|on|yes/i
			show_all_death_flag = CharSettings['show_all_death_flag_saved'] = true
			respond "You will now see death notifications from all players"
		elsif arg =~ /false|off|no/i
			show_all_death_flag = CharSettings['show_all_death_flag_saved'] = false
			respond "You will no longer see death notifications from all players"
		else
			echo "I didn't understand you."
			setting_list.call
		end		
	elsif arg =~ /death friend(.*)/i
		arg = $1.lstrip
		if arg =~ /true|on|yes/i
			show_friend_death_flag = CharSettings['show_friend_death_flag_saved'] = true
			respond "You will now see death notifications from your friends"
		elsif arg =~ /false|off|no/i
			show_friend_death_flag = CharSettings['show_friend_death_flag_saved'] = false
			respond "You will no longer see death notifications from your friends"
		else
			echo "I didn't understand you."
			setting_list.call
		end	
	elsif arg =~ /synch timer (\d+)/i
		arg = $1.lstrip.to_i
		#arg = arg.to_i
		echo arg
		if arg.between?(1, 60)
			synch_timer = CharSettings['synch_timer_saved'] = arg
			respond "Setting synch timer to #{synch_timer} minutes."
		else
			respond "Synch timer can only be set to values between 1 and 60 minutes"
		end
	elsif arg =~ /show|list/i
		setting_list.call
	else
		setting_list.call
	end	
	$friendlist_command_array[1] = nil
}

setting_list = proc{
	respond "log all       =   #{show_all_log_flag}          True will show all player logon/off messages, False will hide them."
	respond "log friend    =   #{show_friend_log_flag}           True will show only friend logon/off messages."
	respond ""
	respond "death all     =   #{show_all_death_flag}          True will show all player death announcements, False will hide them."
	respond "death friend  =   #{show_friend_death_flag}           True will show only friend death announcements."
	respond ""
	respond "synch timer   =   #{synch_timer} minutes     Delay for when FriendList checks itself for accuracy.  Default is every 10 minutes."
	respond ""
	respond "Use 'friend set death all = true' to see all player death announcements."
	

}

before_dying {
	online = []
	running = false
	render.call
	squelch_message.call
	while !DownstreamHook.list.include?("squelch-message")
		pause 0.1
	end
	silence_me
	fput "set logon off"
	fput "set logoff off"
	fput "set discon off"
	silence_me
	puts("<closeDialog id='FriendList'/>")
	DownstreamHook.remove('squelch-message')
	DownstreamHook.remove('squelch-command')
	DownstreamHook.remove('squelch-find-group')
	DownstreamHook.remove('friendMonitor')
}


#START
puts("<closeDialog id='FriendList'/><openDialog type='dynamic' id='FriendList' title='FriendList' target='FriendList' location='main' height='150' resident='true'><dialogData id='FriendList'></dialogData></openDialog>")
DownstreamHook.add('friendMonitor', monitor)
squelch_message.call
while !DownstreamHook.list.include?("squelch-message")
	pause 0.1
end
silence_me
fput "set logon on"
fput "set logoff on"
fput "set discon on"
fput "set SilentLogon off"
fput "set SilentLogoff off"
if show_all_death_flag or show_friend_death_flag
	fput "set showdeaths on"
end
toggle_upstream
silence_me
DownstreamHook.remove('squelch-message')

squelch_find_list.call
checktime = 0

command_thread = Thread.new {
	loop {
		if !$friendlist_command_array[0] 
			command = upstream_get
			if command =~ /^(?:\<c\>)(?:friend|#{$lich_char}fri?e?n?d?L?i?s?t?)\s(.*)$/i
				$friendlist_command_array[0]  = true
				cmd = $1.strip
				squelch_message.call
				while !DownstreamHook.list.include?("squelch-message")
					pause 0.1
				end
				case cmd
					when /^\?|^help/i
						$friendlist_command_array[0]  = "help"
					when /^(?:add|new|create|save)\s([a-z]+)/i
						$friendlist_command_array[1] = $1
						$friendlist_command_array[1] = $friendlist_command_array[1].capitalize
						$friendlist_command_array[0]  = "add"
					when /^(?:rem|remove|del|delete)\s([a-z]+)/i
						$friendlist_command_array[1] = $1
						$friendlist_command_array[1] = $friendlist_command_array[1].capitalize
						$friendlist_command_array[0]  = "del"
					when /^reset all/i
						$friendlist_command_array[0]  = "reset"
					when /^(?:list)/i
						$friendlist_command_array[0]  = "list"
					when /^up(date)?/i
						$friendlist_command_array[0]  = "update"
					when /^on(line?)/i
						$friendlist_command_array[0]  = "online"
					when /^import/i
						$friendlist_command_array[0]  = "import"
					when /^debug/i
						$friendlist_command_array[0]  = "debug"
					when /^set(.*)/i
						$friendlist_command_array[0]  = "set"
						$friendlist_command_array[1] = $1
					else
						$friendlist_command_array[0]  = "help"
				end
			elsif command =~ /^(?:\<c\>)friend\s?+$|^(?:<c>)?#{$lich_char}fri?e?n?d?L?i?s?t?\s?+$/i
				$friendlist_command_array[0]  = "help"
				squelch_message.call
			end
		end	
	}
}

loop {	
	if $friendlist_command_array[0]  != false
		if $friendlist_command_array[0]  == "help"
			help.call
		elsif $friendlist_command_array[0]  == "add"
			add.call
			$friendlist_command_array[1] = nil
		elsif $friendlist_command_array[0]  == "del"
			delete.call
			$friendlist_command_array[1] = nil
		elsif $friendlist_command_array[0]  == "reset"
			reset.call
		elsif $friendlist_command_array[0]  == "list"
			print_list.call
		elsif $friendlist_command_array[0]  == "update"
			online = []
			render.call
			pause 1
			squelch_find_list.call
		elsif $friendlist_command_array[0]  == "online"
			print_online.call
		elsif $friendlist_command_array[0]  == "import"
			import.call
		elsif $friendlist_command_array[0]  == "debug"
			debug = true
			online = []
			squelch_find_list.call
			debug = false
			echo online
		elsif $friendlist_command_array[0]  == "set"
			settings.call				
		end		
		pause 0.5
		DownstreamHook.remove('squelch-message')
		$friendlist_command_array[0]  = false
	end

	if !$friendlist_logon_buffer.empty?
		name = $friendlist_logon_buffer.shift
		squelch_find_single.call(name)
	end

	render.call

	checktime = checktime + 1
	res = synch_timer * 60
	if checktime == (synch_timer * 60)
		squelch_find_list.call
		checktime = 0
	end	
	
	pause 1
}





