=begin
  huntplan.lic

  Populates bigshot with boundary rooms and creature names.
  Populates ebounty with creature names mapped to bigshot profiles.
  Pass a creature name to this script or have it parse your current bounty task.
  Easy to integrate with ebounty to fully automate running of creature tasks.
  Run ";huntplan help" to get started.

  author: Mertyn
  game: Gemstone
  tags: bounty, adventure's guild, advguild, bounties, hunting, bigshot, combat
  version: 1.0
=end

require 'nokogiri'
require 'yaml'

module HuntPlan

########################################################################################################################
# module data members

class Data
	attr_accessor :settings_path, :settings, :account_type, :author_mode, :creature_list, :creature_index, :spawn_index, :room_index,
		:excluded_paths, :is_bounty, :bounty_town, :bounty_location, :has_dangerous_creature_spawned,
		:is_dangerous_creature_bounty, :excluded_creatures, :safe_room_level, :target_creature

	# author_mode enables functionality not suitable for the public;
	# it may includes crude features in progress as well as personal preferences of the author.
	def initialize
		@settings_path = "#{DATA_DIR}/#{XMLData.game}/#{Char.name}/huntplan.yaml"
		@author_mode = UserVars.hunt_plan_author
		@excluded_paths = Array.new
		@is_bounty = false
		@has_dangerous_creature_spawned = false
		@room_index = Hash.new

		ebounty_filename = "#{DATA_DIR}/#{XMLData.game}/#{Char.name}/ebounty.yaml"
		settings = YAML.load_file(ebounty_filename) if File.exist?(ebounty_filename)
		@excluded_creatures = settings[:creature_exclude]
		@excluded_creatures ||= Array.new
		@excluded_creatures.each(&:downcase!)
	end
end

@@data = Data.new
def self.data
     @@data
end

########################################################################################################################
# index of creature levels, spawn areas, and other properties

class Creature
	attr_accessor :names, :level, :spawn_ids, :immunities, :weaknesses, :types

	def initialize(names, level, spawn_ids)
		@names = names
		@level = level
		@spawn_ids = spawn_ids
		@immunities = Array.new
		@weaknesses = Array.new
	end
end

data.creature_list = [
	Creature.new(["black rolton"], 1, [41818749]),
	Creature.new(["black-winged daggerbeak"], 1, [41630982]),
	Creature.new(["carrion worm"], 1, [229619,38155260]),
	Creature.new(["fanged rodent"], 1, [41846856,41846853]),
	Creature.new(["fire ant"], 1, [41841842]),
	Creature.new(["giant ant"], 1, [41754053]),
	Creature.new(["giant rat"], 1, [41752260,41752252,41752378,41753973,41754002,41753998,41752406,41753975,41752376,41752408,229621,229629,229623,41737146,41838121]),
	Creature.new(["kobold"], 1, [59245,41714575,41754390,40895380,41838048,41838136,41842858,41846466,76033]),
	Creature.new(["lesser ghoul"], 1, [152365,152213,1490807,263343,263363,263355]),
	Creature.new(["mountain rolton"], 1, [41836616]),
	Creature.new(["rolton"], 1, [59252,41699938,40895385,101044]),
	Creature.new(["skeleton"], 1, [40895478,152369,1490814,263360,263329,263332]),
	Creature.new(["slimy little grub"], 1, [598906]),
	Creature.new(["spotted gnarp"], 1, [41818737]),
	Creature.new(["wharf rat"], 1, [41740473]),
	Creature.new(["young grass snake"], 1, [41775765]),
	Creature.new(["zombie rolton"], 1, [40895483,41737141,69289,41855428]),
	Creature.new(["big ugly kobold"], 2, [41838041]),
	Creature.new(["brown gak"], 2, [41818776]),
	Creature.new(["cave gnome"], 2, [41752264,41769700,229625]),
	Creature.new(["coconut crab"], 2, [41740480]),
	Creature.new(["fanged goblin"], 2, [70266]),
	Creature.new(["ghost"], 2, [38155262]),
	Creature.new(["goblin"], 2, [41714582,41754161,41597775,152380]),
	Creature.new(["lesser frost shade"], 2, [41630959]),
	Creature.new(["lesser shade"], 2, [41752254,41789239]),
	Creature.new(["mistydeep siren"], 2, [70284]),
	Creature.new(["moaning phantom"], 2, [263325]),
	Creature.new(["pale crab"], 2, [41737143,41789243,41837264]),
	Creature.new(["phantom"], 2, [40895469,152361,1490810]),
	Creature.new(["rabid squirrel"], 2, [40895368,41838038,41838144]),
	Creature.new(["sea nymph"], 2, [38155256,38155299,41837147]),
	Creature.new(["spotted gak"], 2, [41699942]),
	Creature.new(["thyril"], 2, [41653811,41771189,41775729]),
	Creature.new(["bresnahanini rolton"], 3, [41842001]),
	Creature.new(["cave gnoll"], 3, [41769690]),
	Creature.new(["cave nipper"], 3, [41754159]),
	Creature.new(["dark vysan"], 3, [41789153,41789193,263345,263358]),
	Creature.new(["fire salamander"], 3, [41752258,41837237]),
	Creature.new(["greater ghoul"], 3, [152367,152215,1490790,69287,263341,263349,41837168]),
	Creature.new(["greater ice spider"], 3, [40895393]),
	Creature.new(["hobgoblin"], 3, [41769651,41769710,41700831,41699836,40895387,152217,152408,1490781,41740802,76753]),
	Creature.new(["kobold shepherd"], 3, [41699947]),
	Creature.new(["mountain snowcat"], 3, [41769714,40895376]),
	Creature.new(["relnak"], 3, [41653809]),
	Creature.new(["striped gak"], 3, [41699945]),
	Creature.new(["striped relnak"], 3, [41775758]),
	Creature.new(["troglodyte"], 3, [41769705,41740475]),
	Creature.new(["velnalin"], 3, [59254,42633356]),
	Creature.new(["white vysan"], 3, [40895487]),
	Creature.new(["cobra"], 4, [41774670,152346,41837137]),
	Creature.new(["fanged viper"], 4, [70278,70276]),
	Creature.new(["mongrel kobold"], 4, [22524757,41846471,76030,41837251]),
	Creature.new(["revenant"], 4, [152348,263337,263335,263327,41855422]),
	Creature.new(["ridge orc"], 4, [61726]),
	Creature.new(["spotted leaper"], 4, [41712889,41775732]),
	Creature.new(["urgh"], 4, [41377385,41846469,76036,41857415,41879596,41879590,43922490,46723462]),
	Creature.new(["water moccasin"], 4, [41774672,70274,70272]),
	Creature.new(["whiptail"], 4, [41837262]),
	Creature.new(["bobcat"], 5, [70289]),
	Creature.new(["coyote"], 5, [59250,41597827,41846464,76028,41842595,10912074]),
	Creature.new(["dark apparition"], 5, [40895476,263351]),
	Creature.new(["mist wraith"], 5, [69297,263353,263339,41855426]),
	Creature.new(["mongrel hobgoblin"], 5, [41699831,41740798]),
	Creature.new(["nasty little gremlin"], 5, [598901]),
	Creature.new(["night golem"], 5, [69293]),
	Creature.new(["soldier ant"], 5, [41754051]),
	Creature.new(["water witch"], 5, [41837139]),
	Creature.new(["cockatrice"], 6, [40355552]),
	Creature.new(["firephantom"], 6, [69291,41325318,41837232]),
	Creature.new(["leaper"], 6, [40895378,38155270]),
	Creature.new(["lesser mummy"], 6, [152359,41774763]),
	Creature.new(["lesser orc"], 6, [40355566,41714585,40355605,40895370,42588371]),
	Creature.new(["monkey"], 6, [41772328,41772316,41740808,22524751]),
	Creature.new(["snowy cockatrice"], 6, [40895397]),
	Creature.new(["spectral fisherman"], 6, [41789305,41837163]),
	Creature.new(["spotted lynx"], 6, [41699842,41818735,41850004]),
	Creature.new(["blood eagle"], 7, [101042,69300]),
	Creature.new(["greater kappa"], 7, [41789580]),
	Creature.new(["hobgoblin acolyte"], 7, [41740793]),
	Creature.new(["hobgoblin shaman"], 7, [41699826]),
	Creature.new(["lesser burrow orc"], 7, [42588388]),
	Creature.new(["lesser red orc"], 7, [41789147,41818763]),
	Creature.new(["shelfae soldier"], 7, [41789313,41846497]),
	Creature.new(["albino tomb spider"], 8, [1490749]),
	Creature.new(["bone golem"], 8, [41770121,69295,41838686]),
	Creature.new(["glittering crystal crab"], 8, [41772340]),
	Creature.new(["greater burrow orc"], 8, [42588361]),
	Creature.new(["greater orc"], 8, [41597833,41597796,41377381,41377387,41780363,76739,76751,76744,41842591,41597810,43922486,43922492,46723458,46723464]),
	Creature.new(["greater spider"], 8, [41754212,41636567,1490786,41837203,323475]),
	Creature.new(["shelfae guard"], 8, [41741036]),
	Creature.new(["thrak"], 8, [41714580,41837225,10912072,10912078]),
	Creature.new(["brilliant red crocodile"], 9, [41772338]),
	Creature.new(["brown spinner"], 9, [69285]),
	Creature.new(["crocodile"], 9, [22524784,41846493]),
	Creature.new(["death dirge"], 9, [152413,1490777,41838695,41837172]),
	Creature.new(["florid mauve crocodile"], 9, [41772342]),
	Creature.new(["manticore"], 9, [41714578,40111545,41837230,10912064,10912076]),
	Creature.new(["snow spectre"], 9, [75992]),
	Creature.new(["cave worm"], 10, [41754210,41636572,42192851]),
	Creature.new(["giant marmot"], 10, [41810494,41818739]),
	Creature.new(["gnoll miner"], 10, [29645093]),
	Creature.new(["gnoll worker"], 10, [152435,152439,29645075]),
	Creature.new(["great boar"], 10, [40111547,41711697,41818778,41837223,61721,61724]),
	Creature.new(["rabid guard dog"], 10, [41772433]),
	Creature.new(["raider orc"], 10, [41818752]),
	Creature.new(["werebear"], 10, [41597794,41855424]),
	Creature.new(["neartofar orc"], 11, [41818445]),
	Creature.new(["shelfae chieftain"], 11, [41789300,41846490]),
	Creature.new(["wall guardian"], 11, [41772437,41772441]),
	Creature.new(["crystal golem"], 12, [41636565]),
	Creature.new(["dark orc"], 12, [41810486,41818771,41837257]),
	Creature.new(["darkwoode"], 13, [41597805,70270,323481]),
	Creature.new(["deranged sentry"], 13, [41772446]),
	Creature.new(["gnoll thief"], 13, [152448,152426]),
	Creature.new(["great stag"], 13, [41818747,902753,902760]),
	Creature.new(["plumed cockatrice"], 13, [41818437]),
	Creature.new(["tawny brindlecat"], 13, [902823,902802,902769]),
	Creature.new(["agresh troll scout"], 14, [41818549]),
	Creature.new(["black boar"], 14, [41818460]),
	Creature.new(["brown boar"], 14, [41818439]),
	Creature.new(["forest troll"], 14, [40355577,41597801,41770116,41842600]),
	Creature.new(["giant weasel"], 14, [902746,41850160,41850179]),
	Creature.new(["great brown bear"], 14, [41769949,41770093]),
	Creature.new(["grey orc"], 14, [41770159,41597815,41818741,10912066]),
	Creature.new(["shadowy spectre"], 14, [41838688]),
	Creature.new(["silverback orc"], 14, [75988]),
	Creature.new(["spectre"], 14, [40266639,40266665,41837196]),
	Creature.new(["swamp troll"], 14, [41850001]),
	Creature.new(["arctic puma"], 15, [41714283,41857090]),
	Creature.new(["black leopard"], 15, [41818544,41818532]),
	Creature.new(["gnoll ranger"], 15, [152443,152430]),
	Creature.new(["humpbacked puma"], 15, [10912099]),
	Creature.new(["large ogre"], 15, [41770108,41780386,41850007,41850010,323477]),
	Creature.new(["luminous arachnid"], 15, [41772538,41772520]),
	Creature.new(["neartofar troll"], 15, [41818441]),
	Creature.new(["panther"], 15, [41846495]),
	Creature.new(["puma"], 15, [41711692,6914368,41712896,41700041,41837228]),
	Creature.new(["ridgeback boar"], 15, [902781,902783,902800]),
	Creature.new(["tomb wight"], 15, [152403,1490740]),
	Creature.new(["wolfshade"], 15, [41838368,41838675]),
	Creature.new(["wraith"], 15, [41770649,41770662,41774759,41810490]),
	Creature.new(["agresh bear"], 16, [41818546]),
	Creature.new(["agresh troll warrior"], 16, [41818539]),
	Creature.new(["banded rattlesnake"], 16, [41850171,41850162,41850173]),
	Creature.new(["black bear"], 16, [40111549,41711700,41818458]),
	Creature.new(["cave troll"], 16, [41636569,41769955,41770130,41741975,41837200,42192853]),
	Creature.new(["fire guardian"], 16, [41325323,41837235]),
	Creature.new(["fire rat"], 16, [41836567]),
	Creature.new(["ghost wolf"], 16, [41770164,39111815,41838673]),
	Creature.new(["ghoul master"], 16, [152389,152384,1490751,1490744,41838681]),
	Creature.new(["hill troll"], 16, [40111551,41769951,41741984,41765389,41765376]),
	Creature.new(["mongrel troll"], 16, [41842597]),
	Creature.new(["mongrel wolfhound"], 16, [902821,902804]),
	Creature.new(["mountain ogre"], 16, [41769929,41714278,41857093,10912101]),
	Creature.new(["phosphorescent worm"], 16, [41772528,41772522]),
	Creature.new(["plains orc warrior"], 16, [902837,902764,902755,902816]),
	Creature.new(["red bear"], 16, [41820256,41820246]),
	Creature.new(["wind witch"], 16, [41700119,41842608,41883427,41883424]),
	Creature.new(["dark shambler"], 17, [41597789,41838690,41856936,41857219]),
	Creature.new(["forest ogre"], 17, [323483]),
	Creature.new(["giant veaba"], 17, [35921474,35921476]),
	Creature.new(["gnoll guard"], 17, [152456,152461,29645088]),
	Creature.new(["krolvin mercenary"], 17, [6914363,41788855,10912107]),
	Creature.new(["mountain goat"], 17, [41850169,41850167]),
	Creature.new(["mountain troll"], 17, [41712891,41741979,41780221]),
	Creature.new(["plains ogre"], 17, [41818528,41818537]),
	Creature.new(["plains orc scout"], 17, [902825,902785,902830,902790]),
	Creature.new(["spiked cavern urchin"], 17, [41772530,41772524]),
	Creature.new(["bighorn sheep"], 18, [41850175,41850177]),
	Creature.new(["cave lizard"], 18, [35921472,35921469]),
	Creature.new(["elder ghoul master"], 18, [152419]),
	Creature.new(["fire cat"], 18, [41836560,41836553]),
	Creature.new(["ghostly warrior"], 18, [40266660,40266669]),
	Creature.new(["greenwing hornet"], 18, [41765438]),
	Creature.new(["mountain lion"], 18, [41820231]),
	Creature.new(["nedum vereri"], 18, [41838370,41838365,41857224,42202272]),
	Creature.new(["plains lion"], 18, [41818535,41818555]),
	Creature.new(["plains orc shaman"], 18, [902771,902811]),
	Creature.new(["rotting krolvin pirate"], 18, [22524798]),
	Creature.new(["shelfae warlord"], 18, [41846500]),
	Creature.new(["thunder troll"], 18, [41700071,41842615,41883421]),
	Creature.new(["war troll"], 18, [40111540,41769933,41770152]),
	Creature.new(["krolvin warrior"], 19, [6914384,41788860,41788865]),
	Creature.new(["agresh troll chieftain"], 20, [41818563,41818558]),
	Creature.new(["arch wight"], 20, [41765423,41765418,152222,152374,1490734,41838677,41857228]),
	Creature.new(["gnoll priest", "gnoll priestess"], 20, [152466,29645079]),
	Creature.new(["major spider"], 20, [41756168,41756159,42633428,42633437]),
	Creature.new(["massive grahnk"], 20, [41772515,41772533]),
	Creature.new(["ogre warrior"], 20, [41700037,41818451]),
	Creature.new(["steel golem"], 20, [41325337,41325305]),
	Creature.new(["striped warcat"], 20, [41836531,41836529,41836565,42192921]),
	Creature.new(["wood wight"], 20, [41846486]),
	Creature.new(["ancient ghoul master"], 21, [152415]),
	Creature.new(["arachne servant"], 21, [41756161,42633430]),
	Creature.new(["cave bear"], 21, [41780219]),
	Creature.new(["plains orc chieftain"], 21, [902776,902806,902795,902748]),
	Creature.new(["cougar"], 22, [323457]),
	Creature.new(["crested basilisk"], 22, [41775761,41857008,902762]),
	Creature.new(["dark panther"], 22, [70350,70365,61642,61650]),
	Creature.new(["warthog"], 22, [41850183,41850181]),
	Creature.new(["arachne acolyte"], 23, [41756240]),
	Creature.new(["centaur"], 23, [41756515,323462,41879598,41775749]),
	Creature.new(["centaur ranger"], 23, [41775754]),
	Creature.new(["crazed zombie"], 23, [61208,61223]),
	Creature.new(["fenghai"], 23, [26219459,323459]),
	Creature.new(["niirsha"], 23, [61217,61220]),
	Creature.new(["nonomino"], 23, [41765442,41765427]),
	Creature.new(["rotting woodsman"], 23, [41846482]),
	Creature.new(["zombie"], 23, [41770646,41770659,41884331]),
	Creature.new(["arctic wolverine"], 24, [33127705,41846639,41846637]),
	Creature.new(["burly reiver"], 24, [41836640]),
	Creature.new(["giant albino scorpion"], 24, [41837086,41837089]),
	Creature.new(["ice hound"], 24, [39111802]),
	Creature.new(["night hound"], 24, [41774350,41774348]),
	Creature.new(["reiver"], 24, [41836675,41836669,41836626,41836634,41836647,41836658,41836619,42192992]),
	Creature.new(["roa'ter wormling"], 24, [41837014]),
	Creature.new(["storm hound"], 24, [41883415]),
	Creature.new(["tree viper"], 24, [70352,70360,61647,61645]),
	Creature.new(["vapor hound"], 24, [41883417]),
	Creature.new(["veteran reiver"], 24, [41836653,42192959]),
	Creature.new(["water hound"], 24, [41883419]),
	Creature.new(["wolverine"], 24, [33127691,41842589]),
	Creature.new(["carceris"], 25, [41765434]),
	Creature.new(["gnoll jarl"], 25, [29645084]),
	Creature.new(["krolvin warfarer"], 25, [6914374,41765311,41788845,41788830,41788850,41836664]),
	Creature.new(["sacristan spirit"], 25, [61213,61204]),
	Creature.new(["spectral monk"], 25, [41764597,41764609]),
	Creature.new(["arachne priest", "arachne priestess"], 26, [41756251,41882740]),
	Creature.new(["jungle troll"], 26, [70367,70362,41837280,57914,57917]),
	Creature.new(["tree spirit"], 26, [41745904,41770653,61199,41842624,61197]),
	Creature.new(["cyclops"], 27, [41857411]),
	Creature.new(["frenzied monk"], 27, [61210,61201]),
	Creature.new(["grutik savage"], 27, [41837029,41837009,41837020]),
	Creature.new(["lesser stone gargoyle"], 27, [41765850]),
	Creature.new(["monastic lich"], 27, [41764592,41764603]),
	Creature.new(["snow leopard"], 27, [41846635,41850158,41850165]),
	Creature.new(["troll chieftain"], 27, [41780215]),
	Creature.new(["darken"], 28, [327776,327765,327761,327763]),
	Creature.new(["dobrem"], 28, [41857001,41841983,41841926,41841924]),
	Creature.new(["fire ogre"], 28, [41818628,41818618]),
	Creature.new(["giant hawk-owl"], 28, [41839499,41846569,42572531]),
	Creature.new(["martial eagle"], 28, [41839483,42572547]),
	Creature.new(["moaning spirit"], 28, [41765420,41774352]),
	Creature.new(["arctic manticore"], 29, [41593317,41593320,41593329]),
	Creature.new(["grutik shaman"], 29, [41837025,41837016]),
	Creature.new(["ice troll"], 29, [41325302,41325320,41325339,41325299,41740748,41740753]),
	Creature.new(["pra'eda"], 29, [41842622,323468]),
	Creature.new(["scaly burgee"], 29, [57922,41846575,41846584]),
	Creature.new(["elder tree spirit"], 30, [41770712,41770734]),
	Creature.new(["giant albino tomb spider"], 30, [1490738]),
	Creature.new(["hisskra warrior"], 30, [41892169,41892154,41892163]),
	Creature.new(["hooded figure"], 30, [41295822,41295818,41295905,41295903,41296033,41742832,41830513,42145580,42519560]),
	Creature.new(["hunter troll"], 30, [41846565,41846571,41846577]),
	Creature.new(["jungle troll chieftain"], 30, [70347,70357,41837277,57911,57908]),
	Creature.new(["lesser wood sprite"], 30, [41839506,42572526]),
	Creature.new(["mammoth arachnid"], 30, [41756249,41839501,323455,41882738,42572529]),
	Creature.new(["tegursh sentry"], 30, [41839493,42572540]),
	Creature.new(["ash hag"], 31, [41818613,41818611]),
	Creature.new(["krynch"], 31, [41837091,41837082]),
	Creature.new(["skeletal ice troll"], 31, [41740742,41846259]),
	Creature.new(["caribou"], 32, [33127709,41846629]),
	Creature.new(["ghostly mara"], 32, [327751,327756,327769]),
	Creature.new(["giant fog beetle"], 32, [41742836,41837275,57920,41830507,42145584,42519554]),
	Creature.new(["rotting corpse"], 32, [41764420]),
	Creature.new(["rotting farmhand"], 32, [41770728]),
	Creature.new(["ghostly pooka"], 33, [41774252,41774239,41774255,41774502]),
	Creature.new(["hisskra shaman"], 33, [41892157,41892151]),
	Creature.new(["mezic"], 33, [41842626]),
	Creature.new(["moor hound"], 33, [41860302,41860323]),
	Creature.new(["sand beetle"], 33, [41856941]),
	Creature.new(["skeletal giant"], 33, [41597808]),
	Creature.new(["three-toed tegu"], 33, [41846582]),
	Creature.new(["cold guardian"], 34, [39111817,41740746,41593324,41846257]),
	Creature.new(["colossus vulture"], 34, [552233,552238]),
	Creature.new(["hisskra chieftain"], 34, [41892166]),
	Creature.new(["lava troll"], 34, [41818624]),
	Creature.new(["moor witch"], 34, [41860298,41860308]),
	Creature.new(["rock troll zombie"], 34, [41837365,41837374]),
	Creature.new(["skeletal soldier"], 34, [69215,69238,42206319,42538213,42906347]),
	Creature.new(["spectral warrior"], 34, [41780379]),
	Creature.new(["tundra giant"], 34, [41593327]),
	Creature.new(["barghest"], 35, [552228,552224,552209]),
	Creature.new(["bog troll"], 35, [69223,69219,42206315,42538217,42906351]),
	Creature.new(["moor eagle"], 35, [41860321]),
	Creature.new(["shimmering fungus"], 35, [327767,327739,327774]),
	Creature.new(["spectral shade"], 35, [41842618]),
	Creature.new(["spectral woodsman"], 35, [41770721]),
	Creature.new(["troll wraith"], 35, [41837382,41837370]),
	Creature.new(["water wyrd"], 35, [41892160]),
	Creature.new(["arctic titan"], 36, [41630878,39111806]),
	Creature.new(["fire giant"], 36, [41818631]),
	Creature.new(["krolvin slaver"], 36, [41860316,42155816,42155839,42930562]),
	Creature.new(["snow crone"], 36, [41325333,41325329,31960354,31960373]),
	Creature.new(["spectral lord"], 36, [327784]),
	Creature.new(["undertaker bat"], 36, [41837379]),
	Creature.new(["writhing icy bush"], 36, [41770699]),
	Creature.new(["huge mein golem"], 37, [41765669,41765844]),
	Creature.new(["lesser moor wight"], 37, [552204,552219,552216,69228,42206311,42538221,42906355]),
	Creature.new(["magru"], 37, [26663624]),
	Creature.new(["shadow mare"], 37, [41774243,41774365,41774403]),
	Creature.new(["sheruvian initiate"], 37, [41295954,41296115,41296025,41295977]),
	Creature.new(["skeletal warhorse"], 37, [41764386,41764400]),
	Creature.new(["swirling spectre"], 37, [41883413]),
	Creature.new(["tusked ursian"], 37, [383247,383251,383249]),
	Creature.new(["frost giant"], 38, [41325307,41630873,39111796,39111811,41740757,31960377,41846244]),
	Creature.new(["grizzly bear"], 38, [33127707]),
	Creature.new(["krolvin corsair"], 38, [41860304,42155829,42155821,42930575]),
	Creature.new(["mud wasp"], 38, [34660038,34660034,34660042]),
	Creature.new(["shadow steed"], 38, [41774264,41774361,41774400]),
	Creature.new(["vesperti"], 38, [41856656]),
	Creature.new(["wood sprite"], 38, [383220,383231,383225]),
	Creature.new(["blackened decaying tumbleweed"], 39, [41770705]),
	Creature.new(["greater bog troll"], 39, [69234,42206305]),
	Creature.new(["greater moor wight"], 39, [552230,552235,552213,69242,42206301]),
	Creature.new(["stone gargoyle"], 39, [41765852]),
	Creature.new(["storm giant"], 39, [41593313,41597824,41883410]),
	Creature.new(["vourkha"], 39, [552222,552211,552226]),
	Creature.new(["forest bendith"], 40, [383236,383241]),
	Creature.new(["kiramon worker"], 40, [41765765,41765763,35921517,40058191,41837597,83347]),
	Creature.new(["myklian"], 40, [26663619]),
	Creature.new(["spectral miner"], 40, [41774245,41774492,41774496]),
	Creature.new(["writhing frost-glazed vine"], 40, [41770701]),
	Creature.new(["bog wraith"], 41, [69232]),
	Creature.new(["lesser ice giant"], 41, [31960363]),
	Creature.new(["roa'ter"], 41, [41764424,41765659,41756513,35921524,40058189,323466]),
	Creature.new(["sheruvian monk"], 41, [41295949,41296110,41296029,41295983]),
	Creature.new(["skeletal lord"], 41, [41764404,41764393]),
	Creature.new(["baesrukha"], 42, [552202,552207]),
	Creature.new(["dark vortece"], 42, [26663621]),
	Creature.new(["frozen corpse"], 42, [31960368,33127685]),
	Creature.new(["minor glacei"], 42, [33127683]),
	Creature.new(["phantasma"], 42, [41764430,41764416]),
	Creature.new(["shan cleric"], 42, [323492]),
	Creature.new(["shan ranger"], 42, [323527]),
	Creature.new(["shan warrior"], 42, [323521]),
	Creature.new(["shan wizard"], 42, [323501]),
	Creature.new(["siren lizard"], 42, [34660050,34660060,34660032,34660056]),
	Creature.new(["swamp hag"], 42, [42206297]),
	Creature.new(["dreadnought raptor"], 43, [584893,584907]),
	Creature.new(["night mare"], 43, [41774259,41774363,41774405]),
	Creature.new(["wasp nest"], 43, [25775924,25775929,26684900,34660036,34660046,34660044]),
	Creature.new(["bog wight"], 44, [41847162]),
	Creature.new(["firethorn shoot"], 44, [34660052,34660054]),
	Creature.new(["forest trali"], 44, [584887,584897]),
	Creature.new(["gaunt spectral servant"], 44, [41892338,41892326,41892330,42209828]),
	Creature.new(["mastodonic leopard"], 44, [584885,584883,584895]),
	Creature.new(["polar bear"], 44, [33127694,61810,61813]),
	Creature.new(["dark frosty plant"], 45, [41770703]),
	Creature.new(["ice wraith"], 45, [33127697,61792]),
	Creature.new(["lesser vruul"], 45, [26663626,26663631]),
	Creature.new(["cinder wasp"], 46, [26684896]),
	Creature.new(["forest trali shaman"], 46, [584902,584910]),
	Creature.new(["greater ice giant"], 46, [31960344]),
	Creature.new(["kiramon defender"], 46, [41765761,41765759,35921522,40058187,41837592,83340,83342]),
	Creature.new(["lesser faeroth"], 46, [41860150,41860154]),
	Creature.new(["rotting chimera"], 46, [41892310,41892321,42209858]),
	Creature.new(["bog spectre"], 47, [41847155]),
	Creature.new(["major glacei"], 47, [33127703,61788]),
	Creature.new(["dybbuk"], 48, [41842467,41842453]),
	Creature.new(["horned vor'taz"], 48, [41860148,41860158]),
	Creature.new(["large thorned shrub"], 48, [41770709]),
	Creature.new(["necrotic snake"], 48, [41892323,41892334,42209845]),
	Creature.new(["red-scaled thrak"], 48, [25775927,26684905]),
	Creature.new(["sand devil"], 48, [34660030]),
	Creature.new(["warrior shade"], 48, [41847159]),
	Creature.new(["waern"], 49, [41842459,41842457]),
	Creature.new(["banshee"], 50, [41765594,41765673,41765671,34660058]),
	Creature.new(["flesh golem"], 50, [41892319,41892336]),
	Creature.new(["greater faeroth"], 50, [41860152,41860156]),
	Creature.new(["shriveled icy creeper"], 50, [41770707]),
	Creature.new(["seeker"], 52, [61806]),
	Creature.new(["snow madrinol"], 52, [41837326,41837319]),
	Creature.new(["tomb troll"], 52, [41892312]),
	Creature.new(["wooly mammoth"], 52, [33127713,61796]),
	Creature.new(["ice golem"], 53, [61786]),
	Creature.new(["lesser ice elemental"], 53, [61799]),
	Creature.new(["sabre-tooth tiger"], 53, [61804,61801,61784]),
	Creature.new(["stone sentinel"], 53, [41765596,41765592]),
	Creature.new(["animated slush"], 54, [41837328,41837330,41837332]),
	Creature.new(["ethereal mage apprentice"], 54, [22524780,22524772]),
	Creature.new(["skayl"], 54, [25775931,41857582]),
	Creature.new(["tomb troll necromancer"], 54, [41892316]),
	Creature.new(["eidolon"], 55, [41842463]),
	Creature.new(["grisly corpse hulk"], 55, [41775493]),
	Creature.new(["stone troll"], 55, [41820222,41820258,41898260,42537976]),
	Creature.new(["decaying citadel guardsman"], 56, [22524766,22524747,22524802]),
	Creature.new(["glacial morph"], 56, [41837322,41837324]),
	Creature.new(["lava golem"], 56, [41857585,41857622]),
	Creature.new(["gaunt feral selkie"], 57, [41775495]),
	Creature.new(["massive pyrothag"], 58, [25775933,26684909]),
	Creature.new(["rotting citadel arbalester"], 58, [22524753,22524794]),
	Creature.new(["shan sorcerer", "shan sorceress"], 58, [41295724]),
	Creature.new(["stone giant"], 58, [41820248,41820262,41823275,41823249,41898246,42559021,42559042,42537980]),
	Creature.new(["black forest viper"], 59, [76173,76167,76197]),
	Creature.new(["bony tenthsworn occultist"], 59, [41775498]),
	Creature.new(["massive black boar"], 59, [11776711,76190,76199]),
	Creature.new(["black forest ogre"], 60, [41860662,76175,76192,76186]),
	Creature.new(["fire elemental"], 60, [41857580,41857607]),
	Creature.new(["putrefied citadel herald"], 60, [22524776,22524786,22524790]),
	Creature.new(["shan empath"], 60, [41295719]),
	Creature.new(["winged viper"], 60, [11776714]),
	Creature.new(["desiccated half-krolvin strigoi"], 61, [41775502]),
	Creature.new(["wind wraith"], 61, [41836745]),
	Creature.new(["illoke mystic"], 62, [41823252,41823244,42559016]),
	Creature.new(["phantasmal bestial swordsman"], 62, [22524761]),
	Creature.new(["shan bard", "shan bardess"], 62, [41295703,41295706]),
	Creature.new(["stone mastiff"], 62, [41823283,41823273,42559045,42559050]),
	Creature.new(["massive troll king"], 63, [15264981]),
	Creature.new(["sheruvian harbinger"], 63, [41295811,15264979]),
	Creature.new(["soul golem"], 63, [41885941]),
	Creature.new(["direbear"], 64, [11776716]),
	Creature.new(["fire sprite"], 64, [41857603,41885849]),
	Creature.new(["grifflet"], 64, [41881036,41881027,41881040,42172472,42539188]),
	Creature.new(["shan shaman"], 64, [41295709]),
	Creature.new(["emaciated hierophant"], 66, [41884758,41884778,41884770]),
	Creature.new(["red tsark"], 66, [41857609,41885851]),
	Creature.new(["shan rogue"], 66, [41295714]),
	Creature.new(["supple ivasian inciter"], 66, [41857281,41857277]),
	Creature.new(["illoke shaman"], 67, [41823265,41823285,42559037,42559032]),
	Creature.new(["monstrous direwolf"], 67, [11776718]),
	Creature.new(["muscular supplicant"], 67, [41884790,41884746,41884753]),
	Creature.new(["yeti"], 67, [41881038,41881034,41881032,42172465,42539195]),
	Creature.new(["athletic dark-eyed incubus"], 68, [41857271,41857274]),
	Creature.new(["warped tree spirit"], 68, [11776709]),
	Creature.new(["lesser griffin"], 69, [41881019,41881021,41881030,42172478,42539182]),
	Creature.new(["hunch-backed dogmatist"], 70, [41884733,41884782,41884742]),
	Creature.new(["krag yeti"], 70, [41872462,41881129]),
	Creature.new(["seething pestilent vision"], 70, [41857269,41857267]),
	Creature.new(["fire mage"], 71, [41857611,41857616,41885845,41885847]),
	Creature.new(["krag dweller"], 72, [41872460,41881108,41883406]),
	Creature.new(["magna vereri"], 72, [41857264,41857261]),
	Creature.new(["ilvari sprite"], 73, [11776720]),
	Creature.new(["storm griffin"], 73, [41883408,41881025,41881023,42172474,42539186]),
	Creature.new(["ilvari pixie"], 74, [11776723]),
	Creature.new(["lesser minotaur"], 74, [41881125,41881103]),
	Creature.new(["moulis"], 75, [41885383,41885381]),
	Creature.new(["naisirc"], 75, [5461283,5461281]),
	Creature.new(["minotaur warrior"], 76, [41881116,41881111]),
	Creature.new(["shrickhen"], 76, [41885372,41885374,42586056]),
	Creature.new(["raving lunatic"], 77, [5461295,5461285,24413586,24413600]),
	Creature.new(["dhu goleras"], 78, [41885369,41885378,42586058]),
	Creature.new(["minotaur magus"], 78, [41881097,41881121]),
	Creature.new(["seraceris"], 78, [5461271,5461287]),
	Creature.new(["treekin warrior"], 80, [11776707]),
	Creature.new(["vvrael witch"], 80, [5461265,5461276,5461290]),
	Creature.new(["csetairi"], 81, [24413577,24413592]),
	Creature.new(["greater skayl"], 81, [41857650]),
	Creature.new(["stooped titan stormcaller"], 81, [41883400]),
	Creature.new(["being"], 82, [41847773,41847750,41847752,41847768]),
	Creature.new(["caedera"], 82, [24413590,24413575]),
	Creature.new(["earth elemental"], 82, [41825631,41825629,41825676]),
	Creature.new(["lesser construct"], 83, [41847764,41637400,41637406,41637402,41847775,41847756]),
	Creature.new(["titan tempest tyrant"], 83, [41883395]),
	Creature.new(["treekin druid"], 83, [11776705]),
	Creature.new(["greater krynch"], 84, [41825648,41825651,41825653]),
	Creature.new(["gremlock"], 84, [41847777,41637397,41637389,41637393,41847766,41847754,41847771]),
	Creature.new(["lich qyn'arj"], 84, [41637395,41637404,41637391]),
	Creature.new(["steam dervish"], 84, [41857644]),
	Creature.new(["vvrael warlock"], 84, [24413562,24413567,24413602,8605409,8605437,8605415]),
	Creature.new(["firebird"], 85, [41818665]),
	Creature.new(["haggard veiki herald"], 85, [41883390]),
	Creature.new(["aivren"], 86, [8605422]),
	Creature.new(["festering taint"], 86, [41847758,41847762,41847760,41847779]),
	Creature.new(["illoke elder"], 86, [41825664,41825668,41825633]),
	Creature.new(["ash guardian"], 87, [41818657]),
	Creature.new(["n'ecare"], 87, [5975949,8605399,8605424]),
	Creature.new(["greater earth elemental"], 88, [41825674,41825655,41825672]),
	Creature.new(["illoke jarl"], 89, [41825643,41825659,41825638]),
	Creature.new(["ithzir scout"], 89, [1083163,1083227,1083256,1083182,1083172,1083232]),
	Creature.new(["blazing red phoenix"], 90, [41818663]),
	Creature.new(["ithzir initiate"], 91, [1083276,1083237,1083252,1083300,1083140,1083153]),
	Creature.new(["lost soul"], 91, [5975946,5975929]),
	Creature.new(["ithzir janissary"], 92, [1083193,1083148,1083117,1083212,1083159,1083245]),
	Creature.new(["water elemental"], 92, [41882316]),
	Creature.new(["ithzir herald"], 93, [1083128,1083177,1083207,1083198,1083133,1083271]),
	Creature.new(["vaespilon"], 93, [5975933,5975939]),
	Creature.new(["triton dissembler"], 94, [41882322]),
	Creature.new(["triton warlock"], 94, [2119016]),
	Creature.new(["greater construct"], 96, [1083284,1083249,1083122,1083298]),
	Creature.new(["ithzir adept"], 96, [1083189,1083113,1083265,41848174,1083294,1083203,1083221,1083217,1083324]),
	Creature.new(["siren"], 96, [41882325,41882318]),
	Creature.new(["triton assassin"], 96, [2119019]),
	Creature.new(["triton executioner"], 96, [41882293,41882282]),
	Creature.new(["fallen crusader"], 97, [5448600,5448590]),
	Creature.new(["ithzir seer"], 97, [1083280,1083144,1083261,41848178,1083168,1083124,1083290,1083241,1083320]),
	Creature.new(["spectral triton defender"], 98, [41882299,41882307]),
	Creature.new(["spectral triton protector"], 98, [2119023]),
	Creature.new(["triton brawler"], 98, [2119014]),
	Creature.new(["triton combatant"], 98, [41882288,41882274]),
	Creature.new(["glistening cerebralite"], 100, [5448605,2412223,2412225]),
	Creature.new(["triton fanatic"], 100, [2119033]),
	Creature.new(["triton radical"], 100, [41882328,41882278]),
	Creature.new(["war griffin"], 100, [1083138,1083288,1083286,1083157,1083269,1083187,1083225,1083314]),
	Creature.new(["bloody halfling cannibal"], 101, [3178947,3178943]),
	Creature.new(["cadaverous tatterdemalion ghast"], 101, [41774877,41774943,41774964]),
	Creature.new(["chitinous kiramon myrmidon"], 102, [40058185,40058183,40058181]),
	Creature.new(["flickering mist-wreathed banshee"], 102, [41774880,41774946,41774967]),
	Creature.new(["heavily armored battle mastodon"], 102, [3178966,3179004]),
	Creature.new(["immense gold-bristled hinterboar"], 102, [3178941,3178939]),
	Creature.new(["ithzir champion"], 102, [1083309,1083304]),
	Creature.new(["triton magus"], 102, [41882312]),
	Creature.new(["triton warden"], 102, [2119029]),
	Creature.new(["enormous rift crawler"], 103, [5448596]),
	Creature.new(["ethereal triton psionicist"], 103, [2119027]),
	Creature.new(["ethereal triton sentry"], 103, [41882304]),
	Creature.new(["smouldering skeletal dreadsteed"], 103, [41774883,41774949]),
	Creature.new(["stunted halfling bloodspeaker"], 103, [3178935,3178931]),
	Creature.new(["tattooed gigas berserker"], 103, [3178962,3178984,3179000]),
	Creature.new(["behemothic gorefrost golem"], 104, [3178929,3178927]),
	Creature.new(["darkly inked fetish master"], 104, [2412235,2412212]),
	Creature.new(["disfigured hive thrall"], 104, [40058178,40058175,40058172]),
	Creature.new(["infernal death knight"], 104, [41774886,41774952,41774970]),
	Creature.new(["niveous giant warg"], 104, [3178960,3178998]),
	Creature.new(["greater water elemental"], 105, [41882331]),
	Creature.new(["grim gigas skald"], 105, [3178956,3178980,3178994]),
	Creature.new(["horned basalt grotesque"], 105, [41774890,41774956,41774974]),
	Creature.new(["savage fork-tongued wendigo"], 105, [3178925,3178923]),
	Creature.new(["brawny gigas shield-maiden"], 106, [3178951,3178975,3178989]),
	Creature.new(["corpulent kresh ravager"], 106, [40058170,40058168]),
	Creature.new(["gaudy phantasmic conjurer"], 106, [41774958,41774976]),
	Creature.new(["murky soul siphon"], 106, [2412220,2412218]),
	Creature.new(["ashen patrician vampire"], 107, [41774961,41774979]),
	Creature.new(["quivering sanguine ooze"], 107, [3179031,3179029,3179027]),
	Creature.new(["sleek black kiramon stalker"], 108, [40058166,40058164,40058162]),
	Creature.new(["vvrael destroyer"], 108, [2412231,2412227]),
	Creature.new(["withered shadow-cloaked draugr"], 108, [3178971,3179055,3179051]),
	Creature.new(["squamous reptilian mutant"], 109, [3179023,3179019]),
	Creature.new(["infernal lich"], 110, [2412244]),
	Creature.new(["roiling crimson angargeist"], 110, [3179049,3179047]),
	Creature.new(["translucent kiramon strandweaver"], 110, [40058160,40058158]),
	Creature.new(["barbed cavern urchin"], nil, [41779849]),
	Creature.new(["crackling lightning fiend"], nil, [41883404]),
	Creature.new(["crazed canine"], nil, [41741034]),
	Creature.new(["ebon swine"], nil, [41736721]),
	Creature.new(["imposing elk"], nil, [41736725]),
	Creature.new(["luminous worm"], nil, [41779851]),
	Creature.new(["muddy hog"], nil, [41736723]),
	Creature.new(["muscular brindlecat"], nil, [41736729]),
	Creature.new(["ogre sentry"], nil, [41779843]),
	Creature.new(["shelfae assailant"], nil, [41741032]),
	Creature.new(["speckled cave lizard"], nil, [41779847]),
	Creature.new(["spectacled bear"], nil, [41736727]),
]

data.spawn_index = {
	41653811 => [7547,7550,7551,7561,7553,7558,7559],
	41653809 => [7547,7546,7550,7554,7555,7549],
	41752264 => [7544,7543,7536,7533,7534,7535,7537,7538],
	41752258 => [7533,7534,7535,7537,7532,7529,7530,7531,7539,7541,7540,7528],
	41752254 => [7508,7509,7510,7507,7506,3934],
	41752260 => [3934,7502,7503,7504,3932,7490,3931],
	41752252 => [7494,7495,7496,7497,7498,7499,7493],
	41752378 => [3946,3947,3948,3949,32775,3950,3951,3952,3953,3954],
	41753973 => [3955,3956,3957,3958,3959,3960,3961,32776,3962],
	41754002 => [3963,32778,3965,32779,32780,32781,3969,32782,32783,3971],
	41753998 => [3964,3967,3966,3968,3973,32777,3970,3974],
	41752406 => [32758,32759,3940,32760,32761,32762,32763,32764,3945],
	41753975 => [32765,7512,32766,9290,32767,9291,32768,9292],
	41752376 => [32769,32770,32771,32772,32773,32774,3972],
	41752408 => [3939,3941,3942,3975,3976,3938,3943,3944,3977],
	41754051 => [7567,7568,7569,7570,7571,7572,7573,7574,7578,7579,7589],
	41754053 => [7575,7583,7587,7593,7594,7597,7595,7598,7596,7590,7591,7585,7586,7588,7599,7584,7582,7581,7577,7576,7580,7592],
	59252 => [420,435,436,437,441,442,443,444,445,446,447,448,449,215,216,218,217,219,220,419,438,439,440,3608,3757],
	40355566 => [453,6823,6824,6825,6826,6827,6828,6829,7156,7157,7161,7162,454,455,475,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287],
	40355577 => [453,461,462,6821,6822,6823,6824,6825,6826,6827,6828,6829,7156,7157,7161,7162,454,455,475,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287],
	59245 => [433,432,431,429,430,422,421,213,214,215,216,218,217,219],
	59254 => [433,432,431,429,430,422,421,213,214,215,216,218,217,219,423,424,426,427,428,425],
	59250 => [3607,3606,3605,3604,4346,4347,434],
	41714582 => [4196,4197,4264,4263,4200,4201,4202,4203,4204,4205,7992,4206,7993,7994,7995,8187,8188,8189,8190,8191,8192,8193,8022,4301,4266,4265,4275,4211,4212,4210,4209,4208,4207,4199,4198],
	41714580 => [4196,8187,8188,8189,8190,8191,8192,8193,4301,4266,4265,4275,4211,4212,4213,4299,4276,4210,4209],
	41714585 => [4197,4264,4263,4200,4201,4202,4203,4204,4205,7992,4206,7993,7994,7995,4208,4207,4199,4198],
	41714575 => [4264,4263,4200,4201,4202,4203,4204,4205,7992,4206,7993,7994,7995,4208,4207,4199,4198],
	41754161 => [8194,8195,8197,8212,8213,8214,8215,8198,8201,8200,8199,8202,8203,8204,8207,8208,8210,8211,8209,8205,8206,8196],
	41754159 => [8194,8195,8197,8212,8213,8214,8215,8198,8201,8200,8199,8202,8203,8204,8207,8208,8210,8211,8209,8205,8206,8196],
	41754212 => [8221,8224,8225,8220,8216,8217,8219,8218],
	41754210 => [8221,8224,8225,8220,8216,8217,8219,8218],
	40266639 => [8227,8245,8246,8228,8229,8241,8272,8260,8259,8261,8262,8263,8264,8230,8255,8256,8257,8258,8231,8234,8247],
	40266660 => [8227,8245,8246,8228,8229,8241,8272,8260,8259,8261,8262,8263,8264,8230,8255,8256,8257,8258,8231,8234,8247],
	40266665 => [8233,8239,8242,8240,8265,8266,8267,8269,8270,8271,8268,8273,8232,8248,8235,8236,8238,8237,8249,8250,8252,8253,8254,8251],
	40266669 => [8233,8239,8242,8240,8265,8266,8267,8269,8270,8271,8268,8273,8232,8248,8235,8236,8238,8237,8249,8250,8252,8253,8254,8251],
	41714578 => [4301,4266,4265,4275,4211,4212,4213,4299,4276],
	41636567 => [4300,4302,4303,4304,4334,4338,4337,4336,4335,4305,8170,8164,8165,8166,8167,8169,8168],
	41636572 => [4300,4302,4303,4304,4334,4338,4337,4336,4335,4305,8170,8164,8165,8166,8167,8169,8168,4306,4307,4322,4323,4333,4324,4325,4326,4327,4331,4330,4329,4332,4328,4308,8172,8173,8177,8176,8175,8174,4309,4310,4318,4319,4321,8178,8179,8180,4320,4311,4312,4313,4316,4317,33309,4314,33308],
	41636569 => [4306,4307,4322,4323,4333,4324,4325,4326,4327,4331,4330,4329,4332,4328,4308,8172,8173,8177,8176,8175,8174,4309,4310,4318,4319,4321,8178,8179,8180,4320,4311,4312,4313,4316,4317,33309,4314,33308],
	41636565 => [8181,8182,8185,8184,8186,8183,8163],
	40111545 => [4214,4215,4262,4261,4260,4259,4257,4221,4258,4220,4219,4218,4217,4216],
	40111547 => [4214,4215,4262,4261,4260,4259,4257,4221,4258,4220,4219,4218,4217,4216],
	40111549 => [4214,4215,4262,4261,4260,4259,4257,4221,4258,4220,4219,4218,4217,4216],
	40111551 => [4256,4255,4254,4253,4252,4251,4250,4249,4248,4247,4246,4245,4244,4243,4242,4241,4240,4239,4238,4237,4236,4235,4234,4233,4232,4231,4230,4229,4228,4227,4226,4225,4224,4223,4222],
	40111540 => [4256,4255,4254,4253,4252,4251,4250,4249,4248,4247,4246,4245,4244,4243,4242,4241,4240,4239,4238,4237,4236,4235,4234,4233,4232,4231,4230,4229,4228,4227,4226,4225,4224,4223,4222],
	41754390 => [7999,8001,8002,8003,8004,8005,8007,8008,8009,8010,8011,8012,8013,8015,8014,8016,8018,8019,8020,8021,8017,8006,8000],
	41756168 => [7996,8276,8277,8278,8279,8280,8290,8292,8295,8298,8299,8303,8317,8318,8319,8320,8321,8322,8293,8294,8324,8325,8300],
	41756159 => [8281,8282,8283,8284,8286,8288,8311,8302,8304,8305,8306,8307,8308,8310,8312,8314,8315,8316,8323,8296,8297,8309,8313],
	41756161 => [8288,8290,8292,8295,8298,8299,8311,8302,8303,8306,8307,8314,8315,8316,8317,8318,8319,8320,8321,8322,8293,8294,8324,8325,8297,8300],
	41756251 => [8327,8330,8331,8332,8335,8336,8337,8338,8339,8340,8341,8343,8345,8347,8348,8346,8344,8342,8349,8352,8357,8353,8358,8354,8359,8355,8360,8356,8350,8351,8361,8333,8334,8328,8329],
	41756249 => [8332,8337,8349,8352,8357,8353,8358,8354,8359,8355,8360,8356,8350,8351,8328,8329],
	41756240 => [8339,8340,8341,8343,8345,8347,8348,8346,8344,8342,8352,8357,8353,8358,8354,8359,8355,8360,8356,8350,8351],
	41597775 => [8536,8537,8538,8539,8540,8433,8434,8516,8517,8518,8519,8520,8521,7159,7160,8432,8532,8533,8534,8535],
	41597833 => [8536,8537,8538,8539,8540,8433,8434,8516,8517,8518,8519,8520,8521,8522,8525,8526,8527,8523,8524,7159,7160,8432,8531,8532,8533,8534,8535],
	41597801 => [8536,8537,8538,8539,8540,8434,8516,8517,8518,8519,8520,8521,8522,8525,8526,8527,8523,8524,8528,8529,8530,1292,1291,1288,1289,1290,8531,8532,8533,8534,8535],
	41597827 => [8540,8433,8434,8516,7159,7160,8432,8534],
	41597796 => [8528,8529,8530,1292,1291,8435,8508,8509,8513,8510,8514,8511,8512,8515,1288,1289],
	152435 => [1293,1294,8545,8541,8543,8544,8574,19651,19650],
	152448 => [1293,1294,8545,8541,8543,8544,8542,8574,19651,19649,19650,19640,19642,19646,19647,19648,19652,19653,19654,19655],
	152443 => [1293,1294,8545,8541,8543,8544,8542,8574,19651,19649,19650,19640,19642,19646,19647,19648,19652,19653,19654,19655],
	152456 => [8542,19649,19650,19640,19642,19646,19647,19648,19652,19653,19654,19655],
	41377381 => [1296,1297,1298,1299,1300,1301],
	41377387 => [1302,1303,1304,1305,1306,1307,1308,1309,1310,1311],
	41377385 => [1313,1314,1315,1316,1317,9314,9315,1318,1319,9311,1320,1321],
	41764420 => [13988,13998,13999,14001,14033,14034,14035,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,13997,13991,13990,13989],
	41764424 => [13988,13998,13999,14001,14033,14034,14035,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,13997,13991,13990,13989],
	41764404 => [14037,14062,14063,14064,14066,14068,14069,14071,14058,14061,14057,14055,14056,14080,14079,14053,14051,14052,14065,14067,14070,15991,15992,16808,16809,16810],
	41764386 => [14064,14066,14068,14069,14065,14067],
	41764400 => [14073,14075,14078,14077,14076,14074],
	41764430 => [15992,16808,16809,16810,16807,16812,16818,16813,16819,16814],
	41764393 => [16812,16818,16813,16819,16814,16820,16815,16821,16816,16822,16817,16823],
	41764416 => [16820,16815,16821,16816,16822,16817,16823],
	41295822 => [6622,6629,6623,6626,6627,6628],
	41295818 => [6622,6629,6623,6626,6627,6628],
	41295905 => [6630,6631,6632,6633,6634,6635,6636],
	41295903 => [6630,6631,6632,6633,6634,6635,6636],
	41295954 => [6630,6631,6632,6633,6634,6635,6637,6651,6652,6654,6662,6664,6636],
	41295811 => [6637,6651,6652,6674,6675,6677,6678,6679,6680,6683,6684,6685,6687,6689,6688,6690,6686,6676,6681,6682,6638,6639,6642,6645,6646,6647,6648,6649,6650,6644,6643,6640,6641,6654,6656,6662,6663,6664,6655,6666,6667,6668,6669,6670,6671,6672,6673,6657,6658,6660,6659,6661],
	41295949 => [6651,6652,6654,6662,6664],
	41296110 => [6674,6675,6677,6678,6679,6680,6683,6684,6685,6687,6689,6688,6690,6686,6676,6681,6682,6641],
	41296115 => [6677,6683,6684,6685,6687,6689,6688,6690,6686],
	41296033 => [6638,6639,6642,6645,6646],
	41296025 => [6638,6639,6642,6645,6646,6647,6648,6649,6650,6644,6643,6640,6641,6656,6663,6666,6668,6657,6658,6660,6659,6661],
	41296029 => [6656,6663,6666,6668,6657,6658,6660,6659,6661],
	41295977 => [6655,6667,6669,6670,6671],
	41295983 => [6670,6671,6673],
	41742836 => [7437],
	41742832 => [7437],
	41764592 => [6504,6501,6503,6500,6499,6502],
	41764597 => [6497,6493,6489,6488,6487,6490,6491,6492,6494,6495,12260],
	41764603 => [6497,6493,6489,6488,6487,6490,6491,6492,6494,6495,32717,32716,12260],
	41764609 => [32717,6498,6496,32723,32724,32725,32726,32721,32722,32718,32719,32720,32716],
	41711692 => [6468,6467,6464,6465,6466,6463,6462,6461],
	41711697 => [4298,4274,4273,4272,4297,4296,4295,4294,4293,4292,4291,4290,4289,4269,4270,4271,4268],
	41711700 => [4298,4274,4273,4272,4297,4296,4295,4294,4293,4292,4291,4290,4289,4269,4270,4271,4268],
	6914368 => [6410,6411,6412,6413,6414,6415,6416,6417,6419,6420,6424,6428],
	6914363 => [6415,6416,6417,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6432,6433,6435,6434,6436,6431,6429,6430],
	6914384 => [6421,6422,6423,6425,6426,6427,6432,6433,6435,6434,6436,6431,6437,6438,6442,6443,6444,6445,6439,6440,6441,6429,6430],
	6914374 => [6437,6438,6442,6443,6444,6445,6439,6440,6441],
	41765311 => [6446,6447,6448,6449,6450,6455,6454,6456,6452,6453,6451],
	41712891 => [6506,6507,6509,6553,6554,6550,6549,6548,6547,6546,6545,6516,6517,6518,6535,6540,6539,6537,6536,6522,6526,6524,6525,6523,6527,6528,6529,6530,6515,6514,6513,6512,6511,6510],
	41712889 => [6509,6516,6517,6515,6514,6513,6512,6511,6510],
	41712896 => [6509,6552,6553,6554,6551,6550,6549,6548,6547,6546,6545,6544,6543,6542,6516,6517,6518,6519,6535,6540,6539,6537,6536,6522,6526,6524,6525,6523,6527,6528,6529,6530,6515,6514,6513,6512,6511,6510],
	41765420 => [6558,6592,6589,6559,6561,6563,6564,6606],
	41765442 => [6590,6591,6593,6594,6595,6560,6567,6601,6602,6603,6604,6599,6607,6576,6574,6575,6570,6571,6572,6573,6568,6579,6580,6581,6578,6609,6577],
	41765438 => [6567,6574,6570,6571,6572,6573,6568,6579,6580,6581,6612,6613,6614,6615,6617,6618,6616],
	41765434 => [6567,6601,6602,6604,6599,6607,6576,6574,6575,6570,6571,6572,6573,6568,6562,6579,6580,6581,6578,6609,6577],
	41765427 => [6569,6600,6598,6605,6597,6606,6562],
	41765423 => [6562,6584,6612,6613,6614,6615,6617,6618,6616],
	41765418 => [6587,6586,6585,6588],
	15264981 => [3699,3700,3701,3702,3703,3717,3819,3718,3719,3720],
	15264979 => [3721,3722,3723,3811,3812,3814,3813,3816,3817,22230,22231,3818,3810,3815],
	41765594 => [3693,3690,3689,3688,3687,3691,3692,3712,3713,3715,3716,3805,3623,3804,3803,3806],
	41765596 => [3693,3690,3689,3688,3687,3691,3704,3801,3705],
	41765592 => [3692,3712,3713,3715,3716,3805,3623,3804,3803,3806],
	41765673 => [7072,7073,7074,7075,7076,7077],
	41765669 => [7079,7081,7082,7084,7086,7087,7080,7085],
	41765671 => [7097,7098,7099,7104,7110,7111,7112,7113,7114,7115],
	41765765 => [7120,7121,7123,7124,7136,7122,7125,7127,7128,7130,7131,7132,7133,7134,7135,7129,7126],
	41765761 => [7120,7121,7123,7124,7136,7122,7125,7127,7128,7130,7131,7132,7133,7134,7135,7129,7126],
	41765763 => [7137,7139,7140,7141,7142,7143,7144,7146,7145,7138],
	41765759 => [7137,7139,7140,7141,7142,7143,7144,7146,7145,7138],
	41765659 => [7047,7068,7067,7065,7066,7064,7063,7062,7061,7069,7052,7053,7054,7055,7056,7059,7060,7057,7051,7050,7049,7048],
	41765844 => [7033,7034,7040,7042,7039,7038,7032],
	41765850 => [7025,7026,7027,7002,7003,7004,7005,7006,7007,7008,7001,7030],
	41765852 => [7022,7023,7024,7021,7020,7019,7018,7017,7015,7016,7010,7013,7011,7012],
	41756515 => [6991,6990,6989,6988,6987,6973,6972,6971,6970,6969,6968,6967],
	41756513 => [6974,6975,6977,6979,6976,6980,6981,6982],
	41769651 => [3770,3771,3775,3773,3776,3777,3772,6107,6108],
	41769710 => [6691,6692,6707,6708,6713,6712,6711,6710,6709,6714,6715,6716,6693],
	41769714 => [6713,6712,6711,6710,6709,6714,6715,6716],
	41769700 => [6704,6705,6696,6697,6699,6700,6701,6702,6695,6694],
	41769705 => [6704,6705,6696,6697,6699,6700,6701,6702,6695,6694],
	41769690 => [6704,6705,6696,6697,6699,6700,6701,6702,6695,6694],
	41700831 => [6717,6718,6719,6720,6721,6722,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6736,6723,6724,6735],
	41699836 => [6737,6764,6765,6766,6769,6770,6775,6776,6777,6778,6779,6780,6781,6784,6785,6782,6783,6774,6773,6772,6771,6767,6768,6763,6762],
	41699831 => [6737,6765,6766,6769,6770,6775,6776,6777,6778,6779,6780,6781,6784,6785,6782,6783,6774,6773,6772,6771,6767,6768],
	41699842 => [6737,6764,6765,6766,6769,6770,6775,6776,6777,6778,6779,6780,6781,6784,6785,6782,6783,6774,6773,6772,6771,6767,6768,6763,6762],
	41699826 => [6775,6777,6778,6779,6780,6781,6784,6785,6782,6783,6774,6773,6772,6771],
	41700119 => [6786,6788,6789,6787,6794,6795,6796,6801,6802,6800,6808,6809,6810,6811,6812,6816,6817,6818,6820,6819,6815,6814,6813,6807,6806,6805,6803,6804,6799,6793,6792,6791,6798,6790,6797],
	41700071 => [6786,6788,6789,6787,6794,6795,6796,6801,6802,6800,6808,6809,6810,6807,6806,6805,6803,6804,6799,6793,6792,6791,6798,6790,6797],
	41700041 => [6801,6802,6800,6808,6809,6810,6811,6812,6816,6817,6818,6820,6819,6815,6814,6813,6807,6806,6805,6803,6804,6799,6797],
	41700037 => [6808,6809,6810,6811,6812,6816,6817,6818,6820,6819,6815,6814,6813,6807,6806,6804],
	41699938 => [6757,6756,6744,6745,6761,6758,6759,6760,6752,6753,6754,6755,6742,6743,6741,6740,6739,6749,6750,6751,6738,476,6746,6747,6748],
	41699942 => [6757,6756,6744,6745,6761,6758,6759,6760,6752,6753,6754,6755,6742,6743,6741,6740,6739,6749,6750,6751,6738,476,6746,6747,6748],
	41699945 => [6757,6756,6744,6745,6761,6758,6759,6760,6752,6753,6754,6755,6742,6743,6741,6740,6739,6749,6750,6751,6738,476,6746,6747,6748],
	41699947 => [6757,6756,6744,6745,6761,6758,6759,6760,6752,6753,6754,6755,6743,6749,6750,6751,6746,6747,6748],
	40355605 => [457,458,459,460,461,462,6821,6822],
	41769951 => [464,465,466,467,468,473,469,470,471,472],
	41769949 => [1196,1197,1198,1199,7816,7817,7818,7820,7819,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,7765,7759,7760,7756,7757,7758],
	41769955 => [1196,1197,1198,1199,7816,7817,7818,7820,7819,1200,1201,1202,1203,1204,1205,7765,7759,7760,7756,7757,7758,7777,7778,7779],
	41769929 => [1196,1197,1198,1199,7816,7817,7818,7820,7819,1200,1201,1202,1203,1204,1205,1206,1208,1209],
	41769933 => [1197,1198,1199,7816,7817,7818,7820,7819,1200,1201,1202,1203,1204,1205,1206,1208,1209],
	41770116 => [4117,4116,7802,7801,7800,7772,7771,7770,7769,7768,7766,7761,4112,4113,4114,4111,4110,7767,7762,7763,7764,7773,4115],
	41770093 => [4117,4116,7802,7801,7800,7772,7771,7770,7769,7768,7766,7761,4112,4113,4114,4111,4110,7767,7762,7763,7764,7773,4115],
	41770108 => [4117,4116,7802,7801,7800,7772,7771,7770,7769,7768,7766,7761,4112,4113,4114,4111,4110,7767,7762,7763,7764,7773,4115],
	41770159 => [7802,7801,7800,7772,7771,4109,7762,7763,7764,7773],
	41770152 => [7772,7771,7770,7769,7768,7766,4112,4113,4114,4111,4110,7767,7762,7763,7764,7773],
	41770130 => [7791,7792,7799,7793,7794,7795,7796,7797,7798,7804,7813,7812,7811,7810,7809,7808,7807,7806,7805,7814,7815],
	41770121 => [7774,7780,7781,7782,7788,7787,7786,7785,7784,7783],
	41770164 => [7774,7780,7781,7782,7788,7787,7786,7785,7784,7783],
	41745904 => [1210,1211,1212,1213,1214,1215,1216,7890,7891,7892],
	11776711 => [24675,24676,24689,24690,24691,24692,24693,24694,24695,24697,24698,24699,24700,24701,24688],
	11776714 => [24675,24676,24689,24690,24691,24692,24693,24694,24695,24697,24698,24699,24700,24701,24688],
	11776716 => [24696,24702,24703,24713,24714,24712,24711,24710,24715,24709,24708,24707,24706,24705,24704],
	11776718 => [24696,24702,24703,24713,24714,24712,24711,24710,24715,24709,24708,24707,24706,24705,24704],
	11776709 => [24696,24702,24703,24713,24714,24712,24711,24710,24715,24709,24708,24707,24706,24705,24704],
	11776720 => [24716,24717,24719,24720,24721,24744,24722,24723,24726,24724,24725,24727,24729,24728,24718],
	11776723 => [24716,24717,24719,24720,24721,24744,24722,24723,24726,24724,24725,24727,24729,24728,24718],
	11776707 => [24730,24731,24732,24733,24736,24735,24737,24740,24741,24738,24739,24742,24743,24734],
	11776705 => [24730,24731,24732,24733,24736,24735,24737,24740,24741,24738,24739,24742,24743,24734],
	41325302 => [2574,4118,4119,4120,4121,7822,7823],
	41325320 => [2573,2572,2571,2570,7869,7821],
	41325307 => [2573,2572,2571,2570,7869,2569,7867,7868,2568,7851],
	41325333 => [2571,2570,7869,7870,7871,7872,30517,30519,30518,30516,7821],
	41325339 => [7870,7871,7872,30517,30519,30518,30516],
	41325299 => [2569,7867,7868,2568,7851],
	41325329 => [2569,7867,7868,2568,7851],
	41630878 => [3617,7853,7854,7855,3553,3554,2564,2565,2566,2563,2562,2561,2560,3552,3551,3678,3679,3680,3682,7856,3681,7857,7858,7860,7861,7859,3550,2558,2559,3559],
	41630873 => [3617,7853,7854,7855,3553,3554,2564,2565,2566,2563,2562,2561,2560,3552,3551,3678,3679,3680,3682,7856,3681,7857,7858,7860,7861,7859,3550,2558,2559,3559],
	39111796 => [2557,2556,2555,2554,2553,2552,2551,2550,2549,2548,2547,2546,2545,2544,2543,2542,2541,2540,2539],
	39111802 => [2556,2555,2554,2553,2552,2551,2550,2549,2548,2547,2546,2545,2544,2543,2542,2541,2540,2539],
	39111811 => [3464,3473,3472,3471,3470,3469,3465,3466,3467,3468],
	39111817 => [3474,3475,3480,3482,3481,3476,3478,3477],
	39111806 => [3474,3475,3480,3482,3481,3479],
	39111815 => [2516,2515,2514,2513,2512,2511,2510,2509,2508,2507,2506,2505,2504,2503,2502,2501,2500,2499,2498],
	40895380 => [2497,3176,3177,2496,2495,2494,2493,2492,2491],
	40895387 => [3195,3200,3201,3197,3198,3196,3199],
	40895376 => [3201,3202,3203,3204,3205,3206],
	40895393 => [3207,3211,3212,3213,3214,3215,3216,3217,3210,3209,3208],
	40895397 => [3207,3211,3212,3213,3214,3215,3216,3217,3210,3209,3208],
	40895483 => [3179,3180,3183,3184],
	40895469 => [3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3193,3192,3191],
	40895487 => [3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3193,3192,3191],
	40895476 => [3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3193,3192,3191],
	40895478 => [3182,3186,3189,3190,3193],
	40895385 => [2494,2493,2492,2491,2490,2489,2488,2487],
	40895368 => [2494,2493,3153,3154,3155],
	40895378 => [3058,3059,3060,3061,3062,3063,3064,3065,3066,3067],
	40895370 => [3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3036],
	41770646 => [3092,3093,3099,3094,3095,3098,3096,3097],
	41770659 => [3101,3102,3103],
	41770649 => [3104,3117,3118,3119,3105,23714,3106],
	41770662 => [3107,3116,3108,3109,3110,3112,3113,3114,3115,3111],
	41770699 => [24519,24520,24530,24545,24529,24528,24527,24526,24525,24524,24523,24522,24521],
	41770701 => [24519,24520,24530,24545,24529,24528,24527,24526,24525,24524,24523,24522,24521],
	41770705 => [24532,24543,24544,24538,24537,24535,24539,24542,24541,24540,24534,24536,24533],
	41770703 => [24532,24543,24544,24538,24537,24535,24539,24542,24541,24540,24534,24536,24533],
	41770709 => [24532,24543,24544,24538,24537,24535,24539,24542,24541,24540,24534,24536,24533],
	41770707 => [24532,24543,24544,24538,24537,24535,24539,24542,24541,24540,24534,24536,24533],
	41770653 => [3120,3121,3122,3123,3124,3125],
	41770712 => [3126,3152,3151,3150,3147,3148,3139,3138,3137,3136,3149,3140],
	41770734 => [3127,3134,3142,3141,3128,3129,3135,3133,3132,3131,3130],
	41770728 => [3127,3134,3142,3141,3128,3129,3135,3133,3132,3131,3130],
	41770721 => [3152,3151,3150,3147,3148,3145,3146,3143,3142,3141,3138,3149,3144],
	41771189 => [3157,3163,3167,3174,3175,3158,3159,3160,3161,3162,3164,3165,3166,3168,3169,3170,3171,3172,3173],
	229621 => [3459,3460,9093,9094,9095,9096,9097,9098,9099,9100,9101],
	229619 => [9102,9104,9105,9106,9107,9108,9111,9110,9113,9119,9121,9118,9116,9117,9120,9114,9115,9109,9112,9103],
	41772342 => [9140,9148,9144,9145,9158,9153,9154,9155,9156,9143],
	41772328 => [9140,9148,9144,9145,9158,9153,9154,9155,9156,9143],
	41772340 => [9140,9148,9144,9145,9158,9153,9154,9155,9156,9157,9159,9160,9161,9162,9150,9151,9152,9241,9146,9147,9143,9141,9149,9142],
	41772338 => [9157,9159,9160,9161,9162,9150,9151,9152,9241,9146,9147,9141,9149,9142],
	41772316 => [9157,9159,9160,9161,9162,9150,9151,9152,9241,9146,9147,9141,9149,9142],
	41772433 => [9163,9165,9166,9167,9168,9169,9170,9171,9172,9173],
	41772437 => [9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9192,9190,9198,9199,9197,9196,9195,9191,9194,9193],
	41772441 => [9189,9200,9201,9203,9202,9174,9176,9177,9178,9180,9181,9182,9184,9185,9186,15913,9187,9188,9175,9179,9183],
	41772446 => [9202,9174,9176,9177,9178,9180,9181,9182,9184,9185,9186,15913,9187,9188,9175,9179,9183],
	41772538 => [9205,9206,9207,9208,9214,9215,9216,9217,9218,9220,9219,9212,9211,3781,9210,9209],
	41772528 => [9205,9206,9207,9208,9214,9215,9216,9217,9218,9220,9219,9212,9211,3781,9210,9209],
	41772530 => [9205,9206,9207,9208,9214,9215,9216,9217,9218,9220,9219,9212,9211,3781,9210,9209],
	41772515 => [9205,9206,9207,9208,9214,9215,9216,9217,9218,9220,9219,9212,9211,3781,9210,9209],
	41772520 => [9221,9234,9233,9232,9231,9230,9235,9236,9223,9224,9225,9226,9227,9228,9229,9213,9222],
	41772522 => [9221,9234,9233,9232,9231,9230,9235,9236,9223,9224,9225,9226,9227,9228,9229,9213,9222],
	41772524 => [9221,9234,9233,9232,9231,9230,9235,9236,9223,9224,9225,9226,9227,9228,9229,9213,9222],
	41772533 => [9221,9234,9233,9232,9231,9230,9235,9236,9223,9224,9225,9226,9227,9228,9229,9213,9222],
	5461283 => [2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2601,2602,2603,2604,2605,2606],
	5461295 => [2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613],
	5461271 => [2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2601,2602,2603,2604,2605,2606],
	5461265 => [2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593],
	5461276 => [2594,2595,2596,2597,2627,2628,2629,2630,2644,2632,2633],
	5461290 => [2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,12090,2618,2617,2620,2621,2622,2623,2624,2625,2626],
	5461281 => [2600,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,12090,2618,2617,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2644,2632,2633],
	5461287 => [2600,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,12090,2618,2617,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2644,2632,2633],
	5461285 => [2614,2615,2616,12090,2618,2617,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2644,2632,2633],
	5975949 => [12208,12165,12159,12211,12162,12207,12170,12215,12210,12209,12173,12206,12160],
	5975946 => [12208,12170,12215,12209,12173,12206,12160],
	5975933 => [12208,12170,12209,12173,12206],
	5975929 => [12165,12159,12211,12162,12207,12210],
	5975939 => [12165,12159,12211,12162,12207,12215,12210,12160],
	24413586 => [12101,12124,12123,2619,12128,12127,12121,12120,12102,2634,12134,12116,12112,12118,12135,12131,12132,12129,12130],
	24413577 => [12101,12124,12123,2619,12166,12128,12127,12121,12120,12102,2634,12134,12116,12112,12089,12115,12136,12118,12135,12131,12132,12113,12129,12130,12158,12126,12167],
	24413590 => [12101,12124,12123,2619,12166,12128,12127,12121,12120,12102,2634,12134,12116,12112,12089,12115,12136,12118,12135,12131,12132,12113,12129,12130,12158,12126,12167],
	24413562 => [12101,12123,2619,12121,12120,12102,12116,12118,12135],
	24413567 => [12124,12128,12127,2634,12134,12112,12131,12132,12129,12130],
	24413600 => [12117,12163,12104,12166,12089,12115,12137,12136,12142,12143,12147,12144,12111,12114,12088,12109,12110,12150,12149,12148,12113,2643,12155,12154,12158,12105,12107,12108,12126,12167,12168,12169,12100,12171,12172,12164],
	24413592 => [12117,12163,12104,12137,12142,12143,12147,12144,12111,12114,12088,12109,12110,12150,12149,12148,2643,12155,12154,12105,12107,12108,12168,12169,12100,12171,12172,12164],
	24413575 => [12117,12163,12104,12137,12142,12143,12147,12144,12111,12114,12088,12109,12110,12150,12149,12148,2643,12155,12154,12105,12107,12108,12168,12169,12100,12171,12172,12164],
	24413602 => [12117,12163,12104,12166,12089,12115,12137,12136,12142,12143,12147,12144,12111,12114,12088,12109,12110,12150,12149,12148,12113,2643,12155,12154,12158,12105,12107,12108,12126,12167,12168,12169,12100,12171,12172,12164],
	8605409 => [12093,12174,12175,12176,12177,12178,12179,12180,12181],
	8605399 => [12093,12174,12175,12176,12177,12178,12179,12180,12181,12182,12183,12184,12185,12186,12187,12188,20882,20881,20880],
	8605437 => [12182,12183,12184,12185,12186,12187,12188,20882,20881,20880,12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,20879,12202,12203,12204,12205,12212,12213,12214,20878,20877,12216,20876,12094],
	8605424 => [12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,20879,12202,12203,12204,12205,12212,12213,12214,20878,20877,12216,20876,12094,12218,12091,12092,12221,12222,12223,12224,12225,12226,12227],
	8605422 => [12197,12198,12199,12200,12201,20879,12202,12203,12204,12205,12212,12213,12214,20878,20877,12216,20876,12094,12218,12091,12092,12221,12222,12223,12224,12225,12226,12227],
	8605415 => [12218,12091,12092,12221,12222,12223,12224,12225,12226,12227],
	5448600 => [12152,12103,12252,12119,12145,12157,12122,12153,12146,12138,12248],
	5448605 => [12152,12103,12252,12119,12140,12141,12125,12145,12157,12122,12153,12146,12138,12248,12139,12106,12133,12151,12097,12098,12156,12096,12095],
	5448596 => [12152,12103,12252,12119,12140,12141,12125,12145,12157,12122,12153,12146,12138,12248,12139,12106,12133,12151,12097,12098,12156,12096,12095],
	5448590 => [12140,12141,12125,12139,12106,12133,12151,12097,12098,12156,12096,12095],
	2412223 => [12235,12236,12238,12239,12231,12233,12249,12250,12251,12219,12229,12240,12232,12230,12228],
	2412235 => [12235,12236,12238,12239,12231,12233,12249,12250,12251,12219,12229,12240,12232,12230,12228],
	2412220 => [12235,12236,12238,12239,12231,12233,12249,12250,12251,12219,12229,12240,12232,12230,12228],
	2412231 => [12235,12236,12238,12239,12231,12233,12249,12250,12251,12219,12229,12240,12232,12230,12228],
	2412225 => [12237,12234,12245,12244,12242,12241,12243,12246,12253,12254,12217,12220,12255,12256,12247],
	2412212 => [12237,12234,12245,12244,12242,12241,12243,12246,12253,12254,12217,12220,12255,12256,12247],
	2412218 => [12237,12234,12245,12244,12242,12241,12243,12246,12253,12254,12217,12220,12255,12256,12247],
	2412227 => [12237,12234,12245,12244,12242,12241,12243,12246,12253,12254,12217,12220,12255,12256,12247],
	2412244 => [12249,12251,12245,12244,12242,12241,12243,12246,12253,12254,12255,12256,12247],
	41774243 => [7328,7327,7326,7325,7330,7329],
	41774264 => [7328,7327,7326,7325,7330,7329],
	41774259 => [7328,7327,7326,7325,7330,7329],
	41774365 => [7332,7333,7345,7335,7336,7337,7338,7339,7341,7343,7344,7373,7376,7375,7374,7347,7346,7334,7342,7340,7348,7372],
	41774361 => [7332,7333,7345,7335,7336,7337,7338,7339,7341,7343,7344,7373,7376,7375,7374,7347,7346,7334,7342,7340,7348,7372],
	41774363 => [7339,7341,7343,7344,7373,7376,7375,7374,7347,7340,7348,7372],
	41774403 => [7349,7350,7351,7352,7353,7354,7355,7360,7361,7368,7384,7364,7363,7362,7366,7367,7365,7385,7388,7359,7358,7357,7356,7369,7370,7382,7377,7381,7383,7386,7387,7378,7379,7380,7371],
	41774400 => [7349,7350,7351,7352,7353,7354,7355,7360,7361,7368,7384,7364,7363,7362,7366,7367,7365,7385,7388,7359,7358,7357,7356,7369,7370,7382,7377,7381,7383,7386,7387,7378,7379,7380,7371],
	41774405 => [7349,7350,7351,7352,7353,7354,7355,7360,7361,7368,7384,7364,7363,7362,7366,7367,7365,7385,7388,7359,7358,7357,7356,7369,7370,7382,7377,7381,7383,7386,7387,7378,7379,7380,7371],
	41774252 => [4535,4536,4538,4540,4541,4539,4537],
	41774239 => [4542,4543,4550,4549,4553,4552,4551,4545,4546,4544],
	41774255 => [4547,4554,4555,4556,4558,4560,4559,4557,4548],
	41774245 => [7389,7394,7395,7396,7390,7391,7392,7393],
	41774502 => [7397,7399,7400,7401,7402,7403,7405,7406,7407,7408,7409,7410,7424,7404,7430,7431,7432,7433,7434,7398],
	41774492 => [7397,7399,7400,7401,7402,7403,7405,7406,7407,7408,7409,7404,7430,7431,7432,7433,7434,7398],
	41774496 => [7410,7424,7425,7426,7427,7428,7429,7411,7412,7413,7414,7415,7416,7417,7419,7422,7420,7421,7418,7423],
	41774350 => [7315,7314,22426,7313,7312],
	152222 => [7233,7232,7235,7236,7237,7238,7239,7240,7242,7243,7225,7226,7227,7231,7228,7230,7234,7229,7241],
	152374 => [7244],
	152367 => [7245,28746,7298,7300],
	152403 => [7306,7311,7310,7309,7308,7307,7206],
	152389 => [7306,7311,7310,7309,7308,7307,7206],
	152419 => [7306,7311,7310,7309,7308,7307,7206,7207],
	152415 => [7306,7311,7310,7309,7308,7307,7206,7207],
	152365 => [7194,7193,7192,7191,7190,7189,7186,7187,7188,7185,7184,7167,4143,4345,4344,7299,7302],
	152361 => [7194,7193,7192,7191,7190,7189,7186,7187,7188,7185,7184,7170,7169,7168,7167,4143,4345,4344,7299,7302],
	152217 => [7194,7193,7192,7191,7190,7189,7186,7187,7188,7185,7184,7196,7198,7199,7200,7202,7201,7197],
	152359 => [7189,7186,7185,7184,4143,4345,4344,7299,7302],
	152213 => [7171,7170,7169,7168,4141,7163,7164,7165],
	152369 => [7171,7170,7169,4141,7163,7164,7165],
	152380 => [7171,7170,7169,7168,7167,4141,7163,7164,7165],
	152215 => [7166,7301,16792,16793,7303,7252,7251,7203,7204,7205,7272,7263,7262],
	1490814 => [7173,7174,7175,7176,7177,7178,7179,7180,7182,7181,7183],
	1490807 => [7173,7174,7175,7176,7177,7178,7179,7180,7182,7181,7183],
	1490810 => [7173,7174,7175,7176,7177,7178,7179,7180,7182,7181,7183],
	152384 => [7207],
	1490751 => [7208,7248,7249,7250,7209,7210,7211,7212,7247,7246,7214,7213],
	1490740 => [7211,7212,7247,7246,7214,7215,7216,7217,7218,7219,7220,7221,7223,7224,7222,7213],
	1490749 => [7215,7216,7217,7218,7219,7220,7221,7223,7224,7222],
	1490744 => [7215,7216,7217,7218,7219,7220,7221,7223,7224,7222],
	1490734 => [7215,7216,7217,7218,7219,7220,7221,7223,7224,7222],
	1490738 => [7215,7216,7217,7218,7219,7220,7221,7223,7224,7222],
	152348 => [7195,7196,7198,7199,7200,7202,7201,7197],
	41774670 => [7273,7274,7275,7276,7277,7278,7283,7282,7281,7280,7279,7284,7286,7287,7285],
	41774672 => [7292,7293,7294,7295,7296,7297,7291,7290,7289,7288],
	152408 => [7252,7251,7203,7272,7263],
	152346 => [7252,7251,7204,7205,7272,7263],
	152413 => [7252,7251,7203,7202,7201,7197,7272,7263],
	1490790 => [7254,7255,7265,7268,7269,7264,7271,7270,7266,7267,7261,7257,7258,7259,7256],
	1490781 => [7254,7255,7265,7268,7269,7264,7271,7270,7266,7267,7261,7257,7258,7259,7256],
	1490786 => [7254,7255,7265,7268,7269,7264,7271,7270,7266,7267,7261,7257,7258,7259,7256],
	1490777 => [7254,7255,7265,7268,7269,7264,7271,7270,7266,7267,7261,7257,7258,7259,7256],
	41774763 => [4144,4146,4164,4163,4162,4161,4160,4150,4151,4158,4159,4154,4149,4148,4165,4166,4167,4147],
	41774759 => [4175,4190,4189,4188,4187,4191,4186,4185,4184,4183,4192,4193,4179,4180,4181,4182,4194,4178,4177,4176],
	41774348 => [7319,7321,7322,7323,7324,7320],
	41774352 => [7319,7321,7322,7323,7324,7320],
	41774877 => [32329,32330,32322,32373,32405,32406,32407,32408,32409,32437,32410,32411,32412,32413,32415,32414,32426,32425,32429,32424,32420,32419,32417,32418,32416,32430,32431,32435,32434,32432,32427,32428,32433,32436,32421,32422],
	41774880 => [32329,32330,32322,32373,32405,32406,32407,32408,32409,32437,32410,32411,32412,32413,32415,32414,32426,32425,32429,32424,32420,32419,32417,32418,32416,32430,32431,32435,32434,32432,32427,32428,32433,32436,32421,32422],
	41774883 => [32329,32330,32322,32373,32405,32406,32407,32408,32409,32437,32410,32411,32412,32413,32415,32414,32426,32425,32429,32424,32420,32419,32417,32418,32416,32430,32431,32435,32434,32432,32427,32428,32433,32436,32421,32422],
	41774886 => [32329,32330,32322,32373,32405,32406,32407,32408,32409,32437,32410,32411,32412,32413,32415,32414,32426,32425,32429,32424,32420,32419,32417,32418,32416,32430,32431,32435,32434,32432,32427,32428,32433,32436,32421,32422],
	41774890 => [32329,32330,32322,32373,32405,32406,32407,32408,32409,32437,32410,32411,32412,32413,32415,32414,32426,32425,32429,32424,32420,32419,32417,32418,32416,32430,32431,32435,32434,32432,32427,32428,32433,32436,32421,32422],
	41774956 => [32423,32438,32439,32440,32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462,32441],
	41774943 => [32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462],
	41774946 => [32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462],
	41774949 => [32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462],
	41774952 => [32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462],
	41774958 => [32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462],
	41774961 => [32442,32443,32444,32445,32450,32448,32446,32453,32451,32452,32454,32456,32457,32458,32490,32459,32460,32461,32488,32489,32491,32492,32518,32519,32493,32494,32520,32521,32463,32464,32484,32462],
	41774964 => [32447,32455,32465,32466,32471,32472,32473,32474,32475,32476,32477,32478,32467,32468,32469,32470,32479,32480,32449,32481,32482,32485,32486,32487,32554,32555,32556,32557,32558,32559,32560,32561,32562,32483],
	41774967 => [32447,32455,32465,32466,32471,32472,32473,32474,32475,32476,32477,32478,32467,32468,32469,32470,32479,32480,32449,32481,32482,32485,32486,32487,32554,32555,32556,32557,32558,32559,32560,32561,32562,32483],
	41774970 => [32447,32455,32465,32466,32471,32472,32473,32474,32475,32476,32477,32478,32467,32468,32469,32470,32479,32480,32449,32481,32482,32485,32486,32487,32554,32555,32556,32557,32558,32559,32560,32561,32562,32483],
	41774974 => [32447,32455,32465,32466,32471,32472,32473,32474,32475,32476,32477,32478,32467,32468,32469,32470,32479,32480,32449,32481,32482,32485,32486,32487,32554,32555,32556,32557,32558,32559,32560,32561,32562,32483],
	41774976 => [32447,32455,32465,32466,32471,32472,32473,32474,32475,32476,32477,32478,32467,32468,32469,32470,32479,32480,32449,32481,32482,32485,32486,32487,32554,32555,32556,32557,32558,32559,32560,32561,32562,32483],
	41774979 => [32447,32455,32465,32466,32471,32472,32473,32474,32475,32476,32477,32478,32467,32468,32469,32470,32479,32480,32449,32481,32482,32485,32486,32487,32554,32555,32556,32557,32558,32559,32560,32561,32562,32483],
	41775493 => [32374,32375,32376,32377,32378,32387,32388,32396,32397,32399,32400,32401,32403,32404,32402,32398,32389,32392,32393,32394,32395,32390,32391,32379,32495,32496,32497,32498,32499,32380,32381,32382,32383,32385,32386,32384],
	41775495 => [32374,32375,32376,32377,32378,32387,32388,32396,32397,32399,32400,32401,32403,32404,32402,32398,32389,32392,32393,32394,32395,32390,32391,32379,32495,32496,32497,32498,32499,32380,32381,32382,32383,32385,32386,32384],
	41775498 => [32374,32375,32376,32377,32378,32387,32388,32396,32397,32399,32400,32401,32403,32404,32402,32398,32389,32392,32393,32394,32395,32390,32391,32379,32495,32496,32497,32498,32499,32380,32381,32382,32383,32385,32386,32384],
	41775502 => [32374,32375,32376,32377,32378,32387,32388,32396,32397,32399,32400,32401,32403,32404,32402,32398,32389,32392,32393,32394,32395,32390,32391,32379,32495,32496,32497,32498,32499,32380,32381,32382,32383,32385,32386,32384],
	41740748 => [3243,3250,3251,3252,3244,3248,3249,3245,3246,3247],
	41740746 => [3243,3250,3251,3252,3244,3248,3249,3253,3260,3245,3246,3247],
	41740742 => [3253,3260],
	41740757 => [3253,3254,3259,3260,3255,3256,3257,3258],
	41740753 => [3254,3259,3255,3256,3257,3258],
	41593317 => [3264,3274,3275,3276,3278,3279,3277,3265,3271,3272,3273,3266,3267,3270,3268,3269],
	41593320 => [3280,3287,3288,3289,3290,3281,3291,3292,3293,3282,3283,3285,3286,3284],
	41593327 => [3280,3287,3288,3289,3290,3281,3291,3292,3293,3282,3283,3285,3286,3284],
	41593329 => [3294,3304,3295,3296,3297,3299,3300,3301,3303,3298,3302],
	41593324 => [3294,3304,3295,3296,3297,3299,3300,3301,3303,3298,3302],
	41593313 => [3294,3304,3295,3296,3297,3299,3300,3301,3303,3298,3302],
	229625 => [9073,15791,15914,15926,15920,15917,15918,15923,15922,15925,15924,15915,15916,15919,15928,23255,15929,15927,15921,23257,23256,15697],
	229629 => [9075,9082,9081,9083,9077,9078,9079,9080,9076],
	229623 => [9084,9085,9088,9092,9091,9086,9087,9090,9089],
	41630959 => [3310,3311,3312,3313,3314,3315,3316,3317,3318,3329,3330,3326,3327,3328,3331,3320,3321,3322,3323,3324,3325,3319],
	75988 => [3030,3007,3008,3005,3006,3004,3003,3002,3001,3000,2999,2998,3009,3010,3027,3028,3029,3013,3012,3011],
	41714283 => [2997,2996,2995,2994,2993,2992,2933],
	41714278 => [2997,2996,2995,2994,2993,2992,2933],
	31960354 => [2932,2931,2930,2929,2928,2926,2925,2924,2923,2922,2921,2920,2919,2914,2915,2916,2908,2909,2910,2911,2912,2913,2902,2903,2904,2901],
	31960377 => [2932,2931,2930,2929,2928,2926,2925,2924,2923,2922,2921,2920,2919,2914,2915,2916,2911,2912,2913],
	31960363 => [2921,2920,2919,2914,2915,2916,2917,2918,2908,2909,2910,2911,2912,2913,2902,2903,2904,2905,2901,2898,2897,2896,2895,2894,2899,2900],
	31960373 => [2917,2918,2905,2898,2897,2896,2895,2894,2886,2885,2887,2884,2888,2893,2892,2891,2889,2890,2883,2881,2882,2877,2878,2879,2880,2899,2900],
	31960368 => [2898,2897,2896,2895,2894,2886,2885,2887,2884,2888,2893,2892,2891,2889,2890,2883,2881,2882,2877,2878,2879,2880,2899,2900],
	31960344 => [2898,2897,2896,2895,2894,2886,2885,2887,2884,2888,2893,2892,2891,2889,2890,2883,2881,2882,2877,2878,2879,2880,2899,2900],
	33127709 => [2875,2873,2828,2829,2830,2831,2832,2826,2825,2824,2823,2822,2819,2818,2817,2816,2815,2814,2834,2827,2874],
	33127691 => [2828,2829,2830,2831,2832,2826,2825,2824,2823,2822,2819,2818,2817,2816,2815,2814,2834,2827],
	33127705 => [2832,2826,2825,2824,2823,2822,2819,2818,2817,2816,2815,2834,2827],
	33127707 => [2823,2822,2819,2818,2817,2816,2815,2814,2813,2812,2811,2821,2820],
	33127685 => [2810,2809,2808,2807,2795,2768,2769,2770,2771,2767,2766,2765,2764,2763,2762,2761,2760,2759,2758,2757,2756,2755],
	33127683 => [2810,2809,2808,2807,2795,2768,2769,2770,2771,2767,2766,2765,2764,2763],
	33127703 => [2795,2768,2769,2770,2771,2767,2766,2765,2764,2763,2762,2761,2760,2759,2758,2757,2756,2755],
	33127697 => [2767,2766,2765,2764,2763,2762,2761,2760,2759,2758,2757,2756,2755,2754,2753,2752,2751,2750,2748,2749,2747,2746],
	33127694 => [2763,2762,2761,2760,2759,2758,2757,2756,2755,2754,2753,2752,2751],
	33127713 => [2755,2754,2753,2752,2751,2750,2748,2749,2747,2746],
	61810 => [2744,2745,2740,2738,2735,2731,2728,2727,2732,2733,2734,2742,2739,2743,2741,2737,2736,2730,2729,2726],
	61792 => [2744,2745,2740,2738,2735,2742,2739,2743,2741,2736],
	61788 => [2744,2745,2740,2738,2735,2742,2739,2743,2741,2736],
	61796 => [2744,2745,2740,2738,2735,2731,2728,2727,2732,2733,2734,2742,2739,2743,2741,2737,2736,2730,2729,2726],
	61804 => [2731,2728,2727,2732,2733,2734,2737,2736,2730,2729,2726],
	61806 => [2709,2710,2711,2712,2713,2714,2715,2716,2717,2708,2707,2706,2705,2704,2703,2702,2701,2700,2699,2698,2697,2694,2695,2696,2693,2692,2691,2690,2689,2688,2687,2686,2685,2684,2683,2682,2681,2680,2679,2678,2677],
	61801 => [2710,2711,2712,2713,2714,2715,2716,2708,2707,2706,2705,2704,2703,2702,2701,2700,2699,2698,2697,2694,2695,2696,2693,2692,2691,2690,2689,2688,2687,2686,2685,2684,2683,2682,2681,2680,2679,2678,2677],
	61799 => [2710,2711,2712,2713,2714,2715,2716,2717,2708,2707,2706,2705,2704,2703,2702,2701,2700,2699,2698,2697,2694,2695,2696,2693,2692,2691,2690,2689,2688,2687,2686,2685,2684,2683,2682,2681,2680,2679,2678,2677],
	61786 => [2710,2711,2712,2713,2714,2715,2716,2717,2708,2707,2706,2705,2704,2703,2702,2701,2700,2699,2698,2697,2694,2695,2696,2693,2692,2691,2690,2689,2688,2687,2686,2685,2684,2683,2682,2681,2680,2679,2678,2677],
	61813 => [2718,2719,2720,2721,2722,2723,2724,2725],
	61784 => [2718,2719,2720,2721,2722,2723,2724,2725],
	101044 => [11006,11023,11024,11032,11033,11007,11008],
	101042 => [11006,11023,11024,11025,11032,11033,11007],
	70350 => [16011],
	70352 => [16011],
	70367 => [16011],
	70347 => [16011],
	70365 => [16270,16271,16272,16273,16274,16275],
	70360 => [16270,16271,16272,16273,16274,16275],
	70362 => [16270,16271,16272,16273,16274,16275,16256,16280,16279],
	70357 => [16270,16271,16272,16273,16274,16275,16256,16280,16279],
	41779851 => [29056,29058,29077,29080,29093,29097,29090,29110,29113,29114,29098,29100,29109,29095,29116,29117,29118,29094],
	41779849 => [29056,29058,29077,29080,29093,29097,29090,29110,29113,29114,29098,29100,29109,29095,29116,29117,29118,29094],
	41779847 => [29056,29058,29077,29080,29093,29097,29090,29110,29113,29114,29098,29100,29109,29095,29116,29117,29118,29094],
	41779843 => [29056,29058,29077,29080,29093,29097,29090,29110,29113,29114,29098,29100,29109,29095,29116,29117,29118,29094],
	41736729 => [29227,29228,29229,29234,29235,29236,29237,29238,29239,29240,29231,29230,29241,29244,29232,29233,29242,29243],
	41736725 => [29227,29228,29229,29234,29235,29236,29237,29238,29239,29240,29231,29230,29241,29244,29232,29233,29242,29243],
	41736723 => [29227,29228,29229,29234,29235,29236,29237,29238,29239,29240,29231,29230,29241,29244,29232,29233,29242,29243],
	41736721 => [29227,29228,29229,29234,29235,29236,29237,29238,29239,29240,29231,29230,29241,29244,29232,29233,29242,29243],
	41736727 => [29227,29228,29229,29234,29235,29236,29237,29238,29239,29240,29231,29230,29241,29244,29232,29233,29242,29243],
	41741036 => [29124,29128,29129,29133,29134,29217,29219,29223,29222,29224,29221,29220,29131,29120,29218,29225,29226],
	41741034 => [29124,29128,29129,29133,29134,29217,29219,29223,29222,29224,29221,29220,29131,29120,29218,29225,29226],
	41741032 => [29124,29128,29129,29133,29134,29217,29219,29223,29222,29224,29221,29220,29131,29120,29218,29225,29226],
	41740802 => [29047,29049,29060,29059,29070,29071,29063,29065,29066,29067,29061,29062,29072,29076,29075,29074,29068,29069,29073,29064],
	41740798 => [29047,29049,29060,29059,29070,29071,29063,29065,29066,29067,29061,29062,29072,29076,29075,29074,29068,29069,29073,29064],
	41740808 => [29047,29049,29060,29059,29070,29071,29063,29065,29066,29067,29061,29062,29072,29076,29075,29074,29068,29069,29073,29064],
	41740793 => [29047,29049,29060,29059,29070,29071,29063,29065,29066,29067,29061,29062,29072,29076,29075,29074,29068,29069,29073,29064],
	41740473 => [29135,29204,29209,29188,29189,29190,29191,29192,29193,29196,29197,29198,29201,29200,29199,29202,29203,29194,29195],
	41740480 => [29135,29204,29209,29188,29189,29190,29191,29192,29193,29196,29197,29198,29201,29200,29199,29202,29203,29194,29195],
	41740475 => [29208,29207,29210,29211,29212,29214,29216,29213,29215,29206,29205],
	41737143 => [11063,11064,11065,11066,11137,11136,11123,11124,11125,11126,11127,11129,11133,11132,11131,11130,11128],
	41737146 => [11064,11065,11066,11137,11136,11135,11134,11138,11139,11142,11141,11143,11144,11145,11140,11123],
	41737141 => [11145,11146,11148,11149,11150,16028,11147],
	69289 => [11151,11152,11153,33306,11154,11155,11323,11326,11325,11328,11324,11156,11157],
	69287 => [11151,11152,11153,33306,11154,11155,11323,11326,11325,11328,11324,11156,11157],
	69291 => [11338,11339,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11340,11343,11342,11341],
	69295 => [11338,11339,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11340,11343,11342,11341],
	41741975 => [11403,11404,11405,11406,11407],
	41741984 => [11408,11409,11411,11412,11410],
	41741979 => [11408,11409,11411,11412,11410],
	41780221 => [11413,11414,11415,11416,11423,11425,11424,11426,11417,11418,11419,11422,11420,11421],
	41780219 => [11413,11414,11415,11416,11423,11425,11424,11426,11417,11418,11419,11422,11420,11421],
	41780215 => [11413,11414,11415,11416,11423,11425,11424,11426,11417,11418,11419,11422,11420,11421],
	69297 => [11159,11160,11322,11293,11292,11224,11223,11202,11166,11165,11164,11163,11162,11161,11225,11228,11226,11227],
	69293 => [11159,11160,11322,11293,11292,11224,11223,11202,11166,11165,11164,11163,11162,11161,11225,11228,11226,11227],
	69300 => [11159,11160,11322,11293,11292,11224,11223,11202,11166,11165,11164,11163,11162,11161,11225,11228,11226,11227,11257,11258,11259,11260,11266,11261,11262,11263,11264,11265],
	69285 => [11159,11160,11322,11293,11292,11224,11223,11202,11166,11165,11164,11163,11162,11161,11225,11228,11226,11227,11257,11258,11259,11260,11266,11261,11262,11263,11264,11265],
	22524757 => [11294,11296,11297,11300,11313,11314,11319,11316,11315,11317,11318,11320,11321,11298,11301,11303,11304,11309,11310,11311,11312,11302,11305,11306,11307,11308,11299,11295],
	22524751 => [11268,11269,11291,11270,11271,11273,11274,11288,11289,11286,11287,11284,11285,11281,11282,11283,11275,11280,11276,11279,11277,11278,11272],
	22524784 => [11268,11269,11291,11270,11271,11273,11274,11288,11289,11286,11287,11284,11285,11281,11282,11283,11275,11280,11276,11279,11277,11278,11272],
	22524798 => [11229,11235,16048,11236,11246,11237,16056,11240,11244,16059,11243,11242,11241,16058,11238,17720,11245,11247,11248,11250,11252,11253,11251,11249,11254,11255,11256,11230,11234,11231,11233,11232],
	41780363 => [11204,11219,11220,11222,11221,11205,11206,11216,11217,11218,11207,11209,11210,11213,11214,11215,11208,11211,11212],
	41780386 => [11204,11219,11220,11222,11221,11205,11206,11216,11217,11218,11207,11209,11210,11213,11214,11215,11208,11211,11212],
	41780379 => [11168,11170,11171,11174,11172,11173,11175,11176,11178,11179,11180,11181,11177,11182,11184,11191,11189,11190,11188,11192,11195,32681,32682,32680,11196,11197,16062,32691,11198,32694,32695,32693,11199,11200,32689,32690,32688,32679,11193,16065,32684,32683,11194,32686,32687,32685,11183,11187,32677,32678,32676,32675,11185,11186,11169],
	41788845 => [11067,11068,11069,11070,11071,11072,11073,11083,11084,11085,11086,11074,11082,11081,11080,11079,11078,11077,11076,11075],
	41788855 => [11069,11070,11071,11072,11073,11083,11084,11085,11086,11074,11082,11081,11080,11079,11078,11077,11076,11075],
	41788860 => [11069,11070,11071,11072,11073,11083,11084,11085,11086,11074,11082,11081,11080,11079,11078,11077,11076,11075],
	41788830 => [11087],
	41788865 => [11088,11089,11090,11092,11094,11096,11098,11100,11101,11103,11104,11102,11099,11109,11110,11111,11113,11112,11107,11108,11120,11121,11119,11118,11117,11122,11114,11115,11116,11105,11106,11091,11093,11095,11097],
	41788850 => [11088,11089,11090,11092,11094,11096,11098,11100,11101,11103,11104,11102,11099,11109,11110,11111,11113,11112,11107,11108,11120,11121,11119,11118,11117,11122,11114,11115,11116,11105,11106,11091,11093,11095,11097],
	38155260 => [479,480,481,483,484,485,486,487,488,489,490,492,493,494,495,496,497,499,500,501],
	38155256 => [486,487,488,489,490],
	38155299 => [492,493,494,495,496,497,499,500,501],
	38155262 => [502,503,504,7673,7674,7677,7679,7680,7681,7675,507],
	38155270 => [510,511,512,516,521,522,513,514,515,523,524],
	41789147 => [7683,7691,7692,7693,7685,7689,7694,7695,7686,7688,7687],
	41789153 => [7700,7701,7702,7697,7699,7698],
	41789193 => [7734,7735,7736,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7741,7740,7739,7738,7737],
	41789243 => [7706,7707,7712,7713,7715,7716,7718,7724,7723,7722,7721,7720,7719,7733,7717,7732,7714,7725,7727,7729,7728,7730,7731,7726,7708,7709,7710,7711],
	41789239 => [7706,7707,7712,7713,7715,7716,7718,7724,7723,7722,7721,7720,7719,7733,7717,7732,7714,7725,7727,7729,7728,7730,7731,7726,7708,7709,7710,7711],
	41789313 => [7654,7655,7656,7657,7658,7659,7664,7665,7666,7667,7660,7661,7662],
	41789300 => [7669,7670,7671,7666,7667,7668,7660,7661,7662,7663],
	41789305 => [7646,7647,7648,7641,7642,7643],
	41789580 => [7619,7620,7621,7622,7624,7623,7625,7626,7627],
	598906 => [6110,7921,6118,14725,6117,14724,6112,6113,6114,6115,6116,7917,6111],
	598901 => [6110,7921,6118,14725,6117,14724,6112,6113,6114,6115,6116,7917,6111],
	41765389 => [6836,6837,6838,6839,6840,6841],
	41765376 => [6842,6843,6844,6845,6846,6847],
	41810494 => [6889,6891,6892,6897,6899,6898,6895,6896,6893,6894,6900,6902,6903,6904,6906,6901,6905,6907,6908,6890,6909,6914,6911,6912,6915,6913,6926,6925,6924,6927,6917,6918,6920,6921,6922,6923,6919,6916,17095,6910],
	41810490 => [6889,6891,6892,6897,6899,6898,6895,6896,6893,6894,6900,6902,6903,6904,6906,6901,6905,6907,6908,6890],
	41810486 => [6909,6914,6911,6912,6915,6913,6926,6925,6924,6927,6917,6918,6920,6921,6922,6923,6919,6916,17095,6910],
	41820256 => [3562,3563,3624,3825,3826,3831,3564,3565],
	41820231 => [3562,3563,3624,3825,3826,3831,3564,3565,3566,3567,3568,3569,3570,3573,3572,3571,3856,3858,3857,3574,3768,3859,3860,3861],
	41820246 => [3566,3567,3568,3569,3570,3573,3572,3571,3856,3858,3857,3574,3768,3859,3860,3861],
	41820222 => [3576,3577,3730,3731,3753,3754,3755,3756,3752,3764,3765,3789,3790,3791,3792,3793,3729],
	41820248 => [3576,3577,3730,3731,3753,3754,3755,3756,3752,3764,3765,3789,3790,3791,3792,3793,3729],
	41820258 => [3794,3799,3798,3797,3796,3795],
	41820262 => [3794,3799,3798,3797,3796,3795],
	41823275 => [3579,3580,3587,3588,3598,3599,3612,3589,3590,3591,3594,3596,3597,3592,3593,3581,3614,3615,3582,3583],
	41823283 => [3579,3580,3587,3588,3598,3599,3612,3589,3590,3591,3594,3595,3596,3597,3592,3593,3581,3614,3615,3582,3583,3584,3585,3586,3628],
	41823252 => [3579,3580,3587,3588,3598,3599,3612,3589,3590,3591,3594,3595,3596,3597,3592,3593,3581,3614,3615,3582,3583,3584,3585,3586,3628],
	41823249 => [3613,3595,3584,3585,3586,3628],
	41823273 => [3613],
	41823244 => [3613],
	41823265 => [3613,3594,3583],
	41823285 => [3595,3596,3597,3584,3585,3586,3628],
	41825648 => [8429,8419,8418,8417,8397,8398,8399,8393,8395,8396,8425,8430,8428,8427,8426,8424,8423,8422,8421,8420],
	41825664 => [8429,8419,8418,8417,8425,8430,8428,8427,8426,8424,8423,8421,8420],
	41825674 => [8429,8419,8418,8417,8397,8401,8393,8394,8395,8396,8425,8430,8428,8427,8426,8424,8423,8421,8420],
	41825643 => [8429,8419,8418,8417,8397,8401,8393,8394,8395,8396,8425,8430,8428,8427,8426,8424,8423,8421,8420],
	41825668 => [8397,8400,8401,8402,8403,8404,8405,8406,8410,8412,8415,8413,8414,8390,8387,8381,8391,8392,8393,8394,8395,8396],
	41825631 => [8398,8399,8408,8409,8411,8389,8416],
	41825633 => [8398,8399,8408,8409,8411,8389,8416,8422],
	41825655 => [8398,8399,8408,8409,8411,8389,8416,8422],
	41825659 => [8398,8399,8408,8409,8411,8389,8416,8422],
	41825629 => [8400,8401,8402,8403,8404,8405,8406,8410,8412,8415,8413,8414,8390,8391,8392,8394],
	41825651 => [8400,8401,8402,8403,8404,8405,8406,8410,8412,8415,8413,8414,8390,8391,8392,8394],
	41825672 => [8400,8402,8403,8404,8405,8406,8410,8412,8415,8413,8414,8390,8387,8381,8391,8392],
	41825638 => [8400,8402,8403,8404,8405,8406,8410,8412,8415,8413,8414,8390,8387,8391,8392],
	41825676 => [8407,8375,8383,8384,8388,8386,8387,8385,8376,8377,8378,8382,8380,8381,8379,8374],
	41825653 => [8407,8375,8383,8384,8388,8386,8387,8385,8376,8377,8378,8382,8380,8381,8379,8374],
	41325318 => [4122,4123,4124,7903,7904,7905,4125,4126,4133,4132,4131,4130,4129,4128,4127],
	41325323 => [4122,4123,4124,7903,7904,7905,4125,4126,4133,4132,4131,4130,4129,4128,4127],
	41325337 => [7824,7825,7826,7831,7833,7837,7836,7835,7834,7830,7829],
	41325305 => [7832,7849,7838,7839,7847,7846,7840,7844,7843,7828,7841,7827,7842,7850,7845,7848],
	41836531 => [8140,8139,8138,8137,8136,8135,8134,8133],
	41836529 => [8132,8131,8130,8129,8128,8127,8125],
	41836675 => [8093,8113,8107,8108,8094,8092,8106,8105,8104,8103,8102],
	41836653 => [8093,8113,8083,8082,8081,8080,8079,8107,8108,8094,8092,8106,8105,8104,8103,8102,8101,8100,8074,8075,8076,8077,8078,8071,8070,8069,8072,14456],
	41836664 => [8093,8113,8083,8082,8081,8080,8079,8084,8085,8089,8090,8091,8095,8098,8097,8099,8112,8111,8110,8109,8107,8108,8094,8092,8106,8105,8104,8103,8102,8101,8100,8074,8086,8087,8096,8088,8075,8076,8077,8078],
	41836669 => [8083,8082,8081,8080,8079,8078],
	41836626 => [8084,8085,8089,8090,8091,8088],
	41836634 => [8095,8098,8097,8099,8112,8111,8110,8109,8096],
	41836616 => [8107,8108,8094,8106,8105,8104,8103,8102,8101,8100],
	41836647 => [8101,8100,8074,8071,8070],
	41836658 => [8086,8087,8075,8076,8077],
	41836619 => [8069,8072],
	41837014 => [5822,5821,5820,5819,5818,5817,5816,5815,5814,5813,5812,5811,5810,5809,5808,5807,5806,5797,5796,5795,5794,5793,5792,5791,5790,5783,5784,5785,5786,5787,5788,5782,5805,5804,5803,5802,5801,5800,5799,5798],
	41837029 => [5822,5821,5820,5819,5818,5817,5816,5815,5814,5813,5812,5811,5810,5809,5808],
	41837025 => [5822,5821,5820,5819,5818,5817,5816,5815,5814,5813,5812,5811,5810,5809,5808,5807,5806,5797,5805,5804],
	41837009 => [5807,5806,5797,5805],
	41837020 => [5796,5795,5794,5793,5792,5791,5790,5783,5784,5785,5786,5787,5782,5804,5803,5802,5801,5800,5799,5798],
	41837016 => [5796,5795,5794,5793,5792,5791,5790,5783,5784,5785,5786,5787,5782,5803,5802,5801,5800,5799,5798],
	41837086 => [5752,5753,5754,5755,5765,5767,5768,5769,5766,5756,5764,5757,5763,5758,5762,5759,5761,5760,5770,5772,5771],
	41837091 => [5752,5753,5754,5755,5765,5767,5768,5769,5766,5756,5764,5757,5763,5758,5762,5759,5761,5760,5770,5772,5771],
	41837089 => [5774,5775,5776,5778,9459,9460,9461,9462,9463,9465,9466,9467,9468,9464,5779,5780,5781,5777,5773],
	41837082 => [5774,5775,5776,5778,9459,9460,9461,9462,9463,9465,9466,9467,9468,9464,5779,5780,5781,5777,5773],
	41837365 => [9514,9515,9516,9522,9519,9525,9517,9518],
	41837382 => [9514,9515,9516,9523,9520,9521,9522,9519,9525,9527,9528,9543,9545,9546,9547,9524,9517,9518],
	41837374 => [9523,9520,9521,9526,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9527,9528,9543,9545,9544,9546,9547,9548,9524],
	41837379 => [9523,9520,9521,9526,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9527,9528,9543,9545,9544,9546,9547,9548,9524],
	41837370 => [9526,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9544,9548],
	35921474 => [9567,9568,9569,9570,9571,9572,9573,9574,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589,9590,9591],
	35921472 => [9567,9568,9569,9570,9571,9572,9573,9574,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589],
	35921469 => [9590,9591,9592,9593,9594,9595,9607,9606,9609,9605,9604,9603,9602,9601,9600,9599,9608,9598,9597,9596,9575],
	35921476 => [9592,9593,9594,9595,9607,9606,9609,9605,9604,9603,9602,9601,9600,9599,9608,9598,9597,9596,9575],
	35921517 => [29492,29489,29474,29473,29475,29477,29478,29480,29481,29483,29484,29485,29488,29482,29487,29479,29486,29476,29491,29493,29495,29494,29490,29496,29498,29497,29472,29471],
	35921524 => [29492,29489,29474,29473,29475,29477,29478,29480,29481,29483,29484,29485,29488,29482,29487,29479,29486,29476,29491,29493,29495,29494,29490,29496,29498,29497,29472,29471],
	35921522 => [29492,29489,29474,29473,29475,29477,29478,29480,29481,29483,29484,29485,29488,29482,29487,29479,29486,29476,29491,29493,29495,29494,29490,29496,29498,29497,29472,29471],
	40058191 => [34153,34154,34155,34156,34158,34159,34161,34169,34168,34166,34167,34163,34162,34160,34157,34164,34165,34178,34179,34174,34175,34170,34172,34177,34176,34173],
	40058189 => [34153,34154,34155,34156,34158,34159,34161,34169,34168,34166,34167,34163,34162,34160,34157,34164,34165,34178,34179,34174,34175,34170,34172,34177,34176,34173],
	40058187 => [34153,34154,34155,34156,34158,34159,34161,34169,34168,34166,34167,34163,34162,34160,34157,34164,34165,34178,34179,34174,34175,34170,34172,34177,34176,34173],
	40058185 => [34171,34180,34181,34182,34183,34184,34185,34186,34187,34188,34189,34190,34191,34201,34200,34196,34199,34198,34197,34192,34193,34194,34195,34210,34209,34208,34207,34202,34203,34204,34205,34206],
	40058178 => [34171,34180,34181,34182,34183,34184,34185,34186,34187,34188,34189,34190,34191,34201,34200,34196,34199,34198,34197,34192,34193,34194,34195,34210,34209,34208,34207,34202,34203,34204,34205,34206],
	40058170 => [34171,34180,34181,34182,34183,34184,34185,34186,34187,34188,34189,34190,34191,34201,34200,34196,34199,34198,34197,34192,34193,34194,34195,34210,34209,34208,34207,34202,34203,34204,34205,34206],
	40058166 => [34171,34180,34181,34182,34183,34184,34185,34186,34187,34188,34189,34190,34191,34201,34200,34196,34199,34198,34197,34192,34193,34194,34195,34210,34209,34208,34207,34202,34203,34204,34205,34206],
	40058183 => [34211,34212,34213,34215,34214,34216,34217,34219,34220,34221,34223,34224,34225,34229,34230,34231,34232,34233,34234,34235,34236,34237,34238,34239,34226,34227,34228,34222,34240,34218],
	40058175 => [34211,34212,34213,34215,34214,34216,34217,34219,34220,34221,34223,34224,34225,34229,34230,34231,34232,34233,34234,34235,34236,34237,34238,34239,34226,34227,34228,34222,34240,34218],
	40058168 => [34211,34212,34213,34215,34214,34216,34217,34219,34220,34221,34223,34224,34225,34229,34230,34231,34232,34233,34234,34235,34236,34237,34238,34239,34226,34227,34228,34222,34240,34218],
	40058164 => [34211,34212,34213,34215,34214,34216,34217,34219,34220,34221,34223,34224,34225,34229,34230,34231,34232,34233,34234,34235,34236,34237,34238,34239,34226,34227,34228,34222,34240,34218],
	40058160 => [34211,34212,34213,34215,34214,34216,34217,34219,34220,34221,34223,34224,34225,34229,34230,34231,34232,34233,34234,34235,34236,34237,34238,34239,34226,34227,34228,34222,34240,34218],
	40058181 => [34241,34250,34251,34254,34253,34255,34256,34257,34258,34268,34260,34261,34262,34269,34263,34264,34267,34266,34265,34248,34247,34246,34245,34249,34243,34244,34242,34252,34259],
	40058172 => [34241,34250,34251,34254,34253,34255,34256,34257,34258,34268,34260,34261,34262,34269,34263,34264,34267,34266,34265,34248,34247,34246,34245,34249,34243,34244,34242,34252,34259],
	40058162 => [34241,34250,34251,34254,34253,34255,34256,34257,34258,34268,34260,34261,34262,34269,34263,34264,34267,34266,34265,34248,34247,34246,34245,34249,34243,34244,34242,34252,34259],
	40058158 => [34241,34250,34251,34254,34253,34255,34256,34257,34258,34268,34260,34261,34262,34269,34263,34264,34267,34266,34265,34248,34247,34246,34245,34249,34243,34244,34242,34252,34259],
	41838048 => [6263,6264,6270,6269,6271,6282,6283,6275,6265,6268,6266,6272,6274,6273],
	41838041 => [6263,6264,6270,6269,6271,6282,6275,6265,6268,6272,6274,6273],
	41838038 => [6276,6279,6280,6281,6277,6278],
	41838136 => [6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6300,6301,6302,6303,6298,6299],
	41838121 => [6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6300,6301,6302,6303,6304,6305,6307,6308,6309,6310,6311,6312,6313,6306,6298,6299],
	41838144 => [6304,6305,6307,6308,6309,6310,6311,6312,6313,6306],
	41597805 => [8435,8508,8509,8513,8510,8514,8511,8512,8515],
	41597815 => [8436,8437,8438,8439,8440,8441,8442],
	41597789 => [8443,8449,8448,8447,8446,8445,8444],
	41597808 => [8450,8455,8454,8456,8452,8453,8451],
	41597824 => [8450,8455,8454,8456,8452,8453,8451],
	41597794 => [8513,8510,8514,8511,8512,8515],
	41838368 => [8461,8462,8463,8464,8465,8466,8467,8468,8469,8470],
	41838370 => [8471,8488,8490,8491,8499,8497,8498,8495,8496,8493,8494,8489,8472,8473,8474,8476,8475],
	41838365 => [8500,8503,8502,8501,8505,8504,8506,8477,8479,8480,8481,8482,8483,8484,8487,8485,8486,8478],
	70284 => [10499,10502,10503,10504,10507,10506,10510,10505,10500,10501],
	70266 => [10499,10502,10503,10504,10507,10506,10510,10509,10508,10505,10511,10517,10516,10515,10514,10518,10519,10520,10513,10512,10500,10501],
	70274 => [10509,10511,10517,10516,10515,10514,10518,10519,10520,10521,10522,10529,10528,10513,10512],
	70278 => [10509,10511,10517,10516,10515,10514,10518,10519,10520,10521,10522,10529,10528,10513,10512],
	70276 => [10531,10532,10533,10539,10536,10535,10534,10538,10537,10530,10523,10524,10525,10526,10527],
	70272 => [10531,10532,10533,10539,10536,10535,10534,10538,10537,10530,10523,10524,10525,10526,10527],
	70289 => [10531,10532,10533,10539,10536,10535,10534,10538,10537,10522,10529,10530,10523,10524,10525,10526,10527,10528],
	61217 => [10540,10541,10542,10543,10544,10558,10551,10552,10553,10554,10555,10547,10546,10545,10557,10556,10549,10550,10548],
	61208 => [10540,10541,10542,10543,10544,10558,10551,10552,10553,10554,10555,10547,10546,10545,10557,10556,10549,10550,10548],
	61213 => [10540,10541,10542,10543,10544,10558,10551,10552,10553,10554,10555,10547,10546,10545,10557,10556,10549,10550,10548],
	61223 => [10559,10572,10571,10570,10574,10573,10575,10563,10564,10577,10568,10567,10566,10565,10562,10561,10560,10569,10576],
	61220 => [10559,10572,10571,10570,10574,10573,10575,10563,10564,10577,10568,10567,10566,10565,10562,10561,10560,10569,10576],
	61204 => [10559,10572,10571,10570,10574,10573,10575,10563,10564,10577,10568,10567,10566,10565,10562,10561,10560,10569,10576],
	61199 => [10578,10580,10581,10582,10584,10585,10587,10586,10592,10593,10594,10590,10589,10588,10591,10583,10579,10610,10595],
	61210 => [10578,10580,10581,10582,10584,10585,10587,10586,10592,10593,10594,10590,10589,10588,10591,10583,10579,10610,10595],
	70270 => [10522,10529,10530,10523,10524,10525,10527,10528],
	41818445 => [10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10637,10636,10635,10634,10638,10639,10640,10641],
	41818437 => [10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10637,10636,10635,10634,10638,10639,10640,10641],
	41818441 => [10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10637,10636,10635,10634,10638,10639,10640,10641],
	41818460 => [10642,10643,10657,10656,10644,10645,10655,10654,10653,10652,10658,10659,10651,10650,10649,10648,10647,10646],
	41818439 => [10642,10643,10657,10656,10644,10645,10655,10654,10653,10652,10658,10659,10651,10650,10649,10648,10647,10646],
	41818458 => [10642,10643,10657,10656,10644,10645,10655,10654,10653,10652,10658,10659,10651,10650,10649,10648,10647,10646],
	41818451 => [10660,10665,10663,10664,10661,10662,10668,10669,10670,10671,10667,10666],
	263360 => [5834,5835,5836,5837,5838,5839,5840,5841,5842,5843],
	263343 => [5834,5835,5836,5837,5838,5839,5840,5841,5842,5843],
	263363 => [10674,5891,10684,5877,5878,5888,5889,10682,10677,10676,10679],
	263329 => [10674,5891,10684,5877,5878,5888,5889,10682,10677,10676,10679],
	263337 => [10674,10684,5877,5878,5888,5889,10682,10677,10676,10679],
	263353 => [10674,10684,5877,5878,5888,5889,10682,10677,10676,10679],
	263355 => [5844,5845,5846,5847,5848,5849,5850,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5851],
	263332 => [5844,5845,5846,5847,5848,5849,5850,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5851],
	263325 => [5844,5845,5846,5847,5848,5849,5850,5852,5853,5854,5855,5856,5857,5858,5851],
	263335 => [5891,5879,5885,5886,5887,5892,24559,5893,5870,5890],
	263339 => [5891,5879,5885,5886,5887,5892,24559,5893,5870,5890],
	263345 => [5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5873,5874,5875],
	263341 => [5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5873,5874,5875],
	263358 => [5876,10683,5884,29574,29575,5882,5881,5871,5880,5870,29576,5872],
	263349 => [5876,10683,5884,29574,29575,5882,5881,5871,5880,5870,29576,5872],
	263327 => [5876,10683,5884,29574,29575,5882,5881,5871,5880,29576,5872],
	263351 => [10685,10692,10693,10686,10690,10691,10687,10689,10688],
	41838686 => [10694,10715,10714,10713,10712,10711,10710,10709,10708,10707,10706,10705,10704,10703,10702,10701,10700,10699,10698,10697,10696,10695],
	41838695 => [10694,10715,10714,10713,10712,10711,10710,10709,10708,10707,10706,10705,10704,10703,10702,10701,10700,10699,10698,10697,10696,10695],
	41838681 => [10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741],
	41838673 => [10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747],
	41838690 => [10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741],
	41838677 => [10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747],
	41838688 => [10716,10728,10727,10726,10725,10724,10723,10722,10721,10720,10719,10718,10717],
	41838675 => [10716,10728,10727,10726,10725,10724,10723,10722,10721,10720,10719,10718,10717],
	41839499 => [18821,14059,18819,18820,18825,18826,18827,18829,18830,18840,18838,18837,18836,18835,18834,18833,18831,18832,18824,18839,18844,18828],
	41839483 => [18821,14059,18819,18820,18825,18826,18827,18829,18830,18840,18838,18837,18836,18835,18834,18833,18831,18832,18824,18839,18844,18828],
	41839506 => [18821,14059,18819,18820,18825,18826,18827,18829,18830,18840,18838,18837,18836,18835,18834,18833,18831,18832,18824,18839,18844,18828],
	41839493 => [18821,14059,18819,18820,18825,18826,18827,18829,18830,18840,18838,18837,18836,18835,18834,18833,18831,18832,18824,18839,18844,18828],
	41839501 => [18821,14059,18819,18820,18825,18826,18827,18829,18830,18840,18838,18837,18836,18835,18834,18833,18831,18832,18824,18839,18844,18828],
	41841842 => [6094,6095,6096,6097,6098,6099,10290,10291,10292,10295,10296,10297,6091,6092,6093,6090,10269,6100],
	41818749 => [6022,6021,6020,6013,6014,6015,6016,6018,6019,6017,6026,6025,6024,6041,6042,6023,10485,10486],
	41818737 => [6022,6021,6020,6013,6014,6015,6016,6018,6019,6017,6026,6025,6024,6041,6042,6023,10485,10486],
	41818776 => [6022,6021,6020,6013,6014,6015,6016,6018,6019,6017,6026,6025,6024,6041,6042,6023,10485,10486],
	41818778 => [6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072],
	41818771 => [6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072],
	41818747 => [6054,6055,6056,6057,6058,6049,6050,6051,6052,6053,6045,6048,6047,6046],
	41818741 => [6054,6055,6056,6057,6058,6049,6050,6051,6052,6053,6045,6048,6047,6046],
	41818752 => [6074,6080,6075,6079,6076,6077,6081,6078,6089,6083,6084,6085,6087,6088,6086,6082],
	41818739 => [6074,6080,6075,6079,6076,6077,6081,6078,6089,6083,6084,6085,6087,6088,6086,6082],
	41818735 => [6028,6031,6040,6039,6038,6037,6036,6035,6034,6033,6032,6029,6030],
	41818763 => [6028,6031,6040,6039,6038,6037,6036,6035,6034,6033,6032,6029,6030],
	41775765 => [5956,5957,5958,5959,5961,5960,5965,5962,5964,5966,5968,5969,5967,5963,10479,5971,5972,5973,5974,5970],
	41775729 => [5956,5957,5958,5959,5961,5960,5965,5962,5964,5966,5968,5969,5967,5963,10479,5971,5972,5973,5974,5970],
	41775758 => [5975,5985,5987,5988,5989,5990,5992,5993,5991,5994,5981,5980,5982,5979,5983,5978,5984,5977,5976,5986],
	41775732 => [5975,5985,5987,5988,5989,5990,5992,5993,5991,5994,5981,5980,5982,5979,5983,5978,5984,5977,5976,5986],
	41775761 => [5995,6009,6008,6005,6003,6002,6001,6000,5996,5999,5997,5998,10482,10484,10483,6007,6006,10481,6004],
	41775749 => [5995,6009,6008,6005,6003,6002,6001,6000,5996,5999,5997,5998,10482,10484,10483,6007,6006,10481,6004],
	41775754 => [5995,6009,6008,6005,6003,6002,6001,6000,5996,5999,5997,5998,10482,10484,10483,6007,6006,10481,6004],
	41818539 => [10252,10251,10250,10249,10248,10244,10247,10243,10242,10241,10240,10245,10246],
	41818549 => [10237,10238,10239,10236,10234,10235,10233,10209,10261,10211,10213,10215,10214],
	41818544 => [10216,10217,10225,10224,10226,10230,10254,10253,10232,10231,10256,10257,10258,10259,10255,10260,10227,10220,10221,10219,10218],
	41818546 => [10216,10217,10225,10224,10226,10230,10254,10253,10232,10231,10256,10257,10258,10259,10255,10260,10227,10220,10221,10219,10218],
	41818528 => [10207,10184,10183,10189,10197,10198,10199,10200,10202,10203,10205,10204,10206,10201,10193,10192,10190,10191,10195,10196,10194],
	41818535 => [10207,10184,10183,10189,10197,10198,10199,10200,10202,10203,10205,10204,10206,10201,10193,10192,10190,10191,10195,10196,10194],
	41818563 => [10207,10184,10183,10189,10197,10198,10199,10200,10202,10203,10205,10204,10206,10201,10193,10192,10190,10191,10195,10196,10194],
	41818532 => [10185,10186,10187,10188,10179,10178,10177,10173,10174,10175,10176,10172,10171,10180,10181,10182],
	41818537 => [10185,10186,10187,10188,10179,10178,10177,10173,10174,10175,10176,10172,10171,10180,10181,10182],
	41818555 => [10185,10186,10187,10188,10179,10178,10177,10173,10174,10175,10176,10172,10171,10180,10181,10182],
	41818558 => [10185,10186,10187,10188,10179,10178,10177,10173,10174,10175,10176,10172,10171,10180,10181,10182],
	41842858 => [10271,10272,10273,10274,10276,10277,10278,10279,10281,10282,10286,10287,10288,10283,10284,10285,10280,10275],
	41846856 => [5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5947,5946,5945,10476],
	41846853 => [5944,5942,5943,5941,5940,5939,5938,5937,5936,5935,5934,5933,5932,5931,5930,5929,5928,5927,5926,5925],
	41847162 => [10126,10127,10131,10128,10129,10130,10132,10133,10135,10140,10138,10141,10144,10145,10157,10146,10148,10150,10151,10149,10147,10143,10142,10139,10136,10137,10155,10134,10153,10152,10154],
	41847155 => [10126,10127,10131,10128,10129,10130,10132,10133,10135,10140,10138,10141,10144,10145,10157,10146,10148,10150,10151,10149,10147,10143,10142,10139,10136,10137,10155,10134,10153,10152,10154],
	41847159 => [10126,10127,10131,10128,10129,10130,10132,10133,10135,10140,10138,10141,10144,10145,10157,10146,10148,10150,10151,10149,10147,10143,10142,10139,10136,10137,10155,10134,10153,10152,10154],
	1083163 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083276 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083193 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083128 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083189 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083284 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083280 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083138 => [11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11845,11846,11849,11848,11847,12042,12043],
	1083227 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083237 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083177 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083148 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083249 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083113 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083144 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083288 => [11837,11838,11839,11840,11841,11844,11851,11852,11853,11854,11855,11856,11857,12014,12013,12012,11850,12022,12041],
	1083256 => [11858,11859,11860,11861,11863,11862,11864,11865],
	1083252 => [11858,11859,11860,11861,11863,11862,11864,11865],
	1083207 => [11858,11859,11860,11861,11863,11862,11864,11865],
	1083117 => [11858,11859,11860,11861,11863,11862,11864,11865],
	1083265 => [11858,11859,11860,11861,11863,11862,11864,11865],
	1083261 => [11858,11859,11860,11861,11863,11862,11864,11865],
	1083286 => [11858,11859,11860,11861,11863,11862,11864,11865],
	41847773 => [11866,11867,11868,11869,11871,11872,11880,11881,11888,11889,11890,11893,11870,11873,11874,11875,11883,11884,11885,11886,11887,11882,11891,11892,11876,11877,11878,11879],
	41847764 => [11866,11867,11868,11869,11871,11872,11880,11881,11888,11889,11890,11893,11870,11873,11874,11875,11883,11884,11885,11886,11887,11882,11891,11892,11876,11877,11878,11879],
	41847777 => [11866,11867,11868,11869,11871,11872,11880,11881,11888,11889,11890,11893,11870,11873,11874,11875,11883,11884,11885,11886,11887,11882,11891,11892,11876,11877,11878,11879],
	41847758 => [11866,11867,11868,11869,11871,11872,11880,11881,11888,11889,11890,11893,11870,11873,11874,11875,11883,11884,11885,11886,11887,11882,11891,11892,11876,11877,11878,11879],
	41848174 => [11894,11895,11897,11898,11899,11900,11896],
	41848178 => [11894,11895,11897,11898,11899,11900,11896],
	1083182 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083300 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083212 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083198 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083294 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083168 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083157 => [12040,12039,12035,12036,12032,12033,12034,12038,12037],
	1083172 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11989,11990,12045],
	1083140 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11989,11990,12045],
	1083159 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11989,11990,12045],
	1083133 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11989,11990,12045],
	1083203 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11989,11990,12045],
	1083122 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11988,11989,11990,12045],
	1083124 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11989,11990,12045],
	1083269 => [12026,12015,11936,12031,12030,12029,12028,12027,12025,12024,12023,12044,1452,11904,11903,11901,11941,11942,11943,11944,11945,11946,11947,11948,11985,11986,11987,11988,11989,11990,12045],
	1083232 => [12019,12020,12016,12017,12018,12021],
	1083153 => [12019,12020,12016,12017,12018,12021],
	1083245 => [12019,12020,12016,12017,12018,12021],
	1083271 => [12019,12020,12016,12017,12018,12021],
	1083221 => [12019,12020,12016,12017,12018,12021],
	1083290 => [12019,12020,12016,12017,12018,12021],
	1083187 => [12019,12020,12016,12017,12018,12021],
	41637400 => [11905,11906,11907,11908,1769,11935,11919,11920,11921,11922,11923,11924,11925,11934,11755,6409,11933,11930,11931,11932,11929,11926,11927,11928,11909,11910,11915,11911,11912,11913,11914,11918,11916,11917],
	41637397 => [11905,11906,11907,11908,1769,11935,11919,11920,11921,11922,11923,11924,11925,11934,11755,6409,11933,11930,11931,11932,11929,11926,11927,11928,11909,11910,11915,11911,11912,11913,11914,11918,11916,11917],
	41637395 => [11905,11906,11907,11908,1769,11935,11919,11920,11921,11922,11923,11924,11925,11934,11755,6409,11933,11930,11931,11932,11929,11926,11927,11928,11909,11910,11915,11911,11912,11913,11914,11918,11916,11917],
	41637406 => [627,628,13449,15597,13447,15570,15588,15579,15592,15573,15593,15594],
	41637404 => [627,628,13449,15597,13447,15570,15588,15579,15592,15573,15593,15594],
	41637389 => [627,628,13449,15597,13447,15570,15588,15579,15592,15573,15593,15594],
	41637402 => [11949,11976,11977,11978,11979,11980,11981,11982,11983,11984,11950,11951,11952,11953,11954,11955,11956,11957,11958,11962,11963,11965,11959,11960,11961],
	41637393 => [11949,11976,11977,11978,11979,11980,11981,11982,11983,11984,11950,11951,11952,11953,11954,11955,11956,11957,11958,11962,11963,11965,11959,11960,11961],
	41637391 => [11949,11976,11977,11978,11979,11980,11981,11982,11983,11984,11950,11951,11952,11953,11954,11955,11956,11957,11958,11962,11963,11965,11959,11960,11961],
	1083298 => [12046,12047,12048,12049,12050,12051,12052,12053,12055,12056,12057,12058,12059,12060,12063,12065,12061,12062,12064,12066,12068,12069,12072,12071,12070,12067,12073,12074,12075,12076,12077,12078,12079,12080,12081,12082,12083,12084,12085,12087,12086],
	1083217 => [12046,12047,12048,12049,12050,12051,12055,12063,12065,12061,12062,12064,12066,12072,12071,12070,12078,12079,12080,12084,12085,12087],
	1083241 => [12046,12047,12048,12049,12050,12051,12055,12063,12065,12061,12062,12064,12072,12071,12070,12078,12079,12080,12084,12085,12087],
	1083225 => [12046,12047,12048,12049,12050,12051,12055,12063,12065,12061,12062,12064,12072,12071,12070,12078,12079,12080,12084,12085,12087],
	1083309 => [12046,12047,12048,12049,12050,12051,12055,12065,12061,12062,12064,12072,12071,12070,12078,12079,12080,12084,12085,12087],
	1083324 => [12052,12053,12056,12057,12058,12059,12060,12068,12069,12067,12073,12074,12075,12076,12077,12081,12082,12083,12086],
	1083320 => [12052,12053,12056,12057,12058,12059,12060,12066,12068,12069,12067,12073,12074,12075,12076,12077,12081,12082,12083,12086],
	1083314 => [12052,12053,12056,12057,12058,12059,12060,12066,12068,12069,12067,12073,12074,12075,12076,12077,12081,12082,12083,12086],
	1083304 => [12052,12053,12056,12057,12058,12059,12060,12063,12066,12068,12069,12067,12073,12074,12075,12076,12077,12081,12082,12083,12086],
	41847750 => [11995,11996,11997,11998,11999,12000,12001,12008,12009,12010,12011,12002,12003,12005,12006,12007,12004],
	41847766 => [11995,11996,11997,11998,11999,12000,12001,12008,12009,12010,12011,12002,12003,12005,12006,12007,12004],
	41847762 => [11995,11996,11997,11998,11999,12000,12001,12008,12009,12010,12011,12002,12003,12005,12006,12007,12004],
	41847752 => [12977,13210,32618,32620,32621,32622,32623,32659,32652,32638,32631,32624,32630,32629,32628,32626,32625,32632,32636,32637,32644,32658,32665,32664,32660],
	41847775 => [12977,13210,32618,32620,32621,32622,32623,32659,32652,32638,32631,32624,32630,32629,32628,32626,32625,32632,32636,32637,32644,32658,32665,32664,32660],
	41847754 => [12977,13210,32618,32620,32621,32622,32623,32659,32652,32638,32631,32624,32630,32629,32628,32626,32625,32632,32636,32637,32644,32658,32665,32664,32660],
	41847760 => [12977,13210,32618,32620,32621,32622,32623,32659,32652,32638,32631,32624,32630,32629,32628,32626,32625,32632,32636,32637,32644,32658,32665,32664,32660],
	41847768 => [32619,32645,32627,32633,32634,32635,32651,32663,32662,32661,32653,32654,32655,32656,32657,32650,32649,32648,32647,32646,32639,32640,32641,32642,32643],
	41847756 => [32619,32645,32627,32633,32634,32635,32651,32663,32662,32661,32653,32654,32655,32656,32657,32650,32649,32648,32647,32646,32639,32640,32641,32642,32643],
	41847771 => [32619,32645,32627,32633,32634,32635,32651,32663,32662,32661,32653,32654,32655,32656,32657,32650,32649,32648,32647,32646,32639,32640,32641,32642,32643],
	41847779 => [32619,32645,32627,32633,32634,32635,32651,32663,32662,32661,32653,32654,32655,32656,32657,32650,32649,32648,32647,32646,32639,32640,32641,32642,32643],
	41846629 => [2838,2872,2871,2840,2839,2841,2842,2847,2845,2844,2843],
	41846635 => [2841,2842,2847,2845,2844,2843],
	41846639 => [2849,2850,2851,2852,2853,2854,2862,2863,2864,2869,2870],
	41846637 => [2855,2856,2858,2859,2860,2861,2857,2868,2867,2866,2865],
	76739 => [1414,1413,1412,1411,1410,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388],
	76751 => [1409,1408,1407,1406,1405,1404,1403,1402,1386,9374,9375,9376],
	76744 => [1385,1384,1383,1382,1381],
	76753 => [1380,1379,1378,1377,1376,1375,9336,9337,1374,1373,1372],
	41855428 => [9338,9339,9340,9341,9342,9343],
	41855422 => [9344,9345,9346,9347,9371,9352,9353,9354,9355,9350,9348,9349,9372,9373],
	41855426 => [9344,9345,9346,9347,9371,9352,9353,9354,9355,9350,9348,9349,9372,9373],
	41855424 => [9356,9357,9365,9364,9363,9362,9361,9360,9358,9359,9366,9367,9368,9369,9370],
	41850001 => [1370,1369,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356],
	41850007 => [1355,1354,1353,1352,1351,1350,1349,1348,1347,1346,1345],
	41850010 => [1344,9320,9321,9322,9323,9324,1343],
	41850004 => [1342,1341,1340,1339],
	41846466 => [5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5070,5071,5072,5073,5074,5075,5076,5077,5078,5080,5081,5082,5083,5084,5085,5086],
	41846469 => [5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5070,5071,5072,5073,5074,5075,5076,5077,5078,5080,5081,5082,5083,5084,5085,5086],
	41846471 => [5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5070,5071,5072,5073,5074,5075,5076,5077,5078,5080,5081,5082,5083,5084,5085,5086],
	41846464 => [5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5070,5071,5072,5073,5074,5075,5076,5077,5078,5080,5081,5082,5083,5084,5085,5086],
	76033 => [5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116],
	76036 => [5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116],
	76030 => [5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116],
	76028 => [5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116],
	41837147 => [5125,5127,5126,5204,5206,5208,5210,5211,5212,5214,5209],
	41837137 => [5125,5127,5126,5204,5206,5208,5210,5211,5212,5214,5209],
	41837139 => [5125,5127,5126,5204,5206,5208,5210,5211,5212,5214,5209],
	41837203 => [5128,5129,5131,5144,5146,5147,5145,5143,5135,5134,5136,5137,5142,5141,5140,5139,5138,5133,5132,5130],
	41837196 => [5128,5129,5131,5144,5146,5147,5145,5143,5135,5134,5136,5137,5142,5141,5140,5139,5138,5133,5132,5130],
	41837200 => [5128,5129,5131,5144,5146,5147,5145,5143,5135,5134,5136,5137,5142,5141,5140,5139,5138,5133,5132,5130],
	41837168 => [5207,5232,5234,5233,5235,5237,5239,5241,5242,5243,5245,5246,5244,5238,5240,5236],
	41837163 => [5207,5232,5234,5233,5235,5237,5239,5241,5242,5243,5245,5246,5244,5238,5240,5236],
	41837172 => [5207,5232,5234,5233,5235,5237,5239,5241,5242,5243,5245,5246,5244,5238,5240,5236],
	41842595 => [5213,1272,12998,12999,13000,13001,13002,13003,13004,12996,1271,153,12993,5266,5265],
	41842591 => [5213,1272,12998,12999,13000,13001,13002,13003,13004,12996,1271,153,12993,5266,5265],
	41842600 => [5213,1272,12998,12999,13000,13001,13002,13003,13004,12996,1271,153,12993,5266,5265],
	41842597 => [5213,1272,12998,12999,13000,13001,13002,13003,13004,12996,1271,153,12993,5266,5265],
	41837264 => [5215,5216,5217,5218,5219,5220,5221,5222,5223,5228,5229,5230,5231,5227,5226,5224],
	41837262 => [5215,5216,5217,5218,5219,5220,5221,5222,5223,5228,5229,5230,5231,5227,5226,5224],
	41837251 => [5215,5216,5217,5218,5219,5220,5221,5222,5223,5228,5229,5230,5231,5227,5226,5224],
	41837257 => [5215,5216,5217,5218,5219,5220,5221,5222,5223,5228,5229,5230,5231,5227,5226,5224],
	323475 => [5225,5247,5248,5249,5250,5252,5254,5255,5257,5674,5675,5676,5262,5263,5264,5261,5260,5259,5258,5256,5253],
	323481 => [5225,5247,5248,5249,5250,5252,5254,5255,5257,5674,5675,5676,5262,5263,5264,5261,5260,5259,5258,5256,5253],
	323477 => [5225,5247,5248,5249,5250,5252,5254,5255,5257,5674,5675,5676,5262,5263,5264,5261,5260,5259,5258,5256,5253],
	323483 => [5225,5247,5248,5249,5250,5252,5254,5255,5257,5674,5675,5676,5262,5263,5264,5261,5260,5259,5258,5256,5253],
	26219459 => [5251,5655,5649,5646,5644,5647,5650,5651,5673,5657,5658,5660,5661,5663,5664,5665,5667,5670,5669,5668,5666,5662,5659,5671,5672,5645,5648,5652,5653,5654,5656],
	41842589 => [5637,5636,5294,5292,5291,5290,5289,5288,5287,5293,5295,5296,5298,5322,5643,5642,5641,151,5639,5638,5635],
	41842624 => [5637,5636,5294,5292,5291,5290,5289,5288,5287,5293,5295,5296,5298,5322,5643,5642,5641,151,5639,5638,5635],
	41842622 => [5637,5636,5294,5292,5291,5290,5289,5288,5287,5293,5295,5296,5298,5322,5643,5642,5641,151,5639,5638,5635],
	41842626 => [5637,5636,5294,5292,5291,5290,5289,5288,5287,5293,5295,5296,5298,5322,5643,5642,5641,151,5639,5638,5635],
	41842618 => [5637,5636,5294,5292,5291,5290,5289,5288,5287,5293,5295,5296,5298,5322,5643,5642,5641,151,5639,5638,5635],
	41842608 => [5270,5272,5274,5285,5286,5275,5276,5278,5279,5280,5281,5282,5283,5284,5277,5271,5269,5273],
	41842615 => [5270,5272,5274,5285,5286,5275,5276,5278,5279,5280,5281,5282,5283,5284,5277,5271,5269,5273],
	41856656 => [5297,5321,5319,5320,5317,5318,5316,5315,13005,5299,5300,5301,5302,5303,5304,5311,5312,5313,5701,5702,5706,5705,5707,5708,5709,5698,5697,5310,5309,5308,5307,5306,5305,5699,5700,5314,5703,5704],
	323457 => [5323,5324,5389,5388,5387,5386,5384,5338,5337,5336,5335,5334,5333,5332,5330,5329,5328,5327,5326,5325,5385],
	323462 => [5323,5324,5389,5388,5387,5386,5384,5338,5337,5336,5335,5334,5333,5332,5330,5329,5328,5327,5326,5325,5385],
	323459 => [5323,5324,5389,5388,5387,5386,5384,5338,5337,5336,5335,5334,5333,5332,5330,5329,5328,5327,5326,5325,5385],
	323468 => [5323,5324,5389,5388,5387,5386,5384,5338,5337,5336,5335,5334,5333,5332,5330,5329,5328,5327,5326,5325,5385],
	323466 => [5323,5324,5389,5388,5387,5386,5384,5338,5337,5336,5335,5334,5333,5332,5330,5329,5328,5327,5326,5325,5385],
	323455 => [5331,5359,5357,5356,5355,5354,5353,5352,5351,5350,5349,5348,5347,5346,5344,5343,5342,5341,5340,5339,5345,5358,5381,5382,5383],
	323527 => [5331,5359,5357,5356,5355,5354,5353,5352,5351,5350,5349,5348,5347,5346,5344,5343,5342,5341,5340,5339,5345,5358,5381,5382,5383],
	323521 => [5331,5359,5357,5356,5355,5354,5353,5352,5351,5350,5349,5348,5347,5346,5344,5343,5342,5341,5340,5339,5345,5358,5381,5382,5383],
	323501 => [5331,5359,5357,5356,5355,5354,5353,5352,5351,5350,5349,5348,5347,5346,5344,5343,5342,5341,5340,5339,5345,5358,5381,5382,5383],
	323492 => [5331,5359,5357,5356,5355,5354,5353,5352,5351,5350,5349,5348,5347,5346,5344,5343,5342,5341,5340,5339,5345,5358,5381,5382,5383],
	41842459 => [5390,5393,5392,5394,5406,5405,5404,5403,5402,5401,5400,5399,5397,5409,5391],
	41842467 => [5411,5413,5417,13016,5418,13017,13018,5419,5420,13027,5421,5427,13019],
	41842453 => [5423,5424,5425,13024,5426,13025,13026,13028,5422,5428,5430,5431,5433,5432,13029,13030,5434],
	41842457 => [5423,5424,5425,13024,5426,13025,13026,13028,5422,5429,5436,5437,5438,5439,5435,5428,5430,5431,5433,5432,13029,13030,5434],
	41842463 => [5423,5424,5425,13024,5426,13025,13026,13028,5422,5429,5436,5440,5437,5438,5439,5435,5428,5430,5431,5433,5432,13029,13030,5434],
	41295724 => [31086,31087,31088,31089,31091,31094,31090,31095,31096,31099,31097,31093,31098,31092],
	41295719 => [31086,31087,31088,31089,31091,31094,31090,31095,31096,31099,31097,31093,31098,31092],
	41295703 => [31086,31087,31088,31089,31091,31094,31090,31095,31096,31099,31097,31093,31098,31092],
	41295706 => [31100,31104,31113,31112,31114,31115,31116,31117,31118,31119,31109,31110,31111,31108,31107,31106,31105,31101,31102,31103],
	41295709 => [31100,31104,31113,31112,31114,31115,31116,31117,31118,31119,31109,31110,31111,31108,31107,31106,31105,31101,31102,31103],
	41295714 => [31100,31104,31113,31112,31114,31115,31116,31117,31118,31119,31109,31110,31111,31108,31107,31106,31105,31101,31102,31103],
	41837225 => [5149,5150,5151,5152,5153,5155,5156,5157,5159,5160,5161,5162,5163,5164,5165,5166,5158,5154],
	41837230 => [5149,5150,5151,5152,5153,5155,5156,5157,5159,5160,5161,5162,5163,5164,5165,5166,5158,5154],
	41837223 => [5149,5150,5151,5152,5153,5155,5156,5157,5159,5160,5161,5162,5163,5164,5165,5166,5158,5154],
	41837228 => [5149,5150,5151,5152,5153,5155,5156,5157,5159,5160,5161,5162,5163,5164,5165,5166,5158,5154],
	41837237 => [5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5179,5181,5182,5183,5184,5185,5188,5187,5186,5177],
	41837232 => [5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5179,5181,5182,5183,5184,5185,5188,5187,5186,5177],
	41837235 => [5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5179,5181,5182,5183,5184,5185,5188,5187,5186,5177],
	41856936 => [5178,5202,5201,5200,5199,5198,5197,5196,5195,5194,5193,5192,5191,5190,5189,5180],
	41856941 => [5178,5202,5201,5200,5199,5198,5197,5196,5195,5194,5193,5192,5191,5190,5189,5180],
	41630982 => [4616,5443,5444,5445,5447,5448,5450,5449,5455,5451,5457,5454,5453,5446,5452,5456,5459,5460,5463,5461,5462,5464,5442,5458],
	41842001 => [5475,5476,5478,5479,5480,5481,5483,5486,5487,5488,5491,5492,5493,5482,5484,5477],
	41857001 => [5496,5497,5499,5500,5502,5503,5498,5501,5504,5505,5506,5508,5510,5511,5512,5514,5516,5517,5515,5542,5543,5544,5540,5513,5541,5509,5507],
	41857008 => [5506,5508,5510,5511,5512,5514,5516,5517,5515,5542,5543,5544,5545,5540,5513,5541,5509,5507],
	41841983 => [5519,5520,5522,5525,5523,5526,5538,5534,5537,14603,5532,5533,5536,5531,5530,5529,5528,5527,5521],
	41841926 => [5539,5553,5557,5558,5549,5552,5554,5555,14597,14607,14608,14609,14604,17079,17080,5547,5551,5548,5550,5535,5546,14610,14612,14611,14605,12258,14606,12257],
	41841924 => [5524,5562,5564,5566,5567,5569,5570,5571,5573,5575,5574,5572,14601,5568,5565,14598,14600,14599,5563],
	41846486 => [9033,9034,9052,9051,9053,9054,9042,9043,9044,9045,9046,9047,9048,9049,9050,9035,9036,9037,9038,9039,9040,9041],
	41846482 => [9033,9034,9052,9051,9053,9054,9042,9043,9044,9045,9046,9047,9048,9049,9050,9035,9036,9037,9038,9039,9040,9041],
	41846497 => [5069,5380,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5634,5633,5632,5631,5630,5629,5628,5627],
	41846493 => [5069,5380,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5634,5633,5632,5631,5630,5629,5628,5627],
	41846490 => [5069,5380,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5634,5633,5632,5631,5630,5629,5628,5627],
	41846495 => [5069,5380,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5634,5633,5632,5631,5630,5629,5628,5627],
	41846500 => [5069,5380,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5634,5633,5632,5631,5630,5629,5628,5627],
	41857415 => [5079,5360,5362,5364,5363,5361,5365,5367,5366],
	41857411 => [5368,5369,5370,5371,5373,5374,5375,5376,5378,5377,5372],
	41837280 => [1998,2005,1999,2000,2001,2002,2003,2006,2004,2021,2008,2007,2010,2009,12569,12570],
	41837277 => [1998,2005,1999,2000,2001,2002,2003,2006,2004,2021,2008,2007,2010,2009,12569,12570],
	41837275 => [1998,2005,1999,2000,2001,2002,2003,2006,2004,2021,2008,2007,2010,2009,12569,12570],
	41818628 => [2011,2012,2014,2015,2018,2020,2019,2016,2017,12575,12576,12577,12578,12581,12579,12580,2013],
	41818613 => [2011,2012,2014,2015,2018,2020,2019,2016,2017,12575,12576,12577,12578,12581,12579,12580,2013],
	41818624 => [2011,2012,2014,2015,2018,2020,2019,2016,2017,12575,12576,12577,12578,12581,12579,12580,2013],
	41818631 => [2011,2012,2014,2015,2018,2020,2019,2016,2017,12575,12576,12577,12578,12581,12579,12580,2013],
	41818618 => [18076,14719,14695,14694,14722,14723,14704,14696,14727,14699,14705],
	41818611 => [18076,14719,14695,14694,14722,14723,14704,14696,14727,14699,14705],
	57914 => [2022,2025,2026,2027,2030,2031,2032,2040,2039,2034,2033,2035,2036,2037,2038,2028,2029],
	57922 => [2022,2025,2026,2027,2030,2031,2032,2040,2039,2034,2033,2035,2036,2037,2038,2028,2029],
	57911 => [2022,2025,2026,2027,2030,2031,2032,2040,2039,2034,2033,2035,2036,2037,2038,2028,2029],
	57917 => [2052,2042,2023,2024,2041,2044,2045,2046,2047,12571,12572,12573,2048,2049,2050,2051,2043],
	57908 => [2052,2042,2023,2024,2041,2044,2045,2046,2047,12571,12572,12573,2048,2049,2050,2051,2043],
	57920 => [2052,2042,2023,2024,2041,2044,2045,2046,2047,12571,12572,12573,2048,2049,2050,2051,2043],
	25775924 => [2125,2127,2128,2129,2131,2132,2134,2133,2137,2135,2130,2126],
	25775927 => [2132,2134,2133,2137,2136,2138,12763,2139,2151,2148,2147,2152,2153,2141,2140,2143,2144,2146,2145,2142,2149,2135],
	25775933 => [2133,2137,2136,2138,12763,2139,2151,2148,2147,2152,2153,2141,2140,2143,2144,2146,2145,2142,2149,2135],
	25775929 => [2136,2138,12763,2139,2151,2148,2147,2152,2153,2141,2140,2143,2144,2146,2145,2142,2149],
	25775931 => [2139,2151,2148,2147,2152,2153,2141,2140,2143,2144,2146,2145,2142,2149],
	26684900 => [2154,2155,2156,2157,2158,2159,2161,2162,2160,2164,2163,2166,2167,2170,2172,12764,12766,12767,12765,2173,2174,2171,2168,2169,2165],
	26684896 => [2154,2155,2156,2157,2158,2159,2161,2162,2160,2164,2163,2166,2167,2170,2172,12764,12766,12767,12765,2173,2174,2171,2168,2169,2165],
	26684909 => [2154,2155,2156,2157,2158,2159,2161,2162,2160,2164,2163,2166,2167,2170,2172,12764,12766,12767,12765,2173,2174,2171,2168,2169,2165],
	26684905 => [2156,2157,2158,2159,2161,2162,2160,2164,2163,2166,2167,2170,2172,12764,12766,12767,12765,2173,2174,2171,2168,2169,2165],
	41857582 => [2181,2184,2185,2187,2188,2189,2190,2191,2192,2193,2195,2196,2194,2186,2182,2183,12768],
	41857585 => [2181,2184,2185,2187,2188,2189,2190,2191,2192,2193,2195,2196,2194,2186,2182,2183,12768],
	41857580 => [2181,2184,2185,2187,2188,2189,2190,2191,2192,2193,2195,2196,2194,2186,2182,2183,12768],
	41857622 => [2197,12769,12770,12771,12772,12773,2198,2199,2200,2202,2203,2204,2205,2208,2209,2210,2211,2212,2213,2214,12788,2215,2217,2218,2216,2206,2207,2201],
	41857607 => [2197,12769,12770,12771,12772,12773,2198,2199,2200,2202,2203,2204,2205,2208,2209,2210,2211,2212,2213,2214,12788,2215,2217,2218,2216,2206,2207,2201],
	41857609 => [2197,12769,12770,12771,12772,12773,2198,2199,2200,2202,2203,2204,2205,2208,2209,2210,2211,2212,2213,2214,12788,2215,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2216,2206,2207,2201],
	41857611 => [2197,12769,12770,12771,12772,12773,2198,2199,2200,2202,2203,2204,2205,2208,2206,2207,2201],
	41857650 => [12775,12776,12787,12785,12786,12784,12782,12783,12780,12779,12781,12778,12777],
	41857644 => [12775,12776,12787,12785,12786,12784,12782,12783,12780,12779,12781,12778,12777],
	41857603 => [2215,2217,2218,2219,2220,2221,2222,2223,2224,2225,2216],
	41857616 => [2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228],
	34660050 => [2066,2067,2085,2086,2082,2083,2084,12638,2075,2077,2078,2081,2079],
	34660038 => [12639,12640,12641,12658,12659,12657,12637,12629,12631,12630,12635,12636,12634],
	34660036 => [12639,12640,12641,12658,12659,12657,12637,12629,12631,12630,12635,12636,12634],
	34660030 => [2069,2070,2072,2074,12652,2076,2068,2073,2071,2080],
	34660052 => [12642,12643,12644,12645,12646,12647,12648,12649,12651],
	34660034 => [2087,2101,2102,2090,2091,2092,2093,2100,2089,2088],
	34660060 => [2087,2101,2102,2090,2091,2092,2093,2100,2089,2088],
	34660046 => [2087,2101,2102,2090,2091,2092,2093,2100,2089,2088],
	34660054 => [2106,2104,2105,2103,2107,2111,2108,2110,2109,2094,2095,2096,2099,2098],
	34660032 => [2107,2111,2108,2110,2109],
	34660058 => [2287,2299,2298,2297,2296,2295,2294,2290,2291,2292,2293,2289,2288],
	34660042 => [2094,2095,2096,2097,2099,2098],
	34660056 => [2094,2095,2096,2097,2099,2098],
	34660044 => [2094,2095,2096,2099,2098],
	26663619 => [7478,7479,7485,7481,7483,7484,7480],
	26663621 => [7481,7482,7486,24572,7487,24573,24574,19542,24560,24571,7488,7489,19261,19267,19268],
	26663626 => [7486,24572,7487,24573,24574,19542,24560,24571,7488,7489],
	26663624 => [7476,7475,7474,7471,7472,7470,7469,7468,7467,7465,7466,7464,7463,7459,7460,7461,7462,7477],
	41830507 => [7441,23259,7443,7442,7449,17327,7444,7445,7456,7453,7448,23267,7455,23262,23264,23260,23261,23263,7446,7451,7454,7452,17319,23265,23266,7450,7438,7457],
	41830513 => [7441,23259,7443,7442,7449,17327,7444,7445,7456,7453,7448,23267,7455,23262,23264,23260,23261,23263,7446,7451,7454,7452,17319,23265,23266,7450,7438,7457],
	61197 => [10606,10611,10612,10615,10616,10621,10620,10603,10602,10598,10599,10600,10604,10617,10618,10619,10601,10608,10609,10605,10597,10607,10613,10614],
	61201 => [10606,10611,10612,10615,10616,10621,10620,10603,10602,10598,10599,10600,10604,10617,10618,10619,10601,10608,10609,10605,10597,10607,10613,10614],
	41846259 => [3261,3262,3263],
	41846257 => [3261,3262,3263],
	41846244 => [3261,3262,3263],
	75992 => [3015,3018,3019,3024,3025,3016,3017,3020,3021,3022,3023],
	41857090 => [2934,2935,2936],
	41857093 => [2934,2935,2936],
	41857219 => [2974,2975,2976,15943,15944,2979,2980,2981,15942,15941,2987,2986,2985,2984,2983,2982,2978,2977],
	41857224 => [2974,2975,2976,15943,15944,2979,2980,2981,15942,15941,2987,2986,2985,2984,2983,2982,2978,2977],
	41857228 => [2974,2975,2976,15943,15944,2979,2980,2981,15942,15941,2987,2986,2985,2984,2983,2982,2978,2977],
	41857281 => [28817,28819,28828,28827,28826,28825,28822,28823,28824,28832,28830,28831,28833,28834,28837,28841,28842,28843,28840,28839,28838,28835,28836,28861,28862,28863,28829,28821,28820],
	41857271 => [28817,28819,28828,28827,28826,28825,28822,28823,28824,28832,28830,28831,28833,28834,28837,28841,28842,28843,28840,28839,28838,28835,28836,28861,28862,28863,28829,28821,28820],
	41857269 => [28817,28819,28828,28827,28826,28825,28822,28823,28824,28832,28830,28831,28833,28834,28837,28841,28842,28843,28840,28839,28838,28835,28836,28861,28862,28863,28829,28821,28820],
	41857264 => [28817,28819,28828,28827,28826,28825,28822,28823,28824,28832,28830,28831,28833,28834,28837,28841,28842,28843,28840,28839,28838,28835,28836,28861,28862,28863,28829,28821,28820],
	41857277 => [28844,28845,28849,28850,28848,28846,28847,28851,28852,28853,28855,28854,28856,28858,28859,28860,28857],
	41857274 => [28844,28845,28849,28850,28848,28846,28847,28851,28852,28853,28855,28854,28856,28858,28859,28860,28857],
	41857267 => [28844,28845,28849,28850,28848,28846,28847,28851,28852,28853,28855,28854,28856,28858,28859,28860,28857],
	41857261 => [28844,28845,28849,28850,28848,28846,28847,28851,28852,28853,28855,28854,28856,28858,28859,28860,28857],
	10912072 => [4342,8023,8024,8025,8026,8027,8028,8030,8029,4343],
	10912064 => [4342,8023,8024,8025,8026,8027,8028,8030,8029,4343],
	10912066 => [8023,8024,8025,8026,8027,8037,8038,8039,8040,8041,8044,8043,8042,8028,8030,8029,4343],
	10912078 => [8037,8038,8039,8040,8041,8044,8043,8042],
	10912076 => [8037,8038,8039,8040,8041,8044,8043,8042],
	10912074 => [8031,8035,8034,8033,8032],
	10912101 => [8046,8047,8056,8048,8049,8050,8051,8052,8053,8054,8055],
	10912107 => [8046,8047,8056,8048,8049,8050,8051,8052,8053,8054,8055,8064,8063,8062,8061,8060,8059,8058,8057],
	10912099 => [8063,8062,8061,8060,8059,8058],
	41836567 => [6385,6387,6393,6392,6391,6390,6389,6386,6388,6394],
	41836560 => [6385,6387,6393,6392,6391,6390,6389,6386,6388,6394],
	41836553 => [6395,6396,6400,6399,6401,6403,6404,6402,6398,6397],
	41836565 => [6395,6396,6400,6399,6401,6403,6404,6402,6398,6397],
	41860662 => [15541,16716,16717,16718,16719,16720,16721,16722,16723,16733,16734,16735,16736,16737,16738,16739,16740,16741,16742,16743,16744,16745],
	41860148 => [4794,4869,4870,4871,4872,4873,4874,4875,4876,4878,4879,4880,4881,4883,4897,4896,4895,4894,4893,4892],
	41860158 => [4882,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4889,4891,4890,4888,4887,4886,4885,4884,4877],
	41860150 => [4908,4913,4914,4912,4910,4911,4909,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925],
	41860152 => [4908,4913,4914,4912,4910,4911,4909,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925],
	41860154 => [4926,4927,4929,4930,4931,4932,4933,4935,4938,4940,4941,4942,4943,4939,4934,4936,4937,4928],
	41860156 => [4926,4927,4929,4930,4931,4932,4933,4935,4938,4940,4941,4942,4943,4939,4934,4936,4937,4928],
	383247 => [4723,10785,4724,4725,4726,4728,4729,4730,4732,4733],
	383220 => [4723,10785,4724,4725,4726,4728,4729,4730,4732,4733,10791,4734],
	383236 => [4723,10785,4724,4725,4726,4728,4729,4730,4732,4733,10791,4734,4731,10789,10788,4782,4781,10786,10787,4780,4779,4778,4777,4727],
	383251 => [4735,4736,4737,4738,4739,4740,4741,4758,4760,4761,4762,4763,4765,4767,4768,4742,10792,10793,4766],
	383231 => [4735,4736,4737,4738,4739,4740,4741,4758,4760,4761,4762,4763,4765,4767,4768,4742,10792,10793,4766],
	383241 => [4735,4736,4737,4738,4739,4740,4741,4743,10794,4758,4760,4761,4762,4763,4765,4767,4768,4742,10792,10793,4759,10806,4773,4774,4776,4772,4770,4771,4769,4775,4764,4766],
	383225 => [4743,10794,10796,10797,4744,4745,4746,4747,10799,4748,4749,10800,10801,10802,4750,10803,10804,10805,4752,4753,4754,4755,4756,4757,4751,10795,10798],
	383249 => [4750,10803,10804,10805,4752,4753,4754,4755,4756,4751],
	584893 => [4714,4803,4802,4804,4805,4864,4865,4866,4868,4800,4798,4799,4806,10754,10767,10766,4807],
	584885 => [4714,4803,4802,4804,4805,4864,4863,4865,4866,4868,4800,4798,4799,4806,10754,10767,10766,4807],
	584907 => [4863,4867,4857,4856,4855,4854,4853,4852,4850,4849,10763,4859,4861,4862,4858,4860,4851],
	584883 => [4867,4857,4856,4855,4854,4853,4852,4850,4849,10763,4859,4861,4862,4858,4860,4851,4848,4839,4832],
	584887 => [4831,4833,4834,4836,4835,4837,4838,4830,4825,4824,10768,10769,10770,4823,10771,4822,4821,10779,4826,4827,4828,4829],
	584902 => [4831,4833,4834,4836,4835,4837,4838,4830,4825,4824,10768,10769,10770,4823,10771,4822,4821,10779,4826,4827,4828,4829],
	584897 => [4820,10776,10778,10777,4814,4813,4812,4808,4809,10773,4810,4811,4816,4817,4818,10772,4819,4801,4815,10774,10775],
	584910 => [4820,10776,10778,10777,4814,4813,4812,4808,4809,10773,4810,4811,4816,4817,4818,10772,4819,4801,4815,10774,10775],
	584895 => [4840,4842,4844,4845,4846,4847,4843,4841],
	902823 => [4997,4998,4999,5000,5014,5013,5012,5010,5011,5008,5006,5004,5005,5003,5001,5002,5015,5007],
	902753 => [4997,4998,4999,5000,5014,5013,5012,5010,5011,5008,5006,5004,5005,5003,5001,5002,5015,5007],
	902825 => [4997,4998,4999,5000,5014,5013,5012,5010,5011,5008,5006,5004,5005,9929,5003,5001,5002,5015,5007],
	902802 => [5009,5016,5030,5031,5018,5017,5019,5021,5020,5022,5028,5029,5035,5026,5023,5025,5024,5027,5034,5033,5032],
	902760 => [5009,5016,5030,5031,5018,5017,5019,5021,5020,5022,5028,5029,5035,5026,5023,5025,5024,5027,5034,5033,5032],
	902837 => [5009,5016,5030,5031,5018,5017,5019,5021,5020,5022,5028,5029,5035,5026,5023,5025,5024,5027,5034,5033,5032],
	902785 => [5009,5016,5030,5031,5018,5017,5019,5021,5020,5022,5028,5029,5035,5026,5023,5025,5024,5027,5034,5033,5032],
	902776 => [5009,5016,5030,5031,5018,5017,5019,5021,5020,5022,5028,5029,5035,5026,5023,5025,5024,5027,5034,5033,5032],
	902781 => [5016,5030,5031,5021,5020,5022,5028,5029,5035,5034,5033,5032],
	902746 => [9932,9933,9934,9935,9939,9936,9937,9938,9940,9941,9942,9943,9944,9945,9946,9947],
	902783 => [9932,9933,9934,9935,9939,9936,9937,9938,9940,9941,9942,9943,9944,9945,9946,9947],
	902764 => [9932,9933,9934,9935,9939,9936,9937,9938,9940,9941,9942,9943,9944,9945,9946,9947],
	902830 => [9932,9933,9934,9935,9939,9936,9937,9938,9940,9941,9942,9943,9944,9945,9946,9947],
	902806 => [9932,9933,9934,9935,9939,9936,9937,9938,9940,9941,9942,9943,9944,9945,9946,9947],
	902762 => [9932,9933,9934,9935,9939,9936,9937,9938,9940,9941,9942,9943,9944,9945,9946,9947],
	902800 => [9948,9949,9950,9951,9969,9952,9954,9953,9955,9956,9957,9971,9970],
	902821 => [9948,9949,9950,9951,9969,9968,9952,9954,9953,9955,9956,9957,9958,9967,9973,9972,9974,9975,9976,9977,9979,9978,9971,9970],
	902755 => [9948,9949,9950,9951,9969,9968,9952,9954,9953,9955,9956,9957,9958,9967,9980,9972,9974,9971,9970],
	902790 => [9948,9949,9950,9951,9969,9968,9952,9954,9953,9955,9956,9957,9958,9959,9931,9960,9961,9962,9963,9964,9965,9966,9967,9980,9973,9972,9974,9975,9976,9977,9979,9978,9981,9982,9983,9984,9971,9970],
	902771 => [9948,9949,9950,9951,9969,9968,9952,9954,9953,9955,9956,9957,9958,9967,9980,9972,9974,9971,9970],
	902795 => [9948,9949,9950,9951,9969,9968,9952,9954,9953,9955,9956,9957,9958,9967,9980,9972,9974,9971,9970],
	902769 => [9959,9931,9960,9961,9962,9963,9964,9965,9966],
	902804 => [9959,9931,9960,9961,9962,9963,9964,9965,9966],
	902816 => [9959,9931,9960,9961,9962,9963,9964,9965,9966,9973,9975,9976,9977,9979,9978,9981,9982,9983,9984],
	902811 => [9959,9931,9960,9961,9962,9963,9964,9965,9966,9973,9975,9976,9977,9979,9978,9981,9982,9983,9984],
	902748 => [9959,9931,9960,9961,9962,9963,9964,9965,9966,9973,9975,9976,9977,9979,9978,9981,9982,9983,9984],
	552222 => [9992,9996,9997,9998,10005,10003,10004,10006,10007,10002,10001,9999,9993,9994,9995],
	552233 => [9997,9998,10005,10003,10004,10002,10001,9999],
	552238 => [10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10022,10021,10023,10024],
	552228 => [10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10022,10021,10023,10024],
	552204 => [10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10022,10021,10023,10024],
	552211 => [10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10022,10021,10023,10024],
	552230 => [10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10022,10021,10023,10024],
	552224 => [10043,10039,10038,10036,10035,10047,10048,10042,10041,10040,10046,10044,10045,10037],
	552219 => [10043,10039,10038,10036,10035,10047,10048,10042,10041,10040,10046,10044,10045,10037],
	552235 => [10043,10039,10038,10036,10035,10047,10048,10042,10041,10040,10046,10044,10045,10037],
	552202 => [10043,10039,10038,10036,10035,10047,10048,10042,10041,10040,10046,10044,10045,10037],
	552209 => [10028,10029,10031,10030,10034,10027,10033,10032,10025,10026],
	552226 => [10028,10029,10031,10030,10034,10027,10033,10032,10025,10026],
	552216 => [10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10061,10062,10060],
	552213 => [10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10061,10062,10060],
	552207 => [10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10061,10062,10060],
	327776 => [1833,1832,1831,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1819,1818,1817,9893,1816,1815],
	327767 => [1833,1832,1831,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830],
	327739 => [1819,1818,1817,9893,1816,1815,1814,1813,1812,1811,1810,1809,13224,14664,9895,13481,14665],
	327765 => [1814,1813,1812,1811,1810,1809,1808,1807,1806,9896,1805,1804,1803,1802,13224,14664,9895,13481,14665],
	327751 => [1814,1813,1812,1811,1810,1809,1808,1807,1806,9896,1805,1804,1803,1802,13224,14664,9895,13481,14665],
	327761 => [1801,1800,1799,1797,1796,1795,1798,1782,1783,1784,1793,1794],
	327756 => [1801,1800,1799,1797,1796,1795,1798,1782,1783,1784,1793,1794],
	327784 => [1801,1800,1799,1797,1796,1795,1798,1782,1783,1784,1793,1794,1785,1786,1792,1791,9919,1787,1788,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9918,9917,9916,1789,1790],
	327763 => [1785,1786,1792,1791,9919,1787,1788,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,1789,1790],
	327769 => [1785,1786,1792,1791,9919,1787,1788,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9918,9917,9916,1789,1790],
	327774 => [1785,1786,1792,1791,9919,1787,1788,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,1789,1790],
	41872462 => [6136,6137,6140,6144,6145,6148,6147,6146,6143,6142,6139,6138,6149,6151,6150,6141],
	41872460 => [6136,6137,6140,6144,6145,6148,6147,6146,6143,6142,6139,6138,6149,6151,6150,6141],
	41881129 => [6152,6156,6166,6157,6165,6167,6168,6169,6170,6172,6162,6163,6161,6160,6164,6159,6158,6153,6154,6155,6174,6171],
	41881108 => [6152,6156,6166,6157,6165,6167,6168,6169,6170,6172,6162,6163,6161,6160,6164,6159,6158,6153,6154,6155,6174,6171],
	41881125 => [6152,6156,6166,6157,6165,6167,6168,6169,6170,6172,6162,6163,6161,6160,6164,6159,6158,6153,6154,6155,6174,6171,6175,6183,6184,6185,6186,6187,6188,6189,6181,6182,6190,6176,6178,6179,6180,17794,6177],
	41881103 => [6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6221,6222,6223,6224,6225,6226,6229,6230,6231,6233,6234,6235,6232,6248,6249,6250,6252,6253,6254,6251],
	41881116 => [6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6221,6222,6223,6224,6225,6226,6229,6230,6231,6233,6234,6235,6232,6248,6249,6250,6252,6253,6254,6251],
	41881111 => [6201,6202,6203,6204,6205,6206,6208,6209,6210,6207,6211,6212,6213,6214,6215,6216,6218,6219,6220,6217,6247],
	41881097 => [6201,6202,6203,6204,6205,6206,6208,6209,6210,6207,6211,6212,6213,6214,6215,6216,6218,6219,6220,6217],
	41881121 => [6247],
	41882740 => [25497],
	41882738 => [25497],
	26663631 => [19261,19267,19266,19265,19268,19262,19263,19264,22446,19269,19271,19274,19272,19273,22445,19270],
	41883427 => [34279,34280,34281,34282,34283,34284,34285,34294,34297,34296,34295,34298,34299,34289,34288,34286],
	41883421 => [34279,34280,34281,34282,34283,34284,34285,34294,34297,34296,34295,34298,34299,34289,34288,34286],
	41883424 => [34362,34380,34381,34379,34378,34377,34376,34375,34364,34365,34370,34371,34372,34373,34369,34367,34368,34374,34366,34363],
	41883419 => [34362,34380,34381,34379,34378,34377,34376,34375,34364,34365,34370,34371,34372,34373,34369,34367,34368,34374,34366,34363],
	41883417 => [34362,34380,34381,34379,34378,34377,34376,34375,34364,34365,34370,34371,34372,34373,34369,34367,34368,34374,34366,34363],
	41883415 => [34362,34380,34381,34379,34378,34377,34376,34375,34364,34365,34370,34371,34372,34373,34369,34367,34368,34374,34366,34363],
	41883410 => [34287,34290,34291,34292,34293,34313,34312,34311,34310,34309,34308,34307,34306,34305,34304,34303,34302,34301,34300,34314],
	41883413 => [34287,34290,34291,34292,34293,34313,34312,34311,34310,34309,34308,34307,34306,34305,34304,34303,34302,34301,34300,34314],
	41883406 => [34315,34316,34317,34318,34321,34322,34323,34325,34324,34326,34327,34328,34329,34331,34332,34333,34334,34335,34336,34330,34319,34320],
	41883408 => [34315,34316,34317,34318,34321,34322,34323,34325,34324,34326,34327,34328,34329,34331,34332,34333,34334,34335,34336,34330,34319,34320],
	41883404 => [34337,34338,34341,34342,34339,34340,34343,34344,34345,34353,34358,34359,34361,34360,34357,34356,34355,34354,34346,34348,34350,34349,34347,34352,34351],
	41883400 => [34337,34338,34341,34342,34339,34340,34343,34344,34345,34353,34358,34359,34361,34360,34357,34356,34355,34354,34346,34348,34350,34349,34347,34352,34351],
	41883395 => [34337,34338,34341,34342,34339,34340,34343,34344,34345,34353,34358,34359,34361,34360,34357,34356,34355,34354,34346,34348,34350,34349,34347,34352,34351],
	41883390 => [34337,34338,34341,34342,34339,34340,34343,34344,34345,34353,34358,34359,34361,34360,34357,34356,34355,34354,34346,34348,34350,34349,34347,34352,34351],
	41837597 => [4969,4970,4971,4972,4973,4974,4975,4976,4978,4977,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988],
	41837592 => [4969,4970,4971,4972,4973,4974,4975,4976,4978,4977,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988],
	2119016 => [30816,30818,30819,30820,30821,30822,30824,30825,30831,30826,30830,30829,30828,30827,30823],
	2119019 => [30816,30818,30819,30820,30821,30822,30824,30825,30831,30826,30830,30829,30828,30827,30823],
	2119023 => [30832,30837,30838,30840,30841,30842,30844,30845,30850,30846,30847,30849,30836,30834,30835,30833,30839,30843,30848],
	2119014 => [30832,30837,30838,30840,30841,30842,30844,30845,30850,30846,30847,30849,30836,30834,30835,30833,30839,30843,30848],
	2119033 => [30851,30852,30853,30854,30855,30868,30856,30858,30859,30857,30860,30862,30863,30865,30867,30866,30861,30864],
	2119029 => [30851,30852,30853,30854,30855,30868,30856,30858,30859,30857,30860,30862,30863,30865,30867,30866,30861,30864],
	2119027 => [30851,30852,30853,30854,30855,30868,30856,30858,30859,30857,30860,30862,30863,30865,30867,30866,30861,30864],
	41884331 => [7874,7881,7880,7875,7876,7877,7879,7885,7884,7883,7882,7886,7887,7888,7878,7889],
	41818665 => [29170,29177,29179,29180,29182,29183,29181,29178,29171,29172,29173,29174,29175,29184,29185,29186,29176],
	41818657 => [29170,29177,29179,29180,29182,29183,29181,29178,29171,29172,29173,29174,29175,29184,29185,29186,29176],
	41818663 => [29170,29177,29179,29180,29182,29183,29181,29178,29171,29172,29173,29174,29175,29184,29185,29186,29176],
	41850160 => [86,9830,9831,9832,9840,87,88,89,9850,9841,9842,9843,9844,9849,94,95,9847,9846,9845,9837,9838,9848,9839,9860,9859,9861,9858,9833,9834,9835,9836,93,92,91,90],
	41850171 => [86,9830,9831,9832,9840,87,88,89,9850,9841,9842,9843,9844,9849,94,95,9847,9846,9845,9837,9838,9848,9839,9860,9859,9861,9858,9833,9834,9835,9836,93,92,91,90],
	41850183 => [86,9830,9831,9832,9840,87,88,89,9850,9841,9842,9843,9844,9849,94,95,9847,9846,9845,9837,9838,9848,9839,9860,9859,9861,9858,9833,9834,9835,9836,93,92,91,90],
	41850179 => [96,97,98,99,100,101,102,103,104,190,189,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,9857,9855,9854,9853,9852,9851,9863,9864,9865,9856,9873],
	41850162 => [96,97,98,99,100,101,102,103,104,190,189,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,9857,9855,9854,9853,9852,9851,9863,9864,9865,9856,9873],
	41850169 => [96,97,98,99,100,101,102,103,104,190,189,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,9857,9855,9854,9853,9852,9851,9863,9864,9865,9856,9873],
	41850175 => [96,97,98,99,100,101,102,103,104,190,189,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,9857,9855,9854,9853,9852,9851,9863,9864,9865,9856,9873],
	41850181 => [96,97,98,99,100,101,102,103,104,190,189,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,9857,9855,9854,9853,9852,9851,9863,9864,9865,9856,9873],
	41850158 => [96,97,98,99,100,101,102,103,104,190,189,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,9857,9855,9854,9853,9852,9851,9863,9864,9865,9856,9873],
	41850173 => [1617,9869,9870,9871,9872,9868,9867,9866,1614,1613,1612,1611,1610,1609,1615,1616,105,106,107,108,109,1778],
	41850167 => [1617,9869,9870,9871,9872,9868,9867,9866,1614,1613,1612,1611,1610,1609,1615,1616,105,106,107,108,109,1778],
	41850177 => [1617,9869,9870,9871,9872,9868,9867,9866,1614,1613,1612,1611,1610,1609,1615,1616,105,106,107,108,109,1778],
	41850165 => [1617,9869,9870,9871,9872,9868,9867,9866,1614,1613,1612,1611,1610,1609,1615,1616,105,106,107,108,109,1778],
	41881036 => [3980,3986,3987,3988,4573,4572,9881,4563,4601,9878,4004,4003,3985,3989,3990,3991,3992,3984,3983,3982,3981],
	41881038 => [3980,3986,3987,3988,4573,4572,9881,4563,4601,4602,9878,4004,4003,4007,3985,3989,3990,3991,3992,9874,3984,3983,3982,3981],
	41881019 => [3980,3986,3987,3988,4573,4572,9881,4563,4601,4602,9878,4004,4003,4007,3985,3989,3990,3991,3992,9874,3984,3983,3982,3981],
	41881027 => [4582,4581,4574,4562,4602,17008,4603,4007,4008,9874,3993,4571,4570,4005,9882],
	41881034 => [4582,4581,4600,4575,4574,4562,17008,4603,4008,4002,9876,3995,3993,4571,4570,4561,4005,4006,9882],
	41881021 => [4582,4581,4600,4575,4574,4562,17008,4603,4008,4002,9876,3995,3993,4571,4570,4561,4005,4006,9882],
	41881025 => [4581,4600,4575,4574,4562,17008,4603,4008,4002,9876,3995,3993,4570,4561,4005,4006],
	41881040 => [4580,4579,4578,24211,4577,4576,4001,4000,3998,3999,3997,4568,4567,4566,9879,4565,4609,4607,4606,4608,4605],
	41881032 => [4580,4579,4578,24211,4577,4576,4001,4000,3998,3999,3997,4568,4567,4566,9879,4565,4609,4607,4606,4608,4605],
	41881030 => [4580,4579,4578,24211,4577,4576,4001,4000,3998,3999,3997,4568,4567,4566,9879,4565,4609,4607,4606,4608,4605],
	41881023 => [4580,4579,4578,24211,4577,4576,4001,4000,3998,3999,3997,4568,4567,4566,9879,4565,4609,4607,4606,4608,4605],
	41884758 => [110,145,144,143,142,114,113,112,111,16774,16773,16772,16771,16770,16769,16768,16767,16766,16764,16781,16783,16784,16782,16788,16791,16790,16789],
	41884790 => [110,145,144,143,142,114,113,112,111,16774,16773,16772,16771,16770,16769,16768,16767,16766,16764,16755,16781,16783,16784,16782,16788,16791,16790,16789],
	41884733 => [110,145,144,143,142,115,114,113,112,111,16774,16773,16772,16771,16770,16769,16768,16767,16766,16764,16755,16781,16783,16784,16782,16788,16791,16790,16789],
	41884778 => [141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115],
	41884746 => [141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115],
	41884782 => [141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116],
	41884770 => [16751,16752,16753,16760,16757,16754,16756,16758,16763,16777,16780,16779,16778,16775,16776,16762,16761,16759,16765,16755,16785,16786,16787],
	41884753 => [16751,16752,16753,16760,16757,16754,16756,16758,16763,16777,16780,16779,16778,16775,16776,16762,16761,16759,16765,16785,16786,16787],
	41884742 => [16751,16752,16753,16760,16757,16754,16756,16758,16763,16777,16780,16779,16778,16775,16776,16762,16761,16759,16765,16785,16786,16787],
	41846565 => [1633,1634,1635,1636,1637,1638,1639,1640,1641,1646,1645,1703,1702,1701,1642,1644,1643,1647],
	41846582 => [1633,1634,1635,1636,1637,1638,1639,1640,1641,1646,1645,1703,1702,1701,1642,1644,1643,1647],
	41846571 => [1697,1689,1690,1691,1692,1693,1694,1695,1696,1688,1671,1673,1681,1674,1675,1676,1682,1683,1684,1685,1686,1680,1679,1678,1677,1650],
	41846569 => [1652,1672,1670,1671,1673,1681,1674,1675,1676,1680,1679,1678,1677,1669,1667,1666,1668,1660,1661,1662,1663,1664,1651,1687,1650,1657,1658,17046,1659,1665],
	41846575 => [1652,1671,1673,1681,1674,1675,1676,1680,1679,1678,1677,1651,1687,1650],
	41846577 => [1652,1672,1670,1669,1667,1666,1668,1660,1661,1662,1663,1664,1651,1687,1649,1653,1654,1655,1656,1657,1658,17046,1659,1665],
	41846584 => [1672,1666,1668,1660,1661,1662,1663,1664,1649,1653,1654,1655,1656,1657,1658,17046,1659,1665],
	76190 => [560,561,625,9692,9693,9695,9694,9704,9706,9707,9705,9696,9697,9698,9699,9700,9701,9702,9703,562,563,564,565,575,576,566,567,568,569,570,574],
	76173 => [560,561,625,9692,9693,9695,9694,9704,9706,9707,9705,9696,9697,9698,9699,9700,9701,9702,9703,562,563,564,565,575,576,566,567,568,569,570,574],
	76175 => [560,561,625,9692,9693,9695,9694,9704,9706,9707,9705,9696,9697,9698,9699,9700,9701,9702,9703,562,563,564,565,575,576,566,567,568,569,570],
	76192 => [574,571,572,577,584,583,582,581,580,579,578,585,586,588,589,590,591,593,592,587,573],
	76199 => [571,572,577,584,583,582,581,580,579,578,585,586,588,589,590,591,593,592,587,573],
	76167 => [571,572,577,584,583,582,581,580,579,578,585,586,588,589,590,591,593,592,587,573],
	76197 => [9709,9710,9711,9712,9713,18845,9714,9715,9718,9719,9720,9716,9717,9721,9708],
	76186 => [9709,9710,9711,9712,9713,18845,9714,9715,9718,9719,9720,9716,9717,9721,9708],
	41885372 => [9829,9827,9826,9820,9819,9818,9817,9816,9802,9801,9805,9821,9822,9824,9809,9808,9807,9806,9800],
	41885369 => [9829,9827,9826,9820,9819,9818,9817,9816,9815,9802,9801,9805,9821,9822,9823,9824,9825,9810,9809,9808,9807,9806,9768,9799,9800],
	41885383 => [9807,9775,9774,9773,9789,9772,9771,9768,9799,9788,9800,9778,9777,9776,9798,9797,9796],
	41885374 => [9775,9774,9773,9789,9772,9771,9784,9768,9799,9788,9770,9783,9794,9780,9779,9778,9777,9776,9798,9797,9796],
	41885378 => [9775,9774,9773,9789,9772,9771,9784,9769,9788,9770,9783,9781,9782,9791,9792,9793,9794,9780,9779,9778,9777,9776,9798,9797,9796],
	41885381 => [9784,9769,9785,9786,9787,9770,9783,9781,9782,9790,9791,9792,9793,9794,9780,9779,9795],
	41885849 => [2232,2233,2234,2236,2237,2238,2239,2240,2242,2241,2243,2244,2247,2248,2249,2250,2251,2252,2259,2253,2254,2258,2256,2257,2255,2245,2246,2235],
	41885851 => [2232,2233,2234,2236,2237,2238,2239,2240,2242,2241,2243,2244,2247,2248,2249,2250,2251,2252,2259,2253,2254,2258,2256,2257,2255,2245,2246,2235],
	41885845 => [2234,2236,2237,2238,2239,2240,2242,2241,2243,2244,2247,2248,2249,2245,2246,2235],
	41885847 => [2251,2252,2259,2253,2254,2258,2256,2257,2255],
	41836745 => [12593,12598,12599,12600,12601,12602,12592,14710,12594,12595,12596,12597],
	41837326 => [1725,1726,1727,1728,1729,1730,1731,1734,1735,1736,1738,1739,1737,1741,1742,1743,1744,1745,1746,1747,1748,1749,1751,1750,1732,1733,1760,1761,1762,1763,1764,1765,1766],
	41837328 => [1725,1726,1727,1728,1729,1730,1731,1734,1735,1736,1738,1739,1737,1741,1742,1732,1733,1760,1761,1762,1763,1764],
	41837322 => [1725,1726,1727,1728,1729,1730,1731,1734,1735,1736,1738,1739,1737,1741,1742,1732,1733,1760,1761,1762,1763,1764],
	41837319 => [1740,1758,1759,1757,1755,1756,1754,1752,1753,9691],
	41837330 => [1740,1743,1744,1745,1746,1747,1748,1749,1758,1759,1757,1755,1756,1754,1752,1753,1751,1750,1765,1766],
	41837324 => [1740,1743,1744,1745,1746,1747,1748,1749,1758,1759,1757,1755,1756,1754,1752,1753,1751,1750,1765,1766],
	41837332 => [9691],
	41892169 => [11485,11487,11488,11489,11490,11491,11486],
	41892157 => [11485,11487,11488,11489,11490,11491,11486],
	41892154 => [11492,11515,11516,11518,11526,11527,11528,11529,11519,11521,11523,11524,11525,11522,11520,11517,11493,11494,11497,11496,11498,11495],
	41892151 => [11492,11515,11516,11518,11526,11527,11528,11529,11519,11521,11523,11524,11525,11522,11520,11517,11493,11494,11497,11496,11498,11495],
	41892166 => [11492,11515,11516,11518,11526,11527,11528,11529,11519,11521,11523,11524,11525,11522,11520,11517,11493,11494,11497,11496,11498,11495],
	41892163 => [11499,11500,11501,11503,11504,11507,11509,11510,11511,11512,11513,11508,11505,11506,11502],
	41892160 => [11499,11500,11501,11503,11504,11507,11509,11510,11511,11512,11513,11508,11505,11506,11502],
	41860302 => [11531,11593,11594,11595,11600,11599,11601,11610,11602,11603,11604,11605,11606,11607,11608,11609,11596,11598,11597],
	41860298 => [11531,11593,11594,11595,11600,11599,11601,11610,11602,11603,11604,11605,11606,11607,11608,11609,11596,11598,11597],
	41860323 => [11532,11552,11551,11550,11549,11548,11547,11546,11545,11544,11543,11542,11541,11540,11539,11538,11537,11536,11535,11534,11533,11554,11553,11555,11556],
	41860308 => [11532,11552,11551,11550,11549,11548,11547,11546,11545,11544,11543,11542,11541,11540,11539,11538,11537,11536,11535,11534,11533,11554,11553,11555,11556],
	41860321 => [11532,11552,11551,11550,11549,11548,11547,11546,11545,11544,11543,11542,11541,11540,11539,11538,11537,11536,11535,11534,11533,11554,11553,11555,11556],
	69215 => [11611,11612,11617,11618,11619,11620,11625,11626,11627,11628,11629,11623,11624,11613,11614,11616,11615,11622,11621,11645],
	69223 => [11611,11612,11617,11618,11619,11620,11625,11626,11627,11628,11629,11623,11624,11613,11614,11616,11615,11622,11621,11645],
	41892338 => [11679,11680,11681,11682,11683,11684,11685,11691,11692,11693,11696,11694,11710,11709,11708,11707,11706],
	41892310 => [11679,11680,11681,11682,11683,11684,11685,11691,11692,11693,11696,11694,11710,11709,11708,11707,11706],
	41892323 => [11679,11680,11681,11682,11683,11684,11685,11691,11692,11693,11696,11694,11710,11709,11708,11707,11706],
	41892326 => [11695,11705,11704,11703,11702,11701,11700,11699,11698,11697,11711,11712,11713,11714,11715],
	41892321 => [11695,11705,11704,11703,11702,11701,11700,11699,11698,11697,11711,11712,11713,11714,11715],
	41892334 => [11695,11705,11704,11703,11702,11701,11700,11699,11698,11697,11711,11712,11713,11714,11715],
	41892330 => [16213,16210,16209,16181,16179,11722,11721,11723,11724,11720,11717,11719,11746,11718,17692],
	41892319 => [16213,16210,16209,16181,16179,11722,11721,11723,11724,11720,11717,11719,11746,11718,17692],
	41892336 => [11725,11726,11738,11739,11740,11743,11737,11736,11741,11734,11732,11733,11731,11729,11730,11728,11727,11744,11745,11735,11742],
	41892312 => [11725,11726,11738,11739,11740,11743,11737,11736,11741,11734,11732,11733,11731,11729,11730,11728,11727,11744,11745,11735,11742],
	41892316 => [11725,11726,11738,11739,11740,11743,11737,11736,11741,11734,11732,11733,11731,11729,11730,11728,11727,11744,11745,11735,11742],
	41860316 => [11557,11591],
	41860304 => [11557,11591],
	41836640 => [8122,8123],
	22524780 => [11359,11361,11362,11369,11367,11383,11384,17701,11385,17702,17703,17704,17705,11386,11365,11360],
	22524766 => [11359,11361,11362,11363,11366,11368,11369,11367,11364,11370,11371,11375,11376,11377,11382,11380,11381,11378,11379,11365,11360],
	22524772 => [11363,11366,11368,11364,11370,11371,11375,11376,11377,11382,11380,11381,11378,11379],
	22524747 => [17706,17707,17708,17711,17719,17717,17718,17716,17715,17714,17712,17713,17709,17710],
	22524776 => [17706,17707,17708,17711,17719,17717,17718,17716,17715,17714,17712,17713,17709,17710],
	22524761 => [17706,17707,17708,17711,17719,17717,17718,17716,17715,17714,17712,17713,17709,17710],
	22524753 => [11376,11377,11382,11380,11381,11383,11384,17701,11385,17702,17703,17704,17705,11386,11378,11379],
	22524786 => [11376,11377,11382,11380,11381,11383,11384,17701,11385,17702,17703,17704,17705,11386,11378,11379],
	22524802 => [11383,11384,17701,11385,17702,17703,17704,17705,11386,11387,11402,11401,11400,11399,11398,11397,11396,11395,11394,11393,11392,11391,11390,11389,11388],
	22524794 => [11387,11402,11401,11400,11399,11398,11397,11396,11395,11394,11393,11392,11391,11390,11389,11388],
	22524790 => [11387,11402,11401,11400,11399,11398,11397,11396,11395,11394,11393,11392,11391,11390,11389,11388],
	152430 => [8556,8557,8558,8559,8560,8561,8562],
	152426 => [8557,8558,8559,8560,8561,8562],
	61642 => [1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,30523,1232,1233,1234,1235,1236,9621,9622,9623,9626,9625,9624,1231],
	61647 => [1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,30523,1232,1233,1234,1235,1236,9621,1231],
	61645 => [9622,9623,9626,9625,9624,9627,9628,9629,9630,1237,1238,1239,1240,1241,1242],
	61650 => [9628,9629,9630,1237,1238,1239,1240,1241],
	41885941 => [12614,12623,12622,12621,12617,12618,12620,12624,12616,12615],
	41882316 => [12712,12713,12714,12715,12707,12709,12710,12711,12717,12719,12718,12693,12691,12692,12682,12681,12687,12688,12678,12679,12680,12686],
	41882322 => [12712,12713,12714,12715,12707,12709,12710,12711,12717,12719,12718,12693,12691,12692,12682,12681,12687,12688,12678,12679,12680,12686],
	41882325 => [12712,12713,12714,12715,12707,12709,12710,12711,12717,12719,12718,12693,12691,12692,12682,12681,12687,12688,12678,12679,12680,12686],
	41882293 => [12712,12713,12714,12715,12707,12709,12710,12711,12717,12719,12718,12693,12691,12692,12682,12681,12687,12688,12678,12679,12680,12686],
	41882318 => [12720,12721,12722,12723,12724,12725,12731,12732,12733,12734,12735,12739,12740,12741,12742,12743,12744,12700,12698,12697,12695,12694,12730,12737,12738,12736,12748,12747,12746,12745,12699,12696],
	41882282 => [12720,12721,12722,12723,12724,12725,12731,12732,12733,12734,12735,12739,12740,12741,12742,12743,12744,12700,12698,12697,12695,12694,12730,12737,12738,12736,12748,12747,12746,12745,12699,12696],
	41882299 => [12720,12721,12722,12723,12724,12725,12731,12732,12733,12734,12735,12739,12740,12741,12742,12743,12744,12700,12698,12697,12695,12694,12730,12737,12738,12736,12748,12747,12746,12745,12699,12696],
	41882288 => [12720,12721,12722,12723,12724,12725,12731,12732,12733,12734,12735,12739,12740,12741,12742,12743,12744,12700,12698,12697,12695,12694,12730,12737,12738,12736,12748,12747,12746,12745,12699,12696],
	41882328 => [12720,12721,12722,12723,12724,12725,12731,12732,12733,12734,12735,12739,12740,12741,12742,12743,12744,12700,12698,12697,12695,12694,12730,12737,12738,12736,12748,12747,12746,12745,12699,12696],
	41882307 => [12683,12684,12685,12690,12689,12702,12703,12716,12708,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12761,12760,12762,12704,12705,12706],
	41882274 => [12683,12684,12685,12690,12689,12702,12703,12716,12708,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12761,12760,12762,12704,12705,12706],
	41882278 => [12683,12684,12685,12690,12689,12702,12703,12716,12708,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12761,12760,12762,12704,12705,12706],
	41882312 => [12683,12684,12685,12690,12689,12702,12703,12716,12708,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12761,12760,12762,12704,12705,12706],
	41882304 => [12683,12684,12685,12690,12689,12702,12703,12716,12708,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12761,12760,12762,12704,12705,12706],
	41882331 => [12683,12684,12685,12690,12689,12702,12703,12716,12708,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12761,12760,12762,12704,12705,12706],
	3178947 => [29878,29882,29883,29885,29884,29886,29887,29888,29889,29920,29901,29896,29895,29891,29890,29892,29893,29894,29897,29899,29900,29898],
	3178941 => [29878,29882,29883,29885,29884,29886,29887,29888,29889,29920,29901,29896,29895,29891,29890,29892,29893,29894,29897,29899,29900,29898],
	3178935 => [29878,29882,29883,29885,29884,29886,29887,29888,29889,29920,29901,29896,29895,29891,29890,29892,29893,29894,29897,29899,29900,29898],
	3178929 => [29878,29882,29883,29885,29884,29886,29887,29888,29889,29920,29901,29896,29895,29891,29890,29892,29893,29894,29897,29899,29900,29898],
	3178925 => [29878,29882,29883,29885,29884,29886,29887,29888,29889,29920,29901,29896,29895,29891,29890,29892,29893,29894,29897,29899,29900,29898],
	3178943 => [30083,30084,30085,29931,29930,29929,29928,29927,29926,29925,29924,29923,29922,29921,29932,29933,29934,29935,29936,29937,29948,29947,30012,30013],
	3178939 => [30083,30084,30085,29931,29930,29929,29928,29927,29926,29925,29924,29932,29933,29934,29935,29936,29937,29948,29947,30012,30013],
	3178931 => [30083,30084,30085,29931,29930,29929,29928,29927,29926,29925,29924,29923,29922,29921,29932,29933,29934,29935,29936,29937,29948,29947,30012,30013],
	3178927 => [30083,30084,30085,29931,29930,29929,29928,29927,29926,29925,29924,29923,29922,29921,29932,29933,29934,29935,29936,29937,29948,29947,30012,30013],
	3178923 => [30083,30084,30085,29931,29930,29929,29928,29927,29926,29925,29924,29923,29922,29921,29932,29933,29934,29935,29936,29937,29948,29947,30012,30013],
	3178966 => [29902,29903,29906,29908,29909,29910,29919,29912,29915,29916,29917,29905],
	3178962 => [29902,29903,29906,29908,29909,29910,29919,29911,29912,29915,29916,29917,29905,29918,29913,29907,29914,29904],
	3178960 => [29902,29903,29906,29908,29909,29910,29919,29911,29912,29915,29916,29917,29905,29918,29913,29907,29914,29904],
	3178956 => [29902,29903,29906,29908,29909,29910,29919,29911,29912,29915,29916,29917,29905,29918,29913,29907,29914,29904],
	3178951 => [29902,29903,29906,29908,29909,29910,29919,29911,29912,29915,29916,29917,29905,29918,29913,29907,29914,29904],
	3178984 => [29938,30002,30001,30003,30005,30008,30010,30007,30009,30004,30000,29999,29998,29997,29994,29996],
	3178980 => [29938,30002,30001,30003,30005,30008,30010,30007,30009,30004,30000,29999,29998,29997,29994,29996],
	3178975 => [29938,30002,30001,30003,30005,30008,30010,30007,30009,30004,30000,29999,29998,29997,29994,29996],
	3178971 => [29938,30002,30001,30003,30005,30008,30010,30007,30009,30004,30000,29999,29998,29997,29994,29996],
	3179031 => [29949,29950,29951,29952,29953,29956,29957,29960,29958,29959,30076,30077,30078,30079,29961,30031,30032,30033,30034,30035,30036],
	3179023 => [29949,29950,29951,29952,29953,29956,29957,29960,29958,29959,30076,30077,30078,30079,29961,30031,30032,30033,30034,30035,30036],
	3179055 => [29954,29962,29963,30073,30074,30075,29964,30072,30071,30070,30042,29955,29965,29966],
	3179049 => [29954,29962,29963,30073,30074,30075,29964,30072,30071,30070,30042,29955,29965,29966],
	3179029 => [30041,30040,30039,30038,30043,30044,30045,30049,30050,30046,30047,30048,30064,30061,30062,30063,30065,30067,30068,30066,30060,30069,30037],
	3179019 => [30041,30040,30039,30038,30043,30044,30045,30049,30050,30051,30052,30057,30056,30055,30053,30054,30058,30059,30046,30047,30037],
	3179027 => [30051,30052,30057,30056,30055,30053,30054,30058,30059],
	3179051 => [29973,29974,29975,29990,29991,29992,29993,29995,29976,29978,29979,29980,29981,29982,29977,29983,29984,29985,29987,29988,29989,29986,29967,29968,29969,29970,29971,29972,30080,30081,30082],
	3179047 => [29973,29974,29975,29990,29991,29992,29993,29995,29976,29978,29979,29980,29981,29982,29977,29983,29984,29985,29987,29988,29989,29986,29967,29968,29969,29970,29971,29972,30080,30081,30082],
	3179004 => [30014,30015,30016,30017,30018,30020,30021,30022,30024,30029,30030,30025,30027],
	3179000 => [30014,30015,30016,30017,30018,30020,30021,30022,30023,30024,30029,30030,30019,30026,30025,30027,30028],
	3178998 => [30014,30015,30016,30017,30018,30020,30021,30022,30024,30029,30030,30025,30027],
	3178994 => [30014,30015,30016,30017,30018,30020,30021,30022,30023,30024,30029,30030,30019,30026,30025,30027,30028],
	3178989 => [30014,30015,30016,30017,30018,30020,30021,30022,30023,30024,30029,30030,30019,30026,30025,30027,30028],
	41898260 => [3836,3837],
	41898246 => [3836,3837],
	41879598 => [1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069],
	41879596 => [1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1268,1088,1089,1090],
	41879590 => [1091,1092,1093,1094,1269,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109],
	61726 => [1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132],
	61721 => [1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168],
	61724 => [1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,9620],
	83347 => [2264,2265,2266,2267,2268,2273,2274,2275,2276,2277,2278,2279,2280,2282,2269,2270,2271,2272],
	83340 => [2264,2265,2266,2267,2268,2269,2270,2271,2272],
	83342 => [2273,2274,2275,2276,2277,2278,2279,2280,2282],
	42145584 => [7439,23258,7440],
	42145580 => [7439,23258,7440],
	42192851 => [4315],
	42192853 => [4315],
	42192921 => [8141],
	42192992 => [8068],
	42192959 => [8068],
	42202272 => [8492],
	69238 => [16122,22218],
	69219 => [16122,22218,11633,11632,11639,11631,11640,11637,11638,11635,11636,11634,11630],
	69228 => [16122],
	69232 => [16122,22218,11633,11632,11639,11631,11640,11637,11638,11635,11636,11634,11630],
	69234 => [22218,11633,11632,11639,11631,11640,11637,11638,11635,11636,11634,11630],
	69242 => [22218,11633,11632,11639,11631,11640,11637,11638,11635,11636,11634,11630],
	42206319 => [11646,11647,11648,11659,11658,11649,11650,11657,11655,11656,11652,11651,22219,11654,11660,11662,11663],
	42206315 => [11646,11647,11648,11659,11658,11649,11650,11657,11655,11656,11652,11651,22219,11654,11660,11662,11663],
	42206311 => [11646,11647,11648,11659,11658,11649,11650,11657,11655,11656,11652,11651,22219,11654,11660,11662,11663],
	42206305 => [11664,11665,11666,11670,11671,11672,11675,11676,11677,11678,16147,11668,11667,11673,11674],
	42206301 => [11664,11665,11666,11670,11671,11672,11675,11676,11677,11678,16147,11668,11667,11673,11674],
	42206297 => [11664,11665,11666,11670,11671,11672,11675,11676,11677,11678,16147,11668,11667,11673,11674],
	42155816 => [11558,11560,11577,11582,11589,11590,11586,11588,11587,11585,11584,11583,11581,11578,11579,11580,11561,11559],
	42155829 => [11558,11560,11577,11582,11589,11590,11586,11588,11587,11585,11584,11583,11581,11578,11579,11580,11561,11559],
	42155839 => [11562,11564,11565,11566,11568,11567,11570,11571,11573,11574,11576,11592,16155,11572,11569,11575],
	42155821 => [11562,11564,11565,11566,11568,11567,11570,11571,11573,11574,11576,11592,16155,11572,11569,11575],
	42209828 => [11686],
	42209858 => [11686],
	42209845 => [11686],
	42172472 => [4564],
	42172465 => [4564,4604,4569],
	42172478 => [4564,4604,4569],
	42172474 => [4564,4604,4569],
	42559021 => [3924,3925,8362,8367,8368,8369,8370,8371,8363,8364,8365,8366],
	42559045 => [3924,3925,8362,8367,8368,8369,8370,8371,8372,8363,8364,8365,8366],
	42559016 => [3924,3925,8362,8367,8368,8369,8370,8371,8372,8373,3923,3922,3921,3920,3928,3927,3930,3926,8363,8364,8365,8366],
	42559037 => [3924,3925,8362,8367,8368,8369,8370,8371,8372,8373,3923,3922,3921,3920,3928,3927,3930,3926,8363,8364,8365,8366],
	42559042 => [8372,8373,3923,3922,3921,3920,3918,3915,3912,3928,3927,3930,3929,3926,3917,3919,3916,3913,3914,17748],
	42559050 => [8373,3923,3922,3921,3920,3918,3915,3912,3928,3927,3930,3929,3926,3917,3919,3916,3913,3914,17748],
	42559032 => [3918,3915,3912,3929,3917,3919,3916,3913,3914,17748],
	42519554 => [7447],
	42519560 => [7447],
	42572547 => [18822],
	42572531 => [18822],
	42572540 => [18822],
	42572529 => [18822],
	42572526 => [18822],
	42538213 => [11661],
	42538217 => [11661],
	42538221 => [11661],
	42537976 => [3833,3834,3835],
	42537980 => [3833,3834,3835],
	42539188 => [3994],
	42539195 => [3994,3996],
	42539182 => [3994,3996],
	42539186 => [3994,3996],
	42586056 => [9803],
	42586058 => [9803],
	40355552 => [1281,1282,1283,1284,1285,1286,1287],
	41597810 => [1290],
	42633356 => [6956,6952,6953,6954],
	42588371 => [7928,7929,7931,7932,7933,7938,7939,7934,7935,7937,7940,7941,7942,7943,7944,7945,7946,7947,7948,7936,7930,3759,7927],
	42588388 => [7928,7929,7931,7932,7933,7938,7939,7934,7935,7937,7940,7941,7942,7943,7944,7945,7946,7947,7948,7936,7930,3759,7927],
	42588361 => [7950,7951,7953,7955,7956,7958,7959,7960,7962,7963,7964,7961,7957,7954,7952],
	42633428 => [8285,8289],
	42633437 => [8287,8301,8291],
	42633430 => [8287,8289,8301,8291],
	152439 => [19643,19645,19641,19661,19693,19685,19660,19663,19665,19668,19694,19664,19666,19667,19669,19671,19672,19673,19670],
	152461 => [19643,19644,19645,19641,19661,19693,19685,19686,19687,19688,19689,19691,19692,19662,19658,19659,19714,19705,19690,19660,19663,19665,19668,19694,19664,19666,19667,19669,19671,19672,19673,19670,19684,19683,19710,19711,19712,19721,19720,19719],
	29645088 => [19656,19657,20012,20009,20008,20007,20006,20005,20004,20003,20000,20001,20002,20010,20013,19999,19998,19997,19996,19995,19994],
	152466 => [19686,19687,19688,19689,19691,19692,19662,19658,19690,19684,19683],
	29645079 => [19704,19703,19715,19716,19677,19678,19679,19699,19680,19681,19682,19700,19701,19717,19702,19718,19706,19726,19725,19724,19730,19722,19709,19723,19731,19729,19708,19732,19728,19733],
	29645084 => [19677,19678,19679,19699,19680,19681,19682,19700,19701,19717,19718],
	29645075 => [19706,19726,19725,19724,19730,19722,19709,19723,19731,19729,19708,19732,19728,19733],
	29645093 => [20013],
	42906351 => [16127,11653],
	42906355 => [16127,11653],
	42906347 => [11653],
	42930562 => [11563],
	42930575 => [11563],
	43922486 => [1296,1297,1298,1299,1300,1301],
	43922492 => [1302,1303,1304,1305,1306,1307,1308,1309,1310,1311],
	43922490 => [1313,1314,1315,1316,1317,9314,9315,1318,1319,9311,1320,1321],
	46723458 => [1296,1297,1298,1299,1300,1301],
	46723464 => [1302,1303,1304,1305,1306,1307,1308,1309,1310,1311],
	46723462 => [1313,1314,1315,1316,1317,9314,9315,1318,1319,9311,1320,1321],
}


########################################################################################################################
# build index of names to creatures

data.creature_index = Hash.new
data.creature_list.each do |creature|
	creature.names.each do |name|
		data.creature_index[name] = creature
	end
end


########################################################################################################################
# additional creature properties - work in progress

data.creature_index["dark vortece"].immunities.push(501)

data.creature_index["major spider"].immunities.push(516) # not immune, but yields little mana
data.creature_index["skeletal warhorse"].immunities.push(516)
data.creature_index["nonomino"].immunities.push(516)

data.creature_index["fire rat"].immunities.push('fire')
data.creature_index["fire rat"].immunities.push('steam')
data.creature_index["fire cat"].immunities.push('fire')

data.creature_index["lesser vruul"].immunities.push('steam')
data.creature_index["lesser vruul"].immunities.push('fire')
data.creature_index["lesser vruul"].immunities.push('acid')
data.creature_index["lesser vruul"].immunities.push('cold')

data.creature_index["stone troll"].immunities.push('fire')

data.creature_index["wood wight"].immunities.push(1002)

data.creature_index["Illoke mystic"].immunities.push(909)

data.creature_index['frost giant'].weaknesses.push('fire')

data.creature_index['myklian'].immunities.push('cold')

data.creature_index['krag dweller'].immunities.push(501)
data.creature_index['krag dweller'].immunities.push('fire') # need to confirm

# 516 fails a lot on these low mana pool? test a bit more, should it be an immunty?
data.creature_index["earth elemental"].immunities.push(501)
data.creature_index["earth elemental"].immunities.push(909)

data.creature_index.each do |creature_name,creature|
	# type matching regex copied from GameObj.type in lich.rbw
	type_data = GameObj.type_data
	creature_noun = creature_name.split.last
	creature.types = type_data.keys.find_all { |t| (creature_name =~ type_data[t][:name] or creature_noun =~ type_data[t][:noun]) and (type_data[t][:exclude].nil? or creature_name !~ type_data[t][:exclude]) }

	creature.weaknesses.push('fire') if creature_noun == 'troll'
end


########################################################################################################################
# Setup UI

class Setup < Gtk::Builder
	@@categories = {
		general: {
			default_profile: { default: 'default' },
			bounty_profile: { default: 'bounty' },
			ebounty_slot: { default: 'a' }
		}
	}

	def self.get_category(key)
		@@categories.each { |category, data| return category unless data[key].nil? }
		return nil
	end

	def self.get_setting(key)
		cat = Setup.get_category(key)
		return nil if cat.nil?
		@@categories[cat].each { |setting, data| return data if setting == key }
		return nil
	end

	def self.load_defaults(settings)
		@@categories.each do |_, data|
			data.each { |key, value| settings[key] = value[:default] if settings[key].nil? }
		end
	end

	def initialize(settings)
		super()
		@settings = settings

		# set default values if they don't exist
		Setup.load_defaults(@settings)

		# remove settings that don't exist
		@settings.delete_if { |key, _| next Setup.get_category(key).nil? }

		# use a GTK Builder to setup all the basics of the window then expand on that base
		return unless defined?(Gtk) && Gtk::Version::MAJOR == 3

		Gtk.queue do
			add_from_string(Setup.ui)
			load_settings
			#set_tooltips

			self['main'].keep_above = true
			self['main'].set_title "HuntPlan v1.0"

			# connect signals after settings are loaded to a bunch of handlers don't trigger
			connect_signals { |handler| method(handler) }
		end
	end

	def start
		@running = true
		Gtk.queue { self['main'].show_all }
		wait_while { @running }
	end

	def self.ui
		'<?xml version="1.0" encoding="UTF-8"?> <!-- Generated with glade 3.40.0 --> <interface> <requires lib="gtk+" version="3.20"/> <object class="GtkWindow" rid="main"> <property name="can-focus">False</property> <property name="title" translatable="yes">HuntPlan Setup</property> <property name="default-width">450</property> <property name="default-height">280</property> <signal name="destroy" handler="on_destroy" swapped="no"/> <child> <object class="GtkBox"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="margin-start">4</property> <property name="margin-end">4</property> <property name="margin-top">4</property> <property name="margin-bottom">4</property> <property name="orientation">vertical</property> <child> <object class="GtkNotebook"> <property name="visible">True</property> <property name="can-focus">True</property> <property name="hexpand">True</property> <property name="vexpand">True</property> <property name="show-tabs">False</property> <child> <object class="GtkScrolledWindow"> <property name="visible">True</property> <property name="can-focus">True</property> <property name="shadow-type">in</property> <child> <object class="GtkViewport"> <property name="visible">True</property> <property name="can-focus">False</property> <child> <object class="GtkBox"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="orientation">vertical</property> <child> <object class="GtkFrame"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="margin-start">4</property> <property name="margin-end">4</property> <property name="margin-top">4</property> <property name="margin-bottom">4</property> <property name="border-width">10</property> <property name="label-xalign">0</property> <child> <!-- n-columns=1 n-rows=6 --> <object class="GtkGrid"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="margin-start">4</property> <property name="margin-end">4</property> <property name="margin-top">4</property> <property name="margin-bottom">4</property> <property name="row-spacing">4</property> <property name="column-spacing">4</property> <child> <object class="GtkEntry" rid="bounty_profile"> <property name="width-request">400</property> <property name="visible">True</property> <property name="can-focus">True</property> </object> <packing> <property name="left-attach">0</property> <property name="top-attach">3</property> </packing> </child> <child> <object class="GtkLabel" rid="bounty_profile_label"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="halign">start</property> <property name="label" translatable="yes">[bigshot] Bounty Profile Name</property> </object> <packing> <property name="left-attach">0</property> <property name="top-attach">2</property> </packing> </child> <child> <object class="GtkEntry" rid="default_profile"> <property name="width-request">400</property> <property name="visible">True</property> <property name="can-focus">True</property> </object> <packing> <property name="left-attach">0</property> <property name="top-attach">1</property> </packing> </child> <child> <object class="GtkLabel" rid="default_profile_label"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="halign">start</property> <property name="label" translatable="yes">[bigshot] Default Profile Name	</property> </object> <packing> <property name="left-attach">0</property> <property name="top-attach">0</property> </packing> </child> <child> <object class="GtkLabel" rid="ebounty_slot_label"> <property name="name">ebounty_slot_label</property> <property name="visible">True</property> <property name="can-focus">False</property> <property name="halign">start</property> <property name="label" translatable="yes">[ebounty] Profile Slot (a-j)</property> </object> <packing> <property name="left-attach">0</property> <property name="top-attach">4</property> </packing> </child> <child> <object class="GtkEntry" rid="ebounty_slot"> <property name="name">ebounty_slot_label</property> <property name="visible">True</property> <property name="can-focus">True</property> <property name="max-length">1</property> <property name="width-chars">1</property> </object> <packing> <property name="left-attach">0</property> <property name="top-attach">5</property> </packing> </child> </object> </child> <child type="label"> <object class="GtkLabel"> <property name="visible">True</property> <property name="can-focus">False</property> </object> </child> </object> <packing> <property name="expand">False</property> <property name="fill">True</property> <property name="position">0</property> </packing> </child> </object> </child> </object> </child> </object> </child> <child type="tab"> <object class="GtkLabel"> <property name="visible">True</property> <property name="can-focus">False</property> <property name="label" translatable="yes">Profiles</property> </object> <packing> <property name="tab-fill">False</property> </packing> </child> <child> <placeholder/> </child> <child> <placeholder/> </child> <child> <placeholder/> </child> <child> <placeholder/> </child> <child> <placeholder/> </child> <child> <placeholder/> </child> </object> <packing> <property name="expand">False</property> <property name="fill">True</property> <property name="position">0</property> </packing> </child> <child> <object class="GtkBox"> <property name="visible">True</property> <property name="can-focus">False</property> <child> <object class="GtkLabel" rid="status_label"> <property name="visible">True</property> <property name="can-focus">False</property> </object> <packing> <property name="expand">False</property> <property name="fill">True</property> <property name="position">0</property> </packing> </child> <child> <object class="GtkButton"> <property name="label" translatable="yes">Save &amp; Exit</property> <property name="width-request">80</property> <property name="visible">True</property> <property name="can-focus">True</property> <property name="receives-default">True</property> <property name="halign">end</property> <property name="margin-end">4</property> <property name="margin-top">4</property> <property name="margin-bottom">4</property> <property name="hexpand">True</property> <signal name="clicked" handler="on_close_clicked" swapped="no"/> </object> <packing> <property name="expand">False</property> <property name="fill">True</property> <property name="position">1</property> </packing> </child> </object> <packing> <property name="expand">False</property> <property name="fill">True</property> <property name="pack-type">end</property> <property name="position">1</property> </packing> </child> </object> </child> </object> </interface>'
	end

	def load_settings
		Gtk.queue do
			objects.each do |obj|
				next unless obj.methods.include?(:builder_name)
		
				key = obj.builder_name.to_sym

				if obj.class == Gtk::Entry
					if obj.builder_name.to_s == "default_profile"
						obj.text = @settings[:default_profile]
					elsif obj.builder_name.to_s == "bounty_profile"
						obj.text = @settings[:bounty_profile]
					elsif obj.builder_name.to_s == "ebounty_slot"
						obj.text = @settings[:ebounty_slot]
					end

					obj.signal_connect('changed') { on_update(obj) }
				end
			end
		end
	end

	def on_update(obj)
		Gtk.queue do
			key = obj.builder_name.to_sym
			setting = Setup.get_setting(key)
			return if setting.nil?

			if obj.class == Gtk::CheckButton
				@settings[key] = obj.active?
			elsif obj.class == Gtk::Entry
				@settings[key] = obj.text.strip
			elsif obj.class == Gtk::SpinButton
				obj.update # update from text entry
				@settings[key] = obj.adjustment.value.to_i # force int, we don't use floats anywhere
			elsif obj.class == Gtk::ComboBoxText
				@settings[key] = obj.active_text
			end
		end
	end

	def on_close_clicked
		if !['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'].include?(@settings[:ebounty_slot])
			Gtk.queue do
				status_label = get_object('status_label')
				status_label.text = "invalid ebounty profile slot: #{@settings[:ebounty_slot]}"
			end
			return
		end
		HuntPlan.save_profile(@settings)
		self['main'].destroy
	end

	def on_destroy
		Gtk.queue { @running = false }
	end

end # Setup


def self.load_profile
    if File.exist?(data.settings_path)
        data.settings = YAML.load_file(data.settings_path)
	else
		data.settings = Hash.new
		HuntPlan::Setup.load_defaults(data.settings)
    end
end


def self.save_profile(settings)
	File.write(data.settings_path, settings.to_yaml)
end


########################################################################################################################
# create_and_write_file

def self.create_and_write_file(path, text)
	dir = File.dirname(path)

	FileUtils.mkdir_p(dir) unless File.directory?(dir)

	File.open(path, "w") do |f|     
		f.write(text)   
	end
end


########################################################################################################################
# Min-heap priority queue implementation

class MinHeap
  def initialize
	@data = []
  end

  def push(item)
    index = @data.size
    @data << item
    while index > 0
      parent_index = (index - 1) / 2
      break if item[0] >= @data[parent_index][0]
      @data[index] = @data[parent_index]
      index = parent_index
    end
    @data[index] = item
  end

  def pop
    return nil if @data.empty?
    min = @data.first
    last = @data.pop
    unless @data.empty?
      index = 0
      size = @data.size
      while (left = 2 * index + 1) < size
        right = left + 1
        child_index = right < size && @data[right][0] < @data[left][0] ? right : left
        break if last[0] <= @data[child_index][0]
        @data[index] = @data[child_index]
        index = child_index
      end
      @data[index] = last
    end
    min
  end

  def empty?
	@data.empty?
  end
end

########################################################################################################################
# Utility

def self.f2p?
	return XMLData.game != 'GST' && Account.subscription == 'FREE'
end

def self.print_msg(msg)
	_respond Lich::Messaging.monsterbold(msg)
end

########################################################################################################################
# get_boundaries_from_room_ids - finds the boundary rooms surrounding a block of rooms

def self.get_boundaries_from_room_ids(rids)	
	boundaries = Array.new
	rids.each do |rid|
		rid_i = rid.is_a?(String) ? rid.to_i : rid
		Room[rid_i].wayto.each do |key,value|
			if rids.none?{ |r| r == key.to_i }
				boundaries.push(key.to_i)
			end
		end
	end
	return boundaries.uniq
end


########################################################################################################################
# build_path - utility to build a path from origin_rid to destination_rid using a backtrack_map.

def self.build_path(origin_rid, destination_rid, backtrack_map)
  path = []
  current_rid = destination_rid

  while current_rid && current_rid != origin_rid
    path << current_rid
    current_rid = backtrack_map[current_rid]
  end

  return nil unless current_rid == origin_rid

  path << origin_rid
  path.reverse!
  return path
end


########################################################################################################################
# pathing - breadth first search (room travel time either 0 or 1)

def self.bfs(origin_rid, destination_rids, valid_rids, weightless_rids)
  distance = Hash.new(Float::INFINITY)
  backtrack_map = {}
  visited_rids = Set.new
  queue = [origin_rid]
  distance[origin_rid] = 0

  until queue.empty?
    current_rid = queue.shift
    next if visited_rids.include?(current_rid)
    visited_rids.add(current_rid)

    return [backtrack_map, distance, current_rid] if destination_rids&.include?(current_rid)

    Room[current_rid].wayto.each do |adj_rid_s, _|
	  adj_rid = adj_rid_s.to_i
      next if valid_rids && !valid_rids.include?(adj_rid)

      cost = weightless_rids&.include?(adj_rid) ? 0 : 1
      new_distance = distance[current_rid] + cost

      next unless new_distance < distance[adj_rid]

      distance[adj_rid] = new_distance
      backtrack_map[adj_rid] = current_rid
      cost.zero? ? queue.unshift(adj_rid) : queue.push(adj_rid)
    end
  end

  [backtrack_map, distance, nil]
end


# Returns shortest path to a specific destination rid (or nil if unreachable).
def self.bfs_path_to(origin_rid, destination_rid, valid_rids, weightless_rids)
  return [origin_rid] if origin_rid == destination_rid
  backtrack_map, _, reached_rid = bfs(origin_rid, Set[destination_rid], valid_rids, weightless_rids)
  return reached_rid ? build_path(origin_rid, reached_rid, backtrack_map) : nil
end


# Returns [path, distance] to the bfs_nearest destination rid, or nil if unreachable.
def self.bfs_path_to_any(origin_rid, destination_rids, valid_rids, weightless_rids)
  return [[origin_rid], 0] if destination_rids.include?(origin_rid)
  backtrack_map, distance_map, nearest_rid = bfs(origin_rid, destination_rids, valid_rids, weightless_rids)
  return nil unless nearest_rid
  return [build_path(origin_rid, nearest_rid, backtrack_map), distance_map[nearest_rid]]
end


# Returns only the rid of the bfs_nearest reachable destination, or nil if unreachable.
def self.bfs_nearest(origin_rid, destination_rids, valid_rids, weightless_rids)
  return origin_rid if destination_rids.include?(origin_rid)
  _, _, nearest_rid = bfs(origin_rid, destination_rids, valid_rids, weightless_rids)
  return nearest_rid
end


########################################################################################################################
# pathing - dijkstra shortest path algoritm...more optimized and specialized than the lich implementation

def self.dijkstra(origin_rid, destination_rids)
  begin
    visited_rids = {}
    shortest_distances = { origin_rid => 0 }
    backtrack_map = {}
    pq = MinHeap.new
    pq.push([0, origin_rid])  # [distance, rid]

    until pq.empty?
      current_distance, current_rid = pq.pop
      next if visited_rids[current_rid]
      visited_rids[current_rid] = true

      # Early stop if any is destination reached
      break if destination_rids.include?(current_rid)

      current_room = Map[current_rid]
      current_room.wayto.keys.each do |adj_room_s|
        adj_room_i = adj_room_s.to_i
        next if visited_rids[adj_room_i]

        nav_time = current_room.timeto[adj_room_s]
        nav_time = nav_time.is_a?(StringProc) ? nav_time.call : nav_time
        next unless nav_time

        new_distance = current_distance + nav_time

        if shortest_distances[adj_room_i].nil? || new_distance < shortest_distances[adj_room_i]
          shortest_distances[adj_room_i] = new_distance
          backtrack_map[adj_room_i] = current_rid
          pq.push([new_distance, adj_room_i])
        end
      end
    end

    return [backtrack_map, shortest_distances]
  rescue => e
    puts "HuntPlan.dijkstra: error: #{e}"
    return nil
  end
end


def self.find_nearest_with_time(origin_rid, destination_rids)
  return [origin_rid, 0] if destination_rids.include?(origin_rid)
  backtrack_map, shortest_distances = dijkstra(origin_rid, destination_rids)
  reachable_destination_rids = destination_rids.select { |room_id| shortest_distances[room_id].is_a?(Numeric) }
  return nil if reachable_destination_rids.empty?
  nearest_rid = reachable_destination_rids.min_by { |room_id| shortest_distances[room_id] }
  time_estimate = shortest_distances[nearest_rid]
  return [nearest_rid, time_estimate]
end


def self.find_nearest_with_path_and_time(origin_rid, destination_rids)
  return [origin_rid, [], 0] if destination_rids.include?(origin_rid)
  backtrack_map, shortest_distances = dijkstra(origin_rid, destination_rids)
  reachable_destination_rids = destination_rids.select { |room_id| shortest_distances[room_id].is_a?(Numeric) }
  return [nil, nil, 0] if reachable_destination_rids.empty?
  nearest_rid = reachable_destination_rids.min_by { |room_id| shortest_distances[room_id] }
  path_to_nearest = build_path(origin_rid, nearest_rid, backtrack_map)
  time_estimate = shortest_distances[nearest_rid]
  return [nearest_rid, path_to_nearest, time_estimate]
end


########################################################################################################################
# RoomData - the values stored for each room in the room_index

class RoomData
	attr_accessor :spawn_ids, :creature_names, :max_creature_level

	def initialize()
		@spawn_ids = Set.new
		@creature_names = Set.new
    	@max_creature_level = nil
	end

	def merge_creature_level(creature_level)
		if !creature_level.nil? && (@max_creature_level.nil? || creature_level > @max_creature_level)
	 		@max_creature_level = creature_level
		end
	end
end

########################################################################################################################
# SpawnRoom

class SpawnRoom
	attr_accessor :rid, :max_creature_level, :hunting_rids, :reachable_rids
	def initialize(rid, max_creature_level)
		@rid = rid
		@max_creature_level = max_creature_level
		@hunting_rids = Set.new
		@reachable_rids = Set.new

		# the spawn room is always a part of the hunting room and reachable room sets
		@hunting_rids.add(rid) 
		@reachable_rids.add(rid)
	end

	def merge_creature_level(creature_level)
		if !creature_level.nil? && (@max_creature_level.nil? || creature_level > @max_creature_level)
	 		@max_creature_level = creature_level
	 	end
	end
end

########################################################################################################################
# HuntingArea

class HuntingArea
	attr_accessor :spawn_rooms, :spawn_rids, :hunting_rids, :reachable_rids, :max_creature_level,
		:nearest_rid, :travel_time

	def initialize()
		@spawn_rooms = Array.new
		@spawn_rids = Set.new
		@hunting_rids = Set.new
		@reachable_rids = Set.new
		@max_creature_level = nil
		@travel_time = nil
	end

	def merge_creature_level(creature_level)
	 	if !creature_level.nil? && (@max_creature_level.nil? || creature_level > @max_creature_level)
	 		@max_creature_level = creature_level
	 	end
	end

	def insert_spawn_room(spawn_room)
		@spawn_rooms.push(spawn_room)
		@spawn_rids.add(spawn_room.rid)
		spawn_room.hunting_rids.each { |rid| @hunting_rids.add(rid) }
		spawn_room.reachable_rids.each { |rid| @reachable_rids.add(rid) }
		merge_creature_level(spawn_room.max_creature_level)
	end

	def insert_hunting_area(hunting_area)
		hunting_area.spawn_rooms.each { |spawn_room| insert_spawn_room(spawn_room) }
	end

	def insert_hunting_path(path)
		path.each do |rid|
			hunting_rids.add(rid)
			merge_creature_level(HuntPlan.data.room_index[rid].max_creature_level)
		end
	end
end

########################################################################################################################
# build_spawn_locales

def self.build_spawn_locales(target_spawn_ids)
	spawn_locales = Array.new

	target_spawn_ids.each do |spawn_id|
		valid_locale = false
		locale_spawn_ids = Set.new
		#max_creature_level_in_locale = nil
		spawn_rids = data.spawn_index[spawn_id]
		
		spawn_rids.each do |spawn_rid|
			# if a bounty is being done, filter out any locales that have no rooms within the assigned bounty area.
			if !data.is_bounty || data.bounty_location.nil? || Room[spawn_rid].location.delete_prefix('the ') == data.bounty_location
				valid_locale = true
			end

			# collect all of the spawn ids and find the max creature level in each spawn area,
			# these will be used to restrict the rooms that's that the logic below will wander into.
			room_data = data.room_index[spawn_rid]
			room_data.spawn_ids.each{ |spawn_id| locale_spawn_ids.add(spawn_id) }
			#if room_data.max_creature_level && (max_creature_level_in_locale.nil? || room_data.max_creature_level > max_creature_level_in_locale)
			#	max_creature_level_in_locale = room_data.max_creature_level
			#end
		end

		next unless valid_locale

		spawn_locale = Array.new
		spawn_rids.each do |spawn_rid|
			room_data = data.room_index[spawn_rid]
			spawn_room = SpawnRoom.new(spawn_rid, room_data.max_creature_level)

			# build the set of rooms that we want to consider reachable from a spawn room within a limited radius.
			# as long as 2 spawn rooms can reach each other according to this set, they'll be a part of the same hunting area.
			HuntPlan.build_reachable_rids(spawn_room, 8)

			# simulate creature wander to catch any creatures that wandered off of their spawn nodes. this takes a
			# cautious approach and won't wander into any rooms that spawn a creature that's not already a part of the
			# current hunting area. this isn't strictly necessary, it might be best just to stay on the spawn nodes as
			# much as possible to increase the chance that the player will be in a spawn room when the game's spawn
			# timer triggers, so for now keeping this disabled.
			#HuntPlan.build_wander_rids(spawn_room, 3, locale_spawn_ids)

			# this less restrictive wander will be performed when the dangerous creature has spawned for a bounty.
			# we don't want to restrict the wander by creature level or spawn area because it's imperative to find the target.
			# fixme: ideally ebounty would rerun HuntPlan and restart bigshot anytime the bounty task changes so that
			# this goes into effect, and because HuntPlan will then limit the targets to just the spawned creature.
			HuntPlan.build_wander_rids(spawn_room, 8, nil) if data.has_dangerous_creature_spawned

			spawn_locale.push(spawn_room)
		end

		spawn_locales.push(spawn_locale) if !spawn_locale.empty?
	end

	return spawn_locales
end

########################################################################################################################
# build_reachable_rids - wander from a room to find all reachable rooms within a given radius

def self.build_reachable_rids(spawn_room, wander_radius)
	frontier_rids = Set.new
	frontier_rids.add(spawn_room.rid)

	spawn_room_data = data.room_index[spawn_room.rid]
	spawn_room_level = spawn_room_data.max_creature_level

	wander_radius.times do |depth|
		next_frontier_rids = Set.new
		frontier_rids.each do |current_rid|
			current_room = Room[current_rid]
			current_room.wayto.each do |adj_rid_s,nav|
				adj_rid = adj_rid_s.to_i

				# no reason to wander back into a room we were already in at a lower depth
				next if spawn_room.reachable_rids.include?(adj_rid)

				# don't wander into a room that isn't accessible
				nav_time = current_room.timeto[adj_rid_s]
				next if nav_time.is_a?(StringProc) && nav_time.call.nil?

				# don't reach into rooms that spawn creature that are too high of a level.
				# e.g. 'earth elemental' (lvl 82) spawn rooms 8387 and 8381 respectively spawn 'illoke jarl' (lvl 89) and 'greater earth elemental' (lvl 88).
				adj_room_data = data.room_index[adj_rid]
				adj_room_max_creature_level = adj_room_data.max_creature_level
				adj_room_level_valid = spawn_room_level.nil? ||
					adj_room_max_creature_level.nil? ||
					data.target_creature.level.nil? ||
					adj_room_max_creature_level <= data.safe_room_level ||
					spawn_room_level == adj_room_max_creature_level

				if !adj_room_level_valid
					print_msg("not eligible to reach from #{spawn_room.rid} (lvl #{spawn_room_level}) to #{adj_rid} (lvl #{adj_room_max_creature_level})") if data.author_mode
					next
				end

				next_frontier_rids.add(adj_rid)
				spawn_room.reachable_rids.add(adj_rid)
			end
		end

		break if next_frontier_rids.empty?

		frontier_rids = next_frontier_rids
	end
end

########################################################################################################################
# build_wander_rids - simulate creature wander from a given spawn room 

def self.build_wander_rids(spawn_room, wander_radius, valid_spawn_ids)
	# creatures only wander down obvious paths
	obvious_paths = %w[north northeast east southeast south southwest west northwest up down out]

	spawn_room_data = data.room_index[spawn_room.rid]
	spawn_room_level = spawn_room_data.max_creature_level

	frontier_rids = Set.new
	frontier_rids.add(spawn_room.rid)
	wander_radius.times do |depth|
		next_frontier_rids = Set.new
		frontier_rids.each do |current_rid|
			current_room = Room[current_rid]
			current_room.wayto.each do |adj_rid_s,nav|
				adj_rid = adj_rid_s.to_i
				adj_room = Room[adj_rid]
				current_rid_s = current_rid.to_s

				# no reason to wander back into a room we were already in at a lower depth
				next if spawn_room.hunting_rids.include?(adj_rid)

				# don't wander into a room that isn't reachable
				nav_time = current_room.timeto[adj_rid_s]
				next if nav_time.is_a?(StringProc) && nav_time.call.nil?

				adj_room_data = data.room_index[adj_rid]
				adj_room_max_creature_level = adj_room_data.max_creature_level
				adj_spawn_ids = adj_room_data.spawn_ids

				# creatures won't wander into these types of rooms
				next if adj_room.tags.any? { |tag| tag == 'node' || tag == 'supernode' }

				# some obvious paths are trivial StringProc objects such as "move 'northwest'; waitrt?" so we check for those too.
				next if !obvious_paths.include?(nav) && (!nav.is_a?(StringProc) || nav._dump.length > 30 || obvious_paths.none? { |dir| nav._dump.include?(dir) })

				# allow wandering down one way paths, but only if there is path back from the other room along the valid reachable_rooms
				if !adj_room.wayto.include?(current_rid_s) || (adj_room.timeto[current_rid_s].is_a?(StringProc) && adj_room.timeto[current_rid_s].call.nil?)
					return_path = HuntPlan.bfs_path_to(adj_rid, current_rid, spawn_room.reachable_rids, nil)
					if return_path.nil?
						print_msg("no return path found from #{adj_rid} to #{current_rid}") if data.author_mode
						next
					end
				end

				# valid_spawn_ids is optionally used to avoid wandering into any rooms that spawn a creature that's not spawned in the targetted area.
				next if !valid_spawn_ids.nil? && adj_spawn_ids.any? { |spawn_id| !valid_spawn_ids.include?(spawn_id) }

				# don't wander into rooms that spawn creature that are too high of a level.
				adj_room_level_valid = spawn_room_level.nil? ||
					adj_room_max_creature_level.nil? ||
					data.target_creature.level.nil? ||
					adj_room_max_creature_level <= data.safe_room_level ||
					spawn_room_level == adj_room_max_creature_level

				if !adj_room_level_valid
					print_msg("not eligible to wander from #{spawn_room.rid} (lvl #{spawn_room_level}) to #{adj_rid} (lvl #{adj_room_max_creature_level})") if data.author_mode
					next
				end

				next_frontier_rids.add(adj_rid)
				spawn_room.hunting_rids.add(adj_rid)
				spawn_room.merge_creature_level(adj_room_max_creature_level)
			end
		end

		break if next_frontier_rids.empty?

		frontier_rids = next_frontier_rids
	end
end

########################################################################################################################
# find_creatures_in_vicinity - find creatures in the hunting area and nearby that could wander into the hunting area. similar to build_wander_rids().

def self.find_creatures_in_vicinity(hunting_rids, wander_radius)
	# creatures only wander down obvious paths
	obvious_paths = %w[north northeast east southeast south southwest west northwest up down out]

	visited_rids = Set.new
	creature_names = Set.new

	frontier_rids = Set.new
	hunting_rids.each do |rid|
		frontier_rids.add(rid)
		visited_rids.add(rid)
		hunting_room_data = data.room_index[rid]
		hunting_room_data.creature_names.each { |name| creature_names.add(name) }
	end

	# this may not find a 1-way path feeding *into* the hunting area, but i suspect all obvious paths should be bidirectional...
	wander_radius.times do |depth|
		next_frontier_rids = Set.new
		frontier_rids.each do |current_rid|
			current_room = Room[current_rid]
			current_room.wayto.each do |adj_rid_s,nav|
				adj_rid = adj_rid_s.to_i
				adj_room = Room[adj_rid]
				current_rid_s = current_rid.to_s

				# no reason to wander back into a room we were already in at a lower depth
				next if visited_rids.include?(adj_rid)

				# don't wander into a room that isn't reachable
				nav_time = current_room.timeto[adj_rid_s]
				next if nav_time.is_a?(StringProc) && nav_time.call.nil?

				# creatures won't wander into these types of rooms
				next if adj_room.tags.any? { |tag| tag == 'node' || tag == 'supernode' }

				# some obvious paths are trivial StringProc objects such as "move 'northwest'; waitrt?" so we check for those too.
				next if !obvious_paths.include?(nav) && (!nav.is_a?(StringProc) || nav._dump.length > 30 || obvious_paths.none? { |dir| nav._dump.include?(dir) })

				adj_room_data = data.room_index[adj_rid]
				adj_room_data.creature_names.each { |name| creature_names.add(name) }
				next_frontier_rids.add(adj_rid)
				visited_rids.add(adj_rid)
			end
		end

		break if next_frontier_rids.empty?

		frontier_rids = next_frontier_rids
	end

	return creature_names
end

########################################################################################################################
# build_hunting_areas

def self.build_hunting_areas(spawn_locales)
	hunting_areas = Array.new

	spawn_locales.each do |spawn_locale|
		spawn_room_blocks = Array.new
		new_hunting_area = nil
		loop do
			break if spawn_locale.empty?

			if new_hunting_area.nil?
				new_hunting_area = HuntingArea.new
				new_hunting_area.insert_spawn_room(spawn_locale.shift())
			end
	
			expanded_current_block = false
			spawn_locale.each_with_index do |spawn_room,spawn_room_index|
				next if !new_hunting_area.reachable_rids.include?(spawn_room.rid)
				next if spawn_room.reachable_rids.none? { |rid| new_hunting_area.spawn_rids.include?(rid) }

				expanded_current_block = true
				new_hunting_area.insert_spawn_room(spawn_room)
				spawn_locale.delete_at(spawn_room_index)
				break
			end

			if !expanded_current_block || spawn_locale.empty?
				spawn_room_blocks.push(new_hunting_area)
				new_hunting_area = nil
			end
		end

		# throw away small room blocks that couldn't be connected to the rest in the group.
		# if they're all small, then as a last resort return the largest one.
		filtered_blocks = spawn_room_blocks.select { |block| block.spawn_rooms.length >= 5 }
		if !filtered_blocks.nil? && !filtered_blocks.empty?
			filtered_blocks.each { |block| hunting_areas.push(block) }
		else
			spawn_room_blocks.sort! { |l,r| l.spawn_rooms.length <=> r.spawn_rooms.length; }
			hunting_areas.push(spawn_room_blocks.last)
		end
	end

	return hunting_areas
end

########################################################################################################################
# consolidate_hunting_areas

def self.consolidate_hunting_areas(spawn_room_blocks)
	new_spawn_room_blocks = Array.new
	new_hunting_area = nil
	loop do
		break if spawn_room_blocks.empty?

		new_hunting_area ||= spawn_room_blocks.shift()
		expanded_current_block = false

		spawn_room_blocks.each_with_index do |other_block,other_block_index|
			next if new_hunting_area.reachable_rids.none? { |rid| other_block.spawn_rids.include?(rid) }
			next if other_block.reachable_rids.none? { |rid| new_hunting_area.spawn_rids.include?(rid) }

			expanded_current_block = true
			new_hunting_area.insert_hunting_area(other_block)
			spawn_room_blocks.delete_at(other_block_index)
			break
		end
  
		if !expanded_current_block || spawn_room_blocks.empty?
			new_spawn_room_blocks.push(new_hunting_area)
			new_hunting_area = nil
		end
	end

	return new_spawn_room_blocks
end

########################################################################################################################
# internally_link_hunting_areas

def self.internally_link_hunting_areas(hunting_areas)
	new_hunting_areas = Array.new
	hunting_areas.each do |hunting_area|
		new_hunting_area = HuntingArea.new
		new_hunting_area.insert_spawn_room(hunting_area.spawn_rooms.shift())
		reachable_rids = hunting_area.reachable_rids
		weightless_rids = hunting_area.hunting_rids.dup

		# incrementally reconstruct the hunting area, making sure each spawn room bidirectionally connects to it.
		until hunting_area.spawn_rooms.empty? do
			spawn_room = hunting_area.spawn_rooms.last
			start_rid = new_hunting_area.hunting_rids.first

			path, distance = bfs_path_to_any(spawn_room.rid, new_hunting_area.hunting_rids, reachable_rids, weightless_rids)
			new_hunting_area.insert_spawn_room(spawn_room)
			new_hunting_area.insert_hunting_path(path)
			path.each { |rid| weightless_rids.add(rid) }

			reverse_path = bfs_path_to(path.last, path.first, reachable_rids, weightless_rids)
			new_hunting_area.insert_hunting_path(reverse_path)
			reverse_path.each { |rid| weightless_rids.add(rid) }

			hunting_area.spawn_rooms.pop
		end

		new_hunting_areas.push(new_hunting_area)
	end

	return new_hunting_areas
end


########################################################################################################################
# sort_hunting_areas - find the most desirable hunting area out of the valid candidates

def self.sort_hunting_areas(hunting_areas)
	hunting_areas.each do |area|
  		area.nearest_rid, area.travel_time = find_nearest_with_time(Room.current.id, area.hunting_rids)
	end

	hunting_areas.sort! do |l,r|
		# if the hunting areas are less than 10 seconds apart, then consider them equal distance.
		l_time = l.travel_time ? l.travel_time : 2147483647
		r_time = r.travel_time ? r.travel_time : 2147483647
		if (l_time - r_time).abs <= 10
			l_time = 0
			r_time = 0
		end

		# avoid tiny hunting areas by comparing spawn count prior to comparing creature level.
		spawn_count_threshold = 5
		l_spawn_count = l.spawn_rooms.length
		r_spawn_count = r.spawn_rooms.length
		if l_spawn_count >= spawn_count_threshold && r_spawn_count >= spawn_count_threshold
			l_spawn_count = 0
			r_spawn_count = 0
		end

		# if the max creature level in both areas fall within the safety tolerance, then consider them equal.
		l_level = l.max_creature_level.nil? ? 999 : l.max_creature_level
		r_level = r.max_creature_level.nil? ? 999 : r.max_creature_level
		if l_level <= data.safe_room_level && r_level <= data.safe_room_level
			l_level = 0
			r_level = 0
		end

		# the areas are pretty similiar at this point, so now look at which has a higher density of spawn rooms.
		l_density = l.spawn_rooms.length.to_f / l.hunting_rids.length.to_f
		r_density = r.spawn_rooms.length.to_f / r.hunting_rids.length.to_f
		if (l_density - r_density).abs() <= 0.15
			l_density = 0
			r_density = 0
		end

		# if all else is the same, as a last resort we'll choose the are that has the most spawn rooms
		[l_time, r_spawn_count, l_level, r_density, r.spawn_rooms.length] <=> [r_time, l_spawn_count, r_level, l_density, l.spawn_rooms.length]
	end
end

########################################################################################################################
# build_hunting_plan - the main algorithm that puts all the pieces together.

def self.build_hunting_plan(target_creature)
	#  capture timing information in author mode.
	start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
	capture_time = -> () {
		now = Process.clock_gettime(Process::CLOCK_MONOTONIC)
		elapsed = now - start_time
		start_time = now
		return elapsed
	}

	# 1. construct a SpawnRoom object for each spawn room, gather information about each spawn room,
	#    traverse outward from each spawn room to find its reachable radius, optionally simulate creature wander to
	#    include additional hunting rooms, and gather the SpawnRoom objects for each spawn id into an array.

	spawn_locales = build_spawn_locales(target_creature.spawn_ids)
	step1_elapsed = capture_time.call

  	# 2. resolve the locales of spawn rooms into HuntingArea objects. this may split a locale into multiple hunting
	#    areas if the rooms within the locale happen to be far apart, or if a subset of the locale is not bidirectionally
	#    connected to the rest (the ExcludedRooms can cause that to happen). the 'coyote' spawn rooms outside of WL gates
	#    has a stray spawn room that's 20+ rooms away from the others in its locale. this will handle situations like that.

	hunting_areas = build_hunting_areas(spawn_locales)
	step2_elapsed = capture_time.call

	# 3. consolidate hunting areas are bidirectionally reachable by each other according to their reachable_rids sets.

	hunting_areas = consolidate_hunting_areas(hunting_areas)
	step3_elapsed = capture_time.call

	# 4. all of the hunting areas are built at this point, so now we need to make sure that all of the hunting_rids
	#    within each area are interconnected. a hunting area may even contain two rooms that only are connected to each
	#    other via two independent 1-way paths.

	hunting_areas = internally_link_hunting_areas(hunting_areas)
	step4_elapsed = capture_time.call

	# 5. sort the finalized set of hunting areas to find the most desirable one

	sort_hunting_areas(hunting_areas)
	step5_elapsed = capture_time.call

	if data.author_mode
		echo "Step 1 #{'%.2f' % step1_elapsed} Step 2 #{'%.2f' % step2_elapsed} Step 3 #{'%.2f' % step3_elapsed} Step 4 #{'%.2f' % step4_elapsed} Step 5 #{'%.2f' % step5_elapsed}"
	end

	return hunting_areas.first
end

########################################################################################################################
# approximate_shortest_route

def self.bfs_distances_from(starting_rid, rooms)
  rooms_set = rooms.is_a?(Set) ? rooms : Set.new(rooms)
  visited_rids = {}
  queue = []
  head = 0
  queue << [starting_rid, 0]

  while head < queue.size
    current_rid, dist = queue[head]
    head += 1

    next if visited_rids.key?(current_rid)
    visited_rids[current_rid] = dist

    Room[current_rid].wayto.each do |adj_rid_s, way|
      adj_rid_i = adj_rid_s.to_i
      next unless rooms_set.include?(adj_rid_i)
      queue << [adj_rid_i, dist + 1] unless visited_rids.key?(adj_rid_i)
    end
  end

  return visited_rids
end


def self.calculate_all_distances(rooms)
  distances = {}

  rooms.each do |rid|
    distances[rid] = bfs_distances_from(rid, rooms)
  end

  return distances
end


def self.simulated_annealing_tsp(distance_hash, initial_temperature: 1000.0, cooling_rate: 0.995, iterations: 10_000)
  nodes = distance_hash.keys
  start_node = nodes.first
  middle_nodes = nodes - [start_node]

  # Start and end at the same node
  current_path = [start_node] + middle_nodes.shuffle + [start_node]
  current_cost = path_cost(current_path, distance_hash)

  best_path = current_path.dup
  best_cost = current_cost
  temperature = initial_temperature

  iterations.times do
    # Select random segment within the middle (excluding first/last)
    i = rand(1...current_path.size - 2)
    j = rand(i + 1...current_path.size - 1)

    # Reverse segment i..j, keep ends fixed
    candidate = current_path[0...i] +
                current_path[i..j].reverse +
                current_path[j + 1...-1] +
                [start_node]

    candidate_cost = path_cost(candidate, distance_hash)

    if candidate_cost < current_cost || Math.exp((current_cost - candidate_cost) / temperature) > rand
      current_path = candidate
      current_cost = candidate_cost

      if current_cost < best_cost
        best_path = current_path.dup
        best_cost = current_cost
      end
    end

    temperature *= cooling_rate
  end

  best_path.pop
  two_opt(best_path, distance_hash)
end


def self.two_opt(path, distance_hash)
  improved = true
  best_path = path.dup
  best_cost = path_cost(best_path, distance_hash)

  while improved
    improved = false
    (1...best_path.size - 2).each do |i|
      (i + 1...best_path.size - 1).each do |k|
        new_path = best_path[0...i] + best_path[i..k].reverse + best_path[k + 1..-1]
        new_cost = path_cost(new_path, distance_hash)
        if new_cost < best_cost
          best_path = new_path
          best_cost = new_cost
          improved = true
          break
        end
      end
      break if improved
    end
  end

  return [best_path, best_cost]
end


def self.path_cost(path, distance_hash)
  path.each_cons(2).sum { |a, b| distance_hash[a][b] }
end


def self.connect_gaps_in_path(path)
	new_path = Array.new

	push_path = -> (a, b) {
		if Room[a].wayto.include?(b.to_s)
			new_path.push(a)
		else
			connect_path = bfs_path_to(a, b, path, nil)
			connect_path.pop
			connect_path.each { |rid| new_path.push(rid) }
		end
	}

	path.each_cons(2) { |a, b| push_path.call(a, b) }
	push_path.call(path.last, path.first)

	return new_path
end


def self.approximate_shortest_route(rooms)
	if rooms.nil? || rooms.empty?
		echo 'approximate_shortest_route: no rooms provided'
		return nil
	end

	tsp_start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
	distance_hash = calculate_all_distances(rooms)
	optimized_path, optimized_cost = simulated_annealing_tsp(distance_hash)
	shortest_path = connect_gaps_in_path(optimized_path)
	total_elapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - tsp_start_time
	echo "found route of length #{shortest_path.length} for #{rooms.length} rooms after #{total_elapsed} seconds" if data.author_mode
	return shortest_path
end

########################################################################################################################
# process command line vars and populate the index containers

HuntPlan.load_profile()

if Script.current.vars.empty? || Script.current.vars[1] == 'help'
	respond
	respond "------------------------------------------------- Usage --------------------------------------------------"
	respond
	respond "  ;huntplan setup     | open settings dialog"
	respond "  ;huntplan bounty    | load boundary rooms for current bounty into the *bounty* bigshot profile,"
	respond "                      | load the bounty creature name and bigshot profile name into ebounty settings"
	respond "  ;huntplan ice troll | load boundary rooms for specified creature into the *default* bigshot profile"
	respond
	respond "---------------------------------------- Integration with ebounty ----------------------------------------"
	respond
	respond "  If you want ebounty to automatically invoke this script, edit ebounty.lic and paste the following code"
	respond "  as the very first line within its 'switch_profile' function. Note that the next time your ebounty script"
	respond "  gets updated you'll have to repeat this process."
	respond
	respond "    Script.run('huntplan', 'bounty');"
	respond "    if UserVars.hp['success'] == 1"
	respond "      return"
	respond "    end"
	respond
	respond "----------------------------------------------------------------------------------------------------------"
	respond
	exit
end

# fixme: allow passing a creature level and print out the creature names at that level

if Script.current.vars[1] == 'setup'
	HuntPlan::Setup.new(HuntPlan.data.settings).start
	exit
end

UserVars.hp ||= Hash.new
UserVars.hp['success'] = 0

target_creature_name = nil

if Script.current.vars[1] == 'bounty'
	data.is_bounty = true
	bounty_task = Bounty.task
	data.bounty_town = bounty_task.town()
	data.bounty_location = bounty_task.requirements[:area]
	target_creature_name = bounty_task.requirements[:creature]
	data.has_dangerous_creature_spawned = bounty_task.type == :dangerous_spawned
	data.is_dangerous_creature_bounty = data.has_dangerous_creature_spawned || bounty_task.type == :dangerous
else
	target_creature_name = Script.current.vars[0]
end

if target_creature_name.nil?
	print_msg("must supply a creature name or other directive")
	exit
end

target_creature_name.downcase!
data.target_creature = data.creature_index[target_creature_name]
if data.target_creature.nil?
	print_msg("creature not found: #{target_creature_name}")
	fput('quit') if data.author_mode
	exit
end

if data.target_creature.spawn_ids.empty?
	print_msg("no spawn areas found for: #{target_creature_name}")
	exit
end

# dying too much without being able to have a society on f2p
if data.author_mode && data.is_bounty
	# fixme: would like to make this smarter; had an instance where i wasn't able to find a bounty less than 3 levels greater than character.
	max_bounty_level = Char.level + 3 #Effects::Buffs.active?("Bounty Boost") ? Char.level : f2p? ? Char.level + 1 : Char.level + 3
	creature_level = data.target_creature.level
	if !creature_level.nil? && creature_level > max_bounty_level
		print_msg("creature level too high")
		exit
	end
end

# used to avoid hunting in rooms that are higher than this level. keep in mind the lvl 100+ case.
data.safe_room_level = [Char.level, data.target_creature.level ? data.target_creature.level : Char.level].max + 2

# build a reverse index that maps spawn rooms to creature names and spawn ids
data.creature_index.each do |creature_name,creature|
	creature.spawn_ids.each do |spawn_id|
		data.spawn_index[spawn_id].each do |room_id|
			data.room_index[room_id] ||= HuntPlan::RoomData.new()
			creature_room = data.room_index[room_id]
			creature_room.spawn_ids.add(spawn_id)
			creature_room.creature_names.add(creature_name)
			creature_room.merge_creature_level(creature.level)
    	end
  	end
end


########################################################################################################################
# exclude undesirable/dangerous paths and invoke the logic to build the hunting plan

class ExcludedPath
	attr_accessor :source,:destination,:command
	def initialize(source, destination)
		@source = source
		@destination = destination
   		@command = Room[source].wayto[destination]
	end
end


def self.ExcludePath(rid1, rid2)
	data.excluded_paths.push(ExcludedPath.new(rid1, rid2.to_s))
	data.excluded_paths.push(ExcludedPath.new(rid2, rid1.to_s))
end

HuntPlan.ExcludePath(7160, 8432)                    # upper trollfang, avoid falling off tree
HuntPlan.ExcludePath(8569, 8568)                    # cavernhold and secluded valley, dangerous/annoying areas best avoided entirely
HuntPlan.ExcludePath(3566, 3565) if Char.level < 30 # level ~15 bounty area, too easy to fall into spike pit and die
HuntPlan.ExcludePath(4312, 4313)                    # maze on old mine road causes bigshot wander logic to wig out
HuntPlan.ExcludePath(6633, 6634)                    # map DB is currently screwed up, 3 different rooms are mapped to 6634 and that messes up bigshot
HuntPlan.ExcludePath(6636, 6634)                    # map DB is currently screwed up, 3 different rooms are mapped to 6634 and that messes up bigshot
HuntPlan.ExcludePath(3584, 3924)                    # stronghold door is a puzzle to open
HuntPlan.ExcludePath(3697, 3698)                    # massive troll kings enrage with 500+ AS

# darkstone castle is currently gone
HuntPlan.ExcludePath(6955, 6985)
HuntPlan.ExcludePath(6955, 22229)

# don't restore excluded paths until dying, so later logic like finding the starting room won't try to cross an excluded path
before_dying { data.excluded_paths.each{ |excluded| Map[excluded.source].wayto[excluded.destination] = excluded.command  } }

data.excluded_paths.each{ |excluded| Map[excluded.source].wayto.delete(excluded.destination) }

########################################################################################################################
# run the primary logic to build the hunting area

hunting_area = HuntPlan.build_hunting_plan(data.target_creature)
hunting_rids = hunting_area.hunting_rids.to_a
starting_rid = hunting_area.nearest_rid

if hunting_rids.nil?
	print_msg("failed to build hunting area")
	exit
end

if starting_rid.nil?
	print_msg("hunting area not reachable")
	exit
end

hunting_boundary_rids = get_boundaries_from_room_ids(hunting_rids)

########################################################################################################################
# approximate the shortest path that reaches all rooms and ends back up at the start

shortest_route = approximate_shortest_route(hunting_rids)
shortest_route.rotate!(shortest_route.index(starting_rid))


########################################################################################################################
# debugging - print spawn rooms that were excluded

if data.author_mode
	hunting_spawn_ids = Set.new
	hunting_rids.each do |rid|
		current_room = data.room_index[rid]
		current_room.spawn_ids.each { |spawn_id|
			if data.target_creature.spawn_ids.include?(spawn_id)
				hunting_spawn_ids.add(spawn_id)
			end
		}
	end

	respond "included spawn ids: #{hunting_spawn_ids}"

	hunting_spawn_ids.each do |spawn_id|
		ignored_spawn_rooms = data.spawn_index[spawn_id] - hunting_rids
		if !ignored_spawn_rooms.empty?
			print_msg("excluded #{spawn_id}: #{ignored_spawn_rooms}")
		end
	end
end


########################################################################################################################
# build the list of targets, list of creatures to flee from, etc.

# kill_targets is an array so that the primary kill target is kept first in the list
flee_targets = Array.new
kill_targets = Array.new
safe_targets = Array.new

hunting_area_creature_names = Set.new
hunting_area.spawn_rids.each { |rid| data.room_index[rid].creature_names.each{ |name| hunting_area_creature_names.add(name) } }

# note that bigshot only matches an entry in its targets list against a creature's full name or noun;
# if the target is set to "krolvin warrior" it will not attack "grizzled krolvin warrior",
# but when the target it set to "warrior", it will attack both of those because the nouns match.
# this script uses fully qualified names because the noun often isn't enough to distinguish two creatures in
# a given area e.g. perhaps we want to attack "forest troll" but not "cave troll", the noun isn't enough.
if data.is_dangerous_creature_bounty
	insert_dangerous_creature = -> (creature_name) {
		# trimmed just in case there are ever creatures like 'ancient ghoul master' that can also be a "dangerous creature" bounties
		trimmed_name = creature_name.delete_prefix('ancient ').delete_prefix('grizzled ')
		kill_targets.push('ancient ' + trimmed_name)
		kill_targets.push('grizzled ' + trimmed_name)
	}

	data.target_creature.names.each { |name| insert_dangerous_creature.call(name) }
end

# if the dangerous creature has spawned, then we'll only look for that creature and ignore all the others
if !data.has_dangerous_creature_spawned
	data.target_creature.names.each { |name| kill_targets.push(name) }
end


# find creatures in the vicinity that could wander into the current area.
processed_targets = Set.new
creatures_in_proximity = find_creatures_in_vicinity(hunting_rids, 10)
creatures_in_proximity.each do |creature_name|
	next if processed_targets.include?(creature_name)
	processed_targets.add(creature_name)

	# "ancient ghoul master" is a normal creature, not a "dangerous creature" for a bounty,
	# is_kill_target makes sure we don't add it to the flee list
	is_kill_target = kill_targets.include?(creature_name)
	creature = data.creature_index[creature_name]

	# if a creature's level isn't known, assume the worst and consider it a flee target.
	if creature.nil? || creature.level.nil?
		print_msg("missing creature level: #{creature_name}")
		flee_targets.push(creature_name) if !is_kill_target
		next
	end

	# safe targets won't be attacked in most cases, and won't be counted towards the flee count.
	# this is conservative due to Force on Force mechanic
	is_safe_target = creature.level + 10 <= [data.target_creature.level, Char.level].max

	# don't attack, but still count towards the flee_count
	is_weak_target = creature.level + 5 <= [data.target_creature.level, Char.level].max

	# creatures that are reasonable to attack in addition to the primary target
	is_good_target = creature.level <= [data.target_creature.level, Char.level - 1].max

	if is_kill_target || is_safe_target || is_good_target && !data.excluded_creatures.include?(creature_name)
		# target only the bountry creature unless the hunting area is small,
		# in which case we'll kill other creatures so the one we're looking for will spawn.
		# only kill creatures that spawn in the target area; don't kill creatures in additional areas we wandered into,
		# or creatures that wandered into the target area from an outside area.

		if !is_kill_target &&
			(!data.is_bounty && !is_safe_target && !is_weak_target || hunting_rids.length <= 15) &&
			!data.has_dangerous_creature_spawned &&
			hunting_area_creature_names.include?(creature_name)
				kill_targets.push(creature_name)
		end

		if is_safe_target
			safe_targets.push(creature_name)
		end
	else
		flee_targets.push(creature_name)
	end
end



########################################################################################################################
# load the bounty creature into the EBounty settings config file as well as its currently loaded settings.
# that way we can either invoke this loader script while EBounty isn't running, or we can modifiy the EBounty code to
# call this script in its switch_profile logic

# fixme: make the resting room for each town configurable.
if data.author_mode
	resting_rooms = {
		'Icemule Trace'      => 21689,
		'Kharam-Dzu'         => 1932,
		"Kraken's Fall"      => 28813,
		'Mist Harbor'        => 3668,
		"River's Rest"       => 10855,
		'Solhaven'           => 5732,
		"Ta'Illistim"        => 638,
		"Ta'Vaalor"          => 3542,
		"Wehnimer's Landing" => 8859,
		'Zul Logoth'         => 1005,
		'Cold River'         => 29870
	}
else
	resting_rooms = {
		'Icemule Trace'      => 2300,
		'Kharam-Dzu'         => 1932,
		"Kraken's Fall"      => 28813,
		'Mist Harbor'        => 3668,
		"River's Rest"       => 10861,
		'Solhaven'           => 1438,
		"Ta'Illistim"        => 188,
		"Ta'Vaalor"          => 3519,
		"Wehnimer's Landing" => 228,
		'Zul Logoth'         => 1005,
		'Cold River'         => 29870
	}
end

resting_rooms["Wehnimer's Landing and Icemule Trace"] = resting_rooms["Wehnimer's Landing"]
resting_rooms["Wehnimer's Landing and Solhaven"] = resting_rooms["Wehnimer's Landing"]
resting_rooms["the Broken Lands"] = resting_rooms["Wehnimer's Landing"] # bounty "Sheruvian initiate in the Broken Lands near the Broken Lands"
resting_rooms["Vornavis"] = resting_rooms["Solhaven"] # unconfirmed, is this needed?

resting_rid = UserVars.hp['resting_rid_override']
resting_rid ||= data.bounty_town && resting_rooms.include?(data.bounty_town) ?
	resting_rooms[data.bounty_town] : Map[starting_rid].find_nearest(resting_rooms.values)

spawn_rids_s = hunting_area.spawn_rids.to_a.join(',')
hunting_rids_s = hunting_rids.join(',')
hunting_boundary_rids_s = hunting_boundary_rids.join(',')
safe_targets_s = safe_targets.join(',')
flee_targets_s = flee_targets.join(',')
hunting_route_s = shortest_route.join(',')

format_list = -> (list) {
	max_length = 10
	s = list.to_a.take(max_length).join(',')
	s << "...#{list.size - max_length} more" if list.size > max_length
	return s
}


print_results = -> {
	respond "  Bounty Town: #{data.bounty_town}" if !data.bounty_town.nil?
	respond "  Bounty Location: #{data.bounty_location}" if !data.bounty_location.nil?
	respond "  Primary Target: #{target_creature_name}"
	respond "  Kill Targets: #{kill_targets.join(',')}"
	respond "  Safe Targets: #{safe_targets_s}" if !safe_targets_s.empty?
	respond "  Flee Targets: #{flee_targets_s}" if !flee_targets_s.empty?
	respond "  Resting Room: #{resting_rid}"
	respond "  Starting Room: #{starting_rid}"
	respond "  Boundary Rooms: #{hunting_boundary_rids_s}"
	respond "  Spawn Rooms: #{format_list.call(hunting_area.spawn_rids)}"
	respond "  Hunting Rooms: #{format_list.call(hunting_rids)}"
	respond "  Shortest Hunting Route: #{format_list.call(shortest_route)}" if !shortest_route.nil?
}

if !Script.exists?('bigshot')
	print_msg("bigshot isn't installed, no settings were saved")
	print_results.call
	exit
end

bigshot_profile = data.settings[data.is_bounty ? :bounty_profile : :default_profile]

if data.is_bounty
	ebounty_filename = "#{DATA_DIR}/#{XMLData.game}/#{Char.name}/ebounty.yaml"
	ebounty_slot = data.settings[:ebounty_slot]
	names_key = "names_#{ebounty_slot}".to_sym
	profile_name_key = "profile_name_#{ebounty_slot}".to_sym
	profile_key = "profile_#{ebounty_slot}".to_sym
	kill_key = "kill_#{ebounty_slot}".to_sym

	update_settings = -> (settings) {
		settings[names_key] = target_creature_name
		settings[profile_name_key] = bigshot_profile
		settings[profile_key] = bigshot_profile
		# huntplan will manage when its appropriate to attack only the bounty creature so don't let ebounty interfere
		settings[kill_key] = false
	}

	if File.exist?(ebounty_filename)
		ebounty_settings = YAML.load_file(ebounty_filename)
		update_settings.call(ebounty_settings)
		File.write(ebounty_filename, ebounty_settings.to_yaml)
		print_msg("HuntPlan saved ebounty settings in slot '#{ebounty_slot}'")
	end

	if defined?(EBounty)
		update_settings.call(EBounty.data.settings)
		# huntplan will manage the appropriate targets so so don't let ebounty interfere by modifying the bigshot targets
		EBounty.data.creature = nil
	end
end

bigshot_profile_path = File.join(DATA_DIR, XMLData.game, Char.name, "bigshot_profiles", bigshot_profile + '.yaml')
bigshot_settings = YAML.load_file(bigshot_profile_path) if File.exist?(bigshot_profile_path)
bigshot_settings ||= UserVars.op
bigshot_settings ||= Hash.new

if data.author_mode
	slots = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
	attack_routines = Array.new
	new_kill_targets = Array.new

	# fixme: add more styles and make the style configurable
	hunting_style = nil
	if Char.profession == 'Wizard'
		hunting_style = 'wizard_bolt'
	elsif Char.profession == 'Ranger'
		hunting_style = 'ranger_archer_sniper'
	elsif Char.profession == 'Bard'
		hunting_style = 'bard_melee'
	elsif Char.profession == 'Sorcerer'
		hunting_style = 'sorcerer_warding'
	elsif Char.profession == 'Cleric'
		hunting_style = 'cleric_warding'
	else
		echo "MISSING hunting_style"
		exit
	end

	kill_targets.each do |creature_name|
		creature_data = data.creature_index[creature_name]
		creature_base_name = creature_name.delete_prefix('ancient ').delete_prefix('grizzled ')
		creature_data ||= data.creature_index[creature_base_name]

		is_undead = creature_data.types.include?('undead')
		is_noncorporeal = creature_data.types.include?('noncorporeal')
		is_immune_fire = creature_data.immunities.include?('fire')
		is_weak_to_fire = creature_data.weaknesses.include?('fire')
		is_immune_steam = creature_data.immunities.include?('steam')
		is_immune_cold = creature_data.immunities.include?('cold')
		is_safe_target = safe_targets.include?(creature_name)

		# rest until within one off-node mana pulse of being full
		lines = Lich::Util.quiet_command_xml('mana', /<output/).join()
		if lines =~ /Maximum Mana Points:[^\d]+(\d+)[^\d]+(\d+)/
			max_mana = [$1.to_i, $2.to_i].max
			if lines =~ /Mana gained off node:[^\d]+(\d+)[^\d]+(\d+)/
				mana_pulse_off_node = [$1.to_i, $2.to_i].max
				bigshot_settings['rest_till_mana'] = (100 * (max_mana - mana_pulse_off_node) / max_mana.to_f).ceil
			end
		end

		routine = Array.new
		if hunting_style == 'wizard_bolt'
			if Spell[516].known? && !creature_data.immunities.include?(516)
				routine.push("leech(once !m#{Char.max_mana * 2 / 3})")
			end

			if Spell[909].known? && !HuntPlan.f2p? && !is_safe_target && !is_noncorporeal && !creature_data.immunities.include?(909)
				routine.push("stomp(once prone)")
			elsif Spell[410].known? && !is_safe_target && !is_noncorporeal
				routine.push("incant 410(once prone)")
			end

			if Spell[501].known? && !is_undead && !creature_data.immunities.include?(501)
				routine.push("incant 501(once prone m#{Char.max_mana * 1 / 4})")
			end

			# don't bother wasting the mana on safe targets (except for ancient/grizzled)
			if Spell[917].known? && !is_safe_target
				routine.push("incant 917(once m#{Char.max_mana * 1 / 2})")
			end

			# fixme: use this if attuned to an element and attacking with that same element
			#if Spell[502].known?
			#	routine.prepend("incant 502(once m#{Char.max_mana * 1 / 4})")
			#end

			if Spell[906].known? && is_weak_to_fire && !is_immune_fire
				if Spell[908].known? && Skills.elfire >= 4
					routine.push('incant 908 channel(mob3)')
					routine.push('incant 906 channel(!mob3)')
				else
					routine.push('incant 906 channel')
				end
			elsif Skills.elfire >= 20 && Spell[903].known? && !is_immune_steam
				if Spell[908].known? && Skills.elfire >= 4
					routine.push('incant 908 channel(mob3)')
					routine.push('incant 903 channel evoke(!mob3)')
				else
					routine.push('incant 903 channel evoke')
				end
			elsif Spell[904].known?
				if Spell[908].known? && Skills.elfire >= 4 && !is_immune_fire
					routine.push('incant 908 channel(mob3)')
					routine.push('incant 904 channel(!mob3)')
				else
					routine.push('incant 904 channel')
				end
			end

			if Char.level <= 10 && Spell[1700].known?
				routine.push('incant 1700 evoke(!m10)')
			end
		elsif hunting_style == 'sorcerer_warding'
			if Spell[703].known? && Char.level >= 3
				routine.push("incant 703(once)")
			end

			if !HuntPlan.f2p? && Spell[709].known? && Char.level >= 9
				routine.push("incant 709(once prone m#{Char.max_mana * 1 / 4})")
			end

			if Char.level >= 20 && Spell[705].known?
				routine.push("incant 705 channel")
			elsif Spell[702].known?
				routine.push("incant 702 channel")
			end

			if Char.level <= 10 && Spell[1700].known?
				routine.push('incant 1700(!m10)')
			end
		elsif hunting_style == 'ranger_archer_sniper'
			if Spell[610].known? && !is_noncorporeal && !is_safe_target
				routine.push("kweed(!hidden)")
			end

			if Skills.rangedweapons >= 50
				routine.push("barrage(!hidden)")
			end

			if Spell[608].known? && !is_safe_target
				if Spell[625].active
					routine.push("incant 608(!hidden)")
				else
					routine.push("incant 608(!hidden outside)")
				end
			end

			if !is_safe_target
				routine.push("hide")
			end

			routine.push("fire(x3)") # if a creature keeps spotting you, fire a few times before trying to hide again
		elsif hunting_style == 'bard_melee'
			lines = Lich::Util.quiet_command_xml('song status', /renewal cost/).join()
			if lines =~ /Your current renewal cost is (\d+) mana./
				song_cost = $1.to_i

				# fixme: how many mana pulses per renewal cycle? this currently assumes 2
				song_cost = song_cost + [0, song_cost - 2 * mana_pulse_off_node].max
			end

			if Spell[1008].known?
				routine.push("incant 1008(prone m#{song_cost + Spell[1008].mana_cost()})")
			end

			if Spell[1001].known?
				routine.push("incant 1001 (once m#{song_cost + Spell[1001].mana_cost()})")
			end

			if Spell[1002].known? && !creature_data.immunities.include?(1002)
				routine.push("incant 1002 (once m#{song_cost + Spell[1002].mana_cost()})")
			end

			if Spell[1005].known? && !is_undead && !creature_data.immunities.include?(1005)
				routine.push("incant 1005(prone m#{song_cost + Spell[1005].mana_cost()})")
			end

			if Skills.polearmweapons >= 10
				routine.push("charge(prone)")
			end

			routine.push("kill(x3)")
		elsif hunting_style == 'cleric_warding'
			if Spell[302].known?
				routine.push('incant 302 channel')
			end

			if Spell[1700].known?
				routine.push('incant 1700(!m10)')
			end
		end

		if routine.empty?
			print_msg("HuntPlan has no attack routine for '#{creature_name}'")
			fput 'exit' if data.author_mode
			exit
		end

		routine = routine.join(',')
		index = attack_routines.find_index(routine)
		if index.nil?
			if !routine.empty? && attack_routines.length < slots.length
				index = attack_routines.length
				attack_routines.push(routine)
			else
				index = 0
			end
		end

		if index == 0
			new_kill_targets.push(creature_name)
			bigshot_settings['hunting_commands'] = routine
		else
			new_kill_targets.push("#{creature_name}(#{slots[index]})")
			bigshot_settings["hunting_commands_#{slots[index]}"] = routine
		end
	end

	# clear unused routines from backtrack_map hunts
	while attack_routines.length < slots.length
		bigshot_settings["hunting_commands_#{slots[attack_routines.length]}"] = ''
		attack_routines.push('')
	end

	if hunting_style == 'ranger_archer_sniper'
		bigshot_settings['sneaky_sneaky'] = true
		bigshot_settings["archery_aim"] = "head,right leg,left leg,chest"
	end

	kill_targets = new_kill_targets
end

# if the dangerous creature has spawned, the kill targets are already limited to 'grizzled' and 'ancient' creatures,
# otherwise prepend this regex that will match boss/glam creatures.
# bigshot will still flee from boss/glam creatures when its flee setting is enabled.
# fixme: bigshot needs to be changed to use regex substitition for safe/flee targets in the same way it does for kill targets
bs_kill_targets = kill_targets.map{ |s| s.start_with?('ancient', 'grizzled') ? s : "(?:.*)" + s }

# may not find a resting_rid e.g. red forest Map[24675].find_nearest([21689, 1932, 28813, 3668, 10855, 5732, 638, 3542, 8859, 1005, 29870, 8859, 8859, 8859, 5732])
# in that case, just leave in the backtrack_map value
bigshot_settings['resting_room_id'] = resting_rid.to_s if !resting_rid.nil?
bigshot_settings['hunting_room_id'] = starting_rid.to_s
bigshot_settings['hunting_boundaries'] = hunting_boundary_rids_s
bigshot_settings['always_flee_from'] = flee_targets_s
bigshot_settings['invalid_targets'] = safe_targets_s # bigshot won't count these targets towards the flee count
bigshot_settings['targets'] = bs_kill_targets.join(',')

create_and_write_file(bigshot_profile_path, bigshot_settings.to_yaml)
UserVars.op = bigshot_settings
print_msg("HuntPlan saved bigshot profile '#{bigshot_profile}'")

if Script.exists?('wander')
	Script.run('wander', 'clear', { quiet: true })
	Script.run('wander', "add #{hunting_boundary_rids.join(' ')}", { quiet: true });
end

UserVars.hp['kill_targets'] = kill_targets.join(',')
UserVars.hp['hunting_rids'] = hunting_rids_s
UserVars.hp['spawn_rids'] = spawn_rids_s
UserVars.hp['hunting_route'] = hunting_route_s
UserVars.hp['success'] = 1

print_results.call

end # HuntPlan