=begin
  Helps you get better stats when rolling a character without needing to spam "g" for hours upon hours...

	  author: LostRanger (thisgenericname@gmail.com)
	  game: gemstone
	  tags: utility
	  required: Lich >= 4.6.0.

  version: 2.1.0 (2020-04-01)

  changelog:
    version 2.1.0 (2020-04-01)
      * Now featuring Advanced Nostalgia Technology(tm)
=end
module AutoRoller
    class Question
        def initialize(*args)
            @message = args
            @current_proc = nil
            @prompt_proc = nil
            @confirm_proc = nil
        end
        def current(&block)
            @current_proc = block
            return self
        end
        def prompt(&block)
            @prompt_proc = block
            return self
        end
        def confirm(&block)
            @confirm_proc = block
            return self
        end
        def ask
            respond @message if @message and @message.length > 0
            respond "" if @current_proc and @message and @message.length > 0
            @current_proc.call if @current_proc
            while true
                @prompt_proc.call if @prompt_proc

                unique_get =~ /^(?:<c>)?\s*(.*?)\s*$/
                msg = $1.downcase
                return -1 if msg == 'back'
                return 1 if @confirm_proc.call(msg)
            end
        end
    end

    BEST_POSSIBLE = [100, 90, 90, 90, 60, 60, 60, 50, 50, 50]
    WORST_POSSIBLE = [50, 50, 50, 40, 40, 40, 20, 20, 20, 20]
    ROLL_RANGE = [
        [50, 41], [50, 41], [50, 41],
        [40, 21], [40, 21], [40, 21],
        [20, 31], [20, 31], [20, 31],
        [20, 81]
    ]

    def self.lagsleep(n)
        return if @script.vars.include?("--fast")
        sleep n
    end

    def self.generate_roll()
        return ROLL_RANGE.map{|a, b| a + rand(b)}
    end

    def self.bold_respond(msg)
        if $fake_stormfront
            _respond "#{monsterbold_start}#{msg}#{monsterbold_end}\r\n"
        else
            _respond "<output class=\"mono\" />\r\n#{monsterbold_start}#{msg}#{monsterbold_end}\r\n<output class=\"\" />"
        end
    end

    def self.run(script)
        @script = script
        script.want_downstream = false
        script.want_downstream_xml = true

        unless script.vars.include?("--inn")
            fput "look"
            nil until get =~ /<style id="roomName"|(GEMSTONE IV CHARACTER MANAGER SYSTEM)/
            unless $1
                echo "Please CHECK IN, then restart this script."
                exit
            end
        end

        restart_scripts = []
        # voodoo and spellcaster interfere with us.  If they're running, kill them and restart them after we exit.
        ['voodoo', 'spellcaster'].each do |script|
            if Script.running?(script)
                restart_scripts << script
                Script.kill(script)
            end
        end
        before_dying do
            UpstreamHook.remove("autoroller-hook")
            restart_scripts.each{|s| Script.start(s)}
            fput "4"
        end

        # Block all non-Lich commands except quit/exit
        UpstreamHook.add("autoroller-hook", proc do |xml|
            next xml if xml =~ /^(?:<c>)?(?:;|exit?|quit?)/i
            script.unique_buffer << xml.strip
            next nil
        end)

        # Advertise ourselves.
        msg = []
        msg << "================================================================================"
        msg << "Lost Ranger's GemStone III AutoRoller"
        msg << "Version 2.1.0 (Beta 5)"
        msg << "Copyright (C) 1996-2020 Daniel J. Grace."
        msg << ""
        msg << "This program may be obtained from the Lich repository, the official website at"
        msg << "<https://github.com/dewiniaid/gs4-lich-scripts/>, or one of the authorized"
        msg << "mirrors mentioned on that website. You should not obtain this program from any"
        msg << "other source."
        msg << ""
        msg << "For technical support, send email to: "
        msg << "<lostranger@play.net>"
        msg << ""
        msg << "This program is distributed in the hope that it will be useful, but WITHOUT ANY"
        msg << "WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A"
        msg << "PARTICULAR PURPOSE."
        msg << "================================================================================"
        msg << ""
        msg << ""
        msg << "Please wait..."
        respond msg
        lagsleep 1.2
        script.want_upstream = true
        msg = []
        msg << "Note: This is a BETA vesion of the AutoRoller."
        msg << ""
        msg << "As such, some things may not work correctly, as it is possible that some bugs"
        msg << "may still exist. In addition, the messaging you receive may not be clear. If"
        msg << "you find things which you have difficulties understanding, or encounter any"
        msg << "bugs, you are strongly encouraged to report them to <lostranger@play.net>"
        msg << ""
        msg << "[Press ENTER when you have read this message]"
        respond msg
        unique_get
        msg = []
        msg << "Welcome to Lost Ranger's GemStone III AutoRoller!"
        msg << ""
        msg << "Since it is obvious that different users of the AutoRoller have different"
        msg << "things they are looking for when they are trying to roll a character, you are"
        msg << "allowed to change several things to configure this program to suit you."
        msg << ""
        msg << "You will now be asked a series of questions that will be used to determine how"
        msg << "you would like the AutoRoller to be set up. At any time, you can go to the"
        msg << "previous question and change your answer by typing 'Back' To skip any"
        msg << "question and assume the default answer for it, simply press ENTER without"
        msg << "typing anything."
        msg << ""
        msg << "Press ENTER for the first question."
        respond msg
        unique_get

        min_roll = 650
        high_roll = 600
        show_best = true
        min_best = nil
        worst_case_roll = nil
        summarize_rolls = true
        sort_rolls = true

        questions = [
            Question.new(
                "Each time the AutoRoller gets a series of rolls, the numbers will be added",
                "together to determine that Roll's total. A perfect roll, consisting of the",
                "numbers [90, 90, 90, 60, 60, 60, 50, 50, 50, 100] totals to 700, while the",
                "theoretical minimum possible roll, [50, 50, 50, 40, 40, 40, 20, 20, 20, 20],",
                "totals to 350.",
                "",
                "You can set up the AutoRoller to require roll totals to be above a certain",
                "amount. Generally, you'll want a minimum roll total between 630 and 660. If",
                "you are not concerned with the minimum roll total, you need only type NO"
            ).current{
                if min_roll
                    respond "Currently, the minimum roll total is #{min_roll}."
                else
                    respond "Currently, the minimum roll total is disabled."
                end
            }.prompt{
                respond "Enter a new minimum roll total, NO to disable, or ENTER to leave unchanged:"
            }.confirm{|msg|
                if msg == ''
                    if min_roll
                        msg = min_roll.to_s
                    else
                        msg = 'no'
                    end
                end
                if msg == 'no'
                    respond "[The minimum roll total is disabled]"
                    min_roll = nil
                    next true
                elsif msg =~ /^\d+$/
                    n = msg.to_i
                    if n < 350 or n > 700
                        respond "Minimum roll total must be between 350 and 700."
                        next false
                    end
                    min_roll = n
                    respond "[The minimum roll total is set to #{min_roll}]"
                    next true
                end
                next false
            },

            Question.new(
                "For informational purposes, you can have the AutoRoller highlight rolls that",
                "total to a certain amount. These rolls will be flagged (HIGH) if you are",
                "using Roll Summaries.",
                "",
                "If you want to enable this behavior, type the lowest total that the AutoRoller",
                "should highlight. If you do not want to enable this feature, type NO."
            ).current{
                if high_roll
                    respond "Currently, rolls totalling over #{high_roll} will be highlighted."
                else
                    respond "Currently, roll highlighting is disabled."
                end
            }.prompt {
                respond "Enter a new minimum total for highlighting, NO to disable, or ENTER to leave unchanged:"
            }.confirm{|msg|
                if msg == ''
                    if high_roll
                        msg = high_roll.to_s
                    else
                        msg = 'no'
                    end
                end
                if msg == 'no'
                    respond "[Roll highlighting is disabled.]"
                    high_roll = nil
                    next true
                elsif msg =~ /^\d+$/
                    n = msg.to_i
                    if n < 350 or n > 700
                        respond "Minimum roll total for highlighting must be between 350 and 700."
                        next false
                    end
                    high_roll = n
                    respond "[Rolls over #{high_roll} will be highlighted]"
                    next true
                end
                next false
            },

            Question.new(
                "The AutoRoller keeps track of the best roll it's seen and recognizes when it",
                "finds a better one. If you want, it can also echo this these rolls to the",
                "Wizard's thought window. Note that for this feature to be of much use, the",
                "Thought Window must be open."
            ).current{
                if show_best
                    respond "Currently, this feature is enabled"
                else
                    respond "Currently, this feature is disabled"
                end
            }.prompt{
                respond "Would you like to enable this feature? (Yes/No)"
            }.confirm{|msg|
                if msg == 'yes'
                    show_best = true
                elsif msg == 'no'
                    show_best = false
                elsif msg != ''
                    next false
                end
                if show_best
                    respond "[The thought window will be used.]"
                else
                    respond "[The thought window will not be used.]"
                end
                next true
            },

            Question.new(
                "You can also configure the AutoRoller to stop if a new best roll is over a",
                "certain amount. This amount should be chosen carefully, as setting this number",
                "too low will cause the AutoRoller to stop frequently for the first several",
                "rolls.",
                "",
                "If you would like to enable this feature, type the minimum total that a new",
                "best roll must have in order for the AutoRoller to stop. If you do not wish",
                "to enable this feature, type NO."
            ).current{
                if min_best
                    respond "Currently, this feature is enabled for best rolls that total to at least #{min_best}"
                else
                    respond "Currently, this feature is disabled"
                end
            }.prompt {
                respond "Enter a new total NO to disable, or ENTER to leave unchanged:"
            }.confirm{|msg|
                if msg == ''
                    if min_best
                        msg = min_best.to_s
                    else
                        msg = 'no'
                    end
                end
                if msg == 'no'
                    respond "[This feature is disabled.]"
                    min_best = nil
                    next true
                elsif msg =~ /^\d+$/
                    n = msg.to_i
                    if n < 350 or n > 700
                        respond "Minimum best roll must be between 350 and 700."
                        next false
                    end
                    min_best = n
                    respond "[The autoroller will stop if a new best roll is at least #{min_best}]"
                    next true
                end
                next false
            },

            Question.new(
                "The Worst-Case Roll is a powerful feature that allows you much more flexibility",
                "in rolling for stats. In fact, if used correctly, the Worst-Case Roll may be",
                "better than requiring any specific minimum total.",
                "",
                "The Worst-Case Roll is a set of ten numbers, each representing one of the ten",
                "die rolls. These numbers, sorted from highest to lowest, are compared against",
                "their corresponding numbers in each roll that is generated, also sorted highest",
                "to lowest. If any of the numbers in the roll are below their corresponding",
                "number in the worst-case roll, the roll is tossed out.",
                "",
                "An example Worst-Case Roll, if you wanted to ensure that none of the rolls you",
                "receive will be ten less then their maximum, is:",
                "[90, 80, 80, 80, 50, 50, 50, 40, 40, 40]",
            ).current{
                if worst_case_roll
                    respond "Currently, this feature is enabled and requires a roll at least as good as:", "[#{worst_case_roll.join(", ")}]"
                else
                    respond "Currently, this feature is disabled."
                end
            }.prompt{
                respond(
                    "If you want to use the worst-case roll feature, type ten numbers below,",
                    "separated by commas. If you do not wish to use this feature, type NO."
                )
            }.confirm{|msg|
                if msg == 'no'
                    worst_case_roll = nil
                elsif msg == ''
                    # do nothing
                elsif msg =~ /^(?:\s*\d+\s*[,;]){9}\s*\d+\s*$/
                    values = msg.split(/\s*[,;]\s*/).map!{|x| x.strip.to_i}
                    if values.length != 10
                        respond "You must specify exactly ten values."
                        next false
                    end
                    values.sort!
                    values.reverse!

                    ok = true
                    values.each_with_index do |value, ix|
                        if value < WORST_POSSIBLE[ix] or value > BEST_POSSIBLE[ix]
                            respond "Sorted values must be fall between the best- and worst-case possible rolls:"
                            respond "Best possible:  [#{BEST_POSSIBLE.map{|x| x.to_s.rjust(3)}.join(', ')}]"
                            respond "You entered:    [#{values.map{|x| x.to_s.rjust(3)}.join(', ')}]"
                            respond "Worst possible: [#{WORST_POSSIBLE.map{|x| x.to_s.rjust(3)}.join(', ')}]"
                            ok = false
                            break
                        end
                    end
                    next false unless ok
                    worst_case_roll = values
                else
                    next false
                end

                if worst_case_roll
                    respond "[The Worst-Case Roll is: #{values.join(', ')}]"
                else
                    respond "[The Worst-Case Roll Feature is disabled]."
                end
                next true
            },

            Question.new(
                "Would you like the AutoRoller to summarize rolls for you?",
                "",
                "If you enable this feature, rolls will be condensed so all of the information",
                "is available on one line, and you will be able to see each roll's total. Roll",
                "summaries allow you to fit a lot more rolls into the Game Window. They look",
                "like this:",
                "",
                "Roll: [85, 81, 82, 52, 59, 54, 48, 44, 47, 95], Total: 647, Below minimum total."
            ).current{
                if summarize_rolls
                    respond "Currently, roll summaries are enabled"
                else
                    respond "Currently, roll summaries are disabled"
                end
            }.prompt{
                respond "Would you like to enable this feature? (Yes/No)"
            }.confirm{|msg|
                if msg == 'yes'
                    summarize_rolls = true
                elsif msg == 'no'
                    summarize_rolls = false
                elsif msg != ''
                    next false
                end
                if summarize_rolls
                    respond "[Roll summaries will be used.]"
                else
                    respond "[Roll summaries will not be used.]"
                end
                next true
            },


            Question.new(
                "Would you like the AutoRoller to sort rolls for you?",
                "",
                "If you enable this feature, the numbers in a roll will be sorted from highest",
                "to lowest.",
            ).current{
                if sort_rolls
                    respond "Currently, rolls will be sorted."
                else
                    respond "Currently, rolls will not be sorted."
                end
            }.prompt{
                respond "Would you like to enable this feature? (Yes/No)"
            }.confirm{|msg|
                if msg == 'yes'
                    sort_rolls = true
                elsif msg == 'no'
                    sort_rolls = false
                elsif msg != ''
                    next false
                end
                if sort_rolls
                    respond "[Rolls will be sorted.]"
                else
                    respond "[Rolls will not be sorted.]"
                end
                next true
            },

            Question.new(
                "The AutoRoller is nearly finished asking questions. You will now be given the",
                "opportunity to review your options before you begin rolling.",
            ).current{
                msg = []
                msg << "- Rolls must total to at least #{min_roll}." if min_roll
                msg << "- Rolls that total to at least #{high_roll} will be highlighted." if high_roll
                msg << "- Best rolls will be echoed to the Thought Window" if show_best
                msg << "- The AutoRoller will stop on a new best roll if it is at least #{min_best}." if min_best
                msg << "- The Worst-Case Roll is [#{worst_case_roll.join(', ')}]" if worst_case_roll
                if summarize_rolls
                    if sort_rolls
                        msg << "- Rolls will be summarized and sorted."
                    else
                        msg << "- Rolls will be summarized."
                    end
                elsif sort_rolls
                    msg << "- Rolls will be sorted."
                end
                msg << ""
                respond msg
            }.prompt{
                respond(
                    "If you wish to change any of these options, type BACK and repeat it until you get",
                    "to the option you wish to change. Otherwise, type DONE now."
                )
            }.confirm{|msg|
                next msg == 'done'
            }
        ]

        question_index = 0
        while question_index < questions.length
            # echo "[Asking question #{question_index} out of #{questions.length}]"
            question_index += questions[question_index].ask
            if question_index < 0
                respond "[This is the first question.]"
                question_index = 0
            end
        end

        if $frontend == 'stormfront'
            _respond '<monopolize id=""/>'  # Break the CMGR monopoly
        end

        respond "Please wait..."
        lagsleep 1 + (rand() * 3)
        respond "Activating Advanced Nostalgia Technology(tm)..."
        lagsleep 1 + (rand() * 3)
        respond "Travelling to #{Char.name}'s distant past..."
        lagsleep 1 + (rand() * 3)
        bold_respond "... Doooo--weeeee--oooooooh... "
        lagsleep 3
        bold_respond "... OOoooh--uuuuuuh--oooooooh... "
        msg = []
        msg << ""
        msg << "      Simutronics Corporation"
        msg << ""
        msg << "              Presents"
        msg << "   ________________________________"
        msg << "  / \\                              \\"
        msg << "  |@/______________________________/"
        msg << "  |  .                            | ***************************************"
        msg << "  |. . +                          |"
        msg << "  |   .  ____                     |     Simutronics is proud to announce"
        msg << "  | +   /\\/\\/\\             (tm)   |          that its newest game"
        msg << "  |    .\\/  \\/ GemStone III       |"
        msg << "  |   .  \\  /                     |              CYBERSTRIKE"
        msg << "  | .   + \\/   Shadow/            |"
        msg << "  |_     .          /World        |          is now in OPEN beta!"
        msg << "   /  + .  .                      |"
        msg << "  |                               |   If you have a computer which is a"
        msg << "  |-------------------------------+   386SX 20MHz or better, with VGA and"
        msg << "  | |/~                           |   at least 2 Meg RAM, and the idea of"
        msg << "  | |\\nown throughout the land:   |   virtual reality combat sounds"
        msg << "  |                               |   interesting to you, we invite you to"
        msg << "  | 39068521 Enegue LionHeart     |   participate as a beta-tester. Simply"
        msg << "  | -------------------------     |   go to page 1380, and download the"
        msg << "  | 27325803 Dartaghan Darkstar   |   Front End for this exciting new game!"
        msg << "  | 23304892 Odds Bodkins         |"
        msg << "  | 19802594 Artuero Bresnahanini | ***************************************"
        msg << "  |                               |"
        msg << "  |                               |"
        msg << "/@|        Version 2.0            |"
        msg << "\\_/_______________________________/"
        msg << "  "
        msg << "  "
        msg << "               .\\|/.                                  .\\|/."
        msg << "               - * -  Have a Blast with the July KE!  - * -"
        msg << "               `/|\\'  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  `/|\\'"
        respond msg
        lagsleep 4 + (rand() * 4)
        respond "Travelled too far, moving forward..."
        lagsleep 1 + (rand() * 3)
        msg = []
        msg << "Welcome to GemStone VIII (R) v9.04.01"
        msg << "Copyright 2173 Simutronics Corp."
        msg << "All Rights Reserved"
        respond msg
        lagsleep 3 + (rand() * 4)
        respond "Travelled too far, trying this again..."
        lagsleep 1 + (rand() * 3)
        _respond "#{monsterbold_start}... Eeee-woooo, gree-eee-eee-whoo...#{monsterbold_end}"
        lagsleep 1 + (rand() * 2)
        _respond "#{monsterbold_start}... Deee-deee-deee-deee-deee-daaaaah-whooouoauooaghghgh---weeeeeesh... #{monsterbold_end}"
        lagsleep 1 + (rand() * 2)
        msg = []
        respond "Please wait for connection to game server."
        lagsleep (rand() + rand() + rand() + rand())
        msg << "                   -- Welcome to GemStone III --"
        msg << ""
        msg << "     Version 4.02 (C) Copyright 2000 Simutronics Corporation"
        msg << ""
        msg << ""
        msg << "Welcome back!"
        respond msg
        lagsleep 1 + (rand() * 2)

        char_name = Char.name.reverse
        char_name.capitalize!

        msg = []
        msg << ""
        msg << "                           GemStone III"
        msg << "                  Character Management System"
        msg << ""
        msg << "Character: #{char_name}"
        msg << ""
        msg << "1. View Character"
        msg << "2. View Skills and Spells"
        msg << "3. Retire Character/Family"
        msg << "4. Play GemStone"
        msg << ""
        msg << "Select (1-4):"
        respond msg
        lagsleep 0.25
        respond ">3"
        lagsleep 1 + (rand() * 2)
        msg = []
        msg << "WARNING!"
        msg << ""
        msg << "You have indicated that you wish to retire a distant relative of your character.  Once confirmed, this option may have DISASTROUS EFFECTS on the timeline."
        msg << ""
        msg << "To confirm this decision type RETIRE followed by the first name of your character.  Any other response will return you to the character manager system menu."
        msg << ""
        respond msg
        lagsleep 0.25
        respond ">retire #{char_name.downcase}"
        lagsleep 0.25
        respond "[We'll just skip over some boring stuff here...]"
        lagsleep 1.0

        respond "[Entering autoroller mode.]"
        best_total = 0
        roll_number = 0

        # Rig the dice roller
        bad_roll_number = 500 + rand(1500)
        good_roll_number = 20000 + rand(20000)
        # good_roll_number = 100 + rand(100)

        while true
            # Dialup sucks
            if script.vars.include?("--dsl")
                sleep 0.075
            else
                sleep(0.25 + rand()*0.4 + rand()*0.5 + rand()*0.6)
                # Occasional bigger lagspikes
                if rand(20) == 0
                    sleep(0.25 + rand()*7)
                end
            end

            unless summarize_rolls
                msg = []
                if roll_number == 0
                    msg << "Character Statistic Rolls"
                    msg << ""
                    msg << "For each of your character's 10 statistics a random value between"
                    msg << "1 and 100 (weighted) is generated.  These will be your character statistics"
                    msg << "when modifications are complete.  They reflect the current adroitness"
                    msg << "in each statistic and they can increase over time."
                    msg << ""
                    msg << "For each of the following stats, enter a number from the"
                    msg << "remaining values listed.  Enter G to generate new values."
                    msg << ""
                    msg << "                  Character Statistics"
                    msg << ""
                    msg << "(CO) Constitution                     (ST) Strength"
                    msg << "(DE) Dexterity                        (RE) Reflexes"
                    msg << "(DI) Discipline                       (CH) Charisma"
                    msg << "(WI) Wisdom                           (IN) Intelligence"
                    msg << "(LO) Logic                            (AU) Aura"
                    msg << ""
                    msg << ""
                else
                    msg << ""
                    msg << "Generating new die rolls..."
                    msg << ""
                    msg << ""
                end
                respond msg
            end

            roll_number += 1
            if roll_number == bad_roll_number
                roll = WORST_POSSIBLE.dup
            elsif roll_number == good_roll_number
                # Can't use BEST_POSSIBLE because it's sorted.
                roll = [90, 90, 90, 60, 60, 60, 50, 50, 50, 100]
            else
                roll = generate_roll
            end
            sorted_roll = roll.sort
            sorted_roll.reverse!
            if sort_rolls
                roll = sorted_roll
            end
            joined_roll = roll.join(', ')
            total = roll.sum
            keep = false
            short_reason = nil
            long_reason = nil

            # Figure out why we're probably not keeping this roll.
            if min_roll and total < min_roll
                keep = false
                short_reason = "Below minimum total"
            elsif worst_case_roll
                keep = true
                short_reason = "Meets roll criteria."
                long_reason = "This roll meets your criteria."
                sorted_roll.each_with_index do |v, ix|
                    if v < worst_case_roll[ix]
                        keep = false
                        short_reason = "Roll(s) below minimums"
                        break
                    end
                end
            else
                keep = true
                short_reason = "Meets roll criteria."
                long_reason = "This roll meets your criteria."
            end

            # Handle new best rolls, including thought window.
            is_best = total >= best_total
            if is_best
                best_total = total
                if min_best and total > min_best and not keep
                    keep = true
                    short_reason = "New best roll"
                    long_reason = "This roll is a new best roll."
                end
                short_reason = "(BEST) #{short_reason}"
                if show_best
                    msg = "\"[#{joined_roll}] Total: [#{total}]\""
                    if $fake_stormfront
                        _respond "You hear the faint thoughts of Bestroll echo in your mind:\n#{msg}"
                    else
                        _respond "<pushStream id=\"thoughts\"/>Bestroll: #{msg}\n<popStream/>\n"
                    end
                end
            end

            # Actually show the roll
            if summarize_rolls
                if high_roll and total > high_roll
                    bold_respond "Roll ##{roll_number}: [#{joined_roll}], total: #{total}, #{short_reason}"
                else
                    respond "Roll ##{roll_number}: [#{joined_roll}], total: #{total}, #{short_reason}"
                end
            elsif not keep
                respond(
                    "Values remaining: #{joined_roll}.",
                    "",
                    "  Constitution (CO) : g"
                )
            end

            if keep
                msg = []
                msg << "This roll meets your criteria. If you wish to begin placing your stats, do so now. Otherwise, type 'G' to resume the rolling process."
                msg << ">"
                msg << "Please enter one of the values listed, [H] for help, or [P] to return to the previous menu."
                msg << ""
                msg << "Values remaining: #{joined_roll}."
                msg << ""
                msg << "  Constitution (CO) : "
                respond msg

                while true
                    unique_get =~ /^(?:<c>)?\s*(.*?)\s*$/
                    msg = $1.downcase
                    redo if msg == ''
                    break if msg == 'g'
                    respond "Deactivating Advanced Nostalgia Technology(tm)..."
                    sleep 3
                    exit
                end
            end
        end
    end
end

AutoRoller.run(script)
