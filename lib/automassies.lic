# QUIET
=begin
	AutoMassies
	Created By: Vailan
	Date:       01-08-2021
	
	          author: Vailan (Vailan#0875 on discord)
            game: GS
            tags:spellup, mass, massies, blur, guard, color, spell
        		required: Lich >= 4.6.4
         		version: 2021.04.04.1
	
	This is an updated version of Massies v 1.0 by Stonmel. It has been enhanced to include calcualtions for multicast as well as selective
	casting of mass spells if you dont want to do more than one and know it. For example, only wanting to cast Guards even though you know
	both Guards and Blurs. Also the ability to just cast the spells without doing announcments or waiting.

	Example Commands
	;automassies  - By itself will look for what spells you can cast and cast as little over 4 hours as possible of them
	;automassies blur|blurs - Will cast Mass Blurs (911) and cast as little over 4 hours as possible
	;automassies guard|guards - Will cast Elemental Defense III (419) and cast as little over 4 hours as possible
	;automassies color|colors - Will cast Mass Colors (611) and cast as little over 4 hours as possible
	;automassies announce=# - Will Yell and Think on General (by Default) as well as Lnet on General (by Default) how long until you cast
														 with # as a value between 1 and 5 minutes
	;automassies yell=# - Will Yell how long until you cast with # as a value between 1 and 5 minutes
	;automassies think=# - Will Think on General (by Default), how long until you cast with # as a value between 1 and 5 minutes
	;automassies lnet=# - Will ;chat on Prime (by Default), how long until you cast with # as a value between 1 and 5 minutes
	;automassies thoughtChan=General|help|ooc|prime - will specify the channel you want to think on to announce
	;automassies lichChan=help|lnet|prime - will specify which lnet Channels to Use
	;automassies blur announce=4 channel=general - Would Yell and Think on General that spells will start in 4 minutes and would repeat the
	 																							 announcement at 3, 2 and 1 minute marks, the 3 second mark and as about to begin
	
	!!!!Special Note!!!! you can use MassComment.lic to update the uservar for the Comment message while this script is runningt if you
	need clear, change or set a message on the fly.
	
	********change log***********
	2020.11.20 - Initial publication
	2020.12.10 - Added Additional Message to let people know someone else is casting something
	2020.12.11 - Move Additional message to UserVars.autoMassiesComment and wrote masscomment.lic to allow you to set the message on the fly
	2021.01.06 - Updated to support new method of Ranger Colors using Evoke of 601 instead of 611 but it will likely break again when the "Spell" object gets fixed								
	2021.01.08 - Fixed bug in calculating ranger multicast
	2021.04.04 - Fixed bug in announcing blurs and guards with less than 1 minute left
	
	***********todo**************
	
	*********known issues********
	
	
	Credits: Special Thanks to Stonmel for the underlying framework in the original "Massies.lic" script which was used as a partial template
=end

VERSION = "2021.04.04.1"

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in LumnisMon"
  respond " This version is specific to the Stormfront frontend"
 	respond ""
  respond ""
  respond " Closing now"
  respond ""
  exit
end

def giveInstructions
	respond "AutoMassies Usage"

end



UserVars.autoMassiesComment = ""
Loc = nil
#Set IntentFlags
doBlurs = false
doGuards = false
doColors = false

blursMinutesPerCast = ((1200 + (60 * Spells.wizard))/60)
guardsMinutesPerCast = ((1200 + (60 * Spells.minorelemental))/60)
colorsMinutesPerCast = ((1200 + (60 * Spells.ranger))/60)

echo "Blurs Minutes per cast #{blursMinutesPerCast}"
echo "Guards Minutes per cast #{guardsMinutesPerCast}"
echo "Colors Minutes per cast #{colorsMinutesPerCast}"

willYell = false
willThink = false
willLNet = false
thoughtChan = "General"
lichChan = "General"
addedAnnounceText = ""

currentTime =  Time.now
waitTime = 0


Blur_cycle = nil
Guard_cycle = nil
Color_cycle = nil

emcRanks = Skills.emc
smcRanks = Skills.smc
mmcRanks = Skills.mmc

emcIsPrimary = false
smcIsPrimar = false
mmcIsPrimary = false
hybridPrimaries = false

multicastElemental = 1
multicastSpirit = 1


if emcRanks > smcRanks and emcRanks > mmcRanks
	emcIsPrimary = true
end

if smcRanks > emcRanks and smcRanks > mmcRanks
	smcIsPrimary = true
end

if mmcRanks > emcRanks and mmcRanks > smcRanks
	mmcIsPrimary = true
end

if emcIsPrimary or smcIsPrimary or mmcIsPrimary
	#we have a primary
else
	#nothing is primary so need to see what we have
	hybridPrimaries = true
end

def getMultiCastPrimary(ranks)
	#Mana Control ranks	0	25	50	75	100	125	150	175	200	225	250
	return ((ranks / 25) + 1).to_i
end

def getMultiCastHybrid(ranks)
	#0	17	34	50	67	84	100	117	134	150	167	184	200	217	234	250
	if ranks < 17 then return 1 end
	if ranks < 34 then return 2 end
	if ranks < 50 then return 3 end
	if ranks < 67 then return 4 end
	if ranks < 84 then return 5 end
	if ranks < 100 then	return 6 end
	if ranks < 117 then	return 7 end
	if ranks < 134 then	return 8 end
	if ranks < 150 then	return 9 end
	if ranks < 167 then	return 10 end
	if ranks < 184 then	return 11 end
	if ranks < 200 then	return 12 end
	if ranks < 217 then	return 13 end
	if ranks < 234 then	return 14 end
	if ranks < 250 then	return 15 end
	return 16
	

end

def manaNeeded(spellNum,casts)
	singleManaCost = spellNum.to_s[spellNum.length - 2,2]
	return singleManaCost.to_i * casts
end

#Parse Command Line Arguments
if (variable[0])
	
	varZero = true
	varAddBreak = false
	variable.each { |var|
		if varZero != true and varAddBreak != true
			if var =~ /blur|blurs/ and Spell[911].known?
				doBlurs = true
			elsif var =~ /guard|guards/ and Spell[419].known?
				doGuards = true
			elsif var =~ /color|colors/ and Spell[611].known?
				doColors = true
			elsif var =~ /announce|ann/
				#echo "Matched announce with \"#{var}\""
				varVals = var.split("=")
				if varVals[1] != nil and varVals[1].to_i > 0 and varVals[1].to_i < 6
					if varVals[1].to_i < 6 and varVals[1].to_i > waitTime
						waitTime = varVals[1].to_i
					else
						
					end
					willYell = true
					willThink = true
					willLNet = true
				else
					echo "\"#{var}\" needs an = followed by a value of 1-5"
					giveInstructions()
					exit
				end
				
			elsif var =~ /yell/
				#echo "Matched yell with \"#{var}\""
				varVals = var.split("=")
				if varVals[1] != nil and varVals[1].to_i > 0 and varVals[1].to_i < 6
					if varVals[1].to_i < 6 and varVals[1].to_i > waitTime
						waitTime = varVals[1].to_i
					else
						
					end
					willYell = true
				else
					echo "\"#{var}\" needs an = followed by a value of 1-5"
					giveInstructions()
					exit
				end
			elsif var =~ /think/
				#echo "Matched think with \"#{var}\""
				varVals = var.split("=")
				if varVals[1] != nil and varVals[1].to_i > 0 and varVals[1].to_i < 6
					if varVals[1].to_i < 6 and varVals[1].to_i > waitTime
						waitTime = varVals[1].to_i
					else
						
					end
					willThink = true
				else
					echo "\"#{var}\" needs an = followed by a value of 1-5"
					giveInstructions()
					exit
				end
			
			elsif var =~ /lnet/
				#echo "Matched lnet with \"#{var}\""
				varVals = var.split("=")
				echo varVals
				if varVals[1] != nil and varVals[1].to_i > 0 and varVals[1].to_i < 6
					if varVals[1].to_i < 6 and varVals[1].to_i > waitTime
						waitTime = varVals[1].to_i
					else
						
					end
					willLNet = true
				else
					echo "\"#{var}\" needs an = followed by a value of 1-5"
					giveInstructions()
					exit
				end
			elsif var =~ /comment/
				echo "Matched addedAnnouncement"
				varAddBreak = true
				
			elsif var =~ /lichchan/
				varVals = var.split("=")
				if varVals[1] != nil 
					lichChan = varVals[1]
				end
			elsif var =~ /thoughtchan|chan/
				varVals = var.split("=")
				if varVals[1] != nil
					thoughtChan = varVals[1]
				end
			else
				echo "\"#{var}\" is not a valid arguement"
				giveInstructions()
				exit
			end
			#Loc = variable[0]
			#echo Loc
		else
			if varZero == true
				varZero = false
			end
			
			if varAddBreak == true
				echo "var=#{var}"
				if var =~ /=/
					varVals = var.split("=")
					echo "VarVals info = #{varVals}"
					if varVals[2] != nil and varVals[2].to_i != ""
						addedAnnounceText += " #{varVals[2]}"
					else
						
					end
				else
					addedAnnounceText += " #{var}"
				end
			end
		end
	}
	 UserVars.autoMassiesComment = addedAnnounceText
	if doBlurs == true or doGuards  == true or doColors == true 
		#We already set what we are doing so dont need to guess
	else
		#No Arguments Provides so just casting what we can
		if Spell[911].known? then doBlurs = true end
		if Spell[419].known? then doGuards = true end
		if Spell[601].known? then doColors = true end
	end
else
	#No Arguments Provides so just casting what we can
	if Spell[911].known? then doBlurs = true end
	if Spell[419].known? then doGuards = true end
	if Spell[611].known? then doColors = true end

end

#This calculates how many casts are needed to ensure a four hour and ten minute duration.
if (Spell[911].known? and Spell[419].known?)
	#Casting Blurs and Guards!"
	Blur_cycle = (((240.0/blursMinutesPerCast).to_f).ceil)
	Guard_cycle = (((240.0/guardsMinutesPerCast).to_f).ceil)
elsif (Spell[911].known?)
	#echo "Casting Blurs!"
	Blur_cycle = (((240.0/blursMinutesPerCast).to_f).ceil)
elsif (Spell[419].known?)
	#echo "Casting Guards!"
	Guard_cycle = (((240.0/guardsMinutesPerCast).to_f).ceil)
elsif (Spell[611].known?)
	#echo "Casting Colors"
	Color_cycle = (((240.0/colorsMinutesPerCast).to_f).ceil)
else
	echo "You do not appear to know any mass cast spells (611, 911, 419).  If this is not the case, please check that infomon is running, and type skill and spell all, and run this again."
	exit
end


totalManaNeeded = 0
if doBlurs then echo "Casting Blurs for #{Blur_cycle} casts and #{manaNeeded("911",Blur_cycle)} mana for #{blursMinutesPerCast*Blur_cycle}" end
if doGuards then echo "Casting Guards for #{Guard_cycle} casts and #{manaNeeded("419",Guard_cycle)} mana for #{guardsMinutesPerCast*Guard_cycle}" end
if doColors then echo "Casting Colors for #{Color_cycle} casts and #{manaNeeded("611",Color_cycle)} mana for #{colorsMinutesPerCast*Color_cycle}" end
if varAddBreak then echo "Adding \"#{addedAnnounceText}\" to message" end
if Blur_cycle != nil then totalManaNeeded += manaNeeded("911",Blur_cycle) end
if Guard_cycle != nil then totalManaNeeded += manaNeeded("419",Guard_cycle) end
if Color_cycle != nil then totalManaNeeded += manaNeeded("611",Color_cycle) end
echo "Total Mana Needed Is #{totalManaNeeded}"
fput "group open"
if willYell then echo "Will announce by yelling for #{waitTime} minutes" end
if willThink then echo "Will announce by thinking for #{waitTime} minutes on #{thoughtChan}" end
if willLNet then echo "Will announce by lnetting for #{waitTime} minutes on #{lichChan}" end



def startSpellCycle(spell,multiCastLimit,castsNeeded)
	echo "Starting cycle for #{spell.name} #{castsNeeded} times"
	while castsNeeded > 0
		if castsNeeded >= multiCastLimit
			thisMultiCast = multiCastLimit
		else
			thisMultiCast = castsNeeded
		end
		wait_until {spell.affordable?(:multicast => thisMultiCast)}
		 
		waitcastrt?
		waitrt?
		#echo "Name=#{spell.name}"
		#Workaround for change from 611 for Mass COlors to it being an evoked 11 Mana cast of 601
		if spell.name =~ /Colors/
			spell = Spell[601] 
			echo "casting #{spell.name} #{thisMultiCast} times"
			fput "incant 601 evoke #{thisMultiCast.to_s}"
			spell = Spell[611]
		else
			echo "casting #{spell.name} #{thisMultiCast} times"
			spell.cast(thisMultiCast.to_s)
			
		
		end
		
		castsNeeded -= thisMultiCast
	end
	#Finished casting this spell
end

def formatMinutes(timeInMinutes)
	if timeInMinutes == 1
		return "#{timeInMinutes} minute."
	else
		return "#{timeInMinutes} minutes."
	end

end

def SendToLNET(channel, message)
  begin
    LNet.send_message(attr={'type'=>'channel', 'channel'=>channel}, message)
  rescue => e
    echo "Failed to send to LNET"
  end
end

def sendAnnouncements(locationCasting,doBlurs,doGuards,doColors,willYell,willThink,thoughtChan,willLNet,lichChan,timeRemaining,varAddBreak,addedAnnounceText)
	announcementMessage = "Casting "
	if doBlurs and doGuards 
		announcementMessage += "Blurs and Guards at #{locationCasting} in #{(timeRemaining)}"
	
	elsif doBlurs
		announcementMessage += "Blurs at #{locationCasting} in #{(timeRemaining)}"
	
	elsif doGuards
		announcementMessage += "Guards at #{locationCasting} in #{(timeRemaining)}"
	
	elsif doColors
		announcementMessage += "Colors at #{locationCasting} in #{(timeRemaining)}"
	
	else
		#We did something wrong here
	end
	
	if addedAnnounceText != ""
		announcementMessage += ",#{addedAnnounceText}"
	end
	
	if willYell then doYell(announcementMessage) end
	if willThink then doThink(thoughtChan,announcementMessage) end
	if willLNet then doLnet(lichChan,announcementMessage) end
end

def doYell(message)
	echo "I would have yelled \"#{message}\""
	fput "yell #{message}" 
end

def doThink(thoughtChan,thoughtMessage)
	if thoughtMessage =~ /minute/
		echo "I would have thoughts \"#{thoughtMessage}\" on \"#{thoughtChan}\""
		fput "think on #{thoughtChan} #{thoughtMessage}"
	end
end

def doLnet(lichChan,lnetMessage)
	#have to do something different here due to lnet permissions
	if lnetMessage =~ /minute/
		echo "I would have thoughts \"#{lnetMessage}\" on \"#{lichChan}\""
		SendToLNET(lichChan,lnetMessage)
	end
end

#This is where we wait and announce
if waitTime > 0
	totalSecondsWaiting = waitTime * 60
	while totalSecondsWaiting > 0
		if totalSecondsWaiting % 10 == 0
			if totalSecondsWaiting % 60 == 0
				#Send out a minute alert
				#echo "Minutes until Start = #{totalSecondsWaiting / 60}"
				sendAnnouncements(Room.current.title[0].gsub(",","-"). gsub("[","").gsub("]",""),doBlurs,doGuards,doColors,willYell,willThink,thoughtChan,willLNet,lichChan,formatMinutes(totalSecondsWaiting / 60),varAddBreak,UserVars.autoMassiesComment)
			else
				if totalSecondsWaiting == 30
					#send out 30 second warning
					#echo "30 seconds until Start"
					sendAnnouncements(Room.current.title[0].gsub(",","-"). gsub("[","").gsub("]",""),doBlurs,doGuards,doColors,willYell,willThink,thoughtChan,willLNet,lichChan,"30 seconds",varAddBreak,UserVars.autoMassiesComment)
				elsif totalSecondsWaiting == 10
					#echo "10 seconds until start"
					#send out 10 second warning
					sendAnnouncements(Room.current.title[0].gsub(",","-"). gsub("[","").gsub("]",""),doBlurs,doGuards,doColors,willYell,willThink,thoughtChan,willLNet,lichChan,"10 seconds",varAddBreak,UserVars.autoMassiesComment)
				end
				echo "#{totalSecondsWaiting / 60} minute(s) and #{totalSecondsWaiting % 60} seconds"
			
			end
		else
			
		end
		pause 1
		totalSecondsWaiting -= 1
	end


end


#This is where we actually Cast

if doBlurs then startSpellCycle(Spell[911],getMultiCastPrimary(emcRanks),Blur_cycle) end
if doGuards then startSpellCycle(Spell[419],getMultiCastPrimary(emcRanks),Guard_cycle) end
if doColors then startSpellCycle(Spell[611],getMultiCastPrimary(smcRanks),Color_cycle) end
UserVars.autoMassiesComment = ""
#The script will now wait until you unpause it to disband the group, in the event others are casting mass spells still, 
#or if you wish to add additional casts manually for those who joined late.
if (doBlurs or doGuards or doColors) and (willYell or	willThink or	willLNet)
	fput "recite That should be 4 hours of each. Stay safe and happy hunting."
	echo "You are done casting.  use ;u to unpause this script when everyone else is done casting and you are ready to disband the group!"
	pause_script
	pause 1
	fput "disband group"
	fput "group open"
elsif (doBlurs or doGuards or doColors)
	echo "You are done casting."


end

exit

#UserVars.mycomment = ''
#;alias add changeit=;exec UserVars.mycomment = "



