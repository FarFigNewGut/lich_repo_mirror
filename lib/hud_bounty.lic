=begin

  This script formats the output of the bounty verb in a better HUD
  
  Includes:
   1. tracking for vouchers used recently
   2. human readable expiry time for waivers
   3. bounty points per hour
   4. table for tasks

	 author: Ondreian
	   tags: cosmetic, bounty
  version: 0.2
  
  changelog:
    0.1: initial release
    0.2: fix for fmt_time

=end

class Hash
  def self.put(target, path, val)
    path = [path] unless path.is_a?(Array)
    fail ArgumentError, "path cannot be empty" if path.empty?
    root = target
    path.slice(0..-2).each { |key| target = target[key] ||= {} }
    target[path.last] = val
    root
  end
end

module BountyHUD
  require "date"
  begin
    require "terminal-table"  
  rescue => _exception
    _respond "<b>this script needs the `terminal-table` gem</b>"
    exit
  end

  @buffer            = []
  @session         ||= {}
  @session[:start] ||= $login_time

  def self.session()
    @session
  end

  module Messages
    START        = %[noun="#{Char.name}">#{Char.name}</a>, your Adventurer's Guild information is as follows:]
    PROMPT       = %[<prompt]

    TASK_INFO    = %r[^You have succeeded at the (?<task>.*?) task (?<total>\d+) times?( and failed (?<failures>\d+) times?)?\.]
    TOTAL_POINTS = %r[^You have accumulated a total of (?<points>\d+) lifetime bounty points\.]
    VOUCHERS     = %r[^You have (?<expedites>\d+) expedited task reassignment vouchers remaining.]
    EXEMPTION    = %r[You are currently exempt from being assigned the (?<task>.*?) task.  Your exemption period will last until (?<expiry>.*?)\.]
    UNSPENT      = %r[You currently have (?<unspent>\d+) unspent bounty points.]
  end

  def self.with_commas(str)
    str.to_s.reverse
      .gsub(/(\d{3})(?=\d)/, '\\1,')
      .reverse
	end

  def self.points_context()
    { total:   0,
      unspent: 0}
  end

  def self.totals_context()
    ["total", 0, 0, 0]
  end

  def self.context(**kv)
    kv.merge({ 
      points: points_context(),
      totals: totals_context(),
      tasks:  []
    })
  end

  def self.exempt?
    return false if $exemption_expiry.nil?
    $exemption_expiry > DateTime.now
  end

  def self.parse_task_info(ctx, task)
    info = task.match(Messages::TASK_INFO)
    task             = info[:task].downcase
    completions      = info[:total].to_i
    fails            = (info[:failures] or "")
    @session[task] ||= completions
    recent           = completions - @session[task]

    ctx[:totals] = ctx[:totals].zip([
      "", 
      completions,
      recent,
      (info[:failures] or 0).to_i
    ]).map do |pairs| pairs.reduce(&:+) end

    ctx[:tasks].push [ 
      task,
      with_commas(completions),
      recent > 0 ? recent : "",
      fails ]
  end

  def self.parse_exemption(ctx, message)
    info = message.match(Messages::EXEMPTION)
    $exemption_expiry = DateTime.strptime(info[:expiry], "%m/%d/%Y %H:%M:%S %z")
    Hash.put(ctx, %i[exemption], 
      {   task:  info[:task].downcase,
        expiry:  ($exemption_expiry.to_time - Time.now) })
  end

  def self.parse_vouchers(ctx, message)
    info = message.match(Messages::VOUCHERS)
    remaining              = info[:expedites].to_i
    @session[:expedites] ||= remaining
    used                   = @session[:expedites] - remaining
    Hash.put(ctx, %i[expedites], 
      {total: remaining, 
        used: used })
  end

  def self.parse_total_points(ctx, message)
    earned = message.match(Messages::TOTAL_POINTS)[:points].to_i
    @session[:starting_earned] ||= earned

    Hash.put(ctx, :earned, 
      {  total: earned, 
        recent: earned - @session[:starting_earned] })
  end

  def self.parse_unspent(ctx, message)
    unspent = message.match(Messages::UNSPENT)[:unspent].to_i
    Hash.put(ctx, :unspent, unspent)
  end

  def self.parse(messages)
    messages = messages.slice(1..-2).map(&:strip).reject(&:empty?)

    task = messages.pop

    $exemption_expiry = nil

    messages.reduce(context(task: task)) do |ctx, row|
      parse_task_info(ctx, row)    if row =~ Messages::TASK_INFO
      parse_exemption(ctx, row)    if row =~ Messages::EXEMPTION
      parse_vouchers(ctx, row)     if row =~ Messages::VOUCHERS
      parse_total_points(ctx, row) if row =~ Messages::TOTAL_POINTS
      parse_unspent(ctx, row)      if row =~ Messages::UNSPENT
      ctx
    end
  end

  def self.flush()
    clone = @buffer.dup
    @buffer.clear
    return clone
  end

  def self.fmt_time(seconds)
    days    = (seconds / 86_400).floor
    seconds = seconds - (days * 86_400)
    hours   = (seconds / 3_600).floor
    seconds = seconds - (hours * 3_600)
    minutes = (seconds / 60).floor
    seconds = (seconds - (minutes * 60)).floor

    [days, hours, minutes, seconds]
      .zip(%w(d h m s))
      .select { |f| f.first > 0 }
      .map {|f| f.first.to_s.rjust(2, "0") + f.last }
      .reduce("") { |acc, col| acc + " " + col }
      .strip
  end


  def self.uptime()
    fmt_time(Time.now - @session[:start])
  end

  def self.per_hour(metadata)
    hours = (Time.now - @session[:start]) / (60 * 60)
    with_commas(
      (metadata.dig(:earned, :recent) / hours).to_i)
  end

  def self.show_hud(prompt)
    messages = BountyHUD.flush()

    metadata = BountyHUD.parse(messages)

    hud = String.new()
    hud = hud + "This session has been active for #{uptime}.\n"
    hud = hud + "You have earned #{with_commas(metadata.dig(:earned, :total))} lifetime points"
    hud = hud + ", #{with_commas(metadata.dig(:earned, :recent))} recently" if metadata.dig(:earned, :recent) > 0
    hud = hud + " [#{per_hour(metadata)} per hour]," if metadata.dig(:earned, :recent) > 0
    hud = hud + " and "
    hud = hud + with_commas(metadata.dig(:unspent)) + " unspent.\n"

    hud = hud + "You have #{metadata.dig(:expedites, :total)} expedites remaining "
    hud = hud + "and have recently used #{metadata.dig(:expedites, :used)} vouchers.\n"

    if exempt?
      hud = hud + "You are exempt from the #{metadata.dig(:exemption, :task)} task for "
      hud = hud + "#{fmt_time(metadata.dig(:exemption, :expiry))}.\n"
    end

    headers = %i[task done recent fails]

    table = Terminal::Table.new(
      headings: headers,
      rows:     metadata.fetch(:tasks, []) + [metadata.fetch(:totals, [])
        .map do |col| with_commas(col) end])

    headers.each_with_index do |_, i|
      table.align_column(i, :right)
    end

    hud = hud + "\n" + table.to_s

    return [hud, "\n", metadata[:task], prompt].join("\n")
  end

  def self.higher_precedence_than(hooks)
    hooks_to_restore = hooks.map { |hook| [hook, DownstreamHook.remove(hook)] }
    yield
    hooks_to_restore.each { |pair| DownstreamHook.add(pair.first, pair.last) }
  end
  
  def self.attach()
    # downstream hooks don't have precedence so
    # it's first-to-register and we need to be higher-order than 
    # other known common mutators ie: commas.lic
    higher_precedence_than(%w(commas)) do
      DownstreamHook.add(self.name, -> incoming {
        begin
          #echo([incoming, incoming.include?(Messages::START)])
          @buffer.push(incoming) if incoming.include?(Messages::START) or @buffer.size > 0
          # to silence or not
          return incoming if @buffer.empty?
          # handle when we should consume the buffer
          return BountyHUD.show_hud(incoming) if incoming.start_with?(Messages::PROMPT)
          # silence the game output
          return nil  
        rescue => exception
          respond exception
          respond exception.backtrace
          return incoming
        end
      })
    end

    before_dying do DownstreamHook.remove(self.name) end
    wait_while do true end
  end

  BountyHUD.attach()
end