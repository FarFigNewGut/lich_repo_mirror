# quiet
=begin
  sewers_shat.lic
    Sewers script perfected by Shattered, where we can AFK in prosperity.
    No current safeguards to prevent endless running, be careful Prime!

  You can start it via:
    ;sewers_shat <loot_container>

        author: Tysong
  contributors: Omrii
          game: Gemstone
          tags: sewer, duskruin, bloodscrip
       version: 1.8

  Version Control:
    1.8 (2025-08-15): bugfix in dirs not being strings
    1.7 (2025-08-08): converted into module
    1.6 (2025-08-08): better inventory handling
    1.5 (2025-08-08): updated for redeemed entries
    1.4 (2025-02-24): convert to UIDs, added by Tysong
    1.3 (????-??-??): base used by Tysong
=end

module DuskruinSewers
  def self.standing()
    fput "stand" until standing?
  end

  def self.script_instructions()
    respond("--")
    respond("-- This script is designed to run the sewers event in Duskruin Arena.  You should begin the script standing at the entrance to the sewers.")
    respond("-- The event will be run ten times storing all loot in the same container you use for holding your simucoin entry items.")
    respond("-- The script is designed to stop if the character becomes encumbered to avoid inventory management in the middle of a sewer run.")
    respond("--")
    respond("-- Syntax to begin is as follows: ;sewers storage_container")
    respond("-- Example: ;sewers rucksack")
    respond("--")
    respond("-- Options:")
    respond("--")
    respond("-- speed - ignore experience/mind state")
    respond("-- Example: ;sewers rucksack speed")
    respond("--")
    exit
  end

  def self.script_error(error_code, *additional_information)
    if error_code.eql?(1)
      respond("**")
      respond("** You did not define the variables correctly for the script to begin.")
      respond("** The second variable must be either booklet, jar, slip, token, or voucher.")
      respond("** ")
      respond("** Run ;sewers help for more information.")
      respond("**")
    end
    if error_code.eql?(2)
      respond("**")
      respond("** You are out of #{additional_information[0].downcase}s. You should go buy more!")
      respond("**")
    end
    if error_code.eql?(3)
      respond("**")
      respond("** The script has failed to move properly within the sewers due to an unknown situation.")
      respond("** You will need to manually complete this sewer run.  Contact the script author if this error occurs consistently.")
      respond("**")
    end
    if error_code.eql?(4)
      respond("**")
      respond("** You are currently overloaded.  Please address to avoid complications during a sewer run.")
      respond("**")
    end
    exit
  end

  def self.movement()
    dirs = checkpaths
    dirs = [] if dirs == false
    dirs.delete($last_dir) unless dirs.length < 2
    this_time = rand(dirs.length)
    $last_dir = reverse_direction(dirs[this_time])
    move(dirs[this_time])
  end

  def self.movement_fix()
    move(@dirs[0])
    @dirs.delete(@dirs[0])
  end

  def self.storage(storage_container)
    if GameObj.left_hand.id
      fput "_drag ##{GameObj.left_hand.id} ##{storage_container.id}"
      20.times {
        break unless GameObj.left_hand.id
        sleep(0.1)
      }
      script_error(4) if GameObj.left_hand.id
    end
    if GameObj.right_hand.id
      fput "_drag ##{GameObj.right_hand.id} ##{storage_container.id}"
      20.times {
        break unless GameObj.right_hand.id
        sleep(0.1)
      }
      script_error(4) if GameObj.right_hand.id
    end
  end

  def self.main
    script_instructions() if Script.current.vars[1].downcase == "help" || Script.current.vars[1].nil?
    storage_container = GameObj.inv.find { |item| item.noun == Script.current.vars[1].downcase && GameObj.containers.keys.include?(item.id.to_s) }
    unless storage_container
      echo("can't find #{Script.current.vars[1].downcase} in your inventory containers, exiting!")
      script_instructions()
    end
    loop do
      if Script.current.vars[2].nil? && checkmind =~ /saturated|must rest/
        if !Room.current.uid.include?(8214601)
          Script.run('go2', 'u8214601 --disable-confirm')
          sleep 1.0
        end
        echo "Waiting to absorb experience.\n"
        wait_until { percentmind < 75 }
        echo "3...\n"
        sleep 1.0
        echo "2...\n"
        sleep 1.0
        echo "1...\n"
        sleep 1.0
        echo "Starting the next sewers run, pay attention!!!\n"
      end
      if !Room.current.tags.include?("sewer")
        Script.run('go2', 'u8214001 --disable-confirm')
        sleep 1.0
      end
      sewers_entered = move("go grate", 2)
      unless sewers_entered
        script_error(2, "entry token")
        break
      end
      loop {
        standing()
        loop {
          movement()
          movement_result = waitfor "You can't go there", "Bloodriven Village"
          sleep 0.5
          break if movement_result !~ /can't go/
          if movement_result =~ /can't go/
            @dirs = ["n", "s", "e", "w", "ne", "nw", "se", "sw"]
            loop {
              movement_fix()
              movement_result = waitfor "You can't go there", "Bloodriven Village"
              sleep 0.5
              break if movement_result !~ /can't go/
              script_error(3) if @dirs.length == 0
            }
          end
        }
        result = dothistimeout(
          "search",
          2,
          /Roundtime|You get washed away|You've recently|You don't find anything of interest here|You search around and find an odd gem!/
        )
        break if result =~ /get washed|You don't find anything of interest here/
        waitrt?
        sleep 0.5
        storage(storage_container)
        sleep 0.1
      }
      storage(storage_container)
      standing()
      sleep 0.5
      waitrt?
      move("climb rope")
      move("out")
      if XMLData.game =~ /GSF/
        Script.run('go2', 'u8212637 --disable-confirm') # load segment 8212 for cache announcements
        sleep(2)
      end
    end
    echo "Script has ended."
  end
end

DuskruinSewers.main