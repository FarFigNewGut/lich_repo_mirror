=begin

	Be sure you keep this script running in the background to make it as accurate as possible. Also for the first time you use the script be sure to do ;send show and read the 'Group' and 'Help' tabs for more information on how to properly use the script.

	This script tracks how many kills/searches it takes your characters to find gemstones. After finding a gemstone you can hold the gemstone in your hand and click the "Add Gemstone" button and it will add the gemstone's stats to your stats info. You can also manually add gemstones you have already found before you downloaded the script.
	
	With all of this information there is all kinds of stats the script tracks, such as the average number of kills per gemstone, total number of gemstones found, how many times each gemstone property has been found, an estimate of how many more kills you need until you find a gemstone based on your average number of kills to find a gemstone, and more!
	
	The script can track information per character and you can view the stats from any of your characters by doing ;send show to show the stats window.
	
	If you multi-account and your characters hunt in a group you can set up the script so only one character has to run the script and they can see the information be updated in real time in the window.
	
	If you multi-account and your characters don't hunt together then each character will have to run the script, but every 5 minutes the script saves/loads the data to the file so the stats for everyone is synced and one characte can see the updated stats every 5 minutes.
	
	If you don't multi-account then you can run the script on each character and the stats will be updated every time you log on a new character.
	
	Changelog:
		Version 2: Fixed bug with empty strings being added to the Group if the "Remove" or "Leader" buttons were clicked with no text in the entry box.
		Version 3: Renamed group "Leader" to "Captain" to make it more clear that "Captain" isn't referring to the in game group leader.
		Version 3: Fixed bug with script not always properly saving your Group settings.
		Version 4: There is a new tab named "Window" where you can adjust the window's size.
		Version 4: Script will now give you instructions on how to add a newely found jewel to your stats.
		Version 5: I figure the odds of finding a gemstone are 1 in 1500, with the pity counter lowering the denominator by 1 after every loot for the first gemstone. Using 1 in 1500 odds I also figure the odds of finding the 2nd/3rd gemstone of month would be 90% by the time you loot 3500 critters. So using these figures the script now calculates the odds of you finding a gemstone on the next loot and your cumulative odds of finding a gemstone on the next loot.
		Version 6: Fixed bug with script crashing when changing months in the Main History tab.
		Version 7: Fixed bug with script not tracking number of kills with no gemstone found for 2nd/3rd gemstone of the month correctly.
		Version 8: Okay for real now (hopefully): fixed bug with script not tracking number of kills with no gemstone found for 2nd/3rd gemstone of the month correctly.
		Version 9: Okay for real real now: fixed bug with script not tracking number of kills with no gemstone found for 2nd/3rd gemstone of the month correctly.
		Version 10: Fixed a rare bug that would sometimes cause the script to crash.
		Version 11: Fixed bug with script showing you found a gemstone in the current week if you found a gemstone on, for example on 7/2, and the current week extends to 8/2.
		
	To Do List:
		Getting a jewel via mugging will show the last critter LOOTed for the stats of the jewel instead of showing the critter that was mugged. So like, fix this and stuff.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: dreaven.
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 11

=end


hide_me

require 'tzinfo'

class GemStoneTrackerMain
	@timezone = TZInfo::Timezone.get('America/New_York')
	@gemstone_data = {}
	@info = {}
	hashes = [ "Grids", "Labels", "Menus", "Buttons", "Entries", "Notebooks", "Scroll Windows", "Spin Buttons", "Checkboxes", "People Found Gemstone This Week", "Gemstones Found This Month", "Timer IDs" ]
	hashes.each{ |name| @info[name] = {} }
	@info["People Found Gemstone This Week"] = []
	@info["Update Info"] = []
	@info["Update Info"].push(Char.name) unless @info["Update Info"].include?(Char.name)
	@info["Longest Name"] = 12
	@info["Pause Seconds"] = 0
	@show_names = true
	@find_rate = 1500
	@upper_rate_second_third = 3500
	
	$gemstone_tracker_restart_timer = nil
	$gemstone_tracker_pause_timer = nil
	$gemstone_tracker_start_time = @timezone.now
	$gemstone_tracker_kills_this_hunt = 0
	$show_gemstone_tracker_window = nil
	$gemstone_tracker_get_gemstone_info = nil
	$gemstone_tracker_temp_information = {}
	
	@ascension_critter_list = /armored battle mastodon|black valravn|boreal undansormr|crimson angargeist|fork-tongued wendigo|giant warg|gigas berserker|gigas disciple|gigas shield-maiden|gigas skald|gold-bristled hinterboar|gorefrost golem|halfling bloodspeaker|halfling cannibal|reptilian mutant|sanguine ooze|shadow-cloaked draugr|winged disir|basalt grotesque|death knight|mist-wreathed banshee|patrician vampire|phantasmic conjurer|skeletal dreadsteed|tatterdemalion ghast|hive thrall|kiramon broodtender|kiramon myrmidon|kiramon stalker|kiramon strandweaver|kresh ravager/
	
	@save_file = "Gemstone Info.json"
	@backup_file = "Gemstone Info - Backup.json"
		
	@tooltips = {
		"Add" => "Enter the name of the person you want to add to your group then click this button.",
		"Remove" => "Enter the name of the person you want to remove from your group then click this button.",
		"Captain" => "Enter the name of the person you want to be the Captain of your group then click this button.\n\nThe first person listed is the Captain.\n\nThe Captain is  the person who will be running ;gemstone-tracker for the group.",
		"Save Type" => "WARNING: If changing this setting then close the script on ALL characters, restart the script on one character, change this setting, then close script again. Then you can restart script on all characters.\n\nCheck this box to use a 'Pretty' save file which is much easier to read when opening up the file but uses more disk space.\n\nUncheck this box to use a standard save file, which would be almost impossible to read but uses much less disk space.",
		"Character List" => "Character List Menu.\n\nSelect a character to see stats related for that specific character.\n\nThe 'Main' entry shows a summary of all of your characters, including if they have found a gemstone for the current week.",
		"Names" => "Click this button to toggle the name of your characters to all dashes and back.",
		"Pause" => "The script updates all data every second, but this makes it almost impossible to select text to copy and to change some menus.\n\nClick this button to pause all updates so you can select text and change menus. Click the button again to resume updating every second.\n\nNOTE: Pausing the updates won't affect the script tracking looting or finding gemstone or any other data collection, it just pauses the updates.",
		"Restart" => "Click this button to restart the current hunt timer.",
		"Pause Timer" => "Click this button to pause the current hunt timer, click it again to resume the timer.",
		"Gemstone List" => "Stats for previous months and previously found gemstones.",
		"Add Gemstone" => "This button only shows when you have found a gemstone for the current week but haven't yet clicked this button.\n\nIf your character is listed in the group then only the group Captain should do this, if your character isn't in the group then that character should do this.\n\nHold the gemstone in your right or left hand then click this button, it will automatically add the gemstone's stats to the database.\n\nIMPORTANT: This is ONLY for adding gemstones that you have found in the current week. For adding gemstones from prior weeks select 'Main' from the Character List Menu then click 'Add Jewel' for instructions.",
	}
	
	@help_text = "NOTE: Every window is a scrolled window so you might need to scroll your mouse wheel down to see more information on a page.\n\nBe sure to check out the 'Group' tab before starting.\n\nIf your character is listed in the group (again be sure to read the 'Group' tab) then leave the script running on just the group Captain, anyone not listed in the group should also leave the script running. The script will track all stats whether the window is open or closed, but the script needs to be running.\n\nAdding someone to the Character menu:\nYour characters are automatically added to the Character menu and their stats start being tracked after they loot or mug a critter.\n\nAdding Gemstone information to stats:\nNOTE: If a character is listed in the group then only the group Captain should do the following, if a character is not part of the group then only the character themselves should do the following:\nAfter finding a gemstone go to that person's character page in the dropdown menu and there should be a button labeled 'Add Gemstone'. Be sure your character is holding the jewel then click the button.\nThis button only shows up if the person has found a gemstone for the week but hasn't yet clicked the button.\n\nHunt Timer:\nThe script tracks how many kills you have for your current hunt and how long the hunt has lasted. These stats are reset whenever the script is restarted. You can click the 'Restart' button to reset these stats or click 'Pause Timer' to pause the timer then click 'Unapuse Timer' to resume the timer. \nIf you want to restart the timer in one of your scripts use this line: $gemstone_tracker_restart_timer = true\nTo pause the timer: $gemstone_tracker_pause_timer = true\nTo unpause: $gemstone_tracker_pause_timer = nil"
	
	Thread.new{
		loop{
			wait_until{ $gemstone_tracker_get_gemstone_info }
			$gemstone_tracker_temp_information = {}
			$gemstone_tracker_temp_information["Property One Text"] = "None"
			$gemstone_tracker_temp_information["Property Two Text"] = "None"
			$gemstone_tracker_temp_information["Property Three Text"] = "None"
				
			$gemstone_tracker_temp_information["Property One Rarity"] = "None"
			$gemstone_tracker_temp_information["Property Two Rarity"] = "None"
			$gemstone_tracker_temp_information["Property Three Rarity"] = "None"
				
			$gemstone_tracker_temp_information["Gemstone Rarity"] = nil
			
			put "look at my jewel"
			wait_until{ $gemstone_tracker_get_gemstone_info.nil? }
		}
	}
	
	Thread.new{
		loop{
			sleep 300
			GemStoneTrackerMain.save_data
		}
	}
	
	Thread.new{
		loop{
			wait_until{ $gemstone_tracker_restart_timer }
			$gemstone_tracker_pause_timer = nil
			@info["Pause Seconds"] = 0
			$gemstone_tracker_start_time = @timezone.now
			$gemstone_tracker_kills_this_hunt = 0
			@info["Labels"]["Subtitle Label"].text = "Hunt Info"
			$gemstone_tracker_restart_timer = nil
		}
	}
	
	Thread.new{
		loop{
			wait_until{ $gemstone_tracker_pause_timer }
			@info["Buttons"]["Pause Timer"].label = "Unpause Timer"
			$gemstone_tracker_pause_start = @timezone.now
			wait_until{ $gemstone_tracker_pause_timer.nil? }
			@info["Pause Seconds"] += @timezone.now - $gemstone_tracker_pause_start
			@info["Buttons"]["Pause Timer"].label = "Pause Timer"
		}
	}
	
	Thread.new{
		loop{
			$gemstone_tracker_info = @info.dup
			$gemstone_tracker_gemstone_data = @gemstone_data.dup
			sleep 1
		}
	}
	
	def self.save_data
		before_data = @gemstone_data.dup if @gemstone_data
		load_data
		if @gemstone_data && !@info["Update Info"].empty?
			File.open("#{@save_file}.lock", File::RDWR | File::CREAT){ |lock_file|
				begin
					lock_file.flock(File::LOCK_EX)
					settings = [ "Group", "Save Type Checkbox", "Last Backup Day", "Window Width", "Window Height" ]
					settings.each{ |setting| @gemstone_data[setting] = before_data[setting] }
					@info["Update Info"].each{ |name| @gemstone_data["Character Info"][name] = before_data["Character Info"][name] }
					@gemstone_data["Character Info"] = @gemstone_data["Character Info"].reject { |_,character_hash| character_hash.nil? || character_hash == {} }
					@gemstone_data["Character Info"] = @gemstone_data["Character Info"].sort.to_h
					
					if @timezone.now.day != @gemstone_data["Last Backup Day"]
						@gemstone_data["Last Backup Day"] = @timezone.now.day
						if @info["Checkboxes"]["Save Type"].active?
							File.open(@backup_file, 'w'){ |file| file.write(JSON.pretty_generate(@gemstone_data)) }
						else
							File.open(@backup_file, 'w'){ |file| JSON.dump(@gemstone_data, file) }
						end
						echo "Gemstone BACKUP saved."
					end

					if @info["Checkboxes"]["Save Type"].active?
						@gemstone_data["Save Type Checkbox"] = "Yes"
						File.open(@save_file, 'w'){ |file| file.write(JSON.pretty_generate(@gemstone_data)) }
					else
						@gemstone_data["Save Type Checkbox"] = "No"
						File.open(@save_file, 'w'){ |file| JSON.dump(@gemstone_data, file) }
					end
					echo "Gemstone info saved."

					@info["Update Info"] = []
				ensure
					lock_file.flock(File::LOCK_UN)
				end
			}
		end
	end

	def self.load_data
		File.open("#{@save_file}.lock", File::RDWR | File::CREAT){ |lock_file|
			begin
				lock_file.flock(File::LOCK_SH)
				if File.exist?(@save_file)
					@gemstone_data = JSON.parse(File.read(@save_file))
					echo "Gemstone info loaded."
				else
					message = []
					message << monsterbold_start
					5.times{ message << "############################################################" }
					message << "IMPORTANT MESSAGE FROM ;gemstone-tracker SCRIPT. PLEASE READ."
					message << "If this is your first time running this script you should do this:"
					message << ";send show"
					message << "And click the 'Group' and 'Help' tabs for important information on how this script works."
					5.times{ message << "############################################################" }
					message << monsterbold_end
					puts message.join("\n")
				end
				@gemstone_data ||= {}
				@gemstone_data["Character Info"] ||= {}
				@gemstone_data["Group"] ||= []
				@gemstone_data["Window Width"] ||= 500
				@gemstone_data["Window Height"] ||= 500
				@gemstone_data["Save Type Checkbox"] ||= "Yes"
				@gemstone_data["Last Backup Day"] ||= @timezone.now.day
			ensure
				lock_file.flock(File::LOCK_UN)
			end
		}
	end
	
	def self.prepare_to_reset_kills
		update_kill_totals("Main")
		if (!@gemstone_data["Group"].empty?) && (@gemstone_data["Group"].first == Char.name)
			@gemstone_data["Group"].each{ |name|
				reset_weekly_kills(name)
				@info["Update Info"].push(name) unless @info["Update Info"].include?(name)
				@gemstone_data["Character Info"][name]["Last Reset Day"] = @timezone.now.day
			}
		elsif !@gemstone_data["Group"].include?(Char.name)
			reset_weekly_kills(Char.name)
			@info["Update Info"].push(Char.name) unless @info["Update Info"].include?(Char.name)
			@gemstone_data["Character Info"][Char.name]["Last Reset Day"] = @timezone.now.day
		end
	end
	
	def self.reset_weekly_kills(name)
		info = "Character Info"
		found_gs_last_week = nil
		hash = @gemstone_data["Character Info"][name]["Gemstone Finds"]
		if hash.count > 0
			last_gemstone_found = hash.keys.last
			date_found = last_gemstone_found.split("/")
			month_found = date_found[0].to_i
			day_found = date_found[1].to_i
				
			today = @timezone.now.to_date
			yesterday = today - 1
			current_sunday = today - today.wday
			previous_sunday = current_sunday - 7
			previous_week = (0..6).map { |day| previous_sunday + day }
			previous_week.each{ |day|
				if (day.day == day_found) && (day.month == month_found)
					found_gs_last_week = true
					break
				end
			}
		end
		if found_gs_last_week.nil?
			total_kills = 0
			@gemstone_data[info][name]["Critter Kills"].each{ |_,kill_count| total_kills += kill_count }
			month_year = "#{@timezone.now.month}/#{@timezone.now.year}"
			if @info["Gemstones Found This Month"][name] == 0
				@gemstone_data[info][name]["No First Gemstone Week Kills"][month_year] ||= 0
				@gemstone_data[info][name]["No First Gemstone Week Kills"][month_year] += total_kills
			else
				@gemstone_data[info][name]["No Second/Third Gemstone Week Kills"][month_year] ||= 0
				@gemstone_data[info][name]["No Second/Third Gemstone Week Kills"][month_year] += total_kills
			end
		end
		@gemstone_data[info][name]["Critter Kills"] = {}
		@info["Update Info"].push(name) unless @info["Update Info"].include?(name)
	end
	
	def self.check_reset_data
		today = @timezone.now.to_date
		sunday = today - today.wday
		days_this_week = (0..6).map{ |day| sunday + day }
		new_week = true
		days_this_week.each{ |day|
			if day.day == @gemstone_data["Character Info"][Char.name]["Last Reset Day"]
				new_week = nil
				break
			end
		}

		prepare_to_reset_kills if new_week && @gemstone_data["Character Info"][Char.name]["Last Reset Day"]
	end
	
	def self.add_new_character(name, force)
		if @gemstone_data["Group"].include?(name) || force
			info = "Character Info"
			if @gemstone_data[info][name].nil?
				@gemstone_data[info][name] = {}
				hash = @gemstone_data[info][name]
				hash["Critter Kills"] = {}
				hash["Gemstone Finds"] = {}
				hash["No First Gemstone Week Kills"] = {}
				hash["No Second/Third Gemstone Week Kills"] = {}
				month_year = "#{@timezone.now.month}/#{@timezone.now.year}"
				hash["No First Gemstone Week Kills"][month_year] ||= 0
				hash["No Second/Third Gemstone Week Kills"][month_year] ||= 0
				hash["Last Reset Day"] = @timezone.now.day
				@info["Gemstones Found This Month"][name] = 0
				@info["Menus"]["Character List"].append_text(name)
			end
		end
	end
	
	def self.update_gemstone_finds(name, type)
		found_gs_this_week = nil
		@info["Gemstones Found This Month"][name] = 0
		@info["Add Gemstone Name"] = name
		hash = @gemstone_data["Character Info"][name]["Gemstone Finds"]
		if @show_names
			spaces_text = ""
			((@info["Longest Name"] - name.length) + 2).times{ spaces_text += " " }
		else
			spaces_text = "  "
		end
		if hash.count > 0
			@info["Last Gemstone Found"] = hash.keys.last
			date_found = @info["Last Gemstone Found"].split("/")
			month_found = date_found[0].to_i
			day_found = date_found[1].to_i

			formatted_date = @info["Last Gemstone Found"].split("/").map.with_index{ |part, i|
				if i < 2
					part.rjust(2, '0')
				else
					part
				end
			}.join("/")

			last_three_gemstones = hash.to_a.last(3)
			last_three_gemstones.each{ |gemstone|
				date_found = gemstone[0].split("/")
				month_gem_found = date_found[0].to_i
				@info["Gemstones Found This Month"][name] += 1 if month_gem_found == @timezone.now.month
			}
			
			today = @timezone.now.to_date
			sunday = today - today.wday
			days_this_week = (0..6).map{ |day| sunday + day }
			critter = hash[@info["Last Gemstone Found"]]["Critter Found On"]
			kills_total = hash[@info["Last Gemstone Found"]]["Total Kills"]
			days_this_week.each{ |day|
				if (day.day == day_found) && (day.month == month_found)
					found_gs_this_week = true
					break
				end
			}
		end
		
		if @show_names
			name_to_show = name
		else
			name_to_show = ""
			@info["Longest Name"].times{ name_to_show += "-" }
		end
		
		spaces_kill_text = ""
		if found_gs_this_week
			(5 - kills_total.to_s.length).times{ spaces_kill_text += " " }
			if type == "single"
				if @gemstone_data["Character Info"][name]["Gemstone Finds"][@info["Last Gemstone Found"]]["Gemstone Rarity"]
					@info["Found Hash"] = @gemstone_data["Character Info"][name]["Gemstone Finds"][@info["Last Gemstone Found"]]
					text = ""
					stats = [ "Property One", "Property Two", "Property Three" ]
					stats.each{ |stat|
						if @info["Found Hash"]["#{stat} Text"]
							if @info["Found Hash"]["#{stat} Text"] != "None"
								rarity_text = rarity_coloring(@info["Found Hash"]["#{stat} Rarity"], nil)
								text += "\n#{rarity_text} - #{@info["Found Hash"]["#{stat} Text"]}"
							end
						end
					}
					text += "\n#{@info["Found Hash"]["Gemstone Found This Month"]} Gemstone Found This Month"
					rarity_text = rarity_coloring(@info["Found Hash"]["Gemstone Rarity"], true)
					@info["Gemstone Found Text"] += "\n#{rarity_text} GEMSTONE FOUND!\nFound: #{formatted_date}\nTotal kills: #{kills_total}\nFound on: #{critter}#{text}"
				else
					@info["Gemstone Found Text"] += "\nGEMSTONE FOUND!\nFound: #{formatted_date}\nTotal kills: #{kills_total}\nFound on: #{critter}"
				end
				@info["Buttons"]["Add Gemstone"].hide
				if @gemstone_data["Character Info"][name]["Gemstone Finds"][@info["Last Gemstone Found"]]["Gemstone Rarity"].nil?
					@info["Buttons"]["Add Gemstone"].show
					@info["Found Hash"] = @gemstone_data["Character Info"][name]["Gemstone Finds"][@info["Last Gemstone Found"]]
					if @info["Gemstones Found This Month"][name] == 1
						number = "First"
					elsif @info["Gemstones Found This Month"][name] == 2
						number = "Second"
					elsif @info["Gemstones Found This Month"][name] == 3
						number = "Third"
					end
					@info["Found Hash"]["Gemstone Found This Month"] = number
				end
			elsif type == "all"
				@text_to_add[name] = "#{name_to_show}:#{spaces_text}#{kills_total}#{spaces_kill_text}-   #{@info["Gemstones Found This Month"][name]} -  #{formatted_date}\n"
			end
			@info["People Found Gemstone This Week"].push(name) unless @info["People Found Gemstone This Week"].include?(name)
		else
			@info["Buttons"]["Add Gemstone"].hide
			total_kills = 0
			@gemstone_data["Character Info"][name]["Critter Kills"].each{ |_,kill_count| total_kills += kill_count }
			@info["Looter Current Total Kills"] = total_kills if name == @info["Current Looter"]
			(5 - total_kills.to_s.length).times{ spaces_kill_text += " " }
			@text_to_add[name] = "#{name_to_show}:#{spaces_text}#{total_kills}#{spaces_kill_text}-   #{@info["Gemstones Found This Month"][name]}\n" if type == "all"
			@info["People Found Gemstone This Week"].delete(name)
		end
	end
	
	def self.update_kill_totals(name)
		info = "Character Info"
		if name == "Main"
			@info["Buttons"]["Add Gemstone"].hide
			@info["Labels"]["Kill Count"].text = ""
			@info["Labels"]["Gemstone Found"].text = ""

			sorted = @gemstone_data[info].sort.to_h
			@text_to_add = {}
			@info["Gemstone Found Text"] = "Name:          Kills  Month  This Week\n"
			sorted.each{ |name,_| update_gemstone_finds(name, "all") }

			sorted = @info["Gemstones Found This Month"].sort_by{ |key, value| [value, key] }.to_h
			sorted.each{ |name,_| @info["Gemstone Found Text"] += @text_to_add[name] if !@info["People Found Gemstone This Week"].include?(name) }
			sorted.each{ |name,_| @info["Gemstone Found Text"] += @text_to_add[name] if @info["People Found Gemstone This Week"].include?(name) }
			@info["Labels"]["Gemstone Found"].set_markup(@info["Gemstone Found Text"])
		else
			@info["Labels"]["Kill Count"].text = ""
			@info["Labels"]["Gemstone Found"].text = ""
			hash = @gemstone_data[info][name]["Critter Kills"].sort_by{ |key, value| -value }.to_h
			total_kills = 0
			text = "Kill count:\n"
			hash.each{ |critter_name,kill_count|
				total_kills += kill_count
				spaces_kill_text = ""
				(5 - kill_count.to_s.length).times{ spaces_kill_text += " " }
				text += "#{kill_count}#{spaces_kill_text}#{critter_name}\n"
			}
			spaces_kill_text = ""
			(5 - total_kills.to_s.length).times{ spaces_kill_text += " " }
			text += "#{total_kills}#{spaces_kill_text}Total kills"
			@info["Labels"]["Kill Count"].text = text
			
			@info["Gemstone Found Text"] = ""
			update_gemstone_finds(name, "single")
			@info["Labels"]["Gemstone Found"].set_markup(@info["Gemstone Found Text"])
		end
		seconds_hunting = (@timezone.now - $gemstone_tracker_start_time) - (@info["Pause Seconds"])
		if (seconds_hunting > 1) && ($gemstone_tracker_kills_this_hunt > 0)
			hunting_hours = seconds_hunting / 3600
			hunting_minutes = (seconds_hunting % 3600) / 60
			hunting_seconds = seconds_hunting % 60
			hunting_formatted = "%02d:%02d:%02d" % [hunting_hours, hunting_minutes, hunting_seconds]
			kills_per_second = $gemstone_tracker_kills_this_hunt.to_f / seconds_hunting
			kills_per_minute = (kills_per_second * 60).round(2)
			
			message = []
			if @info["Gemstones Found This Month"][@info["Current Looter"]] && @info["Looter Current Total Kills"] > 0
				total_kills = @info["Looter Current Total Kills"]
				gems_found = @info["Gemstones Found This Month"][@info["Current Looter"]].dup
				first_rate = @find_rate.dup
				second_third_rate = @upper_rate_second_third.dup
				if gems_found == 0
					first_rate = (total_kills + 100) if total_kills >= first_rate
					kills_remaining = first_rate - total_kills
				else
					second_third_rate = (total_kills + 100) if total_kills >= second_third_rate
					kills_remaining = second_third_rate - total_kills
				end
				seconds_remaining = (kills_remaining / kills_per_second).round
				hours = seconds_remaining / 3600
				minutes = (seconds_remaining % 3600) / 60
				seconds = seconds_remaining % 60
				formatted = "%02d:%02d:%02d" % [hours, minutes, seconds]
				if $gemstone_tracker_pause_timer.nil?
					message << "Hunt: Length: #{hunting_formatted} Kills: #{$gemstone_tracker_kills_this_hunt}"
					message << "KPM - Kills - Kills remaining - ETA"
					message << "#{kills_per_minute} - #{total_kills} -       #{kills_remaining}      #{formatted}"
					if gems_found == 0
						message << "#{((1.0 / kills_remaining) * 100).round(3)}% find next kill - #{((total_kills.to_f / first_rate) * 100).round(2)}% cumulative"
					else
						x = 1.0 / 1500
						chance = 1 - (1 - x) ** total_kills
						odds = (chance * 100).round(3)
						message << "#{((1.0 / first_rate) * 100).round(3)}% find next kill - #{odds}% cumulative"
					end
				end
			else
				if $gemstone_tracker_pause_timer.nil?
					message << "Hunt: Length: #{hunting_formatted} Kills: #{$gemstone_tracker_kills_this_hunt}"
					message << "KPM"
					message << "#{kills_per_minute}"
				end
			end
			@info["Labels"]["Subtitle Label"].text = message.join("\n")
		end
		update_gemstone_list_menu
	end
	
	def self.add_to_kill_tracker(name)
		if @info["Last Critter Looted"] =~ @ascension_critter_list
			@info["Update Info"].push(name) unless @info["Update Info"].include?(name)
			$gemstone_tracker_kills_this_hunt += 1
			@gemstone_data["Character Info"][name]["Critter Kills"][@info["Last Critter Looted"]] += 1 if !@info["People Found Gemstone This Week"].include?(name) && @info["Gemstones Found This Month"][name] < 3
		end
	end
	
	def self.add_commas(number)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
	end
	
	def self.gemstone_found(name)
		now = @timezone.now
		date = "#{now.month}/#{now.day}/#{now.year}"
		info = "Character Info"
		data = "Gemstone Finds"
		@gemstone_data[info][name][data][date] = {}
		hash = @gemstone_data[info][name][data][date]
				
		kills_total = 0
		@gemstone_data[info][name]["Critter Kills"].each{ |_,kill_count| kills_total += kill_count }
		hash["Date Found"] = now
		hash["Critter Found On"] = @info["Last Critter Looted"]
		hash["Total Kills"] = kills_total
		@info["Labels"]["Gemstone Found"].text = "\nGEMSTONE FOUND! Found: #{date}. Total kills: #{kills_total}. Found on: #{@info["Last Critter Looted"]}" if @info["Menus"]["Character List"].active_text == name
	end
	
	def self.rarity_coloring(text, upcase)
		text = text.upcase if upcase
		if text =~ /Legendary/i
			gemstone_text = "<span foreground='gold'><b><u>*#{text}*</u></b></span>"
		elsif text =~ /Rare/i
			gemstone_text = "<span foreground='#00bfff'><b><u>#{text}</u></b></span>"
		else
			gemstone_text = "<span foreground='white'><b><u>#{text}</u></b></span>"
		end
	end
	
	def self.update_gemstone_list_menu
		@info["Labels"]["Gemstone History"].text = ""
		name = @info["Menus"]["Character List"].active_text
		menu = @info["Menus"]["Gemstone List"]
		if @info["Signal ID"]
			menu.signal_handler_disconnect(@info["Signal ID"])
			@info["Signal ID"] = nil
		end

		menu.remove_all
		if name == "Main"
			all_months = []
			@gemstone_data["Character Info"].each{ |name,_|
				@gemstone_data["Character Info"][name]["Gemstone Finds"].each{ |date,_|
					month_year = date.split("/")
					new_date = "#{month_year[0]}/#{month_year[2]}"
					month, year = new_date.split('/').map(&:to_i)
					new_date = Date.new(year, month, 1)
					formatted_date = new_date.strftime("%B %Y")
					all_months.push(formatted_date) unless all_months.include?(formatted_date)
				}
			}

			menu.append_text("All")
			all_months.each{ |date| menu.append_text(date) }
			@gemstone_data["Character Info"][name]["Gemstone Finds"].each{ |date,_| menu.append_text(date) }
		else
			@gemstone_data["Character Info"][name]["Gemstone Finds"].each{ |date,_| menu.append_text(date) }
		end
		@info["Signal ID"] = menu.signal_connect("changed"){
			if name == "Main"
				if menu.active_text == "All"
					type = "all"
				else
					type = "single"
					date = menu.active_text
					new_date = Date.strptime(date, "%B %Y")
					formatted_date = "#{new_date.month}/#{new_date.year}"
				end

				gem_stats = {}
				gem_stats["Total Gems Found"] = 0
				gem_stats["Kills For First Gem"] = 0
				gem_stats["Kills For Second/Third Gem"] = 0
				gem_stats["Kills No First Gem"] = 0
				gem_stats["Kills No Second/Third Gem"] = 0
				gem_stats["First Month Gemstones"] = 0
				gem_stats["Second/Third Month Gemstones"] = 0
				gem_stats["Total Properties"] = 0
				gem_stats["Total Regional"] = 0
				gem_stats["Total Common"] = 0
				gem_stats["Total Common/Common"] = 0
				gem_stats["Total Common/Regional"] = 0
				gem_stats["Total Rare/Common"] = 0
				gem_stats["Total Rare/Regional"] = 0
				gem_stats["Total Legendary/Common"] = 0
				gem_stats["Total Legendary/Regional"] = 0
				gem_stats["Critter Info"] = {}
				gem_stats["Property Info"] = {}
				gem_stats["Property Rarity"] = {}
				gem_stats["Current Week Kills"] = 0

				@gemstone_data["Character Info"].each{ |name,_|
					if type == "all"
						@gemstone_data["Character Info"][name]["No First Gemstone Week Kills"].each{ |_,value| gem_stats["Kills No First Gem"] += value }
						@gemstone_data["Character Info"][name]["No Second/Third Gemstone Week Kills"].each{ |_,value| gem_stats["Kills No Second/Third Gem"] += value }
					else
						needed_stats = @gemstone_data["Character Info"][name]["No First Gemstone Week Kills"][formatted_date]
						gem_stats["Kills No First Gem"] += needed_stats if needed_stats
						
						needed_stats = @gemstone_data["Character Info"][name]["No Second/Third Gemstone Week Kills"][formatted_date]
						gem_stats["Kills No Second/Third Gem"] += needed_stats if needed_stats
					end

					total_kills = 0
					@gemstone_data["Character Info"][name]["Critter Kills"].each{ |_,kill_count| total_kills += kill_count }
					gem_stats["Current Week Kills"] = total_kills
					
					if (formatted_date == "#{@timezone.now.month}/#{@timezone.now.year}") || (type == "all")
						if !@info["People Found Gemstone This Week"].include?(name)
							if @info["Gemstones Found This Month"][name] == 0
								gem_stats["Kills No First Gem"] += gem_stats["Current Week Kills"]
							else
								gem_stats["Kills No Second/Third Gem"] += gem_stats["Current Week Kills"]
							end
						end
					end

					if !@gemstone_data["Character Info"][name]["Gemstone Finds"].empty?
						@gemstone_data["Character Info"][name]["Gemstone Finds"].each{ |date,value|
							month_year = date.split("/")
							month = month_year[0]
							year = month_year[2]
							if ((month.to_i == new_date.month.to_i) && (year.to_i == new_date.year.to_i)) || (type == "all")
								gem_stats["Total Gems Found"] += 1
								gem_stats["Critter Info"][value["Critter Found On"]] += 1
								
								if value["Gemstone Found This Month"] == "First"
									gem_stats["Kills For First Gem"] += value["Total Kills"].to_i
									gem_stats["First Month Gemstones"] += 1
								elsif value["Gemstone Found This Month"] =~ /Second|Third/
									gem_stats["Kills For Second/Third Gem"] += value["Total Kills"].to_i
									gem_stats["Second/Third Month Gemstones"] += 1
								end
								
								if (value["Property One Rarity"] == "Common") && (value["Property Two Rarity"] == "Common")
									gem_stats["Total Common/Common"] += 1
								elsif (value["Property One Rarity"] =~ /Common|Regional/) && (value["Property Two Rarity"] =~ /Common|Regional/)
									gem_stats["Total Common/Regional"] += 1
								elsif value["Gemstone Rarity"] == "Common"
									gem_stats["Total Common"] += 1
								elsif value["Gemstone Rarity"] == "Regional"
									gem_stats["Total Regional"] += 1
								elsif (value["Property One Rarity"] == "Common") && (value["Property Two Rarity"] == "Rare") && (value["Property Three Rarity"] == "None")
									gem_stats["Total Rare/Common"] += 1
								elsif (value["Property One Rarity"] == "Regional") && (value["Property Two Rarity"] == "Rare") && (value["Property Three Rarity"] == "None")
									gem_stats["Total Rare/Regional"] += 1
								elsif (value["Property One Rarity"] == "Common") && (value["Property Three Rarity"] == "Legendary")
									gem_stats["Total Legendary/Common"] += 1
								elsif (value["Property One Rarity"] == "Regional") && (value["Property Three Rarity"] == "Legendary")
									gem_stats["Total Legendary/Regional"] += 1
								end
								
								[ value["Property One Text"], value["Property Two Text"], value["Property Three Text"] ].each{ |info|
									if info != "None"
										gem_stats["Property Info"][info] += 1
										gem_stats["Total Properties"] += 1
									end
								}

								[ value["Property One Rarity"], value["Property Two Rarity"], value["Property Three Rarity"] ].each{ |info| gem_stats["Property Rarity"][info] += 1 if info != "None" }
							end
						}
					end
				}

				regional = gem_stats["Total Regional"]
				common = gem_stats["Total Common"]
				common_common = gem_stats["Total Common/Common"]
				common_regional = gem_stats["Total Common/Regional"]
				rare_common = gem_stats["Total Rare/Common"]
				rare_regional = gem_stats["Total Rare/Regional"]
				legendary_common = gem_stats["Total Legendary/Common"]
				legendary_regional = gem_stats["Total Legendary/Regional"]
				total_gems = gem_stats["Total Gems Found"]
				text = ""
				text += "Total Gems Found:               #{total_gems}\n"
				text += "Total Common Gems:              #{common} (#{((common.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Regional Gems:            #{regional} (#{((regional.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Common/Common Gems:       #{common_common} (#{((common_common.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Common/Regional Gems:     #{common_regional} (#{((common_regional.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Rare/Common Gems:         #{rare_common} (#{((rare_common.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Rare/Regional Gems:       #{rare_regional} (#{((rare_regional.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Legendary/Common Gems:    #{legendary_common} (#{((legendary_common.to_f / total_gems) * 100).round(2)}%)\n"
				text += "Total Legendary/Regional Gems:  #{legendary_regional} (#{((legendary_regional.to_f / total_gems) * 100).round(2)}%)\n"
				text += "\n"
				
				grand_total_kills = 0

				gem_kills = gem_stats["Kills For First Gem"]
				no_kills = gem_stats["Kills No First Gem"]
				total_kills = gem_kills + no_kills
				grand_total_kills += total_kills
				month_gems = gem_stats["First Month Gemstones"]
				average = (total_kills.to_f / month_gems).round(2)
				if month_gems == 0
					@info["Average Kills 1st Gemstone"] = 1.0
				else
					@info["Average Kills 1st Gemstone"] = (total_kills.to_f / month_gems).round(2) if type == "all"
				end
				text += "1st Gemstone Kills:             #{add_commas(gem_kills)}\n"
				text += "Kills With No Gem:              #{add_commas(no_kills)}\n"
				text += "Total Kills:                    #{add_commas(total_kills)}\n"
				text += "Gemstones Found:                #{month_gems}\n"
				text += "Average Kills Per Gem:          0\n" if month_gems == 0
				text += "Average Kills Per Gem:          #{average}\n" if month_gems > 0
				text += "\n"
				
				gem_kills = gem_stats["Kills For Second/Third Gem"]
				no_kills = gem_stats["Kills No Second/Third Gem"]
				total_kills = gem_kills + no_kills
				grand_total_kills += total_kills
				month_gems = gem_stats["Second/Third Month Gemstones"]
				average = (total_kills.to_f / month_gems).round(2)
				if month_gems == 0
					@info["Average Kills 2nd 3rd Gemstone"] = 1.0
				else
					@info["Average Kills 2nd 3rd Gemstone"] = (total_kills.to_f / month_gems).round(2) if type == "all"
				end
				text += "2nd/3rd Gemstone Kills:         #{add_commas(gem_kills)}\n"
				text += "Kills With No Gem:              #{add_commas(no_kills)}\n"
				text += "Total Kills:                    #{add_commas(total_kills)}\n"
				text += "Gemstones Found:                #{month_gems}\n"
				text += "Average Kills Per Gem:          0\n" if month_gems == 0
				text += "Average Kills Per Gem:          #{average}\n" if month_gems > 0
				text += "\n"

				text += "Total Kills:                    #{add_commas(grand_total_kills)}\n"
				text += "Average Kills Per Gem:          #{(grand_total_kills.to_f / total_gems).round(2)}\n"
				
				text += "\nCritters Gemstones Found On:\n"
				sorted = gem_stats["Critter Info"].sort_by { |_, v| -v }.to_h
				sorted.each{ |critter_name,number| text += "#{number} #{critter_name}\n" }

				text += "\nGemstone Properties:\n"
				text += "#{gem_stats["Total Properties"]} Total Properties\n"
				gem_stats["Property Rarity"].each{ |rarity,value| text += "#{value} #{rarity}\n" }
				text += "\n"
				sorted = gem_stats["Property Info"].sort_by { |_, v| -v }.to_h
				
				needed_data = {}
				sorted.each{ |property,number|
					math = "#{number} (#{((number.to_f / gem_stats["Total Properties"]) * 100).round(2)}%)"
					needed_data[property] = math
				}

				longest_length = needed_data.values.max_by(&:length).length
				needed_data.each{ |property,number|
					spaces_needed = ""
					(longest_length - number.length).times{ spaces_needed += " " }
					text += "#{number}#{spaces_needed} #{property}\n"
				}
				@info["Labels"]["Gemstone History"].text = text
			else
				date = menu.active_text
				hash = @gemstone_data["Character Info"][name]["Gemstone Finds"]
				formatted_date = date.split("/").map.with_index{ |part, i|
					if i < 2
						part.rjust(2, '0')
					else
						part
					end
				}.join("/")
				
				critter = hash[date]["Critter Found On"]
				kills_total = hash[date]["Total Kills"]
				spaces_kill_text = ""
				(5 - kills_total.to_s.length).times{ spaces_kill_text += " " }
				@info["Found Hash"] = @gemstone_data["Character Info"][name]["Gemstone Finds"][date]
				text = ""
				stats = [ "Property One", "Property Two", "Property Three" ]
				stats.each{ |stat|
					if @info["Found Hash"]["#{stat} Text"]
						if @info["Found Hash"]["#{stat} Text"] != "None"
							rarity_text = rarity_coloring(@info["Found Hash"]["#{stat} Rarity"], nil)
							text += "\n#{rarity_text} - #{@info["Found Hash"]["#{stat} Text"]}"
						end
					end
				}
				text += "\n#{@info["Found Hash"]["Gemstone Found This Month"]} Gemstone Found This Month"
				rarity_text = rarity_coloring(@info["Found Hash"]["Gemstone Rarity"], true)
				@info["Labels"]["Gemstone History"].set_markup("\n#{rarity_text} GEMSTONE FOUND!\nFound: #{formatted_date}\nTotal kills: #{kills_total}\nFound on: #{critter}#{text}")
			end
		}
		count = menu.model.iter_n_children(nil)
		menu.set_active(0) if count > 0
	end
	
	def self.add_remove_captain_group(name, change)
		text = @info["Entries"][name].text
		data = @gemstone_data["Group"]
		if text.length > 0
			if change == "Add"
				data.push(text) unless data.include?(text)
			elsif change == "Remove"
				data.delete(text) if data.include?(text)
			elsif change == "Captain"
				data.delete(text) if data.include?(text)
				data.unshift(text)
			end
			if data.count > 0
				captain = data.shift
				data = data.sort
				data.unshift(captain)
			end
			@info["Entries"][name].text = ""
			@info["Entries"][name].grab_focus
			@gemstone_data["Group"] = data
			
			@info["Labels"]["Group"].set_tooltip_text("#{@gemstone_data["Group"].join(", ")}")
			@info["Update Info"].push(Char.name) unless @info["Update Info"].include?(Char.name)
		end
	end
	
	def self.create_jewel_tab
		@info["Menus"]["Critter List"] = Gtk::ComboBoxText.new
		menu = @info["Menus"]["Critter List"]
		critter_list = [ "horned basalt grotesque", "infernal death knight", "smouldering skeletal dreadsteed", "gaudy phantasmic conjurer", "flickering mist-wreathed banshee", "ashen patrician vampire", "cadaverous tatterdemalion ghast", "bloody halfling cannibal", "immense gold-bristled hinterboar", "stunted halfling bloodspeaker", "behemothic gorefrost golem", "savage fork-tongued wendigo", "heavily armored battle mastodon", "tattooed gigas berserker", "niveous giant warg", "grim gigas skald", "brawny gigas shield-maiden", "quivering sanguine ooze", "flayed gigas disciple", "colossal boreal undansormr", "withered shadow-cloaked draugr", "shining winged disir", "squamous reptilian mutant", "eyeless black valravn", "roiling crimson angargeist", "chitinous kiramon myrmidon", "disfigured hive thrall", "corpulent kresh ravager", "sleek black kiramon stalker", "translucent kiramon strandweaver", "bloated kiramon broodtender" ]
		critter_list.each{ |name| menu.append_text(name) }
		menu.active = 0
		
		@info["Menus"]["Gemstone Found This Month"] = Gtk::ComboBoxText.new
		menu = @info["Menus"]["Gemstone Found This Month"]
		options = [ "First", "Second", "Third" ]
		options.each{ |option| menu.append_text(option) }
		menu.active = 0
		
		common_properties = [ "Arcane Intensity", "Binding Shot", "Blood Artist", "Blood Prism", "Boatswain's Savvy", "Bold Brawler", "Burning Blood", "Cannoneer's Savvy", "Channeler's Edge", "Consummate Professional", "Cutting Corners", "Dispulsion Ward", "Elemental Resonance", "Elementalist's Gift", "Ephemera's Extension", "Ether Flux", "Flare Resonance", "Force of Will", "Geomancer's Spite", "Grand Theft Kobold", "Green Thumb", "High Tolerance", "Immobility Veil", "Journeyman Defender", "Journeyman Tactician", "Limit Break: Blunt Weapons", "Limit Break: Brawling", "Limit Break: Edged Weapons", "Limit Break: Pole Arm Weapons", "Limit Break: Ranged Weapons", "Limit Break: Spell Aiming", "Limit Break: Thrown Weapons", "Limit Break: Two-Handed Weapons", "Limit Break: Agility", "Limit Break: Aura", "Limit Break: Constitution", "Limit Break: Dexterity", "Limit Break: Discipline", "Limit Break: Influence", "Limit Break: Intuition", "Limit Break: Logic", "Limit Break: Strength", "Limit Break: Wisdom", "Mana Prism", "Metamorphic Shield", "Mephitic Brume", "Mystic Magnification", "Navigator's Savvy", "Opportunistic Sadism", "Root Veil", "Slayer's Fortitude", "Spirit Prism", "Stamina Prism", "Storm of Rage", "Subtle Ward", "Tactical Canny", "Taste of Brutality", "Twist the Knife", "Web Veil" ]
		
		regional_properties = [ "Grimswarm: Shroud Soother", "Hinterwilds: Indigestible", "Hinterwilds: Light of the Disir", "Hinterwilds: Warden of the Damned", "Moonsedge: Gift of Enlightement", "Moonsedge: Organ Enthusiast", "Temple Nelemar: Breath of the Nymph", "Temple Nelemar: Perfect Conduction", "Temple Nelemar: Trident of the Sunderer", "The Hinterwilds: Gift of Enlightement", "The Hive: Arrhythmic Gait", "The Hive: Astral Spark", "The Hive: Gift of Enlightement", "The Rift: Gift of the God-King" ]
		
		rare_properties = [ "Adaptive Resistance", "Advanced Spell Shielding", "Anointed Defender", "Arcane Opus", "Bandit Bait", "Blood Boil", "Blood Siphon", "Blood Wellspring", "Chameleon Shroud", "Channeler's Epiphany", "Defensive Duelist", "Evanescent Possession", "Grace of the Battlecaster", "Greater Arcane Intensity", "Hunter's Afterimage", "Infusion of Acid", "Infusion of Cold", "Infusion of Disintegration", "Infusion of Disruption","Infusion of Heat",  "Infusion of Lightning", "Infusion of Plasma", "Infusion of Steam", "Infusion of Vacuum",  "Innate Focus", "Lost Arcanum", "Mana Wellspring", "Martial Impulse", "Master Tactician", "Relentless", "Relentless Warder", "Ripe Melon", "Rock Hound", "Serendipitous Hex", "Spirit Wellspring", "Stamina Wellspring", "Strong Back", "Sureshot", "Terror's Tribute", "Tethered Strike", "Thirst for Brutality" ]
		
		legendary_properties = [ "Arcane Aegis", "Arcanist's Ascendancy", "Arcanist's Blade", "Arcanist's Will", "Charged Presence", "Chronomage Collusion", "Forbidden Arcanum", "Imaera's Balm", "Mana Shield", "Mirror Image", "Mystic Impulse", "One Shot, One Kill", "Pixie's Mischief", "Reckless Precision", "Spellblade's Fury", "Stolen Power", "Thorns of Acid", "Thorns of Cold", "Thorns of Disintegration", "Thorns of Disruption", "Thorns of Heat", "Thorns of Lightning", "Thorns of Plasma", "Thorns of Steam", "Thorns of Vacuum", "Trueshot", "Unearthly Chains", "Witchhunter's Ascendancy" ]
		
		@info["Menus"]["First Property"] = Gtk::ComboBoxText.new
		menu = @info["Menus"]["First Property"]
		menu.append_text("None")
		common_properties.each{ |option| menu.append_text(option) }
		regional_properties.each{ |option| menu.append_text(option) }
		menu.active = 0
		
		@info["Menus"]["Second Property"] = Gtk::ComboBoxText.new
		menu = @info["Menus"]["Second Property"]
		menu.append_text("None")
		common_properties.each{ |option| menu.append_text(option) }
		regional_properties.each{ |option| menu.append_text(option) }
		rare_properties.each{ |option| menu.append_text(option) }
		menu.active = 0
		
		@info["Menus"]["Third Property"] = Gtk::ComboBoxText.new
		menu = @info["Menus"]["Third Property"]
		menu.append_text("None")
		legendary_properties.each{ |option| menu.append_text(option) }
		menu.active = 0
		
		row = 0
		column = -1
		rarity_names = [ "Common", "Regional", "Rare", "Legendary" ]
		menus = [ "Property One Rarity", "Property Two Rarity", "Property Three Rarity", "Gemstone Rarity" ]
		menus.each{ |menu_name|
			@info["Menus"][menu_name] = Gtk::ComboBoxText.new
			menu = @info["Menus"][menu_name]
			menu.append_text("None") if menu_name != "Gemstone Rarity"
			rarity_names.each{ |rarity|	menu.append_text(rarity) }
			menu.active = 0
			@info["Grids"]["Jewel Rarity Menus"].attach(Gtk::Label.new(menu_name), column += 1, row, 1, 1)
			@info["Grids"]["Jewel Rarity Menus"].attach(menu, column += 1, row, 1, 1)
			if column >= 3
				row += 1
				column = -1
			end
		}

		row = -1
		@info["Grids"]["Add Jewel"].attach(@info["Grids"]["Jewel Labels"], 0, row += 1, 1, 1)
		@info["Grids"]["Add Jewel"].attach(@info["Grids"]["Jewel Spin Buttons"], 0, row += 1, 1, 1)
		@info["Grids"]["Add Jewel"].attach(@info["Grids"]["Jewel Rarity Menus"], 0, row += 1, 1, 1)
		@info["Grids"]["Add Jewel"].attach(@info["Grids"]["Jewel Critter Menu"], 0, row += 1, 1, 1)
		@info["Grids"]["Add Jewel"].attach(@info["Grids"]["Jewel Buttons"], 0, row += 1, 1, 1)
		
		row = -1
		@info["Grids"]["Jewel Labels"].attach(@info["Labels"]["Jewel Label"], 0, row += 1, 1, 1)
		@info["Labels"]["Jewel Label"].set_line_wrap(true)
		@info["Labels"]["Jewel Label"].set_max_width_chars(70)
		
		@info["Buttons"]["Save Jewel"] = Gtk::Button.new(:label => "Save Jewel")
		
		@info["Buttons"]["Save Jewel"].signal_connect("clicked"){
			day = @info["Spin Buttons"]["Day"].value.to_i
			month = @info["Spin Buttons"]["Month"].value.to_i
			year = @info["Spin Buttons"]["Year"].value.to_i

			date = "#{month}/#{day}/#{year}"
			info = "Character Info"
			data = "Gemstone Finds"
			name = @info["Menus"]["Character List"].active_text
			@gemstone_data[info][name][data][date] = {}
			hash = @gemstone_data[info][name][data][date]
			
			new_day = day.to_s.length == 1 ? "0#{day}" : day.dup
			new_month = month.to_s.length == 1 ? "0#{month}" : month.dup
			
			one_text = @info["Menus"]["First Property"].active_text
			two_text = @info["Menus"]["Second Property"].active_text
			three_text = @info["Menus"]["Third Property"].active_text
			
			one_rarity = @info["Menus"]["Property One Rarity"].active_text
			two_rarity = @info["Menus"]["Property Two Rarity"].active_text
			three_rarity = @info["Menus"]["Property Three Rarity"].active_text
			
			hash["Date Found"] = "#{year}-#{new_month}-#{new_day} 12:00:00 -0400"
			hash["Critter Found On"] = @info["Menus"]["Critter List"].active_text
			hash["Total Kills"] = @info["Spin Buttons"]["Kills"].value.to_i
			hash["Gemstone Found This Month"] = @info["Menus"]["Gemstone Found This Month"].active_text
			hash["Property One Text"] = one_text if one_text != "None"
			hash["Property Two Text"] = two_text if two_text != "None"
			hash["Property Three Text"] = three_text if three_text != "None"
			hash["Property One Rarity"] = one_rarity if one_rarity != "None"
			hash["Property Two Rarity"] = two_rarity if two_rarity != "None"
			hash["Property Three Rarity"] = three_rarity if three_rarity != "None"
			hash["Gemstone Rarity"] = @info["Menus"]["Gemstone Rarity"].active_text
			
			@info["Update Info"].push(name) unless @info["Update Info"].include?(name)
			echo "Jewel information has been added!"
			@info["Menus"]["Character List"].set_active(0)
		}

		row = 0
		column = -1
		adjustments = {}
		buttons = [ "Month", "Day", "Year", "Kills" ]
		buttons.each{ |button_name|
			if button_name == "Day"
				adjustments[button_name] = Gtk::Adjustment.new(1, 1, 31, 1, 1, 0)
			elsif button_name == "Month"
				adjustments[button_name] = Gtk::Adjustment.new(1, 1, 12, 1, 1, 0)
			elsif button_name == "Year"
				adjustments[button_name] = Gtk::Adjustment.new(2025, 2025, 2100, 1, 1, 0)
			elsif button_name == "Kills"
				adjustments[button_name] = Gtk::Adjustment.new(1, 1, 50000, 1, 1, 0)
			end
			@info["Spin Buttons"][button_name] = Gtk::SpinButton.new(adjustments[button_name], 1, 0)
			label = Gtk::Label.new("#{button_name}: ")
			@info["Grids"]["Jewel Spin Buttons"].attach(label, column += 1, row, 1, 1)
			@info["Grids"]["Jewel Spin Buttons"].attach(@info["Spin Buttons"][button_name], column += 1, row, 1, 1)
			if column >= 5
				row += 1
				column = -1
			end
		}
		
		row = -1
		@info["Grids"]["Jewel Critter Menu"].attach(Gtk::Label.new("Critter"), 0, row += 1, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(@info["Menus"]["Critter List"], 1, row, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(Gtk::Label.new("Found This Month"), 0, row += 1, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(@info["Menus"]["Gemstone Found This Month"], 1, row, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(Gtk::Label.new("First Property"), 0, row += 1, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(@info["Menus"]["First Property"], 1, row, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(Gtk::Label.new("Second Property"), 0, row += 1, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(@info["Menus"]["Second Property"], 1, row, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(Gtk::Label.new("Third Property"), 0, row += 1, 1, 1)
		@info["Grids"]["Jewel Critter Menu"].attach(@info["Menus"]["Third Property"], 1, row, 1, 1)
		
		@info["Grids"]["Jewel Buttons"].attach(@info["Buttons"]["Save Jewel"], 0, 0, 1, 1)
	end
	
	def self.hide_show_jewel_page
		grids = [ @info["Grids"]["Jewel Spin Buttons"], @info["Grids"]["Jewel Rarity Menus"], @info["Grids"]["Jewel Critter Menu"], @info["Grids"]["Jewel Buttons"] ]
		if @info["Menus"]["Character List"].active_text == "Main"
			grids.each{ |grid| grid.hide }
			@info["Labels"]["Jewel Label"].text = "IMPORTANT: This is only for jewels you found while the script was not running or jewels you found before the current week.\n\nALSO IMPORTANT: If the character is part of the group then only the Captain should do ANY of the following steps, if the character isn't part of the group then the character themselves should do it.\n\nAdding jewel information is totally optional, if you just started using the script and you want the stats of the current week/month to be accurate you should at least add the current week/month jewels. If you don't know a particular stat about a jewel select the 'None' option if there is one, if not it is a required option so just guess if you don't remember.\n\nYou can add jewels you found to the database here, but first you must select the character you want to add a jewel to in the Character Select Menu.\n\nIf you find a jewel while the script is running, and it is still the current week you found the jewel in, you should select the character in the Character Select Menu then click the 'Current' tab, there should be a button labeled 'Add Gemstone', hold the jewel in your left or right hand and click the 'Add Gemstone' button. This will automatically gather and save all necessary information about the jewel."
		else
			grids.each{ |grid| grid.show }
			@info["Labels"]["Jewel Label"].set_markup("<span foreground='#ebcb8b'><b><u>IMPORTANT! SELECT 'Main' FROM THE CHARACTER LIST MENU FOR INSTRUCTIONS BEFORE USING THIS PAGE.</u></b></span>")
		end
	end
	
	def self.create_window_tab
		row = -1
		@info["Grids"]["Window"].attach(@info["Grids"]["Window Label"], 0, row += 1, 1, 1)
		@info["Grids"]["Window"].attach(@info["Grids"]["Window Spin Buttons"], 0, row += 1, 1, 1)
		
		@info["Grids"]["Window Label"].attach(@info["Labels"]["Window Label"], 0, 0, 1, 1)
		@info["Labels"]["Window Label"].text = "IMPORTANT! Before changing these values, close the script on all characters, then restart the script on one character, change the settings, then close the script again. You can now reopen the script on all characters.\n\nThe default for both values is 500."
		
		@info["Labels"]["Window Label"].set_line_wrap(true)
		@info["Labels"]["Window Label"].set_max_width_chars(70)
		
		row = 0
		column = -1
		adjustments = {}
		width = @gemstone_data["Window Width"]
		height = @gemstone_data["Window Height"]
		buttons = [ "Window Width", "Window Height" ]
		buttons.each{ |button_name|
			if button_name == "Window Width"
				adjustments[button_name] = Gtk::Adjustment.new(width, 200, 5000, 1, 1, 0)
			elsif button_name == "Window Height"
				adjustments[button_name] = Gtk::Adjustment.new(height, 200, 5000, 1, 1, 0)
			end
			@info["Spin Buttons"][button_name] = Gtk::SpinButton.new(adjustments[button_name], 1, 0)
			label = Gtk::Label.new("#{button_name}: ")
			button = @info["Spin Buttons"][button_name]
			@info["Grids"]["Window Spin Buttons"].attach(label, column += 1, row, 1, 1)
			@info["Grids"]["Window Spin Buttons"].attach(button, column += 1, row, 1, 1)
			
			button.signal_connect("value-changed"){
				width = @info["Spin Buttons"]["Window Width"].value.to_i
				height = @info["Spin Buttons"]["Window Height"].value.to_i
				@gemstone_data["Window Width"] = width
				@gemstone_data["Window Height"] = height
				@main_window.resize(width, height)
				@info["Update Info"].push(Char.name) unless @info["Update Info"].include?(Char.name)
			}
		}
	end
	
	def self.found_gemstone_message(name)
		message = []
		message << monsterbold_start
		5.times{ message << "############################################################" }
		message << "CONGRATULATIONS! #{name} has found a jewel!"
		message << "If you want to add this jewel to your stats do the following:"
		message << "If #{name} is part of the Group that you setup under the group tab in the window then give the jewel to the Group Captain and have the Group Captain do: ;send show"
		message << "If #{name} is not listed in the group then have #{name} do: ;send show"
		message << "Hold the jewel in either hand, select #{name}'s name from the drop down menu in the top left, then click the 'Current' tab."
		message << "There should be a button towards the bottom of the page reading 'Add Gemstone', click this button. The jewel's stats will now be saved when you exit the script!"
		5.times{ message << "############################################################" }
		message << monsterbold_end
		puts message.join("\n")
	end

	def self.create_main_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.name = "main_window"
		@main_window.set_keep_above(true)
		@main_window.set_border_width(10)
		width = @gemstone_data["Window Width"] ? @gemstone_data["Window Width"] : 500
		height = @gemstone_data["Window Height"] ? @gemstone_data["Window Height"] : 500
		@main_window.resize(width, height)
		@main_window.set_position(Gtk::WindowPosition::CENTER)

		header = Gtk::HeaderBar.new
		header.set_name("main_header")
		header.show_close_button = true
		header_box = Gtk::Box.new(:vertical, 0)
		@info["Labels"]["Title Label"] = Gtk::Label.new("#{Char.name} Looter")
		@info["Labels"]["Subtitle Label"] = Gtk::Label.new("Hunt Info")
		header_box.pack_start(@info["Labels"]["Title Label"], expand: false, fill: false, padding: 0)
		header_box.pack_start(@info["Labels"]["Subtitle Label"], expand: false, fill: false, padding: 0)
		header_box.show_all
		header.set_custom_title(header_box)
		@main_window.titlebar = header
		
		css = <<-CSS  
			#main_window,
			#main_window *{
				background-image: none;
				background-color: #2e3440;
				color: #d8dee9;
				border: none;
				margin: 0;
				box-shadow: none;
			}
		
			#main_window selection{
				background-color: #88c0d0;
				color: white;
			}
		
			#main_window menu menuitem:hover, 
				.menuitem:hover{
				background-color: #88c0d0;
				color: #ffffff;
			}
		
			#main_window notebook > header.top > tabs > tab:checked{
				box-shadow: inset 0 -6px #88c0d0;
			}

			#main_window button{
				border: none;
				box-shadow: none;
				background-image: none;
				border-width: 2px;
				border-style: solid;
				border-color: #88c0d0;
			}

			#main_window notebook tab{
				border: 2px solid #88c0d0;
				border-radius: 4px;
				padding: 6px 12px;
			}

			#main_header,
			#main_header:backdrop,
			#main_header:focus,
			#main_header:active,
			#main_header.titlebar,
			#main_header.titlebar:backdrop{
				background-color: #2e3440;
				color: #2e3440;
				font-weight: bold;
				border-radius: 0px;
				padding: 0px;
			}

			#main_header GtkLabel{
				color: #2e3440;
				border-radius: 0px;
				padding: 0px;
			}

			#main_header button{
				background-color: #d8dee9;
				color: black;
				border-radius: 0px;
				padding: 0px;
			}
			
			.monospace-labels{
				font-family: "Courier New";
				font-size: 12pt;
			}
			
			#main_window entry{
				background-color: #2e3440;
				color: #d8dee9;
				border: 3px solid #88c0d0;
				padding: 1px;
				font-size: 12pt;
			}
		CSS
		
		provider = Gtk::CssProvider.new
		provider.load(data: css)
		Gtk::StyleContext.add_provider_for_screen(
		  Gdk::Screen.default,
		  provider,
		  Gtk::StyleProvider::PRIORITY_APPLICATION
		)

		@info["Timer IDs"]["One"] = GLib::Timeout.add(500){
			if $show_gemstone_tracker_window
				@main_window.show_all
				hide_show_jewel_page
				$show_gemstone_tracker_window = nil
			end
			
			true 
		}
		
		@main_window.signal_connect("map"){ @info["Buttons"]["Add Gemstone"].hide }
		
		@main_window.signal_connect("delete-event"){ |widget, event|
			if @info["Window Can Close"]
				false
			else
				@main_window.hide
				true
			end
		}
		
		@info["Scroll Windows"]["Main Window"] = Gtk::ScrolledWindow.new
		scroll_window = @info["Scroll Windows"]["Main Window"]
		scroll_window.set_policy(:automatic, :automatic)
		scroll_window.hexpand = true
		scroll_window.vexpand = true
		
		grid_names = [ "Main", "Current", "History", "Add Jewel", "Group", "Help", "Window", "Window Label", "Window Spin Buttons", "Help Checkbox", "Group Labels", "Group Buttons", "Group Instructions", "Jewel Labels", "Jewel Critter Menu", "Jewel Rarity Menus", "Jewel Spin Buttons", "Jewel Buttons", "Main Menus", "History Menus", "History Information", "Kills", "Gemstones", "Button_Grid" ]
		grid_names.each{ |name| @info["Grids"][name] = Gtk::Grid.new }
		
		labels = [ "Kill Count", "Gemstone Found", "Gemstone History", "Help Label", "Jewel Label", "Window Label" ]
		labels.each{ |label| @info["Labels"][label] = Gtk::Label.new("") }
		
		row = -1
		@info["Grids"]["Current"].attach(@info["Grids"]["Kills"], 0, row += 1, 1, 1)
		@info["Grids"]["Current"].attach(@info["Grids"]["Gemstones"], 0, row += 1, 1, 1)
		@info["Grids"]["Current"].attach(@info["Grids"]["Button_Grid"], 0, row += 1, 1, 1)

		row = -1
		@info["Grids"]["History"].attach(@info["Grids"]["History Menus"], 0, row += 1, 1, 1)
		@info["Grids"]["History"].attach(@info["Grids"]["History Information"], 0, row += 1, 1, 1)
		
		row = -1
		@info["Grids"]["History Information"].attach(@info["Labels"]["Gemstone History"], 0, row += 1, 1, 1)
		
		create_jewel_tab
		create_window_tab
		
		row = -1
		@info["Grids"]["Group"].attach(@info["Grids"]["Group Labels"], 0, row += 1, 1, 1)
		@info["Grids"]["Group"].attach(@info["Grids"]["Group Buttons"], 0, row += 1, 1, 1)
		@info["Grids"]["Group"].attach(@info["Grids"]["Group Instructions"], 0, row += 1, 1, 1)
		
		row = -1
		@info["Grids"]["Help"].attach(@info["Grids"]["Help Checkbox"], 0, row += 1, 1, 1)
		widget = @info["Labels"]["Help Label"]
		@info["Grids"]["Help"].attach(widget, 0, row += 1, 1, 1)
		widget.text = @help_text
		widget.set_line_wrap(true)
		widget.set_max_width_chars(70)
		
		@info["Checkboxes"]["Save Type"] = Gtk::CheckButton.new("Save Type")
		if @gemstone_data["Save Type Checkbox"] == "Yes"
			@info["Checkboxes"]["Save Type"].active = true
		else
			@info["Checkboxes"]["Save Type"].active = false
		end
		row = -1
		@info["Grids"]["Help Checkbox"].attach(@info["Checkboxes"]["Save Type"], 0, row += 1, 1, 1)

		row = -1
		name = "Group"
		@info["Labels"][name] = Gtk::Label.new(name)
		@info["Labels"][name].set_markup("<span foreground='#d8dee9'><b><u>Group</u></b></span>")
		@info["Entries"][name] = Gtk::Entry.new
		@info["Buttons"]["Add"] = Gtk::Button.new(:label => "Add")
		@info["Buttons"]["Remove"] = Gtk::Button.new(:label => "Remove")
		@info["Buttons"]["Captain"] = Gtk::Button.new(:label => "Captain")
			
		@info["Grids"]["Group Labels"].attach(@info["Labels"][name], 0, row += 1, 1, 1)
		@info["Grids"]["Group Buttons"].attach(@info["Entries"][name], 0, row += 1, 1, 1)
		@info["Grids"]["Group Buttons"].attach(@info["Buttons"]["Add"], 1, row, 1, 1)
		@info["Grids"]["Group Buttons"].attach(@info["Buttons"]["Remove"], 2, row, 1, 1)
		@info["Grids"]["Group Buttons"].attach(@info["Buttons"]["Captain"], 3, row, 1, 1)
			
		@info["Entries"][name].signal_connect("changed"){
			entry = @info["Entries"][name]
			text = entry.text
			text = text.gsub(/[^a-zA-Z]/, "")

			formatted_text = text.capitalize

			if entry.text != formatted_text
				entry.text = formatted_text
				entry.set_position(formatted_text.length)
			end
		}

		@info["Labels"]["Instructions"] = Gtk::Label.new("IF UPDATING THIS LIST, be sure to close ;gemstone-tracker on ALL of your characters, including this one, then restart the script on one character, update the group, then close the script again. You can then open the script on any character.\n\nIF YOU MULTI-ACCOUNT: DO NOT LIST SOMEONE HERE IN A GROUP AND HAVE THEM RUN THE SCRIPT (ONLY THE CAPTAIN CAN RUN THE SCRIPT), IT MIGHT BREAK THINGS. If you have multiple characters but don't multi-account then leave this setting blank.\n\nThe script works best if your characters hunt as a group, that way just the Captain (first person listed in group) can run this script and track stats for everyone. All of their stats would be updated in real time in the window.\n\nYou can have your characters hunt separately and have them each run this script (you don't need the window open to track things) but each person would only see their own stats updated in real time. Each character saves/loads the data every 5 minutes which would sync the data across all characters.\n\nHover your mouse over the word 'Group' above to see who is already listed in your group.")
		widget = @info["Labels"]["Instructions"]
		widget.set_line_wrap(true)
		widget.set_max_width_chars(70)
		@info["Grids"]["Group Instructions"].attach(widget, 3, row, 1, 1)
			
		@info["Buttons"]["Add"].signal_connect("clicked"){ add_remove_captain_group(name, "Add") }
		@info["Buttons"]["Remove"].signal_connect("clicked"){ add_remove_captain_group(name, "Remove") }
		@info["Buttons"]["Captain"].signal_connect("clicked"){ add_remove_captain_group(name, "Captain") }
		
		@info["Notebooks"]["Main"] = Gtk::Notebook.new
		@info["Notebooks"]["Main"].set_hexpand(true)
		@info["Notebooks"]["Main"].set_vexpand(true)
		
		pages = [ "Current", "History", "Add Jewel", "Group", "Help", "Window" ]
		pages.each{ |page|
			label = Gtk::Label.new(page)
			@info["Notebooks"]["Main"].append_page(@info["Grids"][page], label)
		}
		
		@info["Notebooks"]["Main"].signal_connect("switch-page") do |_notebook, _page, _page_num|
			GLib::Idle.add do
				@info["Scroll Windows"]["Main Window"].vadjustment.value = @info["Scroll Windows"]["Main Window"].vadjustment.lower
				false
			end
		end
		
		row = -1
		@info["Scroll Windows"]["Main Window"].add(@info["Grids"]["Main"])
		@info["Grids"]["Main"].attach(@info["Grids"]["Main Menus"], 0, row += 1, 1, 1)
		@info["Grids"]["Main"].attach(@info["Notebooks"]["Main"], 0, row += 1, 1, 1)

		@info["Menus"]["Character List"] = Gtk::ComboBoxText.new
		menu = @info["Menus"]["Character List"]
		menu.signal_connect("changed"){
			if menu.active_text
				hide_show_jewel_page
				update_kill_totals(menu.active_text)
				check_reset_data
			end
		}
		@info["Grids"]["Main Menus"].attach(menu, 0, 0, 1, 1)

		menu.append_text("Main")
		sorted = @gemstone_data["Character Info"].sort.to_h
		sorted.each{ |name,_| menu.append_text(name) }
		
		GLib::Idle.add do
			menu.set_active(-1)
			menu.set_active(0)
			false
		end
		
		buttons = [ "Add Gemstone", "Names", "Restart", "Pause Timer", "Pause" ]
		buttons.each{ |button_name| @info["Buttons"][button_name] = Gtk::Button.new(:label => button_name) }
		
		@info["Buttons"]["Names"].signal_connect("clicked"){
			@show_names = @show_names ? nil : true
			@info["Menus"]["Character List"].set_active(1)
			@info["Menus"]["Character List"].set_active(0)
		}
		
		@info["Buttons"]["Restart"].signal_connect("clicked"){ $gemstone_tracker_restart_timer = true	}
		
		@info["Buttons"]["Pause Timer"].signal_connect("clicked"){ $gemstone_tracker_pause_timer = $gemstone_tracker_pause_timer == true ? nil : true }
		
		@info["Buttons"]["Pause"].signal_connect("clicked"){
			var = @info["Pause Updates"]
			button = @info["Buttons"]["Pause"]
			if var
				var = nil
				button.label = "Pause"
			elsif var.nil?
				var = true
				button.label = "Unpause"
			end
			@info["Pause Updates"] = var
		}
		
		@info["Menus"]["Gemstone List"] = Gtk::ComboBoxText.new
		@info["Grids"]["History Menus"].attach(@info["Menus"]["Gemstone List"], 0, 0, 1, 1)
		
		@info["Grids"]["Main Menus"].attach(@info["Menus"]["Character List"], 0, 0, 1, 1)
		@info["Grids"]["Main Menus"].attach(@info["Buttons"]["Names"], 1, 0, 1, 1)
		@info["Grids"]["Main Menus"].attach(@info["Buttons"]["Pause"], 2, 0, 1, 1)
		@info["Grids"]["Main Menus"].attach(@info["Buttons"]["Restart"], 3, 0, 1, 1)
		@info["Grids"]["Main Menus"].attach(@info["Buttons"]["Pause Timer"], 4, 0, 1, 1)
		@info["Grids"]["Kills"].attach(@info["Labels"]["Kill Count"], 0, 0, 1, 1)
		@info["Grids"]["Gemstones"].attach(@info["Labels"]["Gemstone Found"], 0, 0, 1, 1)
		@info["Grids"]["Button_Grid"].attach(@info["Buttons"]["Add Gemstone"], 0, 0, 1, 1)
		
		@info["Buttons"]["Add Gemstone"].signal_connect("clicked"){
			if checkright == "jewel" || checkleft == "jewel"
				$gemstone_tracker_add_gemstone_clicked = true
				@info["Found Hash"] = @gemstone_data["Character Info"][@info["Add Gemstone Name"]]["Gemstone Finds"][@info["Last Gemstone Found"]]
				$gemstone_tracker_get_gemstone_info = true
				wait_until{ $gemstone_tracker_get_gemstone_info.nil? }
				$gemstone_tracker_temp_information.each{ |key,value| @info["Found Hash"][key] = value }
				@info["Buttons"]["Add Gemstone"].hide
				menu = @info["Menus"]["Character List"]
				@info["Update Info"].push(menu.active_text) unless @info["Update Info"].include?(menu.active_text)
				current_menu_item = menu.active
				menu.active = 0
				menu.active = current_menu_item
			else
				10.times{ respond "You must be HOLDING the jewel in order to add the information to the database." }
			end
		}
		
		@info["Labels"].each{ |label_name,label|
			label.use_markup = true
			if label_name !~ /Instructions|Help Label|Jewel Label|Window Label/
				label.selectable = true unless label_name =~ /Title Label|Subtitle Label|Group/
				label.style_context.add_class("monospace-labels")
			end
		}
		
		@info["Timer IDs"]["Two"] = GLib::Timeout.add(1000){
			if @info["Menus"]["Character List"].active_text && @info["Menus"]["Character List"].active_text == "Main"
				if @info["Pause Updates"].nil?
					update_kill_totals(@info["Menus"]["Character List"].active_text)
					check_reset_data
				end
			end
			true 
		}
		
		@info.each{ |data,value| value.each{ |widget_name,widget| widget.set_tooltip_text(@tooltips[widget_name]) if widget.is_a?(Gtk::Widget) } if value.is_a?(Hash) }
		
		@info["Labels"]["Group"].set_tooltip_text("#{@gemstone_data["Group"].join(", ")}")

		@main_window.add(@info["Scroll Windows"]["Main Window"])
	end
	
	before_dying{
		@info["Window Can Close"] = true
		@main_window.close if @main_window
		@main_window = nil
		@info["Timer IDs"].each{ |_,timer| GLib::Source.remove(timer) }
		Gtk.main_quit
		save_data
	}
	
	def self.watching		
		while line = get
			sline = strip_xml(line)
			if sline =~ /^You search the (.*?)\./
				name = checkname
				@info["Current Looter"] = name
				@info["Labels"]["Title Label"].text = "#{Char.name} Looter: #{@info["Current Looter"]}"
				@info["Last Critter Looted"] = $1
				add_new_character(name, true)
				add_to_kill_tracker(name)
			elsif sline =~ /^([a-zA-Z]+) searches an? (.*?)\./
				name = $1
				@info["Current Looter"] = name
				add_new_character(name, nil)
				if @gemstone_data["Group"].include?(name)
					@info["Labels"]["Title Label"].text = "#{Char.name} Looter: #{@info["Current Looter"]}"
					@info["Last Critter Looted"] = $2
					add_to_kill_tracker(name)
				end
			elsif sline =~ /\*\* A glint of light catches your eye, and you notice .* at your feet! \*\*/
				name = checkname
				found_gemstone_message(name)
				gemstone_found(name)
			elsif sline =~ /\*\* A glint of light catches your eye, and you notice .* at ([a-zA-Z]+)'s feet! \*\*/
				name = $1
				if @gemstone_data["Group"].include?(name)
					found_gemstone_message(name)
					gemstone_found(name)
				end
			elsif sline =~ /In the scuffle, (.*) roughly pats the (.*) down for hidden valuables!/
				name = $1
				critter_name = $2
				add_new_character(name, nil)
				if @gemstone_data["Group"].include?(name) && critter_name =~ @ascension_critter_list
					@info["Update Info"].push(name) unless @info["Update Info"].include?(name)
					@info["Mugging Character Name"] = name
					@info["Mugging Critter Name"] = critter_name
				end
			elsif sline =~ /[a-zA-Z]+ hasty search scatters the .* riches/
				if @info["Mugging Character Name"] && @info["Mugging Critter Name"] && @gemstone_data["Group"].include?(@info["Mugging Character Name"])
					if sline =~ /#{@info["Mugging Critter Name"]}/
						name = @info["Mugging Character Name"]
						@gemstone_data["Character Info"][name]["Critter Kills"][@info["Mugging Critter Name"]] += 1 if !@info["People Found Gemstone This Week"].include?(name) && @info["Gemstones Found This Month"][name] < 3
					end
				end
				@info["Mugging Character Name"] = nil
				@info["Mugging Critter Name"] = nil
			elsif sline =~ /^Your hasty search scatters the ([\w\s]+?)(?='s|'|\b') riches to the floor!/
				critter_name = $1
				name = Char.name
				add_new_character(name, true)
				if critter_name =~ @ascension_critter_list
					@info["Update Info"].push(name) unless @info["Update Info"].include?(name)
					@gemstone_data["Character Info"][name]["Critter Kills"][critter_name] += 1 if !@info["People Found Gemstone This Week"].include?(name) && @info["Gemstones Found This Month"][name] < 3
				end
			elsif sline == "show"
				$show_gemstone_tracker_window = true
			elsif sline =~ /^Property:    (.*)/ && $gemstone_tracker_get_gemstone_info
				info = $1.gsub(/ \(Rank \d+ of \d+\)/, "")
				if $gemstone_tracker_temp_information["Property One Text"] == "None"
					$gemstone_tracker_temp_information["Property One Text"] = info
				elsif $gemstone_tracker_temp_information["Property Two Text"] == "None"
					$gemstone_tracker_temp_information["Property Two Text"] = info
				elsif $gemstone_tracker_temp_information["Property Three Text"] == "None"
					$gemstone_tracker_temp_information["Property Three Text"] = info
				end
			elsif sline =~ /^Rarity:      (.*)/ && $gemstone_tracker_get_gemstone_info
				info = $1
				if $gemstone_tracker_temp_information["Property One Rarity"] == "None"
					$gemstone_tracker_temp_information["Property One Rarity"] = info
				elsif $gemstone_tracker_temp_information["Property Two Rarity"] == "None"
					$gemstone_tracker_temp_information["Property Two Rarity"] = info
				elsif $gemstone_tracker_temp_information["Property Three Rarity"] == "None"
					$gemstone_tracker_temp_information["Property Three Rarity"] = info
				end
				
				if $gemstone_tracker_temp_information["Gemstone Rarity"].nil?
					$gemstone_tracker_temp_information["Gemstone Rarity"] = info
				else
					$gemstone_tracker_temp_information["Gemstone Rarity"] = info if (info == "Legendary") || (($gemstone_tracker_temp_information["Gemstone Rarity"] =~ /Common|Regional/) && (info =~ /Rare|Legendary/))
				end
			elsif sline =~ /^You note the telltale filaments of a lesser binding shimmering around/
				$gemstone_tracker_get_gemstone_info = nil
			end
		end
	end
end

echo "Enter ;send show to display the window. You don't need to keep the window open to track stats. You can close it and reopen it again anytime you want to see the stats."

Gtk.queue {
	GemStoneTrackerMain.create_main_window
	Gtk.main
}
	
GemStoneTrackerMain.load_data
GemStoneTrackerMain.watching

sleep