=begin
  autoaccepts offers from people you whitelist

  ;autoaccept@1.0.0

    ;autoaccept allow <person> ...   add a list of people who you want to autoaccept offers from
    ;autoaccept deny  <person> ...   add a list of people who you want to remove from your list
    ;autoaccept ls                   show who is currently allowed by autoaccept
    ;autoaccept reset                reset all currently authorized individuals

  Required: Lich 4.3.12, Olib
  Author: Ondreian
  Tags: util
  
=end

require "Olib"
require "ostruct"

class MatchData
  def to_struct
    OpenStruct.new to_h
  end

  def to_h
    Hash[ self.names.zip( self.captures ) ]
  end
end

class Autoaccept
  VERSION    = "1.0.0"
  OFFER      = /(?<from>.*?) offers you (?<thing>.*?).  Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds./
  AUTHORIZED = self.name.downcase
  ALLOW      = /allow|enable|add/
  DENY       = /revoke|ban|remove|rm/
  LIST       = /ls|list|show/
  RESET      = /clear|reset/

  MENU = "

    ;autoaccept@#{VERSION}

    ;autoaccept allow <person> ...   add a list of people who you want to autoaccept offers from
    ;autoaccept deny  <person> ...   add a list of people who you want to remove from your list
    ;autoaccept ls                   show who is currently allowed by autoaccept
    ;autoaccept reset                reset all currently authorized individuals
  
  "

  def self.authorized
    Settings[AUTHORIZED] ||= []
  end

  def self.reset
    Settings[AUTHORIZED] = []
    Settings.save
  end

  def self.to_s
    "
      allowed : #{authorized.empty? ? 'none' : authorized.join(", ")}
    "
  end

  def self.authorize(*names)
    Settings[AUTHORIZED] = authorized + names.map(&:capitalize)
    Settings.save
  end

  def self.deny(*names)
    Settings[AUTHORIZED] = authorized - names.map(&:capitalize)
    Settings.save
  end

  def self.accept
    empty_right_hand
    dothistimeout "accept", 2, /^You accept/
    yield Char.right
    fill_right_hand
  end

  def self.run!
    while line = get
      next unless offer = line.match(OFFER)
      offer = offer.to_struct
      if authorized.include?(offer.from)
        accept { |item| Containers.lootsack.add item }
      end
    end
  end
end

cmd, *persons = Script.current.vars[1..-1]

unless cmd
  Autoaccept.run!
end

if cmd =~ Autoaccept::ALLOW
  Autoaccept.authorize *persons
  respond Autoaccept.to_s
  exit
end

if cmd =~ Autoaccept::DENY
  Autoaccept.deny *persons
  respond Autoaccept.to_s
  exit
end

if cmd =~ Autoaccept::LIST
  respond Autoaccept.to_s
  exit
end

if cmd =~ Autoaccept::RESET
  Autoaccept.reset
  respond "
      Autoaccept ... reset!
  "
  respond Autoaccept.to_s
  exit
end

respond Autoaccept::MENU
exit