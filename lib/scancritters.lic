#quiet
=begin

	Lists critters in adjacent rooms (including non-cardinal directions).
	
	Inspired by the 'scan' command from another MUD I used to play.

	NOTE:  If you move or look while this script is running, that output will be squelched in addition to the spam from peering.
	This will work in RT, very useful when sneaking around.
	
	Usage:
		>;scancritters
		[scancritters: south: jungle troll]
		[scancritters: here: giant fog beetle, jungle troll chieftain]
		
	Options:
		;scancritters set full on - include creature-vacant rooms\n
		;scancritters set full off - do not include vacant rooms
		;scancritters set current on - include creatures in current room
		;scancritters set current off - do not include current room
		
	author: Kynilir
	name: scancritters
	tags: utility, hunting, critter
	version: 1.0
    
=end

if script.vars[0] =~ /help/
	output = "scancritters options:\n"
	output.concat "     ;scancritters set full on - include creature-vacant rooms\n"
	output.concat "     ;scancritters set full off - do not include vacant rooms\n"
	output.concat "     ;scancritters set current on - include creatures in current room\n"
	output.concat "     ;scancritters set current off - do not include current room\n"
	respond output;
	exit;	
end

if UserVars.scancritters.nil?
	UserVars.scancritters ||= Hash.new
	UserVars.scancritters["current"] = 1
end

if script.vars.include? "set"
	UserVars.scancritters ||= Hash.new
		if script.vars.include? "set full on"
			UserVars.scancritters["full"] = 1
			echo script.name + " full mode on"
		end
		if script.vars.include? "set full off"
			UserVars.scancritters["full"] = nil
			echo script.name + " full mode off"
		end
		if script.vars.include? "set current off"
			UserVars.scancritters["current"] = nil
			echo script.name + " current mode off"
		end
		if script.vars.include? "set current on"
			UserVars.scancritters["current"] = 1
			echo script.name + " current mode on"
		end
	UserVars.save
	exit
end

scanner = proc{
	peer = proc{ |server_string|
		matches = server_string.scan(/\<pushBold\/\>\<pushBold\/\>[^<]*\s*\<a[^<]+\>(?<critter>[^<]*)?\<\/a\>\<popBold\/\>\<popBold\/\>/)
		if !matches.empty?
			$peer_match = matches
		end
		if server_string =~ /Also here:|You peer|You can't peer through|roomDesc|roomName|Obvious (paths|exits)|\<compass\>|You are unable to determine/ 
			#echo "SQUELCH"
		elsif server_string != "\r\n"
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_scanner", peer)
}

before_dying { 
	DownstreamHook.remove("#{script.name}_scanner")
}

scanner.call

silence_me

cards = ['north', 'east', 'west', 'south', 'northeast', 'southeast', 'northwest', 'southwest', 'up', 'down', 'out', 'here']

collect = []

if Room.current.nil?
	echo "error: your current room was not found in the map database"
	exit
end

rooms = Hash.new.merge(Room.current.wayto)
if UserVars.scancritters["current"]
	rooms["here"] = "here"
end

rooms.each { |num, dir|
	$peer_match = nil
	if dir.class != String
		next
	end
	if !cards.include? dir
		dir = dir.partition(" ")[2] 
	end
	if dir == 'here'
		put "look"
		wait
	else 
		put "peer #{dir}"
		waitfor "peer", "you are unable", "you can't peer through that"
	end

	if $peer_match
		j = $peer_match.join(", ")
	elsif UserVars.scancritters["full"]
		j = "none"
	end
	if j
		collect.push(dir + ": " + j)
	end
}

if !collect.empty?
	collect.each {|str|
		echo str
	}
else 
	echo "No critters found"
end
