=begin

  So I was thinkin to myself the other day - in like 2010,
  'Hey, I want an uberbar for Wizard, and I think other people do too.'
  So here it is. Stay classy San Diego - christ I'm old

  ChangeLog:
    2022-05-16
      Updated for GTK3
      Removed for variable defining, though it was a lot easier that way
      Added support for Ascension XP
      Accidentally murdered a poor level 16 to test wounds, so I hope you're okay with being accessory to murder
      Updated "SF" to "Wrayth" - That was a long overdue change, eh?
      I'm sure I'll add other options over the next few weeks

  ToDo:
    Figure out why the encumbrance bar is thicker than the others
    Figure out how to boldify the top labels
    Figure out how to not have the colors dim when not focus
    Add Silver/hr
    Add customization
    Add profession resources

  discord: Valendr0s#6885

  author: Deathravin
  version: 2022-05

=end

if !Gem.loaded_specs["gtk3"]
  echo "###########"
  echo "# I need GTK3 to run, sorry"
  echo "###########"
  exit
end

no_kill_all
no_pause_all
hide_me
debug = false
wait_while { XMLData.next_level_text !~ /(experience|until next level)/ or !XMLData.next_level_value.integer? }

#defining all my variables... I just hate defining variables
window_close = false

uberBar_label_table = uberBar_layout = uberBar_damage = uberBar_table = uberBar = done = window_close = nil
uberBar_damage_nsys_w1 = uberBar_damage_leftArm_w1 = uberBar_damage_rightArm_w1 = uberBar_damage_rightLeg_w1 = uberBar_damage_leftLeg_w1 = uberBar_damage_head_w1 = uberBar_damage_rightFoot_w1 = uberBar_damage_leftFoot_w1 = uberBar_damage_rightHand_w1 = uberBar_damage_leftHand_w1 = uberBar_damage_rightEye_w1 = uberBar_damage_leftEye_w1 = uberBar_damage_back_w1 = uberBar_damage_neck_w1 = uberBar_damage_chest_w1 = uberBar_damage_abdomen_w1 = nil
uberBar_damage_nsys_w2 = uberBar_damage_leftArm_w2 = uberBar_damage_rightArm_w2 = uberBar_damage_rightLeg_w2 = uberBar_damage_leftLeg_w2 = uberBar_damage_head_w2 = uberBar_damage_rightFoot_w2 = uberBar_damage_leftFoot_w2 = uberBar_damage_rightHand_w2 = uberBar_damage_leftHand_w2 = uberBar_damage_rightEye_w2 = uberBar_damage_leftEye_w2 = uberBar_damage_back_w2 = uberBar_damage_neck_w2 = uberBar_damage_chest_w2 = uberBar_damage_abdomen_w2 = nil
uberBar_damage_nsys_w3 = uberBar_damage_leftArm_w3 = uberBar_damage_rightArm_w3 = uberBar_damage_rightLeg_w3 = uberBar_damage_leftLeg_w3 = uberBar_damage_head_w3 = uberBar_damage_rightFoot_w3 = uberBar_damage_leftFoot_w3 = uberBar_damage_rightHand_w3 = uberBar_damage_leftHand_w3 = uberBar_damage_rightEye_w3 = uberBar_damage_leftEye_w3 = uberBar_damage_back_w3 = uberBar_damage_neck_w3 = uberBar_damage_chest_w3 = uberBar_damage_abdomen_w3 = nil
uberBar_damage_nsys_s1 = uberBar_damage_leftArm_s1 = uberBar_damage_rightArm_s1 = uberBar_damage_rightLeg_s1 = uberBar_damage_leftLeg_s1 = uberBar_damage_head_s1 = uberBar_damage_rightFoot_s1 = uberBar_damage_leftFoot_s1 = uberBar_damage_rightHand_s1 = uberBar_damage_leftHand_s1 = uberBar_damage_rightEye_s1 = uberBar_damage_leftEye_s1 = uberBar_damage_back_s1 = uberBar_damage_neck_s1 = uberBar_damage_chest_s1 = uberBar_damage_abdomen_s1 = nil
uberBar_damage_nsys_s2 = uberBar_damage_leftArm_s2 = uberBar_damage_rightArm_s2 = uberBar_damage_rightLeg_s2 = uberBar_damage_leftLeg_s2 = uberBar_damage_head_s2 = uberBar_damage_rightFoot_s2 = uberBar_damage_leftFoot_s2 = uberBar_damage_rightHand_s2 = uberBar_damage_leftHand_s2 = uberBar_damage_rightEye_s2 = uberBar_damage_leftEye_s2 = uberBar_damage_back_s2 = uberBar_damage_neck_s2 = uberBar_damage_chest_s2 = uberBar_damage_abdomen_s2 = nil
uberBar_damage_nsys_s3 = uberBar_damage_leftArm_s3 = uberBar_damage_rightArm_s3 = uberBar_damage_rightLeg_s3 = uberBar_damage_leftLeg_s3 = uberBar_damage_head_s3 = uberBar_damage_rightFoot_s3 = uberBar_damage_leftFoot_s3 = uberBar_damage_rightHand_s3 = uberBar_damage_leftHand_s3 = uberBar_damage_rightEye_s3 = uberBar_damage_leftEye_s3 = uberBar_damage_back_s3 = uberBar_damage_neck_s3 = uberBar_damage_chest_s3 = uberBar_damage_abdomen_s3 = nil
uberBar_label_lxplogin = uberBar_label_lxptotal = uberBar_label_lxppulse = uberBar_label_lroomnum = uberBar_label_xplogin = uberBar_label_xptotal = uberBar_label_xppulse = uberBar_label_roomnum = nil
uberBar_label_align_lxplogin = uberBar_label_align_lxptotal = uberBar_label_align_lxppulse = uberBar_label_align_lroomnum = uberBar_label_align_xplogin = uberBar_label_align_xptotal = uberBar_label_align_xppulse = uberBar_label_roomnum = nil
uberBar_status_IconSITTING = uberBar_status_IconKNEELING = uberBar_status_IconPRONE = uberBar_status_IconSTANDING = uberBar_status_IconBLEEDING = uberBar_status_IconDEAD = uberBar_status_IconDISEASED = uberBar_status_IconHIDDEN = uberBar_status_IconINVISIBLE = uberBar_status_IconJOINED = uberBar_status_IconPOISONED = uberBar_status_IconSTUNNED = uberBar_status_IconWEBBED = nil
oldHP = oldMP = oldST = oldSP = oldXP = oldAS = oldMD = oldSN = oldEN = oldIN = oldWO = oldRTs = oldCTs = nowRT = nowCT = oldRM = oldSS = oldLP = oldEX = oldAE = oldTE = curEX = curAE = curTE = etnTP = etnLV = curAP = 0
oldAE = etnAE = 50000
oldRT = oldCT = 0
hl0 = hl1 = -50
image_dir = "#{$lich_dir}data#{File::Separator}uberBarWiz#{File::Separator}"
Dir::mkdir(image_dir) unless File.exists?(image_dir)

Settings.load
if variable[2]
	Settings['window_width'] = 196
	Settings['window_height'] = 254
	Settings['window_position'] = [0, 0]
	Settings["health_file"] = variable[1]
	Settings["health_locs"] = variable[2]
  respond "###########"
  respond "# Loaded UberBarWiz Style"
  respond "#"
  Settings.save
	exit
end

Settings['window_width']    ||= 196
Settings['window_height']   ||= 254
Settings['window_position'] ||= [0, 0]
Settings["health_file"]     ||= "#{image_dir}Health_dude.bmp"
Settings["health_locs"]     ||= {
  "leftEye"   => [ 1,   4],
  "rightEye"  => [62,   4],
  "head"      => [32,   4],
  "neck"      => [32,  19],
  "chest"     => [32,  33],
  "abdomen"   => [32,  51],
  "leftArm"   => [11,  43],
  "rightArm"  => [52,  43],
  "leftHand"  => [ 7,  63],
  "rightHand" => [55,  63],
  "back"      => [ 6,  97],
  "nsys"      => [56,  97],
  "leftLeg"   => [23,  91],
  "rightLeg"  => [40,  91],
  "leftFoot"  => [18, 118],
  "rightFoot" => [45, 118],
}

window_width       = Settings["window_width"] ||= 196
window_height      = Settings["window_height"] ||= 254
window_position    = Settings["window_position"] ||= [0, 0]
health_locs        = Settings["health_locs"] ||= {
  "leftEye"   => [ 1,   4],
  "rightEye"  => [62,   4],
  "head"      => [32,   4],
  "neck"      => [32,  19],
  "chest"     => [32,  33],
  "abdomen"   => [32,  51],
  "leftArm"   => [11,  43],
  "rightArm"  => [52,  43],
  "leftHand"  => [ 7,  63],
  "rightHand" => [55,  63],
  "back"      => [ 6,  97],
  "nsys"      => [56,  97],
  "leftLeg"   => [23,  91],
  "rightLeg"  => [40,  91],
  "leftFoot"  => [18, 118],
  "rightFoot" => [45, 118],
}
health_file        = Settings["health_file"]
wound1_file        = "#{image_dir}Wound1.png"
wound2_file        = "#{image_dir}Wound2.png"
wound3_file        = "#{image_dir}Wound3.png"
scar1_file         = "#{image_dir}Scar1.png"
scar2_file         = "#{image_dir}Scar2.png"
scar3_file         = "#{image_dir}Scar3.png"
statusBAR_file     = "#{image_dir}StatusBAR.png"
iconSITTING_file   = "#{image_dir}IconSITTING.png"
iconKNEELING_file  = "#{image_dir}IconKNEELING.png"
iconPRONE_file     = "#{image_dir}IconPRONE.png"
iconSTANDING_file  = "#{image_dir}IconSTANDING.png"
iconBLEEDING_file  = "#{image_dir}IconBLEEDING.png"
iconDEAD_file      = "#{image_dir}IconDEAD.png"
iconDISEASED_file  = "#{image_dir}IconDISEASED.png"
iconHIDDEN_file    = "#{image_dir}IconHIDDEN.png"
iconINVISIBLE_file = "#{image_dir}IconINVISIBLE.png"
iconJOINED_file    = "#{image_dir}IconJOINED.png"
iconPOISONED_file  = "#{image_dir}IconPOISONED.png"
iconSTUNNED_file   = "#{image_dir}IconSTUNNED.png"
iconWEBBED_file    = "#{image_dir}IconWEBBED.png"

setupwindow        = ["window_col", [240,240,240], [ 0, 0, 0]]
   #labelname  label  x y
setuplabel_loc = [81, 160, 14]
setuplabel = [
  ["lxplogin", "Login: ",  "0, 1, 0, 1"],
  ["xplogin",         "",  "1, 2, 0, 1"],
  ["lxptotal", "XP/hr: ",  "0, 1, 1, 2"],
  ["xptotal",         "",  "1, 2, 1, 2"],
  ["lxppulse", "Pulse: ",  "0, 1, 2, 3"],
  ["xppulse",         "",  "1, 2, 2, 3"]]

setupstatus_bar = ["StatusBAR", 82, 45]
setupstatus = [
  ["IconSITTING",   setupstatus_bar[1]+56, setupstatus_bar[2]+ 2],
  ["IconKNEELING",  setupstatus_bar[1]+56, setupstatus_bar[2]+ 2],
  ["IconPRONE",     setupstatus_bar[1]+56, setupstatus_bar[2]+ 2],
  ["IconSTANDING",  setupstatus_bar[1]+56, setupstatus_bar[2]+ 2],
  ["IconBLEEDING",  setupstatus_bar[1]+ 2, setupstatus_bar[2]+ 6],
  ["IconDEAD",      setupstatus_bar[1]+56, setupstatus_bar[2]+ 2],
  ["IconDISEASED",  setupstatus_bar[1]+11, setupstatus_bar[2]+ 6],
  ["IconHIDDEN",    setupstatus_bar[1]+28, setupstatus_bar[2]+ 2],
  ["IconINVISIBLE", setupstatus_bar[1]+28, setupstatus_bar[2]+ 2],
  ["IconJOINED",    setupstatus_bar[1]+39, setupstatus_bar[2]+ 2],
  ["IconPOISONED",  setupstatus_bar[1]+11, setupstatus_bar[2]+ 6],
  ["IconSTUNNED",   setupstatus_bar[1]+20, setupstatus_bar[2]+ 6],
  ["IconWEBBED",    setupstatus_bar[1]+ 2, setupstatus_bar[2]+ 2]]


capped = false
capped = true if Char.level == 100 or XMLData.next_level_text =~ /experience/

# XP watcher variables
firstpulse = true
xpnFirstTime = 0  # Time UB was first run
pause("0.5s")
xpnNLT = xpnCur = xpnOld = xpnHour = xpnLast = xpnTotal = 0  # Zero total xp to start

areas = ["nsys","leftArm","rightArm","rightLeg","leftLeg","head","rightFoot","leftFoot","rightHand","leftHand","rightEye","leftEye","back","neck","chest","abdomen"]
arean = [["s3", "scar3"], ["s2", "scar2"], ["s1", "scar1"], ["w3", "wound3"], ["w2", "wound2"], ["w1", "wound1"]]

filelist = [health_file, wound1_file, wound2_file, wound3_file, scar1_file, scar2_file, scar3_file, statusBAR_file, iconSITTING_file, iconKNEELING_file, iconPRONE_file, iconSTANDING_file, iconBLEEDING_file, iconDEAD_file, iconDISEASED_file, iconHIDDEN_file, iconINVISIBLE_file, iconJOINED_file, iconPOISONED_file, iconSTUNNED_file, iconWEBBED_file]
filelist.each do |filey|
	if !File.exists?(filey)
		respond "###########"
		respond "# Can't find the files I need"
		respond "# Download and run one of the theme packages from the repository"
		respond "# UBW-theme-sf, -dude or -sexy"
		respond "###########"
		exit
	end
end

done = false
Gtk.queue {

  # Set up Bar
  uberBar                        = Gtk::Window.new
  uberBar.title                  = "#{Char.name}'s Uberbar"
  uberBar.border_width           = 10
  
  uberBar.signal_connect('delete_event') { window_close = true }

  uberBar_layout = Gtk::Layout.new
  uberBar.add uberBar_layout

  # Labels
  uberBar_label_table = Gtk::Table.new 3, 2, true
  uberBar_layout.put(uberBar_label_table, 81, -2)
  @uberBar_label_lxplogin = Gtk::Label.new("Login: ")
  uberBar_label_align_lxplogin = Gtk::Alignment.new 1, 0, 0, 0
  uberBar_label_align_lxplogin.add(@uberBar_label_lxplogin)
  uberBar_label_table.attach uberBar_label_align_lxplogin, 0, 1, 0, 1
  @uberBar_label_xplogin = Gtk::Label.new("0")
  uberBar_label_align_xplogin = Gtk::Alignment.new 1, 0, 0, 0
  uberBar_label_align_xplogin.add(@uberBar_label_xplogin)
  uberBar_label_table.attach uberBar_label_align_xplogin, 1, 2, 0, 1
  @uberBar_label_lxptotal = Gtk::Label.new("XP/hr: ")
  uberBar_label_align_lxptotal = Gtk::Alignment.new 1, 0, 0, 0
  uberBar_label_align_lxptotal.add(@uberBar_label_lxptotal)
  uberBar_label_table.attach uberBar_label_align_lxptotal, 0, 1, 1, 2
  @uberBar_label_xptotal = Gtk::Label.new("0")
  uberBar_label_align_xptotal = Gtk::Alignment.new 1, 0, 0, 0
  uberBar_label_align_xptotal.add(@uberBar_label_xptotal)
  uberBar_label_table.attach uberBar_label_align_xptotal, 1, 2, 1, 2
  @uberBar_label_lxppulse = Gtk::Label.new("Pulse: ")
  uberBar_label_align_lxppulse = Gtk::Alignment.new 1, 0, 0, 0
  uberBar_label_align_lxppulse.add(@uberBar_label_lxppulse)
  uberBar_label_table.attach uberBar_label_align_lxppulse, 0, 1, 2, 3
  @uberBar_label_xppulse = Gtk::Label.new("0")
  uberBar_label_align_xppulse = Gtk::Alignment.new 1, 0, 0, 0
  uberBar_label_align_xppulse.add(@uberBar_label_xppulse)
  uberBar_label_table.attach uberBar_label_align_xppulse, 1, 2, 2, 3

  # Status Bar
  uberBar_Status = Gtk::Image.new("#{image_dir}#{setupstatus_bar[0]}.png")
  uberBar_layout.put(uberBar_Status, setupstatus_bar[1], setupstatus_bar[2])
  uberBar_status_IconSITTING = Gtk::Image.new("#{image_dir}IconSITTING.png")
  uberBar_layout.put(uberBar_status_IconSITTING, -50, -50)
  uberBar_status_IconKNEELING = Gtk::Image.new("#{image_dir}IconKNEELING.png")
  uberBar_layout.put(uberBar_status_IconKNEELING, -50, -50)
  uberBar_status_IconPRONE = Gtk::Image.new("#{image_dir}IconPRONE.png")
  uberBar_layout.put(uberBar_status_IconPRONE, -50, -50)
  uberBar_status_IconSTANDING = Gtk::Image.new("#{image_dir}IconSTANDING.png")
  uberBar_layout.put(uberBar_status_IconSTANDING, -50, -50)
  uberBar_status_IconBLEEDING = Gtk::Image.new("#{image_dir}IconBLEEDING.png")
  uberBar_layout.put(uberBar_status_IconBLEEDING, -50, -50)
  uberBar_status_IconDEAD = Gtk::Image.new("#{image_dir}IconDEAD.png")
  uberBar_layout.put(uberBar_status_IconDEAD, -50, -50)
  uberBar_status_IconDISEASED = Gtk::Image.new("#{image_dir}IconDISEASED.png")
  uberBar_layout.put(uberBar_status_IconDISEASED, -50, -50)
  uberBar_status_IconHIDDEN = Gtk::Image.new("#{image_dir}IconHIDDEN.png")
  uberBar_layout.put(uberBar_status_IconHIDDEN, -50, -50)
  uberBar_status_IconINVISIBLE = Gtk::Image.new("#{image_dir}IconINVISIBLE.png")
  uberBar_layout.put(uberBar_status_IconINVISIBLE, -50, -50)
  uberBar_status_IconJOINED = Gtk::Image.new("#{image_dir}IconJOINED.png")
  uberBar_layout.put(uberBar_status_IconJOINED, -50, -50)
  uberBar_status_IconPOISONED = Gtk::Image.new("#{image_dir}IconPOISONED.png")
  uberBar_layout.put(uberBar_status_IconPOISONED, -50, -50)
  uberBar_status_IconSTUNNED = Gtk::Image.new("#{image_dir}IconSTUNNED.png")
  uberBar_layout.put(uberBar_status_IconSTUNNED, -50, -50)
  uberBar_status_IconWEBBED = Gtk::Image.new("#{image_dir}IconWEBBED.png")
  uberBar_layout.put(uberBar_status_IconWEBBED, -50, -50)

  # Damage
  uberBar_damage = Gtk::Image.new(health_file)
  uberBar_layout.put(uberBar_damage, 0, 0)

  uberBar_damage_nsys_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_nsys_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_nsys_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_nsys_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_nsys_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_nsys_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_leftArm_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_leftArm_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_leftArm_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_leftArm_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_leftArm_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_leftArm_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_rightArm_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_rightArm_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_rightArm_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_rightArm_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_rightArm_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_rightArm_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_rightLeg_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_rightLeg_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_rightLeg_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_rightLeg_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_rightLeg_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_rightLeg_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_leftLeg_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_leftLeg_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_leftLeg_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_leftLeg_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_leftLeg_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_leftLeg_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_head_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_head_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_head_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_head_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_head_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_head_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_rightFoot_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_rightFoot_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_rightFoot_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_rightFoot_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_rightFoot_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_rightFoot_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_leftFoot_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_leftFoot_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_leftFoot_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_leftFoot_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_leftFoot_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_leftFoot_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_rightHand_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_rightHand_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_rightHand_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_rightHand_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_rightHand_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_rightHand_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_leftHand_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_leftHand_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_leftHand_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_leftHand_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_leftHand_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_leftHand_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_rightEye_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_rightEye_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_rightEye_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_rightEye_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_rightEye_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_rightEye_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_leftEye_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_leftEye_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_leftEye_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_leftEye_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_leftEye_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_leftEye_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_back_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_back_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_back_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_back_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_back_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_back_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_neck_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_neck_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_neck_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_neck_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_neck_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_neck_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_chest_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_chest_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_chest_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_chest_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_chest_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_chest_w1 = Gtk::Image.new(wound1_file)
  uberBar_damage_abdomen_s3 = Gtk::Image.new(scar3_file)
  uberBar_damage_abdomen_s2 = Gtk::Image.new(scar2_file)
  uberBar_damage_abdomen_s1 = Gtk::Image.new(scar1_file)
  uberBar_damage_abdomen_w3 = Gtk::Image.new(wound3_file)
  uberBar_damage_abdomen_w2 = Gtk::Image.new(wound2_file)
  uberBar_damage_abdomen_w1 = Gtk::Image.new(wound1_file)
  uberBar_layout.put(uberBar_damage_nsys_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_nsys_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_nsys_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_nsys_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_nsys_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_nsys_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftArm_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftArm_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftArm_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftArm_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftArm_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftArm_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightArm_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightArm_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightArm_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightArm_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightArm_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightArm_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightLeg_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightLeg_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightLeg_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightLeg_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightLeg_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightLeg_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftLeg_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftLeg_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftLeg_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftLeg_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftLeg_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftLeg_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_head_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_head_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_head_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_head_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_head_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_head_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightFoot_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightFoot_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightFoot_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightFoot_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightFoot_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightFoot_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftFoot_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftFoot_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftFoot_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftFoot_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftFoot_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftFoot_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightHand_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightHand_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightHand_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightHand_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightHand_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightHand_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftHand_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftHand_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftHand_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftHand_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftHand_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftHand_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightEye_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightEye_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightEye_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_rightEye_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_rightEye_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_rightEye_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftEye_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftEye_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftEye_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_leftEye_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_leftEye_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_leftEye_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_back_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_back_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_back_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_back_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_back_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_back_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_neck_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_neck_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_neck_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_neck_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_neck_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_neck_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_chest_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_chest_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_chest_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_chest_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_chest_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_chest_w1, -50, -50)
  uberBar_layout.put(uberBar_damage_abdomen_s3, -50, -50)
  uberBar_layout.put(uberBar_damage_abdomen_s2, -50, -50)
  uberBar_layout.put(uberBar_damage_abdomen_s1, -50, -50)
  uberBar_layout.put(uberBar_damage_abdomen_w3, -50, -50)
  uberBar_layout.put(uberBar_damage_abdomen_w2, -50, -50)
  uberBar_layout.put(uberBar_damage_abdomen_w1, -50, -50)

  # Progress Bars
  @uberBar_progress_rthard = Gtk::ProgressBar.new
  @uberBar_progress_rthard_label = Gtk::Label.new("0")
  uberBar_progress_rthard_provider = Gtk::CssProvider.new
  uberBar_progress_rthard_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 65px; } progress { min-height: 19px; background-color: #cf0000; } label { font-weight: bold; min-width: 65px; }")
  @uberBar_progress_rthard.style_context.add_provider(uberBar_progress_rthard_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_rthard_label.style_context.add_provider(uberBar_progress_rthard_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_rthard, 80, 70)
  uberBar_layout.put(@uberBar_progress_rthard_label, 80, 71)
   
  @uberBar_progress_rtcast = Gtk::ProgressBar.new
  @uberBar_progress_rtcast_label = Gtk::Label.new("0")
  uberBar_progress_rtcast_provider = Gtk::CssProvider.new
  uberBar_progress_rtcast_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 27px; } progress { min-height: 19px; background-color: #739fcf; } label { font-weight: bold; min-width: 27px; }")
  @uberBar_progress_rtcast.style_context.add_provider(uberBar_progress_rtcast_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_rtcast_label.style_context.add_provider(uberBar_progress_rtcast_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_rtcast, 143, 70)
  uberBar_layout.put(@uberBar_progress_rtcast_label, 143, 71)
   
  @uberBar_progress_health = Gtk::ProgressBar.new
  @uberBar_progress_health_label = Gtk::Label.new
  uberBar_progress_health_provider = Gtk::CssProvider.new
  uberBar_progress_health_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 90px; } progress { min-height: 19px; background-color: #800000; } label { font-weight: bold; min-width: 90px; }")
  @uberBar_progress_health.style_context.add_provider(uberBar_progress_health_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_health_label.style_context.add_provider(uberBar_progress_health_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_health, 80, 86)
  uberBar_layout.put(@uberBar_progress_health_label, 80, 87)
   
  @uberBar_progress_mana = Gtk::ProgressBar.new
  @uberBar_progress_mana_label = Gtk::Label.new
  uberBar_progress_mana_provider = Gtk::CssProvider.new
  uberBar_progress_mana_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 90px; } progress { min-height: 19px; background-color: #0000ff; } label { font-weight: bold; min-width: 90px; }")
  @uberBar_progress_mana.style_context.add_provider(uberBar_progress_mana_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_mana_label.style_context.add_provider(uberBar_progress_mana_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_mana, 80, 102)
  uberBar_layout.put(@uberBar_progress_mana_label, 80, 103)
   
  @uberBar_progress_stamina = Gtk::ProgressBar.new
  @uberBar_progress_stamina_label = Gtk::Label.new
  uberBar_progress_stamina_provider = Gtk::CssProvider.new
  uberBar_progress_stamina_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 90px; } progress { min-height: 19px; background-color: #d09839; } label { font-weight: bold; min-width: 90px; }")
  @uberBar_progress_stamina.style_context.add_provider(uberBar_progress_stamina_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_stamina_label.style_context.add_provider(uberBar_progress_stamina_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_stamina, 80, 118)
  uberBar_layout.put(@uberBar_progress_stamina_label, 80, 119)
   
  @uberBar_progress_spirit = Gtk::ProgressBar.new
  @uberBar_progress_spirit_label = Gtk::Label.new
  uberBar_progress_spirit_provider = Gtk::CssProvider.new
  uberBar_progress_spirit_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 90px; } progress { min-height: 19px; background-color: #c0c0c0; } label { font-weight: bold; min-width: 90px; }")
  @uberBar_progress_spirit.style_context.add_provider(uberBar_progress_spirit_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_spirit_label.style_context.add_provider(uberBar_progress_spirit_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_spirit, 80, 134)
  uberBar_layout.put(@uberBar_progress_spirit_label, 80, 135)
   
  @uberBar_progress_exp = Gtk::ProgressBar.new
  @uberBar_progress_exp_label = Gtk::Label.new
  uberBar_progress_exp_provider = Gtk::CssProvider.new
  uberBar_progress_exp_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 170px; } progress { min-height: 19px; background-color: #008000; } label { font-weight: bold; min-width: 170px; }")
  @uberBar_progress_exp.style_context.add_provider(uberBar_progress_exp_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_exp_label.style_context.add_provider(uberBar_progress_exp_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_exp, 0, 150)
  uberBar_layout.put(@uberBar_progress_exp_label, 0, 151)
   
  @uberBar_progress_asc = Gtk::ProgressBar.new
  @uberBar_progress_asc_label = Gtk::Label.new
  uberBar_progress_asc_provider = Gtk::CssProvider.new
  uberBar_progress_asc_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 170px; } progress { min-height: 19px; background-color: #008000; } label { font-weight: bold; min-width: 170px; }")
  @uberBar_progress_asc.style_context.add_provider(uberBar_progress_asc_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_asc_label.style_context.add_provider(uberBar_progress_asc_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_asc, 0, 166)
  uberBar_layout.put(@uberBar_progress_asc_label, 0, 167)
   
  @uberBar_progress_mind = Gtk::ProgressBar.new
  @uberBar_progress_mind_label = Gtk::Label.new
  uberBar_progress_mind_provider = Gtk::CssProvider.new
  uberBar_progress_mind_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 170px; } progress { min-height: 19px; background-color: #008000; } label { font-weight: bold; min-width: 170px; }")
  @uberBar_progress_mind.style_context.add_provider(uberBar_progress_mind_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_mind_label.style_context.add_provider(uberBar_progress_mind_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_mind, 0, 182)
  uberBar_layout.put(@uberBar_progress_mind_label, 0, 183)
   
  @uberBar_progress_stance = Gtk::ProgressBar.new
  @uberBar_progress_stance_label = Gtk::Label.new
  uberBar_progress_stance_provider = Gtk::CssProvider.new
  uberBar_progress_stance_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 170px; } progress { min-height: 19px; background-color: #008000; } label { font-weight: bold; min-width: 170px; }")
  @uberBar_progress_stance.style_context.add_provider(uberBar_progress_stance_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_stance_label.style_context.add_provider(uberBar_progress_stance_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_stance, 0, 198)
  uberBar_layout.put(@uberBar_progress_stance_label, 0, 199)
   
  @uberBar_progress_encumb = Gtk::ProgressBar.new
  @uberBar_progress_encumb_label = Gtk::Label.new
  uberBar_progress_encumb_provider = Gtk::CssProvider.new
  uberBar_progress_encumb_provider.load(data: "progressbar > trough { min-height: 21px; min-width: 170px; } progress { min-height: 19px; background-color: #008000; } label { font-weight: bold; min-width: 170px; }")
  @uberBar_progress_encumb.style_context.add_provider(uberBar_progress_encumb_provider, Gtk::StyleProvider::PRIORITY_USER)
  @uberBar_progress_encumb_label.style_context.add_provider(uberBar_progress_encumb_provider, Gtk::StyleProvider::PRIORITY_USER)
  uberBar_layout.put(@uberBar_progress_encumb, 0, 214)
  uberBar_layout.put(@uberBar_progress_encumb_label, 0, 215)

  # Finish Up
  uberBar.resize(window_width.to_i, window_height.to_i)
  uberBar.move(window_position[0].to_i, window_position[1].to_i)
  uberBar.show_all
  uberBar.keep_above = true

  done = true
  
}

wait_while { !done }

before_dying {
  done = false
  Gtk.queue {
    window_width     = uberBar.allocation.width
    window_height    = uberBar.allocation.height
    window_position  = uberBar.position
    uberBar.destroy
    done = true
  }
  wait_until { done }
  Settings['window_width']     = window_width
  Settings['window_height']    = window_height
  Settings['window_position']  = window_position if (window_position.class == Array) and (window_position[0].to_i > -5) and (window_position[1].to_i > -5)
  Settings.save
}

lastExpTime = Time.now.to_i - 120

loop {
  wait_while { oldRT.to_i == checkrt.to_i and oldCT.to_i == checkcastrt.to_i and oldLP == XMLData.last_pulse and oldSS == XMLData.indicator.to_s and oldHP == checkhealth and oldMP == checkmana and oldST == checkstamina and oldSP == checkspirit and oldXP == XMLData.next_level_text and oldMD == XMLData.mind_text and oldSN == XMLData.stance_text and oldEN == XMLData.encumbrance_text and oldIN == XMLData.injuries.to_s and window_close == false and Time.now.to_i - lastExpTime <= 60 }
  if window_close then exit end
  nowTime = Time.now
  nowRT   = checkrt
  nowCT   = checkcastrt
  doLines = ""

  if oldLP != XMLData.last_pulse or Time.now.to_i - lastExpTime > 60
    oldLP       = XMLData.last_pulse if oldLP != XMLData.last_pulse
    lastExpTime = Time.now.to_i
    res         = Lich::Util.quiet_command_xml("exp", /<output class="mono"\/>/, /<prompt time=/)
    curEX       = $1.delete(',').to_i if res.any? { |line| line =~ /^[ ]+Experience: ([\d,]+)/i }
    curAE       = $1.delete(',').to_i if res.any? { |line| line =~ /^[ ]+Ascension Exp: ([\d,]+)/i }
    curTE       = $1.delete(',').to_i if res.any? { |line| line =~ /^[ ]+Total Exp: ([\d,]+)/i }
    etnTP       = $1.delete(',').to_i if res.any? { |line| line =~ /^[ ]+Exp to next TP: ([\d,]+)/i }
    etnLV       = $1.delete(',').to_i if res.any? { |line| line =~ /^[ ]+Exp until lvl: ([\d,]+)/i }
    etnAE       = $1.delete(',').to_i if res.any? { |line| line =~ /Exp to next ATP: ([\d,]+)/i }
    curAP       = $1.to_i if res.any? { |line| line =~ /ATPs: (\d+)/i }
    oldTE = curTE if oldTE == 0
    if firstpulse
      xpnFirstTime = Time.now - 1
      xpnTotal     = 0
      xpnLast      = 0
      firstpulse   = false
    end
  end

  if oldHP != checkhealth              then echo "updated health" if debug  ; oldHP = checkhealth              ; doLines += "@uberBar_progress_health.fraction  = percenthealth/100.0             ; @uberBar_progress_health_label.text  = \"#{checkhealth}/#{maxhealth}\" ; " end
  if oldMP != checkmana                then echo "updated mana" if debug    ; oldMP = checkmana                ; doLines += "@uberBar_progress_mana.fraction    = percentmana/100.0               ; @uberBar_progress_mana_label.text    = \"#{checkmana}/#{maxmana}\" ; " end
  if oldST != checkstamina             then echo "updated stamina" if debug ; oldST = checkstamina             ; doLines += "@uberBar_progress_stamina.fraction = percentstamina/100.0            ; @uberBar_progress_stamina_label.text = \"#{checkstamina}/#{maxstamina}\" ; " end
  if oldSP != checkspirit              then echo "updated spirit" if debug  ; oldSP = checkspirit              ; doLines += "@uberBar_progress_spirit.fraction  = percentspirit/100.0             ; @uberBar_progress_spirit_label.text  = \"#{checkspirit}/#{maxspirit}\" ; " end
  if oldMD != XMLData.mind_text        then echo "updated mind" if debug    ; oldMD = XMLData.mind_text        ; doLines += "@uberBar_progress_mind.fraction    = XMLData.mind_value/100.0        ; @uberBar_progress_mind_label.text    = XMLData.mind_text ; " end
  if oldSN != XMLData.stance_text      then echo "updated stance" if debug  ; oldSN = XMLData.stance_text      ; doLines += "@uberBar_progress_stance.fraction  = XMLData.stance_value/100.0      ; @uberBar_progress_stance_label.text  = XMLData.stance_text ; " end
  if oldEN != XMLData.encumbrance_text then echo "updated encumbr" if debug ; oldEN = XMLData.encumbrance_text ; doLines += "@uberBar_progress_encumb.fraction  = XMLData.encumbrance_value/100.0 ; @uberBar_progress_encumb_label.text  = XMLData.encumbrance_text ; " end
  if oldRT != nowRT
    echo "updated roundtime" if debug
    oldRTs = nowRT if oldRTs == 0
    oldRTs = 0 if nowRT == 0
    doLines += "@uberBar_progress_rthard.fraction   = nowRT/(oldRTs+0.001) ; "
    doLines += "@uberBar_progress_rthard_label.text = \"#{(nowRT+0.999).to_i}\" ; "
    oldRT = nowRT
  end
  if oldCT != nowCT
    echo "updated cast roundtime" if debug
    oldCTs = nowCT if oldCTs == 0
    oldCTs = 0 if nowCT == 0
    doLines += "@uberBar_progress_rtcast.fraction   = nowCT/(oldCTs+0.001) ; "
    doLines += "@uberBar_progress_rtcast_label.text = \"#{(nowCT+0.999).to_i}\" ; "
    oldCT = nowCT
  end
  if oldSS != XMLData.indicator.to_s
    echo "updated status" if debug
    oldSS = XMLData.indicator.to_s
    setupstatus.each do |ss|
      doLines += "uberBar_layout.move(uberBar_status_#{ss[0]}, -50, -50) ; "
      if XMLData.indicator[ss[0]] == "y"
        doLines += "uberBar_layout.move(uberBar_status_#{ss[0]}, #{ss[1]}, #{ss[2]}) ; "
      end
    end
  end
  if oldIN != XMLData.injuries.to_s
    echo "updated wounds" if debug
    oldIN = XMLData.injuries.to_s
    woundsev = 0
    areas.each do |area|
      arean.each do |an|
        doLines += "uberBar_layout.move(uberBar_damage_#{area}_#{an[0]}, -50, -50) ; "
      end
    end
    if   Wounds.abdomen   > 0 then hl0 = health_locs["abdomen"][0]   ; hl1 = health_locs["abdomen"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_abdomen_w#{Wounds.abdomen}, #{hl0}, #{hl1}) ; "
    elsif Scars.abdomen   > 0 then hl0 = health_locs["abdomen"][0]   ; hl1 = health_locs["abdomen"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_abdomen_s#{Scars.abdomen}, #{hl0}, #{hl1}) ; " end
    if   Wounds.back      > 0 then hl0 = health_locs["back"][0]      ; hl1 = health_locs["back"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_back_w#{Wounds.back}, #{hl0}, #{hl1}) ; "
    elsif Scars.back      > 0 then hl0 = health_locs["back"][0]      ; hl1 = health_locs["back"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_back_s#{Scars.back}, #{hl0}, #{hl1}) ; " end
    if   Wounds.chest     > 0 then hl0 = health_locs["chest"][0]     ; hl1 = health_locs["chest"][1]     ; doLines += "uberBar_layout.move(uberBar_damage_chest_w#{Wounds.chest}, #{hl0}, #{hl1}) ; "
    elsif Scars.chest     > 0 then hl0 = health_locs["chest"][0]     ; hl1 = health_locs["chest"][1]     ; doLines += "uberBar_layout.move(uberBar_damage_chest_s#{Scars.chest}, #{hl0}, #{hl1}) ; " end
    if   Wounds.head      > 0 then hl0 = health_locs["head"][0]      ; hl1 = health_locs["head"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_head_w#{Wounds.head}, #{hl0}, #{hl1}) ; "
    elsif Scars.head      > 0 then hl0 = health_locs["head"][0]      ; hl1 = health_locs["head"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_head_s#{Scars.head}, #{hl0}, #{hl1}) ; " end
    if   Wounds.leftArm   > 0 then hl0 = health_locs["leftArm"][0]   ; hl1 = health_locs["leftArm"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_leftArm_w#{Wounds.leftArm}, #{hl0}, #{hl1}) ; "
    elsif Scars.leftArm   > 0 then hl0 = health_locs["leftArm"][0]   ; hl1 = health_locs["leftArm"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_leftArm_s#{Scars.leftArm}, #{hl0}, #{hl1}) ; " end
    if   Wounds.leftEye   > 0 then hl0 = health_locs["leftEye"][0]   ; hl1 = health_locs["leftEye"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_leftEye_w#{Wounds.leftEye}, #{hl0}, #{hl1}) ; "
    elsif Scars.leftEye   > 0 then hl0 = health_locs["leftEye"][0]   ; hl1 = health_locs["leftEye"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_leftEye_s#{Scars.leftEye}, #{hl0}, #{hl1}) ; " end
    if   Wounds.leftFoot  > 0 then hl0 = health_locs["leftFoot"][0]  ; hl1 = health_locs["leftFoot"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_leftFoot_w#{Wounds.leftFoot}, #{hl0}, #{hl1}) ; "
    elsif Scars.leftFoot  > 0 then hl0 = health_locs["leftFoot"][0]  ; hl1 = health_locs["leftFoot"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_leftFoot_s#{Scars.leftFoot}, #{hl0}, #{hl1}) ; " end
    if   Wounds.leftHand  > 0 then hl0 = health_locs["leftHand"][0]  ; hl1 = health_locs["leftHand"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_leftHand_w#{Wounds.leftHand}, #{hl0}, #{hl1}) ; "
    elsif Scars.leftHand  > 0 then hl0 = health_locs["leftHand"][0]  ; hl1 = health_locs["leftHand"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_leftHand_s#{Scars.leftHand}, #{hl0}, #{hl1}) ; " end
    if   Wounds.leftLeg   > 0 then hl0 = health_locs["leftLeg"][0]   ; hl1 = health_locs["leftLeg"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_leftLeg_w#{Wounds.leftLeg}, #{hl0}, #{hl1}) ; "
    elsif Scars.leftLeg   > 0 then hl0 = health_locs["leftLeg"][0]   ; hl1 = health_locs["leftLeg"][1]   ; doLines += "uberBar_layout.move(uberBar_damage_leftLeg_s#{Scars.leftLeg}, #{hl0}, #{hl1}) ; " end
    if   Wounds.neck      > 0 then hl0 = health_locs["neck"][0]      ; hl1 = health_locs["neck"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_neck_w#{Wounds.neck}, #{hl0}, #{hl1}) ; "
    elsif Scars.neck      > 0 then hl0 = health_locs["neck"][0]      ; hl1 = health_locs["neck"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_neck_s#{Scars.neck}, #{hl0}, #{hl1}) ; " end
    if   Wounds.nsys      > 0 then hl0 = health_locs["nsys"][0]      ; hl1 = health_locs["nsys"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_nsys_w#{Wounds.nsys}, #{hl0}, #{hl1}) ; "
    elsif Scars.nsys      > 0 then hl0 = health_locs["nsys"][0]      ; hl1 = health_locs["nsys"][1]      ; doLines += "uberBar_layout.move(uberBar_damage_nsys_s#{Scars.nsys}, #{hl0}, #{hl1}) ; " end
    if   Wounds.rightArm  > 0 then hl0 = health_locs["rightArm"][0]  ; hl1 = health_locs["rightArm"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_rightArm_w#{Wounds.rightArm}, #{hl0}, #{hl1}) ; "
    elsif Scars.rightArm  > 0 then hl0 = health_locs["rightArm"][0]  ; hl1 = health_locs["rightArm"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_rightArm_s#{Scars.rightArm}, #{hl0}, #{hl1}) ; " end
    if   Wounds.rightEye  > 0 then hl0 = health_locs["rightEye"][0]  ; hl1 = health_locs["rightEye"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_rightEye_w#{Wounds.rightEye}, #{hl0}, #{hl1}) ; "
    elsif Scars.rightEye  > 0 then hl0 = health_locs["rightEye"][0]  ; hl1 = health_locs["rightEye"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_rightEye_s#{Scars.rightEye}, #{hl0}, #{hl1}) ; " end
    if   Wounds.rightFoot > 0 then hl0 = health_locs["rightFoot"][0] ; hl1 = health_locs["rightFoot"][1] ; doLines += "uberBar_layout.move(uberBar_damage_rightFoot_w#{Wounds.rightFoot}, #{hl0}, #{hl1}) ; "
    elsif Scars.rightFoot > 0 then hl0 = health_locs["rightFoot"][0] ; hl1 = health_locs["rightFoot"][1] ; doLines += "uberBar_layout.move(uberBar_damage_rightFoot_s#{Scars.rightFoot}, #{hl0}, #{hl1}) ; " end
    if   Wounds.rightHand > 0 then hl0 = health_locs["rightHand"][0] ; hl1 = health_locs["rightHand"][1] ; doLines += "uberBar_layout.move(uberBar_damage_rightHand_w#{Wounds.rightHand}, #{hl0}, #{hl1}) ; "
    elsif Scars.rightHand > 0 then hl0 = health_locs["rightHand"][0] ; hl1 = health_locs["rightHand"][1] ; doLines += "uberBar_layout.move(uberBar_damage_rightHand_s#{Scars.rightHand}, #{hl0}, #{hl1}) ; " end
    if   Wounds.rightLeg  > 0 then hl0 = health_locs["rightLeg"][0]  ; hl1 = health_locs["rightLeg"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_rightLeg_w#{Wounds.rightLeg}, #{hl0}, #{hl1}) ; "
    elsif Scars.rightLeg  > 0 then hl0 = health_locs["rightLeg"][0]  ; hl1 = health_locs["rightLeg"][1]  ; doLines += "uberBar_layout.move(uberBar_damage_rightLeg_s#{Scars.rightLeg}, #{hl0}, #{hl1}) ; " end
  end

  if oldAE != curAE
    echo "updated asc" if debug
    ascValue       = 1 - (etnAE / 50000.00)
    ascText        = "#{etnAE} til ATP [ #{curAP} ]"
    doLines += "@uberBar_progress_asc.fraction = ascValue ; @uberBar_progress_asc_label.text = ascText ; "
    oldAE          = curAE
  end
  if oldEX != curEX
    echo "updated exper" if debug
    if capped
      xpnValue     = (100 - (etnTP / 25)) / 100.00
      xpnText      = "#{etnTP} til TP"
    else
      xpnValue     = XMLData.next_level_value.to_i / 100.00
      xpnText      = sprintf("Level: %2s %6s TNL", Char.level, etnLV)
    end
    doLines += "@uberBar_progress_exp.fraction = xpnValue ; @uberBar_progress_exp_label.text = xpnText ; "
  end
  if oldTE != curTE
    xpnLast        = curTE - oldTE
    xpnTotal      += xpnLast
    oldTE          = curTE
    xpnHour        = ((1.00 * xpnTotal) / ((nowTime - xpnFirstTime)/3600.00)).to_i

    doLines += "@uberBar_label_xplogin.text = xpnTotal.to_s ; @uberBar_label_xptotal.text = xpnHour.to_s ; @uberBar_label_xppulse.text = xpnLast.to_s ; "
  end

  doLines += "done = true"
  done = false
#  echo doLines
#  Settings.save
#  exit
  Gtk.queue { eval(doLines) }
  wait_while { !done }
  pause("0.25s")
}