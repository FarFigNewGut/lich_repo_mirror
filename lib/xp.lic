#quiet
=begin

  This script sends the experience verb to the game and adds info to the results, including
  experience and fame gained since first use, first use this login, and last use; average
  rate of gain for those time periods, and time until next level/points and arbitrary goal
  at those rates.

  ;xp help

   author: Tillmen (tillmen@lichproject.org)
     game: Gemstone
  version: 0.7
     tags: cosmetic

  changelog:
    0.7 (2020-10-10):
      fix for new exp verb output
    0.6 (2014-12-12):
      fix time since last use
    0.5 (2014-12-10):
      fix table spacing
    0.4 (2014-12-10):
      fix typo
    0.3 (2014-12-10):
      fix bug with ;xp reset
    0.2 (2014-12-10):
      add realtime tracking
      reformat output

=end

if script.vars[1]
  if script.vars[1].downcase == 'reset'
    $xp = nil
    if script.vars[2].downcase == 'all'
      CharSettings['realtime'] = nil
    end
    echo "Experience tracking has been reset."
  elsif (script.vars[1].downcase == 'goal') and (script.vars[2] =~ /^[0-9,]+$/)
    CharSettings['goal'] = script.vars[2].gsub(',','').to_i
    echo "Experience goal set to #{CharSettings['goal']}."
  else
    output = "\n"
    output.concat "usage:\n"
    output.concat "\n"
    output.concat "   #{$clean_lich_char}#{script.name}              show experience with extra info\n"
    output.concat "   #{$clean_lich_char}#{script.name} reset        reset experience tracking since login\n"
    output.concat "   #{$clean_lich_char}#{script.name} reset all    reset all experience tracking\n"
    output.concat "   #{$clean_lich_char}#{script.name} goal <exp>   set a goal to show time until\n"
    output.concat "\n"
    respond output
  end
  exit
end

CharSettings['goal']    ||= 0
now                       = Hash.new
xp_until_next             = 0
time_since_max_width      = Hash.new
time_until_next_max_width = Hash.new
time_until_goal_max_width = Hash.new

add_commas = proc { |num|
  num.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
}

calc_seconds = proc { |foo|
  seconds =  foo % 60
  foo     = (foo - seconds) / 60
  minutes =  foo % 60
  foo     = (foo - minutes) / 60
  hours   =  foo % 24
  days    = (foo - hours) / 24
  [days, hours, minutes, seconds]
}

format_time_since = proc { |foo|
  time = calc_seconds.call(foo)
  list = Array.new
  if time[0] > 0
    list.push "#{time[0].to_s.rjust(time_since_max_width['days'])}d"
  elsif time_since_max_width['days'] > 0
    list.push ''.rjust(time_since_max_width['days'] + 1)
  end
  if time[1] > 0
    list.push "#{time[1].to_s.rjust(time_since_max_width['hours'])}h"
  elsif time_since_max_width['hours'] > 0
    list.push ''.rjust(time_since_max_width['hours'] + 1)
  end
  if time[2] > 0
    list.push "#{time[2].to_s.rjust(time_since_max_width['minutes'])}m"
  elsif time_since_max_width['minutes'] > 0
    list.push ''.rjust(time_since_max_width['minutes'] + 1)
  end
  if time[3] > 0
    list.push "#{time[3].to_s.rjust(time_since_max_width['seconds'])}s"
  elsif time_since_max_width['seconds'] > 0
    list.push ''.rjust(time_since_max_width['seconds'] + 1)
  end
  list.join(' ')
}

format_time_until_next = proc { |time|
  list = Array.new
  if time[0] > 0
    list.push "#{time[0].to_s.rjust(time_until_next_max_width['days'])}d"
  elsif time_until_next_max_width['days'] > 0
    list.push ''.rjust(time_until_next_max_width['days'] + 1)
  end
  if time[1] > 0
    list.push "#{time[1].to_s.rjust(time_until_next_max_width['hours'])}h"
  elsif time_until_next_max_width['hours'] > 0
    list.push ''.rjust(time_until_next_max_width['hours'] + 1)
  end
  if time[2] > 0
    list.push "#{time[2].to_s.rjust(time_until_next_max_width['minutes'])}m"
  elsif time_until_next_max_width['minutes'] > 0
    list.push ''.rjust(time_until_next_max_width['minutes'] + 1)
  end
  if time[3] > 0
    list.push "#{time[3].to_s.rjust(time_until_next_max_width['seconds'])}s"
  elsif time_until_next_max_width['seconds'] > 0
    list.push ''.rjust(time_until_next_max_width['seconds'] + 1)
  end
  list.join(' ')
}

format_time_until_goal = proc { |time|
  list = Array.new
  if time[0] > 0
    list.push "#{time[0].to_s.rjust(time_until_goal_max_width['days'])}d"
  elsif time_until_goal_max_width['days'] > 0
    list.push ''.rjust(time_until_goal_max_width['days'] + 1)
  end
  if time[1] > 0
    list.push "#{time[1].to_s.rjust(time_until_goal_max_width['hours'])}h"
  elsif time_until_goal_max_width['hours'] > 0
    list.push ''.rjust(time_until_goal_max_width['hours'] + 1)
  end
  if time[2] > 0
    list.push "#{time[2].to_s.rjust(time_until_goal_max_width['minutes'])}m"
  elsif time_until_goal_max_width['minutes'] > 0
    list.push ''.rjust(time_until_goal_max_width['minutes'] + 1)
  end
  if time[3] > 0
    list.push "#{time[3].to_s.rjust(time_until_goal_max_width['seconds'])}s"
  elsif time_until_goal_max_width['seconds'] > 0
    list.push ''.rjust(time_until_goal_max_width['seconds'] + 1)
  end
  list.join(' ')
}

clear
silence_me
put "experience"

while (line = get)
  if line =~ /^\s+Experience: ([0-9,]+)/
    now['exp'] = $1.gsub(',','').to_i
  elsif line =~ /^\s*Exp (?:until next|to next TP): (\-?[0-9,]+)/
    xp_until_next = $1.gsub(',','').to_i
  elsif line =~ /^\s+Level: [0-9,]+\s+Fame: ([0-9,]+)/
    now['fame'] = $1.gsub(',','').to_i
  elsif line =~ /PTPs\/MTPs/
    break
  end
end

now['time'] = Time.now.to_i

unless $xp
  $xp = {}
  $xp['first'] = now
  $xp['last'] = now
  echo 'no information yet'
  exit
end

unless CharSettings['realtime']
  CharSettings['realtime'] = Hash.new
  CharSettings['realtime']['time'] = now['time']
  CharSettings['realtime']['exp'] = now['exp']
  CharSettings['realtime']['fame'] = now['fame']
end

unless (now['exp'] - $xp['first']['exp']) > 0
  echo 'no information yet'
  exit
end

secs_since_realtime     = Time.now.to_i - CharSettings['realtime']['time']
time_since_realtime     = calc_seconds.call(secs_since_realtime)
  xp_since_realtime     = now['exp'] - CharSettings['realtime']['exp']
  xp_since_realtime_avg = (xp_since_realtime * (3600 / secs_since_realtime.to_f)).to_i.round
fame_since_realtime     = now['fame'] - CharSettings['realtime']['fame']
fame_since_realtime_avg = (fame_since_realtime * (3600 / secs_since_realtime.to_f)).to_i.round

secs_since_first     = now['time'] - $xp['first']['time']
time_since_first     = calc_seconds.call(secs_since_first)
  xp_since_first     = now['exp'] - $xp['first']['exp']
  xp_since_first_avg = (xp_since_first * (3600 / secs_since_first.to_f)).to_i.round
fame_since_first     = now['fame'] - $xp['first']['fame']
fame_since_first_avg = (fame_since_first * (3600 / secs_since_first.to_f)).to_i.round

secs_since_last     = now['time'] - $xp['last']['time']
time_since_last     = calc_seconds.call(secs_since_last)
  xp_since_last     = now['exp'] - $xp['last']['exp']
  xp_since_last_avg = (xp_since_last * (3600 / secs_since_last.to_f)).to_i.round
fame_since_last     = now['fame'] - $xp['last']['fame']
fame_since_last_avg = (fame_since_last * (3600 / secs_since_last.to_f)).to_i.round

for time in [ time_since_realtime, time_since_first, time_since_last ]
  time_since_max_width['days']    = [ time_since_max_width['days'].to_i,    (time[0] > 0 ? time[0].to_s.length : 0) ].max
  time_since_max_width['hours']   = [ time_since_max_width['hours'].to_i,   (time[1] > 0 ? time[1].to_s.length : 0) ].max
  time_since_max_width['minutes'] = [ time_since_max_width['minutes'].to_i, (time[2] > 0 ? time[2].to_s.length : 0) ].max
  time_since_max_width['seconds'] = [ time_since_max_width['seconds'].to_i, (time[3] > 0 ? time[3].to_s.length : 0) ].max
end
time_since_label_width = [ (time_since_max_width['days'] + time_since_max_width['minutes'] + time_since_max_width['hours'] + time_since_max_width['seconds'] + ([ time_since_max_width['days'], time_since_max_width['minutes'], time_since_max_width['hours'], time_since_max_width['seconds'] ].count { |i| i > 0 } * 2) - 1), 10 ].max

begin
  time_until_next_realtime = calc_seconds.call((xp_until_next / (xp_since_realtime / secs_since_realtime.to_f)).to_i)
rescue
  time_until_next_realtime = nil
end
begin
  time_until_next_first = calc_seconds.call((xp_until_next / (xp_since_first / secs_since_first.to_f)).to_i)
rescue
  time_until_next_first = nil
end
begin
  time_until_next_last = calc_seconds.call((xp_until_next / (xp_since_last / secs_since_last.to_f)).to_i)
rescue
  time_until_next_last = nil
end

for time in [ time_until_next_realtime, time_until_next_first, time_until_next_last ]
  time_until_next_max_width['days']    = [ time_until_next_max_width['days'].to_i,    (time[0] > 0 ? time[0].to_s.length : 0) ].max
  time_until_next_max_width['hours']   = [ time_until_next_max_width['hours'].to_i,   (time[1] > 0 ? time[1].to_s.length : 0) ].max
  time_until_next_max_width['minutes'] = [ time_until_next_max_width['minutes'].to_i, (time[2] > 0 ? time[2].to_s.length : 0) ].max
  time_until_next_max_width['seconds'] = [ time_until_next_max_width['seconds'].to_i, (time[3] > 0 ? time[3].to_s.length : 0) ].max
end
time_until_next_label_width = [ (time_until_next_max_width['days'] + time_until_next_max_width['minutes'] + time_until_next_max_width['hours'] + time_until_next_max_width['seconds'] + ([ time_until_next_max_width['days'], time_until_next_max_width['minutes'], time_until_next_max_width['hours'], time_until_next_max_width['seconds'] ].count { |i| i > 0 } * 2) - 1), 10 ].max

xp_until_goal = CharSettings['goal'] - now['exp']

if xp_until_goal > 0
  begin
    time_until_goal_realtime = calc_seconds.call((xp_until_goal / (xp_since_realtime / secs_since_realtime.to_f)).to_i)
  rescue
    time_until_goal_realtime = nil
  end
  begin
    time_until_goal_first = calc_seconds.call((xp_until_goal / (xp_since_first / secs_since_first.to_f)).to_i)
  rescue
    time_until_goal_first = nil
  end
  begin
    time_until_goal_last = calc_seconds.call((xp_until_goal / (xp_since_last / secs_since_last.to_f)).to_i)
  rescue
    time_until_goal_last = nil
  end

  for time in [ time_since_realtime, time_since_first, time_since_last ]
    time_until_goal_max_width['days']    = [ time_until_goal_max_width['days'].to_i,    (time[0] > 0 ? time[0].to_s.length : 0) ].max
    time_until_goal_max_width['hours']   = [ time_until_goal_max_width['hours'].to_i,   (time[1] > 0 ? time[1].to_s.length : 0) ].max
    time_until_goal_max_width['minutes'] = [ time_until_goal_max_width['minutes'].to_i, (time[2] > 0 ? time[2].to_s.length : 0) ].max
    time_until_goal_max_width['seconds'] = [ time_until_goal_max_width['seconds'].to_i, (time[3] > 0 ? time[3].to_s.length : 0) ].max
  end
  time_until_goal_label_width = [ (time_until_goal_max_width['days'] + time_until_goal_max_width['minutes'] + time_until_goal_max_width['hours'] + time_until_goal_max_width['seconds'] + ([ time_until_goal_max_width['days'], time_until_goal_max_width['minutes'], time_until_goal_max_width['hours'], time_until_goal_max_width['seconds'] ].count { |i| i > 0 } * 2) - 1), 10 ].max

end

exp_width      = [ add_commas.call(xp_since_realtime).length, add_commas.call(xp_since_first).length, add_commas.call(xp_since_last).length, 4 ].max
avg_exp_width  = [ add_commas.call(xp_since_realtime_avg).length, add_commas.call(xp_since_first_avg).length, add_commas.call(xp_since_last_avg).length, 6 ].max
fame_width     = [ add_commas.call(fame_since_realtime).length, add_commas.call(fame_since_first).length, add_commas.call(fame_since_last).length, 4 ].max
avg_fame_width = [ add_commas.call(fame_since_realtime_avg).length, add_commas.call(fame_since_first_avg).length, add_commas.call(fame_since_last_avg).length, 6 ].max

output = "\n"
output.concat ' gain'.rjust(time_since_label_width/2)
output.concat 'ed in'.ljust((time_since_label_width/2.0).ceil)
output.concat '  '
output.concat ' e'.rjust(exp_width/2)
output.concat 'xp'.ljust((exp_width/2.0).ceil)
output.concat '  '
output.concat ' av'.rjust(avg_exp_width/2)
output.concat 'g/h'.ljust((avg_exp_width/2.0).ceil)
output.concat '  '
if Vars.xp_ignore_fame != 'yes'
  output.concat 'fa'.rjust(fame_width/2)
  output.concat 'me'.ljust((fame_width/2.0).ceil)
  output.concat '  '
  output.concat ' av'.rjust(avg_exp_width/2)
  output.concat 'g/h'.ljust((avg_exp_width/2.0).ceil)
  output.concat '  '
end
output.concat 'until'.rjust(time_until_next_label_width/2)
output.concat ' next'.ljust((time_until_next_label_width/2.0).ceil)
if xp_until_goal > 0
  output.concat '  '
  output.concat 'until'.rjust(time_until_goal_label_width/2)
  output.concat ' goal'.ljust((time_until_goal_label_width/2.0).ceil)
end
output.concat "\n"

output.concat ''.rjust(time_since_label_width, '-')
output.concat '  '
output.concat ''.rjust(exp_width, '-')
output.concat '  '
output.concat ''.rjust(avg_exp_width, '-')
output.concat '  '
if Vars.xp_ignore_fame != 'yes'
  output.concat ''.rjust(fame_width, '-')
  output.concat '  '
  output.concat ''.rjust(avg_fame_width, '-')
  output.concat '  '
end
output.concat ''.rjust(time_until_next_label_width, '-')
if xp_until_goal > 0
  output.concat '  '
  output.concat ''.rjust(time_until_goal_label_width, '-')
end
output.concat "\n"

output.concat format_time_since.call(secs_since_realtime).rjust(time_since_label_width)
output.concat "  #{add_commas.call(xp_since_realtime).rjust(exp_width)}  #{add_commas.call(xp_since_realtime_avg).rjust(avg_exp_width)}  "
if Vars.xp_ignore_fame != 'yes'
  output.concat "#{add_commas.call(fame_since_realtime).rjust(fame_width)}  #{add_commas.call(fame_since_realtime_avg).rjust(avg_fame_width)}  "
end
if time_until_next_realtime
  output.concat format_time_until_next.call(time_until_next_realtime).rjust(time_until_next_label_width)
else
  output.concat '~'.rjust(time_until_next_label_width)
end
if xp_until_goal > 0
  output.concat '  '
  if time_until_goal_realtime
    output.concat format_time_until_goal.call(time_until_goal_realtime).rjust(time_until_goal_label_width)
  else
    output.concat '~'.rjust(time_until_goal_label_width)
  end
end
output.concat "\n"

output.concat format_time_since.call(secs_since_first).rjust(time_since_label_width)
output.concat "  #{add_commas.call(xp_since_first).rjust(exp_width)}  #{add_commas.call(xp_since_first_avg).rjust(avg_exp_width)}  "
if Vars.xp_ignore_fame != 'yes'
  output.concat "#{add_commas.call(fame_since_first).rjust(fame_width)}  #{add_commas.call(fame_since_first_avg).rjust(avg_fame_width)}  "
end
if time_until_next_first
  output.concat format_time_until_next.call(time_until_next_first).rjust(time_until_next_label_width)
else
  output.concat '~'.rjust(time_until_next_label_width)
end
if xp_until_goal > 0
  output.concat '  '
  if time_until_goal_first
    output.concat format_time_until_goal.call(time_until_goal_first).rjust(time_until_goal_label_width)
  else
    output.concat '~'.rjust(time_until_goal_label_width)
  end
end
output.concat "\n"

output.concat format_time_since.call(secs_since_last).rjust(time_since_label_width)
output.concat "  #{add_commas.call(xp_since_last).rjust(exp_width)}  #{add_commas.call(xp_since_last_avg).rjust(avg_exp_width)}  "
if Vars.xp_ignore_fame != 'yes'
  output.concat "#{add_commas.call(fame_since_last).rjust(fame_width)}  #{add_commas.call(fame_since_last_avg).rjust(avg_fame_width)}  "
end
if time_until_next_last
  output.concat format_time_until_next.call(time_until_next_last).rjust(time_until_next_label_width)
else
  output.concat '~'.rjust(time_until_next_label_width)
end
if xp_until_goal > 0
  output.concat '  '
  if time_until_goal_last
    output.concat format_time_until_goal.call(time_until_goal_last).rjust(time_until_goal_label_width)
  else
    output.concat '~'.rjust(time_until_goal_label_width)
  end
end
output.concat "\n"

if xp_until_goal > 0
  output.concat "\n"
  output.concat "(#{add_commas.call(xp_until_goal)} experience needed to reach your goal of #{add_commas.call(CharSettings['goal'])})\n"
end

output.concat "\n"
respond output

$xp['last'] = now
