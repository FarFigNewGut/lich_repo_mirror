=begin

	This script masters cobbling for you. Type ;cobble for instructions on how to set this script up (just requires three lich settings), once it's all setup type ;cobble to let it do its thing or type ;cobble <pelt|hide|skin|etc> to 	use your own pelts found in your cobbling sack before attempting to buy materials from NPC. The script will pick up where it left off if you stop the script and run it again. This script will buy all cobbling supplies 		needed and will join the cobbling guild if you haven't already.

	Currently this script will work in Wehnimer's Landing, FWI, Cysaegir and Zul Logoth.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version 47

=end

(landing_information = nil;zul_information = nil;workshop_number = 0;check_guild_status = nil;check_for_pattern_book = nil;check_for_cutting_knife = nil;check_for_cord = nil;check_for_chalk = nil;begin_work = nil;start_sole_piece = nil;stow_cobbling_supplies = nil;cut_leather = nil;start_form = nil;get_correct_pattern = nil;required_pattern = nil;cobbling_skills = nil;current_part = nil;gaze_pattern = nil;get_chalk = nil;check_form = nil;check_rent_status = nil;find_workshop = nil;get_10000_silvers = nil;check_for_leather = nil;get_current_pattern_2 = nil;leave_room_check = nil;check_for_hide = nil;correct_correct_pattern = nil;get_current_pattern = nil;error_message_instructions = nil;inside_workshop_check = nil;current_proc = nil;pattern_book_number = nil;foreman_location = nil;registrar_location = nil;registrar_npc_name = nil;storage_room = nil;lower_quality_hide_order_number = nil;higher_quality_hide_order_number = nil;lower_quality_leather_order_number = nil;higher_quality_leather_order_number = nil;cutting_knife_order_number = nil;cord_order_number = nil;chalk_order_number = nil;current_project_type = nil;skill_level_stuff = nil;workshop_rooms = nil;my_workshop_number = nil;hide_or_skin = nil;current_hide_order_number = nil;lower_quality_settings = nil;current_leather_order_number = nil;go_to_storage = nil;go_to_foreman = nil;go_to_bank = nil;go_to_workshop = nil;fwi_information = nil)
trash_container_name = nil
wait_and_stuff = nil
page_number = nil

set_my_workshop_number = proc{
	my_workshop_number = 4082 if $my_workshop_room =~ /butterfly/ or $my_workshop_room =~ /drake/
	my_workshop_number = 4083 if $my_workshop_room =~ /ogre/ or $my_workshop_room =~ /manticore/
	my_workshop_number = 4084 if $my_workshop_room =~ /minotaur/ or $my_workshop_room =~ /centaur/
	my_workshop_number = 4078 if $my_workshop_room =~ /goblin/ or $my_workshop_room =~ /orc/
	my_workshop_number = 4079 if $my_workshop_room =~ /faeroth/ or $my_workshop_room =~ /kobold/
	my_workshop_number = 4080 if $my_workshop_room =~ /gargoyle/
	my_workshop_number = 16865 if $my_workshop_room =~ /corestone-set/ or $my_workshop_room =~ /galena-set/
	my_workshop_number = 4699 if $my_workshop_room =~ /agate-inlaid/ or $my_workshop_room =~ /hyacinth-inalid/
	my_workshop_number = 4700 if $my_workshop_room =~ /opal-inlaid/ or $my_workshop_room =~ /jacinth-inlaid/
	my_workshop_number = 4701 if $my_workshop_room =~ /ruby-inlaid/ or $my_workshop_room =~ /despanal-inlaid/
	my_workshop_number = 4698 if $my_workshop_room =~ /sapphire-inlaid/ or $my_workshop_room =~ /feystone-inlaid/
	my_workshop_number = 17173 if $my_workshop_room =~ /heliodor-inalid/ or $my_workshop_room =~ /rosespar-inlaid/
	my_workshop_number = 4697 if $my_workshop_room =~ /diamond-inlaid/
	my_workshop_number = 19384 if $my_workshop_room =~ /bird\-etched|turtle\-etched/
	my_workshop_number = 19385 if $my_workshop_room =~ /crane\-etched|dolphin\-etched/
	my_workshop_number = 19386 if $my_workshop_room =~ /pelican\-etched/
	my_workshop_number = 19388 if $my_workshop_room =~ /shell\-etched/
	my_workshop_number = 19391 if $my_workshop_room =~ /seathrak\-etched|wave\-etched/
	my_workshop_number = 19392 if $my_workshop_room =~ /fish\-etched|trident\-etched/
	my_workshop_number = 19387 if $my_workshop_room =~ /vine\-painted/
	my_workshop_number = 14807 if $my_workshop_room =~ /dragonsbreath sapphire\-inlaid/
	my_workshop_number = 14806 if $my_workshop_room =~ /green peridot\-inlaid/
	my_workshop_number = 14803 if $my_workshop_room =~ /leopard quartz\-inlaid/ || $my_workshop_room =~ /asterfire quartz\-inlaid/
	my_workshop_number = 14804 if $my_workshop_room =~ /dragonfire emerald\-inlaid/ || $my_workshop_room =~ /star emerald\-inlaid/
	my_workshop_number = 14805 if $my_workshop_room =~ /blue geode\-inlaid/ || $my_workshop_room =~ /purple geode\-inlaid/
	my_workshop_number = 14703 if $my_workshop_room =~ /red sunstone\-inlaid/ || $my_workshop_room =~ /yellow sunstone\-inlaid/
}

landing_information = proc{
	foreman_location = 15519
	registrar_location = 4081
	registrar_npc_name = "lass"
	storage_room = 15520
	lower_quality_hide_order_number = 1
	higher_quality_hide_order_number = 6
	lower_quality_leather_order_number = 7
	higher_quality_leather_order_number = 9
	cutting_knife_order_number = 11
	cord_order_number = 10
	chalk_order_number = 12
	workshop_rooms = [ '4082', '4083', '4084', '4078', '4079', '4080' ]
}

zul_information = proc{
	foreman_location = 16862
	registrar_location = 16860
	registrar_npc_name = "dwarf"
	storage_room = 16863
	lower_quality_hide_order_number = 1
	higher_quality_hide_order_number = 6
	lower_quality_leather_order_number = 7
	higher_quality_leather_order_number = 9
	cutting_knife_order_number = 11
	cord_order_number = 10
	chalk_order_number = 12
	workshop_rooms = [ '16865', '16865', '16865' ]
}

cys_information = proc{
	foreman_location = 17169
	registrar_location = 17168
	registrar_npc_name = "woman"
	storage_room = 17170
	lower_quality_hide_order_number = 1
	higher_quality_hide_order_number = 6
	lower_quality_leather_order_number = 7
	higher_quality_leather_order_number = 9
	cutting_knife_order_number = 11
	cord_order_number = 10
	chalk_order_number = 12
	workshop_rooms = [ '4699', '4700', '4701', '4698', '17173', '4697' ]
}

fwi_information = proc{
	foreman_location = 19396
	registrar_location = 19395
	registrar_npc_name = "gnome"
	storage_room = 19393
	lower_quality_hide_order_number = 5
	higher_quality_hide_order_number = 6
	lower_quality_leather_order_number = 9
	higher_quality_leather_order_number = 7
	cutting_knife_order_number = 2
	cord_order_number = 1
	chalk_order_number = 3
	workshop_rooms = [ '19384', '19385', '19386', '19387', '19388', '19391', '19392' ]
}

teras_information = proc{
	foreman_location = 14701
	registrar_location = 14701
	registrar_npc_name = "Bartober" 
	storage_room = 14808
	lower_quality_hide_order_number = 4
	higher_quality_hide_order_number = 6
	lower_quality_leather_order_number = 7 
	higher_quality_leather_order_number = 9
	cutting_knife_order_number = 11
	cord_order_number = 10
	chalk_order_number = 12
	workshop_rooms = [ '14807', '14806', '14803', '14804', '14805', '14703' ]
}

error_message_instructions = proc{
	(echo "Looks like you ran into a problem in #{current_proc}. Please run the script again and if you run into the same problem please copy this line and about the previous 20 game lines and send the information to the author.";exit)
}

inside_workshop_check = proc{
	if checkarea !~ /workshop/i
		go_to_workshop.call
	end
}

go_to_storage = proc{
	(start_script 'go2', [storage_room];wait_while{ running?('go2') };fput "unhide" if invisible?)
}

go_to_foreman = proc{
	start_script 'go2', [foreman_location]
	wait_while{ running?('go2') }
	fput "go grey wooden door" if registrar_location == 14701
	fput "unhide" if invisible?
}

go_to_bank = proc{
	start_script 'go2', [ 'bank', '--disable-confirm' ]
	wait_while{ running?('go2') }
	fput "unhide" if invisible?
}

go_to_workshop = proc{
	set_my_workshop_number.call if my_workshop_number == nil
	my_workshop_number = 4699 if my_workshop_number == nil
	start_script 'go2', [my_workshop_number]
	wait_while{ running?('go2') }
	result = dothistimeout "go #$my_workshop_room door", 10, /appears to be locked|opens easily as you pass/i
	if result =~ /appears to be locked/i
		check_rent_status.call
	elsif result =~ /opens easily as you pass/i
		sleep 0.1
	elsif result.nil?
		(current_proc = "go_to_workshop";error_message_instructions.call)
	end
}

leave_room_check = proc{
	(waitrt?;fput "stand" if !standing?;move 'out' if checkroom =~ /table|booth/i;move 'go door' if checkroom =~ /workshop/i and UserVars.cobblingtown == "landing";move 'go door' if checkroom =~ /workshop/i and UserVars.cobblingtown == "cys";move 'out' if checkroom =~ /workshop/i and UserVars.cobblingtown == "zul";move 'out' if checkroom =~ /workshop/i and UserVars.cobblingtown == "fwi")
}

check_for_leather = proc{
	stow_cobbling_supplies.call
	result = dothistimeout "tap my leather in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently./i
	if result =~ /You tap your foot impatiently\.|What were you referring to/
		leave_room_check.call
		go_to_storage.call
		fput "order #{current_leather_order_number}"
		result = dothistimeout "buy", 10, /you do not have enough silver|hands you/i
		if result =~ /you do not have enough silver/i
			get_10000_silvers.call
			go_to_storage.call
			multifput "order #{current_leather_order_number}", "buy"
			stow_cobbling_supplies.call
		elsif result =~ /hands you/i
			(stow_cobbling_supplies.call)
		elsif result.nil?
			(current_proc = "check_for_leather";error_message_instructions.call)
		end
	elsif result =~ /You tap/i
		nil
	elsif result.nil?
		(current_proc = "check_for_leather";error_message_instructions.call)	
	end
}

check_for_hide = proc{
	stow_cobbling_supplies.call
	result = dothistimeout "tap my #{current_part} in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
	if result =~ /What were you referring to|You tap your foot impatiently\./i
		(leave_room_check.call;go_to_storage.call;fput "order #{current_hide_order_number}")
		result = dothistimeout "buy", 10, /you do not have enough silver|hands you/i
		if result =~ /you do not have enough silver/i
			(get_10000_silvers.call;go_to_storage.call;multifput "order #{current_hide_order_number}", "buy";stow_cobbling_supplies.call)
		elsif result =~ /hands you/i
			(stow_cobbling_supplies.call)
		elsif result.nil?
			(current_proc = "check_for_hide";error_message_instructions.call)
		end
	elsif result =~ /You tap/i
		nil
	elsif result.nil?
		(current_proc = "check_for_hide";error_message_instructions.call)
	end
}

get_10000_silvers = proc{
	go_to_bank.call
	fput "depo all"
	result = dothistimeout "withdraw 10000 silvers", 10, /you don't seem to have|(then hands you|and hands it to you|hands you)/i
	if result =~ /you don't seem to have/i
		(echo "You don't have enough silvers to continue with this script.";exit)
	elsif result =~ /(then hands you|and hands it to you|and hands you)/i
		nil
	elsif result.nil?
		(current_proc = "get_10000_silvers";error_message_instructions.call)
	end		
}

check_rent_status = proc{
	(workshop_number = 0;leave_room_check.call;go_to_foreman.call)
	result = dothistimeout "ask foreman about rent", 10, /(ya gots a perfectly good one already|looks up and scowls at you|you already have a workshop here)|You should answer yes or answer no/i
	if result =~ /(ya gots a perfectly good one already|looks up and scowls at you|you already have a workshop here)/i
		if $my_workshop_room != nil
			(set_my_workshop_number.call;check_form.call)
		else
			find_workshop.call
		end
	elsif result =~ /You should answer yes or answer no/i
		result = dothistimeout "answer yes", 10, /(glances at you and rolls his eyes|You need coins or)|(deducts the rental cost|takes your 1000 silvers)/i
			if result =~ /(glances at you and rolls his eyes|You need coins or)/i
				(get_10000_silvers.call;check_rent_status.call)
			elsif result =~ /(deducts the rental cost from it|takes your 1000 silvers)/i
				find_workshop.call
			elsif result.nil?
				(current_proc = "check_rent_status";error_message_instructions.call)
			end
	elsif result.nil?
		(current_proc = "check_rent_status";error_message_instructions.call)
	end
}

find_workshop = proc{
	leave_room_check.call
	if workshop_number > workshop_rooms.length - 1
		(echo "Couldn't find your workshop.";exit)
	else
		(start_script "go2", [workshop_rooms.at(workshop_number)];wait_while{ running?('go2') })
		result = dothistimeout "go door", 10, /The (.*) door opens easily as you pass through into your workshop|appears to be locked/i
		if result =~ /The (.*) door opens easily as you pass through into your workshop/i
			($my_workshop_room = $1;set_my_workshop_number.call;check_form.call)
		elsif result =~ /appears to be locked/i
			result = dothistimeout "go other door", 10, /The (.*) door opens easily as you pass through into your workshop|appears to be locked|Where are you trying to go\?/i
			if result =~ /The (.*) door opens easily as you pass through into your workshop/i
				($my_workshop_room = $1;set_my_workshop_number.call;check_form.call)
			elsif result =~ /appears to be locked|Where are you trying to go\?/i
				(workshop_number = workshop_number + 1;find_workshop.call)
			elsif result.nil?
				(current_proc = "find_workshop";error_message_instructions.call)
			end
		elsif result.nil?
			(current_proc = "find_workshop";error_message_instructions.call)
		end
	end
}

check_guild_status = proc{
	result = dothistimeout "artisan skills", 3, /cobbling/i
	if result =~ /cobbling/i
		sleep 0.1
	elsif result.nil?
		(echo "You don't know cobbling yet, let's fix that.";sleep 1;go_to_foreman.call;fput "ask foreman about join";waitrt?;check_guild_status.call)
	end
}

check_for_pattern_book = proc{
	stow_cobbling_supplies.call
	result = dothistimeout "tap my #{UserVars.cobblingbook} in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
	if result =~ /What were you referring to|You tap your foot impatiently\./i
		(echo "You need a pattern book, let's get that for you.";sleep 1;stow_cobbling_supplies.call;go_to_bank.call)
		result = dothistimeout "withdraw 2000 note", 10, /you don't seem to have|(then hands you|and hands it to you)/i
		if result =~ /you don't seem to have/i
			(echo "You don't have enough silvers to continue with this script.";exit)
		elsif result =~ /(then hands you|and hands it to you)/i
			start_script 'go2', [registrar_location]
			wait_while{ running?('go2') }
			fput "go dark brown wooden door" if registrar_location == 14701
			fput "unhide" if invisible?
			fput "ask #{registrar_npc_name} about book"
			fput "give #{registrar_npc_name}"
			check_for_pattern_book.call
		elsif result.nil?
			(current_proc = "check_for_pattern_book";error_message_instructions.call)
		end
	elsif result =~ /You tap/i
		sleep 0.1
	elsif result.nil?
		(current_proc = "check_for_pattern_book";error_message_instructions.call)	
	end
}

get_current_pattern = proc{
	(stow_cobbling_supplies.call;leave_room_check.call;go_to_bank.call)
	result = dothistimeout "withdraw 200 note", 10, /you don't seem to have|(then hands you|and hands it to you)/i
	if result =~ /you don't seem to have/i
		(echo "You don't have enough silvers to continue with this script.";exit)
	elsif result =~ /(then hands you|and hands it to you)/i
		start_script 'go2', [registrar_location]
		wait_while{ running?('go2') }
		fput "go dark brown wooden door" if registrar_location == 14701
		fput "get my #{UserVars.cobblingbook}"
		if UserVars.cobblingtown == "fwi"
			result = dothistimeout "read patterns on lectern", 10, /#{required_pattern}|open to the/i
		elsif UserVars.cobblingtown == "cys"
			result = dothistimeout "read patterns", 10, /#{required_pattern}|open to the/i
		else
			result = dothistimeout "read patterns on counter", 10, /#{required_pattern}|open to the/i
		end
		if result =~ /#{required_pattern}/i && result !~ /dancing shoes/
			fput "unhide" if invisible?
			if UserVars.cobblingtown == "fwi"
				fput "tap patterns on lectern"
			elsif UserVars.cobblingtown == "cys"
				fput "tap patterns"
			else
				fput "tap patterns on counter"
			end
			fput "ask #{registrar_npc_name} about pattern"
			fput "give #{registrar_npc_name}"
			waitrt?
			begin_work.call
		elsif result =~ /open to the/i
			page_number = 1
			get_current_pattern_2.call
		elsif result.nil?
			(current_proc = "get_current_pattern";error_message_instructions.call)
		end	
	elsif result.nil?
		(current_proc = "get_current_pattern";error_message_instructions.call)
	end
}

get_current_pattern_2 = proc{
	result = dothistimeout "flip patterns #{page_number}", 10, /#{required_pattern}|You flip/i
	if result =~ /#{required_pattern}/i
		fput "unhide" if invisible?
		if UserVars.cobblingtown == "fwi"
			fput "tap patterns on lectern"
		elsif UserVars.cobblingtown == "cys"
			fput "tap patterns"
		else
			fput "tap patterns on counter"
		end
		fput "ask #{registrar_npc_name} about pattern"
		fput "give #{registrar_npc_name}"
		waitrt?
		begin_work.call
	elsif result =~ /You flip/i
		page_number += 1
		get_current_pattern_2.call
	elsif result.nil?
		current_proc = "get_current_pattern_2"
		error_message_instructions.call
	end	
}

check_for_cutting_knife = proc{
	stow_cobbling_supplies.call
	result = dothistimeout "tap my cutting knife in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
	if result =~ /What were you referring to|You tap your foot impatiently\./i
		(echo "You need a cutting knife, let's get that for you.";sleep 1;go_to_storage.call;fput "order #{cutting_knife_order_number}")
		result = dothistimeout "buy", 10, /you do not have enough silver|hands you/i
		if result =~ /you do not have enough silver/i
			(get_10000_silvers.call;go_to_storage.call;multifput "order #{cutting_knife_order_number}", "buy";check_for_cutting_knife.call)
		elsif result =~ /hands you/i
			check_for_cutting_knife.call
		elsif result.nil?
			(current_proc = "check_for_cutting_knife";error_message_instructions.call)
		end
	elsif result =~ /You tap/i
		sleep 0.1
	elsif result.nil?
		(current_proc = "check_for_cutting_knife";error_message_instructions.call)		
	end
}

check_for_cord = proc{
	stow_cobbling_supplies.call
	result = dothistimeout "tap my knotted cord in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
	if result =~ /What were you referring to|You tap your foot impatiently\./i
		(echo "You need a cord, let's get that for you.";sleep 1;go_to_storage.call;fput "order #{cord_order_number}")
		result = dothistimeout "buy", 10, /you do not have enough silver|hands you/i
		if result =~ /you do not have enough silver/i
			(get_10000_silvers.call;go_to_storage.call;multifput "order #{cord_order_number}", "buy";check_for_cord.call)
		elsif result =~ /hands you/i
			check_for_cord.call
		elsif result.nil?
			(current_proc = "check_for_cord";error_message_instructions.call)
		end
	elsif result =~ /You tap/i
		sleep 0.1
	elsif result.nil?
		(current_proc = "check_for_cord";error_message_instructions.call)	
	end
}

check_for_chalk = proc{
	stow_cobbling_supplies.call
	result = dothistimeout "tap my chalk in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
	if result =~ /What were you referring to|You tap your foot impatiently\./i
		(echo "You need some chalk, let's get that for you.";sleep 1;go_to_storage.call;fput "order #{chalk_order_number}")
		result = dothistimeout "buy", 10, /you do not have enough silver|hands you/i
		if result =~ /you do not have enough silver/i
			(get_10000_silvers.call;go_to_storage.call;multifput "order #{chalk_order_number}", "buy";check_for_chalk.call)
		elsif result =~ /hands you/i
			check_for_chalk.call
		elsif result.nil?
			(current_proc = "check_for_chalk";error_message_instructions.call)
		end
	elsif result =~ /You tap/i
		sleep 0.1
	elsif result.nil?
		(current_proc = "check_for_chalk";error_message_instructions.call)
	end
}

stow_cobbling_supplies = proc{
	#fput "put my #{UserVars.cobblingbook} in my #{UserVars.cobblingsack}" if checkleft == "#{UserVars.cobblingbook}" or checkright == "#{UserVars.cobblingbook}"
	#fput "put my knife in my #{UserVars.cobblingsack}" if checkleft == "knife" or checkright == "knife"
	#fput "put my cord in my #{UserVars.cobblingsack}" if checkleft == "cord" or checkright == "cord"
	#fput "put my chalk in my #{UserVars.cobblingsack}" if checkleft == "chalk" or checkright == "chalk"
	#fput "put my hide in my #{UserVars.cobblingsack}" if checkleft == "hide" or checkright == "hide"
	#fput "put my canvas in my #{UserVars.cobblingsack}" if checkleft =~ /canvas/ or checkright =~ /canvas/
	#fput "put my oilcloth in my #{UserVars.cobblingsack}" if checkleft =~ /oilcloth/ or checkright =~ /oilcloth/
	#fput "put my skin in my #{UserVars.cobblingsack}" if checkleft == "skin" or checkright == "skin"
	#fput "put my pelt in my #{UserVars.cobblingsack}" if checkleft == "pelt" or checkright == "pelt"
	#fput "put my leather in my #{UserVars.cobblingsack}" if checkleft == "leather" or checkright == "leather"
	fput "put ##{GameObj.right_hand.id} in my #{UserVars.cobblingsack}" if checkright
	fput "put ##{GameObj.left_hand.id} in my #{UserVars.cobblingsack}" if checkleft
}

cut_hide = proc{
	(waitrt?;inside_workshop_check.call;stow_cobbling_supplies.call;multifput "get my cutting knife from my #{UserVars.cobblingsack}", "cut #{current_part} on worktable";waitrt?;inside_workshop_check.call;begin_work.call)
}

get_correct_pattern = proc{
	inside_workshop_check.call
	fput "get my #{UserVars.cobblingbook} from my #{UserVars.cobblingsack}" if checkright != "#{UserVars.cobblingbook}" and checkleft != "#{UserVars.cobblingbook}"
	sleep 1
	fput "put my #{checkright} in my #{UserVars.cobblingsack}" if checkright != "#{UserVars.cobblingbook}" and checkright
	fput "put my #{checkleft} in my #{UserVars.cobblingsack}" if checkleft != "#{UserVars.cobblingbook}" and checkleft
	result = dothistimeout "read my #{UserVars.cobblingbook}", 10, /#{required_pattern}|The cover is embossed|(note that it has patterns for the following|is open to the pattern)|There are no patterns yet/i
	if result =~ /#{required_pattern}/i
		sleep 0.1
	elsif result =~ /The cover is embossed/i
		(fput "open my #{UserVars.cobblingbook}";get_correct_pattern.call)
	elsif result =~ /(note that it has patterns for the following|is open to the pattern)/i
		result = dothistimeout "flip patterns #{pattern_book_number}", 10, /(But there is only|But there are only)|You flip/i
		if result =~ /(But there is only|But there are only)/i
			get_current_pattern.call
		elsif result =~ /You flip/i
			(pattern_book_number = pattern_book_number + 1;sleep 0.5;get_correct_pattern.call)
		elsif result.nil?
			(current_proc = "get_correct_pattern";error_message_instructions.call)
		end
	elsif result =~ /There are no patterns yet/
		get_current_pattern.call
	elsif result.nil?
		(current_proc = "get_correct_pattern";error_message_instructions.call)
	end
}

correct_correct_pattern = proc{
	inside_workshop_check.call
	fput "get my #{UserVars.cobblingbook} from my #{UserVars.cobblingsack}" if checkright != "#{UserVars.cobblingbook}" and checkleft != "#{UserVars.cobblingbook}"
	fput "put my #{checkright} in my #{UserVars.cobblingsack}" if checkright != "#{UserVars.cobblingbook}" and checkright
	fput "put my #{checkleft} in my #{UserVars.cobblingsack}" if checkleft != "#{UserVars.cobblingbook}" and checkleft
	result = dothistimeout "read my #{UserVars.cobblingbook}", 10, /#{required_pattern}|The cover is embossed|(note that it has patterns for the following|is open to the pattern)|There are no patterns yet/i
	if result =~ /#{required_pattern}/i
		begin_work.call
	elsif result =~ /The cover is embossed/i
		(fput "open my #{UserVars.cobblingbook}";correct_correct_pattern.call)
	elsif result =~ /(note that it has patterns for the following|is open to the pattern)/i
		result = dothistimeout "flip patterns #{pattern_book_number}", 10, /(But there is only|But there are only)|You flip/i
		if result =~ /(But there is only|But there are only)/i
			get_current_pattern.call
		elsif result =~ /You flip/i
			(pattern_book_number = pattern_book_number + 1;sleep 0.5;correct_correct_pattern.call)
		elsif result.nil?
			(current_proc = "correct_correct_pattern";error_message_instructions.call)
		end
	elsif result =~ /There are no patterns yet/
		get_current_pattern.call
	elsif result.nil?
		(current_proc = "correct_correct_pattern";error_message_instructions.call)
	end
}

get_chalk = proc{
	inside_workshop_check.call
	fput "get my chalk from my #{UserVars.cobblingsack}"
	sleep 1
	if checkright !~ /chalk/ && checkleft !~ /chalk/
		(stow_cobbling_supplies.call;leave_room_check.call;get_10000_silvers.call;go_to_storage.call;multifput "order #{chalk_order_number}", "buy";go_to_workshop.call;begin_work.call)
	end
}

gaze_pattern = proc{
	inside_workshop_check.call
	result = dothistimeout "gaze #{UserVars.cobblingbook}", 10, /slips awkwardly from your hand|(a current of air flips the page over|You must flip the book open to a pattern first)|shattering off a large piece before you can copy the pattern|You study the pattern for/i
	if result =~ /slips awkwardly from your hand/i
		(waitrt?;inside_workshop_check.call;get_chalk.call;gaze_pattern.call)
	elsif result =~ /You study the pattern for/i
		begin_work.call
	elsif result =~ /(a current of air flips the page over|You must flip the book open to a pattern first)/i
		(waitrt?;inside_workshop_check.call;stow_cobbling_supplies.call;correct_correct_pattern.call)
	elsif result =~ /shattering off a large piece before you can copy the pattern/i
		(waitrt?;inside_workshop_check.call;leave_room_check.call;go_to_storage.call;fput "order #{chalk_order_number}")
		result = dothistimeout "buy", 10, /you do not have enough silver|hands you/i
		if result =~ /you do not have enough silver/i
			(get_10000_silvers.call;go_to_storage.call;multifput "order #{chalk_order_number}", "buy";go_to_workshop.call;begin_work.call)
		elsif result =~ /hands you/i
			(go_to_workshop.call;begin_work.call)
		elsif result.nil?
			(current_proc = "gaze_pattern";error_message_instructions.call)
		end	
	elsif result.nil?
		(current_proc = "gaze_pattern";error_message_instructions.call)
	end
}

begin_work = proc{
	(pattern_book_number = 1;waitrt?;inside_workshop_check.call)
	result = dothistimeout "look at #{current_part} on worktable", 10, /Close examination shows pattern marks on the|I could not find what you were referring to|has been carefully measured as|and precisely cut|has been carefully prepared to be used/i
	if result =~ /Close examination shows pattern marks on the/i
		(waitrt?;inside_workshop_check.call;stow_cobbling_supplies.call;fput "get my cord from my #{UserVars.cobblingsack}")
		result = dothistimeout "measure #{current_part} on worktable", 10, /You try to transfer/i
		if result =~ /You try to transfer/i
			(fput "measure #{checkname}";cut_hide.call)
		elsif result.nil?
			cut_hide.call
		end
	elsif result =~ /I could not find what you were referring to/i
		check_for_hide.call
		check_for_leather.call
		inside_workshop_check.call
		fput "put my #{checkright} in my #{UserVars.cobblingsack}" if checkright != "#{UserVars.cobblingbook}" and checkright
		fput "put my #{checkleft} in my #{UserVars.cobblingsack}" if checkleft != "#{UserVars.cobblingbook}" and checkleft
		fput "get my #{current_part} from my #{UserVars.cobblingsack}"
		sleep 1
		fput "put my #{current_part} on worktable"
		while line = get
			break if line =~ /^You put/
		end
		get_correct_pattern.call
		get_chalk.call
		gaze_pattern.call
		waitrt?
		inside_workshop_check.call
	elsif result =~ /has been carefully measured as/i
		cut_hide.call
	elsif result =~ /and precisely cut/i
		if current_part == "hide" or current_part == "skin" or current_part == "pelt" or current_part == "canvas" or current_part == "oilcloth"
			(current_part = "leather";begin_work.call)
		elsif current_part == "leather"
			start_form.call
		end
	elsif result =~ /has been carefully prepared to be used/i
		fput "put my #{checkright} in my #{UserVars.cobblingsack}" if checkright != "#{UserVars.cobblingbook}" and checkright
		fput "put my #{checkleft} in my #{UserVars.cobblingsack}" if checkleft != "#{UserVars.cobblingbook}" and checkleft
		get_correct_pattern.call;get_chalk.call;gaze_pattern.call
		waitrt?
		inside_workshop_check.call
	elsif result.nil?
		(current_proc = "begin_work";error_message_instructions.call)
	end
}

wait_and_stuff = proc{
	sleep 1
	waitrt?
	sleep 1
	waitrt?
	inside_workshop_check.call
}

start_form = proc{
	waitrt?
	inside_workshop_check.call
	stow_cobbling_supplies.call
	fput "get #{hide_or_skin} from worktable"
	fput "put my #{hide_or_skin} on form"
	fput "join #{hide_or_skin} on form"
	wait_and_stuff.call
	fput "get leather from worktable"
	fput "join leather with #{hide_or_skin} on form"
	wait_and_stuff.call
	fput "join #{current_project_type} on form"
	wait_and_stuff.call
	fput "join #{current_project_type} on form"
	wait_and_stuff.call
	fput "join #{current_project_type} on form"
	wait_and_stuff.call
	multifput "get #{current_project_type} from form", "rub my #{current_project_type}", "rub my #{current_project_type}"
	if cobbling_skills == 49 or cobbling_skills == 99 or cobbling_skills == 149 or cobbling_skills == 199
		(leave_room_check.call;go_to_foreman.call;fput "ask foreman about rank";waitrt?check_rent_status.call)
	elsif cobbling_skills <= 499
		if trash_container_name.nil?
			trash_container_name = GameObj.loot.find{ |item| item.name =~ /crate|barrel|wastebarrel|casket|bin|receptacle|basket|cask/ }
			trash_container_name = GameObj.room_desc.find{ |item| item.name =~ /crate|barrel|wastebarrel|casket|bin|receptacle|basket|cask/ } if trash_container_name.nil?
		end
		fput "put my #{current_project_type} in #{trash_container_name}"
		if UserVars.cobblingrest == "yes" and percentmind >= 100
			echo "Mind full, going to rest."
			leave_room_check.call
			(start_script 'go2', [UserVars.cobblingrestroom];wait_while{ running?('go2') })
			fput "#{UserVars.cobblingrestcommand}" if !(UserVars.cobblingrestcommand.nil? or UserVars.cobblingrestcommand.empty?)
			wait_until { percentmind <= 50 }
			echo "Mind at clear, heading back to do more cobbling."
			fput "open my #{UserVars.cobblingsack}"
		end
		check_rent_status.call
	end
}

skill_level_stuff = proc{
	result = dothistimeout "art skills", 10, /In the skill of cobbling, .* (.*) ranks/i
	if result =~ /In the skill of cobbling, .* (.*) ranks/i
		cobbling_skills = $1
		cobbling_skills = Integer(cobbling_skills)
	elsif result.nil?
		(current_proc = "skill_level_stuff";error_message_instructions.call)
	end
	if cobbling_skills == 500
		(echo "You are a master at cobbling! Congratulations!";exit)
	end
	if cobbling_skills == 49 or cobbling_skills == 99 or cobbling_skills == 149 or cobbling_skills == 199
		#Patterns are different in each town so each town will need their own items added as I gather the correct information for each town. There are two different places these variables needed to be added to in the code block below:
		if UserVars.cobblingtown == "fwi"
			required_pattern = "pattern for a pair of shoes" if cobbling_skills == 49 #Confirmed to work for FWI.
			required_pattern = "pattern for a pair of boots" if cobbling_skills == 99 #Confirmed to work for FWI.
			required_pattern = "pattern for a pair of slippers" if cobbling_skills == 149 #Confirmed for FWI.
			required_pattern = "pattern for a pair of sandals" if cobbling_skills == 199 #Not confirmed for FWI.
		else
			required_pattern = "pattern for a pair of shoes" if cobbling_skills == 49
			required_pattern = "pattern for a pair of boots" if cobbling_skills == 99
			required_pattern = "pattern for a pair of slippers" if cobbling_skills == 149
			required_pattern = "pattern for a pair of sandals" if cobbling_skills == 199
		end
		current_project_type = "shoes" if cobbling_skills == 49
		current_project_type = "boots" if cobbling_skills == 99
		current_project_type = "slippers" if cobbling_skills == 149
		current_project_type = "sandals" if cobbling_skills == 199
		hide_or_skin = "pelt" if UserVars.cobblingtown == "landing"
		hide_or_skin = "skin" if UserVars.cobblingtown == "zul"
		hide_or_skin = "hide" if UserVars.cobblingtown == "cys"
		hide_or_skin = "oilcloth" if UserVars.cobblingtown == "fwi"
		current_hide_order_number = higher_quality_hide_order_number
		current_leather_order_number = higher_quality_leather_order_number
	elsif cobbling_skills <= 48
		if UserVars.cobblingtown == "fwi"
			required_pattern = "pattern for a pair of shoes" #Confirmed to work for FWI.
			current_project_type = "shoes"
		else
			required_pattern = "pattern for a pair of shoes"
			current_project_type = "shoes"
		end
		lower_quality_settings.call
	elsif cobbling_skills <= 98
		if UserVars.cobblingtown == "fwi"
			required_pattern = "pattern for a pair of boots" #Confirmed to work for FWI.
			current_project_type = "boots"
		else
			required_pattern = "pattern for a pair of boots"
			current_project_type = "boots"
		end
		lower_quality_settings.call
	elsif cobbling_skills <= 148
		if UserVars.cobblingtown == "fwi"
			required_pattern = "pattern for a pair of slippers" #Confirmed to work for FWI.
			current_project_type = "slippers"
		else
			required_pattern = "pattern for a pair of slippers"
			current_project_type = "slippers"
		end
		lower_quality_settings.call
	elsif cobbling_skills <= 499
		if UserVars.cobblingtown == "fwi"
			required_pattern = "pattern for a pair of sandals"
			current_project_type = "sandals"
		else
			required_pattern = "pattern for a pair of sandals"
			current_project_type = "sandals"
		end
		lower_quality_settings.call
	end
	############################################################################################################################
}

lower_quality_settings = proc{
	hide_or_skin = "hide" if UserVars.cobblingtown == "landing"
	hide_or_skin = "hide" if UserVars.cobblingtown == "zul"
	hide_or_skin = "skin" if UserVars.cobblingtown == "cys"
	hide_or_skin = "canvas" if UserVars.cobblingtown == "fwi"
	found_needed_item = nil
	current_hide_order_number = lower_quality_hide_order_number
	current_leather_order_number = lower_quality_leather_order_number
	if script.vars[1] != nil
		result = dothistimeout "tap my #{script.vars[1]} in my #{UserVars.cobblingsack}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
		if result =~ /What were you referring to|You tap your foot impatiently\./i
			nil
		elsif result =~ /You tap/i
			hide_or_skin = "#{script.vars[1]}"
			found_needed_item = true
		end
		if UserVars.cobblingsack2 && found_needed_item.nil?
			result = dothistimeout "tap my #{script.vars[1]} in my #{UserVars.cobblingsack2}", 10, /You tap|What were you referring to|You tap your foot impatiently\./i
			if result =~ /What were you referring to|You tap your foot impatiently\./i
				echo "Couldn't find any #{script.vars[1]}s in your cobbling sacks, buying materials from NPC."
			elsif result =~ /You tap/i
				hide_or_skin = "#{script.vars[1]}"
			end
		else
			echo "Couldn't find any #{script.vars[1]}s in your cobbling sack, buying materials from NPC."
		end
	end
}

check_form = proc{
	pattern_book_number = 1
	inside_workshop_check.call
	skill_level_stuff.call
	if trash_container_name.nil?
		trash_container_name = GameObj.loot.find{ |item| item.name =~ /crate|barrel|wastebarrel|casket|bin|receptacle|basket/ }
		trash_container_name = GameObj.room_desc.find{ |item| item.name =~ /crate|barrel|wastebarrel|casket|bin|receptacle|basket/ } if trash_container_name.nil?
	end
	fput "put my shoes in #{trash_container_name}" if checkleft == "shoes" or checkright == "shoes"
	fput "put my boots in #{trash_container_name}" if checkleft == "boots" or checkright == "boots"
	fput "put my slippers in #{trash_container_name}" if checkleft == "slippers" or checkright == "slippers"
	fput "put my sandals in #{trash_container_name}" if checkleft == "sandals" or checkright == "sandals"
	result = dothistimeout "look on form", 10, /(hide|skin|pelt|canvas|oilcloth|shoes|boots|slippers|sandals)|There is nothing/i
	if result =~ /(hide|skin|pelt|canvas|oilcloth|shoes|boots|slippers|sandals)/i
		start_form.call
	elsif result =~ /There is nothing/i
		(current_part = hide_or_skin;stow_cobbling_supplies.call;begin_work.call)
	elsif result.nil?
		(current_proc = "check_form";error_message_instructions.call)
	end
}

if (UserVars.cobblingsack.nil? or UserVars.cobblingsack.empty?)
	_respond "Must set your cobbling sack, this is where ALL of your cobbling supplies will be found. Do not remove cobbling supplies out of this container."
	_respond "Type ;vars set cobblingsack=<container name> to set your cobbling sack."
	_respond "For example type ;vars set cobblingsack=pack"
	_respond "You can also set a second container by doing ;vars set cobblingsack2=<container name>"
	_respond "This second container will only look for leathers, skins, and hides in this container."
	exit
end
if (UserVars.cobblingtown.nil? or UserVars.cobblingtown.empty?)
	_respond "Must set the town you will be doing cobbling in."
	_respond "Type ;vars set cobblingtown=<town> to set your town."
	_respond "landing for Landing"
	_respond "zul for Zul Logoth"
	_respond "cys for Cysaegir"
	_respond "fwi for FWI"
	_respond "For example type ;vars set cobblingtown=landing"
	exit
end
if (UserVars.cobblingrest.nil? or UserVars.cobblingrest.empty?)
	_respond "If your mind is fried do you want the script to rest until your mind becomes clear before it continues with cobbling?"
	_respond "Type ;vars set cobblingrest=<yes|no>"
	_respond "For example type ;vars set cobblingrest=yes"
	exit
end
if (UserVars.cobblingrestroom.nil? or UserVars.cobblingrestroom.empty?) and UserVars.cobblingrest == "yes"
	_respond "Enter the room number where you want to rest."
	_respond "Type ;vars set cobblingrestroom=<room number>"
	_respond "For example type ;vars set cobblingrestroom=238"
	_respond "Also type ;vars set cobblingrestcommand=<command> if you need a prerest command, for example go table if your rest room is outside of tables and you want to rest at a table."
	_respond "For example type ;vars set cobblingrestcommand=go table"
	_respond "Do not set cobblingrestcommand if you don't need a prerest command."
	exit
end
unless UserVars.cobblingbook
	_respond "Must set your cobbling patterns book, just enter the word you interact book with (example book or patterns.) Enter patterns if you're going to be using the book the cobbling NPC sells."
	_respond "Type ;vars set cobblingbook=<name of book>"
	_respond "For example type ;vars set cobblingbook=patterns"
	exit
end
if script.vars[1] == "help"
	_respond "Simply type ;cobble and let this script do the rest. Typing ;cobble <pelt|hide|skin|etc> uses your own pelts found in your cobbling sack before attempting to buy materials from NPC."
	_respond "To change your cobbling sack type ;vars delete cobblingsack then run this script again for instructions."
	_respond "To change your town type ;vars delete cobblingtown then run this script again for instructions."
	exit
end
landing_information.call if UserVars.cobblingtown == "landing"
zul_information.call if UserVars.cobblingtown == "zul"
cys_information.call if UserVars.cobblingtown == "cys"
fwi_information.call if UserVars.cobblingtown == "fwi"
teras_information.call if UserVars.cobblingtown == "teras"
if UserVars.cobblingtown != "landing" and UserVars.cobblingtown != "zul" and UserVars.cobblingtown != "cys" and UserVars.cobblingtown != "fwi" and UserVars.cobblingtown != "teras"
	_respond "Wrong value entered for cobblingtown."
	_respond "Type ;vars set cobblingtown <town> to set your town."
	_respond "landing for Landing"
	_respond "zul for Zul Logoth"
	_respond "cys for Cysaegir"
	_respond "fwi for FWI"
	_respond "teras for Teras"
	_respond "For example type ;vars set cobblingtown=landing"
	exit
end
if UserVars.cobblingrest != "yes" and UserVars.cobblingrest != "no"
	_respond "Wrong value entered for cobblingrest."
	_respond "Type ;vars delete cobblingrest to remove current setting then run this script again."
	exit
end
(leave_room_check.call;fput "open my #{UserVars.cobblingsack}";stow_cobbling_supplies.call;check_guild_status.call;check_for_pattern_book.call;check_for_cutting_knife.call;check_for_cord.call;check_for_chalk.call;check_rent_status.call)