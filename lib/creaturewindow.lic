=begin
  This script creates a dedicated window to display creature information
  and their statuses in real time.
  Features:
  - Continuously updates with current creatures in the room.
  - Displays statuses (stunned, calmed, frozen, held, prone) in a standardized format.
  - Automatically removes creatures that leave.
  - Your TARGET is denoted by * CREATURE *.
  - Uses consistent window formatting.
  - Incorporated killtracker script for Gemstones system.  All credit to Alastir and Nisugi.
  - ;send gemstones Will turn this output off or on but the data is always tracked in the background.
  
author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, creature, mob 
  
=end

hide_me

# Open the creature window using Wrayth's dynamic dialog.
puts("<closeDialog id='CreatureWindow'/><openDialog type='dynamic' id='CreatureWindow' title='Creatures' target='CreatureWindow' scroll='manual' location='main' justify='3' height='120' resident='true'><dialogData id='CreatureWindow'></dialogData></openDialog>")

@last_targets = []
CMD_QUEUE = Queue.new

# Standardize status names.
def status_fix(status)
  case status
  when /calmed/i  then "calmed"
  when /frozen|immobilized|terrified/i  then "frozen"
  when /held/i  then "held"
  when /prone|lying down|knocked to the ground/i then "prone"
  when /rooted/i then "rooted"
  when /stunned/i then "stunned"
  when /unconscious|slumber|sleeping/i then "unconscious"
  when /webbed|webbing/i then "webbed"
  else nil
  end
end

require 'yaml'

@filename = File.join(DATA_DIR, XMLData.game, Char.name, "Killtracker.yaml")
game_dir = File.join(DATA_DIR, XMLData.game)
char_dir = File.join(game_dir, Char.name)
Dir.mkdir(game_dir) unless File.exist?(game_dir)
Dir.mkdir(char_dir) unless File.exist?(char_dir)

if File.exist?(@filename)
  $killtracker = YAML.load_file(@filename) || {}
else
  $killtracker = {}
end

# Ensure required keys exist
$killtracker[:jewel_found] ||= {}
$killtracker[:dust_found] ||= {}
$killtracker[:searches_since_jewel] ||= 0
$killtracker[:searches_since_dust] ||= 0
$killtracker[:total_searches] ||= 0
$killtracker[:display_killtracker] ||= false  # Default: OFF

# Save killtracker data to YAML
def save_killtracker_data
  File.write(@filename, $killtracker.to_yaml)
end

# Function to get killtracker stats.
def get_killtracker_stats
  total_kills = $killtracker[:total_searches]
  kills_since_jewel = $killtracker[:searches_since_jewel]
  kills_since_dust = $killtracker[:searches_since_dust]
  "Total Kills: #{total_kills} | Since Jewel: #{kills_since_jewel} | Since Dust: #{kills_since_dust}"
end

# Build and push the creature list to the window.
def push_creatures_to_window(targets)
  curr_target_id = XMLData.current_target_id
  output = "<dialogData id='CreatureWindow' clear='t'>"

  # Display Killtracker Stats (only if enabled)
  if $killtracker[:display_killtracker]
    killtracker_stats = get_killtracker_stats
    output += "<label id='killtracker' value='#{killtracker_stats}' justify='center' top='0' />"
  end

  output += "<label id='total' value='Creatures: #{targets.size}' top='#{ $killtracker[:display_killtracker] ? '25' : '0' }' />"

  targets.each_with_index do |t, index|
    status = t.status ? status_fix(t.status) : nil
    label_value = status ? "#{t.name} (#{status})" : t.name

    # Highlight the currently targeted creature in **bold**
    label_value = "**#{label_value}**" if t.id == curr_target_id

    output += "<link id='creature_#{index}' value='#{label_value}' cmd='target ##{t.id}' echo='target ##{t.id}' justify='bottom' left='0' top='#{45 + (20 * index)}' />"
  end

  output += "</dialogData>"
  puts(output)
end

# Killtracker event listener
downstream_proc = proc do |server_string|
  case server_string
  when %r{<pushBold/> \*\* A glint of light catches your eye, and you notice a <a exist="\d+" noun="\w+">([^<]+)</a> at your feet! \*\*}
    key = Time.now.to_i.to_s
    $killtracker[:jewel_found][key] = { searches: $killtracker[:searches_since_jewel], name: $1 }
    $killtracker[:searches_since_jewel] = 0
    save_killtracker_data
    CMD_QUEUE.push("update_window")

  when %r{<pushBold/>You notice a scintillating mote of gemstone dust on the ground and gather it quickly.}
    key = Time.now.to_i.to_s
    $killtracker[:dust_found][key] = { searches: $killtracker[:searches_since_dust] }
    $killtracker[:searches_since_dust] = 0
    save_killtracker_data
    CMD_QUEUE.push("update_window")

  when %r{You search the <pushBold/><a exist="\d+" noun="[^"]+">([^<]+)</a><popBold/>.}
    name = $1
    if name =~ /armored battle mastodon|black valravn|boreal undansormr|crimson angargeist|fork-tongued wendigo|giant warg|gigas berserker|gigas disciple|gigas shield-maiden|gigas skald|gold-bristled hinterboar|gorefrost golem|halfling bloodspeaker|halfling cannibal|reptilian mutant|sanguine ooze|shadow-cloaked draugr|winged disir|basalt grotesque|death knight|mist-wreathed banshee|patrician vampire|phantasmic conjurer|skeletal dreadsteed|tatterdemalion ghast|hive thrall|kiramon broodtender|kiramon myrmidon|kiramon stalker|kiramon standweaver|kresh ravager/
      $killtracker[:total_searches] += 1
      $killtracker[:searches_since_jewel] += 1
      $killtracker[:searches_since_dust] += 1
      save_killtracker_data
      CMD_QUEUE.push("update_window")
    end
  end
  server_string
end

DOWNSTREAM_HOOK_ID = "creaturewindow::downstream"
DownstreamHook.add(DOWNSTREAM_HOOK_ID, downstream_proc)

UPSTREAM_HOOK_ID = "creaturewindow::upstream"
UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
  case command
  when /gemstones/i
    $killtracker[:display_killtracker] = !$killtracker[:display_killtracker]  # Toggle setting
    save_killtracker_data
    CMD_QUEUE.push("update_window")
    echo "Killtracker display: #{ $killtracker[:display_killtracker] ? 'ON' : 'OFF' }"
    nil  # Prevents the command from being sent to the server
  else
    command
  end
end)

# Main update loop.
loop do
  current_targets = GameObj.targets.reject { |t| t.name =~ /animated slush/i }
  if current_targets != @last_targets
    @last_targets = current_targets
    push_creatures_to_window(current_targets)
  end

  # Process Killtracker queue
  unless CMD_QUEUE.empty?
    command = CMD_QUEUE.pop
    case command
    when "update_window"
      push_creatures_to_window(@last_targets)
    end
  end

  sleep 0.025
end

before_dying { DownstreamHook.remove(DOWNSTREAM_HOOK_ID); UpstreamHook.remove(UPSTREAM_HOOK_ID); save_killtracker_data }

echo "Creature Window with Killtracker is active."
