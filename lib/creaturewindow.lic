=begin
  This script creates a dedicated window to display creature information
  and their statuses in real time.
  Features:
  - Continuously updates with current creatures in the room.
  - Displays statuses (stunned, calmed, frozen, held, prone) in a standardized format.
  - Automatically removes creatures that leave.
  - Your TARGET is denoted by ** CREATURE **.
  - Tracks Avg TTK (Time to Kill) and Last TTK.
  - If killtracker.lic is running it displays output relating to ascension searches, weekly ascension searches, searches since jewel, and searches since dust. (Thanks Nisugi!)

  Commands:
  ttk avg
  ttk last

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, creature, mob
=end

hide_me

puts("<closeDialog id='CreatureWindow'/><openDialog type='dynamic' id='CreatureWindow' title='Creatures' target='CreatureWindow' scroll='manual' location='main' justify='3' height='120' resident='true'><dialogData id='CreatureWindow'></dialogData></openDialog>")

@last_targets = []
@creature_timestamps = {}
@creature_status_changed = {}
@time_to_kill_list = []
@creature_targeted = {}

CMD_QUEUE = Queue.new

@display_avg_ttk = true
@display_last_ttk = true

def status_fix(status)
  case status
  when /calmed/i then "calmed"
  when /frozen|immobilized|terrified/i then "frozen"
  when /held/i then "held"
  when /prone|lying down|knocked to the ground/i then "prone"
  when /rooted/i then "rooted"
  when /stunned/i then "stunned"
  when /unconscious|slumber|sleeping/i then "unconscious"
  when /webbed|webbing/i then "webbed"
  else nil
  end
end

def calculate_avg_ttk
  return "N/A" if @time_to_kill_list.empty?
  avg_ttk = @time_to_kill_list.sum / @time_to_kill_list.size
  format("%.2f sec", avg_ttk)
end

def track_creature_exit(creature_id, creature_name)
  return unless @creature_timestamps[creature_id]
  return unless @creature_targeted[creature_id]

  time_alive = Time.now - @creature_timestamps[creature_id]
  @time_to_kill_list << time_alive

  @last_kill_time = time_alive
  @last_kill_name = creature_name

  @creature_timestamps.delete(creature_id)
  @creature_targeted.delete(creature_id)
end

def get_killtracker_ascsearchstats
  asc = $killtracker[:ascension_searches]
  weekly = $killtracker[:weekly_ascension_searches]
  return nil unless asc && weekly
  "Total ASC Searches: #{asc} | Weekly ASC Searches: #{weekly}"
end

def get_killtracker_jewelduststats
  jewel = $killtracker[:searches_since_jewel]
  dust = $killtracker[:searches_since_dust]
  return nil unless jewel && dust
  "Since Jewel: #{jewel} | Since Dust: #{dust}"
end

def push_creatures_to_window(targets)
  curr_target_id = XMLData.current_target_id
  output = "<dialogData id='CreatureWindow' clear='t' >"

  current_top = 0

  if @display_avg_ttk
    avg_ttk_display = calculate_avg_ttk
    output += "<label id='ttk' value='Avg TTK: #{avg_ttk_display}' justify='left' left='0' top='#{current_top}' />"
    current_top += 25
  end

  if @display_last_ttk && @last_kill_time && @last_kill_name
    last_ttk_display = format("%.2f sec", @last_kill_time)
    output += "<label id='last_ttk' value='Last TTK: #{last_ttk_display} (#{@last_kill_name})' justify='left' left='0' top='#{current_top}' />"
    current_top += 25
  end

  if Script.running?("killtracker") && defined?($killtracker) && $killtracker.is_a?(Hash)
    killtracker_ascsearchstats = get_killtracker_ascsearchstats
	
if (line = get_killtracker_ascsearchstats)
  output += "<label id='kt_asc' value='#{line}' justify='left' left='0' top='#{current_top}' />"
  current_top += 25
end

if (line = get_killtracker_jewelduststats)
  output += "<label id='kt_drops' value='#{line}' justify='left' left='0' top='#{current_top}' />"
  current_top += 25
end

  end

  output += "<label id='total' value='Creatures: #{targets.size}' justify='left' left='0' top='#{current_top}' />"
  current_top += 25

  targets.each_with_index do |t, index|
    status = t.status ? status_fix(t.status) : nil
    label_value = status ? "#{t.name} (#{status})" : t.name

    if t.id == curr_target_id
      label_value = "**#{label_value}**"
      unless @creature_targeted[t.id]
        @creature_timestamps[t.id] = Time.now
        @creature_targeted[t.id] = true
      end
    end

    output += "<link id='creature_#{index}' value='#{label_value}' cmd='target ##{t.id}' echo='target ##{t.id}' justify='bottom' left='0' top='#{current_top + (20 * index)}' />"
  end

  current_ids = targets.map(&:id)
  (@creature_timestamps.keys - current_ids).each do |missing_id|
    creature_name = GameObj.npcs.find { |npc| npc.id == missing_id }&.name || "Unknown"
    track_creature_exit(missing_id, creature_name)
  end

  output += "</dialogData>"
  puts(output)
end

UPSTREAM_HOOK_ID = "creaturewindow::upstream"
UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
  case command
  when /ttk avg/i
    @display_avg_ttk = !@display_avg_ttk
    CMD_QUEUE.push("update_window")
    echo "Average TTK display: #{ @display_avg_ttk ? 'ON' : 'OFF' }"
    nil

  when /ttk last/i
    @display_last_ttk = !@display_last_ttk
    CMD_QUEUE.push("update_window")
    echo "Last TTK display: #{ @display_last_ttk ? 'ON' : 'OFF' }"
    nil

  else
    command
  end
end)

loop do
  current_targets = GameObj.targets
  if current_targets != @last_targets
    @last_targets = current_targets
    push_creatures_to_window(current_targets)
  end

  unless CMD_QUEUE.empty?
    command = CMD_QUEUE.pop
    push_creatures_to_window(@last_targets) if command == "update_window"
  end

  sleep 0.025
end

before_dying do
  UpstreamHook.remove(UPSTREAM_HOOK_ID)
end

echo "Creature Window with Avg/Last TTK and killtracker display (if running) is active."
