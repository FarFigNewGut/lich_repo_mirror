=begin
  This script creates a dedicated window to display creature information
  and their statuses in real time.
  Features:
  - Continuously updates with current creatures in the room.
  - Displays statuses (stunned, calmed, frozen, held, prone) in a standardized format.
  - Automatically removes creatures that leave.
  - Your TARGET is denoted by ** CREATURE **.
  - Uses consistent window formatting.
  - Incorporated killtracker script for Gemstones system.  All credit to Alastir and Nisugi.
  - ;send gemstones Will turn this output off or on but the data is always tracked in the background.
  - Tracks Avg TTK (Time to Kill) and Last TTK.
  
  Avg TTK calculation explained:
  1. Start Tracking: When you first target a creature, the current timestamp is recorded, marking the start of TTK tracking for that creature.
  2. Stop Tracking: When the creature is no longer displayed in the creature window, the timestamp is recorded as the kill time.
  3. Calculate Individual TTK: Subtract the creatures initial timestamp from the kill timestamp to determine the total TTK for that specific creature.
  4. Record Each Kill: Store the calculated TTK for every individual kill into an ongoing list.
  5. Calculate Avg TTK: Calculate the average by summing all recorded TTK values and dividing by the total number of kills recorded.
  6. Display Avg TTK: Continuously update and display the calculated Avg TTK in the creature window.

  Commands:
  ;send gemstones (Turn gemstone output on and off)
  ;send summary
  ;send jewel
  ;send dust
  ;send avg
  ;send last

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, creature, mob 
=end

hide_me

puts("<closeDialog id='CreatureWindow'/><openDialog type='dynamic' id='CreatureWindow' title='Creatures' target='CreatureWindow' scroll='manual' location='main' justify='3' height='120' resident='true'><dialogData id='CreatureWindow'></dialogData></openDialog>")

require 'yaml'

@last_targets = []
@creature_timestamps = {}        # Creature first seen timestamps
@creature_status_changed = {}    # Tracks status changes
@time_to_kill_list = []          # List of TTK times
@creature_targeted = {} # Tracks if a creature was targeted yet

CMD_QUEUE = Queue.new

def status_fix(status)
  case status
  when /calmed/i then "calmed"
  when /frozen|immobilized|terrified/i then "frozen"
  when /held/i then "held"
  when /prone|lying down|knocked to the ground/i then "prone"
  when /rooted/i then "rooted"
  when /stunned/i then "stunned"
  when /unconscious|slumber|sleeping/i then "unconscious"
  when /webbed|webbing/i then "webbed"
  else nil
  end
end

@filename = File.join(DATA_DIR, XMLData.game, Char.name, "Killtracker.yaml")
game_dir = File.join(DATA_DIR, XMLData.game)
char_dir = File.join(game_dir, Char.name)
Dir.mkdir(game_dir) unless File.exist?(game_dir)
Dir.mkdir(char_dir) unless File.exist?(char_dir)

if File.exist?(@filename)
  $killtracker = YAML.load_file(@filename) || {}
else
  $killtracker = {}
end

$killtracker[:display_killtracker] ||= false
$killtracker[:display_avg_ttk] ||= true
$killtracker[:display_last_ttk] ||= true

def save_killtracker_data
  File.write(@filename, $killtracker.to_yaml)
end

def get_killtracker_stats
  total_kills = $killtracker[:total_searches] || 0
  kills_since_jewel = $killtracker[:searches_since_jewel] || 0
  kills_since_dust = $killtracker[:searches_since_dust] || 0
  "Total Kills: #{total_kills} | Since Jewel: #{kills_since_jewel} | Since Dust: #{kills_since_dust}"
end

def calculate_avg_ttk
  return "N/A" if @time_to_kill_list.empty?
  avg_ttk = @time_to_kill_list.sum / @time_to_kill_list.size
  format("%.2f sec", avg_ttk)
end

def track_creature_exit(creature_id, creature_name)
  return unless @creature_timestamps[creature_id]
  return unless @creature_targeted[creature_id]

  time_alive = Time.now - @creature_timestamps[creature_id]

  @time_to_kill_list << time_alive

  # Update last kill details
  @last_kill_time = time_alive
  @last_kill_name = creature_name

  @creature_timestamps.delete(creature_id)
  @creature_targeted.delete(creature_id)
end

def push_creatures_to_window(targets)
  curr_target_id = XMLData.current_target_id
  output = "<dialogData id='CreatureWindow' clear='t'>"

  current_top = 0

  # Avg TTK Display
  if $killtracker.fetch(:display_avg_ttk, true)
    avg_ttk_display = calculate_avg_ttk
    output += "<label id='ttk' value='Avg TTK: #{avg_ttk_display}' justify='left' left='0' top='#{current_top}' />"
    current_top += 25
  end

  # Last TTK Display
  if $killtracker.fetch(:display_last_ttk, true) && @last_kill_time && @last_kill_name
    last_ttk_display = format("%.2f sec", @last_kill_time)
    output += "<label id='last_ttk' value='Last TTK: #{last_ttk_display} (#{@last_kill_name})' justify='left' left='0' top='#{current_top}' />"
    current_top += 25
  end

  # Killtracker Display
  if $killtracker[:display_killtracker]
    killtracker_stats = get_killtracker_stats
    output += "<label id='killtracker' value='#{killtracker_stats}' justify='left' left='0' top='#{current_top}' />"
    current_top += 25
  end

  # Creature count (always displayed)
  output += "<label id='total' value='Creatures: #{targets.size}' justify='left' left='0' top='#{current_top}' />"
  current_top += 25  # Always increment after this label to correctly position the first creature

  # Now list creatures correctly spaced below all enabled labels
  targets.each_with_index do |t, index|
    status = t.status ? status_fix(t.status) : nil
    label_value = status ? "#{t.name} (#{status})" : t.name

    if t.id == curr_target_id
      label_value = "**#{label_value}**"
      unless @creature_targeted[t.id]
        @creature_timestamps[t.id] = Time.now
        @creature_targeted[t.id] = true
      end
    end

    output += "<link id='creature_#{index}' value='#{label_value}' cmd='target ##{t.id}' echo='target ##{t.id}' justify='bottom' left='0' top='#{current_top + (20 * index)}' />"
  end

  current_ids = targets.map(&:id)
  (@creature_timestamps.keys - current_ids).each do |missing_id|
    creature_name = GameObj.npcs.find { |npc| npc.id == missing_id }&.name || "Unknown"
    track_creature_exit(missing_id, creature_name)
  end

  output += "</dialogData>"
  puts(output)
end


downstream_proc = proc do |server_string|
  case server_string
  when %r{<pushBold/> \*\* A glint.*<a exist="\d+" noun="\w+">([^<]+)</a>.*feet! \*\*}
    key = Time.now.to_i.to_s
    $killtracker[:jewel_found][key] = { searches: $killtracker[:searches_since_jewel], name: $1 }
    $killtracker[:searches_since_jewel] = 0
    save_killtracker_data
    CMD_QUEUE.push("update_window")
  when %r{<pushBold/>You notice.*gemstone dust.*}
    key = Time.now.to_i.to_s
    $killtracker[:dust_found][key] = { searches: $killtracker[:searches_since_dust] }
    $killtracker[:searches_since_dust] = 0
    save_killtracker_data
    CMD_QUEUE.push("update_window")
  when %r{You search.*<a exist="\d+" noun="[^"]+">([^<]+)</a>.*}
    if $1 =~ /armored battle mastodon|valravn|undansormr|angargeist|wendigo|warg|berserker|disciple|shield-maiden|skald|hinterboar|golem|bloodspeaker|cannibal|mutant|ooze|draugr|disir|grotesque|knight|banshee|vampire|conjurer|dreadsteed|ghast|thrall|kiramon|ravager/
      $killtracker[:total_searches] += 1
      $killtracker[:searches_since_jewel] += 1
      $killtracker[:searches_since_dust] += 1
      save_killtracker_data
      CMD_QUEUE.push("update_window")
    end
  end
  server_string
end

  def self.summary_report
    total_searches = $killtracker[:total_searches] || 0
  
    jewel_events = $killtracker[:jewel_found] || {}
    dust_events  = $killtracker[:dust_found]  || {}
  
    total_jewels = jewel_events.size
    total_dust   = dust_events.size
  
    # Extract the number of searches from each event in the hash values
    jewel_search_counts = jewel_events.values.map { |event| event[:searches].to_i }
    dust_search_counts  = dust_events.values.map  { |event| event[:searches].to_i }
  
    avg_jewel = total_jewels > 0 ? jewel_search_counts.sum.to_f / total_jewels : 0
    avg_dust  = total_dust   > 0 ? dust_search_counts.sum.to_f  / total_dust   : 0
  
    respond "=== Summary Report ==="
    respond "Total Searches: #{total_searches}"
    respond "Total Jewels Found: #{total_jewels}"
    respond "Searches since last Jewel: #{$killtracker[:searches_since_jewel]}"
    respond "Average Searches per Jewel: #{avg_jewel.round(2)}"
    respond "Total Dust Found: #{total_dust}"
    respond "Searches since last Dust:  #{$killtracker[:searches_since_dust]}"
    respond "Average Searches per Dust: #{avg_dust.round(2)}"    
    respond ""
  end

  def self.detailed_jewel_report
    jewel_events = $killtracker[:jewel_found] || {}
    # Sort keys (timestamps) in chronological order
    sorted_keys = jewel_events.keys.sort_by(&:to_i)
  
    respond "=== Detailed Jewel Event Log ==="
    sorted_keys.each do |key|
      event = jewel_events[key]
      time = Time.at(key.to_i)
      formatted_time = time.strftime("%m/%d/%Y - %H:%M:%S")
      respond "Time: #{formatted_time} | Searches: #{event[:searches]} | Name: #{event[:name]}"
    end
    respond ""
  end

  def self.detailed_dust_report
    dust_events = $killtracker[:dust_found] || {}
    sorted_keys = dust_events.keys.sort_by(&:to_i)

    respond "=== Detailed Dust Event Log ==="
    sorted_keys.each do |key|
      event = dust_events[key]
      time = Time.at(key.to_i)
      formatted_time = time.strftime("%m/%d/%Y - %H:%M:%S")
      respond "Time: #{formatted_time} | Searches: #{event[:searches]}"
    end
    respond ""
  end

DOWNSTREAM_HOOK_ID = "creaturewindow::downstream"
DownstreamHook.add(DOWNSTREAM_HOOK_ID, downstream_proc)

UPSTREAM_HOOK_ID = "creaturewindow::upstream"
UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
  case command
  when /gemstones/i
    $killtracker[:display_killtracker] = !$killtracker[:display_killtracker]
    save_killtracker_data
    CMD_QUEUE.push("update_window")
    echo "Killtracker display: #{ $killtracker[:display_killtracker] ? 'ON' : 'OFF' }"
    nil

  when /avg/i
    $killtracker[:display_avg_ttk] = !$killtracker.fetch(:display_avg_ttk, true)
    save_killtracker_data
    CMD_QUEUE.push("update_window")
    echo "Average TTK display: #{ $killtracker[:display_avg_ttk] ? 'ON' : 'OFF' }"
    nil

  when /last/i
    $killtracker[:display_last_ttk] = !$killtracker.fetch(:display_last_ttk, true)
    save_killtracker_data
    CMD_QUEUE.push("update_window")
    echo "Last TTK display: #{ $killtracker[:display_last_ttk] ? 'ON' : 'OFF' }"
    nil

  when /summary/
    summary_report
    nil

  when /jewel/
    detailed_jewel_report
    nil

  when /dust/
    detailed_dust_report
    nil

  else
    command
  end
end)

loop do
  current_targets = GameObj.targets.reject { |t| t.name =~ /animated slush/i }
  if current_targets != @last_targets
    @last_targets = current_targets
    push_creatures_to_window(current_targets)
  end
  unless CMD_QUEUE.empty?
    command = CMD_QUEUE.pop
    push_creatures_to_window(@last_targets) if command == "update_window"
  end
  sleep 0.025
end

before_dying do
  DownstreamHook.remove(DOWNSTREAM_HOOK_ID)
  UpstreamHook.remove(UPSTREAM_HOOK_ID)
  save_killtracker_data
end

echo "Creature Window with Killtracker and Avg TTK is active."
