=begin

	author: Vailan
	tags: character,weight,bigshot
	version: 2024.04.28.01
	
	The purpose of this utility came about when hunting in bonespear and resting my brain in the vault but occasionally I would need to
	unload the boxes and such i found. I'd have to manually run to Solhaven, put my boxes in the pool and get old ones back and then sell
	the loot and deposit the silvers and then run back and it was very tedious.
	
	Can work Stand alone but my intended use was within bigshot so that i would only run back into town when i truly needed to unload not
	just rest and recover my brain and mana.
	
	This is currently coded to leverage ;eloot pool, ;sortgems and ;eloot sell and will assume when going from origin to the staging site specified 
	that you will get out weapon and shield using ready weapon and remove my shield. It supports Sonic verieties of those as well and will keep them from being
	resung while running even if using ;song-manager 
	
	Syntax:
		;overloaded [room name/number]
			-- will leave your original room, run to the indicated run your commands and then return to the indicated room and then return to your original room
		
		;overloaded [room name/number] [0-100]
			-- same as above but will override the default encumberance threshhold to the number specified (30 would translate to 30% encumberance)
			
		;overloaded [room name/number] force
			-- same as above but will do it regardless of encumberance level
				
		;overloaded
			-- will do the same as above but the indicated room will be the room you are currently in (in this manner at just acts like grouping the commands)
		
		;overloaded help
			-- will show the help information
			
		;overloaded set [action#] [script]
			-- will save the command for the script associated with the action
			
	
	Check out ;overloaded help
	
	2023.05.07		- Draft Edition of Overloaded
	2024.01.17    - Added support for Sonic Weapons and Shield while running eloot to empty hands and added support for disbanding 
	                group and then regetting members from original location
  2024.04.28    - Fixed a mistake in removing shield where it was explicitely calling "rem my shield" rather than "ready shield"
	
	
	TODO:
	Tokenize parameters to allow saving settings
	Better group support and parameterization (Am i leader or am i follower) do i just take group with me, etc
	Add support for what tools to run and the order to run them
	
=end

#Get Room to Return To When Done (Where am I now?)


def turnoffsonics
	
	shieldactive = Spell["1009"].active?
	currentlyusingsonicshield = UserVars.song_manager["1009"]
	UserVars.song_manager["1009"] = nil
	if shieldactive
		echo "Turning off using shield of #{currentlyusingsonicshield}"
	end
	weaponactive = Spell["1012"].active?
	currentlyusingsonicweapon = UserVars.song_manager["1012"]
	if weaponactive
		echo "Turning off using shield of #{currentlyusingsonicweapon}"
	end
	UserVars.song_manager["1012"] = nil
	
	if shieldactive
		fput "stop 1009"
	end
	if weaponactive
		fput "stop 1012"
	end
	
	return shieldactive,currentlyusingsonicshield,weaponactive,currentlyusingsonicweapon
end

def turnonsonics(shieldactive,shieldtype,weaponactive,weapontype)
	echo "on shieldactive=#{shieldactive}"
	echo "on shieldtype=#{shieldtype}"
	echo "on weaponactive=#{weaponactive}"
	echo "on weapontype=#{weapontype}"
	
	if shieldactive and shieldtype != nil and shieldtype != ""
		UserVars.song_manager["1009"] = shieldtype
		fput "incant 1009 #{shieldtype}"
	end
	
	if weaponactive and weapontype != nil and weapontype != ""
		UserVars.song_manager["1012"] = weapontype
		fput "incant 1012 #{weapontype}"
	end
	
	
end

 def run_script(name, pause_overloaded = false, args = [])
    
    if Script.running.find { |s| s.name.downcase == name.downcase }.paused or running? name
      stop_script name
      wait_while { running? name }
    end

    start_script name, args
    if pause_overloaded
      wait_until { !running? name }
    end
  end

def regroupMe
  #this chunk of code taken from eCure
  done = false
  healtargets = Array.new
  groupRole = ""
  action = proc { |server_string|
    if /You are (?:leading|grouped with) (.*)\./i =~ server_string
    	if /You are (?:leading) (.*)\./i =~ server_string
    		groupRole = "Leading"
    	else 
    		groupRole = "Following"
    	end
    	
      healtargets = $1.split(/,(?:\s+and)?| and /).map { |x| x.gsub(/who is \w+|\(\w+\)|<a exist="-\d+" noun="\w+">|<\/a>/, '').strip }
      nil
    elsif /Your group status is currently/ =~ server_string
      nil
    elsif /You are not currently in a group/ =~ server_string
      nil
    elsif /<prompt/ =~ server_string
      nil
    elsif /GROUP HELP/ =~ server_string
      done = true
      DownstreamHook.remove('Group_hook')
      nil
    else
      server_string
    end
  }

  DownstreamHook.add('Group_hook', action)
  silence_me unless (undo_silence = silence_me)
  fput 'group'
  silence_me if undo_silence
  wait_until { done }
  return healtargets
end


def unloadme(originRoom,stagingRoom)
	
	echo "Starting at #{originRoom}"
	#If we are part of a group then lets leave them here, go do our thing and then comback and reform the group
	groupMembers = regroupMe()
	fput "disband"
	fput "group open"
	
	 
	
	#set temp destination room but will get updated by CLI Parameter potentially
	if stagingRoom != nil
		rallyRoom = stagingRoom
	else 
		rallyRoom = originRoom
	end
	###########################################################
		#This section goes to your staging point for doing stuff
	###########################################################
	#be armed and shielded when travelling
	fput "ready weapon"
	fput "ready shield"
	
	#Go2 the room where you want to offload from
	echo "Going to #{rallyRoom}"
	Script.run("go2", rallyRoom)
	#run_script('go2', true, [rallyRoom, '_disable_confirm_'])
	
	#turn off sonics
	sonicinfo = turnoffsonics()
	shieldactive = sonicinfo[0]
	currentlyusingsonicshield = sonicinfo[1]
	weaponactive = sonicinfo[2]
	currentlyusingsonicweapon = sonicinfo[3]
	echo "off shieldactive=#{shieldactive}"
	echo "off shieldtype=#{currentlyusingsonicshield}"
	echo "off weaponactive=#{weaponactive}"
	echo "off weapontype=#{currentlyusingsonicweapon}"
	#Put stuff away when you arrive at rally point
	if checkright != nil
		fput "store weapon"
	end
	if checkleft != nil
		fput "store shield"
	end
	
	#held in right
	righthanditem = checkright
	if righthanditem != nil
		empty_right_hand
	end
	
	
	#held in left
	lefthanditem = checkleft
	if lefthanditem != nil
		empty_left_hand
	end
	
	
	
	###########################################################
	#This section covers actually running the scripts to get you unencumbered
	###########################################################
	#run offloadingscripts
	Script.run("eloot", "pool")
	Script.run("sortgems")
	Script.run("eloot", "sell")
	
	
	
	###########################################################
	#This section covers returning to the staging point once scripts are done
	###########################################################
	Script.run("go2", rallyRoom)
	
  #run_script('go2', true, [rallyRoom, '_disable_confirm_'])
  
	
	###########################################################
	#This section return to your origin
	###########################################################
	#get weapon back out to cross the wilds potentially
	#turn back on sinics if applicable
	#return shieldactive,currentlyusingsonicshield,weaponactive,currentlyusingsonicweapon
	turnonsonics(shieldactive,currentlyusingsonicshield,weaponactive,currentlyusingsonicweapon)
	
	
	#held in right
	
	if righthanditem != nil and righthanditem != checkright
		fput "get #{righthanditem}"
	end
	
	
	#held in left
	
	if lefthanditem != nil and lefthanditem != checkleft
		fput "get #{lefthanditem}"
	end
	if righthanditem != nil
		fput "ready weapon"
	end
	if lefthanditem != nil
		fput "ready shield"
	end
	
	#return to original resting room
	echo "returning to #{originRoom}"
	Script.run("go2", originRoom.to_s)
	#run_script('go2', true, [originRoom, '_disable_confirm_'])
  
	fput "store weapon"
	fput "store shield"

	#rejoin the group members
	groupMembers.each{|groupMember|
	fput "hold #{groupMember}"
		
		
		
	}
	
	
	
	
end

def showHelp
	puts "<output class=\"mono\"/>#{monsterbold_start}#{"Overloaded Help"}#{monsterbold_end}\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>	Syntax:\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>		;overloaded [room name/number]\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>			-- if you are over the default 70% or your specified limit, it will leave your original room, run to the indicated run your commands and then return to the indicated room and then return to your original room\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/> \r\n<output class=\"\"/>"		
	puts "<output class=\"mono\"/>		;overloaded [room name/number] [percent]\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>			-- if you are over the specified limit (numbers only), it will leave your original room, run to the indicated run your commands and then return to the indicated room and then return to your original room\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/> \r\n<output class=\"\"/>"		
	puts "<output class=\"mono\"/>		;overloaded [room name/number] [percent] [force]\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>			-- adding the force parameter will ignore the weight aspect and run as if you were over even if you are not\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/> \r\n<output class=\"\"/>"		
	puts "<output class=\"mono\"/>		;overloaded\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>			-- will do the same as above but the indicated room will be the room you are currently in (in this manner at just acts like grouping the commands)\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/> \r\n<output class=\"\"/>"		
	puts "<output class=\"mono\"/>		;overloaded help\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>			-- will show the help information\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/> \r\n<output class=\"\"/>"			
	puts "<output class=\"mono\"/>		;overloaded set [action#] [script]\r\n<output class=\"\"/>"
	puts "<output class=\"mono\"/>			-- will save the command for the script associated with the action\r\n<output class=\"\"/>"
end


originRoom = Room.current.id
allowedEnc = 70
if variable[1] != nil
	#parse variables
	if variable[1] =~ /help/
		showHelp
	elsif variable[1] =~ /set/
		
	elsif variable[1] =~ /force/
		unloadme(originRoom,Room.current.id)
	else
		if variable[2] != nil
			allowedEnc = variable[2].to_i
		else 
				
		end
		
		
		if XMLData.encumbrance_value >= allowedEnc
			unloadme(originRoom,variable[1])
		else 
			echo "We are not overloaded so, we are just going to wait"
		end
	end

else 
	if XMLData.encumbrance_value >= allowedEnc
		unloadme(originRoom,Room.current.id)
	else 
		echo "We are not overloaded so, we are just going to wait"
	end
end



