=begin
Invoker timer in a Wrayth window

author: nishima
tags: invoker
version: 0.4

TODO: convert settings to uservars
TODO: experiment with dialog window instead of stream window
TODO: find ascii art to put in the window

Changelog
  0.4 - permanent fix for DST, fixed pre alert message, added main window message, reduced check interval
  0.3.1b - temp fix for DST and new invoker schedule
  0.3.1 - added priority flag to avoid intereference with other scripts
  0.3 - changed to use local clock
  0.2 - alpha release
=end

no_kill_all
hide_me
setpriority(-1)

# Settings
invokerDuration = 15 # in minutes
preAlert = 5 # minutes before invoker when extra messaging starts
invokerSoonMessage = "=== INVOKER SOON ==="
invokerHereMessage = "=== INVOKER TIME ==="
checkInterval = 6 # seconds

# server time offset and invoker arrival schedule
if Time.now.dst?
  elanthianTimeOffset = -14400 # UTC(-04:00) in seconds
  invokerTimes = [0, 2, 4, 6,    10,     14,     18, 20, 22]
  echo "DST Schedule Active"
else
  elanthianTimeOffset = -18000 # UTC(-05:00) in seconds
  invokerTimes = [0, 2, 4,    8,     12,     16, 18, 20, 22]
  echo "Regular Schedule Active"
end

localTimeOffset = elanthianTimeOffset - Time.now.utc_offset

before_dying {
  message = "#{script.name}.lic is not running :("
  Invoker_Window(message)
}

def Invoker_Window(message)
  puts "<clearStream id=\"invoker\"/><pushStream id=\"invoker\"/>#{message}<popStream/>"
end

# open Wrayth window
puts "<closeDialog id='invoker'/><streamWindow id='invoker' title='Invoker' location='left' resident='true'></streamWindow>"

mainWindowMessageSoon = true
mainWindowMessageHere = true

loop {
  # get server time
  elanthianTime = Time.now + localTimeOffset
  currentHour = elanthianTime.strftime('%H').to_i
  currentMinute = elanthianTime.strftime('%M').to_i

  # retrieve closest time within duration
  if currentHour > invokerTimes.last then currentHour = currentHour - 24 end
  currentInvokerHour = invokerTimes.detect {|time| time if time >= currentHour}
  nextInvokerHour = invokerTimes.detect {|time| time if time > currentInvokerHour}
  if nextInvokerHour.nil? then nextInvokerHour = invokerTimes.first + 24 end #rollover to next day

  # create message for Invoker window
  diffHours = currentInvokerHour - currentHour
  nextHours = nextInvokerHour - currentHour
  diffMinutes = 60 - currentMinute
  if (diffHours == 0) and (currentMinute < invokerDuration) then
    message = "The invoker is here for #{invokerDuration - currentMinute} more minute"
    if (invokerDuration - currentMinute) > 1 then message += "s" end
    message += "!\n\n#{invokerHereMessage}"
    respond "\n#{invokerHereMessage}\n\n" if mainWindowMessageHere
    mainWindowMessageHere = false
    mainWindowMessageSoon = true
  else
    message += "The invoker should arrive in "
    if diffHours == 0 # still in the current hour, so use the next one
      diffHours = nextHours
    end
    if diffHours > 1
      message += "#{diffHours-1} hour"
        if diffHours > 2 then message += "s" end
      message += " and "
    end
    message += "#{diffMinutes} minute"
    if diffMinutes > 1 then message += "s" end
    if (diffHours == 1) and (diffMinutes <= preAlert)
      message += "\n\n#{invokerSoonMessage}"
      respond "\n#{invokerSoonMessage}\n\n" if mainWindowMessageSoon
      mainWindowMessageHere = true
      mainWindowMessageSoon = false
    end
  end

  Invoker_Window(message)
  sleep checkInterval
}
