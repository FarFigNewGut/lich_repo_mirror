=begin

    Bard script for purifying gems.

    ;Purify --help

     author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: bard,gems,1004
    version: 2015.05.27.01

    history:
        2015.05.27.01 Fix prep
        2015.04.06.01 Bug fixes
        2015.03.29.01 Random updates post 2.5 year hiatus
        2012.02.19.01 Port to use common library
        2012.01.12.01 Initial version based on pure.lic

=end

# -----------------------------------------------------------------------------
# Require the helper library as I'm tired of C+P many of the same code blocks.
# -----------------------------------------------------------------------------
if File.file?("#{$script_dir}/cantrips.lic")
    load("#{$script_dir}/cantrips.lic")
else
    echo "\n\ncantrips.lic is required: ';repos download cantrips.lic'\n\n"
    exit
end

if ( $CantripsVer < "2015.03.29.01" )
    Cantrips::Message.bold "-- Running with an untested version of cantrips.  This may not work."
end

class Purify
    # -----------------------------------------------------------------------------
    # Generic loresong taken from the pure.lic
    # -----------------------------------------------------------------------------
    @@loresong = ", I ask this favor of you;Show the purpose laying beneath your hue"

    # -----------------------------------------------------------------------------
    # Option parsing/setup
    # -----------------------------------------------------------------------------
    require 'optparse'

    Options = Struct.new(:gemsack,:lootsack,:orbsack,:magesack)

    class Parser
        def self.parse(options)
            args = Options.new()

            # defaults
            args.gemsack  = Vars.gemsack
            args.lootsack = Vars.lootsack
            args.magesack = Vars.magesack
            args.orbsack  = Vars.orbsack

            opt_parser = OptionParser.new { |opts|
                opts.banner = "Usage: Purify.lic [options]"

                opts.on("-gGEMSACK", "--gemsack=GEMSACK", "Where to put purified gems. Defaults to Vars.gemsack.") { |parameter|
                    args.gemsack = parameter
                }

                opts.on("-lLOOTSACK", "--lootsack=LOOTSACK", "Where to get gems. Defaults to Vars.lootsack.") { |parameter|
                    args.lootsack = parameter
                }

                opts.on("-mMAGESACK", "--magesack=MAGESACK", "Where to put mage rechargeable gems. Defaults to Vars.magesack.") { |parameter|
                    args.magesack = parameter
                }

                opts.on("-oORBSACK", "--orbsack=ORBSACK", "Where to put orbed gems. Defaults to Vars.orbsack.") { |parameter|
                    args.orbsack = parameter
                }

                opts.on("-h", "--help", "Prints this help") {
                    echo opts.to_s
                    exit
                }
            }

            opt_parser.parse!(options)

            # Hack-ish but sufficient for catching unused parameters
            if ( options.any? )
                opt_parser.parse("--help")
            end

            error = false

            if ( args.gemsack.nil? )
                echo "gemsack must be set in vars or passed as an option"
                error = true
            end

            if ( args.lootsack.nil? )
                echo "lootsack must be set in vars or passed as an option"
                error = true
            end

            if ( args.magesack.nil? )
                echo "magesack must be set in vars or passed as an option"
                error = true
            end

            if ( args.orbsack.nil? )
                echo "orbsack must be set in vars or passed as an option"
                error = true
            end

            if error then exit end

            # Tranlate to game objects
            args.gemsack  = Cantrips::Items.find(args.gemsack)
            args.lootsack = Cantrips::Items.find(args.lootsack)
            args.magesack = Cantrips::Items.find(args.magesack)
            args.orbsack  = Cantrips::Items.find(args.orbsack)

            return args
        end

    end

    def self.purify_gem(gem)
        result = ""
        continue = true
        loresing = false

        while continue
            continue = false

            wait_until { mana >= 15 }
            # Not Spell[1004].cast because it eats the output
            until checkprep("Purification Song") do
                fput "prepare 1004"
                sleep 0.25
            end

            fput "sing ##{gem.id}"

            #wait_until { done }
            result = matchwait(
                "turn as the very essence",
                "gem becomes more perfect",
                "shatter",
                "crack",
                "must be holding",
                "what were you",
                "appearing smoother and more pure",
                "improves somewhat",
                "cannot be",
                "Sing Roundtime",
                "Spell Hindrance",
                "song misfires",
                "You must be holding")

            nextline = get

            if result =~ /shatter/
                result= "shattered"
            elsif result =~ /cannot be/
                wait_until('Waiting on mana...') { mana(15) }

                fput("loresing #{gem.noun}#{@@loresong}")

                result = waitfor("pulse", "pulses", "draw power", "gem of some kind")
                waitrt?

                if result =~ /pulse|pulses/
                    echo("*** THIS GEM IS MAGE RECHARGABLE ***")
                    result = "rechageable"
                elsif result =~ /you feel it trying to draw power from you/
                    result = "orb"
                else
                    result ="gem"
                end
            elsif nextline =~ /very essence/
                # From the original pure.lic. Not verified.
                result = "orb"
            elsif result =~ /smoother and more pure in color|crack|somewhat/
                result= "gem"
            elsif result =~ /What were|cannot|must be holding|song misfires/
                # This is a lie, but it has the effective result desired.
                result = "shattered"
            else
                waitcastrt?
                continue = true
            end
        end

        result
    end

    def self.run(parameters)
        options = Parser.parse(parameters)

        timer = Cantrips::Stopwatch.new()
        sung         = 0
        shattered    = 0
        orbs         = 0
        rechargeable = 0

        before_dying {
            if ( rechargeable!=0 )
                # Cantrips::Messages.bold doesn't get self.name correct yet. Fix that.
                Cantrips::Message.bold("[#{self.name}: Created #{rechargeable} gems!]")
            end

            echo "Sung to #{sung} gems, shattering #{shattered} of them and creating #{orbs} orbs.",
                 "Total time: #{timer.total}. Average time per gem: #{timer.average}"
        }

        # -----------------------------------------------------------------------------
        # Find all gems in the loot sack, call PurifyGem() and handle the result.
        # -----------------------------------------------------------------------------
        Cantrips::Containers.open(options.lootsack.id)

        gems = Cantrips::Containers.find_loot_by_pattern(Cantrips::Patterns.gems, options.lootsack.id)

        gems.each {|gem|
            timer.start()
            fput "get ##{gem.id}"

            sung += 1
            result = purify_gem(gem)

            case result
                when "gem"
                    Cantrips::Items.put_in_container(gem, options.gemsack)
            
                when "orb"
                    Cantrips::Items.put_in_container(gem, options.orbsack)
                    orbs += 1
            
                when "rechageable"
                    Cantrips::Items.put_in_container(gem, options.magesack)
                    rechargeable += 1
                                
                when "shattered"
                    wait_while { stunned? }
            
                    if (Wounds.rightHand!=0 || Wounds.leftHand!=0)
                        if ( checkpcs("Rovich") )
                            fput "nudge Rovich";
                            while Wounds.rightHand!=0 || Wounds.leftHand!=0
                                sleep 1
                            end
                        else
                            returnHere = Room.current.id
                            start_script("useherbs", ["--buy-missing=on", "--use-mending=on"])
                            wait_while{running? "useherbs"}
                            Cantrips::Locations.go2(returnHere)
                        end
                    end

                    fput "health"
                                        
                    if (Wounds.rightHand!=0 || Wounds.leftHand!=0)
                        Cantrips::Message.bold(
                            "Unable to heal wounds with herbheal. You will be logged out in 30 seconds\n" +
                            "Use ';kill purify' to prevent that from happening.")
                        sleep 30
                        fput "exit"
                    end
                    shattered += 1
            
                else
                    echo "Unexpected result from purifying: #{result}"
                    exit
            end

            # Timer includes healing time after shattering a gem.
            timer.stop()
            Cantrips::Message.bold "Last gem took #{timer.last}."
        }

        Cantrips::Containers.close(options.lootsack.id)
    end
end

Purify.run(script.vars)
