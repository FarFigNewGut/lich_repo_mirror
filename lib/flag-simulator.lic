=begin

	FLAGS! FLAGS EVERYWHERE!
	
	Who doesn't love an ever growing list of flags?
	
	Not us here at Dreaven Inc!
	
	In ;flag_simulator you can simulate all sorts of flags! Well okay 3 flags for now, but more to come!
	
	Don't want to be stolen from? Set that flag!
	Don't want to worry about death ever again? Set that flag!
	Getting tired of silvers? SET. THAT. FLAG!
	
	Changelog:
	Version 1: Initial release!
	Version 2: You can now run a simulation of your character moving around the Landing and seeing your flag settings in effect.
	
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################

	Author: Dreaven
	Version: 2

=end

toggle_upstream

@flag_simulator_text_to_display = Array.new
@flag_simulator_end_the_simulation = nil

CharSettings['flag_simulator_setting_nosteal'] = nil unless CharSettings['flag_simulator_setting_nosteal']
CharSettings['flag_simulator_setting_nodeath'] = nil unless CharSettings['flag_simulator_setting_nodeath']
CharSettings['flag_simulator_setting_nosilverneed'] = nil unless CharSettings['flag_simulator_setting_nosilverneed']

@flag_simulation_list_all_names = [ "James", "Mary", "Robert", "Patricia", "John", "Jennifer", "Michael", "Linda", "David", "Elizabeth", "William", "Barbara", "Richard", "Susan", "Joseph", "Jessica", "Thomas", "Sarah", "Charles", "Karen", "Christopher", "Lisa", "Daniel", "Nancy", "Matthew", "Betty", "Anthony", "Margaret", "Mark", "Sandra", "Donald", "Ashley", "Steven", "Kimberly", "Paul", "Emily", "Andrew", "Donna", "Joshua", "Michelle", "Kenneth", "Carol", "Kevin", "Amanda", "Brian", "Dorothy", "George", "Melissa", "Timothy", "Deborah", "Ronald", "Stephanie", "Edward", "Rebecca", "Jason", "Sharon", "Jeffrey", "Laura", "Ryan", "Cynthia", "Jacob", "Kathleen", "Gary", "Amy", "Nicholas", "Angela", "Eric", "Shirley", "Jonathen", "Anna", "Stephen", "Brenda", "Larry", "Pamela", "Justin", "Emma", "Scott", "Nicole", "Brandon", "Helen", "Benjamin", "Samantha", "Samuel", "Katherine", "Gregory", "Chrstine", "Alexander", "Debra", "Frank", "Rachel", "Patrick", "Carolyn", "Raymond", "Janet", "Jack", "Catherine", "Dennis", "Maria", "Jerry", "Heather" ]

@flag_simulation_list_of_gems = [ "a clear topaz", "a clear sapphire", "a clear topaz", "a star diopside", "an almandine garnet", "a piece of brown jade", "a piece of black jasper", "a brown zircon", "a clear zircon", "some polished blue coral" ]

@flag_simulation_all_rooms = {

	223 => { 
		:south => 224, 
		:room_desc => 
		"[Wehnimer's, Land's End Rd.]
Vigilant night guardsmen scrutinize the citizens and travelers arriving and departing through the wide gates spanning the land route into Wehnimer's Landing.  The cluttered streets of the city to the south are a far cry from the deceptively calm expanse of the wilds of Elanith outside.  Two daunting towers survey the countryside and protect the town, flanking the road to the east and west.  You also see the town gates, the east tower, the west tower and a large wooden barrel.
Obvious paths: south"
	},
	
	224 => { 
		:north => 223, :east => 286, :west => 225, 
		:room_desc => 
		"[Wehnimer's, North Ring Rd.]
The cobbled road girds the town along the inner side of the northern palisade.  Just to the north stand the twin sentinels of the gate's guardtowers, silhouetted against the night sky.  Guardsmen come and go through the main gates, keeping a close eye on the people of all races who move to and fro.  Opposite the gates, you see the shop of Dakris the Furrier.
Obvious paths: north, east, west"
	},
	
	225 => { 
		:south => 226,
		:room_desc => 
		"[Wehnimer's, North Ring Rd.]
The road turns gradually at this point as it forms the northwest corner of the city.  The main path curves along the north and west walls, and another leads south between the buildings.  The massive oak and modwir logs of the city palisade tower overhead.  You also see an old weathered cart with some stuff on it.
Obvious paths: east, south, southwest"
	},
	
	226 => { 
		:south => 227,
		:room_desc => 
		"[Wehnimer's, Talon St.]
The street runs between the northern palisade and the central square to the south and east.  The traffic is varied here, as a few traders and travelers mingle on the dark streets with the ever-present and watchful militiamen.  The pristine walls of the Stone Baths occupy nearly the entire block.  You also see a brightly lit small painted wagon and a tall black bulwark tower.
Obvious paths: north, south"
	},
	
	227 => { 
		:north => 226, :east => 276, :southeast => 228, :south => 285,
		:room_desc => 
		"[Town Square, Northwest]
This corner of the square is lively and hectic even at night.  A number of representatives of the Landing's population, including several elven loggers and a party of rough-looking dwarves, loiter around the door of the Raging Thrak Inn, where the rowdy cheers of patrons and voices raised in songs of many sorts, from snatches of heroic ballads to blushingly bawdy tunes, beckon you to enter.  You also see a polished granite statue and the Raging Thrak Inn.
Obvious paths: north, east, southeast, south"
	},
	
	228 => { 
		:northeast => 276, :east => 229, :southeast => 282, :southwest => 284, :west => 285, :northwest => 227, 
		:room_desc => 
		"[Town Square Central]
This is the heart of the main square of Wehnimer's Landing.  The impromptu shops of the bazaar are clustered around this central gathering place, where townsfolk, travellers, and adventurers meet to talk, conspire or raise expeditions to the far-flung reaches of Elanith.  At the north end, an old well, with moss-covered stones and a craggy roof, is shaded from the moonlight by a strong, robust tree.  The oak is tall and straight, and it is apparent that the roots run deep.  You also an ivy-covered white monir tower, some wide stone benches with some stuff on it, an herbal remedy donation bin and a round silver-banded barrel.
Obvious paths: northeast, east, southeast, southwest, west, northwest"
	},
	
	229 => { 
		:north => 276, :south => 282, :west => 228,
		:room_desc => 
		"[Town Square, East]
Here in the center of a broad plaza near the commercial area of the bazaar stands the impressive facade of the slate-roofed Moot Hall, where the citizens of Wehnimer's Landing hold various official, religious and social functions.  Facing the square are some of the town's more prosperous shops, still doing business with the many customers who still frequent the streets at night.  You also see a large purple wooden barrel.
Obvious paths: north, east, south, west"
	},
	
	276 => { 
		:south => 229, :southwest => 228, :west => 227,
		:room_desc => 
		"[Town Square, Northeast]
The entrance to Tykel's Arms, its heavy door bounded by iron-barred windows, dominates this corner of the square.  All manner of citizens pass by, moving among the solid, multistoried wooden buildings that surround the bazaar.  Just to the southwest can be seen the tree-shaded heart of the square, where citizens and adventurers gather for socializing, healing and rest.  You also see a narrow alleyway.
Obvious paths: east, south, southwest, west"
	},
	
	282 => { 
		:north => 229, :west => 284, :northwest => 228,
		:room_desc => 
		"[Town Square, Southeast]
Pedestrians and wagon traffic move off in all directions here, some going to the large intersection with South Ring Road, others crisscrossing the square via the bazaar.  Men and women carrying neatly tied parcels or sacks and coils of rope slung over their arms emerge from the wooden facade of the old general store.  You also see the general store and a mushy black door.
Obvious paths: north, south, west, northwest"
	},
	
	284 => { 
		:north => 285, :northeast => 228, :east => 282,
		:room_desc => 
		"[Town Square, Southwest]
This corner of the square seems somewhat subdued.  Townsfolk pass through on their way to the shops, the bazaar, or the main well at the center of the square.  Others hurry past, anxious to get home or go on about their business.  You also see a cobblestone walkway leading up to a wrought iron gate and a wood-sided shop.
Obvious paths: north, northeast, east, south, west"
	},
	
	285 => { 
		:north => 227, :east => 228, :south => 284,
		:room_desc => 
		"[Town Square, West]
Here in the midst of the town stretches the cobblestoned main bazaar, its lamplit lanes abuzz with traders and vendors hawking their wares at any hour of the day or night.  Groups of citizens, discussing the day's events or preparing for nighttime hunts, gather around the doors of the merchants whose shops border the square.  The gilded but peeling stone facade of the First Elanith Bank dominates this side of the square.  You also see the First Elanith bank.
Obvious paths: north, east, south, west"
	},
	
	286 => { 
		:west => 224,
		:room_desc => 
		"[Wehnimer's, North Ring Rd.]
Night guards and militiamen pass by, moving between the barracks and the guard towers at either end of the north road.  The broad cobblestoned way proceeds east and west, hugging the inside of the northern wall.  A sparse mix of citizens and visitors, including trappers and traders returning home for the night or staying out to ply some late business, walk among the ever-vigilant guards.  You also see a small warehouse and a squalid canvas pavilion.
Obvious paths: east, west"
	},
}

def flag_simulator_all_variables_nil
	@flag_simulator_show_help_menu = nil
	@flag_simulator_command = nil
	@flag_simulator_call_nosteal = nil
	@flag_simulator_call_nodeath = nil
	@flag_simulator_call_nosilverneed = nil
	@flag_simulator_call_simulation = nil
end

def flag_simulator_display_message
	_respond
	longest_string = 0
	@flag_simulator_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@flag_simulator_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@flag_simulator_text_to_display = Array.new
end

def flag_simulator_help_menu
	@flag_simulator_text_to_display.push("flag simulator commands:")
	@flag_simulator_text_to_display.push(";flag help - Help menu")
	@flag_simulator_text_to_display.push(";flag sim - start the simulation!")
	@flag_simulator_text_to_display.push(";flag stop - stop the current simulation")
	@flag_simulator_text_to_display.push(";flag nosteal ON|OFF")
	@flag_simulator_text_to_display.push(";flag nodeath ON|OFF")
	@flag_simulator_text_to_display.push(";flag nosilverneed ON|OFF")
	flag_simulator_display_message
end

def flag_simulator_nosteal_flag
	@flag_simulator_silvers_on_hand = 0
	result = Lich::Util.quiet_command_xml("wealth quiet", /You have .* coins with you.|You have but one coin with you./)
	result.each{ |info|
		info = strip_xml(info)
		if info =~ /You have (.*) coins? with you./
			@flag_simulator_silvers_on_hand = $1
		elsif info =~ /You have but one coin with you./
			@flag_simulator_silvers_on_hand = 1
		end
	}
	if @flag_simulator_command =~ /on/i
		CharSettings['flag_simulator_setting_nosteal'] = true
		@flag_simulator_text_to_display.push("Flag NOSTEAL on!")
		@flag_simulator_text_to_display.push("You are now immune from being stolen from! Your #{@flag_simulator_silvers_on_hand} silvers are now safe!")
		@flag_simulator_text_to_display.push("Take THAT, Rogues!")
	elsif @flag_simulator_command =~ /off/i
		CharSettings['flag_simulator_setting_nosteal'] = nil
		@flag_simulator_text_to_display.push("Flag NOSTEAL off!")
		@flag_simulator_text_to_display.push("You are now willingly choosing to be stolen from!")
		@flag_simulator_text_to_display.push("Why?!")
	else
		if CharSettings['flag_simulator_setting_nosteal']
			@flag_simulator_text_to_display.push("Your NOSTEAL flag is currently ON!")
			@flag_simulator_text_to_display.push("Think of the RP opportunities of catching someone stealing nothing from you!")
		else
			@flag_simulator_text_to_display.push("Your NOSTEAL flag is currently OFF!")
			@flag_simulator_text_to_display.push("You're no carebear! You're metal AF!")
		end
	end
	flag_simulator_display_message
end

def flag_simulator_nodeath_flag
	if @flag_simulator_command =~ /on/i
		CharSettings['flag_simulator_setting_nodeath'] = true
		@flag_simulator_text_to_display.push("Flag NODEATH on!")
		@flag_simulator_text_to_display.push("You can no longer be killed! Ditch that heavy armor and other equipment!")
		@flag_simulator_text_to_display.push("YOU WIN GS!")
	elsif @flag_simulator_command =~ /off/i
		CharSettings['flag_simulator_setting_nodeath'] = nil
		@flag_simulator_text_to_display.push("Flag NODEATH off!")
		@flag_simulator_text_to_display.push("You can now be killed! Don't forget to get spells at your local Dreavening!")
	else
		if CharSettings['flag_simulator_setting_nodeath']
			@flag_simulator_text_to_display.push("Your NODEATH flag is currently ON!")
			@flag_simulator_text_to_display.push("You already won GS!")
		else
			@flag_simulator_text_to_display.push("Your NODEATH flag is currently OFF!")
			@flag_simulator_text_to_display.push("Don't forget your super duper 10 billion silver armor before hunting!")
		end
	end
	flag_simulator_display_message
end

def flag_simulator_nosilverneed_flag
	if @flag_simulator_command =~ /on/i
		CharSettings['flag_simulator_setting_nosilverneed'] = true
		@flag_simulator_text_to_display.push("Flag NOSILVERNEED on!")
		@flag_simulator_text_to_display.push("You no longer need silver! Everything is essentially FREE!")
		@flag_simulator_text_to_display.push("Hail to the king, baby!")
	elsif @flag_simulator_command =~ /off/i
		CharSettings['flag_simulator_setting_nosilverneed'] = nil
		@flag_simulator_text_to_display.push("Flag NOSILVERNEED off!")
		@flag_simulator_text_to_display.push("You now have to pay for your stuff like a commoner.")
		@flag_simulator_text_to_display.push("Be sure to set NOSTEAL flag on!")
	else
		if CharSettings['flag_simulator_setting_nosilverneed']
			@flag_simulator_text_to_display.push("Your NOSILVERNEED flag is currently ON!")
			@flag_simulator_text_to_display.push("You're king! Enjoy it!")
		else
			@flag_simulator_text_to_display.push("Your NOSILVERNEED flag is currently OFF!")
			@flag_simulator_text_to_display.push("Show me the silvers! And go farm some silvers!")
		end
	end
	flag_simulator_display_message
end

def flag_simulator_simulation_started
	@flag_simulator_text_to_display.push("The simulation will begin in 5 seconds.")
	@flag_simulator_text_to_display.push("No input from you is required during the simulation, it is all automated.")
	@flag_simulator_text_to_display.push("To end the simulation enter ;flag stop")
	flag_simulator_display_message
	@flag_simulator_current_room_number = 228
	sleep 5
	loop{
		break if @flag_simulator_end_the_simulation
		respond @flag_simulation_all_rooms[@flag_simulator_current_room_number][:room_desc]
		random_number_person_here = rand(2)
		random_person_here = @flag_simulation_list_all_names.sample
		respond "Also here: #{random_person_here}" if random_number_person_here == 1
		respond ""
		30.times{
			sleep 0.1
			break if @flag_simulator_end_the_simulation
		}
		break if @flag_simulator_end_the_simulation
		
		if random_number_person_here == 1
			random_number_theft = rand(2)
			if random_number_theft == 1
				if CharSettings['flag_simulator_setting_nosteal']
					@flag_simulator_text_to_display.push("#{random_person_here} tried to steal from you!")
					@flag_simulator_text_to_display.push("But your NOSTEAL flag is currently on so the theft attempt was unsuccessful!")
					@flag_simulator_text_to_display.push("You begin to roleplay all over the place!")
					flag_simulator_display_message
				else
					@flag_simulator_text_to_display.push("#{random_person_here} just stole #{@flag_simulation_list_of_gems.sample} from you! That gem was worth about #{rand(15..30)} silvers!")
					@flag_simulator_text_to_display.push("If only there were a flag to prevent this atrocity!")
					flag_simulator_display_message
				end
				30.times{
					sleep 0.1
					break if @flag_simulator_end_the_simulation
				}
			end
		end
		break if @flag_simulator_end_the_simulation

		possible_moves = [ @flag_simulation_all_rooms[@flag_simulator_current_room_number][:north], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:northeast], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:east], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:southeast], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:south], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:southwest], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:west], @flag_simulation_all_rooms[@flag_simulator_current_room_number][:northwest] ]
		possible_moves.compact!
		current_move = possible_moves.sample
		
		if current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:north]
			room_moving_to = "north"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:northeast]
			room_moving_to = "northeast"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:east]
			room_moving_to = "east"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:southeast]
			room_moving_to = "southeast"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:south]
			room_moving_to = "south"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:southwest]
			room_moving_to = "southwest"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:west]
			room_moving_to = "west"
		elsif current_move == @flag_simulation_all_rooms[@flag_simulator_current_room_number][:northwest]
			room_moving_to = "northwest"
		end
		respond "You moved #{room_moving_to}."
		respond
		@flag_simulator_current_room_number = current_move
	}
	@flag_simulator_end_the_simulation = nil
	@flag_simulator_text_to_display.push("Simulation has ended!")
	flag_simulator_display_message
end

watch_for_the_command = proc { |string|
	@flag_simulator_command = string
	if string =~ /;flag help/i
		@flag_simulator_show_help_menu = true
		nil
	elsif string =~ /;flag nosteal/i
		@flag_simulator_call_nosteal = true
		nil
	elsif string =~ /;flag nodeath/i
		@flag_simulator_call_nodeath = true
		nil
	elsif string =~ /;flag nosilverneed/i
		@flag_simulator_call_nosilverneed = true
		nil
	elsif string =~ /;flag sim/i
		@flag_simulator_call_simulation = true
		nil
	elsif string =~ /;flag stop/i
		@flag_simulator_end_the_simulation = true
		nil
	elsif string =~ /;flag/
		@flag_simulator_show_help_menu = true
		nil
	else
		string
	end
}

UpstreamHook.add('flag_simulator', watch_for_the_command)

before_dying { UpstreamHook.remove('flag_simulator') }

flag_simulator_all_variables_nil

flag_simulator_help_menu

loop{
	wait_until{ @flag_simulator_show_help_menu || @flag_simulator_call_nosteal || @flag_simulator_call_nodeath || @flag_simulator_call_nosilverneed || @flag_simulator_call_simulation }
	if @flag_simulator_show_help_menu
		flag_simulator_help_menu
	elsif @flag_simulator_call_nosteal
		flag_simulator_nosteal_flag
	elsif @flag_simulator_call_nodeath
		flag_simulator_nodeath_flag
	elsif @flag_simulator_call_nosilverneed
		flag_simulator_nosilverneed_flag
	elsif @flag_simulator_call_simulation
		flag_simulator_simulation_started
	end
	flag_simulator_all_variables_nil
}