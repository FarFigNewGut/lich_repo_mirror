=begin
	This is a slightly modified version of Share.lic for OSA use. 

	Original Help File:

	NOTE: THIS SCRIPT REQUIRES ;help-share TO RUN. DOWNLOAD BY DOING ;repo download help-share.
	There is no need to start or stop ;help-share, this script will start and stop ;help-share when needed.
	
	Gather your friends, families, and alts and throw your own spell up party!
	
	This handy script will ask everyone in your party who is also running this script some questions to find out the most efficient way of spelling up everyone in the group. The group leader will then assign caster roles and the party gets started! Party members will ask for mana when they are low on mana and the script figures out who should send that person mana based on everyone's three mana sharing abilities. If there is a wizard in your party then the script will make sure all casters keep Rapid Fire (515) on them while they are casting.
	
	The script works best with 2+ wizards although no wizards are a requirement to run the script. You don't need someone who can cast from each spell list in your party, you can run this script even if you just have an empath and a wizard, they will give out all spells they know to the entire group.
	
	It is not required that everyone in the party be running this script, just the casters need to run it, although it does work best if everyone is running this script and has some mana and mana sharing, preferably Spirit Mana Control since it is the cheapest share for the most professions.
	
	COMMANDS:
	While script is running and you are the group leader you can use the following commands, simply enter them into the game window:
	
	stats
	;share stats
	Either one will get everyone's spell information then provide you with a list of which members of your party can cast spells from which spell lists.
	
	start
	;share start
	Either one will GET THIS SPELL PARTY STARTED!!! These commands will assign spell roles to everyone and then you can watch the magic happen!
	
	Changelog:
	Version 2: Added a setup menu which is accessiable via doing ;share setup
	Version 2: New option added in setup menu: 'Opt Out' enter 'all' to opt out of receiving ALL spells.
	Version 2: New option added in setup menu: 'Use society ability' to automatically use your society ability to regain mana when needed. Symbol of Mana will only be used if the ability isn't in cooldown so it won't cost any deeds. Sign of Wracking will be used anywhere as long as you have at least 11 spirit, otherwise it will be used if you're at a table and have at least 9 spirit.
	Version 2: Previously if someone couldn't be cast at (because they temporarily left the room or were hiding when a caster tried to cast at them) the script would attempt to give them ALL spells again at the end of the spellup phase. The script now keeps track of which spells couldn't be cast at each person and will only attempt to give them the spells they missed the first time.
	Version 3: Fixed bug with GTK errors.
	Version 4: Fixed bug with script trying to send mana to NONE.
	
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
=end

if !File.exist?('scripts\help-osashare.lic')
    echo "This script requires the script 'help-osashare'. Do ;repo download help-osashare then run this script again. There is no need to start or stop ;help-osashare, this script will start and stop it when necessary."
	exit
end

if Gem.loaded_specs["gtk3"]
	gtk_version = 3
else
	gtk_version = 2
end

setup = proc{
	Gtk.queue {
		$SHARE_WINDOW = Gtk::Window.new
		$SHARE_WINDOW.title = "Share"
		$SHARE_WINDOW.set_border_width(10)
		
		#GTK2 and GTK3 nonsense:
		if gtk_version == 2
			$SHARE_BOX = Gtk::VBox.new(false)
			$SHARE_BOX.set_border_width(5)

			$SHARE_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
		else
			$SHARE_BOX = Gtk::Box.new(:vertical)
			$SHARE_BOX.set_border_width(5)

			$SHARE_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
		end
		#####
		
		$SHARE_WINDOW.add($SHARE_BOX)
		$SHARE_NOTEBOOK = Gtk::Notebook.new
		$SHARE_NOTEBOOK.set_show_border(true)
		$SHARE_BOX.add($SHARE_NOTEBOOK)
		$SHARE_NOTEBOOK.append_page($SHARE_VERTICAL_BOX1, Gtk::Label.new('General'))
		$SHARE_ENTRY = Hash.new 
		$SHARE_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$SHARE_TABLE1 = Gtk::Table.new(6, 3, false)
		$SHARE_TABLE1.row_spacings=3
		$SHARE_TABLE1.column_spacings=3
		$SHARE_VERTICAL_BOX1.pack_start($SHARE_TABLE1, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $SHARE_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.share[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$SHARE_ENTRY[variable] = entry
		$SHARE_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$SHARE_ENTRY = Hash.new
		add_label_entry($SHARE_TABLE1, "Opt out:", 'share_opt_out')
		add_label_entry($SHARE_TABLE1, "Use society ability:", 'use_society_ability')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $SHARE_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.share[variable].nil? ? default : UserVars.share[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$SHARE_ENTRY[variable] = checkbox
		$SHARE_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$SHARE_WINDOW.signal_connect("delete_event") {
			$SHARE_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {

		label = Gtk::Label.new
		label.set_markup("Leave line blank for any setting you don't want to use.\n<b>Opt out:</b> Enter <b>all</b> to opt out of receiveing ALL spells. This is the only option for now.\n<b>Use society ability:</b> Enter <b>yes</b> to have script automatically use Sign of Wracking, Symbol of Mana, or Sigil of Power (whichever one you know) when low on mana.\nScript will only use Symbol of Mana while the cooldown isn't active (so it won't cost deeds.\nScript will use Sign of Wracking in any room as long as you have at least 11 spirit remaining. Otherwise script will only use Sign of Wracking while you are at a table and you have at least 9 spirit remaining.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$SHARE_TABLE1.attach(align, 1, 2, 9, 10)

		$SHARE_WINDOW.show_all
	}
        
	$SHARE_SETUP_COMPLETED = false
	until($SHARE_SETUP_COMPLETED)
		sleep 1
	end
       
	UserVars.share ||= Hash.new
	$SHARE_ENTRY.keys.each { |key|
		if( $SHARE_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $SHARE_ENTRY[key].active?
			UserVars.share[key] = $SHARE_ENTRY[key].active?
		else
			UserVars.share[key] = $SHARE_ENTRY[key].text.strip.downcase
		end
	}
	UserVars.save()
        
	Gtk.queue {
		$SHARE_WINDOW.destroy
	}
}

if script.vars[1] == "setup"
	setup.call
	exit
end

$share_opting_out = UserVars.share["share_opt_out"].downcase
$share_opting_out = "NONE" if $share_opting_out.nil? || $share_opting_out.length < 1

$share_use_soc_ability = UserVars.share["use_society_ability"].downcase

start_script "help-osashare" if !running? "help-osashare"

before_dying { kill_script "help-sharetest" if running? "help-sharetest" }

people_to_cast_at_again = Hash.new

toggle_upstream

$share_send_spirit_mana = "NO"
$share_send_elemental_mana = "NO"
$share_send_mental_mana = "NO"

$share_send_spirit_mana = "YES" if Skills.smc >= 20
$share_send_elemental_mana = "YES" if Skills.emc >= 20
$share_send_mental_mana = "YES" if Skills.mmc >= 20

if ($share_send_spirit_mana == "NO" && $share_send_elemental_mana == "NO" && $share_send_mental_mana == "NO") && (Skills.smc > 0 || Skills.emc > 0 || Skills.mmc > 0)
	$share_send_spirit_mana = "YES" if Skills.smc >= Skills.emc && Skills.smc >= Skills.mmc
	$share_send_elemental_mana = "YES" if Skills.emc >= Skills.smc && Skills.emc >= Skills.mmc
	$share_send_mental_mana = "YES" if Skills.mmc >= Skills.smc && Skills.mmc >= Skills.emc
end

$share_everyone_opted_out = Array.new
$share_everyones_stats = Hash.new
$share_spells_players_can_cast = Hash.new

$share_time_to_send_mana = nil
$share_time_to_get_started = nil
$share_time_to_share_stats = nil
$share_time_for_spells = nil
first_time_casting = nil

number_of_minorspiritual_casts = 100
number_of_majorspiritual_casts = 100
number_of_minorelemental_casts = 100
number_of_majorelemental_casts = 100
number_of_wizard_casts = 100
number_of_ranger_casts = 100
number_of_minormental_casts = 100
number_of_paladin_casts = 100

var_spell_duration = 250

number_of_minorspiritual_casts = ((var_spell_duration / (Spells.minorspiritual + 20))).ceil if Spells.minorspiritual >= 12
number_of_majorspiritual_casts = ((var_spell_duration / (Spells.majorspiritual + 20))).ceil if Spells.majorspiritual >= 7
number_of_minorelemental_casts = ((var_spell_duration / (Spells.minorelemental + 20))).ceil if Spells.minorelemental >= 6
number_of_majorelemental_casts = ((var_spell_duration/ (Spells.majorelemental + 20))).ceil if Spells.majorelemental >= 11
number_of_wizard_casts = ((var_spell_duration / (Spells.wizard + 20))).ceil if Spells.wizard >= 11
number_of_ranger_casts = ((var_spell_duration / (Spells.ranger + 20))).ceil if Spells.ranger >= 18
number_of_minormental_casts = ((var_spell_duration / (Spells.minormental + 20))).ceil if Spells.minormental >= 8
number_of_paladin_casts = ((var_spell_duration / (Spells.paladin + 20))).ceil if Spells.paladin >= 1

if Char.prof =~ /Sorcerer|Rogue|Warrior/
	spirit_multicast = ((Skills.smc + (Skills.emc / 2)) / 25) + 1
elsif Char.prof =~ /Empath|Monk/
	spirit_multicast = ((Skills.smc + (Skills.mmc / 2)) / 25) + 1
elsif Char.prof =~ /Cleric|Ranger/
	spirit_multicast = (Skills.smc / 25) + 1
else
	spirit_multicast = 1
end

if Char.prof == "Bard"
	elemental_multicast = ((Skills.emc + (Skills.mmc / 2)) / 25) + 1
elsif Char.prof =~ /Sorcerer|Rogue|Warrior/
	elemental_multicast = ((Skills.emc + (Skills.smc / 2)) / 25) + 1
elsif Char.prof =~ /Wizard/
	elemental_multicast = (Skills.emc / 25) + 1
else
	elemental_multicast = 1
end

if Char.prof == "Monk"
	mental_multicast = ((Skills.mmc + (Skills.smc / 2)) / 25) + 1
else
	mental_multicast = 1
end

already_asked_for_515 = nil

total_minor_spirit_casts_needed = [(number_of_minorspiritual_casts.to_f / spirit_multicast).ceil, 1].max
total_major_spirit_casts_needed = [(number_of_majorspiritual_casts.to_f / spirit_multicast).ceil, 1].max
total_minor_elemental_casts_needed = [(number_of_minorelemental_casts.to_f / elemental_multicast).ceil, 1].max
total_major_elemental_casts_needed = [(number_of_majorelemental_casts.to_f / elemental_multicast).ceil, 1].max
total_wizard_casts_needed = [(number_of_wizard_casts.to_f / elemental_multicast).ceil, 1].max
total_ranger_casts_needed = [(number_of_ranger_casts.to_f / spirit_multicast).ceil, 1].max
total_minor_mental_casts_needed = [(number_of_minormental_casts.to_f / mental_multicast).ceil, 1].max
total_paladin_casts_needed = [(number_of_paladin_casts.to_f / spirit_multicast).ceil, 1].max

all_minor_spirit_spells_1 = [ 101, 103, 107 ]
all_minor_spirit_spells_2 = [ 112 ]
all_major_spirit_spells = [ 202, 207 ]
all_minor_elemental_spells = [ 401, 406 ]
all_major_elemental_spells = [ 503, 509, 511 ]
all_ranger_spells = [ 601, 602, 618 ]
all_monk_spells = [ 1204, 1208 ]
all_paladin_spells = [ 1601 ]
all_wizard_spells = [ 911 ]
all_ed3_spells = [ 419 ]

spells_only_cast_once = [ 103, 202, 207, 1601 ]

$share_use_society_ability = proc{
	if $share_use_soc_ability == "yes"
		if Spell[9813].known? && !Spell[9048].active?
			Spell[9813].cast
		elsif Spell[9718].known? && Spell[9718].affordable? && !Spell[9699].active?
			until checkstamina < 50
				Spell[9718].cast
				sleep 0.1
			end
		elsif Spell[9918].known? && checkspirit(9)
			if checkspirit(11)
				cast 'sign of wracking'
			elsif checkspirit(9) && checkroom =~ /table/i
				until hiding?
					waitrt?
					fput "hide"
					sleep 0.1
				end
				waitrt?
				cast 'sign of wracking'
				until standing?
					waitrt?
					fput "stand"
					sleep 0.1
				end
			end
		end
	end
	sleep 1
}

def share_need_mana(mana_required)
	if checkmana < mana_required
		fput "whisper ooc group I need mana."
		20.times{
			break if checkmana(mana_required)
			sleep 0.1
		}
		$share_use_society_ability.call if !checkmana(mana_required)
		wait_until { checkmana(mana_required) }
	end
end

def share_highlight_message(message)
	respond
	respond "#{monsterbold_start}------------------------------------------------------------#{monsterbold_end}\n"
	respond "#{monsterbold_start}#{message}\n"
	respond "#{monsterbold_start}------------------------------------------------------------#{monsterbold_end}\n"
	respond
end

$share_calculate_amount_of_mana_to_send = proc{
	if $share_all_casters["Rapid Fire"][:Name] == checkname
		$share_amount_of_mana_to_send = ((checkmana - 100) / 20) * 20
	else
		$share_amount_of_mana_to_send = (checkmana / 20) * 20
	end
}

give_everyone_515 = proc{
	loop{
		if $share_everyone_who_needs_515.count > 0
			share_need_mana(15)
			person = $share_everyone_who_needs_515.first
			Spell[515].cast(person) if checkpcs.include?(person)
			$share_everyone_who_needs_515.delete(person)
		end
		break if $share_party_is_over
		sleep 1
	}
}

$share_check_for_all_done_casting = proc{
	$share_all_casters.each{ |key,value| value[:Name] = "NONE" if value[:Name] == $share_person_who_finished_casting && key != "Rapid Fire" }
	if $share_group_leader == checkname
		number_casters_remaining = 0
		$share_all_casters.each{ |key,value| number_casters_remaining += 1 if value[:Name] == "NONE" || key == "Rapid Fire" }
		fput "whisper ooc group This spell up party is finished." if number_casters_remaining >= $share_all_casters.count 
	end
}

cast_those_spells = proc{
	if first_time_casting
		people_to_cast_at_again = Hash.new
		$share_everyone_who_needs_515 = Array.new
		everyone_to_cast_at = Array.new
		do_not_cast_419_again = nil
		do_not_cast_601_again = nil 
		do_not_cast_911_again = nil
		# fput "group"
		# while line = get
			# if line =~ /^([a-zA-Z]+) is the leader of your group\./ || line =~ /^([a-zA-Z]+) is also a member of your group\./ || line =~ /^([a-zA-Z]+) is following you\./
				# everyone_to_cast_at.push($1)
			# elsif line =~ /^Your group status is currently/
				# break
			# end
		# end
		status_tags
		res = dothistimeout 'group',3,/^You are/
		status_tags
		if res.nil?
			break
		else
			echo res
			grouped = res.scan(/noun="([^"]+)"/).flatten
			echo grouped
			grouped.each{|member| everyone_to_cast_at.push(member)}
			echo everyone_to_cast_at
		end
		
		everyone_to_cast_at.push(checkname)
		all_people_to_cast_at = everyone_to_cast_at
		echo "all_people_to_cast_at -->  #{all_people_to_cast_at}"
	else
		all_people_to_cast_at = people_to_cast_at_again
	end
	if Spell[625].known?
		share_need_mana(25)
		Spell[625].cast
	end
	$share_all_those_spells_to_cast.each{ |i|
		all_people_to_cast_at.each { |t,value|
			cast_the_spell = nil
			if $share_everyone_opted_out.include?(t)
				cast_the_spell = nil
			elsif first_time_casting.nil?
				if all_people_to_cast_at[t].include?(i)
					cast_the_spell = true
				else
					cast_the_spell = nil
				end
			elsif first_time_casting
				cast_the_spell = true
			end
			if cast_the_spell
				if $share_all_those_spells_to_cast.include?(515)
					if $share_everyone_who_needs_515.count > 0
						share_need_mana(15)
						person = $share_everyone_who_needs_515.first
						Spell[515].cast(person) if checkpcs.include?(person)
						$share_everyone_who_needs_515.delete(person)
					end
					share_need_mana(15)
					Spell[515].cast if !Spell[515].active?
				end
				if i == 511
					share_need_mana(11)
					Spell[i].cast(t) unless GameObj.loot.find{ |s| s.name =~ /#{t}/ && s.noun == "disk" }
				elsif (i == 419 && do_not_cast_419_again) || (i == 601 && do_not_cast_601_again) || (i == 911 && do_not_cast_911_again)
					nil
				elsif i != 515
					one_cast_only = nil
					one_cast_only = true if spells_only_cast_once.include?(i)
					if !Spell[515].active? && already_asked_for_515.nil? && !$share_all_those_spells_to_cast.include?(515)
						already_asked_for_515 = true
						fput "whisper ooc #{$share_all_casters["Rapid Fire"][:Name]} I need 515." if $share_all_casters["Rapid Fire"][:Name] != "NONE" && $share_all_casters["Rapid Fire"][:Name] != checkname
					end
					if !checkpcs.include?(t) && first_time_casting && t != checkname
						people_to_cast_at_again[t] = Array.new if people_to_cast_at_again[t].nil?
						people_to_cast_at_again[t].push(i) unless people_to_cast_at_again[t].include?(i)
					else
						if i.to_s.length == 4
							spell_cost = i.to_s[1..-1]
							spell_cost = spell_cost.to_s[1..-1]
						else
							spell_cost = i.to_s[1..-1]
						end
						spell_cost = spell_cost.to_s[1..-1] if spell_cost[0] == "0"
						if one_cast_only
							mana_needed = (spell_cost.to_i + 5)
							share_need_mana(mana_needed)
							Spell[i].cast(t)
						else
							if all_minor_spirit_spells_1.include?(i) || all_minor_spirit_spells_2.include?(i)
								total_casts_needed = total_minor_spirit_casts_needed
								number_of_casts_needed = number_of_minorspiritual_casts
								number_of_multicasts = spirit_multicast
							elsif all_major_spirit_spells.include?(i)
								total_casts_needed = total_major_spirit_casts_needed
								number_of_casts_needed = number_of_majorspiritual_casts
								number_of_multicasts = spirit_multicast
							elsif all_minor_elemental_spells.include?(i) || all_ed3_spells.include?(i)
								total_casts_needed = total_minor_elemental_casts_needed
								number_of_casts_needed = number_of_minorelemental_casts
								number_of_multicasts = elemental_multicast
							elsif all_major_elemental_spells.include?(i)
								total_casts_needed = total_major_elemental_casts_needed
								number_of_casts_needed = number_of_majorelemental_casts
								number_of_multicasts = elemental_multicast
							elsif all_ranger_spells.include?(i)
								total_casts_needed = total_ranger_casts_needed
								number_of_casts_needed = number_of_ranger_casts
								number_of_multicasts = spirit_multicast
							elsif all_monk_spells.include?(i)
								total_casts_needed = total_minor_mental_casts_needed
								number_of_casts_needed = number_of_minormental_casts
								number_of_multicasts = mental_multicast
							elsif all_paladin_spells.include?(i)
								total_casts_needed = total_paladin_casts_needed
								number_of_casts_needed = number_of_paladin_casts
								number_of_multicasts = spirit_multicast
							elsif all_wizard_spells.include?(i)
								total_casts_needed = total_wizard_casts_needed
								number_of_casts_needed = number_of_wizard_casts
								number_of_multicasts = elemental_multicast
							end
							until number_of_casts_needed < 1
								if number_of_multicasts >= number_of_casts_needed
									number_of_spells_to_cast = number_of_casts_needed
								else
									number_of_spells_to_cast = number_of_multicasts
								end
								mana_needed = (spell_cost.to_i + 5) * number_of_spells_to_cast
								share_need_mana(mana_needed)
								if i == 419 || i == 601 || i == 911
									do_not_cast_419_again = true if i == 419
									do_not_cast_601_again = true if i == 601
									do_not_cast_911_again = true if i == 911
									if i == 601
										until checkprep == "Natural Colors"
											waitrt?
											waitcastrt?
											fput "release" if checkprep != "Natural Colors" && checkprep != "None"
											fput "prep 601"
											sleep 0.2
										end
										waitrt?
										fput "evoke #{number_of_spells_to_cast}"
									else
										Spell[i].cast("#{number_of_spells_to_cast}")
									end
								else
									Spell[i].cast("#{t} #{number_of_spells_to_cast}")
								end
								number_of_casts_needed -= number_of_spells_to_cast
							end
						end
					end
				end
			end
		}
	}
	if first_time_casting
		first_time_casting = nil
		cast_those_spells.call
	else
		share_highlight_message("You're all done casting!")
		fput "whisper ooc group I am finished casting."
		if $share_group_leader == checkname
			$share_person_who_finished_casting = checkname
			$share_check_for_all_done_casting.call
		end
		$share_all_casters.each{ |key,value|
			if value[:Name] != "NONE" && value[:Name] != checkname
				share_that_mana = nil
				share_that_mana = true if (value[:SMC] == "YES" && $share_send_spirit_mana == "YES") || (value[:EMC] == "YES" && $share_send_elemental_mana == "YES") || (value[:MMC] == "YES" && $share_send_mental_mana == "YES")
				$share_calculate_amount_of_mana_to_send.call
				fput "send #{$share_amount_of_mana_to_send} #{value[:Name]}" if $share_amount_of_mana_to_send > 0 if share_that_mana
			end
		}
		$share_calculate_amount_of_mana_to_send.call
		fput "send #{$share_amount_of_mana_to_send} #{$share_universal_sender}" if $share_amount_of_mana_to_send > 0 && $share_universal_sender != "NONE" && $share_universal_sender != checkname && ($share_send_spirit_mana == "YES" || $share_send_elemental_mana == "YES" || $share_send_mental_mana == "YES")
		$share_time_to_send_mana = true
		give_everyone_515.call if $share_all_casters["Rapid Fire"][:Name] == checkname
	end
}

get_started = proc{
	$share_party_is_over = nil
	if checkname != $share_group_leader
		fput "whisper ooc #{$share_group_leader} Number of casts: #{number_of_minorspiritual_casts}, #{number_of_majorspiritual_casts}, #{number_of_minorelemental_casts}, #{number_of_majorelemental_casts}, #{number_of_wizard_casts}, #{number_of_ranger_casts}, #{number_of_minormental_casts}, #{number_of_paladin_casts}. Multicasts: #{spirit_multicast}\, #{elemental_multicast}\, #{mental_multicast}. Total casts: #{total_minor_spirit_casts_needed}, #{total_major_spirit_casts_needed}, #{total_minor_elemental_casts_needed}, #{total_major_elemental_casts_needed}, #{total_wizard_casts_needed}, #{total_ranger_casts_needed}, #{total_minor_mental_casts_needed}, #{total_paladin_casts_needed}. Spell ranks: #{Spells.minorspiritual}, #{Spells.majorspiritual}, #{Spells.paladin}, #{Spells.minorelemental}, #{Spells.majorelemental}. Shares\: #{$share_send_spirit_mana}, #{$share_send_elemental_mana}, #{$share_send_mental_mana}, #{$share_opting_out}."
	else
		share_highlight_message("Waiting 5 seconds for everyone to give me their information.")
		sleep 5
		$share_everyones_stats.store(checkname, :Total_caster_roles => 0, :Minor_Spirit_casts => number_of_minorspiritual_casts, :Major_Spirit_casts => number_of_majorspiritual_casts, :Minor_Elemental_casts => number_of_minorelemental_casts.to_i, :Major_Elemental_casts => number_of_majorelemental_casts.to_i, :Wizard_casts => number_of_wizard_casts.to_i, :Ranger_casts => number_of_ranger_casts.to_i, :Minor_Mental_casts => number_of_minormental_casts.to_i, :Paladin_casts => number_of_paladin_casts.to_i, :Spirit_multicast => spirit_multicast, :Elemental_multicast => elemental_multicast, :Mental_multicast => mental_multicast, :Total_Minor_Spirit_casts => total_minor_spirit_casts_needed.to_i, :Total_Major_Spirit_casts => total_major_spirit_casts_needed.to_i, :Total_Minor_Elemental_casts => total_minor_elemental_casts_needed.to_i, :Total_Major_Elemental_casts => total_major_elemental_casts_needed.to_i, :Total_Wizard_casts => total_wizard_casts_needed.to_i, :Total_Ranger_casts => total_ranger_casts_needed.to_i, :Total_Minor_Mental_casts => total_minor_mental_casts_needed.to_i, :Total_Paladin_casts => total_paladin_casts_needed.to_i, :Minor_Spirit_spell_ranks => Spells.minorspiritual.to_i, :Major_Spirit_spell_ranks => Spells.majorspiritual.to_i, :Paldin_spell_ranks => Spells.paladin.to_i, :Minor_Elemental_spell_ranks => Spells.minorelemental.to_i, :Major_Elemental_spell_ranks => Spells.majorelemental.to_i, :SMC => $share_send_spirit_mana, :EMC => $share_send_elemental_mana, :MMC => $share_send_mental_mana)
		$share_all_casters = Hash.new
		$share_all_casters.store("Ranger", 				  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Wizard", 				  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Paladin", 			  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Monk", 				  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Major Spirit", 		  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Minor Spirit Caster 1", :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Minor Spirit Caster 2", :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Major Elemental", 	  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Minor Elemental", 	  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("Rapid Fire", 			  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		$share_all_casters.store("ED3", 				  :Name => "NONE",  :SMC => "NO",  :EMC => "NO",  :MMC => "NO")
		number_of_acceptable_caster_roles = 1
		3.times{
			if $share_all_casters["Ranger"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Ranger"][:Name] == "NONE"
							$share_all_casters["Ranger"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Ranger_casts] < $share_everyones_stats[$share_all_casters["Ranger"][:Name]][:Total_Ranger_casts]
							$share_all_casters["Ranger"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Ranger_casts] == $share_everyones_stats[$share_all_casters["Ranger"][:Name]][:Total_Ranger_casts] && $share_everyones_stats[key][:Ranger_casts] < $share_everyones_stats[$share_all_casters["Ranger"][:Name]][:Ranger_casts]
							$share_all_casters["Ranger"][:Name] = key
						end
					end
				}
				$share_all_casters["Ranger"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Ranger"][:Name]][:Ranger_casts] == 100
				$share_everyones_stats[$share_all_casters["Ranger"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Ranger"][:Name]
			end
			if $share_all_casters["Wizard"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Wizard"][:Name] == "NONE"
							$share_all_casters["Wizard"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Wizard_casts] < $share_everyones_stats[$share_all_casters["Wizard"][:Name]][:Total_Wizard_casts]
							$share_all_casters["Wizard"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Wizard_casts] == $share_everyones_stats[$share_all_casters["Wizard"][:Name]][:Total_Wizard_casts] && $share_everyones_stats[key][:Wizard_casts] < $share_everyones_stats[$share_all_casters["Wizard"][:Name]][:Wizard_casts]
							$share_all_casters["Wizard"][:Name] = key
						end
					end
				}
				$share_all_casters["Wizard"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Wizard"][:Name]][:Wizard_casts] == 100
			end
			if $share_all_casters["Paladin"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Paladin"][:Name] == "NONE"
							$share_all_casters["Paladin"][:Name] = key
						elsif $share_everyones_stats[key][:Paldin_spell_ranks] > $share_everyones_stats[$share_all_casters["Paladin"][:Name]][:Paldin_spell_ranks]
							$share_all_casters["Paladin"][:Name] = key
						end
					end
				}
				$share_all_casters["Paladin"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Paladin"][:Name]][:Paladin_casts] == 100
				$share_everyones_stats[$share_all_casters["Paladin"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Paladin"][:Name]
			end
			if $share_all_casters["Monk"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Monk"][:Name] == "NONE"
							$share_all_casters["Monk"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Minor_Mental_casts] < $share_everyones_stats[$share_all_casters["Monk"][:Name]][:Total_Minor_Mental_casts]
							$share_all_casters["Monk"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Minor_Mental_casts] == $share_everyones_stats[$share_all_casters["Monk"][:Name]][:Total_Minor_Mental_casts] && $share_everyones_stats[key][:Minor_Mental_casts] < $share_everyones_stats[$share_all_casters["Monk"][:Name]][:Minor_Mental_casts]
							$share_all_casters["Monk"][:Name] = key
						end
					end
				}
				$share_all_casters["Monk"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Monk"][:Name]][:Minor_Mental_casts] == 100
				$share_everyones_stats[$share_all_casters["Monk"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Monk"][:Name]
			end
			if $share_all_casters["Major Spirit"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Major Spirit"][:Name] == "NONE"
							$share_all_casters["Major Spirit"][:Name] = key
						elsif $share_everyones_stats[key][:Major_Spirit_spell_ranks] > $share_everyones_stats[$share_all_casters["Major Spirit"][:Name]][:Major_Spirit_spell_ranks]
							$share_all_casters["Major Spirit"][:Name] = key
						end
					end
				}
				$share_all_casters["Major Spirit"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Major Spirit"][:Name]][:Major_Spirit_casts] == 100
				$share_everyones_stats[$share_all_casters["Major Spirit"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Major Spirit"][:Name]
			end
			if $share_all_casters["Major Elemental"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Major Elemental"][:Name] == "NONE"
							$share_all_casters["Major Elemental"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Major_Elemental_casts] < $share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:Total_Major_Elemental_casts]
							$share_all_casters["Major Elemental"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Major_Elemental_casts] == $share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:Total_Major_Elemental_casts] && $share_everyones_stats[key][:Major_Elemental_casts] < $share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:Major_Elemental_casts]
							$share_all_casters["Major Elemental"][:Name] = key
						end
					end
				}
				$share_all_casters["Major Elemental"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:Major_Elemental_casts] == 100
				$share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Major Elemental"][:Name]
			end
			if $share_all_casters["Rapid Fire"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Major_Elemental_spell_ranks] > 15 && $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						$share_all_casters["Rapid Fire"][:Name] = key
					end
				}
				$share_everyones_stats[$share_all_casters["Rapid Fire"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Rapid Fire"][:Name]
			end
			if $share_all_casters["Minor Elemental"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Minor Elemental"][:Name] == "NONE"
							$share_all_casters["Minor Elemental"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Minor_Elemental_casts] < $share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:Total_Minor_Elemental_casts]
							$share_all_casters["Minor Elemental"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Minor_Elemental_casts] == $share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:Total_Minor_Elemental_casts] && $share_everyones_stats[key][:Minor_Elemental_casts] < $share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:Minor_Elemental_casts]
							$share_all_casters["Minor Elemental"][:Name] = key
						end
					end
				}
				$share_all_casters["Minor Elemental"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:Minor_Elemental_casts] == 100
				$share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Minor Elemental"][:Name]
			end
			if $share_all_casters["ED3"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					$share_all_casters["ED3"][:Name] = key if $share_everyones_stats[key][:Minor_Elemental_spell_ranks] >= 19
				}
			end
			if $share_all_casters["Minor Spirit Caster 1"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Minor Spirit Caster 1"][:Name] == "NONE"
							$share_all_casters["Minor Spirit Caster 1"][:Name] = key
						elsif $share_everyones_stats[key][:Minor_Spirit_spell_ranks] > $share_everyones_stats[$share_all_casters["Minor Spirit Caster 1"][:Name]][:Minor_Spirit_spell_ranks]
							$share_all_casters["Minor Spirit Caster 1"][:Name] = key
						end
					end
				}
				$share_all_casters["Minor Spirit Caster 1"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Minor Spirit Caster 1"][:Name]][:Minor_Spirit_casts] == 100
				$share_everyones_stats[$share_all_casters["Minor Spirit Caster 1"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Minor Spirit Caster 1"][:Name]
			end
			if $share_all_casters["Minor Spirit Caster 2"][:Name] == "NONE"
				$share_everyones_stats.each{ |key,value|
					if $share_everyones_stats[key][:Total_caster_roles] < number_of_acceptable_caster_roles
						if $share_all_casters["Minor Spirit Caster 2"][:Name] == "NONE"
							$share_all_casters["Minor Spirit Caster 2"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Minor_Spirit_casts] < $share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:Total_Minor_Spirit_casts]
							$share_all_casters["Minor Spirit Caster 2"][:Name] = key
						elsif $share_everyones_stats[key][:Total_Minor_Spirit_casts] == $share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:Total_Minor_Spirit_casts] && $share_everyones_stats[key][:Minor_Spirit_casts] < $share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:Minor_Spirit_casts]
							$share_all_casters["Minor Spirit Caster 2"][:Name] = key
						end
					end
				}
				$share_all_casters["Minor Spirit Caster 2"][:Name] = "NONE" if $share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:Minor_Spirit_casts] == 100
				$share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:Total_caster_roles] += 1 if $share_all_casters["Minor Spirit Caster 2"][:Name]
			end
			number_of_acceptable_caster_roles += 1
			break if $share_all_casters["Ranger"][:Name] != "NONE" && $share_all_casters["Wizard"][:Name] != "NONE" && $share_all_casters["Paladin"][:Name] != "NONE" && $share_all_casters["Monk"][:Name] != "NONE" && $share_all_casters["Major Spirit"][:Name] != "NONE" && $share_all_casters["Minor Spirit Caster 1"][:Name] != "NONE" && $share_all_casters["Minor Spirit Caster 2"][:Name] != "NONE" && $share_all_casters["Major Elemental"][:Name] != "NONE" && $share_all_casters["Rapid Fire"][:Name] != "NONE" && $share_all_casters["Minor Elemental"][:Name] != "NONE" && $share_all_casters["ED3"][:Name] != "NONE"
		}
		
		$share_all_those_spells_to_cast = Array.new
		$share_all_casters.each{ |key,value|
			if key == "Ranger"
				spell_list_to_whisper = all_ranger_spells
			elsif key == "Wizard"
				spell_list_to_whisper = [ 911 ]
			elsif key == "Paladin"
				spell_list_to_whisper = all_paladin_spells
			elsif key == "Minor Spirit Caster 1"
				spell_list_to_whisper = all_minor_spirit_spells_1
			elsif key == "Minor Spirit Caster 2"
				spell_list_to_whisper = all_minor_spirit_spells_2
			elsif key == "Major Spirit"
				spell_list_to_whisper = all_major_spirit_spells
			elsif key == "Minor Elemental"
				spell_list_to_whisper = all_minor_elemental_spells
			elsif key == "ED3"
				spell_list_to_whisper = [ 419 ]
			elsif key == "Major Elemental"
				spell_list_to_whisper = all_major_elemental_spells
			elsif key == "Monk"
				spell_list_to_whisper = all_monk_spells
			elsif key == "Rapid Fire"
				spell_list_to_whisper = [ 515 ]
			end
			if $share_all_casters[key][:Name] != checkname && $share_all_casters[key][:Name] != "NONE"
				fput "whisper ooc #{$share_all_casters[key][:Name]} You are casting: #{spell_list_to_whisper}."
			elsif $share_all_casters[key][:Name] == checkname
				spell_list_to_whisper.each{ |i| $share_all_those_spells_to_cast.push(i) unless $share_all_those_spells_to_cast.include?(i)}
			end
		}
		share_highlight_message("I have assigned all spell duties. Waiting 3 seconds before getting this party started.")
		sleep 3
		$share_universal_sender = "NONE"
		$share_everyones_stats.each{ |key,value| 
			if $share_everyones_stats[key][:SMC] == "YES" && $share_everyones_stats[key][:EMC] == "YES" && $share_everyones_stats[key][:MMC] == "YES"
				$share_universal_sender = key
				break
			end
		}
		$share_everyone_opted_out.push(checkname) if $share_opting_out == "all"
		fput "whisper ooc group Everyone opting out of spells: #{$share_everyone_opted_out.join(', ')}." if $share_everyone_opted_out.count > 0
		sleep 1
		fput "whisper ooc group Let the spells fly! The casters are: Ranger: #{$share_all_casters["Ranger"][:Name]}: #{$share_everyones_stats[$share_all_casters["Ranger"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Ranger"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Ranger"][:Name]][:MMC]}. Wizard: #{$share_all_casters["Wizard"][:Name]}: #{$share_everyones_stats[$share_all_casters["Wizard"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Wizard"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Wizard"][:Name]][:MMC]}. Paladin: #{$share_all_casters["Paladin"][:Name]}: #{$share_everyones_stats[$share_all_casters["Paladin"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Paladin"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Paladin"][:Name]][:MMC]}. Monk: #{$share_all_casters["Monk"][:Name]}: #{$share_everyones_stats[$share_all_casters["Monk"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Monk"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Monk"][:Name]][:MMC]}. Major Spirit: #{$share_all_casters["Major Spirit"][:Name]}: #{$share_everyones_stats[$share_all_casters["Major Spirit"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Major Spirit"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Major Spirit"][:Name]][:MMC]}. Minor Spirit caster 1: #{$share_all_casters["Minor Spirit Caster 1"][:Name]}: #{$share_everyones_stats[$share_all_casters["Minor Spirit Caster 1"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Minor Spirit Caster 1"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Minor Spirit Caster 1"][:Name]][:MMC]}. Minor Spirit caster 2: #{$share_all_casters["Minor Spirit Caster 2"][:Name]}: #{$share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Minor Spirit Caster 2"][:Name]][:MMC]}. Major Elemental: #{$share_all_casters["Major Elemental"][:Name]}: #{$share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Major Elemental"][:Name]][:MMC]}. Minor Elemental: #{$share_all_casters["Minor Elemental"][:Name]}: #{$share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Minor Elemental"][:Name]][:MMC]}. Rapid Fire: #{$share_all_casters["Rapid Fire"][:Name]}: #{$share_everyones_stats[$share_all_casters["Rapid Fire"][:Name]][:SMC]}, #{$share_everyones_stats[$share_all_casters["Rapid Fire"][:Name]][:EMC]}, #{$share_everyones_stats[$share_all_casters["Rapid Fire"][:Name]][:MMC]}. Universal Sender: #{$share_universal_sender}."
		respond
		respond "#{monsterbold_start}------------------------------------------------------------#{monsterbold_end}\n"
		respond "#{monsterbold_start}All casters:#{monsterbold_end}\n"
		respond "Ranger spells:                #{$share_all_casters["Ranger"][:Name]}"
		respond "Wizard spells:                #{$share_all_casters["Wizard"][:Name]}"
		respond "Paladin spells:               #{$share_all_casters["Paladin"][:Name]}"
		respond "Monk spells:                  #{$share_all_casters["Monk"][:Name]}"
		respond "Major Spirit spells:          #{$share_all_casters["Major Spirit"][:Name]}"
		respond "Minor Spirit spells caster 1: #{$share_all_casters["Minor Spirit Caster 1"][:Name]}"
		respond "Minor Spirit spells caster 2: #{$share_all_casters["Minor Spirit Caster 2"][:Name]}"
		respond "Major Elemental Spells:       #{$share_all_casters["Major Elemental"][:Name]}"
		respond "Minor Elemental Spells:       #{$share_all_casters["Minor Elemental"][:Name]}"
		respond "Rapid Fire(515):              #{$share_all_casters["Rapid Fire"][:Name]}"
		respond "Universal Sender:             #{$share_universal_sender}"
		respond "#{monsterbold_start}------------------------------------------------------------#{monsterbold_end}\n"
		respond
		if $share_all_those_spells_to_cast.count > 0
			share_highlight_message("All of the spells you are casting: #{$share_all_those_spells_to_cast}")
			first_time_casting = true
			if $share_all_those_spells_to_cast.count == 1 && $share_all_those_spells_to_cast.include?(515)
				give_everyone_515.call
			else
				cast_those_spells.call
			end
		else
			$share_time_to_send_mana = true
		end
	end
}

time_to_share_stats = proc{
	if checkname != $share_group_leader
		message = "Spells I can cast: "
		message += "Minor Spirit Yes, " if Spells.minorspiritual >= 12
		message += "Major Spirit Yes, " if Spells.majorspiritual >= 7
		message += "Minor Elemental Yes, " if Spells.minorelemental >= 6
		message += "Major Elemental Yes, " if Spells.majorelemental >= 11
		message += "Wizard Yes, " if Spells.wizard >= 11
		message += "Ranger Yes, " if Spells.ranger >= 18
		message += "Monk Yes, " if Spells.minormental >= 8
		message += "Paladin Yes, " if Spells.paladin >= 1
		message += "Rapid Fire Yes, " if Spells.majorelemental >= 15
		message.chop!.chop!
		fput "whisper ooc #{$share_group_leader} #{message}."
	else
		share_highlight_message("Waiting 3 seconds for everyone to give me their stats.")
		sleep 3
		group_count = 1
		# fput "group"
		# while line = get
			# if line =~ /^[a-zA-Z]+ is following you\./
				# group_count += 1
			# elsif line =~ /^Your group status is currently/
				# break
			# end
		# end
		status_tags
		res = dothistimeout 'group',3,/^You are/
		status_tags
		if res = nil
			break
		else
			grouped = res.scan(/noun="([^"]+)"/).flatten
			group_count= grouped.length() + 1
		end
		
		$share_spells_players_can_cast.store(checkname, :Minor_Spirit => "No", :Major_Spirit => "No", :Minor_Elemental => "No", :Major_Elemental => "No", :Wizard => "No", :Ranger => "No", :Monk => "No", :Paladin => "No", :Rapid_Fire => "No")
		$share_spells_players_can_cast[checkname][:Minor_Spirit] = "Yes" if Spells.minorspiritual >= 12
		$share_spells_players_can_cast[checkname][:Major_Spirit] = "Yes" if Spells.majorspiritual >= 7
		$share_spells_players_can_cast[checkname][:Minor_Elemental] = "Yes" if Spells.minorelemental >= 6
		$share_spells_players_can_cast[checkname][:Major_Elemental] = "Yes" if Spells.majorelemental >= 9
		$share_spells_players_can_cast[checkname][:Wizard] = "Yes" if Spells.wizard >= 11
		$share_spells_players_can_cast[checkname][:Ranger] = "Yes" if Spells.ranger >= 18
		$share_spells_players_can_cast[checkname][:Monk] = "Yes" if Spells.minormental >= 8
		$share_spells_players_can_cast[checkname][:Paladin] = "Yes" if Spells.paladin >= 1
		$share_spells_players_can_cast[checkname][:Rapid_Fire] = "Yes" if Spells.majorelemental >= 15
		all_messages = Hash.new
		$share_spells_players_can_cast.each{ |key,value|
			all_messages["Minor Spirit"] += "#{key}, " if $share_spells_players_can_cast[key][:Minor_Spirit] == "Yes"
			all_messages["Major Spirit"] += "#{key}, " if $share_spells_players_can_cast[key][:Major_Spirit] == "Yes"
			all_messages["Minor Elemental"] += "#{key}, " if $share_spells_players_can_cast[key][:Minor_Elemental] == "Yes"
			all_messages["Major Elemental"] += "#{key}, " if $share_spells_players_can_cast[key][:Major_Elemental] == "Yes"
			all_messages["Wizard"] += "#{key}, " if $share_spells_players_can_cast[key][:Wizard] == "Yes"
			all_messages["Ranger"] += "#{key}, " if $share_spells_players_can_cast[key][:Ranger] == "Yes"
			all_messages["Monk"] += "#{key}, " if $share_spells_players_can_cast[key][:Monk] == "Yes"
			all_messages["Paladin"] += "#{key}, " if $share_spells_players_can_cast[key][:Paladin] == "Yes"
			all_messages["Rapid Fire"] += "#{key}, " if $share_spells_players_can_cast[key][:Rapid_Fire] == "Yes"
		}
		respond
		respond "#{monsterbold_start}------------------------------------------------------------#{monsterbold_end}\n"
		respond "#{monsterbold_start}All spells people can cast:#{monsterbold_end}\n"
		respond "Minor Spirit:           #{all_messages["Minor Spirit"].chop!.chop!}"
		respond "Major Spirit:           #{all_messages["Major Spirit"].chop!.chop!}"
		respond "Minor Elemental:        #{all_messages["Minor Elemental"].chop!.chop!}"
		respond "Major Elemental:        #{all_messages["Major Elemental"].chop!.chop!}"
		respond "Wizard:                 #{all_messages["Wizard"].chop!.chop!}"
		respond "Ranger:                 #{all_messages["Ranger"].chop!.chop!}"
		respond "Monk:                   #{all_messages["Monk"].chop!.chop!}"
		respond "Paladin:                #{all_messages["Paladin"].chop!.chop!}"
		respond "Rapid Fire:             #{all_messages["Rapid Fire"].chop!.chop!}"
		respond "Total people in group:  #{group_count}"
		respond "#{monsterbold_start}------------------------------------------------------------#{monsterbold_end}\n"
		respond
	end
}

Thread.new{
	loop{
		wait_until { Spell[515].active? && already_asked_for_515 }
		already_asked_for_515 = nil
		sleep 0.1
	}
}

Thread.new{
		if variable[1].downcase =~ /start/
				the_command = "start"
		elsif variable[1].downcase =~ /stats/
				the_command = "stats"
		end
		$share_group_leader = nil
		# fput "group"
		# while line = get
			# if line =~ /^[a-zA-Z]+ is following you\./
				# $share_group_leader = checkname
				# break
			# elsif line =~ /^Your group status is currently/
				# break 
			# end
		# end
		res = dothistimeout 'group',3,/^You are leading/
		echo res
		if res = nil
			break
		else
			$share_group_leader = checkname
		end
			

			
			if $share_group_leader == checkname
				if the_command == "start"
					$share_everyones_stats = Hash.new
					$share_everyone_opted_out = Array.new
					fput "whisper ooc group Let's get this party started."
					get_started.call
				elsif the_command == "stats"
					$share_spells_players_can_cast = Hash.new
					fput "whisper ooc group Share your stats with me."
					time_to_share_stats.call
				end
			else
				share_highlight_message("You are not the party leader. Only the party leader can use this command.")
			end
	}

loop{
	wait_until { $share_time_to_get_started || $share_time_to_share_stats || $share_time_for_spells }
	if $share_time_to_get_started
		get_started.call
	elsif $share_time_to_share_stats
		time_to_share_stats.call
	elsif $share_time_for_spells
		first_time_casting = true
		if $share_all_those_spells_to_cast.count == 1 && $share_all_those_spells_to_cast.include?(515)
			give_everyone_515.call
		else
			cast_those_spells.call
		end
	end
	$share_time_to_get_started = nil
	$share_time_to_share_stats = nil
	$share_time_for_spells = nil
}