=begin

  NesMapper by Nesmeor

  This will gather room data and add it to a JSON file. Specificaly it will add room
  information (id, location, title) as well as any aggresive npcs found in the room.

  If you are a ranger or rogue it will also attempt to sense the room if it does not already have
  data for it.

  You can use ;nesmapper auto to run continuously, by default it will not attempt to grab
  room data while go2 is running. You can toggle this using ;nesmapper toggle.

  Delay will for go2 will be set to 1 for the duration of the script, then back to 0 at the end.

  Room sensing can be disabled with ;nesmapper sense_toggle

  If you have issues find me on GSIV Discord. Thanks to the #scripting channel folx for all the helps!

   author: Nesmeor
     name: NesMapper
     tags: mapping, sense, creatures
  version: 0.5.1
     date: 5/9/2021
  
  Changelog
  0.5.1 - More args fixes
  0.5.0 - Added get tags functionality, fixed bad args handling
  0.4.4 - Added tag debugging
  0.4.3 - Fixed room display bug
  0.4.2 - Only repeat if *outside
  0.4.1 - Changed terrain sensing to only repeat if outdoors
  0.4.0 - Can now toggle room sensing off
  0.3.1 - Fixed messaging bug
  0.3.0 - Added bigshot to pausable scripts, implemented auto go2 delay, fixed ranger sense bug
  0.2.0 - Added room deletion
  0.1.0 - Added rogue sensing and go2 related awareness
  0.0.1 - initial release

=end

$debug = true

if CharSettings[:go2_avoid] == nil
  CharSettings[:go2_avoid] = true
end
if CharSettings[:sense_room] == nil
  CharSettings[:sense_room] = true
end
if CharSettings[:debug] == nil
  CharSettings[:debug] = false
end

class NesMapper
  # setting
  @@path =  DATA_DIR
  @@filename = "/nesmapper.json"

  def initialize
    @rooms = []
    @current_room_id = ""
    @go2_avoid = CharSettings[:go2_avoid]
    @sense_room = CharSettings[:sense_room]
    # initialize data
    msg("File: #{@@path}#{@@filename}","debug")

    if File.exists?("#{@@path}#{@@filename}")
      # if file exists, load it
      file = File.read("#{@@path}#{@@filename}")
      @rooms = JSON.parse(file)
    else
      msg("File not found. Creating new file.","warn")
    end

    before_dying { 
      write_file 
    }
  end

  def self.show_help
    respond "Usage: ;nesmapper to document a single room"
    respond ""
    respond ";nesmapper auto to run continuously"
    respond ""
    respond "Do not run auto on multiple accounts from the same folder."
    respond ""
    respond "Note: By default neither method will try to document rooms while"
    respond "go2 is running. To toggle this behavior use ;nesmapper go2_toggle"
    respond ""
    respond "Can disable room sensing with ;nesmapper sense_toggle"
  end

  def write_file
    File.write("#{@@path}#{@@filename}", JSON.dump(@rooms))
  end

  def msg(text, type = "info")
    # send debug messages if debugging
    if type == "debug"
      if $debug == true
        echo ">> #{text}"
      end
    elsif $frontend == 'stormfront' and type != "debug"
      if type == "error"
        puts "\<preset id=\"thought\"\>ERROR: #{text}\<\/preset\>"
      elsif type == "warn"
        puts "\<pushBold\/\>WARNING: #{text}\<popBold\/\>"
      elsif type == "info"
        puts "\<preset id=\"whisper\"\>#{text}\<\/preset\>"
      else
        echo text
      end
    elsif type == "error"
      echo "** #{text}"
    elsif type == "warn"
      echo "!! #{text}"
    elsif type == "info"
      echo "-- #{text}"
    else
      echo text
    end
  end 

  def current_room_id
    return Room.current.id
  end

  def get_room (id=current_room_id)
    result = @rooms.find { | room | 
      room["id"] == id 
    }
    return result
  end

  def check_room (id=current_room_id)
    if !get_room(id)
      add_current_room
    end
  end

  def room_has_tag? (tag, id=current_room_id)
    room = get_room(id)
    if room[tag] != "" and room[tag] != nil
      msg("Tag [#{tag}] exists for room id ##{id}}: #{room[tag]}.", "debug")
      return true
    else
      msg("Tag [#{tag}] does not exist for room id ##{id}}.", "debug")
      return false
    end
  end

  def add_current_room()
    new_room = {}
    new_room["id"] = current_room_id
    new_room["title"] = Room.current.title
    new_room["location"] = Room.current.location
    new_room["creatures"] = []

    @rooms.push(new_room)
    write_file
    msg("Room added, id: #{current_room_id}","info")
    msg("Room added: #{new_room}","debug") 
  end

  def add_tag(tag, value, id=current_room_id)
    room = get_room(id)
    if room[tag] == "" or room[tag] == nil or room [tag] == false
      if value == "" or value == nil or value == false
        msg("Value is empty!","error")
      else
        room[tag] = (value) 
        write_file
      end 
    else
      msg("#{tag} already exists for this room!", "warn")
    end
  end

  def get_tags(tag, value, display=false)
    msg("get_tags Tag: #{tag} Value: #{value}","debug")
    results = @rooms.select { | room | 
      room[tag] == value 
    }
    if display
      msg("Rooms with value #{value} for tag #{tag}:")
      results.each { | room | 
        msg("room: #{room["title"]}","info")
        msg("id: #{room["id"]}","info")
        msg("#{tag}: #{room[tag]}","info")
        respond ""
      }
    end
    return results      
  end

  def get_tag(tag, value, id=current_room_id)
    msg("Tag: #{tag} Value: #{value}","debug")
    @result = @rooms.find { | room | 
      room[tag] == value  and room["id"] == id
    }
  end

  def check_creature(creature, id=current_room_id)
    room = get_room(id)
    result = room["creatures"].include?(creature)
    if result 
      msg("Creature #{creature} already known for room","debug")
      return true
    else
      return false
    end
  end

  def add_creature(new_creature, id=current_room_id)
    room = get_room(id)
    room["creatures"].push(new_creature)
    write_file
    msg("Creature #{new_creature} added for room", "info")
  end

  def check_npcs()
    GameObj.npcs.each { | npc | 
      if npc.type == "aggressive npc" 
        #if creature doesn't already exist, add it
        if !check_creature(npc.name)
          add_creature(npc.name)
        end
      end
    }
  end

  def get_climate(result)
    if result =~ /arid/
      return "arid"
    elsif result =~ /cold, damp/
      return "cold, damp"
    elsif result =~ /cold, dry/
      return "cold, dry"
    elsif result =~ /freshwater/
      return "freshwater"
    elsif result =~ /glacial/
      return "glacial"
    elsif result =~ /hot, damp/
      return "hot, damp"
    elsif result =~ /hot, humid/
      return "hot, humid"
    elsif result =~ /humid/
      return "humid"
    elsif result =~ /moist/
      return "moist"
    elsif result =~ /saltwater/
      return "saltwater"
    elsif result =~ /snowy, arctic/
      return "snowy, arctic"
    elsif result =~ /temperate/
      return "temperate"
    elsif result =~ /find no new insight/
      if outside?
        return false
      else
        return "indoors"
      end
    else
      msg("Climate not found! Result: #{result}","error")
      return false
    end
  end

  def get_terrain(result)
    if result =~ /barren scrub/
      return "barren scrub"
    elsif result =~ /coniferous/
      return "coniferous"
    elsif result =~ /cultivated/
      return "cultivated"
    elsif result =~ /deciduous/
      return "deciduous"
    elsif result =~ /grassland/
      return "grassland"
    elsif result =~ /hard, flat/
      return "hard, flat"
    elsif result =~ /plain dirt/
      return "plain dirt"
    elsif result =~ /hilly/
      return "hilly"
    elsif result =~ /mountainous/
      return "mountainous"
    elsif result =~ /riparian/
      return "riparian"
    elsif result =~ /rough/
      return "rough"
    elsif result =~ /sandy/
      return "sandy"
    elsif result =~ /subterranean/
      return "subterranean"
    elsif result =~ /tropical/
      return "tropical"
    elsif result =~ /find no new insight/
      if outside?
        echo "outside check"
        return false
      else
        return "indoors"
      end
    else
      msg("Terrain not found! Result: #{result}","error")
      return false
    end
  end

  def get_lighting(result)
    if result =~ /foggy/
      if result =~ /extremely bright/
        return "bright_foggy"
      elsif result =~ /pretty average/
        return "average_foggy"
      elsif result =~ /rather dark/
        return "dark_foggy"
      end
    elsif result =~ /extremely bright/
      return "bright_nofog"
    elsif result =~ /pretty average/
      return "average_nofog"
    elsif result =~ /rather dark/
      return "dark_nofog"
    elsif result =~ /messed up lighting/
      return "bugged"
    elsif result =~ /you're not really skilled enough/
      return false
    else
      msg("Lighting not found! Result: #{result}","error")
      return false
    end
  end

  def find_nearest_room (list)
    start_room = Room.current
    if list.include?(start_room.id)
      nearest_id = start_room.id
    else
      previous, shortest_distances = Map.dijkstra(start_room.id, list)
      nearest_id = least_time = nil
      for target in list
        est_time = shortest_distances[target]
        if !est_time.nil? and (least_time.nil? or least_time > est_time)
          nearest_id = target
          least_time = est_time
        end
      end
    end
    return nearest_id
  end

  def find_nearest_tag (tag,value)
    list = []
    tags_list = []
    msg("Finding nearest value \"#{value}\" for tag \"#{tag}\"","debug")
    tags_list = get_tags(tag, value)
    tags_list.each { | room | 
      list.append(room["id"])
    }
    echo list
    start_room = Room.current
    if list.include?(start_room.id)
      nearest_id = start_room.id
    else
      previous, shortest_distances = Map.dijkstra(start_room.id, list)
      nearest_id = least_time = nil
      for target in list
        est_time = shortest_distances[target]
        if !est_time.nil? and (least_time.nil? or least_time > est_time)
          nearest_id = target
          least_time = est_time
        end
      end
    end
    msg("Nearest id: #{nearest_id}","debug")
    return nearest_id
  end

  def display_room(id=current_room_id)
    result = get_room(id)
    result.each { | key, value |
      msg("#{key}: #{value}","info")
    }
  end

  def delete_room(id=current_room_id)
    @rooms.delete_if { | room | 
      room["id"] == id
    }
    msg("Room id:#{id} deleted.")
  end

  def pause_scripts
    if Script.running?("go2")
      Script.pause("go2")
    end

    if Script.running?("wander")
      Script.pause("wander")
    end

    if Script.running?("bigshot")
      Script.pause("bigshot")
    end
  end

  def unpause_scripts
    if Script.paused?("go2")
      Script.unpause("go2")
    end

    if Script.paused?("wander")
      Script.unpause("wander")
    end

    if Script.paused?("bigshot")
      Script.unpause("bigshot")
    end
  end

  def ranger_sense
    if Char.prof == "Ranger" and room_has_tag?("climate") == false
      result = dothistimeout "sense", 30, /You scan your surroundings|You carefully assess/

      climate = get_climate(result)
      climate_result = add_tag("climate", climate) 

      terrain = get_terrain(result)
      terrain_result = add_tag("terrain", terrain)
      if climate_result and terrain_result
        msg("Climate and terrain added for room id: #{current_room_id}.", "info")
        msg("Climate: #{climate} Terrain: #{terrain}","info")
      else
        msg("Could not add sense data, retrying.","info")
        ranger_sense
      end
    end
  end

  def rogue_sense
    if Char.prof == "Rogue" and !room_has_tag?("lighting")
      result = dothistimeout "lm sense", 30, /As far as you can tell, /
      lighting = get_lighting(result)
      lighting_result = add_tag("lighting", lighting)
      if lighting_result
        msg("Lighting added for room id: #{current_room_id}.", "info")
        msg("Lighting: #{lighting}","info")
      else
        msg("Could not add lighting data, please try again.","warn")
      end
    end
  end

  def update_room
    # don't try to update rooms while go2 is running
    if Script.running?("go2") and @go2_avoid
      return
    end

    # if room doesn't exist, add it's data
    check_room

    # check room for agressive npcs
    check_npcs

    if @sense_room
      # if player is a ranger and the room hasn't already been sensed
      ranger_sense

      # if player is a rogue and the room hasn't already been lm sensed
      rogue_sense
    end
  end

  def auto_mapper
    if !@go2_avoid
      Script.run("go2","delay=0.5")
      before_dying { 
        Script.run "go2", "delay=0"
      }
    end
    loop {
      # don't try to update rooms while go2 is running
      while Script.running?("go2") and @go2_avoid
        pause 0.5
      end
      while Script.running?("bigshot") and @go2_avoid
        pause 0.5
      end

      # if we've changed rooms
      if @current_room_id != current_room_id
        pause_scripts
        update_room
        unpause_scripts
        @current_room_id = current_room_id
      else
        pause 0.25
      end
    }
  end
end


if script.vars[1] == "help"
  NesMapper.show_help
  exit
elsif script.vars[1] =="go2_toggle"
  if CharSettings[:go2_avoid]
    CharSettings[:go2_avoid] = false
    echo "Will now attempt to grab data while go2 is running"
    echo "Make sure your go2 delay is AT LEAST 0.5"
    exit
  else
    CharSettings[:go2_avoid] = true
    echo "No longer attempting to grab data while go2 is running"
    exit
  end
elsif script.vars[1] =="sense_toggle"
  if CharSettings[:sense_room]
    CharSettings[:sense_room] = false
    echo "Will no longer sense rooms that are missing sense data"
    exit
  else
    CharSettings[:sense_room] = true
    echo "Will now sense rooms that are missing sense data"
    exit
  end
elsif script.vars[1] =="debug_toggle"
  if CharSettings[:debug]
    CharSettings[:debug] = false
    echo "Debugging disabled."
    exit
  else
    CharSettings[:debug] = true
    echo "Debugging enabled"
    exit
  end
elsif script.vars[1] == "current_room"
  map = NesMapper.new
  map.display_room
  exit
elsif script.vars[1] == "delete_room"
  map = NesMapper.new
  map.delete_room
  exit
elsif script.vars[1] == "auto"
  map = NesMapper.new
  map.auto_mapper
  exit
elsif script.vars[1] == "check_climate"
  map = NesMapper.new
  map.room_has_tag?("climate")
  exit
elsif script.vars[1] == "get"
  tag = script.vars[2]
  value = script.vars[3]
  map = NesMapper.new
  map.get_tags(tag,value,true)
  exit
else
  map = NesMapper.new
  map.update_room 
end
