=begin

  NesMapper by Nesmeor

  This will gather room data and add it to a JSON file. Specificaly it will add room
  information (id, location, title) as well as any aggresive npcs found in the room.

  If you are a ranger it will also attempt to sense the room if it does not already have
  data for it.

  If you have issues find me on GSIV Discord.

   author: Nesmeor
     name: NesMapper
     tags: mapping, sense, creatures
  version: 0.0.1
  
  Changelog
  0.0.1 - initial release

=end

$debug = true

class NesMapper
  # setting
  @@path =  DATA_DIR
  @@filename = "/nesmapper.json"

  def initialize
    @rooms = []
    @current_room_id = ""
    # initialize data
    msg("File: #{@@path}#{@@filename}","debug")

    if File.exists?("#{@@path}#{@@filename}")
      # if file exists, load it
      file = File.read("#{@@path}#{@@filename}")
      @rooms = JSON.parse(file)
    else
      msg("File not found. Creating new file.","warn")
    end

    before_dying { write_file }
  end

  def self.show_help
    respond "Usage: ;nesmapper to document a single room"
    respond ";nesmapper auto to run continuously"
    respond "Do not run auto on multiple accounts from the same folder."
    respond "Note: Neither method will try to document rooms while go2 is running"
  end

  def write_file
    File.write("#{@@path}#{@@filename}", JSON.dump(@rooms))
  end

  def msg(text, type = "info")
    # send debug messages if debugging
    if type == "debug" and $debug == true
      echo ">> #{text}"
    elsif $frontend == 'stormfront' and type != "debug"
      if type == "error"
        puts "\<preset id=\"thought\"\>ERROR: #{text}\<\/preset\>"
      elsif type == "warn"
        puts "\<pushBold\/\>WARNING: #{text}\<popBold\/\>"
      elsif type == "info"
        puts "\<preset id=\"whisper\"\>#{text}\<\/preset\>"
      else
        echo text
      end
    elsif type == "error"
      echo "** #{text}"
    elsif type == "warn"
      echo "!! #{text}"
    elsif type == "info"
      echo "-- #{text}"
    else
      echo "text"
    end
  end 

  def current_room_id
    return Room.current.id
  end

  def get_room (id=current_room_id)
    result = @rooms.find { | room | 
      room["id"] == id 
    }
    return result
  end

  def check_room (id=current_room_id)
    if !get_room(id)
      add_current_room
    end
  end

  def room_has_tag? (tag, id=current_room_id)
    room = get_room(id)
    if room[tag] != ""
      return true
    end
  end

  def add_current_room()
    new_room = {}
    new_room["id"] = current_room_id
    new_room["title"] = Room.current.title
    new_room["location"] = Room.current.location
    new_room["climate"] = ""
    new_room["terrain"] = ""
    new_room["creatures"] = []

    @rooms.push(new_room)
    write_file
    msg("Room added, id: #{current_room_id}","info")
    msg("Room added: #{new_room}","debug") 
  end

  def add_tag(tag, value, id=current_room_id)
    room = get_room(id)
    if room[tag] == ""
      room[tag] = (value) 
      write_file
    else
      msg("#{tag} already exists for this room!", "warn")
    end
  end

  def check_creature(creature, id=current_room_id)
    room = get_room(id)
    result = room["creatures"].include?(creature)
    if result 
      msg("Creature #{creature} already known for room","debug")
      return true
    else
      return false
    end
  end

  def add_creature(new_creature, id=current_room_id)
    room = get_room(id)
    room["creatures"].push(new_creature)
    write_file
    msg("Creature #{new_creature} added for room", "info")
    echo room
  end

  def check_npcs()
    GameObj.npcs.each { | npc | 
      if npc.type == "aggressive npc" 
        #if creature doesn't already exist, add it
        if !check_creature(npc.name)
          add_creature(npc.name)
        end
      end
    }
  end

  def get_climate(result)
    if result =~ /arid/
      return "arid"
    elsif result =~ /cold, damp/
      return "cold, damp"
    elsif result =~ /cold, dry/
      return "cold, dry"
    elsif result =~ /freshwater/
      return "freshwater"
    elsif result =~ /glacial/
      return "glacial"
    elsif result =~ /hot, damp/
      return "hot, damp"
    elsif result =~ /hot, humid/
      return "hot, humid"
    elsif result =~ /humid/
      return "humid"
    elsif result =~ /moist/
      return "moist"
    elsif result =~ /saltwater/
      return "saltwater"
    elsif result =~ /snowy, arctic/
      return "snowy, arctic"
    elsif result =~ /temperate/
      return "temperate"
    elsif result =~ /find no new insight/
      return false
    else
      msg("Climate not found!","error")
      return false
    end
  end

  def get_terrain(result)
    if result =~ /barren scrub/
      return "barren scrub"
    elsif result =~ /coniferous/
      return "coniferous"
    elsif result =~ /cultivated/
      return "cultivated"
    elsif result =~ /deciduous/
      return "deciduous"
    elsif result =~ /grassland/
      return "grassland"
    elsif result =~ /hard, flat/
      return "hard, flat"
    elsif result =~ /plain dirt/
      return "plain dirt"
    elsif result =~ /hilly/
      return "hilly"
    elsif result =~ /mountainous/
      return "mountainous"
    elsif result =~ /riparian/
      return "riparian"
    elsif result =~ /rough/
      return "rough"
    elsif result =~ /sandy/
      return "sandy"
    elsif result =~ /subterranean/
      return "subterranean"
    elsif result =~ /tropical/
      return "tropical"
    elsif result =~ /find no new insight/
      return false
    else
      msg("Terrain not found!","error")
      return false
    end
  end

  def ranger_sense
    if Char.prof == "Ranger" and !room_has_tag?("climate")
      result = dothistimeout "sense", 5, /You scan your surroundings|You carefully assess/

      climate = get_climate(result)
      climate_result = add_tag("climate", climate) 

      terrain = get_terrain(result)
      terrain_result = add_tag("terrain", terrain)
      if climate_result and terrain_result
        msg("Climate and terrain added for room id: #{current_room.id}.", "info")
      else
        #TODO: Auto repeat
        msg("Could not add sense data, try again.")
      end
    end
  end

  def update_room
    # don't try to update rooms while go2 is running
    if Script.running?("go2")
      return
    end

    # if room doesn't exist, add it's data
    check_room

    # check room for agressive npcs
    check_npcs

    # if player is a ranger and the room hasn't already been sensed
    ranger_sense
  end

  def auto_mapper
    loop {
      # don't try to update rooms while go2 is running
      while Script.running?("go2")
        pause 0.5
      end

      # if we've changed rooms
      if @current_room_id != current_room_id
        update_room
      else
        pause 0.25
      end
    }
  end
end

if script.vars[1] == "help"
  NesMapper.show_help
elsif script.vars[1] == "auto"
  map = NesMapper.new
  map.auto_mapper
else
  map = NesMapper.new
  map.update_room 
end
