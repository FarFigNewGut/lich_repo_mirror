=begin

	Just a fun little script that generates a random gemstone. It uses the odds to generate a Legendary, Rare, Double Common, or Common based loosely on the odds I have experienced finding in game gemstones so far.
	
	It tracks how many gemstones you have created as well as how many years/months/weeks it would have taken you to find that gemstone in game.
	
	Generate gemstones while you're looking for gemstones in game! Why not double your disappointment!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 3

=end

class GenerateGemstoneMain
	@all_widgets = {}
	widget_names = [ "Grids", "Labels", "Buttons" ]
	widget_names.each{ |name| @all_widgets[name] = {} }
	@total_number_of_rolls = 0
	
	@all_common_properties = [ "Arcane Intensity", "Binding Shot", "Blood Artist", "Blood Prism", "Boatswain's Savvy", "Bold Brawler", "Burning Blood", "Cannoneer's Savvy", "Channeler's Edge", "Consummate Professional", "Cutting Corners", "Dispulsion Ward", "Elemental Resonance", "Elementalist's Gift", "Ephemera's Extension", "Ether Flux", "Flare Resonance", "Force of Will", "Geomancer's Spite", "Grand Theft Kobold", "Green Thumb", "High Tolerance", "Immobility Veil", "Journeyman Defender", "Journeyman Tactician", "Limit Break: [AS-boosting Skill]", "Limit Break: [Stat]", "Mana Prism", "Metamorphic Shield", "Mephitic Brume", "Mystic Magnification", "Navigator's Savvy", "Opportunistic Sadism", "Root Veil", "Slayer's Fortitude", "Spirit Prism", "Stamina Prism", "Storm of Rage", "Subtle Ward", "Tactical Canny", "Taste of Brutality", "Twist the Knife", "Web Veil" ]

	@all_regional_properties = [ "Grimswarm: Shroud Soother", "Hinterwilds: Indigestible", "Hinterwilds: Light of the Disir", "Hinterwilds: Warden of the Damned", "Moonsedge: Gift of Enlightement", "Moonsedge: Organ Enthusiast", "Temple Nelemar: Breath of the Nymph", "Temple Nelemar: Perfect Conduction", "Temple Nelemar: Trident of the Sunderer", "The Hinterwilds: Gift of Enlightement", "The Hive: Arrhythmic Gait", "The Hive: Astral Spark", "The Hive: Gift of Enlightement", "The Rift: Gift of the God-King" ]

	@all_rare_properties = [ "Adaptive Resistance", "Advanced Spell Shielding", "Anointed Defender", "Arcane Opus", "Bandit Bait", "Blood Boil", "Blood Siphon", "Blood Wellspring", "Chameleon Shroud", "Channeler's Epiphany", "Defensive Duelist", "Evanescent Possession", "Grace of the Battlecaster", "Greater Arcane Intensity", "Hunter's Afterimage", "Infusion of [Damage Type]", "Innate Focus", "Lost Arcanum", "Mana Wellspring", "Martial Impulse", "Master Tactician", "Relentless", "Relentless Warder", "Ripe Melon", "Rock Hound", "Serendipitous Hex", "Spirit Wellspring", "Stamina Wellspring", "Strong Back", "Sureshot", "Terror's Tribute", "Tethered Strike", "Thirst for Brutality" ]

	@all_legendary_properties = [ "Arcane Aegis", "Arcanist's Ascendancy", "Arcanist's Blade", "Arcanist's Will", "Charged Presence", "Chronomage Collusion", "Forbidden Arcanum", "Imaera's Balm", "Mana Shield", "Mirror Image", "Mystic Impulse", "One Shot, One Kill", "Pixie's Mischief", "Reckless Precision", "Spellblade's Fury", "Stolen Power", "Thorns of [Damage Type]", "Trueshot", "Unearthly Chains", "Witchhunter's Ascendancy" ]

	@limit_break_as_skills = [ "Edged Weapons", "Blunt Weapons", "Two-Handed Weapons", "Ranged Weapons", "Thrown Weapons", "Pole Arm Weapons", "Brawling", "Spell Aiming" ]
	@limit_break_stats = [ "Strength", "Constitution", "Dexterity", "Agility", "Discipline", "Aura", "Logic", "Intuition", "Wisdom", "Influence" ]
	@all_damage_types = [ "Acid", "Cold", "Disintegration", "Disruption", "Electric", "Heat", "Plasma", "Steam", "Vacuum" ]
	
	def self.rarity_coloring(text, upcase)
		text = text.upcase if upcase
		if text =~ /Legendary/i
			gemstone_text = "<span foreground='gold'><b><u>*#{text}*</u></b></span>"
		elsif text =~ /Rare/i
			gemstone_text = "<span foreground='#00bfff'><b><u>#{text}</u></b></span>"
		else
			gemstone_text = "<span foreground='white'><b><u>#{text}</u></b></span>"
		end
	end
	
	def self.create_main_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.resize(600, 150)
		@main_window.set_border_width(10)
		@main_window.set_position(Gtk::Window::Position::CENTER)
		@main_window.name = "main_window"
		
		@main_window.signal_connect("destroy"){
			@main_window.close
			@main_window = nil
			Gtk.main_quit
			kill_script "generate-gemstone" if running? "generate-gemstone"
		}
		
		grid_names = [ "Main", "Grid-Labels", "Grid-Buttons" ]
		grid_names.each{ |name| @all_widgets["Grids"][name] = Gtk::Grid.new }
		row = -1
		@all_widgets["Grids"]["Main"].attach(@all_widgets["Grids"]["Grid-Buttons"], 0, row += 1, 1, 1)
		@all_widgets["Grids"]["Main"].attach(@all_widgets["Grids"]["Grid-Labels"], 0, row += 1, 1, 1)
		
		@all_widgets["Labels"]["Gemstone Stats"] = Gtk::Label.new("")
		@all_widgets["Buttons"]["Generate Gemstone"] = Gtk::Button.new("Generate Gemstone")
		
		@all_widgets["Buttons"]["Generate Gemstone"].signal_connect("clicked"){
			@total_number_of_rolls += 1
			@all_widgets["Labels"]["Title Label"].text = "Gemstones Generated: #{@total_number_of_rolls}"

			random_number = rand(1..100)
			if random_number <= 2
				gemstone_rarity = "Legendary"
			elsif random_number <= 7
				gemstone_rarity = "Rare"
			elsif random_number <= 17
				gemstone_rarity = "Double Common"
			else
				gemstone_rarity = "Common"
			end
			
			properties = {}
			rarity_values = {}
			
			common = @all_common_properties.dup
			
			if gemstone_rarity == "Legendary"
				properties["One"] = [ common, @all_regional_properties ].sample.sample
				properties["Two"] = @all_rare_properties.sample
				properties["Three"] = @all_legendary_properties.sample
			elsif gemstone_rarity == "Rare"
				properties["One"] = [ common, @all_regional_properties ].sample.sample
				properties["Two"] = @all_rare_properties.sample
			elsif gemstone_rarity == "Double Common"
				properties["One"] = [ common, @all_regional_properties ].sample.sample
				common.delete(properties["One"]) if common.include?(properties["One"])
				properties["Two"] = common.sample
			elsif gemstone_rarity == "Common"
				properties["One"] = [ common, @all_regional_properties ].sample.sample
			end

			rarity_text = rarity_coloring(gemstone_rarity, true)
			text = "#{rarity_text} GEMSTONE FOUND!\n\n"

			properties.each { |property_number,property_value|
				if @all_common_properties.include?(property_value)
					rarity_values[property_number] = "Common"
				elsif @all_regional_properties.include?(property_value)
					rarity_values[property_number] = "Regional"
				elsif @all_rare_properties.include?(property_value)
					rarity_values[property_number] = "Rare"
				elsif @all_legendary_properties.include?(property_value)
					rarity_values[property_number] = "Legendary"
				end
				
				if property_value == "Limit Break: [AS-boosting Skill]"
					properties[property_number].sub!("[AS-boosting Skill]", "")
					properties[property_number] += @limit_break_as_skills.sample
				elsif property_value == "Limit Break: [Stat]"
					properties[property_number].sub!("[Stat]", "")
					properties[property_number] += @limit_break_stats.sample
				elsif property_value =~ /(Infusion|Thorns) of [Damage Type]/
					properties[property_number].sub!("[Damage Type]", "")
					properties[property_number] += @all_damage_types.sample
				end
				
				rarity_text = rarity_coloring(rarity_values[property_number], nil)
				text += "#{rarity_text} - #{properties[property_number]}\n"
			}
			
			total_months = @total_number_of_rolls / 3
			weeks = @total_number_of_rolls % 3

			years = total_months / 12
			months = total_months % 12

			time_text = "Time to get current gem:\n#{years} years, #{months} months, #{weeks} weeks\n"
			
			today_date = Date.today
			future_date = (today_date >> (years * 12 + months)) + (weeks * 7)
			formatted_date = future_date.strftime("%m/%d/%Y")
			
			time_text += "Future date: #{formatted_date}"
			
			@all_widgets["Labels"]["Subtitle Label"].markup = time_text
			
			@all_widgets["Labels"]["Gemstone Stats"].markup = text
		}

		@all_widgets["Grids"]["Grid-Buttons"].attach(@all_widgets["Buttons"]["Generate Gemstone"], 0, 0, 1, 1)
		@all_widgets["Grids"]["Grid-Labels"].attach(@all_widgets["Labels"]["Gemstone Stats"], 0, 0, 1, 1)
		
		header = Gtk::HeaderBar.new
		header.set_name("main_header")
		header.show_close_button = true
		header_box = Gtk::Box.new(:vertical, 0)
		@all_widgets["Labels"]["Title Label"] = Gtk::Label.new("Gemstones Generated: ")
		@all_widgets["Labels"]["Subtitle Label"] = Gtk::Label.new("Time to get current gem:\n")
		header_box.pack_start(@all_widgets["Labels"]["Title Label"], expand: false, fill: false, padding: 0)
		header_box.pack_start(@all_widgets["Labels"]["Subtitle Label"], expand: false, fill: false, padding: 0)
		header_box.show_all
		header.set_custom_title(header_box)
		@main_window.titlebar = header
		
		css = <<-CSS
			#main_window,
			#main_window * {
				background-image: none;
				background-color: #2e3440;
				color: #d8dee9;
				border: none;
				margin: 0;
				box-shadow: none;
			}
			
			#main_header,
			#main_header:backdrop,
			#main_header:focus,
			#main_header:active,
			#main_header.titlebar,
			#main_header.titlebar:backdrop {
				background-image: none;
				background-color: #2e3440;
				color: #2e3440;
				font-weight: bold;
				border-radius: 0px;
				padding: 0px;
			}
			
			  #main_window button{
				background-color: #88c0d0;
				color: black;
				border-radius: 2px;
				padding: 2px;
			}

			#main_window label{
				background-image: none;
				color: #d8dee9;
				border-radius: 0px;
				padding: 0px;
				font-family: "Courier New";
				font-size: 12pt;
			}
		CSS
		
		provider = Gtk::CssProvider.new
		provider.load(data: css)
		Gtk::StyleContext.add_provider_for_screen(
		  Gdk::Screen.default,
		  provider,
		  Gtk::StyleProvider::PRIORITY_APPLICATION
		)
		
		@all_widgets["Labels"].each{ |_,label| label.use_markup = true }

		@main_window.add(@all_widgets["Grids"]["Main"])
		@main_window.show_all
	end
	
	before_dying{ @main_window.close if @main_window }
end

Gtk.queue {
	GenerateGemstoneMain.create_main_window
	Gtk.main
}

sleep