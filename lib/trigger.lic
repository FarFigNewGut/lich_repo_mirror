=begin 
    Waits for some specified text from the game window, then issues your specified command. 
    
    Usage: 
        ;trigger [--once] [--test] [--debug] "text to listen for (can be regex)" "command to run when text is received"
        
        - The text to listen for can be any Ruby regex and can include capture groups. 
        - The command to run can reference the capture groups using %1%, %2%, etc. 
        - Mutiple commands can be chained together using \r.
        - You can use a script as the command, such as ;waggle

    Examples:
   
        - Try out ;trigger for the first time in test mode, which won't send anything to the game
        ;trigger --test "Obvious exits" "inv"
   
        - Wait for "You put" then get your wand:
        ;trigger "You put" "get my wand"
    
        - Whenever "Upy" appears on the screen, poke him:
        ;trigger "(Upy)" "poke %1%"
   
        - The first time "Upy" appears on the screen, poke him, then exit ;trigger:
        ;trigger --once "(Upy)" "poke %1%"
   
        - If a room contains a placard or sign, read it:
        ;trigger "You also see .* (placard|sign)" "read %1%"
   
        - If a room contains both a placard and a sign, read both:
        ;trigger "You also see .* (placard|sign) .* (placard|sign)" "read %1%\r%2%"
   
        - If your spell dissipates, run ;waggle (you must already have the script you're trying to run downloaded):
        ;trigger "The silvery luminescence fades from around you." ";waggle"
   
    Notes:
        - The "text to listen for" can be any Ruby Regular Expression. You can test your regex at a site like https://rubular.com
        - If your regex contains capture groups, the captured text can be used in the command. %1% will be replaced with the first captured text, %2% will be replaced with the second captured text, etc. (Capture groups are parts of the text surrounded by parentheses. See the "poke Upy" example above.)
        - You can send multiple commands by separating commands with \r
        - You can always use --test to see what would happen, without sending anything to the game.
        - You can use --once to only trigger the first time something happens, then exit the trigger script
        - With the --debug flag, you'll get additional output about what's happening internally in the script.

    Author: Upy
    Tags: Utility    
    Version: 2

    Changelog:
    Version 1: Initial release
    Version 2: Added --once option

=end 

testmode=false

if script.vars.any? { |var| var =~ /^--test$/i }
   testmode = true
   script.vars.delete_if { |var| var =~ /^--test$/i }
   script.vars[0] = script.vars[1..-1].join(' ')
end

debugmode=false

if script.vars.any? { |var| var =~ /^--debug$/i }
   debugmode = true
   script.vars.delete_if { |var| var =~ /^--debug$/i }
   script.vars[0] = script.vars[1..-1].join(' ')
end

runonce=false

if script.vars.any? { |var| var =~ /^--once$/i }
   runonce = true
   script.vars.delete_if { |var| var =~ /^--once$/i }
   script.vars[0] = script.vars[1..-1].join(' ')
end


if script.vars.length < 3
    _respond('Usage:')
    _respond('    ;trigger [--test] [--debug] "text to listen for (can be regex)" "command to run when text is received"');
    _respond('');
    _respond('Examples:');
    _respond('');
    _respond('-- Try out ;trigger for the first time in test mode, which won\'t send anything to the game.')
    _respond(';trigger --test "Obvious exits" "inv"');
    _respond('');
    _respond('-- Wait for "You put" then get your wand:');
    _respond(';trigger "You put" "get my wand"');
    _respond('');
    _respond('-- Whenever "Upy" appears on the screen, poke him:');
    _respond(';trigger "(Upy)" "poke %1%"');
    _respond('');
    _respond('-- The first time "Upy" appears on the screen, poke him, then exit ;trigger:');
    _respond(';trigger --once "(Upy)" "poke %1%"');
    _respond('');
    _respond('-- If a room contains a placard or sign, read it:');
    _respond(';trigger "You also see .* (placard|sign)" "read %1%"');
    _respond('');
    _respond('-- If a room contains both a placard and a sign, read both:');
    _respond(';trigger "You also see .* (placard|sign) .* (placard|sign)" "read %1%\r%2%"');
    _respond('');
    _respond('-- If your spell dissipates, run ;waggle (you must already have the script you\'re trying to run downloaded):');
    _respond(';trigger "The silvery luminescence fades from around you." ";waggle"');
    _respond('');
    _respond('Notes:');
    _respond('    - The "text to listen for" can be any Ruby Regular Expression. You can test your regex at a site like https://rubular.com');
    _respond('    - If your regex contains capture groups, the captured text can be used in the command. %1% will be replaced with the first captured text, %2% will be replaced with the second captured text, etc. (Capture groups are parts of the text surrounded by parentheses. See the "poke Upy" example above.)');
    _respond('    - You can send multiple commands by separating commands with \r');
    _respond('    - You can always use --test to see what would happen, without sending anything to the game.');
    _respond('    - You can use --once to only trigger the first time something happens, then exit the trigger script');
    _respond('    - With the --debug flag, you\'ll get additional output about what\'s happening internally in the script.');
    exit
end


loop{
    listenForRegex = variable[1]
    triggerCommand = variable[2]
    if debugmode
        echo "Listening for: " + listenForRegex
        echo "Then running: " + triggerCommand
    end

    # Read lines from the game until one matches.
    # Store the matching line in `line`, store the MatchData in `matches`
    begin
        line = get
    end until matches = line.match(listenForRegex)

    if debugmode
        echo "Full match: #{line}"
        echo "Found %s captures." % matches.captures.length
        matches.captures.each_with_index {
            |capture, index|
            echo "Capture #{index}: #{capture}"
        }
    end

    # Insert the text we captured into the command the user wants to run
    # Replace %1% with the first capture group, %2% with the second, etc.
    matches.captures.each_with_index {
        |capture, index|
        # Use index+1 because the array is 0-based but users will specify %1% for the first replacement, not %0%.
        triggerCommand.gsub! "%#{index+1}%", capture
    }

    # Users can use "\r" to send multiple commands
    triggerCommands = triggerCommand.split('\r')

    if testmode
        echo "TEST MODE. Without --test, the following command(s) or script(s) would have been run:"
    end

    triggerCommands.each {
        |command|
        
        is_script = false
    
        if command.start_with?(';')
            # User wants to start a lich script
            is_script = true

            # Remove the leading semi-colon
            command = command[1..-1]
            
            # Everything before the first space is the script name.
            # Everything after the first space is a list of arguments, separated by spaces
            script_name, *script_args = command.split(' ')
            
            if debugmode
                echo "Parsed script:"
                echo "    Script name: #{script_name}"
                echo "    Script args: #{script_args}"
            end
        end

        if testmode
            if is_script
                # It's a script, so tell the user what script name and arguments we parsed
                args_string = "no arguments."
                if not script_args.empty?
                    args_string = 'arguments "%s"' % script_args.join('" "')
                end
                echo "Start script: \"%s\" with %s" % [script_name, args_string]
            else
                # It's not a script, so tell the user what command we would have run
                _respond(command);
            end
        else
            if is_script
                # Start the script
                start_script script_name, script_args
            else
                # Send the command to the game
                put(command) 
            end
        end
    }

    if runonce
        break
    end
}
