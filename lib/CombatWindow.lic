=begin

	Creates a window and places shortened combat text in said window.
	
	This is very bare bones at the moment. No settings options. If you want to change the window size you'll need to open the script and change these values:
	@width
	@height
	
	Also to change the window position change these values:
	horizontal_position
	vertical_position
	
	Also for now the script only tracks attacks performed by you. Script might also pick up non-combat related messages for now, let me know if you notice any.
	
	Script will also only track attacks performed instantly. For example the initial attack from Earthen Fury (917), not any subsequent attacks by the cast.

	Version 1: Initial release!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: dreaven.
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

require 'gtk3'

status_tags

class CombatWindowMain
	def self.create_window
	
		@width = 600
		@height = 300
		horizontal_position = 0
		vertical_position = 0
		
		@window = Gtk::Window.new(:toplevel)
		@window.set_keep_above(true)
		@window.set_title("CombatWindow - #{checkname}")
		@window.resize(@width, @height)
		@window.move(horizontal_position, vertical_position)
		
		@window.signal_connect("destroy"){
			@window.close
			@window = nil
			Gtk.main_quit
			kill_script "CombatWindow" if running? "CombatWindow"
		}

		@combat_label = Gtk::Label.new
		@combat_label.set_line_wrap(true)
		@combat_label.set_line_wrap_mode(:word)
		@combat_label.set_alignment(0, 0)
		
		@scroll_window = Gtk::ScrolledWindow.new
		@scroll_window.set_policy(:always, :always)
		@scroll_window.width_request = @width
		@scroll_window.height_request = @height
		@scroll_window.add(@combat_label)
		
		grid = Gtk::Grid.new
		grid.attach(@scroll_window, 0, 0, 1, 1)
		@window.add(grid)
		@window.show_all
	end
	
	def self.watching
		while line = get
			if line =~ /You .* at <pushBold\/>a <a exist="(.*)" noun=".*">(.*)<\/a><popBold\/>/
				id = $1
				name = $2
				all_lines = []
				text = "YOU attacked #{name}: "
				enemies_hit = {}
				enemies_hit[id] = {}
				enemies_hit[id] = { "Name" => name, "Damage" => 0 }
				current_critter_id = id
				all_lines.push(line)
				while line = get
					break if line =~ /<prompt/
					all_lines.push(line)
				end
				
				all_lines.each{ |line|
					if line =~ /(CS: (?:\+|-)\d+) - (TD: (?:\+|-)\d+) \+ (CvA: (?:\+|-)\d+) \+ (d100: \+\d+) == ((?:\+|-)\d+)/ || line =~ /(AS: (?:\+|-)\d+) vs (DS: (?:\+|-)\d+) with (AvD: (?:\+|-)\d+) \+ (d100 roll: (?:\+|-)\d+) = ((?:\+|-)\d+)/
						text += "#{$1}, "
						text += "#{$2}, "
						text += "#{$3}, "
						text += "#{$4}, "
						text += "End: #{$5}\n"
					elsif line =~ /(\d+) points?|(\d+) damage/
						enemies_hit[current_critter_id]["Damage"] += $1.to_i
					elsif line =~ /<pushBold\/>a <a exist="(.*)" noun=".*">(.*)<\/a><popBold\/>/
						id = $1
						name = $2
						current_critter_id = id
						if !enemies_hit.key?(id)
							enemies_hit[id] = {}
							enemies_hit[id] = { "Name" => name, "Damage" => 0 }
						end
					end
				}
				total_damage = 0
				total_dead = 0
				enemies_hit.each{ |enemy_id,value|
					enemy = GameObj.npcs.find{ |npc| npc.id == enemy_id }
					status = nil
					if enemy.status =~ /dead/
						status = "DEAD!"
						total_dead += 1
					end					
					text += "YOU attacked #{value["Name"]} for #{value["Damage"]} damage #{status}\n"
					total_damage += value["Damage"]
				}
				text += "Total: Enemies hit: #{enemies_hit.count}, Damage: #{total_damage}, Killed: #{total_dead}"
				@combat_label.text = text
				adjustment = @scroll_window.vadjustment
				sleep 0.1
				adjustment.value = adjustment.upper - adjustment.page_size
			end
		end
	end
	
	before_dying{ @window.close if @window }
end

Gtk.queue {
	CombatWindowMain.create_window
	Gtk.main
}

CombatWindowMain.watching

sleep