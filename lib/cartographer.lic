=begin

  Cartographer

  Downloads and loads Elanthia Online mapdb releases from GitHub into a separate
  cartographer data directory and extends the Map class with version management.

  Usage:
    ;cartographer                    # Download and load latest release
    ;cartographer --version 0.2.0   # Download and load specific version
    ;cartographer --list            # List downloaded versions
    ;cartographer --load 0.2.0      # Load specific downloaded version
    ;cartographer --check           # Check current loaded version
    ;cartographer --force           # Force re-download of latest version
    ;cartographer --info            # Show architecture and storage information
    ;cartographer --prune           # Remove all but the 3 newest versions
    ;cartographer --help            # Show help

  author: Ondreian
  contributor: Claude Code
  version: 1.0.0

=end

require 'net/http'
require 'uri'
require 'json'
require 'fileutils'

class CartographerManager
  VERSION = "1.0.0"
  GITHUB_API_BASE = "https://api.github.com/repos/elanthia-online/mapdb"

  def initialize
    @cartographer_dir = File.join(DATA_DIR, XMLData.game, '_cartographer')
    FileUtils.mkdir_p(@cartographer_dir) unless Dir.exist?(@cartographer_dir)
  end

  def run(args = [])
    force_download = args.include?('--force')

    case args.first
    when '--help', '-h'
      show_help
    when '--list', '-l'
      list_versions
    when '--check', '-c'
      check_current_version
    when '--info', '-i'
      show_info
    when '--prune', '-p'
      prune_old_versions
    when '--force'
      download_and_load_latest(true)
    when '--load'
      if args[1]
        load_version(args[1])
      else
        echo "Error: --load requires a version number"
        echo "Example: ;cartographer --load 0.2.0"
      end
    when '--version', '-v'
      if args[1]
        download_and_load_version(args[1], force_download)
      else
        echo "Error: --version requires a version number"
        echo "Example: ;cartographer --version 0.2.0"
      end
    else
      download_and_load_latest(force_download)
    end
  end

  private

  def show_help
    echo "Cartographer v#{VERSION}"
    echo "Downloads and manages Elanthia Online mapdb releases from GitHub"
    echo ""
    echo "Usage:"
    echo "  ;cartographer                   # Download and load latest release"
    echo "  ;cartographer --version 0.2.0   # Download and load specific version"
    echo "  ;cartographer --list            # List downloaded versions"
    echo "  ;cartographer --load 0.2.0      # Load specific downloaded version"
    echo "  ;cartographer --check           # Check current loaded version"
    echo "  ;cartographer --force           # Force re-download of latest version"
    echo "  ;cartographer --info            # Show architecture and storage information"
    echo "  ;cartographer --prune           # Remove all but the 3 newest versions"
    echo "  ;cartographer --help            # Show this help"
    echo ""
    echo "Data directory: #{@cartographer_dir}"
  end

  def list_versions
    versions = get_local_versions

    if versions.empty?
      echo "No cartographer versions downloaded"
      echo "Use ';cartographer' to download the latest version"
      return
    end

    echo "Downloaded cartographer versions:"
    versions.each do |version|
      file_path = version_file_path(version)
      size = File.size(file_path)
      mtime = File.mtime(file_path)
      current = (defined?(Map) && Map.respond_to?(:cartographer_version) && Map.cartographer_version == version) ? " (current)" : ""
      echo "  #{version} (#{format_size(size)}, #{mtime.strftime('%Y-%m-%d %H:%M:%S')})#{current}"
    end
  end

  def check_current_version
    if defined?(Map) && Map.respond_to?(:cartographer_version)
      current = Map.cartographer_version
      if current
        echo "Currently loaded cartographer version: #{current}"
      else
        echo "No cartographer version currently loaded"
      end
    else
      echo "Map class doesn't support cartographer version tracking"
    end
  end

  def show_info
    echo "Cartographer Architecture Information"
    echo "===================================="
    echo ""

    # Directory information
    echo "Data Directory: #{@cartographer_dir}"
    echo "Directory exists: #{Dir.exist?(@cartographer_dir) ? 'Yes' : 'No'}"

    if Dir.exist?(@cartographer_dir)
      # Calculate total directory size
      total_size = 0
      file_count = 0

      Dir.glob(File.join(@cartographer_dir, '*')).each do |file|
        if File.file?(file)
          total_size += File.size(file)
          file_count += 1
        end
      end

      echo "Total storage used: #{format_size(total_size)}"
      echo "Number of files: #{file_count}"
      echo ""

      # Version information
      versions = get_local_versions
      if versions.any?
        echo "Downloaded versions: #{versions.length}"
        echo "Oldest version: #{versions.last}"
        echo "Newest version: #{versions.first}"

        # Current version info
        if defined?(Map) && Map.respond_to?(:cartographer_version)
          current = Map.cartographer_version
          if current
            current_file = version_file_path(current)
            if File.exist?(current_file)
              current_size = File.size(current_file)
              current_mtime = File.mtime(current_file)
              echo "Currently loaded: #{current} (#{format_size(current_size)}, downloaded #{current_mtime.strftime('%Y-%m-%d %H:%M:%S')})"
            end
          else
            echo "Currently loaded: None"
          end
        end
      else
        echo "No versions downloaded"
      end
    else
      echo "Data directory not yet created"
    end

    echo ""
    echo "GitHub Repository: https://github.com/elanthia-online/mapdb"
    echo "Release API: #{GITHUB_API_BASE}/releases"
    echo ""

    # Map integration status
    if defined?(Map)
      echo "Map class integration: Available"
      if Map.respond_to?(:cartographer_version)
        echo "Cartographer extensions: Loaded"
      else
        echo "Cartographer extensions: Not loaded"
      end

      if Map.respond_to?(:list)
        room_count = Map.list.compact.length
        echo "Currently loaded rooms: #{room_count}"
      end
    else
      echo "Map class integration: Not available"
    end
  end

  def prune_old_versions
    versions = get_local_versions

    if versions.length <= 3
      echo "Only #{versions.length} version(s) downloaded, nothing to prune"
      return
    end

    # Keep the 3 newest versions
    versions_to_keep = versions.first(3)
    versions_to_remove = versions[3..-1]

    echo "Keeping #{versions_to_keep.length} newest versions: #{versions_to_keep.join(', ')}"
    echo "Removing #{versions_to_remove.length} older versions: #{versions_to_remove.join(', ')}"

    # Check if currently loaded version would be removed
    current_version = nil
    if defined?(Map) && Map.respond_to?(:cartographer_version)
      current_version = Map.cartographer_version
    end

    if current_version && versions_to_remove.include?(current_version)
      echo "Warning: Currently loaded version #{current_version} will be removed!"
      echo "You may want to load a newer version first with: ;cartographer --load #{versions_to_keep.first}"
    end

    # Calculate space to be freed
    space_freed = 0
    versions_to_remove.each do |version|
      file_path = version_file_path(version)
      if File.exist?(file_path)
        space_freed += File.size(file_path)
      end
    end

    echo "Space to be freed: #{format_size(space_freed)}"
    echo ""
    echo "Pruning old versions..."

    removed_count = 0
    versions_to_remove.each do |version|
      file_path = version_file_path(version)
      if File.exist?(file_path)
        begin
          File.delete(file_path)
          echo "  Removed #{version}.json"
          removed_count += 1
        rescue => e
          echo "  Error removing #{version}.json: #{e.message}"
        end
      else
        echo "  #{version}.json already missing"
      end
    end

    echo ""
    echo "Pruning complete: removed #{removed_count} version(s), freed #{format_size(space_freed)}"

    # Show remaining versions
    remaining_versions = get_local_versions
    echo "Remaining versions: #{remaining_versions.join(', ')}"
  end

  def load_version(version)
    # Normalize version (remove 'v' prefix if present)
    version = version.sub(/^v/, '')

    file_path = version_file_path(version)

    unless File.exist?(file_path)
      echo "Error: Version #{version} not found locally"
      echo "Available versions: #{get_local_versions.join(', ')}"
      echo "Use ';cartographer --version #{version}' to download it first"
      return
    end

    load_cartographer_data(file_path, version)
  end

  def download_and_load_latest(force = false)
    echo "Fetching latest release information..."

    release_info = fetch_json("#{GITHUB_API_BASE}/releases/latest")
    return unless release_info

    version = release_info['tag_name'].sub(/^v/, '')
    echo "Latest version: #{version}"

    # Check if version already exists
    if !force && File.exist?(version_file_path(version))
      echo "Version #{version} already downloaded, loading..."
      load_version(version)
      return
    end

    download_and_load_release(release_info, version)
  end

  def download_and_load_version(version, force = false)
    # Normalize version (remove 'v' prefix if present for storage, keep for API)
    normalized_version = version.sub(/^v/, '')
    api_version = version.start_with?('v') ? version : "v#{version}"

    # Check if already downloaded
    if !force && File.exist?(version_file_path(normalized_version))
      echo "Version #{normalized_version} already downloaded, loading..."
      load_version(normalized_version)
      return
    end

    echo "Fetching release information for #{api_version}..."

    release_info = fetch_json("#{GITHUB_API_BASE}/releases/tags/#{api_version}")
    return unless release_info

    download_and_load_release(release_info, normalized_version)
  end

  def download_and_load_release(release_info, version)
    assets = release_info['assets']

    mapdb_asset = assets.find { |asset| asset['name'] == 'mapdb.json' }

    unless mapdb_asset
      echo "Error: mapdb.json not found in release"
      echo "Available assets: #{assets.map { |a| a['name'] }.join(', ')}"
      return
    end

    download_url = mapdb_asset['browser_download_url']
    file_size = mapdb_asset['size']

    echo "Downloading mapdb.json (#{format_size(file_size)}) for version #{version}..."

    temp_file = File.join(@cartographer_dir, "#{version}.tmp")
    final_file = version_file_path(version)

    if download_file(download_url, temp_file)
      if validate_mapdb(temp_file)
        File.rename(temp_file, final_file)
        echo "Successfully downloaded and validated #{version}.json"

        load_cartographer_data(final_file, version)
      else
        File.delete(temp_file) if File.exist?(temp_file)
        echo "Error: Downloaded file failed validation"
      end
    else
      File.delete(temp_file) if File.exist?(temp_file)
      echo "Error: Failed to download mapdb.json"
    end
  end

  def load_cartographer_data(file_path, version)
    echo "Loading cartographer version #{version}..."

    begin
      if defined?(Map) && Map.respond_to?(:load_cartographer)
        if Map.load_cartographer(version)
          room_count = Map.list.compact.length
          echo "Successfully loaded #{room_count} rooms from cartographer version #{version}"
          echo "Map database is now ready for use!"

          test_map_functionality
        else
          echo "Error: Failed to load cartographer data into Map class"
        end
      else
        echo "Error: Map class doesn't support cartographer loading"
        echo "The Map class needs to be extended with cartographer support"
      end

    rescue => e
      echo "Error loading cartographer data: #{e.message}"
    end
  end

  def get_local_versions
    Dir.entries(@cartographer_dir)
       .select { |f| f =~ /^[\d.]+\.json$/ }
       .map { |f| f.sub(/\.json$/, '') }
       .sort_by { |v| Gem::Version.new(v) rescue v }
       .reverse
  end

  def version_file_path(version)
    File.join(@cartographer_dir, "#{version}.json")
  end

  def fetch_json(url)
    uri = URI(url)

    begin
      Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
        request = Net::HTTP::Get.new(uri)
        request['User-Agent'] = "Lich-Cartographer/#{VERSION}"

        response = http.request(request)

        if response.code == '200'
          JSON.parse(response.body)
        else
          echo "Error: HTTP #{response.code} - #{response.message}"
          echo "URL: #{url}"
          nil
        end
      end
    rescue => e
      echo "Error fetching #{url}: #{e.message}"
      nil
    end
  end

  def download_file(url, local_path, max_redirects = 5)
    return false if max_redirects == 0

    uri = URI(url)

    begin
      Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
        request = Net::HTTP::Get.new(uri)
        request['User-Agent'] = "Lich-Cartographer/#{VERSION}"

        File.open(local_path, 'wb') do |file|
          http.request(request) do |response|
            case response
            when Net::HTTPSuccess
              total_size = response['content-length'].to_i
              downloaded = 0
              last_progress = 0

              response.read_body do |chunk|
                file.write(chunk)
                downloaded += chunk.length

                if total_size > 0
                  progress = (downloaded.to_f / total_size * 100).to_i
                  if progress >= last_progress + 10
                    echo "  Progress: #{progress}% (#{format_size(downloaded)}/#{format_size(total_size)})"
                    last_progress = progress
                  end
                end
              end

              echo "  Download complete: #{format_size(downloaded)}"
              return true
            when Net::HTTPRedirection
              redirect_url = response['location']
              file.close
              File.delete(local_path) if File.exist?(local_path)
              return download_file(redirect_url, local_path, max_redirects - 1)
            else
              echo "Error: HTTP #{response.code} - #{response.message}"
              return false
            end
          end
        end
      end
    rescue => e
      echo "Error downloading file: #{e.message}"
      return false
    end
  end

  def validate_mapdb(file_path)
    echo "Validating downloaded mapdb..."

    begin
      content = File.read(file_path)
      data = JSON.parse(content)

      unless data.is_a?(Array)
        echo "Error: mapdb should be an array of rooms"
        return false
      end

      if data.empty?
        echo "Error: mapdb is empty"
        return false
      end

      # Validate first few rooms have required fields
      sample_rooms = data.first(5)
      sample_rooms.each_with_index do |room, index|
        unless room.is_a?(Hash) && room['id'] && room['title']
          echo "Error: Room #{index} missing required fields (id, title)"
          return false
        end
      end

      room_count = data.length
      echo "Validation passed: #{room_count} rooms"
      return true

    rescue JSON::ParserError => e
      echo "Error: Invalid JSON - #{e.message}"
      return false
    rescue => e
      echo "Error validating mapdb: #{e.message}"
      return false
    end
  end

  def test_map_functionality
    echo "Testing map functionality..."

    begin
      rooms = Map.list.compact
      room_count = rooms.length
      echo "  ✓ Total rooms: #{room_count}"

      if rooms.any?
        # Sample a random room for testing
        sample_room = rooms.sample
        echo "  ✓ Sample room: ##{sample_room.id} - #{sample_room.title.last}"

        # Test room lookup
        test_room = Map[sample_room.id]
        if test_room && test_room.id == sample_room.id
          echo "  ✓ Room lookup working"
        end
      end

      echo "Map functionality test completed successfully!"

    rescue => e
      echo "Warning: Map functionality test failed - #{e.message}"
    end
  end

  def format_size(bytes)
    if bytes < 1024
      "#{bytes}B"
    elsif bytes < 1024 * 1024
      "#{(bytes / 1024.0).round(1)}KB"
    else
      "#{(bytes / (1024.0 * 1024.0)).round(1)}MB"
    end
  end

  def echo(message)
    respond message
  end
end

# Extend the Map class with cartographer support
if defined?(Map)
  class << Map
    attr_accessor :cartographer_version, :cartographer_file

    def load_cartographer(version = nil)
      cartographer_dir = File.join(DATA_DIR, XMLData.game, '_cartographer')

      if version.nil?
        # Load newest version by default
        versions = Dir.entries(cartographer_dir)
                     .select { |f| f =~ /^[\d.]+\.json$/ }
                     .map { |f| f.sub(/\.json$/, '') }
                     .sort_by { |v| Gem::Version.new(v) rescue v }
                     .reverse

        if versions.empty?
          respond "No cartographer versions found. Use ';cartographer' to download one."
          return false
        end

        version = versions.first
        respond "Loading newest cartographer version: #{version}"
      end

      file_path = File.join(cartographer_dir, "#{version}.json")

      unless File.exist?(file_path)
        respond "Cartographer version not found: #{version}"
        respond "Available versions: #{Dir.entries(cartographer_dir).select { |f| f =~ /^[\d.]+\.json$/ }.map { |f| f.sub(/\.json$/, '') }.join(', ')}"
        return false
      end

      begin
        # Use the existing Map.load_json method which handles all the class variable initialization
        if Map.respond_to?(:load_json)
          if Map.load_json(file_path)
            @cartographer_version = version
            @cartographer_file = file_path
            room_count = Map.list.compact.length
            respond "--- Cartographer v#{version} loaded (#{room_count} rooms)"
            return true
          else
            respond "Error: Map.load_json failed to load cartographer file"
            return false
          end
        else
          respond "Error: Map class doesn't support load_json method"
          return false
        end

      rescue => e
        respond "Error loading cartographer file: #{e.message}"
        return false
      end
    end

    def cartographer_version
      @cartographer_version
    end

    def cartographer_file
      @cartographer_file
    end
  end
end

# Main execution
if defined?(Script.current)
  manager = CartographerManager.new
  manager.run(script.vars)
else
  respond "This script must be run within Lich"
end