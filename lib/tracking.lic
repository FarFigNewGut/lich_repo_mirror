=begin
  Tracking.lic is an event tracking script.
  
  Tracks things. Such as flares. Attacks. And whatever else you want to track.
  
        author: Nisugi
		  game: Gemstone
		  tags: hunting, data collection
	   version: 1.1.0 alpha
     
  Make the following alias to get the reports. Allows the command   tracking flare damage   to receive the flare damage report.
  tracking => ;eq Tracking.report('\?')
  
  
  Version Control:
    Major_chage.feature_addition.bugfix
  v1.0.0 alpha
    Initial creation.
	Supports my ranged combat style. Additional attacks to be added.
	Supports flares I have. Additional flares to be added.
=end


module Tracking
  status_tags
  require 'yaml'
  @filename = "#{$data_dir}#{XMLData.game}/#{Char.name}/tracking.yaml"
  @debug = false
  @change = false

  OTHER_THINGS_REGEX = Regexp.union(
    /(?:Cast )?Roundtime:? \d+ (?:sec|Seconds)\./,
    /  \.\.\.(?: and)? hits? for (\d+) points? of damage!/,
    /  \.\.\. (\d+) points? of damage!/,
    /<prompt time="\d+">[^<]+<\/prompt>/,
    /<popStream\/>/,
    /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above!/,
  )

  TARGET_NOT_HIT = {
    /A close miss!/ => 'miss',
    /A clean miss!/ => 'miss',
    /Nowhere close!/ => 'miss',
    /Something confusing enters your mind at the worst possible moment, and the distraction disrupts your attack!/ => 'confused',
    /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> evades the (?:attack|missile) by (?:a hair|inches)!/ => 'evaded',
    /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> rolls to one side and evades the (?:attack|missile)!/ => 'evaded',
    /By amazing chance, <pushBold\/>the <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> evades the (?:attack|missile)!/ => 'evaded',
    /Lying flat, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> leans to one side and dodges the (?:attack|missile)!/ => 'evaded',
    /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> barely dodges the (?:attack|missile)!/ => 'evaded',
    /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> dodges just in the nick of time!/ => 'evaded',
    /Nearly insensible\, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> desperately evades the (?:attack|missile)!/ => 'evaded',
    /Unable to focus clearly\, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> blindly evades the (?:attack|missile)!/ => 'evaded',
    /The thorny barrier surrounding <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> blocks your attack!/ => 'blocked_by_wot',
    /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> manages to block with the exact angle needed to deflect the attack right back at you!/ => 'deflected',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> flails on the ground but manages to block the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /Amazingly, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> manages to block the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> barely manages to block the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /In the nick of time, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> interposes <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a> between <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> and the (?:attack|missile)!/ => 'blocked',
    /With no room to spare, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> blocks the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /Unable to focus clearly, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> blindly blocks the (?:attack|missile)!/ => 'blocked',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> stumbles dazedly, but blocks the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /With extreme effort\, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> blocks the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /At the last moment\, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> blocks the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /Unable to focus clearly\, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> blindly blocks the (?:attack|missile)!/ => 'blocked',
    /Nearly insensible\, <pushBold\/>\w+ <a exist="\d+" noun="\ ?w+">[^<]+<\/a><popBold\/> wildly blocks the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /Rolling hurriedly\, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^>]+<\/a><popBold\/> blocks the (?:attack|missile) with <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="\w+">[^<]+<\/a>!/ => 'blocked',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> awkwardly scrambles to the right and blocks the missile!/ => 'blocked',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> easily blocks the missile with <a exist="\d+" noun=" ?\w+">\w+<\/a> <a exist="\d+" noun="[^"]+">[^<]+<\/a>!/ => 'blocked',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> tumbles to the side and blocks the missile with <pushBold\/><a exist="\d+" noun=" ?\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="[^"]+">[^<]+<\/a>!/ => 'blocked',
    /Using the bone plates surrounding <pushBold\/><a exist="\d+" noun=" ?\w+">\w+<\/a><popBold\/> forearms\, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> parries your attack!/ => 'blocked',
    /Lying flat on <pushBold\/><a exist="\d+" noun=" ?\w+">\w+<\/a><popBold\/> back, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> barely deflects the missile with <pushBold\/><a exist="\d+" noun=" ?\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="[^"]+">[^<]+<\/a>!/ => 'blocked',
    /<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> rolls to one side and deflects the missile with <pushBold\/><a exist="\d+" noun=" ?\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="[^"]+">[^<]+<\/a>!/ => 'blocked',
    /A heavy barrier of stone momentarily forms around <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> and blocks the attack!/ => 'blocked',
    # /A falling arrow flashes past <pushBold\/>(?:an?|the) <a exist="\w+" noun="\w+">[^<]+<\/a><popBold\/> and shatters against the ground!/ => 'volley_miss',
    # /An arrow falls to the ground, narrowly missing <pushBold\/>a <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>!/ => 'volley_miss',
    # /An incoming arrow just misses <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>\!/ => 'volley_miss',
    # /The air clears as the deadly volley of arrows abates\./ => 'volley_miss',
    # /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> narrowly avoids being skewered\!/ => 'pindown_miss',
    # /Arrows thud into the ground around <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>\, keeping <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> at bay\!/ => 'pindown_miss',
    # /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> ducks away from a stray arrow\!/ => 'pindown_miss',
  }
  
  HIT_ME_NOT = {
    /You evade the (?:attack|missile) by a hair\!/ => 'my_evade',
    /You evade the (?:attack|missile) by inches\!/ => 'my_evade',
    /You evade the (?:attack|missile) with ease\!/ => 'my_evade',
    /By amazing chance, you evade the (?:attack|missile)!/ => 'my_evade',
    /You evade the (?:attack|missile) with incredible finesse!/ => 'my_evade',
    /You barely dodge the (?:attack:missile)\!/ => 'my_evade',
    /With blinding speed, you dodge the (?:attack|missile)\!/ => 'my_evade',
    /You dodge just in the nick of time\!/ => 'my_evade',
    /You skillfully dodge the (?:attack|missile)\!/ => 'my_evade',
    /You manage to dodge <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> blow\!/ => 'my_evade',
    /You manage to dodge <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> headbutt in the nick of time\!/ => 'my_evade',
    /You awkwardly scramble along the ground to avoid the (?:attack|missile)\!/ => 'my_evade',
    /You deftly dodge along the ground\, avoiding the onslaught\!/ => 'my_evade',
    /You move at the last moment to evade the (?:attack|missile)\!/ => 'my_evade',
    /Your <a exist="\d+" noun="\w+">[^<]+<\/a> pulses briefly, deflecting some of the burning damage!/ => '620_heat_resist',
    /Your <a exist="\d+" noun="\w+">[^<]+<\/a> pulses briefly, deflecting some of the frozen damage!/ => '620_cold_resist',
    /Your <a exist="\d+" noun="\w+">[^<]+<\/a> pulses briefly, deflecting some of the electrical damage!/ => '620_lightning_resist',
    /Your <a exist="\d+" noun="\w+">[^<]+<\/a> pulses briefly, deflecting some of the natural damage!/ => '620_nature_resist',
    /Your <a exist="\d+" noun="\w+">[^<]+<\/a> pulses briefly, deflecting some of the scalding damage!/ => '620_steam_resist',
    /The burning essence is drawn toward your <a exist="\d+" noun="\w+">[^<]+<\/a>, where it is consumed with an abrupt burst of light!/ => '620_heat_negate',
    /The frozen essence is drawn toward your <a exist="\d+" noun="\w+">[^<]+<\/a>, where it is consumed with an abrupt burst of light!/ => '620_cold_negate',
    /The electrical essence is drawn toward your <a exist="\d+" noun="\w+">[^<]+<\/a>, where it is consumed with an abrupt burst of light!/ => '620_lightning_negate',
    /The natural essence is drawn toward your <a exist="\d+" noun="\w+">[^<]+<\/a>, where it is consumed with an abrupt burst of light!/ => '620_nature_negate',
    /The scalding essence is drawn toward your <a exist="\d+" noun="\w+">[^<]+<\/a>, where it is consumed with an abrupt burst of light!/ => '620_steam_negate',
    /The thorny barrier surrounding you blocks the attack from the <pushBold\/><a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>\!/ => 'my_wot_block',
    /One of the vines surrounding you lashes out at the <pushBold\/><a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>, scraping a thorn across <pushBold\/><a exist="\d+" noun=" ?\w">\w+<\/a><popBold\/> body!  <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> flinches slightly\./ => 'my_wot_poisoned',
    /The layer of bark on you hardens and absorbs the attack\!  The bark crackles, but maintains its form\./ => 'barkskin_physical_maintained',
    /The layer of bark on you hardens and absorbs the attack\!  The bark crackles as it crumbles to dust\./ => 'barkskin_physical_crumbled',
    /The layer of bark on you hardens and absorbs the magical energy\!  The bark crackles, but maintains its form\./ => 'barkskin_magical_maintained',
    /The layer of bark on you hardens and absorbs the magical energy\!  The bark crackles as it crumbles to dust\./ => 'barkskin_magical_crumbles',
  }

  MISC_FLARES = {
    /Your armor prevents the spell from working correctly\./ => 'spell_hindrance',
    /Emerging from the shadows, you draw upon the environs to empower your spell\!/ => 'casted_with_camo',
    /Branching filaments of power snap outward from your <a exist="\d+" noun="\w+">[^<]+<\/a> in [^!]+\!/ => 'wondrous_weave',
    /A bolt of energy leaps from your <a exist="\d+" noun="\w+">[^<]+<\/a> and sets the sigils along your <a exist="\d+" noun="\w+">[^<]+<\/a> ablaze\.  Tendrils of \w+ energy lash out at <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> and cage <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> within bands of concentric geometry\.\.\./ => 'sigil_set_root_hit',
    /Tendrils of \w+ energy lash out from your <a exist="\d+" noun="\w+">[^<]+<\/a> toward <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> and cage <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> within bands of concentric geometry that constrict as one, shattering upon impact\!/ => 'sigil_staff_dispel',
    /Numerous sigils along your <a exist="\d+" noun="\w+">[^<]+<\/a> abruptly flare to brilliance\!  \w+ energy surges from each, twining into an echo of your last spell\.\.\./ => 'sigil_staff_double_cast',
  }

  NON_DAMAGING_FLARES = {
   /Cords of plasma-veined grey mist seep from your <a exist="\d+" noun="\w+">[^<]+<\/a> and entangle <pushBold\/>the <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>, causing <pushBold\/><a exist="\d+" noun="\w+">(?:her|him|it)<\/a><popBold\/> to tremble violently!/ => 'ghezyte_flare',
   /A wave of wicked power surges forth from your <a exist="\d+" noun="\w+">[^<]+<\/a> and fills <pushBold\/>a <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> with terror, <pushBold\/><a exist="\d+" noun="\w+">(?:her|him|it)<\/a><popBold\/> form trembling with unmitigated fear!/ => 'terror_flare',
   #/Thorny vines and mold\-infested roots emerge from the ground beneath <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, winding viciously around <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> with destructive results\!/ => 'acuity_flare',
   #/Necrotic energy from your <a exist="\d+" noun="\w+">[^<]+<\/a> overflows into you!/ => 'ensorcell',
   /You feel (\d+) mana surge into you!/ => 'mana_flare',
   /You feel healed!/ => 'ensorcell_heal',
   /You feel empowered!/ => 'ensorcell_mana',
   /You feel rejuvenated!/ => 'ensorcell_spirit',
   /You feel reinvigorated!/ => 'ensorcell_stamina',
   /You feel energized!/ => 'ensorcell_acuity',
   /An earthy, sweet aroma wafts from <pushBold\/>a <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> in a murky haze\./ => 'wild_entropy',
   /The earthy, sweet aroma clinging to <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> grows more pervasive\./ => 'wild_entropy',
   /An earthy, sweet aroma clings to <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> in a murky haze, accompanied by soot brown specks of leaf mold\./ => 'wild_entropy',
   /Soot brown specks of leaf mold trail in the wake of <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> movements, distorted by a murky haze\./ => 'wild_entropy',
   /The wind turns in your favor\./ => 'tailwind',
   /You shift position, taking advantage of a favorable tailwind\./ => 'tailwind',
   /A favorable tailwind springs up behind you\./ => 'tailwind',
   /Vital energy infuses you, hastening your arcane reflexes!/ => 'arcane_reflex', 
   /The vitality of nature bestows you with a burst of strength\!/ => 'physical_prowess',
   /<pushBold\/>An? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is buffeted by a sudden gust of wind\!/ => 'breeze_flare',
   /<pushBold\/>An? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is buffeted by a burst of wind and pushed back\!/ => 'breeze_flare',
   /A gust of wind shoves <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> back\!/ => 'breeze_flare',
   /Starburst patterns of pale blue light sweep forward from your chest and infuses the deep blue glow with its energy\./ => 'spirit_warding_II_td_flare',
 }

  DAMAGING_FLARES = {
    /Vines of vicious briars whip out from your <a exist="\d+" noun="\w+">[^<]+<\/a>, raking the \w+ with its thorns.  The \w+ looks slightly ill as the glistening emerald coating from each briar works itself under its skin\./ => 'briar_flare_damage',
    /A sickly green aura radiates from a <a exist="\d+" noun="\w+">[^<]+<\/a> .*? and seeps into <pushBold\/>an? <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> wounds!/ => 'rot_flare_damage',
    /Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> is ravaged for (\d+) points? of damage!/ => 'holy_fire_flare_damage',
    /Your <a exist="\d+" noun="\w+">[^<]+<\/a> releases a quivering wave of disruption!/ => 'disruption_flare_damage',
  }

  ATTACKS = {
    /You attempt to jab <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>!/ => 'jab_damage',
    /You attempt to punch <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>!/ => 'punch_damage',
    /You attempt to kick <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>!/ => 'kick_damage',
    /You attempt to grapple <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>!/ => 'grapple_damage',
    /You(?: take aim and)? fire an? \w+ (?:arrow|bolt) at <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>\!/ => 'ranged_damage',
    /Nocking another arrow to your bowstring, you swiftly draw back and loose again!/ => 'barrage_damage',
    # /You(?: take aim and)? fire your <a exist="\d+" noun="\w+">[^<]+<\/a> at <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> but the shot flies wide of the target\!/ => 'ranged_miss',
    # /Raising your <a exist="\d+" noun="\w+">[^<]+<\/a> high, you loose (?:arrow|bolt) after (?:arrow|bolt) as fast as you can, filling the sky with a volley of deadly projectiles!/ => 'volley',
    # /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above!/ => 'volley',
    # /An arrow pierces <pushBold\/>a <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>!/ => 'volley_damage',
    # /An arrow skewers <pushBold\/>a <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>!/ => 'volley_damage',
    # /An arrow finds its mark!  <pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is hit!/ => 'volley_damage',
    # /<pushBold\/>(?:An?|The) <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is transfixed by an arrow\'s descent!/ => 'volley_damage',
    # /<pushBold\/>(?:An?|The) <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is struck by a falling arrow!/ => 'volley_damage',
    # /Without bothering to aim\, you loose a chaotic hail of (?:arrows|bolts) to pin down your foes\!/ => 'pindown',
    # /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is rooted in place\!/ => 'pindown_hit',
    # /Dozens of long thorns suddenly grow out from the ground underneath <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>!/ => 'spikethorn',
    # /You gesture at <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/>\./ => 'offensive_cast',
  }

  ATTACKS_REGEX = Regexp.union(ATTACKS.keys)
  DAMAGING_FLARES_REGEX = Regexp.union(DAMAGING_FLARES.keys)
  NON_DAMAGING_FLARES_REGEX = Regexp.union(NON_DAMAGING_FLARES.keys)
  TARGET_NOT_HIT_REGEX = Regexp.union(TARGET_NOT_HIT.keys)
  HIT_ME_NOT_REGEX = Regexp.union(HIT_ME_NOT.keys)
  MISC_FLARES_REGEX = Regexp.union(MISC_FLARES.keys)


  def self.msg(type = "info",text)
    if type == "debug"
      if @dev
        if $frontend == 'stormfront' || $frontend == 'profanity'
          _respond "\<preset id=\"speech\"\>#{text}\<\/preset\>"
        else
          echo ">> #{text}"
        end
      end
    elsif $frontend == 'stormfront' || $frontend == 'profanity'
      if type == "error" || type == "yellow" || type == "bold" || type == "monster" || type == "creature"
        _respond "\<pushBold\/\>#{text}\<popBold\/\>"
      elsif type == "warn" || type == "orange" || type == "thought"
        _respond "\<preset id=\"thought\"\>#{text}\<\/preset\>"
      elsif type == "info" || type == "teal" || type == "whisper"
        _respond "\<preset id=\"whisper\"\>#{text}\<\/preset\>"
      elsif type == "green" || type == "speech"
        _respond "\<preset id=\"speech\"\>#{text}\<\/preset\>"
      else
        puts text
      end
    else
      if type == "error" || type == "yellow" || type == "bold" || type == "monster" || type == "creature"
        echo "** #{text}"
      elsif type == "warn" || type == "orange" || type == "thought"
        echo "!! #{text}"
      elsif type == "info" || type == "teal" || type == "whisper"
        echo "-- #{text}"
      elsif type == "green" || type == "speech"
         echo ">> #{text}"
      else
        echo text
      end
    end
  end

  def self.load()
    Dir.mkdir("#{$data_dir}#{XMLData.game}") unless File.exist?("#{$data_dir}#{XMLData.game}")
    Dir.mkdir("#{$data_dir}#{XMLData.game}/#{Char.name}") unless File.exist?("#{$data_dir}#{XMLData.game}/#{Char.name}")
    if !File.exist?("#{@filename}")
      @tracking = Hash.new
      File.write(@filename,@tracking.to_yaml)
	  Tracking.msg("info","Creating tracking file. #{@filename}")
    else
	  @tracking = YAML.load_file(@filename)
	  Tracking.msg("info","Tracking file loaded. #{@filename}")
	end
	before_dying { File.write(@filename,@tracking.to_yaml) }
  end

  def self.save()
	File.write(@filename,@tracking.to_yaml)
	Tracking.msg("info","Tracking file saved.")
  end

  def self.report(var)
    case var
    when /^save$/
      Tracking.save()
    when /^dump$/
      @tracking.sort.each { |k,v| if k =~ /_damage|_absorb_|_modifier|save_time|mana_flare/;next;else;_respond "<output class=\"mono\"/>\n" + " #{v.to_s.rjust(6)} : #{k}  " + "\n<output class=\"\"/>";end }
    when /^flare dump$/
      @tracking.each { |k,v| if k =~ /(?:concussion|flare)_damage/;_respond v.length;_respond "#{v.to_s.rjust(6)} : #{k}";end }
    when /^flare damage$/
      Tracking.report('rot flare')
      Tracking.report('briar flare')
      Tracking.report('holy fire flare')
    when /^rot flare$/
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|    Rot Flares    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['rot_flare_damage'].length.to_s.rjust(6)} : Hits     |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['rot_flare_damage'].sum(0.0) / @tracking['rot_flare_damage'].length).round(2).to_s.rjust(6)} : Avg Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['rot_flare_damage'].min().to_s.rjust(6)} : Min Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['rot_flare_damage'].max().to_s.rjust(6)} : Max Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Dmg=>Cnt: #{@tracking['rot_flare_damage'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
    when /^briar flare$/
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|   Briar Flares   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['briar_flare_damage'].length.to_s.rjust(6)} : Hits     |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['briar_flare_damage'].sum(0.0) / @tracking['briar_flare_damage'].length).round(2).to_s.rjust(6)} : Avg Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['briar_flare_damage'].min().to_s.rjust(6)} : Min Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['briar_flare_damage'].max().to_s.rjust(6)} : Max Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Dmg=>Cnt: #{@tracking['briar_flare_damage'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
    when /^holy fire flare$/
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "| Holy Fire Flares |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|    Concussion    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['holy_fire_flare_concussion_damage'].length.to_s.rjust(6)} : Hits     |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['holy_fire_flare_concussion_damage'].sum(0.0) / @tracking['holy_fire_flare_concussion_damage'].length).round(2).to_s.rjust(6)} : Avg Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['holy_fire_flare_concussion_damage'].min().to_s.rjust(6)} : Min Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['holy_fire_flare_concussion_damage'].max().to_s.rjust(6)} : Max Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['holy_fire_flare_concussion_damage'].length - @tracking['holy_fire_flare_damage'].length).to_s.rjust(6)} : Deaths   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Dmg=>Cnt: #{@tracking['holy_fire_flare_concussion_damage'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|    Fire Flare    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['holy_fire_flare_damage'].length.to_s.rjust(6)} : Hits     |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['holy_fire_flare_damage'].sum(0.0) / @tracking['holy_fire_flare_damage'].length).round(2).to_s.rjust(6)} : Avg Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['holy_fire_flare_damage'].min().to_s.rjust(6)} : Min Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['holy_fire_flare_damage'].max().to_s.rjust(6)} : Max Dmg  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Dmg=>Cnt: #{@tracking['holy_fire_flare_damage'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
    when /^ensorcell$/
      _respond "<output class=\"mono\"/>\n" + "|-----------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|    Ensorcell    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|-----------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ensorcell_acuity'].to_s.rjust(6)} : Acuity   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ensorcell_heal'].to_s.rjust(6)} : Health   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ensorcell_mana'].to_s.rjust(6)} : Mana     |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ensorcell_stamina'].to_s.rjust(6)} : Stamina  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ensorcell_spirit'].to_s.rjust(6)} : Spirit   |" + "\n<output class=\"\"/>"
      total = 0;@tracking.each { |k,v| if k =~ /^ensorcell_/ then total += v.to_i end }
      _respond "<output class=\"mono\"/>\n" + "|#{total.to_s.rjust(6)} : Total    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|-----------------|" + "\n<output class=\"\"/>"
    when /^aganjira dump$/
      @tracking.each { |k,v| if k =~ /aganjira_/;_respond "#{v.to_s.rjust(6)} : #{k}";end }
    when /^aganjira$/
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|    X'Aganjira    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|   CS  Modifier   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_cs_modifier'].length.to_s.rjust(6)} : Casts    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['aganjira_cs_modifier'].sum(0.0) / @tracking['aganjira_cs_modifier'].length).round(2).to_s.rjust(6)} : Avg Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_cs_modifier'].min().to_s.rjust(6)} : Min Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_cs_modifier'].max().to_s.rjust(6)} : Max Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "| Mod=>Cnt: #{@tracking['aganjira_cs_modifier'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|   Mana  Absorb   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_absorb_mana'].length.to_s.rjust(6)} : Absorbs  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['aganjira_absorb_mana'].sum(0.0) / @tracking['aganjira_absorb_mana'].length).round(2).to_s.rjust(6)} : Avg Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_absorb_mana'].min().to_s.rjust(6)} : Min Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_absorb_mana'].max().to_s.rjust(6)} : Max Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "| Mod=>Cnt: #{@tracking['aganjira_absorb_mana'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|  Stamina Absorb  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_absorb_stamina'].length.to_s.rjust(6)} : Absorbs  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['aganjira_absorb_stamina'].sum(0.0) / @tracking['aganjira_absorb_stamina'].length).round(2).to_s.rjust(6)} : Avg Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_absorb_stamina'].min().to_s.rjust(6)} : Min Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['aganjira_absorb_stamina'].max().to_s.rjust(6)} : Max Mod  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "| Mod=>Cnt: #{@tracking['aganjira_absorb_stamina'].sort.tally}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
    when /^ranger trinket$/
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "| Ranger  Trinkets |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|  Ranger Resists  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_electrical_resist'].to_s.rjust(5)} : Electrical  |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_electrical_resist'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_burning_resist'].to_s.rjust(5)} : Burning     |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_burning_resist'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_freezing_resist'].to_s.rjust(5)} : Freezing    |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_freezing_resist'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_natural_resist'].to_s.rjust(5)} : Natural     |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_natural_resist'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_scalding_resist'].to_s.rjust(5)} : Scalding    |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_scalding_resist'].nil?
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|  Ranger Negates  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_electrical_negate'].to_s.rjust(5)} : Electrical  |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_electrical_negate'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_burning_negate'].to_s.rjust(5)} : Burning     |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_burning_negate'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_freezing_negate'].to_s.rjust(5)} : Freezing    |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_freezing_negate'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_natural_negate'].to_s.rjust(5)} : Natural     |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_natural_negate'].nil?
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranger_trinket_scalding_negate'].to_s.rjust(5)} : Scalding    |" + "\n<output class=\"\"/>" unless @tracking['ranger_trinket_scalding_negate'].nil?
      _respond "<output class=\"mono\"/>\n" + "|------------------|" + "\n<output class=\"\"/>"
    when /^ranged$/
      _respond "<output class=\"mono\"/>\n" + "|------------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_miss'].to_s.rjust(6)} : Missed    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_evaded'].to_s.rjust(6)} : Evaded    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_blocked'].to_s.rjust(6)} : Blocked   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_damage'].length.to_s.rjust(6)} : Hits      |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_tailwind'].to_s.rjust(6)} : Tailwind  |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['ranged_damage'].sum(0.0) / @tracking['ranged_damage'].length).round(2).to_s.rjust(6)} : Damage    | (#{@tracking['ranged_damage'].min()} to #{@tracking['ranged_damage'].max()})" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_ghezyte_flare'].to_s.rjust(6)} : Ghezyte   |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{@tracking['ranged_terror_flare'].to_s.rjust(6)} : Terror    |" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['ranged_rot_flare_damage'].sum(0.0) / @tracking['ranged_rot_flare_damage'].length).round(2).to_s.rjust(6)} : Rot Avg   | (#{@tracking['ranged_rot_flare_damage'].min()} to #{@tracking['ranged_rot_flare_damage'].max()})" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['ranged_briar_flare_damage'].sum(0.0) / @tracking['ranged_briar_flare_damage'].length).round(2).to_s.rjust(6)} : Briar Avg | (#{@tracking['ranged_briar_flare_damage'].min()} to #{@tracking['ranged_briar_flare_damage'].max()})" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['ranged_holy_fire_concussion_damage'].sum(0.0) / @tracking['ranged_holy_fire_concussion_damage'].length).round(2).to_s.rjust(6)} : HF Conc   | (#{@tracking['ranged_holy_fire_concussion_damage'].min()} to #{@tracking['ranged_holy_fire_concussion_damage'].max()})" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|#{(@tracking['ranged_holy_fire_flare_damage'].sum(0.0) / @tracking['ranged_holy_fire_flare_damage'].length).round(2).to_s.rjust(6)} : HF Fire   | (#{@tracking['ranged_holy_fire_flare_damage'].min()} to #{@tracking['ranged_holy_fire_flare_damage'].max()})" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------------|" + "\n<output class=\"\"/>"
    when /^flares$/
      _respond "<output class=\"mono\"/>\n" + "|------------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Total Attack Hits: #{(@tracking['hits'] + @tracking['volley_hits'])}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Ghezyte Flares: #{@tracking['ghezyte_flare']} #{(@tracking['ghezyte_flare'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Terror Flares: #{@tracking['terror_flare']} #{(@tracking['terror_flare'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Briar Flares: #{@tracking['briar_flare']} #{(@tracking['briar_flare'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Rot Flares: #{@tracking['rot_flare']} #{(@tracking['rot_flare'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Holy Fire Flares: #{@tracking['holy_fire_flare']} #{(@tracking['holy_fire_flare'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------------|" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Breeze Flares: #{@tracking['breeze_flare']} #{(@tracking['breeze_flare'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Wild Entropy: #{@tracking['wild_entropy']} #{(@tracking['wild_entropy'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Tailwind: #{@tracking['tailwind']} #{(@tracking['tailwind'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Arcane Reflex: #{@tracking['arcane_reflex']} #{(@tracking['arcane_reflex'].to_f / (@tracking['hits'].to_f + @tracking['volley_hits'].to_f) * 100 ).round(2) }%" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|Physical Prowess: #{@tracking['physical_prowess']}" + "\n<output class=\"\"/>"
      _respond "<output class=\"mono\"/>\n" + "|------------------------|" + "\n<output class=\"\"/>"
    when /^options$/
      Tracking.msg("info","dump, flare dump, flare damage, ensorcell, ranged, barrage, ranger trinket, aganjira, aganjira dump")
    when /^savetime$/
      Tracking.msg("info","#{@save_time}")
    else
      Tracking.msg("warn","Error: No variable input.#{var}")
    end
  end

  def self.increment(var,amount = 1)
    @tracking[var] += amount
  end  

  def self.process_hit_me_not(trigger)
    HIT_ME_NOT.select { |regex,cause| Tracking.increment(cause) if trigger =~ regex }
  end

  def self.process_misc_flare(trigger)
    MISC_FLARES.select { |regex,flare| Tracking.increment(flare) if trigger =~ regex }
  end

  def self.process_non_damaging_flare(trigger)
    case trigger
    when /You feel (\d+) mana surge into you!/
      @tracking['mana_flare'] ||= Array.new
      @tracking['mana_flare'].append($1)
    else
      NON_DAMAGING_FLARES.select { |regex,flare| Tracking.increment(flare) if trigger =~ regex }
    end
  end

  def self.process_damaging_flare(trigger,cause = nil)
    echo "process_damaging_flare(#{trigger})" if @debug
    # Determine our cause of flare damage.
    DAMAGING_FLARES.select { |regex,flare|
      cause = flare if trigger =~ regex
    }
    if cause.nil?
      echo "Unable to determine cause DAMAGING_FLARES. Trigger: #{trigger}"
      return
    end
    @tracking[cause] ||= Array.new
    
    # Match our damage to our flare. Wonder how well this will work with assaults and multiple attacks in a single round.
    buffer = reget(35,Regexp.union(DAMAGING_FLARES.keys),/\.\.\. \d+ points? of damage!/)
    buffer.to_enum.with_index.reverse_each { |line,i|
      case line
      when /\.\.\. (\d+) points? of damage!/
        damage = $1.to_i
        case buffer[i-1]
        when DAMAGING_FLARES.key(cause)
          @tracking[cause].append(damage)
          if buffer[i-1] =~ /Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> is ravaged for (\d+) points? of damage!/
            ccsn_dmg = $1.to_i
            @tracking['holy_fire_flare_concussion_damage'] ||= Array.new
            @tracking['holy_fire_flare_concussion_damage'].append(ccsn_dmg)
          end
          return
        end
      end
    }
  end

  def self.process_attacks(trigger,cause = nil,value = nil,terminate = false)
    echo "process_attacks(#{trigger})" if @debug

    ATTACKS.select { |regex,attack| cause = attack if trigger =~ regex }
    @tracking[cause] ||= Array.new

    sleep(0.1)
    #buffer = reget(50,Regexp.union(ATTACKS.keys),Regexp.union(TARGET_NOT_HIT.keys),OTHER_THINGS_REGEX)
    buffer = reget(50,Regexp.union(ATTACKS_REGEX,DAMAGING_FLARES_REGEX,NON_DAMAGING_FLARES_REGEX,TARGET_NOT_HIT_REGEX,OTHER_THINGS_REGEX))
    buffer.to_enum.with_index.reverse_each { |line,i|
      # echo "buffer[#{i}] line: #{line}" if @debug
      case line
      when /(?:Cast )?Roundtime:? \d+ (?:sec|Seconds)\./
        echo "terminate" if @debug
        terminate = true
      when /  \.\.\.(?: and)?(?: hits? for)? (\d+) points? of damage!/
        damage = $1.to_i
        @tracking[cause].append(damage) if buffer[i-1] =~ ATTACKS.key(cause)
        Tracking.increment(cause.gsub('damage','tailwind')) if buffer[i-1] =~ ATTACKS.key(cause) && Effects::Buffs.active?("Breeze Archery Tailwind") # Nisugi
        echo "damage #{damage}" if @debug
      when TARGET_NOT_HIT_REGEX
        echo "miss"
        TARGET_NOT_HIT.select { |regex, miss| value = cause.gsub('damage',miss) if line =~ regex }
        Tracking.increment(value) if buffer[i-1] =~ ATTACKS.key(cause)
        echo "miss #{value}" if @debug
      when NON_DAMAGING_FLARES_REGEX
        NON_DAMAGING_FLARES.select { |regex, flare| value = cause.gsub('damage',flare) if line =~ regex }
        Tracking.increment(value) if terminate
        echo "flare #{value}" if @debug
      when DAMAGING_FLARES_REGEX
        DAMAGING_FLARES.select { |regex, flare| value = cause.gsub('damage',flare) if line =~ regex }
        if line =~ /Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> is ravaged for (\d+) points? of damage!/ && terminate
          @tracking[cause.gsub('damage','holy_fire_flare_concussion_damage')] ||= Array.new
          @tracking[cause.gsub('damage','holy_fire_flare_concussion_damage')].append($1.to_i)
          if buffer[i+1] =~ /\.\.\. (\d+) points? of damage!/ && terminate
            @tracking[value] ||= Array.new
            @tracking[value].append($1.to_i)
          end
        elsif buffer[i+1] =~ /\.\.\. (\d+) points? of damage!/ && terminate
          @tracking[value] ||= Array.new
          @tracking[value].append($1.to_i)
        end
        echo "damage_flare #{value} #{damage}" if @debug
      when /<prompt time="\d+">[^<]+<\/prompt>/ # UCS, 
        echo "prompt" if terminate && @debug
        return if terminate
      when /<popStream\/>/ # Fire, Barrage, Mstrike Fire
        echo "popStream" if terminate && @debug
        return if terminate
      end
    }
  end

  def self.xml_watch()
    change = false
    while line = get
      case line
      # Oh Shit!
      when /(SEND\[\w+\].*)/
        5.times { Tracking.msg(warn,$1) }

      # My Blocks & Evades
      when HIT_ME_NOT_REGEX
        Tracking.process_hit_me_not(line)
      # Flares
      when NON_DAMAGING_FLARES_REGEX
        Tracking.process_non_damaging_flare(line)
      when DAMAGING_FLARES_REGEX
        Tracking.process_damaging_flare(line)
      when MISC_FLARES_REGEX
        Tracking.process_misc_flare(line)
      # Attacks
      when ATTACKS_REGEX
        Tracking.process_attacks(line)
      when /^You(?: take aim and) fire your <a exist="\d+" noun="\w+">[^<]+<\/a> at <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> but the shot flies wide of the target\!/
        Tracking.increment('ranged_miss')
        Tracking.increment('ranged_tailwind') if Effects::Buffs.active?("Breeze Archery Tailwind")
       # echo "Get Gud Newb..."
        
      # X'aganjira Flares
      when /^Mana cascades across your <a exist="\d+" noun="\w+">[^<]+<\/a>, causing the fabric to shiver against your skin as it draws the scattered power into it and transforms it into \w+\.  \[You gain (\d+) (\w+)\!\]/
        @tracking['aganjira_absorb_' + $2] ||= Array.new
        @tracking['aganjira_absorb_' + $2].push($1.to_i)
      when /CS: [-+\d]+ \- TD: [-+\d]+ \+ CvA: [-+\d]+ \+ d(\d+): [-+\d]+(?: \- [-+\d]+)? \=\= [-+\d]+/
        mod = 100 - $1.to_i
        next if mod < 1
        @tracking['aganjira_cs_modifier'] ||= Array.new
        @tracking['aganjira_cs_modifier'].push(mod)
        Tracking.increment('aganjira_max_resource') if (percentmana > 99) && (percentstamina > 99)
      end
    end
  end
end

Tracking.load()
Tracking.xml_watch()

#[logxml: XML Logging started, currently logging to C:/Users/shawn/Documents/SIMU/Lich5/logs/GSIV-Nisugi/2022-09-25-1.xml]x
