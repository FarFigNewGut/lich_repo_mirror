#
# fletching script
#

Settings.load

handaxe = 'handaxe'
handaxe_container = 'satchel'
dagger = 'dagger'
dagger_container = 'satchel'
shaft_container = 'satchel'

if Room.current
	start_room = Room.current.id
else
	start_room = nil
end

#Settings['garbage'] ||= Hash.new
#garbage = Settings['garbage'][start_room]

#unless garbage
#	(GameObj.room_desc.to_a + GameObj.loot.to_a).each { |obj|
#		result = dothistimeout "look in #{obj.noun}", 4, /filled with a variety of garbage|^In the|^There is nothing in there/
#		if result =~ /filled with a variety of garbage/
#			garbage = obj.noun.dup
#			if start_room
#				Settings['garbage'][start_room] = garbage
#				Settings.save
#			end
#			break
#		end
#	}
#end

#unless garbage
#	echo 'No garbage container found!'
#	exit
#end




buy_wood =  proc {
	pause_script('autorest') if running?('autorest')
	start_script 'go2', [ 'bank' ]
	wait_while { running?('go2') }
	fput 'unhide' if checkspell(916)
	fput 'withdraw 50'
	start_script 'go2', [ 'fletcher' ]
	wait_while { running?('go2') }
	clear
	fput 'order'
	line = get until line =~ /([0-9]+). a stick of wood/
	num = $1
	#check_haste.call
	5.times {
		fput "order 10 of #{num}"
		fput 'buy'
		fput 'open my package'
		fput "empty my package in my #{shaft_container}"
		sleep 1
		waitrt?
		fput 'throw my package'
	}
	start_script 'go2', [ start_room, '_disable_confirm_' ]
	wait_while { running?('go2') }
	start_script 'cast', [ '916' ]
	wait_while { running?('cast') }
	unpause_script('autorest') if running?('autorest')
}

bundle_shafts = proc {
	fput 'stow right' if checkright
	fput 'stow left' if checkleft
	dothis "get shaft from my #{shaft_container}", /^You remove|^Get what/
	loop {
		result = dothis "get shaft from my #{shaft_container}", /^You remove|^Get what\?$|^You need a free hand to pick that up\.$/
		break unless result =~ /^You remove/
		fput 'bundle'
	}
	fput "put #{checkright} in my #{shaft_container}" if checkright
	fput "put #{checkleft} in my #{shaft_container}" if checkleft
}

cut_wood = proc {
	first_try = true
	loop {
		if checkright
			if checkright != 'wood'
				if checkleft == 'wood'
					fput "swap"
				else
					fput "stow right"
					result = dothis "get my wood from my #{shaft_container}", /^You remove|^Get what/
					if result =~ /^Get what/
						if first_try == true
							buy_wood.call
							next
						else
							bundle_shafts.call
							break
						end
					end
				end
			end
		else
			result = dothis "get wood from my #{shaft_container}", /^You remove|^Get what/
			if result =~ /^Get what/
				if first_try == true
					buy_wood.call
					next
				else
					bundle_shafts.call
					break
				end
			end
		end
		if checkleft
			if checkleft != handaxe
				fput "stow left"
				result = dothis "get my #{handaxe}", /^You remove|^Get what/
				if result =~ /^Get what/
					echo 'oh shit!'
					exit
				end
			end
		else
			result = dothis "get my #{handaxe}", /^You remove|^Get what/
			if result =~ /^Get what/
				echo 'oh shit!'
				exit
			end
		end
		#check_haste.call
		result = dothis 'cut arrow shaft from my wood', /^With carefully placed cuts, you split a stick of wood|^The wood isn't really big enough to bother splitting, so you just decide to use it as\-is\.$/
		waitrt?
		dothis "put my shaft in my #{shaft_container}", /^You put/
		first_try = false
	}
}


loop {
	wait_while { checkmind("must rest") or running?('cast') }
	waitrt?
	if checkright
		if checkright != 'shaft'
			if checkleft == 'shaft'
				fput "swap"
			else
				fput "stow right"
				result = dothis "get 1 shaft from my #{shaft_container}", /^You remove|^Get what/
				if result =~ /^Get what/
					cut_wood.call
					next
				end
			end
		end
	else
		result = dothis "get 1 shaft from my #{shaft_container}", /^You remove|^Get what/
		if result =~ /^Get what/
			cut_wood.call
			next
		end
	end
	if checkleft
		if checkleft != dagger
			fput "stow left"
			result = dothis "get my #{dagger}", /^You remove|^Get what|^You draw/
			if result =~ /^Get what/
				echo 'oh shit!'
				exit
			end
		end
	else
		result = dothis "get my #{dagger}", /^You remove|^Get what|^You draw/
		if result =~ /^Get what/
			echo 'oh shit!'
			exit
		end
	end
	#check_haste.call
	result = dothis "cut my shaft with my #{dagger}", /^You (?:begin to )?pare away the excess wood|^Generally, you should paint or crest your shafts before cutting nocks in them, but it is not necessary\.|^Do you mean to CUT NOCKS in the arrow shaft\?/
	waitrt?
	next if result =~ /^You begin to pare/
	#check_haste.call
	result = dothis "cut nocks in my shaft with my #{dagger}", /^You begin cutting a nock|^You carefully cut a nock|shaft has already had a nock cut|^Generally, you should paint or crest your shafts before cutting nocks in them, but it is not necessary/
	if result =~ /^Generally/
		result = dothis "cut nocks in my shaft with my #{dagger}", /^You begin cutting a nock|^You carefully cut a nock|shaft has already had a nock cut|^Generally, you should paint or crest your shafts before cutting nocks in them, but it is not necessary/
	end
	next if result =~ /^You begin cutting a nock/
	waitrt?
	#dothistimeout "put my shaft in #{garbage}", 4, /you feel pleased with yourself/
	dothistimeout "drop my shaft", 4, /drop/
}

fput 'stow right' if checkright
fput 'stow left' if checkleft
