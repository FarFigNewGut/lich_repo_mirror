=begin
	MechFire by Getho
	
	author: Getho
	  name: MechFire
	  tags: ranged crossbow mechanical combat
   version: 1.1
   
	  todo: Need to come up with a way to set crystal_check to false when crystal
			shatters. Be aware script might go into an infinite loop if it uses
			the last charge and tries to attack another round without exiting.
   
   This script is meant to be used with a mechanical crossbow. It is setup to run
   as your hunting script inside of bigshot. It can be ran stand alone but I would
   suggest not running it unattended.
   
   For more information please run ;mechfire help
   
   Feel free to check out my loot script to assit automating ammo retrieval/reloading.
=end


silence_me

UserVars.mechfire				  ||= {}
UserVars.mechfire[:ammo_count]		= 0					if UserVars.mechfire[:ammo_count].nil?
UserVars.mechfire[:is_cocked]		= false				if UserVars.mechfire[:is_cocked].nil?
UserVars.mechfire[:kneeling]		= true				if UserVars.mechfire[:kneeling].nil?
UserVars.mechfire[:hiding]			= true				if UserVars.mechfire[:hiding].nil?
UserVars.mechfire[:crystal_holder]	= nil				if UserVars.mechfire[:crystal_holder].nil?


line = nil
target = nil
ammo = nil
spirit_strike = false
crystal_check = nil
ammo_pre_name = nil


#Processes
check_error = proc{
	respond "\n
	
	There has been an error. Please make sure you have your ranged weapon in your left hand,
	nothing in your right hand, and a bag full of ammunition and try again. If error persists,
	please send a log to Getho#5573 on discord.
	"
	exit
}

check_position = proc{
	while !checkkneeling && !checkstanding && !checkhidden
		sleep 0.1
		waitrt?
		fput "stand" until standing?
		fput "stance defensive" until (checkstance == "defensive")
	end
}

check_ammo = proc{
	fput "look in my crossbow"
	while line = get
		if line =~ /^In the .* you see (.+)\.$/
			ammo = 0
			if (!$1.nil? )
				ammo = $1.split(/(?:,|and)/).length
			end
			break
		elsif line =~ /^There is nothing in there\.$/
			ammo = 0
			UserVars.mechfire[:is_cocked] = false
			break
		elsif line =~ /^That is closed\.$/
			ammo = 3
			UserVars.mechfire[:is_cocked] = true
			break
		end
	end
	UserVars.mechfire[:ammo_count] = ammo
}

check_reload = proc{
	ammo = UserVars.mechfire[:ammo_count]
	waitrt?
	if ammo.to_i <= 1
		while ammo.to_i < 5 
			multifput "get 1 bolt from #{UserVars.ammosack}", "load crossbow"
			while line = get
				if line =~ /^But your (.+?) can only hold up to five bolts\!$/
					ammo = 5
					fput "stow ##{GameObj.right_hand.id}"
					break
				elsif line =~ /^You flip open the stock of your (.+?) and load (.+?) into it\./
					ammo += 1
					break
				end
			end
		end
	end
	UserVars.mechfire[:ammo_count] = ammo
}

check_kneel = proc{
	waitrt?
	if (UserVars.mechfire[:kneeling] == true) && (checkkneeling != true)
		fput "kneel" until kneeling?
	end
}

check_hide = proc{

	while !checkhidden && UserVars.mechfire[:hiding]
		if checkoutside && !Spell[608].active? && Spell[608].known? && Spell[608].affordable?
			waitcastrt?
			res = dothistimeout "cast 608", 2, /^You are unable to call the power to camouflage yourself here\.$|^You look around\, but can\'t see anywhere to hide|^You attempt to blend with the surroundings\, and feel confident that no one has noticed your doing so\.$|You blend into invisibility among the surroundings\.$|^Your armor prevents the spell from working correctly\.$/
			if res =~ /^You are unable to call the power to camouflage yourself here\.$|but can\'t see anywhere to hide/
				echo "Can't camouflage here, moving on"
				break
			end
		elsif !checkhidden
			res = dothistimeout "hide", 2, /^You are unable to call the power to camouflage yourself here\.$|^You look around\, but can\'t see anywhere to hide|^You attempt to blend with the surroundings\, and feel confident that no one has noticed your doing so\.$|You blend into invisibility among the surroundings\.$|^Your armor prevents the spell from working correctly\.$/
			if res =~ /but can\'t see anywhere to hide/
				echo "Can't hide here, moving on"
				break
				
			end
		end
	end
}

get_target = proc{
	if (target == nil)
		target = GameObj.npcs.find { |npc| (npc.name =~ //)  && (npc.status !~ /dead|gone/) }
		(target = nil) if (target.name =~ /grizzled|ancient/) && (checkbounty !~ /hunt down and kill a particularly dangerous/)
		(target = nil) if (target.type !~ /\baggressive\b/)
	end
}

check_crystal = proc{
	fput "tap my #{UserVars.mechfire[:crystal_holder]}"
	while line = get
		if line =~ /^You tap (.+?) set with a blue crystal that you are wearing\.$/
			crystal_check = true
			break
		elsif line =~ /^You tap (.+?) that you are wearing\.$|^You tap (.+?) set with a (black|white) crystal (.+?)\.$|^What were you referring to\?$|^You tap (.+?) in your (.+?)\.$/
			crystal_check = false
			break
		end
	end
}

ss_prep = proc{
	while spirit_strike == true && !Spell[117].active? && crystal_check == true
		waitrt?
		waitcastrt?
		fput "rub my #{UserVars.mechfire[:crystal_holder]}"
		sleep 0.3
		waitcastrt?
	end
	spirit_strike = false
}

check_cock = proc{
	if UserVars.mechfire[:is_cocked] != true
		waitrt?
		fput "stance offensive" if checkstance != "offensive"
		fput "cock my crossbow"
		while line = get
			if line =~ /^You draw back on the bowstring|^You cock your (.+?)\.|^The (.+?) is already cocked\.$/
				UserVars.mechfire[:is_cocked] = true
				break
			elsif line =~ /^You must be holding (.+?) to cock it\.$/
				error_check.call
				break
			end
		end
	end
}

attack_uno = proc{
	waitrt?
	waitcastrt?
	fput "stance offensive" if checkstance != "offensive"
	sleep 0.1
	fput "fire #{target}"
	while line = get
		if line =~ /^You aim (.+?) squeeze the trigger (.+?) into action\!$/
			UserVars.mechfire[:ammo_count] -= 1
			UserVars.mechfire[:is_cocked] = false
			break
		elsif line =~ /^You dry fire your (.+)\.$/
			UserVars.mechfire[:ammo_count] = 0
			UserVars.mechfire[:is_cocked] = false
			echo "STANDBY: Reloading"
			fput "stance defensive" if (checkstance != "defensive")
			check_reload.call
			break
		elsif line =~ /^You do not currently have a target\.$|^I could not find what you were referring to\.$|^A (.+?) is quite dead already\.$/
			UserVars.mechfire[:is_cocked] = true
			target = nil
			break
		elsif line =~ //
		end
	end
	sleep 0.3
	waitrt?
}


#Arguments
if variable[1].downcase == "strike"
	spirit_strike = true
	if Skills.magicitemuse > 16
		check_crystal.call
	elsif Skills.magicitemuse < 17
		crystal_check = false
		echo "ERROR: Blue crystals set in crystal holders require 17 or more ranks of Magic Item Use."
		if running?('bigshot')
			Script.pause('bigshot')
			echo "ERROR: Pausing bigshot to avoid an infinite loop."
		end
	end
	sleep 0.1
	if crystal_check == false
		respond "\n
		You do not possess enough MIU skill to use a blue crystal OR
		You do not currently have a crystal in your crystal holder.
		Please run script again without argument if you want to continue.
		"
		exit
	end
elsif variable[1].downcase == "help"
	respond "\n
	
	Kneel to attack - Default set to true
	;e echo UserVars.mechfire[:kneeling] = false
	
	Hide and Snipe - Default set to true
	;e echo UserVars.mechfire[:hiding] = false
	
	Set a crystal holder for use with blue crystals.
	;e echo UserVars.mechfire[:crystal_holder] = \"pennant-shaped amulet\"
	
	Syntax to use spirit strike from a crystal holding wearable.
	;mechfire strike 
	"
	exit
end


#Flow
#check_ammo.call
check_reload.call
get_target.call
while (target != nil)
	check_position.call if !checkkneeling
	target = nil if (target.status =~ /dead|gone/)
	check_kneel.call 	if (target != nil)
	check_hide.call		if (target != nil)
	check_reload.call	if (target != nil) && (UserVars.mechfire[:ammo_count] == 0)
	check_cock.call		if (target != nil)
	ss_prep.call		if (target != nil) && spirit_strike && crystal_check
	attack_uno.call		if (target != nil) && (target.status !~ /dead|gone/)
	sleep 0.25
end
fput "stand"
fput "stance defensive" if (checkstance != "defensive")
exit






