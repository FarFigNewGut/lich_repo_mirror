=begin
    REIM Reactive Script
    Will do one round of attack per spawned wave of creatures.
    Automatically tries to target rare/boss creature if spawned during wave.
    Has coding built in to avoid REIM traps as well.
    Brought to you by the Hand of the Arkati!
	
    SYNTAX - ;treim <ATTACKOPTION>
    Will remember last used attack option if none given.
	
    ATTACKOPTION Selections Include:
         <SPELLNUMBER> - use a spell to cast once per wave/boss IE. 908 Major Fire
         SLEEP         - symbol of voln sleep
         PHYSICAL      - mstrike and attack boss for all you physical attackers
         UAC           - mstrike punch and punch boss for all your UAC needs
         RANGED        - ranged attack
         NONE          - won't attack, useful if manually wish to attack
	
    Running Commands
         ;send reimcount   - shows current group leader, group count, and previos group count
         whisper ooc group clearcheck - if group members are running script,
                    reports back clear and scrip status
                    MUST BE LEADER TO HAVE GROUP MEMBERS RESPOND

    Variables to set:
         Stance dance back to defensive after attack, default is TRUE
         ;e echo UserVars.treim[:stance_dance] = FALSE

         Add scripts to be auto-started and killed with TREIM, default is NONE
         ;e echo UserVars.treim[:activescripts] = ["stand", "symbolz"]

         Enable auto-clearing of Reim titles upon complition, default is FALSE
         ;e echo UserVars.treim[:clear_title] = true

       todo: add parsing of reim info command and show condensed info
     author: Tysong (horibu on PC)
       name: treim
       tags: reim
    version: 2.4

    changelog:
        2.4 (2017-11-29)
            Added clear_title variable to clear prename title upon completion
        2.3 (2017-11-29)
            Updated spawn detection to decrease "lag" issue.
        2.2 (2017-11-18)
            Fixed stance dancing for casting to respect UserVar
        2.1 (2017-11-18)
            Added some help verbage
        2.0 (2017-11-11)
            Rewrite of mob detection mechanic
            Added ability to use 1030 for Bards
            Attempt at adding initial "pause attack" on moving rooms.
                      (pause attack & resume attack)
        1.8 (2017-04-08)
            Corrected bug with bosscheck for physical/uac attack
            Added timeleft to clearcheck command
        1.7 (2017-03-22)
            Changed physical roundtime wait, added NONE command
        1.6 (2017-03-17)
            Believe to have fixed double/triple attacks on boss waves
        1.5 (2017-03-17)
            Added skip boss/named creature check if clear to next area
            Added a few other otions for leaders.
        1.1 (2017-03-16)
            Fixed some bugs
        1.0 (2017-03-15)
            Initial Release
			
    credit & thanks:
        Durakar for his help/collaboration in general for a lot of this script.
        Nishma as I canabalized all of his ;reimtrap script.
        Tgo01 as I canabalized his silence routine from ;dreavening.
        Ragz for his assistance with physical attacking and hold hands idea.
=end
=begin
;e echo GameObj.npcs.each { |npc| echo "Name: #{npc.name} - Type: #{npc.type}" }
;e echo GameObj.npcs.select{|npc| ((npc.type !~ /familiar|companion|passive|skin/) && (npc.noun !~ /arm|arms/))}.each { |npc| echo "Name: #{npc.name} - Type: #{npc.type}" }
;e echo GameObj.type_data['aggressive npc']
;e echo GameObj.npcs.count { |npc| ((npc.name !~ /arm}/) && !(npc.type !~ /companion|familiar|passive/)) }
=end

Village         = Array[24888,24900,24904,24909,24935,24936,24912,24919,24946,24945,24952,24964,24971,24972,24958,24959,24931,24932,24966,24953,25300,24901,24930,23484,24941,23650]
Road            = Array[24977,24978,24989,24990,24991,24994,24995,24996,24998,25003,25004,25020,25019,25021,24997,25022,25029,25030,25035,25042,25047,25046,25043,25041,25048,25049,25050,25051,25052,25053,25054,25056,25057,25058,25059,25064,25055,25060,25061,25062,25063]
Courtyard       = Array[25104,25103,25101,25100,25105,25102,25106,25107,25108,25099,25098,25097,25069,25068,25070,25071,25072,25082,25084,25083,25081,25078,25085,25086,25087,25088,25096,25095,25094,25093,25092,25091,25090,25089,25080,25079,25077,25075,25073,25076,25074,25067,25066,25065]
Servant         = Array[25113,25114,25115,25119,25118,25117,25116,25112,25111,25110,25109]
Visitor         = Array[25125,25124,25123,25129,25128,25127,25126,25122,25121,25120]
Royal           = Array[25141,25140,25132,25134,25136,25135,25137,25138,25139,25133,25131,25130]
MiscAreas       = Array[24965]
AreaReim        = (Village | Road | Courtyard | Servant | Visitor | Royal | MiscAreas).sort
ReimBosses      = Array["The Shopkeeper","The Innkeeper","The Bartender","The Patrol Leader","The Bandit Lord","The Bandit Lady","The Gypsy Queen","The Gypsy King","The Guard Captain","The Wall Captain","The The Drill Sergeant","The Stable Hostler","The Dungeon Master","The Master Torturer","The Butler","The Cook","The Knight Captain","The Foreign Dignitary","The Royal Prince","The Royal Princess","The Royal Jester","The Emperor","The Empress"]
ReimBossSearch  = Regexp.union(ReimBosses)
reim_npcs       = "ethereal (?:commoner|denizen|guard|guardsman|guardswoman|inmate|lunatic|madman|madwoman|peasant|prisoner|squire|swordsman|swordswoman|traveller|townsman|townswoman|villager)|ghostly (?:bandit|highwayman|highwaywoman|marauder|waylayer)|unworldly (?:guest|maid|noble|royal guard|royal knight|servant|slave|steward|visitor)|celestial (?:dancer|juggler|nomad|traveller)|Shopkeeper|Innkeeper|Bartender|Patrol Leader|Bandit Lord|Bandit Lady|Gypsy Queen|Gypsy King|Guard Captain|Wall Captain|Drill Sergeant|Stable Hostler|Dungeon Master|Master Torturer|Butler|Cook|Knight Captain|Foreign Dignitary|Royal Prince|Royal Princess|Royal Jester|Royal Emperor|Royal Empress"
npc_commons     = ["commoner","denizen","guard","guardsman","guardswoman","inmate","lunatic","madman","madwoman","peasant","prisoner","squire","swordsman","swordswoman","traveller","townsman","townswoman","villager","bandit","highwayman","highwaywoma","marauder","waylayer","guest","maid","noble","guard","knight","servant","slave","steward","visitor","dancer","juggler","nomad","traveller"]
npc_bosses      = ["Cook","Shopkeeper","Innkeeper","Bartender","Leader","Lord","Lady","Queen","King","Captain","Captain","Sergeant","Hostler","Master","Torturer","Butler","ook","Captain","Dignitary","Prince","Princess","Jester","Emperor","Empress"]
bossname        = ""
leader          = ""
members         = 0
previousmembers = 0
reim_current_room = 0
last            = Time.now

UserVars.treim                    ||= {}
UserVars.treim[:stance_dance]       = true		if UserVars.treim[:stance_dance].nil?
UserVars.treim[:attack_type]		= ""		if UserVars.treim[:attack_type].nil?
UserVars.treim[:activescripts]		= Array[]	if UserVars.treim[:activescripts].nil?
UserVars.treim[:clear_title]		= false		if UserVars.treim[:clear_title].nil?

AnnounceRares = Array['Tysong','Durakar','Siierra','Ragz','Nairdin','Arshwikk','Ylandra','Gharr','Ordim']
KillNouns = Array['Murder','Kill','Slaughter','Abolish','Exterminate','Wreck','Demolish','Massacre','Obliterate','Crush','Tickley tickle','Kiss','Hug']

if $frontend == 'stormfront'
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

class CappedCollection
	MAX_SIZE = 200
	attr_accessor :list, :max_size

	def initialize(max_size = MAX_SIZE)
		@list     = []
		@max_size = max_size
	end

	def <<(id)
		@list << id
		while @list.size > @max_size
			@list.shift
		end
	end

	def include?(id)
		@list.include?(id)
	end
end

npc_ids	= CappedCollection.new

def attack_routine(attack_target)
	if UserVars.treim[:attack_type] == "sleep"
		waitcastrt?
		fput "symbol of sleep"
	elsif UserVars.treim[:attack_type] == "physical"
		waitrt?
		fput "stance offensive" if checkstance != "offensive"
		if attack_target == ""
			fput "mstrike"
		else
			fput "attack #{attack_target}"
			pause 1
			waitrt
			fput "mstrike"
		end
		pause 1
		waitrt?
		fput "stance defensive" if UserVars.treim[:stance_dance]
		return 1
	elsif UserVars.treim[:attack_type] == "uac"
		waitrt?
		fput "stance offensive" if checkstance != "offensive"
		if attack_target == ""
			fput "mstrike punch"
		else
			fput "punch #{attack_target}"
			pause 1
			waitrt
			fput "mstrike punch"
		end
		pause 1
		waitrt?
		fput "stance defensive" if UserVars.treim[:stance_dance]
		return 1
	elsif UserVars.treim[:attack_type] == "sleep1630"
		waitrt?
		fput "stance offensive" if checkstance != "offensive"
		if attack_target == ""
			fput "sym sleep"
			fput "inc 1630"
			pause 4
		else
			fput "mstr #{attack_target}"
			pause 1
			waitrt
			fput "mstrike"
		end
		pause 1
		waitrt?
		fput "stance defensive" if UserVars.treim[:stance_dance]
		return 1
	elsif UserVars.treim[:attack_type] == "sleep135"
		waitrt?
		waitcastrt?
		if attack_target == ""
			fput "sym sleep"
			fput "inc 135"
			pause 4
			fput "mstrike"
		else
			fput "mstr #{attack_target}"
			pause 3
			waitrt
			fput "mstrike"
		end
		pause 1
		return 1
	elsif UserVars.treim[:attack_type] == "sleepattack"
		pause 2
		waitrt?
		waitcastrt?
		fput "stance offensive" if checkstance != "offensive"
		if attack_target == ""
			fput "sym sleep"
			fput "mstrike"
		else
			fput "mstr #{attack_target}"
			pause 1
			waitrt
			fput "mstrike"
		end
		pause 1
		return 1
	elsif UserVars.treim[:attack_type] == "smallgroup"
		waitrt?
		waitcastrt?
		if attack_target == ""
			fput "sym sleep"
			fput "inc 1614"
			pause 4
			fput "mstrike"
		else
			fput "mstr #{attack_target}"
			pause 1
			waitrt
			fput "mstrike"
		end
		pause 1
		return 1
	elsif UserVars.treim[:attack_type] == "ranged"
		waitrt?
		fput "get 1 my arrow" if Char.name !~ /Nuadjha|Tsin/ && GameObj.right_hand.noun != "arrow"
		waitrt?
		fput "incant 506" if Spell[506].affordable? && !Spell[506].active? && Char.prof == "Wizard"
		fput "stance offensive" if Char.stance !~ /offensive/
		fput "fire #{attack_target}"
		return 1
	elsif UserVars.treim[:attack_type] == "none"
		return 1
	elsif UserVars.treim[:attack_type] == "1030"
		if Spell[1030].affordable?
			waitrt?
			waitcastrt?
			line = dothistimeout "renew 1030", 5, /But you are not singing that spellsong\.|You continue to sing a disruptive song\./
			if line =~ /But you are not singing that spellsong\./
				multifput "prep 1030", "sing"
			end
		end
		return 1
	elsif UserVars.treim[:attack_type] == "435"
		if Spell[UserVars.treim[:attack_type]].affordable?
			waitrt?
			waitcastrt?
			put "incant #{UserVars.treim[:attack_type]}"
		end
		return 1
	else
		#pause 1 if variable[1] =~ /1030|635|908|135/ && checkpcs.size > 12
		if UserVars.treim[:stance_dance]
			afterstance = "defensive"
		else
			afterstance = "offensive"
		end
		waitrt?
		waitcastrt?
		if Char.name =~ /Siierra|Naina/ && attack_target != ""
			if (cast(1115,"#{attack_target}", @@after_stance=afterstance) if Spell[UserVars.treim[:attack_type]].affordable?) =~ /(?:.*)Spell Hindrance(?:.*)/
				return nil
			else
				return 1
			end
		elsif UserVars.treim[:attack_type].downcase =~ /512|518/ && attack_target != ""
			if (cast(908,"#{attack_target}", @@after_stance=afterstance) if Spell[UserVars.treim[:attack_type]].affordable?) =~ /(?:.*)Spell Hindrance(?:.*)/
				return nil
			else
				return 1
			end
		elsif UserVars.treim[:attack_type] =~ /512/ && attack_target == ""
			cast(512,"#{attack_target}", @@after_stance=afterstance) if Spell[UserVars.treim[:attack_type]].affordable?
			pause 1 if GameObj.npcs.count { |npc| ((npc.name !~ /arm}/) && !(npc.type !~ /companion|familiar|passive/)) } > 16
			#echo GameObj.npcs.count{ |npc| ((npc.name !~ /arm}/) && !(npc.type !~ /companion|familiar|passive/)) }
			waitcastrt? if GameObj.npcs.count { |npc| ((npc.name !~ /arm}/) && !(npc.type !~ /companion|familiar|passive/)) } > 16
			cast(512,"#{attack_target}", @@after_stance=afterstance) if Spell[UserVars.treim[:attack_type]].affordable? && GameObj.npcs.count{ |npc| ((npc.name !~ /arm}/) && !(npc.type !~ /companion|familiar|passive/)) } > 16
			return 1
		else
			if (cast(UserVars.treim[:attack_type],"#{attack_target}", @@after_stance=afterstance) if Spell[UserVars.treim[:attack_type]].affordable?) =~ /(?:.*)Spell Hindrance(?:.*)/
				return nil
			else
				return 1
			end
		end
	end
end

def clearcheck(bossname)
	# GameObj.npcs.select{ |npc| npc.id == bossname.id }.count
	while GameObj.npcs.select{ |npc| npc.id == bossname }.count > 0 do
		pause 0.5
	end
	waitrt?
	pause 0.5
	fput "REIM INFO"
	line = get
	until line =~ /You have slain a total of (.*) creatures within Reim./
		if line =~ /currently flagged for entry for up to the(.*)./
			clearto = $1.split.first
		elsif line =~ /Total Ethereal Scrip for this run: (.*)\/./
			scrip = $1.to_i
		elsif line =~ /You have (.*) hour and (.*) minutes? remaining/
			timeleft = "#{$1}H #{$2}M"
		elsif line =~ /You have ([0-9]{2}) minutes? remaining./
			timeleft = "#{$1}M"
		end
		line = get
	end
	return clearto, scrip, timeleft
end

def groupcheck()
	fput "GROUP"
	members = 0
	line = get
	until line =~ /for a list of other options./
		if line =~ /^(.*) is the leader of your group./
			groupleader = $1.split.first
			members += 1
		elsif line =~ /^(.*) is following you./
			groupleader = Char.name
			members += 1
		elsif line =~ /^(.*) is also a member of your group./
			members += 1
		end
		line = get
	end
	return groupleader, members
end

silence = proc {
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
#		if server_string =~ /Current quest status\:|Time until next premium entry\:|Your reputation rank with the Reim Base Camp|Total Reputation|Total Quest Energy|Total Ethereal Scrip|Total Ethereal Scrip for this run|You are currently questing in the Settlement of Reim.|You are currently flagged for entry for up to the|You have slain a total of|REIM INFO|Your group status is currently|for a list of other options|is following you|is also a member of your group|is the leader of your group/
		if server_string =~ /Current quest status\:|Time until next premium entry\:|Your reputation rank with the Reim Base Camp|Total Reputation|Total Quest Energy|Total Ethereal Scrip|Total Ethereal Scrip for this run|You are currently questing in the Settlement of Reim.|You are currently flagged for entry for up to the|You have slain a total of|REIM INFO|Your group status is currently|for a list of other options|is following you|is also a member of your group|is the leader of your group|Reim Fortress Defense|Current quest status|Times Defended|Times Failed|Highest Round Completed|Highest Score|Total Contribution|General Information|The Settlement of Reim/
			nil
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_silence", action)
}

before_dying { 
	DownstreamHook.remove("#{script.name}_silence")
	if variable[2] == "leader"
		kill_script "holdhands"
	end
	UserVars.treim[:activescripts].each { |script|
		kill_script script
	}
}

blacklist = Array[]
if blacklist.include? Char.name
	exit
end

if variable[1] && variable[1].downcase != "help"
	UserVars.treim[:attack_type] = variable[1].downcase
elsif ((variable[1] == nil || variable[1].downcase == "help") && UserVars.treim[:attack_type] == "") || variable[1].downcase == "help"
	respond "\n
  SYNTAX - ;treim <ATTACKOPTION>
  Will remember last used attack option if none given.
	
  ATTACKOPTION Selections Include:
      <SPELLNUMBER> - use a spell to cast once per wave/boss IE. 908 Major Fire
      SLEEP         - symbol of voln sleep
      PHYSICAL      - mstrike and attack boss for all you physical attackers
      UAC           - mstrike punch and punch boss for all your UAC needs
      RANGED        - ranged attack
      NONE          - won't attack, useful if manually wish to attack
	
  Running Commands
     ;send reimcount   - shows current group leader, group count, and previos group count
     whisper ooc group clearcheck - if group members are running script,
                    reports back clear and scrip status
                    MUST BE LEADER TO HAVE GROUP MEMBERS RESPOND
					
					
  Variables to set:
     Stance dance back to defensive after attack, default is TRUE
     ;e echo UserVars.treim[:stance_dance] = FALSE

     Add scripts to be auto-started and killed with TREIM, default is NONE
     ;e echo UserVars.treim[:activescripts] = [\"stand\", \"symbolz\"]
	 
	 Enable auto-clearing of Reim titles upon complition, default is FALSE
	 ;e echo UserVars.treim[:clear_title] = true"
	exit
end

if variable[2].downcase == "leader"
	start_script "holdhands", [ "reim" ]
end


loop {
	if AreaReim.include? Room.current.id
		respond "You're in REIM, lets get to work!!!!"
		silence.call
		clearto, scrip, timeleft = clearcheck(bossname)
		echo scrip if Char.name =~ /Tysong/
		DownstreamHook.remove("#{script.name}_silence")
		UserVars.treim[:activescripts].each { |script|
			start_script script
		}
		while AreaReim.include? Room.current.id do
			line = get
			if reim_current_room != Room.current.id
				if line =~ /(?:strides|rushes|leaps|strolls) toward/
					if GameObj.npcs.count { |npc| ((npc.name =~ /#{reim_npcs}/) && !(npc_ids.include? npc.id)) } > 30 && Char.name =~ /Tysong/
						puts("#{fam_window_begin}Mob Count: #{GameObj.npcs.count { |npc| (npc.name =~ /#{reim_npcs}/ && !(npc_ids.include? npc.id)) }} \r\n#{fam_window_end}") if Char.name =~ /Tysong/
						#put "stance offensive"
						put "incant 435"
						pause 0.5
						#put "stance defensive"
						GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id)}
					elsif GameObj.npcs.count{ |npc| ((npc_bosses.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) } > 0
						puts("#{fam_window_begin}Mob Count: #{GameObj.npcs.count { |npc| npc.name =~ /#{reim_npcs}/ }} \r\n#{fam_window_end}") if Char.name =~ /Tysong/
						bossname = GameObj.npcs.select{ |npc| ((npc_bosses.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) }.sample
						bosses_found = GameObj.npcs.select{ |npc| ((npc_bosses.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) }
						bosses_found.each { |boss|
							put "'#{KillNouns.sample} the #{boss.name}" if AnnounceRares.include? Char.name
							npc_ids << boss.id
						}
						if Village.include? Room.current.id and clearto == "road"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next
							until attack_routine(""); end
						elsif Road.include? Room.current.id and clearto == "courtyard"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next variable[1].downcase !~ /410|909|709|sleep/
							until attack_routine(""); end
						elsif Courtyard.include? Room.current.id and clearto == "servant"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next variable[1].downcase !~ /410|909|709|sleep/
							until attack_routine(""); end
						elsif Servant.include? Room.current.id and clearto == "visitor"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next variable[1].downcase !~ /410|909|709|sleep/
							until attack_routine(""); end
						elsif Visitor.include? Room.current.id and clearto == "royal"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next variable[1].downcase !~ /410|909|709|sleep/
							until attack_routine(""); end
						elsif Royal.include? Room.current.id and clearto == "throne"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next variable[1].downcase !~ /410|909|709|sleep/
							until attack_routine(""); end
						else
							echo bossname.noun
							#echo bossname.noun
							until attack_routine("#{bossname.noun}"); end
							silence.call
							clearto, scrip, timeleft = clearcheck(bossname.id)
							respond "\nCleared Through: #{clearto}
							Total Scrip: #{scrip}"
							DownstreamHook.remove("#{script.name}_silence")
						end
					elsif GameObj.npcs.count{ |npc| ((npc_commons.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) } > 0
						total_mobs = GameObj.npcs.count { |npc| npc.name =~ /#{reim_npcs}/ }
						#put "whisper ooc group Creatures: #{total_mobs} - Players: #{checkpcs.count.to_i + 1}"
						puts("#{fam_window_begin}Mob Count: #{total_mobs} - Players: #{checkpcs.count.to_i + 1} \r\n#{fam_window_end}") if Char.name =~ /Tysong/
						#send_to_script('lnet',"chat on HoA Mob Count: #{GameObj.npcs.count { |npc| npc.name =~ /#{reim_npcs}/ }} ")
						GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id)}
						until attack_routine(""); end
					end
				elsif line =~ /reimcount/
					silence.call
					leader, members = groupcheck
					DownstreamHook.remove("#{script.name}_silence")
					respond "Group Leader:    #{leader}"
					respond "Group Members:   #{members}"
					respond "Previous Check:  #{previousmembers}"
					previousmembers = members
				elsif line =~ /\(OOC\) (.*)'s player whispers to the group, "Clearcheck."/
					whisperperson = $1.split.first
					silence.call
					leader, members = groupcheck
					#echo leader 
					#echo members
					#echo whisperperson
					if whisperperson == leader
						clearto, scrip, timeleft = clearcheck(bossname)
						fput "whisper ooc #{leader} Clear: #{clearto}, Scrip: #{scrip}, Timeleft: #{timeleft}"
					else
						put "whisper ooc #{whisperperson} You're not the leader, #{whisperperson}!"
					end
					DownstreamHook.remove("#{script.name}_silence")
				elsif line =~ /\(OOC\) (.*)'s player whispers to the group, "Pause attack."/
					whisperperson = $1.split.first
					silence.call
					leader, members = groupcheck
					DownstreamHook.remove("#{script.name}_silence")
					if whisperperson == leader
						echo "PAUSING TREIM UNTIL RESUMED BY LEADER"
						while line !~ /\(OOC\) (.*)#{whisperperson}'s player whispers to the group, "Resume attack."/ do
							line = get
						end
						echo "RESUMING TREIM"
					else
						put "whisper ooc #{whisperperson} You're not the leader, #{whisperperson}!" 
					end
				elsif line =~ /You realize that (.*) (?:were|was) left behind./
					_respond "#{monsterbold_start}You left #{$1} behind#{monsterbold_end}"
					fput "say We left #{$1} behind"
					send_to_script('lnet',"chat to #{Char.name} You left #{$1} behind")
				end
			else
				reim_current_room = Room.current.id
			end
			#TRAP Stuff
			if line == "A slender ethereal blowgun appears from the shadows nearby, aimed right for you!"
				waitrt?
				fput "lean"
			elsif line == "An ethereal bow appears from the shadows nearby, aimed right for you!"
				waitrt?
				fput "lean"
			elsif line == "A pair of ethereal hands shoot up from the ground, straight for your legs!"
				waitrt?
				fput "jump"
			elsif line == "An ethereal chain lashes out from the shadows straight for your head!"
				waitrt?
				fput "duck"
			elsif line == "An ethereal chain lashes out from the shadows straight for your legs!"
				waitrt?
				fput "jump"
			end
			XMLData.reset
		end
	elsif Room.current.id == 25142
		respond "\n
		###############################################################
		##                                                           ##
		##               You're in the throne room                   ##
		##                  IDLING TREIM SCRIPT                      ##
		##                                                           ##
		###############################################################\n\n\n"
		until (Room.current.id != 25142) do
			XMLData.reset
			sleep(1)
		end
	elsif Room.current.id == 25143
		respond "DONE WITH REIM, EXITING"
		multifput "title set prename Lord","title clear Lord" if UserVars.treim[:clear_title]
		
		exit
	else
		respond "\nScript will only run in creature only REIM rooms.              
		The script will wait until you get your arse inside REIM!!!"
		until (AreaReim.include? Room.current.id) do
			XMLData.reset
			sleep(1)
		end
	end
}