=begin
  Trashtag is a simple tool for mappers used for adding trash cans to the map database.

  Usage:

    ;repos checkout-mapdb    # To changes to the mapdb

    ;trashtag                # To show/check the trashcan in the current room.

    ;trashtag <item>         # Tag the specified item as a trashcan.
                             # The full item name will be presented and you'll be asked to confirm by unpausing the script.

    ;repos upload-mapdb      # To commit changes afterwards

  Trashcans must be present in the room description or "You also see" lines.
  (In other words, they must exist in GameObj.room_desc or GameObj.loot)

  author: LostRanger (thisgenericname@gmail.com)

	game: any
	tags: utility

  version: 0.1 (2020-03-16)

  changelog:
    version 0.1
     * Initial release
=end

module Trashtag
    class <<self
        def set_tag(rm, value=nil)
            rm.tags ||= []
            rm.tags.delete_if{|x| x =~ /^meta:trashcan:/}
            return unless value
            rm.tags << "meta:trashcan:#{value}"
        end

        def get_item_patterns(name, strip_my=true)
            # name = name.gsub(/^\s*my\s+/, '')
            words = name.strip.split(/\s+/)
            words.map!{|w| Regexp::escape(w)}

            if words.length == 1  # Just one word
                return [
                    /^#{words[0]}$/i,
                    /\b#{words[0]}$/i,
                    /^#{words[0]}\S+$/i,
                    /\b#{words[0]}\S+$/i,
                ]
            end
            return [
                # All words are exact matches.
                /^#{words.join("\\b.*\\b")}$/i,
                # Fully anchored suffix matches.
                /^#{words.join("\\S*\\s+(?:.*\\s+)?")}\S*$/i,
                # All words are prefix matches, not neccessarily anchored
                /\s+#{words.join(".*\\s+")}\S*$/i
            ]
        end
        def run(script)
            args = script.vars[0].downcase
            args.strip!

            rm = Room.current
            unless rm and rm.id
                echo "You are not currently in a mapped room.  Please map it first."
                exit
            end

            if rm.tags
                trashcan_tag = rm.tags.find{|x| x =~ /^meta:trashcan:(.+)$/}
                if trashcan_tag
                    trashcan_name = $1

                    echo "Trashcan for the current room is: #{trashcan_name}"
                    trashcan_item = GameObj.room_desc.find{|x| x.name == trashcan_name}
                    trashcan_item = GameObj.loot.find{|x| x.name == trashcan_name} unless trashcan_item
                    if trashcan_item
                        echo "Trashcan exists: #{trashcan_item.inspect}"
                        fput "look in ##{trashcan_item.id}"
                    else
                        echo "ERROR: Trashcan does not exist."
                    end
                else
                    trashcan_name = trashcan_item = nil
                    echo "No trashcan is defined for the current room."
                end
            end

            exit if args == '' or args.nil?

            if args =~ /^clear$|^none$/
                if trashcan_name
                    echo "Nothing to do, exiting."
                    exit
                end
                echo "I'm going to remove the existing trashcan tag for '#{trashcan_name}'"
                echo "Afterwards, this room will have no trashcan tag."

                echo "These changes will be made to room ##{rm.id}."
                echo "To continue, unpause the script.  Otherwise, kill it."
                pause_script
                set_tag(rm, nil)
                exit
            end

            patterns = get_item_patterns(args)

            matches = {}
            match = matches
            patterns.each do |pattern|
                [GameObj.room_desc, GameObj.loot].each do |src|
                    src.each do |item|
                        next unless item.name =~ pattern
                        if matches[item.id]
                            next if matches[item.id].name.length > item.name.length
                        end
                        matches[item.id] = match = item
                    end
                end
            end

            if matches.length == 0
                echo "Found nothing matching '#{args}'"
                exit
            end
            if matches.length == 2
                echo "Multiple items found matching '#{args}', be more specific.  Items found are: "
                matches.each{|id, match| echo "  - #{match.name}"}
                exit
            end

            if trashcan_name
                if match.name == trashcan_name
                    echo "No change to room tags is necessary, stopping."
                    exit
                end

                echo "I'm going to remove the existing trashcan tag for '#{trashcan_name}'"
                echo "Afterwards, I'm going to add the trashcan '#{match.name}'"
            else
                echo "No trashcan already exists in this room."
                echo "I'm going to add the trashcan '#{match.name}'"
            end
            fput "look in ##{match.id}"

            echo "These changes will be made to room ##{rm.id}."
            echo "To continue, unpause the script.  Otherwise, kill it."
            pause_script

            set_tag(rm, match.name)
        end
    end
end

Trashtag.run(script)
