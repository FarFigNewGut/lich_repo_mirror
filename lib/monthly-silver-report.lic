=begin
  generates a google chart and launches Chrome to render it 
  for ledger.lic and the current month's silver earnings

   author: Ondreian
  version: 1.0.0
=end

##
## minimal options parser
##
unless defined? Opts
  module Opts
    FLAG_PREFIX = "--"
    
    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.as_list(key)
      val = to_h.fetch(key.to_sym, [])
      val = [val] if val.is_a?(String)
      return val
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end
end

month      = Opts.month || Time.now.month
character  = Opts.character || Char.name
year       = Opts.year || Time.now.year
type       = Opts.type || "silver"
graph_file = File.join($data_dir, "month-#{character}-#{month}-#{type}.html")

transactions = Ledger::History::Transactions
  .where(character: character, year: year, month: month, type: type) 
  .to_a

daily_reports = transactions.each_with_object({}) { |transaction, acc|
  next if transaction[:amount].abs > 1_000_000
  acc[transaction[:day]] ||= 0
  acc[transaction[:day]] = acc[transaction[:day]] + transaction[:amount]
}

days = 1..daily_reports.keys.map(&:to_i).max

days.to_a.each {|day| daily_reports[day] ||= 0}

total = daily_reports.values.reduce(&:+)

body = <<EOF
<html>
    <head>
      <style>
        body {
          background-color:slategrey;
        }
      </style>
      <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
      <script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);
  
        function drawChart() {
          var data = google.visualization.arrayToDataTable([
            ['Day', 'Silvers'], ...#{daily_reports.to_a.sort_by(&:first).to_json}
          ]);
  
          var options = {
            title: '#{character} / Silver Generation For #{Date::MONTHNAMES[month]}, #{year} / Total: #{Ledger::History.with_commas(total)}',
            backgroundColor: 'slategrey',
            pointVisible: true,
            legend: { position: 'bottom' }
          };
  
          var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
  
          chart.draw(data, options);
        }
      </script>
    </head>
    <body>
      <div id="curve_chart" style="width: 900px; height: 500px"></div>
    </body>
  </html>
EOF

File.write(graph_file, body)

`google-chrome #{graph_file}`