#quiet

=begin
  Homogenizes LNET and ESP.

  Recommended Highlights:
    [L]
    [E]
    [Focused]
    [Focused to
    [Private]
    [PrivateTo]

    and any channels you subscribe to

     author: elanthia-online
       game: Gemstone
       tags: thoughts
    version: 0.0.7
    github : https://github.com/daggeron/lich-scripting
   changelog:
      0.0.7 (2020-11-11):
        Updated to use the most recent version of Oleani
        Pushed to Elanthia-Online
      0.0.6 (2020-09-12):
        Small code cleanup
      0.0.5 (2020-08-10):
        Small code cleanup
      0.0.4 (2020-07-09):
        Fixed an issue where LNET messages sent sometimes broke
      0.0.3 (2020-07-07):
        Minor fixes
        Added Profanity support
      0.0.2 (2020-07-05):
        Fixed unescaped %
      0.0.1 (2020-07-04):
        Initial Release

=end

unless $frontend =~ /^profanity|^stormfront/
  echo "Milkman only works with Profanity and Stormfront."
  exit
end

begin
  raise "Oleani is missing" unless Script.exists? "oleani-lib.lic"
  load 'scripts/oleani-lib.lic'
  raise "Oleani version is out of date" if Oleani::version < Gem::Version.new('0.0.9')
rescue => error
  echo error.message
  echo "Downloading Oleani-lib.lic"
  do_client(";repository download oleani-lib.lic")
  wait_while {running?('repository')}
  retry if Script.exists? "oleani-lib.lic"
  echo "Some how a core script is missing.  Don't know what happened."
  exit
end


format = "%{shortnetwork}[%{channel}] %{user}: %{message}"

if $frontend == 'profanity'
  output_client = $_DETACHABLE_CLIENT_
else
  output_client = $_CLIENT_
end


baby_jesus_tears = output_client.singleton_class.instance_method(:puts)

before_dying {
  DownstreamHook.remove("esp_hook")
  SynchronizedSocket.send(:remove_method, :puts)
  SynchronizedSocket.send(:define_method, :puts, baby_jesus_tears)
}

SynchronizedSocket.send(:remove_method, :puts)
SynchronizedSocket.send(:define_method, :puts) {|*args, &block|
  args.each {|server_string|
    #This regex has a lot of wildcards because some idiots like to mess with
    # their LNET names >.>
    if server_string =~ /<pushStream id="thoughts"\/>\[(.*?)\](?:-.+?:|-)(.*?):\s(.*?)<popStream\/>/m
      begin
        channel = $1
        user = "<preset id='link'>#{$2}</preset>"
        message = $3
        vars = {
            shortnetwork: "[L]",
            longnetwork: "[LNET]",
            channel: channel,
            user: user,
            message: message.gsub(/[\r\n]/, '')
        }

        xml = "<pushStream id=\"thoughts\"/>#{format}\n<popStream/>" % vars

        baby_jesus_tears.bind(output_client).call(xml, &block)
      rescue => e
        echo server_string
        Utilities::send_formatted("!! #{e.message} !!")
        e.backtrace.each {|line| echo line}
      end
    else
      baby_jesus_tears.bind(output_client).call(*args, &block)
    end
  }
}

DownstreamHook.add("esp_hook", proc {|server_string|

  if server_string =~ /<pushStream id="thoughts"\/>\[(.*?)\]-?\s*(.*)?[:,] (.*)/m

    saved_server_string = server_string
    channel = $1
    user = $2
    current_text = $3.gsub(/[\n\r]/, '')
    begin

      vars = {
          shortnetwork: "[E]",
          longnetwork: "[ESP]",
          channel: channel,
          user: user,
          message: current_text.gsub(/[\r\n]/, '')
      }

      server_string = "<pushStream id=\"thoughts\"/>#{format}\n" % vars

    rescue
      server_string = saved_server_string
    end
  end

  server_string
})

Oleani::IO.send("@@ESP & LNET together!@@  **Stop me with** ``#{$lich_char}kill #{script.name}``")

hide_me
sleep
