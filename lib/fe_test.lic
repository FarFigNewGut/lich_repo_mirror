def self.anon_hook(prefix = '')
  now = Time.now
  "Foreach::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}"
end

def self.mask_output(start_pattern, end_pattern = /<prompt/, include_end = true)
  filter = false
  name = self.anon_hook
  DownstreamHook.add(name, proc {|xml|
    if filter
      if xml =~ end_pattern
        DownstreamHook.remove(name)
        filter = false
        next(include_end ? nil : xml)
      else
        next(nil)
      end
    elsif xml =~ start_pattern
      filter = true
      next(nil)
    else
      xml
    end
  })
  return name
end

def self.quiet_command(command, start_pattern, end_pattern = /<prompt/, include_end = true, timeout=1)
  hook = self.mask_output(start_pattern, end_pattern, include_end)
  silence_me
  xml = dothistimeout(command, timeout, start_pattern)
  silence_me
  unless xml 
    DownstreamHook.remove(hook)
    return nil
  end

  result = [xml]
  while true
    xml = get
    if xml =~ end_pattern
      result << xml if include_end
      return result
    end
    result << xml
  end
end

status_tags
fe_data = self.quiet_command("exp",/ s*Level: [0-9]+\s*Fame: [\d,]+/)
status_tags
fe_pattern = /Field Exp: *(?<currentfe>[\d,]+)\/(?<femax>[\d,]+)/
fe_data.each{|fe_data_line| 
	fe_pattern_result = fe_pattern.match(fe_data_line)
	if fe_pattern_result
		#echo fe_pattern_result[:currentfe]
		#echo fe_pattern_result[:femax]
		echo "Field EXP : #{fe_pattern_result[:currentfe].to_i / fe_pattern_result[:femax].to_i * 100} Percent" 
end
}