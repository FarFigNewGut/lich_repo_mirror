=begin
  death_potions
  Written by Gibreficul, with a little help from my friends.
  You probably aren't one of them.
  Just start the script.
  Updated to remove CON penalty.
  
  The script will buy potions until you've got no sting and full CON or no silvers. (or it should)
  original author: Gibreficul
  updated by: Xanlin
  version: 2.1
  tags: death, recovery, potions, utility
=end
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
@script_name = script.name;
def self.find_nearest(target_list)
  start_room = Room.current
  least_time = nil
  least_target = nil
  previous, shortest_distances = Map.dijkstra(start_room.id)
  for target in target_list
    return target if start_room.id == target
    est_time = shortest_distances[target]
    if !est_time.nil? and (least_time.nil? or least_time > est_time)
      least_target = target
      least_time = est_time
    end
  end
  least_target = nil unless least_target
  return least_target
end

def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
def self.dothisquiet(command, timeout=5, start_pattern=/.*?/, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = false)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;

def self.read_experience(no_commas = true);
  pair_extract_pattern = /(?:^|  +)(\w[^:]*): (.*?)(?:  | *\r?\n)/
  status_tags
  result = dothisquiet "experience", 3 ,/<output class=/, true;
  status_tags
  h = {}
  result.join("\n").scan(pair_extract_pattern).each { |k,v|
    v.gsub!(',','') if no_commas
    v = v.to_i if v=~ /^\d+$/
    h[k] = v
    if k =~ /\// and v =~ /\//
      h[k.split('/')[0]]=v.split('/')[0]
      h[k.split('/')[1]]=v.split('/')[1]
    end
  }
  return h;
end;
def self.checksting
  exp = self.read_experience
  
  $sting       = exp["Death's Sting"]
  $recentdeath = exp["Recent Deaths"]
  
  echo "$sting = #{$sting}"
  return false if $sting == /None/i
  return $sting
end

def self.read_info(no_commas = true);
  pair_extract_pattern = /(?:^|  +)(\w[^:\n]*): *([^\n]*?)(?: | *\r?\n|$)/
  stat_extract_pattern = /^ *(\w+) \((\w+)\): *(\d+) \((\d+)\) *\.\.\. *(\d+) \((\d+)\) */
  status_tags
  result = dothisquiet "info", 3 ,/<output class=/, true;
  status_tags
  h = {}
  result.each { |line|
    if line =~ / \.\.\. / and line =~ /\d/
      v = line.gsub(/<[^>]+>/,'').scan(stat_extract_pattern).flatten
      k = v[1] #the abbreviation
      v = v[2..-1].map(&:to_i) #stat/bonus, enhanced stat/bonus
      h[k] = v
    else
      line.gsub(/<[^>]+>/,'').scan(pair_extract_pattern).each { |k,v|
        v.gsub!(',','') if no_commas
        v = v.to_i if v=~ /^\d+$/
        h[k] = v
        if k =~ /\// and v =~ /\//
          h[k.split('/')[0]]=v.split('/')[0]
          h[k.split('/')[1]]=v.split('/')[1]
        end
      }
    end
    }
  return h;
end;

def self.check_con
  info = self.read_info
  ennhanced_con = info["CON"][2]
  regular_con   = info["CON"][0]
  echo "ennhanced_con, regular_con | #{ennhanced_con},#{regular_con}"
  con_potions   = info["CON"][0]-info["CON"][2] #enh con - reg con
  $con_potions = con_potions
  return(con_potions)
end

def self.mymove(room = false)
  fput "out" if checkroom =~ /table/i
  if room
    if hiding?
      start_script("go2",['typeahead=0', room, '_disable_confirm_'])
      wait_while{running?("go2")}
    else
      start_script("go2",[room, '_disable_confirm_'])
      wait_while{running?("go2")}
    end
  end
end

def self.calcpotions
  sting_level = {"Crushing"=> 32, "Piercing"=> 20, "Harsh"=> 16, "Sharp"=> 8, "Moderate"=> 4, "Light"=> 2} 
  sting = sting_level[$sting];
  sting = 0 if sting.nil?;
  potions = (check_con) + sting
  echo "Script will withdraw enough for #{potions} potions at #{self.potion_price} each" if potions > 0
  return(potions)
end

def self.gobank(room = false)
  mymove 'bank'
  room ||= Room.current.id
  fput "depo all"
  x = false
  if calcpotions == 0
    mymove "town"
    echo "NO STING"
    exit
  end
  fput "withdraw #{calcpotions * self.potion_price} silver"
  x = matchtimeout(1,  "that much in the account|silver you've already got in the bank|debt collect")
  if x =~ /debt collect/
    respond "Gibreficul has documented that you are a deadbeat lowlife, however your debts are now paid."
    return gobank(room)
  elsif x =~ /that much silver in the account/
    respond "Gibreficul doesn't think you have enough for a normal withdrawl.   I'm gunna take it ALL and see what we have when it's all said and done."
    result = false
    until result =~ /that much in the account/
      fput "withdraw #{self.potion_price} silver"
      result = matchtimeout(1,  "that much in the account|silver you've already got in the bank|debt collect")
      break unless result
      break if result =~ /that much in the account/
    end
  elsif x
    mymove 'town'
    echo "NO CASH"
    exit
  end
  mymove room unless room == Room.current.id
  unless GameObj.npcs.find{|npc| npc.noun =~ /priestess/i}
    mymove 'town'
    unless checkpaths
      start_script 'step2',["#{room}"];wait_while{running? 'step2'}
    end
    findpriestess
  end
end

def self.findpriestess
  if checkpaths
    walk until GameObj.npcs.find{|npc| npc.noun =~ /priestess/i}
  else
    fput "go walk"
    return findpriestess
  end
end

def self.sting_potions
  x = self.potion_price
  fput "give ##{GameObj.npcs.find{|npc| npc.noun == 'priestess'}.id} #{x}"
  z = matchwait /You count your coins and realize that you don't have that much money|flask with a clear fluid|is it you're trying/
  if z =~ /flask with a clear fluid/
    fput "drink my flask"
    y = matchwait /feel somehow changed|sweet, like an orange|but you feel somehow changed/
    if y =~ /like an orange/
      unless checksting
        mymove "bank"
        fput "depo all"
        mymove "town"
        return
      end
    end
  elsif z =~ /is it you're trying/
    findpriestess
  else
    room = Room.current.id
    gobank(room)
  end
end

def self.potion_price
  return 750 + (150 * XMLData.level);
end
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
 #respond self.read_experience.inspect
 #respond self.check_con.inspect
 #respond self.checksting
 #respond self.read_info.inspect
 #respond self.calcpotions
 #exit
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
refill_hand = false;
before_dying { fill_hand if refill_hand == true;}

if checksting 
  unless GameObj.right_hand.name == 'Empty' || GameObj.left_hand.name == 'Empty'
    refill_hand = true;
    empty_hand
  end
  gobank
  while checksting
    sting_potions
  end
  mymove "bank"
  fput "depo all"
  mymove "town"
elsif check_con >= 2 
  respond "CON BONUS SUCKS, BUYING #{check_con} POTIONS"
  unless GameObj.right_hand.name == 'Empty' || GameObj.left_hand.name == 'Empty'
    respond "You need to empty your hands to procede"
    wait_until("EMPTY ONE OF YOUR HANDS"){GameObj.right_hand.name == 'Empty' || GameObj.left_hand.name == 'Empty'}
  end
  gobank
  while check_con > 0
    sting_potions
  end
  mymove "bank"
  fput "depo all"
  mymove "town"
else
  respond "YOU don't seem to have death's sting, unless it's CON loss, in which case, who gives a shit?" 
end
