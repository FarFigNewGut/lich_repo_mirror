=begin
  death_potions

  The script will buy potions until death's sting is 'None', con penalty is 0, or you are out of silver.

  original author: Gibreficul
  updated by: Xanlin
  version: 2.2
  tags: death, recovery, potions, utility
=end

module DeathPotions
  #------------------------------------------------------------------------------#
  # methods
  #------------------------------------------------------------------------------#
  @script_name = Script.current.name;
  def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
  def self.dothisquiet(command, timeout=5, start_pattern=/.*?/, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = false);result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;

  def self.wealth_quiet();
    wealth_quiet_pattern = /^You have no|^You have ([\d,]+) coins|^You have but one coin with you./;
    coins = 0;
    status_tags;
    result = dothisquiet "wealth quiet", 3 ,wealth_quiet_pattern, true;
    status_tags;
    data = result.join("\n");
    if data  =~ /You have ([\d,]+) coins/;
      coins = $1.gsub(',','').to_i;
    elsif data =~ /You have but one coin/;
      coins = 1;
    end;
    return coins;
  end;

  def self.read_spirit();
    max_spirit, remaining_spirit = nil;
    spirit_pattern = /Spirit Points:.*?(?<max_spirit>\d+).*?Remaining:.*?(?<remaining_spirit>\d+)/;
    status_tags;
    result = dothisquiet "spirit", 3 ,spirit_pattern, true;
    status_tags;
    if m=spirit_pattern.match(result[0]);
      max_spirit, remaining_spirit = m[:max_spirit], m[:remaining_spirit];
    end;
    return max_spirit, remaining_spirit, result[0];
  end;

  # ---- spirit_loss < read_spirit
  def self.spirit_loss();
    max_spirit, remaining_spirit, result = self.read_spirit;
    if remaining_spirit < max_spirit;
      return true;
    end;
    return false;
  end;

  # ---- read_experience < dothisquiet
  def self.read_experience(no_commas = true);
    pair_extract_pattern = /(?:^|  +)(\w[^:]*): (.*?)(?:  | *\r?\n)/;
    status_tags;
    result = dothisquiet "experience", 3 ,/<output class=/, true;
    status_tags;
    h = {};
    result.join("\n").scan(pair_extract_pattern).each { |k,v|
      v.gsub!(',','') if no_commas;
      v = v.to_i if v=~ /^\d+$/;
      h[k] = v;
      if (k =~ /\// and v =~ /\//);
        h[k.split('/')[0]]=v.split('/')[0];
        h[k.split('/')[1]]=v.split('/')[1];
      end;
    };
    return h;
  end;

  # ---- check_sting < read_experience
  def self.check_sting();
    exp   = self.read_experience;
    sting = exp["Death's Sting"];
    recent_deaths = exp["Recent Deaths"];
    echo "sting = #{sting}";
    return sting;
  end;

  # ---- check_sting_and_recent_deaths < read_experience
  def self.check_sting_and_recent_deaths();
    exp   = self.read_experience;
    sting = exp["Death's Sting"];
    recent_deaths = exp["Recent Deaths"];
    echo "sting = #{sting}";
    return sting, recent_deaths;
  end;

  # ---- potions_needed < check_sting < read_experience
  def self.potions_needed_full(sting_level = nil,recent_deaths = 0);
    sting_level, recent_deaths = self.check_sting_and_recent_deaths if (sting_level.nil? or recent_deaths = 0);
    sting_levels = {"Crushing"=> 32, "Piercing"=> 20, "Harsh"=> 16, "Sharp"=> 8, "Moderate"=> 4, "Light"=> 2};
    sting = sting_levels[sting_level];
    sting = 0 if sting.nil?;

    con_adjustment  = 0;
    if (sting_level != 'None' and recent_deaths > 0);
      con_adjustment = recent_deaths + 3;
    end;
    potions = con_adjustment + sting;
    return potions, sting, con_adjustment;
  end;
  def self.potions_needed(sting_level = nil,recent_deaths = 0);
    potions, sting, con_adjustment = self.potions_needed_full;
    return potions;
  end;

  # ---- read_info < dothisquiet
  def self.read_info(no_commas = true);
    pair_extract_pattern = /(?:^|  +)(\w[^:\n]*): *([^\n]*?)(?: | *\r?\n|$)/;
    stat_extract_pattern = /^ *(\w+) \((\w+)\): *(\d+) \((\d+)\) *\.\.\. *(\d+) \((\d+)\) */;
    status_tags;
    result = dothisquiet "info", 3 ,/<output class=/, true;
    status_tags;
    h = {};
    result.each { |line|
      if (line =~ / \.\.\. / and line =~ /\d/);
        v = line.gsub(/<[^>]+>/,'').scan(stat_extract_pattern).flatten;
        k = v[1]; #the abbreviation
        v = v[2..-1].map(&:to_i) << line; #stat/bonus, enhanced stat/bonus
        h[k] = v;
      else;
        line.gsub(/<[^>]+>/,'').scan(pair_extract_pattern).each { |k,v|
          v.gsub!(',','') if no_commas;
          v = v.to_i if v=~ /^\d+$/;
          h[k] = v;
          if (k =~ /\// and v =~ /\//);
            h[k.split('/')[0]]=v.split('/')[0];
            h[k.split('/')[1]]=v.split('/')[1];
          end;
        };
      end;
      };
    return h;
  end;

  # ---- check_con < read_info
  def self.check_con();
    info = self.read_info;
    enhanced_con  = info["CON"][2];
    regular_con   = info["CON"][0];
    con_potions   = info["CON"][0]-info["CON"][2]; #enh con - reg con
    echo info["CON"][-1].gsub(/<pushBold\/>|<popBold\/>/,'');
    echo "enhanced_con, regular_con | #{enhanced_con},#{regular_con}";
    return(con_potions);
  end;

  # ----
  def self.my_move(room = false);
    @actions << "self.my_move(#{room})";
    fput "out" if checkroom =~ /table/i;
    if room;
      if hiding?;
        start_script("go2",['typeahead=0', room, '_disable_confirm_']);
        wait_while{running?("go2")};
      else;
        start_script("go2",[room, '_disable_confirm_']);
        wait_while{running?("go2")};
      end;
    end;
  end;

  # ---- withdraw < my_move | find_priestess | check_sting | check_con
  def self.withdraw(return_room = nil);
    @actions << "self.withdraw(#{return_room})";

    potions_needed = self.potions_needed();
    withdraw_amount = potions_needed * self.potion_price;
    return if withdraw_amount < self.wealth_quiet;

    self.my_move('bank');
    return_room ||= Map.current.id;
    fput "deposit all";
    withdraw_result = false;

    if potions_needed == 0;
      self.my_move('town');
      echo "NO STING";
      exit;
    end;

    fput "withdraw #{withdraw_amount} silver";
    withdraw_result = matchtimeout(1,  "that much in the account|silver you've already got in the bank|debt collect");
    if withdraw_result =~ /debt collect/;
      respond "Gibreficul has documented that you are a deadbeat lowlife, however your debts are now paid.";
      return self.withdraw(return_room);
    elsif withdraw_result =~ /that much silver in the account/;
      respond "Gibreficul doesn't think you have enough for a normal withdrawl.   I'm gunna take it ALL and see what we have when it's all said and done.";
      result = false;
      until result =~ /that much in the account/;
        fput "withdraw #{self.potion_price} silver";
        result = matchtimeout(1,  "that much in the account|silver you've already got in the bank|debt collect");
        break unless result;
        break if result =~ /that much in the account/;
      end;
    elsif withdraw_result;
      self.my_move('town');
      echo "NO CASH";
      exit;
    end;

    if !return_room.nil?;
      self.my_move(return_room) unless return_room == Map.current.id;
    end;
  end;

  # ---- find_priestess
  def self.find_priestess();
    @actions << "self.find_priestess";
    if checkpaths;
      walk until GameObj.npcs.find{|npc| npc.noun =~ /priestess/i};
    else;
      fput "go walk";
      return self.find_priestess;
    end;
  end;

  # ---- potion_price
  def self.potion_price();return 750 + (150 * XMLData.level);end;

  # ---- potion_drink
  def self.potion_drink();
    status_tags;
    result = dothisquiet "drink my flask", 3 ,/You take a sip of the liquid.|As you sip from the liquid/, false;
    status_tags;
    con_recovered = sting_recovered = false;
    result.each { |line|
      if line == 'Suddenly your senses return to normal, but you feel somehow changed.';
        con_recovered = true;
      elsif line == 'You feel a momentary tingle sweep through your chest.';
        sting_recovered = true;
      end;
    };
    return con_recovered, sting_recovered, result;
  end;
  # ---- potion_consume < potion_drink | potion_price | check_sting | find_priestess | withdraw | my_move | wealth_quiet
  def self.potion_consume();
    x = self.potion_price;
    if !GameObj.npcs.find{|npc| npc.noun =~ /priestess/i};
      self.withdraw() if self.wealth_quiet < x;
      self.find_priestess;
    end;
    fput "give ##{GameObj.npcs.find{|npc| npc.noun == 'priestess'}.id} #{x}";
    z = matchwait /You count your coins and realize that you don't have that much money|flask with a clear fluid|is it you're trying/;
    if z =~ /flask with a clear fluid/;
      @potions_drank += 1;
      @silver_spent  += x;
      return self.potion_drink;
    elsif z =~ /is it you're trying/;
      return self.potion_consume;
    else;
      if self.check_sting != 'None';
        potions = self.potions_needed;
        if potions > 0;
          echo "Need #{potions} more potions at #{self.potion_price} each.";
        else;
          echo "You don't need any potions.";
        end;
        room = Map.current.id;
        self.withdraw(room);
      end;
    end;
  end;

  def self.hash_respond(h,name);respond "hash #{name}:" if !name.nil?;h.each { |k,v| respond "  #{k.inspect}: #{v.inspect}";};end;
  def self.int_to_comma(var) (var.is_a? Integer) ? var.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse.to_s : var end;

  @estimated_potions = 0;
  @no_effect_potions = 0;
  @potions_drank = 0;
  @silver_spent  = 0;
  @actions       = [];
  @debug         = false;
  def self.print_report();
    if @debug;
      respond "@actions:";
      @actions.each_with_index { |a,x| respond "  #{x+1}: #{a}" };
    end;
    echo "Estimated drinking #{@estimated_potions}.";
    echo "Drank #{@potions_drank} potions for a total cost of #{self.int_to_comma(@silver_spent)} silver.";
    echo "Drank #{@no_effect_potions} potion to no effect." if @no_effect_potions > 0;
  end;
  #------------------------------------------------------------------------------#
  # do stuff
  #------------------------------------------------------------------------------#
  refill_hand = false;
  before_dying { fill_hand if refill_hand == true;self.print_report;};

  if Script.current.vars[0] =~ /test|debug/;
    self.hash_respond(self.read_experience, 'self.read_experience');
    self.hash_respond(self.read_info, 'self.read_info');
    respond self.check_con.inspect;
    respond "read_spirit: #{self.read_spirit}";
    respond "spirit_loss: #{self.spirit_loss}";
    respond "check_sting: #{self.check_sting}";
    respond "check_sting_and_recent_deaths: #{self.check_sting_and_recent_deaths.inspect}";
    respond "potions_needed: #{self.potions_needed}";
  else;
    potions, sting, con_adjustment = self.potions_needed_full;
    if potions > 0;
      @estimated_potions = potions;
      echo "Script will withdraw #{self.int_to_comma(potions*self.potion_price)} for #{potions} potions (#{sting} for sting, #{con_adjustment} for CON) at #{self.potion_price} each.";
    else;
      respond "You don't seem to have death's sting or CON loss.  You testing something?";
      exit;
    end;
    unless (GameObj.right_hand.name == 'Empty' or GameObj.left_hand.name == 'Empty');
      refill_hand = true;
      empty_hand;
    end;
    self.withdraw;
    sting = 'some';
    while (sting != 'None');
      con_recovered, sting_recovered, result = self.potion_consume;
      @actions << "self.potion_consume: #{con_recovered}, #{sting_recovered}";
      @no_effect_potions += 1 if (con_recovered == false and sting_recovered == false);
      sting = self.check_sting if con_recovered == false;
      break if (sting == 'None' or sting.nil? or @no_effect_potions > 0);
    end;
    if self.wealth_quiet > 0;
      self.my_move('bank');
      fput "deposit all";
    end;
    self.my_move('town');
  end;
end;