=begin

	Plan out your character with this nifty little script!
	
	Script can tell you what your stats will look like at a certain level as well as how many PTPs and MTPs you'll have at that level.
	
	You can also plan how you want to train your character. Enter how many skill ranks you want per level for each skill you want and the script will tell you how many skill ranks you would have at a particular level and will tell you if you'll have enough training points at that level.
	
	So download today and get to planning!
	
	More features are planned for the future. Check out the "Planned Features" tab in the script for more information.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 6

=end

require 'gtk3'

@planner_cost_of_skills = {
	"Bard" => {
		"Two Weapon Combat" 		=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Armor Use" 				=> { "PTP" => 5,  "MTP" => 0,  "max_ranks" => 2, },
		"Shield Use" 				=> { "PTP" => 5,  "MTP" => 0,  "max_ranks" => 2, },
		"Combat Maneuvers" 			=> { "PTP" => 8,  "MTP" => 4,  "max_ranks" => 2, },
		"Edged Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Blunt Weapons" 			=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Two-Handed Weapons" 		=> { "PTP" => 7,  "MTP" => 2,  "max_ranks" => 2, },
		"Ranged Weapons" 			=> { "PTP" => 4,  "MTP" => 2,  "max_ranks" => 2, },
		"Thrown Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Pole Arm Weapons" 			=> { "PTP" => 6,  "MTP" => 1,  "max_ranks" => 2, },
		"Brawling" 					=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Ambush" 					=> { "PTP" => 4,  "MTP" => 4,  "max_ranks" => 1, },
		"Multi-Opponent Combat" 	=> { "PTP" => 7,  "MTP" => 3,  "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 2, },
		"Dodging" 					=> { "PTP" => 6,  "MTP" => 6,  "max_ranks" => 2, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 4,  "max_ranks" => 2, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 4,  "max_ranks" => 2, },
		"Spell Aiming" 				=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 2, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 17, "max_ranks" => 2, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 18, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 2, },
		"Swimming" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 2, },
		"First Aid" 				=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
	},
	
	"Cleric" => {
		"Two Weapon Combat" 		=> { "PTP" => 9,  "MTP" => 9,  "max_ranks" => 1, },
		"Armor Use" 				=> { "PTP" => 8,  "MTP" => 0,  "max_ranks" => 1, },
		"Shield Use" 				=> { "PTP" => 13, "MTP" => 0,  "max_ranks" => 1, },
		"Combat Maneuvers" 			=> { "PTP" => 10, "MTP" => 8,  "max_ranks" => 1, },
		"Edged Weapons" 			=> { "PTP" => 6,  "MTP" => 1,  "max_ranks" => 1, },
		"Blunt Weapons" 			=> { "PTP" => 6,  "MTP" => 1,  "max_ranks" => 1, },
		"Two-Handed Weapons" 		=> { "PTP" => 10, "MTP" => 3,  "max_ranks" => 1, },
		"Ranged Weapons" 			=> { "PTP" => 9,  "MTP" => 3,  "max_ranks" => 1, },
		"Thrown Weapons" 			=> { "PTP" => 9,  "MTP" => 3,  "max_ranks" => 1, },
		"Pole Arm Weapons" 			=> { "PTP" => 11, "MTP" => 3,  "max_ranks" => 1, },
		"Brawling" 					=> { "PTP" => 6,  "MTP" => 1,  "max_ranks" => 1, },
		"Ambush" 					=> { "PTP" => 12, "MTP" => 12, "max_ranks" => 1, },
		"Multi-Opponent Combat" 	=> { "PTP" => 15, "MTP" => 8,  "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 8,  "MTP" => 0,  "max_ranks" => 1, },
		"Dodging" 					=> { "PTP" => 20, "MTP" => 20, "max_ranks" => 1, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Spell Aiming" 				=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 4,  "max_ranks" => 3, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 3, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 3, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 10, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 6,  "max_ranks" => 1, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 4,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 5,  "MTP" => 4,  "max_ranks" => 1, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 1, },
		"Swimming" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 1, },
		"First Aid" 				=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 1, },
	},
	
	"Empath" => {
		"Two Weapon Combat" 		=> { "PTP" => 12, "MTP" => 12, "max_ranks" => 1, },
		"Armor Use" 				=> { "PTP" => 15, "MTP" => 0,  "max_ranks" => 1, },
		"Shield Use" 				=> { "PTP" => 13, "MTP" => 0,  "max_ranks" => 1, },
		"Combat Maneuvers" 			=> { "PTP" => 12, "MTP" => 8,  "max_ranks" => 1, },
		"Edged Weapons" 			=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 1, },
		"Blunt Weapons" 			=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 1, },
		"Two-Handed Weapons" 		=> { "PTP" => 13, "MTP" => 3,  "max_ranks" => 1, },
		"Ranged Weapons" 			=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Thrown Weapons" 			=> { "PTP" => 9,  "MTP" => 3,  "max_ranks" => 1, },
		"Pole Arm Weapons" 			=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Brawling" 					=> { "PTP" => 10, "MTP" => 2,  "max_ranks" => 1, },
		"Ambush" 					=> { "PTP" => 15, "MTP" => 15, "max_ranks" => 1, },
		"Multi-Opponent Combat" 	=> { "PTP" => 15, "MTP" => 10, "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 3, },
		"Dodging" 					=> { "PTP" => 20, "MTP" => 20, "max_ranks" => 1, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Spell Aiming" 				=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 4,  "max_ranks" => 3, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 3, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Survival" 					=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 6,  "max_ranks" => 1, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 4,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 5,  "MTP" => 4,  "max_ranks" => 1, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 1, },
		"Swimming" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 1, },
		"First Aid" 				=> { "PTP" => 1,  "MTP" => 0,  "max_ranks" => 3, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 1, },
	},
	
	"Monk" => {
		"Two Weapon Combat" 		=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
		"Armor Use" 				=> { "PTP" => 10, "MTP" => 0,  "max_ranks" => 2, },
		"Shield Use" 				=> { "PTP" => 8,  "MTP" => 0,  "max_ranks" => 2, },
		"Combat Maneuvers" 			=> { "PTP" => 5,  "MTP" => 3,  "max_ranks" => 2, },
		"Edged Weapons" 			=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Blunt Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Two-Handed Weapons" 		=> { "PTP" => 5,  "MTP" => 2,  "max_ranks" => 2, },
		"Ranged Weapons" 			=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Thrown Weapons" 			=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Pole Arm Weapons" 			=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 2, },
		"Brawling" 					=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Ambush" 					=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Multi-Opponent Combat" 	=> { "PTP" => 5,  "MTP" => 2,  "max_ranks" => 2, },
		"Physical Fitness" 			=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 3, },
		"Dodging" 					=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 3, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 1, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 7,  "max_ranks" => 1, },
		"Spell Aiming" 				=> { "PTP" => 3,  "MTP" => 4,  "max_ranks" => 1, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 1, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 38, "max_ranks" => 1, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 40, "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 35, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 3,  "MTP" => 4,  "max_ranks" => 2, },
		"Picking Locks" 			=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 1,  "MTP" => 0,  "max_ranks" => 2, },
		"Swimming" 					=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 2, },
		"First Aid" 				=> { "PTP" => 1,  "MTP" => 2,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
	},
	
	"Paladin" => {
		"Two Weapon Combat" 		=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 2, },
		"Armor Use" 				=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 3, },
		"Shield Use" 				=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 2, },
		"Combat Maneuvers" 			=> { "PTP" => 5,  "MTP" => 4,  "max_ranks" => 2, },
		"Edged Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Blunt Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Two-Handed Weapons" 		=> { "PTP" => 4,  "MTP" => 2,  "max_ranks" => 2, },
		"Ranged Weapons" 			=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 2, },
		"Thrown Weapons" 			=> { "PTP" => 5,  "MTP" => 1,  "max_ranks" => 2, },
		"Pole Arm Weapons" 			=> { "PTP" => 5,  "MTP" => 2,  "max_ranks" => 2, },
		"Brawling" 					=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Ambush" 					=> { "PTP" => 4,  "MTP" => 5,  "max_ranks" => 1, },
		"Multi-Opponent Combat" 	=> { "PTP" => 5,  "MTP" => 2,  "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 2, },
		"Dodging" 					=> { "PTP" => 5,  "MTP" => 3,  "max_ranks" => 2, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Spell Aiming" 				=> { "PTP" => 4,  "MTP" => 2,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 2, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 17, "max_ranks" => 2, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 10, "max_ranks" => 2, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 18, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 5,  "max_ranks" => 1, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 4,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 4,  "MTP" => 4,  "max_ranks" => 1, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 2, },
		"Swimming" 					=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 2, },
		"First Aid" 				=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 4,  "MTP" => 4,  "max_ranks" => 1, },
	},
	
	"Ranger" => {
		"Two Weapon Combat" 		=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Armor Use" 				=> { "PTP" => 5,  "MTP" => 0,  "max_ranks" => 2, },
		"Shield Use" 				=> { "PTP" => 5,  "MTP" => 0,  "max_ranks" => 2, },
		"Combat Maneuvers" 			=> { "PTP" => 6,  "MTP" => 4,  "max_ranks" => 2, },
		"Edged Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Blunt Weapons" 			=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Two-Handed Weapons" 		=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 2, },
		"Ranged Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Thrown Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Pole Arm Weapons" 			=> { "PTP" => 7,  "MTP" => 2,  "max_ranks" => 2, },
		"Brawling" 					=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Ambush" 					=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 2, },
		"Multi-Opponent Combat" 	=> { "PTP" => 10, "MTP" => 4,  "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 2, },
		"Dodging" 					=> { "PTP" => 7,  "MTP" => 5,  "max_ranks" => 2, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Spell Aiming" 				=> { "PTP" => 4,  "MTP" => 1,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 2, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 5,  "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 17, "max_ranks" => 2, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 10, "max_ranks" => 1, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 18, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 3, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 4,  "max_ranks" => 2, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 3,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 2, },
		"Swimming" 					=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 2, },
		"First Aid" 				=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 2,  "MTP" => 3,  "max_ranks" => 1, },
	},
	
	"Rogue" => {
		"Two Weapon Combat" 		=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
		"Armor Use" 				=> { "PTP" => 5,  "MTP" => 0,  "max_ranks" => 2, },
		"Shield Use" 				=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 2, },
		"Combat Maneuvers" 			=> { "PTP" => 4,  "MTP" => 4,  "max_ranks" => 2, },
		"Edged Weapons" 			=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Blunt Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Two-Handed Weapons" 		=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 2, },
		"Ranged Weapons" 			=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Thrown Weapons" 			=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Pole Arm Weapons" 			=> { "PTP" => 7,  "MTP" => 2,  "max_ranks" => 2, },
		"Brawling" 					=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Ambush" 					=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Multi-Opponent Combat" 	=> { "PTP" => 10, "MTP" => 3,  "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 2, },
		"Dodging" 					=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 3, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 7,  "max_ranks" => 1, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 1, },
		"Spell Aiming" 				=> { "PTP" => 4,  "MTP" => 5,  "max_ranks" => 1, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 9,  "max_ranks" => 1, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 10, "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 10, "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 67, "max_ranks" => 1, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 15, "max_ranks" => 1, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 30, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 40, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 2,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 3, },
		"Picking Locks" 			=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 3, },
		"Stalking & Hiding" 		=> { "PTP" => 1,  "MTP" => 1,  "max_ranks" => 3, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 1,  "max_ranks" => 3, },
		"Climbing" 					=> { "PTP" => 1,  "MTP" => 0,  "max_ranks" => 2, },
		"Swimming" 					=> { "PTP" => 2,  "MTP" => 0,  "max_ranks" => 2, },
		"First Aid" 				=> { "PTP" => 1,  "MTP" => 2,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 1,  "MTP" => 0,  "max_ranks" => 2, },
	},
	
	"Sorcerer" => {
		"Two Weapon Combat" 		=> { "PTP" => 12, "MTP" => 12, "max_ranks" => 1, },
		"Armor Use" 				=> { "PTP" => 15, "MTP" => 0,  "max_ranks" => 1, },
		"Shield Use" 				=> { "PTP" => 13, "MTP" => 0,  "max_ranks" => 1, },
		"Combat Maneuvers" 			=> { "PTP" => 12, "MTP" => 8,  "max_ranks" => 1, },
		"Edged Weapons" 			=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 1, },
		"Blunt Weapons" 			=> { "PTP" => 6,  "MTP" => 2,  "max_ranks" => 1, },
		"Two-Handed Weapons" 		=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Ranged Weapons" 			=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Thrown Weapons" 			=> { "PTP" => 9,  "MTP" => 3,  "max_ranks" => 1, },
		"Pole Arm Weapons" 			=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Brawling" 					=> { "PTP" => 10, "MTP" => 2,  "max_ranks" => 1, },
		"Ambush" 					=> { "PTP" => 15, "MTP" => 14, "max_ranks" => 1, },
		"Multi-Opponent Combat" 	=> { "PTP" => 15, "MTP" => 10, "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 8,  "MTP" => 0,  "max_ranks" => 1, },
		"Dodging" 					=> { "PTP" => 20, "MTP" => 20, "max_ranks" => 1, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 1,  "max_ranks" => 2, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Spell Aiming" 				=> { "PTP" => 3,  "MTP" => 1,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 4,  "max_ranks" => 3, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 3, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 6,  "max_ranks" => 1, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 4,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 5,  "MTP" => 4,  "max_ranks" => 1, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 1, },
		"Swimming" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 1, },
		"First Aid" 				=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 1, },
	},
	
	"Warrior" => {
		"Two Weapon Combat" 		=> { "PTP" => 2,  "MTP" => 2,   "max_ranks" => 2, },
		"Armor Use" 				=> { "PTP" => 2,  "MTP" => 0,   "max_ranks" => 3, },
		"Shield Use" 				=> { "PTP" => 2,  "MTP" => 0,   "max_ranks" => 3, },
		"Combat Maneuvers" 			=> { "PTP" => 4,  "MTP" => 3,   "max_ranks" => 2, },
		"Edged Weapons" 			=> { "PTP" => 2,  "MTP" => 1,   "max_ranks" => 2, },
		"Blunt Weapons" 			=> { "PTP" => 2,  "MTP" => 1,   "max_ranks" => 2, },
		"Two-Handed Weapons" 		=> { "PTP" => 3,  "MTP" => 1,   "max_ranks" => 2, },
		"Ranged Weapons" 			=> { "PTP" => 2,  "MTP" => 1,   "max_ranks" => 2, },
		"Thrown Weapons" 			=> { "PTP" => 2,  "MTP" => 1,   "max_ranks" => 2, },
		"Pole Arm Weapons" 			=> { "PTP" => 3,  "MTP" => 1,   "max_ranks" => 2, },
		"Brawling" 					=> { "PTP" => 2,  "MTP" => 1,   "max_ranks" => 2, },
		"Ambush" 					=> { "PTP" => 3,  "MTP" => 4,   "max_ranks" => 2, },
		"Multi-Opponent Combat" 	=> { "PTP" => 4,  "MTP" => 3,   "max_ranks" => 2, },
		"Physical Fitness" 			=> { "PTP" => 2,  "MTP" => 0,   "max_ranks" => 3, },
		"Dodging" 					=> { "PTP" => 4,  "MTP" => 2,   "max_ranks" => 3, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 7,   "max_ranks" => 1, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 8,   "max_ranks" => 1, },
		"Spell Aiming" 				=> { "PTP" => 4,  "MTP" => 8,   "max_ranks" => 1, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 10,  "max_ranks" => 1, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 10,  "max_ranks" => 1, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 15,  "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 10,  "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 120, "max_ranks" => 1, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 15,  "max_ranks" => 1, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 15,  "max_ranks" => 1, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 30,  "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 40,  "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 1,  "MTP" => 3,   "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 4,   "max_ranks" => 2, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 3,   "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 3,  "MTP" => 2,   "max_ranks" => 2, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,   "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 3,  "MTP" => 0,   "max_ranks" => 2, },
		"Swimming" 					=> { "PTP" => 2,  "MTP" => 0,   "max_ranks" => 2, },
		"First Aid" 				=> { "PTP" => 1,  "MTP" => 2,   "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,   "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 2,  "MTP" => 3,   "max_ranks" => 1, },
	},
	
	"Wizard" => {
		"Two Weapon Combat" 		=> { "PTP" => 12, "MTP" => 12, "max_ranks" => 1, },
		"Armor Use" 				=> { "PTP" => 14, "MTP" => 0,  "max_ranks" => 1, },
		"Shield Use" 				=> { "PTP" => 13, "MTP" => 0,  "max_ranks" => 1, },
		"Combat Maneuvers" 			=> { "PTP" => 12, "MTP" => 8,  "max_ranks" => 1, },
		"Edged Weapons" 			=> { "PTP" => 6,  "MTP" => 1,  "max_ranks" => 1, },
		"Blunt Weapons" 			=> { "PTP" => 6,  "MTP" => 1,  "max_ranks" => 1, },
		"Two-Handed Weapons" 		=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Ranged Weapons" 			=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Thrown Weapons" 			=> { "PTP" => 8,  "MTP" => 2,  "max_ranks" => 1, },
		"Pole Arm Weapons" 			=> { "PTP" => 14, "MTP" => 3,  "max_ranks" => 1, },
		"Brawling" 					=> { "PTP" => 10, "MTP" => 2,  "max_ranks" => 1, },
		"Ambush" 					=> { "PTP" => 15, "MTP" => 10, "max_ranks" => 1, },
		"Multi-Opponent Combat" 	=> { "PTP" => 15, "MTP" => 10, "max_ranks" => 1, },
		"Physical Fitness" 			=> { "PTP" => 8,  "MTP" => 0,  "max_ranks" => 1, },
		"Dodging" 					=> { "PTP" => 20, "MTP" => 20, "max_ranks" => 1, },
		"Arcane Symbols" 			=> { "PTP" => 0,  "MTP" => 2,  "max_ranks" => 2, },
		"Magic Item Use" 			=> { "PTP" => 0,  "MTP" => 1,  "max_ranks" => 2, },
		"Spell Aiming" 				=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Harness Power" 			=> { "PTP" => 0,  "MTP" => 4,  "max_ranks" => 3, },
		"Mana Control: Elemental" 	=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 3, },
		"Mana Control: Mental" 		=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Mana Control: Spiritual" 	=> { "PTP" => 0,  "MTP" => 12, "max_ranks" => 1, },
		"Spell Research" 			=> { "PTP" => 0,  "MTP" => 8,  "max_ranks" => 3, },
		"Elemental Lore" 			=> { "PTP" => 0,  "MTP" => 6,  "max_ranks" => 2, },
		"Spiritual Lore" 			=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Sorcerous Lore" 			=> { "PTP" => 0,  "MTP" => 10, "max_ranks" => 1, },
		"Mental Lore" 				=> { "PTP" => 0,  "MTP" => 20, "max_ranks" => 1, },
		"Survival" 					=> { "PTP" => 3,  "MTP" => 2,  "max_ranks" => 2, },
		"Disarming Traps" 			=> { "PTP" => 2,  "MTP" => 6,  "max_ranks" => 1, },
		"Picking Locks" 			=> { "PTP" => 2,  "MTP" => 4,  "max_ranks" => 2, },
		"Stalking & Hiding" 		=> { "PTP" => 5,  "MTP" => 4,  "max_ranks" => 1, },
		"Perception" 				=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Climbing" 					=> { "PTP" => 4,  "MTP" => 0,  "max_ranks" => 1, },
		"Swimming" 					=> { "PTP" => 3,  "MTP" => 0,  "max_ranks" => 1, },
		"First Aid" 				=> { "PTP" => 2,  "MTP" => 1,  "max_ranks" => 2, },
		"Trading" 					=> { "PTP" => 0,  "MTP" => 3,  "max_ranks" => 2, },
		"Picking Pockets" 			=> { "PTP" => 3,  "MTP" => 3,  "max_ranks" => 1, },
	},
}

@planner_profession_gis = {
	"Bard" => {
		"Strength" 		=> 25, 
		"Constitution" 	=> 20,
		"Dexterity" 	=> 25,
		"Agility" 		=> 20,
		"Discipline" 	=> 15,
		"Aura" 			=> 25,
		"Logic" 		=> 10,
		"Intuition" 	=> 15,
		"Wisdom" 		=> 20,
		"Influence" 	=> 30,
		"Prime 1"		=> "Influence",
		"Prime 2"		=> "Aura",
	},
	
	"Cleric" => {
		"Strength" 		=> 20,
		"Constitution" 	=> 20,
		"Dexterity" 	=> 10,
		"Agility" 		=> 15,
		"Discipline" 	=> 25,
		"Aura" 			=> 15,
		"Logic" 		=> 25,
		"Intuition" 	=> 25,
		"Wisdom" 		=> 30,
		"Influence" 	=> 20,
		"Prime 1"		=> "Wisdom",
		"Prime 2"		=> "Intuition",
	},

	"Empath" => {
		"Strength" 		=> 10,
		"Constitution" 	=> 20,
		"Dexterity" 	=> 15,
		"Agility" 		=> 15,
		"Discipline"	=> 25,
		"Aura" 			=> 20,
		"Logic" 		=> 25,
		"Intuition" 	=> 20,
		"Wisdom" 		=> 30,
		"Influence" 	=> 25,
		"Prime 1"		=> "Wisdom",
		"Prime 2"		=> "Influence",
	},

	"Monk" => {
		"Strength" 		=> 25,
		"Constitution" 	=> 25,
		"Dexterity" 	=> 20,
		"Agility" 		=> 30,
		"Discipline" 	=> 25,
		"Aura" 			=> 15,
		"Logic" 		=> 20,
		"Intuition" 	=> 20,
		"Wisdom" 		=> 15,
		"Influence" 	=> 10,
		"Prime 1"		=> "Agility",
		"Prime 2"		=> "Strength",
	},

	"Paladin" => {
		"Strength" 		=> 30,
		"Constitution" 	=> 25,
		"Dexterity" 	=> 20,
		"Agility" 		=> 20,
		"Discipline" 	=> 25,
		"Aura" 			=> 15,
		"Logic" 		=> 10,
		"Intuition" 	=> 15,
		"Wisdom" 		=> 25,
		"Influence" 	=> 20,
		"Prime 1"		=> "Wisdom",
		"Prime 2"		=> "Strength",
	},

	"Ranger" => {
		"Strength"		=> 25,
		"Constitution" 	=> 20,
		"Dexterity" 	=> 30,
		"Agility" 		=> 20,
		"Discipline" 	=> 20,
		"Aura" 			=> 15,
		"Logic" 		=> 15,
		"Intuition" 	=> 25,
		"Wisdom" 		=> 25,
		"Influence" 	=> 10,
		"Prime 1"		=> "Dexterity",
		"Prime 2"		=> "Intuition",
	},

	"Rogue" => {
		"Strength" 		=> 25,
		"Constitution" 	=> 20,
		"Dexterity" 	=> 25,
		"Agility" 		=> 30,
		"Discipline" 	=> 20,
		"Aura" 			=> 15,
		"Logic" 		=> 20,
		"Intuition" 	=> 25,
		"Wisdom" 		=> 10,
		"Influence" 	=> 15,
		"Prime 1"		=> "Dexterity",
		"Prime 2"		=> "Agility",
	},

	"Sorcerer" => {
		"Strength"		=> 10,
		"Constitution" 	=> 15,
		"Dexterity" 	=> 20,
		"Agility" 		=> 15,
		"Discipline" 	=> 25,
		"Aura"		 	=> 30,
		"Logic" 		=> 25,
		"Intuition" 	=> 20,
		"Wisdom" 		=> 25,
		"Influence" 	=> 20,
		"Prime 1"		=> "Aura",
		"Prime 2"		=> "Wisdom",
	},

	"Warrior" => {
		"Strength" 		=> 30,
		"Constitution" 	=> 25,
		"Dexterity" 	=> 25,
		"Agility" 		=> 25,
		"Discipline" 	=> 20,
		"Aura" 			=> 15,
		"Logic" 		=> 10,
		"Intuition" 	=> 20,
		"Wisdom" 		=> 15,
		"Influence" 	=> 20,
		"Prime 1"		=> "Constitution",
		"Prime 2"		=> "Strength",
	},

	"Wizard" => {
		"Strength" 		=> 10,
		"Constitution" 	=> 15,
		"Dexterity" 	=> 25,
		"Agility" 		=> 15,
		"Discipline" 	=> 20,
		"Aura" 			=> 30,
		"Logic" 		=> 25,
		"Intuition" 	=> 25,
		"Wisdom" 		=> 20,
		"Influence" 	=> 20,
		"Prime 1"		=> "Aura",
		"Prime 2"		=> "Logic",
	},
}

@planner_race_gis = {
	"Aelotoi" => {
		"Strength" 		=> 0,
		"Constitution" 	=> -2,
		"Dexterity" 	=> 3,
		"Agility" 		=> 3,
		"Discipline" 	=> 2,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 2,
		"Wisdom" 		=> 0,
		"Influence" 	=> -2
	},

	"Burghal Gnome" => {
		"Strength" 		=> -5,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 3,
		"Agility" 		=> 3,
		"Discipline" 	=> -3,
		"Aura" 			=> -2,
		"Logic" 		=> 5,
		"Intuition" 	=> 5,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0		
	},

	"Dark Elf" => {
		"Strength" 		=> 0,
		"Constitution" 	=> -2,
		"Dexterity" 	=> 5,
		"Agility" 		=> 5,
		"Discipline" 	=> -2,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0
	},

	"Dwarf" => {
		"Strength" 		=> 5,
		"Constitution" 	=> 5,
		"Dexterity" 	=> -3,	
		"Agility" 		=> -5,
		"Discipline" 	=> 3,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 3,
		"Influence" 	=> -2 
	},

	"Elf" => {
		"Strength" 		=> 0,
		"Constitution" 	=> -5,
		"Dexterity" 	=> 5,
		"Agility" 		=> 3,
		"Discipline" 	=> -5,
		"Aura" 			=> 5,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 3
	},

	"Erithian" => {
		"Strength" 		=> -2,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 0,
		"Agility" 		=> 0,
		"Discipline" 	=> 3,
		"Aura" 			=> 0,
		"Logic" 		=> 2,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 3
	},

	"Forest Gnome" => {
		"Strength" 		=> -3,
		"Constitution" 	=> 2,
		"Dexterity" 	=> 2,
		"Agility" 		=> 3,
		"Discipline" 	=> 2,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0
	},

	"Giantman" => {
		"Strength" 		=> 5,
		"Constitution" 	=> 3,
		"Dexterity" 	=> -2,
		"Agility" 		=> -2,
		"Discipline" 	=> 0,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 2,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0
	},

	"Half-Elf" => {
		"Strength" 		=> 2,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 2,
		"Agility" 		=> 2,
		"Discipline" 	=> -2,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 2
	},

	"Half-Krolvin" => {
		"Strength" 		=> 3,
		"Constitution" 	=> 5,
		"Dexterity" 	=> 2,
		"Agility" 		=> 2,
		"Discipline" 	=> 0,
		"Aura" 			=> -2,
		"Logic" 		=> -2,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> -2
	},

	"Halfling" => {
		"Strength" 		=> -5,
		"Constitution" 	=> 5,
		"Dexterity" 	=> 5,
		"Agility" 		=> 5,
		"Discipline" 	=> -2,
		"Aura" 			=> 0,
		"Logic" 		=> -2,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0
	},

	"Human" => {
		"Strength" 		=> 2,
		"Constitution" 	=> 2,
		"Dexterity" 	=> 0,
		"Agility" 		=> 0,
		"Discipline" 	=> 0,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 2,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0
	},

	"Sylvankind" => {
		"Strength" 		=> -3,
		"Constitution" 	=> -2,
		"Dexterity" 	=> 5,
		"Agility" 		=> 5,
		"Discipline" 	=> -5,
		"Aura" 			=> 3,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 3
	},
}

@planner_race_stat_bonuses = {
	"Aelotoi" => {
		"Strength" 		=> -5,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 5,
		"Agility" 		=> 10,
		"Discipline" 	=> 5,
		"Aura" 			=> 0,
		"Logic" 		=> 5,
		"Intuition" 	=> 5,
		"Wisdom" 		=> 0,
		"Influence" 	=> -5,
	},

	"Burghal Gnome" => {
		"Strength" 		=> -15,
		"Constitution" 	=> 10,
		"Dexterity" 	=> 10,
		"Agility" 		=> 10,
		"Discipline" 	=> -5,
		"Aura" 			=> 5,
		"Logic" 		=> 10,
		"Intuition" 	=> 5,
		"Wisdom" 		=> 0,
		"Influence" 	=> -5,
	},

	"Dark Elf" => {
		"Strength" 		=> 0,
		"Constitution" 	=> -5,
		"Dexterity" 	=> 10,
		"Agility" 		=> 5,
		"Discipline" 	=> -10,
		"Aura" 			=> 10,
		"Logic" 		=> 0,
		"Intuition" 	=> 5,
		"Wisdom" 		=> 5,
		"Influence" 	=> -5,
	},

	"Dwarf" => {
		"Strength" 		=> 10,
		"Constitution" 	=> 15,
		"Dexterity" 	=> 0,	
		"Agility" 		=> -5,
		"Discipline" 	=> 10,
		"Aura" 			=> -10,
		"Logic" 		=> 5,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> -10,
	},

	"Elf" => {
		"Strength" 		=> 0,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 5,
		"Agility" 		=> 15,
		"Discipline" 	=> -15,
		"Aura" 			=> 5,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 10,
	},

	"Erithian" => {
		"Strength" 		=> -5,
		"Constitution" 	=> 10,
		"Dexterity" 	=> 0,
		"Agility" 		=> 0,
		"Discipline" 	=> 5,
		"Aura" 			=> 0,
		"Logic" 		=> 5,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 10,
	},

	"Forest Gnome" => {
		"Strength" 		=> -10,
		"Constitution" 	=> 10,
		"Dexterity" 	=> 5,
		"Agility" 		=> 10,
		"Discipline" 	=> 5,
		"Aura" 			=> 0,
		"Logic" 		=> 5,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 5,
		"Influence" 	=> -5,
	},

	"Giantman" => {
		"Strength" 		=> 15,
		"Constitution" 	=> 10,
		"Dexterity" 	=> -5,
		"Agility" 		=> -5,
		"Discipline" 	=> 0,
		"Aura" 			=> -5,
		"Logic" 		=> -5,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 5,
	},

	"Half-Elf" => {
		"Strength" 		=> 0,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 5,
		"Agility" 		=> 10,
		"Discipline" 	=> -5,
		"Aura" 			=> 0,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 5,
	},

	"Half-Krolvin" => {
		"Strength" 		=> 10,
		"Constitution" 	=> 10,
		"Dexterity" 	=> 0,
		"Agility" 		=> 5,
		"Discipline" 	=> 0,
		"Aura" 			=> 0,
		"Logic" 		=> -10,
		"Intuition" 	=> 0,
		"Wisdom" 		=> -5,
		"Influence" 	=> -5,
	},

	"Halfling" => {
		"Strength" 		=> -15,
		"Constitution" 	=> 10,
		"Dexterity" 	=> 15,
		"Agility" 		=> 10,
		"Discipline" 	=> -5,
		"Aura" 			=> -5,
		"Logic" 		=> 5,
		"Intuition" 	=> 10,
		"Wisdom" 		=> 0,
		"Influence" 	=> -5,
	},

	"Human" => {
		"Strength" 		=> 5,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 0,
		"Agility" 		=> 0,
		"Discipline" 	=> 0,
		"Aura" 			=> 0,
		"Logic" 		=> 5,
		"Intuition" 	=> 5,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0,
	},

	"Sylvankind" => {
		"Strength" 		=> 0,
		"Constitution" 	=> 0,
		"Dexterity" 	=> 10,
		"Agility" 		=> 5,
		"Discipline" 	=> -5,
		"Aura" 			=> 5,
		"Logic" 		=> 0,
		"Intuition" 	=> 0,
		"Wisdom" 		=> 0,
		"Influence" 	=> 0,
	},
}

@planner_ascension_skill_information = {
	"Health Regeneration" => { "mnemonic" => "regenhealth", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Increases passive health regeneration by 1 per rank" },
	"Mana Regeneration" => { "mnemonic" => "regenmana", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Increases passive mana regeneration by 1 per rank" },
	"Stamina Regeneration" => { "mnemonic" => "regenstamina", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Increases passive stamina regeneration by 1 per rank" },
	"Acid Resistance" => { "mnemonic" => "resistacid", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Acid Resistance per rank" },
	"Cold Resistance" => { "mnemonic" => "resistcold", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Cold Resistance per rank" },
	"Crush Resistance" => { "mnemonic" => "resistcrush", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Crush Resistance per rank" },
	"Disintegration Resistance" => { "mnemonic" => "resistdisintegr", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Disintegration Resistance per rank" },
	"Disruption Resistance" => { "mnemonic" => "resistdisruptio", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Disruption Resistance per rank" },
	"Electric Resistance" => { "mnemonic" => "resistelectric", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Electric Resistance per rank" },
	"Grapple Resistance" => { "mnemonic" => "resistgrapple", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Grapple Resistance per rank" },
	"Heat Resistance" => { "mnemonic" => "resistheat", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Heat Resistance per rank" },
	"Impact Resistance" => { "mnemonic" => "resistimpact", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Impact Resistance per rank" },
	"Plasma Resistance" => { "mnemonic" => "resistplasma", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Plasma Resistance per rank" },
	"Puncture Resistance" => { "mnemonic" => "resistpuncture", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Puncture Resistance per rank" },
	"Slash Resistance" => { "mnemonic" => "resistslash", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Slash Resistance per rank" },
	"Steam Resistance" => { "mnemonic" => "resiststeam", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Steam Resistance per rank" },
	"Unbalance Resistance" => { "mnemonic" => "resistunbalance", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Unbalance Resistance per rank" },
	"Vacuum Resistance" => { "mnemonic" => "resistvacuum", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain 1% Vacuum Resistance per rank" },
	"Ambush" => { "mnemonic" => "ambush", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Ambush skill per rank" },
	"Arcane Symbols" => { "mnemonic" => "arcanesymbols", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Arcane Symbols skill per rank" },
	"Armor Use" => { "mnemonic" => "armoruse", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Armor Use skill per rank" },
	"Blunt Weapons" => { "mnemonic" => "bluntweapons", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Blunt Weapons skill per rank" },
	"Brawling" => { "mnemonic" => "brawling", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Brawling skill per rank" },
	"Climbing" => { "mnemonic" => "climbing", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Climbing skill per rank" },
	"Combat Maneuvers" => { "mnemonic" => "combatmaneuvers", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Combat Maneuvers skill per rank" },
	"Disarming Traps" => { "mnemonic" => "disarmingtraps", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Disarming Traps skill per rank" },
	"Dodging" => { "mnemonic" => "dodging", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Dodging skill per rank" },
	"Edged Weapons" => { "mnemonic" => "edgedweapons", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Edged Weapons skill per rank" },
	"Air" => { "mnemonic" => "elair", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Air skill per rank" },
	"Earth" => { "mnemonic" => "elearth", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Earth skill per rank" },
	"Fire" => { "mnemonic" => "elfire", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Fire skill per rank" },
	"Water" => { "mnemonic" => "elwater", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Water skill per rank" },
	"Mana Control: Elemental" => { "mnemonic" => "elementalmc", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Mana Control: Elemental skill per rank" },
	"First Aid" => { "mnemonic" => "firstaid", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 First Aid skill per rank" },
	"Harness Power" => { "mnemonic" => "harnesspower", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Harness Power skill per rank" },
	"Magic Item Use" => { "mnemonic" => "magicitemuse", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Magic Item Use skill per rank" },
	"Divination" => { "mnemonic" => "mldivination", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Divination skill per rank" },
	"Manipulation" => { "mnemonic" => "mlmanipulation", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Manipulation skill per rank" },
	"Telepathy" => { "mnemonic" => "mltelepathy", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Telepathy skill per rank" },
	"Transference" => { "mnemonic" => "mltransference", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Transference skill per rank" },
	"Transformation" => { "mnemonic" => "mltransform", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Transformation skill per rank" },
	"Mana Control: Mental" => { "mnemonic" => "mentalmc", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Mana Control: Mental skill per rank" },
	"Multi-Opponent Combat" => { "mnemonic" => "multiopponent", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Multi-Opponent Combat skill per rank" },
	"Perception" => { "mnemonic" => "perception", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Perception skill per rank" },
	"Physical Fitness" => { "mnemonic" => "physicalfitness", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Physical Fitness skill per rank" },
	"Picking Locks" => { "mnemonic" => "pickinglocks", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Picking Locks skill per rank" },
	"Picking Pockets" => { "mnemonic" => "pickingpockets", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Picking Pockets skill per rank" },
	"Pole Arm Weapons" => { "mnemonic" => "polearmsweapons", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Pole Arm Weapons skill per rank" },
	"Ranged Weapons" => { "mnemonic" => "rangedweapons", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Ranged Weapons skill per rank" },
	"Shield Use" => { "mnemonic" => "shielduse", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Shield Use skill per rank" },
	"Demonology" => { "mnemonic" => "soldemonology", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Demonology skill per rank" },
	"Necromancy" => { "mnemonic" => "solnecromancy", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Necromancy skill per rank" },
	"Spell Aiming" => { "mnemonic" => "spellaiming", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Spell Aiming skill per rank" },
	"Mana Control: Spiritual" => { "mnemonic" => "spiritmc", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Mana Control: Spiritual skill per rank" },
	"Blessings" => { "mnemonic" => "slblessings", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Blessings skill per rank" },
	"Religion" => { "mnemonic" => "slreligion", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Religion skill per rank" },
	"Summoning" => { "mnemonic" => "slsummoning", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Summoning skill per rank" },
	"Stalking & Hiding" => { "mnemonic" => "stalking", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Stalking & Hiding skill per rank" },
	"Survival" => { "mnemonic" => "survival", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Survival skill per rank" },
	"Swimming" => { "mnemonic" => "swimming", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Swimming skill per rank" },
	"Thrown Weapons" => { "mnemonic" => "thrownweapons", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Thrown Weapons skill per rank" },
	"Trading" => { "mnemonic" => "trading", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Trading skill per rank" },
	"Two Weapon Combat" => { "mnemonic" => "twoweaponcombat", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Two Weapon Combat skill per rank" },
	"Two-Handed Weapons" => { "mnemonic" => "twohandedweapon", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Gain +1 Two-Handed Weapons skill per rank" },
	"Agility" => { "mnemonic" => "agility", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Agility stat per rank" },
	"Aura" => { "mnemonic" => "aura", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Aura stat per rank" },
	"Constitution" => { "mnemonic" => "constitution", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Constitution stat per rank" },
	"Dexterity" => { "mnemonic" => "dexterity", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Dexterity stat per rank" },
	"Discipline" => { "mnemonic" => "discipline", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Discipline stat per rank" },
	"Influence" => { "mnemonic" => "influence", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Influence stat per rank" },
	"Intuition" => { "mnemonic" => "intuition", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Intuition stat per rank" },
	"Logic" => { "mnemonic" => "logic", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Logic stat per rank" },
	"Strength" => { "mnemonic" => "strength", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Strength stat per rank" },
	"Wisdom" => { "mnemonic" => "wisdom", "base_atp" => 1, "max_ranks" => 40, "tooltip" => "Gain +1 Wisdom stat per rank" },
	"Porter" => { "mnemonic" => "porter", "base_atp" => 1, "max_ranks" => 50, "tooltip" => "Decreases encumbrance by 2 pounds per rank\nPrerequisites: 10 ascension ranks combined between Strength and Physical Fitness" },
	#The following aren't available ascension skills in the game but are added so it doesn't cause issues within the script.
	"Major Elemental" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Minor Elemental" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Bard" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Major Spiritual" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Minor Spiritual" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Cleric" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Empath" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Minor Mental" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Paladin" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Ranger" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Sorcerer" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	"Wizard" => { "mnemonic" => "N/A", "base_atp" => 1, "max_ranks" => 50, "tooltip" => nil },
	#
}

all_professions = [ "Bard", "Cleric", "Empath", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warrior", "Wizard" ]
no_pures = [ "Bard", "Monk", "Paladin", "Ranger", "Rogue", "Warrior" ]

@planner_cman_skill_information = {
	"Acrobat's Leap" => { 
		"mnemonic" => "acrobatsleap", 
		"cost" => [10],
		"max_ranks" => 1,
		"professions" => [ "Warrior", "Rogue", "Monk", "Ranger" ],
		"tooltip" => "Your reach is increased by (1 + (agility bonus / 10)) feet while ambushing or using maneuvers that take the height system into account. Every 30% of encumbrance reduces your reach by 1 foot. Every Armor Group over scale reduces your reach by 1 foot.",
	},
	
	"Bearhug" => { 
		"mnemonic" => "bearhug", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Monk" ],
		"tooltip" => "Maneuver a target with three rounds of heavy concussion damage. If the target is Vulnerable, this skill becomes empowered and is quicker. Upon success, you and your party gain Enhance Strength with a power of 10 for 2 minutes.",
	},
	
	"Berserk" => { 
		"mnemonic" => "berserk", 
		"cost" => [2, 3, 4, 5, 6],
		"max_ranks" => 5,
		"professions" => [ "Warrior" ],
		"tooltip" => "Temporarily lose control of your combat actions and attack any target within range every five seconds. You gain a bonus of (Rank * 5) to your Attack Strength (AS). If you are stunned, webbed, or bound during the course of your berserk, you will attempt to break these hindrances. You may also attempt to start a berserk while in one of those states.\nWarriors learn this for free from the Warrior Guild.",
	},
	
	"Block Specialization" => { 
		"mnemonic" => "blockspec", 
		"cost" => [4, 8, 12],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Increase your block chance by 5% per rank. You have a (10 + (5 * Rank))% chance to gain Defensive Posture when blocking an attack in an aggressive stance. Only one of Block Specialization, Evade Specialization, or Parry Specialization may be trained.",
	},
	
	"Bull Rush" => { 
		"mnemonic" => "bullrush", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Monk", "Paladin" ],
		"tooltip" => "Maneuver a target causing minor impact damage and send them into other targets, causing moderate unbalance damage. Applies Vulnerable for (15 + (Rank * 5)) seconds and Staggered for (5 + (Success Margin / 6)) seconds to any target hit.",
	},
	
	"Burst of Swiftness" => { 
		"mnemonic" => "burst", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Monk" ],
		"tooltip" => "Apply Enhance Agility with a power of (12 + (4 * Rank)) and Enhance Dexterity with a power of (6 + (2 * Rank)) for 90 seconds (refreshable).",
	},
	
	"Cheapshots" => { 
		"mnemonic" => "cheapshots", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue", "Bard", "Monk" ],
		"tooltip" => "Learning cheapshots will automatically grant you the following skills:
			Rank 1: Footstomp
			Rank 2: Nosetweak and Templeshot
			Rank 3: Kneebash
			Rank 4: Eyepoke and Throatchop
			Rank 5: Swiftkick
			Rogues learn this for free from the Rogue Guild."
	},
	
	"Combat Focus" => { 
		"mnemonic" => "focus", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => no_pures.dup,
		"tooltip" => "+2 per rank to generic TD.",
	},
	
	"Combat Mobility" => { 
		"mnemonic" => "mobility", 
		"cost" => [10],
		"max_ranks" => 1,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "The Combat Mobility maneuver works automatically when you are attacked. If you are not in a standing position, you will automatically attempt to stand up before your opponent can attack you. Combat Mobility will not activate if you are stunned, webbed, bound, or otherwise immobilized. However, it will activate if you are free of these hindrances, even if you are in roundtime. This maneuver costs no stamina to activate.",
	},
	
	"Combat Movement" => { 
		"mnemonic" => "cmovement", 
		"cost" => [2, 3, 4, 5, 6],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "+2 per rank to physical DS.",
	},
	
	"Combat Toughness" => { 
		"mnemonic" => "toughness", 
		"cost" => [6, 8, 10],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue", "Ranger", "Monk", "Paladin" ],
		"tooltip" => "Permanently enhances your maximum number of Health Points (HP) by 5 plus 10 points per rank. For clarity, you receive 5+10 at Rank 1, 10 at Rank 2.",
	},
	
	"Coup de Grace" => { 
		"mnemonic" => "coupdegrace", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Maneuver a target, resulting in their immediate death. The target must be incapacitated in some way, and have (Rank * 10)% or lower health (200 max). Alternatively, the target may have (Rank * 5)% or lower health (200 max) without being incapacitated. Applies Empowered with a power of (Success Margin / 5) to the player and player's party for 90 seconds, and Demoralized with a power of (Success Margin / 5) for 90 seconds to any hostile creatures in the room.",
	},
	
	"Crowd Press" => { 
		"mnemonic" => "cpress", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Maneuver a target, preventing the target from performing several actions. Weapons with a base roundtime faster than 4 seconds will see improvements to Attack Strength and aiming chance, weapon at 4 seconds will see no improvement or penalty, and weapons slower than 4 seconds will see a penalty. Applies Pressed for (15 + (Rank * 5)) seconds.",
	},
	
	"Cunning Defense" => {
		"mnemonic" => "cdefense",
		"cost" => [2, 3, 4, 5, 6], 
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Grants phantom dodge ranks for the purposes of SMRv2 defense against PSM maneuvers.
			Rank 1: +2 total ranks
			Rank 2: +6 total ranks
			Rank 3: +12 total ranks
			Rank 4: +20 total ranks
			Rank 5: +30 total ranks"
		},
		
	"Cutthroat" => { 
		"mnemonic" => "cutthroat", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue" ],
		"tooltip" => "Maneuver a target and deal significant neck damage. Applies Major Bleed based on the damage done, and Silences until the target dies or the associated neck wound is healed.",
	},
	
	"Dirtkick" => {
		"mnemonic" => "dirtkick",
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Maneuver a target to apply Blinded for (5 + (Success Margin / 10)) seconds and Staggered for (Success Margin / 7) seconds."
	},
	
	"Disarm Weapon" => { 
		"mnemonic" => "disarm", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Maneuver a target and attempt to disarm them. Applies Staggered for (Success Margin / 4) seconds.\nWarriors learn this for free from the Warrior Guild.",
	},
	
	"Dislodge" => { 
		"mnemonic" => "dislodge", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => no_pures.dup,
		"tooltip" => "Maneuver a target, dealing moderate slashing damage. Successful attempts will place the weapon in hand. May be aimed via CMAN DISLODGE {target} {body part}. Each rank passively increases the chance that a successful ranged or thrown attack will stick. Applies Weakened Armament for (15 + (Rank * 5)) seconds.",
	},
	
	"Divert" => { 
		"mnemonic" => "divert", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue" ],
		"tooltip" => "CMAN DIVERT {creature} - Lure a foe to a random adjacent room.
			CMAN DIVERT {creature} [direction] - Lure a foe to {direction}.
			[direction] may be omitted to attempt to divert to a room with no other targets.
			SNEAK may also be specified to attempt to sneak after the target.
			Applies Staggered for (3 + (Success Margin / 15)) seconds.
			Rogues learn this for free from the Rogue Guild.",
	},
	
	"Duck and Weave" => { 
		"mnemonic" => "duckandweave", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Rogue", "Monk" ],
		"tooltip" => "Upon evading a melee attack, there is a chance that the attack can be redirected against another enemy in the same room. The chance for redirection is ((8 * (1 + Duck and Weave Ranks)) + (8 * Dodge Ranks per level) + (1 / 10) MoC ranks to 100 ranks + (1 / 20) MoC ranks over 100 + ((Agi Bonus + (2 * Inf Bonus)) / 5)). Each stance higher than offensive reduces the redirection chance by 20%, and is removed entirely in defensive stance.",
	},
	
	"Dust Shroud" => { 
		"mnemonic" => "shroud", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue" ],
		"tooltip" => "Instantly attempt to hide. Applies Shrouded with a power of (Rank * 15) for (Rank + 5) seconds prior to the HIDE attempt.
			Prerequisites: Dirtkick Rank 3",
	},
	
	"Evade Specialization" => { 
		"mnemonic" => "evadespec", 
		"cost" => [4, 8, 12],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Increase your evade chance by 5% per rank. You have a (10 + (5 * Rank))% chance to gain Evasiveness when evading an attack in an aggressive stance. Only one of Block Specialization, Evade Specialization, or Parry Specialization may be trained.",
	},
	
	"Eviscerate" => { 
		"mnemonic" => "eviscerate", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue" ],
		"tooltip" => "Maneuver a target, dealing minor slashing damage and minor concussion damage. Applies Major Bleed to the primary target. Applies Terrified or Demoralized with a power of 15 to other targets that witness the attack.",
	},
	
	"Executioner's Stance" => { 
		"mnemonic" => "executioner", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Warrior" ],
		"tooltip" => "If you slay a creature with a two-handed weapon attack while in this stance, you have a chance to maintain your momentum and continue the attack onto another foe in the room. This chance is 5% + 15% per rank. The secondary attack will have an AS penalty of -25 and cannot occur more than once per attack. If you fail to maintain your momentum into a second attack and you have 3 more ranks of Staggering Blow, you will still have a chance to knock the corpse of your slain foe into another foe in the room. If you are successful, that foe will suffer a RT penalty.",
	},
	
	"Exsanguinate" => { 
		"mnemonic" => "exsanguinate", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => no_pures.dup,
		"tooltip" => "Maneuver a target causing all remaining ticks of Major Bleed to trigger. There is a (Rank * 10)% chance of automatically reapplying the bleed at (Success Margin / 5)% effectiveness. Finally, you passively gain one additional round of Major Bleed at ranks 3 and 5 (up to 2 additional rounds).",
	},
	
	"Feint" => {
		"mnemonic" => "feint",
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Maneuver a target to reduce their stance by by 1% per endroll over 100. An endroll of 200 will force the target to offensive. Applies Staggered for (Success Margin / 6) seconds.\nWarriors learn this for free from the Warrior Guild."
	},
	
	"Flurry of Blows" => { 
		"mnemonic" => "flurry", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Monk" ],
		"tooltip" => "When under its effects, you automatically follow up on your jab attacks with additional jabs against other foes in the same area. There is a 50% chance of making a second jab at rank 1, and a 75% chance at rank 2. At rank 3, there is a 75% chance of making a second jab attack, and a 50% chance of a third jab if the second is successful.",
	},
	
	"Garrote" => { 
		"mnemonic" => "garrote", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue", "Ranger", "Bard", "Monk" ],
		"tooltip" => "Maneuver a target over four rounds, leading to eventual strangulation. If you are hidden, this skill becomes empowered and is quicker. Upon success, you and your party gain Enhance Agility with a power of 10 for 2 minutes.",
	},
	
	"Grapple Specialization" => { 
		"mnemonic" => "grapplespec", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "When using GRAPPLE, you gain (Rank * 2) to Multiplier Modifier (MM) and an additional (Rank * 2)% chance to present a tier-up opening. Only one of Punch Specialization, Kick Specialization, or Grapple Specialization may be trained.",
	},
	
	"Griffin's Voice" => { 
		"mnemonic" => "griffin", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Warrior" ],
		"tooltip" => "At rank 1, the stamina cost of each war cry is reduced by a third. 
			At rank 2, you will be able to affect the undead with your war cries. 
			At rank 3, the stamina cost of each war cry is instead reduced by half.",
	},
	
	"Groin Kick" => {
		"mnemonic" => "gkick",
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Maneuver a target to bring them to their knees. Can reduce stance and cause loss of prepared spells. Applies Dazed to the target for (5 + (Rank * 2)) seconds and Staggered for (Success Margin / 6) seconds."
	},
	
	"Hamstring" => { 
		"mnemonic" => "hamstring", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Ranger", "Bard", "Monk" ],
		"tooltip" => "Maneuver a target to deliver up to a rank 2 leg wound and potentially knock them down. Hamstring takes critical weighting or damage weighting on the weapon used into account. Padding, resistances, flares, armor divisors, and the like are all bypassed when the maneuver succeeds. Applies Major Bleed based on the damage of the initial maneuver.",
	},
	
	"Haymaker" => { 
		"mnemonic" => "haymaker", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Monk" ],
		"tooltip" => "Maneuver a target with a punch to the head. Applies Confused to the target for (5 + (Rank * 2)) seconds and Staggered for (Success Margin / 10) seconds.",
	},
	
	"Headbutt" => { 
		"mnemonic" => "headbutt", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk", "Paladin" ],
		"tooltip" => "Maneuver a target, dealing minor crush damage with your head. Helmets provide a bonus and are more effective than regular armor. Can force targets to kneel, stun them, or render them unconscious. Applies Staggered for (Success Margin / 10) seconds.",
	},
	
	"Inner Harmony" => { 
		"mnemonic" => "iharmony", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Monk" ],
		"tooltip" => "You have a 75% chance at rank 1, and a 100% chance at rank 2, to shake off a negative spell effect every 30 seconds. At rank 3, you may shake off a negative spell effect immediately upon assuming the stance. Every 5 ranks of Telepathy lore reduces the time of the next removal by 1 sec. This benefit caps out at 100 ranks for a 20 second reduction.",
	},
	
	"Internal Power" => { 
		"mnemonic" => "ipower", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Monk" ],
		"tooltip" => "Allows you to immediately heal up to (15 + (5 * rank))Health Points (HP) upon invocation. At rank 5, if already at full HP, this maneuver can be used to heal a minor wound. This latter use requires 10 seconds of Roundtime, which can be reduced by one second per three ranks of Mental Lore: Transformation.",
	},
	
	"Ki Focus" => { 
		"mnemonic" => "kifocus", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Monk" ],
		"tooltip" => "You have a 33% per rank chance of achieving an immediate tier-up, or a significant chance of earning a tier-up strike on subsequent attacks when the immediate tier-up is not successful.",
	},
	
	"Kick Specialization" => { 
		"mnemonic" => "kickspec", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "When using KICK, you gain (Rank * 2) to Multiplier Modifier (MM) and an additional (Rank * 2)% chance to present a tier-up opening. Only one of Punch Specialization, Kick Specialization, or Grapple Specialization may be trained.",
	},
	
	"Leap Attack" => { 
		"mnemonic" => "leapattack", 
		"cost" => [10],
		"max_ranks" => 1,
		"professions" => [ "Warrior", "Rogue", "Ranger", "Monk" ],
		"tooltip" => "Leap into the air to make an unaimed attack against a flying target.
			Prerequisites: Acrobat's Leap Rank 1",
	},
	
	"Mighty Blow" => { 
		"mnemonic" => "mblow", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior" ],
		"tooltip" => "Increases Damage Factor by (Rank * 10)% and reduces target stance by (Rank * 5)%. These effects last for one swing only.",
	},
	
	"Mug" => { 
		"mnemonic" => "mug", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue" ],
		"tooltip" => "Attack a target and simultaneously attempt to steal from them. Stealing from creatures can produce treasure as if you LOOTed their corpse. Stealing from a creature can only be done once per creature. Success based on Pickpocketing skill, higher success if done from hiding.",
	},
	
	"Parry Specialization" => { 
		"mnemonic" => "parryspec", 
		"cost" => [4, 8, 12],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Increase your parry chance by 5% per rank. You have a (10 + (5 * Rank))% chance to gain Counter when parrying an attack in an aggressive stance. Only one of Block Specialization, Evade Specialization, or Parry Specialization may be trained.",
	},
	
	"Precision" => {
		"mnemonic" => "precision",
		"cost" => [4, 6],
		"max_ranks" => 2,
		"professions" => all_professions.dup,
		"tooltip" => "Precision allows you to specify the damage type of a weapon (crushing, slashing, or puncture) when used in combat. Up to 30 weapon types can be specified, and your preference will be stored and automatic, can also be cleared or reset. At one rank, your preference will be used 75% of the time, else the weapon has its normal damage chances. At two ranks, the weapon will always deliver your preferred type of damage. Precision does not function with aimed (ambush) or ranged attacks."
	},
	
	"Predator's Eye" => { 
		"mnemonic" => "predator", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Rogue" ],
		"tooltip" => "Your chance to hit the body part you aim for increases by 4% at rank 1, 7% at rank 2 and 10% at rank 3.",
	},
	
	"Punch Specialization" => { 
		"mnemonic" => "punchspec", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "When using PUNCH, you gain (Rank * 2) to Multiplier Modifier (MM) and an additional (Rank * 2)% chance to present a tier-up opening. Only one of Punch Specialization, Kick Specialization, or Grapple Specialization may be trained.",
	},
	
	"Retreat" => {
		"mnemonic" => "retreat",
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Applies Disengaged for (5 + (Rank * 2)) seconds."
	},
	
	"Rolling Krynch Stance" => { 
		"mnemonic" => "krynch", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Monk" ],
		"tooltip" => "You position yourself to apply the momentum from an unarmed attack against one foe, to your next unarmed attack against a different foe. When at tier 3 on the first target, you have a 15/25/35% chance to maintain tier 3 against the second target, and a 30/40/50% chance to reach tier 2, at ranks 1/2/3. At tier 2, you have a 45/55/65% chance to maintain tier 2 against the second target. These chances are further modified by relative level and training in Multi Opponent Combat.",
	},
	
	"Shield Bash" => { 
		"mnemonic" => "sbash", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Paladin" ],
		"tooltip" => "Maneuver a target with your shield, dealing minor impact and minor unbalance damage. Applies Vulnerable to the target for (15 + (Rank * 5)) seconds and Staggered for (Success Margin / 5) seconds, and reduces stance.",
	},
	
	"Side by Side" => {
		"mnemonic" => "sidebyside",
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Side by Side gives a boost to melee Attack Strength and Defensive Strength when grouped with others with the Side By Side skill.
			Prerequisites: Combat Movement Rank 2"
	},
	
	"Slippery Mind" => { 
		"mnemonic" => "slipperymind", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Rogue", "Monk" ],
		"tooltip" => "You have a chance based on your Armor Group to avoid warding spells. Warding spells that you avoid while in an aggressive stance have a (15 + (20 * Rank))% chance of being redirected to another target in the room or back to the caster. If you fail to avoid a warding spell, you have a chance equivalent to your avoidance % to add (Level / 5) to Generic Target Defense (TD) for 15 seconds. Avoidance chance is 9% in Cloth, 7% in Leather, 5% in Scale, 3% in Chain, and 1% in Plate per rank.",
	},
	
	"Spell Cleave" => { 
		"mnemonic" => "scleave", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Monk", "Paladin" ],
		"tooltip" => "Attempt to cleave away up to one spell at ranks 1-4, and two spells at rank 5.",
	},
	
	"Spell Parry" => { 
		"mnemonic" => "sparry", 
		"cost" => [10],
		"max_ranks" => 1,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Allows the parrying of magical ball/bolt spells at 75% of your normal parry chance, provided that you are using an ensorcelled or anti-magical weapon to do so.
			Prerequisites: Parry Specialization Rank 2",
	},
	
	"Spell Thieve" => { 
		"mnemonic" => "sthieve", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue", "Ranger", "Bard" ],
		"tooltip" => "Attempt to steal up to one spell from the target. Any magic stolen this way cannot be dispelled by environmental effects and lasts for (20 + (Rank * 20)) seconds.",
	},
	
	"Spike Focus" => { 
		"mnemonic" => "spikefocus", 
		"cost" => [4, 8],
		"max_ranks" => 2,
		"professions" => no_pures.dup,
		"tooltip" => "Reduces the penalty when using spiked armor or shields in conjunction with a maneuver by -5 per rank.",
	},
	
	"Spin Attack" => { 
		"mnemonic" => "sattack", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => no_pures.dup,
		"tooltip" => "Grants a bonus of (Rank * 3) to Attack Strength (AS) for the duration of one attack. Applies Enhance Dodge with a power of (3 * Rank) for 10 seconds.\nWarriors learn this for free from the Warrior Guild.",
	},
	
	"Staggering Blow" => { 
		"mnemonic" => "sblow", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Paladin" ],
		"tooltip" => "Attack a target dealing weapon damage. Applies Staggered for ((Damage Inflicted / 20) + Rank) seconds. With 15 Strength Bonus or higher, the target may be knocked across the room taking moderate unbalance damage.",
	},
	
	"Stance Perfection" => {
		"mnemonic" => "stance",
		"cost" => [4, 8],
		"max_ranks" => 2,
		"professions" => all_professions.dup,
		"tooltip" => "Rank 1 allows for further refinement of stance in intervals of 5. Rank 2 allows you to specify the order of Evade, Block, and Parry in combat. See CMAN STANCE for more information.\nWarriors learn this for free from the Warrior Guild."
	},
	
	"Stance of the Mongoose" => { 
		"mnemonic" => "mongoose", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "If you successfully parry an attack while in a forward or greater stance, you will launch an automatic retaliatory strike at -2 RT. The chance to make this strike is 50/75/100% at ranks 1/2/3, and such strikes are limited to one every (6 - Rank) seconds.",
	},
	
	"Striking Asp Stance" => { 
		"mnemonic" => "asp", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Unless the cooldown is active, you will be able to automatically perform one single target QUICKSTRIKE at a discounted stamina cost. The stamina cost is reduced to 2/3, 1/2, and 1/3 at ranks 1, 2, and 3, respectively. The cooldown lasts 60 seconds, and begins immediately when a discounted QUICKSTRIKE is performed. At rank 3, if 60 seconds pass without an active cooldown, up to 1 charge will be stored and automatically used if a QUICKSTRIKE is performed during a cooldown.",
	},
	
	"Stun Maneuvers" => { 
		"mnemonic" => "stunman", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk" ],
		"tooltip" => "Shield (Rank 1) - Attempt to ready a shield in your left hand.
			Weapon (Rank 1) - Attempt to ready a suitable weapon in your right hand.
			Get (Rank 2) - Attempt to grab an item.
			Stand (Rank 3) - Attempt to STAND back up.
			Stance1 (Rank 3) - Attempt to increase defensive stance by 20%.
			Stance2 (Rank 4) - Attempt to increase defensive stance by 40%.
			Attack (Rank 4) - Attempt to attack an opponent. May use any attack verb.
			Move (Rank 5) - Attempt to flee in a particular direction.
			Flee (Rank 5) - Attempt to flee to a room with no creatures present.
			Hide (Rank 5) - Attempt to HIDE.
			Rogues learn this for free from the Rogue Guild.",
	},
	
	"Subdue" => { 
		"mnemonic" => "subdue", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue" ],
		"tooltip" => "Maneuver a target and attempt to knockdown, stun, or immobilize them. Can also reduce stance.\nRogues learn this for free from the Rogue Guild.",
	},
	
	"Sucker Punch" => { 
		"mnemonic" => "spunch", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue", "Monk" ],
		"tooltip" => "Maneuver a target to stun, do damage, and cause a drop in stance. Applies Silenced for (Rank * 2) seconds and Staggered for (Success Margin / 8) seconds.",
	},
	
	"Sunder Shield" => { 
		"mnemonic" => "sunder", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior" ],
		"tooltip" => "Maneuver a target and break or disarm their shield. Magical shields resist sundering, but cause their holder to temporarily lose their ability to block. Applies Staggered for (Success Margin / 5) seconds.",
	},
	
	"Surge of Strength" => { 
		"mnemonic" => "surge", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Monk", "Paladin" ],
		"tooltip" => "Apply Enhance Strength with a power of (12 + (4 * Rank)) for 90 seconds (refreshable).",
	},
	
	"Sweep" => { 
		"mnemonic" => "sweep", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Rogue", "Ranger", "Bard", "Monk" ],
		"tooltip" => "Maneuver a target to knock them prone. Applies Vulnerable for (15 + (Rank * 5)) seconds, and Staggered for (Success Margin / 6) seconds.\nRogues learn this for free from the Rogue Guild.",
	},
	
	"Tackle" => { 
		"mnemonic" => "tackle", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior" ],
		"tooltip" => "Maneuver a target to bring them to the ground. Applies Vulnerable for (15 + (Rank * 5)) seconds and Staggered for (3 + (Success Margin / 6)) seconds.\nWarriors learn this for free from the Warrior Guild.",
	},
	
	"Tainted Bond" => { 
		"mnemonic" => "tainted", 
		"cost" => [20],
		"max_ranks" => 1,
		"professions" => [ "Warrior", "Paladin" ],
		"tooltip" => "If you are using a permanently ensorcelled and fully bonded weapon in combat, you will gain one extra attack before expending the periodic attack boost from the ensorcelled necrotic infusions.",
	},
	
	"Trip" => {
		"mnemonic" => "trip",
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => all_professions.dup,
		"tooltip" => "Maneuver a target, dealing moderate unbalance damage to the legs. Applies Vulnerable for (15 + (Rank * 5)) seconds and Staggered for (Success Margin / 7) seconds."
	},
	
	"True Strike" => { 
		"mnemonic" => "truestrike", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => no_pures.dup,
		"tooltip" => "Increases the chance to hit your target for one attack. At Rank 1, True Strike changes the standard attack d100 roll to 20 + d80 and reduces the target's chances of evading, parrying, and/or blocking your attack by 10%. Each additional rank adds 10 to your combat roll (d80, d70, d60, d50, d40) and reduces your opponent's evasion, parry, and blocking ability by a further 10%.",
	},
	
	"Unarmed Specialist" => { 
		"mnemonic" => "unarmedspec",
		"cost" => [6],
		"max_ranks" => 1,
		"professions" => all_professions.dup.reject{ |profession| profession =~ /Monk/ },
		"tooltip" => "This maneuver will grant the ability to use some maneuvers without requiring a melee weapon. Specifically Cheapshots: Templeshot, Kneebash & Throatchop, Disarm, Feint, and Subdue. Monks are already considered Unarmed Specialists. It is important to know that rank 5 masters of a skill can already do that skill bare-handed."
	},
	
	"Vault Kick" => { 
		"mnemonic" => "vaultkick", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => no_pures.dup,
		"tooltip" => "Maneuver a target, dealing minor impact and moderate unbalance damage. Applies Dazed and Slowed to the target for (15 + (Rank * 5)) seconds.",
	},
	
	"Weapon Specialization" => { 
		"mnemonic" => "wspec", 
		"cost" => [2, 4, 6, 8, 10],
		"max_ranks" => 5,
		"professions" => [ "Warrior", "Rogue", "Paladin" ],
		"tooltip" => "Previously, Weapon Specialization was split into three skills (wspec1, wspec2, wspec3) that acted in an identical fashion but only applied to a specific weapon base. With the PSM Phase 3 update, the skill applies to all weapons within a given weapon skill. ",
	},
	
	"Whirling Dervish" => { 
		"mnemonic" => "dervish", 
		"cost" => [3, 6, 9],
		"max_ranks" => 3,
		"professions" => [ "Warrior", "Rogue" ],
		"tooltip" => "You gain the ability to switch with relative ease between targets when making multiple melee attacks. When making a focused MSTRIKE or a two-weapon attack that slays your targeted creature foe, you have a chance to switch your remaining attacks to another foe in the room. This chance is 5% + 25% per rank.",
	},
}

@planner_level_experience_amounts = {
	0 => 0,
	1 => 2500,
	2 => 5000,
	3 => 10000,
	4 => 17500,
	5 => 27500,
	6 => 40000,
	7 => 55000,
	8 => 72500,
	9 => 92500,
	10 => 115000,
	11 => 140000,
	12 => 167000,
	13 => 197500,
	14 => 230000,
	15 => 265000,
	16 => 302000,
	17 => 341000,
	18 => 382000,
	19 => 425000,
	20 => 470000,
	21 => 517000,
	22 => 566000,
	23 => 617000,
	24 => 670000,
	25 => 725000,
	26 => 781500,
	27 => 839500,
	28 => 899000,
	29 => 960000,
	30 => 1022500,
	31 => 1086500,
	32 => 1152000,
	33 => 1219000,
	34 => 1287500,
	35 => 1357500,
	36 => 1429000,
	37 => 1502000,
	38 => 1576500,
	39 => 1652500,
	40 => 1730000,
	41 => 1808500,
	42 => 1888000,
	43 => 1968500,
	44 => 2050000,
	45 => 2132500,
	46 => 2216000,
	47 => 2300500,
	48 => 2386000,
	49 => 2472500,
	50 => 2560000,
	51 => 2648000,
	52 => 2736500,
	53 => 2825500,
	54 => 2915000,
	55 => 3005000,
	56 => 3095500,
	57 => 3186500,
	58 => 3278000,
	59 => 3370000,
	60 => 3462500,
	61 => 3555500,
	62 => 3649000,
	63 => 3743000,
	64 => 3837500,
	65 => 3932500,
	66 => 4028000,
	67 => 4124000,
	68 => 4220500,
	69 => 4317500,
	70 => 4415000,
	71 => 4513000,
	72 => 4611500,
	73 => 4710500,
	74 => 4810000,
	75 => 4910000,
	76 => 5010500,
	77 => 5111500,
	78 => 5213000,
	79 => 5315000,
	80 => 5417500,
	81 => 5520500,
	82 => 5624000,
	83 => 5728000,
	84 => 5832500,
	85 => 5937500,
	86 => 6043000,
	87 => 6149000,
	88 => 6255500,
	89 => 6362500,
	90 => 6470000,
	91 => 6578000,
	92 => 6686500,
	93 => 6795500,
	94 => 6905000,
	95 => 7015000,
	96 => 7125500,
	97 => 7236500,
	98 => 7348000,
	99 => 7460000,
	100 => 7572500,
}

@planner_character_info = {}

class Planner_current_as		
	def initialize(value, tooltip_text)
		@value = value
		@update_text = tooltip_text
		@@tooltip_text += "\n#{@value} AS from #{@update_text}"
		@@total_value += @value
	end
	
	def self.slice_slice
		@@tooltip_text.slice!(0).slice!(0)
	end
	
	def self.reset_bonus_and_tooltip
		@@total_value = 0
		@@tooltip_text = ""
	end
end

class Planner_max_as		
	def initialize(stat_name, value, tooltip_text)
		@value = value
		@update_text = tooltip_text
		@stat_name = stat_name
		@@tooltip_text += "\n#{value} AS #{@stat_name}#{tooltip_text}"
		@@total_value += @value
	end
	
	def self.slice_slice
		@@tooltip_text.slice!(0).slice!(0)
	end
	
	def self.reset_bonus_and_tooltip(profession)
		@@total_value = 0
		@@total_value = -50 if profession =~ /Warrior|Rogue/
		@@tooltip_text = ""
	end
end

class Planner_player_service_bonus		
	def initialize(value, tooltip_text)
		@value = value
		@update_text = tooltip_text
		@@tooltip_text += "\n#{@value} bonus from #{@update_text}"
		@@total_value += @value
	end
	
	def self.slice_slice
		@@tooltip_text.slice!(0).slice!(0)
	end
	
	def self.reset_bonus_and_tooltip
		@@total_value = 0
		@@tooltip_text = ""
	end
end

class Planner_max_player_service_bonus		
	def initialize(stat_name, value, tooltip_text)
		@value = value
		@update_text = tooltip_text
		@stat_name = stat_name
		@@tooltip_text += "\n#{value} bonus from #{@stat_name}#{tooltip_text}"
		@@total_value += @value
	end
	
	def self.slice_slice
		@@tooltip_text.slice!(0).slice!(0)
	end
	
	def self.reset_bonus_and_tooltip
		@@total_value = 0
		@@tooltip_text = ""
	end
end

module Planner_Seeds
	def	seed(seed_value, skill_value)
		seed_current = seed_value
		seed_increment = seed_value + 1
		seed_rank = 0
		
		while skill_value >= seed_current
			seed_rank += 1 
			seed_current += seed_increment
			seed_increment += 1
		end
		seed_rank
	end
	
	module_function :seed
end

def planner_update_all_info_on_stats_tab(planned_level)
	planner_update_all_current_stat_info(planned_level)
	planner_update_melee_as(planned_level)
	planner_update_player_service_bonus(planned_level) if @planner_character_info["Profession"] =~ /Bard|Cleric|Monk|Ranger|Sorcerer|Warrior|Wizard/
end

def create_planner_main_window
	@planner_window_main = Gtk::Window.new(:toplevel)
		.set_title("Character Planner")
		.set_border_width(10)
		.set_default_size(300, 300)
		.set_type_hint(Gdk::WindowTypeHint::UTILITY)
		.set_keep_above(true)
		.set_position(Gtk::WindowPosition::CENTER)
		
	@planner_labels_hash = {}
	@planner_misc_labels_hash = {}
	
	screen = @planner_window_main.screen
	screen_width = screen.width
	screen_height = screen.height
	window_width = @planner_window_main.size[0]
	window_height = @planner_window_main.size[1]

	x = (screen_width - window_width) / 2.5
	y = 0

	@planner_window_main.move(x, y)
	
	main_notebook = Gtk::Notebook.new
	
	#First tab
	main_tab_name = Gtk::Label.new("Main")
	main_tab_grid_1 = Gtk::Grid.new
	info_label = Gtk::Label.new("#{Char.name}                    Current level #{Char.level}                    #{@planner_character_info["Profession"]}                    #{@planner_character_info["Race"]}")
	main_tab_grid_1.attach(info_label, 0, 0, 1, 1)
	
	level_spin_button_grid = Gtk::Grid.new
	main_tab_grid_1.attach(level_spin_button_grid, 0, 1, 1, 1)
	
	stats_grid = Gtk::Grid.new
	stats_headline_grid = Gtk::Grid.new
	save_load_reset_button_grid_grid = Gtk::Grid.new
	main_tab_grid_1.attach(stats_grid, 0, 2, 1, 1)
	main_tab_grid_1.attach(save_load_reset_button_grid_grid, 0, 3, 1, 1)
	main_tab_grid_1.attach(stats_headline_grid, 0, 4, 1, 1)
	
	skill_notebook_main_grid = Gtk::Grid.new
	main_tab_grid_1.attach(skill_notebook_main_grid, 0, 5, 1, 1)
	
	adjustment = Gtk::Adjustment.new(0, 0, 100, 1, 10, 0)
	level_spin_button = Gtk::SpinButton.new(adjustment, 1, 0)
	level_spin_button.set_numeric(true)
	
	level_spin_button_label = Gtk::Label.new("Level:     ")
	
	text = "Enter the level you are planning for.\nBe sure to hit \"enter\" if manually inputting a number.\nMouse wheel and up/down arrow keys change value by 1.\nPage up/Page down keys change value by 10."
	level_spin_button.set_tooltip_text(text)
	level_spin_button_label.set_tooltip_text(text)
	
	adjustment = Gtk::Adjustment.new(0, 0, 1000000000, 10000, 50000, 0)
	experience_spin_button = Gtk::SpinButton.new(adjustment, 1, 0)
	experience_spin_button.set_numeric(true)

	experience_spin_button_label = Gtk::Label.new("Experience:     ")
	total_experience_label = Gtk::Label.new("Total Experience:")
	total_experience_value_label = Gtk::Label.new("")
	
	adjustment = Gtk::Adjustment.new(0, 0, 1000000000, 50000, 250000, 0)
	asc_exp_spin_button = Gtk::SpinButton.new(adjustment, 1, 0)
	asc_exp_spin_button.set_numeric(true)

	asc_exp_spin_button_label = Gtk::Label.new("Asc Exp:     ")
	
	@planner_all_stat_names_in_order.each{ |stat_name|
		@planner_labels_hash["Planned #{stat_name} name"] = Gtk::Label.new("#{stat_name}:     ")
		@planner_labels_hash["Planned #{stat_name} value"] = Gtk::Label.new("#{@planner_character_info["Starting #{stat_name}"]}")
	}
	
	level_spin_button_grid.attach(level_spin_button_label, 0, 0, 1, 1)
	level_spin_button_grid.attach(level_spin_button, 1, 0, 1, 1)
	level_spin_button_grid.attach(experience_spin_button_label, 0, 1, 1, 1)
	level_spin_button_grid.attach(Gtk::Label.new, 0, 2, 1, 1)
	level_spin_button_grid.attach(experience_spin_button, 1, 1, 1, 1)
	level_spin_button_grid.attach(Gtk::Label.new("          "), 2, 1, 1, 1)
	level_spin_button_grid.attach(total_experience_label, 3, 0, 1, 1)
	level_spin_button_grid.attach(total_experience_value_label, 4, 0, 1, 1)
	level_spin_button_grid.attach(asc_exp_spin_button_label, 3, 1, 1, 1)
	level_spin_button_grid.attach(asc_exp_spin_button, 4, 1, 1, 1)
	
	all_stat_labels = [ @planner_labels_hash["Planned Strength name"], @planner_labels_hash["Planned Constitution name"], @planner_labels_hash["Planned Dexterity name"], @planner_labels_hash["Planned Agility name"], @planner_labels_hash["Planned Discipline name"], @planner_labels_hash["Planned Aura name"], @planner_labels_hash["Planned Logic name"], @planner_labels_hash["Planned Intuition name"], @planner_labels_hash["Planned Wisdom name"], @planner_labels_hash["Planned Influence name"] ]
		
	all_stat_value_labels = [ @planner_labels_hash["Planned Strength value"], @planner_labels_hash["Planned Constitution value"], @planner_labels_hash["Planned Dexterity value"], @planner_labels_hash["Planned Agility value"], @planner_labels_hash["Planned Discipline value"], @planner_labels_hash["Planned Aura value"], @planner_labels_hash["Planned Logic value"], @planner_labels_hash["Planned Intuition value"], @planner_labels_hash["Planned Wisdom value"], @planner_labels_hash["Planned Influence value"] ]
	
	row_position = 0
	all_stat_labels.each{ |label| stats_grid.attach(label, 0, row_position += 1, 1, 1) }
	
	row_position = 0
	all_stat_value_labels.each{ |label| stats_grid.attach(label, 1, row_position += 1, 1, 1) }
	
	total_ptps_label = Gtk::Label.new("PTPs: ")
	total_mtps_label = Gtk::Label.new("MTPs: ")
	
	current_ptps_label = Gtk::Label.new("PTPs: ")
	current_mtps_label = Gtk::Label.new("MTPs: ")
	
	@planner_misc_labels_hash["Total ATPs"] = Gtk::Label.new("Total ATPs: ")
	@planner_misc_labels_hash["Current ATPs"] = Gtk::Label.new("Current ATPs: 0")
	
	@planner_misc_labels_hash["Total CMPs"] = Gtk::Label.new("Total CMPs: 0")
	@planner_misc_labels_hash["Current CMPs"] = Gtk::Label.new("Current CMPs: 0")
	
	blank_label = Gtk::Label.new("          ")
	
	skill_info_headline = Gtk::Label.new
	stats_headline_grid.attach(skill_info_headline, 0, 1, 1, 1)
	
	stats_grid.attach(blank_label, 2, 1, 1, 1)
	
	stats_grid.attach(total_ptps_label, 3, 1, 1, 1)
	stats_grid.attach(total_mtps_label, 3, 2, 1, 1)
	
	stats_grid.attach(current_ptps_label, 3, 6, 1, 1)
	stats_grid.attach(current_mtps_label, 3, 7, 1, 1)

	stats_grid.attach(Gtk::Label.new("                         "), 4, 1, 1, 1)

	row_number = 0
	stats_grid.attach(@planner_misc_labels_hash["Total ATPs"], 5, row_number += 1, 1, 1)
	stats_grid.attach(@planner_misc_labels_hash["Current ATPs"], 5, row_number += 1, 1, 1)
	3.times{ stats_grid.attach(Gtk::Label.new, 5, row_number += 1, 1, 1) }
	stats_grid.attach(@planner_misc_labels_hash["Total CMPs"], 5, row_number += 1, 1, 1)
	stats_grid.attach(@planner_misc_labels_hash["Current CMPs"], 5, row_number += 1, 1, 1)
	
	stats_grid.attach(Gtk::Label.new, 0, 11, 1, 1)
	stats_grid.attach(Gtk::Label.new, 0, 13, 1, 1)
	
	@planner_all_ranks_per_level_entries = {}
	@planner_max_ranks_entries = {}
	@planner_labels_for_all_skills = {}
	
	reset_button = Gtk::Button.new(:label => "Reset")
	save_load_reset_button_grid_grid.attach(reset_button, 2, 0, 1, 1)
	reset_button.set_tooltip_text("Click to reset all inputs to 0.")
	@planner_misc_labels_hash["Total CMPs"].set_tooltip_text("Your total Combat Maneuvers Points.\nYou receive 1 point per rank in Combat Maneuvers, not including Ascension ranks.")
	
	reset_button.signal_connect("clicked") do
		@planner_all_ranks_per_level_entries.each{ |key,value| value.text = "" }
		@planner_max_ranks_entries.each{ |key,value| value.text = "" }
		@planner_cman_spin_buttons.each{ |key,value| value.value = 0 }
		@planner_ascension_spin_buttons.each{ |key,value| value.value = 0 }
	end
	
	save_button = Gtk::Button.new(:label => "Save")
	save_load_reset_button_grid_grid.attach(save_button, 0, 0, 1, 1)
	save_button.set_tooltip_text("Save current skill goals and max ranks information.")
	
	save_button.signal_connect("clicked") do
		File.open("character_planner_#{checkname}.txt", "w") do |file|
			file.puts "# Ranks per level entries"
			@planner_all_ranks_per_level_entries.each do |key, value|
				file.puts "#{key}:: #{value.text}" if value.text.length > 0
			end
			file.puts "\n# Max ranks entries"
			@planner_max_ranks_entries.each do |key, value|
				file.puts "#{key}:: #{value.text}" if value.text.length > 0
			end
			file.puts "\n# Ascension ranks"
			@planner_ascension_spin_buttons.each do |key, value|
				file.puts "#{key}:: #{value.value}" if value.value > 0
			end
			file.puts "\n# CMAN ranks"
			@planner_cman_spin_buttons.each do |key, value|
				file.puts "#{key}:: #{value.value}" if value.value > 0
			end
		end
	end
	
	load_button = Gtk::Button.new(:label => "Load")
	save_load_reset_button_grid_grid.attach(load_button, 1, 0, 1, 1)
	load_button.set_tooltip_text("Load saved information.")
	
	load_button.signal_connect("clicked") do
		file_name = "character_planner_#{checkname}.txt"
		if File.exist?(file_name)
			File.open("character_planner_#{checkname}.txt", "r") do |file|
				file.each_line do |line|
					if line.start_with?("# Ranks per level entries")
						@planner_current_hash = @planner_all_ranks_per_level_entries
					elsif line.start_with?("# Max ranks entries")
						@planner_current_hash = @planner_max_ranks_entries
					elsif line.start_with?("# Ascension ranks")
						@planner_current_hash = @planner_ascension_spin_buttons
					elsif line.start_with?("# CMAN ranks")
						@planner_current_hash = @planner_cman_spin_buttons
					elsif line.include?(":: ")
						key, value = line.split(":: ")
						if @planner_current_hash == @planner_all_ranks_per_level_entries || @planner_current_hash == @planner_max_ranks_entries
							@planner_current_hash[key].text = value
						elsif @planner_current_hash == @planner_ascension_spin_buttons || @planner_current_hash == @planner_cman_spin_buttons
							@planner_current_hash[key].value = value
						end
					end
				end
			end
		end
	end
	
	@planner_ascension_grid_names = {}
	@planner_ascension_name_labels = {}
	@planner_ascension_cost_labels = {}
	@planner_ascension_spin_buttons = {}
	@planner_ascension_atps_used_labels = {}
	
	@planner_cman_grid_names = {}
	@planner_cman_name_labels = {}
	@planner_cman_cost_labels = {}
	@planner_cman_spin_buttons = {}
	@planner_cman_cmps_used_labels = {}
	
	@planner_normal_skill_grid_names = {}
	@planner_normal_skills_name_labels = {}
	@planner_normal_skills_cost_labels = {}
	
	def planner_add_all_ascension_skills(skills_to_add, new_tab_info, notebook_name)
		row_number = -1
		
		@planner_ascension_grid_names[new_tab_info] = Gtk::Grid.new
		notebook_name.append_page(@planner_ascension_grid_names[new_tab_info], Gtk::Label.new(new_tab_info))
	
		skills_to_add.each{ |skill_name|
			column_number = -1
			if skill_name == "Air"
				@planner_ascension_grid_names[new_tab_info].attach(Gtk::Label.new("Elemental Lore:"), 1, row_number += 1, 1, 1)
			elsif skill_name == "Blessings"
				2.times{ @planner_ascension_grid_names[new_tab_info].attach(Gtk::Label.new, 0, row_number += 1, 1, 1) }
				@planner_ascension_grid_names[new_tab_info].attach(Gtk::Label.new("Spiritual Lore:"), 1, row_number += 1, 1, 1)
			elsif skill_name == "Demonology"
				@planner_ascension_grid_names[new_tab_info].attach(Gtk::Label.new("Sorcerous Lore:"), 1, row_number += 1, 1, 1)
			elsif skill_name == "Divination"
				2.times{ @planner_ascension_grid_names[new_tab_info].attach(Gtk::Label.new, 0, row_number += 1, 1, 1) }
				@planner_ascension_grid_names[new_tab_info].attach(Gtk::Label.new("Mental Lore:"), 1, row_number += 1, 1, 1)
			end
			column_number = -1
			
			@planner_ascension_name_labels[skill_name] = Gtk::Label.new("#{skill_name}:     ")
			@planner_ascension_cost_labels[skill_name] = Gtk::Label.new("0     ")
			@planner_ascension_atps_used_labels[skill_name] = Gtk::Label.new("               0")
			@planner_ascension_grid_names[new_tab_info].attach(@planner_ascension_name_labels[skill_name], column_number += 1, row_number += 1, 1, 1)
			@planner_ascension_grid_names[new_tab_info].attach(@planner_ascension_cost_labels[skill_name], column_number += 1, row_number, 1, 1)
			if skill_name == "Porter"
				adjustment = Gtk::Adjustment.new(0, 0, 0, 1, 5, 0)
			else
				adjustment = Gtk::Adjustment.new(0, 0, @planner_ascension_skill_information[skill_name]["max_ranks"], 1, 5, 0)
			end
			@planner_ascension_spin_buttons[skill_name] = Gtk::SpinButton.new(adjustment, 1, 0)
			@planner_ascension_spin_buttons[skill_name].set_numeric(true)
			cost_next_rank = ((@planner_ascension_spin_buttons[skill_name].value + 1.0) / 5).ceil
			@planner_ascension_cost_labels[skill_name].set_text("#{cost_next_rank}     ")
			@planner_ascension_grid_names[new_tab_info].attach(@planner_ascension_spin_buttons[skill_name], column_number += 1, row_number, 1, 1)
			@planner_ascension_grid_names[new_tab_info].attach(@planner_ascension_atps_used_labels[skill_name], column_number += 1, row_number, 1, 1)
		}
	end
	
	def planner_add_all_normal_skills(skills_to_add, new_tab_info, notebook_name)
		row_number = -1
		
		@planner_normal_skill_grid_names[new_tab_info] = Gtk::Grid.new
		notebook_name.append_page(@planner_normal_skill_grid_names[new_tab_info], Gtk::Label.new(new_tab_info))
		
		skills_to_add.each{ |skill_name|
			column_number = -1
			if skill_name =~ /^(Air|Blessings|Demonology|Divination)$/
				if skill_name == "Air"
					lore_name = "Elemental Lore"
				elsif skill_name == "Blessings"
					lore_name = "Spiritual Lore"
				elsif skill_name == "Demonology"
					lore_name = "Sorcerous Lore"
				elsif skill_name == "Divination"
					lore_name = "Mental Lore"
				end
				2.times{ @planner_normal_skill_grid_names[new_tab_info].attach(Gtk::Label.new, 0, row_number += 1, 1, 1) } if lore_name =~ /Spiritual Lore|Mental Lore/
				@planner_normal_skills_name_labels[lore_name] = Gtk::Label.new("#{lore_name}:      ")
				@planner_normal_skills_cost_labels[lore_name] = Gtk::Label.new("#{@planner_skill_cost[lore_name]["PTP"]}/#{@planner_skill_cost[lore_name]["MTP"]} - #{@planner_skill_cost[lore_name]["max_ranks"]}")
				@planner_normal_skill_grid_names[new_tab_info].attach(@planner_normal_skills_name_labels[lore_name], 1, row_number += 1, 1, 1)
				@planner_normal_skill_grid_names[new_tab_info].attach(@planner_normal_skills_cost_labels[lore_name], 2, row_number, 1, 1)
			end
			column_number = -1

			@planner_normal_skills_name_labels[skill_name] = Gtk::Label.new("#{skill_name}:     ")
			@planner_normal_skill_grid_names[new_tab_info].attach(@planner_normal_skills_name_labels[skill_name], column_number += 1, row_number += 1, 1, 1)

			if skill_name !~ /^(Major Elemental|Minor Elemental|Bard|Major Spiritual|Minor Spiritual|Cleric|Empath|Minor Mental|Paladin|Ranger|Sorcerer|Wizard|Air|Earth|Fire|Water|Blessings|Religion|Summoning|Demonology|Necromancy|Divination|Manipulation|Telepathy|Transference|Transformation)$/
				@planner_normal_skills_cost_labels[skill_name] = Gtk::Label.new("#{@planner_skill_cost[skill_name]["PTP"]}/#{@planner_skill_cost[skill_name]["MTP"]} - #{@planner_skill_cost[skill_name]["max_ranks"]}     ")
				@planner_normal_skill_grid_names[new_tab_info].attach(@planner_normal_skills_cost_labels[skill_name], column_number += 1, row_number, 1, 1)
			end
			
			if skill_name != "Spell Research"
				@planner_all_ranks_per_level_entries[skill_name] = Gtk::Entry.new
				@planner_all_ranks_per_level_entries[skill_name].set_width_chars(5)
				@planner_all_ranks_per_level_entries[skill_name].set_max_length(5)
				@planner_normal_skill_grid_names[new_tab_info].attach(@planner_all_ranks_per_level_entries[skill_name], column_number += 1, row_number, 1, 1)
				
				@planner_max_ranks_entries[skill_name] = Gtk::Entry.new
				@planner_max_ranks_entries[skill_name].set_width_chars(3)
				@planner_max_ranks_entries[skill_name].set_max_length(3)
				@planner_normal_skill_grid_names[new_tab_info].attach(@planner_max_ranks_entries[skill_name], column_number += 1, row_number, 1, 1)

				@planner_labels_for_all_skills[skill_name] = Gtk::Label.new("                    0")
				@planner_normal_skill_grid_names[new_tab_info].attach(@planner_labels_for_all_skills[skill_name], column_number += 1, row_number, 1, 1) if @planner_labels_for_all_skills[skill_name]
			end
		}
	end
	
	def planner_set_cman_costs(skill_name)
		if @planner_skills_not_to_include.include?(skill_name)
			skill_cost = 0
		else
			skill_cost = @planner_cman_skill_information[skill_name]["cost"][@planner_cman_spin_buttons[skill_name].value]
		end
		@planner_cman_cost_labels[skill_name].set_text("#{skill_cost}     ")
	end
	
	def planner_add_all_cman_skills(skills_to_add, new_tab_info, notebook_name)
		row_number = -1
		
		@planner_cman_grid_names[new_tab_info] = Gtk::Grid.new
		notebook_name.append_page(@planner_cman_grid_names[new_tab_info], Gtk::Label.new(new_tab_info))
	
		skills_to_add.each{ |skill_name|			
			@planner_cman_name_labels[skill_name] = Gtk::Label.new("#{skill_name}:     ")
			@planner_cman_cost_labels[skill_name] = Gtk::Label.new
			@planner_cman_cmps_used_labels[skill_name] = Gtk::Label.new("               0")
			@planner_cman_grid_names[new_tab_info].attach(@planner_cman_name_labels[skill_name], column_number += 1, row_number += 1, 1, 1)
			@planner_cman_grid_names[new_tab_info].attach(@planner_cman_cost_labels[skill_name], column_number += 1, row_number, 1, 1)
			if skill_name =~ /Dust Shroud|Leap Attack|Side by Side|Spell Parry/
				adjustment = Gtk::Adjustment.new(0, 0, 0, 1, 5, 0)
			else
				adjustment = Gtk::Adjustment.new(0, 0, @planner_cman_skill_information[skill_name]["max_ranks"], 1, 5, 0)
			end
			@planner_cman_spin_buttons[skill_name] = Gtk::SpinButton.new(adjustment, 1, 0)
			@planner_cman_spin_buttons[skill_name].set_numeric(true)
			@planner_cman_grid_names[new_tab_info].attach(@planner_cman_spin_buttons[skill_name], column_number += 1, row_number, 1, 1)
			@planner_cman_grid_names[new_tab_info].attach(@planner_cman_cmps_used_labels[skill_name], column_number += 1, row_number, 1, 1)
			planner_set_cman_costs(skill_name)
		}
	end
	
	#Normal skills and Ascension skills notebook and tabs
	skills_and_ascension_skills_notebook = Gtk::Notebook.new
	normal_skills_notebook = Gtk::Notebook.new
	ascension_skills_notebook = Gtk::Notebook.new
	ascension_skills2_notebook = Gtk::Notebook.new
	cman_skills_notebook = Gtk::Notebook.new
	
	skills_and_ascension_skills_notebook.append_page(normal_skills_notebook, Gtk::Label.new("Normal Skills"))
	skills_and_ascension_skills_notebook.append_page(ascension_skills_notebook, Gtk::Label.new("Ascension Skills"))
	skills_and_ascension_skills_notebook.append_page(ascension_skills2_notebook, Gtk::Label.new("Ascension Skills 2"))
	skills_and_ascension_skills_notebook.append_page(cman_skills_notebook, Gtk::Label.new("CMAN Skills"))
		
	#Normal Skills Notebook tabs
	
	#Armor Skills tab
	new_tab_info = "Armor"
	skill_names_to_add = [ "Armor Use", "Shield Use" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Weapon Skills tab
	new_tab_info = "Weapons"
	skill_names_to_add = [ "Edged Weapons", "Blunt Weapons", "Two-Handed Weapons", "Ranged Weapons", "Thrown Weapons", "Pole Arm Weapons", "Brawling" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Combat Skills tab
	new_tab_info = "Combat"
	skill_names_to_add = [ "Two Weapon Combat", "Combat Maneuvers", "Multi-Opponent Combat", "Ambush", "Physical Fitness", "Dodging" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#

	#General Skills tab
	new_tab_info = "General"
	skill_names_to_add = [ "Climbing", "Swimming", "Disarming Traps", "Picking Locks", "Stalking & Hiding", "Perception", "First Aid", "Trading", "Picking Pockets", "Survival" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Magic Skills tab
	new_tab_info = "Magic"
	skill_names_to_add = [ "Arcane Symbols", "Magic Item Use", "Harness Power", "Spell Aiming", "Mana Control: Elemental", "Mana Control: Spiritual", "Mana Control: Mental" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Spells tab
	new_tab_info = "Spells"
	if @planner_character_info["Profession"] == "Bard"
		skill_names_to_add = [ "Minor Elemental", "Bard" ]
	elsif @planner_character_info["Profession"] == "Cleric"
		skill_names_to_add = [ "Major Spiritual", "Minor Spiritual", "Cleric" ]
	elsif @planner_character_info["Profession"] == "Empath"
		skill_names_to_add = [ "Major Spiritual", "Minor Spiritual", "Empath" ]
	elsif @planner_character_info["Profession"] == "Monk"
		skill_names_to_add = [ "Minor Spiritual", "Minor Mental" ]
	elsif @planner_character_info["Profession"] == "Paladin"
		skill_names_to_add = [ "Minor Spiritual", "Paladin" ]
	elsif @planner_character_info["Profession"] == "Ranger"
		skill_names_to_add = [ "Minor Spiritual", "Ranger" ]
	elsif @planner_character_info["Profession"] == "Rogue" || @planner_character_info["Profession"] == "Warrior"
		skill_names_to_add = [ "Minor Elemental", "Minor Spiritual" ]
	elsif @planner_character_info["Profession"] == "Sorcerer"
		skill_names_to_add = [ "Minor Elemental", "Minor Spiritual", "Sorcerer" ]
	elsif @planner_character_info["Profession"] == "Wizard"
		skill_names_to_add = [ "Major Elemental", "Minor Elemental", "Wizard" ]
	end
	skill_names_to_add.unshift("Spell Research")
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Lore Skills tab
	new_tab_info = "Lores 1"
	skill_names_to_add = [ "Air", "Earth", "Fire", "Water", "Blessings", "Religion", "Summoning" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Lore Skills 2 tab
	new_tab_info = "Lores 2"
	skill_names_to_add = [ "Demonology", "Necromancy", "Divination", "Manipulation", "Telepathy", "Transference", "Transformation" ]
	planner_add_all_normal_skills(skill_names_to_add, new_tab_info, normal_skills_notebook)
	#
	
	#Ascension Skills Notebook tabs
	#Ascension Armor tab
	new_tab_info = "Armor"
	
	skill_names_to_add = [ "Armor Use", "Shield Use" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#
	
	#Ascension Weapon Skills tab
	new_tab_info = "Weapons"
	
	skill_names_to_add = [ "Edged Weapons", "Blunt Weapons", "Two-Handed Weapons", "Ranged Weapons", "Thrown Weapons", "Pole Arm Weapons", "Brawling" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#
	
	#Ascension Combat Skills tab
	new_tab_info = "Combat"
	
	skill_names_to_add = [ "Two Weapon Combat", "Combat Maneuvers", "Multi-Opponent Combat", "Ambush", "Physical Fitness", "Dodging" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#

	#Ascension General Skills tab
	new_tab_info = "General"
	
	skill_names_to_add = [ "Climbing", "Swimming", "Disarming Traps", "Picking Locks", "Stalking & Hiding", "Perception", "First Aid", "Trading", "Picking Pockets", "Survival" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#
	
	#Ascension Magic Skills tab
	new_tab_info = "Magic"
	
	skill_names_to_add = [ "Arcane Symbols", "Magic Item Use", "Harness Power", "Spell Aiming", "Mana Control: Elemental", "Mana Control: Spiritual", "Mana Control: Mental" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#
	
	#Ascension Lore Skills tab
	new_tab_info = "Lores 1"
	
	skill_names_to_add = [ "Air", "Earth", "Fire", "Water", "Blessings", "Religion", "Summoning" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#
	
	#Ascension Lore Skills 2 tab
	new_tab_info = "Lores 2"
	
	skill_names_to_add = [ "Demonology", "Necromancy", "Divination", "Manipulation", "Telepathy", "Transference", "Transformation" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills_notebook)
	#
	
	#Ascension Skills 2 Notebook tabs
	#Regen tab
	new_tab_info = "Regen"
	
	skill_names_to_add = [ "Health Regeneration", "Mana Regeneration", "Stamina Regeneration" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills2_notebook)
	#
	
	#Resistance tab
	new_tab_info = "Resistances"
	
	skill_names_to_add = [ "Acid Resistance", "Cold Resistance", "Crush Resistance", "Disintegration Resistance", "Disruption Resistance", "Electric Resistance", "Grapple Resistance", "Heat Resistance" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills2_notebook)
	#
	
	#Resistance 2 tab
	new_tab_info = "Resistances 2"
	
	skill_names_to_add = [ "Impact Resistance", "Plasma Resistance", "Puncture Resistance", "Slash Resistance", "Steam Resistance", "Unbalance Resistance", "Vacuum Resistance" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills2_notebook)
	#
	
	#Stats tab
	new_tab_info = "Stats"
	
	skill_names_to_add = @planner_all_stat_names_in_order
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills2_notebook)
	#
	
	#Other tab
	new_tab_info = "Other"
	
	skill_names_to_add = [ "Porter" ]
	planner_add_all_ascension_skills(skill_names_to_add, new_tab_info, ascension_skills2_notebook)
	#
	
	#CMAN Skills
	copy_of_cman_skills = @planner_cman_skill_information.dup
	cman_skills_array = []
	copy_of_cman_skills.each{ |key,value| cman_skills_array.push(key) if value["professions"].include?(@planner_character_info["Profession"]) }
	
	#CMAN Skills
	tab_number = 1
	until cman_skills_array.count == 0
		new_tab_info = "CMAN #{tab_number}"
		skill_names_to_add = []
		10.times{
			skill_names_to_add.push(cman_skills_array.shift)
			break if cman_skills_array.count == 0
		}
		
		planner_add_all_cman_skills(skill_names_to_add, new_tab_info, cman_skills_notebook)
		tab_number += 1
	end
	#
	
	skill_notebook_main_grid.attach(skills_and_ascension_skills_notebook, 0, 0, 1, 1)
	
	@planner_normal_skills_name_labels.each{ |key,value| value.set_tooltip_text("Skill name.") }
	@planner_normal_skills_cost_labels.each{ |key,value|
		@planner_skill_cost[key]["PTP"].to_i
		@planner_skill_cost[key]["MTP"].to_i
		@planner_skill_cost[key]["max_ranks"].to_i
		text = "Skill cost: PTP/MTP - Max ranks per level\n1x cost: #{@planner_skill_cost[key]["PTP"]}/#{@planner_skill_cost[key]["MTP"]}"
		if @planner_skill_cost[key]["max_ranks"].to_i > 1
			ptp_cost = @planner_skill_cost[key]["PTP"].to_i * 2
			mtp_cost = @planner_skill_cost[key]["MTP"].to_i * 2
			text += "\n2x cost: #{ptp_cost}/#{mtp_cost}"
		end
		if @planner_skill_cost[key]["max_ranks"].to_i > 2
			ptp_cost = @planner_skill_cost[key]["PTP"].to_i * 4
			mtp_cost = @planner_skill_cost[key]["MTP"].to_i * 4
			text += "\n2x cost: #{ptp_cost}/#{mtp_cost}"
		end
		value.set_tooltip_text(text)
	}
	
	@planner_ascension_name_labels.each{ |key,value| value.set_tooltip_text(@planner_ascension_skill_information[key]["tooltip"]) }
	
	text_40_ranks_base_atp_1 = "ATP cost:\nRanks 1-5: 1\nRanks 6-10: 2\nRanks 11-15: 3\nRanks 16-20: 4\nRanks 21-25: 5\nRanks 26-30: 6\nRanks 31-35: 7\nRanks 36-40: 8"
	text_50_ranks_base_atp_1 = "ATP cost:\nRanks 1-5: 1\nRanks 6-10: 2\nRanks 11-15: 3\nRanks 16-20: 4\nRanks 21-25: 5\nRanks 26-30: 6\nRanks 31-35: 7\nRanks 36-40: 8\nRanks 41-45: 9\nRanks 46-50: 10"
	@planner_ascension_cost_labels.each{ |key,value|
		if @planner_ascension_skill_information[key]["base_atp"] == 1
			if @planner_ascension_skill_information[key]["max_ranks"] == 40
				value.set_tooltip_text(text_40_ranks_base_atp_1)
			else
				value.set_tooltip_text(text_50_ranks_base_atp_1)
			end
		end
	}
	
	@planner_cman_name_labels.each{ |key,value| value.set_tooltip_text(@planner_cman_skill_information[key]["tooltip"].delete("\t")) }
	
	@planner_cman_cost_labels.each{ |key,value|
		text = "Cost per rank:"
		number = 1
		@planner_cman_skill_information[key]["cost"].each{ |cost| 
			text += "\nRank #{number}: #{cost}"
			number += 1
		}
		value.set_tooltip_text(text)
	}
	
	@planner_all_ranks_per_level_entries.each{ |key,value| value.set_tooltip_text("Enter number of ranks per level you want for this skill.\nWhole numbers and fractions can be used.\nEnter + to add number of ranks to the total. Example if you enter 2+ then script will calculate 2 ranks per level + 2.\nEnter in the following format examples:\n1\n2.5\n3+") if !value.destroyed? }
	
	@planner_max_ranks_entries.each{ |key,value| value.set_tooltip_text("Enter the maximum number of ranks you want for this skill.\nLeave blank if you don't want a max.") }
	
	@planner_labels_for_all_skills.each{ |key,value| value.set_tooltip_text("Number of ranks to put in this skill based on planned level, number of ranks per level, and max ranks wanted.") }

	@planner_ascension_atps_used_labels.each{ |key,value| value.set_tooltip_text("Total ATPs used for this skill") }
	@planner_cman_cmps_used_labels.each{ |key,value| value.set_tooltip_text("Total CMPs used for this skill") }
	
	text = "Enter how many ranks you want.\nBe sure to hit \"enter\" if manually inputting a number.\nMouse wheel and up/down arrow keys change value by 1.\nPage up/Page down keys change value by 5."
	@planner_cman_spin_buttons.each{ |key,value| value.set_tooltip_text(text) }
	@planner_ascension_spin_buttons.each{ |key,value| value.set_tooltip_text(text) }
	
	def	planner_update_skill_training_costs(total_skills_ranks, skill_name, level)
		multiplier = 1
		if total_skills_ranks >= ((level + 2) * 2)
			multiplier = 4
		elsif total_skills_ranks >= level + 2
			multiplier = 2
		end
		if (total_skills_ranks >= @planner_skill_cost[skill_name]["max_ranks"] * (level + 2))
			if @planner_skill_cost[skill_name]["max_ranks"] == 2
			multiplier = 2 #if multiplier == 4
			elsif @planner_skill_cost[skill_name]["max_ranks"] == 1
				multiplier = 1
			end
		end
		ptp_cost = @planner_skill_cost[skill_name]["PTP"].to_i * multiplier
		mtp_cost = @planner_skill_cost[skill_name]["MTP"].to_i * multiplier
		@planner_normal_skills_cost_labels[skill_name].set_text("#{ptp_cost}/#{mtp_cost} - #{@planner_skill_cost[skill_name]["max_ranks"]}     ")
	end
		
	def planner_update_spells_lores(all_skill_names_to_check, parent_skill_name, key, value, level_spin_button, text)
		total_skills_ranks = 0
		all_skill_names_to_check.each{ |spell_name| total_skills_ranks += @planner_labels_for_all_skills[spell_name].text.to_f if @planner_labels_for_all_skills[spell_name] && spell_name != key }
		value.text = @planner_skill_cost[parent_skill_name]["max_ranks"].to_s if text.to_f > @planner_skill_cost[parent_skill_name]["max_ranks"]
		check_level = level_spin_button.value.to_i.dup
		check_level = 99 if check_level == 100
		if @planner_add_skill_to_total
			new_skill_total = ((value.text.to_f * (check_level + 1)) + value.text.to_f).truncate
		else
			new_skill_total = (value.text.to_f * (check_level + 1)).truncate
		end
		max_ranks_possible = (@planner_skill_cost[parent_skill_name]["max_ranks"] * (check_level + 1)) + @planner_skill_cost[parent_skill_name]["max_ranks"]
		available_skill_ranks = max_ranks_possible - total_skills_ranks.to_i
		if new_skill_total > available_skill_ranks && (@planner_max_ranks_entries[key].text.length <= 0 || @planner_max_ranks_entries[key].text.to_i >= available_skill_ranks)
			@planner_labels_for_all_skills[key].set_text("                    #{available_skill_ranks.to_s}")
		elsif (new_skill_total > @planner_max_ranks_entries[key].text.to_i) && @planner_max_ranks_entries[key].text.length > 0
			@planner_labels_for_all_skills[key].set_text("                    #{@planner_max_ranks_entries[key].text}")
		else
			@planner_labels_for_all_skills[key].set_text("                    #{new_skill_total.to_s}")
		end
		@planner_labels_for_all_skills[key].set_text("                    0") if @planner_labels_for_all_skills[key].text.to_i < 0
		total_skills_ranks += @planner_labels_for_all_skills[key].text.to_i
		planner_update_skill_training_costs(total_skills_ranks.to_i, parent_skill_name, check_level)
	end
	
	def planner_calculate_skill_bonus(amount)
		10.times{
			@planner_temp_number_of_ranks -= 1
			@planner_total_bonus_amount += amount
			counter += 1
			break if @planner_temp_number_of_ranks == 0
		}
	end
	
	calculate_skill_cost_and_tps = proc{
		post_cap_tps = [(experience_spin_button.value.to_i - 7572500) / 2500, 0].max

		ptps_plus_post_cap_tps = @planner_hash_values["Total PTPs"] + post_cap_tps
		mtps_plus_post_cap_tps = @planner_hash_values["Total MTPs"] + post_cap_tps

		total_ptps_label.set_text("Total PTPs: #{ptps_plus_post_cap_tps.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		total_mtps_label.set_text("Total MTPs: #{mtps_plus_post_cap_tps.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		total_ptps_label.set_tooltip_text("Your total PTPs.")
		total_mtps_label.set_tooltip_text("Your total MTPs.")
			
		if @planner_hash_values["Total PTP used"] > ptps_plus_post_cap_tps && mtps_plus_post_cap_tps > @planner_hash_values["Total MTP used"]
			needed_tp_points = @planner_hash_values["Total PTP used"] - ptps_plus_post_cap_tps
			current_ptps_minus_costs = 0
			current_mtps_minus_costs = mtps_plus_post_cap_tps - (@planner_hash_values["Total MTP used"] + (needed_tp_points * 2))
		elsif @planner_hash_values["Total MTP used"] > mtps_plus_post_cap_tps && ptps_plus_post_cap_tps > @planner_hash_values["Total PTP used"]
			needed_tp_points = @planner_hash_values["Total MTP used"] - mtps_plus_post_cap_tps
			current_ptps_minus_costs = ptps_plus_post_cap_tps - (@planner_hash_values["Total PTP used"] + (needed_tp_points * 2))
			current_mtps_minus_costs = 0
		else
			current_ptps_minus_costs = ptps_plus_post_cap_tps - @planner_hash_values["Total PTP used"]
			current_mtps_minus_costs = mtps_plus_post_cap_tps - @planner_hash_values["Total MTP used"]
		end			
			
		current_ptps_label.set_text("Current PTPs: #{current_ptps_minus_costs.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		current_mtps_label.set_text("Current MTPs: #{current_mtps_minus_costs.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		current_ptps_label.set_tooltip_text("Your remaining PTPs after subtracting skill costs.")
		current_mtps_label.set_tooltip_text("Your remaining MTPs after subtracting skill costs.")
	}
	
	def planner_add_up_skill_training_costs(level_spin_button, value, key)
		level_check = level_spin_button
		level_check = 99 if level_check == 100
		skill_ranks_to_quadruple = 0
		skill_ranks_to_double = 0
		skill_ranks_to_single = 0
		if value > ((level_check * 2) + 4)
			skill_ranks_to_quadruple = (value) - ((level_check * 2) + 4)
			skill_ranks_to_double = (value - skill_ranks_to_quadruple) - (level_check + 2)
			skill_ranks_to_single = (value - skill_ranks_to_quadruple - skill_ranks_to_double)
		elsif value > level_check + 2
			skill_ranks_to_double = (value) - (level_check + 2)
			skill_ranks_to_single = (value - skill_ranks_to_double)
		else
			skill_ranks_to_single = value
		end
		@planner_hash_values["Total PTP used"] += (@planner_skill_cost[key]["PTP"] * skill_ranks_to_single)
		@planner_hash_values["Total PTP used"] += ((@planner_skill_cost[key]["PTP"] * 2) * skill_ranks_to_double)
		@planner_hash_values["Total PTP used"] += ((@planner_skill_cost[key]["PTP"] * 4) * skill_ranks_to_quadruple)

		@planner_hash_values["Total MTP used"] += (@planner_skill_cost[key]["MTP"] * skill_ranks_to_single)
		@planner_hash_values["Total MTP used"] += ((@planner_skill_cost[key]["MTP"] * 2) * skill_ranks_to_double)
		@planner_hash_values["Total MTP used"] += ((@planner_skill_cost[key]["MTP"] * 4) * skill_ranks_to_quadruple)
	end
	
	def planner_add_up_costs_for_multiple_skills(all_skill_names_to_check, level_spin_button, parent_skill_name)
		total_skill_ranks_in_category = 0
		all_skill_names_to_check.each{ |skill_name| total_skill_ranks_in_category += @planner_labels_for_all_skills[skill_name].text.to_i }
		planner_add_up_skill_training_costs(level_spin_button, total_skill_ranks_in_category, parent_skill_name)
	end
	
	def planner_update_skill_plus_ascension_ranks(skill_name)
		@planner_skill_cost[skill_name]["Ranks"] = @planner_labels_for_all_skills[skill_name].text.to_i
		@planner_skill_cost[skill_name]["Ranks"] += @planner_ascension_spin_buttons[skill_name].value.to_i
			
		@planner_temp_number_of_ranks = @planner_labels_for_all_skills[skill_name].text.to_i.dup
		@planner_temp_number_of_ranks += @planner_ascension_spin_buttons[skill_name].value.to_i
			
		@planner_total_bonus_amount = 0
		all_bonus_amounts = [ 5, 4, 3, 2 ]
		all_bonus_amounts.each{ |amount| planner_calculate_skill_bonus(amount) if @planner_temp_number_of_ranks > 0 }
		@planner_total_bonus_amount += @planner_temp_number_of_ranks if @planner_temp_number_of_ranks > 0
		@planner_skill_cost[skill_name]["Bonus"] = @planner_total_bonus_amount
	end
	
	def planner_update_total_tp_costs(planned_level)
		@planner_hash_values["Total PTP used"] = 0
		@planner_hash_values["Total MTP used"] = 0
		
		all_skill_names_to_check = @planner_all_spell_skill_names
		planner_add_up_costs_for_multiple_skills(all_skill_names_to_check, planned_level, "Spell Research")
			
		all_skill_names_to_check = @planner_all_elemental_lore_names
		planner_add_up_costs_for_multiple_skills(all_skill_names_to_check, planned_level, "Elemental Lore")
			
		all_skill_names_to_check = @planner_all_spiritual_lore_names
		planner_add_up_costs_for_multiple_skills(all_skill_names_to_check, planned_level, "Spiritual Lore")
			
		all_skill_names_to_check = @planner_all_sorcerous_lore_names
		planner_add_up_costs_for_multiple_skills(all_skill_names_to_check, planned_level, "Sorcerous Lore")
			
		all_skill_names_to_check = @planner_all_mental_lore_names
		planner_add_up_costs_for_multiple_skills(all_skill_names_to_check, planned_level, "Mental Lore")
		
		@planner_labels_for_all_skills.each{ |key,value|
			if value.text.to_i > 0 && value.text
				if key !~ /^(Major Elemental|Minor Elemental|Bard|Major Spiritual|Minor Spiritual|Cleric|Empath|Minor Mental|Paladin|Ranger|Sorcerer|Wizard|Air|Earth|Fire|Water|Blessings|Religion|Summoning|Demonology|Necromancy|Divination|Manipulation|Telepathy|Transference|Transformation)$/
					planner_add_up_skill_training_costs(planned_level, value.text.to_i, key)
				end
			end
		}
	end
	
	def planner_update_current_atp_label
		remaining_atps = @total_atps_from_exp_and_milestones.to_i - @planner_hash_values["Total ATPs cost"].to_i
		@planner_misc_labels_hash["Current ATPs"].set_text("Current ATPs: #{remaining_atps.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		@planner_misc_labels_hash["Current ATPs"].set_tooltip_text("Remaining ATPs: #{remaining_atps}\nTotal ATPs used: #{@planner_hash_values["Total ATPs cost"].to_i}")
	end
	
	def planner_update_cmps_labels
		current_cmps = @planner_hash_values["Total CMPs"].to_i - @planner_hash_values["Used CMPs"].to_i
		@planner_misc_labels_hash["Current CMPs"].set_text("Current CMPs: #{current_cmps}")
		@planner_misc_labels_hash["Total CMPs"].set_text("Total CMPs: #{@planner_hash_values["Total CMPs"]}")
		@planner_misc_labels_hash["Current CMPs"].set_tooltip_text("Your remaining Combat Maneuvers Points.\nTotal CMPs: #{@planner_hash_values["Total CMPs"]}\nUsed CMPs: #{@planner_hash_values["Used CMPs"]}")
	end
	
	@planner_all_ranks_per_level_entries.each{ |key,value|
		value.signal_connect("changed") do
			text = value.text
			text.gsub!(/[^0-9.+]/, "")
			if text =~ /\+/
				@planner_add_skill_to_total = true
			else
				@planner_add_skill_to_total = nil
			end
			value.text = text
			if key =~ /^(Major Elemental|Minor Elemental|Bard|Major Spiritual|Minor Spiritual|Cleric|Empath|Minor Mental|Paladin|Ranger|Sorcerer|Wizard)$/
				all_skill_names_to_check = @planner_all_spell_skill_names
				parent_skill_name = "Spell Research"
				planner_update_spells_lores(all_skill_names_to_check, parent_skill_name, key, value, level_spin_button, text)
			elsif key =~ /^(Air|Earth|Fire|Water)$/
				all_skill_names_to_check = @planner_all_elemental_lore_names
				parent_skill_name = "Elemental Lore"
				planner_update_spells_lores(all_skill_names_to_check, parent_skill_name, key, value, level_spin_button, text)
			elsif key =~ /^(Blessings|Religion|Summoning)$/
				all_skill_names_to_check = @planner_all_spiritual_lore_names
				parent_skill_name = "Spiritual Lore"
				planner_update_spells_lores(all_skill_names_to_check, parent_skill_name, key, value, level_spin_button, text)
			elsif key =~ /^(Demonology|Necromancy)$/
				all_skill_names_to_check = @planner_all_sorcerous_lore_names
				parent_skill_name = "Sorcerous Lore"
				planner_update_spells_lores(all_skill_names_to_check, parent_skill_name, key, value, level_spin_button, text)
			elsif key =~ /^(Divination|Manipulation|Telepathy|Transference|Transformation)$/
				all_skill_names_to_check = @planner_all_mental_lore_names
				parent_skill_name = "Mental Lore"
				planner_update_spells_lores(all_skill_names_to_check, parent_skill_name, key, value, level_spin_button, text)
			else
				value.text = @planner_skill_cost[key]["max_ranks"].to_s if text.to_f > @planner_skill_cost[key]["max_ranks"]
				check_level = level_spin_button.value.to_i.dup
				check_level = 99 if check_level == 100
				if @planner_add_skill_to_total
					new_skill_total = ((value.text.to_f * (check_level + 1)) + value.text.to_f).truncate
				else
					new_skill_total = (value.text.to_f * (check_level + 1)).truncate
				end
				@planner_all_ranks_per_level_entries[key].text.to_i
				if (new_skill_total > @planner_max_ranks_entries[key].text.to_i) && @planner_max_ranks_entries[key].text.length > 0
					@planner_labels_for_all_skills[key].set_text("                    #{@planner_max_ranks_entries[key].text}")
				else
					@planner_labels_for_all_skills[key].set_text("                    #{new_skill_total.to_s}")
				end
				planner_update_skill_training_costs(@planner_labels_for_all_skills[key].text.to_i, key, check_level)
				@planner_hash_values["Total CMPs"] = @planner_labels_for_all_skills[key].text.to_i
				planner_update_cmps_labels
			end
			
			planner_update_skill_plus_ascension_ranks(key)
			
			if @planner_do_not_update_information.nil?
				planner_update_total_tp_costs(level_spin_button.value)
				calculate_skill_cost_and_tps.call
				planner_update_all_info_on_stats_tab(level_spin_button.value.to_i)
			end
		end
	}
	
	@planner_ascension_spin_buttons.each{ |key,value|
		value.signal_connect("value-changed") do
			if key =~ /^(Strength|Physical Fitness)$/
				if (@planner_ascension_spin_buttons["Strength"].value + @planner_ascension_spin_buttons["Physical Fitness"].value) >= 10
					@planner_ascension_spin_buttons["Porter"].adjustment.upper = @planner_ascension_skill_information["Porter"]["max_ranks"]
				else
					@planner_ascension_spin_buttons["Porter"].adjustment.upper = 0
					@planner_ascension_spin_buttons["Porter"].value = 0
				end
			end
			planner_update_skill_plus_ascension_ranks(key)
			planner_update_all_info_on_stats_tab(level_spin_button.value.to_i)
			@planner_hash_values["Total ATPs cost"] = 0
			@planner_ascension_spin_buttons.each{ |key,value| 
				for cost in 1..value.value do
					if @planner_ascension_skill_information[key]["base_atp"] == 1
						@planner_hash_values["Total ATPs cost"] += (cost / 5.0).ceil
					end
				end
			}
			planner_update_current_atp_label
			cost_next_rank = ((@planner_ascension_spin_buttons[key].value + 1.0) / 5).ceil
			if @planner_ascension_spin_buttons[key].value == @planner_ascension_spin_buttons[key].adjustment.upper
				@planner_ascension_cost_labels[key].set_text("      ")
			else
				@planner_ascension_cost_labels[key].set_text("#{cost_next_rank}     ")
			end
			points_used = 0
			for cost in 1..value.value do
				if @planner_ascension_skill_information[key]["base_atp"] == 1
					points_used += (cost / 5.0).ceil
				end
			end
			@planner_ascension_atps_used_labels[key].set_text("               #{points_used}")
		end
	}
	
	@planner_cman_spin_buttons.each{ |key,value|
		value.signal_connect("value-changed") do
			if key =~ /^(Dirtkick|Acrobat's Leap|Combat Movement|Parry Specialization)$/
				if key == "Dirtkick"
					skill_name_max = "Dust Shroud"
					ranks_needed = 3
				elsif key == "Acrobat's Leap"
					skill_name_max = "Leap Attack"
					ranks_needed = 1
				elsif key == "Combat Movement"
					skill_name_max = "Side by Side"
					ranks_needed = 2
				elsif key == "Parry Specialization"
					skill_name_max = "Spell Parry"
					ranks_needed = 2
				end
				if @planner_cman_spin_buttons[key].value >= ranks_needed
					@planner_cman_spin_buttons[skill_name_max].adjustment.upper = @planner_cman_skill_information[skill_name_max]["max_ranks"]
				else
					@planner_cman_spin_buttons[skill_name_max].adjustment.upper = 0
					@planner_cman_spin_buttons[skill_name_max].value = 0
				end
			elsif key =~ /^(Punch Specialization|Kick Specialization|Grapple Specialization)$/
				shared_skills = [ "Punch Specialization", "Kick Specialization", "Grapple Specialization" ]
				shared_skills.delete(key)
				shared_skills.each{ |skill_name|
					if @planner_cman_spin_buttons[key].value > 0
						@planner_cman_spin_buttons[skill_name].adjustment.upper = 0
						@planner_cman_spin_buttons[skill_name].value = 0
					else
						@planner_cman_spin_buttons[skill_name].adjustment.upper = @planner_cman_skill_information[skill_name]["max_ranks"]
					end
				}
			end
			if key =~ /^(Block Specialization|Evade Specialization|Parry Specialization)$/
				shared_skills = [ "Block Specialization", "Evade Specialization", "Parry Specialization" ]
				shared_skills.delete(key)
				shared_skills.each{ |skill_name|
					if @planner_cman_spin_buttons[key].value > 0
						@planner_cman_spin_buttons[skill_name].adjustment.upper = 0
						@planner_cman_spin_buttons[skill_name].value = 0
					else
						@planner_cman_spin_buttons[skill_name].adjustment.upper = @planner_cman_skill_information[skill_name]["max_ranks"]
					end
				}
			end
			planner_update_all_info_on_stats_tab(level_spin_button.value.to_i)
			@planner_hash_values["Used CMPs"] = 0
			@planner_cman_spin_buttons.each{ |key,value|
				if value.value > 0
					for rank in 1..value.value.to_i do
						@planner_hash_values["Used CMPs"] += @planner_cman_skill_information[key]["cost"][rank - 1].to_i if !@planner_skills_not_to_include.include?(key)
					end
				end
			}
			planner_set_cman_costs(key)
			points_used = 0
			for rank in 1..value.value.to_i do
				points_used += @planner_cman_skill_information[key]["cost"][rank - 1].to_i if !@planner_skills_not_to_include.include?(key)
			end
			@planner_cman_cmps_used_labels[key].set_text("               #{points_used}")
			planner_update_cmps_labels
		end
	}
	
	@planner_max_ranks_entries.each{ |key,value|
		value.signal_connect("changed") do
			text = value.text
			text.gsub!(/[^0-9]/, "")
			value.text = text
			temp_value = @planner_all_ranks_per_level_entries[key].text
			@planner_all_ranks_per_level_entries[key].text = ""
			@planner_all_ranks_per_level_entries[key].text = temp_value
		end
	}
	
	all_stat_labels.each{ |label| label.set_tooltip_text("Your base stats at the specified level. Does NOT include stats from ascension or enhancives.") }
	
	def planner_update_total_experience(normal_exp, asc_exp, total_label, total_label_name)
		total_label.set_text("#{(normal_exp + asc_exp).to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		text = "Normal Experience:        #{normal_exp.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}\nAscension Experience:   #{asc_exp.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}\nTotal Experience:             #{(normal_exp + asc_exp).to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}"
		total_label.set_tooltip_text(text)
		total_label_name.set_tooltip_text(text)
	end
	
	def planner_update_tps
		@planner_stat_name_and_current_values = @planner_all_stat_names_in_order.zip(@planner_all_planned_stat_values).to_h
		
		@planner_tp_strength = @planner_stat_name_and_current_values["Strength"]
		@planner_tp_constitution = @planner_stat_name_and_current_values["Constitution"]
		@planner_tp_dexterity = @planner_stat_name_and_current_values["Dexterity"]
		@planner_tp_agility = @planner_stat_name_and_current_values["Agility"]
		@planner_tp_discipline = @planner_stat_name_and_current_values["Discipline"]
		@planner_tp_aura = @planner_stat_name_and_current_values["Aura"]
		@planner_tp_logic = @planner_stat_name_and_current_values["Logic"]
		@planner_tp_intuition = @planner_stat_name_and_current_values["Intuition"]
		@planner_tp_wisdom = @planner_stat_name_and_current_values["Wisdom"]
		@planner_tp_influence = @planner_stat_name_and_current_values["Influence"]
		
		@planner_both_prime_stats.each do |stat|
			case stat
			when "Strength"
				@planner_tp_strength *= 2
			when "Constitution"
				@planner_tp_constitution *= 2
			when "Dexterity"
				@planner_tp_dexterity *= 2
			when "Agility"
				@planner_tp_agility *= 2
			when "Discipline"
				@planner_tp_discipline *= 2
			when "Aura"
				@planner_tp_aura *= 2
			when "Logic"
				@planner_tp_logic *= 2
			when "Intuition"
				@planner_tp_intuition *= 2
			when "Wisdom"
				@planner_tp_wisdom *= 2
			when "Influence"
				@planner_tp_influence *= 2
			end
		end

		@planner_new_ptps = ((@planner_tp_strength + @planner_tp_constitution + @planner_tp_dexterity + @planner_tp_agility + ((@planner_tp_aura + @planner_tp_discipline) / 2)) / 20) + 25
		@planner_new_mtps = ((@planner_tp_logic + @planner_tp_intuition + @planner_tp_wisdom + @planner_tp_influence + ((@planner_tp_aura + @planner_tp_discipline) / 2)) / 20) + 25
	
		@planner_hash_values["Total PTPs"] += @planner_new_ptps
		@planner_hash_values["Total MTPs"] += @planner_new_mtps
	end
	
	level_spin_button.signal_connect("value-changed") do	
		@planner_do_not_update_information = true
		@planner_all_ranks_per_level_entries.each{ |key,value|
			if value.text.length > 0 && !value.destroyed?
				original_text = value.text
				value.text = ""
				value.text = original_text
			end
		}
		@planner_do_not_update_information = nil
		
		experience_spin_button.value = @planner_level_experience_amounts[level_spin_button.value.to_i] unless experience_spin_button.value.to_i == @planner_level_experience_amounts[level_spin_button.value.to_i] if @planner_do_not_update_experience_button.nil?
		@planner_do_not_update_experience_button = nil
		planner_update_total_experience(experience_spin_button.value.to_i, asc_exp_spin_button.value.to_i, total_experience_value_label, total_experience_label)
	end
	
	experience_spin_button.signal_connect("value-changed") do
		@planner_do_not_update_experience_button = true
		
		button_value = experience_spin_button.value.to_i
		text = "#{button_value.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse} experience\nEnter the normal experience you are planning for.\nBe sure to hit \"enter\" if manually inputting a number.\nMouse wheel and up/down arrow keys change value by 10,000\nPage up/Page down keys change value by 50,000."
		experience_spin_button.set_tooltip_text(text)
		experience_spin_button_label.set_tooltip_text(text)
		result = @planner_level_experience_amounts.find{ |key,value| value > button_value }
		new_level, new_experience = result
		new_level = 101 if new_level.nil?
		level_spin_button.value = new_level - 1
		
		@planner_all_planned_stat_values = @planner_all_stat_starting_values.dup
		
		@planner_hash_values["Total PTPs"] = 0
		@planner_hash_values["Total MTPs"] = 0
		
		planner_update_tps
		for level in 1..level_spin_button.value.to_i do
			@planner_all_stat_growth_values.each_with_index do |stat_growth_value, index|
				grow_stat_interval = [@planner_all_planned_stat_values[index] / stat_growth_value, 1].max
				@planner_all_planned_stat_values[index] += 1 if level % grow_stat_interval == 0
				@planner_all_planned_stat_values[index] = 100 if @planner_all_planned_stat_values[index] > 100
			end
			planner_update_tps
		end
		
		@planner_all_planned_stat_values.each_with_index do |stat_current_value, index|
			all_stat_value_labels[index].set_text(stat_current_value.to_s)
		end
		
		if level_spin_button.value.to_i != 100
			current_level_experience = @planner_level_experience_amounts[level_spin_button.value.to_i]
			next_level_experience = @planner_level_experience_amounts[level_spin_button.value.to_i + 1]
			exp_difference = next_level_experience - current_level_experience
			current_exp_difference = next_level_experience - experience_spin_button.value.to_i
			percent_difference = 1 - (current_exp_difference.to_f / exp_difference)
			fractional_ptps = @planner_new_ptps * percent_difference
			fractional_mtps = @planner_new_mtps * percent_difference
			if percent_difference > 0.494
				@planner_hash_values["Total PTPs"] += fractional_ptps.ceil
				@planner_hash_values["Total MTPs"] += fractional_mtps.ceil
			else
				@planner_hash_values["Total PTPs"] += fractional_ptps.truncate
				@planner_hash_values["Total MTPs"] += fractional_mtps.truncate
			end
		end
		
		planner_update_total_tp_costs(level_spin_button.value)
		calculate_skill_cost_and_tps.call
		planner_update_all_info_on_stats_tab(level_spin_button.value.to_i)
		@planner_do_not_update_experience_button = nil if new_level - 1 == level_spin_button.value
		planner_update_total_experience(experience_spin_button.value.to_i, asc_exp_spin_button.value.to_i, total_experience_value_label, total_experience_label)
	end
	
	asc_exp_spin_button.signal_connect("value-changed") do
		button_value = asc_exp_spin_button.value.to_i
		text = "#{button_value.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse} ascension experience\nEnter the ascension experience you are planning for.\nBe sure to hit \"enter\" if manually inputting a number.\nMouse wheel and up/down arrow keys change value by 50,000\nPage up/Page down keys change value by 250,000."
		asc_exp_spin_button.set_tooltip_text(text)
		asc_exp_spin_button_label.set_tooltip_text(text)
		
		atps_from_asc_exp = (button_value / 50000).truncate
		@total_atps_from_exp_and_milestones = atps_from_asc_exp + @planner_character_info["Ascension milestone ATPs"]
		
		@planner_misc_labels_hash["Total ATPs"].set_text("Total ATPs: #{@total_atps_from_exp_and_milestones.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse}")
		@planner_misc_labels_hash["Total ATPs"].set_tooltip_text("Your total ATPs.\n#{atps_from_asc_exp.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse} from Ascension experience\n#{@planner_character_info["Ascension milestone ATPs"]} from Ascension milestones")
		
		planner_update_current_atp_label
		planner_update_total_experience(experience_spin_button.value.to_i, asc_exp_spin_button.value.to_i, total_experience_value_label, total_experience_label)
	end
	
	main_notebook.append_page(main_tab_grid_1, main_tab_name)
	#
	
	#Second tab
	@planner_stats_tab_labels = {}
	@planner_stats_tab_grids = {}
	@planner_stats_tab_grids["Main Grid"] = Gtk::Grid.new
	@planner_stats_tab_grids["Main Headline"] = Gtk::Grid.new
	@planner_stats_tab_grids["Character Stats"] = Gtk::Grid.new
	@planner_stats_tab_grids["Other Stats"] = Gtk::Grid.new
	
	@planner_stats_tab_grids["Main Grid"].attach(@planner_stats_tab_grids["Main Headline"], 0, 0, 1, 1)
	@planner_stats_tab_grids["Main Grid"].attach(@planner_stats_tab_grids["Character Stats"], 0, 1, 1, 1)
	@planner_stats_tab_grids["Main Grid"].attach(@planner_stats_tab_grids["Other Stats"], 0, 2, 1, 1)
	
	@planner_stats_tab_labels["Main Headline"] = Gtk::Label.new("All stats on this page include ascension information and are based on the\nplanned level and skill goals set on the main page.")
	@planner_stats_tab_grids["Main Headline"].attach(@planner_stats_tab_labels["Main Headline"], 0, 0, 1, 1)
	@planner_stats_tab_grids["Main Headline"].attach(Gtk::Label.new, 0, 1, 1, 1)
	
	#List character stat information
	@planner_stats_tab_labels["Character Stats Headline Name"] = Gtk::Label.new("Name")
	@planner_stats_tab_labels["Character Stats Headline Stat Value"] = Gtk::Label.new("               Stat Value")
	@planner_stats_tab_labels["Character Stats Headline Stat Bonus"] = Gtk::Label.new("               Stat Bonus")
	@planner_stats_tab_grids["Character Stats"].attach(@planner_stats_tab_labels["Character Stats Headline Name"], 0, 0, 1, 1)
	@planner_stats_tab_grids["Character Stats"].attach(@planner_stats_tab_labels["Character Stats Headline Stat Value"], 1, 0, 1, 1)
	@planner_stats_tab_grids["Character Stats"].attach(@planner_stats_tab_labels["Character Stats Headline Stat Bonus"], 2, 0, 1, 1)
	
	def planner_update_all_current_stat_info(planned_level)
		@planner_stat_info_with_asc_value = {}
		@planner_stat_info_with_asc_bonus = {}

		row_number = 0
		@planner_all_stat_names_in_order.each{ |stat_name| 
			@planner_stat_info_with_asc_value[stat_name] = @planner_stat_name_and_current_values[stat_name] + @planner_ascension_spin_buttons[stat_name].value.to_i
			@planner_stat_info_with_asc_value[stat_name] += 10 if @planner_character_info["Profession"] == "Monk" && planned_level >= 50
			@planner_stat_info_with_asc_bonus[stat_name] = ((@planner_stat_info_with_asc_value[stat_name].to_f - 50) / 2).truncate + @planner_race_stat_bonuses[@planner_character_info["Race"]][stat_name]
			if @planner_stats_tab_labels["Current #{stat_name} Name"].nil?
				@planner_stats_tab_labels["Current #{stat_name} Name"] = Gtk::Label.new(stat_name)
				@planner_stats_tab_grids["Character Stats"].attach(@planner_stats_tab_labels["Current #{stat_name} Name"], 0, row_number += 1, 1, 1)
				@planner_stats_tab_labels["Current #{stat_name} Name"].set_tooltip_text("Your stats at the level set in the Main tab.\nMonks get +10 to all stats at level 50.")
			end
		}
		
		row_number = 0
		@planner_stat_info_with_asc_value.each{ |stat_name,value|
			if @planner_stats_tab_labels["Current #{stat_name} Stat Value"].nil?
				@planner_stats_tab_labels["Current #{stat_name} Stat Value"] = Gtk::Label.new("               #{value}")
				@planner_stats_tab_grids["Character Stats"].attach(@planner_stats_tab_labels["Current #{stat_name} Stat Value"], 1, row_number += 1, 1, 1)
			else
				@planner_stats_tab_labels["Current #{stat_name} Stat Value"].set_text(value.to_s)
			end
		}
		
		row_number = 0
		@planner_stat_info_with_asc_bonus.each{ |stat_name,value|
			if @planner_stats_tab_labels["Current #{stat_name} Stat Bonus"].nil?
				@planner_stats_tab_labels["Current #{stat_name} Stat Bonus"] = Gtk::Label.new("               #{value}")
				@planner_stats_tab_grids["Character Stats"].attach(@planner_stats_tab_labels["Current #{stat_name} Stat Bonus"], 2, row_number += 1, 1, 1)
			else
				@planner_stats_tab_labels["Current #{stat_name} Stat Bonus"].set_text(value.to_s)
			end
		}
	end
	
	#
		
	#Calculate Melee AS
	@planner_stats_tab_labels["Melee AS"] = Gtk::Label.new("Melee AS:     0")
	@planner_stats_tab_labels["Max Possible Melee AS"] = Gtk::Label.new("Max possible Melee AS:     0")
	@planner_stats_tab_grids["Other Stats"].attach(Gtk::Label.new, 0, 0, 1, 1)
	@planner_stats_tab_grids["Other Stats"].attach(@planner_stats_tab_labels["Melee AS"], 0, 1, 1, 1)
	@planner_stats_tab_grids["Other Stats"].attach(Gtk::Label.new("                  "), 1, 1, 1, 1)
	@planner_stats_tab_grids["Other Stats"].attach(@planner_stats_tab_labels["Max Possible Melee AS"], 2, 1, 1, 1)
	if @planner_character_info["Profession"] =~ /Bard|Cleric|Monk|Ranger|Sorcerer|Warrior|Wizard/
		@planner_stats_tab_grids["Other Stats"].attach(Gtk::Label.new("                  "), 0, 2, 1, 1)
		if @planner_character_info["Profession"] == "Warrior"
			@planner_stats_tab_labels["Service Bonus"] = Gtk::Label.new("Weapon Service Bonus:     0")
			@planner_stats_tab_labels["Max Possible Service Bonus"] = Gtk::Label.new("Max Weapon Service Bonus:     0")
			@planner_stats_tab_labels["Service Bonus 2"] = Gtk::Label.new("Armor Service Bonus:     0")
			@planner_stats_tab_labels["Max Possible Service Bonus 2"] = Gtk::Label.new("Max Armor Service Bonus:     0")
		else
			@planner_stats_tab_labels["Service Bonus"] = Gtk::Label.new("Service Bonus:     0")
			@planner_stats_tab_labels["Max Possible Service Bonus"] = Gtk::Label.new("Max possible Service Bonus:     0")
			@planner_stats_tab_labels["Service Bonus 2"] = Gtk::Label.new
			@planner_stats_tab_labels["Max Possible Service Bonus 2"] = Gtk::Label.new
		end
		@planner_stats_tab_grids["Other Stats"].attach(@planner_stats_tab_labels["Service Bonus"], 0, 3, 1, 1)
		@planner_stats_tab_grids["Other Stats"].attach(Gtk::Label.new("                  "), 1, 3, 1, 1)
		@planner_stats_tab_grids["Other Stats"].attach(@planner_stats_tab_labels["Max Possible Service Bonus"], 2, 3, 1, 1)
			
		@planner_stats_tab_grids["Other Stats"].attach(@planner_stats_tab_labels["Service Bonus 2"], 0, 4, 1, 1)
		@planner_stats_tab_grids["Other Stats"].attach(Gtk::Label.new("                  "), 1, 4, 1, 1)
		@planner_stats_tab_grids["Other Stats"].attach(@planner_stats_tab_labels["Max Possible Service Bonus 2"], 2, 4, 1, 1)
	end
	
	def planner_update_melee_as(planned_level)
		Planner_current_as.reset_bonus_and_tooltip
		Planner_max_as.reset_bonus_and_tooltip(@planner_character_info["Profession"])
		
		#Strength
		Planner_current_as.new(@planner_stat_info_with_asc_bonus["Strength"], "Strength bonus")
		Planner_max_as.new("Strength bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Strength"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Strength"]} AS, Asc 40 ranks: 20 AS.")
		#
	
		#Melee weapon skills
		all_melee_weapon_as = []
		@planner_all_melee_weapon_skill_names.each{ |weapon_name| all_melee_weapon_as.push(@planner_skill_cost[weapon_name]["Bonus"]) }
		Planner_current_as.new(all_melee_weapon_as.max, "weapon skill")
		
		melee_weapon_max_as_bonus = 251
		max_weapon_skill_ranks = 101
		if @planner_skill_cost["Edged Weapons"]["max_ranks"] == 2
			melee_weapon_max_as_bonus += 101
			max_weapon_skill_ranks += 101
		end
		Planner_max_as.new("Weapon skill", melee_weapon_max_as_bonus, ": #{max_weapon_skill_ranks} ranks: #{melee_weapon_max_as_bonus - 50} AS, Asc 50 ranks: 50 AS.")
		#

		#Combat Maneuvers
		Planner_current_as.new((@planner_skill_cost["Combat Maneuvers"]["Ranks"] / 2), "CM")
		
		if @planner_skill_cost["Combat Maneuvers"]["max_ranks"] == 2
			cm_max_as_bonus = 126
			max_cm_skill_ranks = 202
		else
			cm_max_as_bonus = 75
			max_cm_skill_ranks = 100
		end
		Planner_max_as.new("CM skill", cm_max_as_bonus, ": #{max_cm_skill_ranks} ranks: #{cm_max_as_bonus - 25} AS, Asc 50 ranks: 25 AS.")
		#
		
		#Society skills
		society_skill_names_known = ""
		society_as_bonus = 0
		
		#COL
		if Spell[9904].known?
			society_skill_names_known += "Sign of Striking, "
			society_as_bonus += 5
		end
		
		if Spell[9908].known?
			society_skill_names_known += "Sign of Smiting, "
			society_as_bonus += 10
		end
		
		if Spell[9912].known?
			society_skill_names_known += "Sign of Swords, "
			society_as_bonus += 20
		end
		
		#Voln
		if Spell[9805].known?
			society_skill_names_known += "Symbol of Courage, "
			society_as_bonus += 26
		end
		
		#GOS
		if Spell[9708].known?
			society_skill_names_known += "Sigil of Offense, "
			society_as_bonus += 20
		end
	
		Planner_current_as.new(society_as_bonus, "Society Skills: #{society_skill_names_known.chop.chop}")
		
		if Spell[9901].known?
			society_max_as_bonus = 35
		elsif Spell[9801].known?
			society_max_as_bonus = 26
		elsif Spell[9701].known?
			society_max_as_bonus = 20
		else
			society_max_as_bonus = 35
		end
		
		Planner_max_as.new("Society Skills", society_max_as_bonus, "")
		#
		
		#Spells
		if @planner_character_info["Profession"] =~ /Cleric|Empath/
			#Bravery
			skill_name = "Bravery (211)"
			spell_circle = "Major Spiritual"
			max_bonus = 15
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 11 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
		
			#Heroism
			skill_name = "Heroism (215)"
			max_bonus = 25
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 15 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
				
			#Blessings lore bonus for Heroism
			lore_name = "Blessings"
			skill_name = "#{lore_name} for Heroism"
			max_bonus = 25
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 15 ? (@planner_skill_cost[lore_name]["Ranks"] / 10) : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 200 ranks: 20 AS, Asc 50 ranks: 5 AS")
		end

		if @planner_character_info["Profession"] == "Cleric"
			#Benediction (307)
			skill_name = "Benediction (307)"
			spell_circle = "Cleric"
			max_bonus = 15
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 7 ? [((@planner_labels_for_all_skills[spell_circle].text.to_i - 7) / 2) + 5, max_bonus].min : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": Base: 5 AS, 27 Cleric ranks: 10 AS")
		end
		
		if @planner_character_info["Profession"] =~ /Bard|Rogue|Sorcerer|Warrior|Wizard/
			#Elemental Targeting (425)
			skill_name = "Elemental Targeting (425)"
			spell_circle = "Minor Elemental"
			max_bonus = 50
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 25 ? [((@planner_labels_for_all_skills[spell_circle].text.to_i - 25) / 2) + 25, max_bonus].min : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": Base: 25 AS, 75 Minor Elemental ranks: 25 AS")
		end
		
		if @planner_character_info["Profession"] == "Wizard"
			#Strength (509)
			skill_name = "Strength (509)"
			spell_circle = "Major Elemental"
			max_bonus = 15
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 9 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
		
			#Earth lore bonus for Strength
			lore_name = "Earth"
			skill_name = "#{lore_name} for Strength"
			max_bonus = 19
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 9 ? Planner_Seeds.seed(4, @planner_skill_cost[lore_name]["Ranks"]) : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 197 ranks: 16 AS, Asc 50 ranks: 3 AS")
		end
		
		if @planner_character_info["Profession"] == "Ranger"
			#Phoen's Strength (606)
			skill_name = "Phoen's Strength (606)"
			spell_circle = "Ranger"
			max_bonus = 10
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 6 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
		end
		
		if @planner_character_info["Profession"] == "Bard"
			#Kai's Triumph Song (1007)
			skill_name = "Kai's Triumph Song (1007)"
			spell_circle = "Bard"
			max_bonus = 20
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 7 ? [((@planner_labels_for_all_skills[spell_circle].text.to_i - 7)  + 10), max_bonus].min : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": Base: 10 AS, 17 Bard ranks: 10 AS")
			
			#Telepathy for Kai's Triumph Song
			lore_name = "Telepathy"
			skill_name = "#{lore_name} for Kai's"
			max_bonus = 15
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 7 ? Planner_Seeds.seed(3, @planner_skill_cost[lore_name]["Ranks"]) : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 100 ranks: 11 AS, Asc 50 ranks: 4 AS")
		end
		
		if @planner_character_info["Profession"] == "Empath"
			#Empathic Focus (1109)
			skill_name = "Empathic Focus (1109)"
			spell_circle = "Empath"
			max_bonus = 15
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 9 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
		
			#Intensity (1130)
			skill_name = "Intensity (1130)"
			max_bonus = 55
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 30 ? [((@planner_labels_for_all_skills[spell_circle].text.to_i - 30) / 2) + 20, max_bonus].min : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": Base: 20 AS, 100 Empath ranks: 35 AS")
		end
		
		if @planner_character_info["Profession"] == "Paladin"
			#Dauntless (1606)
			skill_name = "Dauntless (1606)"
			spell_circle = "Paladin"
			max_bonus = 10
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 6 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
		
			#Patron's Blessing (1611)
			skill_name = "Patron's Blessing (1611)"
			max_bonus = 38
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 11 ? [(((@planner_labels_for_all_skills[spell_circle].text.to_i - 11) * 0.75).truncate + 10) / 2, max_bonus].min : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": Base: 5 AS, 100 Paladin ranks: 33 AS")
			
			#Zealot (1617)
			skill_name = "Zealot (1617)"
			max_bonus = 30
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 17 ? 30 : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, "")
			
			#Religion for Zealot (1617)
			lore_name = "Religion"
			skill_name = "#{lore_name} for Zealot"
			max_bonus = 21
			as_bonus = @planner_labels_for_all_skills[spell_circle].text.to_i >= 17 ? Planner_Seeds.seed(1, @planner_skill_cost[lore_name]["Ranks"]) : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 190 ranks: 19 AS, Asc 41 ranks: 2 AS")
		end
		
		if @planner_character_info["Profession"] =~ /Warrior|Rogue|Paladin/
			#Weapon Specialization
			skill_name = "Weapon Specialization"
			max_bonus = 10
			as_bonus = @planner_cman_spin_buttons[skill_name].value.to_i * 2
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 2 AS per rank")
		end
		
		if @planner_character_info["Profession"] =~ /Warrior|Rogue|Monk|Paladin/
			#Weapon Specialization
			skill_name = "Surge of Strength"
			max_bonus = 16
			as_bonus = @planner_cman_spin_buttons[skill_name].value.to_i >= 1 ? ((@planner_cman_spin_buttons[skill_name].value.to_i * 4) + 12) / 2 : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 6 AS plus 2 AS per rank")
		end
		
		if @planner_character_info["Profession"] == "Warrior"
			#Weapon Bonding
			skill_name = "Weapon Bonding"
			max_bonus = 10
			as_bonus = planned_level >= 25 ? max_bonus : 0
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": 2 AS per rank")
		end
		
		if @planner_character_info["Profession"] =~ /Warrior|Rogue|Monk/
			#Martial Mastery
			skill_name = "Martial Mastery"
			max_bonus = 50
			
			all_melee_weapons = []
			@planner_all_melee_weapon_skill_names.each{ |weapon_name| all_melee_weapons.push(@planner_skill_cost[weapon_name]["Ranks"]) }
			top_three = all_melee_weapons.max(3)

			total_spells_known = @planner_labels_for_all_skills["Minor Spiritual"].text.to_i + @planner_labels_for_all_skills["Minor Elemental"].text.to_i + [(@planner_labels_for_all_skills["Minor Mental"].text.to_i - 20), 0].max
			total_spells_known = [total_spells_known - 5, 0].max
			as_bonus = [(((top_three[1] + top_three[2]) / 8) * ((100.0 - (total_spells_known * 5)) / 100)).truncate, 0].max
			
			Planner_current_as.new(as_bonus, skill_name)
			Planner_max_as.new(skill_name, max_bonus, ": +1 AS/8 ranks of 2nd+3rd weapon skills -5%/spell known")
		end
		#

		Planner_current_as.slice_slice
		@planner_stats_tab_labels["Melee AS"].set_text("Melee AS:     #{Planner_current_as.class_variable_get(:@@total_value)}")
		@planner_stats_tab_labels["Melee AS"].set_tooltip_text(Planner_current_as.class_variable_get(:@@tooltip_text))
	
		Planner_max_as.slice_slice
		@planner_stats_tab_labels["Max Possible Melee AS"].set_text("Max Possible Melee AS:     #{Planner_max_as.class_variable_get(:@@total_value)}")
		@planner_stats_tab_labels["Max Possible Melee AS"].set_tooltip_text(Planner_max_as.class_variable_get(:@@tooltip_text))
	end
	#
	
	def planner_update_player_service_bonus(planned_level)
		Planner_player_service_bonus.reset_bonus_and_tooltip
		Planner_max_player_service_bonus.reset_bonus_and_tooltip
		
		if @planner_character_info["Profession"] == "Bard"
			
			loop_count = 0
			bonus_to_add = 0
			@planner_labels_for_all_skills["Bard"].text.to_i.times{
				loop_count += 1
				break if loop_count > planned_level + 1
				bonus_to_add += 2
			}
			
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Aura"], "Aura bonus")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Influence"], "Influence bonus")
			Planner_player_service_bonus.new((@planner_skill_cost["Magic Item Use"]["Ranks"] / 2), "Magic Item Use ranks / 2")
			Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Elemental"]["Ranks"] / 2), "Mana Control: Elemental ranks / 2")
			Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Mental"]["Ranks"] / 2), "Mana Control: Mental ranks / 2")
			Planner_player_service_bonus.new((@planner_skill_cost["Telepathy"]["Ranks"] / 2), "Telepathy ranks / 2")
			Planner_player_service_bonus.new(bonus_to_add, "Spell ranks to level * 2")
			Planner_player_service_bonus.new([(@planner_labels_for_all_skills["Bard"].text.to_i - (planned_level + 1)), 0].max, "Bard spell ranks above level")

			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Aura Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Aura"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Aura"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Influence Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Influence"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Influence"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Magic Item Use", 126, ": 202 ranks: 101 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("EMC", 126, ": 202 ranks: 101 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("MMC", 126, ": 202 ranks: 101 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("Telepathy", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("Bard spells to level", 202, ": 101 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Bard spells above level", 101, ": 101 spells: 101 bonus")
		elsif @planner_character_info["Profession"] == "Cleric"
			loop_count = 0
			bonus_to_add = 0
			@planner_labels_for_all_skills["Cleric"].text.to_i.times{
				loop_count += 1
				break if loop_count > planned_level + 1
				bonus_to_add += 2
			}
			
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Wisdom"], "Wisdom bonus")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Influence"], "Influence bonus")
			Planner_player_service_bonus.new((@planner_skill_cost["Magic Item Use"]["Ranks"] / 10), "Magic Item Use ranks / 10")
			Planner_player_service_bonus.new((@planner_skill_cost["Arcane Symbols"]["Ranks"] / 10), "Arcane Symbols ranks / 10")
			Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Spiritual"]["Ranks"] / 2), "Mana Control: Spiritual ranks / 2")
			Planner_player_service_bonus.new(bonus_to_add, "Spell ranks to level * 2")
			Planner_player_service_bonus.new([(@planner_labels_for_all_skills["Cleric"].text.to_i - (planned_level + 1)), 0].max, "Cleric spell ranks above level")
			Planner_player_service_bonus.new(20, "Shrine Bonus: +20 being in shrine room matching your CONVERT exactly")

			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Wisdom Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Wisdom"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Wisdom"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Influence Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Influence"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Influence"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Magic Item Use", 25, ": 200 ranks: 20 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("Arcane Symbols", 25, ": 200 ranks: 20 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("SMC", 176, ": 302 ranks: 151 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("Cleric spells to level", 202, ": 101 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Cleric spells above level", 202, ": 202 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Shrine Bonus", 20, ": Shrine Bonus: +20 being in shrine room matching your CONVERT exactly")
		elsif @planner_character_info["Profession"] == "Monk"
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(2 * @planner_stat_info_with_asc_bonus["Dexterity"], "Dexterity bonus * 2")
			Planner_player_service_bonus.new(2 * @planner_stat_info_with_asc_bonus["Discipline"], "Discipline bonus * 2")
			Planner_player_service_bonus.new((0.75 * @planner_skill_cost["Physical Fitness"]["Ranks"]).truncate, "Physical Fitness ranks * 0.75")
			Planner_player_service_bonus.new(@planner_skill_cost["First Aid"]["Ranks"] / 2, "First Aid ranks / 2")
			Planner_player_service_bonus.new((@planner_labels_for_all_skills["Minor Spiritual"].text.to_i + @planner_labels_for_all_skills["Minor Mental"].text.to_i) * 2, "Spells * 2")
			Planner_player_service_bonus.new(@planner_skill_cost["Arcane Symbols"]["Ranks"], "Arcane Symbols ranks")
			Planner_player_service_bonus.new(@planner_skill_cost["Mana Control: Mental"]["Ranks"], "Mana Control: Mental ranks")
			Planner_player_service_bonus.new(@planner_skill_cost["Mana Control: Spiritual"]["Ranks"], "Mana Control: Spiritual ranks")
			Planner_player_service_bonus.new(@planner_skill_cost["Telepathy"]["Bonus"], "Telepathy bonus")

			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Dexterity Bonus", (50 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Dexterity"]) * 2, ": 100 stat (+10 Perfect Self): #{(30 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Dexterity"]) * 2} bonus, Asc 40 stat: 40 bonus")
			Planner_max_player_service_bonus.new("Discipline Bonus", (50 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Discipline"]) * 2, ": 100 stat (+10 Perfect Self): #{(30 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Discipline"]) * 2} bonus, Asc 40 stat: 40 bonus")
			Planner_max_player_service_bonus.new("Physical Fitness", 264, ": 302 ranks: 226 bonus, Asc 50 ranks: 38 bonus")
			Planner_max_player_service_bonus.new("First Aid", 126, ": 202 ranks: 101 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("Spells", 202, ": 101 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Arcane Symbols", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("MMC", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("SMC", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("Telepathy", 251, ": 101 ranks: 201 bonus, Asc 50 ranks: 50 bonus")
		elsif @planner_character_info["Profession"] == "Ranger"
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(2 * @planner_stat_info_with_asc_bonus["Wisdom"], "Wisdom bonus * 2")
			Planner_player_service_bonus.new(2 * @planner_stat_info_with_asc_bonus["Intuition"], "Intuition bonus * 2")
			Planner_player_service_bonus.new((0.75 * @planner_skill_cost["Survival"]["Ranks"]).truncate, "Survival ranks * 0.75")
			Planner_player_service_bonus.new(@planner_skill_cost["Magic Item Use"]["Ranks"], "Magic Item Use ranks")
			Planner_player_service_bonus.new(@planner_skill_cost["Harness Power"]["Ranks"], "Harness Power ranks")
			Planner_player_service_bonus.new(@planner_skill_cost["Mana Control: Spiritual"]["Ranks"], "Mana Control: Spiritual ranks")
			Planner_player_service_bonus.new(@planner_skill_cost["Blessings"]["Ranks"], "Blessings ranks")
			Planner_player_service_bonus.new((@planner_labels_for_all_skills["Ranger"].text.to_i * 1.5).truncate, "Ranger spells * 1.5")

			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Wisdom Bonus", (45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Wisdom"]) * 2, ": 100 stat: #{(25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Wisdom"]) * 2} bonus, Asc 40 stat: 40 bonus")
			Planner_max_player_service_bonus.new("Intuition Bonus", (45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Intuition"]) * 2, ": 100 stat: #{(25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Intuition"]) * 2} bonus, Asc 40 stat: 40 bonus")
			Planner_max_player_service_bonus.new("Survival", 264, ": 302 ranks: 226 bonus, Asc 50 ranks: 38 bonus")
			Planner_max_player_service_bonus.new("Magic Item Use", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("Harness Power", 252, ": 202 ranks: 202 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("SMC", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("Blessings", 151, ": 101 ranks: 101 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("Ranger spells", 303, ": 202 ranks: 303 bonus")
		elsif @planner_character_info["Profession"] == "Sorcerer"
			loop_count = 0
			bonus_to_add = 0
			@planner_labels_for_all_skills["Sorcerer"].text.to_i.times{
				loop_count += 1
				break if loop_count > planned_level + 1
				bonus_to_add += 2
			}
			
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Wisdom"], "Wisdom bonus")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Intuition"], "Intuition bonus")
			Planner_player_service_bonus.new((@planner_skill_cost["Magic Item Use"]["Ranks"] / 10), "Magic Item Use ranks / 10")
			Planner_player_service_bonus.new((@planner_skill_cost["Arcane Symbols"]["Ranks"] / 10), "Arcane Symbols ranks / 10")
			
			highest_skill = [@planner_skill_cost["Mana Control: Elemental"]["Ranks"], @planner_skill_cost["Mana Control: Spiritual"]["Ranks"]].max
			if @planner_skill_cost["Mana Control: Elemental"]["Ranks"] == highest_skill
				Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Elemental"]["Ranks"] / 2), "Mana Control: Elemental ranks / 2")
				Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Spiritual"]["Ranks"] / 4), "Mana Control: Spiritual ranks / 4")
			else
				Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Spiritual"]["Ranks"] / 2), "Mana Control: Spiritual ranks / 2")
				Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Elemental"]["Ranks"] / 4), "Mana Control: Elemental ranks / 4")
			end
			
			Planner_player_service_bonus.new(bonus_to_add, "Sorcerer spell ranks to level * 2")
			Planner_player_service_bonus.new([(@planner_labels_for_all_skills["Sorcerer"].text.to_i - (planned_level + 1)), 0].max, "Sorcerer spell ranks above level")
			Planner_player_service_bonus.new(20, "Workshop Bonus: +20 being in a workshop")

			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Wisdom Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Wisdom"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Wisdom"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Intuition Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Intuition"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Intuition"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Magic Item Use", 25, ": 200 ranks: 20 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("Arcane Symbols", 25, ": 200 ranks: 20 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("EMC", 126, ": 202 ranks: 101 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("SMC", 63, ": 202 ranks: 50 bonus, Asc 50 ranks: 13 bonus")
			Planner_max_player_service_bonus.new("Sorcerer spells to level", 202, ": 101 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Sorcerer spells above level", 202, ": 202 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Workshop Bonus", 20, ": Workshop Bonus: +20 being in a workshop")
		elsif @planner_character_info["Profession"] == "Warrior"		
			all_melee_weapons = []
			@planner_all_melee_weapon_skill_names.each{ |weapon_name| all_melee_weapons.push(@planner_skill_cost[weapon_name]["Ranks"]) }
			top_three = all_melee_weapons.max(3)
			
			loop_count = 0
			bonus_to_add = 0
			top_three[0].times{
				loop_count += 1
				break if loop_count > planned_level
				bonus_to_add += 2
			}
			
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Strength"], "Strength bonus")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Discipline"], "Discipline bonus")
			Planner_player_service_bonus.new((@planner_skill_cost["Physical Fitness"]["Ranks"] / 10), "Physical Fitness ranks / 10")
			Planner_player_service_bonus.new(20, "Warrior Workshop Bonus: +20 being in a Warrior workshop")
			Planner_player_service_bonus.new(bonus_to_add, "Highest weapon ranks to level * 2")
			Planner_player_service_bonus.new([(top_three[0] - planned_level), 0].max, "Highest weapon ranks above level")
			Planner_player_service_bonus.new((top_three[1] + top_three[2]) / 2, "2nd+3rd highest weapon ranks / 2")
			
			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Strength Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Strength"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Strength"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Discipline Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Discipline"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Discipline"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Physical Fitness", 35, ": 300 ranks: 30 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("Warrior workshop Bonus", 20, ": +20 being in a warrior workshop")
			Planner_max_player_service_bonus.new("Highest weapon ranks to level", 200, ": 100 ranks: 200 bonus")
			Planner_max_player_service_bonus.new("Above level", 152, ": 102 ranks: 102 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("2nd+3rd highest weapon ranks", 252, ": 404 ranks: 202 bonus, Asc 100 ranks: 50 bonus")
			
			Planner_player_service_bonus.slice_slice
			@planner_stats_tab_labels["Service Bonus"].set_text("Weapon Service Bonus:     #{Planner_player_service_bonus.class_variable_get(:@@total_value)}")
			@planner_stats_tab_labels["Service Bonus"].set_tooltip_text(Planner_player_service_bonus.class_variable_get(:@@tooltip_text))
			
			Planner_max_player_service_bonus.slice_slice
			@planner_stats_tab_labels["Max Possible Service Bonus"].set_text("Max Weapon Service Bonus:     #{Planner_max_player_service_bonus.class_variable_get(:@@total_value)}")
			@planner_stats_tab_labels["Max Possible Service Bonus"].set_tooltip_text(Planner_max_player_service_bonus.class_variable_get(:@@tooltip_text))
			
			Planner_player_service_bonus.reset_bonus_and_tooltip
			Planner_max_player_service_bonus.reset_bonus_and_tooltip
			
			loop_count = 0
			bonus_to_add = 0
			@planner_skill_cost["Armor Use"]["Ranks"].times{
				loop_count += 1
				break if loop_count > planned_level
				bonus_to_add += 2
			}
			
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Strength"], "Strength bonus")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Discipline"], "Discipline bonus")
			Planner_player_service_bonus.new((@planner_skill_cost["Physical Fitness"]["Ranks"] / 10), "Physical Fitness ranks / 10")
			Planner_player_service_bonus.new(20, "Warrior Workshop Bonus: +20 being in a Warrior workshop")
			Planner_player_service_bonus.new(bonus_to_add, "Armor Use ranks to level * 2")
			Planner_player_service_bonus.new([(@planner_skill_cost["Armor Use"]["Ranks"] - planned_level), 0].max, "Armor Use ranks above level")
			Planner_player_service_bonus.new((@planner_skill_cost["Shield Use"]["Ranks"] / 3), "Shield Use ranks / 3")
			
			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Strength Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Strength"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Strength"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Discipline Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Discipline"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Discipline"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Physical Fitness", 35, ": 300 ranks: 30 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("Warrior workshop Bonus", 20, ": +20 being in a warrior workshop")
			Planner_max_player_service_bonus.new("Armor Use ranks to level", 200, ": 100 ranks: 200 bonus")
			Planner_max_player_service_bonus.new("Armor Use above level", 253, ": 203 ranks: 203 bonus, Asc 50 ranks: 50 bonus")
			Planner_max_player_service_bonus.new("Shield Use ranks", 117, ": 303 ranks: 101 bonus, Asc 48 ranks: 16 bonus")
			
			Planner_player_service_bonus.slice_slice
			@planner_stats_tab_labels["Service Bonus 2"].set_text("Armor Service Bonus:         #{Planner_player_service_bonus.class_variable_get(:@@total_value)}")
			@planner_stats_tab_labels["Service Bonus 2"].set_tooltip_text(Planner_player_service_bonus.class_variable_get(:@@tooltip_text))
			
			Planner_max_player_service_bonus.slice_slice
			@planner_stats_tab_labels["Max Possible Service Bonus 2"].set_text("Max Armor Service Bonus:       #{Planner_max_player_service_bonus.class_variable_get(:@@total_value)}")
			@planner_stats_tab_labels["Max Possible Service Bonus 2"].set_tooltip_text(Planner_max_player_service_bonus.class_variable_get(:@@tooltip_text))
		elsif @planner_character_info["Profession"] == "Wizard"
			loop_count = 0
			bonus_to_add = 0
			@planner_labels_for_all_skills["Wizard"].text.to_i.times{
				loop_count += 1
				break if loop_count > planned_level + 1
				bonus_to_add += 2
			}
			
			Planner_player_service_bonus.new(planned_level, "Level")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Logic"], "Logic bonus")
			Planner_player_service_bonus.new(@planner_stat_info_with_asc_bonus["Intuition"], "Intuition bonus")
			Planner_player_service_bonus.new((@planner_skill_cost["Magic Item Use"]["Ranks"] / 10), "Magic Item Use ranks / 10")
			Planner_player_service_bonus.new((@planner_skill_cost["Arcane Symbols"]["Ranks"] / 10), "Arcane Symbols Use ranks / 10")
			Planner_player_service_bonus.new((@planner_skill_cost["Mana Control: Elemental"]["Ranks"] / 2), "Mana Control: Elemental ranks / 2")
			Planner_player_service_bonus.new(bonus_to_add, "Wizard spell ranks to level * 2")
			Planner_player_service_bonus.new([(@planner_labels_for_all_skills["Wizard"].text.to_i - (planned_level + 1)), 0].max, "Wizard spell ranks above level")
			Planner_player_service_bonus.new(25, "Familiar Bonus: +25 for having familiar with you")
			Planner_player_service_bonus.new(50, "Workshop Bonus: +50 being in a workshop")

			Planner_max_player_service_bonus.new("Level", 100, "")
			Planner_max_player_service_bonus.new("Logic Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Logic"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Logic"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Intuition Bonus", 45 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Intuition"], ": 100 stat: #{25 + @planner_race_stat_bonuses[@planner_character_info["Race"]]["Intuition"]} bonus, Asc 40 stat: 20 bonus")
			Planner_max_player_service_bonus.new("Magic Item Use", 25, ": 200 ranks: 20 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("Arcane Symbols", 25, ": 200 ranks: 20 bonus, Asc 50 ranks: 5 bonus")
			Planner_max_player_service_bonus.new("EMC", 176, ": 302 ranks: 151 bonus, Asc 50 ranks: 25 bonus")
			Planner_max_player_service_bonus.new("Wizard spells to level", 202, ": 101 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Wizard spells above level", 202, ": 202 spells: 202 bonus")
			Planner_max_player_service_bonus.new("Familiar Bonus", 25, ": +25 for having familiar with you")
			Planner_max_player_service_bonus.new("Workshop Bonus", 50, ": Workshop Bonus: +50 being in a workshop")
		end
		
		if @planner_character_info["Profession"] != "Warrior"
			Planner_player_service_bonus.slice_slice
			@planner_stats_tab_labels["Service Bonus"].set_text("Service Bonus:     #{Planner_player_service_bonus.class_variable_get(:@@total_value)}")
			@planner_stats_tab_labels["Service Bonus"].set_tooltip_text(Planner_player_service_bonus.class_variable_get(:@@tooltip_text))
			
			Planner_max_player_service_bonus.slice_slice
			@planner_stats_tab_labels["Max Possible Service Bonus"].set_text("Max Possible Service Bonus:     #{Planner_max_player_service_bonus.class_variable_get(:@@total_value)}")
			@planner_stats_tab_labels["Max Possible Service Bonus"].set_tooltip_text(Planner_max_player_service_bonus.class_variable_get(:@@tooltip_text))
		end
	end
	
	#
	
	#Set starting information
	@planner_character_info["Ascension Skills"].each{ |key,value| @planner_ascension_spin_buttons[key].value = value }
	@planner_character_info["CMAN Skills"].each{ |key,value| @planner_cman_spin_buttons[key].value = value }
	
	@planner_all_ranks_per_level_entries["Edged Weapons"].text = "1"
	@planner_all_ranks_per_level_entries["Edged Weapons"].text = ""
	planner_update_all_info_on_stats_tab(level_spin_button.value.to_i)
	
	all_skills_to_change = [ "Strength", "Physical Fitness" ]
	all_skills_to_change.each{ |skill_name|
		starting_value = @planner_ascension_spin_buttons[skill_name].value
		if starting_value == 0
			@planner_ascension_spin_buttons[skill_name].value = 1
		else
			@planner_ascension_spin_buttons[skill_name].value = 0
		end
		@planner_ascension_spin_buttons[skill_name].value = starting_value
	}
	@planner_ascension_spin_buttons["Porter"].value = @planner_character_info["Ascension Skills"]["Porter"]
	
	all_skills_to_change = [ "Dirtkick", "Acrobat's Leap", "Combat Movement", "Parry Specialization", "Punch Specialization", "Kick Specialization", "Grapple Specialization", "Block Specialization", "Evade Specialization", "Parry Specialization" ]
	all_skills_to_change.each{ |skill_name|
		starting_value = @planner_cman_spin_buttons[skill_name].value
		if starting_value == 0
			@planner_cman_spin_buttons[skill_name].value = 1
		else
			@planner_cman_spin_buttons[skill_name].value = 0
		end
		@planner_cman_spin_buttons[skill_name].value = starting_value
	}
	all_skills_to_change = [ "Dust Shroud", "Leap Attack", "Side by Side", "Spell Parry", "Parry Specialization", "Punch Specialization", "Kick Specialization", "Grapple Specialization", "Block Specialization", "Evade Specialization", "Parry Specialization" ]
	all_skills_to_change.each{ |skill_name| @planner_cman_spin_buttons[skill_name].value = @planner_character_info["CMAN Skills"][skill_name] }

	main_notebook.append_page(@planner_stats_tab_grids["Main Grid"], Gtk::Label.new("Stats"))
	
	level_spin_button.value = @planner_character_info["Level"]
	spin_button_original_value = level_spin_button.value.dup
	if level_spin_button.value == 0
		level_spin_button.value += 1
	else
		level_spin_button.value = 0
	end
	level_spin_button.value = spin_button_original_value
	experience_spin_button.value = 1
	experience_spin_button.value = @planner_character_info["Normal Experience"]
	asc_exp_spin_button.value = 1
	asc_exp_spin_button.value = @planner_character_info["Ascension Experience"]
	#
	
	#Second tab
	help_tab_grid_1 = Gtk::Grid.new
	help_info_label = Gtk::Label.new("
Most things in this script have tooltips that give more information.
Just hover your cursor over something you want to learn more about.
		
In the Main tab enter the level you are planning for.
You can manully input a number, be sure to hit Enter when done.
You can use mouse wheel and up/down arrow keys to change level by 1.
You can also use Page Up and Page Down keys to change the level by 10.

For each skill, the first box is how many ranks per level you want.
Enter + in the box to add the number entered to the total.
Examples of what to enter: 1, 2.5, 3, 1+, 2+, 2.75+, 3+
If you enter 2+ then script will calculate (2 * level) + 2.

The second box of each skill is the max number of ranks you want.
You can leave this blank if you don't want a max.
	")
	help_tab_grid_1.attach(help_info_label, 0, 0, 1, 1)
	
	main_notebook.append_page(help_tab_grid_1, Gtk::Label.new("Help"))
	#
	
	#Third tab
	plans_tab_grid_1 = Gtk::Grid.new
	plans_label = Gtk::Label.new("
-Button that will assign your current skills, CMANs, ascension, experience etc when clicked

-Multiple save files

-Have script enter skill information at at inn

-More stats on the stats page
	")
	plans_tab_grid_1.attach(plans_label, 0, 0, 1, 1)
	
	main_notebook.append_page(plans_tab_grid_1, Gtk::Label.new("Plans"))
	#
	
	#Fourth tab
	change_log_tab_grid_1 = Gtk::Grid.new
	
	changes_made_label = Gtk::Label.new("
Version 1: Initial release!

Version 2: Script no longer crashes the FE if you try to load file and there is no saved file.

Version 3: Added a Stats tab to track all sorts of nifty stats.

Version 4: There is now an option to enter your normal experience and your TPs will be adjusted 
based on your experience. So now you can plan your character based on experience instead of just level.

Version 5: Added more tabs for skills in the Main tab and moved skills around to more closely match
how skills are listed when setting goals at an inn.

Version 5: Fixed bug with Stats tab not updating properly.

Version 6: Added Ascension skills. Plan out your Ascension skills!

Version 6: Added CMAN skills. Plan out your CMAN skills!

Version 6: You can now plan out your Ascension Experience. This will also adjust how many ATPs you have.

Version 6: Updated skill cost text so it displays costs depending if you're 1xing, 2xing, or 3xing a skill.
	
	")
	change_log_tab_grid_1.attach(changes_made_label, 0, 0, 1, 1)
	
	main_notebook.append_page(change_log_tab_grid_1, Gtk::Label.new("Change Log"))
	#
	
	@planner_window_main.add(main_notebook)
	@planner_window_main.show_all
end

#Gather info start information
result = Lich::Util.quiet_command_xml("info start", /Level .* Stats for|This character was created/)

wanted_info = {
	"Race"						=> /Level \d+ Stats for .*, (.*) .*/,
	"Profession"				=> /Level \d+ Stats for .*, .* (.*)/,
	"Starting Strength"			=> /Strength \(STR\): (\d+)/,
	"Starting Constitution"		=> /Constitution \(CON\): (\d+)/,
	"Starting Dexterity"		=> /Dexterity \(DEX\): (\d+)/,
	"Starting Agility"			=> /Agility \(AGI\): (\d+)/,
	"Starting Discipline"		=> /Discipline \(DIS\): (\d+)/,
	"Starting Aura"				=> /Aura \(AUR\): (\d+)/,
	"Starting Logic"			=> /Logic \(LOG\): (\d+)/,
	"Starting Intuition"		=> /Intuition \(INT\): (\d+)/,
	"Starting Wisdom"			=> /Wisdom \(WIS\): (\d+)/,
	"Starting Influence"		=> /Influence \(INF\): (\d+)/,
}

result.each do |info|
	info = strip_xml(info)
	wanted_info.each do |attribute, regex|
		@planner_character_info[attribute] = $1 if info =~ regex
	end
end
#

@planner_skill_cost = @planner_cost_of_skills[@planner_character_info["Profession"]]

@planner_all_lore_names = [ "Air", "Earth", "Fire", "Water", "Blessings", "Religion", "Summoning", "Demonology", "Necromancy", "Divination", "Manipulation", "Telepathy", "Transference", "Transformation" ]

@planner_all_lore_names.each{ |skill_name| @planner_skill_cost[skill_name] = {}  }

#Gather experience information
result = Lich::Util.quiet_command_xml("experience", /Level\:|Your mind/)
result.each{ |info|
	info = strip_xml(info)
	@planner_character_info["Level"] = $1.to_i if info =~ /Level\: (\d+)/
	@planner_character_info["Normal Experience"] = $1.delete(",").to_i if info =~ /Experience: (\d{1,3}(?:,\d{3})*)(?=\D|$)/
	@planner_character_info["Ascension Experience"] = $1.delete(",").to_i if info =~ /Ascension Exp: (\d{1,3}(?:,\d{3})*)(?=\D|$)/
}
#

#Gather ascension information
@planner_character_info["Ascension milestone ATPs"] = 0

result = Lich::Util.quiet_command_xml("asc milestone", /your Ascension Milestones are as follows/)

result.each do |info|
	info = strip_xml(info)
	@planner_character_info["Ascension milestone ATPs"] += 1 if info =~ / Yes/
end

result = Lich::Util.quiet_command_xml("asc info", /your Ascension Abilities are as follows/)

@planner_character_info["Ascension Skills"] = {}
@planner_all_stat_names_in_order = [ "Strength", "Constitution", "Dexterity", "Agility", "Discipline", "Aura", "Logic", "Intuition", "Wisdom", "Influence" ]

@planner_ascension_skill_information.each{ |key,value| @planner_character_info["Ascension Skills"][key] = 0 }

result.each do |info|
	info = strip_xml(info)
	if info =~ /.*\s+(\w+)\s+(\d+)\/\d+/
		mnemonic_name = $1.strip
		skill_ranks = $2.to_i
		skill_name = nil
		@planner_ascension_skill_information.each{ |key, value| skill_name = key if value["mnemonic"] == mnemonic_name }
		@planner_character_info["Ascension Skills"][skill_name] = skill_ranks
	end
end
#

#Gather CMAN info
@planner_character_info["CMAN Skills"] = {}
@planner_cman_skill_information.each{ |key,value| @planner_character_info["CMAN Skills"][key] = 0 }

result = Lich::Util.quiet_command_xml("cman info", /your Combat Maneuvers are as follows/)
result.each do |info|
	info = strip_xml(info)
	if info =~ /.*\s+(\w+)\s+(\d+)\/\d+/
		mnemonic_name = $1.strip
		skill_ranks = $2.to_i
		skill_name = nil
		@planner_cman_skill_information.each{ |key, value| skill_name = key if value["mnemonic"] == mnemonic_name }
		@planner_character_info["CMAN Skills"][skill_name] = skill_ranks
	end
end
#

all_gi_info = [ "Strength", "Constitution", "Dexterity", "Agility", "Discipline", "Aura", "Logic", "Intuition", "Wisdom", "Influence" ]

all_gi_info.each{ |stat| @planner_character_info["#{stat} GI"] = @planner_profession_gis[@planner_character_info["Profession"]][stat] + @planner_race_gis[@planner_character_info["Race"]][stat] }

@planner_both_prime_stats = [ @planner_profession_gis[@planner_character_info["Profession"]]["Prime 1"], @planner_profession_gis[@planner_character_info["Profession"]]["Prime 2"] ]

@planner_all_stat_growth_values = [ @planner_character_info["Strength GI"], @planner_character_info["Constitution GI"], @planner_character_info["Dexterity GI"], @planner_character_info["Agility GI"], @planner_character_info["Discipline GI"], @planner_character_info["Aura GI"], @planner_character_info["Logic GI"], @planner_character_info["Intuition GI"], @planner_character_info["Wisdom GI"], @planner_character_info["Influence GI"] ]

@planner_all_stat_starting_values = [ @planner_character_info["Starting Strength"].to_i, @planner_character_info["Starting Constitution"].to_i, @planner_character_info["Starting Dexterity"].to_i, @planner_character_info["Starting Agility"].to_i, @planner_character_info["Starting Discipline"].to_i, @planner_character_info["Starting Aura"].to_i, @planner_character_info["Starting Logic"].to_i, @planner_character_info["Starting Intuition"].to_i, @planner_character_info["Starting Wisdom"].to_i, @planner_character_info["Starting Influence"].to_i ]

@planner_skill_cost.each{ |key,value| @planner_skill_cost[key]["Name"] = key }
@planner_skill_cost.each{ |key,value| @planner_skill_cost[key]["Bonus"] = 0 }
@planner_skill_cost.each{ |key,value| @planner_skill_cost[key]["Ranks"] = 0 }

@planner_all_skill_names = [ "Armor Use", "Shield Use", "Edged Weapons", "Blunt Weapons", "Two-Handed Weapons", "Ranged Weapons", "Thrown Weapons", "Pole Arm Weapons", "Brawling", "Two Weapon Combat", "Combat Maneuvers", "Multi-Opponent Combat", "Ambush", "Physical Fitness", "Dodging", "Climbing", "Swimming", "Disarming Traps", "Picking Locks", "Stalking & Hiding", "Perception", "First Aid", "Trading", "Picking Pockets", "Survival", "Arcane Symbols", "Magic Item Use", "Harness Power", "Spell Aiming", "Mana Control: Elemental", "Mana Control: Spiritual", "Mana Control: Mental", "Spell Research", "Elemental Lore", "Spiritual Lore", "Sorcerous Lore", "Mental Lore", ]

@planner_all_melee_weapon_skill_names = [ "Edged Weapons", "Blunt Weapons", "Two-Handed Weapons", "Pole Arm Weapons", "Brawling" ]

@planner_all_elemental_lore_names = [ "Air", "Earth", "Fire", "Water" ]
@planner_all_spiritual_lore_names = [ "Blessings", "Religion", "Summoning" ]
@planner_all_sorcerous_lore_names = [ "Demonology", "Necromancy" ]
@planner_all_mental_lore_names = [ "Divination", "Manipulation", "Telepathy", "Transference", "Transformation" ]
@planner_all_spell_skill_names = [ "Major Elemental", "Minor Elemental", "Bard", "Major Spiritual", "Minor Spiritual", "Cleric", "Empath", "Minor Mental", "Paladin", "Ranger", "Sorcerer", "Wizard" ]

@planner_hash_values = {}

@planner_skills_not_to_include = nil
if @planner_character_info["Profession"] == "Warrior"
	@planner_skills_not_to_include = [ "Berserk", "Disarm Weapon", "Feint", "Stance Perfection", "Spin Attack", "Tackle" ]
elsif @planner_character_info["Profession"] == "Rogue"
	@planner_skills_not_to_include = [ "Cheapshots", "Divert", "Subdue", "Sweep", "Stun Maneuvers" ]
end

if @planner_window_main.nil? || @planner_window_main.destroyed?
	Gtk.queue {
		create_planner_main_window
		Gtk.main
	}
end