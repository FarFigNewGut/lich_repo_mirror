=begin
	upickbot4.lic   -- UNSAFE VERSION, DROPS BOXES REGARDLESS OF ROOM POPULATION
	*** DEBUG FEATURES ADDED TO TRY TO REMOVE SPORATIC LOOT DROPPING BUG ***
	*** ADDING VERSION NUMBERS, CAUSE I KINDA NEED TO....
	VERSION 3.6
	SCRIPT MUST BE TRUSTED.  STOP TELLING ME IT DOESN'T WORK!
	Suggested:  ;upickbot4 clear if it's a fresh run, to make sure any extras are cleared out.
	UPLOADED:  10-9-2014
	UPDATE:  07-21-2014  multitown picking in SHATTERED in Ta'Illistim and Wehnimer's Landing!!! (By popular demand)
		ADDED SAFETY CHECK FOR BLACK ORA, PLEASE LET ME KNOW IF IT WORKS FOR YOU.
		I can safely see all traps in the game.  That said, I don't care what kind of boxes you drop.
			DISCLAIMER:  If boxes appear to be waiting to be picked for a long time, I can't get them, probably because of a trap
						I tend to let the Shattered channel know when I'm sitting at 0 boxes waiting to be picked.
						upickbot4 cleanup + townsmith = your friend in those cases.
		Added recovery method.  Should regenerate your box array if you log out and back in.
		Added cleanup feature.  Run script with CLEANUP as a command line variable and script will gather all your boxes up.
		Added reset feature, which resets the script's knowledge of your containers.  Use in case script is dropping loot.

	USAGE:  		Run this script before normal selling script, it'll do the rest.  LET THE SCRIPT DO THE WORK.
			ALTERNATE USAGES:   ;upickbot4 cleanup       ;upickbot4 reset      ;upickbot4 clear

	AIM @ Lord Gibreficul if there's any glaring issues.

	###

	Unofficial edit by Tillmen to open boxes that are hidden in "a bunch of other stuff" in the room description.
	author: Gibreficul
	tags: shattered, pickbot, auto, utility

=end
find_nearest = proc { |target_list|
#### SNATCHED, Thanks Tillmen.
	start_room = Room.current
	if target_list.include?(start_room.id)
		nearest_id = start_room.id
	else
		previous, shortest_distances = Map.dijkstra(start_room.id, target_list)
		nearest_id = least_time = nil
		for target in target_list
			est_time = shortest_distances[target]
			if !est_time.nil? and (least_time.nil? or least_time > est_time)
				nearest_id = target
				least_time = est_time
			end
		end
	end
	nearest_id
}
# 	******		USER VARIABLES	*******
#
	$no_loot_here = ['harness','scabbard','sheath','tube', 'quiver', 'bandolier']		#	Add container nouns to prevent script from placing items within.
	$mygroup = [Char.name, "Groupie1","Groupie2", "Groupie3"]				#	This is the list of disks you'll check for boxes.
	if XMLData.game =~ /GSF/i										#	SHATTERED SETTINGS
		roomholders = ['Geno', 'Crosby', 'Staypuff', 'Sylvester', 'Gusher']				#	Room holders
		smithroom = find_nearest.call([3519, 3668, 228, 188, 2300, 1005, 12537])							#	Room number
		locksmiths = ['Baswab', 'Pickerguy1','Pickerguy2']					#	Locksmith Names
		respond("You will be dropping boxes in #{Room[smithroom].title[0]}\:  #{smithroom}")
	elsif XMLData.game =~ /GSIV/i										#	PRIME SETTINGS
		smithroom = 12506
		locksmiths = ['Gibreficul', 'Locksmith1', 'Locksmith2']
		roomholders = ['Kristianna', 'Byzkit']
	elsif XMLData.game =~ /GSPlat/i									#	PLATINUM-SEE ABOVE SETTINGS
		smithroom = 228
		locksmiths = ['Locksmith1', 'Locksmith2']
	end															#	YOU CAN ADJUST THE FOLLOWING ARRAYS
$ignorenouns = ["cloth", "spoon", "^tea?","pastry","cookie","tart","candy","chocolate","^ale$","special", "doughnut","muffin","beer","rum","special","dragondraught","vodka","water","punch", "bark","iron","brick","horseshoe"]
$ignorenames = [ "scratched ring", "bent anklet", "bent bracelet", "bent coin", "bent ring", "bent earring", "bent medallion",'bent nail', "moldy bone","chipped brick",  "cookie", "corroded anklet", "corroded bracelet", "corroded coin","corroded earring", "corroded medallion","corroded ring", "cupcake", "dented anklet", "dented bracelet", "dented coin", "dented earring", "dented medallion", "doorknob", "doughnut", "rusty nail","bent nail","tarnished nail","corroded nail","fork", "horseshoe", "piece of iron", "leg$",  "polished anklet", "polished bracelet", "polished coin", "polished earring", "polished medallion", "rusty anklet", "rusty bracelet", "rusty coin", "rusty earring", "rusty medallion", "scratched anklet", "scratched bracelet", "scratched coin", "scratched earring", "scratched medallion", "shiny anklet", "shiny bracelet", "shiny coin", "shiny earring", "shiny medallion", "smooth stone", "steel spring", "tarnished anklet", "tarnished bracelet", "tarnished coin", "tarnished earring", "tarnished medallion",  "dented nail","scratched nail","rusty nail","polished nail","shiny nail", ]
$ignoreherbs = ["white flask", "ochre\-colored fungus", "acantha leaf", "aloeas stem", "ambrominas leaf", "basal moss", "cactacae spine", "calamia fruit", "ephlox moss", "haphip root", "pothinir grass", "sovyn clove", "torban leaf", "wolifrew lichen", "woth flower", "Aged Schooner ale", "Agrak's Amber ale", "Bearded Ladies' ale", "Bloody Krolvin ale", "Captn' Pegleg's ale", "Dacra's Dream ale", "Dark Swampwater ale", "Dead Man's Pale ale", "Dragon's Blood porter", "Gert's Homemade ale", "Golden Goose ale", "Kenar's Dropjaw ale", "Lost Dogwater ale", "Mad Mutt Frothy ale", "Mama Dwarf's ale", "Miner's Muddy ale", "Olak's Ol'style ale", "Orc's Head ale", "Reaper's Red ale", "Semak's Smooth ale", "Volcano Vision ale", "Wort's Winter ale", "bolmara potion", "brostheras potion", "bur\-clover potion", "rose\-marrow potion", "talneo potion", "wingstem potion", "Dabbings Family special tart", "Leaftoe's lichen tart", "Ma Leaftoe's spiced torban tart", "earthworm potion", "elk fat gel", "elk horn potion", "flower\-shaped tart", "frog's bone porridge", "iceberry tart", "musk ox tart", "polar bear fat soup", "ram's bladder", "rock lizard potion", "rock ptarmigan feathers", "snowflake elixir", "sparrowhawk pie", "starfish potion", "tundra grass", "walrus blubber", "tincture of acantha", "tincture of aloeas", "tincture of ambrominas", "tincture of basal", "tincture of bolmara", "tincture of brostheras", "tincture of bur\-clover", "tincture of cactacae", "tincture of calamia", "tincture of ephlox", "tincture of haphip", "tincture of pothinir", "tincture of rose\-marrow", "tincture of sovyn", "tincture of talneo", "tincture of torban", "tincture of wingstem", "tincture of wolifrew", "tincture of woth", "chunky black ale", "bubbling brown ale", "thick foggy ale", "crushed cavegrass tea", "roasted ratweed tea", "brown weedroot ale", "dark frothing ale", "dirty crevice brew", "dirty rat fur potion", "dull crimson ale", "glowing mold tea", "grainy black potion", "green mushroom potion", "grey mushroom potion", "milky white potion", "rusty red ale", "spotted toadstool ale", "stalactite brew", "stalagmite brew", "sticky lichen tea", "stone soot brew"]
###################################################################
####		END USER VARIABLES		END USER VARIABLES		END USER VARIABLES
###################################################################
def msg(text)
	### METHOD PROVIDED BY Casis, thank you.
	stringArray = Array.new
	stringArray = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
	if $fake_stormfront
		preface_text = "\034GSL\r\n "
		end_text = "\034GSM\r\n "
	else
		preface_text = "<pushBold\/>"
		end_text = "<popBold\/>"
	end
	stringArray.each { |line|
		puts "#{preface_text}#{line.gsub('\n','')}#{end_text}"
	}
end
def rhand(what = nil)
	return nil if GameObj.right_hand.name =~ /Empty/
	if what.to_i != 0
		return nil unless GameObj.right_hand.id.to_i == what.to_i
	elsif what =~ /\s/
		return(nil) unless GameObj.right_hand.name =~ /#{what}/i
	elsif what =~ /\w+/i
		return nil unless GameObj.right_hand.noun =~ /#{what}/i
	end
	return(GameObj.right_hand)
end
def mymove(room = false)
	return if Room.current.id == room.to_i
	fput "out" if checkroom =~ /table/i && Room.current.id == 4
	if room
		#if hiding?
		#	start_script("go2",['typeahead=0', room, '_disable_confirm_'])
		#	wait_while{running?("go2")}
		#else
			start_script("go2",[room, '_disable_confirm_'])
			wait_while{running?("go2")}
		#end
	else
		return
	end
end
def find_all_boxes
	$myboxess.push(GameObj.right_hand.id.to_i) if GameObj.right_hand.noun =~ /^(strong)?box|coffer|chest|trunk/
	$myboxess.push(GameObj.left_hand.id.to_i) if GameObj.left_hand.noun =~ /^(strong)?box|coffer|chest|trunk/
	$container.flatten.each{|cont|
		GameObj.inv.find{|sack| sack.id.to_i == cont.to_i}.contents.each{|mybox|
			$myboxess.push(mybox.id.to_i) if mybox.noun =~ /^(strong)?box|coffer|chest|trunk/
		}
	}
	unless GameObj.loot.find{|disk| disk.name =~ /#{Char.name}/ && disk.noun =~ /coffin|disk/}
		msg "Waiting for your disk"
		matchtimeout(6, "Your (disk|coffin) arrives")
	end
	GameObj.loot.each{|disk|
		if disk.noun =~ /disk|coffin/i && disk.name =~ /#{Char.name}|#{$mygroup.join('|')}/i
			fput "look in ##{disk.id}"
			matchtimeout(1, "In the|nothing in")
			box = disk.contents.find_all{|boxes| boxes.noun =~ /^(strong)?box|coffer|chest|trunk/i}
			box.each{|thing|
				$myboxess.push(thing.id.to_i)
			}
		end
	}
end
def drop_boxes
	if GameObj.loot.find{|disk| disk.noun =~ /disk|coffin/ && disk.name =~ /#{Char.name}/}
	else
		matchtimeout(6, "following you")
	end
	sleep 3
	$myboxess.each{|thing|
		if Char.prof == "Sorcerer"
			if GameObj.right_hand.id.to_i == thing
				fput "drop ##{thing}"
				if GameObj.right_hand.name == "Empty"
					$dropped_boxes.push(thing) unless $dropped_boxes.include?(thing)
				else
					box = GameObj.right_hand.id.to_i
					fput "_drag ##{box} drop"
					$dropped_boxes.push(box) unless $dropped_boxes.include?(box)
				end
			elsif GameObj.left_hand.id.to_i == thing
				fput "drop ##{thing}"
				if GameObj.left_hand.name == "Empty"
					$dropped_boxes.push(thing) unless $dropped_boxes.include?(thing)
				else
					box = GameObj.left_hand.id.to_i
					fput "_drag ##{box} drop"
					$dropped_boxes.push(box) unless $dropped_boxes.include?(box)
				end
			elsif GameObj.right_hand.name == "Empty"
				fput "_drag ##{thing} right"
				fput "_drag ##{thing} drop"
				if GameObj.right_hand.name == "Empty"
					$dropped_boxes.push(thing) unless $dropped_boxes.include?(thing)
				else
					box = GameObj.right_hand.id.to_i
					fput "_drag ##{box} drop"
					$dropped_boxes.push(box) unless $dropped_boxes.include?(box)
				end
			elsif GameObj.left_hand.name == "Empty"
				fput "_drag ##{thing} left"
				fput "_drag ##{thing} drop"
				if GameObj.left_hand.name == "Empty"
					$dropped_boxes.push(thing) unless $dropped_boxes.include?(thing)
				else
					box = GameObj.left_hand.id.to_i
					fput "_drag ##{box} drop"
					$dropped_boxes.push(box) unless $dropped_boxes.include?(box)
				end
			end
		else
			fput "_drag ##{thing} drop"
			$dropped_boxes.push(thing) unless $dropped_boxes.include?(thing)
		end
	}
end
def open_boxes
	$open_boxes = []
	[$lost_boxes, $dropped_boxes, $missing_boxes].flatten.each{|box|
		if GameObj.loot.find{|newbox| newbox.id.to_i == box.to_i}
			$missing_boxes.delete(box) if $missing_boxes.include?(box)
			if $lost_boxes.include?(box)
				if $dropped_boxes.include?(box)
				else
					echo "LOST BOX, NOT IN DROPPED BOXES, ADDING, DELETING."
					$lost_boxes.delete(box)
					$dropped_boxes.push(box)
				end
			end
			fput "open ##{box}"
			result = matchtimeout(2, "open|lock|What were")
			if result =~ /open/i
				$open_boxes.push(box)
				Spell[506].cast if Spell[506].known? && Spell[506].affordable? && !Spell[506].active?
				Spell[1035].cast if Spell[1035].known? && Spell[1035].affordable? && !Spell[1035].active?
			end
		elsif GameObj.loot.length > 90
			result = dothistimeout "open ##{box}", 3, /^You open|^It appears to be locked|^That is already open|^What were you referring to/
			if result =~ /^You open|^That is already open/
				$open_boxes.push(box)
				Spell[506].cast if Spell[506].known? && Spell[506].affordable? && !Spell[506].active?
				Spell[1035].cast if Spell[1035].known? && Spell[1035].affordable? && !Spell[1035].active?
			elsif result =~ /^What were you referring to/
				unless $lost_boxes.include(box)
					$missing_boxes.push(box) unless $missing_boxes.include?(box)
				end
			end
		else
			unless $lost_boxes.include(box)
				$missing_boxes.push(box) unless $missing_boxes.include?(box)
			end
		end
	}
end
def gather_my_loot
	empty_hands
	$open_boxes.each{|box|
		unless GameObj.right_hand.id.to_i == box.to_i
			fput "_drag ##{box} right"
			x = matchtimeout(1, "pick up|additional|what")
			next if x =~ /what/i
			waitrt?
			unless GameObj.right_hand.id.to_i == box.to_i
				room = Room.current.id
				mymove('bank')
				fput "depo all"
				until Room.current.id == room.to_i
					mymove(room)
				end
				redo if GameObj.loot.find{|thing| thing.id == box.id}
				next unless GameObj.loot.find{|thing| thing.id == box.id}
			end
		end
		fput "get coins from ##{GameObj.right_hand.id}"
		fput "look in ##{GameObj.right_hand.id}"
		x = matchtimeout(1, "In the|nothing in|closed")
		waitrt?
		if x =~ /nothing/
			trash_this_box(box)
			next
		elsif x =~ /close/i
			fput "drop right"
			next
		end
		runs = 0
		2.times{
		fput "look in ##{GameObj.right_hand.id}"
		next if GameObj.right_hand.contents.empty?
		GameObj.right_hand.contents.each{|newloot|
			if newloot.noun =~ /#{$ignorenouns.join('|')}/ || newloot.name =~ /#{[$ignoreherbs, $ignorenames].flatten.join('|')}/
				if Room.current.id == 3428
					fput "_drag ##{newloot.id} left"
					fput "put ##{newloot.id} in ##{GameObj.room_desc.find{|trash| trash.noun =~ /woodstove/}.id}"
				elsif Room.current.id == 188
					fput "_drag ##{newloot.id} left"
					fput "put ##{newloot.id} in barrel"
				elsif Room.current.id == 228
					mymove(229)
					fput "_drag ##{newloot.id} left"
					fput "put ##{newloot.id} in barrel"
					mymove(228)
				elsif GameObj.loot.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}
					fput "_drag ##{newloot.id} ##{GameObj.loot.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				elsif GameObj.room_desc.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}
					fput "get ##{newloot.id}"
					fput "put ##{newloot.id} in ##{GameObj.room_desc.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				#	fput "_drag ##{newloot.id} ##{GameObj.room_desc.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				elsif Room.current.id == 12537 || Room.current.id == 14260
					fput "_drag ##{newloot.id} left"
					fput "put ##{newloot.id} in barrel"
				elsif Room.current.id == 10861 && !GameObj.loot.find{|thing| thing.noun == 'barrel'}
					fput "_drag ##{newloot.id} left"
					fput "put ##{newloot.id} in barrel"
				elsif Room.current.id == 2300
					move "east"
					fput "_drag ##{newloot.id} left"
					fput "put ##{newloot.id} in barrel"
					move 'west'
				else
					fput "_drag ##{newloot.id} drop"
					put "say dropping, 219, no trash can."
				end
			elsif newloot.noun =~ /coins/i && newloot.name =~ /silver/i
				while GameObj.right_hand.contents.find{|coin| coin.noun =~ /coins/}
					fput "get coins from ##{GameObj.right_hand.id}"
					waitrt?
					fput "look in ##{GameObj.right_hand.id}"
					echo "DEBUG LINE 204:  loop end"
				end
			elsif newloot.name =~ /black ora|urglaes|doomstone|oblivion quartz/
				msg("STICKY CURSED THING FOUND, WE WILL TRY TO MANAGE THIS PROPERLY.")
				if Spell[315].known?
					fput "_drag ##{newloot.id} left"
					wait_until{mana?(15)}
					fput "prep 315"
					fput "cast ##{GameObj.left_hand.id}"
				elsif Spell[309].known?
					fput "_drag ##{newloot.id} left"
					wait_until{mana?(9)}
					fput "prep 309"
					fput "cast ##{GameObj.left_hand.id}"
#				elsif Spell[704].known?
#					fput "_drag ##{newloot.id} left"
#					wait_until{mana?(4)}
#					fput "prep 704"
#					fput "cast ##{GameObj.left_hand.id}"
				else
					$cursed_item_in_box = true
				end
				$container.each{|id|
					break if $cursed_item_in_box
					next if GameObj.inv.find{|thing| thing.id.to_i == id.to_i && $no_loot_here.include?(thing.noun)}
					time = Time.now
					wait_until{GameObj.left_hand.name !~ /Empty/i || Time.now > (time + 3)}
					redo if GameObj.left_hand.name =~ /Empty/i
					fput "_drag ##{GameObj.left_hand.id} ##{id}"
					waitrt?
					sleep 0.5
					break if GameObj.left_hand.name =~ /Empty/i
				}
				if GameObj.left_hand.name !~ /empty/i
					fput "glance"
					 if GameObj.left_hand.name !~ /empty/i
					 	fput "stow left"
					 	if GameObj.left_hand.name !~ /empty/i
							fput "drop left"
							fput "SAY I need an uncurse, I think."
							put "say Dropping, 280"
						end
					end
				end
			else
				$container.each{|id|
					next if GameObj.inv.find{|thing| thing.id.to_i == id.to_i && $no_loot_here.include?(thing.noun)}
					fput "_drag ##{newloot.id} left" unless GameObj.left_hand.id == newloot.id
					time = Time.now
					wait_until{GameObj.left_hand.name !~ /Empty/i || Time.now > (time + 3)}
					redo if GameObj.left_hand.name =~ /Empty/i
					if GameObj.pcs.find{|pc| pc.noun == 'Alfred'} && newloot.name =~ /uncut (diamond|emerald|ruby)/
						fput "give ##{newloot.id} to ##{GameObj.pcs.find{|pc| pc.noun == 'Alfred'}.id}"
						matchtimeout(30, "has accepted")
						break if GameObj.left_hand.name =~ /Empty/i
					end
					fput "_drag ##{newloot.id} ##{id}" if checkleft
					waitrt?
					sleep 0.5
					break if GameObj.left_hand.name =~ /Empty/i
				}
				if GameObj.left_hand.name !~ /empty/i
					fput "glance"
					 if GameObj.left_hand.name !~ /empty/i
					 	fput "stow left"
					 	if GameObj.left_hand.name !~ /empty/i
							fput "drop left"
							put "say Dropping, 246"
							sleep 3
						end
					end
				end
			end
		}}
		if $cursed_item_in_box
			$container.each{|cont|
				fput "empty ##{GameObj.right_hand.id} in ##{cont}"
				x = matchtimeout(3, "you can't quite get", "everything falls","nothing comes", "but you fill up", "nothing will fit")
				waitrt?
				if x =~ /everything falls|nothing comes/
					msg("Sticky cursed item emptied into #{GameObj.inv.find{|stash| stash.id == cont}.name}")
					break
				end
			}
		end
		unless GameObj.right_hand.contents.empty?
			fput "look in ##{GameObj.right_hand.id}"
			runs += 1
			break if runs > 3
		end
		waitrt?
		unless GameObj.right_hand.contents.empty?
			fput "look in ##{GameObj.right_hand.id}"
			GameObj.right_hand.contents.each{|item|
				next if item.name =~ /black ora|urglaes|doomstone|oblivion quartz/i
				msg "DROPPING #{item.name}"
				fput "_drag ##{item.id} drop"
				put "say Dropping, 266"
			}
		end
		unless GameObj.right_hand.contents.empty?
			fput "look in ##{box}"
			fput "_drag ##{box} drop"
		end
		trash_this_box(box)
	}
	fill_hands
end
def upbcleanup(goroom)
	open_boxes
	gather_my_loot
	unless [$lost_boxes, $dropped_boxes, $missing_boxes].flatten.empty?
		[$lost_boxes, $dropped_boxes, $missing_boxes].flatten.each{|item|
			next if item == nil
			$stash = false
			$container.each{|sac|
				break if $stash
				fput "_drag ##{item} ##{sac}"
				sleep 1
				waitrt?
				if GameObj.right_hand.id.to_i == item || GameObj.left_hand.id.to_i == item
				elsif GameObj.loot.find{|thing| thing.id == item}
				else
					$dropped_boxes.delete(item)
					$stash = true
				end
			}
			fput "drop ##{item}"
		}
	end
	$lost_boxes ||= []
	if GameObj.loot.length > 90
		msg("Script will not clear dropped_boxes on cleanup")
	else
		$dropped_boxes.each{|box|
			if GameObj.loot.find{|thing| thing.id == box.id}
			else
				$lost_boxes.push(box) unless $lost_boxes.include?(box)
				$dropped_boxes.delete(box)
				$missing_boxes.delete(box)
			end
		}
	end
	msg "******************************************************************************"
	msg "*	SCRIPT GATHERED BOXES AND IS EXITING"
	unless $dropped_boxes.empty?
		msg "*	Script has left #{$dropped_boxes.length} boxes"
	end
	if $lost_boxes.length > 0
		msg "*	Script has considered #{$lost_boxes.length} boxes lost to the cause."
	end
	msg "******************************************************************************"
	unless Room.current.id.to_i == goroom.to_i
		mymove(goroom)
	end
	exit
end
def trash_this_box(box)
	return if GameObj.right_hand.name =~ /Empty/i
	$emptied.push(box) unless $emptied.include?(box)
	$dropped_boxes.delete(box)
	if checkroom =~ /table/i
		fput "drop ##{box}"
		fput "clean table"
		#$open_boxes.each{|box| $emptied.push(box) unless $emptied.include?(box)}
	else
		if Room.current.id == 12537 || Room.current.id == 14260
			while rhand
				fput "put ##{box} in barrel"
				sleep 1
			end
		elsif Room.current.id == 13500
			while rhand
				fput "put ##{box} in waste"
				sleep 1
			end
		elsif Room.current.id == 188
			while rhand
				fput "put ##{box} in barrel"
				sleep 1
			end
		elsif Room.current.id == 228
			mymove(229)
			while rhand
				fput "put ##{box} in barrel"
				sleep 1
			end
			mymove(228)
		elsif Room.current.id == 13920
			mymove(13936)
			while rhand
				fput "_drag ##{box} ##{GameObj.loot.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				sleep 1
			end
			mymove(13920)
		elsif Room.current.id == 12486
			mymove(12482)
			while rhand
				fput "put ##{box} in ##{GameObj.loot.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				sleep 1
			end
			mymove(12486)
		elsif GameObj.loot.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}
			while rhand
				fput "put ##{box} in ##{GameObj.loot.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				sleep 1
			end
		elsif GameObj.room_desc.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}
			while rhand
				fput "put ##{box} in ##{GameObj.room_desc.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				sleep 1
			end
		elsif Room.current.id == 3428
			while rhand
				fput "put ##{box} in woodstove"
				sleep 1
			end
		elsif Room.current.id == 12506
			mymove(1844)
			while rhand
				fput "_drag ##{box} ##{GameObj.room_desc.find{|trash| trash.noun =~ /barrel|bin|waste|tube|recep|well|fountain/}.id}"
				sleep 1
			end
			mymove 12506
		elsif Room.current.id == 10861 && !GameObj.loot.find{|thing| thing.noun == 'barrel'}
			while rhand
				fput "put ##{box} in barrel"
				sleep 1
			end
		elsif Room.current.id == 2300
			move 'e'
			while rhand
				fput "put ##{box} in barrel"
				sleep 1
			end
			move 'w'
		else
			room = Room.current.id
			if checkpaths.empty?
				mymove(Room.current.wayto.keys[0])
			else
				walk
			end
			fput "_drag ##{box} drop"
			start_script('go2', [room, '_disable_confirm_'])
			wait_while{running? 'go2'}
		end
	end
end
$cursed_item_in_box = false
$emptied = [] unless $emptied
$lost_boxes ||= []
$myboxess = []
$dropped_boxes = [] unless $dropped_boxes
$box_opened = []
$trash_boxes = []
$missing_boxes = [] unless $missing_boxes
CharSettings['dropped'] ||= Array.new
if script.vars[1] =~ /clear/i
	msg "upickbot4 is set to CLEAR your dropped box arrays."
	msg ".......... deleting #{$dropped_boxes.length} dropped boxes and #{$missing_boxes.length} missing boxes."
	$dropped_boxes = []
	$missing_boxes = []
	CharSettings['dropped'] = []
	msg ".......... arrays cleared."
	exit
end
if script.vars[1] =~ /reset/i
	msg("upickbot4 is resetting your container IDs")
	$container = []
	$i_have_run = false
	sleep 2
	msg("......   upickbot4 has cleared your container variables.")
	exit
end
$container = [] unless $container
contruns = 0
until !$container.empty?
	break if contruns > 9
	msg "upickbot4 grabbing container IDs"
	done = false
	action = proc{ |grab_this|
		if grab_this =~ /You are wearing/i
			$container = grab_this.scan(/a exist\=\"([\d]+)[^\.|,]/).flatten
			grab_this;nil
		elsif grab_this =~ /\<prompt time\=/
			grab_this
			done = true;nil
		end
	}
	waitrt?
	DownstreamHook.add('inv_cont', action)
	status_tags
	$_SERVER_.puts "inv cont"
	t=Time.now
	wait_until {done or t+3<Time.now}
	DownstreamHook.remove('inv_cont')
	status_tags
	contruns += 1
end
unless $i_have_run
	$i_have_run = true
	$container.each{|cont|;fput "look in ##{cont}"}
	msg("That was to make sure all of your items are loaded into item tracking")
end
crash_recovery = CharSettings['dropped']
if crash_recovery.empty? && $dropped_boxes.empty?
	#NO BOXES IN EITHER ARRAY
elsif crash_recovery == $dropped_boxes
	# ALL SEEMS KOSHER IN PICKBOT TOWN
elsif crash_recovery.empty? && !$dropped_boxes.empty?
	#msg("First run with settings, this is to be expected")
else
	msg("Script is adding boxes from settings into your dropped boxes list.")
	add_count = 0
	crash_recovery.each{|box|
		unless $dropped_boxes.include?(box)
			$dropped_boxes.push(box)
			add_count += 1
		end
	}
	msg("Script has added #{add_count} boxes to your dropped boxes array.") unless add_count == 0
	$add_count ||= 0
	$add_count += add_count
end
$dropped_boxes.each{|box|;$dropped_boxes.delete(box) if box == nil}
$missing_boxes.each{|box|;$missing_boxes.delete(box) if box == nil}
before_dying{CharSettings['dropped'] = $dropped_boxes}
room = Room.current.id
find_all_boxes
if $myboxess.empty? && $dropped_boxes.empty? && $missing_boxes.empty? && $lost_boxes.empty?
#	gsell if Char.name =~ /Crosby|Geno|Raylewis/i
#	mymove "bank"
#	put "depo all"
	mymove(room)
	msg "******************************************************************************"
	msg "	You don't seem to have any boxes that need attention, no boxes found, none dropped."
	msg "******************************************************************************"
	msg ""
	exit
end

unless GameObj.pcs.find{|pc| pc.noun =~ /#{locksmiths.join('|')}/i} || Room.current.id.to_i == smithroom.to_i
	msg "use_pickbot is moving you to the locksmithing room"
	attempts = 0
	until Room.current.id == smithroom || attempts >= 3
		mymove(smithroom)
		attempts += 1
	end
	if attempts >= 3 && !Room.current.id == smithroom
		mymove room
		msg("ERROR, UNABLE TO GET TO PICK ROOM:  EXITING")
		exit
	end
end
#	silence_me
if !GameObj.pcs.find{|pc| pc.noun =~ /#{[locksmiths, roomholders].flatten.join('|')}/i} #|| script.vars[1] =~ /cleanup/i
	msg "******************************************************************************"
	msg "Script doesn't see your locksmith at the spot, but this version doesn't care!"
	msg "******************************************************************************"
	#upbcleanup(room)
elsif script.vars[1] && script.vars[1] =~ /cleanu?p?/i
	msg "******************************************************************************"
	msg "Script is working in cleanup mode."
	msg "******************************************************************************"
	upbcleanup(room)
end
#fput "leave" if group?
#fput "disband" if !group?
Spell[205].cast if Spell[205].known? && Spell[205].affordable?
drop_boxes
open_boxes
gather_my_loot
if Char.name =~ /Crosby|Geno/
#	msg "Going to gsell"
#	gsell
end
mymove(room)
$dropped_boxes.each{|box|;$dropped_boxes.delete(box) if box == nil}
$missing_boxes.each{|box|;$missing_boxes.delete(box) if box == nil}
msg "*"
msg "*		Script found #{$myboxess.length} new boxes this run"
msg "*		Script opened and looted #{$open_boxes.length} boxes."
msg "*		You have had #{$emptied.length} boxes total successfully unlocked and emptied"
msg "*		There are #{$dropped_boxes.length} boxes waiting to be opened"
msg "*		There are #{$missing_boxes.length} boxes missing or being worked on." unless $missing_boxes.empty?
msg "*		The script has considered #{$lost_boxes.length} boxes lost to fuckups." unless $lost_boxes.empty?
msg "*		Script exiting, and YOU are moving on"
msg "*"
