=begin
	This script lets you keep track of 
	your post-cap goals. Set up a list 
	and it shows you exp to completion
	and level at completion. Need to 
	have the script whatlevel running.
	If the script is not giving you 
	correct numbers of TPs, take off 
	your enhancives and do skill full.
	
	If you want to know when there's
	no longer any point in getting exp
	because all skill goals are maxed
	out, run 
	       ;postcapgoal max
	If you need help using it, run
	       ;postcapgoal help
	
	Script is still sort of in beta, so
	let me (Yollia) know if you have any
	problems.
=end


$trainedPTPs=0
$trainedMTPs=0
CharSettings.load

$stat = CharSettings['startstat']



if !script.vars[1].nil? and script.vars[1].downcase.eql?('clear')
	CharSettings['startstat']=nil
	CharSettings['data']=nil
	CharSettings.save
	exit
end

if $stat.nil?
	$stat=Array.new(10)
	inp=Array.new(10)
	echo "Reading starting stats..."
	fput "info start"
	
	j=0
	
	while j<10
		line=get;
		
		val=line.split[-1].to_i
		if val!=0
			j=j+1; 
			inp[j-1]=val
		end
	end
	$stat[0]=inp[1].to_i
	$stat[1]=inp[2].to_i
	$stat[2]=inp[4].to_i
	$stat[3]=inp[6].to_i
	$stat[4]=inp[7].to_i
	$stat[5]=inp[0].to_i
	$stat[6]=inp[3].to_i
	$stat[7]=inp[9].to_i
	$stat[8]=inp[8].to_i
	$stat[9]=inp[5].to_i
	CharSettings['startstat']=$stat
	CharSettings.save
end

maxskill =   [   0,                 1,          2,            3,                   4,              5,                   6,               7,                8,                9,            10,       11,       12,                                            14,             15,        16,               17,              18,            19,        20,   21,     22,      23,                                      27,                                       30,                                 32,                                                                                   37,        38,              39,                40,                   41,          42,         43,         44,         45,          46]

$skillnames = [ 'twoweaponcombat', 'armoruse', 'shielduse', 'combatmaneuvers', 'edgedweapons', 'bluntweapons', 'twohandedweapons', 'rangedweapons', 'thrownweapons', 'polearmweapons', 'brawling', 'ambush', 'multiopponentcombat', 'combatleadership', 'physicalfitness', 'dodging', 'arcanesymbols', 'magicitemuse', 'spellaiming', 'harnesspower', 'emc', 'mmc', 'smc', 'elair', 'elearth', 'elfire', 'elwater', 'slblessings', 'slreligion', 'slsummoning', 'sldemonology', 'slnecromancy', 'mldivination', 'mlmanipulation', 'mltelepathy', 'mltransference', 'mltransformation', 'survival', 'disarmingtraps', 'pickinglocks', 'stalkingandhiding', 'perception', 'climbing', 'swimming', 'firstaid', 'trading', 'pickpocketing' ]
$skillcosts = [[[2,2,2],           [2,0,3],   [2,0,3],      [4,3,2],           [2,1,2],        [2,1,2],        [3,1,2],            [2,1,2],         [2,1,2],         [3,1,2],         [2,1,2],    [3,4,2],  [4,3,2],                [0,0,0],              [2,0,3],          [4,2,3],    [0,7,1],         [0,8,1],       [5,25,1],     [0,10,1],     [0,10,1],[0,15,1],[0,10,1],[0,15,1],[0,15,1],[0,15,1],[0,15,1],   [0,15,1],     [0,15,1],     [0,15,1],       [0,30,1],       [0,30,1],      [0,40,1],         [0,40,1],       [0,40,1],       [0,40,1],        [0,40,1],            [1,3,2],    [2,4,2],          [2,3,2],        [3,2,2],             [0,3,2],     [3,0,2],     [2,0,2],   [1,2,2],     [0,4,2],   [2,3,1]], #Warrior
			  [[2,2,2],            [5,0,2],   [4,0,2],      [4,4,2],           [2,1,2],        [3,1,2],        [6,2,2],            [3,1,2],         [2,1,2],         [7,2,2],         [3,1,2],    [2,1,2],  [10,3,1],               [0,0,0],              [3,0,2],          [2,1,3],    [0,7,1],         [0,8,1],       [4,22,1],     [0,9,1],      [0,10,1],[0,15,1],[0,15,1],[0,15,1],[0,15,1],[0,15,1],[0,15,1],   [0,15,1],     [0,15,1],     [0,15,1],       [0,30,1],       [0,30,1],      [0,40,1],         [0,40,1],       [0,40,1],       [0,40,1],        [0,40,1],            [2,2,2],    [1,1,3],          [1,1,3],        [1,1,3],             [0,1,3],     [1,0,2],     [2,0,2],   [1,2,2],     [0,3,2],   [1,0,2]], #Rogue
			  [[12,12,1],          [14,0,1],  [13,0,1],     [12,8,1],          [6,1,1],        [6,1,1],        [14,3,1],           [14,3,1],        [8,2,1],         [14,3,1],        [10,2,1],   [15,10,1],[15,10,1],              [0,0,0],              [8,0,1],          [20,20,1],  [0,1,2],         [0,1,2],       [2,1,2],      [0,4,3],      [0,4,2], [0,15,1],[0,15,1],[0,6,2], [0,6,2], [0,6,2], [0,6,2],    [0,20,1],     [0,20,1],     [0,20,1],       [0,10,1],       [0,10,1],      [0,20,1],         [0,20,1],       [0,20,1],       [0,20,1],        [0,20,1],            [3,2,1],    [2,6,1],          [2,4,2],        [5,4,1],             [0,3,2],     [4,0,1],     [3,0,1],   [2,1,2],     [0,3,2],   [3,3,1]], #Wizard
			  [[9,9,1],            [8,0,1],   [13,0,1],     [10,6,1],          [4,2,1],        [4,2,1],        [10,3,1],           [9,3,1],         [9,3,1],         [11,3,1],        [6,1,1],    [12,12,1],[15,8,1],               [0,0,0],              [7,0,1],          [20,20,1],  [0,2,2],         [0,2,2],       [3,2,2],      [0,4,3],      [0,12,1],[0,12,1],[0,3,3], [0,20,1],[0,20,1],[0,20,1],[0,20,1],   [0,6,2],      [0,6,2],      [0,6,2],        [0,10,1],       [0,10,1],      [0,20,1],         [0,20,1],       [0,20,1],       [0,20,1],        [0,20,1],            [3,2,2],    [2,6,1],          [2,4,2],        [5,4,1],             [0,3,2],     [4,0,1],     [3,0,1],   [1,1,2],     [0,3,2],   [3,3,1]], #Cleric
			  [[12,12,1],          [15,0,1],  [13,0,1],     [12,8,1],          [6,2,1],        [6,2,1],        [13,3,1],           [14,3,1],        [9,3,1],         [14,3,1],        [10,2,1],   [15,15,1],[15,10,1],              [0,0,0],              [2,0,3],          [20,20,1],  [0,2,2],         [0,2,2],       [3,1,2],      [0,4,3],      [0,12,1],[0,3,2], [0,3,2], [0,20,1],[0,20,1],[0,20,1],[0,20,1],   [0,6,2],      [0,6,2],      [0,6,2],        [0,12,1],       [0,12,1],      [0,6,2],          [0,6,2],        [0,6,2],        [0,6,2],         [0,6,2],             [3,2,2],    [2,6,1],          [2,4,2],        [5,4,1],             [0,3,2],     [4,0,1],     [3,0,1],   [1,0,3],     [0,3,2],   [3,3,1]], #Empath
			  [[12,12,1],          [15,0,1],  [13,0,1],     [12,8,1],          [6,2,1],        [6,2,1],        [14,3,1],           [14,3,1],        [9,3,1],         [14,3,1],        [10,2,1],   [15,14,1],[15,10,1],              [0,0,0],              [8,0,1],          [20,20,1],  [0,2,2],         [0,2,2],       [3,1,2],      [0,4,3],      [0,3,2], [0,3,1], [0,12,2],[0,7,2], [0,7,2], [0,7,2], [0,7,2],    [0,7,2],      [0,7,2],      [0,7,2],        [0,6,2],        [0,6,2],       [0,20,1],         [0,20,1],       [0,20,1],       [0,20,1],        [0,20,1],            [3,2,2],    [2,6,1],          [2,4,2],        [5,4,1],             [0,3,2],     [4,0,1],     [3,0,1],   [2,1,2],     [0,3,2],   [3,3,1]], #Sorceror
			  [[3,2,2],            [5,0,2],   [5,0,2],      [6,4,2],           [3,1,2],        [4,1,2],        [6,2,2],            [3,1,2],         [3,1,2],         [7,2,2],         [4,1,2],    [3,3,2],  [10,4,1],               [0,0,0],              [4,0,2],          [7,5,2],    [0,5,1],         [0,5,1],       [5,15,1],     [0,5,2],      [0,15,1],[0,15,1],[0,5,1], [0,20,1],[0,20,1], [0,20,1],[0,20,1],  [0,10,1],     [0,10,1],     [0,10,1],       [0,18,1],       [0,18,1],      [0,20,1],         [0,20,1],       [0,20,1],       [0,20,1],        [0,20,1],            [1,1,2],    [2,4,2],          [2,3,2],        [2,1,2],             [0,2,2],     [2,0,2],     [2,0,2],    [2,1,2],    [0,3,2],   [2,3,1]], #Ranger
			  [[3,2,2],            [5,0,2],   [5,0,2],      [8,4,2],           [3,1,2],        [4,1,2],        [7,2,2],            [4,2,2],         [3,1,2],         [6,1,2],         [3,1,2],    [4,4,1],  [7,3,1],                [0,0,0],              [4,0,2],          [6,6,2],    [0,4,2],         [0,4,2],       [3,10,1],     [0,5,2],      [0,6,1], [0,6,1], [0,12,1],[0,8,1], [0,8,1],  [0,8,1], [0,8,1],   [0,20,1],     [0,20,1],     [0,20,1],       [0,18,1],       [0,18,1],      [0,8,1],          [0,8,1],        [0,8,1],        [0,8,1],         [0,8,1],             [2,2,2],    [2,3,2],          [2,1,2],        [3,2,2],             [0,3,2],     [3,0,2],     [3,0,2],   [2,1,2],     [0,2,2],   [2,1,2]], #Bard
			  [[3,3,2],            [3,0,3],   [3,0,2],      [5,4,2],           [3,1,2],        [3,1,2],        [4,2,2],            [6,2,2],         [5,1,2],         [5,2,2],         [4,1,2],    [4,5,1],  [5,2,1],                [0,0,0],              [3,0,2],          [5,3,2],    [0,5,1],         [0,6,1],       [5,20,1],     [0,5,2],      [0,15,1],[0,15,1],[0,6,1], [0,20,1],[0,20,1], [0,20,1],[0,20,1],  [0,7,2],      [0,7,2],      [0,7,2],        [0,18,1],       [0,18,1],      [0,20,1],         [0,20,1],       [0,20,1],       [0,20,1],        [0,20,1],            [2,2,2],    [2,5,1],          [2,4,2],        [4,4,1],             [0,3,2],     [3,0,2],     [2,0,2],   [1,1,2],     [0,3,2],   [4,4,1]], #Paladin
			  [], #Savant
			  [[2,2,2],            [10,0,2],  [8,0,2],      [5,3,2],           [2,1,2],        [3,1,2],        [5,2,2],            [4,1,2],         [2,1,2],         [6,2,2],         [2,1,2],    [3,2,2],  [5,2,2],                [0,0,0],              [2,0,3],          [1,1,3],    [0,6,1],         [0,7,1],       [5,20,1],     [0,6,1],      [0,15,1],[0,8,1], [0,8,1], [0,40,1],[0,40,1],[0,40,1],[0,40,1],   [0,12,1],     [0,12,1],     [0,12,1],       [0,35,1],       [0,35,1],      [0,12,1],         [0,12,1],       [0,12,1],       [0,12,1],        [0,12,1],            [2,2,2],    [3,4,2],          [3,3,2],        [3,2,2],             [0,2,2],     [1,0,2],     [2,0,2],   [1,2,2],     [0,3,2],   [2,2,2]]]; #Monk
		$spellcost = [120,					 67,  					 8,   					 8,   					 8,   					 8,   					 17,  					 17,  					 27,  					 0,   					 38] ; 
		spellmax  = [1,                      1,                     3,                      3,                      3,                      3,                       2,                      2,                      2 ,                    0,                       1]
		##                  CO DE DI LO IT ST AG IF WI AU
$ProfessionMod =  [ [ 2, 1, 1, 1, 1, 2, 1, 1, 1, 1],   #Warrior
			     [ 1, 2, 1, 1, 1, 1, 2, 1, 1, 1],   #Rogue
			     [ 1, 1, 1, 2, 1, 1, 1, 1, 1, 2],   #Wizard
			     [ 1, 1, 1, 1, 2, 1, 1, 1, 2, 1],   #Cleric
			     [ 1, 1, 1, 1, 1, 1, 1, 2, 2, 1],   #Empath
			     [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2],   #Sorceror
			     [ 1, 2, 1, 1, 2, 1, 1, 1, 1, 1],   #Ranger
			     [ 1, 1, 1, 1, 1, 1, 1, 2, 1, 2],   #Bard
                       [ 1, 1, 1, 1, 1, 2, 1, 1, 2, 1],   #Paladin
                       [ 1, 1, 2, 1, 1, 1, 1, 2, 1, 1],   #Savant
                       [ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1] ]; #Monk

$ProfessionGI = [ [25,25,20,10,20,30,25,20,15,15],   #Warrior
			   [20,25,20,20,25,25,30,15,10,15],   #Rogue
			   [15,25,20,25,25,10,15,20,20,30],   #Wizard
			   [20,10,25,25,25,20,15,20,30,15],   #Cleric
			   [20,15,25,25,20,10,15,25,30,20],   #Empath
			   [15,20,25,25,20,10,15,20,25,30],   #Sorceror
			   [20,30,20,15,25,25,20,10,25,15],   #Ranger
			   [20,25,15,10,15,25,20,30,20,25],   #Bard
                     [25,20,25,10,15,30,20,20,25,15],   #Paladin
                     [15,15,25,25,20,10,20,30,25,20],   #Savant
                     [20,25,30,10,20,25,25,20,15,15] ]; #Monk


$RaceGI =  [ [-2, 5,-2, 0, 0, 0, 5, 0, 0, 0],   #Dark Elf
		     [ 5,-3, 3, 0, 0, 5,-5,-2, 3, 0],   #Dwarf
		    [-5, 5,-5, 0, 0, 0, 3, 3, 0, 5],   #Elf
		    [ 3,-2, 0, 0, 2, 5,-2, 0, 0, 0],   #Giantman
		    [ 0, 2,-2, 0, 0, 2, 2, 2, 0, 0],   #Half-Elf
		    [ 5, 5,-2,-2, 0,-5, 5, 0, 0, 0],   #Halfling
		    [ 2, 0, 0, 0, 2, 2, 0, 0, 0, 0],   #Human
		    [-2, 5,-5, 0, 0,-3, 5, 3, 0, 3],   #Sylvankind
                [ 2, 2, 2, 0, 0,-3, 3, 0, 0, 0],   #Forest Gnome
                [ 0, 3,-3, 5, 5,-5, 3, 0, 0,-2],   #Burghal Gnome
                [ 5, 2, 0,-2, 0, 3, 2,-2, 0,-2],   #Half-Krolvin
                [ 0, 0, 3, 2, 0,-2, 0, 3, 0, 0],   #New Race
                [-2, 3, 2, 0, 2, 0, 3,-2, 0, 0] ]; #Aelotoi			
races = { "Dark Elf" => 0, "Dwarf" => 1, "Elf" => 2, "Giantman" => 3, "Half-Elf" => 4, "Halfling"=> 5,			"Human" => 6, "Sylvankind" => 7, "Forest Gnome" => 8, "Burghal Gnome" => 9, "Half-Krolvin" =>10,			"Aelotoi" => 12 }
			
profs = { "Warrior" => 0, "Rogue" => 1, "Wizard" => 2, "Cleric" => 3, "Empath" => 4, "Sorcerer" => 5, "Ranger" => 6, "Bard" => 7, "Paladin" => 8, "Savant" => 9, "Monk" => 10}

$profession=profs[Stats.prof]
race=races[Stats.race]
$GI=Array.new(10)
#$stat=[77,49,77,70,56,62,30,69,88,82]
$stat.each_index { |i| $GI[i]=($RaceGI[race][i]+$ProfessionGI[$profession][i]).to_i }


def AllStats
	startarr=Array.new(10)
	$allStats=Array.new(101)
    $stat.each_index { |i| startarr[i]=$stat[i] }
	$allStats[0]=startarr
	for level in 1..100
	newarr=Array.new(10)
	$stat.each_index { |i|
		if ($allStats[level-1][i]/$GI[i]==0) or ((level%($allStats[level-1][i]/$GI[i])==0) and $allStats[level-1][i]<100) then
			newarr[i]=$allStats[level-1][i]+1;
		else
			newarr[i]=$allStats[level-1][i];
		end}
		$allStats[level]=newarr;
		#output="";
		#newarr.each_index{|i| output=output+" "+newarr[i].to_s }
		#respond output
	end
end

$remPTP=0
$remMTP=0
$p2M=0
$m2P=0

def traincost(i,r1,r2)
	amount = r2+[0,r2-101].max+2*[0,r2-202].max
	amount = amount - (r1+[0,r1-101].max+2*[0,r1-202].max)
	if i==-1
		return [0,$spellcost[$profession] * amount]
	else
		return [$skillcosts[$profession][i][0] * amount,$skillcosts[$profession][i][1] * amount];
	end
end

$m2P=0
$p2M=0

def trainskillcost(i,r1,r2,rPTP,rMTP)
	arr=traincost(i,r1,r2)
	pTPCost = arr[0]
	mTPCost = arr[1]
	m2PAdd=0
	p2MAdd=0
	
	if pTPCost>rPTP
		remPTPCost=pTPCost-rPTP
		pTPCost=rPTP
				
		m2PAdd+=2*remPTPCost
		mTPCost+=2*remPTPCost
	elsif mTPCost>rMTP
		remMTPCost=mTPCost-rMTP
		mTPCost=rMTP
		
		p2MAdd+=2*remMTPCost
		pTPCost+=2*remMTPCost
	end	
	return [pTPCost,mTPCost,p2MAdd,m2PAdd]
end

def trainskill(i,r1,r2)
	cost=trainskillcost(i,r1,r2,$remPTP,$remMTP)
	cost2=traincost(i,r1,r2)
	
	if $remPTP<cost[0] or $remMTP<cost[1]
		return false
	end
	
	$remPTP-=cost[0]
	$remMTP-=cost[1]
	$trainedPTPs+=cost2[0]
	$trainedMTPs+=cost2[1]
	$p2M+=cost[2]
	$m2P+=cost[3]
	
	
	return true
end

def calculateTPs
	AllStats()
	dicaur= (($stat[2] * $ProfessionMod[$profession][2]+ $stat[9] * $ProfessionMod[$profession][9])/2);
  $totalPTP = (dicaur + $stat[0] * $ProfessionMod[$profession][0]             + $stat[1] * $ProfessionMod[$profession][1]              + $stat[5] * $ProfessionMod[$profession][5]              + $stat[6] * $ProfessionMod[$profession][6])/20;
  $totalPTP+=25;
  $totalMTP = (dicaur + $stat[3] * $ProfessionMod[$profession][3]              + $stat[4] * $ProfessionMod[$profession][4]              + $stat[7] * $ProfessionMod[$profession][7]              + $stat[8] * $ProfessionMod[$profession][8])/20;		$totalMTP+=25;
	i=1
  while i<101
	output=""
	$ProfessionMod[$profession].each_index {|ind| output+=" "+($allStats[i][ind] * $ProfessionMod[$profession][ind]).to_s }
	
    dicaur= (($allStats[i][2] * $ProfessionMod[$profession][2])               + ($allStats[i][9] * $ProfessionMod[$profession][9]))/2;
	
	toadd= (dicaur + ($allStats[i][0] * $ProfessionMod[$profession][0])              + ($allStats[i][1] * $ProfessionMod[$profession][1])              + ($allStats[i][5] * $ProfessionMod[$profession][5])              + ($allStats[i][6] * $ProfessionMod[$profession][6]))/20;			 
  toadd2 =  (dicaur + ($allStats[i][3] * $ProfessionMod[$profession][3])              + ($allStats[i][4] * $ProfessionMod[$profession][4])              + ($allStats[i][7] * $ProfessionMod[$profession][7])              + ($allStats[i][8] * $ProfessionMod[$profession][8]))/20;	
	$totalPTP+=25+toadd;
    $totalMTP+=25+toadd2;
	i=i+1
  end
$remPTP=$totalPTP
$remMTP=$totalMTP

$m2P=0
$p2M=0
$totalPTP=$totalPTP+((Char.exp-7572500)/2500).to_i;
$totalMTP=$totalMTP+((Char.exp-7572500)/2500).to_i;

$remPTP=$remPTP+((Char.exp-7572500)/2500).to_i;
$remMTP=$remMTP+((Char.exp-7572500)/2500).to_i;
$skillnames.each_index { |i| trainskill(i,0,Skills.send($skillnames[i]).to_i); }
numspells=Spells.minorelemental+Spells.majorelemental+Spells.minorspiritual+Spells.majorspiritual+Spells.wizard+Spells.sorcerer+Spells.ranger+Spells.paladin+Spells.empath+Spells.cleric+Spells.bard
trainskill(-1,0,numspells)
end

$skills = Hash.new


def pluskTPs(k,rPTP,rMTP,rP2M,rM2P)
	k2=k
	pT=[rP2M,2*k].min
	mT=[rM2P,2*k].min
	p2MReduce=0
	m2PReduce=0
	if pT>0
		k2-=pT/2
		p2MReduce=pT
		pT+=pT/2
		pT+=k2
		mT+=k2
	elsif mT>0
		k2-=mT/2
		$m2P-=mT
		m2PReduce=mT
		mT+=mT/2
		pT+=k2
		mT+=k2
	end
	return [rPTP+pT,rMTP+mT,rP2M-p2MReduce,rM2P-m2PReduce]
end
	
def getSkillNumber(skill)
	i=0
	while i<$skillnames.size and !$skillnames[i].eql?(skill)
		i=i+1
	end
	
	if skill.eql?('spell')
		i=-1
	end
	return i
end
	
def extraTPs(currentex)
	nextTP=Char.exp+(2500-(Char.exp)%2500)
	
	if nextTP<currentex
		return 0
	end
	
	return (currentex-nextTP)/2500
end

def makeskillgoal(currentex, rPTP, rMTP, rP2M, rM2P, skill, rank)
	i=0
	
	i=getSkillNumber(skill)
	
	
	base=$skills[skill]
	if base.nil?
		if !skill.eql?("spell")
			base=Skills.send(skill).to_i
			#base=0
		else
			base=Spells.minorelemental+Spells.majorelemental+Spells.minorspiritual+Spells.majorspiritual+Spells.wizard+Spells.sorcerer+Spells.ranger+Spells.paladin+Spells.empath+Spells.cleric+Spells.bard
			#base=0
		end	
	end
	
	ex=0
	
	cost=traincost(i,base,rank)
	
	kmin=0
	kmax=[cost[0],cost[1]].max
	
	while kmin<kmax
		kmid=(kmin+kmax)/2
		
		tpsAt=pluskTPs(kmid,rPTP,rMTP,rP2M,rM2P)
		
		cost=trainskillcost(i,base,rank,tpsAt[0],tpsAt[1])
		
		if cost[0]>tpsAt[0] or cost[1]>tpsAt[1]
			kmin=kmid+1
		else
			kmax=kmid
		end
	end
	
	nextex=2500-((currentex)%2500)
	
	ex=0
	
	if kmin>0
		ex=nextex
		ex+=2500*(kmin-1)
	end
	
	retData=pluskTPs(kmin,rPTP,rMTP,rP2M,rM2P)
	
	cost=trainskillcost(i,base,rank,retData[0],retData[1])
	cost2=traincost(i,base,rank)
	
	$trainedPTPs+=cost2[0]
	$trainedMTPs+=cost2[1]
	$skills[skill]=rank
	return [ex,retData[0]-cost[0],retData[1]-cost[1],retData[2]+cost[2],retData[3]+cost[3]]
end

def displaystuff(columnsize,data)
	calculateTPs()
	output=""
	respond "Total PTPs: "+$totalPTP.to_s
	respond "Total MTPs: "+$totalMTP.to_s
	respond "Current PTPs: "+$remPTP.to_s
	respond "Current MTPs: "+$remMTP.to_s
	str=["Skill","Ranks at goal","Exp. to goal","Level at goal"]
	str.each { |heading| output=output+heading+(' '*(columnsize-heading.length))+"|"}
	output="   "+output+"\n"+('='*((str.size*(columnsize+1))))+"\n"
	#data=CharSettings['data']
	currentex=Char.exp
	rPTP=$remPTP
	rMTP=$remMTP
	rP2M=$p2M
	rM2P=$m2P
	data.each_index {|index| 
		retData=makeskillgoal(currentex,rPTP,rMTP,rP2M,rM2P,data[index][0],data[index][1]);
		
		currentex+=retData[0];
		rPTP=retData[1]
		rMTP=retData[2]
		rP2M=retData[3]
		rM2P=retData[4]
		s=(index+1).to_s+"."; 
		output=output+(' '*(3-s.length))+s+" "+data[index][0].to_s+(' '*(columnsize-data[index][0].length))+"|"+data[index][1].to_s+(' '*(columnsize-data[index][1].to_s.length))+"|"+retData[0].to_s+(' '*(columnsize-retData[0].to_s.length))+"|"+whatlevel(currentex).to_s+(' '*(columnsize-whatlevel(currentex).to_s.length))+"\n" 
	}
	
	respond output+"\n"	
	respond "Exp to goal completion: "+(currentex-Char.exp).to_s	
	respond "Total exp at goal completion: "+currentex.to_s
	#respond "Total TPs to be spent in all: "+$trainedPTPs.to_s+"/"+$trainedMTPs.to_s+"  PTPs/MTPs"
end

if script.vars[1].nil?
	#display
	displaystuff(19,CharSettings['data'])	
	exit
end
if script.vars[1].downcase.eql?('add')
	i=0
	
	if script.vars[2].nil? or script.vars[3].nil?
		respond "You're doing it wrong. Run ;postcapgoal help"
		exit
	end
	while i<$skillnames.size and !script.vars[2].downcase.eql?($skillnames[i])
		i=i+1
	end	
	
	if i==$skillnames.size
		if !script.vars[2].downcase.eql?("spell")
			respond "Error: Invalid skill name."
			exit
		end
		sk="spell"
	else
		sk=$skillnames[i]
	end
	data=CharSettings['data']
	if data.nil?
		data=Array.new
	end
	
	data2=Array.new
	
	if !script.vars[4].nil?
		pos=script.vars[4].to_i-1
		if pos>data.size or pos<0
			respond "Error: There is no position "+(pos+1).to_i+"."
			exit
		end
	else
		pos=data.size
	end
	
	for p in 0..data.size
		if p<pos
			data2.push(data[p])
		elsif p==pos
			data2.push([sk,script.vars[3].to_i])
		elsif p>pos
			data2.push(data[p-1])
		end
	end
	CharSettings['data']=data2
	CharSettings.save
	
	displaystuff(19,CharSettings['data'])
elsif script.vars[1].downcase.eql?('help')
	respond "PostCapGoal Usage: "
	respond "postcapgoal [action] [skill/goal#/save?] [setting] [position]"
	respond "Where [action] is optional and is either add, remove, max, or help"
	respond "==================================================================="
	respond "[skill/goal#/save?] is either:"
	respond "          remove: the skill goal number you want to remove"
	respond "          max: blank (if you do not want to save the max goals) or yes (if you do want to save them)"
	respond "          add: One of "+$skillnames.join(', ')+" or spell"
	respond "==================================================================="	
	respond "[setting] is the number of ranks at the goal for add"
	respond "==================================================================="
	respond "[position] is an optional parameter for add that indicates a position to insert the skill at. Default is the end"
	exit
elsif script.vars[1].downcase.eql?('remove')
	
	if script.vars[2].nil?
		respond "You're doing it wrong. Run ;postcapgoal help"
	end
	
	data=CharSettings['data']
	
	i=script.vars[2].to_i
	
	if i>data.size or i<=0
		respond "Error: There is no post cap goal #"+i.to_s+"."
		exit
	end
	
	data2=Array.new
	
	for j in 0..(data.size-1)
		if j!=(i-1)
			data2.push(data[j])
		end
	end
	
	CharSettings['data']=data2
	CharSettings.save
	
	displaystuff(19,CharSettings['data'])
elsif script.vars[1].downcase.eql?('max')
	data = Array.new
	maxskill.each { |s| data.push([$skillnames[s],$skillcosts[$profession][s][2]*101]) }
	data.push(['spell',spellmax[$profession]*101])
	if !script.vars[2].nil?	
		CharSettings['data']=data
		CharSettings.save
	end
	displaystuff(19,data)
else
	respond "You're doing it wrong. Run ;postcapgoal help"
end
