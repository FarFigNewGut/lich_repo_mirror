require "csv"
require "set"

=begin
	Remember things for easy recall.
    
    I have a terrible memory and use this to help keep notes about interactions and concepts.
		
	Commands:
    ;remember <thing>
    ;remember <thing> <message>
    ;remember <thing> --delete
	;remember --delete-all-entries

    You can write all your notes out to a csv file. It'll be saved in the Lich directory.
    
    ;remember --write-csv

	Author: Halpor
	Version: 1
=end

debug = false

CharSettings.load
CharSettings ||= Hash.new
CharSettings['things'] ||= Hash.new
thing = script.vars[1].capitalize || ''
message = script.vars.drop(2).join(' ')
has_message = script.vars.length > 2

def reset_all()
    CharSettings['things'] = Hash.new
end

def add_message_to_entry(thing, str)
    entry = get_entry(thing)
    message = { 'time' => Time.now, 'message' => str }
    entry['messages'].push(message)
    
    CharSettings['things'][thing]['messages'] = entry['messages']
    CharSettings.save
end

def has_entry(thing)
    return CharSettings['things'].key?(thing)
end

def get_entry(thing)
    unless CharSettings['things'].key?(thing)
        CharSettings['things'][thing] = { 'messages' => [] }
    end

    return CharSettings['things'][thing]
end

def delete_entry(thing)
    CharSettings['things'].delete(thing)
    CharSettings.save
end

def list_entries()
    send_message("info", "\nYou've remembered the following entries:\n\n")
    CharSettings['things'] .each do | k, data |
        send_message("info", "#{k} (#{data['messages'].count})\n")
    end
end

def send_message(type, msg)
    _respond msg
end

def color(color, msg)
    if defined?(Lich::Messaging)
        return Lich::Messaging.msg_format(color, msg)
    else
        return msg
    end
end

def flatten_hash(hash, parent_key = nil, visited = Set.new)
    result = {}
  
    hash.each do |key, value|
      new_key = parent_key ? "#{parent_key}.#{key}" : key.to_s
  
      if value.is_a?(Hash)
        if visited.include?(value)
          raise "Circular reference detected for key: #{new_key}"
        end
  
        visited.add(value)
        result.merge!(flatten_hash(value, new_key, visited))
      else
        result[new_key] = value
      end
    end
  
    return result
end
  
def hash_to_csv(hash, csv_file_path)
    flattened_hash = flatten_hash(hash)
    CSV.open(csv_file_path, 'w') do |csv|
        flattened_hash.each do |key, entries|
            k = key.split('.')[0]
            entries.each do | entry |
                csv << [k, entry['time'].to_s, entry['message'].to_s]
            end
        end
    end

    puts "CSV file created in your Lich folder with the name: #{csv_file_path}"
end

def help()
    send_message("info", "Recall information: ;remember <thing>")
    send_message("info", "Add entry: ;remember <thing> <message>")
    send_message("info", "Clear entries: ;remember <thing> --delete")
    send_message("info", "Backup all entries to csv file: ;remember --write-csv")
end

# end of functions

if thing.empty?
    list_entries()
    exit
end

if debug 
    respond "\nDEBUG:\n\nThing: #{thing}\nMessage: #{message}\n"
end

if thing.downcase == "help"
    help()
    exit
elsif thing.downcase == "--delete-all-entries"
    reset_all()
    respond "DELETED ALL ENTRIES"
    exit
elsif thing.downcase == "--write-csv"
    # experimental
    current_datetime = Time.now.strftime("%Y-%m-%d-%H-%M-%S")
    hash_to_csv(CharSettings['things'], "remember-backup-#{current_datetime}.csv")
elsif message == "--delete"
    delete_entry(thing)
    send_message("info", "Deleted entry for #{thing}")
    exit
elsif has_message
    add_message_to_entry(thing, message)
    send_message("info", "Added entry to #{thing}: #{message}\n")
    exit
else
    if !has_entry(thing)
        send_message("info", "No entry for #{color("debug", thing)}.")
        exit
    end

    send_message("info", "Displaying entries for #{color("info", thing)}:\n\n")
    entry = get_entry(thing)
    
    messages = entry['messages'].sort_by { |hsh| hsh[:time] }
    messages.each{ | m |
        send_message("info", "#{m['time']}: #{color("info", m['message'])}\n\n")
    }

    exit
end
