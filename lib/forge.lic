#forge.lic

#Used blocks pull from lootsack
#Fresh blocks pull from keepsack

$forge = ''
$forge_perfect = nil

module Forge
  VERSION = '1.0.0'
  def self.version
    Gem::Version.new(VERSION)
  end

  module Apron
    result = dothistimeout 'inventory', 5, /(?:leather crafter's|forging) apron|for more options/
    if result =~ /(?:leather crafter's|forging) apron/
      respond 'Forging apron worn!'
    elsif result =~ /for more options/
      respond 'Purchase a forging apron and restart script.'
      exit
    end
  end

  module Goto
    def self.bank
      start_script 'go2', [ 'bank' ]
      wait_while{running?('go2')}
      fput 'deposit all'
    end
    
    def self.forge
      start_script 'go2', [ 'forge' ]
      wait_while{running?('go2')}
    end
    
    def self.workshop
      result = dothistimeout 'go workshop', 5, /You don't have enough silver, rentals are 300 silver.|the clerk collects 300 silvers|the clerk directs you to your rented|Where are you trying to go?/
      if result =~ /You don't have enough silver, rentals are 300 silver./
        respond 'Out of silvers, going to the bank.'
          Forge::Goto.bank
        respond 'Withdrawing silvers for workshop rental.'
          Forge::Silver.rental
        respond 'Going to the forge.'
          Forge::Goto.forge
        respond 'Going into the workshop.'
          Forge::Goto.workshop
      elsif result =~ /the clerk collects 300 silvers/
        respond 'Ready to forge!'
        if $forge == block
          Forge::Hammer.get_block
        elsif $forge == slab
          Forge::Hammer.get_slab
        end
      elsif result =~ /the clerk directs you to your rented/
        respond 'Ready to forge!'
        if $forge == 'block'
          Forge::Hammer.get_block
        elsif $forge == 'slab'
          Forge::Hammer.get_slab
        end
      elsif result =~ /Where are you trying to go?/
        fput 'out'
        Forge::Goto.workshop
      end
    end
  end

	#This module will execute specific commands.
	module Hammer

#Forging a Hammer Shaft
  
    def self.get_block
      #Used blocks pull from lootsack
      result = dothistimeout "get my block from my #{Vars.lootsack}", 5, /^You (?:get|grab|remove|retrieve)|Get what?/
      if result =~ /^You (?:get|grab|remove|retrieve)/
        respond 'Block found.'
        fput 'swap'
        Forge::Hammer.handle_glyph
      elsif result =~ /Get what?/
        Forge::Hammer::get_block2
      end
    end
    
    def self.get_block2
      #Fresh blocks pull from keepsack
      result = dothistimeout "get my block from my #{Vars.keepsack}", 5, /^You (?:get|grab|remove|retrieve)|Get what?/
      if result =~ /^You (?:get|grab|remove|retrieve)/
        respond 'Block found.'
        fput 'swap'
        Forge::Hammer.handle_glyph
      elsif result =~ /Get what?/
        respond 'Block not found.'
        fput 'out'
        Forge::Goto.bank
        Forge::Silver.block
        Forge::Goto.forge
        Forge::Purchase.block
        Forge::Goto.workshop
        Forge::Hammer.get_block
      end
    end

    def self.handle_glyph
      result = dothistimeout 'stare handle-glyph', 5, /Before the design is complete|Your material is marked with a pattern,/
      if result =~ /Before the design is complete/
        Forge::Item.bin('block')
        Forge::Hammer.get_block
      elsif result =~ /Your material is marked with a pattern,/
        Forge::Hammer.grind_handle
      end
    end
 
    def self.grind_handle
      waitrt?
      result = dothistimeout 'turn grinder', 90, /The grinding wheel doesn't|The material you intend to shape|Things seem to be going fine|satisfied with the piece|You smile as you realize that this piece is the very best that you can create.|Things seem to be going okay, but this is more difficult than you expected./
      if result =~ /The grinding wheel doesn't/
        respond 'Out of time.'
        fput 'out'
        Forge::Goto.workshop
      elsif result =~ /The material you intend to shape/
        Forge::Item.bin('hammer-handle')
      elsif result =~ /Things seem to be going fine/
        Forge::Item.bin('toothpick')
      elsif result =~ /satisfied with the piece/
        respond 'This is an average piece.'
        Forge::Item.bin('hammer-handle')
        Forge::Item.store_extra('block')
        Forge::Hammer.get_block
      elsif result =~ /You smile as you realize that this piece is the very best that you can create./
        respond 'This is a perfect component.'
        Forge::Item.store_extra('block')
        Forge::Hammer.polish_handle
      elsif result =~ /Things seem to be going okay, but this is more difficult than you expected./
        Forge::Item.bin('block')
        Forge::Hammer.get_block
      end
    end

    def self.polish_handle
      sleep 10
      result = dothistimeout 'lean polisher', 30, /The polishing wheel doesn't budge|You straighten up from working at the polishing wheel and run your fingers over the smooth surface of your (.*)./
      if result =~ /The polishing wheel doesn't budge/
        fput 'out'
        Forge::Goto.workshop
      elsif result =~ /You straighten up from working at the polishing wheel and run your fingers over the smooth surface of your (.*)./
        Forge::Item.mark('hammer-handle')
        Forge::Item.store('hammer-handle')
        if $forge_perfect == true
          $forge = 'slab'
          Forge::Hammer.get_slab
        else
          exit
        end
      end
    end
        
#Forging a Hammer Head

    def self.get_slab
      #Used slabs pull from lootsack
      result = dothistimeout "get my slab from my #{Vars.lootsack}", 5, /^You (?:get|grab|remove|retrieve)|Get what?/
      if result =~ /^You (?:get|grab|remove|retrieve)/
        respond 'Slab found.'
        fput 'swap'
        Forge::Hammer.head_glyph
      elsif result =~ /Get what?/
        Forge::Hammer.get_slab2
      end
    end
    
    def self.get_slab2
      #Fresh slab pull from keepsack
      result = dothistimeout "get my slab from my #{Vars.keepsack}", 5, /^You (?:get|grab|remove|retrieve)|Get what?/
      if result =~ /^You (?:get|grab|remove|retrieve)/
        respond 'Slab found.'
        fput 'swap'
        Forge::Hammer.head_glyph
      elsif result =~ /Get what?/
        respond 'Slab not found.'
        fput 'out'
        Forge::Goto.bank
        Forge::Silver.slab
        Forge::Goto.forge
        Forge::Purchase.slab
        Forge::Goto.workshop
        Forge::Hammer.get_slab
      end
    end

    def self.head_glyph
      result = dothistimeout 'stare head-glyph', 5, /Before the design is complete|Your material is marked with a pattern,/
      if result =~ /Before the design is complete/
        Forge::Item.bin('slab')
        Forge::Hammer.get_slab
      elsif result =~ /Your material is marked with a pattern,/
        Forge::Item.store_extra('slab')
        Forge::Hammer.grind_head
      end      
    end
  
    def self.grind_head
      waitrt?
      result = dothistimeout 'turn grinder', 90, /The grinding wheel doesn't|Things seem to be going fine|You finish your work and stand up, turning the (.*) in your hands.  You nod, satisfied with the piece you've created.|You smile as you realize that this piece is the very best that you can create.|Hold the material you want to shape in your left hand and keep your right hand free to steady and turn the material.|is using the grinder right now.  You'll have to wait until/
      if result =~ /The grinding wheel doesn't/
        respond 'Out of time.'
        fput 'out'
        Forge::Goto.workshop
      elsif result =~ /Things seem to be going fine/
        Forge::Item.bin('toothpick')
        Forge::Hammer.get_slab
      elsif result =~ /You finish your work and stand up, turning the (.*) in your hands.  You nod, satisfied with the piece you've created./
        respond 'This is an average piece.'
        Forge::Item.bin('hammer-head')
        Forge::Hammer.get_slab
      elsif result =~ /You smile as you realize that this piece is the very best that you can create./
        respond 'This is a perfect component.'
        Forge::Item.store_extra('slab')
        Forge::Hammer.polish_head
      elsif result =~ /Hold the material you want to shape in your left hand and keep your right hand free to steady and turn the material./
        Forge::Item.store('slab')
        Forge::Hammer.grind_head
      end
    end

    def self.polish_head
      sleep 10
      result = dothistimeout 'lean polisher', 30, /The polishing wheel doesn't budge|You straighten up from working at the polishing wheel and run your fingers over the smooth surface of your (.*)./
      if result =~ /The polishing wheel doesn't budge/
        fput 'out'
        Forge::Goto.workshop
      elsif result =~ /You straighten up from working at the polishing wheel and run your fingers over the smooth surface of your (.*)./
        Forge::Item.mark('hammer')
        Forge::Item.store('hammer')
        if $forge_perfect == true
          Forge::Hammer.vise
        else
          exit
        end
      end
    end

#Finishing the component pieces.

    def self.vise
      fput 'get my hammer-handle','get my hammer-head'
      fput 'turn vise'
    end
    
  end     #End of Hammer Module
  
  module Item
 
     def self.bin(item)
      waitrt?
      result = dothistimeout "put #{item} in bin", 5, /As you place/
      if result =~ /As you place/
        respond 'Trashed the item.'
      end
     end
      
    def self.mark(item)
      fput "mark my #{item}"
    end
    
    def self.store(item)
      fput "put my #{item} in my #{Vars.keepsack}"
    end
     
    def self.store_extra(item)
      fput "put my #{item} in my #{Vars.lootsack}"
    end
         
  end     #End of Item Module
  
  module Purchase
  
    def self.block
      if Room.current.id == 5039
        3.times do
          fput 'order 3'
          result = dothistimeout 'buy', 5, /hands you a hickory block/
          if result =~ /hands you a hickory block/
            Forge::Item.store('block')
          end
        end
      end
    end

    def self.slab
      if Room.current.id == 5039
        fput 'order 9'
        result = dothistimeout 'buy', 5, /hands you a heavy mithril slab/
        if result =~ /hands you a heavy mithril slab/
          Forge::Item.store('slab')
        end
      end
    end
  
  end
  
  module Silver
    def self.rental
      fput 'withdraw 300 silver'
    end
    
    def self.block
      fput 'withdraw 100 silver'
    end
    
    def self.slab
      fput 'withdraw 10000 silver'
    end
    
  end
  
end

#Start of Forging Process

Forge::Apron
waitfor 'for more options.'
respond ("What would you like to forge today? Do ;send <number> for your choice")
respond ("To forge a hammer-shaft, do ;send 1")
respond ("To forge a hammer-head, do ;send 2")
respond ("To forge a perfect hammer, do ;send 3")

while line = get
  if line == "1"
    $forge = 'block'
    Forge::Goto.workshop
    Forge::Hammer.get_block
  elsif line == "2"
    $forge = 'slab'
    Forge::Goto.workshop
    Forge::Hammer.get_slab
  elsif line == "3"
    $forge = 'block'
    $forge_perfect = true
    Forge::Goto.workshop
    Forge::Hammer.get_block
  end
end