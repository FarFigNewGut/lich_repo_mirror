require 'yaml'

game_dir = File.join(DATA_DIR, XMLData.game)
char_dir = File.join(game_dir, Char.name)
@filename  = File.join(char_dir, "SearchDataFromLogs.yaml")
@filename2 = File.join(char_dir, "searcharraylog.yaml")

@scrape_data = {}
@scrape_data[:creature]                = "none"
@scrape_data[:total_searches]          = 0
@scrape_data[:ascension_searches]      = 0
@scrape_data[:searches_since_jewel]    = 0
@scrape_data[:searches_since_dust]     = 0
@scrape_data[:searches_since_lock_key] = 0
@scrape_data[:searches_since_feeder]   = 0
@scrape_data[:searches_since_legendary] = 0
@scrape_data[:jewel_found]             = {}
@scrape_data[:dust_found]              = {}
@scrape_data[:lock_key_found]          = {}
@start_scrapin = false

# Regular expressions for events.
SEARCH_CREATURE = %r{^You search the (?<name>.+?)\.$}
FEEDER_ITEM     = %r{^\*\*\* A glint of light draws your attention to your latest find! \*\*\*$}
LOCK_KEY        = %r{^A (.+?) appears on the ground!$}
GEMSTONE_DUST   = %r{^You notice a scintillating mote of gemstone dust on the ground and gather it quickly.$}
GEMSTONE_JEWEL  = %r{^\*\* A glint of light catches your eye, and you notice an? (.+?) at your feet! \*\*$}
DRACONIC_IDOL   = %r{While rifling through the mutant's belongings, you find a silver-veined black draconic idol wrapped carefully in rags as if it were a precious trinket.}
ASCENSION_CREATURES = Regexp.union(
  %r{armored battle mastodon},
  %r{black valravn},
  %r{boreal undansormr},
  %r{crimson angargeist},
  %r{fork-tongued wendigo},
  %r{giant warg},
  %r{gigas berserker},
  %r{gigas disciple},
  %r{gigas shield-maiden},
  %r{gigas skald},
  %r{gold-bristled hinterboar},
  %r{gorefrost golem},
  %r{halfling bloodspeaker},
  %r{halfling cannibal},
  %r{reptilian mutant},
  %r{sanguine ooze},
  %r{shadow-cloaked draugr},
  %r{winged disir},
  %r{basalt grotesque},
  %r{death knight},
  %r{mist-wreathed banshee},
  %r{patrician vampire},
  %r{phantasmic conjurer},
  %r{skeletal dreadsteed},
  %r{tatterdemalion ghast},
  %r{hive thrall},
  %r{kiramon broodtender},
  %r{kiramon myrmidon},
  %r{kiramon stalker},
  %r{kiramon strandweaver},
  %r{kresh ravager}
)

file_location = nil
if Script.current.vars[0].nil?
  _respond Lich::Messaging.msg_format("info", "You need to specify folder of the log you wish to parse such as:")
  _respond Lich::Messaging.msg_format("info", "C:/Users/xxxx/Desktop/Lich5/logs/GSIV-Nisugi/2024/08/*.log")
  exit
else
  file_location = Script.current.vars[0].gsub('\\','/') + '/*.log'
end
exit if file_location.nil?

$search_array_log = []
Dir.glob(file_location).each do |file|
  # In this version, there are no timestamps. The file name is simply the character name.
  buffer = File.readlines(file).map(&:chomp)
  _respond(Lich::Messaging.msg_format("info", "Parsing #{file}"))
  
  buffer.each_with_index do |line, index|
    case line
    when %r{The fallen sybil's power lingers in the area, ready for the claiming\.  Quickly, take your gemstone and INFUSE it while you still can!}
      @start_scrapin = true

    when GEMSTONE_JEWEL
      if @start_scrapin && ASCENSION_CREATURES.match?(@scrape_data[:creature])
        name = $1
        key = @scrape_data[:total_searches]
        @scrape_data[:jewel_found][key] = {
          searches: @scrape_data[:searches_since_jewel],
          name: name,
          creature: @scrape_data[:creature]
        }
        respond(line)
        respond("jewel added: key #{key} with searches #{@scrape_data[:searches_since_jewel]}, creature: #{@scrape_data[:creature]}")
        @scrape_data[:searches_since_jewel] = 0
        $search_array_log.append(line)
      end

    when GEMSTONE_DUST
      if @start_scrapin && ASCENSION_CREATURES.match?(@scrape_data[:creature])
        key = @scrape_data[:total_searches]
        @scrape_data[:dust_found][key] = {
          searches: @scrape_data[:searches_since_dust],
          creature: @scrape_data[:creature]
        }
        respond(line)
        respond("dust added: key #{key} with searches #{@scrape_data[:searches_since_dust]}, creature: #{@scrape_data[:creature]}")
        @scrape_data[:searches_since_dust] = 0
        $search_array_log.append(line)
      end

    when LOCK_KEY
      name = $1
      key = @scrape_data[:total_searches]
      @scrape_data[:lock_key_found][key] = {
        searches: @scrape_data[:searches_since_lock_key],
        name: name,
        creature: @scrape_data[:creature]
      }
      respond(line)
      respond("lockandkey added: key #{key} with searches #{@scrape_data[:searches_since_lock_key]}, creature: #{@scrape_data[:creature]}")
      @scrape_data[:searches_since_lock_key] = 0
      $search_array_log.append(line)

    when SEARCH_CREATURE
      # For logs with no timestamps, we use a sequential key.
      @scrape_data[:creature] = Regexp.last_match[:name]
      if ASCENSION_CREATURES.match?(@scrape_data[:creature]) && @start_scrapin
        @scrape_data[:ascension_searches] += 1
        @scrape_data[:searches_since_jewel] += 1
        @scrape_data[:searches_since_dust] += 1
        $search_array_log.append(line)
      end
      @scrape_data[:total_searches] += 1
      @scrape_data[:searches_since_lock_key] += 1

    end
  end
end

File.write(@filename2, $search_array_log.to_yaml)
File.write(@filename, @scrape_data.to_yaml)
respond("Search data saved to file. #{@filename}")
