=begin
   ;severance is a script to remove spells at risk for Spell Sever zones, with options to configure a list of spells to preserve.

   original author: Maodan
        maintainer: Maodan
              game: Gemstone
              tags: spellsever,spells
           version: 1.0.3

  v1.0.3  (2022-08-08)
    - Changed to priority list rather than fixed 2 spell list for protected spells
    - Added `up` command to shift priorty of spells in protected list

  v1.0.2 (2022-07-29)
    - Added 1699

  v1.0.2 (2022-05-20)
    - Added 1605

  v1.0.1 (2022-05-20)
    - Added arcane/miscelaneous circles to the default exclusions

  v1.0.0 (2022-05-20)
    - Initial release

=end


UserVars.severspells ||= []
$groupspells = [307,310,620,1006,1007,1035,1213,1216,1605,1609,1617,1618,1699]


class Severance
	def self.add(n)
		if Spell[n].nil?
			_respond("#{monsterbold_start}Unknown spell number #{n}#{monsterbold_end}")
			return
		elsif UserVars.severspells.include?(n.to_i)
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is already configured as one of your sever spells#{monsterbold_end}")
			return
		end

		_respond("\<preset id=\"speech\"\>Added #{Spell[n.to_i].name} (#{n}) to your protected spells\<\/preset\>")
		UserVars.severspells |= [n.to_i]
	end

	def self.rem(n)
		if !UserVars.severspells.include?(n.to_i)
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is not configured as one of your sever spells#{monsterbold_end}")
			return
		end

		_respond("\<preset id=\"speech\"\>Removed #{Spell[n.to_i].name} (#{n}) from your protected spells\<\/preset\>")
		UserVars.severspells.delete(n.to_i)
	end

	def self.up(n)
		if !UserVars.severspells.include?(n.to_i)
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is not configured as one of your sever spells#{monsterbold_end}")
			return
		elsif UserVars.severspells.index(n.to_i) == 0
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is already your top priority spell#{monsterbold_end}")
			return
		end

		i = UserVars.severspells.index(n.to_i)
		UserVars.severspells.insert((i - 1), UserVars.severspells.delete_at(i))

		_respond("\<preset id=\"speech\"\>Moved #{Spell[n.to_i].name} (#{n}) up in priority\<\/preset\>")
	end

	def self.list
		if UserVars.severspells.length === 0
			_respond("\<preset id=\"speech\"\>No spells spells registered to keep for spell sever! Use ;severance add {spellnumber}\<\/preset\>")
			return
		end

		_respond("\<preset id=\"speech\"\>You are currently preserving the following spells:\<\/preset\>")
		_respond("\<preset id=\"speech\"\>- - - - - - Primary - - - - - -<\/preset\>")
		UserVars.severspells.each_with_index{|n, i|
			if i === 2
				_respond("\<preset id=\"speech\"\>- - - - - Alternate - - - - - -<\/preset\>")
			end
			_respond("\<preset id=\"speech\"\>- #{Spell[n].name} (#{n})\<\/preset\>")
		}

		_respond("\n#{monsterbold_start}!! Important! Only the first 2 protected spells will be saved in the event that you have more than 2 of them active! !!#{monsterbold_end}")
	end

	def self.go
		if UserVars.severspells.length === 0
			_respond("\<preset id=\"speech\"\>No spells spells registered to keep for spell sever! Use ;severance add {spellnumber}\<\/preset\>")
			return
		elsif severable.length <= 2 
			_respond("\<preset id=\"speech\"\>You're safely under the limit for Spell Sever\<\/preset\>")
			return
		end

		_respond("\<preset id=\"speech\"\>You're over the Spell Sever limit by #{severable.length - 2} spells...\<\/preset\>")

		severable.each_with_index {|s, i| 
			next if i < 2
			_respond("#{monsterbold_start}Removing #{s.num}#{monsterbold_end}")
			fput("stop #{s.num}")
		}
	end

	def self.check

		severable = Severance.severable

		if severable.length <= 2 
			_respond("\<preset id=\"speech\"\>You're safely under the limit for Spell Sever\<\/preset\>")
			return
		end

		_respond("\<preset id=\"speech\"\>You're over the Spell Sever limit by #{severable.length - 2} spells...\<\/preset\>")
		_respond("\<preset id=\"speech\"\>The following spells are potentially at risk (spells indicated with * are protected from removal by this script):\<\/preset\>")

		severable
				.each_with_index{|s, i|
			if i < 2
				_respond("\<preset id=\"speech\"\>- #{s.name} (#{s.num})*\<\/preset\>")
			else
				_respond("#{monsterbold_start}- #{s.name} (#{s.num})#{monsterbold_end}")
			end
		}
	end

	def self.severable
		return Spell.active.select {|s| 
			!s.known? && !$groupspells.include?(s.num.to_i) && s.circle.to_i <= 16
		}
		.sort_by {|s|
			UserVars.severspells.include?(s.num.to_i) ? UserVars.severspells.index(s.num.to_i) : 1000
		}
	end

	def self.help
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("yellow", " Severance by Maodan")
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("yellow", " ;severance is a script to remove spells at risk for Spell Sever zones, with options to configure a list of spells to preserve.")
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("teal",   " Basic usage: #{$lich_char}severance")
	    Lich::Messaging.msg("teal",   "    This will check your active spells and *STOP* any that are at risk for Spell Sever,")
	    Lich::Messaging.msg("teal",   "    except those configured for preservation via ;severance add")
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("green",  " Extra commands:")
	    Lich::Messaging.msg("teal",   "  help                                 shows this help message")
	    Lich::Messaging.msg("teal",   "  check                               checks your current spells for Spell Sever risk")
	    Lich::Messaging.msg("teal",   "  list                                   lists preserved spells")
	    Lich::Messaging.msg("teal",   "  add or + {spellnum}       adds a spell to your preserve list")
	    Lich::Messaging.msg("teal",   "  rem or - {spellnum}        removes a spell from your preserve list")
	    Lich::Messaging.msg("teal",   "  up {spellnum}                 moves a spell up in priority on your preserve list")
	end
end


if script.vars[1].nil?
	Severance.go
elsif script.vars[1].downcase == 'help' 
	Severance.help
elsif script.vars[1].downcase == 'list'
	Severance.list
elsif script.vars[1].downcase == 'check'
	Severance.check
elsif script.vars[1].downcase == 'add' || script.vars[1].downcase == '+'
	Severance.add(script.vars[2])
elsif script.vars[1].downcase == 'rem' || script.vars[1].downcase == '-'
	Severance.rem(script.vars[2])
elsif script.vars[1].downcase == 'up'
	Severance.up(script.vars[2])
else
	respond "Unknown parameter '#{script.vars[1]}'"
end