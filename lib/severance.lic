=begin
;severance is a script to remove spells at risk for Spell Sever zones, with options to configure a list of spells to preserve.

   original author: Maodan
        maintainer: Maodan
              game: Gemstone
              tags: spellsever,spells
           version: 1.0.6

  v1.0.6  (2022-11-10)
    - Added --daemon mode, allowing the script to run in the background and automatically
        sever new spells as necessary
    - Added --quiet mode to support daemon mode and reduce output
    - Added --delay=X to customize daemon check frequency
  v1.0.5  (2022-09-06)
    - Added 1018

  v1.0.4  (2022-08-09)
    - Added `set` command to be able to define the entire priority list in a single command
    - Added examples to help
    - Added 605

  v1.0.3  (2022-08-08)
    - Changed to priority list rather than fixed 2 spell list for protected spells
    - Added `up` command to shift priorty of spells in protected list

  v1.0.2 (2022-07-29)
    - Added 1699

  v1.0.2 (2022-05-20)
    - Added 1605

  v1.0.1 (2022-05-20)
    - Added arcane/miscelaneous circles to the default exclusions

  v1.0.0 (2022-05-20)
    - Initial release

=end


UserVars.severspells ||= []
$scriptname = script.name


class Severance
	@groupspells = [307,310,605,620,1006,1007,1018,1035,1213,1216,1605,1609,1617,1618,1699]
	@quiet = false

	def self.add(n)
		if Spell[n].nil?
			_respond("#{monsterbold_start}Unknown spell number #{n}#{monsterbold_end}")
			return
		elsif UserVars.severspells.include?(n.to_i)
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is already configured as one of your sever spells#{monsterbold_end}")
			return
		end

		_respond("\<preset id=\"speech\"\>Added #{Spell[n.to_i].name} (#{n}) to your protected spells\<\/preset\>")
		UserVars.severspells |= [n.to_i]
	end

	def self.rem(n)
		if !UserVars.severspells.include?(n.to_i)
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is not configured as one of your sever spells#{monsterbold_end}")
			return
		end

		_respond("\<preset id=\"speech\"\>Removed #{Spell[n.to_i].name} (#{n}) from your protected spells\<\/preset\>")
		UserVars.severspells.delete(n.to_i)
	end

	def self.up(n)
		if !UserVars.severspells.include?(n.to_i)
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is not configured as one of your sever spells#{monsterbold_end}")
			return
		elsif UserVars.severspells.index(n.to_i) == 0
			_respond("#{monsterbold_start}#{Spell[n.to_i]} (#{n}) is already your top priority spell#{monsterbold_end}")
			return
		end

		i = UserVars.severspells.index(n.to_i)
		UserVars.severspells.insert((i - 1), UserVars.severspells.delete_at(i))

		_respond("\<preset id=\"speech\"\>Moved #{Spell[n.to_i].name} (#{n}) up in priority\<\/preset\>")
	end

	def self.set(spells)
		toAdd = []
		spells.each{|n|
			if n.include?(',')
				toAdd |= n.split(',').map{|i| i.strip.to_i}
			else
				toAdd |= [n.to_i]
			end
		}

		if UserVars.severspells.length > 0
			_respond("\<preset id=\"speech\"\>Resetting protected spell list...\<\/preset\>\n\n")
			UserVars.severspells = []
		end

		_respond("\<preset id=\"speech\"\>Adding new spells...\<\/preset\>\n\n")
		toAdd.each{|s|
			self.add(s)
		}

		_respond("\n")
		self.list
	end

	def self.list
		if UserVars.severspells.length === 0
			_respond("\<preset id=\"speech\"\>No spells spells registered to keep for spell sever! Use ;severance add {spellnumber}\<\/preset\>")
			return
		end

		_respond("\<preset id=\"speech\"\>You are currently preserving the following spells, in order of priority:\<\/preset\>\n\n")
		UserVars.severspells.each_with_index{|n, i|
			_respond("\<preset id=\"speech\"\>#{i} | #{Spell[n].name} (#{n})\<\/preset\>")
		}

		_respond("\n#{monsterbold_start}!! Important! Only the first 2 protected spells will be kept in the event that you have more than 2 of them active! !!#{monsterbold_end}")
	end

	def self.go(settings)
		@quiet = settings[:quiet]

		if settings[:daemon]
			_respond("\<preset id=\"speech\"\>Running in daemon mode, rechecking every #{settings[:delay]} seconds\<\/preset\>")
			loop do
				self.sever
				sleep(settings[:delay].to_i)
			end
		end

    self.sever
	end

	def self.sever
		if UserVars.severspells.length === 0
			_respond("\<preset id=\"speech\"\>No spells spells registered to keep for spell sever! Use ;severance add {spellnumber}\<\/preset\>")
			return
		elsif severable.length <= 2 
			self.send("\<preset id=\"speech\"\>You're safely under the limit for Spell Sever\<\/preset\>")
			return
		end

		_respond("\<preset id=\"speech\"\>You're over the Spell Sever limit by #{severable.length - 2} spells...\<\/preset\>")

		severable.each_with_index {|s, i| 
			next if i < 2
			_respond("#{monsterbold_start}Removing #{s.num}#{monsterbold_end}")
			fput("stop #{s.num}")
		}
	end

	def self.check
		severable = Severance.severable

		if severable.length <= 2 
			_respond("\<preset id=\"speech\"\>You're safely under the limit for Spell Sever\<\/preset\>")
			return
		end

		_respond("\<preset id=\"speech\"\>You're over the Spell Sever limit by #{severable.length - 2} spells...\<\/preset\>")
		_respond("\n\<preset id=\"speech\"\>The following spells will be preserved:\<\/preset\>")

		severable[0..1]
			.each{|s|
				_respond("\<preset id=\"speech\"\>- #{s.name} (#{s.num})\<\/preset\>")
			}

		_respond("\n#{monsterbold_start}The following spells are at risk of removal by this script!#{monsterbold_end}")
		severable[2..-1]
			.each{|s|
				dash = UserVars.severspells.include?(s.num.to_i) ? '~' : '-'
				_respond("#{monsterbold_start}#{dash} #{s.name} (#{s.num})#{monsterbold_end}")
			}
	end

	def self.severable
		return Spell.active.select {|s| 
			!s.known? && !@groupspells.include?(s.num.to_i) && s.circle.to_i <= 16
		}
		.sort_by {|s|
			UserVars.severspells.include?(s.num.to_i) ? UserVars.severspells.index(s.num.to_i) : s.num.to_i + 1000
		}
	end

	def self.send(message)
		_respond(message) unless @quiet
	end

	def self.help
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("yellow", " Severance by Maodan")
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("yellow", " #{$lich_char}#{$scriptname} is a script to remove spells at risk for Spell Sever zones, with options to configure a list of spells to preserve.")
	    Lich::Messaging.msg("yellow", "")
	    Lich::Messaging.msg("teal",   " Basic usage: #{$lich_char}#{$scriptname}")
	    Lich::Messaging.msg("teal",   "    This will check your active spells and *STOP* any that are at risk for Spell Sever,")
	    Lich::Messaging.msg("teal",   "    except those configured for preservation via #{$lich_char}#{$scriptname} add")
	    Lich::Messaging.msg("teal",   "")
	    Lich::Messaging.msg("teal",   " Advanced usage: #{$lich_char}#{$scriptname} \{--daemon\} \{--quiet\} \{--delay=5\}")
	    Lich::Messaging.msg("teal",   "    --daemon mode will keep the script active in the background, continuing to check")
	    Lich::Messaging.msg("teal",   "    every few seconds (5 by default, override with --delay=X)")
	    Lich::Messaging.msg("teal",   "    It is recommended that you also utilize --quiet to tone down the output when using")
	    Lich::Messaging.msg("teal",   "    this mode.")
	    Lich::Messaging.msg("teal",   "")
	    Lich::Messaging.msg("green",  " Extra commands:")
	    Lich::Messaging.msg("teal",   "  help                                       shows this help message")
	    Lich::Messaging.msg("teal",   "  check                                     checks your current spells for Spell Sever risk")
	    Lich::Messaging.msg("teal",   "  list                                         lists preserved spells")
	    Lich::Messaging.msg("teal",   "  add or + {spellnum}             adds a spell to your preserve list")
	    Lich::Messaging.msg("green",  "  - Ex: #{$lich_char}#{$scriptname} add 215 OR #{$lich_char}#{$scriptname} + 215")
	    Lich::Messaging.msg("teal",   "  rem or - {spellnum}              removes a spell from your preserve list")
	    Lich::Messaging.msg("green",  "  - Ex: #{$lich_char}#{$scriptname} rem 215 OR #{$lich_char}#{$scriptname} - 215")
	    Lich::Messaging.msg("teal",   "  up {spellnum}                       moves a spell up in priority on your preserve list")
	    Lich::Messaging.msg("green",  "  - Ex: #{$lich_char}#{$scriptname} up 215")
	    Lich::Messaging.msg("teal",   "  set {spell1 spell2 ...spellN}   REPLACES your entire preserve list with the values provided")
	    Lich::Messaging.msg("green",  "  - Ex: #{$lich_char}#{$scriptname} set 215 211 509 OR #{$lich_char}#{$scriptname} set 215,211,509")
	end
end

settings = {
	:quiet => false,
	:daemon => false,
	:delay => 5,
}

script.vars.each_with_index{|var, i|
	if var =~ /--quiet/
		settings[:quiet] = true
		script.vars.delete_at(i)
	end

	if var =~ /--daemon/
		settings[:daemon] = true
		script.vars.delete_at(i)
	end

	if var =~ /--delay=(\d+)/
		settings[:delay] = $1.to_i
		script.vars.delete_at(i)
	end
}

if script.vars[1].nil?
	Severance.go(settings)
elsif script.vars[1].downcase == 'help' 
	Severance.help
elsif script.vars[1].downcase == 'list'
	Severance.list
elsif script.vars[1].downcase == 'check'
	Severance.check
elsif script.vars[1].downcase == 'add' || script.vars[1].downcase == '+'
	Severance.add(script.vars[2])
elsif script.vars[1].downcase == 'rem' || script.vars[1].downcase == '-'
	Severance.rem(script.vars[2])
elsif script.vars[1].downcase == 'up'
	Severance.up(script.vars[2])
elsif script.vars[1].downcase == 'set'
	Severance.set(script.vars[2..-1])
else
	respond "Unknown parameter '#{script.vars[1]}'"
end