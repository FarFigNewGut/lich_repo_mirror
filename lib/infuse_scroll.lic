=begin
	
Welcome Infuse Scrolls version 1.1!
	
    This script will automatically unlock and infuse scrolls for you!
    The script will attempt to unlock the specified spell without unlocking unnecessary spells when possible.
	
    There are a couple of settings you must define first:
	
    1. Identify the location of where you will store your infused scrolls, runes, and components - 
		
       ;vars set infusesack=<container name>
		
    2. Identify whether you prefer to use the maximum # of charges or just unlock based on the level of the spell.
	
        Example - a beiron'fyn rune unlocks a level 5 or lower spell for 5 charges (level setting)
                  or a quiss'fyn rune unlocks all spells up to level 20 for 20 charges. (max setting)
				  
        The fewer charges and lesser rune used, the easier it will be to re-infuse. 
        It is recommended that skilled sorcerers should use the maximum level rune.
        To set this preference use the command - 
		
        ;vars set infuse_level=max (always use quiss'fyn) 
        or ;vars set infuse_level=level (use level appropriate rune)
	
    Once you have the variables set, you can activate the script in the following ways:
	
    - To unlock specified spells on a scroll, hold the scroll in your right hand then - 
        ;infuse_scroll unlock <spell number list> (e.g. ;infuse_scroll unlock 202 509 1204)
    - To infuse a scroll already unlocked with mana, hold the scroll in your right hand then - 
        ;infuse_scroll infuse
	
Please message Maerit on the PC with any bugs found in the script.

1.1 Updates - Added some conditional logic to handle when you attempt to infuse and fail, giving you the option to stop infusing.
	
=end


def read_scroll(scroll_id)

	reading_scroll = true
	max_lines = 7
	curr_lines = 0
	curr_spell = 0
	curr_scroll_info = Array.new
	first = true
	
	fput "read ##{GameObj.right_hand.id}"
	
	waitfor "you see"
	line = ""
	
	while(reading_scroll)
	
		line = matchtimeout 1, "\\(", "unreadable"
		
		if(line =~ /\(|unreadable/)
			spell = line[/\(([0-9]+)\)| ([0-9]*) unreadable/, 1]
			spell_name = line[/\([0-9]+\) (.*)/, 1]
			spell = spell.to_i
			if(spell < 100 && spell > 1) 
				spell_name = "unreadable spells"
			elsif(spell < 100 && spell < 2)
				spell_name = "unreadable spell"
			end
			
			if(spell != nil && spell_name != nil)				
				spell_info = "#{spell},#{spell_name}"				
				curr_scroll_info[curr_spell] = spell_info			
				curr_spell = curr_spell + 1			
			end		
		else		
			reading_scroll = false		
		end
	
	end
	
	targetspell = []
	
	curr_scroll_info.each { |sline|
		if sline.include? scroll_id
			targetspell << true
		else
			targetspell << false
		end
	}
	
	if targetspell.include? true
		return true
	else
		return false
	end
end

def make_rune (rune_name, return_room)
	
	if GameObj.right_hand.type == 'scroll'
		scrollid = GameObj.right_hand.id
	elsif GameObj.left_hand.type == 'scroll'
		scrollid = GameObj.left_hand.id
	end
	
	fput "stow all"
	
	start_script('go2',['bank'])
	wait_while {running?('go2')}
	have_money = dothistimeout "withdraw 20000 silver", 1, /20,000 silvers/
	if have_money
		start_script('go2',['alchemist'])
		wait_while {running?('go2')}
		orderlist = dothis "order", /runestone/
		orderlist = orderlist.split('   ')
		orderlist = orderlist.each.find { |runestone| runestone.include? 'runestone' }
		ordernum = orderlist.scan(/\d+/).first
		fput "order #{ordernum}"
		fput "buy"
	elsif !have_money
		echo "You don't have enough money for runestones!"
		exit
	end
	
	fput "get my brush in #{UserVars.infusesack}"
	draw = dothistimeout "draw #{rune_name} rune on runestone",1, /cleaned off first|Roundtime/
	
	if draw.include? 'cleaned off first'
		if GameObj.right_hand.noun.include? 'stone'
			runeid = GameObj.right_hand.id
			fput "put ##{runeid} in my #{UserVars.infusesack}"
			waitrt?
		end
		
		find_cup = dothistimeout "get cup in my #{UserVars.infusesack}", 1, /You remove|You get|You grab/
		
		if find_cup
			fput "dip my brush in my cup"
		elsif !find_cup
			orderlist = dothis "order", /cup/
			orderlist = orderlist.split('   ')
			orderlist = orderlist.each.find { |cup| cup.include? 'cup' }
			ordernum = orderlist.scan(/\d+/).first
			fput "order #{ordernum}"
			fput "buy"
			fput "dip brush in my cup"
		end
		
		fput "put cup in my #{UserVars.infusesack}"

		find_ink = dothistimeout "get ink in my #{UserVars.infusesack}", 1, /You remove | You get | You grab/

		if find_ink
			fput "dip my brush in my ink"
		elsif !find_ink
			orderlist = dothis "order", /ink/
			orderlist = orderlist.split('   ')
			orderlist = orderlist.each.find { |ink| ink.include? 'ink' }
			ordernum = orderlist.scan(/\d+/).first
			fput "order #{ordernum}"
			fput "buy"
			fput "dip brush in my ink"
		end

		fput "put ink in my #{UserVars.infusesack}"			
		fput "get ##{runeid}"
		fput "draw #{rune_name} rune on runestone"
	end
	
	waitrt?
	fput "put brush in my #{UserVars.infusesack}"
	
	start_script('go2',['bank'])
	wait_while{running?('go2')}
	fput "deposit all"
	start_script('go2',[return_room])
	wait_while{running?('go2')}
	
	fput "swap"
	fput "get ##{scrollid}"
	
end	

def find_rune(rune_name)
	find_rune = dothis "rummage in my #{UserVars.infusesack} runestone #{rune_name}", /drawn on it|can't seem to locate/
	if find_rune.include? "can't seem to locate"
		make_rune(rune_name, Room.current.id)
	elsif find_rune.include? "drawn on it"
		return true
	else
		return false
	end
end

def check_scroll(scroll_id)

	reading_scroll = true
	max_lines = 7
	curr_lines = 0
	curr_spell = 0
	curr_scroll_info = Array.new
	first = true
	
	find_rune("odeir'cos")
	fput "wave runestone at ##{GameObj.right_hand.id}"
	
	waitfor "you sense"
	line = ""
	
	while(reading_scroll)
	
		# wait 1s for next scroll line
		line = matchtimeout 1, "\\(", "unreadable"	
		if(line =~ /\(|unreadable/)
			spell = line[/\(([0-9]+)\)| ([0-9]*) unreadable/, 1]
			spell_name = line[/\([0-9]+\) (.*)/, 1]
			spell = spell.to_i
			if(spell < 100 && spell > 1) 
				spell_name = "unreadable spells"
			elsif(spell < 100 && spell < 2)
				spell_name = "unreadable spell"
			end
			if(spell != nil && spell_name != nil)
				spell_info = "#{spell},#{spell_name}"	
				curr_scroll_info[curr_spell] = spell_info
				curr_spell = curr_spell + 1
			end
		else
			reading_scroll = false
		end
	end
	
	fput "put ##{GameObj.left_hand.id} in my #{UserVars.infusesack}"
	
	spell_unlocked = []
	spell_locked = []
	unlocked = []
	
	scroll_id.each { |id|
		if id.length <= 4
			curr_scroll_info.each { |scroll_line|
				if scroll_line.include? id
					if scroll_line.include? 'potential'
						spell_unlocked << scroll_line.scan(/\d+/).first
					else
						spell_locked << scroll_line.scan(/\d+/).first
					end
				end
			}
			
			if spell_unlocked.include? id
				if !spell_locked.include? id
					unlocked << true
				else
					unlocked << false
				end
			else
				unlocked << false
			end	
		end
	}

	waitcastrt?
	return unlocked

end

def unlock_spells(spell_list)

	if UserVars.infuse_level == 'max'
		find_rune("quiss'fyn")
	elsif UserVars.infuse_level == 'level'
		maxspell = 0
		spell_list.each { |max|
			if max.to_i % 100 > maxspell
				maxspell = max.to_i % 100
			end
		}
		if maxspell < 6
			find_rune("beiron'fyn")
		elsif maxspell > 5 && maxspell < 11
			find_rune("erikar'fyn")
		elsif maxspell > 10 && maxspell < 16
			find_rune("ikar'fyn")
		else
			find_rune("quiss'fyn")
		end
	end
	
	waved = dothistimeout "wave #{GameObj.left_hand} at my #{GameObj.right_hand}", 1, /but nothing else happens|somehow been altered/
	fput "put ##{GameObj.left_hand.id} in my #{UserVars.infusesack}"
	waitcastrt?
	
	if waved.include? 'but nothing else happens'
		echo "Scroll locked, or fully charged."
	elsif waved.include? 'somehow been altered'
		checked = check_scroll(spell_list)
		if checked.include? false
			unlock_spells(spell_list)
		else
			return true
		end
	else
		return false
	end
	
end

def infuse_scroll
	
	wait_until { mana > 20 }

	infuse_line = dothistimeout "infuse my #{GameObj.right_hand}", 1, /glows dimly for a moment|mana dissipates|You are not prepared to infuse that/
	waitcastrt?
	if infuse_line.include? 'grows cold'
		echo "Scroll locked!!"
	elsif infuse_line.include? 'not prepared to infuse'
		echo "Scroll locked!!"
	elsif infuse_line.include? 'mana dissipates'
		echo "Scroll fully infused!"
	elsif infuse_line.include? 'cracks slightly and then shatters'
		find_rune("ag'loenar")
		infuse_scroll
	elsif infuse_line.include? 'You strain to harness'
		echo "You appear to be struggling with infusing this scroll, if you want to continue nod within the next 10 seconds"
		continue = matchtimeout 10, "You nod"
		if continue
			infuse_scroll
		end
	else
		infuse_scroll
	end
	
end

if UserVars.infusesack
	if UserVars.infusesack.length < 3
		echo "You must define an infusesack - ;vars set infusesack = <container name>"
		exit
	end
else	
	echo "You must define an infusesack - ;vars set infusesack = <container name>"
	exit
end

if UserVars.infuse_level.to_s != 'max'
	if UserVars.infuse_level != 'level'
		echo "You must define an infuse level -- ;vars set infuse_level = max or level"
		echo "Please see the script info for more information the setting"
		exit
	end
end

if script.vars[1] == 'unlock'
	
	if !GameObj.right_hand
		echo "No scroll to unlock!  Make sure you have a scroll in your right hand."
		exit
	end
		
	checkscroll = []
	script.vars.each { |var|
		if var.length <= 4 && var.to_i > 0
			checkscroll << read_scroll(var)
		end
	}

	if checkscroll.include? false
		echo "Scroll is missing specified spell number!"
	else
		unlock_spells(script.vars)
	end

elsif script.vars[1] == 'infuse'

	if !GameObj.right_hand.noun
		echo "No scroll to infuse!  Make sure you have a scroll in your right hand."
		exit
	end

	find_rune("ag'loenar")
	infusescroll = "#" + GameObj.right_hand.id
	Spell[714].cast(infusescroll)
	waitcastrt?
	infuse_scroll
	fput "put ##{GameObj.right_hand.id} in my #{UserVars.infusesack}"
	fput "put ##{GameObj.left_hand.id} in my #{UserVars.infusesack}"
	
end