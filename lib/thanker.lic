# QUIET
=begin
	Thanking Tool and Tip Tracker!
	Created By: Vailan
	Date:       12-06-2020
	
	          author: Vailan (Vailan#0875 on discord)
            game: GS
            tags: empath, heal, healing, tips
        		required: Lich >= 4.6.4
         		version: 2020.12.06.1
	
	The intent of this application is to allow you to be polite in a busy situation as well as to track
	the tips received from people over time in a panel that can be displayed in the gui and show their 10 most recent tips
		in order from oldest to newest.
	
	It will continue to track all tips for the session in a panel so if you have had 20 tips from different people it will show the last 10 but..
		If the first tipper returns it will show their total tips and last tip as the newest entry at the bottom of the list.
	
	The Thanker Tip tracking panel also displays the total for all tips received.
	
	While originally intended for an empath this could be used by any tipped profession trying to respond or just track their tips
	
	The auto response can be disabled in the settings and the tip tracking pane can be hidden as well just like any other panel
	
	";thanker setup" will display a gui for setting up the below properities of the application
		1. enable/disable auto responding in appreciation for received coins
		2. default thank you message
		3. enable/disable random thank you message
		4. Configure four random messages to use when thanking someone
		5. Set thresholds for silver received and what emotions to use when telling the person tipping thank you
	
	If you want to use different emotives for how you say things you can edit the "ways_to_thank" to modify or add additional items.
	These changes will show up int he drop down lists under ";thanker setup" but if modified ensure they are legitimate moods for the "say (verb)"
	
	Special shout out to UberBar, UberSpells and Uberfletch and their collective contributors, which helped me figure out how to do a lot of this 

	********change log***********
	2020.04.27 - Initial publication
	2020.06.29 - Added a setting to allow ignoring individuals (like your alts)
	2020.12.06 - Fixed the Commageddon issue with parsing received silvers
	
	
	***********todo**************
	-See if there is a way to embed buttons or links into the panel (like a clear button)
	-See if there is a way to toggle the autoresponse without stopping to keep the history persisted during a session
	-Look into consoldiating the 3 hashes into a single array hash
	
	*********known issues********
	-At this time I am not "testing" the emotions used for saying thank you and have a simple list 5 that i know work. I might add more.
	-There is no wizard version at this time
	-If the number get into 6 digits each the display gets a little off kilter in the default sizing.
	

=end

VERSION = "2020.12.06.1"

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in Thanker"
  respond " This version is specific to the Stormfront frontend"
 	respond ""
  respond ""
  respond " Closing now"
  respond ""
  exit
end


#<name> just gave you <number of coins> coins which you quickly pocket.
settings = CharSettings.to_hash
settings['EnableAutoThank'] ||= false
settings['PrimaryThank'] ||= "Thank ye muchly"
settings['RandomThankEnabled'] ||= false
settings['RandomThank1'] ||= "Your gift twas most appreciated"
settings['RandomThank2'] ||= "May your adventures bring you fame and fortune"
settings['RandomThank3'] ||= "The give you gave shall be put to good use"
settings['RandomThank4'] ||= "My your path be clear and rewards fruitful"
settings['Thank0SilverLimit'] ||= "1000"
settings['Thank0Tone'] ||= 0
settings['Thank1SilverLimit'] ||= "2000"
settings['Thank1Tone'] ||= 0
settings['Thank2SilverLimit'] ||= "5000"
settings['Thank2Tone'] ||= 0
settings['Thank3SilverLimit'] ||= "10000"
settings['Thank3Tone'] ||= 0
settings['Thank4Tone'] ||= 0
settings['doNotThankList'] ||= ""
	
trackedtips = Hash.new("tips")
trackedtimes = Hash.new("times")
lasttip = Hash.new("lasttip")	
	
ways_to_thank = {
	0 => '',
	1	=> 'kind',		
	2	=> 'grateful',
	3	=> 'emphatic ',
	4	=> 'surprised ',
	5 => 'embarrassed ',
}


def check_settings(settings)
		#attempt some error checking
		warning = ""
		critical_warning = ""
		
		if settings['Thank1SilverLimit'].to_i < settings['Thank0SilverLimit'].to_i 
			critical_warning += "Your threshold for Tier 1 Silver(#{settings['Thank1SilverLimit']}) is lower than basic silver(#{settings['Thank0SilverLimit']}).\r\n"
		
		end
		if settings['Thank2SilverLimit'].to_i < settings['Thank1SilverLimit'].to_i 
			critical_warning += "Your threshold for Tier 2 Silver(#{settings['Thank2SilverLimit']}) is lower than Tier 1 silver(#{settings['Thank1SilverLimit']}).\r\n"
		
		end
		if settings['Thank3SilverLimit'].to_i < settings['Thank2SilverLimit'].to_i 
			critical_warning += "Your threshold for Tier 3 Silver(#{settings['Thank3SilverLimit']}) is lower than Tier 2 silver(#{settings['Thank2SilverLimit']}).\r\n"
		end
		
		
		
		if critical_warning.length > 0
			if !$fake_stormfront
				puts "<output class=\"mono\"/>#{monsterbold_start}#{"Errors Preventing Operation"}#{monsterbold_end}\r\n<output class=\"\"/>"
				puts "<output class=\"mono\"/>#{monsterbold_start}#{critical_warning}#{monsterbold_end}\r\n<output class=\"\"/>"
			else
				puts "#{monsterbold_start}#{"Errors Preventing Operation"}#{monsterbold_end}"
				puts "#{monsterbold_start}#{critical_warning}#{monsterbold_end}"
			end
			
		end
		if warning.length > 0
			if !$fake_stormfront
				puts "<output class=\"mono\"/>#{monsterbold_start}#{"Warnings"}#{monsterbold_end}\r\n<output class=\"\"/>"
				puts "<output class=\"mono\"/>#{monsterbold_start}#{warning}#{monsterbold_end}\r\n<output class=\"\"/>"
			else
				puts "#{monsterbold_start}#{"Warnings"}#{monsterbold_end}"
				puts "#{monsterbold_start}#{warning}#{monsterbold_end}"
			end
			
		end
		if critical_warning.length > 0
			return false
		else
			return true
		end
		
end

setup = proc {
	
	
	
	gtk_global = Hash.new
	window = window_action = nil
	Gtk.queue {
		ttips = Gtk::Tooltips.new.enable
		ttips_text = {
			'EnableAutoThank' => 'If this is off you will not automatically respond but will still track tips',
			'PrimaryThank' => 'If you choose not to use random phrases for thankign this one will always be picked',
			'RandomThankEnabled' => 'This will enable using Random thanks messages from your list',
			'RandomThank1' => 'This is an additional thinking response option if using random',
			'RandomThank2' => 'This is an additional thinking response option if using random',
			'RandomThank3' => 'This is an additional thinking response option if using random',
			'RandomThank4' => 'This is an additional thinking response option if using random',
			'Thank0SilverLimit' => 'What is the threshold for using the minimum tone to say thank you',
			'Thank0Tone' => 'Minimum tone to be used for appreciation (if blank will just say what we ae going to say)',
			'Thank1SilverLimit' => 'What is the threshold for the next level of thanking someone',
			'Thank1Tone' => 'Tone used for thanking someone above the basic level',
			'Thank2SilverLimit' => 'What is the threshold for the 2nd tier of thanking someone',
			'Thank2Tone' => 'Tone used for thanking someone at the 2nd tier of appreciation',
			'Thank3SilverLimit' => 'What is the threshold for the 3rd tier of thanking someone',
			'Thank3Tone' => 'Tone used for thanking someone at the 3rd tier of appreciation',
			'Thank4Tone' => 'Tone used for thinking somone who exceeds all of your expectations'	,
			'doNotThankList' => 'Comma Separated list of people to ignore for thank you messages'
			
		}
		
		gtk_global['EnableAutoThank'] = Gtk::CheckButton.new.set_active(settings['EnableAutoThank'])
		gtk_global['PrimaryThank'] = Gtk::Entry.new.set_text(settings['PrimaryThank'])
		gtk_global['RandomThankEnabled'] = Gtk::CheckButton.new.set_active(settings['RandomThankEnabled'])
		gtk_global['RandomThank1'] = Gtk::Entry.new.set_text(settings['RandomThank1'])
		gtk_global['RandomThank2'] = Gtk::Entry.new.set_text(settings['RandomThank2'])
		gtk_global['RandomThank3'] = Gtk::Entry.new.set_text(settings['RandomThank3'])
		gtk_global['RandomThank4'] = Gtk::Entry.new.set_text(settings['RandomThank4'])
		gtk_global['Thank0SilverLimit'] = Gtk::Entry.new.set_text(settings['Thank0SilverLimit'].to_s)
		gtk_global['Thank0Tone'] = Gtk::ComboBox.new(is_text_only = true)
		gtk_global['Thank1SilverLimit'] = Gtk::Entry.new.set_text(settings['Thank1SilverLimit'].to_s)
		gtk_global['Thank1Tone'] = Gtk::ComboBox.new(is_text_only = true)
		gtk_global['Thank2SilverLimit'] = Gtk::Entry.new.set_text(settings['Thank2SilverLimit'].to_s)
		gtk_global['Thank2Tone'] = Gtk::ComboBox.new(is_text_only = true)
		gtk_global['Thank3SilverLimit'] = Gtk::Entry.new.set_text(settings['Thank3SilverLimit'].to_s)
		gtk_global['Thank3Tone'] = Gtk::ComboBox.new(is_text_only = true)
		gtk_global['Thank4Tone'] = Gtk::ComboBox.new(is_text_only = true)
		gtk_global['doNotThankList'] = Gtk::Entry.new.set_text(settings['doNotThankList'])
		#use paints array to form combox
		#begin skipping for now
		x = 0
		while x < ways_to_thank.length
			gtk_global['Thank0Tone'].append_text(ways_to_thank[x])
			gtk_global['Thank1Tone'].append_text(ways_to_thank[x])
			gtk_global['Thank2Tone'].append_text(ways_to_thank[x])
			gtk_global['Thank3Tone'].append_text(ways_to_thank[x])
			gtk_global['Thank4Tone'].append_text(ways_to_thank[x])
			x += 1
		end
		gtk_global['Thank0Tone'].set_active(settings['Thank0Tone']) #have to set active after apending
		gtk_global['Thank1Tone'].set_active(settings['Thank1Tone']) #have to set active after apending
		gtk_global['Thank2Tone'].set_active(settings['Thank2Tone']) #have to set active after apending
		gtk_global['Thank3Tone'].set_active(settings['Thank3Tone']) #have to set active after apending
		gtk_global['Thank4Tone'].set_active(settings['Thank4Tone']) #have to set active after apending
		
		
		ttips_text.each_pair { |widget,tip|
			if widget = gtk_global[widget]# || gtk_locals[widget]
				ttips.set_tip(widget,tip,'')
			end
		}
		
		window = Gtk::Window.new
		window.title = "Thanker #{VERSION}"
		window.border_width = 3
		window.resizable = true
		#window.resize(10, 10)
		
		settings_page = Gtk::VBox.new(false,1).set_border_width(3)
		vb_pg1_1 = Gtk::VBox.new(false,1).set_border_width(3)
		fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Settings </b></big>'))
		fr_pg1_1.add(vb_pg1_1)
		settings_page.pack_start(fr_pg1_1,false)

		#random note to self width will be ignored if text is longer
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enable Automatic Thank Msg? : ')).set_width_request(150))
		hb.pack_start(gtk_global['EnableAutoThank'],false)
		vb_pg1_1.pack_start(hb,false)

		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Primary Thank Msg : ')).set_width_request(150))
		hb.pack_start(gtk_global['PrimaryThank'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enable Random Thank Msg? : ')).set_width_request(150))
		hb.pack_start(gtk_global['RandomThankEnabled'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Random Thank Msg #1 : ')).set_width_request(150))
		hb.pack_start(gtk_global['RandomThank1'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Random Thank Msg #2 : ')).set_width_request(150))
		hb.pack_start(gtk_global['RandomThank2'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Random Thank Msg #3 : ')).set_width_request(150))
		hb.pack_start(gtk_global['RandomThank3'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Random Thank Msg #4 : ')).set_width_request(150))
		hb.pack_start(gtk_global['RandomThank4'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Basic Tone : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank0Tone'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Basic Silver Limit : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank0SilverLimit'],false)
		vb_pg1_1.pack_start(hb,false)
	
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Tier 1 Tone : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank1Tone'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Tier 1 Silver Limit : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank1SilverLimit'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Tier 2 Tone : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank2Tone'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Tier 2 Silver Limit : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank2SilverLimit'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Tier 3 Tone : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank3Tone'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Tier 3 Silver Limit : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank3SilverLimit'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Beyond Tiers Tone : ')).set_width_request(150))
		hb.pack_start(gtk_global['Thank4Tone'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ignore List : ')).set_width_request(150))
		hb.pack_start(gtk_global['doNotThankList'],false)
		vb_pg1_1.pack_start(hb,false)
		
			
		
		lbl = Gtk::Label.new.set_markup("Mouse over each box for more help")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_1.pack_start(lbl,false)
		
		hb_saveclose = Gtk::HBox.new(false,1)
		save = Gtk::Button.new('_Save & Close')
		close = Gtk::Button.new('E_xit')
		save.signal_connect('clicked') { window_action = :save }
		close.signal_connect('clicked') { window_action = :done }
		hb_saveclose.pack_start(save,false)
		hb_saveclose.pack_start(close,false)
		vb_pg1_1.pack_start(hb_saveclose,false)
				
		
		# Primary VerticalBox to split up Notebook and Save/Close buttons
		#vb_main = Gtk::VBox.new(false,1)
		#vb_main.border_width = 3
		
		#vb_main.pack_start(nb,false)
		#vb_main.pack_start(hb_saveclose,false)
		
		window.signal_connect('delete_event') { window_action = :exit }
		
		#window.add(vb_main)	
		
		
		window.add(settings_page)
		
		
		
		window.show_all
		window.keep_above = true # On windows keep_above is required AFTER show_all
		
	}
	
	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }
	clean_entry = proc { |entry|
		entry.text = entry.text.strip
		if entry.text.empty?
			entry.text = nil
		end
		
		entry.text
	}
		
	if window_action == :save		
		gtk_global.each_pair { |option,widget|
			
			if widget.class == Gtk::CheckButton
				settings[option] = widget.active?
			elsif widget.class == Gtk::Entry
				settings[option] = clean_entry.call(widget)
			elsif widget.class == Gtk::ComboBox
				settings[option] = widget.active
			else
				echo "error: unknown local widget #{option} [#{widget.class}]"
			end
		}
		check_settings(settings)
		
		echo 'settings saved'
		exit
	else
		echo 'closed without saving'
		exit
	end
}


def thank_person(person,how_to_thank,what_to_say)
	if what_to_say == ""
		what_to_say = "Thank you"
	end
	if how_to_thank == ""
		"say ~common @#{person} #{what_to_say}"
	else
		fput "say ~common :#{how_to_thank} @#{person} #{what_to_say}"
	end
	
	return

end

def tracktippers(person,silver_received,trackedtips,trackedtimes,lasttip)
	#echo "silvers to record are #{silver_received} for #{person}"
	if trackedtips[person] != nil
		#echo "found a current value for #{person} of #{trackedtips[person]}"
		current_silvers = trackedtips[person].to_i
		current_silvers += silver_received.to_i
		trackedtips[person] = current_silvers.to_s
		trackedtimes[person] = Time.now
		#clear the gui to show the update on order
		
		cleargui
	else
		#echo "Value not found for #{person}"
		trackedtips[person] = silver_received.to_s
		trackedtimes[person] = Time.now
	
	end
	echo trackedtimes[person].to_s
	lasttip[person] = silver_received
	trackedtimes.sort_by(&:last).to_h
	echo "#{person} has given you #{trackedtips[person]} total as of....#{trackedtimes[person].to_s}"
end		
	
def watch_for_tip(settings,trackedtips,trackedtimes,lasttip,ways_to_thank)
	#watch for someone giving you coins
	person, silver_received = matchfind "? just gave you ? coins which you quickly pocket."
	silver_received = silver_received.gsub(",","")
	ignoreTipper = false
	ignoreList = settings['doNotThankList'].split(",")
	ignoreList.each {|ignoreName|
		if ignoreName.downcase == person.downcase
			ignoreTipper = true
			break
		end
	
	}
	if ignoreTipper != true
		
		#record the tip
		tracktippers(person,silver_received,trackedtips,trackedtimes,lasttip)	
		
		#update the display to show most recent tips
		update_display(trackedtips,trackedtimes,lasttip)
		
		if settings['EnableAutoThank'] == true
			msg="Thank you"
			if settings['RandomThankEnabled'] != true
				msg = settings['PrimaryThank']
			else
				randommessageindex = rand(0..4)
				if randommessageindex == 0
					msg = settings['PrimaryThank']
					
				elsif randommessageindex == 1
					msg = settings['RandomThank1']
					
				elsif randommessageindex == 2
					msg = settings['RandomThank2']
					
				elsif randommessageindex == 3
					msg = settings['RandomThank3']
					
				elsif randommessageindex == 4
					msg = settings['RandomThank4']
					
				else
					msg = settings['PrimaryThank']
					
				end
				if msg == ""
					msg = "Thank you"
				end
			end
			
			if silver_received.to_i < settings['Thank0SilverLimit'].to_i
				how_to_thank = ways_to_thank[settings['Thank0Tone']]
				#echo "Tone 0"
			elsif silver_received.to_i < settings['Thank1SilverLimit'].to_i
				how_to_thank = ways_to_thank[settings['Thank1Tone']]
				#echo "Tone 1"
			elsif silver_received.to_i < settings['Thank2SilverLimit'].to_i
				how_to_thank = ways_to_thank[settings['Thank2Tone']]
				#echo "Tone 2"
			elsif silver_received.to_i < settings['Thank3SilverLimit'].to_i
				how_to_thank = ways_to_thank[settings['Thank3Tone']]
				#echo "Tone 3"
			else
				how_to_thank = ways_to_thank[settings['Thank4Tone']]
				#echo "Tone 4"
			end
			
			
			thank_person(person,how_to_thank,msg)
		end
end
end

def update_display(trackedtips,trackedtimes,lasttip)
	buffy = 1
	buffx = 1
	sizex = 100
	sizey = 15
	sizebx = 100
	sizerx = 200
	sizey = 15
	#echo trackedtips.length
	openLines = [
		"<openDialog type='dynamic' id='Thanker' title='Thanker' target='Thanker' location='main' height='275' width='190' resident='true'>",
  	"<dialogData id='Thanker'>"]
	finalstring = openLines.join
	anTop = "top"
	temp_trackedtimes = trackedtimes.sort_by{ |k, v| v }.to_h
	#echo "Total of #{temp_trackedtimes.length} tippers tracked"
	
	total_tips = 0
	
	limit_counter = temp_trackedtimes.length
	for tipper in temp_trackedtimes
		if limit_counter <= 10
			anTop = "top"
			tipper_name = tipper[0].to_s
			total_tips += trackedtips[tipper_name].to_i
			tipper_value = trackedtips[tipper_name].to_s.gsub(/\B(?=(...)*\b)/, ',')
			tippednow = lasttip[tipper_name].to_s.gsub(/\B(?=(...)*\b)/, ',')
			#echo tipper_name
			#echo tipper_value
			
			#finalstring += tipper_name
			current_top += buffy
			finalstring += "<label id='loggedtipper_#{tipper_name}' value='#{tipper_name}:'	justify='4' anchor_top='#{anTop}' top='#{current_top}' left='#{buffx+3}' width='#{sizex-24}' height='#{sizey}'/>"
			finalstring += "<label id='loggedtipper_#{tipper_name}value' value='#{tipper_value} (#{tippednow})' justify='6' anchor_left='loggedtipper_#{tipper_name}' width='#{sizerx/2}'	align='e'/>"
			current_top += sizey + buffy		
			anTop =  "loggedtipper__#{tipper_name}"
	 		#finalstring += "<label id='trackedtip_lab_#tip' value='#{trackedtips[tip]}' justify='4' anchor_top='#{anTop}' top='#{buffy}' left='#{buffx}' height='#{sizey}' width='#{sizex}'/>"
		end
		limit_counter -= 1
  end
  #total_tips.to_s.gsub(/\B(?=(...)*\b)/, ',')
 	finalstring += "<label id='loggedtipper_Total' value='Total:'	justify='4' anchor_top='#{anTop}' top='#{current_top}' left='#{buffx+3}' width='#{sizex-24}' height='#{sizey}'/>"
	finalstring += "<label id='loggedtipper_Totalvalue' value='#{total_tips.to_s.gsub(/\B(?=(...)*\b)/, ',')}' justify='6' anchor_left='loggedtipper_Total' width='#{sizerx/2}'	align='e'/>"
		
	finalstring += "</dialogData></openDialog>"
	if finalstring != "<dialogData id='Thanker'></dialogData>"
		puts(finalstring)
		#echo finalstring
	else
		echo "final was empty"
	end
end

def cleargui
	
	openLines = [
		#"<closeDialog type='dynamic' id='Thanker' title='Thanker' target='Thanker' location='main' height='232' width='190' resident='true'>",
  	#"<dialogData id='Thanker' clear='t'></dialogData></closeDialog>"
  	"<closeDialog id='Thanker'/>",
  	"<openDialog type='dynamic' id='Thanker' title='Thanker' target='Thanker' location='main' height='150' resident='true'>",
  	"<dialogData id='Thanker' clear='t'>",
  	"</dialogData>",
  	"</openDialog>",
		"<closeDialog id='Thanker'/>"
  	
  	]
  	
 	clearlines = openLines.join
 	#echo clearlines
 	puts(clearlines) 
end

if variable[0] =~ /setup|config|configure/i
	setup.call
	exit
end

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in Thanker"
  respond " This version is specific to the Stormfront frontend"
  respond ""
  respond " Closing now"
  respond ""
  exit
end
hide_me
cleargui


#openLines = [
#		"<closeDialog type='dynamic' id='Thanker' title='Thanker' target='Thanker' location='main' height='232' width='190' resident='true'>",
#  	"<dialogData id='Thanker' clear='t'></dialogData></closeDialog>"]
  	
# puts(openLines) 
#puts("<closeDialog id='Thanker'/><openDialog type='dynamic' id='Thanker' title='Thanker' target='Thanker' location='main' height='150' resident='true'><dialogData id='Thanker'></dialogData></openDialog>")

# This is the beginning fo the loop to listen for silver being given
if check_settings(settings)
	if settings['EnableAutoThank'] == true
		echo "starting Thanker and will respond to people giving me silvers if enabled"
	end
	echo "initializing tracked tips"
	update_display(trackedtips,trackedtimes,lasttip)
	loop{
		watch_for_tip(settings,trackedtips,trackedtimes,lasttip,ways_to_thank)
		sleep 0.2
	}
else
	echo "There appears to be a problem with your settings"
end



