=begin

	This script collects data from player shops and updates ps.lichproject.org and virilneus.com/shops
	for Gemstone Prime, Platinum, and Shattered

	;playershops
	   collect and upload data for the nearest town

	;playershops here
	   collect and upload data only for the 5 (or fewer) shops in your current room


	         author: Tillmen (tillmen@lichproject.org)
	original author: Azanoth
	           game: Gemstone
	           tags: data
	        version: 0.23
	       required: Lich >= 4.6.15

	changelog:
		0.23 (2017-10-13):
			use the repository script instead of ftp to update ps.lichproject.org
		0.22 (2017-02-25):
			updated room numbers for Platinum
		0.21 (2016-04-03):
			add another workaround for Arroke's broken shop

=end
=begin

		0.20 (2016-01-20):
			pull item name from capacity line of inspect verb if available (because of cobbled shoes)
			add a couple messages to avoid a timeout when looking in items
		0.19 (2015-06-12):
			look inside items
			fix extra blank lines in examine result
		0.18 (2015-04-18):
			don't assume the room you end up in when you exit a shop is the same room you were in when you entered it (because of a broken FWI shop)
		0.17 (2015-01-16):
			change host name
		0.16 (2014-11-06):
			change Platinum Icemule room 23 from 2443 to 3443
		0.15 (2014-10-01):
			don't use Setting on Lich < 4.6

=end

no_upload         = false # for testing
cast_invisibility = true  # so others don't see your spam
refresh_familiar  = true  # so you don't lose your familiar

# $no_skip_read_inspect_exam = true

unless Room.current
	echo 'error: your current room is not in the map database'
	exit
end

unless $SAFE == 0
	echo "error: this script must be trusted to work because it creates and uploads xml files. (;trust #{script.name})"
	exit
end

require 'net/ftp'

unless defined?(Playershops) and Playershops::VERSION == 0.23
	module Playershops
		VERSION = 0.21

		class Town
			attr_accessor :skip_data
			attr_reader :name, :code, :game
			def initialize(args={})
				@name = args[:name]
				@code = args[:code]
				@game = args[:game]
				@skip_data = nil
				@area_list = Array.new
				return self
			end
			def add_area(args)
				area = Area.new(args)
				@area_list.push(area)
				area.town = self
				return area
			end
			def areas
				@area_list
			end
			def next_area
				remaining_area_map_ids = @area_list.find_all { |a| not a.done }.collect { |a| a.map_id }
				if remaining_area_map_ids.empty?
					return nil
				else
					next_area_map_id = Map.current.find_nearest(remaining_area_map_ids)
					area = @area_list.find { |a| a.map_id == next_area_map_id }
					area.done = true
					return area
				end
			end
			def count_items
				total = 0
				@area_list.each { |a| a.shops.each { |s| s.rooms.each { |r| r.containers.each { |c| total += c.items.length } } } }
				return total
			end
			def count_shops
				total = 0
				@area_list.each { |a| total += a.shops.length }
				return total
			end
			def to_virilneus_xml
				doc = REXML::Document.new("<?xml version='1.0' ?>")
				shop_count	    = 0
				item_count	    = 0
				xml_root = doc.add_element("EXTERIOR_ROOMS")
				for area in @area_list
					next if area.shops.empty?
					xml_area = xml_root.add_element("EXTERIOR_ROOM")
					xml_area.attributes['town'] = @code
					xml_area.attributes['exlichid'] = area.map_id
					xml_area.attributes['exxygonid'] = area.xygon_id
					for shop in area.shops
						next if shop.rooms.empty?
						xml_shop = xml_area.add_element("SHOP")
						xml_shop.attributes['noun'] = shop.noun
						xml_shop.attributes['name'] = shop.name
						xml_shop.attributes['town'] = @code
						xml_shop.attributes['exlichid'] = area.map_id
						xml_shop.attributes['exxygonid'] = area.xygon_id
						xml_shop.attributes['shop'] = "#{@code}#{shop_count}"
						for room in shop.rooms
							next if room.containers.empty?
							xml_room = xml_shop.add_element("INTERIOR_ROOM")
							xml_room.attributes['room_name'] = room.name
							xml_room.attributes['shop_name'] = shop.name
							xml_room.attributes['cardinal'] = room.cardinal
							xml_room.attributes['description'] = room.description
							xml_room.attributes['sign_info'] = room.sign_text.gsub('<br />', "\n") # fixme: <br /> really not allowed here?
							xml_room.attributes['town'] = @code
							xml_room.attributes['exlichid'] = area.map_id
							xml_room.attributes['exxygonid'] = area.xygon_id
							xml_room.attributes['shop'] = "#{@code}#{shop_count}"
							xml_room.attributes['shop_room'] = room.cardinal
							for container in room.containers
								next if container.items.empty?
								xml_container = xml_room.add_element("CONTAINER")
								xml_container.attributes['noun'] = container.noun
								xml_container.attributes['look_command'] = "look #{container.adverb}"
								xml_container.attributes['town'] = @code
								xml_container.attributes['exlichid'] = area.map_id
								xml_container.attributes['exxygonid'] = area.xygon_id
								xml_container.attributes['shop'] = "#{@code}#{shop_count}"
								xml_container.attributes['shop_room'] = room.cardinal
								xml_container.attributes['container'] = "#{container.adverb} the #{container.noun}"
								for item in container.items
									xml_item = xml_container.add_element("ITEM")
									xml_item.attributes['noun'] = item.noun
									xml_item.attributes['name'] = item.name.sub(/^the /, '')
									xml_item.attributes['price'] = item.price
									xml_item.attributes['take_item_info'] = item.take_result.to_s
									xml_item.attributes['inspect_item_info'] = item.inspect_result.to_s
									xml_item.attributes['read_item_info'] = item.read_result.to_s
									xml_item.attributes['exam_item_info'] = item.exam_result.to_s
									xml_item.attributes['stormfront_id'] = item.id
									xml_item.attributes['town'] = @code
									xml_item.attributes['exlichid'] = area.map_id
									xml_item.attributes['exxygonid'] = area.xygon_id
									xml_item.attributes['shop'] = "#{@code}#{shop_count}"
									xml_item.attributes['shop_room'] = room.cardinal
									xml_item.attributes['container'] = "#{container.adverb} the #{container.noun}"
									xml_item.attributes['item'] = item_count
									xml_item.attributes['room_name'] = room.name
									item_count += 1
								end
							end
						end
						shop_count += 1
					end
				end
				return doc
			end
			def to_lichproject_xml
				doc = REXML::Document.new("<?xml version='1.0' ?>")
				xml_game = doc.add_element('game')
				if @game == 'GSIV'
					xml_game.attributes['name'] = 'Gemstone Prime'
				elsif @game == 'GSPlat'
					xml_game.attributes['name'] = 'Gemstone Platinum'
				elsif @game == 'GSF'
					xml_game.attributes['name'] = 'Gemstone Shattered'
				else
					xml_game.attributes['name'] = 'Unknown'
				end
				xml_town = xml_game.add_element('town')
				xml_town.attributes['name'] = @name
				for area in @area_list
					xml_area = xml_town.add_element('area')
					xml_area.attributes['xygon_id'] = area.xygon_id
					xml_area.attributes['map_id']  = area.map_id
					for shop in area.shops
						next if shop.rooms.empty?
						xml_shop = xml_area.add_element('shop')
						xml_shop.attributes['name'] = shop.name
						# fixme: add noun to bold on website?
						for room in shop.rooms
							next if room.containers.empty?
							xml_room = xml_shop.add_element('room')
							xml_room.attributes['name']	       = room.name
							xml_room.attributes['direction']   = room.dir
							xml_room.attributes['description'] = room.description
							xml_room.attributes['sign']        = room.sign_text
							for container in room.containers
								next if container.items.empty?
								xml_container = xml_room.add_element('container')
								xml_container.attributes['name'] = "#{container.adverb} the #{container.noun}"
								for item in container.items
									xml_item = xml_container.add_element('item')
									xml_item.attributes['name']    = item.name.sub(/^the /, '')
									xml_item.attributes['noun']    = item.noun
									# fixme: add noun to bold on website?
									xml_item.attributes['price']   = item.price
									xml_item.attributes['take']    = item.take_result
									xml_item.attributes['inspect'] = item.inspect_result
									xml_item.attributes['read']    = item.read_result
									xml_item.attributes['examine'] = item.exam_result
									xml_item.attributes['lookin'] = item.look_in_result
								end
							end
						end
					end
				end
				return doc
			end
		end

		class Area
			attr_reader :map_id, :xygon_id
			attr_accessor :town, :done
			def initialize(args={})
				@map_id = args[:map_id]
				@xygon_id = args[:xygon_id]
				@shop_list = Array.new
				@done = false
				return self
			end
			def add_shop(args)
				shop = Shop.new(args)
				@shop_list.push(shop)
				shop.area = self
				return shop
			end
			def shops
				@shop_list
			end
		end

		class Shop
			attr_reader :name, :noun
			attr_accessor :area
			def initialize(args={})
				@name = args[:name]
				@noun = args[:noun]
				@room_list = Array.new
				return self
			end
			def rooms
				@room_list
			end
			def add_room(args)
				room = Room.new(args)
				@room_list.push(room)
				room.shop = self
				return room
			end
		end

		class Room
			attr_reader :dir, :sign_text
			attr_accessor :description, :name, :shop
			def initialize(args={})
				@dir = args[:dir]
				@container_list = Array.new
				return self
			end
			def cardinal
				change = { 'north' => 'N', 'northeast' => 'NE', 'east' => 'E', 'southeast' => 'SE', 'south' => 'S', 'southwest' => 'SW', 'west' => 'W', 'northwest' => 'NW', nil => 'C' }
				return change[@dir]
			end
			def containers
				@container_list
			end
			def add_container(args)
				container = Container.new(args)
				@container_list.push(container)
				container.room = self
				return container
			end
			def reverse_dir
				reverse = { 'north' => 'south', 'northeast' => 'southwest', 'east' => 'west', 'southeast' => 'northwest', 'south' => 'north', 'southwest' => 'northeast', 'west' => 'east', 'northwest' => 'southeast', 'up' => 'down', 'down' => 'up' }
				return reverse[@dir]
			end
			def read_sign(obj)
				if @sign_text.nil?
					Script.current.want_downstream = false
					Script.current.want_downstream_xml = true
					result = dothistimeout "read ##{obj.id}", 15, /^In the Common language, it reads|There is nothing there to read/
					if result =~ /^In the Common language, it reads/
						in_stream = false
						while (line = get)
							if line =~ /<popStream/
								in_stream = false
								next
							elsif in_stream or line =~ /^<dialogData|^<openDialog|^\d+$/
								next
							elsif line =~ /<pushStream/
								in_stream = true
								next
							elsif line =~ /^<prompt/
								break
							end
							line = line.gsub(/<.*?>/, '')
							next if line.length < 5
							if @sign_text.nil?
								@sign_text = line
							else
								@sign_text.concat "<br />#{line}"
							end
						end
					elsif result.nil?
						Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: read sign timeout: #{obj.name}"
					end
					Script.current.want_downstream_xml = false
					Script.current.want_downstream = true
				end
				return nil
			end
		end

		class Container
			attr_reader :name, :noun, :adverb, :id
			attr_accessor :room
			def initialize(args)
				@id = args[:id]
				@name = args[:name]
				@noun = args[:noun]
				@adverb = args[:adverb]
				@item_list = Array.new
			end
			def items
				@item_list
			end
			def add_item(args)
				if (@id == args[:id]) or (@item_list.any? { |i| i.id == args[:id] })
					return nil
				else
					args ||= Hash.new
					args[:container] = self
					item = Item.new(args)
					@item_list.push(item)
					return item
				end
			end
			def Container.look(obj)
				if obj.noun =~ /^(?:altar|risers|rod|divan|case|pushcart|plank||strongbox|forms|ambo|coffer|crate|cart|bench|pile|sideboard|bookcase|ledge|barrel|slab|tree|worktable|bar|mannequins|pegs|mannequin|desk|display|hooks|stand|shelf|shelves|rack|counter|table)$/
					look_adverb = 'on'
				else
					look_adverb = 'in'
				end
				Script.current.want_downstream = false
				Script.current.want_downstream_xml = true
				look_result = dothistimeout "look #{look_adverb} ##{obj.id}", 20, /^(?:<.*?>)?There is nothing|^(?:<.*?>)?[IO]n the|^(?:<.*?>)?That is closed|^(?:<.*?>)?I could not find/
				Script.current.want_downstream_xml = false
				Script.current.want_downstream = true
				if look_result =~ /^(?:<.*?>)?[IO]n the/
					return look_result
				else
					if look_result.nil? 
						Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look #{look_adverb} container timeout: #{obj.name}"
					elsif look_result =~ /There is nothing/
						Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look #{look_adverb} container: There is nothing: #{obj.name}"
					elsif look_result =~ /That is closed/
						Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look #{look_adverb} container: That is closed: #{obj.name}"
					end
					if look_adverb == 'in'
						look_adverb = 'on'
					else
						look_adverb = 'in'
					end
					Script.current.want_downstream = false
					Script.current.want_downstream_xml = true
					look_result = dothistimeout "look #{look_adverb} ##{obj.id}", 20, /^(?:<.*?>)?There is nothing|^(?:<.*?>)?[IO]n the|^(?:<.*?>)?That is closed|^(?:<.*?>)?I could not find/
					Script.current.want_downstream_xml = false
					Script.current.want_downstream = true
					if look_result =~ /^(?:<.*?>)?[IO]n the/
						return look_result
					else
						if look_result.nil? 
							Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look #{look_adverb} container timeout: #{obj.name}"
						elsif look_result =~ /There is nothing/
							Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look #{look_adverb} container: There is nothing: #{obj.name}"
						elsif look_result =~ /That is closed/
							Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look #{look_adverb} container: That is closed: #{obj.name}"
						end
						return false
					end
				end
			end
		end

		class Item
			attr_reader :id, :name, :noun, :price, :take_result, :inspect_result, :read_result, :exam_result, :look_in_result
			attr_accessor :container
			def initialize(args)
				@id = args[:id]
				@name = args[:name]
				@noun = (args[:noun] || @name.split(' ')[-1])
				@container = args[:container]
				Script.current.want_downstream = false
				Script.current.want_downstream_xml = true

				#
				# @take_result
				#
				result = dothistimeout "get ##{@id}", 20, /^Looking .* will cost [0-9]+ coins/
				if result =~ /will cost ([0-9]+) coins/
					@price = $1
					in_stream = false
					while (line = get)
						if line =~ /<pushStream.*<popStream/
							next
						elsif line =~ /<popStream/
							in_stream = false
							next
						elsif in_stream or line =~ /^<dialogData|^<openDialog|^<component|^<compDef|^\d+$/
							next
						elsif line =~ /<pushStream/
							in_stream = true
							next
						elsif line =~ /^<prompt|have to buy it if you want it/
							break
						end
						line = line.gsub(/<.*?>/, '').strip
						next if line.length < 5
						if(@take_result.nil?)
							@take_result = line
						else
							@take_result.concat "<br />#{line}"
						end
					end
				else
					Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: get item timeout: #{@name}"
				end

				#
				# skip inspect/read/exam if possible
				#
				if ($no_skip_read_inspect_exam != true) and (saved_item = @container.room.shop.area.town.skip_data[@container.room.shop.area.map_id][@container.room.shop.name][@container.room.dir][@container.name]["#{@id}:#{@noun}:#{@price}:#{@take_result}"])
					@name = saved_item[:name]
					@inspect_result = saved_item[:inspect_result]
					@read_result = saved_item[:read_result]
					@exam_result = saved_item[:exam_result]
					@look_in_result = saved_item[:look_in_result]
					Script.current.want_downstream_xml = false
					Script.current.want_downstream = true
					return self
				end

				#
				# @inspect_result
				#
				result = dothistimeout "inspect ##{@id}", 15, /^You carefully inspect|^You determine|careful inspection|^You carefully count|goat|^You must be holding|^The (?:<.*?>)?#{@noun}/
				if result =~ /You carefully inspect (.*?)\.|^You determine|careful inspection|You carefully count|goat|^The (?:<.*?>)?#{@noun}/
					temp_name = $1
					if temp_name && (result !~ /You carefully inspect your/) # include long descriptions - fixed for make-up phial/vial bug
						@name = temp_name.gsub(/<.*?>/, '')
					end
					if result =~ /^The (?:<.*?>)?#{@noun}/
						@inspect_result = result.gsub(/<.*?>/, '').strip
					end
					in_stream = false
					while (line = get)
						if line =~ /<pushStream.*<popStream/
							next
						elsif line =~ /<popStream/
							in_stream = false
							next
						elsif in_stream or line =~ /^<dialogData|^<openDialog|^<component|^<compDef|^\d+$/
							next
						elsif line =~ /<pushStream/
							in_stream = true
							next
						elsif line =~ /^<prompt/
							break
						end
						line = line.gsub(/<.*?>/, '').strip
						next if line.length < 5
						if line =~ /^You estimate that (.*?) can store/
							# for cobbled shoes
							@name = $1
						end
						if(@inspect_result.nil?)
							@inspect_result = line
						else   
							@inspect_result.concat "<br />#{line}"
						end
					end
				elsif result.nil?
					Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: inspect item timeout: #{@name}"
				end

				#
				# @read_result
				#
				result = dothistimeout "read ##{@id}", 15, /^It reads|^An? .*? label .*? reads|^Etched into|^You focus|^You try to read|^It takes you a moment|^(?:A|In|The) .*? reads|^You quickly recognize|^Inscribed|^Engraved|^Picking .*? read|^A .*? is inscribed|^Wound .*? tag reading|^There is nothing there to read|^You cannot read|^You'll have to hold|^You need to hold|^You need to be holding|^You should be holding|^You're not holding|^But (?:you're|you are) not holding|^It is difficult to read|^The script is so tiny, you will have to hold|^Try holding|^The .*? has nothing written|^You .*? nothing written|^The .*? (?:appears to be|is) blank|^The .*? is closed|^But it's closed!|^Your .*? doesn't make for good reading|^You need to open .*? before you can read it|(?:First|Second|Third|Fourth) Place|Current Flight Schedule|Gone Fishin|First Elanthian Artisan's Faire|^<d cmd="draw pattern [0-9]+">[0-9]+\.\s\s.*<\/d>/
				if result =~ /^It reads|^A .*? label .*? reads|^Etched into|^You focus|^You try to read|^It takes you a moment|^(?:A|In|The) .*? reads|^You quickly recognize|^Inscribed|^Engraved|^Picking .*? read|^A .*? is inscribed|^Wound .*? tag reading|(?:First|Second|Third|Fourth) Place|Current Flight Schedule|Gone Fishin|First Elanthian Artisan's Faire|^<d cmd="draw pattern [0-9]+">[0-9]+\.\s\s.+<\/d>/
					@read_result = result.gsub(/<.*?>/, '').strip
					in_stream = false
					while (line = get) and (line !~ /^<prompt/)
						if line =~ /<pushStream.*<popStream/
							next
						elsif line =~ /<popStream/
							in_stream = false
							next
						elsif in_stream or line =~ /^<dialogData|^<openDialog|^<component|^<compDef|^\d+$|^<d cmd="draw pattern [0-9]+">[0-9]+\.\s\s<\/d>/
							next
						elsif line =~ /<pushStream/
							in_stream = true
							next
						elsif line =~ /^<prompt/
							break
						end
						line = line.gsub(/<.*?>/, '')
						next if line.length < 5
						@read_result.concat "<br />#{line.strip}"
					end
				elsif result.nil?
					Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: read item timeout: #{@name}"
				end

				#
				# @exam_result
				#
				Spell.lock_cast
				exam_time = Time.now
				clear
				put "exam ##{@id}"
				in_stream = false
				loop {
					line = get?
					if line.nil?
						if (Time.now - exam_time) > 20
							Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: exam item timeout: #{@name}"
							break
						end
						sleep 0.1
						next
					elsif line =~ /<pushStream.*<popStream/
						next
					elsif line =~ /<popStream/
						@exam_result = nil # could have started listening mid-stream
						in_stream = false
						next
					elsif in_stream or line =~ /^<dialogData|^<openDialog|^<component|^<compDef|^\d+$|^Your <.*?>disk<.*?> arrives|^You notice that things have returned to their normal speed\./
						next
					elsif line =~ /<pushStream/
						# stream could start before the results of the exam; all streams are unrelated to the exam verb
						in_stream = true
						next
					elsif line =~ /^<prompt/
						if @exam_result.nil?
							next
						else
							break
						end
					elsif line =~ /^You see nothing unusual\.|It is difficult to see .*? from this distance/
						break
					end
					line = line.gsub(/<.*?>/, '')
					next if line.length < 5
					if @exam_result.nil?
						@exam_result = line.strip
					else
						@exam_result.concat "<br />#{line.strip}"
					end
				}
				Spell.unlock_cast
			
				#
				# @look_in_result
				#
				result = dothistimeout "look in ##{@id}", 15, /^There is nothing in there\.|^That is closed\.|^Inside the|^The .*? bezel setting is empty\.|^There is nothing affixed|^There is (?:just a little left|a small amount|a good bit left)|^You see nothing unusual\.|^It is|#{@noun}|^The .*? appears to be empty\.$|^You see nothing unusual besides/
				if result =~ /^Inside the|^The .*? bezel setting is empty\.|^There is nothing affixed|^There is (?:just a little left|a small amount)|#{@noun}/
					lir = result.gsub(/<inv.+inv>/, '').gsub(/<.*?>/, '').strip
					unless (lir =~ /^There is nothing in there\.|shut too tightly to see its contents|^It takes you a moment to focus on|^It is thoroughly colonized with mold|^The .*? appears to be empty\.$/) or (lir == @exam_result)
						@look_in_result = lir
					end
				elsif result.nil?
					Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: look in item timeout: #{@name}"
				end

				Script.current.want_downstream_xml = false
				Script.current.want_downstream = true
				return self
			end
		end

		def Playershops.format_seconds(seconds)
			minutes = seconds.to_i / 60
			seconds = seconds.to_i % 60
			hours = minutes / 60
			minutes = minutes % 60
			output = Array.new
			if hours > 0
				output.push "#{hours} hour#{'s' if hours > 1}"
			end
			if minutes > 0
				output.push "#{minutes} minute#{'s' if minutes > 1}"
			end
			if seconds > 0
				output.push "#{seconds} second#{'s' if seconds > 1}"
			end
			output.join(', ')
		end
	end
end

town_list = Array.new

if (XMLData.game == 'GSIV')

	town = Playershops::Town.new(:name => "Wehnimer's Landing", :code => 'wl', :game => XMLData.game)
	town.add_area(:map_id =>  337, :xygon_id =>  1)
	town.add_area(:map_id =>  375, :xygon_id =>  2)
	town.add_area(:map_id => 3878, :xygon_id =>  3)
	town.add_area(:map_id =>  373, :xygon_id =>  4)
	town.add_area(:map_id =>  374, :xygon_id =>  5)
	town.add_area(:map_id =>  338, :xygon_id =>  6)
	town.add_area(:map_id =>  370, :xygon_id =>  7)
	town.add_area(:map_id =>  371, :xygon_id =>  8)
	town.add_area(:map_id =>  369, :xygon_id =>  9)
	town.add_area(:map_id =>  372, :xygon_id => 10)
	town.add_area(:map_id =>  339, :xygon_id => 11)
	town.add_area(:map_id =>  366, :xygon_id => 12)
	town.add_area(:map_id =>  367, :xygon_id => 13)
	town.add_area(:map_id =>  365, :xygon_id => 14)
	town.add_area(:map_id =>  368, :xygon_id => 15)
	town.add_area(:map_id =>  340, :xygon_id => 16)
	town.add_area(:map_id =>  362, :xygon_id => 17)
	town.add_area(:map_id =>  363, :xygon_id => 18)
	town.add_area(:map_id =>  361, :xygon_id => 19)
	town.add_area(:map_id =>  364, :xygon_id => 20)
	town.add_area(:map_id =>  341, :xygon_id => 21)
	town.add_area(:map_id =>  358, :xygon_id => 22)
	town.add_area(:map_id =>  359, :xygon_id => 23)
	town.add_area(:map_id =>  357, :xygon_id => 24)
	town.add_area(:map_id =>  360, :xygon_id => 25)
	town.add_area(:map_id =>  342, :xygon_id => 26)
	town.add_area(:map_id =>  354, :xygon_id => 27)
	town.add_area(:map_id =>  355, :xygon_id => 28)
	town.add_area(:map_id =>  353, :xygon_id => 29)
	town.add_area(:map_id =>  356, :xygon_id => 30)
	town.add_area(:map_id =>  343, :xygon_id => 31)
	town.add_area(:map_id =>  350, :xygon_id => 32)
	town.add_area(:map_id =>  351, :xygon_id => 33)
	town.add_area(:map_id =>  349, :xygon_id => 34)
	town.add_area(:map_id =>  352, :xygon_id => 35)
	town.add_area(:map_id =>  344, :xygon_id => 36)
	town.add_area(:map_id =>  345, :xygon_id => 37)
	town.add_area(:map_id =>  346, :xygon_id => 38)
	town.add_area(:map_id =>  347, :xygon_id => 39)
	town.add_area(:map_id =>  348, :xygon_id => 40)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Solhaven", :code => 'vo', :game => XMLData.game)
	town.add_area(:map_id => 9008, :xygon_id =>  1)
	town.add_area(:map_id => 9009, :xygon_id =>  2)
	town.add_area(:map_id => 9010, :xygon_id =>  3)
	town.add_area(:map_id => 9011, :xygon_id =>  4)
	town.add_area(:map_id => 9012, :xygon_id =>  5)
	town.add_area(:map_id => 9013, :xygon_id =>  6)
	town.add_area(:map_id => 9014, :xygon_id =>  7)
	town.add_area(:map_id => 9015, :xygon_id =>  8)
	town.add_area(:map_id => 9016, :xygon_id =>  9)
	town.add_area(:map_id => 9017, :xygon_id => 10)
	town.add_area(:map_id => 9018, :xygon_id => 11)
	town.add_area(:map_id => 9019, :xygon_id => 12)
	town.add_area(:map_id => 9020, :xygon_id => 13)
	town.add_area(:map_id => 9021, :xygon_id => 14)
	town.add_area(:map_id => 9022, :xygon_id => 15)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Icemule Trace", :code => 'imt', :game => XMLData.game)
	town.add_area(:map_id => 2372, :xygon_id =>  1)
	town.add_area(:map_id => 2373, :xygon_id =>  2)
	town.add_area(:map_id => 2374, :xygon_id =>  3)
	town.add_area(:map_id => 2376, :xygon_id =>  4)
	town.add_area(:map_id => 2377, :xygon_id =>  5)
	town.add_area(:map_id => 2379, :xygon_id =>  6)
	town.add_area(:map_id => 3447, :xygon_id =>  7)
	town.add_area(:map_id => 3446, :xygon_id =>  8)
	town.add_area(:map_id => 3444, :xygon_id =>  9)
	town.add_area(:map_id => 3442, :xygon_id => 10)
	town.add_area(:map_id => 3441, :xygon_id => 11)
	town.add_area(:map_id => 3439, :xygon_id => 12)
	town.add_area(:map_id => 3440, :xygon_id => 13)
	town.add_area(:map_id => 2310, :xygon_id => 14)
	town.add_area(:map_id => 2311, :xygon_id => 15)
	town.add_area(:map_id => 2312, :xygon_id => 16)
	town.add_area(:map_id => 2314, :xygon_id => 17)
	town.add_area(:map_id => 2315, :xygon_id => 18)
	town.add_area(:map_id => 2316, :xygon_id => 19)
	town.add_area(:map_id => 2317, :xygon_id => 20)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Zul Logoth", :code => 'zul', :game => XMLData.game)
	town.add_area(:map_id => 9423, :xygon_id => 1)
	town.add_area(:map_id => 9424, :xygon_id => 2)
	town.add_area(:map_id => 9425, :xygon_id => 3)
	town.add_area(:map_id => 9426, :xygon_id => 4)
	town.add_area(:map_id => 9427, :xygon_id => 5)
	town.add_area(:map_id => 9428, :xygon_id => 6)
	town_list.push(town)

	town = Playershops::Town.new(:name => "River's Rest", :code => 'rr', :game => XMLData.game)
	town.add_area(:map_id => 10873, :xygon_id => 1)
	town.add_area(:map_id => 10877, :xygon_id => 2)
	town.add_area(:map_id => 10876, :xygon_id => 3)
	town.add_area(:map_id => 10875, :xygon_id => 4)
	town.add_area(:map_id => 10874, :xygon_id => 5)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Teras Isle", :code => 'kd', :game => XMLData.game)
	town.add_area(:map_id => 1973, :xygon_id => 1)
	town.add_area(:map_id => 1974, :xygon_id => 2)
	town.add_area(:map_id => 1975, :xygon_id => 3)
	town.add_area(:map_id => 1976, :xygon_id => 4)
	town.add_area(:map_id => 1977, :xygon_id => 5)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Ta'Illistim", :code => 'ti', :game => XMLData.game)
	town.add_area(:map_id =>   641, :xygon_id =>  1)
	town.add_area(:map_id =>   642, :xygon_id =>  2)
	town.add_area(:map_id =>   734, :xygon_id =>  3)
	town.add_area(:map_id =>   735, :xygon_id =>  4)
	town.add_area(:map_id =>   736, :xygon_id =>  5)
	town.add_area(:map_id =>   737, :xygon_id =>  6)
	town.add_area(:map_id =>   732, :xygon_id =>  7)
	town.add_area(:map_id =>   733, :xygon_id =>  8)
	town.add_area(:map_id =>   731, :xygon_id =>  9)
	town.add_area(:map_id =>   730, :xygon_id => 10)
	town.add_area(:map_id => 16405, :xygon_id => 11)
	town.add_area(:map_id => 16407, :xygon_id => 12)
	town.add_area(:map_id => 16408, :xygon_id => 13)
	town.add_area(:map_id => 16409, :xygon_id => 14)
	town.add_area(:map_id => 16412, :xygon_id => 15)
	town.add_area(:map_id => 16413, :xygon_id => 16)
	town.add_area(:map_id => 16414, :xygon_id => 17)
	town.add_area(:map_id => 16417, :xygon_id => 18)
	town.add_area(:map_id => 16418, :xygon_id => 19)
	town.add_area(:map_id => 16419, :xygon_id => 20)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Ta'Vaalor", :code => 'tv', :game => XMLData.game)
	town.add_area(:map_id => 10462, :xygon_id =>  1)
	town.add_area(:map_id => 10459, :xygon_id =>  2)
	town.add_area(:map_id => 10456, :xygon_id =>  3)
	town.add_area(:map_id => 10453, :xygon_id =>  4)
	town.add_area(:map_id => 10452, :xygon_id =>  5)
	town.add_area(:map_id => 10451, :xygon_id =>  6)
	town.add_area(:map_id => 10463, :xygon_id =>  7)
	town.add_area(:map_id => 10460, :xygon_id =>  8)
	town.add_area(:map_id => 10457, :xygon_id =>  9)
	town.add_area(:map_id => 10454, :xygon_id => 10)
	town.add_area(:map_id => 10441, :xygon_id => 11)
	town.add_area(:map_id => 10450, :xygon_id => 12)
	town.add_area(:map_id => 10449, :xygon_id => 13)
	town.add_area(:map_id => 10448, :xygon_id => 14)
	town.add_area(:map_id => 10447, :xygon_id => 15)
	town.add_area(:map_id => 10464, :xygon_id => 16)
	town.add_area(:map_id => 10461, :xygon_id => 17)
	town.add_area(:map_id => 10458, :xygon_id => 18)
	town.add_area(:map_id => 10455, :xygon_id => 19)
	town.add_area(:map_id => 10443, :xygon_id => 20)
	town.add_area(:map_id => 10444, :xygon_id => 21)
	town.add_area(:map_id => 10445, :xygon_id => 22)
	town.add_area(:map_id => 10446, :xygon_id => 23)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Four Winds Isle", :code => 'fwi', :game => XMLData.game)
	town.add_area(:map_id => 12266, :xygon_id =>  1)
	town.add_area(:map_id =>  3870, :xygon_id =>  2)
	town.add_area(:map_id =>  3869, :xygon_id =>  3)
	town.add_area(:map_id => 12265, :xygon_id =>  4)
	town.add_area(:map_id => 12264, :xygon_id =>  5)
	town.add_area(:map_id => 12263, :xygon_id =>  6)
	town.add_area(:map_id => 12262, :xygon_id =>  7)
	town.add_area(:map_id => 12267, :xygon_id =>  8)
	town.add_area(:map_id => 12268, :xygon_id =>  9)
	town.add_area(:map_id => 12269, :xygon_id => 10)
	town.add_area(:map_id => 12270, :xygon_id => 11)
	town.add_area(:map_id => 12271, :xygon_id => 12)
	town.add_area(:map_id => 12272, :xygon_id => 13)
	town.add_area(:map_id => 12273, :xygon_id => 14)
	town.add_area(:map_id =>  3872, :xygon_id => 15)
	town_list.push(town)
	town = nil

elsif XMLData.game == 'GSPlat'

	town = Playershops::Town.new(:name => "Wehnimer's Landing", :code => 'wl', :game => XMLData.game)
	town.add_area(:map_id =>   337, :xygon_id =>  1)
	town.add_area(:map_id =>   375, :xygon_id =>  2)
	town.add_area(:map_id =>  3878, :xygon_id =>  3)
	town.add_area(:map_id =>   373, :xygon_id =>  4)
	town.add_area(:map_id =>   374, :xygon_id =>  5)
	town.add_area(:map_id =>   338, :xygon_id =>  6)
	town.add_area(:map_id =>   370, :xygon_id =>  7)
	town.add_area(:map_id =>   371, :xygon_id =>  8)
	town.add_area(:map_id =>   369, :xygon_id =>  9)
	town.add_area(:map_id =>   372, :xygon_id => 10)
	town.add_area(:map_id => 25243, :xygon_id => 11)
	town.add_area(:map_id => 25237, :xygon_id => 12)
	town.add_area(:map_id => 25248, :xygon_id => 13)
	town.add_area(:map_id => 25250, :xygon_id => 14)
	town.add_area(:map_id => 25258, :xygon_id => 15)
	town_list.push(town)

	town = Playershops::Town.new(:name => 'Solhaven', :code => 'vo', :game => XMLData.game)
	town.add_area(:map_id => 9008, :xygon_id =>  1)
	town.add_area(:map_id => 9009, :xygon_id =>  2)
	town.add_area(:map_id => 9010, :xygon_id =>  3)
	town.add_area(:map_id => 9011, :xygon_id =>  4)
	town.add_area(:map_id => 9012, :xygon_id =>  5)
	town.add_area(:map_id => 9013, :xygon_id =>  6)
	town.add_area(:map_id => 9014, :xygon_id =>  7)
	town.add_area(:map_id => 9015, :xygon_id =>  8)
	town.add_area(:map_id => 9016, :xygon_id =>  9)
	town.add_area(:map_id => 9017, :xygon_id => 10)
	town.add_area(:map_id => 9018, :xygon_id => 11)
	town.add_area(:map_id => 9019, :xygon_id => 12)
	town.add_area(:map_id => 9020, :xygon_id => 13)
	town.add_area(:map_id => 9021, :xygon_id => 14)
	town.add_area(:map_id => 9022, :xygon_id => 15)
	town_list.push(town)

	town = Playershops::Town.new(:name => 'Icemule Trace', :code => 'imt', :game => XMLData.game)
	town.add_area(:map_id => 2372, :xygon_id =>  1)
	town.add_area(:map_id => 2373, :xygon_id =>  2)
	town.add_area(:map_id => 2374, :xygon_id =>  3)
	town.add_area(:map_id => 2376, :xygon_id =>  4)
	town.add_area(:map_id => 2377, :xygon_id =>  5)
	town.add_area(:map_id => 2379, :xygon_id =>  6)
	town.add_area(:map_id => 3447, :xygon_id =>  7)
	town.add_area(:map_id => 3446, :xygon_id =>  8)
	town.add_area(:map_id => 3444, :xygon_id =>  9)
	town.add_area(:map_id => 3442, :xygon_id => 10)
	town.add_area(:map_id => 3441, :xygon_id => 11)
	town.add_area(:map_id => 3439, :xygon_id => 12)
	town.add_area(:map_id => 3440, :xygon_id => 13)
	town.add_area(:map_id => 2310, :xygon_id => 14)
	town.add_area(:map_id => 2311, :xygon_id => 15)
	town.add_area(:map_id => 2312, :xygon_id => 16)
	town.add_area(:map_id => 2314, :xygon_id => 17)
	town.add_area(:map_id => 2315, :xygon_id => 18)
	town.add_area(:map_id => 2316, :xygon_id => 19)
	town.add_area(:map_id => 2317, :xygon_id => 20)
	town.add_area(:map_id => 2371, :xygon_id => 21)
	town.add_area(:map_id => 2378, :xygon_id => 22)
	town.add_area(:map_id => 3443, :xygon_id => 23)
	town_list.push(town)

	town = Playershops::Town.new(:name => 'Zul Logoth', :code => 'zul', :game => XMLData.game)
	town.add_area(:map_id => 9423, :xygon_id => 1)
	town.add_area(:map_id => 9424, :xygon_id => 2)
	town.add_area(:map_id => 9425, :xygon_id => 3)
	town.add_area(:map_id => 9426, :xygon_id => 4)
	town.add_area(:map_id => 9427, :xygon_id => 5)
	town.add_area(:map_id => 9428, :xygon_id => 6)
	town_list.push(town)

	town = Playershops::Town.new(:name => "River's Rest", :code => 'rr', :game => XMLData.game)
	town.add_area(:map_id => 10873, :xygon_id => 1)
	town.add_area(:map_id => 10877, :xygon_id => 2)
	town.add_area(:map_id => 10876, :xygon_id => 3)
	town.add_area(:map_id => 10875, :xygon_id => 4)
	town.add_area(:map_id => 10874, :xygon_id => 5)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Teras Isle", :code => 'kd', :game => XMLData.game)
	town.add_area(:map_id => 1973, :xygon_id => 1)
	town.add_area(:map_id => 1974, :xygon_id => 2)
	town.add_area(:map_id => 1975, :xygon_id => 3)
	town.add_area(:map_id => 1976, :xygon_id => 4)
	town.add_area(:map_id => 1977, :xygon_id => 5)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Ta'Illistim", :code => 'ti', :game => XMLData.game)
	town.add_area(:map_id => 641, :xygon_id =>  1)
	town.add_area(:map_id => 642, :xygon_id =>  2)
	town.add_area(:map_id => 734, :xygon_id =>  3)
	town.add_area(:map_id => 735, :xygon_id =>  4)
	town.add_area(:map_id => 736, :xygon_id =>  5)
	town.add_area(:map_id => 737, :xygon_id =>  6)
	town.add_area(:map_id => 732, :xygon_id =>  7)
	town.add_area(:map_id => 733, :xygon_id =>  8)
	town.add_area(:map_id => 731, :xygon_id =>  9)
	town.add_area(:map_id => 730, :xygon_id => 10)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Ta'Vaalor", :code => 'tv', :game => XMLData.game)
	town.add_area(:map_id => 10462, :xygon_id =>  1)
	town.add_area(:map_id => 10459, :xygon_id =>  2)
	town.add_area(:map_id => 10456, :xygon_id =>  3)
	town.add_area(:map_id => 10453, :xygon_id =>  4)
	town.add_area(:map_id => 10452, :xygon_id =>  5)
	town.add_area(:map_id => 10451, :xygon_id =>  6)
	town.add_area(:map_id => 10463, :xygon_id =>  7)
	town.add_area(:map_id => 10460, :xygon_id =>  8)
	town.add_area(:map_id => 10457, :xygon_id =>  9)
	town.add_area(:map_id => 10454, :xygon_id => 10)
	town.add_area(:map_id => 10441, :xygon_id => 11)
	town.add_area(:map_id => 10450, :xygon_id => 12)
	town.add_area(:map_id => 10449, :xygon_id => 13)
	town.add_area(:map_id => 10448, :xygon_id => 14)
	town.add_area(:map_id => 10447, :xygon_id => 15)
	town.add_area(:map_id => 10464, :xygon_id => 16)
	town.add_area(:map_id => 10461, :xygon_id => 17)
	town.add_area(:map_id => 10458, :xygon_id => 18)
	town.add_area(:map_id => 10455, :xygon_id => 19)
	town.add_area(:map_id => 10443, :xygon_id => 20)
	town.add_area(:map_id => 10444, :xygon_id => 21)
	town.add_area(:map_id => 10445, :xygon_id => 22)
	town.add_area(:map_id => 10446, :xygon_id => 23)
	town_list.push(town)

	town = Playershops::Town.new(:name => 'Four Winds Isle', :code => 'fwi', :game => XMLData.game)
	town.add_area(:map_id => 12266, :xygon_id =>  1)
	town.add_area(:map_id =>  3870, :xygon_id =>  2)
	town.add_area(:map_id =>  3869, :xygon_id =>  3)
	town.add_area(:map_id => 12265, :xygon_id =>  4)
	town.add_area(:map_id => 12264, :xygon_id =>  5)
	town.add_area(:map_id => 12263, :xygon_id =>  6)
	town.add_area(:map_id => 12262, :xygon_id =>  7)
	town.add_area(:map_id => 12267, :xygon_id =>  8)
	town.add_area(:map_id => 12268, :xygon_id =>  9)
	town.add_area(:map_id => 12269, :xygon_id => 10)
	town.add_area(:map_id => 12270, :xygon_id => 11)
	town.add_area(:map_id => 12271, :xygon_id => 12)
	town.add_area(:map_id => 12272, :xygon_id => 13)
	town.add_area(:map_id => 12273, :xygon_id => 14)
	town.add_area(:map_id =>  3872, :xygon_id => 15)
	town_list.push(town)
	town = nil

elsif (XMLData.game == 'GSF')

	town = Playershops::Town.new(:name => "Solhaven", :code => 'vo', :game => XMLData.game)
	town.add_area(:map_id => 9008, :xygon_id =>  1)
	town.add_area(:map_id => 9009, :xygon_id =>  2)
	town.add_area(:map_id => 9010, :xygon_id =>  3)
	town.add_area(:map_id => 9011, :xygon_id =>  4)
	town.add_area(:map_id => 9012, :xygon_id =>  5)
	town.add_area(:map_id => 9013, :xygon_id =>  6)
	town.add_area(:map_id => 9014, :xygon_id =>  7)
	town.add_area(:map_id => 9015, :xygon_id =>  8)
	town.add_area(:map_id => 9016, :xygon_id =>  9)
	town.add_area(:map_id => 9017, :xygon_id => 10)
	town.add_area(:map_id => 9018, :xygon_id => 11)
	town.add_area(:map_id => 9019, :xygon_id => 12)
	town.add_area(:map_id => 9020, :xygon_id => 13)
	town.add_area(:map_id => 9021, :xygon_id => 14)
	town.add_area(:map_id => 9022, :xygon_id => 15)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Icemule Trace", :code => 'imt', :game => XMLData.game)
	town.add_area(:map_id => 2372, :xygon_id =>  1)
	town.add_area(:map_id => 2373, :xygon_id =>  2)
	town.add_area(:map_id => 2374, :xygon_id =>  3)
	town.add_area(:map_id => 2376, :xygon_id =>  4)
	town.add_area(:map_id => 2377, :xygon_id =>  5)
	town.add_area(:map_id => 2379, :xygon_id =>  6)
	town.add_area(:map_id => 3447, :xygon_id =>  7)
	town.add_area(:map_id => 3446, :xygon_id =>  8)
	town.add_area(:map_id => 3444, :xygon_id =>  9)
	town.add_area(:map_id => 3442, :xygon_id => 10)
	town.add_area(:map_id => 3441, :xygon_id => 11)
	town.add_area(:map_id => 3439, :xygon_id => 12)
	town.add_area(:map_id => 3440, :xygon_id => 13)
	town.add_area(:map_id => 2310, :xygon_id => 14)
	town.add_area(:map_id => 2311, :xygon_id => 15)
	town.add_area(:map_id => 2312, :xygon_id => 16)
	town.add_area(:map_id => 2314, :xygon_id => 17)
	town.add_area(:map_id => 2315, :xygon_id => 18)
	town.add_area(:map_id => 2316, :xygon_id => 19)
	town.add_area(:map_id => 2317, :xygon_id => 20)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Zul Logoth", :code => 'zul', :game => XMLData.game)
	town.add_area(:map_id => 9423, :xygon_id => 1)
	town.add_area(:map_id => 9424, :xygon_id => 2)
	town.add_area(:map_id => 9425, :xygon_id => 3)
	town.add_area(:map_id => 9426, :xygon_id => 4)
	town.add_area(:map_id => 9427, :xygon_id => 5)
	town.add_area(:map_id => 9428, :xygon_id => 6)
	town_list.push(town)

	town = Playershops::Town.new(:name => "River's Rest", :code => 'rr', :game => XMLData.game)
	town.add_area(:map_id => 10873, :xygon_id => 1)
	town.add_area(:map_id => 10877, :xygon_id => 2)
	town.add_area(:map_id => 10876, :xygon_id => 3)
	town.add_area(:map_id => 10875, :xygon_id => 4)
	town.add_area(:map_id => 10874, :xygon_id => 5)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Teras Isle", :code => 'kd', :game => XMLData.game)
	town.add_area(:map_id => 1973, :xygon_id => 1)
	town.add_area(:map_id => 1974, :xygon_id => 2)
	town.add_area(:map_id => 1975, :xygon_id => 3)
	town.add_area(:map_id => 1976, :xygon_id => 4)
	town.add_area(:map_id => 1977, :xygon_id => 5)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Ta'Illistim", :code => 'ti', :game => XMLData.game)
	town.add_area(:map_id =>   641, :xygon_id =>  1)
	town.add_area(:map_id =>   642, :xygon_id =>  2)
	town.add_area(:map_id =>   734, :xygon_id =>  3)
	town.add_area(:map_id =>   735, :xygon_id =>  4)
	town.add_area(:map_id =>   736, :xygon_id =>  5)
	town.add_area(:map_id =>   737, :xygon_id =>  6)
	town.add_area(:map_id =>   732, :xygon_id =>  7)
	town.add_area(:map_id =>   733, :xygon_id =>  8)
	town.add_area(:map_id =>   731, :xygon_id =>  9)
	town.add_area(:map_id =>   730, :xygon_id => 10)
	town.add_area(:map_id => 16405, :xygon_id => 11)
	town.add_area(:map_id => 16407, :xygon_id => 12)
	town.add_area(:map_id => 16408, :xygon_id => 13)
	town.add_area(:map_id => 16409, :xygon_id => 14)
	town.add_area(:map_id => 16412, :xygon_id => 15)
	town.add_area(:map_id => 16413, :xygon_id => 16)
	town.add_area(:map_id => 16414, :xygon_id => 17)
	town.add_area(:map_id => 16417, :xygon_id => 18)
	town.add_area(:map_id => 16418, :xygon_id => 19)
	town.add_area(:map_id => 16419, :xygon_id => 20)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Ta'Vaalor", :code => 'tv', :game => XMLData.game)
	town.add_area(:map_id => 10462, :xygon_id =>  1)
	town.add_area(:map_id => 10459, :xygon_id =>  2)
	town.add_area(:map_id => 10456, :xygon_id =>  3)
	town.add_area(:map_id => 10453, :xygon_id =>  4)
	town.add_area(:map_id => 10452, :xygon_id =>  5)
	town.add_area(:map_id => 10451, :xygon_id =>  6)
	town.add_area(:map_id => 10463, :xygon_id =>  7)
	town.add_area(:map_id => 10460, :xygon_id =>  8)
	town.add_area(:map_id => 10457, :xygon_id =>  9)
	town.add_area(:map_id => 10454, :xygon_id => 10)
	town.add_area(:map_id => 10441, :xygon_id => 11)
	town.add_area(:map_id => 10450, :xygon_id => 12)
	town.add_area(:map_id => 10449, :xygon_id => 13)
	town.add_area(:map_id => 10448, :xygon_id => 14)
	town.add_area(:map_id => 10447, :xygon_id => 15)
	town.add_area(:map_id => 10464, :xygon_id => 16)
	town.add_area(:map_id => 10461, :xygon_id => 17)
	town.add_area(:map_id => 10458, :xygon_id => 18)
	town.add_area(:map_id => 10455, :xygon_id => 19)
	town.add_area(:map_id => 10443, :xygon_id => 20)
	town.add_area(:map_id => 10444, :xygon_id => 21)
	town.add_area(:map_id => 10445, :xygon_id => 22)
	town.add_area(:map_id => 10446, :xygon_id => 23)
	town_list.push(town)

	town = Playershops::Town.new(:name => "Four Winds Isle", :code => 'fwi', :game => XMLData.game)
	town.add_area(:map_id => 12266, :xygon_id =>  1)
	town.add_area(:map_id =>  3870, :xygon_id =>  2)
	town.add_area(:map_id =>  3869, :xygon_id =>  3)
	town.add_area(:map_id => 12265, :xygon_id =>  4)
	town.add_area(:map_id => 12264, :xygon_id =>  5)
	town.add_area(:map_id => 12263, :xygon_id =>  6)
	town.add_area(:map_id => 12262, :xygon_id =>  7)
	town.add_area(:map_id => 12267, :xygon_id =>  8)
	town.add_area(:map_id => 12268, :xygon_id =>  9)
	town.add_area(:map_id => 12269, :xygon_id => 10)
	town.add_area(:map_id => 12270, :xygon_id => 11)
	town.add_area(:map_id => 12271, :xygon_id => 12)
	town.add_area(:map_id => 12272, :xygon_id => 13)
	town.add_area(:map_id => 12273, :xygon_id => 14)
	town.add_area(:map_id =>  3872, :xygon_id => 15)
	town_list.push(town)
	town = nil

else

	echo 'Wrong game'
	exit

end

non_shop_regex      = /disk$|steps$|stairs$|alley$|gate$|arch$|mouth$|bench$|barrel$|^large double-doored archway$|^large stucco warehouse$/
non_container_regex = /(?:dragonfly|tapestries|locked metal tithing box|pennant|toadstools|mining pick|planter|ale kegs|boulder|axes|pair of crossed bones|walls framed in wide white trim|bottle|wreath|ceiling of jagged crystals|iron manacles|wall-hanging|Solhaven Bay model|carpet|pattern|fern|dolphin statuette|blowfish|palm tree|lemon tree|skulls?|gallows|sconces|mural|banner|arrangement|rolton|landscape|mirror|ballista|guilotine|runner|walls?|ceiling|permit|floor|helmet|snowshoes|candelabrum|flowerpot|Hearthstone|bear|candelabra|sculpture|anvil|tapestry|portrait|Wehnimer|spiderweb|rug|fountain|longsword|ship|panel|painting|armor|flowers|head|plate|vase|pillows|mask|skeleton|fan|flag|statue|mat|plaque|mandolin|plant|map|shrub)$|^portrait of /
max_containers      = 2
likely_containers   = [nil, "reliquary", "altar", "risers", "rod", "divan", "pushcart", "wardrobe", "strongbox", "coffer", "sack", "plank", "chests", "casket", "tower", "clamshell", "sling", "ambo", "pile", "pot", "tub", "coffin", "cauldron", "cart", "sideboard", "bench", "peg-board", "hole", "forms", "bookcase", "urn", "tomb", "ledge", "barrel", "tree", "worktable", "slab", "creel", "mannequins", "bar", "vault", "hammock", "maiden", "pegs", "mannequin", "footlocker", "desk", "crate", "caddy", "box", "display", "hooks", "bin", "stand", "trunk", "armoire", "basket", "shelf", "shelves", "rack", "case", "chest", "cabinet", "counter", "table"]
likely_signs        = [nil, 'sign']

#
# figure out what to update
#
if script.vars[1] =~ /here/i
	here = Room.current.id
	if town = town_list.find { |t| t.areas.any? { |a| a.map_id == here } }
		town.areas.delete_if { |a| a.map_id != here }
	else
		echo "error: Your current room (#{here}) does not appear to be a valid room to start a partial update.  Move to a room just outside of a shop."
		exit
	end
else
	closest_area = Room.current.find_nearest(town_list.collect { |t| t.areas.first.map_id })
	town         = town_list.find { |t| t.areas.first.map_id == closest_area }
	closest_area = nil
end

#
# turn off things that interfere with data collection
#
squelch_set_started = false
squelch_set_proc = proc { |server_string|
	if squelch_set_started
		DownstreamHook.remove('squelch_set') if server_string =~ /^<prompt/
		nil
	elsif server_string =~ /^(?:<pushBold\/>)?You may also access these settings through StormFront's 'Options' menu/
		squelch_set_started = true
		nil
	else
		server_string
	end
}
DownstreamHook.add('squelch_set', squelch_set_proc)
change_settings = Array.new
fput 'set'
40.times {
	line = get
#	if line =~ /^\s*(LogOn|LogOff|ShowDeaths|Disconnect|ShowSpellName|AnnounceTPs)\s+ON/
	if line =~ /^\s*(ShowSpellName|AnnounceTPs)\s+ON/
		change_settings.push $1
	elsif line =~ /^\s*SilentLogoff/
		break
	end
}
before_dying { change_settings.each { |s| put "set #{s} on"; sleep 0.2 } }
change_settings.each { |s| put "set #{s} off"; sleep 0.2 }
pause_scripts = Script.running.find_all { |s| (s != Script.current) and not s.paused }
before_dying { pause_scripts.each { |s| s.unpause if Script.running.include?(s) and s.paused } }
pause_scripts.each { |s| s.pause }

town.skip_data = Setting.load("#{town.game}:#{town.name}")

#
# data collection
#
start_time = Time.now
Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: data collection started (#{town.name}#{if town.areas.length == 1; ": #{town.areas.first.map_id}"; end})"
while area = town.next_area
	Script.run('go2', "#{area.map_id} --typeahead=0")
	Spell[916].cast if cast_invisibility and Spell[916].known? and Spell[916].affordable? and (Spell[916].timeleft < 10)
	Spell[920].cast if refresh_familiar and Spell[920].known? and Spell[920].active? and Spell[920].affordable? and (Spell[920].timeleft < 20)
	shop_entrance_list = GameObj.loot.find_all { |o| o.name !~ non_shop_regex }
	if (town.game == 'GSIV') and (area.map_id == 3870)
		if broken_shop = shop_entrance_list.find { |s| s.name == 'dark speckled marble storefront' }
			shop_entrance_list.delete(broken_shop)
			shop_entrance_list.push(broken_shop)
		end
	end
	for shop_entrance in shop_entrance_list
		Script.run('go2', "#{area.map_id} --typeahead=0") unless (Room.current.id == area.map_id)
		if move "go ##{shop_entrance.id}"
			shop = area.add_shop(:name => shop_entrance.name, :noun => shop_entrance.noun)
			shop.add_room(:dir => nil)
			(XMLData.room_exits.to_a - [ 'out' ]).each { |e| shop.add_room(:dir => e) }
			for room in shop.rooms
				rc = XMLData.room_count
				move(room.dir) unless room.dir.nil?
				if room.dir.nil? or (XMLData.room_count > rc)
					room.name = checkarea.sub(/\]$/, '')
					room.description = XMLData.room_description
					for obj in GameObj.loot.sort { |a,b| likely_signs.index(b.noun).to_i <=> likely_signs.index(a.noun).to_i }
						room.read_sign(obj)
					end
					containers_found = 0
					for obj in GameObj.room_desc.find_all { |o| o.name !~ non_container_regex }.sort { |a,b| likely_containers.index(b.noun).to_i <=> likely_containers.index(a.noun).to_i }
						if look_result = Playershops::Container.look(obj)
							container = room.add_container(:name => obj.name, :adverb => look_result.slice(/[IO]n the/).slice(/[IO]n/).downcase, :id => obj.id, :noun => obj.noun)
							containers_found += 1
							for item_link in look_result.scan(/<a.*?<\/a>/)
								if item_link =~ /exist=\"(.*?)\"\s*noun=["'](.*?)["'].*?>(.*?)<\/a>/   # normal format
									item = container.add_item(:id => $1, :noun => $2, :name => $3)
								elsif item_link =~ /exist=\"(.*?)\">(.*?)<\/a>/                        # simu display bug format
									item = container.add_item(:id => $1, :name => $2)
								end
							end
						end
						break if containers_found >= max_containers
					end
					move room.reverse_dir unless room.dir.nil?
				end
			end
			move 'out'
		else
			Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: warning: failed to enter shop; start room: #{area.map_id}; noun: #{shop_entrance.noun}; name: #{shop_entrance.name}; id: #{shop_entrance.id}"
		end
	end
end
sleep 1
respond
echo "Found #{town.count_items} items in #{town.count_shops} shops in #{Playershops.format_seconds(Time.now.to_i - start_time.to_i)}."
Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: data collection finished in #{Playershops.format_seconds(Time.now.to_i - start_time.to_i)}."

#
# save items so inspect/read/exam/lookin may be skipped next run
#
skip_data = Hash.new
for area in town.areas
	skip_data[area.map_id] = Hash.new
	for shop in area.shops
		skip_data[area.map_id][shop.name] = Hash.new
		for room in shop.rooms
			skip_data[area.map_id][shop.name][room.dir] = Hash.new
			for container in room.containers
				skip_data[area.map_id][shop.name][room.dir][container.name] = Hash.new
				for item in container.items
					skip_data[area.map_id][shop.name][room.dir][container.name]["#{item.id}:#{item.noun}:#{item.price}:#{item.take_result}"] = {
						:name => item.name,
						:inspect_result => item.inspect_result,
						:read_result => item.read_result,
						:exam_result => item.exam_result,
						:look_in_result => item.look_in_result,
					}
				end
			end
		end
	end
end
Setting.save("#{town.game}:#{town.name}" => skip_data)
skip_data = nil

#
# upload to ps.lichproject.org
#
if town.game == 'GSIV' or town.game == 'GSPlat' or town.game == 'GSF'
	filename = "#{DATA_DIR}/playershops.xml"
	echo "writing data to #{filename}..."
	File.open(filename, 'wb') { |f| f.write(town.to_lichproject_xml) }
	echo 'starting upload to ps.lichproject.org...'
	Script.run('repository', "upload playershops.xml")
else
	echo 'error: out of cheese'
end

#
# upload to virilneus.com
#
if town.game == 'GSPlat'
	echo "skipping virilneus.com: it doesn't support Gemstone Platinum"
elsif town.game == 'GSF'
	echo "skipping virilneus.com: it doesn't support Gemstone Shattered"
elsif (town.areas.length < 2)
	echo "skipping virilneus.com: it doesn't support partial updates"
elsif town.game == 'GSIV'
	filename = "#{TEMP_DIR}/#{town.code}.xml"
	echo "writing data to #{filename}..."
	File.open(filename, 'w') { |f| f.write(town.to_virilneus_xml.to_s) }
	unless no_upload
		start_time = Time.now
		echo 'starting upload to virilneus.com...'
		attempt = 0
		begin
			ftp = Net::FTP.new('virilneus.com', 'shops@virilneus.com', 'aloha64')
			ftp.passive = true # if attempt > 0
			ftp.putbinaryfile(filename)
			ftp.close
			echo "finished upload to virilneus.com in #{Playershops.format_seconds(Time.now.to_i - start_time.to_i)}"
		rescue
			Script.log "#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}: error while uploading to virilneus.com: #{$!}\n\t#{$!.backtrace.join("\n\t")}"
			echo "error while uploading to virilneus.com: #{$!}"
			if (attempt += 1) < 4
				echo 'retrying in 10 seconds...'
				sleep 10
				retry
			else
				echo "giving up on virilneus.com (file remains at #{filename})"
			end
		end
	end
else
	echo 'error: out of cheese'
end
