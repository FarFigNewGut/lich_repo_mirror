=begin
	Picker Assistant
	
	author: Willbo
	game: Gemstone
	version: 1.0.1.0
	tags: utility, locksmithing, lock picking
	info: Provides useful information to aid in the art of locksmithing.
=end

=begin
	Change Log
	
	v1.0.0.0 - 7/2/2015 - Initial Upload
	v1.0.0.1 - 7/2/2015 - Fixed syntax issues.
	v1.0.0.2 - 7/2/2015 - Fixed syntax issues. Tweaked formatting of trap messages.
	v1.0.1.0 - 7/12/2015 - Fixed issue the prevented information about sky-blue glaes scarabs from being displayed. Thanks Mitchem.
=end
module PickerAssistant	
	
	def self.range
		@range = {
			"primitive" =>  DifficultyRange.new(-5,-35),
			"rudimentary" => 	DifficultyRange.new(-40,-75),
			"extremely easy" => DifficultyRange.new(-80,-115),
			"very easy" => 	DifficultyRange.new(-120,-155),
			"easy" => DifficultyRange.new(-160,-195),
			"very basic" => DifficultyRange.new(-200,-235),
			"fairly easy" => DifficultyRange.new(-240,-275),
			"simple" => DifficultyRange.new(-280,-315),
			"fairly simple" => DifficultyRange.new(-320,-355),
			"fairly plain" => DifficultyRange.new(-360,-395),
			"moderately well-crafted" => DifficultyRange.new(-400,-435),
			"well-crafted" => DifficultyRange.new(-440,-475),
			"tricky" => DifficultyRange.new(-480,-515),
			"somewhat difficult" => DifficultyRange.new(-520,-555),
			"moderately difficult" => DifficultyRange.new(-560,-595),
			"very well-crafted" => DifficultyRange.new(-600,-635),
			"difficult" => DifficultyRange.new(-640,-675),
			"extremely well-crafted" => DifficultyRange.new(-680,-715),
			"very difficult" => DifficultyRange.new(-720,-755),
			"fairly complicated" => DifficultyRange.new(-760,-795),
			"intricate" => DifficultyRange.new(-800,-835),
			"amazingly well-crafted" => DifficultyRange.new(-840,-875),
			"very complex" => DifficultyRange.new(-880,-915),
			"impressively complicated" => DifficultyRange.new(-920,-955),
			"amazingly intricate" => DifficultyRange.new(-960,-995),
			"extremely difficult" => DifficultyRange.new(-1000,-1035),
			"extremely complex" => DifficultyRange.new(-1040,-1075),
			"masterfully well-crafted" => DifficultyRange.new(-1080,-1115),
			"amazingly complicated" => DifficultyRange.new(-1120,-1155),
			"astoundingly complex" => DifficultyRange.new(-1160,-1195),
			"incredibly intricate" => DifficultyRange.new(-1200,-1235),
			"absurdly well-crafted" => DifficultyRange.new(-1240,-1275),
			"exceedingly complex" => DifficultyRange.new(-1280,-1315),
			"absurdly difficult" => DifficultyRange.new(-1320,-1355),
			"unbelievably complicated" => DifficultyRange.new(-1360,-1395),
			"masterfully intricate" => DifficultyRange.new(-1400,-1435),
			"absurdly complex" => DifficultyRange.new(-1440,-1475),
			"impossibly complex" => DifficultyRange.new(-1480,-1515),
		}		
	end
	
	def self.traps
		s_extractable = "May be extracted using Lock Mastery.";
		s_safeToPickAround = "Can be safely picked around.";
		s_cantPickAround = "Can <b>NOT</b> be picked around.";
		s_maybePickAround = "Might be set off by picking, depending on skill/roll.";
		v_thrownWeapon = "Extracted trap may be thrown at enemies."
		thief_trap = "Extracted trap may be placed in pocket as a thief-trap."
		@traps = {
			"boomer" => ["Explosive/Boomer Trap","-If triggered, trap will explode, potentially killing you or others."],
			"crystal" => ["Dark Crystal Trap","-#{s_extractable}\n-#{v_thrownWeapon}\n-If triggered, a void will be opened, sucking in the box and your hands."],
			"glyph" => ["Glyph Spell Trap", "-If triggered, you will be sucked into a time-rift, but otherwise unharmed."],
			"jaws" => ["Jaws Trap", "-#{s_maybePickAround}\n-#{s_extractable}\n-#{thief_trap}\n-If triggered, jaws will slam shut and injure you."],
			"needle" => ["Needle Trap", "-#{s_safeToPickAround}\n-#{s_extractable}\n-#{thief_trap}\n-If triggered, you'll be poisoned for a variable, but generally small, amount"],			
			"rod" => ["Rod Trap","-#{s_maybePickAround} If you fail, you'll likely die though.\n-If triggered, you'll receive a heavy, almost certainly fatal, shock"],
			"scarab.onyx" => ["Onyx Scarab","-If triggered: \n  (a) Have a cleric cast Neutralize Curse (309) on you\n  (b) Have someone ambush the infected limb before it reaches your chest."],
			"scarab.glaes.blue" => ["Blue Scarab", "-If triggered, You will be heavily poisoned and need someone to cast Unpoison (114) on you"],
			"scarab.glaes.green" => ["Green Scarab", "-If triggered, You will be heavily diseased and need someone to cast Undisease (113) on you"],
			"scarab.opalescent" => ["Opalescent Scarab", "-If triggered, Scarab will cast one of many offensive spells on you.\n-Once safely disarmed, you can RUB it for a random defensive spell."],
			"scarab.translucent" => ["Translucent Scarab","-If triggered, Scarab will cast Evil Eye (717) on you.\n  Once safely disarmed, scarab you can RUB it to cast Eye Spy (707) spell."],
			"scarab.blood" => ["Blood Red Scarab!", "-If triggered, Scarab will latch on to one of your hands and drain your blood until death, before attacking someone else in the room.\n (a) Have a cleric cast Neutralize Curse (309) on you\n  (b) Have someone ambush the infected hand before you die."],
			"scales" => ["Scales", "-If triggered trap will explode, possibly killing or wounding everyone in the vicinity\n-To Disarm:\n  (1) Pick the box first\n  (2) Disarm the box while holding a dagger"],
			"sphere" => ["Sphere Trap", "-#{s_extractable}\n-#{v_thrownWeapon}\n-<b>To disarm</b>, you'll need to be holding a lock pick.\n-If triggered, gem will shatter, casting the spell Major Elemental Wave (435)."],
			"spores" => ["Spores Trap","-If triggered, evacuate the area ASAP.\n Trap will explode, sending spores into the air and poisoning the lungs of everyone in the room."],
			"springs" => ["Springs Trap", "-If triggered, box will spring open, slinging acid in your face. You'll need to get healed before you can continue picking."],
			"sulphur" => ["Sulpur Trap","-If triggered, you will be incinerated, covering your entire body in severe wounds. You will die."],
			"vial.fire" => ["Vial (Fire) Trap", "-#{s_cantPickAround}\n-#{s_extractable}\n-#{v_thrownWeapon}\n-If triggered, have someone PUSH you and then ROLL you."],
			"vial.gas" => ["Vial (Gas Cloud) Trap", "-#{s_maybePickAround}\n-#{s_extractable}\n #{v_thrownWeapon}\n-If triggered, a cloud will form that will eventually begin emitting bolts of lightening."],
			"vial.acid" => ["Vial (Acid) Trap", "-#{s_cantPickAround}\n-#{s_extractable}\n-Extracted acid vials can be used to disarm plated boxes.\n-#{v_thrownWeapon}\n-If triggered, acid will fuse your lock pick to the box. You'll lose your lock pick and the box will need to be bashed."],
		}
	end
	
	def self.picks
		@picks = [["copper", 1.00],["steel", 1.10],["gold", 1.20],["ivory", 1.20],["silver", 1.30],["mithril", 1.45],["ora", 1.55],["glaes", 1.60],["laje", 1.75],["vultite", 1.80],["rolaren", 1.90],["veniom", 2.20],["invar", 2.25],["alum", 2.30],["golvern", 2.30],["kelyn", 2.40],["vaalin", 2.60]];
	end
	
	def self.suggestPick(lockSize)
		skillBonus = Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1];
		multiplier = (((50 + lockSize.to_i.abs)/skillBonus.to_f) * 20).round / 20.0
		if multiplier > 2.60
			if(Spell[403].known?)
				pick_lore = (Stats.level / 2) + (Skills.to_bonus(Skills.pickinglocks) / 10) + (Stats.dex[1]) + (Spells.minorelemental / 4)
				pick_lore = Skills.pickinglocks if pick_lore > Skills.pickinglocks
				multiplier = (((50 + lockSize.to_i.abs)/(skillBonus + pick_lore).to_f) * 20).round / 20.0
			end
			if multiplier > 2.60
				return "You are not able to pick this lock."
			else
				suggestion = self.picks.select{ |x| x[1] >= multiplier}.first.first
				return "I would recommend you use a " + suggestion + " lockpick or better AND locklore";		
			end
		end		
		suggestion = self.picks.select{ |x| x[1] >= multiplier}.first.first
		return "I would recommend you use a " + suggestion + " lockpick or better.";		
	end
	
	class DifficultyRange
		def initialize(low, high)
			@low = low;
			@high = high;
		end
		
		def low
			return @low;
		end
		
		def high
			return @high;
		end
	end
	
	class Lock		
		def initialize(difficulty)
			@difficulty = difficulty;
			@range = PickerAssistant::range[@difficulty]
		end

		def range
			return @range
		end
		
		def suggestedPick
			PickerAssistant::suggestPick(@range.high);
		end
	end
	
	class Trap
		def initialize(name)
			@name = name;
		end
		
		def description
			PickerAssistant::traps[@name][0]
		end
		
		def notes
			PickerAssistant::traps[@name][1]
		end
		
		def server_string (s)
			return s + "\n<b>" + description + "</b>\n" + notes + "\n"
		end
	end
	
end

assistant_hook = proc{ |s|
	if s=~ /Measuring carefully, it looks to be an? (.*) lock/
		lock = PickerAssistant::Lock.new($1)
		s.sub(/Measuring carefully, it looks to be a(n)?\s(.*)\slock/, 
		"Measuring carefully, it looks to be a #{$1} #{$2} lock (between #{lock.range.low} and #{lock.range.high})\n#{lock.suggestedPick}" );	
	elsif s=~ /About a -(\d+) difficulty lock \(in thief-lingo\)\./		
		s + "\n" + PickerAssistant::suggestPick($1) + "\n"
	elsif s=~ /Looking closer you see a gleaming sliver of metal recessed in the hole/	
		t = PickerAssistant::Trap.new("needle")
		t.server_string(s)
	elsif s=~ /you spy a small vial of liquid/
		t = PickerAssistant::Trap.new("vial.gas")
		t.server_string(s);
	elsif s=~ /you spy a small vial of fire-red liquid/
		t = PickerAssistant::Trap.new("vial.fire")
		t.server_string(s)
	elsif s=~ /you spy a tiny vial placed just past the tumblers/
		t = PickerAssistant::Trap.new("vial.acid")
		t.server_string(s);
	elsif s=~ /you see a small tube towards the bottom of the tumbler/
		t = PickerAssistant::Trap.new("spores")
		t.server_string(s);
	elsif s=~ /you spy a small, dark crystal/
		t = PickerAssistant::Trap.new("crystal");
		t.server_string(s);
	elsif s=~ /you spy a (.*) scarab wedged/
		type = $1;		
		if type =~ /tiny onyx/
			t =PickerAssistant::Trap.new("scarab.onyx")
		elsif type =~/miniature (sky-blue|sea-green) glaes/
			if $1 == "sky-blue"
				t = PickerAssistant::Trap.new("scarab.glaes.blue")
			else
				t = PickerAssistant::Trap.new("scarab.glaes.green")
			end
		elsif type =~ /glimmering opalescent/
			t = PickerAssistant::Trap.new("scarab.opalescent")
		elsif type =~ /tiny translucent/
			t = PickerAssistant::Trap.new("scarab.translucent")
		elsif type =~ /miniature blood red/
			t = PickerAssistant::Trap.new("scarab.blood")
		end
		t.server_string(s)
	elsif s=~ /covered with hundreds of tiny metal scales/
		t = PickerAssistant::Trap.new("scales")
		t.server_string(s)
	elsif s=~ /you pick up the faintest scent of sulphur/
		t = PickerAssistant::Trap.new("sulphur");
		t.server_string(s);
	elsif s=~ /spiderweb-like scratches on the lock plate/
		t = PickerAssistant::Trap.new("glyph");
		t.server_string(s);
	elsif s=~ /you notice what appears to be the ends of springs/
		t = PickerAssistant::Trap.new("springs");
		t.server_string(s);
	elsif s=~ /you locate a (.*) sphere held/
		t = PickerAssistant::Trap.new("sphere");
		t.server_string(s);
	elsif s=~ /notice the inside chamber is coated with a strange white substance/
		t = PickerAssistant::Trap.new("boomer");
		t.server_string(s);
	else
		s
	end
}

begin
	DownstreamHook.add('picker_assistant', assistant_hook)
	loop { sleep 1}
ensure
	DownstreamHook.remove('picker_assistant')
end
