=begin

	This is currently a work in progress. Many more features are planned for real soon now!
	
	A highly customizable window for tracking all sorts of things.
	
	You can track things like your current stance, your current mind state, whether you have a current offer (someone GIVEs you something), your current group size and names of your group members, who your group leader is, and more (soon!)
	
	You can customize each of these tracking options to look exactly how you want.
	
	Want it to simply say "STANCE OFFENSIVE" in black letters on a white background? You can do that!
	Want it to show an emoji of a red shield on a blue background? You can do that too!
	Want it to show a picture of a kitten you downloaded from the internet? Believe it or not, you can do that too!
	
	The possibilities are endless and the choices are yours!

	Version 1: Initial release!
	Version 2: Script can now track bounty information. This can also be used to create a Bounty window.
	Version 3: Major update! Lots of changes!
	Version 3: New widget types: Text View which is basically a Game Window in other Front Ends. Entry which is where you type commands to send to the game.
	Version 3: In a Text View widget: You can choose which tags (such as speech, whisper, thoughts, etc) you want to see and customize how they look.
	Version 3: New tracking options: silvers, experience, left hand, right hand, prepared spell, health, mana, stamina, spirit, round time, cast round time, and maybe some others I forgot.
	Version 3: You are no longer limited to certain colors for color options (although those options still work), now you can enter any RGB value or hexadecimal value to use any color you want.
	Version 3: You can now copy settings from one widget and paste them to another widget.
	Version 3: Other new features I'm sure I am forgetting.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 3

=end

require 'gtk3'

silence_me
no_kill_all
no_pause_all

$grids_show_all_tags = true

class GridsMain
	@main_menu_list = {
		"Bounty" => {
			"Options" => [
				"Bounty",
			],
			"Tooltip" => "Bounty: Tracks your current bounty.",
		},
		
		"Cast RT" => {
			"Options" => [
				"Cast RT",
			],
			"Tooltip" => "Cast RT: Tracks your current cast RT.",
		},
		
		"Experience" => {
			"Options" => [
				"Experience",
			],
			"Tooltip" => "Experience: Tracks your current experience, current ascension experience, total experience, field experience, and fame.",
		},
		
		"Group Leader" => {
			"Options" => [
				"Me",
				"Someone else",
				"No leader"
			],
			"Tooltip" => "Group Leader: Tracks the current leader of your group.",
		},
		
		"Group Members" => {
			"Options" => [
				"Group",
				"No Group",
			],
			"Tooltip" => "Group Members: Tracks who is in your group.",
		},
		
		"Health" => {
			"Options" => [
				"Health",
			],
			"Tooltip" => "Health: Tracks current and maximum health.",
		},
		
		"Left Hand" => {
			"Options" => [
				"Left Hand",
			],
			"Tooltip" => "Left Hand: Tracks what is in your left hand.",
		},
		
		"Mana" => {
			"Options" => [
				"Mana",
			],
			"Tooltip" => "Mana: Tracks current and maximum mana.",
		},
		
		"Mind State" => {
			"Options" => [
				"Saturated",
				"Must rest",
				"Numbed",
				"Becoming numbed",
				"Muddled",
				"Clear",
				"Fresh and clear",
				"Clear as a bell",
			],
			"Tooltip" => "Mind State: Tracks the current state of your mind.",
		},
		
		"Offer" => {
			"Options" => [
				"True",
				"False",
			],
			"Tooltip" => "Offer: Tracks if you have an outstanding offer to accept or decline.",
		},
		
		"Right Hand" => {
			"Options" => [
				"Right Hand",
			],
			"Tooltip" => "Right Hand: Tracks what is in your right hand.",
		},
		
		"Roundtime" => {
			"Options" => [
				"Roundtime",
			],
			"Tooltip" => "Roundtime: Tracks your current Roundtime.",
		},
		
		"Silvers" => {
			"Options" => [
				"Silvers",
			],
			"Tooltip" => "Silvers: Tracks your current silvers on hand.",
		},

		"Spell Prep" => {
			"Options" => [
				"Spell Prep",
			],
			"Tooltip" => "Spell Prep: Tracks your currently prepared spell.",
		},
		
		"Spirit" => {
			"Options" => [
				"Spirit",
			],
			"Tooltip" => "Spirit: Tracks current and maximum spirit.",
		},
		
		"Stamina" => {
			"Options" => [
				"Stamina",
			],
			"Tooltip" => "Stamina: Tracks current and maximum stamina.",
		},

		"Stance" => {
			"Options" => [
				"Offensive",
				"Advance",
				"Forward",
				"Neutral",
				"Guarded",
				"Defensive",
			],
			
			"Tooltip" => "Stance: Tracks which stance you are in.",
		},
		
		"Text View" => {
			"Options" => [
				"Text View",
			],
		},
		
		"Entry" => {
			"Options" => [
				"Entry",
			],
		},
		
	}

	color_info = "\n\nYou can either enter the hexadecimal value of the color using this format: #000000\n\nOr you can enter the RGB value using this format: rgb 255, 0, 100\n\nOr you can enter the name of the color."
	image_tooltip = "Enter where the image you want to use can be found on your computer.\n\nWARNING: You MUST follow the format in the example below, note the use of /'s:\n\nC:/Lich5/example.jpg\n\nThe image won't display if the file location is entered incorrectly.\n\NOTE: Not all image types will work. The more common ones like JPEG, PNG, and GIF should work, although GIFs won't be animated."
	radial_colors = "Choose the color you want for each element of the radial background.#{color_info}"
	linear_colors = "Choose the color you want for each element of the linear background.#{color_info}"
	tag_decoration = "Choose which kind of text decoration you want for this tag.\n\nOptions are:\nNone\nUnderline\nDouble Underline\nLine-through\n\nNote: The color can't be set separately for this option for tags. Instead the color will be the same as the text color."
	tag_information = "\n\n\n\nTAG GENERAL INFO:\n\nTags change the appearance of certain text so it looks different from the default text. Tags can change the text color, font, background color, etc.\n\nTags might introduce a very small amount of lag depending on how many game lines are coming through at once and how many tags are being applied to the text. A good example of this is doing \"ASC LIST\", that command sends dozens of lines to the FE all at once and each line is formatted with a different font plus each line has hyperlinks which is another tag.\n\nUncheck any tag options you don't want to use.\n\nYou can customize the tag appearance in the separate tab for each tag option."
	tag_setting_info = "\n\n\n\nGENERAL TAG SETTING INFO:\n\nIf you don't want to use this tag setting then leave it blank\\set value to 0 and the script will use the default text options for this setting.\n\nIf you don't want to use ANY setting then be sure to uncheck this tag option in the \"Toggle\" tab."
	column_formatted_info = "Choose setting for this tag.\n\nCOLUMN FORMATTED SPECIFIC INFO:\n\nSome text in the game is automatically formatted with a monospace font type so the text lines up nicely in even columns.\n\nA good example of this is the \"HELP\" verb, notice how the first letter of every column starts in the same place even though there are a different number of spaces after each word.\n\nSelect the type of font you want for these formatted lines.\n\nHere are some monospace fonts, there are others though: Courier, Courier New, Consolas, Monaco (MacOS), Menlo (MacOS), Monospace, Cascadia Code.#{tag_setting_info}"
	@tooltips = {
		"go2" => "Unchecking this option won't create any tags (Hyperlinks, highlighting, etc) while ;go2 is running.\n\nThis could potentially decrease strain on system resources while ;go2 is running.",
		"Create Widget" => "NOTE: Clicking this button will save any changed settings and restart the script.\n\nClick this button to create a new widget.",
		"Delete Widget" => "NOTE: Clicking this button will save any changed settings and restart the script.\n\nSelect the number of the widget you want to delete.\n\nWidget number can be found by editing/clicking the widget and looking at the top of the Edit Widget window.",
		"Edit Widget" => "Select the number of the widget you want to edit.\n\nWidget number can be found by editing/clicking the widget and looking at the top of the Edit Widget window.",
		"Maximize" => "Check this box to have this window be maximized size by default.",
		"Link" => "Check this tab for every window you want to link together.\n\nBeing linked means when one linked window is minimized then all other linked windows are automatically minimized as well, and when one linked window is returned to normal state then all other linked windows are also returned to normal state.",
		"Widget Width" => "Enter the width for this widget.",
		"Widget Height" => "Enter the height for this widget.",
		"Widget Horizontal Position" => "Enter horizontal position for this widget.",
		"Widget Vertical Position" => "Enter vertical position for this widget.",
		"Widget Border Color" => "Enter the color you want for this widget's border.#{color_info}",
		"Widget Border Width" => "Enter how thick you want this widget's border to be.",
		"Widget Border Radius" => "Enter the radius you want for this widget's border. Smaller numbers make the border more straight, higher numbers make the borders more rounded.",
		"Radial Shape" => "Enter the shape you want for this radial.",
		"Progress Border Color" => "Enter the color for this widget's border.#{color_info}",
		"Progress Border Radius" => "Enter the radius you want for the progress bar border. Smaller numbers make the border more straight, higher numbers make the borders more rounded.",
		"Widget Background Color" => "Enter the color for this widget's background.#{color_info}",
		"Trough Color" => "Choose the color you want for the empty part of the progress bar.\n\nFor example if the progress bar is set to be 75% full then 25% of the bar will be this color.",
		"Text Color" => "Enter the color you want for this widget's text.#{color_info}",
		"Font Size" => "Enter the font size you want for this widget's text",
		"Widget Padding" => "Enter the amount of padding you want for this widget. Padding is how much space you want around the text of the widget. So a padding of 10 would create 10 pixels of space around the text, essentially pushing the border of the widget out 10 pixels. A padding of 100 would create 100 pixels of space.",
		"Command" => "Enter the action you want to perform when you click this widget.\n\nFor example you can enter \"attack\" and when you click this widget the action \"attack\" will be sent to the game.\n\nYou can also enter the word \"script\" first then enter the name of the script you want to start.\n\nFor example you can enter \"script test\" and the script will start ;test when you click this widget.\n\nYou can also enter command line variables after the script name.\n\nFor example you can enter \"script test wave info\" and the script will start ;test wave info when you click this widget.",
		"Copy" => "Click this button to copy all of the settings of the current widget state. You can then move to a different widget/state then click the \"Paste\" button to apply all of the copied settings to the other widget/state. Clicking \"Paste\" will automatically save the current widget's information.",
		"Paste" => "Click this button to paste all currently copied settings to the current widget state. Clicking this button will automatically save the current widget's information.",
		"Progress Bar Size" => "Set how thick you want the Progress Bar to be.",
		"Shadow Text" => "Choose whether or not you want this widget's text shadowed.",
		"Shadow Color" => "Choose the color you want for the shadowed text.#{color_info}",
		"Shadow Horizontal Position" => "Choose the horizontal position of the shadowed text.",
		"Shadow Veritcal Position" => "Choose the vertical position of the shadowed text.",
		"Text Decoration" => "Choose which kind of text decoration you want for this widget's text.\n\nOptions are:\nNone\nUnderline\nDouble Underline\nWavy Underline\nLine-through",
		"Text Decoration Color" => "Choose the color you want for the decoration for this text, if you have one selected in the \"Text Decoration\" button.#{color_info}",
		"Column Formatted Decoration" => tag_decoration,
		"Hyperlink Decoration" => tag_decoration,
		"Letter Spacing" => "Number of pixels you want between each letter.",
		"Progress Border Width" => "Set how thick you want the border for the progress bar to be.",
		"Radial Color 1" => radial_colors,
		"Radial Color 2" => radial_colors,
		"Radial Color 3" => radial_colors,
		"Radial Color 4" => radial_colors,
		"Radial Color 5" => radial_colors,
		"Linear Color 1" => linear_colors,
		"Linear Color 2" => linear_colors,
		"Linear Color 3" => linear_colors,
		"Linear Color 4" => linear_colors,
		"Linear Color 5" => linear_colors,
		"Progress Color" => "Choose the color you want for the full part of the progress bar.\n\nFor example if the progress bar is set to be 75% full then 75% of the bar will be this color.#{color_info}",
		"Progress Color" => "Choose the color you want for the empty part of the progress bar.\n\nFor example if the progress bar is set to be 75% full then 25% of the bar will be this color.#{color_info}",
		"Progress Bar Orientation" => "Set to Hide the Progress Bar or set the orientation to Horizontal or Vertical.",
		"Widget Opacity" => "Set the opacity you want for the widget: 10 is fully visible, 0 is completely hidden.\n\nNote: In setup mode the opacity for the widget stays at fully visible in the main window so you can always see it and click it to edit the widget.\n\nThe opacity setting is used (even fully invisible) for the example widgets and when the script is not in setup mode.",
		"Progress Bar Fraction" => "The percent \"full\" you want the progress bar.\n\nFor example 25 would make the progress bar 25% full, meaning 25% of the progress bar's length will be filled with the Progress Bar Color and the other 75% would be filled with the Trough Bar Color.\n\nNOTE: For trackers that track a current value and a max value (such as health, mana, stamina, spirit), set this to 0 to have the bar automatically fill to the current percentage of current stat/maximum stat.\n\nFor example if you set this to 0 for Health tracking, then if your current health is 10 and max is 20, the bar would automatically be set to 50% full, then once you're at max health it would automatically be set to 100%.",
		"Image Horizontal Position" => "The horizontal position you want the image inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the image all the way to the left, and 100 would position it all the way to the right.",
		"Image Vertical Position" => "The vertical position you want the image inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the image all the way to the top, and 100 would position it all the way to the bottom.",
		"Text Horizontal Align" => "The horizontal position you want the text inside of the widget.\n\nFor example 0 would position the text all the way to the left, and 10 would position it all the way to the right.",
		"Text Vertical Align" => "The vertical position you want the text inside of the widget.\n\nFor example 0 would position the text all the way to the top, and 10 would position it all the way to the bottom.",
		"Progress Bar Horizontal Position" => "If the Progress Bar is set to Vertical orientation then this sets the position you want the progressbar inside of the widget as a percent of the widget's size.\nGoing over 88 slightly increases the width of the widget, so in effect setting this to 0 sets the progress bar all the way to the right, 88 sets it all the way to the left, and 44 is centered.\n\nIf the Progress Bar is set to Horizontal orientation, then this number will increase the length of the widget by this value while keeping the progress bar the same length.\n\nFor example if you set this to 0 then nothing changes, but if you set this to 25 then the length of the widget becomes 25 longer while the progress bar remains the same size.",
		"Progress Bar Vertical Position" => "If the Progress Bar is set to Horizontal orientation then this sets the position you want the progressbar inside of the widget as a percent of the widget's size.\nGoing over 88 slightly increases the height of the widget, so in effect setting this to 0 sets the progress bar all the way to the bottom, 88 sets it all the way to the top, and 44 is centered.\n\nIf the Progress Bar is set to Vertical orientation, then this number will increase the height of the widget by this value while keeping the progress bar the same height.\n\nFor example if you set this to 0 then nothing changes, but if you set this to 25 then the height of the widget becomes 25 higher while the progress bar remains the same size.",
		"Radial Horizontal Position" => "The horizontal position you want the center of the radial to be inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the center all the way to the left, and 100 would position it all the way to the right.",
		"Radial Vertical Position" => "The vertical position you want the center of the radial to be inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the center all the way to the top, and 100 would position it all the way to the bottom.",
		"Linear Degrees" => "NOTE: Some linear degree options won't look right in a \"Text View\" widget, namely options that go top to bottom or bottom to top.\n\nEnter the direction in degrees you want the linear pattern to be moving in.\n\nFor example 0 would have the pattern moving from bottom to top, 180 would have the pattern moving from top to bottom.",
		"Image Horizontal Size" => "The horizontal size you want the image to be as a percent of the widget's size.\n\nFor example 25 would stretch the image horizontally to cover 25% of the widget's total horizontal length, 100 would cover the entire horizontal length of the widget.",
		"Image Vertical Size" => "The vertical size you want the image to be as a percent of the widget's size.\n\nFor example 25 would stretch the image vertically to cover 25% of the widget's total vertical length, 100 would cover the entire vertical length of the widget.",
		"Image Background Color" => "Select the background color for this widget.\n\nNote: Background color will only show if the image doesn't take up the entire space of the widget.#{color_info}",
		"Default Settings" => "Click this button to set all settings back to their default values.\n\nChanges won't take effect until you click \"Save Widget\".",
		"Image" => image_tooltip,
		"Image Location" => image_tooltip,
		"Font Options" => "Creates a window with clickable buttons showing various font options.\n\nClick a font button to have it applied to the text for this widget.\n\nWhile the font options window is open you can click on different example widgets to change the font for those different widget states.\n\nNote: Clicking a button will save the current widget's settings.\n\nAlso note different fonts may look the same, this is because if the font is not installed on your system then the font reverts to a default font type that works on your system.\n\nAlso also note that not every font option is listed in this window, you can try entering the name of the font you want in the \"Text Font\" setting and see if it works.",
		"Color Options" => "Creates a window where you can adjust RGB values, also creates clickable buttons showing different color options.\n\nAdjust RGB values or click a color button to have it applied to the current setting.\n\nWhile editing a widget and while the color options window is open you can click on different example widgets to change the color for those different widget states.\n\nFor example you could click on the \"Offensive\" stance example to change the color for that state then click on the \"Guarded\" stance example to change color for that state.\n\nNote: Clicking a button will save the current widget's/window's settings.",
		"Text Opacity" => "Set the opacity you want for the text: 10 is fully visible, 0 is completely hidden.",
		"Widget Border Type" => "Select border type for this widget.",
		"Progress Border Type" => "Select border type for the progress bar.",
		"Font Weight" => "WARNING: Not all font types work with bold and there is no messaging indicating whether or not the font works with bold. If you choose bold for a font type that does not work with bold then the font will revert to a default font type.\n\nChoose if you want the text to be bold or normal.",
		"Font Style" => "WARNING: Not all font types work with italic and there is no messaging indicating whether or not the font works with italic. If you choose italic for a font type that does not work with italic then the font will revert to a default font type.\n\nChoose if you want the text to be italic or normal.\n\nOblique is pretty much the same as italic but italic might not work for some fonts so use oblique if italic is not working.",
		"Create Profile" => "Enter the name of profile and click the \"Create Profile\" button to create a new profile.\n\nProfile names can only contain letters and numbers.\n\nProfiles are case-insensitive (example if you have a profile named \"test\" you can't create one named \"Test\".\n\nProfiles are saved as text files in your lich directory with the name of \"Grids Profile <profile name>\"",
		"Load Profile" => "Select the profile you want to load.",
		"Save Profile" => "Click this button to save any changes made to the current profile.\n\nSettings are saved to a file on your computer's hard drive when you close the main window, change profiles, or click this button.",
		"Default Profile" => "Click this button to make the currently loaded profile the default profile for this character.\n\nThe default profile is the profile that will be loaded whenever the script is first started.",
		"Keep Above" => "Check this box to make this window always be on top of other windows.\n\nThis can be useful if you want to stack a smaller window on top of a larger window, check this box for the smaller window and uncheck it for the larger window so the larger window won't hide the smaller one.",
		"Show Title" => "NOTE: This setting doesn't take effect until you restart the script.\n\nCheck this box to show the window's title bar. This bar is where the window's name, minimize, maximize, and close buttons are located.\n\nUncheck this box to hide the title bar for a cleaner look.\n\nOnce title bar is hidden you won't be able to click and drag the window to a new position. You can use the Horizontal and Vertical settings below to move the window.",
		"Create Window" => "Enter name of new window you want to create.\n\nName must be at least one character long and you can't have duplicate window names.\n\nClick \"Create Window\" button when ready.",
		"Delete Window" => "WARNING: DELETING A WINDOW WILL DELETE ALL SETTINGS ASSOCIATED FOR THAT WINDOW.\n\nAlso script will restart after deleting a window.\n\nEnter the name of the window you want to delete.\n\nClick \"Delete Window\" button when ready.",
		"Modify Window" => "Choose which window you want to modify.\n\nAll settings in the Customize, Default Settings, Window Settings, and Other/Hidden Bars tabs will be specific to the current window.",
		"Window Title" => "Enter the title for this window then click the \"Window Title\" button. The title is what is displayed at the top of this window.\n\nNote: You can enter \"NAME\" where you want your character's name to be displayed.\n\nAlso note: you can title windows whatever you want and you can even have duplicate titles for different windows.",
		"Text Font" => "WARNING: Not all font types can display all Unicode images. \"Segoe UI\" font should show most/all Unicode images.\n\nChoose the font type you want for this widget.\n\nNote: Enter the exact name for the font type you want. Not all font types are supported and there is no messaging indicating the one you entered works or not, but if you enter a font type that isn't supported then the displayed text will automatically revert to the default font type but the setting won't change.\n\nAlso note: you can only enter letters or spaces into this setting.",
		"Save Widget" => "Click this button to apply all changes to this widget state.\n\nThis will also save all changed settings to the file when the script is closed.\n\nNOTE: All non-saved changes will be lost if you select a different state for this widget or you close this window.",
		"Column Formatted" => "COLUMN FORMATTED SPECIFIC INFO:\n\nSome text in the game is automatically formatted with a monospace font type so the text lines up nicely in even columns.\n\nA good example of this is the \"HELP\" verb, notice how the first letter of every column starts in the same place even though there are a different number of spaces after each word.\n\nYou could also uncheck this box and use a monospace font as your default font for this Text View, that way all text would be formatted with this font by default so there would be no need for these special tags and it wouldn't cause any lag.\n\nHere are some monospace fonts, there are others though: Courier, Courier New, Consolas, Monaco (MacOS), Menlo (MacOS), Monospace, Cascadia Code.#{tag_information}",
		"Hyperlink" => "HYPERLINK SPECIFIC INFO:\n\nHyperlinks are clickable text that perform an action when clicked.\n\nNote: Unchecking this box would stop changing the appearance of hyperlinks and would also make the text no longer clickable.#{tag_information}",
		"Column Formatted Font" => column_formatted_info,
		"Column Formatted Color" => column_formatted_info,
		"Column Formatted Size" => column_formatted_info,
	}
	
	@default_state_settings ={
		"Stance" => {
			"Offensive" => {
				"Widget Text" => '         \u{26E8}\nOPTION1 OPTION2%',
				"Progress Bar Fraction" => "0",
				"Trough Color" => "lightcyan",
			},
			"Advance" => {
				"Widget Text" => '         \u{26E8}\nOPTION1 OPTION2%',
				"Progress Bar Fraction" => "20",
				"Progress Color" => "crimson",
				"Trough Color" => "lightcyan",
			},
			"Forward" => {
				"Widget Text" => '         \u{26E8}\nOPTION1 OPTION2%',
				"Progress Bar Fraction" => "40",
				"Progress Color" => "Goldenrod",
				"Trough Color" => "lightcyan",
			},
			"Neutral" => {
				"Widget Text" => '         \u{26E8}\nOPTION1 OPTION2%',
				"Progress Bar Fraction" => "60",
				"Progress Color" => "gold",
				"Trough Color" => "lightcyan",
			},
			"Guarded" => {
				"Widget Text" => '          \u{26E8}\nOPTION1 OPTION2%',
				"Progress Bar Fraction" => "80",
				"Progress Color" => "lawngreen",
				"Trough Color" => "lightcyan",
			},
			"Defensive" => {
				"Widget Text" => '            \u{26E8}\nOPTION1 OPTION2%',
				"Progress Bar Fraction" => "100",
				"Progress Color" => "green",
				"Trough Color" => "lightcyan",
			},
		},
		
		"Mind State" => {
			"Saturated" => {
				"Widget Text" => '\u{1F92F}',
				"Font Size" => "28",
				"Progress Bar Fraction" => "100",
				"Progress Color" => "red",
			},
			"Must rest" => {
				"Widget Text" => '  \u{1F914}\nOPTION2%',
				"Progress Bar Fraction" => "100",
				"Progress Color" => "red",
				},
			"Numbed" => {
				"Widget Text" => ' \u{1F914}\nOPTION2%',
				"Progress Bar Fraction" => "90",
				"Progress Color" => "crimson",
				},
			"Becoming numbed" => {
				"Widget Text" => ' \u{1F914}\nOPTION2%',
				"Progress Bar Fraction" => "75",
				"Progress Color" => "firebrick",
				},
			"Muddled" => {
				"Widget Text" => ' \u{1F914}\nOPTION2%',
				"Progress Bar Fraction" => "62",
				"Progress Color" => "hotpink",
			},
			"Clear" => {
				"Widget Text" => ' \u{1F914}\nOPTION2%',
				"Progress Bar Fraction" => "50",
				"Progress Color" => "yellow",
			},
			"Fresh and clear" => {
				"Widget Text" => ' \u{1F914}\nOPTION2%',
				"Progress Bar Fraction" => "25",
				"Progress Color" => "green",
			},
			"Clear as a bell" => {
				"Widget Text" => ' \u{1F914}\n OPTION2%',
				"Progress Bar Fraction" => "0",
			},
		},
	
		"Offer" => {
			"True" => {
				"Widget Text" => '   \u{1F381}\nOPTION1',
				"Text Color" => "Crimson",
				"Widget Background Color" => "Limegreen",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "60",
				"Widget Height" => "35",
				"Command" => "accept",
			},

			"False" => {
				"Widget Text" => '   \u{1F381}\nOPTION1',
				"Text Color" => "Crimson",
				"Widget Background Color" => "Limegreen",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "60",
				"Widget Height" => "35",
				"Widget Opacity" => "0",
				"Text Opacity" => "0",
			},
		},
		
		"Group Leader" => {
			"Me" => {
				"Widget Text" => '\u{1F451}',
				"Text Color" => "Gold",
				"Font Size" => "28",
				"Widget Width" => "100",
				"Widget Background Color" => "black",
				"Progress Bar Orientation" => "Hide",
			},
			
			"Someone else" => {
				"Widget Text" => '   \u{1F451}\nOPTION1',
				"Text Color" => "Gold",
				"Font Size" => "14",
				"Widget Width" => "100",
				"Widget Background Color" => "black",
				"Progress Bar Orientation" => "Hide",
			},
			
			"No leader" => {
				"Widget Text" => '   No\nLeader',
				"Text Color" => "Gold",
				"Font Size" => "12",
				"Widget Width" => "100",
				"Widget Background Color" => "black",
				"Progress Bar Orientation" => "Hide",
			},
		},
		
		"Group Members" => {
			"Group" => {
				"Widget Text" => 'Group OPTION1\nLIST5MAX10',
				"Font Size" => "10",
				"Widget Background Color" => "Beige",
				"Progress Bar Orientation" => "Hide",
				"Text Horizontal Align" => "1",
				"Text Vertical Align" => "1",
				"Widget Width" => "200",
				"Command" => "group",
			},
			
			"No Group" => {
				"Widget Text" => 'NO GROUP',
				"Font Size" => "15",
				"Widget Background Color" => "Beige",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "200",
			},
		},
		
		"Bounty" => {
			"Bounty" => {
				"Widget Width" => "300",
				"Widget Height" => "137",
				"Progress Bar Orientation" => "Hide",
				"Text Horizontal Align" => "0",
				"Text Vertical Align" => "0",
				"Widget Text" => "CHECKBOUNTY",
				"Text Color" => "Mistyrose",
				"Widget Border Width" => "0",
				"Widget Background Color" => "Black",
				"Command" => "script go2 advguild",
			}
		},
		
		"Roundtime" => {
			"Roundtime" => {
				"Font Weight" => "Bold",
				"Widget Text" => "OPTION1",
				"Text Color" => "white",
				"Widget Width" => "165",
				"Progress Bar Fraction" => "0",
				"Progress Color" => "Darkred",
				"Trough Color" => "rgb 255, 150, 150",
			}
		},
		
		"Cast RT" => {
			"Cast RT" => {
				"Font Weight" => "Bold",
				"Widget Text" => "OPTION1",
				"Text Color" => "white",
				"Widget Width" => "165",
				"Progress Bar Fraction" => "0",
				"Progress Color" => "Darkblue",
				"Trough Color" => "rgb 0, 200, 255",
			}
		},
		
		"Silvers" => {
			"Silvers" => {
				"Widget Text" => '\u{1F4B0}OPTION1',
				"Progress Bar Orientation" => "Hide",
				"Text Color" => "Black",
				"Widget Width" => "100",
				"Widget Background Color" => "rgb 200, 200, 255",
				"Command" => "bank account",
			}
		},
		
		"Experience" => {
			"Experience" => {
				"Widget Text" => 'Exp: OPTION1            Asc Exp: OPTION2\nTotal Exp: OPTION3  Field Exp: OPTION4\nFame: OPTION5',
				"Widget Height" => "73",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "300",
				"Text Horizontal Align" => "1",
				"Text Vertical Align" => "1",
				"Widget Background" => "Linear",
				"Linear Color 1" => "Cornflowerblue",
				"Linear Color 2" => "Darkturquoise",
				"Linear Color 3" => "Lightgreen",
				"Linear Degrees" => "0",
			}
		},
		
		"Right Hand" => {
			"Right Hand" => {
				"Widget Text" => 'R\u{270B} OPTION1',
				"Progress Bar Orientation" => "Hide",
				"Text Color" => "Black",
				"Widget Width" => "200",
				"Widget Background Color" => "Sandybrown",
			}
		},
		
		"Left Hand" => {
			"Left Hand" => {
				"Widget Text" => 'L\u{270B} OPTION1',
				"Progress Bar Orientation" => "Hide",
				"Text Color" => "Black",
				"Widget Width" => "200",
				"Widget Background Color" => "Sandybrown",
			}
		},
		
		"Spell Prep" => {
			"Spell Prep" => {
				"Widget Text" => '\u{1FA84} OPTION1',
				"Progress Bar Orientation" => "Hide",
				"Text Color" => "Black",
				"Widget Width" => "200",
				"Widget Background Color" => "Sandybrown",
			}
		},
		
		"Mana" => {
			"Mana" => {
				"Widget Width" => "165",
				"Widget Text" => 'OPTION1/OPTION2',
				"Progress Bar Fraction" => "0",
				"Trough Color" => "rgb 0, 175, 255",
				"Font Weight" => "Bold",
			}
		},
		
		"Health" => {
			"Health" => {
				"Widget Text" => 'OPTION1/OPTION2',
				"Widget Width" => "165",
				"Progress Bar Fraction" => "0",
				"Progress Color" => "red",
				"Trough Color" => "rgb 255, 125, 125",
				"Font Weight" => "Bold",
			}
		},
		
		"Stamina" => {
			"Stamina" => {
				"Widget Text" => 'OPTION1/OPTION2',
				"Widget Width" => "165",
				"Progress Bar Fraction" => "0",
				"Trough Color" => "rgb 255, 255, 155",
				"Progress Color" => "Yellow",
				"Font Weight" => "Bold",
			}
		},
		
		"Spirit" => {
			"Spirit" => {
				"Widget Text" => 'OPTION1/OPTION2',
				"Widget Width" => "165",
				"Progress Bar Fraction" => "0",
				"Progress Color" => "rgb 100, 100, 100",
				"Trough Color" => "rgb 200, 200, 200",
				"Font Weight" => "Bold",
			}
		},
		
		"Text View" => {
			"Text View" => {
				"Widget Width" => "300",
				"Widget Height" => "300",
				"Text Font" => "Arial Black",
				"Indent" => "10",
				"Widget Border Color" => "Midnightblue",
				"Widget Border Width" => "5",
				"Widget Background Color" => "Darkslategrey",
			}
		},
		
		"Entry" => {
			"Entry" => {
				"Widget Width" => "474",
				"Widget Border Color" => "Midnightblue",
				"Text Font" => "Arial Black",
				"Widget Border Width" => "5",
				"Widget Background Color" => "Darkslategrey",
			}
		},

	}
	
	@default_widget_settings = {
		#Widget
		"Widget Width" => "35",
		"Widget Height" => "35",
		"Widget Background Color" => "grey",
		"Widget Background" => "Solid Color",
		"Widget Opacity" => "10",
		"Widget Padding" => "0",
		"Command" => "",
		"Widget Type" => "Default",
		
		#Widget Border
		"Widget Border Color" => "blue",
		"Widget Border Width" => "1",
		"Widget Border Radius" => "1",
		"Widget Border Type" => "Solid",
		
		#Radial Background
		"Radial Shape" => "Circle",
		"Radial Color 1" => "red",
		"Radial Color 2" => "blue",
		"Radial Color 3" => "",
		"Radial Color 4" => "",
		"Radial Color 5" => "",
		"Radial Horizontal Position" => "50",
		"Radial Vertical Position" => "50",
		
		#Image Background
		"Image Location" => "",
		"Image Horizontal Position" => "50",
		"Image Vertical Position" => "50",
		"Image Horizontal Size" => "100",
		"Image Vertical Size" => "100",
		"Image Background Color" => "brown",
		
		#Linear Color
		"Linear Color 1" => "white",
		"Linear Color 2" => "rgb 102, 61, 0",
		"Linear Color 3" => "",
		"Linear Color 4" => "",
		"Linear Color 5" => "",
		"Linear Degrees" => "270",
		
		#Text
		"Text Color" => "black",
		"Text Font" => "Segoe UI",
		"Font Size" => "15",
		"Font Weight" => "Normal",
		"Font Style" => "Normal",
		"Text Decoration" => "None",
		"Text Decoration Color" => "black",
		"Text Opacity" => "10",
		"Text Horizontal Align" => "5",
		"Text Vertical Align" => "5",
		"Letter Spacing" => "0",
		"Shadow Text" => "No Shadow",
		"Shadow Color" => "black",
		"Shadow Horizontal Position" => "0",
		"Shadow Veritcal Position" => "10",
		
		#Progress Bar
		"Progress Bar Fraction" => "50",
		"Progress Bar Horizontal Position" => "0",
		"Progress Bar Vertical Position" => "0",
		"Progress Bar Orientation" => "Horizontal",
		"Progress Bar Size" => "35",
		"Progress Color" => "blue",
		"Trough Color" => "grey",
		
		#Progress Border
		"Progress Border Color" => "blue",
		"Progress Border Width" => "0",
		"Progress Border Radius" => "0",
		"Progress Border Type" => "Solid",
		
		#Entry Specific:
		"Top Padding" => "0",
		"Indent" => "0",
		"Cursor Color" => "black",
		
		#Text View Specific:
		
		#Room Name:
		"Room Name Font" => "",
		"Room Name Color" => "White",
		"Room Name Background Color" => "Blue",
		"Room Name Size" => "0",
		"Room Name Font Weight" => "Normal",
		"Room Name Style" => "Normal",
		"Room Name Decoration" => "None",
		
		#Creatures:
		"Creatures Font" => "",
		"Creatures Color" => "Yellow",
		"Creatures Background Color" => "",
		"Creatures Size" => "0",
		"Creatures Font Weight" => "Normal",
		"Creatures Style" => "Normal",
		"Creatures Decoration" => "None",
		
		#Speech:
		"Speech Font" => "",
		"Speech Color" => "Green",
		"Speech Background Color" => "",
		"Speech Size" => "0",
		"Speech Font Weight" => "Normal",
		"Speech Style" => "Normal",
		"Speech Decoration" => "None",
		
		#Whispers:
		"Whispers Font" => "",
		"Whispers Color" => "Aqua",
		"Whispers Background Color" => "",
		"Whispers Size" => "0",
		"Whispers Font Weight" => "Normal",
		"Whispers Style" => "Normal",
		"Whispers Decoration" => "None",
		
		#Thoughts:
		"Thoughts Font" => "",
		"Thoughts Color" => "Orange",
		"Thoughts Background Color" => "",
		"Thoughts Size" => "0",
		"Thoughts Font Weight" => "Normal",
		"Thoughts Style" => "Normal",
		"Thoughts Decoration" => "None",
		
		#Watching:
		"Watching Font" => "",
		"Watching Color" => "Gold",
		"Watching Background Color" => "",
		"Watching Size" => "0",
		"Watching Font Weight" => "Normal",
		"Watching Style" => "Normal",
		"Watching Decoration" => "None",
		
		#Hyperlink:
		"Hyperlink Font" => "",
		"Hyperlink Color" => "Lightseagreen",
		"Hyperlink Background Color" => "",
		"Hyperlink Size" => "0",
		"Hyperlink Font Weight" => "Bold",
		"Hyperlink Style" => "Normal",
		"Hyperlink Decoration" => "Underline",
		
		#Commands:
		"Commands Font" => "",
		"Commands Color" => "White",
		"Commands Background Color" => "Darkslategrey",
		"Commands Size" => "0",
		"Commands Font Weight" => "Normal",
		"Commands Style" => "Normal",
		"Commands Decoration" => "None",
		
		#Column Formatted:
		"Column Formatted Font" => "Monospace",
		"Column Formatted Color" => "",
		"Column Formatted Background Color" => "",
		"Column Formatted Size" => "0",
		"Column Formatted Font Weight" => "Normal",
		"Column Formatted Style" => "Normal",
		"Column Formatted Decoration" => "None",

	}
	
	@window_originals = {
		"Horizontal Size" => "250",
		"Vertical Size" => "250",
		"Keep Above" => "Yes",
		"Show Title" => "Yes",
		"Maximize" => "No",
		"Link" => "No",
		"Window Background Color" => "White",
		"Window Position" => "[0, 0]",
	}
	
	@all_colors = [ "Aliceblue", "Antiquewhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "Blanchedalmond", "Blue", "Blueviolet", "Brown", "Burlywood", "Cadetblue", "Chartreuse", "Chocolate", "Coral", "Cornflowerblue", "Cornsilk", "Crimson", "Cyan", "Darkblue", "Darkcyan", "Darkgoldenrod", "Darkgreen", "Darkgrey", "Darkkhaki", "Darkmagenta", "Darkolivegreen", "Darkorange", "Darkorchid", "Darkred", "Darksalmon", "Darkseagreen", "Darkslateblue", "Darkslategrey", "Darkturquoise", "Darkviolet", "Deeppink", "Deepskyblue", "Dimgrey", "Dodgerblue", "Firebrick", "Floralwhite", "Forestgreen", "Fuchsia", "Gainsboro", "Ghostwhite", "Gold", "Goldenrod", "Green", "Greenyellow", "Grey", "Honeydew", "Hotpink", "Indianred", "Indigo", "Ivory", "Khaki", "Lavender", "Lavenderblush", "Lawngreen", "Lemonchiffon", "Lightblue", "Lightcoral", "Lightcyan", "Lightgoldenrodyellow", "Lightgreen", "Lightgrey", "Lightpink", "Lightsalmon", "Lightseagreen", "Lightskyblue", "Lightslategrey", "Lightsteelblue", "Lightyellow", "Lime", "Limegreen", "Linen", "Magenta", "Maroon", "Mediumaquamarine", "Mediumblue", "Mediumorchid", "Mediumpurple", "Mediumseagreen", "Mediumslateblue", "Mediumspringgreen", "Mediumturquoise", "Mediumvioletred", "Midnightblue", "Mintcream", "Mistyrose", "Moccasin", "Navajowhite", "Navy", "Oldlace", "Olive", "Olivedrab", "Orange", "Orangered", "Orchid", "Palegoldenrod", "Palegreen", "Paleturquoise", "Palevioletred", "Papayawhip", "Peachpuff", "Peru", "Pink", "Plum", "Powderblue", "Purple", "Red", "Rosybrown", "Royalblue", "Saddlebrown", "Salmon", "Sandybrown", "Seagreen", "Seashell", "Sienna", "Silver", "Skyblue", "Slateblue", "Slategrey", "Snow", "Springgreen", "Steelblue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "Whitesmoke", "Yellow", "Yellowgreen" ]
	
	@all_fonts = [ "Agency FB", "Algerian", "Arial", "Arial Narrow", "Arial Black", "Bahnschrift", "Baskerville Old Face", "Bell MT", "Berlin Sans FB", "Bernard MT Condensed", "Blackadder ITC", "Bodoni MT", "Book Antiqua", "Bookman Old Style", "Bradley Hand ITC", "Broadway", "Calibri", "Californian FB", "Calisto MT", "Cambria", "Cambria Math", "Candara", "Cascadia Code", "Cascadia Mono", "Castellar", "Centaur", "Century", "Century Gothic", "Century Schoolbook", "Chiller", "Colonna MT", "Comic Sans MS", "Consolas", "Constantia", "Corbel", "Courier New", "Curlz MT", "Dubai", "Ebrima", "Edwardian Script ITC", "Elephant", "Engravers MT", "Felix Titling", "Forte", "Franklin Gothic Book", "Freestyle Script", "French Script MT", "Gabriola", "Gadugi", "Garamond", "Georgia", "Gigi", "Gill Sans Ultra Bold", "Gill Sans MT", "Gloucester MT Extra Condensed", "Goudy Old Style", "Goudy Stout", "Haettenschweiler", "Harrington", "High Tower Text", "Impact", "Imprint MT Shadow", "Informal Roman", "Ink Free", "Javanese Text", "Jokerman", "Juice ITC", "Kristen ITC", "Kunstler Script", "Lucida Bright", "Lucida Calligraphy", "Lucida Console", "Lucida Fax", "Lucida Handwriting", "Lucida Sans", "Lucida Sans Typewriter", "Lucida Sans Unicode", "Magneto", "Maiandra GD", "Malgun Gothic", "Matura MT Script Capitals", "Microsoft New Tai Lue", "Microsoft PhagsPa", "Microsoft Sans Serif", "Mistral", "Mongolian Baiti", "Monospace", "MS Reference Sans Serif", "Niagara Engraved", "Niagara Solid", "OCR A Extended", "Old English Text MT", "Onyx", "Palatino Linotype", "Papyrus", "Parchment", "Perpetua", "Perpetua Titling MT", "Playbill", "Poor Richard", "Pristina", "Rage Italic", "Ravie", "Rockwell", "Script MT Bold", "Segoe Print", "Segoe Script", "Segoe UI", "Segoe UI Historic", "Showcard Gothic", "SimSun", "Sitka Small", "Snap ITC", "Stencil", "Sylfaen", "Tempus Sans ITC", "Times New Roman", "Trebuchet MS", "Tw Cen MT", "Verdana", "Viner Hand ITC", "Vladimir Script", "Wide Latin" ]
	
	@setup_states = {
		"Stance" =>{
			"Offensive" => "0",
			"Advance" => "20",
			"Forward" => "40",
			"Neutral" => "60",
			"Guarded" => "80",
			"Defensive" => "100"
		},
		
		"Mind State" =>{
			"Saturated" => "100",
			"Must rest" => "100",
			"Numbed" => "90",
			"Becoming numbed" => "75",
			"Muddled" => "62",
			"Clear" => "50",
			"Fresh and clear" => "25",
			"Clear as a bell" => "0",
		},
	}

	@edit_all_settings = {}
	@edit_all_settings["Default"] = {}
	@edit_all_settings["Text View"] = {}
	@edit_all_settings["Entry"] = {}
	@all_tag_names = [ "Room Name", "Creatures", "Speech", "Whispers", "Thoughts", "Watching", "Hyperlink", "Commands", "Column Formatted" ]
	@all_show_names = [ "go2" ]
	
	hash = @edit_all_settings["Default"]
	#Tab Text 1:
	tab = "Text 1"
	hash["Widget Text"] = { "Type" => "Entry", "Tab" => tab, }
	hash["Text Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Text Font"] = { "Type" => "Entry", "Font" => "Yes", "Tab" => tab, }
	hash["Font Size"] = { "Type" => "Spin Button", "Tab" => tab, }
			
	#Tab Text 2
	tab = "Text 2"
	hash["Text Decoration Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Text Opacity"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Text Horizontal Align"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Text Vertical Align"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Letter Spacing"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Font Weight"] = { "Type" => "Radio", "First Radio" => "Normal", "Other Radios" => [ "Bold" ], "Radios Per Row" => 3, "Tab" => tab, }
	hash["Font Style"] = { "Type" => "Radio", "First Radio" => "Normal", "Other Radios" => [ "Italic", "Oblique" ], "Radios Per Row" => 3, "Tab" => tab, }
	hash["Text Decoration"] = { "Type" => "Radio", "First Radio" => "None", "Other Radios" => [ "Underline", "Double", "Wavy", "Line-through" ], "Radios Per Row" => 4, "Tab" => tab, }
			
	#Tab Text Shadow
	tab = "Text 2"
	hash["Shadow Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => "Text Shadow", }
	hash["Shadow Horizontal Position"] = { "Type" => "Spin Button", "Tab" => "Text Shadow", }
	hash["Shadow Veritcal Position"] = { "Type" => "Spin Button", "Tab" => "Text Shadow", }
	hash["Shadow Text"] = { "Type" => "Radio", "First Radio" => "Shadow", "Other Radios" => [ "No Shadow" ], "Radios Per Row" => 2, "Tab" => "Text Shadow", }
			
	#Tab Widget
	tab = "Widget"
	hash["Command"] = { "Type" => "Entry", "Tab" => tab, }
	hash["Widget Opacity"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Padding"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Height"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Horizontal Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Vertical Position"] = { "Type" => "Spin Button", "Tab" => tab, }
			
	#Tab Border
	tab = "Border"
	hash["Widget Border Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Widget Border Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Border Radius"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Border Type"] = { "Type" => "Radio", "First Radio" => "Dotted", "Other Radios" => [ "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", "Outset" ], "Radios Per Row" => 3, "Tab" => tab, }
			
	#Tab Progress Bar
	tab = "Progress Bar"
	hash["Progress Bar Fraction"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Progress Bar Horizontal Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Progress Bar Vertical Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Progress Bar Size"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Progress Bar Orientation"] = { "Type" => "Radio", "First Radio" => "Hide", "Other Radios" => [ "Horizontal", "Vertical" ], "Radios Per Row" => 3, "Tab" => tab, }
			
	#Tab Progress Border
	tab = "Progress Border"
	hash["Progress Border Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Progress Border Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Progress Border Radius"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Progress Border Type"] = { "Type" => "Radio", "First Radio" => "Dotted", "Other Radios" => [ "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", "Outset" ], "Radios Per Row" => 3, "Tab" => tab, }
			
	#Tab Progress
	tab = "Progress"
	hash["Progress Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
			
	#Tab Trough
	tab = "Trough"
	hash["Trough Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	
	#Tab Image
	tab = "Image"
	hash["Image Location"] = { "Type" => "Entry", "Tab" => tab, }
	hash["Image Horizontal Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Image Vertical Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Image Horizontal Size"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Image Vertical Size"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Image Background Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }

	hash = @edit_all_settings["Text View"]
	#Tab Text:
	tab = "Text"
	hash["Text Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Text Font"] = { "Type" => "Entry", "Font" => "Yes", "Tab" => tab, }
	hash["Font Size"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Text Opacity"] = { "Type" => "Spin Button", "Tab" => tab, }
	
	#Tab Widget:
	tab = "Widget"
	hash["Top Padding"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Indent"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Height"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Horizontal Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Vertical Position"] = { "Type" => "Spin Button", "Tab" => tab, }
			
	#Tab Border
	tab = "Border"
	hash["Widget Border Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Widget Border Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Border Type"] = { "Type" => "Radio", "First Radio" => "Dotted", "Other Radios" => [ "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", "Outset" ], "Radios Per Row" => 3, "Tab" => tab, }
	
	#Tab Tags
	@all_tag_names.each{ |tab|
		hash["#{tab} Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["#{tab} Background Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["#{tab} Font"] = { "Type" => "Entry", "Font" => "Yes", "Tab" => tab, }
		hash["#{tab} Size"] = { "Type" => "Spin Button", "Tab" => tab, }
		hash["#{tab} Font Weight"] = { "Type" => "Radio", "First Radio" => "Normal", "Other Radios" => [ "Bold" ], "Radios Per Row" => 3, "Tab" => tab, }
		hash["#{tab} Style"] = { "Type" => "Radio", "First Radio" => "Normal", "Other Radios" => [ "Italic", "Oblique" ], "Radios Per Row" => 3, "Tab" => tab, }
		hash["#{tab} Decoration"] = { "Type" => "Radio", "First Radio" => "None", "Other Radios" => [ "Underline", "Double", "Line-through" ], "Radios Per Row" => 4, "Tab" => tab, }
	}

	hash = @edit_all_settings["Entry"]
	#Tab Text:
	tab = "Text"
	hash["Text Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Text Font"] = { "Type" => "Entry", "Font" => "Yes", "Tab" => tab, }
	hash["Font Size"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Text Opacity"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Cursor Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	
	#Tab Widget:
	tab = "Widget"
	hash["Widget Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Height"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Horizontal Position"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Vertical Position"] = { "Type" => "Spin Button", "Tab" => tab, }
			
	#Tab Border
	tab = "Border"
	hash["Widget Border Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
	hash["Widget Border Width"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Border Radius"] = { "Type" => "Spin Button", "Tab" => tab, }
	hash["Widget Border Type"] = { "Type" => "Radio", "First Radio" => "Dotted", "Other Radios" => [ "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", "Outset" ], "Radios Per Row" => 3, "Tab" => tab, }

	hashes = [ @edit_all_settings["Default"], @edit_all_settings["Text View"], @edit_all_settings["Entry"] ]
	hashes.each{ |hash|
		#Tab Solid Color
		tab = "Solid Color"
		hash["Widget Background Color"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
				
		#Tab Radial
		tab = "Radial"
		hash["Radial Color 1"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Radial Color 2"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Radial Color 3"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Radial Color 4"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Radial Color 5"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Radial Horizontal Position"] = { "Type" => "Spin Button", "Tab" => tab, }
		hash["Radial Vertical Position"] = { "Type" => "Spin Button", "Tab" => tab, }
		hash["Radial Shape"] = { "Type" => "Radio", "First Radio" => "Circle", "Other Radios" => [ "Ellipse" ], "Radios Per Row" => 2, "Tab" => tab, }
				
		#Tab Linear
		tab = "Linear"
		hash["Linear Color 1"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Linear Color 2"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Linear Color 3"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Linear Color 4"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Linear Color 5"] = { "Type" => "Entry", "Color" => "Yes", "Tab" => tab, }
		hash["Linear Degrees"] = { "Type" => "Spin Button", "Tab" => tab, }
				
		#Other
		tab = "Other"
		hash["Widget Background"] = { "Type" => "Other", "Tab" => tab, }
	}

	@tag_number = {}
	@tag_data_mapping = {}
	@all_applied_tags = {}
	@scroll_to_bottom = {}
	@reset_buffer = {}
	@show_all_tags = {}
	@last_line_command_prompt = {}
	@apply_monospace_tag = nil
	@grids = {}
	@main_boxes = {}
	@main_event_boxes = {}
	@main_overlays = {}
	@main_labels = {}
	@scrolled_window = {}
	@view_all_tags = {}
	@saved_entry_commands = {}
	@finished_setting_up = nil
	@max_lines = 1000
	@max_tags = 500
	
	@hyperlink_commands = {
		"Stance" => {
			"Full words" => [ "OFFENSIVE", "ADVANCE", "FORWARD", "NEUTRAL", "GUARDED", "DEFENSIVE", "STANCE VERBOSE" ],
			"Command" => "Stance",
		},
						
		"Directions" => {
			"Full words" => [ "north", "northeast", "east", "southeast", "south", "southwest", "west", "northwest", "up", "down", "out", ],
			"Command" => "",
		},
						
		"Help" => {
			"Full words" => [ "ARMOR", "ASSIST", "COMBAT", "CREATURES", "DEATH", "DEBT", "DIRECTIONS", "ENCUMBRANCE", "ESP", "EXPERIENCE", "FAME", "FEEDBACK", "GAMEACCESS", "GAMEMASTERS", "HURL", "I-NEED-HELP", "INDEX", "INVENTORY", "JUSTICE/JAIL", "LOCKER", "MERCHANTS", "MOVEMENT", "MSTRIKE", "NPC", "RANGED", "READY/STORE", "REROLLING", "SHIELDS", "SILVERS", "SPRITES", "STOW", "TRAININGPOINTS", "VALUABLES", "WANDS", "WEAPONS", "WOUNDS", "REPORT", ],
			"Command" => "help",
		},
						
		"Advice" => {
			"Full words" => [ "ADVICE", ],
			"Command" => "advice",
		},
	}
	
	@window_load_save_data = {}
	@widget_load_save_data = {}
	
	@all_setup_windows = {}

	@first_run_through = true
	@current_menu_option = nil
	@all_menus = {}
	@current_profile_file = nil
	@position_spin_buttons = {}
	@window_background_color = {}
	@all_windows = {}
	@main_grids = {}
	@sub_grids = {}
	@all_grids = {}
	@widget_current_state = {}
	@layout = {}
	@widget_current_menu = {}
	@send_all_lines = true
	@labels = {}
	@setup_widgets = {}
	@setup_windows = {}
	@save_file_data = nil
	@do_not_stop_script = nil
	@example_menu_signal = nil
	@all_copied_settings = {}
	@copy_button_clicked = {}
	@copy_button_clicked["Default"] = nil
	@copy_button_clicked["Text View"] = nil
	@copy_button_clicked["Entry"] = nil
	@all_widgets_tracking = {}
	@current_program = nil
	@main_menu = nil
	@tracker_current_state = {}
	@last_button_click = Time.now
	@time_between_clicks = 0.10
	@program_is_running = true
	
	def self.get_default_value(widget_number, window_name, state, setting)
		widget_type = @widget_load_save_data[window_name][widget_number]["Widget Type"]
		widget_type = "Default" if widget_type.nil?
		tracking = @main_menu.active_text if !@main_menu.destroyed? && @current_program == "Setup"
		tracking = @widget_load_save_data[window_name][widget_number]["Widget Tracking"] if tracking.nil?
		state = @main_menu_list[tracking]["Options"].first if state.nil?
		@default_setting = nil
		@default_setting = @default_state_settings[tracking][state][setting] ? @default_state_settings[tracking][state][setting] : @default_widget_settings[setting]
	end
	
	def self.create_menu(menu_name,menu_values)
		@main_menu.append_text(menu_name) if menu_name != "Text View" && menu_name != "Entry"
		@all_menus[menu_name] = Gtk::ComboBoxText.new

		menu_values["Options"].each{ |option| @all_menus[menu_name].append_text(option) }
	end
	
	def self.set_program=(value)
		@current_program = value
	end

	def self.create_window(window_name)
		if window_name == "Setup Menu" || window_name == "Edit Widget" || window_name == "Color Options" || window_name == "Font Options"
			window_data = @all_setup_windows
			needed_text = window_name
		else
			window_data = @all_windows
			needed_text = @window_load_save_data[window_name]["Window Title"] ? @window_load_save_data[window_name]["Window Title"] : window_name
			needed_text = needed_text.gsub("NAME", checkname)
		end
		window_data[window_name] = Gtk::Window.new(:toplevel)
		window_data[window_name].set_keep_above(true)
		window_data[window_name].set_title(needed_text)

		setting = "Show Title"
		setting_state = @window_load_save_data[window_name][setting] ? @window_load_save_data[window_name][setting] : @window_originals[setting]
		if setting_state == "Yes"
			@all_windows[window_name].set_decorated(true)
		else
			@all_windows[window_name].set_decorated(false)
		end

		setting = "Keep Above"
		setting_state = @window_load_save_data[window_name][setting] ? @window_load_save_data[window_name][setting] : @window_originals[setting]
		@all_windows[window_name].set_keep_above(false) if setting_state == "No"
		
		setting = "Maximize"
		setting_state = @window_load_save_data[window_name][setting] ? @window_load_save_data[window_name][setting] : @window_originals[setting]
		@all_windows[window_name].maximize if setting_state == "Yes"
		
		if window_name == "Setup Menu"
			screen = window_data[window_name].screen
			screen_width = screen.width
			window_width = window_data[window_name].size[0]
			x = (screen_width - window_width) / 2.5
			window_data[window_name].move(x, 0)
		elsif window_name == "Edit Widget"
			window_data[window_name].move(185, 0)
		elsif window_name == "Color Options" || window_name == "Font Options"
			window_data[window_name].move(500, 0)
		end

		if window_name =~ /^(Edit Widget|Color Options|Font Options)$/
			@main_grids[window_name] = Gtk::Grid.new
			window_data[window_name].add(@main_grids[window_name])
		end
	
		if window_name != "Setup Menu" && window_name != "Edit Widget" && window_name != "Color Options" && window_name != "Font Options"
			@window_load_save_data[window_name] ||= {}
			@widget_load_save_data[window_name] ||= {}
			@setup_widgets[window_name] ||= {}
			position = @window_load_save_data[window_name]["Window Position"] ? @window_load_save_data[window_name]["Window Position"] : @window_originals["Window Position"]
			position = JSON.parse(position)
			@original_position[window_name] = position.dup
			@all_windows[window_name].move(position[0].to_i, position[1].to_i)

			horizontal = @window_load_save_data[window_name]["Horizontal Size"] ? @window_load_save_data[window_name]["Horizontal Size"].to_i : @window_originals["Horizontal Size"].to_i
			vertical = @window_load_save_data[window_name]["Vertical Size"] ? @window_load_save_data[window_name]["Vertical Size"].to_i : @window_originals["Vertical Size"].to_i
			
			@original_horizontal_size[window_name] = horizontal
			@original_vertical_size[window_name] = vertical

			@all_windows[window_name].resize(horizontal, vertical)
			
			@all_windows[window_name].signal_connect("delete-event") do
				save_window_position(window_name)
				false
			end

			@all_windows[window_name].signal_connect("window-state-event") do |_, event|
				if @window_load_save_data[window_name]["Link"] == "Yes"
					if event.new_window_state & Gdk::WindowState::ICONIFIED != 0
						@all_windows.each{ |name,window|
							@all_windows[name].iconify if (name != window_name) && (@window_load_save_data[name]["Link"] == "Yes")
						}
					else
						@all_windows.each{ |name,window|
							@all_windows[name].deiconify if (name != window_name) && (@window_load_save_data[name]["Link"] == "Yes")
						}
					end
				end
			end
		end
		
		window_data[window_name].signal_connect("destroy") do
			if window_name == "Main"
				@program_is_running = nil
				all_windows = [ @all_setup_windows, @all_windows ]
				all_windows.each{ |window_array|
					window_array.each{ |name_window,window|
						if !window.destroyed? && name_window != "Main"
							save_window_position(name_window) if @current_program == "Setup"
							window.close
						end
					}
				}
				save_data_to_profile
				@all_windows = {}
				Gtk.main_quit if Gtk.main_level == 0
				GLib::Source.remove(@timer_id)
				if running? "grids"
					kill_script "grids" if @do_not_stop_script.nil?
				end
			else
				if window_name != "Edit Widget" && window_name != "Color Options" && window_name != "Font Options"
					save_window_position("Main") if @current_program == "Setup"
					@all_windows["Main"].close
				end
				window_data[window_name] = nil
			end
		end
		
		update_window_settings(window_name)
		window_data[window_name].show_all
	end
	
	def self.set_window_title
		@all_setup_windows["Setup Menu"].title = "Setup Menu for #{@current_window} Window - #{@current_profile_file} Profile"
	end
	
	def self.load_text_data
		@current_window = "Main"
		@original_position = {}
		@original_horizontal_size = {}
		@original_vertical_size = {}
		@window_load_save_data[@current_window] = {}
		@widget_load_save_data[@current_window] = {}
		window_name = @current_window
		hash = @widget_load_save_data
		widget_number = nil
		comment_response("Loading settings from #{@current_profile_file} profile.")
		file_name = "Grids Profile #{@current_profile_file}.txt"
		if File.exist?(file_name)
			File.open(file_name, "r") do |file|
				file.each_line do |line|
					if line.start_with?(/Window Name: (.*)/)
						window_name = $1
						@widget_load_save_data[window_name] = {}
						@window_load_save_data[window_name] = {}
						hash = @widget_load_save_data[window_name]
					elsif line.start_with?(/(\d+):/)
						widget_number = $1.to_i
						hash[widget_number] = {} if hash[widget_number].nil?
					elsif line.start_with?("Window Settings")
						hash = @window_load_save_data[window_name]
						widget_number = nil
					elsif line.start_with?(/Option\: (.*?)\: (.*?)\: (.*)/)
						hash[widget_number][$1] ||= {}
						hash[widget_number][$1][$2] = $3
					elsif line =~ /: /
						info = line.split(": ")
						if widget_number
							hash[widget_number][info[0]] = info[1].chop
						else
							hash[info[0]] = info[1].chop
						end
					end
				end
			end
		end
		@widget_load_save_data.each{ |window_name,value|
			value.each{ |widget_number,_|
				tracking = @widget_load_save_data[window_name][widget_number]["Widget Tracking"]
				if tracking == "Text View"
					@all_tag_names.each{ |setting|
						if @widget_load_save_data[window_name][widget_number]["Text View"][setting].nil?
							@widget_load_save_data[window_name][widget_number] ||= {}
							@widget_load_save_data[window_name][widget_number]["Text View"] ||= {}
							@widget_load_save_data[window_name][widget_number]["Text View"][setting] = "Yes"
						end
					}
				end
				@main_menu_list[tracking]["Options"].each{ |state|
					if @widget_load_save_data[window_name][widget_number][state]["Widget Text"].nil?
						@widget_load_save_data[window_name][widget_number][state] ||= {}
						@widget_load_save_data[window_name][widget_number][state]["Widget Text"] = @default_state_settings[tracking][state]["Widget Text"]
					end
				}
			}
		}
	end
	
	def self.save_data_to_profile	
		@widget_load_save_data.transform_values! do |hash|
			hash.sort_by { |key, _value| key }.to_h
		end
		if @current_program == "Setup"
			if @save_file_data
				comment_response("Saving settings to #{@current_profile_file} profile.")
				needed_file = "Grids Profile #{@current_profile_file}.txt"
				@all_windows.each{ |window_name,window| @all_windows.delete(window_name) if @window_load_save_data[window_name].length.nil?}
				File.open(needed_file, "w") do |file|
					@all_windows.each{ |window_name,window|
						file.puts "\nWindow Name: #{window_name}"
						file.puts "\Widget Settings"
						@widget_load_save_data[window_name].each{ |widget_number,value|
							widget_type = @widget_load_save_data[window_name][widget_number]["Widget Type"]
							tracking = @widget_load_save_data[window_name][widget_number]["Widget Tracking"]
							if @widget_load_save_data[window_name][widget_number].count > 0
								file.puts "\n#{widget_number}:"
								@widget_load_save_data[window_name][widget_number].each{ |setting,setting_value|
									if setting_value.is_a?(Hash)
										setting_value.each{ |setting_a,setting_value_a|
												if @main_menu_list[tracking]["Options"].include?(setting)
													default = @default_state_settings[tracking][setting][setting_a] ? @default_state_settings[tracking][setting][setting_a] : @default_widget_settings[setting_a]
													if default != setting_value_a
														if setting_a == "Widget Text"
															file.puts "Option: #{setting}: #{setting_a}: #{setting_value_a}"
														else
															file.puts "Option: #{setting}: #{setting_a}: #{setting_value_a}" if setting_value_a.length > 0
														end
													end
												end
											}
									else
										file.puts "#{setting}: #{setting_value}" if setting_value.length > 0
									end
								}
							end
						}
						if @window_load_save_data[window_name].count > 0
							file.puts "\nWindow Settings"
							@window_load_save_data[window_name].each{ |setting,setting_value| file.puts "#{setting}: #{setting_value}" }
						end
					}
				end
				@save_file_data = nil
			else
				comment_response("No changes were made to #{@current_profile_file} profile.")
			end
		end
	end
	
	def self.create_profile_menu
		@profile_menu = Gtk::ComboBoxText.new
		Dir.children(File.join(LICH_DIR)).each{ |file_name| @profile_menu.append_text(file_name.gsub!(/Grids Profile|.txt| /, "")) if file_name =~ /Grids Profile/ }

		default_profile = nil
		if @current_profile_file
			default_profile = @current_profile_file
		else
			filename = "Grids Default Profiles.txt"
			if File.exist?(filename)
				File.open(filename, "r") do |file|
					file.each_line do |line|
						default_profile = $1 if line.start_with?(/#{checkname}\: (.*)/)
					end
				end
			else
				File.open(filename, "w")
			end

			if @profile_menu.model.iter_n_children(nil) == 0
				File.open("Grids Profile Original.txt", "w") do |file|
					file.puts "\nWindow Name: Main"
					file.puts "\nWidget Settings"

					file.puts "\n1:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Right Hand"
					file.puts "\nWidget Horizontal Position: 203"
					file.puts "\nWidget Vertical Position: 38"

					file.puts "\n2:"
					file.puts "\nWidget Type: Entry"
					file.puts "\nWidget Tracking: Entry"
					file.puts "\nWidget Horizontal Position: 0"
					file.puts "\nWidget Vertical Position: 964"
					file.puts "\nOption: Entry: Widget Width: 1724"

					file.puts "\n3:"
					file.puts "\nWidget Type: Text View"
					file.puts "\nWidget Horizontal Position: 0"
					file.puts "\nWidget Vertical Position: 76"
					file.puts "\nWidget Tracking: Text View"
					file.puts "\nOption: Text View: Room Name: Yes"
					file.puts "\nOption: Text View: Creatures: Yes"
					file.puts "\nOption: Text View: Speech: Yes"
					file.puts "\nOption: Text View: Whispers: Yes"
					file.puts "\nOption: Text View: Thoughts: Yes"
					file.puts "\nOption: Text View: Watching: Yes"
					file.puts "\nOption: Text View: Hyperlink: Yes"
					file.puts "\nOption: Text View: Commands: Yes"
					file.puts "\nOption: Text View: Column Formatted: Yes"
					file.puts "\nOption: Text View: Widget Width: 1751"
					file.puts "\nOption: Text View: Widget Height: 888"
					file.puts "\nOption: Text View: go2: Yes"

					file.puts "\n4:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Left Hand"
					file.puts "\nWidget Horizontal Position: 0"
					file.puts "\nWidget Vertical Position: 38"

					file.puts "\n5:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Spell Prep"
					file.puts "\nWidget Horizontal Position: 406"
					file.puts "\nWidget Vertical Position: 38"

					file.puts "\n6:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Stance"
					file.puts "\nWidget Horizontal Position: 609"
					file.puts "\nWidget Vertical Position: 38"

					file.puts "\n7:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Offer"
					file.puts "\nWidget Horizontal Position: 0"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n8:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Mind State"
					file.puts "\nWidget Horizontal Position: 63"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n9:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Silvers"
					file.puts "\nWidget Horizontal Position: 216"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n10:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Group Leader"
					file.puts "\nWidget Horizontal Position: 319"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n11:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Group Members"
					file.puts "\nWidget Horizontal Position: 422"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n12:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Bounty"
					file.puts "\nOption: Bounty: Widget Width: 167"
					file.puts "\nOption: Bounty: Widget Height: 300"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n13:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Bounty"
					file.puts "\nOption: Bounty: Widget Width: 167"
					file.puts "\nOption: Bounty: Widget Height: 300"
					file.puts "\nOption: Bounty: Widget Text: TASK\n\nCRITTER\n\nREMAINING\n\nLOCATION"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 301"

					file.puts "\n14:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Experience"
					file.puts "\nWidget Horizontal Position: 762"
					file.puts "\nWidget Vertical Position: 0"

					file.puts "\n15:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Mana"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 640"

					file.puts "\n16:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Health"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 602"

					file.puts "\n17:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Stamina"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 678"

					file.puts "\n18:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Spirit"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 716"

					file.puts "\n19:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Cast RT"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 971"

					file.puts "\n20:"
					file.puts "\nWidget Type: Default"
					file.puts "\nWidget Tracking: Roundtime"
					file.puts "\nWidget Horizontal Position: 1751"
					file.puts "\nWidget Vertical Position: 933"

					file.puts "\nWindow Settings"
					file.puts "\nWindow Position: [-4, -4]"
					file.puts "\nHorizontal Size: 1920"
					file.puts "\nVertical Size: 1009"
					file.puts "\nMaximize: Yes"
					file.puts "\nLink: No"
					file.puts "\nKeep Above: Yes"
					file.puts "\nWindow Title: Main NAME"
				end
				@profile_menu.append_text("Original")
			end

			if default_profile
				default_profile = nil if !File.exist?("Grids Profile #{default_profile}.txt")
			end
		end

		if default_profile.nil?
			@profile_menu.set_active(0)
			default_profile = @profile_menu.active_text
			filename = "Grids Default Profiles.txt"
			needed_line = checkname
			file_lines = File.readlines(filename)
			file_lines.each{ |line| file_lines.delete(line) if line =~ /#{checkname}/ }
			File.open(filename, 'w') do |file|
				file.write("#{checkname}: #{default_profile}\n")
				file_lines.each{ |line| file.write(line) }
			end
		else
			set_menu_active(@profile_menu, default_profile)
		end
		
		@current_profile_file = default_profile
		@default_profile_file = default_profile
		
		if $grids_script_vars_2
			@current_profile_file = $grids_script_vars_2
			set_menu_active(@profile_menu, @current_profile_file)
		end
		
		@profile_menu.set_tooltip_text(@tooltips["Load Profile"])
		
		@profile_menu.signal_connect("changed") do |widget|
			selected_profile = widget.active_text
			save_data_to_profile
			@do_not_stop_script = true
			save_window_position("Main")
			@all_windows["Main"].close
			kill_script "grids"
			Thread.new{
				wait_until{ !running? "grids" }
				start_script "grids", ["setup", selected_profile]
			}
		end
	end
	
	def self.save_window_position(window_name)
		if @all_windows[window_name].position
			@save_file_data = true if @original_position[window_name] != @all_windows[window_name].position
			@window_load_save_data[window_name]["Window Position"] = @all_windows[window_name].position
		end
		
		allocation = @all_windows[window_name].allocation
		width = allocation.width
		height = allocation.height
		if (width != @original_horizontal_size[window_name]) || (height != @original_vertical_size[window_name])
			if width && height
				@window_load_save_data[window_name]["Horizontal Size"] = width
				@window_load_save_data[window_name]["Vertical Size"] = height
				@save_file_data = true
			end
		end
	end
	
	def self.create_profile_tab(tab_name)
		create_grids(tab_name)
		all_grids = @all_grids[tab_name]
		
		all_settings = [ "Create Profile" ]

		labels = {}
		buttons = {}
		entries = {}
		setting = "Load Profile"
		labels[setting] = Gtk::Label.new("#{setting}     ")
		
		setting = "Default Profile"
		buttons[setting] = Gtk::Button.new(:label => setting)
		
		setting = "Save Profile"
		buttons[setting] = Gtk::Button.new(:label => setting)
		
		all_settings.each{ |setting|
			labels[setting] = Gtk::Label.new("#{setting}     ")
			entries[setting] = Gtk::Entry.new
			buttons[setting] = Gtk::Button.new(:label => setting)
		}

		entries["Create Profile"].signal_connect("changed") do
			text = entries["Create Profile"].text
			text.gsub!(/[^a-zA-Z0-9]/, "")
			entries["Create Profile"].text = text
		end
		
		buttons["Default Profile"].signal_connect("clicked") do
			default_profile = @profile_menu.active_text
			if default_profile == @default_profile_file
				comment_response("#{default_profile} is already the default profile.")
			else
				filename = "Grids Default Profiles.txt"
				needed_line = checkname
				file_lines = File.readlines(filename)
				file_lines.each{ |line| file_lines.delete(line) if line =~ /#{checkname}/ }
				File.open(filename, 'w') do |file|
					file.write("#{checkname}: #{default_profile}\n")
					file_lines.each{ |line| file.write(line) }
				end
				@default_profile_file = default_profile
				comment_response("Default profile has been changed to #{default_profile}.")
			end
		end
		buttons["Create Profile"].signal_connect("clicked") do
			all_profile_names = []
			@profile_menu.model.each{ |model, path, iter| all_profile_names.push(@profile_menu.model.get_value(iter, 0).downcase) }
			profile_name = entries["Create Profile"].text
			if profile_name.length < 1
				comment_response("You must enter at least one character for the Profile Name.")
			elsif all_profile_names.include?(profile_name.downcase)
				comment_response("You already have a profile with this name. Choose a different name.\nProfiles are case-insensitive (example if you have a profile named \"test\" you can't create one named \"Test\".")
			else
				File.open("Grids Profile #{profile_name}.txt", "w")
				@profile_menu.append_text("#{profile_name}")
				entries["Create Profile"].text = ""
				@profile_menu.set_active(@profile_menu.model.iter_n_children - 1)
			end
		end
		
		buttons["Save Profile"].signal_connect("clicked") do
			save_data_to_profile
		end

		grid = all_grids.shift
		row = -1
		all_settings.each{ |setting|
			column = -1
			grid.attach(labels[setting], column += 1, row += 1, 1, 1)
			grid.attach(entries[setting], column += 1, row, 1, 1)
			grid.attach(buttons[setting], column += 1, row, 1, 1)
		}
		
		labels.each{ |setting,_| labels[setting].set_tooltip_text(@tooltips[setting]) }
		buttons.each{ |setting,_| buttons[setting].set_tooltip_text(@tooltips[setting]) }
		entries.each{ |setting,_| entries[setting].set_tooltip_text(@tooltips[setting]) }

		column = -1
		grid.attach(labels["Load Profile"], column += 1, row += 1, 1, 1)
		grid.attach(@profile_menu, column += 1, row, 1, 1)
		grid.attach(buttons["Default Profile"], column += 1, row, 1, 1)
		grid.attach(buttons["Save Profile"], column += 1, row, 1, 1)
		$grids_script_vars_2 = nil
	end
	
	def self.update_window_settings(window_name)
		color = @window_load_save_data[window_name]["Window Background Color"] ? @window_load_save_data[window_name]["Window Background Color"] : @window_originals["Window Background Color"]
		
		if color.start_with?("rgb")
			split = color.split(/rgb |, /)
			color = "rgba(#{split[1]}, #{split[2]}, #{split[3]}, 1.0)"
		end
		
		provider = Gtk::CssProvider.new
		css = <<~CSS
			window {
				background-color: #{color};
			}
		CSS

		provider.load_from_data(css)
		context = @all_windows[window_name].style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
	end
	
	def self.set_widget_background(widget, needed_settings, css_name)
			provider = Gtk::CssProvider.new
			if needed_settings["Widget Background"] == "None"
				css = <<~CSS
					#{css_name} {
						background: none;
					}
				CSS
			elsif needed_settings["Widget Background"] == "Solid Color"
				css = <<~CSS
					#{css_name} {
						background: none;
						background-color: #{needed_settings["Widget Background Color"]};
					}
				CSS
			elsif needed_settings["Widget Background"] == "Image"
				css = <<~CSS
					#{css_name} {
						background: none;
						background-color: #{needed_settings["Image Background Color"]};
						background-image: url("file:///#{needed_settings["Image Location"]}");
						background-size: #{needed_settings["Image Horizontal Size"]}% #{needed_settings["Image Vertical Size"]}%;
						background-position: #{needed_settings["Image Horizontal Position"]}% #{needed_settings["Image Vertical Position"]}%;
						background-repeat: no-repeat;
					}
				CSS
			elsif needed_settings["Widget Background"] == "Radial"
				colors = "#{needed_settings["Radial Color 1"]}, #{needed_settings["Radial Color 2"]}"
				colors += ", #{needed_settings["Radial Color 3"]}" if needed_settings["Radial Color 3"].length > 0
				colors += ", #{needed_settings["Radial Color 4"]}" if needed_settings["Radial Color 4"].length > 0
				colors += ", #{needed_settings["Radial Color 5"]}" if needed_settings["Radial Color 5"].length > 0
					
				css = <<~CSS
					#{css_name} {
						background: radial-gradient(#{needed_settings["Radial Shape"]} at #{needed_settings["Radial Horizontal Position"]}% #{needed_settings["Radial Vertical Position"]}%, #{colors});
					}
				CSS
			elsif needed_settings["Widget Background"] == "Linear"
				colors = "#{needed_settings["Linear Color 1"]}, #{needed_settings["Linear Color 2"]}"
				colors += ", #{needed_settings["Linear Color 3"]}" if needed_settings["Linear Color 3"].length > 0
				colors += ", #{needed_settings["Linear Color 4"]}" if needed_settings["Linear Color 4"].length > 0
				colors += ", #{needed_settings["Linear Color 5"]}" if needed_settings["Linear Color 5"].length > 0
					
				css = <<~CSS
					#{css_name} {
						background: linear-gradient(#{needed_settings["Linear Degrees"]}deg, #{colors});
					}
				CSS
			end
			provider.load_from_data(css)
			context = widget.style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
	end
	
	def self.edit_button(widget_number, widget, state_name, this_window, option)
		needed_settings = {}
		save = @widget_load_save_data[this_window][widget_number]["Widget Type"]
		this_widget_widget_type = save ? save : @default_widget_settings["Widget Type"]
		state_name = this_widget_widget_type if this_widget_widget_type == "Text View" || this_widget_widget_type == "Entry"

		@edit_all_settings[this_widget_widget_type].each{ |setting,value|
			if @first_run_through
				widget_tracking = @widget_load_save_data[this_window][widget_number][@main_menu_list[@widget_load_save_data[this_window][widget_number]["Widget Tracking"]]["Options"].first]
			else
				widget_tracking = @widget_load_save_data[this_window][widget_number][state_name]
			end
			check = widget_tracking[setting]
			get_default_value(widget_number, this_window, state_name, setting)
			if value["Type"] == "Entry" || value["Type"] == "Radio" || value["Type"] == "Other"
				needed_settings[setting] = check ? check : @default_setting
			elsif value["Type"] == "Spin Button"
				needed_settings[setting] = check ? check.to_i : @default_setting.to_i
			end
			if needed_settings[setting].is_a?(String)
				if needed_settings[setting].start_with?("rgb")
					split = needed_settings[setting].split(/rgb |, /)
					needed_settings[setting] = "rgba(#{split[1]}, #{split[2]}, #{split[3]}, 1.0)"
				end
			end
		}
		needed_settings["Font Size"] = 15 if needed_settings["Font Size"] == 0
		
		if option == "Main"
			text_to_change = @main_labels[this_window][widget_number]
			if @current_program == "Setup"
				needed_widget_opacity = 1
				needed_text_opacity = 1
			elsif @current_program == "Main"
				needed_widget_opacity = needed_settings["Widget Opacity"] / 10.0
				needed_text_opacity = needed_settings["Text Opacity"] / 10.0
			end
		elsif option == "Example"
			text_to_change = @bar_labels[state_name]
			needed_widget_opacity = needed_settings["Widget Opacity"] / 10.0
			needed_text_opacity = needed_settings["Text Opacity"] / 10.0
		end
		if widget.is_a?(Gtk::ProgressBar)
			if @widget_load_save_data[this_window][widget_number]["Widget Tracking"] =~ /^(Mana|Health|Stamina|Spirit|Cast RT|Roundtime)$/ && needed_settings["Progress Bar Fraction"] == 0
				current = @all_tracking_option1[@widget_load_save_data[this_window][widget_number]["Widget Tracking"]].to_f
				max = @all_tracking_option2[@widget_load_save_data[this_window][widget_number]["Widget Tracking"]].to_f
				current = 0 if current < 0
				current = max if current > max
				widget.fraction = current / max
			else
				widget.fraction = needed_settings["Progress Bar Fraction"] / 100.0
			end
			if needed_settings["Progress Bar Orientation"] == "Hide"
				needed_progress_background = "none"
				needed_trough_background = "none"
				needed_trough_border_width = 0
				needed_progress_width = 1
				needed_progress_height = 1
			else
				widget.orientation = needed_settings["Progress Bar Orientation"]
				needed_progress_background = needed_settings["Progress Color"]
				needed_trough_background = needed_settings["Trough Color"]
				needed_trough_border_width = needed_settings["Progress Border Width"]
				if needed_settings["Progress Bar Orientation"] == "Horizontal"
					needed_progress_width = 0
					needed_progress_height = needed_settings["Progress Bar Size"]
				elsif needed_settings["Progress Bar Orientation"] == "Vertical"
					needed_progress_width = needed_settings["Progress Bar Size"]
					needed_progress_height = 0
				end
			end
			
			widget.set_size_request(needed_settings["Widget Width"], needed_settings["Widget Height"])

			#Progressbar CSS:
			provider = Gtk::CssProvider.new
			css = <<~CSS
				progressbar {
					opacity: #{needed_widget_opacity};
					padding: #{needed_settings["Widget Padding"]};
					min-width: #{needed_settings["Widget Width"]}px;
					min-height: #{needed_settings["Widget Height"]}px;
					
					border-color: #{needed_settings["Widget Border Color"]};
					border-width: #{needed_settings["Widget Border Width"]}px;
					border-radius: #{needed_settings["Widget Border Radius"]}px;
					border-style: #{needed_settings["Widget Border Type"]};
				}
			
				progressbar progress {
					background: #{needed_progress_background};
					min-width: #{needed_progress_width}px;
					min-height: #{needed_progress_height}px;
					border-width: 0px;
				}

				progressbar trough {
					background: #{needed_trough_background};
					margin-right: #{needed_settings["Widget Width"] * (needed_settings["Progress Bar Horizontal Position"] / 100.0)}px;
					margin-bottom: #{needed_settings["Widget Height"] * (needed_settings["Progress Bar Vertical Position"] / 100.0)}px;
					min-width: #{needed_progress_width}px;
					min-height: #{needed_progress_height}px;
					border-width: #{needed_trough_border_width}px;
					border-color: #{needed_settings["Progress Border Color"]};
					border-radius: #{needed_settings["Progress Border Radius"]}px;
					border-style: #{needed_settings["Progress Border Type"]};
				}
			CSS

			provider.load_from_data(css)
			context = widget.style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			#Background CSS:
			set_widget_background(widget, needed_settings, "progressbar")
			
			#Text CSS:
			if needed_settings["Text Decoration"] =~ /Double|Wavy/i
				needed_decoration_style = needed_settings["Text Decoration"]
				needed_decoration = "Underline"
			else
				needed_decoration_style = "Solid"
				needed_decoration = needed_settings["Text Decoration"]
			end
			
			if needed_settings["Shadow Text"] == "Shadow"
				needed_shadow = "#{needed_settings["Shadow Horizontal Position"]} #{needed_settings["Shadow Veritcal Position"]} #{needed_settings["Shadow Color"]}"
			else
				needed_shadow = "none"
			end
			
			if state_name == "Bounty"
				text_to_change.set_ellipsize(Pango::EllipsizeMode::NONE)
				text_to_change.set_line_wrap(true)
			else
				text_to_change.set_ellipsize(Pango::EllipsizeMode::END)
				text_to_change.set_max_width_chars(5)
				text_to_change.set_line_wrap(false)
			end
			text_to_change.set_alignment(needed_settings["Text Horizontal Align"] / 10.0, needed_settings["Text Vertical Align"] / 10.0)
			
			provider = Gtk::CssProvider.new
			css = <<~CSS
				label {
					color: #{needed_settings["Text Color"]};
					font-size: #{needed_settings["Font Size"]}px;
					font-weight: #{needed_settings["Font Weight"]};
					font-style: #{needed_settings["Font Style"]};
					font-family: #{needed_settings["Text Font"]};
					text-decoration: #{needed_decoration};
					text-decoration-style: #{needed_decoration_style};
					text-decoration-color: #{needed_settings["Text Decoration Color"]};
					opacity: #{needed_text_opacity};
					letter-spacing: #{needed_settings["Letter Spacing"]}px;
					text-shadow: #{needed_shadow};
				}
			CSS

			provider.load_from_data(css)

			context = text_to_change.style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
		elsif widget.is_a?(Gtk::TextView)
			widget.set_indent(needed_settings["Indent"])
			@scrolled_window[this_window][widget_number].set_size_request(needed_settings["Widget Width"], needed_settings["Widget Height"])
			provider = Gtk::CssProvider.new
			css = <<~CSS
				textview text{
					color: #{needed_settings["Text Color"]};
					border-right-width: #{needed_settings["Widget Border Width"]}px;
					border-right-color: #{needed_settings["Widget Border Color"]};
					border-right-style: #{needed_settings["Widget Border Type"]};
					border-left-width: #{needed_settings["Widget Border Width"]}px;
					border-left-color: #{needed_settings["Widget Border Color"]};
					border-left-style: #{needed_settings["Widget Border Type"]};
				}
				
				textview{
					font-family: #{needed_settings["Text Font"]};
					font-size: #{needed_settings["Font Size"]}px;
					opacity: #{needed_text_opacity};
					padding-top: #{needed_settings["Top Padding"]};
				}
			CSS

			provider.load_from_data(css)
			context = widget.style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			set_widget_background(widget, needed_settings, "textview text")
		elsif widget.is_a?(Gtk::Entry)
			provider = Gtk::CssProvider.new
			css = <<~CSS
				entry{
					color: #{needed_settings["Text Color"]};
					caret-color: #{needed_settings["Cursor Color"]};
					font-family: #{needed_settings["Text Font"]};
					font-size: #{needed_settings["Font Size"]}px;
					border-width: #{needed_settings["Widget Border Width"]}px;
					border-color: #{needed_settings["Widget Border Color"]};
					border-radius: #{needed_settings["Widget Border Radius"]}px;
					border-style: #{needed_settings["Widget Border Type"]};
					min-width: #{needed_settings["Widget Width"]}px;
					min-height: #{needed_settings["Widget Height"]}px;
					opacity: #{needed_text_opacity};
				}
			CSS

			provider.load_from_data(css)
			context = widget.style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			set_widget_background(widget, needed_settings, "entry")
		end
	end
	
	def self.create_grids(window_name)
		@sub_grids[window_name] = {}
		grid = @sub_grids[window_name]
		
		@all_grids[window_name] = []
		all_grids = @all_grids[window_name]
		
		row = -1
		7.times.with_index{ |index|
			grid[index] = Gtk::Grid.new
			all_grids.push(grid[index])
			@main_grids[window_name].attach(grid[index], 0, row += 1, 1, 1)
		}
	end
	
	def self.replace_options(text, options)
		options.each_with_index do |option, index|
			this_option = "OPTION#{index + 1}"
			text.gsub!(this_option, option) if text.include?(this_option) && option
		end
	end
	
	def self.add_commas(number)
		return number unless number.is_a?(Integer)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
	end
	
	def self.update_current_widget(widget_number, window_name, tracking, state_name)
		this_widget_number = widget_number
		this_window = window_name		
		widget = @setup_widgets[window_name][this_widget_number]
		text = @widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].dup
		option1 = @all_tracking_option1[tracking]
		option2 = @all_tracking_option2[tracking]
		option3 = @all_tracking_option3[tracking]
		option4 = @all_tracking_option4[tracking]
		option5 = @all_tracking_option5[tracking]
		option1 = add_commas(option1)
		option2 = add_commas(option2)
		if tracking == "Stance" || tracking == "Mind State"
			if @current_program == "Main"
				replace_options(text, [option1, option2])
			elsif @current_program == "Setup"
				if text =~ /OPTION1/
					text.gsub!("OPTION1", state_name)
				end
				if text =~ /OPTION2/
					text.gsub!("OPTION2", @setup_states[tracking][state_name])
				end
			end
		elsif tracking == "Group Members"
			text.gsub!("OPTION1", "#{option1.count}") if text =~ /OPTION1/
			if text =~ /LIST(\d+)/
				per_row = $1.to_i
				max_list = 1000
				if text =~ /MAX(\d+)/
					max_list = $1.to_i
					text.gsub!(/MAX(\d+)/, "")
				end
				all_members = ""
				number = 0
				max_number = 0
				option1.each{ |name|
					if number >= per_row
						all_members.chop!.chop!
						all_members += "\n"
						number = 0
					end
					all_members += "#{name}, "
					number += 1
					max_number += 1
					break if max_number >= max_list
				}
				all_members.chop!.chop!
				text.gsub!(/LIST(\d+)/, all_members)
			end
		elsif tracking == "Bounty"
			talk_to_npc = "Talk to needed NPC"
			option1 = checkbounty if option1.nil?
			@bounty_information = {}
			if option1 =~ /The local gem dealer, .*, has an order to fill and wants our help./
				@bounty_information["TASK"] = "Gem"
				@bounty_information["ITEM"] = talk_to_npc
				@bounty_information["REMAINING"] = talk_to_npc
			elsif option1 =~ /received orders from multiple customers requesting [a-zA-Z]+ (.*)\.  You have been tasked to retrieve (\d+) of them./
				@bounty_information["TASK"] = "Gem"
				@bounty_information["ITEM"] = $1
				@bounty_information["REMAINING"] = $2
			elsif option1 =~ /WAIT for [a-zA-Z]+ to meet you there.  You must guarantee [a-zA-Z]+ safety to (.*) as soon as you can/
				@bounty_information["TASK"] = "Escort"
				@bounty_information["LOCATION"] = $1
			elsif option1 =~ /The local healer, .*, has asked for our aid./
				@bounty_information["TASK"] = "Herb"
				@bounty_information["ITEM"] = talk_to_npc
				@bounty_information["LOCATION"] = talk_to_npc
				@bounty_information["REMAINING"] = talk_to_npc
			elsif option1 =~ /working on a concoction that requires [a-zA-Z]+ (.*) found (?:on|in|near) (.*).  These samples must be in .* condition.  You have been tasked to retrieve (\d+) samples/
				@bounty_information["TASK"] = "Herb"
				@bounty_information["ITEM"] = $1
				@bounty_information["LOCATION"] = $2
				@bounty_information["REMAINING"] = $3
			elsif option1 =~ /The local furrier .* has an order to fill and wants our help/
				@bounty_information["TASK"] = "Skin"
				@bounty_information["REMAINING"] = talk_to_npc
				@bounty_information["ITEM"] = talk_to_npc
				@bounty_information["CRITTER"] = talk_to_npc
			elsif option1 =~ /You have been tasked to retrieve (\d+) (.*) of at least (.*) quality .* You can SKIN them off the corpse of [a-zA-Z]+ (.*) or purchase them from another adventurer./
				@bounty_information["TASK"] = "Skin"
				@bounty_information["REMAINING"] = $1
				@bounty_information["ITEM"] = "#{$3} quality #{$2}"
				@bounty_information["CRITTER"] = $4
			elsif option1 =~ /It appears they need your help in tracking down some kind of lost heirloom/
				@bounty_information["TASK"] = "Heirloom"
				@needed_heirloom = talk_to_npc
				@bounty_information["CRITTER"] = talk_to_npc
				@bounty_information["LOCATION"] = talk_to_npc
			elsif option1 =~ /You have been tasked to recover (.*) that an unfortunate citizen lost after being attacked by [a-zA-Z]+ (.*?) (?:on|in|near) (.*)\.  The heirloom .*SEARCH the area until you find it/
				@bounty_information["TASK"] = "Heirloom: Search"
				@needed_heirloom = $1
				@bounty_information["CRITTER"] = $2
				@bounty_information["LOCATION"] = $3
			elsif option1 =~ /You have been tasked to recover (.*) that an unfortunate citizen lost after being attacked by [a-zA-Z]+ (.*?) (?:on|in|near) (.*)\.  The heirloom .*Hunt down the creature and LOOT the item from its corpse./
				@bounty_information["TASK"] = "Heirloom: Loot"
				@needed_heirloom = $1
				@bounty_information["CRITTER"] = $2
				@bounty_information["LOCATION"] = $3
			elsif option1 =~ /You have located .* and should bring it back to/
				@bounty_information["TASK"] = "Heirloom: Found"
				@bounty_information["CRITTER"] = "Return heirloom"
				@bounty_information["LOCATION"] = "Return heirloom"
			elsif option1 =~ /It appears that a local resident urgently needs our help in some matter./
				@bounty_information["TASK"] = "Rescue Child"
				@bounty_information["CRITTER"] = talk_to_npc
				@bounty_information["LOCATION"] = talk_to_npc
			elsif option1 =~ /A local divinist has had visions of the child fleeing from an? (.*?) (?:on|in|near) (.*)\.  Find the area/
				@bounty_information["TASK"] = "Find Child"
				@bounty_information["CRITTER"] = $1
				@bounty_information["LOCATION"] = $2
			elsif option1 =~ /You have made contact with the child/
				@bounty_information["TASK"] = "Return Child"
				@bounty_information["CRITTER"] = "Return child to safety"
				@bounty_information["LOCATION"] = "Return child to safety"
			elsif option1 =~ /child you were tasked to rescue is gone and your task is failed/
				@bounty_information["TASK"] = "Rescue Child: FAILED"
				@bounty_information["CRITTER"] = "FAILED"
				@bounty_information["LOCATION"] = "FAILED"
			elsif option1 =~ /It appears they have a bandit problem they'd like you to solve.|order to help [a-zA-Z]+ take care of a bandit problem./
				@bounty_information["TASK"] = "Bandits"
				@bounty_information["LOCATION"] = talk_to_npc
				@bounty_information["REMAINING"] = talk_to_npc
			elsif option1 =~ /You have been tasked to suppress bandit activity (?:on|in|near) (.*)\.  You need to kill (\d+).*of them to complete your task./ || option1 =~ /You have been tasked to help [a-zA-Z]+ suppress bandit activity (?:on|in|near) (.*)\.  You need to kill (\d+).*of them to complete your task./
				@bounty_information["TASK"] = "Bandits"
				@bounty_information["LOCATION"] = $1
				@bounty_information["REMAINING"] = $2
			elsif option1 =~ /It appears they have a creature problem they'd like you to solve/
				@bounty_information["TASK"] = "Creatures"
				@bounty_information["CRITTER"] = talk_to_npc
			elsif option1 =~ /You have been tasked to suppress (.*) activity (?:on|in|near) (.*)\.  You need to kill (\d+) of them to complete your task./ || option1 =~ /suppressing (.*) activity (?:on|in|near) (.*) during .*\.  You need to kill (\d+).*of them to complete your task./ || option1 =~ /suppress (.*) activity (?:on|in|near) (.*)\.  You need to kill (\d+).*of them to complete your task./
				@bounty_information["TASK"] = "Cull Creatures"
				@bounty_information["CRITTER"] = $1
				@bounty_information["LOCATION"] = $2
				@bounty_information["REMAINING"] = $3
			elsif option1 =~ /You have been tasked to hunt down and kill a particularly dangerous (.*) that has established a territory (?:on|in|near) (.*)\.  You can get its attention by killing other creatures of the same type in its territory./
				@bounty_information["TASK"] = "Find Dangerous Creature"
				@bounty_information["CRITTER"] = $1
				@bounty_information["LOCATION"] = $2
			elsif option1 =~ /You have been tasked to hunt down and kill a particularly dangerous (.*) that has established a territory (?:on|in|near) (.*)\.  You have provoked .* attention/
				@bounty_information["TASK"] = "Creature Spawned: Kill it"
				@bounty_information["CRITTER"] = $1
				@bounty_information["LOCATION"] = $2
			elsif option1 =~ /to help [a-zA-Z]+ take care of an urgent matter.|to help [a-zA-Z]+ retrieve a lost heirloom|to help [a-zA-Z]+ take care of a creature problem./
				@bounty_information["TASK"] = "Help another person"
				@bounty_information["CRITTER"] = talk_to_npc
			elsif option1 =~ /You have succeeded in your task and can return to the Adventurer's Guild to receive your reward./
				@bounty_information["TASK"] = "Finished: Return to Adventurer's Guild"
			elsif option1 =~ /You succeeded in your task and should report back/
				@bounty_information["TASK"] = "Finished: #{talk_to_npc}"
			elsif option1 =~ /You are not currently assigned a task./
				@bounty_information["TASK"] = "No current task."
				@needed_heirloom = nil
			end
			if text =~ /CHECKBOUNTY/
				text.gsub!("CHECKBOUNTY", option1)
			end
			@bounty_information["ITEM"] = @needed_heirloom if @needed_heirloom
			settings = [ "TASK", "ITEM", "CRITTER", "REMAINING", "LOCATION" ]
			settings.each{ |setting|
				if text =~ /#{setting}/ && @bounty_information[setting]
					text.gsub!(setting, "#{setting.capitalize}: #{@bounty_information[setting]}")
				else
					text.gsub!(setting, "")
				end
			}
		else
			replace_options(text, [option1, option2, option3, option4, option5])
		end
		check = text
		get_default_value(widget_number, this_window, state_name, "Widget Text")
		text = check ? check.to_s : @default_setting.to_s
		unicode = text.gsub(/\\u\{([0-9a-fA-F]+)\}/) { [$1.hex].pack('U*') }
		unicode = unicode.gsub(/\\n/, "\n")
		@example_widget_text = unicode
		@main_labels[window_name][this_widget_number].label = unicode
		@bar_labels[window_name][this_widget_number].label = unicode
		edit_button(this_widget_number, widget, state_name, window_name, "Main")
	end
	
	def self.update_edit_button_all_settings(widget_number, state_name)
		save = @widget_load_save_data[@current_window][widget_number]["Widget Type"]
		this_widget_widget_type = save ? save : @default_widget_settings["Widget Type"]
		state_name = this_widget_widget_type if this_widget_widget_type == "Text View" || this_widget_widget_type == "Entry"

		@radios.each{ |setting,radios|
			radios.each{ |name,radio|
				check = @widget_load_save_data[@current_window][widget_number][state_name][setting]
				get_default_value(widget_number, @current_window, state_name, setting)
				default = check ? check : @default_setting
				if default == name
					radio.active = true
					break
				end
			}
		}
		@do_not_move_widget = true
		@edit_all_settings[this_widget_widget_type].each{ |setting,value|
			check = @widget_load_save_data[@current_window][widget_number][state_name][setting]
			get_default_value(widget_number, @current_window, state_name, setting)
			if value["Type"] == "Entry"
				@edit_entries[setting].text = check ? check.to_s : @default_setting.to_s
			elsif value["Type"] == "Spin Button"
				if setting =~ /Widget Horizontal Position|Widget Vertical Position/
					check = @widget_load_save_data[@current_window][widget_number][setting]
					@edit_spin_buttons[setting].value = check ? check.to_i : 0
				else
					@edit_spin_buttons[setting].value = check ? check.to_i : @default_setting.to_i
				end
			end
		}
		@do_not_move_widget = nil
	end
	
	def self.create_notebook_tabs(page_names, page_labels, notebook_tab, tab_to_attach_to)
		page_names.each{ |tab_name|
			page_labels[tab_name] = Gtk::Label.new(tab_name)
			@edit_tab_grids["Main #{tab_name}"] = Gtk::Grid.new
			@edit_tab_grids[tab_name] = Gtk::Grid.new
			@notebooks[notebook_tab].append_page(@edit_tab_grids["Main #{tab_name}"], page_labels[tab_name])
			@edit_tab_grids["Main #{tab_name}"].attach(@edit_tab_grids[tab_name], 0, 0, 1, 1)
		}
		if tab_to_attach_to != "None"
			if notebook_tab == "Background Settings"
				@notebooks[tab_to_attach_to].append_page(@edit_tab_grids[notebook_tab], Gtk::Label.new(notebook_tab))
				temp_grid = Gtk::Grid.new
				@edit_tab_grids[notebook_tab].attach(temp_grid, 0, 0, 1, 1)
				@radio_grid_row = 0
				@edit_tab_grids[notebook_tab].attach(@notebooks[notebook_tab], 0, 1, 1, 1)
			else
				@notebooks[tab_to_attach_to].append_page(@notebooks[notebook_tab], Gtk::Label.new(notebook_tab))
			end
		else
			@edit_tab_grids[notebook_tab].attach(@notebooks[notebook_tab], 0, 0, 1, 1)
		end
	end
	
	def self.attach_radios(radio_name, grid, radios_per_row)
		column = -1
		@radios[radio_name].each{ |radio_setting,radio|
			grid.attach(radio, column += 1, @radio_grid_row, 1, 1)
			if (column % radios_per_row == 0 && column > 0) || (radios_per_row == 1)
				@radio_grid_row += 1
				column = -1
			end
		}
	end
	
	def self.populate_color_options_window(widget_number, entry, setting, type)
		window_name = "Color Options"
		option_buttons = {}
		option_labels = {}
		
		split = nil
		split = entry.text.split(/rgb |, /) if entry.text.start_with?("rgb")

		column = -1
		rgb_colors = [ "Red", "Green", "Blue" ]
		rgb_labels = {}
		rgb_spinbuttons = {}
		entries_grid = Gtk::Grid.new
		@main_grids[window_name].attach(entries_grid, 0, 0, 1, 1)
		tooltip = "Enter the RGB values for the color you want to use for this color option.\n\nThe color setting is updated every time an RGB value is changed."
		rgb_colors.each{ |color|
			rgb_labels[color] = Gtk::Label.new("#{color}     ")
			adjustment = Gtk::Adjustment.new(0, 0, 255, 1, 5, 0)
			rgb_spinbuttons[color] = Gtk::SpinButton.new(adjustment, 1, 0)
			rgb_labels[color].set_tooltip_text(tooltip)
			rgb_spinbuttons[color].set_tooltip_text(tooltip)
			entries_grid.attach(rgb_labels[color], column += 1, 0, 1, 1)
			entries_grid.attach(rgb_spinbuttons[color], column += 1, 0, 1, 1)
			
			rgb_spinbuttons[color].signal_connect("value-changed"){
				text = "rgb #{rgb_spinbuttons["Red"].value.to_i}, #{rgb_spinbuttons["Green"].value.to_i}, #{rgb_spinbuttons["Blue"].value.to_i}"
				entry.text = text
				@save_file_data = true
				if type == "Widget"
					@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = text
					edit_button(widget_number, @setup_widgets[@current_window][widget_number], @current_menu_option, @current_window, "Main")
				elsif type == "Window"
					@window_load_save_data[@current_window]["Window Background Color"] = text
					update_window_settings(@current_window)
				end
			}
		}
		
		if split
			rgb_spinbuttons["Red"].value = split[1].to_i
			rgb_spinbuttons["Green"].value = split[2].to_i
			rgb_spinbuttons["Blue"].value = split[3].to_i
		end
		
		buttons_grid = Gtk::Grid.new
		@main_grids[window_name].attach(buttons_grid, 0, 1, 1, 1)
		
		column = -1
		row = -1

		@all_colors.each{ |option|
			option_labels[option] = Gtk::Label.new(option)
			option_buttons[option] = Gtk::Button.new(:label => "")
			buttons_grid.attach(option_labels[option], column += 1, row += 1, 1, 1)
			buttons_grid.attach(option_buttons[option], column, row += 1, 1, 1)
			row -= 2
			
			provider = Gtk::CssProvider.new
			css = <<~CSS
				button {
					background-image: none;
					background-color: #{option};
				}
			CSS
			provider.load_from_data(css)
			
			context = option_buttons[option].style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			option_buttons[option].signal_connect("clicked") do
				entry.text = option_labels[option].label
				@save_file_data = true
				if type == "Widget"
					@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = option_labels[option].label
					edit_button(widget_number, @setup_widgets[@current_window][widget_number], @current_menu_option, @current_window, "Main")
				elsif type == "Window"
					@window_load_save_data[@current_window]["Window Background Color"] = option_labels[option].label
					update_window_settings(@current_window)
				end
			end
			
			if column % 9 == 0 && column > 0
				row += 2
				column = -1
			end			
		}
		@all_setup_windows[window_name].show_all
	end
	
	def self.populate_font_options_window(widget_number, entry, setting)
		window_name = "Font Options"
		option_buttons = {}
		row = -1
		column = -1
		@all_fonts.each{ |option|
			option_buttons[option] = Gtk::Button.new(:label => option)
			@main_grids[window_name].attach(option_buttons[option], column += 1, row, 1, 1)
			
			provider = Gtk::CssProvider.new
			css = <<~CSS
				button {
					font-family: #{option};
				}
			CSS
			provider.load_from_data(css)
			
			context = option_buttons[option].style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			option_buttons[option].signal_connect("clicked") do
				entry.text = option_buttons[option].label
				@save_file_data = true
				@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = option_buttons[option].label
				edit_button(widget_number, @setup_widgets[@current_window][widget_number], @current_menu_option, @current_window, "Main")
			end
			
			if column % 7 == 0 && column > 0
				row += 1
				column = -1
			end			
		}
		@all_setup_windows[window_name].show_all
	end
	
	def self.set_widget_background_option(save, default, mode)
		background_options = { "None" => 0, "Solid Color" => 1, "Radial" => 2, "Linear" => 3, "Image" => 4 }
		needed_default = default ? default : @default_widget_settings["Widget Background"]
		if mode == "Default"
			needed_option = needed_default
		else
			needed_option = save ? save : needed_default
		end
		@notebooks["Background Settings"].set_current_page(background_options[needed_option])
	end

	def self.populate_edit_button_window(widget_number)
		save = @widget_load_save_data[@current_window][widget_number]["Widget Type"]
		this_widget_widget_type = save ? save : @default_widget_settings["Widget Type"]
		@current_menu_option = this_widget_widget_type if this_widget_widget_type == "Text View" || this_widget_widget_type == "Entry"

		@notebooks = {}
		@notebooks["Main"] = Gtk::Notebook.new
		
		buttons = {}
		@edit_entries = {}
		@edit_labels = {}
		@edit_spin_buttons = {}
		example_labels = {}
		@example_widgets = {}
		@example_boxes = {}
		@bar_event_boxes = {}
		@bar_labels = {}
		@bar_overlays = {}
		@example_widgets_grid = nil
		@this_example_widget = nil
		@edit_tab_grids = {}
		tab_options = {}
		page_labels = {}
		radio_grids = {}
		@radios = {}
		@edit_text_color_button = {}
		
		@edit_all_settings[this_widget_widget_type].each{ |setting,value|
			if value["Type"] == "Radio"
				first_radio = value["First Radio"]
				other_radios = value["Other Radios"]
				@radios[setting] = {}
				@radios[setting][first_radio] = Gtk::RadioButton.new(first_radio)
				@radios[setting][first_radio].set_tooltip_text(@tooltips[setting])
				other_radios.each{ |radio|
					@radios[setting][radio] = Gtk::RadioButton.new(@radios[setting][first_radio], radio)
					@radios[setting][radio].set_tooltip_text(@tooltips[setting])
				}
			end
		}
		
		current_widget_state = @widget_current_state[@current_window][widget_number]
		current_widget_menu = @widget_current_menu[@current_window][widget_number]
		
		if this_widget_widget_type == "Default"
			page_names = [ "Text Settings", "Widget Settings", "Background Settings", "Progress Bar Settings" ]
		elsif this_widget_widget_type == "Text View"
			page_names = [ "Text View", "Widget Settings", "Background Settings", "Tags", "Show" ]
		elsif this_widget_widget_type == "Entry"
			page_names = [ "Entry", "Widget Settings", "Background Settings" ]
		end
		sub_tabs = [ "Background Settings" ]
		page_names.each{ |tab_name|
			@notebooks[tab_name] = Gtk::Notebook.new
			page_labels[tab_name] = Gtk::Label.new(tab_name)
			@edit_tab_grids[tab_name] = Gtk::Grid.new
			@notebooks["Main"].append_page(@edit_tab_grids[tab_name], page_labels[tab_name]) if !sub_tabs.include?(tab_name)
		}
		
		tab_options_list = []
		if this_widget_widget_type == "Default"
			page_names = [ "Text 1", "Text 2", "Text Shadow" ]
			create_notebook_tabs(page_names, page_labels, "Text Settings", "None")
			page_names.each{ |name| tab_options_list.push(name) }

			page_names = [ "Widget", "Border" ]
			create_notebook_tabs(page_names, page_labels, "Widget Settings", "None")
			page_names.each{ |name| tab_options_list.push(name) }
				
			page_names = [ "None", "Solid Color", "Radial", "Linear", "Image" ]
			create_notebook_tabs(page_names, page_labels, "Background Settings", "Widget Settings")
			page_names.each{ |name| tab_options_list.push(name) }
			
			page_names = [ "Progress Bar", "Progress Border", "Progress", "Trough" ]
			create_notebook_tabs(page_names, page_labels, "Progress Bar Settings", "None")
			page_names.each{ |name| tab_options_list.push(name) }
		elsif this_widget_widget_type == "Text View"
			page_names = [ "Text" ]
			create_notebook_tabs(page_names, page_labels, "Text View", "None")
			page_names.each{ |name| tab_options_list.push(name) }
			
			page_names = [ "Widget", "Border" ]
			create_notebook_tabs(page_names, page_labels, "Widget Settings", "None")
			page_names.each{ |name| tab_options_list.push(name) }
			
			page_names = [ "Toggle" ]
			@all_tag_names.each{ |setting| page_names.push(setting) }
			create_notebook_tabs(page_names, page_labels, "Tags", "None")
			page_names.each{ |name| tab_options_list.push(name) }
			
			page_names = [ "None", "Solid Color", "Radial", "Linear" ]
			create_notebook_tabs(page_names, page_labels, "Background Settings", "Widget Settings")
			page_names.each{ |name| tab_options_list.push(name) }
		elsif this_widget_widget_type == "Entry"
			page_names = [ "Text" ]
			create_notebook_tabs(page_names, page_labels, "Entry", "None")
			page_names.each{ |name| tab_options_list.push(name) }
			
			page_names = [ "Widget", "Border" ]
			create_notebook_tabs(page_names, page_labels, "Widget Settings", "None")
			page_names.each{ |name| tab_options_list.push(name) }
			
			page_names = [ "None", "Solid Color", "Radial", "Linear" ]
			create_notebook_tabs(page_names, page_labels, "Background Settings", "Widget Settings")
			page_names.each{ |name| tab_options_list.push(name) }
		end

		tab_options_list.each{ |tab_name|
			tab_options[tab_name] = []
			radio_grids[tab_name] = Gtk::Grid.new
			@edit_tab_grids["Main #{tab_name}"].attach(radio_grids[tab_name], 0, 1, 1, 1)
			@edit_all_settings[this_widget_widget_type].each{ |setting,value| tab_options[tab_name].push(setting) if @edit_all_settings[this_widget_widget_type][setting]["Tab"] == tab_name && @edit_all_settings[this_widget_widget_type][setting]["Type"] != "Radio" }
		}

		@widget_load_save_data[@current_window][widget_number] ||= {}
		@all_setup_windows["Edit Widget"].set_title("Edit Widget #{widget_number}")

		window_name = "Edit Widget"
		@main_grids[window_name].each{ |widget| @main_grids[window_name].remove(widget) }

		create_grids(window_name)
		all_grids = @all_grids[window_name]

		@main_menu = Gtk::ComboBoxText.new
		all_tooltips = "WARNING: You will lose any unsaved settings for this widget if you select a new option. Be sure to save your settings before choosing a new option and close the window if you don't want to overwrite the saved settings with the default settings of the new option.\n\nSelect what you want this widget to track.\n\n"
		@main_menu_list.each{ |menu_name,menu_values|
			create_menu(menu_name,menu_values)
			all_tooltips += "#{menu_values["Tooltip"]}\n"
		}		
		
		@main_menu.set_tooltip_text(all_tooltips)

		row = -1
		grid = all_grids.shift
		grid.attach(@main_menu, 0, row += 1, 1, 1) if this_widget_widget_type == "Default"
		menu_grid = grid
		menu_row = row
		
		if this_widget_widget_type == "Default"
			current_menu = nil
			menu_signal = nil
			@main_menu.signal_connect("changed") do |widget|
				if current_menu
					current_menu.signal_handler_disconnect(menu_signal)
					menu_grid.remove(current_menu)
					if @main_menu.active_text == "Stance"
						@text_tracking_tooltip = "Stance: Enter the text you want for the different stances.\n\nEnter OPTION1 where you want your current stance to show and OPTION2 where you want your current stance percent to show.\n\nFor example: OPTION1 OPTION2% would show \"Advance 20%\" if you were in Advance stance."
					elsif @main_menu.active_text == "Mind State"
						@text_tracking_tooltip = "Mind State: Enter the text you want for the different states of mind.\n\nEnter OPTION1 where you want your current mind state to be displayed.\n\nEnter OPTION2 where you want your current percent mind filled to be displayed."
					elsif @main_menu.active_text == "Offer"
						@text_tracking_tooltip = "Offer: Enter the text for when someone offers you an item.\n\nYou can enter OPTION1 where you want the name of the person offering you something to be.\n\nFor example: OPTION1 is offering you something!"
					elsif @main_menu.active_text == "Group Leader"
						@text_tracking_tooltip = "Group Leader: Enter the text for your group leader.\n\nYou can enter OPTION1 where you want the name of the group leader to be.\n\nFor example: Your current group leader is OPTION1!"
					elsif @main_menu.active_text == "Group Members"
						@text_tracking_tooltip = "Group Members: Enter the text for your current group members.\n\nIf you want to list every group member you must enter LIST#, # being how many members to show per line.\n\nFor example: LIST5\nThis would show 5 members per line in the widget. The group members will start being listed where the word LIST is.\n\nYou can also limit how many group members to show using MAX#, with # being the maximum number of members to show.\n\nFor example MAX3 would only show 3 group members.\n\nYou can also enter OPTION1 which will be replaced by how many members are currently in your group. You can also combine all three options, for example: Members in my group OPTION1\\nLIST4MAX10"
					elsif @main_menu.active_text == "Bounty"
						@text_tracking_tooltip = "Bounty: Enter the text you want for your current bounty information.\n\nEnter CHECKBOUNTY for where you want your current bounty information to be displayed. This option will list the entire text of BOUNTY.\n\nThe following commands are used for a more simple bounty look, you can use any of them or none of them and combine them with CHECKBOUNTY if you wish.\nEnter TASK where you want the name of your current TASK to be displayed.\nEnter ITEM where you want the needed item for the current bounty to be displayed.\nEnter CRITTER for where you want the needed critter for the current bounty to be displayed.\nEnter REMAINING for where you want the remaining number of items/critters needed for the current bounty to be displayed.\nEnter LOCATION for where you want the needed location for the current bounty to be displayed."
					elsif @main_menu.active_text == "Cast RT"
						@text_tracking_tooltip = "Cast RT: Enter the text you want for your current Cast RT. Enter OPTION1 where you want your cast RT to be displayed."
					elsif @main_menu.active_text == "Roundtime"
						@text_tracking_tooltip = "Roundtime: Enter the text you want for your current Roundtime. Enter OPTION1 where you want your Roundtime to be displayed."
					elsif @main_menu.active_text == "Silvers"
						@text_tracking_tooltip = "Silvers: Enter the text you want for your current silvers on hand information. Enter OPTION1 where you want your current silvers to be displayed."
					elsif @main_menu.active_text == "Right Hand"
						@text_tracking_tooltip = "Right Hand: Enter the text you want for what is in your right hand. Enter OPTION1 where the name of the item in your right hand to be displayed."
					elsif @main_menu.active_text == "Left Hand"
						@text_tracking_tooltip = "Left Hand: Enter the text you want for what is in your left hand. Enter OPTION1 where the name of the item in your left hand to be displayed."
					elsif @main_menu.active_text == "Spell Prep"
						@text_tracking_tooltip = "Spell Prep: Enter the text you want for your current spell prep. Enter OPTION1 where the name of your currently prepared spell will be displayed."
					elsif @main_menu.active_text == "Mana"
						@text_tracking_tooltip = "Mana: Enter the text you want for Mana.\n\nEnter OPTION1 where your current mana will be displayed.\n\nEnter OPTION2 where your maximum mana will be displayed."
					elsif @main_menu.active_text == "Health"
						@text_tracking_tooltip = "Health: Enter the text you want for Health.\n\nEnter OPTION1 where your current health will be displayed.\n\nEnter OPTION2 where your maximum health will be displayed."
					elsif @main_menu.active_text == "Stamina"
						@text_tracking_tooltip = "Stamina: Enter the text you want for Stamina.\n\nEnter OPTION1 where your current stamina will be displayed.\n\nEnter OPTION2 where your maximum stamina will be displayed."
					elsif @main_menu.active_text == "Spirit"
						@text_tracking_tooltip = "Spirit: Enter the text you want for Spirit.\n\nEnter OPTION1 where your current spirit will be displayed.\n\nEnter OPTION2 where your maximum spirit will be displayed."
					elsif @main_menu.active_text == "Experience"
						@text_tracking_tooltip = "Note: Information provided by this widget is updated every minutes as long as you have experience to absorb. Script will send an \"experience\" command to the game every minute but this process will be completely invisible to you.\n\nExperience: Enter the text you want for your current Experience.\n\nEnter OPTION1 where you want your experience to be displayed.\n\nEnter OPTION2 where you want your ascension experience to be displayed.\n\nEnter OPTION3 where you want your total experience to be displayed.\n\nEnter OPTION4 where you want your field experience to be displayed.\n\nEnter OPTION5 where you want your fame to be displayed."
					end
					@text_main_tooltip = "\n\nNOTE: Unicodes DO NOT work with every font type. Nothing bad will happen if you use a Unicode with a font that doesn't support Unicodes, the image just won't appear. The font type \"Segoe UI\" works with Unicodes.\n\nEnter the text you want to show in this widget.\n\nEnter \\n to start a new line.\nFor example: This is line 1.\\nThis is line 2.\n\nTo use a Unicode you must enter the code like this: \\u{CODEHERE}\n\For example: \\u{26E8}"
					@edit_entries["Widget Text"].set_tooltip_text("#{@text_tracking_tooltip}#{@text_main_tooltip}")
					@edit_labels["Widget Text"].set_tooltip_text("#{@text_tracking_tooltip}#{@text_main_tooltip}")
				end
				current_menu = @all_menus[@main_menu.active_text]
				menu_grid.attach(current_menu, 1, menu_row, 1, 1)
				@all_setup_windows[window_name].show_all
				menu_signal = current_menu.signal_connect("changed") do |widget|
					@widget_load_save_data[@current_window][widget_number][widget.active_text] ||= {}
					@current_menu_option = widget.active_text
					current_menu.set_tooltip_text("Select the state you want to edit settings for.\n\nYou can also click on the example widgets at the bottom of this window to change to a different state.")
					update_edit_button_all_settings(widget_number, @current_menu_option)
					tracking = @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
					update_current_widget(widget_number, @current_window, tracking, @current_menu_option)
					@widget_current_state[@current_window][widget_number] = widget.active_text
					@widget_current_menu[@current_window][widget_number] = @main_menu.active_text
				end
				current_menu.set_active(1)
				current_menu.set_active(0)
				create_example_widgets(widget_number, current_menu, example_labels)
			end

			current_menu.set_active(1)
			current_menu.set_active(0)
		end

		@widget_type_menu = Gtk::ComboBoxText.new
		widget_types = [ "Default", "Text View", "Entry" ]
		widget_types.each{ |setting| @widget_type_menu.append_text(setting) }
		@widget_type_menu.set_tooltip_text("NOTE: Changing widget type will restart the script.\n\nSelect the widget type for this widget.\n\nDefault: This type of widget tracks things such as current stance, current mind state, group members, etc.\n\nText View: This widget type is where game lines are sent to, similar to the \"Story\" or \"Game\" window in Front Ends such as Wrayth or Wizard.\n\nEntry: This is where you type commands to send to the game.")

		set_menu_active(@widget_type_menu, this_widget_widget_type)

		grid.attach(@widget_type_menu, 2, 0, 1, 1)

		grid = all_grids.shift
		grid.attach(@notebooks["Main"], 0, 1, 1, 1)

		tab_options.each{ |tab_name,settings|
			settings.each{ |setting|
				column = -1
				@edit_labels[setting] = Gtk::Label.new("#{setting}     ")
				@edit_labels[setting].set_tooltip_text(@tooltips[setting])
				@edit_tab_grids[tab_name].attach(@edit_labels[setting], column += 1, row += 1, 1, 1)
				if @edit_all_settings[this_widget_widget_type][setting]["Type"] == "Entry"
					@edit_entries[setting] = Gtk::Entry.new
					@edit_entries[setting].set_tooltip_text(@tooltips[setting])
					@edit_tab_grids[tab_name].attach(@edit_entries[setting], column += 1, row, 1, 1)
					if @edit_all_settings[this_widget_widget_type][setting]["Color"] == "Yes"
						@edit_text_color_button[setting] = Gtk::Button.new(:label => "Colors")
						@edit_text_color_button[setting].set_tooltip_text(@tooltips["Color Options"])
						@edit_text_color_button[setting].signal_connect("clicked") do
							if @all_setup_windows["Color Options"].nil?
								create_window("Color Options")
								populate_color_options_window(widget_number, @edit_entries[setting], setting, "Widget")
							end
						end
						@edit_tab_grids[tab_name].attach(@edit_text_color_button[setting], column += 1, row, 1, 1)
					elsif @edit_all_settings[this_widget_widget_type][setting]["Font"] == "Yes"
						font_options = Gtk::Button.new(:label => "Fonts")
						font_options.set_tooltip_text(@tooltips["Font Options"])
						@edit_tab_grids[tab_name].attach(font_options, column += 1, row, 1, 1)

						font_options.signal_connect("clicked") do
							if @all_setup_windows["Font Options"].nil?
								create_window("Font Options")
								populate_font_options_window(widget_number, @edit_entries[setting], setting)
							end
						end
						@edit_entries[setting].signal_connect('changed'){
							text = @edit_entries[setting].text.gsub(/[^a-zA-Z\s]/, "")
							@edit_entries[setting].text = text
						}
					end
				elsif @edit_all_settings[this_widget_widget_type][setting]["Type"] == "Spin Button"
					tag_size = []
					@all_tag_names.each{ |name| tag_size.push("#{name} Size") }
					if setting == "Font Size" || tag_size.include?(setting)
						adjustment = Gtk::Adjustment.new(0, 0, 100, 1, 5, 0)
					elsif setting =~ /Linear Degrees/
						adjustment = Gtk::Adjustment.new(0, 0, 360, 1, 5, 0)
					elsif setting =~ /Letter Spacing|Shadow Horizontal Position|Shadow Veritcal Position/
						adjustment = Gtk::Adjustment.new(0, 0, 100, 1, 2, 0)
					elsif setting =~ /Text Opacity|Widget Opacity|Text Horizontal Align|Text Vertical Align/
						adjustment = Gtk::Adjustment.new(0, 0, 10, 1, 2, 0)
					elsif setting =~ /Widget Padding|Border Width|Progress Border Width|Top Padding|Indent/
						adjustment = Gtk::Adjustment.new(0, 0, 300, 1, 5, 0)
					elsif setting =~ /Widget Width|Widget Height|Progress Bar Size|Widget Horizontal Position|Widget Vertical Position/
						adjustment = Gtk::Adjustment.new(0, 0, 3000, 1, 5, 0)
					elsif setting =~ /Border Radius|Progress Border Radius|Image Horizontal Position|Image Vertical Position|Image Horizontal Size|Image Vertical Size|Radial Horizontal Position|Radial Vertical Position|Progress Bar Horizontal Position|Progress Bar Vertical Position|Progress Bar Fraction/
						adjustment = Gtk::Adjustment.new(0, 0, 100, 1, 2, 0)
					end

					@edit_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
					@edit_spin_buttons[setting].set_tooltip_text(@tooltips[setting])
					@edit_tab_grids[tab_name].attach(@edit_spin_buttons[setting], column += 1, row, 1, 1)
					
					if setting =~ /Widget Horizontal Position|Widget Vertical Position/
						@edit_spin_buttons[setting].signal_connect("value-changed"){
							if @do_not_move_widget.nil?
								x = @edit_spin_buttons["Widget Horizontal Position"].value.to_i
								y = @edit_spin_buttons["Widget Vertical Position"].value.to_i
								@layout[@current_window].move(@main_boxes[@current_window][widget_number], x, y)
								
								@widget_load_save_data[@current_window][widget_number]["Widget Horizontal Position"] = x.to_s
								@widget_load_save_data[@current_window][widget_number]["Widget Vertical Position"] = y.to_s

								@save_file_data = true
							end
						}
					end
				end
			}
			
			@radio_grid_row = 0
			@edit_all_settings[this_widget_widget_type].each{ |setting,value|
				if value["Type"] == "Radio" && value["Tab"] == tab_name
					attach_radios(setting, radio_grids[tab_name], value["Radios Per Row"])
					@radio_grid_row += 1
				end
			}
			row = -1
		}

		if this_widget_widget_type == "Text View"
			@text_view_check_boxes = {}
			@all_tag_names.each{ |checkbox| @text_view_check_boxes[checkbox] = Gtk::CheckButton.new(checkbox) }
			add_checkboxes(@edit_tab_grids["Toggle"], @text_view_check_boxes, @widget_load_save_data[@current_window][widget_number][@current_menu_option], "Yes", "Text View")

			@all_show_names.each{ |checkbox| @text_view_check_boxes[checkbox] = Gtk::CheckButton.new(checkbox) }
			add_checkboxes(@edit_tab_grids["Show"], @text_view_check_boxes, @widget_load_save_data[@current_window][widget_number][@current_menu_option], "Yes", "Text View")
		end
		
		if this_widget_widget_type == "Default"
			@main_menu.set_active(0)
			@main_menu.set_active(1)
			if @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
				set_menu_active(@main_menu, @widget_load_save_data[@current_window][widget_number]["Widget Tracking"])
			else
				@main_menu.set_active(0)
			end
		end

		if current_widget_state
			set_menu_active(@main_menu, current_widget_menu)
			set_menu_active(current_menu, current_widget_state)
		end

		if this_widget_widget_type == "Text View" || this_widget_widget_type == "Entry"
			@widget_load_save_data[@current_window][widget_number][this_widget_widget_type] ||= {}
			update_edit_button_all_settings(widget_number, @current_menu_option)
			update_current_widget(widget_number, @current_window, "N/A", @current_menu_option)
		end

		name = "Save Widget"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked") do

			do_not_save = nil
			error_message = nil
			@edit_all_settings[this_widget_widget_type].each{ |setting,value|
				if @edit_entries[setting].text.length > 0 && @edit_all_settings[this_widget_widget_type][setting]["Color"] == "Yes"
					if @edit_entries[setting].text.start_with?("#")
						if @edit_entries[setting].text !~ /^#([A-Fa-f0-9]{6})$/
							do_not_save = setting
							error_message = "The option of \"#{@edit_entries[do_not_save].text}\" you set for \"#{do_not_save}\" is not a valid hexadecimal color.\n"
							break
						end
					elsif @edit_entries[setting].text.start_with?("rgb")
						if @edit_entries[setting].text !~ /^rgb \d+, \d+, \d+$/
							do_not_save = setting
							error_message = "The option of \"#{@edit_entries[do_not_save].text}\" you set for \"#{do_not_save}\" is not a valid rgb color.\nrgb colors must be set like this: rgb 0, 0, 0.\nEach number can be between 0 and 255."
							break
						else
							values = @edit_entries[setting].text.split(/rgb |, /)
							values.each{ |number|
								if number.length > 0
									if number.to_i < 0 || number.to_i > 255
										do_not_save = setting
										error_message = "The option of \"#{@edit_entries[do_not_save].text}\" you set for \"#{do_not_save}\" is not a valid rgb color.\nrgb colors must be set like this: rgb 0, 0, 0.\nEach number can be between 0 and 255."
										break
									end
								end
							}
						end
					else
						if !@all_colors.any? { |color| color.downcase == @edit_entries[setting].text.downcase }
							do_not_save = setting
							error_message = "The option of \"#{@edit_entries[do_not_save].text}\" you set for \"#{do_not_save}\" is not a valid option.\n\nYou must enter one of three options:\nA hexadecimal color entered like this: #000000\nAn rgb color entered like this: rgb 255, 0, 255\nOr the name of a color.\n\nClick the \"Colors\" button next to the setting for a list of all color options."
							break
						end
					end
				end
			}
			if do_not_save
				comment_response(error_message)
			else
				@radios.each{ |setting,radios|
					radios.each{ |name,radio|
						if radio.active?
							@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = name
							break
						end
					}
				}

				notebook = @notebooks["Background Settings"]
				current_page = notebook.current_page
				tab_label = notebook.get_tab_label(notebook.get_nth_page(current_page))
				@widget_load_save_data[@current_window][widget_number][@current_menu_option]["Widget Background"] = tab_label.text

				@edit_all_settings[this_widget_widget_type].each{ |setting,value|
					if @edit_entries[setting].text.length < 1
						@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = nil
					else
						if value["Type"] == "Entry"
								@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = @edit_entries[setting].text
						elsif value["Type"] == "Spin Button"
							if setting =~ /^(Widget Horizontal Position|Widget Vertical Position)$/
								@widget_load_save_data[@current_window][widget_number][setting] = @edit_spin_buttons[setting].value.to_i.to_s
							else	
								@widget_load_save_data[@current_window][widget_number][@current_menu_option][setting] = @edit_spin_buttons[setting].value.to_i.to_s
							end
						end
					end
				}
				
				x = @widget_load_save_data[@current_window][widget_number]["Widget Horizontal Position"].to_i
				y = @widget_load_save_data[@current_window][widget_number]["Widget Vertical Position"].to_i
				@layout[@current_window].move(@main_boxes[@current_window][widget_number], x, y)

				@widget_load_save_data[@current_window][widget_number]["Widget Type"] = @widget_type_menu.active_text
				if @widget_type_menu.active_text =~ /Text View|Entry/
					@widget_load_save_data[@current_window][widget_number]["Widget Tracking"] = @widget_type_menu.active_text
				else
					@widget_load_save_data[@current_window][widget_number]["Widget Tracking"] = @main_menu.active_text
				end

				@save_file_data = true
				
				if this_widget_widget_type != @widget_type_menu.active_text
					save_restart_script
				else
					create_example_widgets(widget_number, current_menu, example_labels) if example_labels.size > 0
					update_current_widget(widget_number, @current_window, @widget_load_save_data[@current_window][widget_number]["Widget Tracking"], @current_menu_option)
				end
			end
		end
	
		name = "Default Settings"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked"){
			@radios.each{ |setting,radios| radios.each{ |name,radio|
				get_default_value(widget_number, @current_window, @current_menu_option, setting)
				radio.active = true if @default_setting == name }
			}

			@edit_all_settings[this_widget_widget_type].each{ |setting,value|
				get_default_value(widget_number, @current_window, @current_menu_option, setting)
				if value["Type"] == "Entry"
					@edit_entries[setting].text = @default_setting.to_s
				elsif value["Type"] == "Spin Button"
					@edit_spin_buttons[setting].value = @default_setting.to_i unless setting =~ /Widget Horizontal Position|Widget Vertical Position/
				end
			}
			tracking = @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
			set_widget_background_option(@widget_load_save_data[@current_window][widget_number][@current_menu_option]["Widget Background"], @default_state_settings[tracking][@current_menu_option]["Widget Background"], "Default")
			
			@text_view_check_boxes.each{ |setting,checkbox| checkbox.active = true } if this_widget_widget_type == "Text View"
		}

		name = "Copy"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked"){
			@all_copied_settings[this_widget_widget_type] = {}
			copy = @all_copied_settings[this_widget_widget_type]
			@copy_button_clicked[this_widget_widget_type] = true
			@radios.each{ |setting,radios|
				radios.each{ |name,radio|
					if radio.active?
						copy[setting] = name
						break
					end
				}
			}

			@edit_all_settings[this_widget_widget_type].each{ |setting,value|
				if value["Type"] == "Entry"
					copy[setting] = @edit_entries[setting].text
				elsif value["Type"] == "Spin Button"
					copy[setting] = @edit_spin_buttons[setting].value.to_i.to_s unless setting =~ /Widget Horizontal Position|Widget Vertical Position/
				end
			}
			
			copy["Widget Background"] = @widget_load_save_data[@current_window][widget_number][@current_menu_option]["Widget Background"]
			
			if this_widget_widget_type == "Text View"
				@text_view_check_boxes.each{ |setting,checkbox|
					if checkbox.active?
						copy[setting] = "Yes"
					else
						copy[setting] = "No"
					end
				}
			end
		}
		
		name = "Paste"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked"){
			if @copy_button_clicked[this_widget_widget_type]
				paste = @all_copied_settings[this_widget_widget_type]
				@radios.each{ |setting,radios| radios.each{ |name,radio| radio.active = true if paste[setting] == name } }

				@edit_all_settings[this_widget_widget_type].each{ |setting,value|
					if value["Type"] == "Entry"
						if setting == "Widget Text"
							@edit_entries[setting].text = paste["Widget Text"].to_s
						else
							@edit_entries[setting].text = paste[setting]
						end
					elsif value["Type"] == "Spin Button"
						@edit_spin_buttons[setting].value = paste[setting].to_i unless setting =~ /Widget Horizontal Position|Widget Vertical Position/
					end
				}
				if this_widget_widget_type == "Text View"
					@text_view_check_boxes.each{ |setting,checkbox|
						if paste[setting] == "Yes"
							checkbox.active = true
						else
							checkbox.active = false
						end
					}
				end
				tracking = @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
				set_widget_background_option(paste["Widget Background"], @default_state_settings[tracking][@current_menu_option]["Widget Background"], "Load")
				
				buttons["Save Widget"].clicked
			end
		}

		grid = all_grids.shift
		row = -1
		column = -1
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		row += 1
		buttons.each{ |name,button|
			grid.attach(button, column += 1, row, 1, 1)
			buttons[name].set_tooltip_text(@tooltips[name])
		}
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		
		grid = all_grids.shift
		@example_widgets_grid = grid
		create_example_widgets(widget_number, current_menu, example_labels)
		@all_setup_windows[window_name].show_all
		
		tracking = @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
		set_widget_background_option(@widget_load_save_data[@current_window][widget_number][@current_menu_option]["Widget Background"], @default_state_settings[tracking][@current_menu_option]["Widget Background"], "Load")
	end
	
	def self.create_example_widgets(widget_number, current_menu, example_labels)
		row = -1
		if @example_menu_signal
			@example_widgets_grid.each{ |widget| @example_widgets_grid.remove(widget) }
			@this_example_widget.signal_handler_disconnect(@example_menu_signal)
		end
		current_menu.model.each do |model, path, name|
			state_name = name[0]
			this_state = state_name
			column = -1
			example_labels[this_state] = Gtk::Label.new("#{this_state}     ")
			@example_boxes[this_state] = Gtk::Box.new(:horizontal)
			@bar_labels[this_state] = Gtk::Label.new("temp")
			@example_widgets[this_state] = Gtk::ProgressBar.new
			@bar_event_boxes[this_state] = Gtk::EventBox.new
			@bar_overlays[this_state] = Gtk::Overlay.new
			@bar_event_boxes[this_state].add(@bar_labels[this_state])
			@bar_overlays[this_state].add_overlay(@bar_event_boxes[this_state])
			@bar_overlays[this_state].add(@example_widgets[this_state])
			@example_boxes[this_state].add(@bar_overlays[this_state])
			@example_menu_signal = @bar_event_boxes[this_state].signal_connect("button_press_event"){
				if Time.now > (@last_button_click + @time_between_clicks)
					@last_button_click = Time.now
					tracking = @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
					update_current_widget(widget_number, @current_window, tracking, this_state)
					set_menu_active(current_menu, this_state)
				end
			}
			@this_example_widget = @example_boxes[this_state]
			@bar_overlays[this_state].set_tooltip_text("This is an example widget which shows what this widget will look like with the current saved settings.\n\nYou can click on an example widget to switch to editing settings for that state.\n\nFor example if you are tracking \"Stance\" with this widget then you could click on the \"Guarded\" example widget to bring up the Guarded state's settings.")
			
			@example_widgets_grid.attach(example_labels[this_state], column += 1, row += 1, 1, 1)
			@example_widgets_grid.attach(@this_example_widget, column += 1, row, 1, 1)
			fill_example_widgets(@example_widgets[this_state], widget_number, this_state)
			@example_widgets_grid.show_all
		end
	end
	
	def self.fill_example_widgets(widget, widget_number, state_name)
		check = @widget_load_save_data[@current_window][widget_number][state_name]["Widget Text"]
		get_default_value(widget_number, @current_window, state_name, "Widget Text")
		text = check ? check.to_s : @default_setting.to_s

		tracking = @widget_load_save_data[@current_window][widget_number]["Widget Tracking"]
		update_current_widget(widget_number, @current_window, tracking, state_name)
		@bar_labels[state_name].label = @example_widget_text
		edit_button(widget_number, widget, state_name, @current_window, "Example")
	end
	
	def self.display_entered_command(text)
		@all_widgets_tracking["Text View"].each{ |array|
			array.each{ |window_name,widget_number|
				checkbox = @widget_load_save_data[window_name][widget_number]["Text View"]
				if @show_all_tags[window_name][widget_number] && checkbox["Commands"] != "No"
					tag = @view_all_tags[window_name][widget_number]
					@setup_widgets[window_name][widget_number].buffer.insert(@setup_widgets[window_name][widget_number].buffer.end_iter, "#{text}\n", :tags => [tag["Commands"]])
				else
					@setup_widgets[window_name][widget_number].buffer.insert(@setup_widgets[window_name][widget_number].buffer.end_iter, "#{text}\n")
				end
			}
		}
	end

	def self.create_standin_widgets
		this_window = @current_window
		@widget_current_state[this_window] ||= {}
		@widget_current_menu[this_window] ||= {}
		@main_boxes[this_window] ||= {}
		@main_event_boxes[this_window] ||= {}
		@main_overlays[this_window] ||= {}
		@main_labels[this_window] ||= {}
		@scrolled_window[this_window] ||= {}
		@view_all_tags[this_window] ||= {}
		@saved_entry_commands[this_window] ||= {}
		@layout[this_window] = Gtk::Layout.new

		@widget_load_save_data[this_window].each{ |widget_number,_|
			this_widget_number = widget_number

			tracking = @widget_load_save_data[this_window][this_widget_number]["Widget Tracking"]
			setting = @widget_load_save_data[this_window][this_widget_number][@main_menu_list[tracking]["Options"].first]["Widget Text"]
			get_default_value(this_widget_number, this_window, @main_menu_list[tracking]["Options"].first, "Widget Text")
			label_text = setting ? setting : @default_setting
				
			@main_labels[this_window][this_widget_number] = Gtk::Label.new(label_text.to_s)
			@main_event_boxes[this_window][this_widget_number] = Gtk::EventBox.new
			box = @main_event_boxes[this_window][this_widget_number]
			@main_overlays[this_window][this_widget_number] = Gtk::Overlay.new
			overlay = @main_overlays[this_window][this_widget_number]
			@main_boxes[this_window][this_widget_number] = Gtk::Box.new(:vertical)
			main_box = @main_boxes[this_window][this_widget_number]
				
			if @widget_load_save_data[this_window][this_widget_number]["Widget Type"] == "Text View"
				@setup_widgets[this_window][this_widget_number] = Gtk::TextView.new
				text_view = @setup_widgets[this_window][this_widget_number]
				
				text_view.editable = false
				text_view.wrap_mode = Gtk::WrapMode::WORD
				@view_all_tags[this_window][this_widget_number] ||= {}

				@all_tag_names.each{ |setting|
					@view_all_tags[this_window][this_widget_number][setting] = text_view.buffer.create_tag(setting)
					tag = @view_all_tags[this_window][this_widget_number][setting]
					tag_options = [ "font", "foreground", "size-points", "decoration", "weight", "style", "background" ]
					all_options = [ "Font", "Color", "Size", "Decoration", "Font Weight", "Style", "Background Color" ]
					number = 0
					all_options.each.each{ |option|
						full_setting_name = "#{setting} #{option}"
						save = @widget_load_save_data[this_window][this_widget_number]["Text View"][full_setting_name]
						needed_setting = save ? save : @default_widget_settings[full_setting_name]
						if needed_setting.length > 0
							if tag_options[number] == "decoration"
								if save == "Underline"
									tag.set_property("underline", Pango::Underline::SINGLE)
								elsif save == "Double"
									tag.set_property("underline", Pango::Underline::DOUBLE)
								elsif save == "Line-through"
									tag.set_property("strikethrough", true)
								end
							elsif tag_options[number] == "weight"
								tag.set_property("weight", Pango::Weight::BOLD) if needed_setting == "Bold"
							elsif tag_options[number] == "style"
								if needed_setting == "Italic"
									tag.style = Pango::Style::ITALIC
								elsif needed_setting == "Oblique"
									tag.style = Pango::Style::OBLIQUE
								end
							else
								if @edit_all_settings["Text View"][full_setting_name]["Type"] == "Entry"
									tag.set_property(tag_options[number], needed_setting)
								else
									tag.set_property(tag_options[number], needed_setting.to_i) if needed_setting.to_i != 0
								end
							end
						end
						number += 1
					}
				}
					
				@scrolled_window[this_window][this_widget_number] = Gtk::ScrolledWindow.new
				scroll_window = @scrolled_window[this_window][this_widget_number]
				scroll_window.set_policy(Gtk::PolicyType::AUTOMATIC, Gtk::PolicyType::AUTOMATIC)
				scroll_window.add(text_view)
					
				@scroll_to_bottom[this_window] ||= {}
				@scroll_to_bottom[this_window][this_widget_number] = true
				
				@reset_buffer[this_window] ||= {}
				@reset_buffer[this_window][this_widget_number] = nil
				
				@tag_number[this_window] ||= {}
				@tag_number[this_window][this_widget_number] = 0
					
				@show_all_tags[this_window] ||= {}
				@show_all_tags[this_window][this_widget_number] = true
				
				@scroll_mark[this_window] ||= {}
				@scroll_mark[this_window][this_widget_number] = nil
					
				@last_line_command_prompt[this_window] ||= {}
				@last_line_command_prompt[this_window][this_widget_number] = true
					
				text_view.signal_connect("button_press_event"){ |_,event|
					if event.button == Gdk::BUTTON_PRIMARY && event.state.control_mask?
						@show_all_tags[this_window][this_widget_number] = @show_all_tags[this_window][this_widget_number] ? nil : true
						if @show_all_tags[this_window][this_widget_number]
							comment_response("Hyperlinks turned on.")
						else
							comment_response("Hyperlinks turned off.")
						end
					elsif event.button == Gdk::BUTTON_PRIMARY && event.state.shift_mask?
						@scroll_to_bottom[this_window][this_widget_number] = @scroll_to_bottom[this_window][this_widget_number] ? nil : true
						if @scroll_to_bottom[this_window][this_widget_number]
							comment_response("Auto-scroll to bottom turned on.\nSHIFT-CLICK window again to turn auto-scrolling off.")
						else
							comment_response("Auto-scroll to bottom turned off.\nSHIFT-CLICK window again to turn auto-scrolling on.")
						end
					elsif event.button == Gdk::BUTTON_MIDDLE
						@reset_buffer[this_window][this_widget_number] = true
						put "look"
					else
						x, y = text_view.window_to_buffer_coords(Gtk::TextWindowType::WIDGET, event.x, event.y)
						clicked_iter = text_view.get_iter_at_location(x, y)
						needed_tag = @tag_data_mapping[this_window][this_widget_number].find{ |key,value|
							clicked_iter.offset >= value["Start Offset"] && clicked_iter.offset <= value["End Offset"]
						}
						
						if needed_tag
							show_dropdown_menu(event, needed_tag)
						end
					end
				}
				box.add(scroll_window)
				main_box.add(box)
			elsif @widget_load_save_data[this_window][this_widget_number]["Widget Type"] == "Entry"					
				@setup_widgets[this_window][this_widget_number] = Gtk::Entry.new					
				box.add(@setup_widgets[this_window][this_widget_number])
				main_box.add(box)
				
				entry = @setup_widgets[this_window][this_widget_number]
					
				@saved_entry_commands[this_window][this_widget_number] = []
				@past_commands = @saved_entry_commands[this_window][this_widget_number]
					
				entry.signal_connect("activate"){
					do_client(entry.text)
					text = entry.text.strip
					if text.length > 0 && text !~ /^si/i
						@past_commands.push(text) unless @past_commands[@past_commands.length - 1] == text
						@past_commands.shift if @past_commands.count > 50
						@current_index = nil
					end

					display_entered_command(text)
					
					entry.text = ""
				}
					
				entry.signal_connect("key-press-event"){ |widget, event|
					key = event.keyval
					if key == Gdk::Keyval::KEY_Up
						if @current_index.nil?
							@current_index = @past_commands.length - 1
						else
							@current_index -= 1 if @current_index > 0
						end
						entry.text = @past_commands[@current_index] if @current_index > -1
						entry.set_position(-1)
						true
					elsif key == Gdk::Keyval::KEY_Down
						if @current_index && @current_index <= (@past_commands.length - 2)
							@current_index += 1
							entry.text = @past_commands[@current_index]
						elsif @current_index && @current_index == (@past_commands.length - 1)
							@current_index = nil
							entry.text = ""
						else
							entry.text = ""
						end
						entry.set_position(-1)
						true
					end
				}
					
			else
				@setup_widgets[this_window][this_widget_number] = Gtk::ProgressBar.new
				box.add(@main_labels[this_window][this_widget_number])
				overlay.add_overlay(box)
				overlay.add(@setup_widgets[this_window][this_widget_number])
				main_box.add(overlay)
			end
				
			main_box.set_tooltip_text("Click to edit settings for widget number #{this_widget_number} on the #{this_window} window.\n\nNOTE: You will need to double click if this widget is an Entry type widget.") if @current_program == "Setup"
					
			box.signal_connect("button_press_event"){
				if Time.now > (@last_button_click + @time_between_clicks)
					@last_button_click = Time.now
					if @current_program == "Setup"
						edit_button_press(this_window, this_widget_number)
					elsif @current_program == "Main"
						check = @widget_load_save_data[this_window][this_widget_number][@tracker_current_state[this_window][this_widget_number]]["Command"]
						get_default_value(this_widget_number, this_window, @tracker_current_state[this_window][this_widget_number], "Command")
						command = check ? check : @default_setting
						if command.start_with?(/script/i)
							words = command.split(" ")
							variables = words.slice(2..-1)
							start_script words[1], [variables.join(' ')]
						else
							put "#{command}" if command.length > 0
						end
					end
				end
			}
				
			tracking = @widget_load_save_data[this_window][this_widget_number]["Widget Tracking"]
			x_pos = @widget_load_save_data[this_window][this_widget_number]["Widget Horizontal Position"]
			x = x_pos ? x_pos.to_i : 0
			
			y_pos = @widget_load_save_data[this_window][this_widget_number]["Widget Vertical Position"]
			y = y_pos ? y_pos.to_i : 0
			
			@layout[this_window].put(@main_boxes[this_window][this_widget_number], x, y)
			@all_widgets_tracking[tracking] ||= []
			@all_widgets_tracking[tracking].push({this_window => this_widget_number})
			if @current_program == "Setup"
				state = @main_menu_list[tracking]["Options"].first
				update_current_widget(this_widget_number, this_window, tracking, state)
			end
		}

		@setup_widgets[this_window].each{ |this_widget_number,_|
			widget = @setup_widgets[this_window][this_widget_number]
			text = @main_labels[this_window][this_widget_number].label
			unicode = text.gsub(/\\u\{([0-9a-fA-F]+)\}/) { [$1.hex].pack('U*') }
			unicode = unicode.gsub(/\\n/, "\n")
			@main_labels[this_window][this_widget_number].label = unicode
			edit_button(this_widget_number, widget, @current_menu_option, this_window, "Main")
		}

		@all_windows[this_window].add(@layout[this_window])
		@all_windows[this_window].show_all
	end
	
	def self.show_dropdown_menu(event, tag)
		menu = Gtk::Menu.new
		if tag[1]["Command"]
			action = tag[1]["Command"]
			put action
			display_entered_command(action)
		elsif tag[1]["ID"]
			id = tag[1]["ID"]
			noun = tag[1]["Noun"]
			words = tag[1]["Tagged Words"]
			command_found = nil
			@hyperlink_commands.each{ |key,value|
				if value["Full words"].include?(words)
					command_found = true
					action = "#{value["Command"]} #{noun}"
					put action
					display_entered_command(action)
					break
				end
			}
			if command_found.nil?
				direction = Room.current.wayto.find{ |room_id,dir| dir =~ /#{noun}/ }
				if direction
					item = Gtk::MenuItem.new(label: direction[1])
					menu.append(item)
					item.signal_connect('activate') {
						put direction[1]
						display_entered_command(direction[1])
					}
				else
					item = Gtk::MenuItem.new(label: "look at #{noun}")
					menu.append(item)
					item.signal_connect("activate") {
						action = "look ##{id}"
						put action

						display_entered_command(action)
					}
				end

				menu.show_all

				menu.popup(nil, nil, event.button, event.time)
			end
		end
	end
	
	def self.edit_button_press(this_window, widget_number)
		@all_setup_windows["Edit Widget"].destroy if @all_setup_windows["Edit Widget"]
		@all_setup_windows["Font Options"].destroy if @all_setup_windows["Font Options"]
		@all_setup_windows["Color Options"].destroy if @all_setup_windows["Color Options"]
		@current_window = this_window
		set_menu_active(@windows_menu, @current_window)
		create_window("Edit Widget")
		populate_edit_button_window(widget_number)
	end
	
	def self.setup_main(window_name)
		@main_notebook = Gtk::Notebook.new
		page_labels = {}

		page_names = [ "Widgets", "Windows", "Profiles" ]
		page_names.each{ |tab_name|
			page_labels[tab_name] = Gtk::Label.new(tab_name)
			@main_grids[tab_name] = Gtk::Grid.new
			@main_notebook.append_page(@main_grids[tab_name], page_labels[tab_name])
		}
		
		@all_setup_windows["Setup Menu"].add(@main_notebook)
		setup_widgets_tab(window_name)
		setup_windows_tab(window_name)
		create_profile_tab("Profiles")
		@main_notebook.set_current_page(1)
	end

	def self.setup_widgets_tab(window_name)
		this_window = window_name
		tab_name = "Widgets"
		
		@main_grids[tab_name].each{ |widget| @main_grids[tab_name].remove(widget) }
		
		create_grids(tab_name)
		all_grids = @all_grids[tab_name]
		
		settings = [ "Create Widget", "Delete Widget", "Edit Widget" ]
		labels = {}
		buttons = {}
		spin_buttons = {}
		
		grid = all_grids.shift
		column = -1
		row = -1
		settings.each{ |setting|
			labels[setting] = Gtk::Label.new("#{setting}     ")
			labels[setting].set_tooltip_text(@tooltips[setting])
			grid.attach(labels[setting], column += 1, row += 1, 1, 1)
			if setting != "Create Widget"
				adjustment = Gtk::Adjustment.new(0, 1, 1000, 1, 5, 0)
				spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
				spin_buttons[setting].set_tooltip_text(@tooltips[setting])
				grid.attach(spin_buttons[setting], column += 1, row, 1, 1)
			end
			buttons[setting] = Gtk::Button.new(:label => setting)
			buttons[setting].set_tooltip_text(@tooltips[setting])
			grid.attach(buttons[setting], column += 1, row, 1, 1)
			column = -1
		}
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		
		grid = all_grids.shift
		list = ""
		@widget_load_save_data[@current_window].each{ |widget_number,_| list += "#{widget_number}, " }
		list.chop!.chop!
		all_widgets = Gtk::Label.new("All widget numbers in this window:\n#{list}")
		all_widgets.wrap = true
		grid.attach(all_widgets, 0, 0, 1, 1)
		
		buttons["Create Widget"].signal_connect("clicked"){
			@all_setup_windows["Edit Widget"].close if @all_setup_windows["Edit Widget"]
			widget_number = 0
			200.times{
				widget_number += 1
				break if !@widget_load_save_data[@current_window].has_key?(widget_number)
			}
			@widget_load_save_data[@current_window][widget_number] = {}
			@widget_load_save_data[@current_window][widget_number]["Widget Type"] = "Default"
			@widget_load_save_data[@current_window][widget_number]["Widget Tracking"] = "Stance"
			comment_response("Widget number #{widget_number} has been created.")
			save_restart_script
		}
		
		buttons["Delete Widget"].signal_connect("clicked"){
			widget_number = spin_buttons["Delete Widget"].value.to_i
			if @widget_load_save_data[@current_window][widget_number]
				@widget_load_save_data[@current_window][widget_number] = nil
				comment_response("Widget number #{widget_number} has been deleted.")
				save_restart_script
			else
				comment_response("Widget number #{widget_number} does not exist in the #{@current_window} window. To get a widget's widget number click on the widget and look at the top of the Edit Widget window.")
			end
		}
		
		buttons["Edit Widget"].signal_connect("clicked"){
			widget_number = spin_buttons["Edit Widget"].value.to_i
			if @widget_load_save_data[@current_window][widget_number]
				edit_button_press(@current_window, widget_number)
			else
				comment_response("Widget number #{widget_number} does not exist in the #{@current_window} window.")
			end
		}

		@all_setup_windows["Setup Menu"].show_all
	end
	
	def self.save_restart_script
		@do_not_display_message = true
		@save_file_data = true
		@all_windows["Main"].close
			Thread.new{
				wait_until{ !running? "grids" }
				start_script "grids", ["setup"]
			}
	end
	
	def self.add_checkboxes(grid, check_boxes, save, default, type)
		column = -1
		row = 0
		number = 0
		check_boxes.each{ |setting,checkbox|
			number += 1
			checkbox.set_tooltip_text(@tooltips[setting])
			if default == "Yes"
				activated = save[setting] ? save[setting] : "Yes"
			else
				activated = save[setting] ? save[setting] : default[setting]
			end
			if activated == "Yes"
				checkbox.active = true
			else
				checkbox.active = false
			end
			checkbox.signal_connect("clicked"){
				if checkbox.active?
					if type == "Window"
						@window_load_save_data[@current_window][setting] = "Yes"
					else
						save[setting] = "Yes"
					end
				else
					if type == "Window"
						@window_load_save_data[@current_window][setting] = "No"
					else
						save[setting] = "No"
					end
				end
				@save_file_data = true
			}
			grid.attach(checkbox, column += 1, row, 1, 1)
			if number % 3 == 0
				column = -1
				row += 1
			end
		}
	end
	
	def self.set_menu_active(menu, wanted_item)
		needed_item = nil
		menu.model.each{ |model, path, iter|
			if wanted_item == menu.model.get_value(iter, 0)
				needed_item = iter
				break
			end
		}
		menu.set_active_iter(needed_item)
	end
	
	def self.get_current_window_positon
		position = @all_windows[@current_window].position
		@position_spin_buttons["Horizontal Position"].value = position[0].to_i
		@position_spin_buttons["Vertical Position"].value = position[1].to_i
		
		allocation = @all_windows[@current_window].allocation
		@position_spin_buttons["Horizontal Size"].value = allocation.width.to_i
		@position_spin_buttons["Vertical Size"].value = allocation.height.to_i
	end
	
	def self.comment_response(message)
		if @do_not_display_message.nil?
			respond
			respond "########################################################################################################"
			respond "Message from ;grids"
			respond message
			respond "########################################################################################################"
			respond
		end
	end
	
	def self.setup_windows_tab(window_name)
		this_window = window_name
		tab_name = "Windows"
		
		create_grids(tab_name)
		all_grids = @all_grids[tab_name]

		grid = all_grids.shift
		check_boxes = {}
		check_boxes["Keep Above"] = Gtk::CheckButton.new("Keep Above")
		check_boxes["Show Title"] = Gtk::CheckButton.new("Show Title")
		check_boxes["Maximize"] = Gtk::CheckButton.new("Maximize")
		check_boxes["Link"] = Gtk::CheckButton.new("Link")
		add_checkboxes(grid, check_boxes, @window_load_save_data[this_window], @window_originals, "Window")
		
		buttons = {}
		grid = all_grids.shift
		window_labels = {}
		window_entries = {}
		new_settings = [ "Create Window", "Window Title", "Delete Window", "Modify Window" ]

		row = -1
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		column = -1
		new_settings.each{ |setting|
			window_labels[setting] = Gtk::Label.new("#{setting}     ")
			window_entries[setting] = Gtk::Entry.new
			window_labels[setting].set_tooltip_text(@tooltips[setting])
			window_entries[setting].set_tooltip_text(@tooltips[setting])
			if setting != "Modify Window"
				buttons[setting] = Gtk::Button.new(:label => setting)
				buttons[setting].set_tooltip_text(@tooltips[setting])
				grid.attach(window_labels[setting], column += 1, row += 1, 1, 1)
				grid.attach(window_entries[setting], column += 1, row, 1, 1)
				grid.attach(buttons[setting], column += 1, row, 1, 1)
				column = -1
			end
		}
		@windows_menu = Gtk::ComboBoxText.new
		@window_load_save_data.each{ |name,_| @windows_menu.append_text(name) }	
		@windows_menu.set_tooltip_text("Choose which window you want to modify.\n\nAll settings in the Customize, Default Settings, Window Settings, and Other/Hidden Bars tabs will be specific to the current window.")
		
		grid.attach(window_labels["Modify Window"], 0, row += 1, 1, 1)
		grid.attach(@windows_menu, 1, row, 1, 1)
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
			
		@windows_menu.signal_connect("changed") do |widget|
			@current_window = widget.active_text
			needed_text = @window_load_save_data[@current_window]["Window Title"] ? @window_load_save_data[@current_window]["Window Title"] : @current_window
			window_entries["Window Title"].text = needed_text
			if !@all_windows.include?(widget.active_text)
				create_window(@current_window)
				create_standin_widgets
				setup_widgets_tab(@current_window)
			end
			save = @window_load_save_data[@current_window]
			default = @window_originals
			check_boxes.each{ |setting,checkbox| 
				activated = save[setting] ? save[setting] : default[setting]
				if activated == "Yes"
					checkbox.active = true
				else
					checkbox.active = false
				end
			}
			get_current_window_positon
			set_window_title
			color = @window_load_save_data[@current_window]["Window Background Color"] ? @window_load_save_data[@current_window]["Window Background Color"] : @window_originals["Window Background Color"]
			@window_color_entry.text = color
			setup_widgets_tab(@current_window)
			update_window_settings(@current_window)
		end
			
		buttons["Create Window"].signal_connect("clicked") do
			@all_setup_windows["Edit Widget"].close if @all_setup_windows["Edit Widget"]
			win_name = window_entries["Create Window"].text
			if win_name.length < 1
				comment_response("You must enter at least one character for the Window Name.")
			elsif @all_windows.has_key?(win_name)
				comment_response("You already have a window with this name. Choose a different name.")
			elsif win_name =~ /Setup Menu|Windows|Widgets|Profiles|Edit Widget|Color Options|Font Options/i
				comment_response("You can't name a window \"#{win_name}\".")
			else
				@windows_menu.append_text(win_name)
				window_entries["Create Window"].text = ""
				@windows_menu.set_active(@windows_menu.model.iter_n_children - 1)
				@save_file_data = true
			end
		end
		
		buttons["Window Title"].signal_connect("clicked") do
			@all_setup_windows["Edit Widget"].close if @all_setup_windows["Edit Widget"]
			@window_load_save_data[this_window]["Window Title"] = window_entries["Window Title"].text
			@all_windows[this_window].set_title(window_entries["Window Title"].text)
			@save_file_data = true
		end
			
		buttons["Delete Window"].signal_connect("clicked") do
			win_name = window_entries["Delete Window"].text
			if win_name == "Main"
				comment_response("You cannot delete the Main window.")
			else
				needed_item = nil
				@windows_menu.model.each{ |model, path, iter|
					if win_name == @windows_menu.model.get_value(iter, 0)
						needed_item = iter
						break
					end
				}
				if needed_item
					@window_load_save_data.delete(win_name)
					@widget_load_save_data.delete(win_name)
					@windows_menu.set_active(0)
					window_entries["Delete Window"].text = ""
					@windows_menu.model.remove(needed_item)
					save_restart_script
				else
					comment_response("The Window Name you entered does not exist. Enter the exact Window Name (case sensitive) and try again.")
				end
			end
		end

		labels = {}
		setting = "Background Color"
		labels[setting] = Gtk::Label.new("#{setting}     ")
		@window_color_entry = Gtk::Entry.new
		tooltip = "Select the background color for the currently selected window."
		labels[setting].set_tooltip_text(tooltip)
		@window_color_entry.set_tooltip_text(tooltip)
		color_button = Gtk::Button.new(:label => "Colors")
		color_button.set_tooltip_text(@tooltips["Color Options"])
		color_button.signal_connect("clicked") do
			if @all_setup_windows["Color Options"].nil?
				create_window("Color Options")
				populate_color_options_window("N/A", @window_color_entry, "N/A", "Window")
			end
		end
		grid = all_grids.shift
		grid.attach(labels[setting], 0, 0, 1, 1)
		grid.attach(@window_color_entry, 1, 0, 1, 1)
		grid.attach(color_button, 2, 0, 1, 1)

		note = "\n\nNote: Moving or resizing the window manually will not automatically update these values."
		settings = [ "Horizontal Position", "Vertical Position" ]
		settings.each{ |setting|
			adjustment = Gtk::Adjustment.new(0, -1000, 5000, 1, 5, 0)
			@position_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
			labels[setting] = Gtk::Label.new("#{setting}     ")
			@position_spin_buttons[setting].signal_connect("value-changed") do
				@all_windows[@current_window].move(@position_spin_buttons["Horizontal Position"].value, @position_spin_buttons["Vertical Position"].value)
			end
			tooltip = "Enter the #{setting} you want for the current window.\n\nMousewheel up/down and arrow keys up/down change the value by 1.\nPageUp/PageDown keys change the value by 5.#{note}"
			labels[setting].set_tooltip_text(tooltip)
			@position_spin_buttons[setting].set_tooltip_text(tooltip)
		}
		
		horizontal = @window_load_save_data[this_window]["Horizontal Size"] ? @window_load_save_data[this_window]["Horizontal Size"].to_i : @window_originals["Horizontal Size"].to_i
		vertical = @window_load_save_data[this_window]["Vertical Size"] ? @window_load_save_data[this_window]["Vertical Size"].to_i : @window_originals["Vertical Size"].to_i
		
		settings = [ "Horizontal Size", "Vertical Size" ]
		settings.each{ |setting|
			adjustment = Gtk::Adjustment.new(0, 120, 2000, 1, 5, 0) if setting == "Horizontal Size"
			adjustment = Gtk::Adjustment.new(0, 10, 2000, 1, 5, 0) if setting == "Vertical Size"
			@position_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
			labels[setting] = Gtk::Label.new("#{setting}     ")
			@position_spin_buttons[setting].value = 1
			@position_spin_buttons[setting].value = horizontal if setting == "Horizontal Size"
			@position_spin_buttons[setting].value = vertical if setting == "Vertical Size"
			@position_spin_buttons[setting].signal_connect("value-changed") do
				@all_windows[@current_window].resize(@position_spin_buttons["Horizontal Size"].value, @position_spin_buttons["Vertical Size"].value)
			end
			tooltip = "Enter the #{setting} you want for the current window.\n\nMousewheel up/down and arrow keys up/down change the value by 1.\nPageUp/PageDown keys change the value by 5.#{note}"
			labels[setting].set_tooltip_text(tooltip)
			@position_spin_buttons[setting].set_tooltip_text(tooltip)
		}
		
		grid = all_grids.shift
		row = -1
		@position_spin_buttons.each{ |setting,spin_button|
			column = -1
			grid.attach(labels[setting], column += 1, row += 1, 1, 1)
			grid.attach(@position_spin_buttons[setting], column += 1, row, 1, 1)
		}
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
	end

	def self.append_text(text, widget, window_name, widget_number)
		buffer = widget.buffer
		original_end_iter = buffer.end_iter
		original_text = "#{text}"
		text = strip_xml(text)
		tag = @view_all_tags[window_name][widget_number]
		checkbox = @widget_load_save_data[window_name][widget_number]["Text View"]
		
		if original_text.include?("\"thoughts\"")
			text = original_text.dup
			text.gsub!(/<pushStream id="thoughts"\/>|<a exist=".*?" noun=".*?">|<\/a>/, "")
		end
		
		if original_text.include?("<output class=\"mono\"/>")
			@apply_monospace_tag = true
		elsif original_text.include?("<output class=\"\"/>")
			@apply_monospace_tag = nil
		end
		
		go2_running = running?("go2") && (checkbox["go2"] == "No")

		if text.length > 0 && text.is_a?(String)
			@last_line_command_prompt[window_name][widget_number] = nil
			if go2_running || $grids_show_all_tags.nil?
				buffer.insert(original_end_iter, text)
			else
				if @apply_monospace_tag && checkbox["Column Formatted"] != "No"
					buffer.insert(original_end_iter, text, :tags => [tag["Column Formatted"]])
				elsif original_text =~ /<style id="roomName" \/>/ && original_text !~ /<style id=""/
					if @show_all_tags[window_name][widget_number] && checkbox["Room Name"] != "No"
						buffer.insert(original_end_iter, text, :tags => [tag["Room Name"]])
					else
						buffer.insert(original_end_iter, text)
					end
				elsif original_text.include?("\"thoughts\"") && checkbox["Thoughts"] != "No"
					buffer.insert(original_end_iter, text, :tags => [tag["Thoughts"]])
				else
					buffer.insert(original_end_iter, text)
				end
			end

			if (@show_all_tags[window_name][widget_number]) && go2_running == false && $grids_show_all_tags && (checkbox["Hyperlink"] == "Yes" || checkbox["Creatures"] == "Yes" || checkbox["Speech"] == "Yes" || checkbox["Whispers"] == "Yes")
				if original_text =~ /<a exist="(-?\d+)".*?noun="(.*?)">(.*?)<\/a>|<d cmd='(.*?)'>(.*)<\/d>|<preset id='speech'>You belt out,<\/preset>|<d>(.*?)<\/d>/
					scan_this = true
				else
					scan_this = nil
				end
				
				if scan_this
					used_positions = []
					patterns = [
						/<pushBold\/>(?:<pushBold\/>)?.*?<a exist="(-?\d+)".*?noun="(.*?)">(.*?)<\/a><popBold\/>(?:<popBold\/>)?/,
						/<preset id='speech'>You <a exist="(-?\d+)".*?noun="(.*?)">(.*?)<\/a><\/preset>/,
						/<preset id='speech'><a exist="(-?\d+)".*?noun="(.*?)">(.*?)<\/a>(.*)?<\/preset>/,
						/<preset id='speech'>You belt out,<\/preset>/,
						/<preset id='speech'>(From nearby, you hear )<a exist="(-?\d+)".*?noun="(.*?)">.*?<\/a>(.*)?<\/preset>/,
						/<preset id='speech'>(Speaking to )<a exist="(-?\d+)".*?noun="(.*?)">.*?<\/a>, <a exist="(-?\d+)".*?noun="(.*?)">.*?<\/a> (.*?)<\/preset>/,
						/<preset id='speech'>(Speaking to )<a exist="(-?\d+)".*?noun="(.*?)">.*?<\/a>, (you) (?:you )?<a exist="(-?\d+)".*?noun=".*?">(.*?)<\/a>(.*?)<\/preset>/,
						/<preset id='speech'>(Speaking to you, )<a exist="(-?\d+)" noun="(.*?)">.*?<\/a> (.*)<\/preset>,/,
						/<preset id="whisper">((?:\(OOC\) )?You quietly whisper to )<a exist="(-?\d+)" noun="(.*?)">.*?<\/a>,<\/preset>/,
						/<preset id="whisper"><a exist="(-?\d+)" noun="(.*?)">.*?<\/a>((?: leans over and)? whispers,)<\/preset>/,
						/<preset id="whisper">(\(OOC\) )<a exist="(-?\d+)" noun="(.*?)">.*?<\/a>( player whispers,)<\/preset>/,
						/<a exist="(-?\d+)".*?noun="(.*?)">(.*?)<\/a>/,
						/<d cmd='(.*?)'>(.*?)<\/d>/,
						/<d>(.*?)<\/d>/,
					]
					number = 0
					finished_ids = []
					patterns.each{ |matches|
						number += 1
						original_text.scan(/#{matches}/) do |match|
							if number == 1
								id = match[0]
								noun = match[1]
								tagged_words = match[2]
								finished_ids.push(id)
								tag_type = "Creatures"
							elsif number == 2
								id = match[0]
								command = "speak help"
								tagged_words = "You " + match[2]
								finished_ids.push(id)
								tag_type = "Speech"
							elsif number == 3
								id = match[0]
								noun = match[1]
								tagged_words = match[1] + match[3]
								finished_ids.push(id)
								tag_type = "Speech"
							elsif number == 4
								tagged_words = "You belt out"
								tag_type = "Speech"
							elsif number == 5
								id = match[1]
								noun = match[2]
								tagged_words = match[0] + match[2] + match[3]
								finished_ids.push(id)
								tag_type = "Speech"
							elsif number == 6
								id = match[1]
								noun = match[2]
								tagged_words = match[0] + "#{match[2]}, " + "#{match[4]} " + match[5]
								finished_ids.push(id)
								finished_ids.push(match[3])
								tag_type = "Speech"
							elsif number == 7
								id = match[1]
								noun = match[2]
								tagged_words = match[0] + "#{match[2]}, " + "#{match[3]} " + match[5]
								finished_ids.push(id)
								finished_ids.push(match[4])
								tag_type = "Speech"
							elsif number == 8
								id = match[1]
								noun = match[2]
								tagged_words = match[0] + "#{match[2]} " + match[3]
								finished_ids.push(id)
								tag_type = "Speech"
							elsif number == 9
								id = match[1]
								noun = match[2]
								tagged_words = match[0] + match[2]
								finished_ids.push(id)
								tag_type = "Whispers"
							elsif number == 10
								id = match[0]
								noun = match[1]
								tagged_words = match[1] + match[2]
								finished_ids.push(id)
								tag_type = "Whispers"
							elsif number == 11
								id = match[1]
								noun = match[2]
								tagged_words = match[0] + "#{match[2]}'s" + match[3]
								finished_ids.push(id)
								tag_type = "Whispers"
							elsif number == 12 && !finished_ids.include?(match[0])
								id = match[0]
								noun = match[1]
								tagged_words = match[2]
								tag_type = "Hyperlink"
							elsif number == 13
								command = match[0]
								tagged_words = match[1]
								tag_type = "Hyperlink"
							elsif number == 14
								command = match[0]
								tagged_words = match[0]
								tag_type = "Hyperlink"
							end
							if tagged_words
								if (tag_type == "Hyperlink" && checkbox["Hyperlink"] == "Yes") || (tag_type == "Creatures" && checkbox["Creatures"] == "Yes") || (tag_type == "Speech" && checkbox["Speech"] == "Yes") || (tag_type == "Whispers" && checkbox["Whispers"] == "Yes")
									positions = []
									start_position = text.index(tagged_words)
									while start_position
										positions << start_position
										start_position = text.index(tagged_words, start_position + 1)
									end

									start_of_tag = nil
									positions.each{ |start|
										if !used_positions.include?(start)
											start_of_tag = start
											used_positions.push(start)
											break
										end
									}
									if start_of_tag
										start_offset = (original_end_iter.offset - text.length + start_of_tag)
										end_offset = start_offset + tagged_words.length

										tag_number = @tag_number[window_name][widget_number]
										@tag_data_mapping[window_name] ||= {}
										@tag_data_mapping[window_name][widget_number] ||= {}
										@tag_data_mapping[window_name][widget_number][tag_number] ||= {}
										@all_applied_tags[window_name] ||= {}
										@all_applied_tags[window_name][widget_number] ||= []
										tag_map = @tag_data_mapping[window_name][widget_number][tag_number]
										tag_map["Tagged Words"] = tagged_words
										tag_map["Start Offset"] = start_offset
										tag_map["End Offset"] = end_offset
										tag_map["Command"] = command if command
										tag_map["ID"] = id if id
										tag_map["Noun"] = noun if noun
										@tag_number[window_name][widget_number] += 1
										
										new_tag = Gtk::TextTag.new("my_tag")
										new_tag = tag[tag_type]
										@all_applied_tags[window_name][widget_number]
										@all_applied_tags[window_name][widget_number].push(new_tag)

										map = @tag_data_mapping[window_name][widget_number]
										if map.length > @max_tags
											oldest_tag_id = map.keys.first
											oldest_tag = map[oldest_tag_id]
											start_iter = buffer.get_iter_at_offset(oldest_tag["Start Offset"])
											end_iter = buffer.get_iter_at_offset(oldest_tag["End Offset"])
											buffer.remove_tag(@all_applied_tags[window_name][widget_number].first, start_iter, end_iter)
											@all_applied_tags[window_name][widget_number].shift
											map.delete(oldest_tag_id)
										end

										start_iter = buffer.get_iter_at_offset(start_offset)
										end_iter = buffer.get_iter_at_offset(end_offset)
										buffer.apply_tag(new_tag, start_iter, end_iter)
									end
								end
							end
						end
					}
				end
			end
		elsif text.is_a?(NilClass) && original_text =~ /<prompt time="/ && @last_line_command_prompt[window_name][widget_number].nil?
			@last_line_command_prompt[window_name][widget_number] = true
			buffer.insert(original_end_iter, ">\n")
		end

		if buffer.line_count > @max_lines
			start_iter = buffer.get_iter_at_line(1)
			chars_to_delete = start_iter.offset - buffer.start_iter.offset
			@tag_data_mapping[window_name][widget_number].each{ |key,value|
				value["Start Offset"] -= chars_to_delete
				value["End Offset"] -= chars_to_delete
			}
			buffer.delete(buffer.start_iter, start_iter)
		end
		
		if @scroll_to_bottom[window_name][widget_number]
			Gtk.idle_add do
				if @program_is_running
					@scroll_mark[window_name][widget_number] = nil
					mark = @scroll_mark[window_name][widget_number]
					mark = widget.buffer.create_mark(nil, widget.buffer.end_iter, false) if @program_is_running
					if mark
						widget.scroll_to_mark(mark, 0.0, true, 1.0, 0.0) if @program_is_running
						widget.buffer.delete_mark(mark) if @program_is_running
					end
					false
				end
			end
		end
		
		if @reset_buffer[window_name][widget_number]
			buffer = widget.buffer
						
			map = @tag_data_mapping[window_name][widget_number]
			map.each{ |tag,value|
				start_iter = buffer.get_iter_at_offset(value["Start Offset"])
				end_iter = buffer.get_iter_at_offset(value["End Offset"])
				buffer.remove_tag(@all_applied_tags[window_name][widget_number].first, start_iter, end_iter)
				@all_applied_tags[window_name][widget_number].shift
			}
						
			buffer.text = ""
			@tag_data_mapping[window_name][widget_number] = {}
			@all_applied_tags[window_name][widget_number] ||= []
			@reset_buffer[window_name][widget_number] = nil
			comment_response("Buffer has been cleared.")
		end
	end
	
	@grid_squelch = proc{ |command, squelch_lines|
		started = false
		hook_proc = proc { |string|
			if started
				if string =~ /<prompt/
					DownstreamHook.remove("grid_squelch")
					@send_all_lines = true
					nil
				elsif string =~ /<output/
					string
				else
					nil
				end
			elsif strip_xml(string) =~ /#{squelch_lines}/
				started = true
				nil
			else
				string
			end
		}
		DownstreamHook.add("grid_squelch", hook_proc)
		@send_all_lines = nil
		put "#{command}"
	}
	
	before_dying{
		DownstreamHook.remove("grid_squelch")
		DownstreamHook.remove("grids_watching")
	}
	
	def self.update_tracking_information(tracking, state)
		if tracking == "Group Leader"
			if @all_tracking_option1[tracking] == checkname
				state = "Me"
			elsif @all_tracking_option1[tracking].nil?
				state = "No leader"
			else
				state = "Someone else"
			end
		elsif tracking == "Group Members"
			if @all_tracking_option1[tracking].count > 0
				state = "Group"
			else
				state = "No Group"
			end
		end

		@all_widgets_tracking[tracking].each{ |array|
			array.each{ |window_name,widget_number|
				update_current_widget(widget_number, window_name, tracking, state)
			}
		}
	end
	
	def self.watching
		comment_response("Start script as ;grids setup to open the Setup menu.\nThe size and positions of windows is only saved if you resize/move them in setup mode.\n\nClose any window or stop the script to close all open windows.\n\nHere is a good source to find Unicode symbols and Emojis, just search for the keyword you want:\nhttps://www.compart.com/en/unicode/\n\nHere is another good source for Unicode symbols and Emojis, it lists many of them towards bottom of page: https://en.wikipedia.org/wiki/Emoji")
		@do_not_display_message = nil
		@all_tracking_option1 = {}
		@all_tracking_option2 = {}
		@all_tracking_option3 = {}
		@all_tracking_option4 = {}
		@all_tracking_option5 = {}
		@needed_heirloom = nil
		@time_checks = {}
		@time_checks["Experience"] = Time.now
		@all_tracking_option1["Spell Prep"] = XMLData.prepared_spell
		@all_tracking_option1["Right Hand"] = GameObj.right_hand.name
		@all_tracking_option1["Left Hand"] = GameObj.left_hand.name
		@all_tracking_option1["Stance"] = checkstance.capitalize
		@all_tracking_option2["Stance"] = percentstance
		@all_tracking_option1["Group Members"] = []
		@all_tracking_option1["Mind State"] = checkmind
		@all_tracking_option2["Mind State"] = percentmind
		@all_tracking_option1["Mana"] = checkmana
		@all_tracking_option2["Mana"] = maxmana
		@all_tracking_option1["Health"] = checkhealth
		@all_tracking_option2["Health"] = maxhealth
		@all_tracking_option1["Stamina"] = checkstamina
		@all_tracking_option2["Stamina"] = maxstamina
		@all_tracking_option1["Spirit"] = checkspirit
		@all_tracking_option2["Spirit"] = maxspirit
		@all_tracking_option1["Cast RT"] = "0"
		@all_tracking_option2["Cast RT"] = "0.1"
		@all_tracking_option1["Roundtime"] = "0"
		@all_tracking_option2["Roundtime"] = "0.1"
		wait_until{ @finished_setting_up }
		@all_widgets_tracking.each{ |tracking,value|
			value.each{ |array|
				array.each{ |window_name,widget_number|
					@tracker_current_state[window_name] ||= {}
					if tracking == "Stance"
						@tracker_current_state[window_name][widget_number] = checkstance.capitalize
					elsif tracking == "Mind State"
						@tracker_current_state[window_name][widget_number] = checkmind.capitalize
					elsif tracking == "Offer"
						@tracker_current_state[window_name][widget_number] = "False"
					elsif tracking == "Group Leader" || tracking == "Group Members"
						nil
					elsif tracking == "Bounty"
						@tracker_current_state[window_name][widget_number] = "Bounty"
					elsif tracking == "Cast RT"
						@tracker_current_state[window_name][widget_number] = "Cast RT"
					elsif tracking == "Roundtime"
						@tracker_current_state[window_name][widget_number] = "Roundtime"
					elsif tracking == "Silvers"
						@tracker_current_state[window_name][widget_number] = "Silvers"
					elsif tracking == "Right Hand"
						@tracker_current_state[window_name][widget_number] = "Right Hand"
					elsif tracking == "Left Hand"
						@tracker_current_state[window_name][widget_number] = "Left Hand"
					elsif tracking == "Spell Prep"
						@tracker_current_state[window_name][widget_number] = "Spell Prep"
					elsif tracking == "Experience"
						@tracker_current_state[window_name][widget_number] = "Experience"
					elsif tracking == "Mana"
						@tracker_current_state[window_name][widget_number] = "Mana"
					elsif tracking == "Health"
						@tracker_current_state[window_name][widget_number] = "Health"
					elsif tracking == "Stamina"
						@tracker_current_state[window_name][widget_number] = "Stamina"
					elsif tracking == "Spirit"
						@tracker_current_state[window_name][widget_number] = "Spirit"
					elsif tracking == "Text View"
						@tracker_current_state[window_name][widget_number] = "Text View"
					elsif tracking == "Entry"
						@tracker_current_state[window_name][widget_number] = "Entry"
					end
					update_current_widget(widget_number, window_name, tracking, @tracker_current_state[window_name][widget_number])
				}
			}
		}
		
		if @all_widgets_tracking["Cast RT"]
			Thread.new{
				loop{
					wait_until{ checkcastrt > 0 }
					@all_tracking_option2["Cast RT"] = checkcastrt.round(1).to_s
					until checkcastrt == 0
						@all_tracking_option1["Cast RT"] = checkcastrt.round(1).to_s
						update_tracking_information("Cast RT", "Cast RT")
						sleep 0.1
					end
					@all_tracking_option1["Cast RT"] = "0"
					update_tracking_information("Cast RT", "Cast RT")
				}
			}
		end
		
		if @all_widgets_tracking["Roundtime"]
			Thread.new{
				loop{
					wait_until{ checkrt > 0 }
					@all_tracking_option2["Roundtime"] = checkrt.round(1).to_s
					until checkrt == 0
						@all_tracking_option1["Roundtime"] = checkrt.round(1).to_s
						update_tracking_information("Roundtime", "Roundtime")
						sleep 0.1
					end
					@all_tracking_option1["Roundtime"] = "0"
					update_tracking_information("Roundtime", "Roundtime")
				}
			}
		end
		
		silver_add_lines = [
			/^[a-zA-Z]+ just gave you (.*) coins which you quickly pocket\./,
			/^The teller carefully records the transaction, hands you (.*) silvers?, and says/,
			/^You gather the remaining (.*) coins?\./,
			/^[a-zA-Z]+ takes .*\, gives it a careful glance\, then pays you (.*) silvers./,
			/^[a-zA-Z]+ takes the .*\, inspects the contents carefully and removes the .* hands it back to you\, along with (.*) silver\./,
			/^\[You have earned .* bounty points\, .* experience points\, and (.*) silver\.\]/,
			/\[Your mind is already racing with your recent experiences\!  You gain no experience points due to your over\-saturated state of mind\, .* bounty points\, and (.*) silver.]/,
			/^The pawnbroker takes your .*\, glances at it briefly\, then hands you (.*) silver coins?\./,
			/^The .* gives it a careful examination and hands you (.*) silver for it\./,
			/^The .*, inspects the contents carefully\, .* along with (.*) silver\./,
			/^.* says\, \"That\'s some quality work\.  Here\'s your payment of (.*) silvers\.\"/,
		]

		silver_subtract_lines = [
			/^You deposit (.*) silvers? into your account./,
			/^You hand [a-zA-Z]+ (.*) silvers?./,
			/^You give [a-zA-Z]+ (.*) coins?./,
			/^You drop (.*) silvers?./,
			/takes the (.*) silvers? you offer in payment./,
			/pay the sales clerk (.*) silvers?./,
			/and says, "Your tip of (.*) silvers? has been recorded./,
		]
		
		get_group_info = [
			/^[a-zA-Z]+ designates you as the new leader of the group./,
			/^[a-zA-Z]+ designates ([a-zA-Z]+) as the new leader of the group./,
			/^You designate ([a-zA-Z]+) as the new leader of the group./,
			/^[a-zA-Z]+ clasps your hand tenderly./,
			/^[a-zA-Z]+ adds you to [a-zA-Z]+ group./,
			/^You join [a-zA-Z]+./,
		]
		
		no_group_info = [
			/^[a-zA-Z]+ removes you from [a-zA-Z]+ group./,
			/^You disband your group./,
			/^You leave [a-zA-Z]+\'s group./,
			/^You are not currently in a group./,
		]
		
		group_add_info = [
			/^You clasp ([a-zA-Z]+)'s hand tenderly./,
			/^You add ([a-zA-Z]+) to your group./,
			/^([a-zA-Z]+) joins your group./
		]
		
		leader = @all_widgets_tracking["Group Leader"]
		members = @all_widgets_tracking["Group Members"]
			
		action = proc { |line|
			@all_widgets_tracking["Text View"].each{ |array|
				array.each{ |window_name,widget_number|
					append_text(line, @setup_widgets[window_name][widget_number], window_name, widget_number) if @send_all_lines
				}
			}

			#Stance Information
			sline = strip_xml(line)
			if line =~ /'pbarStance' value='\d+' text='([a-zA-Z]+) \((\d+)%\)'/ && @all_widgets_tracking["Stance"]
				info = "Stance"
				@all_tracking_option1[info] = checkstance
				@all_tracking_option2[info] = percentstance
				update_tracking_information(info, checkstance.capitalize)
				
			#Bounty information
			elsif line =~ /<clearStream id='bounty'\/><pushStream id='bounty'\/>/ && @all_widgets_tracking["Bounty"]
				@collect_bounty_information = true
			elsif line =~ /<popStream id='bounty'\/>/ && @all_widgets_tracking["Bounty"]
				@collect_bounty_information = nil
			elsif @collect_bounty_information && @all_widgets_tracking["Bounty"]
				info = "Bounty"
				line = line.gsub(/<d cmd=".*">/, "")
				line = line.gsub(/<\/d>/, "")
				@all_tracking_option1[info] = line
				update_tracking_information(info, info)

			#Spell Prep information
			elsif (line =~ /<spell exist='spell'>(.*)<\/spell>/ || line =~ /<spell>(None)<\/spell>/) && @all_widgets_tracking["Spell Prep"]
				info = "Spell Prep"
				@all_tracking_option1[info] = $1
				update_tracking_information(info, info)
				
			#Mind State Information
			elsif (line =~ /id='mindState' value='(\d+)' text='([a-zA-Z\s]+)'/)
				if @all_widgets_tracking["Mind State"]
					info = "Mind State"
					@all_tracking_option1[info] = $2
					@all_tracking_option2[info] = $1
					update_tracking_information(info, @all_tracking_option1[info].capitalize)
				end
				if @all_widgets_tracking["Experience"]
					if Time.now > (@time_checks["Experience"] + 10)
						@time_checks["Experience"] = Time.now
						@squelch_exp = true
					end
				end

			#Silvers information
			elsif sline =~ /^You have (.*) coins with you./ || sline =~ /^Mana:  \d+   Silver: (.*)/ && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				@all_tracking_option1[info] = $1.gsub(",", "").to_i
				update_tracking_information(info, info)
			elsif sline =~ /^You have no silver coins with you./ && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				@all_tracking_option1[info] = 0
				update_tracking_information(info, info)
			elsif sline =~ /^You have but one coin with you./ && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				@all_tracking_option1[info] = 1
				update_tracking_information(info, info)
			elsif sline =~ /^[a-zA-Z]+ just gave you a coin which you quickly pocket\./ && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				@all_tracking_option1[info] += 1
				update_tracking_information(info, info)
			elsif sline =~ /^You drop one silver./ || sline =~ /^You give [a-zA-Z]+ a coin./ && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				@all_tracking_option1[info] -= 1
				update_tracking_information(info, info)
			elsif (match_line = silver_add_lines.find { |pattern| pattern.match(sline) }) && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				if match_line
					silvers = match_line.match(sline)[1].gsub(",", "").to_i
					@all_tracking_option1[info] += silvers
				end
				update_tracking_information(info, info)
			elsif (match_line = silver_subtract_lines.find { |pattern| pattern.match(sline) }) && @all_widgets_tracking["Silvers"]
				info = "Silvers"
				if match_line
					silvers = match_line.match(sline)[1].gsub(",", "").to_i
					@all_tracking_option1[info] -= silvers
				end
				update_tracking_information(info, info)

			#Offer Information
			#New Offer
			elsif sline =~ /^([a-zA-Z]+) offers you .*.  Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds./ && @all_widgets_tracking["Offer"]
				info = "Offer"
				@all_tracking_option1[info] = $1
				update_tracking_information(info, "True")
			#Offer expired
			elsif sline =~ /^([a-zA-Z]+)\'s offer to you has expired.|^([a-zA-Z]+) has cancelled the offer.|^Offer declined.|^You accept .* offer and are now holding|^You both have to be in the same place for that.|^You have no offers to accept./ && @all_widgets_tracking["Offer"]
				info = "Offer"
				@all_tracking_option1[info] = nil
				update_tracking_information(info, "False")
				
			#Experience Information
			elsif sline =~ (/Level: \d+\s+ Fame: ([\d,]+)/) && @all_widgets_tracking["Experience"]
				info = "Experience"
				@all_tracking_option5[info] = $1
			elsif sline =~ (/Experience: ([\d,]+)\s+ Field Exp: (.*)/) && @all_widgets_tracking["Experience"]
				info = "Experience"
				@all_tracking_option1[info] = $1
				@all_tracking_option4[info] = $2
			elsif sline =~ (/Ascension Exp: ([\d,]+)\s+ Recent Deaths:/) && @all_widgets_tracking["Experience"]
				info = "Experience"
				@all_tracking_option2[info] = $1
			elsif sline =~ (/Total Exp: ([\d,]+)\s+ Death's Sting:/) && @all_widgets_tracking["Experience"]
				info = "Experience"
				@all_tracking_option3[info] = $1
				update_tracking_information(info, info)

			#Group Information
			elsif sline =~ /^You are leading / || sline =~ /^You are grouped with ([a-zA-Z]+) who is leading/ && (leader || members)
				info = "Group Leader"
				@all_tracking_option1[info] = $1
				@all_tracking_option1[info] = checkname if sline =~ /You are leading/
				update_tracking_information(info, info) if leader
				
				info = "Group Members"
				group = sline.gsub(/You are grouped with ([a-zA-Z]+) who is leading|You are leading |\.|,| and| who is invisible| who is hidden/, "")
				group = group.split(" ")
				@all_tracking_option1[info] = []
				group.each{ |name| @all_tracking_option1[info].push(name) }
				@all_tracking_option1[info].push(@all_tracking_option1["Group Leader"]) if @all_tracking_option1["Group Leader"] != checkname
				update_tracking_information(info, info) if members
			elsif sline =~ /^You remove ([a-zA-Z]+) from the group./ || sline =~ /^([a-zA-Z]+) leaves your group./ && (leader || members)
				info = "Group Leader"
				@all_tracking_option1["Group Members"].delete($1)
				if @all_tracking_option1["Group Members"].count == 0
					@all_tracking_option1[info] = nil
					update_tracking_information(info, info) if leader
				end
				info = "Group Members"
				update_tracking_information(info, info) if members
			elsif sline =~ /^([a-zA-Z]+) removes ([a-zA-Z]+) from the group./ && (leader || members)
				info = "Group Members"
				@all_tracking_option1[info].delete($2) if @all_tracking_option1["Group Leader"] == $1
				update_tracking_information(info, info) if members
			elsif sline =~ /^([a-zA-Z]+) joins ([a-zA-Z]+)'s group./ && (leader || members)
				info = "Group Members"
				@all_tracking_option1[info].push($1) if @all_tracking_option1["Group Leader"] == $2
				update_tracking_information(info, info) if members
			elsif sline =~ /^([a-zA-Z]+) disbands [a-zA-Z]+ group./ && (leader || members)
				info = "Group Leader"
				if @all_tracking_option1[info] == $1
					@all_tracking_option1[info] = nil
					update_tracking_information(info, info) if leader
					
					@all_tracking_option1["Group Members"] = []
					update_tracking_information("Group Members", "Group Members") if members
				end
			elsif sline =~ /^([a-zA-Z]+) clasps ([a-zA-Z]+)'s hand tenderly./ || sline =~ /^([a-zA-Z]+) adds ([a-zA-Z]+) to [a-zA-Z]+ group./ && (leader || members)
				info = "Group Members"
				@all_tracking_option1[info].push($2) if @all_tracking_option1["Group Leader"] == $1
				update_tracking_information(info, info) if members
			elsif (match_line = get_group_info.find { |pattern| pattern.match(sline) }) && (leader || members)
				@squelch_group = true
			elsif (match_line = no_group_info.find { |pattern| pattern.match(sline) }) && (leader || members)
				info = "Group Leader"
				@all_tracking_option1[info] = nil
				update_tracking_information(info, info) if leader

				info = "Group Members"
				@all_tracking_option1[info] = []
				update_tracking_information(info, info) if members
			elsif (match_line = group_add_info.find { |pattern| pattern.match(sline) }) && (leader || members)
				member = match_line.match(sline)[1] if match_line
				info = "Group Leader"
				@all_tracking_option1[info] = checkname
				update_tracking_information(info, info) if leader
				
				info = "Group Members"
				@all_tracking_option1[info].push(member)
				update_tracking_information(info, info) if members
			end
			
			#Right Hand information
			if @all_widgets_tracking["Right Hand"]
				line.scan(/<right(?: exist=".*?" noun=".*?")?>(.*?)<\/right>/) do |match|
					info = "Right Hand"
					@all_tracking_option1[info] = $1
					update_tracking_information(info, info)
				end
			end

			#Left Hand information
			if @all_widgets_tracking["Left Hand"]
				line.scan(/<left(?: exist=".*?" noun=".*?")?>(.*?)<\/left>/) do |match|
					info = "Left Hand"
					@all_tracking_option1[info] = $1
					update_tracking_information(info, info)
				end
			end
			
			#Mana information
			if (line =~ /text='mana (-?\d+)\/(\d+)'/) && @all_widgets_tracking["Mana"]
				info = "Mana"
				@all_tracking_option1[info] = $1
				@all_tracking_option2[info] = $2
				update_tracking_information(info, info)
			end
			
			#Health information
			if (line =~ /text='health (-?\d+)\/(\d+)'/) && @all_widgets_tracking["Health"]
				info = "Health"
				@all_tracking_option1[info] = $1
				@all_tracking_option2[info] = $2
				update_tracking_information(info, info)
			end
			
			#Stamina information
			if (line =~ /text='stamina (-?\d+)\/(\d+)'/) && @all_widgets_tracking["Stamina"]
				info = "Stamina"
				@all_tracking_option1[info] = $1
				@all_tracking_option2[info] = $2
				update_tracking_information(info, info)
			end
			
			#Spirit information
			if (line =~ /text='spirit (-?\d+)\/(\d+)'/) && @all_widgets_tracking["Spirit"]
				info = "Spirit"
				@all_tracking_option1[info] = $1
				@all_tracking_option2[info] = $2
				update_tracking_information(info, info)
			end
			
			line
		}
		DownstreamHook.add("grids_watching", action)
		
		Thread.new{
			loop{
				wait_until{ @squelch_exp || @squelch_group }
				if @squelch_exp
					@grid_squelch.call("experience", "Level: ")
					@squelch_exp = nil
				end
				
				if @squelch_group
					@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
					@squelch_group = nil
				end
			}
		}

		@grid_squelch.call("experience", "Level: ")
		wait_until{ @send_all_lines }
		@grid_squelch.call("silver quiet", "You have no silver coins with you.|In the back of your mind you remember|You have .* coins? with you.|You are carrying a total of .* silvers?.|You have but one coin with you.|You are carrying .*valued at a total of .* silver.")
		wait_until{ @send_all_lines }
		@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
		
		sleep
	end
	
	def self.startup_setup
		create_window("Main")
		@current_window = "Main"
		create_window("Setup Menu")
		create_standin_widgets
		setup_main("Main")

		@window_load_save_data.each{ |window_name,window|
			if window_name != "Main"
				@current_window = window_name
				create_window(window_name)
				create_standin_widgets
				setup_widgets_tab(window_name)
			end
		}
		set_window_title
		set_menu_active(@windows_menu, "Main")
		@save_file_data = nil
		@first_run_through = nil
		@finished_setting_up = true
	end
	
	def self.startup_normal
		@first_run_through = nil
		@window_load_save_data.each{ |window_name,window|
			@current_window = window_name
			create_window(window_name)
			create_standin_widgets
		}
		@finished_setting_up = true
	end
	
	@timer_id = GLib::Timeout.add_seconds(1) do
		if !running? "grids"
			save_window_position("Main") if @current_program == "Setup"
			@all_windows["Main"].close
		end
		true
	end
end

$grids_script_vars_2 = script.vars[2]

GridsMain.create_profile_menu
GridsMain.load_text_data

if script.vars[1] =~ /set/i
	GridsMain.set_program = "Setup"
	Gtk.queue {
		GridsMain.startup_setup		
		Gtk.main
	}
	GridsMain.watching
else
	GridsMain.set_program = "Main"
	Gtk.queue {
		GridsMain.startup_normal
		Gtk.main
	}
	
	GridsMain.watching
end