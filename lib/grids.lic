=begin

	This is currently a work in progress. Many more features are planned for real soon now!
	
	A highly customizable window for tracking all sorts of things.
	
	You can track things like your current stance, your current mind state, whether you have a current offer (someone GIVEs you something), your current group size and names of your group members, who your group leader is, and more (soon!)
	
	You can customize each of these tracking options to look exactly how you want.
	
	Want it to simply say "STANCE OFFENSIVE" in black letters on a white background? You can do that!
	Want it to show an emoji of a red shield on a blue background? You can do that too!
	Want it to show a picture of a kitten you downloaded from the internet? Believe it or not, you can do that too!
	
	The possibilities are endless and the choices are yours!

	Version 1: Initial release!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

require 'gtk3'

silence_me

class GridsMain
	@@main_menu_list = {
		"Stance" => {
			"Options" => [
				"Offensive",
				"Advance",
				"Forward",
				"Neutral",
				"Guarded",
				"Defensive",
			],
			
			"Tooltip" => "Stance: Tracks which stance you are in.",
		},

		"Experience" => {
			"Options" => [
				"Saturated",
				"Must rest",
				"Numbed",
				"Becoming numbed",
				"Muddled",
				"Clear",
				"Fresh and clear",
				"Clear as a bell",
			],
			"Tooltip" => "Experience: Tracks the current state of your mind.",
		},
		
		"Offer" => {
			"Options" => [
				"True",
				"False",
			],
			"Tooltip" => "Offer: Tracks if you have an outstanding offer to accept or decline.",
		},
		
		"Group Leader" => {
			"Options" => [
				"Me",
				"Someone else",
				"No leader"
			],
			"Tooltip" => "Group Leader: Tracks the current leader of your group.",
		},
		
		"Group Members" => {
			"Options" => [
				"Group",
				"No Group",
			],
			"Tooltip" => "Group Members: Tracks who is in your group.",
		},
	}

	image_tooltip = "Enter where the image you want to use can be found on your computer.\n\nWARNING: You MUST follow the format in the example below, note the use of /'s:\n\nC:/Lich5/example.jpg\n\nThe image won't display if the file location is entered incorrectly.\n\nNOTE: I have only tested this on a Windows computer. I don't know if the file location format would need to be different on non-Window PCs. Please let Dreaven know if you are having an issue with this.\n\nALSO NOTE: Not all image types will work. The more common ones like JPEG, PNG, and GIF should work, although GIFs won't be animated."
	radial_colors = "Choose the color you want for each element of the radial background."
	linear_colors = "Choose the color you want for each element of the linear background."
	@@tooltips = {
		"Widget Width" => "Enter the width for this widget.",
		"Widget Height" => "Enter the height for this widget.",
		"Widget Border Color" => "Enter the color you want for this widget's border.",
		"Widget Border Width" => "Enter how thick you want this widget's border to be.",
		"Widget Border Radius" => "Enter the radius you want for this widget's border. Smaller numbers make the border more straight, higher numbers make the borders more rounded.",
		"Widget Background Color" => "Enter the color for this widget's background.",
		"Radial Shape" => "Enter the shape you want for this radial.",
		"Progress Border Color" => "Enter the color for this widget's border.",
		"Progress Border Radius" => "Enter the radius you want for the progress bar border. Smaller numbers make the border more straight, higher numbers make the borders more rounded.",
		"Widget Background Color" => "Enter the color for this widget's background.",
		"Trough Color" => "Choose the color you want for the empty part of the progress bar.\n\nFor example if the progress bar is set to be 75% full then 25% of the bar will be this color.",
		"Text Color" => "Enter the color you want for this widget's text.",
		"Font Size" => "Enter the font size you want for this widget's text",
		"Widget Padding" => "Enter the amount of padding you want for this widget. Padding is how much space you want around the text of the widget. So a padding of 10 would create 10 pixels of space around the text, essentially pushing the border of the widget out 10 pixels. A padding of 100 would create 100 pixels of space.",
		"Widget Margin" => "Enter how much margin you want for this widget. Margin is how much space you want around this widget. A margin of 10 would create 10 pixels of space around this widget, pushing all other widgets 10 pixels away.",
		"Command" => "Enter the action you want to perform when you click this widget.\n\nFor example you can enter \"attack\" and when you click this widget the action \"attack\" will be sent to the game.\n\nYou can also enter the word \"script\" first then enter the name of the script you want to start.\n\nFor example you can enter \"script test\" and the script will start ;test when you click this widget.\n\nYou can also enter command line variables after the script name.\n\nFor example you can enter \"script test wave info\" and the script will start ;test wave info when you click this widget.",
		"Copy" => "Click this button to copy all of the settings of the current widget state. You can then move to a different widget/state then click the \"Paste\" button to apply all of the copied settings to the other widget/state. Clicking \"Paste\" will automatically save the current widget's information.",
		"Paste" => "Click this button to paste all currently copied settings to the current widget state. Clicking this button will automatically save the current widget's information.",
		"Progress Bar Size" => "Set how thick you want the Progress Bar to be.",
		"Shadow Text" => "Choose whether or not you want this widget's text shadowed.",
		"Shadow Color" => "Choose the color you want for the shadowed text.",
		"Shadow Horizontal Position" => "Choose the horizontal position of the shadowed text.",
		"Shadow Veritcal Position" => "Choose the vertical position of the shadowed text.",
		"Text Decoration" => "Choose which kind of text decoration you want for this widget's text.\n\nOptions are:\nNone\nUnderline\nDouble Underline\nWavy Underline\nLine-through",
		"Text Decoration Color" => "Choose the color you want for the decoration for this text, if you have one selected in the \"Text Decoration\" button.",
		"Letter Spacing" => "Number of pixels you want between each letter.",
		"Progress Border Width" => "Set how thick you want the border for the progress bar to be.",
		"Radial Color 1" => radial_colors,
		"Radial Color 2" => radial_colors,
		"Radial Color 3" => radial_colors,
		"Radial Color 4" => radial_colors,
		"Radial Color 5" => radial_colors,
		"Linear Color 1" => linear_colors,
		"Linear Color 2" => linear_colors,
		"Linear Color 3" => linear_colors,
		"Linear Color 4" => linear_colors,
		"Linear Color 5" => linear_colors,
		"Progress Color" => "Choose the color you want for the full part of the progress bar.\n\nFor example if the progress bar is set to be 75% full then 75% of the bar will be this color.",
		"Progress Color" => "Choose the color you want for the empty part of the progress bar.\n\nFor example if the progress bar is set to be 75% full then 25% of the bar will be this color.",
		"Progress Bar Orientation" => "Set to Hide the Progress Bar or set the orientation to Horizontal or Vertical.",
		"Widget Opacity" => "Set the opacity you want for the widget: 10 is fully visible, 0 is completely hidden.\n\nNote: In setup mode the opacity for the widget stays at fully visible in the main window so you can always see it and click it to edit the widget.\n\nThe opacity setting is used (even fully invisible) for the example widgets and when the script is not in setup mode.",
		"Progress Bar Fraction" => "The percent \"full\" you want the progress bar.\n\nFor example 25 would make the progress bar 25% full, meaning 25% of the progress bar's length will be filled with the Progress Bar Color and the other 75% would be filled with the Trough Bar Color.",
		"Image Horizontal Position" => "The horizontal position you want the image inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the image all the way to the left, and 100 would position it all the way to the right.",
		"Image Vertical Position" => "The vertical position you want the image inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the image all the way to the top, and 100 would position it all the way to the bottom.",
		"Text Horizontal Align" => "The horizontal position you want the text inside of the widget.\n\nFor example 0 would position the text all the way to the left, and 10 would position it all the way to the right.",
		"Text Vertical Align" => "The vertical position you want the text inside of the widget.\n\nFor example 0 would position the text all the way to the top, and 10 would position it all the way to the bottom.",
		"Progress Bar Horizontal Position" => "If the Progress Bar is set to Vertical orientation then this sets the position you want the progressbar inside of the widget as a percent of the widget's size.\nGoing over 88 slightly increases the width of the widget, so in effect setting this to 0 sets the progress bar all the way to the right, 88 sets it all the way to the left, and 44 is centered.\n\nIf the Progress Bar is set to Horizontal orientation, then this number will increase the length of the widget by this value while keeping the progress bar the same length.\n\nFor example if you set this to 0 then nothing changes, but if you set this to 25 then the length of the widget becomes 25 longer while the progress bar remains the same size.",
		"Progress Bar Vertical Position" => "If the Progress Bar is set to Horizontal orientation then this sets the position you want the progressbar inside of the widget as a percent of the widget's size.\nGoing over 88 slightly increases the height of the widget, so in effect setting this to 0 sets the progress bar all the way to the bottom, 88 sets it all the way to the top, and 44 is centered.\n\nIf the Progress Bar is set to Vertical orientation, then this number will increase the height of the widget by this value while keeping the progress bar the same height.\n\nFor example if you set this to 0 then nothing changes, but if you set this to 25 then the height of the widget becomes 25 higher while the progress bar remains the same size.",
		"Radial Horizontal Position" => "The horizontal position you want the center of the radial to be inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the center all the way to the left, and 100 would position it all the way to the right.",
		"Radial Vertical Position" => "The vertical position you want the center of the radial to be inside of the widget as a percent of the widget's size.\n\nFor example 0 would position the center all the way to the top, and 100 would position it all the way to the bottom.",
		"Linear Degrees" => "Enter the direction in degrees you want the linear pattern to be moving in.\n\nFor example 0 would have the pattern moving from bottom to top, 180 would have the pattern moving from top to bottom.",
		"Image Horizontal Size" => "The horizontal size you want the image to be as a percent of the widget's size.\n\nFor example 25 would stretch the image horizontally to cover 25% of the widget's total horizontal length, 100 would cover the entire horizontal length of the widget.",
		"Image Vertical Size" => "The vertical size you want the image to be as a percent of the widget's size.\n\nFor example 25 would stretch the image vertically to cover 25% of the widget's total vertical length, 100 would cover the entire vertical length of the widget.",
		"Widget Background" => "Choose the type of background you want, click on the tab name for that background, fill out the settings, then click \"Save Widget\" to apply changes.",
		"Image Background Color" => "Select the background color for this widget.\n\nNote: Background color will only show if the image doesn't take up the entire space of the widget.",
		"Default Settings" => "Click this button to set all settings back to their default values.\n\nChanges won't take effect until you click \"Save Widget\".",
		"Image" => image_tooltip,
		"Image Location" => image_tooltip,
		"Font Options" => "Creates a window with clickable buttons showing various font options.\n\nClick a font button to have it applied to the text for this widget.\n\nWhile the font options window is open you can click on different example widgets to change the font for those different widget states.\n\nNote: Clicking a button will save the current widget's settings.\n\nAlso note different fonts may look the same, this is because if the font is not installed on your system then the font reverts to a default font type that works on your system.\n\nAlso also note that not every font option is listed in this window, you can try entering the name of the font you want in the \"Text Font\" setting and see if it works.",
		"Color Options" => "Creates a window with clickable buttons showing every color option.\n\nClick a color button to have it applied to the current setting.\n\nWhile editing a widget and while the color options window is open you can click on different example widgets to change the color for those different widget states.\n\nFor example you could click on the \"Offensive\" stance example to change the color for that state then click on the \"Guarded\" stance example to change color for that state.\n\nNote: Clicking a button will save the current widget's/window's settings.",
		"Text Opacity" => "Set the opacity you want for the text: 10 is fully visible, 0 is completely hidden.",
		"Widget Border Type" => "Select border type for this widget.",
		"Progress Border Type" => "Select border type for the progress bar.",
		"Font Weight" => "WARNING: Not all font types work with bold and there is no messaging indicating whether or not the font works with bold. If you choose bold for a font type that does not work with bold then the font will revert to a default font type.\n\nChoose if you want the text to be bold or normal.",
		"Font Style" => "WARNING: Not all font types work with italic and there is no messaging indicating whether or not the font works with italic. If you choose italic for a font type that does not work with italic then the font will revert to a default font type.\n\nChoose if you want the text to be italic or normal.\n\nOblique is pretty much the same as italic but italic might not work for some fonts so use oblique if italic is not working.",
		"Number of rows" => "Enter the number of rows you want for this window.",
		"Number of widgets for row" => "Enter number of widgets for this row.",
		"Create Profile" => "Enter the name of profile and click the \"Create Profile\" button to create a new profile.\n\nProfile names can only contain letters and numbers.\n\nProfiles are case-insensitive (example if you have a profile named \"test\" you can't create one named \"Test\".\n\nProfiles are saved as text files in your lich directory with the name of \"Grids Profile <profile name>\"",
		"Load Profile" => "Select the profile you want to load.",
		"Save Profile" => "Click this button to save any changes made to the current profile.\n\nSettings are saved to a file on your computer's hard drive when you close the main window, change profiles, or click this button.",
		"Default Profile" => "Click this button to make the currently loaded profile the default profile for this character.\n\nThe default profile is the profile that will be loaded whenever the script is first started.",
		"Keep Above" => "Check this box to make this window always be on top of other windows.",
		"Show Title" => "NOTE: This setting doesn't take effect until you restart the script.\n\nCheck this box to show the window's title bar. This bar is where the window's name, minimize, maximize, and close buttons are located.\n\nUncheck this box to hide the title bar for a cleaner look.\n\nOnce title bar is hidden you won't be able to click and drag the window to a new position. You can use the Horizontal and Vertical settings below to move the window.",
		"Create Window" => "Enter name of new window you want to create.\n\nName must be at least one character long and you can't have duplicate window names.\n\nClick \"Create Window\" button when ready.",
		"Delete Window" => "WARNING: DELETING A WINDOW WILL DELETE ALL SETTINGS ASSOCIATED FOR THAT WINDOW.\n\nAlso script will need to be restarted after deleting a window.\n\nEnter the name of the window you want to delete.\n\nClick \"Delete Window\" button when ready.",
		"Modify Window" => "Choose which window you want to modify.\n\nAll settings in the Customize, Default Settings, Window Settings, and Other/Hidden Bars tabs will be specific to the current window.",
		"Text Font" => "WARNING: Not all font types can display all Unicode images. \"Segoe UI\" font should show most/all Unicode images.\n\nChoose the font type you want for this widget.\n\nNote: Enter the exact name for the font type you want. Not all font types are supported and there is no messaging indicating the one you entered works or not, but if you enter a font type that isn't supported then the displayed text will automatically revert to the default font type but the setting won't change.\n\nAlso note: you can only enter letters or spaces into this setting.",
		"Save Widget" => "Click this button to apply all changes to this widget state.\n\nThis will also save all changed settings to the file when the script is closed.\n\nNOTE: All non-saved changes will be lost if you select a different state for this widget or you close this window.",
	}
	
	@@default_state_settings ={
		"Stance" => {
			"Offensive" => {
				"Widget Text" => ' 0\n\u{26E8}',
				"Progress Bar Fraction" => "0",
				"Trough Color" => "lightcyan",
			},
			"Advance" => {
				"Widget Text" => ' 20\n \u{26E8}',
				"Progress Bar Fraction" => "20",
				"Progress Color" => "crimson",
				"Trough Color" => "lightcyan",
			},
			"Forward" => {
				"Widget Text" => ' 40\n \u{26E8}',
				"Progress Bar Fraction" => "20",
				"Progress Color" => "Goldenrod",
				"Trough Color" => "lightcyan",
			},
			"Neutral" => {
				"Widget Text" => ' 60\n \u{26E8}',
				"Progress Bar Fraction" => "60",
				"Progress Color" => "gold",
				"Trough Color" => "lightcyan",
			},
			"Guarded" => {
				"Widget Text" => ' 80\n \u{26E8}',
				"Progress Bar Fraction" => "80",
				"Progress Color" => "lawngreen",
				"Trough Color" => "lightcyan",
			},
			"Defensive" => {
				"Widget Text" => '100\n \u{26E8}',
				"Progress Bar Fraction" => "100",
				"Progress Color" => "green",
				"Trough Color" => "lightcyan",
			},
		},
		
		"Experience" => {
			"Saturated" => {
				"Widget Text" => '\u{1F92F}',
				"Font Size" => "28",
				"Progress Bar Fraction" => "100",
				"Progress Color" => "red",
				"Trough Color" => "grey",
				"Progress Bar Orientation" => "Vertical",
			},
			"Must rest" => {
				"Widget Text" => '  \u{1F914}\n100%',
				"Progress Bar Fraction" => "100",
				"Progress Color" => "red",
				"Trough Color" => "grey",
				"Progress Bar Orientation" => "Vertical",
				},
			"Numbed" => {
				"Widget Text" => ' \u{1F914}\n90%',
				"Progress Bar Fraction" => "10",
				"Progress Color" => "grey",
				"Trough Color" => "crimson",
				"Progress Bar Orientation" => "Vertical",
				},
			"Becoming numbed" => {
				"Widget Text" => ' \u{1F914}\n75%',
				"Progress Bar Fraction" => "25",
				"Progress Color" => "grey",
				"Trough Color" => "firebrick",
				"Progress Bar Orientation" => "Vertical",
				},
			"Muddled" => {
				"Widget Text" => ' \u{1F914}\n62%',
				"Progress Bar Fraction" => "38",
				"Progress Color" => "grey",
				"Trough Color" => "hotpink",
				"Progress Bar Orientation" => "Vertical",
			},
			"Clear" => {
				"Widget Text" => ' \u{1F914}\n50%',
				"Progress Color" => "grey",
				"Trough Color" => "yellow",
				"Progress Bar Orientation" => "Vertical",
			},
			"Fresh and clear" => {
				"Widget Text" => ' \u{1F914}\n25%',
				"Progress Bar Fraction" => "75",
				"Progress Color" => "grey",
				"Trough Color" => "green",
				"Progress Bar Orientation" => "Vertical",
			},
			"Clear as a bell" => {
				"Widget Text" => ' \u{1F914}\n 0%',
				"Progress Bar Fraction" => "0",
				"Progress Bar Orientation" => "Vertical",
			},
		},
	
		"Offer" => {
			"True" => {
				"Widget Text" => '   \u{1F381}\nNAME',
				"Text Color" => "Crimson",
				"Widget Background Color" => "Limegreen",
				"Widget Background" => "Solid Color",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "45",
				"Widget Height" => "45",
				"Command" => "accept",
			},

			"False" => {
				"Widget Text" => '   \u{1F381}\nNAME',
				"Text Color" => "Crimson",
				"Widget Background Color" => "Limegreen",
				"Widget Background" => "Solid Color",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "45",
				"Widget Height" => "45",
				"Widget Opacity" => "0",
				"Text Opacity" => "0",
			},
		},
		
		"Group Leader" => {
			"Me" => {
				"Widget Text" => '\u{1F451}',
				"Text Color" => "Gold",
				"Font Size" => "28",
				"Widget Background Color" => "black",
				"Progress Bar Orientation" => "Hide",
			},
			
			"Someone else" => {
				"Widget Text" => '   \u{1F451}\nNAME',
				"Text Color" => "Gold",
				"Font Size" => "14",
				"Widget Background Color" => "black",
				"Progress Bar Orientation" => "Hide",
			},
			
			"No leader" => {
				"Widget Text" => '   No\nLeader',
				"Text Color" => "Gold",
				"Font Size" => "12",
				"Widget Background Color" => "black",
				"Progress Bar Orientation" => "Hide",
			},
		},
		
		"Group Members" => {
			"Group" => {
				"Widget Text" => 'Group NUMBER\nLIST5MAX10',
				"Font Size" => "10",
				"Widget Background Color" => "Beige",
				"Progress Bar Orientation" => "Hide",
				"Text Horizontal Align" => "1",
				"Text Vertical Align" => "1",
				"Widget Width" => "200",
				"Command" => "group",
			},
			
			"No Group" => {
				"Widget Text" => 'NO GROUP',
				"Font Size" => "15",
				"Widget Background Color" => "Beige",
				"Progress Bar Orientation" => "Hide",
				"Widget Width" => "200",
			},
		},
		
	}
	
	@@default_widget_settings = {
		#Widget
		"Widget Width" => "35",
		"Widget Height" => "35",
		"Widget Background Color" => "white",
		"Widget Background" => "Solid Color",
		"Widget Opacity" => "10",
		"Widget Padding" => "0",
		"Widget Margin" => "1",
		"Command" => "",
		
		#Widget Border
		"Widget Border Color" => "blue",
		"Widget Border Width" => "1",
		"Widget Border Radius" => "1",
		"Widget Border Type" => "Solid",
		
		#Radil Background
		"Radial Shape" => "Circle",
		"Radial Color 1" => "red",
		"Radial Color 2" => "blue",
		"Radial Color 3" => "",
		"Radial Color 4" => "",
		"Radial Color 5" => "",
		"Radial Horizontal Position" => "50",
		"Radial Vertical Position" => "50",
		
		#Image Background
		"Image Location" => "",
		"Image Horizontal Position" => "50",
		"Image Vertical Position" => "50",
		"Image Horizontal Size" => "100",
		"Image Vertical Size" => "100",
		"Image Background Color" => "brown",
		
		#Linear Color
		"Linear Color 1" => "white",
		"Linear Color 2" => "black",
		"Linear Color 3" => "",
		"Linear Color 4" => "",
		"Linear Color 5" => "",
		"Linear Degrees" => "180",
		
		#Text
		"Text Color" => "black",
		"Text Font" => "Segoe UI",
		"Font Size" => "15",
		"Font Weight" => "Normal",
		"Font Style" => "Normal",
		"Text Decoration" => "None",
		"Text Decoration Color" => "black",
		"Text Opacity" => "10",
		"Text Horizontal Align" => "5",
		"Text Vertical Align" => "5",
		"Letter Spacing" => "0",
		"Shadow Text" => "No Shadow",
		"Shadow Color" => "black",
		"Shadow Horizontal Position" => "0",
		"Shadow Veritcal Position" => "10",
		
		#Progress Bar
		"Progress Bar Fraction" => "50",
		"Progress Bar Horizontal Position" => "0",
		"Progress Bar Vertical Position" => "0",
		"Progress Bar Orientation" => "Horizontal",
		"Progress Bar Size" => "35",
		"Progress Color" => "blue",
		"Trough Color" => "grey",
		
		#Progress Border
		"Progress Border Color" => "blue",
		"Progress Border Width" => "0",
		"Progress Border Radius" => "0",
		"Progress Border Type" => "Solid",
	}
	
	@@window_originals = {
		"Number of rows" => "5",
		"Widgets per row" => "5",
		"Max widgets per row" => "10",
		"Max number of rows" => "10",
		"Horizontal Size" => "250",
		"Vertical Size" => "250",
		"Keep Above" => "Yes",
		"Show Title" => "Yes",
		"Window Background Color" => "White",
		"Window Position" => "[0, 0]"
	}
	
	@@all_colors = [ "Aliceblue", "Antiquewhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "Blanchedalmond", "Blue", "Blueviolet", "Brown", "Burlywood", "Cadetblue", "Chartreuse", "Chocolate", "Coral", "Cornflowerblue", "Cornsilk", "Crimson", "Cyan", "Darkblue", "Darkcyan", "Darkgoldenrod", "Darkgreen", "Darkgrey", "Darkkhaki", "Darkmagenta", "Darkolivegreen", "Darkorange", "Darkorchid", "Darkred", "Darksalmon", "Darkseagreen", "Darkslateblue", "Darkslategrey", "Darkturquoise", "Darkviolet", "Deeppink", "Deepskyblue", "Dimgrey", "Dodgerblue", "Firebrick", "Floralwhite", "Forestgreen", "Fuchsia", "Gainsboro", "Ghostwhite", "Gold", "Goldenrod", "Green", "Greenyellow", "Grey", "Honeydew", "Hotpink", "Indianred", "Indigo", "Ivory", "Khaki", "Lavender", "Lavenderblush", "Lawngreen", "Lemonchiffon", "Lightblue", "Lightcoral", "Lightcyan", "Lightgoldenrodyellow", "Lightgreen", "Lightgrey", "Lightpink", "Lightsalmon", "Lightseagreen", "Lightskyblue", "Lightslategrey", "Lightsteelblue", "Lightyellow", "Lime", "Limegreen", "Linen", "Magenta", "Maroon", "Mediumaquamarine", "Mediumblue", "Mediumorchid", "Mediumpurple", "Mediumseagreen", "Mediumslateblue", "Mediumspringgreen", "Mediumturquoise", "Mediumvioletred", "Midnightblue", "Mintcream", "Mistyrose", "Moccasin", "Navajowhite", "Navy", "Oldlace", "Olive", "Olivedrab", "Orange", "Orangered", "Orchid", "Palegoldenrod", "Palegreen", "Paleturquoise", "Palevioletred", "Papayawhip", "Peachpuff", "Peru", "Pink", "Plum", "Powderblue", "Purple", "Red", "Rosybrown", "Royalblue", "Saddlebrown", "Salmon", "Sandybrown", "Seagreen", "Seashell", "Sienna", "Silver", "Skyblue", "Slateblue", "Slategrey", "Snow", "Springgreen", "Steelblue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "Whitesmoke", "Yellow", "Yellowgreen" ]
	
	@@all_fonts = [ "Agency FB", "Algerian", "Arial", "Arial Narrow", "Arial Black", "Bahnschrift", "Baskerville Old Face", "Bell MT", "Berlin Sans FB", "Bernard MT Condensed", "Blackadder ITC", "Bodoni MT", "Book Antiqua", "Bookman Old Style", "Bradley Hand ITC", "Broadway", "Calibri", "Californian FB", "Calisto MT", "Cambria", "Cambria Math", "Candara", "Cascadia Code", "Cascadia Mono", "Castellar", "Centaur", "Century", "Century Gothic", "Century Schoolbook", "Chiller", "Colonna MT", "Comic Sans MS", "Consolas", "Constantia", "Corbel", "Courier New", "Curlz MT", "Dubai", "Ebrima", "Edwardian Script ITC", "Elephant", "Engravers MT", "Felix Titling", "Forte", "Franklin Gothic Book", "Freestyle Script", "French Script MT", "Gabriola", "Gadugi", "Garamond", "Georgia", "Gigi", "Gill Sans Ultra Bold", "Gill Sans MT", "Gloucester MT Extra Condensed", "Goudy Old Style", "Goudy Stout", "Haettenschweiler", "Harrington", "High Tower Text", "Impact", "Imprint MT Shadow", "Informal Roman", "Ink Free", "Javanese Text", "Jokerman", "Juice ITC", "Kristen ITC", "Kunstler Script", "Lucida Bright", "Lucida Calligraphy", "Lucida Console", "Lucida Fax", "Lucida Handwriting", "Lucida Sans", "Lucida Sans Typewriter", "Lucida Sans Unicode", "Magneto", "Maiandra GD", "Malgun Gothic", "Matura MT Script Capitals", "Microsoft New Tai Lue", "Microsoft PhagsPa", "Microsoft Sans Serif", "Mistral", "Mongolian Baiti", "MS Reference Sans Serif", "Niagara Engraved", "Niagara Solid", "OCR A Extended", "Old English Text MT", "Onyx", "Palatino Linotype", "Papyrus", "Parchment", "Perpetua", "Perpetua Titling MT", "Playbill", "Poor Richard", "Pristina", "Rage Italic", "Ravie", "Rockwell", "Script MT Bold", "Segoe Print", "Segoe Script", "Segoe UI", "Segoe UI Historic", "Showcard Gothic", "SimSun", "Sitka Small", "Snap ITC", "Stencil", "Sylfaen", "Tempus Sans ITC", "Times New Roman", "Trebuchet MS", "Tw Cen MT", "Verdana", "Viner Hand ITC", "Vladimir Script", "Wide Latin" ]
	
	
	@edit_all_settings = {
		#Tab Text 1:
		"Widget Text" => { "Type" => "Entry", "Tab" => "Text 1", },
		"Text Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Text 1", },
		"Text Font" => { "Type" => "Entry", "Tab" => "Text 1",},
		"Font Size" => { "Type" => "Spin Button", "Tab" => "Text 1",},
		
		#Tab Text 2
		"Text Decoration Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Text 2", },
		"Text Opacity" => { "Type" => "Spin Button", "Tab" => "Text 2", },
		"Text Horizontal Align" => { "Type" => "Spin Button", "Tab" => "Text 2", },
		"Text Vertical Align" => { "Type" => "Spin Button", "Tab" => "Text 2", },
		"Letter Spacing" => { "Type" => "Spin Button", "Tab" => "Text 2", },
		"Font Weight" => { "Type" => "Radio", "First Radio" => "Normal", "Other Radios" => [ "Bold" ], "Radios Per Row" => 3, "Tab" => "Text 2", },
		"Font Style" => { "Type" => "Radio", "First Radio" => "Normal", "Other Radios" => [ "Italic", "Oblique" ], "Radios Per Row" => 3, "Tab" => "Text 2", },
		"Text Decoration" => { "Type" => "Radio", "First Radio" => "None", "Other Radios" => [ "Underline", "Double", "Wavy", "Line-through" ], "Radios Per Row" => 4, "Tab" => "Text 2", },
		
		#Tab Text Shadow
		"Shadow Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Text Shadow", },
		"Shadow Horizontal Position" => { "Type" => "Spin Button", "Tab" => "Text Shadow", },
		"Shadow Veritcal Position" => { "Type" => "Spin Button", "Tab" => "Text Shadow", },
		"Shadow Text" => { "Type" => "Radio", "First Radio" => "Shadow", "Other Radios" => [ "No Shadow" ], "Radios Per Row" => 2, "Tab" => "Text Shadow", },
		
		#Tab Widget
		"Command" => { "Type" => "Entry", "Tab" => "Widget", },
		"Widget Opacity" => { "Type" => "Spin Button", "Tab" => "Widget", },
		"Widget Padding" => { "Type" => "Spin Button", "Tab" => "Widget", },
		"Widget Margin" => { "Type" => "Spin Button", "Tab" => "Widget", },
		"Widget Width" => { "Type" => "Spin Button", "Tab" => "Widget", },
		"Widget Height" => { "Type" => "Spin Button", "Tab" => "Widget", },
		
		#Tab Border
		"Widget Border Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Border", },
		"Widget Border Width" => { "Type" => "Spin Button", "Tab" => "Border", },
		"Widget Border Radius" => { "Type" => "Spin Button", "Tab" => "Border", },
		"Widget Border Type" => { "Type" => "Radio", "First Radio" => "Dotted", "Other Radios" => [ "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", "Outset" ], "Radios Per Row" => 3, "Tab" => "Border", },
		
		#Tab Progress Bar
		"Progress Bar Fraction" => { "Type" => "Spin Button", "Tab" => "Progress Bar", },
		"Progress Bar Horizontal Position" => { "Type" => "Spin Button", "Tab" => "Progress Bar", },
		"Progress Bar Vertical Position" => { "Type" => "Spin Button", "Tab" => "Progress Bar", },
		"Progress Bar Size" => { "Type" => "Spin Button", "Tab" => "Progress Bar", },
		"Progress Bar Orientation" => { "Type" => "Radio", "First Radio" => "Hide", "Other Radios" => [ "Horizontal", "Vertical" ], "Radios Per Row" => 3, "Tab" => "Progress Bar", },
		
		#Tab Progress Border
		"Progress Border Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Progress Border", },
		"Progress Border Width" => { "Type" => "Spin Button", "Tab" => "Progress Border", },
		"Progress Border Radius" => { "Type" => "Spin Button", "Tab" => "Progress Border", },
		"Progress Border Type" => { "Type" => "Radio", "First Radio" => "Dotted", "Other Radios" => [ "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", "Outset" ], "Radios Per Row" => 3, "Tab" => "Progress Border", },
		
		#Tab Progress
		"Progress Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Progress", },
		
		#Tab Trough
		"Trough Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Trough", },
		
		#Tab Solid Color
		"Widget Background Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Solid Color", },
		
		#Tab Image
		"Image Location" => { "Type" => "Entry", "Tab" => "Image", },
		"Image Horizontal Position" => { "Type" => "Spin Button", "Tab" => "Image", },
		"Image Vertical Position" => { "Type" => "Spin Button", "Tab" => "Image", },
		"Image Horizontal Size" => { "Type" => "Spin Button", "Tab" => "Image", },
		"Image Vertical Size" => { "Type" => "Spin Button", "Tab" => "Image", },
		"Image Background Color" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Image", },
		
		#Tab Radial
		"Radial Color 1" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Radial", },
		"Radial Color 2" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Radial", },
		"Radial Color 3" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Radial", },
		"Radial Color 4" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Radial", },
		"Radial Color 5" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Radial", },
		"Radial Horizontal Position" => { "Type" => "Spin Button", "Tab" => "Radial", },
		"Radial Vertical Position" => { "Type" => "Spin Button", "Tab" => "Radial", },
		"Radial Shape" => { "Type" => "Radio", "First Radio" => "Circle", "Other Radios" => [ "Ellipse" ], "Radios Per Row" => 2, "Tab" => "Radial", },
		
		#Tab Linear
		"Linear Color 1" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Linear", },
		"Linear Color 2" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Linear", },
		"Linear Color 3" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Linear", },
		"Linear Color 4" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Linear", },
		"Linear Color 5" => { "Type" => "Entry", "Color" => "Yes", "Tab" => "Linear", },
		"Linear Degrees" => { "Type" => "Spin Button", "Tab" => "Linear", },

		#Background Settings
		"Widget Background" => { "Type" => "Radio", "First Radio" => "None", "Other Radios" => [ "Solid Color", "Image", "Radial", "Linear" ], "Radios Per Row" => 20, },
	}
	
	@@window_load_save_data = {}
	@@widget_load_save_data = {}
	
	@@all_setup_windows = {}

	@@first_run_through = true
	@@current_menu_option = nil
	@@all_menus = {}
	@@current_profile_file = nil
	@@position_spin_buttons = {}
	@@window_background_color = {}
	@@spin_buttons = {}
	@@all_windows = {}
	@@main_grids = {}
	@sub_grids = {}
	@all_grids = {}
	@widget_current_state = {}
	@widget_current_menu = {}
	@@labels = {}
	@@setup_widgets = {}
	@@setup_windows = {}
	@@save_file_data = nil
	@@do_not_stop_script = nil
	@@example_menu_signal = nil
	@copy_button_clicked = nil
	@@all_widgets_tracking = {}
	@@current_program = nil
	@@main_menu = nil
	@@tracker_current_state = {}
	@last_button_click = Time.now
	@time_between_clicks = 0.10
	
	def self.get_default_value(widget_number, state, setting)
		tracking = @@main_menu.active_text if !@@main_menu.destroyed? && @@current_program == "Setup"
		tracking = @@widget_load_save_data[@@current_window][widget_number]["Widget Tracking"] if tracking.nil?
		state = @@main_menu_list[tracking]["Options"].first if state.nil?
		@default_setting = nil
		@default_setting = @@default_state_settings[tracking][state][setting] ? @@default_state_settings[tracking][state][setting] : @@default_widget_settings[setting]
	end
	
	def self.create_menu(menu_name,menu_values)
		@@main_menu.append_text(menu_name)
		@@all_menus[menu_name] = Gtk::ComboBoxText.new

		menu_values["Options"].each{ |option| @@all_menus[menu_name].append_text(option) }
	end
	
	def self.set_program=(value)
		@@current_program = value
	end

	def self.create_window(window_name)
		if window_name == "Setup Menu" || window_name == "Edit Widget" || window_name == "Color Options" || window_name == "Font Options"
			window_data = @@all_setup_windows
		else
			window_data = @@all_windows
		end
		window_data[window_name] = Gtk::Window.new(:toplevel)
		window_data[window_name].set_title(window_name)
		window_data[window_name].set_keep_above(true)
		
		setting = "Show Title"
		setting_state = @@window_load_save_data[window_name][setting] ? @@window_load_save_data[window_name][setting] : @@window_originals[setting]
		if setting_state == "Yes"
			@@all_windows[window_name].set_decorated(true)
		else
			@@all_windows[window_name].set_decorated(false)
		end
		
		setting = "Keep Above"
		setting_state = @@window_load_save_data[window_name][setting] ? @@window_load_save_data[window_name][setting] : @@window_originals[setting]
		@@all_windows[window_name].set_keep_above(false) if setting_state == "No"
		
		if window_name == "Setup Menu"
			screen = window_data[window_name].screen
			screen_width = screen.width
			window_width = window_data[window_name].size[0]
			x = (screen_width - window_width) / 2.5
			window_data[window_name].move(x, 0)
		elsif window_name == "Edit Widget"
			window_data[window_name].move(185, 0)
		elsif window_name == "Color Options" || window_name == "Font Options"
			window_data[window_name].move(500, 0)
		end

		if window_name != "Setup Menu"
			@@main_grids[window_name] = Gtk::Grid.new
			window_data[window_name].add(@@main_grids[window_name])
		end
	
		if window_name != "Setup Menu" && window_name != "Edit Widget" && window_name != "Color Options" && window_name != "Font Options"
			@@window_load_save_data[window_name] ||= {}
			@@widget_load_save_data[window_name] ||= {}
			@@setup_widgets[window_name] ||= {}
			position = @@window_load_save_data[window_name]["Window Position"] ? @@window_load_save_data[window_name]["Window Position"] : @@window_originals["Window Position"]
			position = JSON.parse(position)
			@@original_position[window_name] = position.dup
			@@all_windows[window_name].move(position[0].to_i, position[1].to_i)

			horizontal = @@window_load_save_data[window_name]["Horizontal Size"] ? @@window_load_save_data[window_name]["Horizontal Size"].to_i : @@window_originals["Horizontal Size"].to_i
			vertical = @@window_load_save_data[window_name]["Vertical Size"] ? @@window_load_save_data[window_name]["Vertical Size"].to_i : @@window_originals["Vertical Size"].to_i
			
			@@original_horizontal_size[window_name] = horizontal
			@@original_vertical_size[window_name] = vertical

			@@all_windows[window_name].resize(horizontal, vertical)
			
			@@spin_buttons[window_name] = {}
			
			@@all_windows[window_name].signal_connect("delete-event") do
				save_window_position(window_name)
				false
			end
		end
		
		window_data[window_name].signal_connect("destroy") do
			if window_name == "Main"
				all_windows = [ @@all_setup_windows, @@all_windows ]
				all_windows.each{ |window_array|
					window_array.each{ |name_window,window|
						if !window.destroyed? && name_window != "Main"
							save_window_position(name_window) if @@current_program == "Setup"
							window.close
						end
					}
				}
				save_data_to_profile
				@@all_windows = {}
				Gtk.main_quit if Gtk.main_level == 0
				if running? "grids"
					kill_script "grids" if @@do_not_stop_script.nil?
				end
				GLib::Source.remove(@timer_id)
			else
				if window_name != "Edit Widget" && window_name != "Color Options" && window_name != "Font Options"
					save_window_position("Main") if @@current_program == "Setup"
					@@all_windows["Main"].close
				end
				window_data[window_name] = nil
			end
		end
		
		update_window_settings(window_name)
		window_data[window_name].show_all
	end
	
	def self.set_window_title
		@@all_setup_windows["Setup Menu"].title = "Setup Menu for #{@@current_window} Window - #{@@current_profile_file} Profile"
	end
	
	def self.load_text_data
		@@current_window = "Main"
		@@original_position = {}
		@@original_horizontal_size = {}
		@@original_vertical_size = {}
		@@window_load_save_data[@@current_window] = {}
		@@widget_load_save_data[@@current_window] = {}
		window_name = @@current_window
		hash = @@widget_load_save_data
		widget_number = nil
		comment_response("Loading settings from #{@@current_profile_file} profile.")
		file_name = "Grids Profile #{@@current_profile_file}.txt"
		if File.exist?(file_name)
			File.open(file_name, "r") do |file|
				file.each_line do |line|
					if line.start_with?(/Window Name: (.*)/)
						window_name = $1
						@@widget_load_save_data[window_name] = {}
						@@window_load_save_data[window_name] = {}
						hash = @@widget_load_save_data[window_name]
					elsif line.start_with?(/(\d+):/)
						widget_number = $1.to_i
						hash[widget_number] = {} if hash[widget_number].nil?
					elsif line.start_with?("Window Settings")
						hash = @@window_load_save_data[window_name]
						widget_number = nil
					elsif line.start_with?(/Option\: (.*)\: (.*)\: (.*)/)
						hash[widget_number][$1] ||= {}
						hash[widget_number][$1][$2] = $3
					elsif line =~ /: /
						info = line.split(": ")
						if widget_number
							hash[widget_number][info[0]] = info[1].chop
						else
							hash[info[0]] = info[1].chop
						end
					end
				end
			end
		end
		@@widget_load_save_data.each{ |window_name,value|
			value.each{ |widget_number,_|
				tracking = @@widget_load_save_data[window_name][widget_number]["Widget Tracking"]
				@@main_menu_list[tracking]["Options"].each{ |state|
					if @@widget_load_save_data[window_name][widget_number][state]["Widget Text"].nil?
						@@widget_load_save_data[window_name][widget_number][state] ||= {}
						@@widget_load_save_data[window_name][widget_number][state]["Widget Text"] = @@default_state_settings[tracking][state]["Widget Text"]
					end
				}
			}
		}
	end
	
	def self.save_data_to_profile
		if @@current_program == "Setup"
			if @@save_file_data
				comment_response("Saving settings to #{@@current_profile_file} profile.")
				needed_file = "Grids Profile #{@@current_profile_file}.txt"
				@@all_windows.each{ |window_name,window| @@all_windows.delete(window_name) if @@window_load_save_data[window_name].length.nil?}
				File.open(needed_file, "w") do |file|
					@@all_windows.each{ |window_name,window|
						file.puts "\nWindow Name: #{window_name}"
						file.puts "\Widget Settings"
						@@widget_load_save_data[window_name].each{ |widget_number,value|
							tracking = @@widget_load_save_data[window_name][widget_number]["Widget Tracking"]
							if @@widget_load_save_data[window_name][widget_number].count > 0
								file.puts "\n#{widget_number}:"
								@@widget_load_save_data[window_name][widget_number].each{ |setting,setting_value|
									if setting_value.is_a?(Hash)
										setting_value.each{ |setting_a,setting_value_a|
												if @@main_menu_list[tracking]["Options"].include?(setting)
													default = @@default_state_settings[tracking][setting][setting_a] ? @@default_state_settings[tracking][setting][setting_a] : @@default_widget_settings[setting_a]
													if default != setting_value_a
														if setting_a == "Widget Text"
															file.puts "Option: #{setting}: #{setting_a}: #{setting_value_a}"
														else
															file.puts "Option: #{setting}: #{setting_a}: #{setting_value_a}" if setting_value_a.length > 0
														end
													end
												end
											}
									else
										file.puts "#{setting}: #{setting_value}" if setting_value.length > 0
									end
								}
							end
						}
						setting = "Number of rows"
						number_of_rows = @@window_load_save_data[window_name][setting] ? @@window_load_save_data[window_name][setting].to_i : @@window_originals[setting].to_i
						@@window_load_save_data[window_name].each{ |setting,setting_value|
							if setting =~ /Row (\d+)/
								@@window_load_save_data[window_name].delete(setting) if @@window_load_save_data[window_name][setting].to_s == @@window_originals["Widgets per row"].to_s
								@@window_load_save_data[window_name].delete(setting) if $1.to_i > number_of_rows
							else
								@@window_load_save_data[window_name].delete(setting) if @@window_load_save_data[window_name][setting].to_s == @@window_originals[setting].to_s
							end
						}
						if @@window_load_save_data[window_name].count > 0
							file.puts "\nWindow Settings"
							@@window_load_save_data[window_name].each{ |setting,setting_value| file.puts "#{setting}: #{setting_value}" }
						end
					}
				end
				@@save_file_data = nil
			else
				comment_response("No changes were made to #{@@current_profile_file} profile.")
			end
		end
	end
	
	def self.create_profile_menu
		@@profile_menu = Gtk::ComboBoxText.new
		Dir.children(File.join(LICH_DIR)).each{ |file_name| @@profile_menu.append_text(file_name.gsub!(/Grids Profile|.txt| /, "")) if file_name =~ /Grids Profile/ }

		default_profile = nil
		if @@current_profile_file
			default_profile = @@current_profile_file
		else
			filename = "Grids Default Profiles.txt"
			if File.exist?(filename)
				File.open(filename, "r") do |file|
					file.each_line do |line|
						default_profile = $1 if line.start_with?(/#{checkname}\: (.*)/)
					end
				end
			else
				File.open(filename, "w")
			end

			if @@profile_menu.model.iter_n_children(nil) == 0
				File.open("Grids Profile Original.txt", "w") do |file|
					file.puts "\nWindow Name: Main"
					file.puts "\nWidget Settings"
					file.puts "\n1:"
					file.puts "\nWidget Tracking: Offer"
					file.puts "\n2:"
					file.puts "\nWidget Tracking: Experience"
					file.puts "\n3:"
					file.puts "\nWidget Tracking: Stance"
					file.puts "\n4:"
					file.puts "\nWidget Tracking: Group Leader"
					file.puts "\n5:"
					file.puts "\nWidget Tracking: Group Members"
					file.puts "\nWindow Settings"
					file.puts "\nNumber of rows: 1"
					file.puts "\nHorizontal Size: 770"
					file.puts "\nVertical Size: 39"
				end
				@@profile_menu.append_text("Original")
			end

			if default_profile
				default_profile = nil if !File.exist?("Grids Profile #{default_profile}.txt")
			end
		end

		if default_profile.nil?
			@@profile_menu.set_active(0)
			default_profile = @@profile_menu.active_text
			filename = "Grids Default Profiles.txt"
			needed_line = checkname
			file_lines = File.readlines(filename)
			file_lines.each{ |line| file_lines.delete(line) if line =~ /#{checkname}/ }
			File.open(filename, 'w') do |file|
				file.write("#{checkname}: #{default_profile}\n")
				file_lines.each{ |line| file.write(line) }
			end
		else
			set_menu_active(@@profile_menu, default_profile)
		end
		
		@@current_profile_file = default_profile
		@@default_profile_file = default_profile
		
		if $grids_script_vars_2
			@@current_profile_file = $grids_script_vars_2
			set_menu_active(@@profile_menu, @@current_profile_file)
		end
		
		@@profile_menu.set_tooltip_text(@@tooltips["Load Profile"])
		
		@@profile_menu.signal_connect("changed") do |widget|
			selected_profile = widget.active_text
			save_data_to_profile
			@@do_not_stop_script = true
			save_window_position("Main")
			@@all_windows["Main"].close
			kill_script "grids"
			Thread.new{
				wait_until{ !running? "grids" }
				start_script "grids", ["setup", selected_profile]
			}
		end
	end
	
	def self.save_window_position(window_name)
		if @@all_windows[window_name].position
			@@save_file_data = true if @@original_position[window_name] != @@all_windows[window_name].position
			@@window_load_save_data[window_name]["Window Position"] = @@all_windows[window_name].position
		end
		
		allocation = @@all_windows[window_name].allocation
		width = allocation.width
		height = allocation.height
		if (width != @@original_horizontal_size[window_name]) || (height != @@original_vertical_size[window_name])
			if width && height
				@@window_load_save_data[window_name]["Horizontal Size"] = width
				@@window_load_save_data[window_name]["Vertical Size"] = height
				@@save_file_data = true
			end
		end
	end
	
	def self.create_profile_tab(tab_name)
		create_grids(tab_name)
		all_grids = @all_grids[tab_name]
		
		all_settings = [ "Create Profile" ]

		labels = {}
		buttons = {}
		entries = {}
		setting = "Load Profile"
		labels[setting] = Gtk::Label.new("#{setting}     ")
		
		setting = "Default Profile"
		buttons[setting] = Gtk::Button.new(:label => setting)
		
		setting = "Save Profile"
		buttons[setting] = Gtk::Button.new(:label => setting)
		
		all_settings.each{ |setting|
			labels[setting] = Gtk::Label.new("#{setting}     ")
			entries[setting] = Gtk::Entry.new
			buttons[setting] = Gtk::Button.new(:label => setting)
		}

		entries["Create Profile"].signal_connect("changed") do
			text = entries["Create Profile"].text
			text.gsub!(/[^a-zA-Z0-9]/, "")
			entries["Create Profile"].text = text
		end
		
		buttons["Default Profile"].signal_connect("clicked") do
			default_profile = @@profile_menu.active_text
			if default_profile == @@default_profile_file
				comment_response("#{default_profile} is already the default profile.")
			else
				filename = "Grids Default Profiles.txt"
				needed_line = checkname
				file_lines = File.readlines(filename)
				file_lines.each{ |line| file_lines.delete(line) if line =~ /#{checkname}/ }
				File.open(filename, 'w') do |file|
					file.write("#{checkname}: #{default_profile}\n")
					file_lines.each{ |line| file.write(line) }
				end
				@@default_profile_file = default_profile
				comment_response("Default profile has been changed to #{default_profile}.")
			end
		end
		buttons["Create Profile"].signal_connect("clicked") do
			all_profile_names = []
			@@profile_menu.model.each{ |model, path, iter| all_profile_names.push(@@profile_menu.model.get_value(iter, 0).downcase) }
			profile_name = entries["Create Profile"].text
			if profile_name.length < 1
				comment_response("You must enter at least one character for the Profile Name.")
			elsif all_profile_names.include?(profile_name.downcase)
				comment_response("You already have a profile with this name. Choose a different name.\nProfiles are case-insensitive (example if you have a profile named \"test\" you can't create one named \"Test\".")
			else
				File.open("Grids Profile #{profile_name}.txt", "w")
				@@profile_menu.append_text("#{profile_name}")
				entries["Create Profile"].text = ""
				@@profile_menu.set_active(@@profile_menu.model.iter_n_children - 1)
			end
		end
		
		buttons["Save Profile"].signal_connect("clicked") do
			save_data_to_profile
		end

		grid = all_grids.shift
		row = -1
		all_settings.each{ |setting|
			column = -1
			grid.attach(labels[setting], column += 1, row += 1, 1, 1)
			grid.attach(entries[setting], column += 1, row, 1, 1)
			grid.attach(buttons[setting], column += 1, row, 1, 1)
		}
		
		labels.each{ |setting,_| labels[setting].set_tooltip_text(@@tooltips[setting]) }
		buttons.each{ |setting,_| buttons[setting].set_tooltip_text(@@tooltips[setting]) }
		entries.each{ |setting,_| entries[setting].set_tooltip_text(@@tooltips[setting]) }

		column = -1
		grid.attach(labels["Load Profile"], column += 1, row += 1, 1, 1)
		grid.attach(@@profile_menu, column += 1, row, 1, 1)
		grid.attach(buttons["Default Profile"], column += 1, row, 1, 1)
		grid.attach(buttons["Save Profile"], column += 1, row, 1, 1)
		$grids_script_vars_2 = nil
	end
	
	def self.update_window_settings(window_name)
		color = @@window_load_save_data[window_name]["Window Background Color"] ? @@window_load_save_data[window_name]["Window Background Color"] : @@window_originals["Window Background Color"]
		provider = Gtk::CssProvider.new
		css = <<~CSS
			window {
				background-color: #{color};
			}
		CSS

		provider.load_from_data(css)
		context = @@all_windows[window_name].style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
	end
	
	def self.edit_button(widget_number, widget, state_name, option)
		needed_settings = {}

		@edit_all_settings.each{ |setting,value|
			if @@first_run_through
				widget_tracking = @@widget_load_save_data[@@current_window][widget_number][@@main_menu_list[@@widget_load_save_data[@@current_window][widget_number]["Widget Tracking"]]["Options"].first]
			else
				widget_tracking = @@widget_load_save_data[@@current_window][widget_number][state_name]
			end
			check = widget_tracking[setting]
			get_default_value(widget_number, state_name, setting)
			if value["Type"] == "Entry" || value["Type"] == "Radio"
				needed_settings[setting] = check ? check : @default_setting
			elsif value["Type"] == "Spin Button"
				needed_settings[setting] = check ? check.to_i : @default_setting.to_i
			end
		}

		if option == "Main"
			text_to_change = @main_labels[@@current_window][widget_number]
			if @@current_program == "Setup"
				needed_widget_opacity = 1
				needed_text_opacity = 1
			elsif @@current_program == "Main"
				needed_widget_opacity = needed_settings["Widget Opacity"] / 10.0
				needed_text_opacity = needed_settings["Text Opacity"] / 10.0
			end
		elsif option == "Example"
			text_to_change = @bar_labels[state_name]
			needed_widget_opacity = needed_settings["Widget Opacity"] / 10.0
			needed_text_opacity = needed_settings["Text Opacity"] / 10.0
		end
		
		widget.fraction = needed_settings["Progress Bar Fraction"] / 100.0
		if needed_settings["Progress Bar Orientation"] == "Hide"
			needed_progress_background = "none"
			needed_trough_background = "none"
			needed_trough_border_width = 0
			needed_progress_width = 1
			needed_progress_height = 1
		else
			widget.orientation = needed_settings["Progress Bar Orientation"]
			needed_progress_background = needed_settings["Progress Color"]
			needed_trough_background = needed_settings["Trough Color"]
			needed_trough_border_width = needed_settings["Progress Border Width"]
			if needed_settings["Progress Bar Orientation"] == "Horizontal"
				needed_progress_width = 0
				needed_progress_height = needed_settings["Progress Bar Size"]
			elsif needed_settings["Progress Bar Orientation"] == "Vertical"
				needed_progress_width = needed_settings["Progress Bar Size"]
				needed_progress_height = 0
			end
		end
		
		widget.set_size_request(needed_settings["Widget Width"], needed_settings["Widget Height"])

		#Progressbar CSS:
		provider = Gtk::CssProvider.new
		css = <<~CSS
			progressbar {
				opacity: #{needed_widget_opacity};
				padding: #{needed_settings["Widget Padding"]};
				margin: #{needed_settings["Widget Margin"]};
				min-width: #{needed_settings["Widget Width"]}px;
				min-height: #{needed_settings["Widget Height"]}px;
				
				border-color: #{needed_settings["Widget Border Color"]};
				border-width: #{needed_settings["Widget Border Width"]}px;
				border-radius: #{needed_settings["Widget Border Radius"]}px;
				border-style: #{needed_settings["Widget Border Type"]};
			}
		
			progressbar progress {
				background: #{needed_progress_background};
				min-width: #{needed_progress_width}px;
				min-height: #{needed_progress_height}px;
				border-width: 0px;
			}

			progressbar trough {
				background: #{needed_trough_background};
				margin-right: #{needed_settings["Widget Width"] * (needed_settings["Progress Bar Horizontal Position"] / 100.0)}px;
				margin-bottom: #{needed_settings["Widget Height"] * (needed_settings["Progress Bar Vertical Position"] / 100.0)}px;
				min-width: #{needed_progress_width}px;
				min-height: #{needed_progress_height}px;
				border-width: #{needed_trough_border_width}px;
				border-color: #{needed_settings["Progress Border Color"]};
				border-radius: #{needed_settings["Progress Border Radius"]}px;
				border-style: #{needed_settings["Progress Border Type"]};
			}
		CSS

		provider.load_from_data(css)
		context = widget.style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
		
		#Background CSS:
		provider = Gtk::CssProvider.new
		if needed_settings["Widget Background"] == "None"
			css = <<~CSS
				progressbar {
					background: none;
				}
			CSS
		elsif needed_settings["Widget Background"] == "Solid Color"
			css = <<~CSS
				progressbar {
					background: none;
					background-color: #{needed_settings["Widget Background Color"]};
				}
			CSS
		elsif needed_settings["Widget Background"] == "Image"
			css = <<~CSS
				progressbar {
					background: none;
					background-color: #{needed_settings["Image Background Color"]};
					background-image: url("file:///#{needed_settings["Image Location"]}");
					background-size: #{needed_settings["Image Horizontal Size"]}% #{needed_settings["Image Vertical Size"]}%;
					background-position: #{needed_settings["Image Horizontal Position"]}% #{needed_settings["Image Vertical Position"]}%;
					background-repeat: no-repeat;
				}
			CSS
		elsif needed_settings["Widget Background"] == "Radial"
			colors = "#{needed_settings["Radial Color 1"]}, #{needed_settings["Radial Color 2"]}"
			colors += ", #{needed_settings["Radial Color 3"]}" if needed_settings["Radial Color 3"].length > 0
			colors += ", #{needed_settings["Radial Color 4"]}" if needed_settings["Radial Color 4"].length > 0
			colors += ", #{needed_settings["Radial Color 5"]}" if needed_settings["Radial Color 5"].length > 0
				
			css = <<~CSS
				progressbar {
					background: radial-gradient(#{needed_settings["Radial Shape"]} at #{needed_settings["Radial Horizontal Position"]}% #{needed_settings["Radial Vertical Position"]}%, #{colors});
				}
			CSS
		elsif needed_settings["Widget Background"] == "Linear"
			colors = "#{needed_settings["Linear Color 1"]}, #{needed_settings["Linear Color 2"]}"
			colors += ", #{needed_settings["Linear Color 3"]}" if needed_settings["Linear Color 3"].length > 0
			colors += ", #{needed_settings["Linear Color 4"]}" if needed_settings["Linear Color 4"].length > 0
			colors += ", #{needed_settings["Linear Color 5"]}" if needed_settings["Linear Color 5"].length > 0
				
			css = <<~CSS
				progressbar {
					background: linear-gradient(#{needed_settings["Linear Degrees"]}deg, #{colors});
				}
			CSS
		end
		provider.load_from_data(css)
		context = widget.style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)

		#Text CSS:
		if needed_settings["Text Decoration"] =~ /Double|Wavy/i
			needed_decoration_style = needed_settings["Text Decoration"]
			needed_decoration = "Underline"
		else
			needed_decoration_style = "Solid"
			needed_decoration = needed_settings["Text Decoration"]
		end
		
		if needed_settings["Shadow Text"] == "Shadow"
			needed_shadow = "#{needed_settings["Shadow Horizontal Position"]} #{needed_settings["Shadow Veritcal Position"]} #{needed_settings["Shadow Color"]}"
		else
			needed_shadow = "none"
		end
		
		
		text_to_change.set_ellipsize(Pango::EllipsizeMode::END)
		text_to_change.set_max_width_chars(5)
		text_to_change.set_alignment(needed_settings["Text Horizontal Align"] / 10.0, needed_settings["Text Vertical Align"] / 10.0)
		provider = Gtk::CssProvider.new
		css = <<~CSS
			label {
				color: #{needed_settings["Text Color"]};
				font-size: #{needed_settings["Font Size"]}px;
				font-weight: #{needed_settings["Font Weight"]};
				font-style: #{needed_settings["Font Style"]};
				font-family: #{needed_settings["Text Font"]};
				text-decoration: #{needed_decoration};
				text-decoration-style: #{needed_decoration_style};
				text-decoration-color: #{needed_settings["Text Decoration Color"]};
				opacity: #{needed_text_opacity};
				letter-spacing: #{needed_settings["Letter Spacing"]}px;
			}
		CSS

		provider.load_from_data(css)
			
		context = text_to_change.style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
	end
	
	def self.create_grids(window_name)
		@sub_grids[window_name] = {}
		grid = @sub_grids[window_name]
		
		@all_grids[window_name] = []
		all_grids = @all_grids[window_name]
		
		row = -1
		7.times.with_index{ |index|
			grid[index] = Gtk::Grid.new
			all_grids.push(grid[index])
			@@main_grids[window_name].attach(grid[index], 0, row += 1, 1, 1)
		}
	end
	
	def self.update_current_widget(widget_number, window_name, tracking, state_name)
		@@current_window = window_name
		this_widget_number = widget_number
		this_window = window_name		
		widget = @@setup_widgets[window_name][this_widget_number]
		if tracking == "Offer" && @offer_name
			if state_name == "True"
				@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].gsub!("NAME", @offer_name)
			elsif state_name == "False"
				@@widget_load_save_data[window_name][this_widget_number]["True"]["Widget Text"].gsub!(@offer_name, "NAME")
			end
		elsif tracking == "Group Leader" && @group_leader && @group_leader != checkname
			@original_group_leader_text[window_name] ||= {}
			@original_group_leader_text[window_name][this_widget_number] ||= {}
			if @original_group_leader_text[window_name][this_widget_number][state_name].nil?
				@original_group_leader_text[window_name][this_widget_number][state_name] = @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].dup
			end
			@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"] = @original_group_leader_text[window_name][this_widget_number][state_name].dup
			if @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"] =~ /NAME/
				@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].gsub!("NAME", @group_leader)
			end
		elsif tracking == "Group Members"
			@original_group_members_text[window_name] ||= {}
			@original_group_members_text[window_name][this_widget_number] ||= {}
			if @original_group_members_text[window_name][this_widget_number][state_name].nil? && @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"]
				@original_group_members_text[window_name][this_widget_number][state_name] = @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].dup
			end
			@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"] = @original_group_members_text[window_name][this_widget_number][state_name].dup
			if @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"] =~ /NUMBER/
				@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].gsub!("NUMBER", "#{@current_group.count}")
			end
			if @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"] =~ /LIST(\d+)/
				per_row = $1.to_i
				max_list = 1000
				if @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"] =~ /MAX(\d+)/
					max_list = $1.to_i
					@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].gsub!(/MAX(\d+)/, "")
				end
				all_members = ""
				number = 0
				max_number = 0
				@current_group.each{ |name|
					if number >= per_row
						all_members.chop!.chop!
						all_members += "\n"
						number = 0
					end
					all_members += "#{name}, "
					number += 1
					max_number += 1
					break if max_number >= max_list
				}
				all_members.chop!.chop!
				@@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"].gsub!(/LIST(\d+)/, all_members)
			end
		end
		check = @@widget_load_save_data[window_name][this_widget_number][state_name]["Widget Text"]
		get_default_value(widget_number, state_name, "Widget Text")
		text = check ? check.to_s : @default_setting.to_s
		unicode = text.gsub(/\\u\{([0-9a-fA-F]+)\}/) { [$1.hex].pack('U*') }
		unicode = unicode.gsub(/\\n/, "\n")
		@main_labels[window_name][this_widget_number].label = unicode
		edit_button(this_widget_number, @@setup_widgets[window_name][this_widget_number], state_name, "Main")
	end
	
	def self.update_edit_button_all_settings(widget_number, state_name)
		@radios.each{ |setting,radios|
			radios.each{ |name,radio|
				check = @@widget_load_save_data[@@current_window][widget_number][state_name][setting]
				get_default_value(widget_number, state_name, setting)
				default = check ? check : @default_setting
				radio.active = true if default == name
			}
		}

		@edit_all_settings.each{ |setting,value|
			check = @@widget_load_save_data[@@current_window][widget_number][state_name][setting]
			get_default_value(widget_number, state_name, setting)
			if value["Type"] == "Entry"
				@edit_entries[setting].text = check ? check.to_s : @default_setting.to_s
			elsif value["Type"] == "Spin Button"
				@edit_spin_buttons[setting].value = check ? check.to_i : @default_setting.to_i
			end
		}
	end
	
	def self.create_notebook_tabs(page_names, page_labels, notebook_tab, tab_to_attach_to)
		page_names.each{ |tab_name|
			page_labels[tab_name] = Gtk::Label.new(tab_name)
			@edit_tab_grids["Main #{tab_name}"] = Gtk::Grid.new
			@edit_tab_grids[tab_name] = Gtk::Grid.new
			@notebooks[notebook_tab].append_page(@edit_tab_grids["Main #{tab_name}"], page_labels[tab_name])
			@edit_tab_grids["Main #{tab_name}"].attach(@edit_tab_grids[tab_name], 0, 0, 1, 1)
		}
		if tab_to_attach_to != "None"
			if notebook_tab == "Background Settings"
				@notebooks[tab_to_attach_to].append_page(@edit_tab_grids[notebook_tab], Gtk::Label.new(notebook_tab))
				temp_grid = Gtk::Grid.new
				@edit_tab_grids[notebook_tab].attach(temp_grid, 0, 0, 1, 1)
				@radio_grid_row = 0
				attach_radios("Widget Background", temp_grid, @edit_all_settings["Widget Background"]["Radios Per Row"])
				@edit_tab_grids[notebook_tab].attach(@notebooks[notebook_tab], 0, 1, 1, 1)
			else
				@notebooks[tab_to_attach_to].append_page(@notebooks[notebook_tab], Gtk::Label.new(notebook_tab))
			end
		else
			@edit_tab_grids[notebook_tab].attach(@notebooks[notebook_tab], 0, 0, 1, 1)
		end
	end
	
	def self.attach_radios(radio_name, grid, radios_per_row)
		column = -1
		@radios[radio_name].each{ |radio_setting,radio|
			grid.attach(radio, column += 1, @radio_grid_row, 1, 1)
			if radio_name == "Widget Background"
				grid.attach(Gtk::Label.new(" "), column += 1, @radio_grid_row, 1, 1)
				grid.attach(Gtk::Label.new(" "), column += 1, @radio_grid_row, 1, 1) if radio_setting == "Image"
			end
			if (column % radios_per_row == 0 && column > 0) || (radios_per_row == 1)
				@radio_grid_row += 1
				column = -1
			end
		}
	end
	
	def self.populate_color_options_window(entry, save_button, type)
		window_name = "Color Options"
		option_buttons = {}
		option_labels = {}
		row = -1
		column = -1
		@@all_colors.each{ |option|
			option_labels[option] = Gtk::Label.new(option)
			option_buttons[option] = Gtk::Button.new(:label => "")
			@@main_grids[window_name].attach(option_labels[option], column += 1, row += 1, 1, 1)
			@@main_grids[window_name].attach(option_buttons[option], column, row += 1, 1, 1)
			row -= 2
			
			provider = Gtk::CssProvider.new
			css = <<~CSS
				button {
					background-image: none;
					background-color: #{option};
				}
			CSS
			provider.load_from_data(css)
			
			context = option_buttons[option].style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			option_buttons[option].signal_connect("clicked") do
				entry.text = option_labels[option].label
				if type == "Widget"
					save_button.clicked
				elsif type == "Window"
					@@save_file_data = true
					@@window_load_save_data[@@current_window]["Window Background Color"] = option_labels[option].label
					update_window_settings(@@current_window)
				end
			end
			
			if column % 9 == 0 && column > 0
				row += 2
				column = -1
			end			
		}
		@@all_setup_windows[window_name].show_all
	end
	
	def self.populate_font_options_window(entry, save_button)
		window_name = "Font Options"
		option_buttons = {}
		row = -1
		column = -1
		@@all_fonts.each{ |option|
			option_buttons[option] = Gtk::Button.new(:label => option)
			@@main_grids[window_name].attach(option_buttons[option], column += 1, row, 1, 1)
			
			provider = Gtk::CssProvider.new
			css = <<~CSS
				button {
					font-family: #{option};
				}
			CSS
			provider.load_from_data(css)
			
			context = option_buttons[option].style_context
			context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
			
			option_buttons[option].signal_connect("clicked") do
				entry.text = option_buttons[option].label
				save_button.clicked
			end
			
			if column % 7 == 0 && column > 0
				row += 1
				column = -1
			end			
		}
		@@all_setup_windows[window_name].show_all
	end

	def self.populate_edit_button_window(widget_number)
		@notebooks = {}
		@notebooks["Main"] = Gtk::Notebook.new
		
		buttons = {}
		@edit_entries = {}
		@edit_labels = {}
		@edit_spin_buttons = {}
		example_labels = {}
		@example_widgets = {}
		@example_boxes = {}
		@bar_event_boxes = {}
		@bar_labels = {}
		@bar_overlays = {}
		@example_widgets_grid = nil
		@this_example_widget = nil
		@edit_tab_grids = {}
		tab_options = {}
		page_labels = {}
		radio_grids = {}
		@radios = {}
		@edit_text_color_button = {}
		
		@edit_all_settings.each{ |setting,value|
			if value["Type"] == "Radio"
				first_radio = value["First Radio"]
				other_radios = value["Other Radios"]
				@radios[setting] = {}
				@radios[setting][first_radio] = Gtk::RadioButton.new(first_radio)
				@radios[setting][first_radio].set_tooltip_text(@@tooltips[setting])
				other_radios.each{ |radio|
					@radios[setting][radio] = Gtk::RadioButton.new(@radios[setting][first_radio], radio)
					@radios[setting][radio].set_tooltip_text(@@tooltips[setting])
				}
			end
		}
		
		current_widget_state = @widget_current_state[@@current_window][widget_number]
		current_widget_menu = @widget_current_menu[@@current_window][widget_number]
		
		page_names = [ "Text Settings", "Widget Settings", "Background Settings", "Progress Bar Settings" ]
		sub_tabs = [ "Background Settings" ]
		page_names.each{ |tab_name|
			@notebooks[tab_name] = Gtk::Notebook.new
			page_labels[tab_name] = Gtk::Label.new(tab_name)
			@edit_tab_grids[tab_name] = Gtk::Grid.new
			@notebooks["Main"].append_page(@edit_tab_grids[tab_name], page_labels[tab_name]) if !sub_tabs.include?(tab_name)
		}
		
		program_changed_radio = nil
		program_changed_tab = nil
		radio_positions = { "None" => 0, "Solid Color" => 1, "Image" => 2, "Radial" => 3, "Linear" => 4 }
		radio_positions.each{ |setting,number| 
			@radios["Widget Background"][setting].signal_connect("toggled"){ |radio|
				@notebooks["Background Settings"].set_current_page(number) if radio.active? && program_changed_tab.nil?
				program_changed_tab = nil
			}
		}
		
		@notebooks["Background Settings"].signal_connect("switch-page"){ |notebook, tab, tab_number|
			radio_positions.each{ |setting,number|
				@radios["Widget Background"][setting].active = true if number == tab_number && program_changed_radio.nil?
				program_changed_radio = nil
			}
		}
		
		tab_options_list = []
		page_names = [ "Text 1", "Text 2", "Text Shadow" ]
		create_notebook_tabs(page_names, page_labels, "Text Settings", "None")
		page_names.each{ |name| tab_options_list.push(name) }

		page_names = [ "Widget", "Border" ]
		create_notebook_tabs(page_names, page_labels, "Widget Settings", "None")
		page_names.each{ |name| tab_options_list.push(name) }
			
		page_names = [ "None", "Solid Color", "Image", "Radial", "Linear" ]
		create_notebook_tabs(page_names, page_labels, "Background Settings", "Widget Settings")
		page_names.each{ |name| tab_options_list.push(name) }
		
		page_names = [ "Progress Bar", "Progress Border", "Progress", "Trough" ]
		create_notebook_tabs(page_names, page_labels, "Progress Bar Settings", "None")
		page_names.each{ |name| tab_options_list.push(name) }
		
		tab_options_list.each{ |tab_name|
			tab_options[tab_name] = []
			radio_grids[tab_name] = Gtk::Grid.new
			@edit_tab_grids["Main #{tab_name}"].attach(radio_grids[tab_name], 0, 1, 1, 1)
			@edit_all_settings.each{ |setting,value| tab_options[tab_name].push(setting) if @edit_all_settings[setting]["Tab"] == tab_name && @edit_all_settings[setting]["Type"] != "Radio" }
		}

		@@widget_load_save_data[@@current_window][widget_number] ||= {}
		@@all_setup_windows["Edit Widget"].set_title("Edit Widget #{widget_number}")

		window_name = "Edit Widget"
		@@main_grids[window_name].each{ |widget| @@main_grids[window_name].remove(widget) }

		create_grids(window_name)
		all_grids = @all_grids[window_name]
		
		@@main_menu = Gtk::ComboBoxText.new
		all_tooltips = "WARNING: You will lose any unsaved settings for this widget if you select a new option. Be sure to save your settings before choosing a new option and close the window if you don't want to overwrite the saved settings with the default settings of the new option.\n\nSelect what you want this widget to track.\n\n"
		@@main_menu_list.each{ |menu_name,menu_values|
			create_menu(menu_name,menu_values)
			all_tooltips += "#{menu_values["Tooltip"]}\n"
		}		
		
		@@main_menu.set_tooltip_text(all_tooltips)
		
		row = -1
		grid = all_grids.shift
		grid.attach(@@main_menu, 0, row += 1, 1, 1)
		menu_grid = grid
		menu_row = row

		current_menu = nil
		menu_signal = nil
		@@main_menu.signal_connect("changed") do |widget|
			if current_menu
				current_menu.signal_handler_disconnect(menu_signal)
				menu_grid.remove(current_menu)
				if @@main_menu.active_text == "Stance"
					@text_tracking_tooltip = "Stance: Enter the text you want for the different stances.\n\nThere are no special settings for Stance."
				elsif @@main_menu.active_text == "Experience"
					@text_tracking_tooltip = "Experience: Enter the text you want for the different states of mind.\n\nThere are no special settings for Experience."
				elsif @@main_menu.active_text == "Offer"
					@text_tracking_tooltip = "Offer: Enter the text for when someone offers you an item.\n\nYou can enter NAME where you want the name of the person offering you something to be.\n\nFor example: NAME is offering you something!"
				elsif @@main_menu.active_text == "Group Leader"
					@text_tracking_tooltip = "Group Leader: Enter the text for your group leader.\n\nYou can enter NAME where you want the name of the group leader to be.\n\nFor example: Your current group leader is NAME!"
				elsif @@main_menu.active_text == "Group Members"
					@text_tracking_tooltip = "Group Members: Enter the text for your current group members.\n\nIf you want to list every group member you must enter LIST#, # being how many members to show per line.\n\nFor example: LIST5\nThis would show 5 members per line in the widget. The group members will start being listed where the word LIST is.\n\nYou can also limit how many group members to show using MAX#, with # being the maximum number of members to show.\n\nFor example MAX3 would only show 3 group members.\n\nYou can also enter NUMBER which will be replaced by how many members are currently in your group. You can also combine all three options, for example: Members in my group NUMBER\\nLIST4MAX10"
				end
				@text_main_tooltip = "\n\nNOTE: Unicodes DO NOT work with every font type. Nothing bad will happen if you use a Unicode with a font that doesn't support Unicodes, the image just won't appear. The font type \"Segoe UI\" works with Unicodes.\n\nALSO NOTE: You cannot use a colon \":\" as part of the Widget Text.\n\nEnter the text you want to show in this widget.\n\nEnter \\n to start a new line.\nFor example: This is line 1.\\nThis is line 2.\n\nTo use a Unicode you must enter the code like this: \\u{CODEHERE}\n\For example: \\u{26E8}"
				@edit_entries["Widget Text"].set_tooltip_text("#{@text_tracking_tooltip}#{@text_main_tooltip}")
				@edit_labels["Widget Text"].set_tooltip_text("#{@text_tracking_tooltip}#{@text_main_tooltip}")
			end
			current_menu = @@all_menus[@@main_menu.active_text]
			menu_grid.attach(current_menu, 1, menu_row, 1, 1)
			@@all_setup_windows[window_name].show_all
			menu_signal = current_menu.signal_connect("changed") do |widget|
				@@widget_load_save_data[@@current_window][widget_number][widget.active_text] ||= {}
				@@current_menu_option = widget.active_text
				current_menu.set_tooltip_text("Select the state you want to edit settings for.\n\nYou can also click on the example widgets at the bottom of this window to change to a different state.")
				update_edit_button_all_settings(widget_number, @@current_menu_option)
				update_current_widget(widget_number, @@current_window, "N/A", @@current_menu_option)
				@widget_current_state[@@current_window][widget_number] = widget.active_text
				@widget_current_menu[@@current_window][widget_number] = @@main_menu.active_text
			end
			current_menu.set_active(1)
			current_menu.set_active(0)
			create_example_widgets(widget_number, current_menu, example_labels)
		end
		
		current_menu.set_active(1)
		current_menu.set_active(0)

		grid = all_grids.shift
		grid.attach(@notebooks["Main"], 0, 1, 1, 1)

		tab_options.each{ |tab_name,settings|
			settings.each{ |setting|
				column = -1
				@edit_labels[setting] = Gtk::Label.new("#{setting}     ")
				@edit_labels[setting].set_tooltip_text(@@tooltips[setting])
				@edit_tab_grids[tab_name].attach(@edit_labels[setting], column += 1, row += 1, 1, 1)
				if @edit_all_settings[setting]["Type"] == "Entry"
					@edit_entries[setting] = Gtk::Entry.new
					@edit_entries[setting].set_tooltip_text(@@tooltips[setting])
					@edit_tab_grids[tab_name].attach(@edit_entries[setting], column += 1, row, 1, 1)
					if @edit_all_settings[setting]["Color"] == "Yes"
						@edit_text_color_button[setting] = Gtk::Button.new(:label => "Colors")
						@edit_text_color_button[setting].set_tooltip_text(@@tooltips["Color Options"])
						@edit_text_color_button[setting].signal_connect("clicked") do
							if @@all_setup_windows["Color Options"].nil?
								create_window("Color Options")
								populate_color_options_window(@edit_entries[setting], buttons["Save Widget"], "Widget")
							end
						end
						@edit_tab_grids[tab_name].attach(@edit_text_color_button[setting], column += 1, row, 1, 1)
					elsif setting == "Text Font"
						font_options = Gtk::Button.new(:label => "Fonts")
						font_options.set_tooltip_text(@@tooltips["Font Options"])
						@edit_tab_grids[tab_name].attach(font_options, column += 1, row, 1, 1)

						font_options.signal_connect("clicked") do
							if @@all_setup_windows["Font Options"].nil?
								create_window("Font Options")
								populate_font_options_window(@edit_entries[setting], buttons["Save Widget"])
							end
						end
					end
				elsif @edit_all_settings[setting]["Type"] == "Spin Button"
					if setting =~ /Font Size/
						adjustment = Gtk::Adjustment.new(0, 5, 100, 1, 5, 0)
					elsif setting =~ /Linear Degrees/
						adjustment = Gtk::Adjustment.new(0, 0, 360, 1, 5, 0)
					elsif setting =~ /Letter Spacing|Shadow Horizontal Position|Shadow Veritcal Position/
						adjustment = Gtk::Adjustment.new(0, 0, 100, 1, 2, 0)
					elsif setting =~ /Text Opacity|Widget Opacity|Text Horizontal Align|Text Vertical Align/
						adjustment = Gtk::Adjustment.new(0, 0, 10, 1, 2, 0)
					elsif setting =~ /Widget Padding|Widget Margin|Border Width|Progress Border Width/
						adjustment = Gtk::Adjustment.new(0, 0, 300, 1, 5, 0)
					elsif setting =~ /Widget Width|Widget Height|Progress Bar Size/
						adjustment = Gtk::Adjustment.new(0, 0, 1000, 1, 5, 0)
					elsif setting =~ /Border Radius|Progress Border Radius|Image Horizontal Position|Image Vertical Position|Image Horizontal Size|Image Vertical Size|Radial Horizontal Position|Radial Vertical Position|Progress Bar Horizontal Position|Progress Bar Vertical Position|Progress Bar Fraction/
						adjustment = Gtk::Adjustment.new(0, 0, 100, 1, 2, 0)
					end
					@edit_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
					@edit_spin_buttons[setting].set_tooltip_text(@@tooltips[setting])
					@edit_tab_grids[tab_name].attach(@edit_spin_buttons[setting], column += 1, row, 1, 1)
				end
			}
			@radio_grid_row = 0
			@edit_all_settings.each{ |setting,value|
				if value["Type"] == "Radio" && value["Tab"] == tab_name
					attach_radios(setting, radio_grids[tab_name], value["Radios Per Row"])
					@radio_grid_row += 1
				end
			}
			row = -1
		}

		@edit_entries["Text Font"].signal_connect('changed'){
			text = @edit_entries["Text Font"].text.gsub(/[^a-zA-Z\s]/, "")
			@edit_entries["Text Font"].text = text
		}
		
		@edit_entries["Widget Text"].signal_connect('changed'){
			text = @edit_entries["Widget Text"].text.gsub(":", "")
			@edit_entries["Widget Text"].text = text
		}

		@@main_menu.set_active(0)
		@@main_menu.set_active(1)
		if @@widget_load_save_data[@@current_window][widget_number]["Widget Tracking"]
			set_menu_active(@@main_menu, @@widget_load_save_data[@@current_window][widget_number]["Widget Tracking"])
		else
			@@main_menu.set_active(0)
		end

		if current_widget_state
			set_menu_active(@@main_menu, current_widget_menu)
			set_menu_active(current_menu, current_widget_state)
		end
		name = "Save Widget"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked") do
			do_not_save = nil
			empty_setting = nil
			@edit_all_settings.each{ |setting,value|
				if @edit_entries[setting].text.length > 0 && @edit_all_settings[setting]["Color"] == "Yes"
					do_not_save = setting if !@@all_colors.any? { |color| color.downcase == @edit_entries[setting].text.downcase }
				end
				empty_setting = setting if @edit_entries[setting].text.length < 1 && setting !~ /Widget Text|Radial Color 3|Radial Color 4|Radial Color 5|Linear Color 3|Linear Color 4|Linear Color 5|Image Location|Command/ && value["Type"] == "Entry"
			}
			if empty_setting
				comment_response("Setting \"#{empty_setting}\" is blank. Be sure to fill out each setting and don't leave any blank, with the exception of \"Widget Text\", \"Command\", \"Radial Color 3\", \"Radial Color 4\", \"Radial Color 5\", \"Linear Color 3\", \"Linear Color 4\", and \"Linear Color 5\", those settings can be left blank.")
			elsif do_not_save
				comment_response("The option of \"#{@edit_entries[do_not_save].text}\" you set for \"#{do_not_save}\" is not a valid color option. Check the spelling and try again. Click the \"Colors\" button next to the setting for a list of all color options.")
			else
				@radios.each{ |setting,radios|
					radios.each{ |name,radio|
						if radio.active?
							@@widget_load_save_data[@@current_window][widget_number][@@current_menu_option][setting] = name
							break
						end
					}
				}

				@edit_all_settings.each{ |setting,value|
					if value["Type"] == "Entry"
						@@widget_load_save_data[@@current_window][widget_number][@@current_menu_option][setting] = @edit_entries[setting].text
					elsif value["Type"] == "Spin Button"
						@@widget_load_save_data[@@current_window][widget_number][@@current_menu_option][setting] = @edit_spin_buttons[setting].value.to_i.to_s
					end
				}

				@@widget_load_save_data[@@current_window][widget_number]["Widget Tracking"] = @@main_menu.active_text
				
				update_current_widget(widget_number, @@current_window, "N/A", @@current_menu_option)

				create_example_widgets(widget_number, current_menu, example_labels) if example_labels.size > 0
				@@save_file_data = true
			end
		end
		
		name = "Default Settings"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked"){
			@radios.each{ |setting,radios| radios.each{ |name,radio|
				get_default_value(widget_number, @@current_menu_option, setting)
				radio.active = true if @default_setting == name }
			}

			@edit_all_settings.each{ |setting,value|
				get_default_value(widget_number, @@current_menu_option, setting)
				if value["Type"] == "Entry"
					@edit_entries[setting].text = @default_setting.to_s
				elsif value["Type"] == "Spin Button"
					@edit_spin_buttons[setting].value = @default_setting.to_i
				end
			}
		}

		name = "Copy"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked"){
			@all_copied_settings = {}
			@copy_button_clicked = true
			@radios.each{ |setting,radios|
				radios.each{ |name,radio|
					if radio.active?
						@all_copied_settings[setting] = name
						break
					end
				}
			}

			@edit_all_settings.each{ |setting,value|
				if value["Type"] == "Entry"
					@all_copied_settings[setting] = @edit_entries[setting].text
				elsif value["Type"] == "Spin Button"
					@all_copied_settings[setting] = @edit_spin_buttons[setting].value.to_i.to_s
				end
			}
		}
		
		name = "Paste"
		buttons[name] = Gtk::Button.new(:label => name)
		buttons[name].signal_connect("clicked"){
			if @copy_button_clicked
				@radios.each{ |setting,radios| radios.each{ |name,radio| radio.active = true if @all_copied_settings[setting] == name } }

				@edit_all_settings.each{ |setting,value|
					if value["Type"] == "Entry"
						if setting == "Widget Text"
							@edit_entries[setting].text = @all_copied_settings["Widget Text"].to_s
						else
							@edit_entries[setting].text = @all_copied_settings[setting]
						end
					elsif value["Type"] == "Spin Button"
						@edit_spin_buttons[setting].value = @all_copied_settings[setting].to_i
					end
				}
				
				buttons["Save Widget"].clicked
			end
		}

		grid = all_grids.shift
		row = -1
		column = -1
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		row += 1
		buttons.each{ |name,button|
			grid.attach(button, column += 1, row, 1, 1)
			buttons[name].set_tooltip_text(@@tooltips[name])
		}
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		
		grid = all_grids.shift
		@example_widgets_grid = grid
		create_example_widgets(widget_number, current_menu, example_labels)
		@@all_setup_windows[window_name].show_all
	end
	
	def self.create_example_widgets(widget_number, current_menu, example_labels)
		row = -1
		if @@example_menu_signal
			@example_widgets_grid.each{ |widget| @example_widgets_grid.remove(widget) }
			@this_example_widget.signal_handler_disconnect(@@example_menu_signal)
		end
		current_menu.model.each do |model, path, name|
			state_name = name[0]
			this_state = state_name
			column = -1
			example_labels[this_state] = Gtk::Label.new("#{this_state}     ")
			@example_boxes[this_state] = Gtk::Box.new(:horizontal)
			@bar_labels[this_state] = Gtk::Label.new("temp")
			@example_widgets[this_state] = Gtk::ProgressBar.new
			@bar_event_boxes[this_state] = Gtk::EventBox.new
			@bar_overlays[this_state] = Gtk::Overlay.new
			@bar_event_boxes[this_state].add(@bar_labels[this_state])
			@bar_overlays[this_state].add_overlay(@bar_event_boxes[this_state])
			@bar_overlays[this_state].add(@example_widgets[this_state])
			@example_boxes[this_state].add(@bar_overlays[this_state])
			@@example_menu_signal = @bar_event_boxes[this_state].signal_connect("button_press_event"){
				if Time.now > (@last_button_click + @time_between_clicks)
					@last_button_click = Time.now
					update_current_widget(widget_number, @@current_window, "N/A", this_state)
					set_menu_active(current_menu, this_state)
				end
			}
			@this_example_widget = @example_boxes[this_state]
			@bar_overlays[this_state].set_tooltip_text("This is an example widget which shows what this widget will look like with the current saved settings.\n\nYou can click on an example widget to switch to editing settings for that state.\n\nFor example if you are tracking \"Stance\" with this widget then you could click on the \"Guarded\" example widget to bring up the Guarded state's settings.")
			
			@example_widgets_grid.attach(example_labels[this_state], column += 1, row += 1, 1, 1)
			@example_widgets_grid.attach(@this_example_widget, column += 1, row, 1, 1)
			fill_example_widgets(@example_widgets[this_state], widget_number, this_state)
			@example_widgets_grid.show_all
		end
	end
	
	def self.fill_example_widgets(widget, widget_number, state_name)
		check = @@widget_load_save_data[@@current_window][widget_number][state_name]["Widget Text"]
		get_default_value(widget_number, state_name, "Widget Text")
		text = check ? check.to_s : @default_setting.to_s
		unicode = text.gsub(/\\u\{([0-9a-fA-F]+)\}/) { [$1.hex].pack('U*') }
		unicode = unicode.gsub(/\\n/, "\n")
		@bar_labels[state_name].label = unicode
		edit_button(widget_number, widget, state_name, "Example")
	end

	def self.create_standin_widgets
		this_window = @@current_window
		@grids ||= {}
		@grids[@@current_window] ||= {}
		@widget_current_state[@@current_window] ||= {}
		@widget_current_menu[@@current_window] ||= {}

		@main_boxes ||= {}
		@main_boxes[@@current_window] ||= {}
		@main_event_boxes ||= {}
		@main_event_boxes[@@current_window] ||= {}
		@main_overlays ||= {}
		@main_overlays[@@current_window] ||= {}
		@main_labels ||= {}
		@main_labels[@@current_window] ||= {}

		row = 0

		if @@current_program == "Setup"
			number_rows_to_create = @@window_originals["Max number of rows"]
		elsif @@current_program == "Main"
			number_rows_to_create = @@window_load_save_data[@@current_window]["Number of rows"] ? @@window_load_save_data[@@current_window]["Number of rows"] : @@window_originals["Number of rows"]
		end

		number_rows_to_create.to_i.times{
			row += 1
			@grids[@@current_window][row] = Gtk::Grid.new
			@@main_grids[@@current_window].attach(@grids[@@current_window][row], 0, row, 1, 1)

			if @@current_program == "Setup"
				widgets_per_row = @@window_originals["Max widgets per row"]
			elsif @@current_program == "Main"
				widgets_per_row = @@window_load_save_data[@@current_window]["Row #{row}"] ? @@window_load_save_data[@@current_window]["Row #{row}"] : @@window_originals["Widgets per row"]
			end

			widget_number = (row - 1) * @@window_originals["Max widgets per row"].to_i 

			column = -1
			widgets_per_row.to_i.times{
				column += 1
				widget_number += 1

				if @@widget_load_save_data[@@current_window][widget_number]
					tracking = @@widget_load_save_data[@@current_window][widget_number]["Widget Tracking"]
					setting = @@widget_load_save_data[@@current_window][widget_number][@@main_menu_list[tracking]["Options"].first]["Widget Text"]
					get_default_value(widget_number, @@main_menu_list[tracking]["Options"].first, "Widget Text")
					label_text = setting ? setting : @default_setting
				else
					label_text = widget_number
				end

				this_widget_number = widget_number
				@main_boxes[@@current_window][this_widget_number] = Gtk::Box.new(:vertical)
				@@setup_widgets[@@current_window][this_widget_number] = Gtk::ProgressBar.new
				@main_labels[@@current_window][this_widget_number] = Gtk::Label.new(label_text.to_s)
					
				@main_event_boxes[@@current_window][this_widget_number] = Gtk::EventBox.new
				box = @main_event_boxes[@@current_window][this_widget_number]
				@main_overlays[@@current_window][this_widget_number] = Gtk::Overlay.new
				overlay = @main_overlays[@@current_window][this_widget_number]
				box.add(@main_labels[@@current_window][this_widget_number])
				overlay.add_overlay(box)
				overlay.add(@@setup_widgets[@@current_window][this_widget_number])
				@main_boxes[@@current_window][this_widget_number].add(overlay)
				overlay.set_tooltip_text("Click to edit settings for widget number #{this_widget_number} on the #{this_window} window.") if @@current_program == "Setup"
					
				box.signal_connect("button_press_event"){
					if Time.now > (@last_button_click + @time_between_clicks)
						@last_button_click = Time.now
						if @@current_program == "Setup"
							edit_button_press(this_window, this_widget_number)
						elsif @@current_program == "Main"
							command = @@widget_load_save_data[this_window][this_widget_number][@@tracker_current_state[this_window][this_widget_number]]["Command"]
							if command.start_with?(/script/i)
								words = command.split(" ")
								variables = words.slice(2..-1)
								start_script words[1], [variables.join(' ')]
							else
								put "#{command}" if command.length > 0
							end
						end
					end
				}
				
				tracking = @@widget_load_save_data[@@current_window][this_widget_number]["Widget Tracking"]
				@grids[@@current_window][row].attach(@main_boxes[@@current_window][this_widget_number], column, row, 1, 1)
				if @@current_program == "Main"
					@@all_widgets_tracking[tracking] ||= []
					@@all_widgets_tracking[tracking].push({@@current_window => this_widget_number})
				end
			}
		}

		@@setup_widgets[@@current_window].each{ |widget_number,_|
			widget = @@setup_widgets[@@current_window][widget_number]
			text = @main_labels[@@current_window][widget_number].label
			unicode = text.gsub(/\\u\{([0-9a-fA-F]+)\}/) { [$1.hex].pack('U*') }
			unicode = unicode.gsub(/\\n/, "\n")
			@main_labels[@@current_window][widget_number].label = unicode
			edit_button(widget_number, widget, @@current_menu_option, "Main")
		}

		@@all_windows[@@current_window].show_all
	end
	
	def self.edit_button_press(this_window, widget_number)
		if @@all_setup_windows["Edit Widget"].nil?
			@@current_window = this_window
			set_menu_active(@@windows_menu, @@current_window)
			create_window("Edit Widget")
			populate_edit_button_window(widget_number)
		end
	end
	
	def self.create_widget_spin_button(row_number, tab_name)
		setting = "Row #{row_number}"

		adjustment = Gtk::Adjustment.new(0, 1, @@window_originals["Max widgets per row"].to_i, 1, 5, 0)
		@@spin_buttons[@@current_window][setting] = Gtk::SpinButton.new(adjustment, 1, 0)
		
		@@labels[setting] = Gtk::Label.new("Number of widgets for #{setting}")
		
		@@spin_buttons[@@current_window][setting].set_tooltip_text(@@tooltips["Number of widgets for row"])
		@@labels[setting].set_tooltip_text(@@tooltips["Number of widgets for row"])
			
		column = -1
		@@main_grids[tab_name].attach(@@labels[setting], column += 1, row_number, 1, 1)
		@@main_grids[tab_name].attach(Gtk::Label.new("     "), column += 1, row_number, 1, 1)
		@@main_grids[tab_name].attach(@@spin_buttons[@@current_window][setting], column += 1, row_number, 1, 1)
			
		@@spin_buttons[@@current_window][setting].signal_connect("value-changed"){
			button_value = @@spin_buttons[@@current_window][setting].value.to_i
			@@window_load_save_data[@@current_window][setting] = button_value
			max_value = ((row_number.to_i - 1) * @@window_originals["Max widgets per row"].to_i) + button_value
			widget_number = ((row_number.to_i - 1) * @@window_originals["Max widgets per row"].to_i)
			@grids[@@current_window][row_number].each{ |widget|
				widget_number += 1
				new_widget = @@setup_widgets[@@current_window][widget_number]
				new_widget.hide if widget_number > max_value && new_widget.visible?
				new_widget.show if widget_number <= max_value && !new_widget.visible?
			}
			@@save_file_data = true
		}
		
		before_value = @@window_load_save_data[@@current_window][setting] ? @@window_load_save_data[@@current_window][setting].to_i : @@window_originals["Widgets per row"].to_i
		@@spin_buttons[@@current_window][setting].value = 2
		@@spin_buttons[@@current_window][setting].value = 1
		@@spin_buttons[@@current_window][setting].value = before_value
	end
	
	def self.setup_main
		@@main_notebook = Gtk::Notebook.new
		page_labels = {}

		page_names = [ "Widgets", "Windows", "Profiles" ]
		page_names.each{ |tab_name|
			page_labels[tab_name] = Gtk::Label.new(tab_name)
			@@main_grids[tab_name] = Gtk::Grid.new
			@@main_notebook.append_page(@@main_grids[tab_name], page_labels[tab_name])
		}
		
		@@all_setup_windows["Setup Menu"].add(@@main_notebook)
		setup_widgets_tab
		setup_windows_tab
		create_profile_tab("Profiles")
	end

	def self.setup_widgets_tab
		tab_name = "Widgets"
		setting = "Number of rows"
		@@main_grids[tab_name].each{ |widget| @@main_grids[tab_name].remove(widget) }
		
		adjustment = Gtk::Adjustment.new(0, 1, @@window_originals["Max number of rows"].to_i, 1, 5, 0)
		@@spin_buttons[@@current_window][setting] = Gtk::SpinButton.new(adjustment, 1, 0)
		@@labels[setting] = Gtk::Label.new(setting)
		@@spin_buttons[@@current_window][setting].value = @@window_load_save_data[@@current_window][setting] ? @@window_load_save_data[@@current_window][setting].to_i : @@window_originals[setting].to_i
		
		@@spin_buttons[@@current_window][setting].set_tooltip_text(@@tooltips[setting])
		@@labels[setting].set_tooltip_text(@@tooltips[setting])

		@@main_grids[tab_name].attach(@@labels[setting], 0, 0, 1, 1)
		@@main_grids[tab_name].attach(Gtk::Label.new("     "), 1, 0, 1, 1)
		@@main_grids[tab_name].attach(@@spin_buttons[@@current_window][setting], 2, 0, 1, 1)
		
		@@spin_buttons[@@current_window]["Number of rows"].signal_connect("value-changed"){
			button_value = @@spin_buttons[@@current_window]["Number of rows"].value.to_i
			@@window_load_save_data[@@current_window]["Number of rows"] = button_value
			number = 0
			@@main_grids[@@current_window].reverse_each{ |grid|
				number += 1
				grid.hide if number > button_value && grid.visible?
				grid.show if number <= button_value && !grid.visible?
			}
			setup_widgets_tab
			@@save_file_data = true
		}
		
		@@spin_buttons[@@current_window]["Number of rows"].value.to_i.times.with_index{ |index|
			row_number = index + 1
			create_widget_spin_button(row_number, tab_name)
		}
		
		@@all_setup_windows["Setup Menu"].show_all
	end
	
	def self.add_checkboxes(grid, check_boxes, save, default)
		column = -1

		check_boxes.each{ |setting,checkbox|
			checkbox.set_tooltip_text(@@tooltips[setting])
			activated = save[setting] ? save[setting] : default[setting]
			if activated == "Yes"
				checkbox.active = true
			else
				checkbox.active = false
			end
			checkbox.signal_connect("clicked"){
				if checkbox.active?
					@@window_load_save_data[@@current_window][setting] = "Yes"
				else
					@@window_load_save_data[@@current_window][setting] = "No"
				end
				@@save_file_data = true
			}
			grid.attach(checkbox, column += 1, 0, 1, 1)
		}
	end
	
	def self.set_menu_active(menu, wanted_item)
		needed_item = nil
		menu.model.each{ |model, path, iter|
			if wanted_item == menu.model.get_value(iter, 0)
				needed_item = iter
				break
			end
		}
		menu.set_active_iter(needed_item)
	end
	
	def self.get_current_window_positon
		position = @@all_windows[@@current_window].position
		@@position_spin_buttons["Horizontal Position"].value = position[0].to_i
		@@position_spin_buttons["Vertical Position"].value = position[1].to_i
		
		allocation = @@all_windows[@@current_window].allocation
		@@position_spin_buttons["Horizontal Size"].value = allocation.width.to_i
		@@position_spin_buttons["Vertical Size"].value = allocation.height.to_i
	end
	
	def self.comment_response(message)
		respond
		respond "########################################################################################################"
		respond "Message from ;grids"
		respond message
		respond "########################################################################################################"
		respond
	end
	
	def self.adjust_spin_buttons
		before = @@spin_buttons[@@current_window]["Number of rows"].value.to_i
		if @@spin_buttons[@@current_window]["Number of rows"].value.to_i == 1
			@@spin_buttons[@@current_window]["Number of rows"].value = 2
		else
			@@spin_buttons[@@current_window]["Number of rows"].value = 1
		end
		@@spin_buttons[@@current_window]["Number of rows"].value = before
	end
	
	def self.setup_windows_tab
		tab_name = "Windows"
		
		create_grids(tab_name)
		all_grids = @all_grids[tab_name]
		
		grid = all_grids.shift
		
		row = -1

		grid = all_grids.shift
		check_boxes = {}
		check_boxes["Keep Above"] = Gtk::CheckButton.new("Keep Above")
		check_boxes["Show Title"] = Gtk::CheckButton.new("Show Title")
		add_checkboxes(grid, check_boxes, @@window_load_save_data[@@current_window], @@window_originals)
		
		buttons = {}
		grid = all_grids.shift
		window_labels = {}
		window_entries = {}
		new_settings = [ "Create Window", "Delete Window", "Modify Window" ]

		new_settings.each{ |setting|
			window_labels[setting] = Gtk::Label.new("#{setting}     ")
			window_entries[setting] = Gtk::Entry.new
			window_labels[setting].set_tooltip_text(@@tooltips[setting])
			window_entries[setting].set_tooltip_text(@@tooltips[setting])
			if setting != "Modify Window"
				buttons[setting] = Gtk::Button.new(:label => setting)
				buttons[setting].set_tooltip_text(@@tooltips[setting])
			end
		}

		@@windows_menu = Gtk::ComboBoxText.new
		@@window_load_save_data.each{ |name,_| @@windows_menu.append_text(name) }
			
		@@windows_menu.set_tooltip_text("Choose which window you want to modify.\n\nAll settings in the Customize, Default Settings, Window Settings, and Other/Hidden Bars tabs will be specific to the current window.")

		row = -1
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		grid.attach(window_labels["Create Window"], 0, row += 1, 1, 1)
		grid.attach(window_entries["Create Window"], 1, row, 1, 1)
		grid.attach(buttons["Create Window"], 2, row, 1, 1)
		grid.attach(window_labels["Delete Window"], 0, row += 1, 1, 1)
		grid.attach(window_entries["Delete Window"], 1, row, 1, 1)
		grid.attach(buttons["Delete Window"], 2, row, 1, 1)
		grid.attach(window_labels["Modify Window"], 0, row += 1, 1, 1)
		grid.attach(@@windows_menu, 1, row, 1, 1)
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
			
		@@windows_menu.signal_connect("changed") do |widget|
			@@current_window = widget.active_text
			if !@@all_windows.include?(widget.active_text)
				create_window(@@current_window)
				create_standin_widgets
				setup_widgets_tab
			end
			save = @@window_load_save_data[@@current_window]
			default = @@window_originals
			check_boxes.each{ |setting,checkbox| 
				activated = save[setting] ? save[setting] : default[setting]
				if activated == "Yes"
					checkbox.active = true
				else
					checkbox.active = false
				end
			}
			adjust_spin_buttons
			get_current_window_positon
			set_window_title
			color = @@window_load_save_data[@@current_window]["Window Background Color"] ? @@window_load_save_data[@@current_window]["Window Background Color"] : @@window_originals["Window Background Color"]
			@window_color_entry.text = color
			update_window_settings(@@current_window)
		end
			
		buttons["Create Window"].signal_connect("clicked") do
			@@all_setup_windows["Edit Widget"].close if @@all_setup_windows["Edit Widget"]
			win_name = window_entries["Create Window"].text
			if win_name.length < 1
				comment_response("You must enter at least one character for the Window Name.")
			elsif @@all_windows.has_key?(win_name)
				comment_response("You already have a window with this name. Choose a different name.")
			elsif win_name =~ /Setup Menu|Windows|Widgets|Profiles|Edit Widget|Color Options|Font Options/i
				comment_response("You can't name a window \"#{win_name}\".")
			else
				@@windows_menu.append_text(win_name)
				window_entries["Create Window"].text = ""
				@@windows_menu.set_active(@@windows_menu.model.iter_n_children - 1)
				@@save_file_data = true
			end
		end
			
		buttons["Delete Window"].signal_connect("clicked") do
			win_name = window_entries["Delete Window"].text
			if win_name == "Main"
				comment_response("You cannot delete the Main window.")
			else
				needed_item = nil
				@@windows_menu.model.each{ |model, path, iter|
					if win_name == @@windows_menu.model.get_value(iter, 0)
						needed_item = iter
						break
					end
				}
				if needed_item
					@@window_load_save_data.delete(win_name)
					@@widget_load_save_data.delete(win_name)
					@@windows_menu.set_active(0)
					window_entries["Delete Window"].text = ""
					@@windows_menu.model.remove(needed_item)
					@@save_file_data = true
					@@all_windows[win_name].close
				else
					comment_response("The Window Name you entered does not exist. Enter the exact Window Name (case sensitive) and try again.")
				end
			end
		end

		labels = {}
		setting = "Background Color"
		labels[setting] = Gtk::Label.new("#{setting}     ")
		@window_color_entry = Gtk::Entry.new
		tooltip = "Select the background color for the currently selected window."
		labels[setting].set_tooltip_text(tooltip)
		@window_color_entry.set_tooltip_text(tooltip)
		color_button = Gtk::Button.new(:label => "Colors")
		color_button.set_tooltip_text(@@tooltips["Color Options"])
		color_button.signal_connect("clicked") do
			if @@all_setup_windows["Color Options"].nil?
				create_window("Color Options")
				populate_color_options_window(@window_color_entry, buttons["Save Widget"], "Window")
			end
		end
		grid = all_grids.shift
		grid.attach(labels[setting], 0, 0, 1, 1)
		grid.attach(@window_color_entry, 1, 0, 1, 1)
		grid.attach(color_button, 2, 0, 1, 1)

		note = "\n\nNote: Moving or resizing the window manually will not automatically update these values."
		settings = [ "Horizontal Position", "Vertical Position" ]
		settings.each{ |setting|
			adjustment = Gtk::Adjustment.new(0, -1000, 5000, 1, 5, 0)
			@@position_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
			labels[setting] = Gtk::Label.new("#{setting}     ")
			@@position_spin_buttons[setting].signal_connect("value-changed") do
				@@all_windows[@@current_window].move(@@position_spin_buttons["Horizontal Position"].value, @@position_spin_buttons["Vertical Position"].value)
			end
			tooltip = "Enter the #{setting} you want for the current window.\n\nMousewheel up/down and arrow keys up/down change the value by 1.\nPageUp/PageDown keys change the value by 5.#{note}"
			labels[setting].set_tooltip_text(tooltip)
			@@position_spin_buttons[setting].set_tooltip_text(tooltip)
		}
		
		horizontal = @@window_load_save_data[@@current_window]["Horizontal Size"] ? @@window_load_save_data[@@current_window]["Horizontal Size"].to_i : @@window_originals["Horizontal Size"].to_i
		vertical = @@window_load_save_data[@@current_window]["Vertical Size"] ? @@window_load_save_data[@@current_window]["Vertical Size"].to_i : @@window_originals["Vertical Size"].to_i
		
		settings = [ "Horizontal Size", "Vertical Size" ]
		settings.each{ |setting|
			adjustment = Gtk::Adjustment.new(0, 120, 2000, 1, 5, 0) if setting == "Horizontal Size"
			adjustment = Gtk::Adjustment.new(0, 10, 2000, 1, 5, 0) if setting == "Vertical Size"
			@@position_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
			labels[setting] = Gtk::Label.new("#{setting}     ")
			@@position_spin_buttons[setting].value = 1
			@@position_spin_buttons[setting].value = horizontal if setting == "Horizontal Size"
			@@position_spin_buttons[setting].value = vertical if setting == "Vertical Size"
			@@position_spin_buttons[setting].signal_connect("value-changed") do
				@@all_windows[@@current_window].resize(@@position_spin_buttons["Horizontal Size"].value, @@position_spin_buttons["Vertical Size"].value)
			end
			tooltip = "Enter the #{setting} you want for the current window.\n\nMousewheel up/down and arrow keys up/down change the value by 1.\nPageUp/PageDown keys change the value by 5.#{note}"
			labels[setting].set_tooltip_text(tooltip)
			@@position_spin_buttons[setting].set_tooltip_text(tooltip)
		}
		
		grid = all_grids.shift
		row = -1
		@@position_spin_buttons.each{ |setting,spin_button|
			column = -1
			grid.attach(labels[setting], column += 1, row += 1, 1, 1)
			grid.attach(@@position_spin_buttons[setting], column += 1, row, 1, 1)
		}
		grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
	end
	
	@grid_squelch = proc{ |command, squelch_lines|
		started = false
		hook_proc = proc { |string|
			if started
				if string =~ /<prompt/
					DownstreamHook.remove("grid_squelch")
					nil
				elsif string =~ /<output/
					string
				else
					nil
				end
			elsif string =~ /^#{squelch_lines}/
				started = true
				nil
			else
				string
			end
		}
		DownstreamHook.add("grid_squelch", hook_proc)
		put "#{command}"
	}
	
	before_dying{ DownstreamHook.remove("grid_squelch") }
	
	def self.watching(status)
		comment_response("Start script as ;grids setup to open the Setup menu.\nClose any window or stop the script to close all open windows.\n\nA list of available colors for color settings can be found here:\nwww.w3.org/wiki/CSS/Properties/color/keywords\n\nHere is a good source to find Unicode symbols and Emojis, just search for the keyword you want:\nhttps://www.compart.com/en/unicode/\n\nHere is another good source for Unicode symbols and Emojis, it lists many of them towards bottom of page: https://en.wikipedia.org/wiki/Emoji")
		@offer_available = nil
		@offer_name = nil
		@group_leader = nil
		@original_group_leader_text = {}
		@original_group_members_text = {}
		@current_group = []
		if status == "Main"
			wait_until{ @@all_widgets_tracking.count > 0 }
			@@all_widgets_tracking.each{ |tracking,value|
				value.each{ |array|
					array.each{ |window_name,widget_number|
						@@tracker_current_state[window_name] ||= {}
						if tracking == "Stance"
							@@tracker_current_state[window_name][widget_number] = checkstance.capitalize
						elsif tracking == "Experience"
							@@tracker_current_state[window_name][widget_number] = checkmind.capitalize
						elsif tracking == "Offer"
							@@tracker_current_state[window_name][widget_number] = "False"
						elsif tracking == "Group Leader" || tracking == "Group Members"
							nil
						end
						update_current_widget(widget_number, window_name, "N/A", @@tracker_current_state[window_name][widget_number])
					}
				}
			}

			if @@all_widgets_tracking["Stance"]
				Thread.new{
					loop{
						current_stance = checkstance
						wait_until{ current_stance != checkstance }
						@@all_widgets_tracking["Stance"].each{ |array|
							array.each{ |window_name,widget_number|
								@@tracker_current_state[window_name][widget_number] = checkstance.capitalize
								update_current_widget(widget_number, window_name, "N/A", @@tracker_current_state[window_name][widget_number])
							}
						}
					}
				}
			end
		
			if @@all_widgets_tracking["Experience"]
				Thread.new{
					loop{
						current_mind = checkmind
						wait_until{ current_mind != checkmind }
						@@all_widgets_tracking["Stance"].each{ |array|
							array.each{ |window_name,widget_number|
								@@tracker_current_state[window_name][widget_number] = checkmind.capitalize
								update_current_widget(widget_number, window_name, "N/A", @@tracker_current_state[window_name][widget_number])
							}
						}
					}
				}
			end
			
			if @@all_widgets_tracking["Offer"]
				Thread.new{
					loop{
						wait_until{ @offer_available }
						@@all_widgets_tracking["Offer"].each{ |array|
							array.each{ |window_name,widget_number|
								@@tracker_current_state[window_name][widget_number] = "True"
								update_current_widget(widget_number, window_name, "Offer", @@tracker_current_state[window_name][widget_number]) }
							}
						wait_until{ @offer_available.nil? }
						@@all_widgets_tracking["Offer"].each{ |array|
							array.each{ |window_name,widget_number|
								@@tracker_current_state[window_name][widget_number] = "False"
								update_current_widget(widget_number, window_name, "Offer", @@tracker_current_state[window_name][widget_number])
							}
						}
					}
				}
			end
			
			if @@all_widgets_tracking["Group Leader"]
				Thread.new{
					current_leader = "ABC123"
					loop{
						if @group_leader == checkname
							option = "Me"
						elsif @group_leader
							option = "Someone else"
						else
							option = "No leader"
						end
						@@all_widgets_tracking["Group Leader"].each{ |array|
							array.each{ |window_name,widget_number|
								@@tracker_current_state[window_name][widget_number] = option
								update_current_widget(widget_number, window_name, "Group Leader", @@tracker_current_state[window_name][widget_number])
							}
						}
						wait_until{ current_leader != @group_leader }
						current_leader = @group_leader
					}
				}
			end
			
			if @@all_widgets_tracking["Group Members"]
				Thread.new{
					current_members = 10000
					sleep 1
					@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
					loop{
						if @current_group.count > 0
							option = "Group"
						elsif @current_group.count == 0
							option = "No Group"
						end
						@@all_widgets_tracking["Group Members"].each{ |array|
							array.each{ |window_name,widget_number|
								@@tracker_current_state[window_name][widget_number] = option
								update_current_widget(widget_number, window_name, "Group Members", @@tracker_current_state[window_name][widget_number])
							}
						}
						wait_until{ current_members != @current_group.count }
						current_members = @current_group.count
					}
				}
			end

			Thread.new{
				loop{
					current_room = Room.current.id
					wait_until{ current_room != Room.current.id }
					if @current_group.count > 0
						if @current_group != checkpcs
							@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
						end
					end
				}
			}

			while line = get
				#New Offer
				if line =~ /^([a-zA-Z]+) offers you .*.  Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds./
					@offer_available = true
					@offer_name = $1
				#Offer expired
				elsif line =~ /^([a-zA-Z]+)\'s offer to you has expired.|^([a-zA-Z]+) has cancelled the offer.|^Offer declined.|^You accept .* offer and are now holding|^You both have to be in the same place for that.|^You have no offers to accept./
					@offer_available = nil
				#Group Information
				elsif line =~ /^You are leading / || line =~ /^You are grouped with ([a-zA-Z]+) who is leading/
					@group_leader = $1
					@group_leader = checkname if line =~ /You are leading/
					group = line.gsub(/You are grouped with ([a-zA-Z]+) who is leading|You are leading |\.|,| and| who is invisible| who is hidden/, "")
					group = group.split(" ")
					@current_group = []
					group.each{ |name| @current_group.push(name) }
				elsif line =~ /^You are not currently in a group./
					@group_leader = nil
					@current_group = []
				elsif line =~ /^You remove ([a-zA-Z]+) from the group./ || line =~ /^([a-zA-Z]+) leaves your group./
					@current_group.delete($1)
					@group_leader = nil if @current_group.count == 0
				elsif line =~ /^([a-zA-Z]+) removes you from [a-zA-Z]+ group./
					@group_leader = nil
					@current_group = []
				elsif line =~ /^([a-zA-Z]+) removes ([a-zA-Z]+) from the group./
					@current_group.delete($2) if @group_leader == $1
				elsif line =~ /^([a-zA-Z]+) joins your group./
					@current_group.push($1)
					@group_leader = checkname
				elsif line =~ /^([a-zA-Z]+) joins ([a-zA-Z]+)'s group./
					@current_group.push($1) if @group_leader == $2
				elsif line =~ /^You disband your group./ || line =~ /^You leave [a-zA-Z]+\'s group./
					@group_leader = nil
					@current_group = []
				elsif line =~ /^([a-zA-Z]+) disbands [a-zA-Z]+ group./
					if @group_leader == $1
						@group_leader = nil
						@current_group = []
					end
				elsif line =~ /^[a-zA-Z]+ designates you as the new leader of the group./
					@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
				elsif line =~ /^[a-zA-Z]+ designates ([a-zA-Z]+) as the new leader of the group./
					@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
				elsif line =~ /^You designate ([a-zA-Z]+) as the new leader of the group./
					@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
				elsif line =~ /^You clasp ([a-zA-Z]+)'s hand tenderly./ || line =~ /^You add ([a-zA-Z]+) to your group./
					@current_group.push($1)
					@group_leader = checkname
				elsif line =~ /^[a-zA-Z]+ clasps your hand tenderly./ || line =~ /^[a-zA-Z]+ adds you to [a-zA-Z]+ group./ || line =~ /^You join [a-zA-Z]+./
					@grid_squelch.call("group", "You are not currently in a group|You are leading |You are grouped with ")
				elsif line =~ /^([a-zA-Z]+) clasps ([a-zA-Z]+)'s hand tenderly./ || line =~ /^([a-zA-Z]+) adds ([a-zA-Z]+) to [a-zA-Z]+ group./
					@current_group.push($2) if @group_leader == $1
				end
			end
		else
			sleep
		end
	end
	
	def self.startup_setup
		create_window("Main")
		create_window("Setup Menu")
		create_standin_widgets
		
		setup_main
		adjust_spin_buttons
		@@window_load_save_data.each{ |window_name,window|
			if window_name != "Main"
				@@current_window = window_name
				create_window(window_name)
				create_standin_widgets
				setup_widgets_tab
				adjust_spin_buttons
			end
		}
		
		set_window_title
		set_menu_active(@@windows_menu, "Main")
		@@save_file_data = nil
		@@first_run_through = nil
	end
	
	def self.startup_normal
		@@first_run_through = nil
		@@window_load_save_data.each{ |window_name,window|
			@@current_window = window_name
			create_window(window_name)
			create_standin_widgets
		}
	end
	
	@timer_id = GLib::Timeout.add_seconds(1) do
		if !running? "grids"
			save_window_position("Main") if @@current_program == "Setup"
			@@all_windows["Main"].close
		end
		true
	end
end

$grids_script_vars_2 = script.vars[2]

GridsMain.create_profile_menu
GridsMain.load_text_data

if script.vars[1] =~ /set/i
	GridsMain.set_program = "Setup"
	Gtk.queue {
		GridsMain.startup_setup		
		Gtk.main
	}
	GridsMain.watching("Setup")
else
	GridsMain.set_program = "Main"
	Gtk.queue {
		GridsMain.startup_normal
		Gtk.main
	}
	
	GridsMain.watching("Main")
end