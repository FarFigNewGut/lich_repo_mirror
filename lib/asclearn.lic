=begin
  asclearn.lic

  Learn all the ascension skills! You better have a lot of EXP!
  
  ;asclearn                                  - try to level all ascension skills from first in last to last
  ;asclearn <mnemonic>                       - will only learn the given mnemonic for an ascension skill
  ;asclearn <resist|stat|skill|regen|other>  - will attempt to learn all known skills in category

   original author: Tysong
        maintainer: elanthia-online
              game: Gemstone
              tags: ascension, test
           version: 1.0.0

  Leveling Up EXEC:
  ;e silence_me; loop { Lich::Util.quiet_command_xml("level up", /<dialogData id='expr'\>/); sleep(0.4); break if Stats.exp > 90000000 }

  Changelog:
   v1.0.0 (2022-04-14)
     initial release

=end


results = Lich::Util.quiet_command_xml("asc list", /the following Ascension Abilities are available/)
asc_skills = Hash.new

results.each { |line|
    if /(?<mnemonic>[\w]+)<\/d\>\s+(?<ranks_current>[\d]+)\/(?<ranks_max>[\d]+)(?:.*)(?<subcategory>Resist|Stat|Skill|Other|Regen)/ =~ line
        asc_skills[mnemonic] = {
            :ranks_current => ranks_current.to_i,
            :ranks_max => ranks_max.to_i,
            :subcategory => subcategory.downcase
        }
    end
}

if variable[1] =~ /^(?:resist|stat|skill|other|regen)$/i
    asc_skills.each { |skill|
        next if skill[1][:subcategory] != variable[1].downcase
        (skill[1][:ranks_max] - skill[1][:ranks_current]).times { 
            result = dothistimeout "asc learn #{skill[0]}", 3, /You do not have enough points available\.|You have chosen to learn rank/
            if result =~ /You do not have enough points available\./
                exit
            end
            fput "asc learn confirm" 
        }
    }
elsif !variable[1].nil?
    asc_skills.each { |skill|
        next if skill[0] != variable[1].downcase
        (skill[1][:ranks_max] - skill[1][:ranks_current]).times { 
            result = dothistimeout "asc learn #{skill[0]}", 3, /You do not have enough points available\.|You have chosen to learn rank/
            if result =~ /You do not have enough points available\./
                exit
            end
            fput "asc learn confirm" 
        }
    }
else
    asc_skills.each { |skill|
        (skill[1][:ranks_max] - skill[1][:ranks_current]).times { 
            result = dothistimeout "asc learn #{skill[0]}", 3, /You do not have enough points available\.|You have chosen to learn rank/
            if result =~ /You do not have enough points available\./
                exit
            end
            fput "asc learn confirm" 
        }
    }
end