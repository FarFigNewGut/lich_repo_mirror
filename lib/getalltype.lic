=begin
    USAGE: ;getalltype <type> <container>
    Picks up all items of <type> from the ground,
    and places it into <container>

    <container> can either be in your hand, or worn on your body
    suggest you have an open hand, otherwise script will "store left"
    first
=end

@held_item = nil
lootsack = UserVars.lootsack

if checkleft && checkright
    @held_item = checkleft
    fput 'store left'
end

unless variable[1]
    echo "USAGE:;getall <type> <container>"
    echo "Picks up all items that match <item> and places it into <container>"
    echo "You must include the 'into' word or you can also shorten it."
    exit
end
unless variable[2] || lootsack
    echo "You have no lootsack set, so no default container."
    echo ";vars set lootsack=<container>"
    echo "Or pass in a container: ;getall <item> <container>"
    exit
end
To = variable[2] || lootsack
def get_container(name)
    mine = name =~ /my/
    itemname = name.sub(/my/,'').chomp if mine
    echo "name is #{itemname}"
    return GameObj.left_hand if checkleft =~ itemname
    return GameObj.right_hand if checkright =~ itemname
    return GameObj.inv.find{ |i| i.name =~ /#{itemname}/} if mine
    return GameObj[name]
end


Type = variable[1]
if To.nil?
    echo "USAGE: ;getall <type> <container>"
    echo "Picks up all items of a type from the ground and places it into container"
    echo "container can have \"my\" qualifier"
    exit
end

Container = get_container(To) if To

Count = GameObj.loot.count{ |i| i.type =~ /#{Type}/}

if Container.nil?
    echo "Couldn't find container \"#{To}\""
else
    echo "Getting #{Count} items of type \"#{Type}\" into #{Container.name}"
    GameObj.loot.each { |c|
        if c.type =~ /#{Type}/
            put "get ##{c.id}"
            fput "put ##{c.id} in ##{Container.id}"
        end
    }
end

fput "get my #{@held_item}" if @held_item