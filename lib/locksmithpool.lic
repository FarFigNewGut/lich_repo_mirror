=begin

A utility to automatically deposit all your boxes at the local Locksmith pool
by Daedeus 

5/13/2020 v0.3 - remove a delay so it should work faster (doesn't wait for your disk initially)
4/2/2020 v0.2 - fix bugs
4/1/2020 v0.1 - initial version


;locksmithpool     # goes to the locksmith pool, drops off all of your locked boxes
;locksmithpool return    # goes to the local pool, returns, and loots all of your boxes

Default tip percent is 10 percent, can be configured by editing the script
=end

TIP_PERCENT = 10

if UserVars.boxsack.nil? 
    echo "I'm not sure where to find your boxes.  Haven't you set a box sack via ;sloot?"
    echo "Or you can manually set it with ;e UserVars.boxsack = <your container>"
    return
end

unless Script.exists? 'lootbox2'
    echo "You'll need to download the lootbox2.lic script."
    echo ";repo download lootbox2.lic"
    return
end

go2 = proc { |room|
    next if Room.current.id.to_s == room.to_s

    wait_while { running? 'go2' }
    start_script('go2', [ room.to_s, '_disable_confirm_' ], h={:quiet=>true});
    wait_while { running? 'go2' }
}

checksilvers = proc {
  silvers = nil
  action = proc { |server_string|
    if server_string !~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
      nil
    elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
      silvers = $1.to_i
      DownstreamHook.remove("slib_check_silvers")
      nil
    else
      server_string
    end
  }
  DownstreamHook.add("slib_check_silvers", action)
  $_SERVER_.puts "#{$cmd_prefix}info\n"
  wait_until { silvers }
  silvers
}

go2_nearest_tag = proc { |tag|
    room = Room.current.find_nearest_by_tag(tag)
    if room.nil?
        error.call "failed to find room by tag: #{tag}"
    end

    go2.call(room)
}

find_boxes = proc {
    box_sacks = [GameObj[UserVars.boxsack]]
    boxes = []

    box_sacks.each { |sack|
      if (more_boxes = sack.contents.find_all { |o| o.type.include?("box") })
        boxes += more_boxes
      end
    }

    echo "Found #{boxes.length} boxes in your inventory."

    unless disk = GameObj[/^.*#{Char.name} (?:disk|coffin)$/]
        #disk not found
        #disk = GameObj[/^.*#{Char.name} (?:disk|coffin)$/]
    end

    if disk
    unless disk.contents
        dothistimeout "look in ##{disk.id}", 3, /There is nothing|In the .*?/
        unless disk.contents
        #nothing in disk
        echo "You've got no disk."
        end
    end

    disk_boxes = disk.contents.find_all { |o| o.type.include?("box") }.to_a if disk.contents
    echo "Found #{disk_boxes.length} boxes in your disk."
    boxes += disk_boxes
    end

    boxes
}

#clear right hand
right_hand = nil
left_hand = nil
npc = nil

if variable[0] =~ /return/
    unless checkright.nil?
        right_hand = GameObj.right_hand.id
        fput "stow ##{right_hand}"
    end
    
    unless checkleft.nil?
        left_hand = GameObj.left_hand.id
        fput "stow ##{left_hand}"
    end

    go2_nearest_tag.call 'locksmith pool'
    sleep 0.5
    
    Room.current.tags.find{ |i| i =~ /meta:boxpool:npc:(.*)/;npc = $1}
    npc = GameObj.npcs.find {|i| npc =~ /#{i}/}
    while true
        result = dothistimeout "ask ##{npc.id} to return", 3, /Alright, here's your|We don't have any boxes/
        if result =~ /Alright/
            start_script 'lootbox2'
            wait_while { running? 'lootbox2' }
        else
            echo "Done looting."
            break
        end
    end
else
    boxes = find_boxes.call
    disk = GameObj[/^.*#{Char.name} (?:disk|coffin)$/]

    if (boxes.length == 0)
        echo "No boxes to drop off.  Run ;locksmithpool return to go and get your boxes returned."
        exit
    end

    unless checkright.nil?
        right_hand = GameObj.right_hand.id
        fput "stow ##{right_hand}"
    end
    
    unless checkleft.nil?
        left_hand = GameObj.left_hand.id
        fput "stow ##{left_hand}"
    end

    silvers = checksilvers.call
    neededsilvers = boxes.length * 1000
    if (silvers < neededsilvers)
        go2_nearest_tag.call 'bank'
        fput "withdraw #{neededsilvers - silvers} silver"
    end

    go2_nearest_tag.call 'locksmith pool'
    echo "Depositing #{boxes.length} boxes at the pool."
    
    Room.current.tags.find{ |i| i =~ /meta:boxpool:npc:(.*)/;npc = $1}
    npc = GameObj.npcs.find {|i| npc =~ /#{i}/}
    
    unless disk.nil?
        disk = nil
        while disk.nil?
            disk = GameObj[/^.*#{Char.name} (?:disk|coffin)$/]
            sleep 0.2
        end
    end

    boxes.each { |b|
        fput "get ##{b.id}"
        result = dothistimeout "give ##{npc.id} #{TIP_PERCENT} percent", 3, /is already open|You want a locksmith to open/
        next if result =~ /is already open/
        fput "give ##{npc.id} #{TIP_PERCENT} percent"
    }
end

fput "get ##{right_hand}" unless right_hand.nil?
fput "get ##{left_hand}" unless left_hand.nil?