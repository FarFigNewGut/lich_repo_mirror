#gpick.lic
=begin
    Author: Gwrawr

    lockpicking script for bards / non rogues

    ##TODO Char settings, flags, argparses
    ##TODO loop in broken pick repair when a pick isn't found

=end

#put "inv full"
#pause

#settings
learn = true #least pick first or greatest pick first
forever = false #exit or wait after pool timeout
efficient = false #use all picks or cheap picks
verbose = false #display warnings and status messages
debug = false #display debug statements

variable.each do |v|
    case v
    when /^forever/
        echo "FOREVER OPTION ON"
        forever = true
    when /^debug/
        echo "DEBUG OPTION ON"
        debug = true
    when /^eff/
        echo "EFFICIENT OPTION ON"
        efficient = true
    when /^ver/
        echo "VERBOSE OPTION ON"
        verbose = true
    end
end

range = 115 - Char.level
minlock = 1
maxlock = 10

#disarm result strings
success =  [
    "^With a little force applied to the springs, you manage",
    "^You carefully use the tip of a small metal file",
    "^With a little ingenuity you manage",
    "^You carefully push a small ball",
    "^You gently slide your dagger",
    "^Using the pair of metal grips",
    "^Taking a lump of putty",
    "you scrape some extra lines",
    "^Using the metal grips from",
    "^Using a bit of putty from",
    "you take a pair of metal grips and bend the sensitive metal rods out of alignment",
    "gently nudge the tiny gem until",
    "looks to have been sliced through"
]

#already disarmed strings
disarmed = [
    "although it seems to be empty now",
    "A thin layer of mud or putty has been dabbed",
    "parts of the mechanism have been ground away",
    "has been scraped clean of the strange substance",
    "the pins that hold the jaws together have been pushed out",
    "but some of the markings have been altered",
    "free of all obstructions",
    "hammer device which has been bent",
    "but it's open",
    "rods that have been bent",
    "completely plugged",
    "has been plugged",
    "plugged",
    "cotton has been pushed up"
]

done = success.join("|")
safe = disarmed.join("|")

descriptor = "#{Char.name}"
disk = false

#kit map
#allKits = [ "VAALOR KIT", ""]

#set kit
kit = "kit" if GameObj.inv.any? {|inv| inv.noun == "kit"}
kit = "toolkit" if GameObj.inv.any? {|inv| inv.noun == "toolkit"}
echo "Notice: Kit set to #{kit}" if debug

#modifer map
pickModifier = {
    ##TREASURE
    "copper lockpick" => "1.00",
    "steel lockpick" => "1.10",
    "silver lockpick" => "1.30",
    ##VAALOR
    "wire-wrapped copper lockpick" => "1.00",
    "plain steel lockpick" => "1.10",
    "acid-etched gold lockpick" => "1.20",
    "spiraled white ora lockpick" => "1.55",
    "thin mithril-tipped lockpick" => "1.45",
    "gleaming dark glaes lockpick" => "1.60",
    "burnished golden alum lockpick" => "2.30",
    "tapered black kelyn lockpick" => "2.40",
    "emerald-set etched invar lockpick" => "2.25",
    "well-crafted narrow golvern lockpick" => "2.35",
    #ILLISTIM
    "opal-tipped bright copper lockpick" => "1.00",
    "silver-edged twisted brass lockpick" => "1.00",
    "ora-handled black steel lockpick" => "1.10",
    "gold-edged pale ivory lockpick" => "1.20",
    "chiseled rose gold lockpick" => "1.20",
    "etched silver-tipped lockpick" => "1.30",
    "onyx-tipped grey ora lockpick" => "1.55",
    "sea green glaes lockpick" => "1.60",
    "ivory-tipped black laje lockpick" => "1.75",
    "slim blackened alum lockpick" => "2.30",
    "ruby-veined black rolaren lockpick" => "1.90",
    "opal-inlaid tarnished invar lockpick" => "2.25",
    "polished golden kelyn lockpick" => "2.40"
}

#free or low cost to modifier ratio
efficientMetals = ["copper", "steel", "glaes", "alum"]

#set picks
names = []
lockpicks = []

loadPicks = lambda {
    GameObj.inv.each { |i|
        echo "Scanning: GameObj.inv element #{i}" if debug
        if i.name =~ /kit/
            echo "Scanning: Found kit #{i.name}" if debug
            i.contents.each { |c| 
            echo "Scanning: GameObj.inv.#{i.name} element #{c}" if debug
                if c.name =~ /lockpick/
                    echo "Scanning: Found lockpick #{c.name} with #{c.id}" if debug
                    if efficient and GameObj[id].name in efficientMetals 
                        lockpicks << c.id
                        names << c.name
                        echo "Success: Added efficient lockpick #{c.name} with #{c.id} from container #{i.name}" if debug
                    else 
                        lockpicks << c.id
                        names << c.name
                        echo "Success: Added lockpick #{c.name} with #{c.id} from container #{i.name}" if debug
                    end
                end
            }
        end
    }
}

loadPicks.call()
pause

#GameObj.inv sometimes does not recognize worn containers until they are opened or closed
if names.length == 0 or lockpicks.length == 0
    fput "close my #{kit}"
    fput "open my #{kit}"
    loadPicks.call()
    pause
end
if names.length == 0 or lockpicks.length == 0
    echo "Error: No lockpicks found"
    exit
end

#get pick name by id
getName = lambda { |pickid| 
    GameObj.inv.each do |container|
        container.contents.each do |item|
            if item.id =~ /#{pickid}/
                return item.name  #add your pick to the table if you're getting a String String comparison error
            end
        end
    end
    echo "Error: Did not find the pick on your person" if debug
    exit
}

#get pick modifier by id or name using name lookup in table
getModifier = lambda { |pick| 
    if pick.to_i > 0 #given id
        return pickModifier[getName.call(pick)]  #add your pick to the table if you're getting a String String comparison error
    else
        #given name
        return pickModifier[pick]
    end
}

#debug
echo "Before sorting methods, lockpicks is #{lockpicks} with length #{lockpicks.length}" if debug
echo "Before sorting methods, names is #{names} with length #{names.length}" if debug

#sort pick ids by modifier
lockpicks.sort! do |a,b|
    getModifier.call(a) <=> getModifier.call(b) #returns 1 if a>b, -1 if b>a, 0 otherwise
end

names.sort! do |a, b|
    getModifier.call(a) <=> getModifier.call(b) #returns 1 if a>b, -1 if b>a, 0 otherwise
end

#debug
echo "After sorting methods, lockpicks is #{lockpicks} with length #{lockpicks.length}" if debug
echo "After sorting methods, names is #{names} with length #{names.length}" if debug


#set disk
disk = true if GameObj.loot.any? {|loot| loot.name =~ /#{Char.name} disk/}

#set mode
mode="pool"
if variable[1]
    if variable[1] =~ /^roo/
        mode = "room" 
    elsif variable[1] =~ /^me|^se/
        mode = "self"
    elsif variable[1] =~ /^play|^stand|^wait/ #player, standby, wait
        if variable[2]
            player = variable[2]
        else
            mode = "standby"
        end
    elsif variable[1] =~ /^for/ #forever pool
        mode = "pool"
        forever = true
    #else
        #donothing
        #assume this is a player
        #mode = "player"
        #player = variable[1]
    end
end

#prepare
Script.run "useherb"
pause
Script.run "eloot", "sell" if percentencumbrance > 10
pause
Script.run "go2", "locksmithpool"
pause
Script.run "larmor", "remove"
pause

#room specific settings
dump="barrel"
GameObj.loot.each { |loot| if loot.name =~ /barrel/ then dump = "barrel" elsif loot.name =~ /bin/ then dump = "bin" elsif loot.name =~ /wastebasket/ then dump = "waste" end}
worker="worker"
GameObj.npcs.each { |npc| if npc.name =~ /worker/ then worker = "worker" elsif npc.name =~ /merchant/ then worker = "merchant" elsif npc.name =~ /gnome/ then worker = "gnome" end }

startindex = (learn) ? 0 : lockpicks.length - 1
pindex = startindex
lockpick = lockpicks[pindex]

check = lambda {
    fput "ask #{worker} to check"
}

unlock = lambda { |type|
    #need to magical
    material = fput "look on table"
    if material =~ /enruned|mithril Lancipher/
        #can't open
        check.call()
        check.call()
        return
    end

    # can open
    loop do
        wait_until {checkmana >= 10}
        Spell[403].cast if Spell[403].affordable? and not checkspell 403
        waitcastrt?
        fput "prep 407"
        clear
        put "cast #{descriptor} #{type}"
        loop do
            line = get
            case line
            when /^\.\.\.wait|^You don't have a spell prepared|^Wait \d+ seconds/
                unlock.call(type)
                return false
            when /it suddenly flies open/
                return false
            when /^The .* vibrates slightly but (nothing|little) else/
                unlock.call(type)
                return false
            when /^Cast Roundtime \d Seconds/
                unlock.call(type)
                return false
            else
                #get another line
            end
        end
    end
}

loot = lambda {|stype|
return if not GameObj.loot.any? {|loot| loot.name =~ /scarab/}
echo "Warning: Trying to loot the #{stype}" if verbose
pause 0.1
    clear
    put "loot #{stype}"
    loop do
        line = get
        case line
        when /You pick up/
            pause 0.1
            pause 0.1
            if GameObj.pcs.length and GameObj.pcs.length > 0
                put "say Bug up"
                waitfor "You say"
            end
            return
        when /^\.\.\.wait/
            waitrt?
            pause 0.1
            loot.call(stype)
            return
        when /it seems to shift/
            pause 0.1
            pause 0.1
            loot.call("other " + stype)
            return
        when /could not find/
            echo "Warning: Could not find the #{stype}"
            scritch.call("scarab") unless stype == "scarab"
            return
        when /in the usual fashion/
            return
        else
            next
        end
    end
}

findbug = lambda {
    echo "Error: You should find your bug - it's either inside you, the box, or someone else's pockets.  Or it's some crazy new scarab that you really ought to LOOK for."
    exit
}

scritch = lambda { |stype|
    pause 0.1
    echo "Warning: Trying to scritch the #{stype}" if verbose
    waitrt?
    waitrt if checkrt > 0
    waitrt?
    waitrt if checkrt > 0
    
    until checkspell 402 and checkspell 404
        pause 0.1
        pause 0.1
        Spell[402].cast if Spell[402].affordable? and not checkspell 402
        Spell[404].cast if Spell[404].affordable? and not checkspell 404
        waitcastrt?
    end

    clear
    put "disarm #{stype}"
    loop do
        line = get
        case line
        when /^As you reach for the/
            scritch.call("other " + stype)
            return
        when /Deciphering the runes is relatively simple/
            loot.call(stype)
            return
        when /^\.\.\.wait/
            waitrt?
            waitrt if checkrt > 0
            waitrt?
            waitrt if checkrt > 0
            scritch.call(stype)
            return
        when /could not find/
            findbug.call()
            scritch.call("scarab") unless stype == "scarab"
            return
        else
            next
        end
    end
}

scarab = lambda { |type, stype|
    pause 0.1
    waitrt?
    until checkspell 402 and checkspell 404
        pause 0.1
        pause 0.1
        Spell[402].cast if Spell[402].affordable? and not checkspell 402
        Spell[404].cast if Spell[404].affordable? and not checkspell 404
        waitcastrt
    end
    clear
    put "disarm #{descriptor} #{type}"
    loop do
        line = get
        case line
        when /You carefully nudge the scarab free/
            if GameObj.pcs.length and GameObj.pcs.length > 0
                put "say Bug down" 
                waitfor "You say"
            end
            scritch.call(stype)
            return
        when /#{safe}/
            echo "Success: Disarmed" if verbose
            return
        when /You discover no traps/
            echo "Warning: Scarab box is not trapped" if verbose
            return
        when /You still have a good enough|you could try to disarm it/
            echo "Warning: Trying to dislodge the scarab again" if verbose
            scarab.call(type, stype)
            return
        when /^\.\.\.wait/
            scarab.call(type, stype)
            return
        when /could not find/
            echo "Error: Could not find a box while disarming a scarab"
            exit
        else
            #get another line
        end
    end
}

advancePick = lambda {
    current = names[pindex]
    echo "Notice: Advancing pick from #{names[pindex]}" if debug
    while current == names[pindex]
        break if (pindex == names.length - 1)
        pindex = pindex + 1
    end

    if debug
        if current == names[pindex]
            echo "Could not advance past last pick named #{names[pindex]}"
        else
            echo "Notice: Advanced pick to #{names[pindex]}"
        end
    end
}

getpick = lambda {
    return if (checkleft =~ /lockpick/ or checkright =~ /lockpick/)
    lockpick = lockpicks[pindex]
    clear
    put "get ##{lockpick}"
    loop do
        line = get
        case line
        when /Get what?/
            names.delete_at(pindex)
            lockpicks.delete_at(pindex)
            #if we deleted the last index, we need to reduce pindex to the new last index
            pindex = (pindex > lockpicks.length - 1) ? lockpicks.length - 1 : pindex
            lockpick = lockpicks[pindex]
            getpick.call()
            return
        when /^You remove|^You need a free hand/
            return
        when /^\.\.\.wait/
            waitrt?
            getpick.call()
            return
        else
            next
        end
    end
    return
}


#pick the box
pick = lambda { |type|
    while not (checkleft =~ /lockpick/ or checkright =~ /lockpick/)
        getpick.call()
        pause
    end
    pause 0.1
    waitrt?
    until checkspell 403
        put "incant 403" if checkmana >= 3 and not checkspell 403
        wait
        break if checkspell 403
        pause 0.1
    end
    clear
    put "pick #{descriptor} #{type}"
    loop do
        line = get
        case line
        when /^You want to pick a lock on what/
            clear
            put "look on table"
            loop do
                line = get
                case line
                when /Lancipher's (?<type>\w*)/
                    type = $~[:type]
                    pick.call(type)
                    return
                else
                    next
                end
            end
            return
        when /^You make a fumbling attempt/
            pick.call(type)
            return
        when /^Um, but it's open/
            echo "Hiccup: Already open" if verbose
            return
        when /^You must have your other hand free/
            while checkleft =~ /lockpick/ and checkright =~ /lockpick/
                waitrt?
                put "put my lockpick in my #{kit}"
                wait
            end
            pick.call(type)
            return
        when /^You struggle with the.*Then\.\.\.CLICK!  It opens!/
            echo "Success: Unlocked" if verbose
            return
        when /Crud!|SNAP|^You attempt to pick.*before you realize you are using a broken|fumble about for a bit|You didn't mention/
            #a pick broke, change pindex, store or dump the particular pick
            echo "Before advancing the pick, lockpicks is #{lockpicks} and its length is #{lockpicks.length} and names is #{names} and its length is #{names.length} and pindex is #{pindex}"
            advancePick.call()
            echo "Before advancing the pick, lockpicks is #{lockpicks} and its length is #{lockpicks.length} and names is #{names} and its length is #{names.length} and pindex is #{pindex}"
            until checkleft !~ /lockpick/ and checkright !~ /lockpick/
                waitrt?
                put "put my lockpick in #{dump}" if GameObj.right_hand.name =~ /(copper|steel) lockpick/ or GameObj.left_hand.name =~ /(copper|steel) lockpick/
                put "stow my lockpick"
                pause
            end
            getpick.call()
            pick.call(type)
            return
        when /gets stuck in the lock|not able to pick|learn little about/
            #a box is too hard for this pick, change pindex, store the pick
            if not (pindex == lockpicks.length - 1) #if not at the last pick switch picks
                echo "Before advancing the pick, lockpicks is #{lockpicks} and its length is #{lockpicks.length} and names is #{names} and its length is #{names.length} and pindex is #{pindex}"
                advancePick.call()
                echo "After advancing the pick, lockpicks is #{lockpicks} and its length is #{lockpicks.length} and names is #{names} and its length is #{names.length} and pindex is #{pindex}"
                echo ""
                until checkleft !~ /lockpick/ and checkright !~ /lockpick/
                    waitrt?
                    put "put my lockpick in my toolkit"
                    wait
                end
                lockpick = lockpicks[pindex]
                getpick.call()
            end
            pick.call(type)
            return
        when /There is a big metal plate covering the lock/
            unlock.call(type)
            return
        when /already unlocked|already open|does not appear to be locked/
            echo "Hiccup: Already unlocked" if verbose
            return
        when /^\s+Then\.\.\.CLICK!  It opens!/
            return
        when /^\.\.\.wait|Roundtime|has an? (very|extremely )?easy|primitive|rudimentary|fairly simple lock|very basic lock/
            #don't change pick, roll again
            pick.call(type)
            return
        else
            next
        end
    end
}

#get a box from the pool
getJob = lambda {
    pause 0.1
    clear
    put "ask #{worker} for job"
    loop do
        line = get
        case line
        when /^\.\.\.wait/
            waitrt?
            getJob.call()
            return
        when /You should finish the (?<type>\w*) first/
            level = 100
            type = $~[:type]
            return level, type
        #when /mentioned it being from.*\(level (?<level>\d*)\)\..*The (?<type>\w*) is set up/
        when /The (?<type>\w*) is set up/
           #level = $~[:level].to_i
            level = 100
            type = $~[:type]
            return level, type
        when /You should finish the job/
            #should sing it or get a new job
            echo "Hiccup: Already have a job" if verbose
            clear
            put "look on table"
            loop do
                line = get
                case line
                when /Lancipher's (?<type>\w*)/
                    type = $~[:type]
                    level = 100
                    return level, type
                    break
                else
                    #get another line
                end
            end
            return
        when /could not find/
            echo "Error: Not at the pool"
            exit
        when /done enough boxes for now.  Why don't you ask me again|done enough for a while.  Why don't you rest/
            if forever
                #wait 1 to 10 minutes before asking again
                pause 60 * rand(1..10)
            else
                exit
            end
            return
        else
            next
        end
    end
}

#returns true if the box needs to be picked otherwise false (plated, fused, scales)
disarm = lambda { |type|
    pause 0.1
    waitrt?
    until checkspell 402 and checkspell 404
        pause 0.1
        pause 0.1
        Spell[402].cast if Spell[402].affordable? and not checkspell 402
        Spell[404].cast if Spell[404].affordable? and not checkspell 404
        waitcastrt
    end
    clear
    put "disarm #{descriptor} #{type}"
    loop do
        line = get
        case line
        when /^To disarm yourself/
            pause 0.1
            level, type = getJob.call()
            disarm.call(type)
            return true
        when /^As you poke around inside the lock mechanism, you hear the sound of glass shattering.*fused into a lump of useless metal/
            unlock.call(type)
            return false
        when /^There appears to be a plate over the lock|seem to have any way to get through that metal plate covering the lock/
            unlock.call(type)
            return false
        when /gently slide your dagger/
            return false
        when /With a modicum of caution, they should present no danger|to be razor sharp at the edges and possessing/
            pick.call(type)
            disarm.call(type)
            return false
        when /tiny stone grey sphere held/
            fput "get my lockpick from my #{kit}"
            disarm.call(type)
            return true
        when /at least one hand free/
            fput "put my lockpick in my #{kit}" if checkright =~ /lockpick/ or checkleft =~ /lockpick/
            disarm.call(type)
            return true
        when /both hands free/
            #this may be unsorting picks
            fput "put my lockpick in my #{kit}" if checkright =~ /lockpick/ or checkleft =~ /lockpick/
            pause
            fput "put my lockpick in my #{kit}" if checkright =~ /lockpick/ or checkleft =~ /lockpick/
            fput "put my dagger in my #{kit}" if checkright =~ /dagger/ or checkleft =~ /dagger/
            fput "stow all" if checkleft
            fput "stow all" if checkright
            disarm.call(type)
            return true
        when /you locate a small dark reddish-brown sphere held in a metal bracket|your fingers are just too big to get back there to the gem/
            lockpicks.each {|l| 
                fput "get ##{l}"
                break if checkright =~ /lockpick/ or checkleft =~ /lockpick/
            }
            disarm.call(type)
            return true
        when /a thin cord connecting the lid to something|You figure that if you had a dagger, you could probably/
            until checkleft =~ /dagger/ or checkright =~ /dagger/
                fput "put my lockpick in my #{kit}" if checkright =~ /lockpick/ or checkleft =~ /lockpick/
                pause
                fput "put my lockpick in my #{kit}" if checkright =~ /lockpick/ or checkleft =~ /lockpick/
                put "get my dagger from my #{kit}"
                wait
                waitrt?
                pause 0.1
            end
            disarm.call(type)
            until not checkright =~ /dagger/ and not checkleft =~ /dagger/
                put "put my dagger in my #{kit}"
                wait
                waitrt?
                pause 0.1
            end
            return true
        when /you spy a.*?(?<stype>\w* scarab) wedged into/
            stype = $~[:stype]
            n = ""
            stype = "teardrop-etched scarab" if stype =~ /red scarab/
            n = "n" if stype[0] == 'a' or stype[0] == 'e' or stype[0] == 'i' or stype[0] == 'o' or stype[0] == 'u'
            put "say Dropping a#{n} #{stype}"
            scarab.call(type, stype)
            return true
        when /#{safe}|#{done}/
            echo "Success: Trap disarmed" if verbose
            return true
        when /You discover no traps/
            return true
        when /You still have a good enough|(Y|y)ou could try to disarm it/
            echo "Success: Trap found" if verbose
            disarm.call(type)
            return true
        when /^\.\.\.wait/
            pause 0.1
            waitrt?
            disarm.call(type)
            return true
        else
            next
        end
    end
}

#get a box from your person
getBox = lambda {
    if disk
        clear
        put "look in #{Char.name} disk"
        loop do
            line = get
            case line
            when /^In the.*?(strongbox|coffer|trunk|chest|box)/
                box = $1
                fput "get #{box} from #{Char.name} disk"
                return Char.level, box
            when /could not find|There is nothing/
                disk = false
                break
            else
                #get another line
            end
        end
    end
    Script.run "box", "grab"
    pause
    if checkright
        return Char.level, checkright
    else
        echo "Error: No box on your person"
        exit
    end
}

getRoom = lambda {
    #TODO pick all the boxes on the floor
}

getPlayer = lambda {|player|
    #TODO accept boxes from a player and pick
}

##start

fput "stop singing" if checkspell 1003 or checkspell 1010 or checkspell 1019

put "stop singing 1003" if checkspell 1003
put "stop singing 1010" if checkspell 1010
put "stop singing 1019" if checkspell 1019

fput "sheath" if checkright =~ /naginata/
fput "put my lockpick in my #{kit}" if checkleft or checkright =~ /lockpick/
pause

fput "put my lockpick in my #{kit}" if checkleft or checkright =~ /lockpick/
fput "stow all" if checkleft or checkright
fput "put my #{checkleft} in my cloak" if checkleft
fput "put my #{checkright} in my cloak" if checkright

wait_until {checkmana >= 6}
Spell[1006].cast

#wait for disk
wait_until { GameObj.loot.any? {|l| l.name =~/#{Char.name} disk/} } if disk

#main loop
loop do

    #deposit coins
    if percentencumbrance > 50 and mode =~ /pool/
        Script.run "go2", "bank"
        pause 0.1
        fput "deposit all"
        pause 0.1
        Script.run "go2", "locksmithpool"
        pause 0.1
    end

    #reset pick on each box
    pindex = startindex
    lockpick = lockpicks[pindex]

    #get a box
    case mode
    when /pool/
        descriptor = Char.name
        pause 0.1
        level, type = getJob.call()
        pause 0.1
    when /self/
        descriptor = "my"
        level = Char.level
        pause 0.1
        level, type = getBox.call()
        pause 0.1
    when /room/
        descriptor = ""
        level = 100
        pause 0.1
        type = getRoom.call()
        pause 0.1
    when /player/
        descriptor = "my"
        level  = 100
        pause 0.1
        type = getPlayer.call()
    else #default to pool
        descriptor = Char.name
        pause 0.1
        level, type = getJob.call()
        pause 0.1
    end

    topick = true

    #return or disarm
    if level > (Char.level + range)
        echo "Settings: Box is too high, returning it"
        pause 2
        check.call()
        check.call()
        pause 1
        next
    else
        pause 0.1
        topick = disarm.call(type)
        pause 0.1 
    end
  
    #chill
    pause 0.1 
    waitrt if checkrt > 0
    waitrt?
    pause 0.1
    
    #pick if not already opened (plated or scales)
    if topick
        until checkspell 403 
            pause 0.1
            pause 0.1
            Spell[403].cast if Spell[403].affordable? and not checkspell 403
            waitcastrt
        end
        getpick.call()
        pick.call(type)
        pause 0.1
    end

    #chill
    pause 0.1 
    waitrt if checkrt > 0
    waitrt?
    pause 0.1

    #clear hands
    fput "put my lockpick in my #{kit}" if checkleft =~ /lockpick/ or checkright =~ /lockpick/
    fput "put my dagger in my #{kit}" if checkleft =~ /dagger/ or checkright =~ /dagger/

    #be rid of the box
    case mode
    when /self/
        pause 0.1
        Script.run "box", "empty"
        pause 0.1
        fput (dump) ? "put #{descriptor} #{type} in #{dump}" : "drop my #{type}"
        until not checkleft and not checkright
            fput (dump) ? "put #{descriptor} #{type} in #{dump}" : "drop my #{type}"
            pause
        end
        pause 0.1
    when /room/
        pause 0.1
        #TODO
        pause 0.1
    when /player/
        #TODO
    else #default to pool
        check.call()
    end

    next
end