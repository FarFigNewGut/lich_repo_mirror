=begin

	This script was designed to help people that store reagents or gems on alternate characters vice lockers.
	You can store partially filled jars of gems and reagents in the same container.
	
	Use ;EZmove Setup to configure EZmove.
	
	Works with jars, beakers and gems.  
	If there is a demand signal I will write the code to do both in one command i.e. ";EZmove both".  Let me know if you would be interested in that.
	
	NEW - Added the count funtionality.  It will count all your gems and display how many of each you have.  Will count gems in jars!
	NEW - Now provides links to where your gems are!
	NEW - Added moving item types.  i.e. Move wand from a source to a destination.  
	
	  author: Steworaeus
	    game: Gemstone
	    tags: reagents, Gems, Jars
	required: Lich >= 4.4.6
	 version: 0.5

=end
					

settings      = CharSettings.to_hash

setup = proc {
    gtk_globals = Hash.new
    gtk_locals = Hash.new

    window = window_action = nil

    Gtk.queue {
        ttips = Gtk::Tooltips.new.enable
        ttips_text = {
            'enable_close_sacks' => "Checking this will attempt to keep your sacks closed.",
            'overflowsack' => "Enter your overflow sack(s) to place loot into when your regular sack is full.\ne.g., \"pack,sack,cloak,hat\"",
            'loot_exclude' => "Regular expression used to exclude certain loot, e.g. \"feras|drake\".",
            'critter_exclude' => "Regular expression used to exclude certain critters, e.g. \"skayl|lava golem\".",
            'enable_search_all' => "Checking this enables searching all dead critters rather than one at a time.",
            'enable_disking' => "Checking this enables disking of boxes if you have a disk.",
            'enable_phasing' => "Checking this enables phasing of boxes if you meet the requirements.\nRequires: level 4 Sorcerer with 704 learned",
            'enable_gather' => "Checking this enables gathering of ammunition after looting.",
            'ammo_name' => "Enter the full name of your ammunition here.",
            'enable_safe_hiding' => "Checking this enables looting only if not hiding or there are no creatures present.",
            'safe_ignore' => "Enter the name of any creatures you want to ignore when safe hiding.\nThis field is a regular expression so use \"|\" to separate names.",
            'enable_stow_left' => "Checking this will store your left hand to loot if your hands are full.",
            'enable_self_drops' => "Checking this enables looting of items that were dropped from creatures you searched.",
            'enable_skinning' => "Checking this enables all skinning functionality.",
            'enable_stance_on_start' => "Check this enables stancing to defensive when starting sloot.",
            'enable_skin_alternate' => "Checking this enables an alternate weapon for skinning.",
            'enable_skin_offensive' => "Checking this enables skinning in offensive for a slight success increase (not proven).",
            'enable_skin_kneel' => "Checking this enables skinning while kneeling for a slight success increase.",
            'enable_skin_safe_mode' => "Checking this enables safe mode and will only stance/kneel if there are no alive critters present.",
            'enable_skin_604' => "Checking this enables the use of 604 (Skinning) if you meet the requirements.\nRequires: level 6 Ranger with 606 learned",
            'enable_skin_sigil' => "Checking this enables the use of Sigil of Resolve if you meet the requirements.\nRequires: GoS member with Sigil of Resolve learned",
            'enable_skin_stats' => "Checking this enables skinning statistics. You can view them by using ;sloot stats.",
            'enable_skin_stance_first' => "Checking this enables stancing to previous stance before standing. This is disabled by default to prevent incuring additional roundtime from standing in defensive.",
            'skin_stand_verb' => "Enter the stand verb if you don't want to use the default STAND verb.\ne.g., \"rgambit tumble left\"",
            'enable_sell_chronomage' => "Checking this enables giving gold rings to the Chronomage during the sell process for credit towards a Chronomage ride.",
            'enable_sell_share_silvers' => "Checking this enables sharing all silvers with the group before depositing and gives them a few seconds to deposit their coins.",
            'sell_withdraw' => "Enter an amount to withdraw after the sell process completes. This is useful for towns with gate fees such as Icemule Trace.",
            'enable_sell_locksmith' => "Checking this enables the use the NPC locksmith to open your boxes.",
            'enable_sell_wait_line' => "Checking this enables waiting at the locksmith if another person is present.",
            'enable_sell_stockpile' => "Checking this enables stockpiling of gems so that they can be turned in later for bounties. This requires you to have empty jars from the alchemist available in your locker.",
            'enable_sell_force_bounty_gems' => "Checking this enables selling of gems for bounties even if you normally have gem selling disabled.",
            'sell_stockpile_locker' => "Enter the room number just OUTSIDE of where your locker is.",
            'sell_exclude' => "Regular expression used to exclude loot from being sold, e.g., \"wand|crystal\""
        }

        gtk_globals['emptyjarsack'] = Gtk::Entry.new.set_text(UserVars.emptyjarsack)
        gtk_globals['partialjarsack'] = Gtk::Entry.new.set_text(UserVars.partialjarsack)
        gtk_globals['fulljarsack'] = Gtk::Entry.new.set_text(UserVars.fulljarsack)
        gtk_globals['gemsack'] = Gtk::Entry.new.set_text(UserVars.gemsack)
        gtk_globals['reagentsack'] = Gtk::Entry.new.set_text(UserVars.reagentsack)
        gtk_globals['overflowsack'] = Gtk::Entry.new.set_text(UserVars.overflowsack)
		gtk_globals['lootsack'] = Gtk::Entry.new.set_text(UserVars.lootsack)

        # Signals
        gtk_locals['ammo_name'].sensitive = gtk_locals['enable_gather'].active?
        gtk_locals['enable_gather'].signal_connect('toggled') { gtk_locals['ammo_name'].sensitive = gtk_locals['enable_gather'].active? }

        gtk_locals['safe_ignore'].sensitive = gtk_locals['enable_safe_hiding'].active?
        gtk_locals['enable_safe_hiding'].signal_connect('toggled') { gtk_locals['safe_ignore'].sensitive = gtk_locals['enable_safe_hiding'].active? }

        # Add tooltips
        ttips_text.each_pair { |widget,tip|
            if widget = gtk_globals[widget] or gtk_locals[widget]
                ttips.set_tip(widget,tip,'')
            end
        }

        # Primary Window
        window = Gtk::Window.new
        window.title = "EZmove configuration for #{Char.name}"
        window.border_width = 3
        window.resizable = false
        window.resize(450, 300)

        # Notebooks for tabs at the top
        nb = Gtk::Notebook.new.set_show_border(true).set_tab_border(3)

        #
        # Notebook Page 1 - Sacks
        #
        vb_pg1 = Gtk::VBox.new(false,1).set_border_width(3)

        #
        # Page 1, Frame 1 - Sacks
        #
        vb_pg1_1 = Gtk::VBox.new(false,1).set_border_width(3)
        fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>EZmove</b></big>'))
        fr_pg1_1.add(vb_pg1_1)
        vb_pg1.pack_start(fr_pg1_1,false)

        lbl = Gtk::Label.new.set_markup("Configure EZmove to sort your gems and reagents. Fill in the locations where you store your items below.")
        lbl.set_wrap(true).set_width_request(500).set_padding(0,10)
        vb_pg1_1.pack_start(lbl,false)

        hb = Gtk::HBox.new(false,1)
        hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Empty Jars:')).set_width_request(100))
        hb.pack_start(gtk_globals['emptyjarsack'],false)
        hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Partially Full Jars:')).set_width_request(100))
        hb.pack_start(gtk_globals['partialjarsack'],false)
        vb_pg1_1.pack_start(hb,false)

        hb = Gtk::HBox.new(false,1)
        hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Full Jars:')).set_width_request(100))
        hb.pack_start(gtk_globals['fulljarsack'],false)
        hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Gems:')).set_width_request(100))
        hb.pack_start(gtk_globals['gemsack'],false)
        vb_pg1_1.pack_start(hb,false)

        hb = Gtk::HBox.new(false,1)
        hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Reagents:')).set_width_request(100))
        hb.pack_start(gtk_globals['reagentsack'],false)
        hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Overflow:')).set_width_request(100))
        hb.pack_start(gtk_globals['overflowsack'],false)
        vb_pg1_1.pack_start(hb,false)
        
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Lootsack:')).set_width_request(100))
        hb.pack_start(gtk_globals['lootsack'],false)
        vb_pg1_1.pack_start(hb,false)
		
        nb.append_page(vb_pg1,Gtk::Label.new('Containers'))

        # Save/Close buttons
        hb_saveclose = Gtk::HBox.new
        save = Gtk::Button.new('_Save & Close')
        close = Gtk::Button.new('E_xit')

        save.signal_connect('clicked') { window_action = :save }
        close.signal_connect('clicked') { window_action = :done }

        hb_saveclose.pack_start(save,false)
        hb_saveclose.pack_start(close,false)

        # Primary VerticalBox to split up Notebook and Save/Close buttons
        vb_main = Gtk::VBox.new(false,5)
        vb_main.border_width = 3

        vb_main.pack_start(nb,false)
        vb_main.pack_start(Gtk::Alignment.new(1,0,0,0).add(hb_saveclose),false)

        window.signal_connect('delete_event') { window_action = :exit }

        window.add(vb_main)
        window.show_all
        window.keep_above = true # On windows keep_above is required AFTER show_all
    }

    before_dying { Gtk.queue { window.destroy } }
    wait_while { window_action.nil? }

    clean_entry = proc { |entry|
        entry.text = entry.text.strip
        if entry.text.empty?
            entry.text = nil
        end

        entry.text
    }

    if window_action == :save
        gtk_globals.each_pair { |option,widget|
            if widget.class == Gtk::CheckButton
                UserVars.change(option,widget.active?,:char)
            elsif widget.class == Gtk::Entry
                UserVars.change(option,clean_entry.call(widget),:char)
            else
                echo "error: unknown global widget #{option} [#{widget.class}]"
            end
        }

        gtk_locals.each_pair { |option,widget|
            if widget.class == Gtk::CheckButton
                settings[option] = widget.active?
            elsif widget.class == Gtk::Entry
                settings[option] = clean_entry.call(widget)
            else
                echo "error: unknown local widget #{option} [#{widget.class}]"
            end
        }

        echo 'settings saved'
        $lootable=nil
    else
        echo 'closed without saving'
    end
}

$partialjarsack 	= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.partialjarsack}/}
$fulljarsack 		= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.fulljarsack}/}
$emptyjarsack 		= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.emptyjarsack}/}
$overflowsack		= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.overflowsack}/}
$gemsack			= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.gemsack}/}
$reagentsack		= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.reagentsack}/}
$lootsack			= GameObj.inv.find { |obj| obj.name =~ /#{UserVars.lootsack}/}
$jararray			= Array.new
$gemlist 			= Array.new
$gemcount 			= Array.new
$gem_filter			= script.vars[2]
$jarcount			= nil
$loc				= nil
$total				= nil

DeathListen = proc {
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if server_string =~ /Inside the|In the/
			$line = server_string
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_DeathListen", action)
}

before_dying { 
	DownstreamHook.remove("#{script.name}_DeathListen")
}

DeathListen.call

def empty_jar
	$emptyjarsack.contents.each { |obj|
		if obj.name =~ /jar|beaker|bottle/
		$jararray.push(obj.name)
		end
	}
end

def gem_sort
	empty_jar
	$gemsack.contents.each { |obj|
					if (obj.type =~ /gem/) 
                            put "Get ##{obj.id}"
							sleep 1
							gem_name = "#{obj.name}"
							gem_name_sorted = []
							gem_name.scan(/\w+/) {|w| gem_name_sorted.push "#{w}"}
							if gem_name_sorted.at(0) !~ /piece/ and gem_name_sorted.last !~ /pearl/
								rummage = dothistimeout "rummage in ##{$partialjarsack.id} ingredient #{obj.name}", 2, /remove an|seem to locate|remove a/
								sleep 3
								if rummage =~ /^You rummage .* containing .*/
									jar = GameObj.left_hand
								else
									var = $emptyjarsack.contents.find { |obj| obj.name =~ /#{$jararray[0]}/}
									newjar = dothistimeout "Get ##{var.id} from ##{$emptyjarsack.id}", 2, /^You remove|Get what/
									if newjar =~ /^You remove .*/
										jar = GameObj.left_hand
									else
										puts "Go buy more jars!"
										put "put ##{obj.id} in ##{$gemsack.id}"
										exit
									end
								sleep 3
								empty_jar
								end
							else
								gem_name = "#{gem_name_sorted.at(-2)} #{gem_name_sorted.at(-1)}"
								rummage = dothistimeout "rummage in ##{$partialjarsack.id} ingredient #{gem_name} ", 2, /remove an|seem to locate|remove a/
								sleep 3
								if rummage =~ /^You rummage .* containing .*/
									jar = GameObj.left_hand
								else
									var = $emptyjarsack.contents.find { |obj| obj.name =~ /#{$jararray[0]}/}
									newjar = dothistimeout "Get ##{var.id} from ##{$emptyjarsack.id}", 2, /^You remove|Get what/
									if newjar =~ /^You remove .*/
										jar = GameObj.left_hand
									else
										puts "Go buy more jars!"
										put "put ##{obj.id} in ##{$gemsack.id}"
										exit
									end
								sleep 3
								empty_jar
								end
							end
							
							result = dothistimeout "_drag ##{obj.id} ##{jar.id}", 3, /^You add|is full|does not appear to be a suitable container for/
                            if result =~ /^You add .* filling it/
                                result = dothistimeout "_drag ##{jar.id} ##{$fulljarsack.id}", 2, /^You put|won't fit/
								if result =~ /^You put/
								put "nod"
								else
									puts "Your full jar container is FULL.  Using your alternate container."
									result = dothistimeout "_drag ##{jar.id} ##{$overflowsack.id}", 2, /^You put|won't fit/
									if result =~ /^You put/
										puts "I suggest you empty your full container bag."
									else
										puts "Everything is full. Go make room!"
										puts "Putting the jar back in your #{$partialjarsack.name}"
										put "put ##{jar.id} in ##{$partialjarsack.id}"
										exit
									end
								end
                            elsif result =~ /is full/
								put "put ##{jar.id} in ##{$fulljarsack.id}"
								var = $emptyjarsack.contents.find { |obj| obj.name =~ /#{$jararray[0]}/}
								newjar = dothistimeout "Get ##{var.id} from ##{$emptyjarsack.id}", 2, /^You remove|Get what/
								if newjar =~ /^You remove .*/
									jar = GameObj.left_hand
									put "put ##{obj.id} in ##{jar.id}"
								else
									puts "Go buy more jars!"
									put "put ##{obj.id} in ##{$gemsack.id}"
									exit
								end
							empty_jar
							else
                                put "Put ##{jar.id} in ##{$partialjarsack.id}"
                            end
							sleep 0.5
					end
                }
end

def reg_sort
	empty_jar
	$reagentsack.contents.each { |obj|
                    if (obj.type =~ /reagent/) 
                            put "Get ##{obj.id}"
							sleep 1
							rummage = dothistimeout "rummage in ##{$partialjarsack.id} ingredient #{obj.name}", 2, /remove an|seem to locate|remove a/
							sleep 3
							if rummage =~ /^You rummage .* containing .*/
								jar = GameObj.left_hand
							else
								var = $emptyjarsack.contents.find { |obj| obj.name =~ /#{$jararray[0]}/}
								newjar = dothistimeout "Get ##{var.id} from ##{$emptyjarsack.id}", 2, /^You remove|Get what/
								if newjar =~ /^You remove .*/
									jar = GameObj.left_hand
								else
									puts "Go buy more jars!"
									put "put ##{obj.id} in ##{$reagentsack}"
									exit
								end
								sleep 3
							empty_jar
							end
							result = dothistimeout "_drag ##{obj.id} ##{jar.id}", 3, /^You add|is full|does not appear to be a suitable container for/
                            if result =~ /^You add .* filling it/
                                result = dothistimeout "_drag ##{jar.id} ##{$fulljarsack.id}", 2, /^You put|won't fit/
								if result =~ /^You put/
								put "nod"
								else
									puts "Your full jar container is FULL.  Using your alternate container."
									result = dothistimeout "_drag ##{jar.id} ##{$overflowsack.id}", 2, /^You put|won't fit/
									if result =~ /^You put/
										puts "I suggest you empty your full container bag."
									else
										puts "Everything is full. Go make room!"
										puts "Putting the jar back in your #{$partialjarsack.name}"
										put "put ##{jar.id} in ##{$partialjarsack.id}"
										exit
									end
								end
							elsif result =~ /is full/
								put "put ##{jar.id} in ##{$fulljarsack.id}"
								var = $emptyjarsack.contents.find { |obj| obj.name =~ /#{$jararray[0]}/}
								newjar = dothistimeout "Get ##{var.id} from ##{$emptyjarsack.id}", 2, /^You remove|Get what/
								if newjar =~ /^You remove .*/
									jar = GameObj.left_hand
									put "put ##{obj.id} in ##{jar.id}"
								else
									puts "Go buy more jars!"
									put "put ##{obj.id} in ##{$reagentsack.id}"
									exit
								end
							empty_jar
							else
                                put "Put ##{jar.id} in ##{$partialjarsack.id}"
                            end
							sleep 0.5
					end
                }
end

def sort_all
	$lootsack.contents.each { |obj|
		if obj.type =~ /gem/
			result = dothistimeout "_drag ##{obj.id} ##{$gemsack.id}", 2, /^You put|won't fit/
			if result =~ /won't fit/
				put "put ##{obj.id} in ##{$lootsack}"
				puts "Your gemsack is full"
				sleep 0.5
				exit
			end
		elsif obj.type =~ /reagent/ and $lootsack !=  $reagentsack
			result = dothistimeout "_drag ##{obj.id} ##{$reagentsack.id}", 2, /^You put|won't fit/
			if result =~ /won't fit/
				put "put ##{obj.id} in ##{$lootsack}"
				puts "Your reagentsack is full"
				sleep 0.5
				exit
			end
		end
	}
end

def count
	put "look in #{$gemsack}"
	sleep 1
	more_line = $line[/<.*>/]
	
	$gemsack.contents.each { |obj|
		if obj.type =~ /gem|reagent/
			$gemlist << obj.name
			$total += 1
		end
	}

	for gem in $gemlist.uniq
		count = $gemlist.count(gem)
		$gemcount << [gem, count, more_line]
	end

	GameObj.inv.each {|obj|
	obj.contents.each { |i|
						if (i.noun =~ /^(?:jar|bottle|beaker)$/)
							if i.after_name.nil?
								next
							else
								$jarcount += 1
								look_result = dothistimeout "look in ##{i.id}", 3, /^Inside .*? you see [0-9]+ portion/
								if look_result =~ /^Inside .*? you see ([0-9]+) portion/ then
									count = $1.to_i
									$loc = $line[/<.*>/]
								end
								name = i.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
								name = name.split(//)
								name.pop
								name = name.join
								listed = false
								for gem in $gemcount
									if gem[0].include?(name)
										gem[1] += count
										gem << $loc
										listed = true
										$total = $total + count
										break
									end
								end
								if listed == false
									$gemcount << [name, count, $loc]
									$total += count
								end
							end
						end
					}
	}

for gem in $gemcount
	if $gem_filter.nil?
		puts "#{gem[0].ljust(30)} #{gem[1]}           #{gem[2]}           #{gem[3]}"
	else
		if gem[0] =~ /#{$gem_filter}/ 
		puts "#{gem[0].ljust(30)} #{gem[1]}           #{gem[2]}           #{gem[3]}"
		end
	end
end

$gemcount.sort
output_jars = "*************************************\n"
output_jars.concat "         Total jars processed: #{$jarcount.to_s.center(4)} *\n"
output_jars.concat "         Total number of gems: #{$total.to_s.center(4)} *\n"
output_jars.concat "*************************************\n"

output = "          Gem                                 count                        location\n"
output.concat "          ---                                 -----                          ----\n"

respond output
respond output_jars
end

def move_item
	if $item_from =~ /all/
		container = $item_from
	else
		container = GameObj.inv.find { |cont| cont.name =~ /#{$item_from}/}
	end
	if container.nil?
		puts "No matching container.  Double check you typed the name of your container correctly.  i.e. backpack"
		exit
	elsif container =~ /all/
		destination = GameObj.inv.find { |cont| cont.name =~ /#{$item_to}/}
		GameObj.inv.each { |cont|
			if cont.id != destination.id
				cont.contents.each { |obj|
					if obj.type =~ /#{$item_move}/
						put "get ##{obj.id}"
						put "put ##{obj.id} in #{$item_to}"
						sleep 1.0
					end
				}
			end
		}
	else
		container.contents.each { |obj|
			if obj.type =~ /#{$item_move}/
				put "get ##{obj.id}"
				if $item_to =~ /drop|floor/
					put "drop ##{obj.id}"
				else
					put "put ##{obj.id} in #{$item_to}"
				end
				sleep 0.5
			end
		}
	end
end

if script.vars[1] =~  /gem/i
    put "stow all"
	sleep 0.5
	gem_sort
elsif script.vars[1] =~ /reagent/i
	put "stow all"
	sleep 0.5
    reg_sort
elsif script.vars[1] =~ /setup/i
	setup.call
elsif script.vars[1] =~ /sort/i
	put "stow all"
	sleep 0.5
	sort_all
elsif script.vars[1] =~ /count/i
	put "stow all"
	sleep 0.5
	count
elsif script.vars[1] =~ /move/i
	$item_move = script.vars[2]
	$item_from = script.vars[3]
	$item_to   = script.vars[4]
	put "stow all"
	sleep 0.5
	move_item
elsif	script.vars[1] =~ /help|info/
	respond
	respond 'Example:'
	respond "   #{$clean_lich_char}#{script.name} gem"
	respond
	respond "   ^^ This will sort your gems"
	respond
	respond "   #{$clean_lich_char}#{script.name} reagent"
	respond
	respond "   ^^ This will sort your reagents"
	respond
	respond " 	#{$clean_lich_char}#{script.name} sort"
	respond
	respond "   ^^ This will sort both gems and reagents"
	respond
	respond "   #{$clean_lich_char}#{script.name} count"
	respond
	respond "   ^^ This will count your gems in your containers"
	respond "   #{$clean_lich_char}#{script.name} move herb backpack drop"
	respond
	respond "   ^^ This will move the item type herb from your backpack to the floor."
	exit
else
	respond
	respond "You are doing it wrong!"
	respond
	respond 'Example:'
	respond "   #{$clean_lich_char}#{script.name} gem"
	respond
	respond "   ^^ This will sort your gems"
	respond
	respond "   #{$clean_lich_char}#{script.name} reagent"
	respond
	respond "   ^^ This will sort your reagents"
	respond
	respond " 	#{$clean_lich_char}#{script.name} sort"
	respond
	respond "   ^^ This will sort both gems and reagents"
	respond
	respond "   #{$clean_lich_char}#{script.name} count"
	respond
	respond "   ^^ This will count your gems in your containers"
	respond "   #{$clean_lich_char}#{script.name} move herb backpack drop"
	respond
	respond "   ^^ This will move the item type herb from your backpack to the floor."
	exit
end
