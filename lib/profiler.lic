# This is actually the first script I've written that really makes use of just how much info Lich makes available to scripts about your character & current state...  Anyway, since Lich tracks practically everything possible about your chars for use by scripts, this particular one calculates your projected character info at future levels without requiring you to do tedious stuff like telling it what profession and race you are.  This script knows the growth index values and uses them to tell you when your stats will next increase, what your stats will be at a given level that you ask about, etc. -- run it with the "help" command line argument for more info about usage.

if script.vars.find { |arg| arg =~ /^help$/i }
	respond %[If you don't give the script any arguments when you start it, it'll calculate when all of your stats will increase and display the results.  Optionally, you can provide any individual stats you want to check by entering at least the first 3 letters of the stat(s) -- see examples below -- or you can ask what your stats will be at a certain level (or levels plural) by entering a number.  You can check any combination and any amount, but if you ask for too much info the screen-scroll will be pretty ugly.  Also note that you can't check what your stats were at a level lower than you currently are (the script can only calculate future values, not ones for levels you've already gone beyond).]
	echo
	respond %[Examples:\r\n #{$clean_lich_char}profiler con dex strength agil     (would output when con, dex, str, and agi will increase)]
	respond %[ #{$clean_lich_char}profiler 100    (would output what your stats will be at level 100)]
	respond %[ #{$clean_lich_char}profiler 20 40 60 80 100 con dex    (will echo what your stats will be at levels 20, 40, 60, 80, and 100, and also when your con/dex stats will next increase]
	echo
	respond %[Please take note: if you see this script die because of an error, then the info I was able to find for how your given race and/or profession is sent by the game was probably wrong.  For instance, this script assumes the game calls a "Half-Elf" exactly that, a "Half-Elf".  If the game were to call the race a "Half Elf" then this script would cause an error instead of working properly, so if that happens with your race/prof, email me the error and a copy/paste of what the game says in your INFO output and I'll fix it.]
	exit
end

if Stats.level.zero?
	respond "Lich doesn't seem to have your character information... you should run `infomonitor.lic' and check your SKILLS and INFO output while it's running so that Lich will be aware of, and can provide this script with, your character data.  Note that the core Lich engine 'holds' this info for scripts, but the actual loading of saved data is done by the infomonitor script -- so even if you've saved your 'character sheet' in the past you'll need to at least briefly start infomonitor for it to be known this run of the program."
	exit
end

unless defined?(GI)
	GI = Struct.new(:con, :dex, :dis, :log, :int, :str, :agi, :inf, :wis, :aur)
end

# Setup the "table" of Growth Index values
gi_hash = {}
gi_hash['Bard'] = GI.new(20, 25, 15, 10, 15, 25, 20, 30, 20, 25)
gi_hash['Cleric'] = GI.new(20, 10, 25, 25, 25, 20, 15, 20, 30, 15)
gi_hash['Empath'] = GI.new(20, 15, 25, 25, 20, 10, 15, 25, 30, 20)
gi_hash['Paladin'] = GI.new(25, 20, 25, 10, 15, 30, 20, 20, 25, 15)
gi_hash['Ranger'] = GI.new(20, 30, 20, 15, 25, 25, 20, 10, 25, 15)
gi_hash['Rogue'] = GI.new(20, 25, 20, 20, 25, 25, 30, 15, 10, 15)
gi_hash['Sorcerer'] = GI.new(15, 20, 25, 25, 20, 10, 15, 20, 25, 30)
gi_hash['Warrior'] = GI.new(25, 25, 20, 10, 20, 30, 25, 20, 15, 15)
gi_hash['Wizard'] = GI.new(15, 25, 20, 25, 25, 10, 15, 20, 20, 30)

gi_hash['Dark Elf'] = GI.new(-2, 5, -2, 0, 0, 0, 5, 0, 0, 0)
gi_hash['Dwarf'] = GI.new(5, -3, 3, 0, 0, 5, -5, -2, 3, 0)
gi_hash['Elf'] = GI.new(-5, 5, -5, 0, 0, 0, 3, 3, 0, 5)
gi_hash['Giantman'] = GI.new(3, -2, 0, 0, 2, 5, -2, 0, 0, 0)
gi_hash['Half-Elf'] = GI.new(0, 2, -2, 0, 0, 2, 2, 2, 0, 0)
gi_hash['Halfling'] = GI.new(5, 5, -2, -2, 0, -5, 5, 0, 0, 0)
gi_hash['Human'] = GI.new(2, 0, 0, 0, 2, 2, 0, 0, 0, 0)
gi_hash['Sylvankind'] = GI.new(-2, 5, -5, 0, 0, -3, 5, 3, 0, 3)
gi_hash['Forest Gnome'] = GI.new(2, 2, 2, 0, 0, -3, 3, 0, 0, 0)
gi_hash['Burghal Gnome'] = GI.new(0, 3, -3, 5, 5, -5, 3, 0, 0, -2)
gi_hash['Half-Krolvin'] = GI.new(5, 2, 0, -2, 0, 3, 2, -2, 0, -2)
gi_hash['Erithian'] = GI.new(0, 0, 3, 2, 0, -2, 0, 3, 0, 0)
gi_hash['Aelotoi'] = GI.new(-2, 3, 2, 0, 2, 0, 3, -2, 0, 0)

userdone = false

lookup_gi = proc { |sym, lvl|
	stat_gi = (Stats.send(sym)[0] / (gi_hash[Stats.race].send(sym) + gi_hash[Stats.prof].send(sym))).round
	unless lvl then lvl = Stats.level end
	while lvl <= 100
		lvl += 1
		if (lvl % stat_gi).zero?
			break(lvl)
		end
	end
}

echo_stats_at_lvl = proc { |lvl|
	stats_at = {}
	for sym in [:con, :dex, :dis, :log, :int, :str, :agi, :inf, :wis, :aur]
		current = Stats.send(sym)[0]
		nxt = Stats.level
		while nxt < lvl
			nxt = lookup_gi.call(sym, nxt)
			if nxt < lvl then current += 1 end
		end
		stats_at[sym] = current
	end
	echo
	respond "Your stats at level #{lvl} will be:"
	stats_at.keys.sort_by { |symkey|
		symkey = symkey.to_s
		if symkey == 'con' then 1
		elsif symkey == 'dex' then 2
		elsif symkey == 'dis' then 3
		elsif symkey == 'log' then 4
		elsif symkey == 'int' then 5
		elsif symkey == 'str' then 6
		elsif symkey == 'agi' then 7
		elsif symkey == 'inf' then 8
		elsif symkey == 'wis' then 9
		elsif symkey == 'aur' then 10
		end
	}.each { |key|
		if stats_at[key] > 100 then stats_at[key] = 100 end
		respond "#{key.to_s.capitalize}: #{stats_at[key]}"
	}
}
for userinp in script.vars[1..-1]
	userdone = true
	if userinp =~ /\d+/
		if userinp.to_i > 100
			respond "The cap is level 100, you cannot train up to level #{userinp}; sorry."
		else	
			echo_stats_at_lvl.call(userinp.to_i)
		end
	elsif userinp =~ /\w+/
		unless sym = GI.members.find { |key| userinp =~ /#{key}/i }
			respond "Sorry, but I can't identify what `#{userinp}' refers to.  Try `#{$clean_lich_char}profiler help' for usage info."
			exit
		end
		lvl_up = lookup_gi.call(sym, nil)
		if Stats.send(sym)[0] >= 100
			respond "Your #{sym.to_s.capitalize} is already maxed."
		elsif lvl_up.nil?
			respond "You'll hit the cap (level 100) before your #{sym.to_s.capitalize} increases again."
		else
			respond "Your #{sym.to_s.capitalize} will increase when you reach level #{lvl_up}."
		end
	end
end

if userdone then exit end

respond "Your stats will next increase at these levels:\r\n"
for sym in [:con, :dex, :dis, :log, :int, :str, :agi, :inf, :wis, :aur]
	lvl_up = lookup_gi.call(sym, nil)
	if Stats.send(sym)[0] >= 100
		respond "#{sym.to_s.capitalize}: Already maxed."
	elsif lvl_up.nil?
		respond "#{sym.to_s.capitalize}: You'll cap (level 100) before this stat will increase again."
	else
		respond "#{sym.to_s.capitalize}: #{lvl_up}"
	end
end
