=begin
  Modified version of ;lte that will also attempt to use (in order):
  your ROL brooch, instant mind clears, and long-term exp boosts
  whenever you hit 100 mind. Uses the new field exp display to ensure
  you do not waste any exp with brooches or mind clears.

  Example:
    ;lte_smart

  For more usage info and optional settings:
    ;lte_smart help

  Required: Lich 4.3.12
  Author: Cinite
  Original ;lte author: Ondreian
  Tags:hunting, experience
=end

SAFE_BROOCH = CharSettings['safe_brooch'] || 750
DEBUG = false

if script.vars[0] =~ /help/i
	_respond "#{monsterbold_start}LTE (SMART!)#{monsterbold_end}"
	_respond "This script will clear your mind once you are fried"
	_respond "using (in order): ROL brooch, instant mind clears (boost absorb), LTE boosts"
	_respond "for brooch and mind clears it will check your current field experience to ensure"
	_respond "you do not waste any exp (ltes will just fire automatically once you are fried)"
	_respond ""
	_respond "usage:"
	_respond "You may skip to a specic action in the heirarchy by calling the script with that action"
	_respond ";lte_smart absorb - start boost abosrb, once out move on to LTE then exit once out of LTE"
	_respond ";lte_smart lte    - start at LTE, exit once you have none remaining"
	_respond ""
	_respond "defaults to 750 for the safe absorb amount for a brooch, you may change that by issuing:"
        _respond ";lte_smart safe-brooch"
	_respond ""
	_respond "this will analyze your brooch and save the amount to use on subsequent runs"
	_respond "current brooch setting: #{SAFE_BROOCH}"
	exit
elsif script.vars[0] =~ /safe-brooch/i
	brooch_line = dothistimeout("analyze my quintuple brooch", 3, /resulting in the ability to instantly absorb [0-9,]+ experience/)
	if brooch_line =~ /resulting in the ability to instantly absorb ([0-9,]+) experience/
		brooch_amt = $1.delete(",").to_i
		_respond "#{monsterbold_start}Setting your safe-brooch setting to #{brooch_amt}#{monsterbold_end}"
		CharSettings['safe_brooch'] = brooch_amt
	else
		_respond "Failed to detect your brooch amount."
	end
	exit
end

class EMPTY_HEAD
	def initialize(start_action = nil)
		@success_check = nil
		@fail_check = nil
		@success = nil
		@fail = nil
		@outcomes = nil
		@field_exp = nil
		@safe_exp = nil
		@clear_command = nil
		@clear_action = nil

		if start_action.nil? || start_action =~ /brooch|lumnis|rol/i
			brooch()
		elsif start_action =~ /absorb|clear/i
			absorb()
		elsif start_action =~ /lte|long|term/i
			lte()
		else
			_respond "Bad action to start, options are: brooch, absorb, lte"
			exit
		end
	end

	def field_exp_check()
		field_line = dothistimeout("experience", 3, /Field Exp: ([0-9,]+)\/[0-9,]+/)
		field_actual = field_line.match(/[0-9,]+\//).to_s.delete(',|/').to_i
		echo field_actual if DEBUG
		@field_exp = field_actual
	end

	def lte()
		@success  = /deducted/
		@fail     = /You do not have any/
		@outcomes = Regexp.union(@success, @fail)
		@clear_command = "boost longterm"
		@clear_action = "LTE"
		@safe_exp = false
	end
	
	def brooch()
		@success = /You have instantly absorbed/
		@fail = /ebbs weakly, but nothing further happens|What were you referring/
		@outcomes = Regexp.union(@success, @fail)
		@clear_command = "rub my quintuple brooch"
		@clear_action = "BROOCH"
		@safe_exp = SAFE_BROOCH
	end
	
	def absorb()
		@success = /You have instantly absorbed/
		@fail = /You do not have any Instant Mind Clearers to redeem/
		@outcomes = Regexp.union(@success, @fail)
		@clear_command = "boost absorb"
		@clear_action = "ABSORB"
		@safe_exp = 1000
	end
		
	def clear!
		waitrt?
		result = dothistimeout(@clear_command, 3, @outcomes)
		if result =~ @fail
			_respond "#{monsterbold_start}Your #{@clear_action} are used up!#{monsterbold_end}"
			if @clear_action == "BROOCH"
				absorb()
			elsif @clear_action == "ABSORB"
				lte()
			elsif @clear_action == "LTE"
				exit
			else
				echo "Not sure what action to take"
				exit
			end
		elsif result =~ @success
			@field_exp = nil
		end
	end

	def run!
		loop do
			if percentmind == 100 && @clear_action == "LTE"
				clear!
			elsif percentmind == 100
				if @field_exp.nil? || @field_exp < @safe_exp
					field_exp_check()
				end
				if @field_exp >= @safe_exp
					clear!
				end
			end
			sleep 5
		end
	end			
end

drainer = EMPTY_HEAD.new(script.vars[0])
drainer.run!
