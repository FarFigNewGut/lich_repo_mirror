### SETUP
=begin
This Script is meant to be used in SHATTERED!!!. If your using it in GS Prime or Plat then your a cheater. Delete your characters and come to Shattered. Its better here anyway.

You wil also need the companion script SHlooter.lic(this is just a bastardisation of Sloot.lic)

This script SHOULD take over the hassle of the Adventure Guild. It will request, remove, and turn in tasks based on your BigShot hunting settings. 
It will acceept Cull Creature, Dangerous Creature, LOOT Heirloom, Gem and Skinning tasks. It will remove tasks, including skinning tasks, for any creatures not in your target list.
If you enable use_boosts, it will burn through your loot boosts for gem tasks, as well as bounty boosts and expedite vouchers. 
ONCE SET UP CORRECTLY:
If you enable use_locker, it will check the deep chest in your locker for jars that contain the appropriate gems.
It will open your boxes after a hunt and horde gems in your locker based on previous gem tasks you have been given. 
It will learn the gems based on your location and will purge old gems when you run out of jars
It is currently setup for a premium subscription to use your locker.
You can limit the number of gem types it saves using ;shatventure locker limit [number]
You can use this script open and empty your boxes at the locksmith. I trashes food, clothing, junk, herb GameObj types. Use ;shatventure boxes
You can deposit gems in your locker whenever you find you have them using ;shatventure locker deposit

Please use ;shatventure locker setup for step by step instructions

COMMANDS
Make sure you have Shlooter.lic

;shatventure <--- To run script with default or preset settings

;shatventure boosts on|off 
	You will need to add ;shatventure burn to your Bigshot active hunting scripts or to a prehunt routine to burn loot boosts correctly
;shatventure locker on|off
	turns lockering feature on|off
;shatventure locker setup	
	locker setup walk-through
;shatventure locker limit [number]
	manual locker setup command
;shatventure locker jar_name [jar noun]
	manual locker setup command
;shatventure locker room [number]
	manual locker setup command
;shatventure premium yes|no
	will attempt to pay off debts each time you use your locker if on a non-premium account
;shatventure deposit
	deposits gems on hand into your locker - see the sample script on a suggested time to use it
;shatventure boxes
	runs to locksmith to open boxes - only trashes food,herbs,clothes, and junk as defined by your GameObj file
;shatventure remove 
	forces removal of current task
;shatventure wait on|off 
	turn on|wait shatventures ability to wait-out "next bounty" cooldowns when appropriate
;shatventure check 
	check to see if your current bounty is complete and forces bigshot to rest if it is- you have to write and active script that calls this at some interval for it to work.
;shatventure overhunt on|off
	forces shatventure to change bigshot resting exp to 101%- you will continue to hunt forever on dangerous creature tasks -- ONLY TO BE USED WITH ;shatventure check SCRIPT
	assumes your normal "should rest" mind is fried

--------------------
--------------------
POST-HUNT Sample


Script.run('heal_spellup')
sleep(1)
Script.run('shatventure','boxes')
sleep(1)
Script.run('shatventure','deposit')
sleep(1)
Script.run('shatventure')
sleep(1)
Script.run('shlooter','sell')
sleep(1)
Script.run('waggle')
exit
--------------------

originally released 11/4/2018
Version 1.28 6/3/20
---------------------
::Updates::
-added check to help from getting lost and fixed spelling errors
-fixed bad proc calls for go_place 
-cleared up some confusing wording on the info command
-fixed a looping issue in the bank
-fixed an issue with ;shat burn getting a nil value
-added locker functionality for non-premium accounts
-fixed locker room number to_s issue
-fixed npc issue when turning in heriloom task in RR
-fixed issue with previous fix
-fixed messaging issue with TI and LOOT hierloom tasks
-added ability to force remove a task from command line ;shat remove
-added cull task messaging fix for TI
-fixed issue with bounty boost not being recognized if boost was active before script was run
-added setting to choose weather to wait out bounty cooldown or kill the script
-fixed issue with turning in found hierloom not being found if container had not been looked in 
-fixed messaging issue with TI and culling tasks
-fixes some varible naming issues with non-premium account lockers and depositing gems
-added a manual remove feature and a check task completion feature
-fixed issue with extra spaces in BigShot targets interferring with valid target checking
-fixed another non-premium locker issue with withdrawing gems and added paying debts at clerk
-trying different approach to paying debts. got_debt proc added
-added over hunting option for dangerous creature tasks
-fixed issue with opening boxes when you have an item in your right hand
-adjusted deposit to check for gem tasks and pull gems for task if available
-added check for occupied locker
-added the ability to deposit all gems
-cleared up issue with WL guard not at post
-fixed issue with gemshop not seeing the 
-added snowfields as a location for the guard

---------------------

=end

### PRESETS


if UserVars.premium == nil
	UserVars.premium = true
end

if UserVars.shatventure.nil?
	UserVars.shatventure = Hash.new
	UserVars.shatventure["full_jars"]			= Array.new
	UserVars.shatventure["use_boosts"] 			= false
	UserVars.shatventure["use_locker"] 			= false
	UserVars.shatventure["skin_collection"]		= Array.new
	UserVars.shatventure["gem_horde_limit"]		= 80
	UserVars.shatventure["latest_gem"]			= 'Your Mom'
	UserVars.shatventure["locker_room"]			= '0000'
	UserVars.shatventure["jar_noun"]			= 'jar'
	UserVars.shatventure["wait_bounty"] 		= false
	UserVars.shatventure["overhunt"]			= false
	UserVars.gem_task_tracker				 	= Hash.new
end
if UserVars.shatventure["gem_horde"].nil?
	UserVars.shatventure["gem_horde"] = Array.new
	UserVars.shatventure["gem_horde"].push("uncut diamond")
end


### DECLARATIONS

use_boosts			= UserVars.shatventure["use_boosts"]
use_locker 			= UserVars.shatventure["use_locker"]
gem_horde			= UserVars.shatventure["gem_horde"]
gem_task_tracker	= UserVars.gem_task_tracker
gem_limit			= UserVars.shatventure["gem_horde_limit"].to_i
skin_collection		= UserVars.shatventure["skin_collection"]
@resting_room 		= UserVars.op["resting_room_id"].to_s
@locker_room		= UserVars.shatventure["locker_room"].to_s
rest_till_exp		= UserVars.op["rest_till_exp"].to_i
$debug 				= UserVars.debug
gem_sack			= UserVars.gemsack
valueable_sack		= UserVars.valuablesack
skin_sack			= UserVars.skinsack
jewelry_sack 		= UserVars.jewelrysack
latest_gem			= UserVars.shatventure["latest_gem"]
@jar				= UserVars.shatventure["jar_noun"]
wait_bounty			= UserVars.shatventure["wait_bounty"]
overhunt			= UserVars.shatventure["overhunt"]
overhunt_all		= UserVars.shatventure["overhunt"]
my_bounty			= nil
available_boosts 	= nil
target_item			= nil
boosted 			= false
on_person 			= Array.new
cant_expedite		= false
found_index			= nil
container			= nil
location 			= nil
portal 				= "opening"
deposit_all			= false



before_dying {UserVars.shatventure["latest_gem"] = latest_gem}

### PROCs and Blocks
determine_bounty = proc { 
	
	sleep(1)
	echo ":: determine_bounty -in- #{my_bounty}"
	echo checkbounty
	if checkbounty =~/creature problem/
		my_bounty = :creature_unk
	elsif checkbounty =~ /You have been tasked to hunt down and kill a particularly dangerous/
		my_bounty = :creature_dangerous
	elsif checkbounty =~/to suppress|cull their numbers/
		my_bounty = :creature_cull
	elsif checkbounty =~ /The local gem dealer/
		my_bounty = :gem_unk
	elsif checkbounty =~ /multiple customers requesting/
		my_bounty = :gem_known
	elsif checkbounty =~ /The local furrier/
		my_bounty = :skinning_unk
	elsif checkbounty =~ /You can SKIN them off the corpse/
		my_bounty = :skinning_known
	elsif checkbounty =~/tracking down some kind of lost heirloom/
		my_bounty = :heirloom_unk
	elsif checkbounty =~/SEARCH the area until you find it/
		my_bounty = :heirloom_search	
	elsif checkbounty =~/Hunt down the creature and LOOT|Hunt down the creature that attacked .*, retrieve the heirloom/
		my_bounty = :heirloom_loot
	elsif checkbounty =~/and should bring it back/
		my_bounty = :heirloom_found
	elsif checkbounty =~/You are not currently assigned a task./
		fput "bounty"
		message = waitfor "You are not currently assigned a task."
		if message =~/You will be eligible for new task assignment in/
			my_bounty = :wait_bounty
		elsif Spell[9003].active?
			my_bounty = :wait_bounty
		else
			my_bounty = :no_bounty
		end
	elsif checkbounty =~ /You have succeeded/
		my_bounty = :success_no_checkin
	elsif checkbounty =~ /You succeeded in your task and should report back/
		my_bounty = :success_checkin
	else 
		my_bounty = :unwanted
	end
	if saturated? && (my_bounty != :gem_unk && my_bounty != :skinning_unk && my_bounty != :creature_unk)
		my_bounty = :saturated
	end
	if $debug then echo "determine_bounty -out-:: #{my_bounty}" end
}

determine_boosts= proc {
	available_boosts = Hash.new
	if !use_boosts 
		next
	end
	waitrt?
	
	fput "boost info"
	loot_minor = matchtimeout  5,"Minor Loot Boosts:"
	loot_major = matchtimeout  5,"Major Loot Boosts:"
	bounty_boost = matchtimeout 5,"Bounty Boosts:"
	fput "bounty"
	bounty_expedite = matchfind "You have ? expedited task reassignment vouchers remaining."
	echo "determine_boosts :: "
	if loot_minor =~ /Minor Loot Boosts:\s*(.*)/
		available_boosts["loot_minor"] = $1.to_i
	end
	if loot_major =~ /Major Loot Boosts:\s*(.*)/
		available_boosts["loot_major"] = $1.to_i
	end
	if bounty_boost =~ /Bounty Boosts:\s*(.*)/
		available_boosts["bounty_boost"] = $1.to_i
	end
	if bounty_expedite.to_i > 0
		available_boosts["bounty_expedite"] = bounty_expedite.to_i
	end
	if $debug then echo "determine_boosts :: #{available_boosts}" end
}		

determine_location = proc {
	fput "location"
	success = waitfor "You carefully survey your surroundings"
	if success =~ /You carefully survey your surroundings and guess that your current location is (.*) or somewhere close to it./
		location = $1
	end
	if location =~ /Ta'Illistim|Icemule/
		portal = "curtain"
	else 
		portal = "opening"
	end
	
}

go_place = proc { |place|
	if $debug then echo "go_place :: #{place}" end
	if Script.running?('go2')
		Script.kill('go2')
	end
	if Room.current.tags.include?(place) || Room.current.id.to_s == place
		next
	end
	Script.run('go2',place)
	if !Room.current.tags.include?(place) && !Room.current.id.to_s == place
		echo "oh crap.. i got lost. my bad"
		exit
	end
}

ask_npc = proc {
	if $debug then echo "ask_npc :: " end
	determine_location.call
	if my_bounty == :gem_unk || my_bounty == :skinning_unk
		npc = checknpcs[-1]
  elsif
    location =~ /Landing/ && !checknpcs.include?("guard")
		go_place.call("3809")
    npc = "guard"
	else
		if location =~ /Landing|Trace|snowfields|Solhaven|Zul Logoth|Ta'Vaalor|Ta'Illistim|Dragonsclaw|Vornavis/
		npc = "guard"
		elsif location =~ /Rest/
			npc = "purser"
		elsif location =~ /Kharam-Dzu/
			npc = "sergeant"
		end
	end
	fput "ask #{npc} about bounty"
	success = waitfor "Who are you trying to ask?","Adventurer's Guild?"
	if success =~ /Who are you trying/
		go_place.call('advguard2')
		ask_npc.call
	end
	sleep(1)
}

remove_task = proc {
	if $debug then echo "remove_task :: " end
	go_place.call("advguild")
	multifput "ask task about rem","ask task about rem"
}

check_person = proc { |type|
	
	if type == :gem
		if checkbounty =~ /requesting (a|an|some) (.*?)\. .* retrieve ([0-9]+) (?:more )?of them\./	
			item_container = gem_sack
			if $1 == "some"
				target_item = $1 +' '+ $2
			else
				target_item = $2
			end
			if !gem_horde.include?(target_item) 
				gem_horde.unshift(target_item) 
			else
				found_index = gem_horde.index(target_item)
				if found_index != 0 
					gem_horde.delete_at(found_index)
					gem_horde.unshift(target_item)
				end
			end
			if gem_task_tracker[target_item] && latest_gem != target_item
				gem_task_tracker[target_item] += 1
			elsif !gem_task_tracker[target_item]
				gem_task_tracker[target_item] = 1
			end
			latest_gem = target_item
			target_number 	= $3.to_i
		end
	elsif type == :skin
		item_container = skin_sack
		if checkbounty =~ /retrieve (\d+) (.*) of at least .* corpse of/
			target_item = $2
			number = $1.to_i
			if target_item[-1] == 's'
				target_item = target_item.chomp('s')
			end
			if !skin_collection.include?(target_item)
				skin_collection.push(target_item)
			end
		end
	end
	on_person = GameObj[item_container].contents.find_all{ |i| i.name.include?(target_item)}
	if $debug then echo "check_person :: " end
}

sell_items = proc { |type|
	item_to_sell = Array.new
	if type == :gem
		container = gem_sack
	elsif type == :skin
		container = skin_sack
	end
	
	if $debug then echo "sell_items :: " end
	item_to_sell = GameObj[container].contents.find_all{ |thing| thing.name.include?(target_item)}
	item_to_sell.each { |item|
		dothistimeout "get ##{item.id}", 3, /^You remove/
		dothistimeout "sell ##{item.id}", 5, /ask|offer/
		if checkbounty =~ /succeeded/
			break
		end
	}
}

burn_boost = proc { |loot_bounty|
if $debug then echo "burn_boost :: " end

	fput "spell active"
	active_boost = matchtimeout 5, "Bounty Boost .."
	if active_boost
		boosted = true
		next
	end
	if saturated? || fried?
		echo " burn boosts :: saturated "
		my_bounty = :saturated
		next
	end
	
	if loot_bounty == :loot
		if available_boosts["loot_major"] > 0
			$burn_loot_boost = :major
		elsif available_boosts["loot_minor"] > 0
			$burn_loot_boost = :minor
		else
			respond " SHATVENTURE TASKS :: No More Loot Boosts " 
		end
	elsif loot_bounty == :bounty
		if available_boosts["bounty_boost"] > 0
			go_place.call("advguild")
			fput "boost bounty"
			sleep(6)
			available_boosts["bounty_boost"] -= 1
			boosted = true
		elsif available_boosts["bounty_expedite"] > 0
			go_place.call("advguild")
			fput "ask task about expedite"
			cant_expedite = matchtimeout 5,"I can't expedite this task reassignment"
			if cant_expedite
				boosted = false
				next
			else
				available_boosts["bounty_expedite"] -= 1
				boosted = true
			end
		else
			respond " SHATVENTURE TASKS :: No More Bounty Boosts " 
			boosted = false
		end
	end
} 

turn_in_heirloom = proc {
	heirloom = nil
	if $debug then echo "turn_in_heirloom :: " end
	if checkbounty =~ /You have located (?:a|an|some) (.*) and should bring it back/
		found_heirloom = $1
	end
	GameObj.inv.each {|inv_obj|
	fput "look  in #{inv_obj}"
	heirloom = inv_obj.contents.find{ |z| z.name.include?(found_heirloom)}
	if heirloom != nil
		fput "get ##{heirloom.id}"
		break
	end
}	
	determine_location.call
	if location =~ /Landing|Trace|Solhaven|Zul Logoth|Ta'Vaalor|Ta'Illistim|Dragonsclaw|Vornavis/
		npc = "guard"
	elsif location =~ /Rest/
		npc = "purser"
	elsif location =~ /Kharam-Dzu/
		npc = "sergeant"
	end
	dothistimeout "give ##{heirloom.id} to #{npc}",5,/"Excellent.  I'm sure the person who lost this will be quite happy/
}

request_bounty = proc {
	if $debug then echo "request_bounty :: " end
	go_place.call("advguild")
	sleep(1)
	fput "ask task about bounty"
	success = matchtimeout 5, "I've got a task here from","but I don't seem to have any tasks that are suitable for you."
	if success =~ / but I don't seem to have any tasks that are suitable for you./
		echo "No tasks for your level, switch towns"
		exit
	end
}

build_exclude_string = proc { 
	skin_collection.first(5)
	exclude = Hash.new
	exclude_string = ''
	skin_collection.each { |skin|
		skin_split = skin.split(' ')
		noun = skin_split.pop
		descriptor = skin_split.join(' ')
		if !exclude[noun]
			exclude[noun] = descriptor 
		elsif exclude[noun][0,1] == "("
			exclude[noun] = exclude[noun].chomp(')')
			exclude[noun] = exclude[noun] + '|' + descriptor + ')'
		else
			exclude[noun] = '(?:' + exclude[noun] + '|' + descriptor + ')'
		end
	}
	exclude.each { |noun,descriptor|	
	
		exclude_string = exclude_string + descriptor + ' ' + noun + '|'	
		}
	UserVars.exclude_string = exclude_string.chomp('|')
}	

hit_bank = proc { |amount|
	go_place.call('bank')
	sleep 1
	dothis "deposit all",/You have no coins|You hand your silvers|You deposit/
	if amount > 0
		success = dothistimeout "withdraw #{amount} silver", 5 , /a withdrawal of .* silvers.|and then hands/
		if success == nil	
			echo "Stop being poor!"
			exit
		end
	end
	go_place.call('locksmith')
}

def valid_creature 
	valid_creatures_list = Array.new
	if $debug then echo "check_creature :: " end
	valid_creatures_list = UserVars.op["targets"].split(',')
	valid_creatures_list.each { |creature|
		index = valid_creatures_list.index(creature)
		creature.match(/\s*([a-zA-Z]*).*/) 
		valid_creatures_list[index] = $1
	}
	if $debug then echo valid_creatures_list end
	valid_creatures_list.each { |creature|
		if checkbounty =~ /#{creature}/
			if $debug then echo creature end
			return true
		end
	}
	return false
end

got_debt = proc {
	fput "wealth"
	debt = matchtimeout 5 , /In the back of your mind you remember you owe a debt/
	if debt =~ /you owe a debt/
		hit_bank.call(2000)
		go_place.call('clerk')
		fput "pay 2000"
	end
}
	
	

setup_locker = proc {
	if $debug then echo "setup_locker :: " end
	respond "You need to decide how many locker slots you want to spend on gem jars"
	respond ";shatventure locker limit #"
	respond "nod to continue"
	waitfor "You nod."
	go_place.call('bank')
	respond "You will need jars and they cost money. Withdraw some money. I think the alchemist sell 20 count jars for 1100 silvers"
	respond "nod when you have the money in hand"
	waitfor "You nod."
	go_place.call('alchemist')
	respond "This is where you buy jars if you dont have any from EG or DR or wherever"
	respond "nod when you have the same amount of jars as your limit"
	waitfor "You nod."
	go_place.call('town')
	respond "Go to where your locker is and stand outside the opening"
	respond "I suggest that you not choose the first one since it is the most likely to be occupied"
	respond "nod when you are there"
	waitfor "You nod."
	UserVars.shatventure["locker_room"]	= Room.current.id.to_s
	determine_location.call
	move "go #{portal}"
	fput "open locker"
	respond "Empty Jars go in the Magical Items Bin(if premium) or just in your locker"
	respond "The script will move them to the Deep Chest(if premium) as it fills them"
	respond "Thats it for setup"
	respond "nod to turn on the locker_use setting or kill the script to leave it off for now"
	waitfor "You nod."
	UserVars.shatventure["use_locker"]	= true
}
	


locker_deposit = proc {

	if $debug then echo "locker_deposit :: " end
	horde_list 		= UserVars.shatventure['gem_horde']
	
	counter			= 0
	wanted_amount	= 0
	found 			= 0
	wanted_item 	= nil
	gem_count		= 0
	
	if Room.current.id == "20239"
		move out
	end
	start_room		= Room.current.id.to_s
	fput "look in my #{UserVars.gemsack}"
		sleep(1)
		gems_on_hand = GameObj[UserVars.gemsack].contents.find_all { |thing| thing.type =~ /gem|valuable/}
		if gems_on_hand.length == 0 
			echo "No gems"
			exit
		end
		gems_on_hand.each { |gem|
			if gem.name.include?('pearl')
				split_name = gem.name.split(' ')
				gem.name = split_name[-2]+ " " + split_name[-1]
			elsif gem.name.include?('piece of')
				split_name = gem.name.split('piece of ')
				gem.name = split_name[-1]
			elsif gem.name.include?('crown-of-Charl')
				gem.name = 'crown-of- shell'
			end
			if !horde_list.include?(gem.name) && !deposit_all && !UserVars.shatventure["full_jars"].include?(gem.name)
				next
			else 
				gem_count += 1
			end
		}
		if gem_count == 0 
			echo "No Gems to deposit"
			go_place.call(@resting_room)
			exit
		end
		if !UserVars.premium 
			got_debt.call
		end
		fput "stow all"
		echo @locker_room
		go_place.call(@locker_room)
		determine_location.call
		wait_room = Room.current.id
		while Room.current.id == wait_room
			fput "go #{portal}"
			debts = matchtimeout 1,/You heard the clerk!  Pay off that debt first./
			if debts =~ /You heard the clerk!  Pay off that debt first./
				UserVars.premium = false
				got_debt.call
			end
			if Room.current.id == wait_room	
				sleep 20
			end
		end
		fput "open locker"
		sleep(2)
		gems_on_hand.each { |gem|
			if gem.name.include?('pearl')
				split_name = gem.name.split(' ')
				gem.name = split_name[-2]+ " " + split_name[-1]
			elsif gem.name.include?('piece of')
				split_name = gem.name.split('piece of ')
				gem.name = split_name[-1]
			end
			if !horde_list.include?(gem.name) && !deposit_all
				next
			end
			if 	UserVars.shatventure["full_jars"].include?(gem.name)
				next
			end
			fput"get ##{gem.id}"
			sleep(0.3)
			premium_chest = GameObj.loot.find{ |i| i.name == "deep chest"}
			if premium_chest
				fput"rummage in chest ingredient #{gem.name}"
				sleep(0.5)
				if lefthand == "#{@jar}"
					fput "put ##{gem.id} in my #{UserVars.shatventure["jar_noun"]}"
					jarred = matchtimeout 2, /You add|suitable container|full/
					sleep(0.3)
					if jarred =~ /full/
						UserVars.shatventure["full_jars"].push(gem.name)
						fput "put my #{UserVars.shatventure["jar_noun"]} in chest"
						fput "put ##{gem.id} in #{UserVars.gemsack}"
					elsif jarred =~ /suitable container/
						UserVars.shatventure['shitty_gems'].push(GameObj.right_hand.name)
						fput "put my #{UserVars.shatventure["jar_noun"]} in bin"
						fput "put ##{gem.id} in #{UserVars.gemsack}"
					elsif jarred =~/You add/
						fput "put #{UserVars.shatventure["jar_noun"]} in chest"
					else 
						echo "SOMETHING WENT WRONG -- locker deposit"
						exit
					end		
				else
					fput "get jar from bin"
					sleep(0.5)
					if lefthand == "#{@jar}"	
						fput "put ##{gem.id} in my #{UserVars.shatventure["jar_noun"]}"
						jarred = matchtimeout 2, /You put|suitable container/
						sleep(0.3)
						if jarred =~ /into your empty jar./
							fput "put my #{UserVars.shatventure["jar_noun"]} in chest"
						elsif jarred =~ /suitable container/
							UserVars.shatventure['shitty_gems'].push(GameObj.right_hand.name)
							fput "put my #{UserVars.shatventure["jar_noun"]} in bin"
							fput "put ##{gem.id} in #{UserVars.gemsack}"
						else 
							echo "SOMETHING WENT WRONG -- locker deposit"
							exit
						end
						
					else	
						echo "NO MORE JARS"
						sleep(0.3)
						fput "put ##{gem.id} in my #{UserVars.gemsack}"
					end
					
				end
			else
				fput"rummage in locker ingredient #{gem.name}"
				sleep(0.5)
				if lefthand == "#{@jar}"
					multifput "put ##{gem.id} in my #{UserVars.shatventure["jar_noun"]}","put #{UserVars.shatventure["jar_noun"]} in locker"
					if righthand 
						fput "put ##{gem.id} in #{UserVars.gemsack}"
						UserVars.shatventure["full_jars"].push(gem.name)
					end
				else
					multifput "look on counter","look in locker"
					standard_counter = GameObj.room_desc.find{|x| x.noun == "counter"}
					standard_locker = standard_counter.contents.find{|l|l.noun == "locker"}
					standard_jars = standard_locker.contents.find_all{ |j| j.noun ==@jar}
					standard_jars.each { |jar|
						echo jar.name
						fput "look in ##{jar.id} in locker"
						empty = waitfor "Inside the","is empty.","I could not find what"
						if empty =~ /is empty./
							fput "get ##{jar.id} from locker"
							break
						end
					}
					sleep(0.5)
					if lefthand == "#{@jar}"	
						multifput "put ##{gem.id} in my #{UserVars.shatventure["jar_noun"]}","put #{UserVars.shatventure["jar_noun"]} in locker"
						if righthand
							echo "Gem wont go in jar for some reason. Some shells wont fit in jars.."
							fput "put #{@jar} in locker"
							fput "put ##{gem.id} in my #{UserVars.gemsack}"
							UserVars.shatventure["full_jars"].push(gem.name)
						end
					else	
						echo "NO MORE JARS"
						sleep(0.3)
						fput "put ##{gem.id} in my #{UserVars.gemsack}"
					end
				end
			end
		}
		if script.vars[2].downcase != "only"
			determine_bounty.call
			if my_bounty == :gem_known
				check_person.call(:gem)
				##locker_withdraw.call
			end
		end
		fput "close locker"
		move "go #{portal}"
		go_place.call(start_room)
		if Room.current.id.to_s != start_room
			go_place.call(start_room)
		end
		go_place.call(@resting_room)
}

locker_withdraw = proc {
	wanted_amount = nil
	counter = 0
	if $debug then echo "locker_withdraw :: " end
	gem_sack = UserVars.gemsack
	if checkbounty =~ /requesting (a|an|some) (.*?)\. .* retrieve ([0-9]+) (?:more )?of them\./	
			if $1 == "some"
				wanted_item = $1 +' '+ $2
			else
				wanted_item = $2
			end
	end
	wanted_amount = $3.to_i
	multifput "stow left","stow right"
	move out
	start_room	= Room.current.id.to_s
	if !UserVars.premium 
			got_debt.call
		end
	go_place.call(@locker_room)
	determine_location.call
	wait_room = Room.current.id
	while Room.current.id == wait_room
		fput "go #{portal}"
		if Room.current.id == wait_room	
			echo "Locker occupied, Waiting 20 seconds"
			sleep 20
		end
	end
	fput "open locker"
	sleep(0.5)
	premium_chest = GameObj.loot.find{ |i| i.name == "deep chest"}
	if premium_chest
		fput "rummage in chest ingredient #{wanted_item}"
	else	
		fput "rummage in locker ingredient #{wanted_item}"
	end
		sleep(0.5)
		if righthand == "#{@jar}"
			while counter < wanted_amount
				fput "shake my #{UserVars.shatventure["jar_noun"]}"
				UserVars.shatventure["full_jars"].delete(wanted_item)
				sleep(0.5)
				if lefthand.nil?
					echo "Short on gems"
					if premium_chest
						fput "put #{UserVars.shatventure["jar_noun"]} in bin"
					else	
						fput "put #{UserVars.shatventure["jar_noun"]} in locker"
					end
					break
				else	
					fput "put left in #{gem_sack}"
					counter += 1
				end
				sleep(0.3)
			end
			fput "look in my #{UserVars.shatventure["jar_noun"]}"
			empty = matchtimeout 5, "is empty.","you see"," could not find what you were referring to."
			if empty =~ /is empty/ && premium_chest
				fput "put #{UserVars.shatventure["jar_noun"]} in bin"
			elsif empty =~ /is empty/
				fput "put #{UserVars.shatventure["jar_noun"]} in locker"
			elsif empty =~ /you see/
				fput "put right in chest"
			end
		end
	fput "close locker"
	move "go #{portal}"
	if counter > 0
		until Room.current.id.to_s == start_room
			go_place.call(start_room)
		end
		go_place.call('gemshop')
		sell_item = GameObj[UserVars.gemsack].contents.find_all { |thing| thing.name.include?(wanted_item)}
		sell_item.each { |gem|
			multifput"get ##{gem.id}","sell ##{gem.id}"
		}
		hit_bank.call(0)
	end
	until Room.current.id.to_s == start_room
		go_place.call(start_room)
	end
	go_place.call(@resting_room)
}

open_boxes = proc {
	if $debug then echo "open_boxes :: " end
	current_room = Room.current.id.to_s
	boxes = GameObj[UserVars.boxsack].contents.find_all{ |thing| thing.type.include?('box')}
	overflow_boxes = GameObj[UserVars.overflowsack].contents.find_all{ |thing| thing.type.include?('box')}
	overflow_boxes.each { |z| 
		boxes.push(z)
	}
	if boxes.length == 0
		echo "No Boxes in Inventory"
		exit
	else 
		empty_hands
	end
	hit_bank.call(10000)
	sleep(1)
	counter = GameObj.room_desc.find{ |x| x.name =~ /counter/ }
	if counter == nil
		counter = GameObj.loot.find{ |x| x.name =~ /counter/ }
	end
	fput "look on ##{counter.id}"
	sleep(1)
	bell = counter.contents.find{ |x| x.name =~ /bell|keys/ }
	trash = GameObj.room_desc.find{ |x| x.name =~ /crate|barrel|casket/ }
	if trash == nil
		trash = GameObj.loot.find{ |x| x.name =~ /crate|barrel|casket/ }
	end

	boxes.each { |locked_box|
		empty_hands
		multifput "get ##{locked_box.id}"
		sleep (0.5)
		if bell == nil
			fput "look on ##{counter.id}"
			bell = counter.contents.find{ |x| x.name =~ /bell|keys/ }
		end
		if bell.noun =~ /keys/
			dothis "pull ##{bell.id}",/You pull the keys|until you pay him!|causing an enormous racket!/
		elsif bell.noun =~ /bell/
			fput "ring ##{bell.id}"
		end
		success = dothistimeout "pay" ,5, /accepts your silvers.|But you don't have enough!/
		if success =~ /But you don't have enough!/
			multifput "get ##{locked_box.id}","stow ##{locked_box.id}"
			hit_bank.call(10000)
			redo if success
		end	
		fput "get ##{locked_box.id}"
		fput "open ##{locked_box.id}"
		fput "look in ##{locked_box.id}"
		fput "get coins from ##{locked_box.id}"
		sleep(0.3)
		waitrt?
		contents = GameObj[locked_box.id.to_s].contents
		contents.each { |thing|
			if thing.type =~ /food|herb|junk|clothing/
				next
			elsif thing.type =~ /gem/
				fput "get ##{thing.id}"
				fput "put ##{thing.id} in #{gem_sack}"
			else
				fput "get ##{thing.id}"
				fput "stow ##{thing.id}"
			end
			sleep(0.3)
		}
		if trash == nil 
			fput "drop ##{locked_box.id}"
		else
			fput "put ##{locked_box.id} in ##{trash.id}"
		end
		success = matchtimeout 3, "There appears to be","you feel pleased"
		if success =~ /There appears to be/
			fput "put ##{locked_box.id} in ##{trash.id}"
		end
		
	}
	sleep(1)
	hit_bank.call(0)
	go_place.call(current_room)
}

### MAIN

if script.vars[1].downcase == "debug"
	if UserVars.debug == true
		UserVars.debug = false
		echo "debug off"
	elsif UserVars.debug == false || UserVars.debug == nil
		UserVars.debug = true
		echo "debug on"
	end
	exit
elsif script.vars[1].downcase == "boosts"
	if script.vars[2].downcase == "on"
		UserVars.shatventure["use_boosts"] 	= true
		echo "boosts on"
		exit
	elsif script.vars[2].downcase == "off"
		UserVars.shatventure["use_boosts"] 	= false
		echo "boosts off"
		exit
	end
elsif script.vars[1].downcase == "locker"
	if script.vars[2].downcase == "setup"
		setup_locker.call
		exit
	elsif script.vars[2].downcase == "on"
		UserVars.shatventure["use_locker"] 	= true
		exit
	elsif script.vars[2].downcase == "off"
		UserVars.shatventure["use_locker"] 	= false
		exit
	elsif script.vars[2].downcase == "limit"
		if script.vars[3] == nil
			echo "supply a limit for your horde"
			exit
		end
		UserVars.shatventure["gem_horde_limit"] = script.vars[3]
		exit
	elsif script.vars[2].downcase == "jar_name"
		if script.vars[3] == nil
			echo "supply the noun of your jars"
			exit
		end
		UserVars.shatventure["jar_noun"] 	= script.vars[3]
		exit
	elsif script.vars[2].downcase == "room"
		if script.vars[3] == nil
			echo "supply a room number you nub"
			exit
		end
		UserVars.shatventure["locker_room"] = script.vars[3]
		exit
	else 
		echo "invalid locker option:: try on/off/limit {#}/jat_name {noun}/room {#}"
	end
elsif script.vars[1].downcase == "boxes"
	open_boxes.call
	exit
elsif script.vars[1].downcase == "deposit"
	if script.vars[2].downcase == "all"
		deposit_all = true
	end
	locker_deposit.call
	exit
elsif script.vars[1].downcase == "premium"
	if script.vars[2].downcase == "no"
		UserVars.premium = false
		exit
	elsif script.vars[2].downcase == "yes"
		UserVars.premium = true
		exit
	else 
		echo "UNRECOGNIZED COMMANDS. Use ;shat premium yes|no"
	end
elsif script.vars[1].downcase == "remove"
	go_place.call("advguild")
	remove_task.call
	exit
elsif script.vars[1].downcase == "burn"
	waitrt?
	if $burn_loot_boost == :major
		dothis "boost loot major",/You have activated a Major Loot Boost.|You do not have any/
	elsif $burn_loot_boost == :minor
		dothis "boost loot minor",/You have activated a Minor Loot Boost.|You do not have any/
	end
	$burn_loot_boost = nil
	exit	
elsif script.vars[1].downcase == "wait"
	if script.vars[2].downcase == "off"
		echo "no longer waiting out -next bounty- cooldowns"
		UserVars.shatventure["wait_bounty"] = false
		exit
	elsif script.vars[2].downcase == "on"
		UserVars.shatventure["wait_bounty"] 	= true
		echo "waiting out -next bounty- cooldowns again"
		exit
	else
		echo "Use ;shatventure wait on|off"
		exit
	end
elsif script.vars[1].downcase == "overhunt"
	if script.vars[2].downcase == "off"
		UserVars.shatventure["overhunt"] = false
		UserVars.shatventure["overhunt_all"] = false
		echo "you no longer hunt until you complete your dangerous creature tasks"
		exit
	elsif script.vars[2].downcase == "on"
		UserVars.shatventure["overhunt"] = true
		echo "you will now hunt until you complete your dangerous creature tasks"
		echo "you really need to be using the ;shatventure check command within an active hunting script every minute or so for this to be useful"
		exit
	elsif script.vars[2].downcase == "all"
		UserVars.shatventure["overhunt"] = true
		UserVars.shatventure["overhunt_all"] = true
		echo "you will now hunt until you complete your dangerous creature, cull, and heirloom tasks"
		exit
	else
		echo "Use ;shatventure overhunt on|off"
		exit
	end
elsif script.vars[1].downcase =~ /help|info/
	respond " ","Open the script and check the comments for a sample reccomended post-huntig script"
	respond " ",";shatventure <--- To run script with default or preset settings"
	respond	" ","         COMMANDS",";shatventure boosts on|off","     	You will need to add ;shatventure burn to your Bigshot active hunting scripts or to a prehunt routine to burn loot boosts correctly",";shatventure locker on|off",";shatventure locker setup",";shatventure locker limit [number]",";shatventure locker jar_name [jar noun]",";shatventure deposit",";shatventure deposit all", "shatventure boxes",";shatventure remove",";shatventure wait on|off",";shatventure help",";shatventure overhunt on|off"
	exit	
elsif script.vars[1].downcase =~ /check/
	toggle_echo
	echo "Checking bounty status"
	determine_bounty.call
	if my_bounty == :heirloom_found||my_bounty == :success_checkin||my_bounty == :success_no_checkin
		
		$bigshot_should_rest = true
		$rest_reason = "bounty complete"
		
	end
	if my_bounty == :no_bounty && !Spell.active?('9003')
		$bigshot_should_rest = true
		$rest_reason = "ready for new bounty"
	end
	toggle_echo
	exit
elsif script.vars[1]
	echo "INVALID shatventure Command - reference ;shatventure info"
	exit
end

determine_boosts.call
build_exclude_string.call
empty_hands
loop do
	determine_bounty.call
	if (overhunt && my_bounty == :creature_dangerous) || overhunt_all
		UserVars.op["fried"] = "101"
	else
		UserVars.op["fried"] = "100"
	end
	if my_bounty == :creature_unk
		go_place.call("advguard")
		ask_npc.call
	elsif my_bounty == :creature_dangerous
		if valid_creature
			go_place.call(@resting_room)
			respond ":: SHATVENTURE TASKS :: Still looking for that dangerous creature"
			exit
		else 
			go_place.call("advguild")
			remove_task.call
		end
	elsif my_bounty == :creature_cull
		if valid_creature
			go_place.call(@resting_room)
			respond ":: SHATVENTURE TASKS :: Still looking for more creatures to murder"
			exit
		else 
			remove_task.call
		end
	elsif my_bounty == :gem_unk
	echo ":gem_unk"
		go_place.call("gemshop")
		ask_npc.call
	elsif my_bounty == :gem_known
	echo ":gem_known"
		check_person.call(:gem)
		if use_locker && gem_horde.include?(target_item)
			locker_withdraw.call
		end
		determine_bounty.call
		if my_bounty == :gem_known
			go_place.call(@resting_room)
			respond ":: SHATVENTURE TASKS :: Still looking for more #{target_item}s"
			burn_boost.call(:loot)
			exit
		end
	elsif my_bounty == :skinning_unk
	echo ":skinning_unk"
		go_place.call("furrier")
		ask_npc.call
	elsif my_bounty == :skinning_known
	echo ":skinning_known:"
		if valid_creature
			check_person.call(:skin)
			if on_person.length > 0
				go_place.call("furrier")
				sell_items.call(:skin)
        hit_bank.call(0)
			else
				go_place.call(@resting_room)
				respond ":: SHATVENTURE TASKS :: Still looking for more #{target_item}s"
				exit
			end
		else 
			go_place.call("advguild")
			remove_task.call
		end
	elsif my_bounty == :heirloom_unk
	echo ":heirloom_unk"
		go_place.call("advguard")
		ask_npc.call
	elsif my_bounty == :heirloom_search	
	echo ":heirloom_search"
		remove_task.call
	elsif my_bounty == :heirloom_loot
	echo ":heirloom_loot"
		if valid_creature
			go_place.call(@resting_room)
			respond ":: SHATVENTURE TASKS :: Still looking for the stupid heirloom"
			exit
		else 
			remove_task.call
		end
	elsif my_bounty == :heirloom_found
	echo ":heirloom_found"
		go_place.call("advguard")
		turn_in_heirloom.call
	elsif my_bounty == :wait_bounty
	echo ":wait_bounty"
		if use_boosts
			burn_boost.call(:bounty)
		end
		sleep(5)
		if boosted 
			request_bounty.call
		elsif wait_bounty == false
			echo ";shatventure wait is set to off ---  exiting"
			go_place.call(@resting_room)
			exit
		elsif my_bounty == :wait_bounty || my_bounty == :saturated
		echo "Waiting Out Bounty Cooldown"
			go_place.call(@resting_room)
			while Spell[9003].active?
				if percentmind <= rest_till_exp
					exit
				end
				sleep(60)
				fput "exp"
			end
		end
	elsif my_bounty == :no_bounty 
	echo ":no_bounty"
		if Spell[9003].active?
			go_place.call(@resting_room)
		end
		while Spell[9003].active?
			if percentmind <= rest_till_exp
				exit
			end
			sleep(60)
			fput "exp"
		end
		go_place.call('advguild')
		request_bounty.call
		go_place.call('bank')
	elsif my_bounty == :success_no_checkin
		go_place.call('advguild')
		request_bounty.call
	elsif my_bounty == :success_checkin
	echo ":success_checkin"
		go_place.call('advguard')
		ask_npc.call
	elsif my_bounty == :unwanted
	echo ":unwanted"
		remove_task.call
	elsif my_bounty == :saturated
		if Spell[9003].active?
			hit_bank.call(0)
			go_place.call(@resting_room)
			echo "You're super-fried. Lets wait a bit and not waste boosts or experience"
			while Spell[9003].active?
				if percentmind <= rest_till_exp
					exit
				end
				sleep(60)
				fput "exp"
			end
		else 
			go_place.call(@resting_room)
			while saturated?
				sleep(60)
				fput "exp"
			end
			request_bounty.call		
		end
	else 
		respond "UNRECOGNIZED BOUNTY"
		exit
	end
end
