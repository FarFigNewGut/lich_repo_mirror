=begin

	This script allows you to ignore people who bug the hell out of you! Or people you just want to ignore for kicks and giggles.
	
	Simply run the setup menu by typing ;squelch setup and enter the names of people in each squelch category! It's that simple!
	
	- Choose to only ignore a person's presence (when LOOKing in a room you won't see them listed nor their disk)
	- You can also ignore stuff they say via whispers, says, yells, etc
	- You can also choose to ignore VERBs they use, although right now it just ignores the usage of the ACT verb
	- Finally there is the NUCLEAR OPTION which ignores EVERY game line where the person's name shows up. This isn't recommended but it's there if you want it
	
	Start squelching people TODAY!
	
	Run this script in the background to make use of it's squelching powers. Kill the script at any time if you wish to stop squelching people.

	Author:  Tgo01
	Version:  2

=end

CharSettings['setup_has_been_run'] = nil unless CharSettings['setup_has_been_run']
ignore_stuffs = nil
ignore_presence_people = nil
ignore_presence_people_split = nil
ignore_verbs_by_people = nil
ignore_verbs_by_people_split = nil
ignore_speech = nil
ignore_speech_split = nil
nuclear_option = nil
nuclear_option_split = nil
rework_server_string = nil
need_new_line = nil
do_not_show_string = nil
number = 0

setup = proc{
	CharSettings['setup_has_been_run'] = true
	Gtk.queue {
		$OP_WINDOW = Gtk::Window.new
		$OP_WINDOW.title = "squelch"
		$OP_WINDOW.set_border_width(10)
		$OP_BOX = Gtk::VBox.new(false)
		$OP_BOX.set_border_width(5)

		$OP_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)

		$OP_WINDOW.add($OP_BOX)
		$OP_NOTEBOOK = Gtk::Notebook.new
		$OP_NOTEBOOK.set_show_border(true)
		$OP_BOX.add($OP_NOTEBOOK)
		$OP_NOTEBOOK.append_page($OP_VERTICAL_BOX1, Gtk::Label.new('Stuff'))
		$OP_ENTRY = Hash.new 
		$OP_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$OP_TABLE1 = Gtk::Table.new(6, 3, false)
		$OP_TABLE1.row_spacings=3
		$OP_TABLE1.column_spacings=3
		$OP_VERTICAL_BOX1.pack_start($OP_TABLE1, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $OP_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.squelch[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$OP_ENTRY[variable] = entry
		$OP_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$OP_ENTRY = Hash.new
		add_label_entry($OP_TABLE1, "Ignore Presence", 'ignore_presence')
		add_label_entry($OP_TABLE1, "Ignore verbs BY person", 'ignore_verbs_by_person')
		add_label_entry($OP_TABLE1, "Ignore Speech", 'ignore_speech')
		add_label_entry($OP_TABLE1, "Nuclear Option", 'nuclear_option')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $OP_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.squelch[variable].nil? ? default : UserVars.squelch[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$OP_ENTRY[variable] = checkbox
		$OP_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$OP_WINDOW.signal_connect("delete_event") {
			$OP_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {
		$OP_TOOLTIPS = Gtk::Tooltips.new
		$OP_TOOLTIPS.enable

		label = Gtk::Label.new
		label.set_markup("<b>Fill out each option. Separate each name with a comma, NO SPACES.\nEnter nil for any option you don't want to use.</b>\n<b>Ignore Presence: </b> Enter names of people you don't want to see in rooms. This will also remove their disks.\n<b>Ignore verbs BY person:</b> Enter names of people you don't want to see verbs performed by. This includes the ACT verb.\n<b>Ignore Speech:</b> Enter names of people you don't want to see speech from; whispers, says, yells, etc.\n<b>Nuclear Option:</b> This option won't show ANY game line with the listed peoples' names in them.\nThis won't interfere when LOOKing in a room, that still uses the Ignore Presence option.\nNUCLEAR OPTION is not recommended but it's there if you want to use it.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$OP_TABLE1.attach(align, 1, 2, 8, 9)

		$OP_WINDOW.show_all
	}
        
	$OP_SETUP_COMPLETED = false
	until($OP_SETUP_COMPLETED)
		sleep 1
	end
       
	UserVars.squelch ||= Hash.new
	$OP_ENTRY.keys.each { |key|
		if( $OP_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $OP_ENTRY[key].active?
			UserVars.squelch[key] = $OP_ENTRY[key].active?
		else
			if(key == 'wounded_eval')
				UserVars.squelch[key] = $OP_ENTRY[key].text
			else
				UserVars.squelch[key] = $OP_ENTRY[key].text
			end
		end
	}
	UserVars.save()
        
	Gtk.queue {
		$OP_WINDOW.destroy
	}
}

if UserVars.squelch["ignore_presence"] == "nil" || UserVars.squelch["ignore_presence"].length < 1
	nil
else
	ignore_presence_people = UserVars.squelch["ignore_presence"]
	ignore_presence_people_split = UserVars.squelch["ignore_presence"].split(",")
end

if UserVars.squelch["ignore_verbs_by_person"] == "nil" || UserVars.squelch["ignore_verbs_by_person"].length < 1
	nil
else
	ignore_verbs_by_people = UserVars.squelch["ignore_verbs_by_person"]
	ignore_verbs_by_people_split = UserVars.squelch["ignore_verbs_by_person"].split(",")
end

if UserVars.squelch["ignore_speech"] == "nil" || UserVars.squelch["ignore_speech"].length < 1
	nil
else
	ignore_speech = UserVars.squelch["ignore_speech"]
	ignore_speech_split = UserVars.squelch["ignore_speech"].split(",")
end

if UserVars.squelch["nuclear_option"] == "nil" || UserVars.squelch["nuclear_option"].length < 1
	nil
else
	nuclear_option = UserVars.squelch["nuclear_option"]
	nuclear_option_split = UserVars.squelch["nuclear_option"].split(",")
end

ignore_stuffs = proc{
	action = proc { |server_string|
		if (server_string =~ /^Also here\:|^\<component id\=\'room players\'\>Also here\:/)
			if ignore_presence_people
				rework_server_string = nil
				string = nil
				need_new_line = nil
				characters = server_string.split(", ")
				stuff_to_delete = Array.new
				characters.each{|pc|
					ignore_presence_people_split.each{|i|
						if pc =~ /#{i}/i
							stuff_to_delete.push(pc)
							rework_server_string = true
						end
					}
				}
				if rework_server_string
					if stuff_to_delete.include?("#{characters.last}")
						need_new_line = true
					end
					stuff_to_delete.each{|pc|
						if pc =~ /Also here/
							string += "Also here: "
						end
						if stuff_to_delete.include?(pc)
							characters.delete(pc)
						end
					}
					number = 0
					characters.each {|pc|
						number += 1
						string += "#{pc}, "
					}
					if characters.length == 0
						nil
					else
						string = string.chop.chop
						if need_new_line
							string = "#{string}\n"
						end
						server_string = string
					end
				else
					server_string
				end
			else
				server_string
			end
		elsif server_string =~ /^\<.*You notice |^\<.*You also see /
			if ignore_presence_people
				notice_or_see = nil
				need_new_line = nil
				if server_string =~ /You also see /
					notice_or_see = "You also see "
				else
					notice_or_see = "You notice "
				end
				string = nil
				disks = server_string.split(/You notice |You also see /)
				pre_stuff = disks.at(0)
				number = 0
				disks.each{|i|
					number += 1
					if number == 1
						nil
					else
						string += i
					end
				}
				disks = string.split(/, | and /)
				string = nil
				rework_server_string = nil
				string += pre_stuff
				string += notice_or_see
				stuff_to_delete = Array.new
				disks.each{|pc|
					ignore_presence_people_split.each{|i|
						if pc =~ /#{i}/i
							stuff_to_delete.push(pc)
							rework_server_string = true
						end
					}
				}
				if rework_server_string
					number = 0
					stuff_to_delete.each{|pc|
						if stuff_to_delete.include?(pc)
							disks.delete(pc)
							if pc =~ /\./
								need_new_line = true
							end
						end
					}
					disks.each {|pc|
						number += 1
						if number == disks.length - 1
							string += "#{pc} and "
						else
							string += "#{pc}, "
						end	
					}
					if (disks.length == 0)
						string = "#{pre_stuff}\n"
					else
						if need_new_line
							string = string.chop.chop
							string = "#{string}.\n"
						else
							string = string.chop.chop
						end
						server_string = string
					end
				else
					server_string
				end
			else
				server_string
			end
		else
			do_not_show_string = nil
			if nuclear_option
				nuclear_option_split.each{|pc|
					if server_string =~ /#{pc}/i
						do_not_show_string = true
						break
					else
						server_string
					end
				}
			end
			if do_not_show_string
				nil
			else
				if server_string =~ /\(\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\>.*\)/ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> adopts an agreeable expression\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> agrees with .*\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> appears to be more self\-confident\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> finds the .* agreeable\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> applauds\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> waves an arm around in a vain attempt to applaud\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> applauds .*\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> claps .* hands\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> glances at .* and claps .* hands\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> scowls and mutters for a moment\, looking rather trod upon\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> attends to .*\, making the .* as presentable as possible\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> sets about preparing .* to be as presentable as possible\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> sets about preparing .* to be as presentable as possible\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> rubs .* .* eyes\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> passes a hand over .* .* face\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> runs a hand through .*\, trying to make .* presentable\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> closes .* eyes in concentration for a moment\. When they open\, they appear to be glowing dark brown\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> closes .* eyes in concentration for a moment\. When they open\, they appear to be glowing light red\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> closes .* eyes in concentration for a moment\. When they open\, they appear to be glowing light blue\./ || server_string =~ /\<a exist\=\".*\" noun\=\"([a-zA-Z]+)\"\>.*\<\/a\> closes .* eyes in concentration for a moment\./
					do_not_show_string = nil
					person_to_check = $1
					ignore_verbs_by_people_split.each{|i|
						if person_to_check =~ /#{i}/i
							do_not_show_string = true
							break
						end
					}
					if do_not_show_string
						nil
					else
						server_string
					end
				elsif server_string =~ /^\<pushStream id\=\"speech\"\/\>.* noun\=\"(.*)\"/ || server_string =~ /^\<preset id\=\'speech\'\>.* noun\=\"(.*)\"/ || server_string =~ /\<pushStream id\=\"speech\"\/\>\<preset id\=\"whisper\"\>(a-zA-Z+) whispers\,\<\/preset\>/ || server_string =~ /\<preset id\=\"whisper\"\>.*noun\=\"(.*)\"/ || server_string =~ /\<pushStream id\=\"speech\"\/\>\<preset id\=\"whisper\"\>\(OOC\) (.*)\'s player whispers/ || server_string =~ /\<preset id\=\"whisper\"\>\(OOC\) \<a exist\=\".*\" noun\=\".*\">/ || server_string =~ /\<pushStream id\=\"speech\"\/\>\<preset id\=\"whisper\"\>(.*) leans over and whispers/ || server_string =~ /\<preset id\=\"whisper\"\>\<a exist\=\".*\" noun\=\"(.*)\"\>.*\<\/a\> leans over and whispers\,/
					do_not_show_string = nil
					person_to_check = $1
					ignore_speech_split.each{|i|
						if person_to_check =~ /#{i}/i
							do_not_show_string = true
							break
						end
					}
					if do_not_show_string
						nil
					else
						server_string
					end
				else
					server_string
				end
			end
		end
	}
		DownstreamHook.add("#{script.name}_ignore_stuffs", action)
}

if script.vars[1] =~ /set/
	setup.call
else
	before_dying { DownstreamHook.remove("#{script.name}_ignore_stuffs") }
	ignore_stuffs.call
	unless CharSettings['setup_has_been_run']
		echo "You must run setup before running this script. Type ;squelch setup"
		exit
	end
	sleep 1000000000
end