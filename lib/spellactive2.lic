=begin
    Keeps spells active. This script can be used in place of
    sigils/signs and will keep any spell in the list active.

    Usage: ;spellactive help

     author: spiffyjr
      email: theman@spiffyjr.me
       name: SpellActive
       tags: spells
    version: 1.0
=end

script.want_downstream = false
clear

settings = CharSettings.to_hash
settings['spells'] ||= Array.new

get_spell = proc { |input|
    input.gsub!(/^\w+\s/, '')
    spell = Spell[input]
    if not spell
        echo "Could not find spell: " + input.to_s
        exit
    end
    spell
}

case script.vars[1]
	when /^add$/i
		if script.vars[2].nil?
			echo "You're doing it wrong"
			exit
		end

        spell = get_spell.call(script.vars[0])

		if settings['spells'].include?(spell.num)
			echo "You are already keeping #{spell.name} active"
			exit
		end

		if not spell.known?
			echo "You do not know #{spell.name}"
			exit
		end

		settings['spells'].push(spell.num)
		echo "Added #{spell.name}"
	when /^(?:delete|del|remove|rem)$/i
		if script.vars[2].nil?
			echo "You're doing it wrong"
			exit
		end

		spell = get_spell.call(script.vars[0])

		if not settings['spells'].include?(spell.num)
			echo "You are not keeping #{spell.name} active"
			exit
		end

		settings['spells'].delete(spell.num)
		echo "Removed #{spell.name}"
	when /^list$/i
		echo "Spell list"
		settings['spells'].sort.each { |spell| echo sprintf '%4d: %s', spell, Spell[spell].name }
	when /^(?:help|\?)$/
		echo "Spell Active Help"
		echo sprintf '%10s          %s', 'add [num|name]', 'add a spell to the list'
		echo sprintf '%10s          %s', 'del [num|name]', 'delete a spell from the list'
		echo sprintf '%10s          %s', 'list', 'list spells you are keeping active'
end

exit unless script.vars[1].nil?

loop {
    wait_while { dead? }
	settings['spells'].each { |spell|
		spell = Spell[spell]

		unless spell.active?
			wait_while { muckled? or (checkprep != 'None') }
			waitcastrt?
			waitrt?

			# Stagger signs that use spirit (thanks Tillmen!)
			spirit_count = 0;
			[Spell['Sign of Swords'], Spell['Sign of Shields'], Spell['Sign of Dissipation']].each { |sn|
				spirit_count += 1 if sn.active? and (sn.time_per - sn.timeleft) < 3
			}

			# Logic for casting spells
			if (spell.affordable? and spell.known? and (spell.spirit_cost.zero? or (percentspirit > 75 and spirit_count < 2)))
				next if (spell.name == 'Sign of Clotting' and Spell['Sign of Staunching'].active?)

				was_hidden = hidden?
				if [606, 640].include?(spell.num)
				    if !Spell[625].active? and Spell[625].affordable?
    					Spell[625].cast
				    end

					next
				end

        # only cast certain things in the presence of an enemy
				if (spell.num == 506 or spell.name =~ /^Sigil of (?:Minor|Major) (?:Bane|Protection)/) and GameObj.npcs.find_all { |npc| npc.type !~ /passive/ }.nil?
            next
        end

				# Don't cast Rapid Fire if the cooldown is active
				if (spell.num == 515 and Spell[599].active?)
					next
				end
		
				script.want_downstream = true
				result = spell.cast if spell.affordable? and not spell.active?
				if result =~ /The power from your sign dissipates into the air\.|Your magic fizzles ineffectually\./
					room_count = XMLData.room_count
					wait_while { room_count == XMLData.room_count }
				end

				script.want_downstream = false
				clear

				fput "hide" if was_hidden and !hidden?
			end
		end

		# Sigil of Power
		if (maxmana - checkmana) > 25 and Spell['Sigil of Power'].known? and Spell['Sigil of Power'].affordable?
			waitcastrt?
			waitrt?

			script.want_downstream = true
			fput "sigil of power"
			script.want_downstream = false
			sleep 1
		end
	}

	sleep 0.25
}
