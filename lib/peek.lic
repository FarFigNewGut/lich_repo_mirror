#QUIET
=begin
  Inspired by tour, but not immersive.
  
  Designed for the Stormfront frontend, uses links for point and click navigation.
  
  ;peek 13894
  
  Shows you a room based on a room number, 
    - links to navigate based on paths (Obvious exits)
    - links to navigate based on wayto (Less obvious exits)
    - links for multiple descriptions
  
  The links just call the script again with a new room number and description ordinal.

          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: map, rooms, fluff, tour
        required: Lich >= 4.6.4
         version: 3
  
=end

@script_name = script.name;
@short_way = {"n" => "north", "ne" => "northeast", "e" => "east", "se" => "southeast", "s" => "south", "sw" => "southwest", "w" => "west", "nw" => "northwest", "u" => "up", "d" => "down", "o" => "out" };
@directions = ["north", "northeast", "east", "southeast", "south", "southwest", "west", "northwest", "up", "down", "out" ];
def self.format_room_title(str,room,uid,location=nil); return "<style id=\"roomName\" />[#{str.gsub(/^\[|\]$/,'')} - #{room}] (u#{uid.join(', ')})#{location.nil? ? "" : " (#{location})"}";end;
def self.format_room_description(descr,alsosee=nil); return "<style id=\"\"/><style id=\"roomDesc\"/>#{descr}  <style id=\"\"/>#{alsosee}";end;
def self.format_dcmd(link_command,link_text); return "<d cmd=\"#{$clean_lich_char}#{@script_name} #{link_command}\">#{link_text}</d>";end;

def self.format_room_exits(room) #room id
  paths = Map[room.to_i].paths[0]
  paths_or_exits = paths =~ /^Obvious paths/ ? "paths" : "exits"
  
  dir_list = paths.gsub(/^Obvious.*?: /,'').split(', ')
  
  wayto = Map[room].wayto
  wayto.each { |k,v| v=@short_way[v] if !@short_way[v].nil? }

  ways = [] #list of exits and wayto
  other_ways = []
  
  dir_list.each { |d|
    w = wayto.select{ |k,v| v == d}
    w.each { |k,v| 
      ways << self.format_dcmd(k,v)
    }
  }
  wayto.each{ |k,v|
    if !@directions.include?(v)
      path = v.inspect
      path = Map[k].title[0] if path =~ /StringProc/
      other_ways << self.format_dcmd(k,path.gsub(/^"|"$/,''))
    end
  }
  ways = [ "none" ] if ways.empty?
  str = "Obvious #{paths_or_exits}: #{ways.join(', ')}"
  str = "#{str}\nLess obvious #{paths_or_exits}: #{other_ways.join(', ')}" if other_ways.length > 0
  return str
end
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
room = script.vars[1];
descr = script.vars[2].to_i;
descr = 0 if descr.nil?;

if script.vars[1] =~ /^u(-?\d+)$/ ? $1 : nil
  room_uid = (script.vars[1] =~ /^u(-?\d+)$/ ? $1.to_i : nil)
  matches = Map.uids[room_uid.to_i]
  if matches.size == 0 or matches.nil?
    echo "uid #{room_uid.inspect} not found"
    exit
  elsif matches.size > 1
    echo "#{matches.size} matches found for uid #{room_uid}, matches: #{matches.inspect}"
    exit
  end
  room = matches[0].to_s
end  


if room =~ /^\d+$/
  _respond 
  _respond self.format_room_title(Map[room].title[0],room,Map[room].uid,Map[room].location)
  _respond self.format_room_description(Map[room].description[descr])
  _respond self.format_room_exits(room)
  
  descr = descr.to_i + 1
  dlen = Map[room].description.length.to_i
  next_descr = "#{descr} of #{dlen} total descriptions:"
  if descr < dlen
    _respond "#{next_descr} #{self.format_dcmd("#{room} #{descr.to_i}","next description")}"
  else
    _respond "#{next_descr} #{self.format_dcmd("#{room} 0","first description")}"
  end
end