=begin

Attempts to cast non-attack spells from your collection of scrolls,
vellums, parchments, etc. Utilizes separate containers to manage vibrant scrolls.
Will rummage in your scrollbag for matching spell numbers, upon finding a vibrant scroll it will place,
that scroll in your vibrantscrollsack unless usage of vibrant scrolls is toggled on.

Invoke/casts normal scrolls.
Incants spells absorbed from vibrant scrolls.
    
Originally based on the work by Sulien on scrollbuff.lic, this script has been
almost entirely re-written to allow:
Invoking from either hand,
Support for vibrant ink scrolls,
Support for self-cast utility spells,
Configurable durations for stackable or refreshable spells

    author: Nihiladrem (todd.estabrooks@gmail.com)
      game: gs
      tags: invoke, scroll, scrolls, hunting
      version: 0.1.3

    CHANGELOG:
    0.1.3 - Changed logic to allow all non-attack spells.
    0.1.2 - Changed vars to scrollbag to avoid confusion, clarified help messaging.
    0.1.1 - Scrollbuff2 rework by Nihiladrem
    0.0.1 - Initial version by Sulien
    
=end

debug = true

def echofmt(*lines)
    maxlen = lines.map(&:length).max + 1
    echo "=" * maxlen
    lines.each do |line|
        echo line + (" " * (maxlen - line.length))
    end
    echo "=" * maxlen
end

##Check for empty hand
unless (checkright.nil?) ||  (checkleft.nil?)
    echofmt "Empty a hand and try again"
    exit
end

##Check for scrollbag
scrollbagVar = Vars["scrollbag"]
unless scrollbagVar
    echofmt "Please set your scroll container with a",
            "command like:",
            "    ;vars set scrollbag=silver backpack",
            "",
            "Use only a noun and optionally a single adjective.",
            "",
            "This will only work with containers you are",
            "wearing or holding."
    
    exit
end
scrollbag = GameObj[scrollbagVar]
unless scrollbag
    echofmt "Couldn't find your scrollbag \"#{scrollbagVar}\"",
            "Fetch that and try again, would ya?"
    
    exit
end
##Check for vibrantscrollbag
vibrantscrollbagVar = Vars["vibrantscrollbag"]
unless vibrantscrollbagVar
    echofmt "Please set your vibrant scroll container with a",
            "command like:",
            "    ;vars set vibrantscrollbag=white satchel",
            "",
            "Use only a noun and optionally a single adjective.",
            "",
            "This will only work with containers you are",
            "wearing or holding.",
			"",
			"Your vibrantscrollbag needs to be a different",
			"than your scrollbag."
    exit
end

##Get duration settings
stackto_duration = CharSettings["scrollbuff-stackto"]
if debug == true; echo "Stack duration: #{stackto_duration}";end
if !(CharSettings["scrollbuff-stackto"].to_i > 0)
	if debug == true; echo "Warning! No stackto value set using default of 90 minutes.";end
	stackto_duration = 90
end
refreshto_duration = CharSettings["scrollbuff-refreshto"]
if debug == true;echo "Refresh duration: #{refreshto_duration}";end
if !(CharSettings["scrollbuff-refreshto"].to_i > 0)
	if debug == true; echo "Warning! No refreshto value set using default of 10 minutes.";end
	refreshto_duration = 10
end

##Check for script commands
SpellNums = script.vars[1..-1]
if SpellNums.nil? || SpellNums.count == 0 || SpellNums.first.start_with?("h")
    echofmt "Attempts to cast defensive or self-cast spells from your collection of scrolls, vellums, parchments, etc.",
			"Will rummage in your scrollbag for matching spell numbers, upon finding a vibrant scroll it will place",
			"that scroll in your vibrantscrollsack unless usage of vibrant scrolls is toggled on.",
            "",
            "Before running, you must set your scrollbag and vibrantscrollbag with a command like:",
            "   ;vars set scrollbag=pouch",
            "   ;vars set vibrantscrollbag=black satchel",
            "",
			"You must have an empty right hand, or a non-scroll item in right hand and an empty left hand.",
            "",
			"The script will tell you which spells it cast and which it skipped.",
            "Casts stackable spells that are not running or have under",
            "#{stackto_duration} minutes left.  To change this setting enter:",
			"   ;#{script.name} stackto (minutes)",
            "",	
            "Casts refreshable spells that are not running or have under",
            "#{refreshto_duration} minutes left.  To change this setting enter:",
			"   ;#{script.name} refreshto (minutes)",
            "",				
			"Vibrant ink scrolls will be skipped by default and moved to your set vibrantscrollbag. If vibrant",	
			"toggle is on, will still prefer scrolls in scrollbag before checking vibrantscrollbag.",
			"To toggle use of vibrant ink scrolls enter: ",	
			"   ;#{script.name} vibrant",			
            "",
            "Usage: ;#{script.name} 101 107 509 ...",
            "List up to 30 spell numbers separated by a space.",
            "",
			"To list all relevant settings for this script:",
			"Current settings:"
			
			if (CharSettings["scrollbuff-usevibranttoggle"] == "Yes");usevibrant="True";else;usevibrant="No";end			
			echofmt "scrollbag: #{Vars["scrollbag"]}",
			"Vibrantscrollbag: #{Vars["vibrantscrollbag"]}",	
			"Use vibrant Scrolls: #{usevibrant}",	
			"Stack spells to: #{stackto_duration} minutes",
			"Refresh spells below: #{refreshto_duration} minutes"			


    exit
elsif SpellNums.first.start_with?("vibrant")
	if CharSettings["scrollbuff-usevibranttoggle"] == "True"
		CharSettings["scrollbuff-usevibranttoggle"] = "False"
		echofmt "You are now set to NOT use vibrant ink scrolls.",
		"If a vibrant ink scroll is rummaged this script will put the scroll in your vibrantscrollbag and rummage again."
	else
		CharSettings["scrollbuff-usevibranttoggle"] = "True"
		echofmt "You are now set to use vibrant ink scrolls.",
		"If a vibrant ink scroll is rummaged this script will invoke it and then prep/cast it once."
	end
	exit
elsif SpellNums.first.start_with?("stackto")
		if debug == true; echo "Second value: #{SpellNums[1]}";end
		if !(SpellNums[1].to_i > 0)
			echofmt "You need to specify a duration in minutes like:",
			"   ;#{script.name} stackto 30"	
			exit
		end
		CharSettings["scrollbuff-stackto"] = SpellNums[1]
		echofmt "You are now set invoke stackable spells until above #{SpellNums[1]} minutes." 
		exit
elsif SpellNums.first.start_with?("refreshto")
		if debug == true; echo "Second value: #{SpellNums[1]}";end
		if !(SpellNums[1].to_i > 0)
			echofmt "You need to specify a duration in minutes like:",
			"   ;#{script.name} refreshto 5"	
			exit
		end
		CharSettings["scrollbuff-refreshto"] = SpellNums[1]
		echofmt "You are now set invoke stackable spells until above #{SpellNums[1]} minutes." 
		exit		
elsif SpellNums.first.start_with?("settings")
	if (CharSettings["scrollbuff-usevibranttoggle"] == "Yes");usevibrant="True";else;usevibrant="No";end

	
	echofmt "scrollbag: #{Vars["scrollbag"]}",
			"Vibrantscrollbag: #{Vars["vibrantscrollbag"]}",	
			"Use vibrant Scrolls: #{usevibrant}",	
			"Stack spells to: #{stackto_duration} minutes",
			"Refresh spells below: #{refreshto_duration} minutes"			

	exit			
end

##Check for Vibrant Scroll Sack
vibrantscrollbagVar = Vars["vibrantscrollbag"]
unless (vibrantscrollbagVar || (CharSettings["scrollbuff-usevibranttoggle"] == "True"))
    echofmt "You are not currently set to use vibrant ink scrolls.",
            "You need to set a place to store vibrant ink scrolls that are rummaged from your scrollbag.",
            "command like:",
            "    ;vars set vibrantscrollbag=black backpack"
    
    exit
else
	vibrantscrollbag = GameObj[vibrantscrollbagVar]
	unless vibrantscrollbag
		echofmt "Couldn't find your vibrantscrollbag \"#{vibrantscrollbag}\"",
				"Fetch that and try again, would ya?"
		exit
	end
	if GameObj[vibrantscrollbagVar] == GameObj[scrollbagVar]
		echofmt "Your vibrantscrollbag must be a different container than your scrollbag",
				"Change one of the other to a different container and try again. Example:",
				"    ;vars set vibrantscrollbag=black backpack",
				"OR",
				"    ;vars set scrollbag=pouch"	
				exit
	end	
end


##Check list of spells for useability
SpellNumsNeeded = SpellNums.find_all do |spell_num|
    spell = Spell[spell_num]
	if debug == true; echo "Availbility: #{spell.availability}";end
    spell && !(spell.type =~ /attack/)  && (!spell.active || spell.timeleft <= stackto_duration)
end

if SpellNumsNeeded.count.zero?
    echofmt "NO SPELLS NEEDED",
            "",
            "All spells are active with at least #{stackto_duration} minutes remaining."
    
    exit
end

## Make sure scroll sacks are open
fput "open ##{scrollbag.id}"
fput "open ##{vibrantscrollbag.id}"

def findscroll(spell_num, scrollbag, vibrantscrollbag)
        result = dothis "rummage in ##{scrollbag.id} spell #{spell_num}", /You rummage through .+ (and remove .+ with .+ scrawled upon it|but can't seem to locate anything with that spell on it)/
		
        if result =~ /but can't seem to locate anything with that spell on it/
			if CharSettings["scrollbuff-usevibranttoggle"] == "True"
				result = dothis "rummage in ##{vibrantscrollbag.id} spell #{spell_num}", /You rummage through .+ (and remove .+ with .+ scrawled upon it|but can't seem to locate anything with that spell on it)/
				if result =~ /but can't seem to locate anything with that spell on it/
					if debug == true; echo "Missing scroll for #{spell_num}";end
					SpellNumsNeeded.shift
					return "none"				
				else
					return "vibrant"
				end
			end
		
			if debug == true; echo "Missing scroll for #{spell_num}";end
			SpellNumsNeeded.shift
			return "none"
			
		elsif !(CharSettings["scrollbuff-usevibranttoggle"] == "True")
			scrolltype = ""
			until (scrolltype == "normal" || scrolltype == "none")
				if checkright =~ /scroll|paper|papyrus|parchment|vellum|palimpsest/			
					result = dothistimeout "read ##{GameObj.right_hand.id}", 0.5, /vibrant/
					if result =~ /vibrant/
						fput "put right in ##{vibrantscrollbag.id}"
						scrolltype="vibrant"
					else
						scrolltype="normal"
					end
				elsif checkleft =~ /scroll|paper|papyrus|parchment|vellum|palimpsest/
					result = dothistimeout "read ##{GameObj.left_hand.id}", 0.5, /vibrant/
					if result =~ /vibrant/
						fput "put left in ##{vibrantscrollbag.id}"
						scrolltype="vibrant"						
					else
						scrolltype="normal"
					end
				else
					if debug == true; echo "Error, no scroll found in hands when expected";end
					exit
				end
				if !(scrolltype == "normal")
					result = dothis "rummage in ##{scrollbag.id} spell #{spell_num}", /You rummage through .+ (and remove .+ with .+ scrawled upon it|but can't seem to locate anything with that spell on it)/
					if result =~ /but can't seem to locate anything with that spell on it/
						if debug == true; echo "missing scroll";end
						SpellNumsNeeded.shift
						scrolltype = "none"
					end
				end
			end
			return scrolltype
		end
end

def castscroll(spell_num, scrollid, scrollbag, vibrantscrollbag, stackto_duration, refreshto_duration, scrolltype)

	if (Spell[spell_num].stackable?)
		if debug == true; echo "#{spell_num} is stackable";end
		if debug == true; echo (Spell[spell_num].timeleft > stackto_duration.to_f);end
		if debug == true; echo scrolltype;end
	
		until ((Spell[spell_num].timeleft > stackto_duration.to_f)||(scrolltype == "none"))
			if debug == true; echo "Current #{spell_num} duration: #{Spell[spell_num].timeleft}";end
			if Spell[spell_num].timeleft > stackto_duration.to_f; echo "Spell already above stackto duration"; break; end
			waitcastrt?
			waitrt?							
			result = dothis "invoke #{spell_num} from ##{scrollid}", /As you begin your invocation the ink leaps from the page and seeps into your skin.|and gesture to invoke the|That spell is not on the|Invoke from what/
			if result =~ /and gesture to invoke the/
				fput "cast"
			elsif result =~ /As you begin your invocation the ink leaps from the page and seeps into your skin./
				until (Spell[spell_num].timeleft > stackto_duration.to_f)
					if !(Spell[spell_num].affordable?); echo "waiting for mana...";end
					wait_until { Spell[spell_num].affordable? }				
					waitcastrt?
					waitrt?					
					fput "incant #{spell_num}" if Spell[spell_num].affordable?
					waitcastrt?
					waitrt?									
				end
			elsif result =~ /That spell is not on the|Invoke from what/
				fput "put right in ##{scrollbag.id}"
					scrolltype = findscroll(spell_num, scrollbag, vibrantscrollbag)
					if checkright =~ /scroll|paper|papyrus|parchment|vellum|palimpsest/
						scrollid = GameObj.right_hand.id
					elsif checkleft =~ /scroll|paper|papyrus|parchment|vellum|palimpsest/
						scrollid = GameObj.left_hand.id
					end
			end
			waitcastrt?
			waitrt?					
		end
		
	elsif (Spell[spell_num].refreshable?)
		if debug == true; echo "#{spell_num} is refreshable";end
		if debug == true; echo "Current #{spell_num} duration: #{Spell[spell_num].timeleft}";end
			if Spell[spell_num].timeleft < refreshto_duration.to_f
				waitcastrt?
				waitrt?							
				result = dothis "invoke #{spell_num} from ##{scrollid}", /As you begin your invocation the ink leaps from the page and seeps into your skin.|and gesture to invoke the|That spell is not on the|Invoke from what/
				if result =~ /and gesture to invoke the/
					fput "cast"
				elsif result =~ /As you begin your invocation the ink leaps from the page and seeps into your skin./
					if !(Spell[spell_num].affordable?); echo "waiting for mana...";end
					wait_until { Spell[spell_num].affordable? }
					waitcastrt?
					waitrt?					
					fput "incant #{spell_num}" if Spell[spell_num].affordable?
					waitcastrt?
					waitrt?											
				end
				waitcastrt?
				waitrt?			else
				if debug == true; echo "Spell already above refresh to duration";end
			end
		
	else
		if debug == true;echo "Scroll is not stackable or refreshable, casting once";end
				waitcastrt?
				waitrt?							
				result = dothis "invoke #{spell_num} from ##{scrollid}", /As you begin your invocation the ink leaps from the page and seeps into your skin.|and gesture to invoke the|That spell is not on the|Invoke from what/
				if result =~ /and gesture to invoke the/
					fput "cast"
				elsif result =~ /As you begin your invocation the ink leaps from the page and seeps into your skin./
					if !(Spell[spell_num].affordable?); echo "waiting for mana...";end
					wait_until { Spell[spell_num].affordable? }
					waitcastrt?
					waitrt?					
					fput "incant #{spell_num}" if Spell[spell_num].affordable?
					waitcastrt?
					waitrt?											
				end
				waitcastrt?
				waitrt?
	end
     
	if scrolltype = "vibrant"
		fput "put ##{scrollid} in ##{vibrantscrollbag.id}"	
	else
		fput "put ##{scrollid} in ##{scrollbag.id}"
	end
end

SpellNumsNeeded.each do |spell_num|

    spell = Spell[spell_num]
    
    if spell && !(spell.type =~ /attack/)
	
		scrolltype = findscroll(spell_num, scrollbag, vibrantscrollbag)
		
		if checkright =~ /scroll|paper|papyrus|parchment|vellum|palimpsest/
			castscroll(spell_num, GameObj.right_hand.id, scrollbag, vibrantscrollbag, stackto_duration, refreshto_duration, scrolltype)
        elsif checkleft =~ /scroll|paper|papyrus|parchment|vellum|palimpsest/
			castscroll(spell_num, GameObj.left_hand.id, scrollbag, vibrantscrollbag, stackto_duration, refreshto_duration, scrolltype)	
		else
			echo "Error: Can't find a scroll in hand, noun might not be supported."
		end

    else
		echo "Not a viable spell type"
	end
    
end

##fput "close ##{scrollbag.id}"
##fput "close ##{vibrantscrollbag.id}"

echofmt "SCROLL BUFFS COMPLETE",
        "",
        "Spells fully-cast: #{SpellNumsNeeded.join(" ")}",
        "Spells skipped or partial: #{(SpellNums - SpellNumsNeeded).join(" ")}"
