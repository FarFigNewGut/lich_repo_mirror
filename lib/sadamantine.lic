##quiet
## vim: set ft=ruby:
=begin

    SCalcAdamantine by SpiffyJr (spiffyjr@gmail.com)
    
     author: spiffyjr
      email: theman@spiffyjr.me
       name: SCalcAdamantine
       tags: mechanics
    version: 1.0

=end

CharSettings['results'] ||= Hash.new

npc = nil
attack = nil

message = proc { |msg| 
    echo '-- ' + msg
}

swung_at = proc { |one, two, deflect = false, shatter = false|
    npc = one.to_s.downcase
    attack = two.to_s.downcase

    # normalize Grimswarm
    npc.gsub!(/grimswarm /i, '')

    # normalize bolts/arrows
    if attack =~ /arrow/
        attack = attack.split(' ')[-1]
    end

    if !CharSettings['results'][attack]
        CharSettings['results'][attack] = { :swings => 0, :deflects => 0, :shatters => 0 }
    end

    CharSettings['results'][attack][:swings] = CharSettings['results'][attack][:swings] + 1

    if shatter
        message.call("shattered #{attack} from #{npc}")
        CharSettings['results'][attack][:shatters] = CharSettings['results'][attack][:shatters] + 1
    elsif deflect
        message.call("deflected #{attack} from #{npc}")
        CharSettings['results'][attack][:deflects] = CharSettings['results'][attack][:deflects] + 1
    else
        message.call("hit with #{attack} from #{npc}")
    end
}

report = proc {
    respond '========================================================'
    respond " weapon               swings  shatter  deflect"
    respond '========================================================'
    CharSettings['results'].sort_by { |k, v| -v[:swings] }.each { |weapon, data| 
        deflects = data[:deflects].to_f / data[:swings].to_f * 100
        shatters = data[:shatters].to_f / data[:swings].to_f * 100

        str = " %-20s %-5d" % [weapon[0..19], data[:swings]]
        str += "   %-2.2f%%" % shatters if shatters > 0
        str += "   ------" % shatters if shatters == 0
        str += "   %-2.2f%%" % deflects if deflects > 0
        str += "   ------" % deflects if deflects == 0

        respond str

    }
    respond '========================================================'
}

if script.vars[1] == 'clear'
    echo '-- cleared'
    CharSettings['results'] = Hash.new
elsif script.vars[1] == 'report'
    report.call
    exit
end

before_dying { report.call }

while line = get
    if line =~ /(?:The|An?) (.*) (?:swings|hurls|fires|slashes)(?: with)?(?: an?)? (.*) (?:at you!|at you with its fist!)/i
        npc = $1
        attack = $2
    elsif line =~ /(?:The|An?) <a exist="[^"]+" noun="[^"]+">([^<]+)<\/a><popBold\/> (?:tries to )?(bite|claw|pound|ensnare)s? (?:at )?you/
        npc = $1
        attack = $2
    end
    
    if npc and attack
        10.times { 
            next_line = get

            if next_line =~ /^You/
                break
            end

            if next_line =~ /(?:An?|The).*#{npc}.* hits you, but .* shatters into a thousand/i
                swung_at.call(npc, attack, false, true)
                break
            elsif next_line =~ /(?:An?|The).*#{npc}.* hits you, but .* attack bounces harmlessly/i
                swung_at.call(npc, attack, true)
                break
            elsif next_line =~ /AS: [+-]\d+ vs DS: [+-]\d+ with AvD: [+-]\d+ \+ d100 roll: [+-]\d+ = \+\d{3,}/
                swung_at.call(npc, attack)
                break
            end
        }

        npc = nil
        attack = nil
    end
end