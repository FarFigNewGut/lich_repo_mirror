module Tags
  ##
  ## contextual logging
  ##
  module Log  
    def self.out(msg, label: :debug)
      #return unless Opts.debug
      if msg.is_a?(Exception)
        msg = %{
          #{msg.message}
          #{msg.backtrace.join("\n")}
        }
      end

      _respond Preset.as(:debug, 
        _view(msg, label))
    end

    def self._view(msg, label)
      label = [Script.current.name, label].flatten.map(&:to_s).compact.join(".")
      safe = msg.inspect
      safe = safe.gsub("<", "(").gsub(">", ")") if safe.include?("<") and safe.include?(">")
      "[#{label}] #{safe}"
    end

    def self.pp(msg, label = :debug)
      respond _view(msg, label)
    end

    def self.dump(*args)
      pp *args
    end
  end
  ##
  ## minimal options parser
  ##
  module Opts
    FLAG_PREFIX    = "--"
    
    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])        
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end
end

module Tags
  @by_tag = {}

  def self.is_meta_tag(tag)
    tag.start_with?("silver-cost") or
    tag.start_with?("peer ") or
    tag.start_with?("set ")
  end

  def self.is_namespaced(tag)
    tag.include?(":")
  end

  def self.traverse_tags(room)
    room.tags.each do |tag|
      unless Tags.is_meta_tag(tag) or Tags.is_namespaced(tag)
        @by_tag[tag] ||= []
        @by_tag[tag].push(room.id)
      end
    end
  end

  def self.build_index()
    Map.list.each do |room|
      Tags.traverse_tags(room)
    end
  end

  def self.main()
    Tags.build_index()

    rare_tags = @by_tag.select do |tag, rooms|
      rooms.size < Opts.to_h.fetch(:threshold, 5).to_i
    end

    rare_tags.each do |tag, rooms|
      Log.out(tag, label: :low_quality)
      _respond("\t" + rooms.map do |room|
        "#{Room[room].title.first}:#{room}"
      end.join("\n\t"))
    end
  end

  Tags.main()
end