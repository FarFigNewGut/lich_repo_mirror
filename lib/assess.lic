module Assess
  require "ostruct"

  MAPPING = 
    [ { points: (0..2),   name: "lightly",       per_point: 10},
      { points: (3..4),   name: "fairly",        per_point: 10},
      { points: (5..6),   name: "somewhat",      per_point: 10},
      { points: (7..8),   name: "decently",      per_point: 20},
      { points: (9..10),  name: "heavily",       per_point: 20},
      { points: (11..13), name: "very heavily",  per_point: 30},
      { points: (14..15), name: "exceptionally", per_point: 30},
      { points: (16..20), name: "masterfully",   per_point: 40},
      { points: (21..25), name: "superbly",      per_point: 100},
      { points: (26..30), name: "expertly",      per_point: 100},
      { points: (31..35), name: "phenomenally",  per_point: 100},
      { points: (36..40), name: "fantastically", per_point: 100},
      { points: (41..45), name: "incredibly",    per_point: 200},
      { points: (46..50), name: "wonderously",   per_point: 300 }]

  TOTAL_SERVICES = Assess::MAPPING
    .map do |row| row[:points].to_a.product([row[:per_point]]) end
    .flatten(1)
    .map(&:last)
    

  fail "SOMETHING WRONG" unless TOTAL_SERVICES.reduce(&:+).eql?(5_000)
  BASIC_INFO = %r(has a combat effectiveness rating of (?<points>\d+) points of (?<kind>.*?).  It has (?<partial>\d+) of (?<next_rank>\d+) services towards the next full rank)
  MAX_TRIES  = 3
  @ran = false

  def self.attach_hook(command, tries: 0)
    waitrt?
    DownstreamHook.add(self.name, -> line {
      begin 
        return advanced_info(line, Assess.cast(line.match(BASIC_INFO))) if BASIC_INFO.match(line)
        return line
      rescue Exception => e
        Log.out(e)
        return line
      end
    })
    before_dying do DownstreamHook.remove(self.name) end
    fput command
    ttl = Time.now + 3
    wait_until do @ran or Time.now > ttl end
    return attach_hook(command, tries: tries + 1) if tries < MAX_TRIES and not @ran
    exit
  end

  def self.cast(match_data)
    OpenStruct.new(
      next_rank: match_data[:next_rank].to_i,
      partial:   match_data[:partial].to_i,
      points:    match_data[:points].to_i,
      kind:      match_data[:kind])
  end

  def self.find_level(points)
    level = MAPPING.find do |row| row[:points].include?(points) end
    [level, MAPPING.index(level)]
  end

  def self.advanced_info(line, info)
    @ran           = true
    total_services = TOTAL_SERVICES.slice(0, info.points + 1).reduce(&:+) + info.partial
    (level, idx)   = Assess.find_level(info.points)
    next_2_levels  = MAPPING.slice(idx + 1, 2)

    next_2_levels.map do |future_level|
      # todo: generate cost/services mappings for these
    end

    return <<~DETAILS
          #{line}
           next rank: [#{info.partial}/#{info.next_rank}]
      total services: #{total_services}
              points: #{info.points}
               level: #{level[:name]}
              next 2: #{next_2_levels}
    DETAILS
  end

  def self.main()
    fail "you are not holding anything" if GameObj.right_hand.id.nil?
    Assess.attach_hook("assess ##{GameObj.right_hand.id}")
  end

  Assess.main()
end