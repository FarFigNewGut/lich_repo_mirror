=begin
	an Appraisal script for orb gems,
	args are
		;vars set valuesack = container
		;vars set orbsack = container
		;vars set gemsack = container
		
		
	todo
		set argument for min silvers from outstanding and above quality
		;vars set valuesack = container
		;vars set orbsack = container
		;vars set gemsack = container
		
	todo list
		create argument for base value silvers 
		

=end

VERSION = "0.1.1"
AUTHOR = "Aethor Whiteaxe"

if File.file?("#{$script_dir}/cantrips.lic")
    load("#{$script_dir}/cantrips.lic")
else
    echo "\n\ncantrips.lic is required: ';repos download cantrips.lic'\n\n"
    exit
end

if ( $CantripsVer < "2015.03.29.01" )
    Cantrips::Message.bold "-- Running with an untested version of cantrips.  This may not work."
end

class Purify

	@@loresong = ", I ask this favor of you;Show the value laying beneath your hue"
	Options = Struct.new(:gemsack,:lootsack,:orbsack,:valuesack)

	class Parser
        def self.parse(options)
		args = Options.new()
		args.gemsack = Vars.gemsack
		args.valuesack = Vars.valuesack
		args.orbsack  = Vars.orbsack
		
		if ( args.valuesack.nil? )
			echo "magesack must be set in vars or passed as an option"
			error = true
		end

		if ( args.orbsack.nil? )
			echo "orbsack must be set in vars or passed as an option"
			error = true
		end

		if error then exit end
			args.gemsack  = Cantrips::Items.find(args.gemsack)
			args.valuesack = Cantrips::Items.find(args.valuesack)
			args.orbsack  = Cantrips::Items.find(args.orbsack)

		return args
		end

	end
	def self.run(parameters)
		options = Parser.parse(parameters)
		Cantrips::Containers.open(options.orbsack.id)

		gems = Cantrips::Containers.find_loot_by_pattern(Cantrips::Patterns.gems, options.orbsack.id)

		gems.each {|gem|
			fput "get ##{gem.id}"
			
			fput("loresing #{gem.noun}#{@@loresong}")

			result = waitfor /very cheap quality|poor quality|below average|average quality|above average quality|fair quality|superb quality|fine quality|good quality|exceptional quality|outstanding quality|magnificent quality/
			waitrt?

		case result
			when /very cheap quality|poor quality|below average|average quality|above average quality|fair quality|fine quality|good quality/
				Cantrips::Items.put_in_container(gem, options.gemsack)
            
			when /exceptional quality|outstanding quality|superb quality|magnificent quality/
				Cantrips::Items.put_in_container(gem, options.valuesack)
                   
		end
		}
		Cantrips::Containers.close(options.orbsack.id)
		Cantrips::Containers.close(options.valuesack.id)
		Cantrips::Containers.close(options.gemsack.id)
	
	end
end

Purify.run(script.vars)