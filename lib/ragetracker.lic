=begin
This script tracks and analyzes the performance of Rage Armor and separately monitors the Storm of Rage gemstone. Each ability has distinct triggers and tracking logic. Rage Armor monitoring includes activation tracking, bonus effects, and duration logging. Storm of Rage monitoring focuses on tier status, activation persistence, and streak kill tracking. Real-time statistics help players evaluate the effectiveness of both abilities independently.

Script created with Chat GPT.

1.0.0 (2024-08-26)
    - Initial release of the Rage Armor Tracker.
1.1.0 (2024-09-08)  
	   - Implemented a Biggest Hit high score tracker.
1.2.0 (2025-04-18)  
	   - Added output switching via upstream hook.
1.2.1 (2025-04-26)
    - Output switching now saves preference and confirms change.
1.3.0 (2025-05-16)
    - Added separate tracking for Storm of Rage gemstone tiers and durations.
    - Storm of Rage now tracks current streak and total kill count.
    - Storm of Rage now also tracks best (longest) streak.
1.3.1 (2025-05-21)
    - Fix for output being saved between sessions to familiar or main window.
    - Command to swap output changed to *rage.				
=end
no_kill_all

require 'yaml'

# Define a file path to store the rage data
data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
rage_file_path = "#{data_dir}rage_data.yaml"

# Create directories if they do not exist
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(data_dir) unless Dir.exist?(data_dir)

# Handle the reset command
if ARGV.include?("reset")
  File.delete(rage_file_path) if File.exist?(rage_file_path)
  echo "Rage armor data has been reset."
  exit
end

rage_data = if File.exist?(rage_file_path)
              YAML.load_file(rage_file_path) || {"buffs" => [], "high_score" => 0, "use_familiar_window" => false, "storm_tier" => 0, "storm_active" => false, "storm_streak" => 0, "storm_kills" => 0, "storm_best_streak" => 0}
            else
              {"buffs" => [], "high_score" => 0, "use_familiar_window" => false, "storm_tier" => 0, "storm_active" => false, "storm_streak" => 0, "storm_kills" => 0, "storm_best_streak" => 0}
            end

rage_data["buffs"] ||= []
rage_data["high_score"] ||= 0
rage_data["storm_tier"] ||= 0
rage_data["storm_active"] ||= false
rage_data["storm_streak"] ||= 0
rage_data["storm_kills"] ||= 0
rage_data["storm_best_streak"] ||= 0

@last_displayed_bonus = nil
@last_displayed_high_score = nil
@last_storm_status = nil
echo "Startup Output Mode: #{@use_familiar_window ? 'FAMILIAR' : 'MAIN'}"
# Save method
def save_rage_data(rage_data, file_path)
  File.open(file_path, "w") { |file| file.write(rage_data.to_yaml) }
end

# Remove expired buffs and return current total bonus
def update_rage_data(rage_data)
  current_time = Time.now.to_i
  rage_data["buffs"].reject! { |buff| current_time > buff["end_time"] }
  total_bonus = rage_data["buffs"].map { |buff| buff["bonus"] }.sum
  total_bonus > 50 ? 50 : total_bonus
end

# Output to familiar window or main
def echo_to_rage_window(message)
  if @use_familiar_window
    if $frontend =~ /stormfront|profanity/i
      fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/><output class=\"mono\"/>\n"
      fam_window_end = "\n<output class=\"\"/><popStream/>\r\n"
    else
      fam_window_begin = "\034GSe\r\n"
      fam_window_end = "\034GSf\r\n"
    end
    _respond("#{fam_window_begin}#{message}#{fam_window_end}")
  else
    echo message
  end
end

# Display Rage Armor status only
def display_rage_status(rage_data)
  total_bonus = update_rage_data(rage_data)
  if @last_displayed_bonus != total_bonus || @last_displayed_high_score != rage_data["high_score"]
    @last_displayed_bonus = total_bonus
    @last_displayed_high_score = rage_data["high_score"]
    message = "RAGE: +#{total_bonus} AS (#{rage_data["buffs"].size} active buffs) | Biggest Hit: #{rage_data["high_score"]} damage"
    echo_to_rage_window(message)
  end
end

# Display Storm of Rage status only
def display_storm_status(rage_data)
  if rage_data["storm_active"]
    message = "Storm of Rage Active (Tier #{rage_data["storm_tier"]}) | Streak: #{rage_data["storm_streak"]} kills | Best: #{rage_data["storm_best_streak"]} | Total: #{rage_data["storm_kills"]}"
    echo_to_rage_window(message)
  end
end

UPSTREAM_HOOK_ID = "ragetracker::upstream"
UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
if command =~ /\*rage/i
  @use_familiar_window = !@use_familiar_window
  rage_data["use_familiar_window"] = @use_familiar_window
  save_rage_data(rage_data, rage_file_path)
  echo_to_rage_window("Rage Tracker output switched to: #{@use_familiar_window ? 'FAMILIAR window' : 'MAIN window'}")
  nil
  else
    command
  end
end)

before_dying { UpstreamHook.remove(UPSTREAM_HOOK_ID) }

Thread.new do
  loop do
    sleep 1
    display_rage_status(rage_data)
  end
end

line_buffer = []

begin
  while true
    line = get
    line_buffer << line
    line_buffer.shift if line_buffer.size > 5

    # Storm of Rage gemstone tracking
    case line
    when /A burning rage awakens within you/
      rage_data["storm_tier"] = 1
      rage_data["storm_active"] = true
      rage_data["storm_streak"] += 1
      rage_data["storm_kills"] += 1
      display_storm_status(rage_data)
    when /The burning rage mounts within your soul/
      rage_data["storm_tier"] = 2
      rage_data["storm_streak"] += 1
      rage_data["storm_kills"] += 1
      display_storm_status(rage_data)
    when /The burning rage reaches its zenith/
      rage_data["storm_tier"] = 3
      rage_data["storm_streak"] += 1
      rage_data["storm_kills"] += 1
      display_storm_status(rage_data)
    when /The conflagration of rage continues to burn/
      rage_data["storm_streak"] += 1
      rage_data["storm_kills"] += 1
      display_storm_status(rage_data)
    when /The burning rage abates/
      rage_data["storm_active"] = false
      rage_data["storm_tier"] = 0
      if rage_data["storm_streak"] > rage_data["storm_best_streak"]
        rage_data["storm_best_streak"] = rage_data["storm_streak"]
      end
      echo_to_rage_window("Storm of Rage has faded. Final streak: #{rage_data["storm_streak"]} kills.")
      rage_data["storm_streak"] = 0
    end

    # Rage Armor tracking
    if line =~ /rage ignites within you|your .*? as the rage within surges/
      recent_damage = line_buffer.reverse.find { |prev| prev =~ /(\d+) points? of damage!/ }
      if recent_damage
        damage = recent_damage.match(/(\d+) points? of damage!/)[1].to_i
        echo "RAGE +#{damage} RAGE".upcase.center(45)
        end_time = Time.now.to_i + 30
        rage_data["buffs"] << { "bonus" => damage, "end_time" => end_time }
        rage_data["high_score"] = damage if damage > rage_data["high_score"]
        display_rage_status(rage_data)
        save_rage_data(rage_data, rage_file_path)
      end
    end

    sleep 0.025
  end
rescue Interrupt
  save_rage_data(rage_data, rage_file_path)
  echo_to_rage_window("Rage tracker data saved. Exiting script.")
end