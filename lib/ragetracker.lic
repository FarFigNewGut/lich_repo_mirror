hide_me

require 'yaml'
=begin
This script tracks and analyzes the performance of Rage Armor, focusing on the unique abilities and triggers activated by this special armor type. The script monitors each instance of Rage Armor activation, recording critical data points such as the frequency of activations, the effects applied, and their durations. The script also provides real-time statistics, helping players gauge the overall effectiveness of their armor in various combat scenarios.

Script created with Chat GPT.

1.0.0 (2024-08-26)
    - Initial release of the Rage Armor Tracker.
    - Added support for monitoring and tracking multiple Rage Armor abilities and triggers.
    - Implemented real-time tracking of activations, effects, and durations.
    - Displays key statistics and armor performance data in the familiar window.
    - Automatically saves data for ongoing analysis between sessions.
    - Provides configurable options for filtering output and adjusting tracking parameters.
1.0.0 (2024-09-08)    
    - Implemented a Biggest Hit high score tracker.
1.1.0 (2024-09-08)    
    - Monitors changes in XML Health instead of a specific game line.
=end

# Define a file path to store the rage data
data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
rage_file_path = "#{data_dir}rage_data.yaml"

# Create directories if they do not exist
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(data_dir) unless Dir.exist?(data_dir)

# Handle the reset command if provided as an argument when starting the script
if ARGV.include?("reset")
  File.delete(rage_file_path) if File.exist?(rage_file_path)
  echo "Rage armor data has been reset."
  exit
end

# Load rage data if it exists, otherwise initialize empty data and high score
rage_data = if File.exist?(rage_file_path)
              YAML.load_file(rage_file_path) || {"buffs" => [], "high_score" => 0}
            else
              {"buffs" => [], "high_score" => 0}
            end

# Ensure that rage_data is a hash with the expected keys
rage_data = {"buffs" => [], "high_score" => 0} unless rage_data.is_a?(Hash)
rage_data["buffs"] ||= []
rage_data["high_score"] ||= 0

# Method to save the rage data to a file
def save_rage_data(rage_data, file_path)
  File.open(file_path, "w") { |file| file.write(rage_data.to_yaml) }
end

# Method to remove expired buffs and return the current total bonus
def update_rage_data(rage_data)
  current_time = Time.now.to_i
  rage_data["buffs"].reject! { |buff| current_time > buff["end_time"] } # Remove expired buffs
  total_bonus = rage_data["buffs"].map { |buff| buff["bonus"] }.sum
  total_bonus > 50 ? 50 : total_bonus # Cap the total bonus at 50
end

# Method to send output to the familiar window
def echo_to_familiar_window(message)
  if $frontend =~ /stormfront|profanity/i
    fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/><output class=\"mono\"/>\n"
    fam_window_end = "\n<output class=\"\"/><popStream/>\r\n"
  else
    fam_window_begin = "\034GSe\r\n"
    fam_window_end = "\034GSf\r\n"
  end
  _respond("#{fam_window_begin}#{message}#{fam_window_end}")
end

# Display the current rage bonus and high score in the familiar window only when it changes
def display_rage_status(rage_data)
  total_bonus = update_rage_data(rage_data)
  if @last_displayed_bonus != total_bonus || @last_displayed_high_score != rage_data["high_score"]
    @last_displayed_bonus = total_bonus
    @last_displayed_high_score = rage_data["high_score"]
    echo_to_familiar_window("RAGE: +#{total_bonus} AS (#{rage_data["buffs"].size} active buffs) | Biggest Hit: #{rage_data["high_score"]} damage")
  end
end

# Initialize the last displayed bonus, high score, and health variables
@last_displayed_bonus = nil
@last_displayed_high_score = nil
@last_health = XMLData.health  # Initialize last health

# Method to handle health changes
def handle_health_change(rage_data, rage_file_path)
  current_health = XMLData.health

  # If health has decreased, apply the rage buff logic
  if current_health < @last_health
    damage = @last_health - current_health  # Calculate the damage

    # Calculate the end time for this buff (30 seconds from now)
    end_time = Time.now.to_i + 30

    # Add this buff to the rage data
    rage_data["buffs"] << { "bonus" => damage, "end_time" => end_time }

    # Update the high score if necessary
    rage_data["high_score"] = damage if damage > rage_data["high_score"]

    # Display the updated status immediately after gaining a new buff
    display_rage_status(rage_data)

    # Save the rage data
    save_rage_data(rage_data, rage_file_path)
  end

  # Update the last health value
  @last_health = current_health
end

# Main loop to monitor health changes and update the familiar window
loop do
  sleep 1  # Check every second

  # Monitor health and update buffs
  handle_health_change(rage_data, rage_file_path)

  # Update the familiar window with the current status
  display_rage_status(rage_data)
end

# Handle script exit
begin
  # Keeping the main script alive
  sleep
rescue Interrupt
  save_rage_data(rage_data, rage_file_path)
  echo_to_familiar_window("Rage armor data saved. Exiting script.")
end
