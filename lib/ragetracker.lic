require 'yaml'
=begin
This script tracks and analyzes the performance of Rage Armor, focusing on the unique abilities and triggers activated by this special armor type. The script monitors each instance of Rage Armor activation, recording critical data points such as the frequency of activations, the effects applied, and their durations. The script also provides real-time statistics, helping players gauge the overall effectiveness of their armor in various combat scenarios.

Script created with Chat GPT.

1.0.0 (2024-08-26)
    - Initial release of the Rage Armor Tracker.
    - Added support for monitoring and tracking multiple Rage Armor abilities and triggers.
    - Implemented real-time tracking of activations, effects, and durations.
    - Displays key statistics and armor performance data in the familiar window.
    - Automatically saves data for ongoing analysis between sessions.
    - Provides configurable options for filtering output and adjusting tracking parameters.

=end
# Define a file path to store the rage armor data
data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
rage_file_path = "#{data_dir}rage_data.yaml"

# Create directories if they do not exist
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(data_dir) unless Dir.exist?(data_dir)

# Handle the reset command if provided as an argument when starting the script
if ARGV.include?("reset")
  File.delete(rage_file_path) if File.exist?(rage_file_path)
  echo "Rage armor data has been reset."
  exit
end

# Load rage data if it exists, otherwise initialize empty data
rage_data = if File.exist?(rage_file_path)
              YAML.load_file(rage_file_path) || []
            else
              []
            end

# Method to save the rage data to a file using integer timestamps
def save_rage_data(rage_data, file_path)
  File.open(file_path, "w") { |file| file.write(rage_data.to_yaml) }
end

# Method to remove expired buffs and return the current total bonus
def update_rage_data(rage_data)
  current_time = Time.now.to_i
  rage_data.reject! { |buff| current_time > buff["end_time"] } # Remove expired buffs
  total_bonus = rage_data.map { |buff| buff["bonus"] }.sum
  total_bonus > 50 ? 50 : total_bonus # Cap the total bonus at 50
end
# Method to send output to the familiar window
def echo_to_familiar_window(message)
  if $frontend =~ /stormfront|profanity/i
    fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/><output class=\"mono\"/>\n"
    fam_window_end = "\n<output class=\"\"/><popStream/>\r\n"
  else
    fam_window_begin = "\034GSe\r\n"
    fam_window_end = "\034GSf\r\n"
  end
  _respond("#{fam_window_begin}#{message}#{fam_window_end}")
end
# Display the current rage bonus in the familiar window only when it changes
def display_rage_status(rage_data)
  total_bonus = update_rage_data(rage_data)
  if @last_displayed_bonus != total_bonus
    @last_displayed_bonus = total_bonus
    echo_to_familiar_window("RAGE: +#{total_bonus} AS (#{rage_data.size} active buffs)")
  end
end

# Start a timer thread to periodically update the familiar window
Thread.new do
  loop do
    sleep 1 # Check every second
    display_rage_status(rage_data)
  end
end

# Initialize the last displayed bonus variable
@last_displayed_bonus = nil

# Loop to monitor game lines
begin
  while true
    line = get

    # Check for a damage line indicating that you took a hit
    if line =~ /\.\.\. and hits for (\d+) points? of damage!/
      # Extract the damage value from the line
      damage = line.match(/hits for (\d+) points? of damage!/)[1].to_i

      # Calculate the end time for this buff (30 seconds from now)
      end_time = Time.now.to_i + 30

      # Add this buff to the rage data
      rage_data << { "bonus" => damage, "end_time" => end_time }

      # Display the updated status immediately after gaining a new buff
      display_rage_status(rage_data)

      # Save the rage data
      save_rage_data(rage_data, rage_file_path)
    end
  end
rescue Interrupt
  save_rage_data(rage_data, rage_file_path)
  echo_to_familiar_window("Rage armor data saved. Exiting script.")
end
