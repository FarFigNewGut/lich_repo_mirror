=begin
  this script attempt to prevent you from accidentally shopping items that are present in READY LIST

  notes:
    1. the descriptions for your hands are not the same as in the READY LIST so it's a "best guess"
    2. scripts are unaffected by shop-me-not!
    3. you can do `sudo shop sell` to override shop-me-not

  Required: Lich 4.3.12
  Author: Ondreian
  Tags: util, shop
=end

require "pp"

module ShopMeNot
  module XML
    def self.tap(fx)
      Script.current.want_downstream_xml = true
      while line=get
        case fx.call(line)
        when :ok then break
        end
      end
      Script.current.want_downstream_xml = false
    end
  end
end

module ShopMeNot
  module Deny
    READY_SETTING = %r{^\s+(?<key>[\w|\s]+):\s(?<item>.*?)\s(\(|$)}

    def self.parse_setting(settings, line)
      data = line.match(READY_SETTING)
      settings[data[:key]] = data[:item]
    end

    def self.make_ready_list()
      fput "ready list"
      settings = {}
      XML.tap -> line {
        next if line.start_with?("Your current settings are:")
        # not set
        next if line.include?(": (none)")
        # doesn't exist on your character?
        next if line.include?("(not found)")
        # end of menu
        return :ok if line.start_with?("To change your default item")
        # something worth parsing!
        return parse_setting(settings, line) if line =~ READY_SETTING
      }
      respond "found:\n%s" % settings.pretty_inspect
      Settings[:sell_me_not] = settings
    end

    def self.list()
      Settings[:sell_me_not] ||= make_ready_list()
    end
  end
end

module ShopMeNot
  module Watcher
    SUDO = /^<c>sudo\s+/
    def self.holding_dangerous_item?(list)
      return false if GameObj.right_hand.name.eql?(%[Empty])
      list.values.any? {|long_desc| 
        long_desc.end_with? GameObj.right_hand.name
      }
    end

    def self.is_sudo?(command)
      command =~ SUDO
    end

    def self.is_dangerous?(command)
      command.start_with?("<c>shop sell") or command.start_with?("<c>sell")
    end

    def self.require_sudo(command)
      cmd = command.slice(3..-1)
      _respond %[<b>detected potentially dangerous command %s</b>] % cmd
      _respond %[if this was intentional retry with sudo]
      _respond %[<d cmd="sudo %s">%s</d>] % [cmd, cmd]
    end

    def self.transform_sudo(command)
      command.gsub(SUDO, "")
    end

    def self.init()
      list = Deny.list
      UpstreamHook.add(self.name, -> command {
        return require_sudo(command) if is_dangerous?(command) and holding_dangerous_item?(list)
        return transform_sudo(command) if is_sudo?(command)
        command
      })

      before_dying {UpstreamHook.remove(self.name)}
      sleep
    end
  end
end

module ShopMeNot
  Deny.make_ready_list() if Script.current.vars.include?("sync")
  Watcher.init()
end