=begin

    SAmmo is an ammo handler, refiller, blesser, e-blader, etc.

     author: spiffyjr
      email: theman@spiffyjr.me
       name: SpiffyAlert
       tags: scripting, alert
    version: 1.0

=end

default_settings = {
    :ammo => ['arrow', 'ammo name: arrow, heavy crossbow bolt, light crossbow bolt'],
    :axe => ['handaxe', 'name of the axe'],
    :fletch_to => [40, 'amount of ammo to keep on hand while fletching'],
    :knife => ['knife', 'name of the knife'],
    :room => [0, 'where you want to fletch'],
    :room_enter => [['go table', 'sit'], 'commands to enter the room'],
    :room_exit => [['stand', 'out'], 'commands to exit the room'],
    :stock_to => [40, 'the amount of ammo to purchase with the stock command'],
    :waste_room => [0, 'room where you want to dump your waste'],
    :weapon_ready => ['ready weapon', 'command to ready your weapon'],
    :weapon_store => ['store weapon', 'command to store your weapon'],
    :wood_number => [40, 'the order # for the wood you use'],
}

settings = CharSettings.to_hash
default_settings.each do |k, v|
    if settings[k].nil?
        settings[k] = v[0]
    end
end

settings.delete_if { |setting, value| default_settings[setting].nil? }

class SAmmo
    @@mechanical_ammo = 0
    @@version = '2018.02.07'

    def SAmmo.version
        @@version
    end

    def SAmmo.mechanical_ammo
        @@mechanical_ammo
    end

    def initialize(settings)
        @settings = settings
        @mechanical_ammo = 0

        @quiver = GameObj.inv.find { |i| not UserVars.ammosack.nil? and i.name =~ /\b#{UserVars.ammosack}\b/i }
        if UserVars.ammosack.nil? or not @quiver
            echo "** failed to find quiver; currently set as #{UserVars.ammosack}"
            echo "** you can change it with ;set change ammosack item"
            exit
        end

        @lootsack = GameObj.inv.find { |i| not UserVars.lootsack.nil? and i.name =~ /\b#{UserVars.lootsack}\b/i }
        if UserVars.lootsack.nil? or not @lootsack
            echo "** failed to find material container; currently set as #{UserVars.lootsack}"
            echo "** you can change it with ;set change lootsack item"
            exit
        end
    end

    def unrest()
        @settings[:room_exit].each { |cmd| fput cmd }
    end

    def rest()
        return if checkarea =~ /Table/i 

        self.go2(@settings[:room].to_s)
        @settings[:room_enter].each { |cmd| fput cmd }
    end

    def stow_all()
        self.stow('left')
        self.stow('right')
    end

    def stow(hand)
        waitrt?

        hand = (hand == 'right') ? GameObj.right_hand : GameObj.left_hand

        if hand.id.nil?
            return
        end

        sack = nil
        case hand.noun
            when /shaft|wood|fletching|glue|drill|scribe|paint|cap|#{@settings[:knife]}|#{@settings[:axe]}/
                sack = @lootsack
            when /bow|cross/
                fput @settings[:weapon_store]
            when /arrow|bolt|dart/
                sack = @quiver
            else
                echo("** failed to find location for #{hand}")
                exit
        end

        if sack.nil?
            return true
        end
        
        res = dothistimeout("put ##{hand.id} in ##{sack.id}", 5, /You put|You sling|not set|could not|won't fit|closed\!|As you place/i)
        if res =~ /not set|could not|won't fit/ or res.nil?
            return false
        elsif res =~ /closed/
            dothistimeout("open ##{sack.id}", 5, /open|already/)
            res = stow(hand)
            dothistimeout("close ##{sack.id}", 5, /close|already/)
        end

        return true
    end

    def check_xp()
        echo "-- checking xp"

        ranks = 0
        res = dothistimeout('art skill', 5, /In the skill of fletching.* (\d+) ranks?/)

        if res =~ /In the skill of fletching.* (\d+) ranks?/
            ranks = $1.to_i
        end

        if percentmind == 0
            return
        end

        count = 0
        while true
            max = 800 + Stats.dis[0] + Stats.log[0]
            remaining = max * percentmind / 100 # allow for 10% error

            break if max - remaining >= ranks + 1

            if count % 30 == 0
                echo "-- mind full > max: #{max}, at: #{remaining}, next: #{ranks + 1}"
            end

            count += 1
            sleep 1
        end
    end

    def get_item(item)
        if checkleft =~ /#{item}/ or checkright =~ /#{item}/
            return true
        end

        waitrt?
        
        line = nil
        case item
            when 'fletching'
                line = "get fletchings from ##{@lootsack.id}"
            when 'glue'
                line = "get glue from ##{@lootsack.id}"
            when 'shaft'
                line = "get 1 my shaft from ##{@lootsack.id}"
            when 'wood'
                line = "get #{item} from ##{@lootsack.id}"
            when 'weapon'
                line = @settings[:weapon_ready]
            when 'knife'
                line = "get ##{@knife.id} from ##{@lootsack.id}"
            when 'axe'
                line = "get ##{@axe.id} from ##{@lootsack.id}"
            else
                echo("** unknown item for get_item: #{item}")
                exit
        end

        res = dothistimeout(line, 5, /You unsling|You pick|You get|You remove|what\?|could not|can't|free/i)
        if res =~ /You pick|You get|You remove|You unsling/
            return true
        end

        return false
    end

    def get_shaft(ranking = false)
        if self.get_item('shaft')
            return
        end

        self.stow_all()
    
        if not self.get_item('wood')
            self.unrest()
            self.order(@settings[:wood_number], ranking ? 5 : 1, @lootsack)
            self.deposit_coins()
            self.rest()
            self.get_item('wood')
        end

        if not self.get_item('axe')
            echo("** failed to find axe")
            exit
        end

        product = ''
        if @settings[:ammo] =~ /arrow/
            product = 'arrow'
        elsif @settings[:ammo] =~ /(heavy|light).*bolt/
            product = "#{$1} bolt"
        else
            echo("** couldn't determine product to make")
            exit
        end

        dothistimeout("cut #{product} shaft from my wood", 5, /With carefully placed cuts|so you just decide to use it as-is./)
        self.stow_all()
        
        if not self.get_item('shaft')
            echo("** out of shafts; buying failed")
            exit
        end
    end

    def do_measure_and_cut()
        self.stow('left')
        if not self.get_item('weapon')
            echo("** failed to find weapon")
            exit
        end
        
        res = dothistimeout("measure ##{GameObj.right_hand.id} with ##{GameObj.left_hand.id}", 3, /appears to already be loaded|slice|mark|carefully|Better cock/)
        if res =~ /Better cock/
            self.stow('right')
            fput "cock ##{GameObj.left_hand.id}"
            self.stow('left')
            return
        elsif res =~ /appears to already be loaded/
            self.stow('right')
            loop do
                res = dothistimeout("get bolt from ##{GameObj.left_hand.id}", 5, /You remove|Get what\?/)
                if res !~ /You remove/
                    break
                end
                self.stow('right')
            end
            self.stow('left')
            self.bundle()
            return
        elsif res.nil?
            echo("** unknown measure response")
            exit
        end

        self.stow('left')
        self.get_item('knife')
        
        res = dothistimeout("cut ##{GameObj.right_hand.id} with ##{@knife.id}", 5, /Using|Generally/)
        if res =~ /Generally/
            dothistimeout("cut ##{GameObj.right_hand.id} with ##{@knife.id}", 5, /Using/)
        end
    end

    def do_whittle()
        self.stow('left')
        self.get_item('knife')
        res = dothistimeout("cut ##{GameObj.right_hand.id} with ##{@knife.id}", 5, /You whittle|If you cut this now/)
        if res =~ /If you cut this now/
            dothistimeout("cut ##{GameObj.right_hand.id} with ##{@knife.id}", 5, /You whittle/)
        end
        self.stow_all()
    end

    def do_pare()
        self.get_item('knife')
        dothistimeout("cut ##{GameObj.right_hand.id} with ##{@knife.id}", 5, /You begin|You pare/)
    end

    def do_nock()
        self.get_item('knife')
        res = dothistimeout("cut nock in ##{GameObj.right_hand.id} with ##{@knife.id}", 5, /Generally|You begin|You carefully/)
        if res =~ /Generally/
            return self.do_nock()
        end
    end

    def do_fletch()
        self.stow('left')

        if not self.get_item('glue')
            self.order('bottle of fletching glue', 1, @lootsack)

            if not self.get_item('glue')
                echo '** failed to get or buy glue'
                exit
            end

            self.deposit_coins()
            self.rest()
            return
        end

        dothistimeout("put ##{GameObj.left_hand.id} on ##{GameObj.right_hand.id}", 5, /You carefully/)

        if GameObj.left_hand.id.nil?
            echo '-- you ran out of glue!'
        else
            self.stow('left')
        end
        
        if not self.get_item('fletching')
            self.order('bundle of fletchings', 1, @lootsack)

            if not self.get_item('fletching')
                echo '** failed to get your fletchings'
                exit
            end

            self.deposit_coins()
            self.rest()
            return
        end
        
        dothistimeout("put ##{GameObj.left_hand.id} on ##{GameObj.right_hand.id}", 5, /You attach your/)
        
        if GameObj.left_hand.id.nil?
            echo '-- you ran out of fletchings!'
        else
            self.stow('left')
        end
    
        start_time = Time.now.to_f
    
        loop do
            break if get =~ /The glue on your .* shaft has dried\./
            break if (Time.now.to_f - start_time) > 30
        end
    end

    def do_waste(force_dump = false)
        if not force_dump
            res = dothistimeout("put ##{GameObj.right_hand.id} in ##{@quiver.id}", 5, /You put/)
            if res =~ /You put/
                return
            end
        end

        self.unrest()
        self.go2(@settings[:waste_room])
        
        loop {
            if checkright =~ /shaft/ or checkleft =~ /shaft/
                fput("drop shaft")
            end
            res = dothistimeout("get shaft from ##{@quiver.id}", 5, /could not|You remove|what\?/)
            if res !~ /You remove/
                break
            end
        }
        
        self.rest()
    end

    def fletch(ranking = false)
        @axe = @lootsack.contents.find { |i| i.name =~ /\b#{@settings[:axe]}\b/i }
        if not @axe
            echo "** failed to find your #{@settings[:axe]} in #{@lootsack.name}"
            exit
        end

        @knife = @lootsack.contents.find { |i| i.name =~ /\b#{@settings[:knife]}\b/i }
        if not @knife
            echo "** failed to find your #{@settings[:knife]} in #{@lootsack.name}"
            exit
        end

        if ranking and (@quiver == @lootsack)
            echo '** lootsack and ammosack must be separate while ranking up'
            echo '** ;vars set lootsack=<name> or ;vars set ammosack=<name>'
            exit
        end

        started = nil
        ended = nil

        self.rest()

        while ranking or self.count_ammo() < @settings[:fletch_to]
            waitrt?

            if ranking
                self.check_xp()
            end

            self.get_shaft(ranking)

            res = dothistimeout("look at ##{GameObj.right_hand.id}", 5, /You see/)
            case res
=begin                    
                when /drilled/
                    state = :cap
                    if ranking
                        state = :waste 
                    end
=end
                when /fletched/
                    if ranking
                        self.do_waste()
                    else
                        self.do_whittle()

                        ended = Time.now.to_i

                        self.bundle()
                    end
=begin                        
                    state = :drill if (not @settings['cap'].empty? or not @settings['cap'].nil?) and @settings['cap'] =~ /arrowhead/i
                    state = :cap if (not @settings['cap'].empty? or not @settings['cap'].nil?) and @settings['cap'] =~ /cap/i
                    state = :flip unless @settings['flip'].empty? or @settings['flip'].to_i == 0
                    state = :waste if @fletch_mode == :rank

                when /drilled/
                    state = :cap
=end
                when /cut to length/
                    if ranking
                        self.do_waste()
                    else
                        self.do_fletch()
                    end
                when /nocked|cut with nocks/
                    if ranking
                        self.do_waste()
                    else
                        self.do_measure_and_cut()
                    end
=begin                        
                when /a single \w+ band/
                    state = :nock
                    state = :paint_band_two unless @settings['band_two_paint'].empty?
                    state = :waste if @fletch_mode == :rank
                when /covers the shaft/
                    state = :nock
                    state = :paint_band if enabled?('paint_band')
                    state = :waste if @fletch_mode == :rank
=end                        
                when /pared down and smoothed/
                    if @settings[:ammo] =~ /bolt|dart/
                        self.do_measure_and_cut()
                    else
                        self.do_nock()
                    end
                    #state = :paint_band if enabled?('paint_band')
                    #state = :paint_shaft if enabled?('paint_shaft')
                else
                    started = Time.now.to_i
                    self.do_pare()
            end

            if started and ended
                echo "-- Took #{ended - started} seconds"

                started = nil
                ended = nil
            end
        end
    end

    def refresh_mechanical_ammo()
        @@mechanical_ammo = nil

        start_time = Time.now.to_i
        action = proc do |server_string|
            if server_string =~ /There are \d+ additional bolts loaded, and no room for more\./
                @@mechanical_ammo = 5
                nil
            elsif server_string =~ /There are \d+ additional bolts loaded, and room for (\d+) more\./
                @@mechanical_ammo = 5 - $1.to_i
                nil
            elsif server_string =~ /There are (\d+) bolts loaded/
                @@mechanical_ammo = $1.to_i
                nil
            elsif server_string =~ /There are no (?:additional )?bolts loaded/
                @@mechanical_ammo = 0
                nil
            elsif server_string =~ /There is one bolt/
                @@mechanical_ammo = 1
                nil
            elsif server_string =~ /You see a|\r\n/i
                nil
            elsif Time.now.to_i - start_time >= 1
                @@mechanical_ammo = 5
                server_string
            else
                server_string
            end
        end

        DownstreamHook.add("sammo_refresh", action)
        put("look at ##{GameObj.left_hand.id}")
        wait_while { @@mechanical_ammo.nil? }
        DownstreamHook.remove("sammo_refresh")
    end

    def stock_up
        fill_to = @settings[:stock_to]
        needs = ((fill_to - self.count_ammo()) / 20).to_i

        if needs <= 0
            echo('-- good to go on ammo')
            return
        end
    
        empty_hands()
        echo("-- you need #{needs} bundles of #{@settings[:ammo]}")
        self.order("bundle.*#{@settings[:ammo]}", needs, @quiver)
        self.bundle()
        self.deposit_coins()
        fill_hands()
    end

    def reload(max = 5)
        self.refresh_mechanical_ammo()
        need = max - @@mechanical_ammo
    
        if need <= 0
            return
        end

        waitrt?
        
        (1..need).each { |x|
            put "get 1 my bolt from ##{@quiver.id}"
            dothistimeout "load ##{GameObj.left_hand.id}", 1, /You flip open/
        }

        if GameObj.right_hand.id
            fput 'stow right'
        end

        @@mechanical_ammo = max
    end

    def refresh_quiver_contents
        return if @quiver.contents
        fput "look in ##{@quiver.id}"
        pause 0.1 until @quiver.contents
    end
    
    def go2(room)
        Script.run('go2', "#{room} _disable_confirm_")
    end
    
    def checksilvers
        silvers = nil
        action = proc do |server_string|
            if server_string !~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
                nil
            elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
                silvers = $1.to_i
                DownstreamHook.remove("sammo_silvers")
                nil
            else
                server_string
            end
        end
        DownstreamHook.add("sammo_silvers", action)
        $_SERVER_.puts "#{$cmd_prefix}info\n"
        wait_until { silvers }
        silvers
    end
    
    def deposit_coins
        if self.checksilvers() > 0
            self.go2('bank')
            fput 'deposit all'
        end
    end

    def withdraw_coins(amount)
        success = true
        room = Room.current.id
    
        coins = self.checksilvers()
        if coins < amount
            self.go2('bank')
    
            if invisible? or hiding?
                fput 'unhide'
            end
            
            fput "withdraw #{amount-coins} silvers"
        else
            return
        end
    
        if self.checksilvers() < amount
            echo("** failed to withdraw #{amount} coins")
        end
    
        self.go2(room)
    end
    
    def count_ammo
        self.refresh_quiver_contents
        name = @settings[:ammo]
        found = 0

        start_time = Time.now.to_i
        action = proc do |server_string|
            if server_string =~ /You carefully count the .* and find (\d+) in the bundle|you quickly count (\d+) of them/
                found += $1.to_i
                nil
            elsif server_string =~ /You see a|\r\n/i
                # intentionally blank
            else
                server_string
            end
        end

        DownstreamHook.add("sammo_count", action)

        found = 0
        @quiver.contents.each do |item|
            if item.name =~ /bundle.*#{name}/
                fput("look at ##{item.id}")
            elsif item.name =~ /[^a-zA-Z]#{name}s?[^a-zA-Z]/i
                found += 1
            end
        end

        DownstreamHook.remove("sammo_count")
    
        found
    end
    
    def bundle()
        if not Script.exists?('slootbeta')
            echo('-- bundle feature requires slootbeta');
            echo ('-- you have 10 seconds to kill me if you want to cancel download');
            sleep(10)
            Script.run('repository', 'download slootbeta')
        end

        if $sloot.nil?
            Script.run('slootbeta', 'load')
        end

        self.refresh_quiver_contents()
        self.stow_all()

        bundles = $sloot.refresh_ammo_bundles(true)

        if bundles.length === 0
            echo("** nothing to bundle; need at least one bundle to work with")
            exit
        end

        @quiver.contents.find_all { |i| i.type == 'ammo' and i.noun =~ /^(?:dart|arrow|bolt)$/ }.each do |ammo|
            fput "_drag ##{ammo.id} right"
            $sloot.bundle_ammo(GameObj.right_hand)
        end
    end
    
    def order(nameOrNumber, count, sack)
        self.withdraw_coins(5000)
        self.go2('fletcher')
        waitrt?
    
        if nameOrNumber.class == String
            re = /(\d+).*#{nameOrNumber}/i
            res = dothistimeout('order', 5, re)
        
            if res =~ re
                nameOrNumber = $1.to_i
            else
                echo('** failed to find line item to order')
            end
        end
    
        for i in (1..count)
            fput("order #{nameOrNumber.to_s}")
            res = dothistimeout("buy", 5, /But you do not have enough|hands you/)
    
            if res =~ /But you do not have enough/
                self.withdraw_coins(5000)
                i = i - 1
                return
            end
    
            fput("put ##{GameObj.right_hand.id} in ##{sack.id}")
        end
    end
end

$sammo = SAmmo.new(settings)

before_dying do 
    DownstreamHook.remove("sammo_count")
    DownstreamHook.remove("sammo_refresh")
    DownstreamHook.remove("sammo_silvers")
end

if script.vars[1] == 'update'
    Script.run('repository', 'download sammo')
    echo '-- updated'
    $sloot = nil
elsif script.vars[1] == 'help'
    print_option = proc do |option, msg, eg = "", pad = 2|
        if eg != ""
            msg = sprintf("%-40s #{$lich_char}#{script.name} #{eg}", msg)
        end

        respond(sprintf("  %s%-25s %s", " " * pad, option, msg))
    end

    respond("SAmmo #{SAmmo.version} by SpiffyJr (Kips)")
    respond("")
    respond("SAmmo is a fletching and ammo management script.")
    respond("")
    respond("Basic usage: #{$lich_char}#{script.name}")
    respond("")
    respond("Extra commands:")
    print_option.call('help', "show this help message")
    print_option.call('list', "print all current settings")
    print_option.call('load', 'reload mechanical crossbow')
    print_option.call('rank', 'rank up in fletching')
    print_option.call('stock', "stock up on ammo")
    print_option.call('update', "reload after updating from repository")
    respond('')
    respond("Configure SAmmo by setting options:")
    print_option.call("<setting> <value>", "set or add value to setting", "type heavy crossbow bolt")
    #print_option.call("<setting> +<value>", "add value to setting", "targets +forest troll")
    #print_option.call("<setting> -<value>", "delete value from setting", "targets -forest troll")
    respond('')
    respond("Available options:")
    default_settings.each do |k, v|
        if v[1].nil?
            next
        end

        print_option.call(k, v[1])
    end
elsif script.vars[1] == 'list'
    settings.sort.each do |k, v|
        if v.class == Array
            puts("#{monsterbold_start}#{k}#{monsterbold_end}: #{v.sort.join(', ')}")
        else
            puts("#{monsterbold_start}#{k}#{monsterbold_end}: #{v}")
        end
    end
elsif script.vars[0] =~ /^([^\s]+) (.*)$/ and not settings[$1.downcase.strip.to_sym].nil?
    setting = $1.downcase.to_sym
    value = $2.strip.downcase
    action = nil

    if not defined?(settings[setting]) or settings[setting].nil?
        echo "** setting \"#{setting}\" does not exist"
        exit
    end

    if value =~ /^([+-])(.*)$/
        action = $1
        value = $2.strip.downcase
    end

    if settings[setting].class == Array
        settings[setting].delete(value)
        if action == '-'
            echo "-- \"#{value}\" removed from \"#{setting}\""
        else
            settings[setting].push(value)
            echo "-- \"#{value}\" added to \"#{setting}\""
        end

        echo "-- \"#{setting}\" is now \"#{settings[setting].sort.join(', ')}\""
    else
        if settings[setting].class == FalseClass or settings[setting].class == TrueClass
            value = (value =~ /^true|1|yes|on/) ? true : false
        elsif settings[setting].class == Fixnum
            value = value.to_i
        end

        echo "-- set \"#{setting}\" to \"#{value}\""
        settings[setting] = value
    end

    $sammo = nil
elsif script.vars[1] == 'bundle'
    $sammo.bundle()
elsif script.vars[1] == 'refresh'
    $sammo.refresh_mechanical_ammo()
elsif script.vars[1] == 'load'
    $sammo.reload()
elsif script.vars[1] == 'stock'
    $sammo.stock_up()
elsif script.vars[1] == 'rank' or script.vars[1] == 'fletch'
    before_dying { $sammo.stow_all() }
    $sammo.stow_all()
    $sammo.fletch(script.vars[1] == 'rank')
elsif script.vars[1] == 'waste'
    $sammo.do_waste(true)
else
    echo "** invalid command; try #{script.name} help"
end