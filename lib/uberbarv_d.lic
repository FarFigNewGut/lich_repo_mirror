=begin
  Based off uberbarv - thanks to them for the original
  
  -----------------------------------
  
  Added % TNL for non capped XP bar
  Removed favor script dependency
  Added voln readout even when a favor script isn't running
  Fixed bug in bard energy
  Fixed bug in xp per hour calc
  Added config for loud xp (echo xp pulses)
  Prevent updating when running go2, this should help a lot with lag
  Added resource bars for Wiz / Monk / Sorc / Bard
  Fixed issue with script breaking meditation (changed background asc exp command to exp)
  Updated for ascension stats
  Added resource command on script startup to reset sexual-favors to the correct favor
  
  Modified to integrate with ;bank to display Silver and Bounty points gained during the day
  Also modified XP value to be total gained Today and removed Play session (which was in the original and useless imo)
  
  Screenshot: https://imgur.com/KWN5yTG
  
  ;repo download bank.lic
  ;autostart add bank
  ;autostart add uberbarv_d
  
  Author: Dantax
  Version: 1.2
  
=end

# Config
enable_loud_xp = false
# End Config

if $SAFE > 0
  echo "error: This script needs to be trusted to work. (;trust #{script.name.downcase})"
  exit
end

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in UberBar"
  respond " This version is specific to the Stormfront frontend"
  respond " There is a Wizard (GTK) version on the repository on the repository"
  respond ""
  respond " ;repo download uberbarwiz"
  respond ""
  respond " Closing now"
  respond ""
  exit
end

favor_fix = false

wait_while { XMLData.next_level_text !~ /(experience|until next level)/ or !XMLData.next_level_value.integer? }

def ubWoundsFullDis()
  displayw = ""
  areas = [["nsys", "nerves"],["leftArm", "left arm"],["rightArm", "right arm"],["rightLeg", "right leg"],["leftLeg", "left leg"],["head", "head"],["rightFoot", "right foot"],["leftFoot", "left foot"],["rightHand", "right hand"],["leftHand", "left hand"],["rightEye", "right eye"],["leftEye", "left eye"],["back", "back"],["neck", "neck"],["chest", "chest"],["abdomen", "abdomen"]]
  areas.each do |area|
    if eval("Wounds.#{area[0]}") > 0 and area[0] == "nsys"	then displayw += "<image id='#{area[0]}' name='Nsys#{eval("Wounds.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Scars.#{area[0]}") > 0  and area[0] == "nsys"	then displayw += "<image id='#{area[0]}' name='Nsys#{eval("Scars.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Wounds.#{area[0]}") > 0				then displayw += "<image id='#{area[0]}' name='Injury#{eval("Wounds.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Scars.#{area[0]}") > 0				then displayw += "<image id='#{area[0]}' name='Scar#{eval("Scars.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Wounds.#{area[0]}") == 0				then displayw += "<image id='#{area[0]}' name='#{area[0]}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Scars.#{area[0]}") == 0				then displayw += "<image id='#{area[0]}' name='#{area[0]}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    end
  end
  return displayw
end
def ubWoundsChangeDis(location)
  areas = { "nsys" => "nerves", "leftArm" => "left arm", "rightArm" => "right arm", "rightLeg" => "right leg", "leftLeg" => "left leg", "head" => "head", "rightFoot" => "right foot", "leftFoot" => "left foot", "rightHand" => "right hand", "leftHand" => "left hand", "rightEye" => "right eye", "leftEye" => "left eye", "back" => "back", "neck" => "neck", "chest" => "chest", "abdomen" => "abdomen", }
  displayw = ""
  if eval("Wounds.#{location}") > 0 and location == "nsys"		then displayw = "<image id='#{location}' name='Nsys#{eval("Wounds.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  elsif eval("Scars.#{location}") > 0 and location == "nsys"		then displayw = "<image id='#{location}' name='Nsys#{eval("Scars.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  elsif eval("Wounds.#{location}") > 0					then displayw = "<image id='#{location}' name='Injury#{eval("Wounds.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  elsif eval("Scars.#{location}") > 0					then displayw = "<image id='#{location}' name='Scar#{eval("Scars.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  else ; displayw = "<image id='#{location}' name='#{location}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  end
  return displayw
end
def ubWoundsMash()
  woundmash = []
  areas = ["nsys","leftArm","rightArm","rightLeg","leftLeg","head","rightFoot","leftFoot","rightHand","leftHand","rightEye","leftEye","back","neck","chest","abdomen"]
  areas.each do |area|
    woundmash.push eval("(Wounds.#{area} * 10) + Scars.#{area}")
  end
  return woundmash
end

no_kill_all
no_pause_all
hide_me
debug = false
silence_me

asc_tps = 0
asc_exp = 0
asc_new = 0
asc_pulse = 0
asc_next = 50000
ascTime = 0
ascTotal = 0

resource_cur = 0
resource_limit = 0
resource_total_cur = 0
resource_total_cur_limit = 0

xpnFirstTime = 0
nowTime = Time.now - 1
xpnNLT = xpnCur = xpnOld = xpnCap = xpnValue = xpnText = xpnHour = xpnLast = xpnTotal = oldBank = oldBounty = oldFavor = 0
oldRM = oldHP = oldMP = oldST = oldSP = oldXP = oldMD = oldSN = oldEN = oldIN = nil
oldWO = ubWoundsMash()
areas = ["nsys","leftArm","rightArm","rightLeg","leftLeg","head","rightFoot","leftFoot","rightHand","leftHand","rightEye","leftEye","back","neck","chest","abdomen"]
capped = false
firstpulse = true
capped = true if Char.level == 100
buffx = 3
buffy = 3
sizebx = 186
sizerx = 100
sizey = 15

$favor = CharSettings.to_hash
$favor[:symbol] ||= 0

time = Time.new
UserVars.uberbar_xp_history = Hash.new if UserVars.uberbar_xp_history.nil?
UserVars.uberbar_date = time - 3600*24 if UserVars.uberbar_date.nil?

if time.hour > 5 && UserVars.uberbar_day != time.day && UserVars.uberbar_xp_per_day != 0
	UserVars.uberbar_xp_history[UserVars.uberbar_date.to_date] = UserVars.uberbar_xp_per_day
	UserVars.uberbar_xp_per_day = 0
	UserVars.uberbar_day = time.day
	UserVars.uberbar_date = time
end

before_dying {
  puts("<closeDialog id='UberBar'/>")
}

add_commas = proc { |num|
   num.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
}

ublineloggl = "\"<label id='ublog'		value='Today:'			justify='4'	anchor_left='ubinjury'	align='n'		top='#{buffy+2}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinehourl = "\"<label id='ubhour'		value='AVG/Hr:'			justify='4'	anchor_left='ubinjury'	anchor_top='ublog'	top='#{buffy}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinelastl = "\"<label id='ublast'		value='Pulse:'			justify='4'	anchor_left='ubinjury'	anchor_top='ubhour'	top='#{buffy}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinerooml = "\"<label id='ubroom'		value='Room:'			justify='4'	anchor_left='ubinjury'	anchor_top='ublast'	top='#{buffy+2}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""

ublinesilvl = "\"<label id='ubsil'		value='Silver:'			justify='4'	anchor_left='ubinjury'	anchor_top='ubroom'	top='#{buffy+2}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinebountyl = "\"<label id='ubbounty'	value='Bounty:'			justify='4'	anchor_left='ubinjury'	anchor_top='ubsil'	top='#{buffy+2}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""

ublineloggv = "\"<label id='ublogv'		value='\#{UserVars.uberbar_xp_per_day}'		justify='6'	anchor_left='ublog'	align='n'		top='#{buffy+2}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinehourv = "\"<label id='ubhourv'		value='\#{xpnHour}'		justify='6'	anchor_left='ubhour'	anchor_top='ublogv'	top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinelastv = "\"<label id='ublastv'		value='\#{xpnLast + asc_pulse}'		justify='6'	anchor_left='ublast'	anchor_top='ubhourv'	top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublineroomv = "\"<label id='ubroomv'		value='\#{Room.current.id}'	justify='6'	anchor_left='ubroom'	anchor_top='ublastv'	top='#{buffy+2}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""

ublinesilvv = "\"<label id='ubsilv'		value='\#{UserVars.bank_silver_per_day}'	justify='6'	anchor_left='ubsil'	anchor_top='ubroomv'	top='#{buffy+2}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinebountyv = "\"<label id='ubbountyv'		value='\#{UserVars.bank_bounty_per_day}'	justify='6'	anchor_left='ubbounty'	anchor_top='ubsilv'	top='#{buffy+2}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""

ublinebars  = "\"<image id='ubbars'		name='PanelBackground'		justify='4'	anchor_left='ubinjury'	align='n'		top='#{buffy}' left='5' height='120' width='0'/>\""
ublineheal  = "\"<skin id='ubheal' name='healthBar' controls='health'		anchor_left='ubinjury'	anchor_top='ubbars'			top='#{buffy}' left='#{buffx+1}' width='0' height='#{sizey}'/><progressBar id='health'		value='\#{percenthealth}'	text='\#{checkhealth}/\#{maxhealth}'	customText='t' anchor_left='ubinjury' anchor_top='ubbars'	top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey}'/>\""
ublinemana  = "\"<skin id='ubmana' name='manaBar' controls='mana'		anchor_left='ubinjury'	anchor_top='ubheal'			top='#{buffy}' left='#{buffx}' width='0' height='#{sizey}'/><progressBar id='mana'		value='\#{percentmana}'		text='\#{checkmana}/\#{maxmana}'	customText='t' anchor_left='ubinjury' anchor_top='health'	top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey}'/>\""
ublinestam  = "\"<skin id='ubstam' name='staminaBar' controls='stamina'		anchor_left='ubinjury'	anchor_top='ubmana'			top='#{buffy}' left='#{buffx+1}' width='0' height='#{sizey}'/><progressBar id='stamina'	value='\#{percentstamina}'	text='\#{checkstamina}/\#{maxstamina}'	customText='t' anchor_left='ubinjury' anchor_top='mana'		top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey}'/>\""
ublinespir  = "\"<skin id='ubspir' name='spiritBar' controls='spirit'		anchor_left='ubinjury'	anchor_top='ubstam'			top='#{buffy}' left='#{buffx+1}' width='0' height='#{sizey}'/><progressBar id='spirit'		value='\#{percentspirit}'	text='\#{checkspirit}/\#{maxspirit}'	customText='t' anchor_left='ubinjury' anchor_top='stamina'	top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey}'/>\""

ublinefavorl = "\"<label id='ubfavor'		value='Favor'	anchor_top='ubinjury'	top='#{buffy+2}' left='0' height='#{sizey}' width='#{sizerx}'/>\""
ublinefavorv = "\"<label id='ubfavorv'		value='\#{add_commas.call($favor[:symbol])}'	anchor_top='ubfavor'	top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx}'/>\""

ublineascnext  = "\"<progressBar id='ubascnext'	value='\#{100.0 - (asc_next.to_f / 50000.0 * 100)}'			text='\#{asc_next} until next ATP [ \#{asc_tps} ]'				anchor_top='ubspir'	top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublinenext  = "\"<progressBar id='ubnext'	value='\#{xpnValue}'			text='\#{xpnText}'				anchor_top='ubascnext'	top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublinemind  = "\"<progressBar id='ubmind'	value='\#{XMLData.mind_value}'		text='\#{XMLData.mind_text}' customText='t'	anchor_top='ubnext'	top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublinestan  = "\"<progressBar id='ubstnc'	value='\#{XMLData.stance_value}'	text='\#{XMLData.stance_text}'			anchor_top='ubmind'	top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublineencm  = "\"<progressBar id='ubencm'	value='\#{XMLData.encumbrance_value}'	text='\#{XMLData.encumbrance_text}'		anchor_top='ubstnc'	top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublineresource  = "\"<progressBar id='ubresource_cur'	value='\#{(resource_cur.to_f / resource_limit.to_f) * 100}'	text='\#{add_commas.call(resource_cur)}/\#{add_commas.call(resource_limit)}'	anchor_top='ubencm' 	top='#{buffy}' left='#{buffx}' width='#{sizebx/2 - buffx}' height='#{sizey}'/>\""
ublineresource  += "\"<progressBar id='ubresource_total'	value='\#{(resource_total_cur.to_f / resource_total_cur_limit.to_f) * 100}'	text='\#{add_commas.call(resource_total_cur)}/\#{add_commas.call(resource_total_cur_limit)}'		anchor_top='ubencm' anchor_left='ubresource_cur'	top='#{buffy}' left='#{buffx}' width='#{sizebx/2}' height='#{sizey}'/>\""

openLines = [
  "<closeDialog id='UberBar'/>",
  "<openDialog type='dynamic' id='UberBar' title='#{Char.name}'s Uberbar' target='UberBar' location='main' height='282' width='190' resident='true'>",
  "<dialogData id='UberBar'>",
  "<skin id='ubinjury' name='InjuriesPanel' controls='nsys,leftArm,rightArm,rightLeg,leftLeg,head,rightFoot,leftFoot,rightHand,leftHand,rightEye,leftEye,back,neck,chest,abdomen' top='5' left='5' width='100' height='150' align='nw'/>"]
tosend = openLines.join
tosend += ubWoundsFullDis()
openLines = [eval(ublineloggl), eval(ublinehourl), eval(ublinelastl), eval(ublinerooml), eval(ublinesilvl), eval(ublinebountyl), eval(ublineloggv), eval(ublinehourv), eval(ublinelastv), eval(ublineroomv), eval(ublinesilvv), eval(ublinebountyv), eval(ublinebars), eval(ublineheal), eval(ublinemana), eval(ublinestam), eval(ublinespir), eval(ublineascnext), eval(ublinenext), eval(ublinemind), eval(ublinestan), eval(ublineencm)]
if Society.status =~ /Voln/
	openLines += [eval(ublinefavorl), eval(ublinefavorv)]
end
if Stats.prof =~ /Monk|Sorcerer|Wizard|Bard/
	openLines.push(eval(ublineresource))
end
tosend += openLines.join
tosend += "</dialogData></openDialog>"

puts(tosend)

loop {
  wait_while { (oldHP == checkhealth and oldMP == checkmana and oldST == checkstamina and oldSP == checkspirit and oldXP == XMLData.next_level_text and oldMD == XMLData.mind_text and oldSN == XMLData.stance_text and oldEN == XMLData.encumbrance_text and oldIN == XMLData.injuries.to_s and ((oldRM == Room.current.id and !checkgrouped) or checkgrouped) and Time.now - nowTime < 5) or running? 'go2' }
  #echo "Time diff: #{Time.now - nowTime}"
  nowTime = Time.now
  doLines = "<dialogData id='UberBar'>"
  
  if oldHP != checkhealth		then echo "updated health" if debug	; oldHP = checkhealth			; doLines += eval(ublineheal) end
  if oldMP != checkmana			then echo "updated mana" if debug	; ascTime = 0 if oldMP < checkmana ; oldMP = checkmana			;  doLines += eval(ublinemana) end
  if oldST != checkstamina		then echo "updated stamina" if debug	; oldST = checkstamina			; doLines += eval(ublinestam) end
  if oldSP != checkspirit		then echo "updated spirit" if debug	; oldSP = checkspirit			; doLines += eval(ublinespir) end
  if oldMD != XMLData.mind_text		then echo "updated mind" if debug	; oldMD = XMLData.mind_text		; ascTime = 0; doLines += eval(ublinemind) end
  if oldSN != XMLData.stance_text	then echo "updated stance" if debug	; oldSN = XMLData.stance_text		; doLines += eval(ublinestan) end
  if oldEN != XMLData.encumbrance_text	then echo "updated encumbr" if debug	; oldEN = XMLData.encumbrance_text	; doLines += eval(ublineencm) end
  if oldRM != Room.current.id		then echo "updated room" if debug	; oldRM = Room.current.id		; doLines += eval(ublineroomv) end
  
  if oldBank != UserVars.bank_silver_per_day		then echo "updated bank" if debug	; oldBank = UserVars.bank_silver_per_day		; doLines += eval(ublinesilvv) end
  if oldBounty != UserVars.bank_bounty_per_day		then echo "updated bounty" if debug	; oldBounty = UserVars.bank_bounty_per_day		; ascTime = 0; doLines += eval(ublinebountyv) end
  if oldFavor != $favor[:symbol]					then echo "updated favor" if debug	; oldFavor = $favor[:symbol]		; doLines += eval(ublinefavorv) end
  
  if Time.now.to_i - ascTime > 60
	  asc_new = asc_exp
	  ascTime = Time.now.to_i
	  hide_lines = done = false
	  gotResources = false
		action = proc { |server_string|
			if hide_lines
				if server_string =~ /Ascension Exp: ([\d,]+)/
					asc_new = $1.delete(',').to_i
				elsif server_string =~ /Exp to next ATP: ([\d,]+)/
					asc_next = $1.delete(',').to_i
				elsif server_string =~ /ATPs: (\d+)/
					asc_tps = $1.to_i
				elsif server_string =~ /^Health:/
					gotResources = true
				elsif server_string =~ /Voln Favor: ([\d,]+)/
					$favor[:symbol] = $1.delete(',').to_i
				elsif server_string =~ /(?:Necrotic Energy|Essence|Motes of Tranquility|Lore Knowledge): ([\d,]+)\/([\d,]+)[\(\)A-Za-z\s:]+([\d,]+)\/([\d,]+)/
					resource_cur = $1.delete(',').to_i
					resource_limit = $2.delete(',').to_i
					resource_total_cur = $3.delete(',').to_i
					resource_total_cur_limit = $4.delete(',').to_i	
				elsif server_string =~ /<output class=/ and gotResources
					# End of the mono output, if got resources, then we can remove the hook
					DownstreamHook.remove('asc_xp')
					done = true
					#nil
				else
					if Time.now.to_i - ascTime > 3
						#echo "Timed out, marking done = true"
						DownstreamHook.remove('asc_xp')
						done = true
					end
				end
				nil
			# exp and resource both use mono font to display, so let's start hiding lines when we see the initial tag and don't output this line so that the font doesn't change
			elsif server_string =~ /<output class="mono"/
				hide_lines = true
				nil
			else
				if Time.now.to_i - ascTime > 3
					#echo "Timed out, marking done = true"
					DownstreamHook.remove('asc_xp')
					done = true
				end
				server_string
			end
		}
		DownstreamHook.add('asc_xp', action)
		put 'exp'
		put 'resource' 
		wait_until { done }
	end
  
  if oldXP != XMLData.next_level_text or asc_new != asc_exp	then echo "updated next_level" if debug ; 
  	asc_pulse = asc_new - asc_exp if asc_exp != 0
	asc_exp = asc_new
    xpnNLT = XMLData.next_level_text
    if xpnNLT =~ /( experience| until next level)/
      xpnCur = xpnNLT.delete(' experience').delete(' until next level').to_i
      xpnLast = xpnOld - xpnCur
      xpnLast *= -1 if xpnLast < 0
      xpnLast = 0 if xpnLast > 2499
    else
      xpnCur = 0
      xpnLast = 0
    end
    if firstpulse
      xpnFirstTime = Time.now - 1
      xpnTotal = 0
	  ascTotal = 0
      xpnLast = 0
      firstpulse = false
    end
    if capped
      xpnCap = (xpnCur / 2500 + 1) * 2500 - xpnCur
      xpnValue = 100 - (xpnCap / 25)
      xpnText = "#{xpnCap} until TP"
    else
      xpnValue = XMLData.next_level_value.to_i
      #xpnText = sprintf("Level: %2s         %6s TNL", Char.level, xpnCur)
	  xpnText = sprintf("Level: %2s  (%2s%)   %6s TNL", Char.level, xpnValue, xpnCur)
    end
    xpnTotal += xpnLast + asc_pulse
	ascTotal += asc_pulse
	UserVars.uberbar_xp_per_day += xpnLast + asc_pulse
	UserVars.save()
    xpnHour = ((1.00 * xpnTotal) / ((nowTime - xpnFirstTime)/3600.00)).to_i
    xpnOld = xpnCur
    oldXP = XMLData.next_level_text
	
	if enable_loud_xp and xpnLast > 0
		echo sprintf("********  %2s EXP Gained this Pulse ********* (%2s)+", xpnLast, Time.now.strftime('%X'))
	end
	
    doLines += eval(ublineascnext) + eval(ublinenext) + eval(ublineloggv) + eval(ublinehourv) + eval(ublinelastv)
	if Stats.prof =~ /Monk|Sorcerer|Wizard|Bard/
		doLines += eval(ublineresource)
	end
end
  if oldIN != XMLData.injuries.to_s
    echo "updated injuries" if debug
    newWO = ubWoundsMash()
    newWO.length.times { |n|
      if oldWO[n] != newWO[n] then doLines += ubWoundsChangeDis(areas[n]) end
    }
    oldIN = XMLData.injuries.to_s
    oldWO = ubWoundsMash()
  end
  doLines += "</dialogData>"
  puts(doLines) if doLines != "<dialogData id='UberBar'></dialogData>"
}
