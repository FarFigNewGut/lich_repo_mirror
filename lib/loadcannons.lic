# loadcannons: load up your cannons!
# Author: Licel





def finishScript
  echo "*****ALL FIXED! Exiting."
  exit
end
class ShipRoom
  attr_accessor :damage,:pathTo,:pathFrom, :title, :exits

  def initialize(params = {})
    @pathTo = params.fetch(:pathTo,[""])
    @pathFrom = params.fetch(:pathFrom,[""])
    @exits = params.fetch(:exits,'error')
    @title = params.fetch(:title,'error')
    @damage = params.fetch(:damage,'unfixed')
  end

end
ASSESS_FORMAT = /\[Health of your ship: (\d*)\/(\d*)\]/
SHIP_FORMAT = /\[(.*),.*\]/
DAMAGE_FORMAT = /\s*(.*):\s*It appears to be .* damaged\./
FIXED_FORMAT = /\s*(.*):\s*You cannot seem to find any damage\./
AssessLine = Struct.new(:current, :total)
Shipline = Struct.new(:name)
Damageline = Struct.new(:title)
shiprooms = []
boatswainBonus = 0
shipdesc = fput "look"
shipname = shipdesc.match(SHIP_FORMAT) { |l| Shipline.new(*l.captures)}

case shipname.name
when "Man O' War"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Man O' War, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Man O' War, Crew Quarters]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["e"],:title => "[Man O' War, Mess Hall]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e","e"],:pathFrom => ["w","w"],:exits => ["e"],:title => "[Man O' War, Social Room]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Man O' War, Crow's Nest]")
  shiprooms.push(sr)
  #sr = ShipRoom.new(:pathTo => ["u","e","e","u"],:pathFrom => ["d","w","w","d"],:exits => ["d"],:title => "[Man O' War, Crow's Nest]")
  #shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Man O' War, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w","e"],:title => "[Man O' War, Forward Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Man O' War, Mid Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e","e"],:pathFrom => ["w","w","w","d"],:exits => ["w"],:title => "[Man O' War, Bow]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Man O' War, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Man O' War, Captain's Quarters]")
  shiprooms.push(sr)
when "Frigate"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Frigate, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Frigate, Crew Quarters]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["e"],:title => "[Frigate, Kitchen]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e","e"],:pathFrom => ["w","w"],:exits => ["e"],:title => "[Frigate, Social Room]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Frigate, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Frigate, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Frigate, Forward Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w"],:title => "[Frigate, Bow]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Frigate, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Frigate, Captain's Quarters]")
  shiprooms.push(sr)
when "Carrack"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Carrack, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Carrack, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Carrack, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Carrack, Forward Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w"],:title => "[Carrack, Bow]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Carrack, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Carrack, Captain's Quarters]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["w","e"],:title => "[Carrack, Mess Hall]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Carrack, Crew Quarters]")
  shiprooms.push(sr)
when "Brigantine"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Brigantine, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Brigantine, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Brigantine, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Brigantine, Forward Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Brigantine, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Brigantine, Captain's Quarters]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["w","e"],:title => "[Brigantine, Kitchen]")
  shiprooms.push(sr)
when "Sloop"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up"],:title => "[Sloop, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["up"],:title => "[Sloop, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Sloop, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Sloop, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Sloop, Captain's Quarters]")
  shiprooms.push(sr)
else
  echo "Your ship is not supported. Sucker. Hit up Licel."
  exit
end
targetroom = shiprooms.select {|x| x.title == '[' + shipname.name + ', Main Deck]'}[0]

loop {
  #shiprooms.select {|x| x.damage == 'unfixed'}.each { |n| echo n.title}
  roomtitle = fput "look"
  found = shiprooms.select {|x| x.title == roomtitle}
  myroom = found[0]
  if found.length > 1
    result = fput "peer down"
    if result == "You peer down but see nothing of interest."
      myroom = found.select{|x| !x.exits.include? "d"}
      myroom = myroom[0]
    else
      myroom = found.select{|x| x.exits.include? "d"}
      myroom = myroom[0]
    end
  end

  myroom.pathFrom.each { |x| move x }

  pause 0.5
  waitrt?


  if(GameObj.left_hand.name != 'cannon ball' && GameObj.right_hand.name != 'cannon ball')
    ballstatus = fput "get ball"
  end
  pause 0.5
  waitrt?
  if ballstatus.include? 'no more'#this is probably not the correct phrase to match on
    echo "BALLESS? IS THERE A WORSE FATE?"
    exit
  end
  #echo 'targetroom path to thing:'
  #echo targetroom
  #exit
  targetroom.pathTo.each { |x| move x }
  pause 0.5
  loadResult = fput 'load cannon'
  if loadResult.include? 'already appears to be loaded'
    shiprooms.find { |x| x.title == targetroom.title}.damage = 'fixed'
    targetroom = shiprooms.find { |x| x.title.include?('Deck') && x.damage == 'unfixed'}
    if targetroom == nil
      echo 'all loaded!'
      exit
    end
  end

  pause 0.5
  waitrt?

}
