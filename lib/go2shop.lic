=begin
    Searches for a particular player's shop and tries to takes you there.

    Usage:
       ;go2shop <partial name of shop>

    Now relies on ;findshop for the shop database to not have so much code duplicated.  Findshop's code originated here.

    go2shop has a memory of previous shop queries that will last either one login or 12 hours, whichever is shorter.
    You can forcibly reset its memory with:
       ;go2shop reset

	  author: LostRanger (thisgenericname@gmail.com)
	  game: GS
	  tags: utility
	  required: Lich >= 4.6.0.

  version: 0.3 (2019-09-29)

  changelog:
    version 0.3 (2019-09-29)
      * Now depends on ;findshop being available, and will automatically download it if needed.

    version 0.2 (2019-05-28)
      * Now reports the shop entrance name and outside room number upon arrival.
      * No longer launches go2 to travel when already in the target room.
      * When pausing before a long journey, report the town/location being travelled to in addition to the room title.
      * If a shop is mapped (IMHO bad practice), remember its room number and go2 directly.

    version 0.1 (2019-05-01)
      * Initial release.
=end

# [UPDATED] ;go2shop 0.2 released with minor quality-of-life improvements.  ;go2shop allows you to go to a player shop by partial player or shop name, even if it is not mapped.

module Go2ShopScript
    VERSION = '0.3 (2019-09-29)'

    def self.visit_room(id)
        if id == Room.current.id
            echo "Already at target room"
            return
        end
        Script.run("go2", id.to_s)
        # start_script 'go2', [id]
        # wait_while{Script.running.find{|x| x.name=="go2"}}

        # If we're not in our target room, assume go2 was killed and die with it.
        if Room.current.id.to_s != id.to_s
            echo "go2 stopped before arriving at our destination.  Assuming it was killed and stopping here."
            exit
        end
        echo "Arrived at destination"
    end

    def self.visit_adjacent_room(candidates)
        wayto = Room.current.wayto
        candidates.each{|id|
            dir = (wayto[id] or wayto[id.to_s])
            next unless dir
            if dir.is_a?(String)
                move dir
                return true
            else
                dir.call
                return true
            end
        }
        return false  # Never found an adjacent room.

    end

    def self.visit_shop(shop)
        if shop[:room_id] then
            if shop[:shop_room_id]
                self.visit_room(shop[:shop_room_id])
            else
                self.visit_room(shop[:room_id])
                move "go ##{shop[:exist]}"
                echo "Went to #{shop[:exist_article]}#{shop[:exist_name]} in room #{shop[:room_id]}"
                shop[:shop_room_id] = Room.current.id
            end
            return
        end

        unless shop[:room_title]
            echo "Unable to locate shop (no room name listed): #{shop.inspect}"
            exit
        end

        exist = shop[:exist]

        unless exist
            echo "Unable to locate shop (no exist found): #{shop.inspect}"
            exit
        end

        # Try to find rooms that the shop might be in
        room_location = nil
        pending_rooms = Room.list.find_all{|room| room.title.include?(shop[:room_title]) }.map{|room| room_location ||= room.location; room.id}.to_set
        if pending_rooms.empty?
            echo "Unable to locate shop (room title not found in mapdb): #{shop.inspect}"
            exit
        end


        echo "Searching for shop in #{pending_rooms.length} room(s)..."

        first_loop = true

        until pending_rooms.empty?
            nextroom = Room.current.find_nearest(pending_rooms)
            unless nextroom
                echo "I couldn't find a route to that shop."
                echo "If it is in Mist Harbor and you aren't (or vice versa), try: ;go2 --fwi-trinket=<trinket>, then try again."
                exit
            end
            if first_loop
                first_loop = false

                path_length = Room.current.path_to(nextroom).length
                if path_length > 40
                    respond "There are approximately #{path_length} rooms between you and the shop's neighborhood of #{shop[:room_title]} in #{room_location || shop[:town]}."
                    respond "\nTo go here, unpause the script.  To abort, kill the script."
                    pause_script
                end
            end

            self.visit_room(nextroom)

            while true
                pending_rooms.delete?(Room.current.id)
                pending_rooms.delete?(Room.current.id.to_s)

                if GameObj.loot.find{|x| x.id==exist}
                    shop[:room_id] = Room.current.id
                    move "go ##{exist}"
                    echo "Learned that #{shop[:name]} is #{shop[:exist_article]}#{shop[:exist_name]} in room #{shop[:room_id]}"
                    shop[:shop_room_id] = Room.current.id
                    return
                end
                break unless self.visit_adjacent_room(pending_rooms)
            end
        end
    end

    def self.get_api(download=true)
        findshop = $api_findshop
        unless findshop
            if Script.exists?("findshop")
                Script.run("findshop", {:force => true, :args => '--api'})
                findshop = $api_findshop
            end
        end

        if findshop
            if findshop::API_VERSION > 1999
                echo "Your currently installed version of Findshop is too new to support this version of Go2Shop"
                echo "Please try updating this script with #{$lich_char}repo download #{@script.name} and try again."
                exit
            elsif findshop::API_VERSION >= 1000
                return findshop
            else
                echo "Your currently installed version of Findshop is too old to support this version of Go2Shop"
                exit unless download
            end
        else
            echo "This script now requires Findshop (to avoid duplicating logic between two scripts.)"
            if download
                echo "Attempting to automatically download the latest version of Findshop..."
            else
                echo "Please install it with #{$lich_char}repo download findshop.lic"
                exit
            end
        end

        Script.run("repo", {:force => true, :args => 'download findshop.lic'})
        return get_api(false)

    end

    def self.run(script)
        @script = script
        findshop = self.get_api

        @stormfront = ($frontend == 'stormfront')
        @script.want_downstream = false
        @script.want_downstream_xml = true

        args = script.vars[0].strip.downcase
        if args.empty?
            msg = []
            msg << "#{@script.name} version #{VERSION} (using findshop version #{findshop::VERSION})"
            msg << "Usage: #{$lich_char}#{@script.name} <search string> - Go to the shop matching this name."
            msg << "Usage: #{$lich_char}#{@script.name} reset           - Clear the cache of shop directory information."
            msg << ""
            msg << "Use #{$lich_char}findshop to browse a shop rather than travelling to it."
            respond msg
            exit
        end

        if args == 'reset'
            findshop::reset_database
        end

        shop = findshop::find_shop(args)
        exit unless shop
        shop = findshop::get_shop(shop)
        visit_shop(shop)
    end
end

Go2ShopScript.run(script)


# ;echo Room.list.find_all{|x| x.title.include?("[East Row, Ebonwood Way]")}.inspect
#
#