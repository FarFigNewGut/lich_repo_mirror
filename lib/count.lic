=begin

        Drafix's uber string occurence counting script!
        Emulates psinet count functionality
		
		Ex:
		;count Drafix just bit the dust!
		;count
		
            
            Bugs?  Email me - Franknozly@gmail.com
			-Drafix

=end
@trackedlines = CharSettings[:lines] ||= Hash.new
@regex = ''
regexbuild = proc {
	return if @trackedlines.empty?
	@regex = '('
	@trackedlines.each{|key,value|
		@regex << key << '|'
	}
	@regex.chop!
	@regex << ')'
}
list = proc {
	respond
	respond 'Strings Currently Tracked:'
	respond 'times                   string'
	respond '-----   ----------------------------------------'
	@trackedlines.each_pair{|string, occurence|
		string = string.gsub(/\\/, '')
		respond "#{occurence.to_s.rjust(5)}   [#{string.ljust(1)}]"
	}
	respond
}

action = proc { |client_string|
	if client_string =~ /^(?:<c>)?;#{script.name} (.*)?$/i
		args = $1.strip
		args = args.split(' ')
		case args[0]
			when /help/i
				respond <<-instructions
				
				
        Drafix's uber string occurence counting script!
        
        How to use:
            Step 1: add the script to your favs, ;favs add count
            Step 2: add the strings you want to count 
                    ex: ;count abc
            Step 3: ????
            Step 4: Profit!
                        
            
        Options:
            help -      You're reading it
			
            list -      Displays all tracked strings and their occurence
            
            remove -    Removes a line from tracking
                            ;count remove abc
                            
            clear -     Removes all tracking info
            
            Bugs?  Email me - Franknozly@gmail.com
			
			
				instructions
		
			when 'list'
				list.call
			when 'remove'
			string = args[1..-1].join(' ')
				result = @trackedlines.delete(Regexp.escape(string))
				if result
					regexbuild.call
					respond "[#{string}] removed from tracking list"
				else
					respond "could not find [#{string}] in tracking list"
				end
			when 'clear'
				@trackedlines.clear
				respond "removed all strings from tracking list"
			when 'set'
				string = args[1..-2].join(' ')
				count = args[-1].to_i
				respond "Setting [#{string}] to #{count} occurences."
				@trackedlines[Regexp.escape(string)] = count
			else
				if args.empty?
					respond "Can't track an empty string"
					return
				end
				string = args[0..-1].join(' ')#.gsub(/([\-\^*?$.\/])/, '\\\\\1' )
				
				@trackedlines[Regexp.escape(string)] ||= 0
				regexbuild.call
				respond 'Now Tracking: '<< string
			end
		nil
	elsif client_string =~ /^(?:<c>)?;#{script.name}$/
		list.call
		nil
	else
		client_string
	end
}

UpstreamHook.add('count', action)
before_dying { UpstreamHook.remove('count'); }




regexbuild.call

while line = get
	if result = line.scan(/#{@regex}/)
		result = result.flatten
		result.each{|thing|
			@trackedlines[Regexp.escape(thing.to_s)] += 1
			#.gsub(/([\-\^*?$.\/])/, '\\\\\1' )
		}
	end
end