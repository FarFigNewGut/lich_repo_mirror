=begin
# 
# author: Lieo
# version: 1.1
# 
# tags: bank, silvers, bank account
#
# Adds lines to 'bank account' output showing total change in your accounts since the script started, average silvers gained/lost per hour since starting, and total change since the last time you typed 'bank account'.
#
# Changelog:
# 2020-05-08 (v1.1): Fixed number display for negative numbers
#
=end

toggle_upstream

class BankTracker
    def initialize
        now = Time.now
        @start_silver = nil
        @start_time = now
        @current_silver = nil
        @last_silver = nil
        @find_total = true
        @print = false
        @buffer = nil
        @total = nil
        @hook_name = "BankTracker::#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}" # LR Shoutout

        before_dying {
            UpstreamHook.remove(@hook_name)
            DownstreamHook.remove(@hook_name)
        }

        self.bootstrap
    end

    def bootstrap
        UpstreamHook.add(@hook_name, proc{|line|
            next line unless line =~ /^\<c\>bank?\s+(ac|acc|acco|accou|accoun|account)\s*$/i
            @find_total = true
            next line
        })

        DownstreamHook.add(@hook_name, proc{|line|
            if @print
                @print = false
                first_label = "Gained Since Start"
                second_label = "Average Per Hour"
                third_label = "Gained Since Last Shown"
                self.message (" " * [0, @buffer.length - first_label.length].max).concat("#{first_label}: #{self.fix_num self.since_start}")
                self.message (" " * [0, @buffer.length - second_label.length].max).concat("#{second_label}: #{self.fix_num self.per_hour}")
                self.message (" " * [0, @buffer.length - third_label.length].max).concat("#{third_label}: #{self.fix_num self.since_last}")
            end

            next line unless @find_total
            reg = /^(\s+Total)\:\s+([0-9,]+)\s*$/
            next line unless line =~ reg
            @buffer, @total = line.match(reg).captures
            now_silver = @total.gsub(/[\s,]/ ,"").to_i

            if @start_silver.nil?
                @start_silver = now_silver
                @current_silver = now_silver
            end

            @last_silver = @current_silver
            @current_silver = now_silver
            @find_total = false
            @print = true

            next line
        })

        if @start_silver.nil?
            fput "bank account"
        end

        while line = get
            # Keep alive
        end
    end

    def since_start
        if @current_silver.nil? || @start_silver.nil?
            0
        end
        @current_silver - @start_silver
    end

    def since_last
        if @current_silver.nil? || @last_silver.nil?
            0
        end
        @current_silver - @last_silver
    end

    def per_hour
        ((1.00 * self.since_start) / ((Time.now - @start_time)/3600.00)).to_i
    end
    
    def fix_num(number)
        is_neg = number < 0
        whole, decimal = number.abs.to_s.split(".")
        whole_with_commas = whole.chars.to_a.reverse.each_slice(3).map(&:join).join(",").reverse
        (is_neg ? "-" : "").concat [whole_with_commas, decimal].compact.join(".")
    end

    def message(text)
        string = ''
        if $fake_stormfront then string.concat("\034GSL\r\n ") else string.concat("<pushBold\/>") end
        if (text.index('\n') )
            text.split('\n').each { |line| string.concat("#{line}") }
        else
            string.concat(text)
        end
        if $fake_stormfront then string.concat("\034GSM\r\n ") else string.concat("<popBold\/>") end
        _respond string
    end
end

BankTracker.new
