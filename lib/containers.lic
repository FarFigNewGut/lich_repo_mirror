=begin
	
	This script emulates the containers function in Psinet
	
	Ex: 
	'cloak' => 'look in my cloak'
	'cloak item' => 'put item in my cloak'

	update: a rename of containers2 to containers1. -thx to whoever upped containers2.
	update: merged containers3 with my code (thanks to whoever did that one)
	
	By Drafix

=end

hide_me
i_stand_alone

bags = [
	'backp',
	'backpack',
	'bag',
	'band',
	'beaker',
	'belt',
	'bodice',
	'boot',
	'bur',
	'burn',
	'cape',
	'case',
	'cloak',
	'coat',
	'disk',
	'gear',
	'glove',
	'great',
	'greatcloak',
	'har',
	'harn',
	'harness',
	'hat',
	'hav',
	'jack',
	'jar',
	'key',
	'kilt',
	'kit',
	'knap',
	'knapsack',
	'long',
	'longc',
	'longcoat',
	'pack',
	'pants',
	'ph',
	'pouch',
	'purse',
	'quiv',
	'quiver',
	'reti',
	'robe',
	'robes',
	'ruck',
	'rucksack',
	'sack',
	'sat',
	'satch',
	'satchel',
	'scabbard',
	'scarf',
	'sheath',
	'shirt',
	'sling',
	'tool',
	'toolkit',
	'trou',
	'tube',
	'tunic',
	'vest',
]

begin
	action = proc { |client_string|
		if client_string =~ /^(?:<c>)?\b(#{bags.join('|')})\b(.*)/o
			container = $1
			item = $2.strip
			preposition = 'in'
			preposition = 'on' if container == 'key'
			
			if container == 'disk'
				container = Char.name + ' ' + (GameObj["#{Char.name} disk"].noun || GameObj["#{Char.name} coffin"].noun || '')
			elsif container == 'key'
        		container = "my keyring"
			else
				container = "my #{container}"
			end

			if item.empty?
				"look #{preposition} #{container}"
			else
				"put #{item} #{preposition} #{container}"
			end			
		else
			client_string
		end
	}
	UpstreamHook.add('containers', action)
	mutex = Mutex.new
	resource = ConditionVariable.new

	mutex.synchronize {
		resource.wait(mutex)
	}
ensure
	UpstreamHook.remove('containers')
end
