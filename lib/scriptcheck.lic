=begin

  This script echoes every line to the familiar window, unless it
  has been seen more than five times before.

  Because script checks can't be seen without a script...

  Author: Alastir (Tillmen)

=end

hide_me
require 'yaml'

module ScriptCheck
  # Path to the YAML file where the @count hash is persisted between runs
  @yaml_file ||= File.join(DATA_DIR, XMLData.game, XMLData.name, 'scriptcheck.yaml')

  # Patterns for lines that should be ignored by the script
  @ignore_patterns ||= [
    /^You offer to sell/,
    /^.* takes your/,
    /^You ask .*/,
    /^The .* takes/,
    /^You analyze/,
    /^Try as you might/,
    /^You can tell that/,
    /^You might be able to/,
    /^You get no sense/,
    /^You summon/,
    /^As you place/,
    /^You search through/,
    /^You (?:open|close)/,
    /^You want a locksmith to open/,
    /^This .* has the Liquid Extractor unlock/,
    /An iron portcullis is raised/,
    /^\[.*?\]\-[A-z]+\:|^\[server\]\: "/,
    /\[LNet\]|\[Merchant\]|\[Realm\]|\[General\]|\[Help\]|\[OOC\]/,
    /^You notice/i,
    /^You (?:put|remove|retrieve|carefully|slip)/,
    /^In the/,
    /^Today is/,
    /^Also here/,
    /just (?:arrived|went)/,
    /bandit|brigand|highwayman|marauder|mugger|outlaw|robber|rogue|thief|thug/,
    /^Obvious (?:exits|paths): /,
    /^(?:Magic Items|Special|Armor|Weapons|Containers|Wands|Gems|Herbs|Food\/Drink|Clothing|Misc) \[\d+\]: /,
    /^\[[^\]]+\](?: \(\d+\))?$/, # room titles
  ]

  class << self
    # Saves the @count hash to the YAML file in a separate thread
    # so the script can continue running while saving.
    def save_count
      Thread.new do
        begin
          File.open(@yaml_file, 'w') { |f| f.write(@count.to_yaml) }
        rescue => e
          echo "Error saving count: #{e}"
        end
      end
    end

    # Loads the @count hash from the YAML file, CharSettings, or initializes a new hash
    def load_count
      @count =
        if File.exist?(@yaml_file)
          YAML.load_file(@yaml_file) || Hash.new
        elsif !CharSettings['count'].nil? && !CharSettings['count'].empty?
          new_count = CharSettings['count'].dup
          CharSettings['count'] = {}
          new_count
        else
          echo "No previous count found, starting fresh."
          Hash.new
        end
    rescue => e
      echo "Error loading count: #{e}"
      @count = Hash.new
    end

    # Removes entries from @count seen fewer than 5 times and saves the result
    # If silent is true, suppresses output
    def compact(silent: false)
      echo "Before compact: #{@count.count}" unless silent
      @count.delete_if { |_key, value| value < 5 }
      echo "After compact: #{@count.count}" unless silent
      save_count
    end

    # Returns true if the line should be ignored (matches @ignore_patterns or CritRanks)
    def should_ignore?(line)
      @ignore_patterns.any? { |pattern| line =~ pattern } || CritRanks.parse(line).keys.any?
    end

    # Normalizes a line by removing numbers and whitespace
    def normalize_line(line)
      line.gsub(/[0-9\s]+/, '')
    end

    # Processes a single line: increments count, echoes if <= 5, skips ignored lines
    def process_line(line)
      return if should_ignore?(line)
      mod_line = normalize_line(line)
      if @count[mod_line].to_i < 5
        @count[mod_line] = @count[mod_line].to_i + 1
        Lich::Messaging.stream_window(line, "familiar")
      end
    end

    # Main loop: loads count, sets up cleanup, processes lines, periodically saves
    def main
      load_count
      before_dying do
        compact
        save_count
      end
      compact
      last_save_time = Time.now
      last_saved_count = @count.dup

      while (line = get)
        process_line(line)
        if Time.now - last_save_time > 300 # 5 minutes
          if last_saved_count != @count
            save_count
            last_saved_count = @count.dup
          end
          last_save_time = Time.now
        end
      end
    end
  end
end

ScriptCheck.main
