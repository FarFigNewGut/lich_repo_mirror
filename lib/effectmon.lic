=begin
  EffectMon is a supplemental script to be used with ProfanityFE.
  Allows for sending effect timers to specific template xmls.
  See template\eleazzar.xml for sample on how to utilize.

        author: elanthia-online
  contributors: Eleazzar
          game: Gemstone
          tags: profanityfe, effects, timers
       version: 1.0.0

  Version Control:
  Major_change.feature_addition.bugfix
  v1.0.0 (2024-08-14)
    - initial release
=end

module EffectMon
  # would love to read this from config...
  @WARNING_COLOR ||= "bf4d80"
  @WINDOW_WIDTH ||= 30
  @CATEGORY_MAX ||= 30
  @CLEAR ||= %[<clearStream id="effects"/>]
  @PUSH ||= %[<pushStream id="effects"/>]
  @POP ||= %[<popStream/>]
  @spell_cache = {}
  @buff_cache = {}
  @debuff_cache = {}
  @cooldown_cache = {}

  def self.update_cache(hash, key, new_end)
    # this is tricky, sometimes there is a 1 sec discrepancy
    # could be server time drift is being corrected somewhere
    # or could be a rounding error inside lich, so just be approx
    new_start = Time.now.floor.to_i
    new_end = new_end.floor.to_i
    # update the cache if we don't have this key, or the end time was updated
    # and is more than 1 second off
    if !hash.key?(key) || (hash[key][:end] - new_end).abs > 1
      hash[key] = { start: new_start, end: new_end }
    end
  end

  def self.update_effects(active_effects, cache, bar_id)
    # remove the spell number keys and any effects that have already ended
    effects = active_effects.to_h.reject { |k, v| k.is_a?(Integer) or v <= Time.now }
    # for any effects that were previously in the list, mark them for deletion
    # as they have been dropped from the player and they should be notified
    (cache.keys - effects.keys).each do |key|
      # if it was previously in the cache and had an end_time > Time.now
      # it was a dropped effect so we should add it back with an end_time of now
      if cache.key?(key) && cache[key][:end] > Time.now.floor.to_i
        effects[key] = -1
      end
    end

    sorted_effects = effects.sort_by { |e, _end_time| e }

    i = 0
    sorted_effects.each { |e, end_time|
      self.update_cache(cache, e, end_time)
      total_duration = cache[e][:end] - cache[e][:start]
      elapsed_time = Time.now.floor.to_i - cache[e][:start]
      if cache[e][:delete]
        cache.delete(e)
        next
      end
      cache[e][:delete] = (elapsed_time >= total_duration) || total_duration <= 0
      remaining = [total_duration - elapsed_time, 0].max
      hours = remaining / 3600
      minutes = (remaining % 3600) / 60
      seconds = remaining % 60
      remaining_str = format('[%02d:%02d:%02d]', hours, minutes, seconds)
      max_label_length = @WINDOW_WIDTH - remaining_str.length
      # if the effect name is longer than we have room for, remove vowels
      if e.length > max_label_length
        e = e.gsub(/[aeiou]/, '')
      end
      # pad the center with . and prioritize keeping the remaining timer over all else
      label = e.slice(0, max_label_length).ljust(max_label_length, '.')
      # have to substitute single quotes to protect the xml from being misinterpreted
      # by the regex that profanity uses to process arbProgress bars
      label = "#{label}#{remaining_str}".gsub("'", "â€™")

      # change bg color to indicate the effect will expire
      # default color
      colors = %[colors='395573,9BA2B2']
      if cache[e][:delete]
        # deletion color
        # fill up the progress bar
        remaining = 1
        total_duration = 1
        colors = %[colors='8c4665,9BA2B2']
      elsif remaining <= 60
        # warcning color
        colors = %[colors='767339,9BA2B2']
      end
      _respond %[#{@PUSH}<arbProgress id='#{bar_id}#{i}' max='#{total_duration.to_i}' current='#{remaining.to_i}' label='#{label}' #{colors}></arbProgress>#{@POP}]
      i += 1
    }

    for j in i..@CATEGORY_MAX - 1 do
      _respond %[#{@PUSH}<arbProgress id='#{bar_id}#{j}' max='0' current='0' label='#{' ' * @WINDOW_WIDTH}'></arbProgress>#{@POP}]
    end
  end

  def self.main
    before_dying {
      _respond %[#{@PUSH}#{@CLEAR}#{@POP}]
    }
    loop {
      begin
        update_effects(Effects::Spells, @spell_cache, "spell")
        update_effects(Effects::Buffs, @buff_cache, "buff")
        update_effects(Effects::Debuffs, @debuff_cache, "debuff")
        update_effects(Effects::Cooldowns, @cooldown_cache, "cooldown")
        sleep 1
      end
    }
  end
end

EffectMon.main
