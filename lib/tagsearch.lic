=begin
--------------------------------------------------------------------------------
 Title : Tagsearch
 Date : 01/22/2013
 Author : Oweodry

 Use :
  ;tagsearch <phrase> <results>

 Details :
  Searches map database for tags matching search phrase, returns a specified 
  number of search results in order of nearest room. Provides room number, 
  title, and number of rooms to move through. Mostly just facilitates easy regex
  searches because some herb names are long and sometimes tags are created with 
  "some" preceeding the herb name. Only resorts to regex if no exact matches are
  found and will report the tag which matches the regex statement.

 Notes :
  - If no tags are found with exact phrase, a regex statement is made
  - May not list your current room in the top of the list with regex search
  - Distant rooms will take a while to respond (due to distance calculation)
  - My scripts: http://forum.gsplayers.com/showthread.php?73663

 Updates :
  - 01/22/2013 Released

 Thanks :
  - Tillmen for lich (regex search is basically copied from lich.rbw)

--------------------------------------------------------------------------------
=end

# Help text
if script.vars.find { |val| val =~ /\bhelp\b/i }
	respond("\n	Usage : ;tagsearch <phrase> <results>\n\n")
	respond("	   phrase	: Phrase to search for in tags")
	respond("	   results	: Number of results to return\n\n")
	exit
end

# Number of results to show
numshow = script.vars.find { |val| val =~ /\A\d+\z/ }.to_i
searchreg = script.vars.delete_if { |var| var =~ /\d/ }.join(".* ")+".*"
searchstr = script.vars.delete_if { |var| var =~ /\d/ }.join(" ")
if numshow == 0 then numshow = 3; end
target_tags = ""

# Perform a search for an exact match of the string
results = Room.current.find_all_nearest_by_tag("#{searchstr}")

# If no results returned, search for a regex version
if results.empty?
	# Basically copied from find_all_nearest_by_tag definition in lich.rbw
	target_list = Array.new
	target_tags = Hash.new
	# Changed this line to iterate over tags with any rather than include? which allows regex to work properly
	Map.list.each { |room| 
		if room.tags.any? { |tag| tag =~ /#{searchreg}/ }
			target_tags[room.id] = "- "+room.tags.find_all { |tag| tag =~ /#{searchreg}/ }.join(", ")
			target_list.push(room.id)
		end
	}
	previous, shortest_distances = Map.dijkstra(@id)
	target_list.delete_if { |room_num| shortest_distances[room_num].nil? }
	target_list.sort { |a,b| shortest_distances[a] <=> shortest_distances[b] }
	results = target_list
	# Report regex search term used
	respond("\n\tSeach term: /#{searchreg}/ , Results: #{numshow}\n\n")
else
	# Report exact string used
	respond("\n\tSeach term: \"#{searchstr}\" , Results: #{numshow}\n\n")
end


if results.empty?
	# No results found for exact string or regex
	respond("\tNo results!\n\n")
else
	# Report results
	results[0,numshow].each { |room| respond("\t#{room}\t: #{Room[room].title} - #{Room.current.path_to(room).size.to_i} rooms #{target_tags[room]}") }
	respond("")
end
