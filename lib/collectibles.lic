=begin
  withdraws or redeems EVERYTHING, you must be at a collectible room

  ;collect --withdraw
  ;collect --redeem

  Author: Ondreian
=end

alias :get_game_line :get

module Collectibles
  module Parser
    module Info
      def self.call()
        Script.current.want_downstream_xml = true
        put "collection info"
        table = []
        in_table = false
        last_line = nil
        while line = get_game_line
          break if line.eql?(%`<output class=""/>`)
          table << self.parse(line) if in_table && line.strip =~ /^\d+/ && !last_line.eql?(line)
          in_table = true if line =~ /Your collection is as follows:/
          last_line = line
        end
        Script.current.want_downstream_xml = false
        return table
      end

      def self.parse(line)
        if line.strip =~ %r`^(\d+).\s\(([a-zA-Z-'\s]+)\):\s+(\d+)`
          [$1, $2, $3.to_i]
        else
          fail "unexpected line:\n%s" % line
        end
      end
    end

    module All
      def self.call()
        Script.current.want_downstream_xml = true
        put "collection all"
        table = []
        in_table = false
        last_line = nil
        while line = get_game_line
          Log.out(line)
          break if line.eql?(%`<output class=""/>`)
          table << self.parse(line) if in_table && line.end_with?("*") && line.include?("<d cmd")
          in_table = true if line =~ /Your sets available to be collected are as follows:/
          last_line = line
        end
        Script.current.want_downstream_xml = false
        return table.compact
      end

      def self.parse(line)
        if line.strip =~ %r`<d cmd='(.*)'>`
          $1
        else
          fail "unexpected line:\n%s" % line
        end
      end
    end
  end

  def self.lootsack()
    container = GameObj.inv.find {|i| i.name.end_with?(Vars["lootsack"])} or fail "lootsack could not be found"
    return container if container.contents.is_a?(Array)
    fput "look in #%s" % container.id
    ttl = Time.now + 3
    wait_until {containers.contents.is_a?(Array) or Time.now > ttl}
  end

  def self.withdraw_all()
    empty_hands
    deposited = Parser::Info.call
    deposited.reverse.each {|n, item, count|
      respond "n=%s item=%s count=%s" % [n, item, count]
      count.times {
        fput "withdraw %s" % n
        wait_until {GameObj.right_hand.id}
        withdrawn_id = GameObj.right_hand.id
        fput "put #%s in #%s" % [withdrawn_id, self.lootsack.id]
        wait_until {self.lootsack.contents.map(&:id).include?(withdrawn_id)}
      }
    }
  end

  def self.redeem_all()
    loop {
      empty_hands
      redeemables = Parser::All.call
      break if redeemables.empty?
      redeemables.each {|cmd|
        fput "redeem %s" % cmd.split(" ").last
        sleep 1
        if GameObj.right_hand.id
          redeemed_id = GameObj.right_hand.id
          fput "put #%s in #%s" % [redeemed_id, self.lootsack.id]
          wait_until {self.lootsack.contents.map(&:id).include?(redeemed_id)}
        end
      }
    }
  end

  def self.main()
    return self.withdraw_all if Script.current.vars.include?("--withdraw")
    return self.redeem_all if Script.current.vars.include?("--redeem")
  end

  if Script.current.vars.include?("--test-info")
    Log.out Parser::Info.call
    exit
  end

  if Script.current.vars.include?("--test-all")
    Log.out Parser::All.call
    exit
  end

  self.main()
end