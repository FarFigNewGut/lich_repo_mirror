=begin
  Empties boxes on the ground by grabbing all the silver from them and then grabbing the items.
  
  If you have a lot of boxes, you should use someone else to hold the silver so you can pick up the loot.
  
  If you have a lot lot of boxes, or these aren't your boxes, you can move all the loot to a desginated container instead of taking it.
  
  Doesn't try to open the boxes, your picker should be doing that when they're ready if they're picking boxes on the ground.

  Optional parameters:

    silvermule     => name of the pc you want to give the silver to
    floorcontainer => where you want to put the good loot, can be the #id, noun, or "noun on table"
    everytime      => give coins every time you loot them
    slower         => go slower, because for some reason you disconnect when you run it
    
  Usage:
    ;xboxempty
    ;xbox silvermule floorcontainer
    
  Examples:  
    ;xbox Xanlin #8675309
    ;xbox Silverholder "in toolbox on table"
    ;xbox Tableboy toolbox everytime slower

  Optional loot report to separate window:
    ;e echo UserVars.xboxempty[:window] = true


  Add `slower` to the parameters if you need the script to go slower.

          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: loot, boxes, rogue, utility
  requires_trust: true
        required: Lich >= 4.6.4
         version: 22

=end
=begin
  patched can't put something that you can't hold

  add help for finding toolboxes hidden under hundreds of boxes

  updated with faster looking in boxes by LostRanger

  Sometimes gemstone decides you can only gather a handful of coins at a time.  Updated to speed that bit up. ( usually has to do with being grouped in a room with people not in your group )

=end

module XBoxEmpty
  UserVars.xboxempty = Hash.new if UserVars.xboxempty.nil?
  UserVars.xboxempty[:window] = false if UserVars.xboxempty[:window].nil?
  # TODO: handle items you can't pick up
  # You suddenly feel completely overwhelmed by the magical properties that the vaalorn plate corslet possesses.  Fearing for your life, you quickly drop it.
  def self.quickdo(command_queue, success_pattern, speed = 3, break_pattern = nil)
    return [], false if command_queue.length < 1;
    queue    = command_queue;
    pattern  = success_pattern ;
    pattern  = Regexp.union(success_pattern, break_pattern) if !break_pattern.nil?
    flock    = speed ;
    inflight = 0;

    output   = [];
    broken   = false;

    timeout  = 1+(queue.length*0.5);

    begin;
      Timeout::timeout(timeout, Interrupt) {
        while queue.length > 0 and !broken;
            put queue.pop;
            inflight += 1;
            while inflight > flock and !broken;
                nil until (g = get and m = pattern.match(g));
                (broken = true;break;) if break_pattern.match(g);
                output << m[0];
                inflight -= 1 if inflight > 0;
            end;
        end;
        inflight.times { nil until (m = pattern.match(get)); output << m[0]};
      }
      rescue Interrupt
        return output, broken; #nil;
    end;
    return output, broken;
  end;

  #------------------------------------------------------------------------------#
  # debug window -- ripped from showxml
  #------------------------------------------------------------------------------#
  @window_id = 'xboxempty';
  @window_title = 'xboxempty';
  @window_location = 'center';
  @options = {:show => true, :bold => true,:resident => true, :clear => false, :high => false, :time => false, :save => true };
  @stack  = [];
  @before = "<pushStream id='#{@window_id}' />";#<output class='mono'/>"
  @after  = "\n<popStream id='#{@window_id}' />";#<output class=''/>\n"  # TODO: See if we need to output.. output... or SF is smart enough
  def self.create_window();
    # Create the window
    buffer = [];
    xml = REXML::Element.new('streamWindow');
    xml.attributes['id'] = @window_id;
    xml.attributes['title'] = @window_title;
    xml.attributes['location'] = @window_location;
    # xml.attributes['subtitle'] = " - #{@script.name} #{VERSION}"
    xml.attributes['ifClosed'] = '';
    xml.attributes['scroll'] = 'auto';
    xml.attributes['resident'] = @options[:resident].to_s;
    xml.attributes['save'] = '' unless @options[:save];
    buffer << xml.to_s;
    if @options[:clear];
      xml = REXML::Element.new('clearStream');
      xml.attributes['id'] = @window_id;
      buffer << xml.to_s;
    end;
    if @options[:show];
      xml = REXML::Element.new('exposeStream');
      xml.attributes['id'] = @window_id;
      buffer << xml.to_s;
    end;
    puts buffer.join('');
  end;
  def self.stream_clear;
    xml = REXML::Element.new('clearStream');
    xml.attributes['id'] = @window_id;
    puts xml.to_s;
  end;
  def self.sendto_window(output,b=false);puts "#{@before}#{b == true ? "<b>" : ""}#{output}#{b == true ? "</b>" : ""}#{@after}";end;
  def self.xmlto_window(output,b=false);puts "#{@before}#{b == true ? "<b>" : ""}#{REXML::Text.new(output, respect_whitespace: true).to_s}#{b == true ? "</b>" : ""}#{@after}";end;
  #------------------------------------------------------------------------------#
  # helpers
  #------------------------------------------------------------------------------#

  @mono_start = %{<output class="mono" />}; @mono_end   = %{<output class="" />}
  monsterbold_start = $fake_stormfront ? "\034GSL\r\n " : "<pushBold\/>"
  monsterbold_end   = $fake_stormfront ? "\034GSM\r\n " : "<popBold\/>"
  def self.format_mono(msg) "<output class=\"mono\" />#{msg}<output class=\"\" />" end
  def self.format_monsterbold(msg) "#{monsterbold_start}#{msg.encode(:xml => :text)}#{monsterbold_end}" end
  def self.format_whisper(msg) "<preset id=\"whisper\">#{msg.encode(:xml => :text)}</preset>" end
  def self.sendto_familiar(msg) "<pushStream id=\"familiar\"/>#{msg.encode(:xml => :text)}\n<popStream/>\n" end
  def self.sendto_thought(msg) "<pushStream id=\"thoughts\"/>#{msg.encode(:xml => :text)}\n<popStream/>\n" end
  def self.add_commas(str);return str.to_s.gsub(/(\d)(?=(\d{3})+\b(?!"))/,'\1,');end;
  def self.gs_print(msg)
     if $frontend =~ /stormfront/
       puts msg
     elsif $frontend =~ /profanity/
       _respond msg
    else #wizard fe needs to have the xml stuff stripped
      $stdout.puts msg.gsub!(/<.*?>/, '')
    end
  end
  def self.pc_inroom(name) return true if GameObj.pcs.find {|i| i.noun.downcase == name.downcase } end

  #------------------------------------------------------------------------------#
  # needs cleanup
  #------------------------------------------------------------------------------#
  @debug         = false
  boxes          = GameObj.loot.find_all{|item| item.type=~ /box/}.dup
  cloak          = GameObj.inv.find{|item| item.name =~ /#{UserVars.lootsack}/}
  
  charm_pattern  = UserVars.silvery_charm.nil? ? 'silvery.*?charm' : "#{UserVars.silvery_charm}"
  charm          = GameObj.inv.find{|item| item.name =~ /#{charm_pattern}/}
  
  items_to_move  = {}          # tracking which items are moving from where, and item info
  silver_mule    = nil         # this is where silver goes.
  floor_sack     = nil         # this is where loot goes.
  slower         = false       # flips based on input, reduces concurrent operations.
  raw_mode       = false       # this uses text instead of ids for unseen items or items on items.
  everytime      = false       # give silver every time you grab it
  every10        = true        # give silver every time you have 10k
  current_silver = 0           # tracking total silver for offloading to silvermule
  total_silver   = 0           # for loot summary
  box_count      = 0           # for loot summary
  loot           = Hash.new(0) # for loot summary
  restore_hands  = false       # fill_hands if we empty_hands
  broken         = false       # tracks if quickdo fails, e.g. destination container is full so can't move thigns

  patterns       = Hash.new # DRY regex patterns
  patterns[:lookedinathing] = /^There is nothing in the|^That is closed.$|^In the .* you see|^In the.*:|^Total Items?:/
  
  # You summon a swarm of painted lady butteflies from your silvery fossil charm, which takes off in search of silvers inside an engraved steel trunk.  They locate a stack of 499 coins, reclaiming them and returning to you.  The painted lady butteflies retreat back inside the charm.
  patterns[:gather_coins]   = Regexp.union(
    %r[^You gather the (?<remaining>remaining) (?<coins>[,\d]+) coins?.],
    %r[You gather (?<coins>[,\d]+) of the coins.],
    %r[Get what\?],
    %r[You gather the remaining coin.],
    %r[You can only collect (?<coins>[,\d]+) of the coins due to your (?<load>load)],
    %r[You (?<load>cannot) hold any more silvers.],
    %r[^.*? cannot search for silvers in .*? because it is (<?<closed>closed).],
    %r[^You summon .*? They locate .*? (?<coins>[,\d]+) coins?, reclaiming (?:them|it) and returning to you.],
    %r[^You summon .*? They (?<empty>don't) locate .*?],
  )
  
  @mono_start = %{<output class="mono" />}
  @mono_end   = %{<output class="" />}

  @scripts_to_kill   = ["sorter"];
  @scripts_to_resume = [];
  before_dying{fill_hands if restore_hands;@scripts_to_resume.each{|s| Script.unpause(s) if Script.running?(s); Script.start(s) if !Script.running?(s)}};

  Script.current.vars[1..-1].each { |v|
    _respond v if @debug
    if GameObj.pcs.find { |pc| pc.noun =~ /^#{v}/i }
      silver_mule = GameObj.pcs.find { |pc| pc.noun =~ /^#{v}/i } #if !silver_mule
    elsif !floor_sack && GameObj.loot.find { |i| i.name =~ /#{v}/i }
      floor_sack = GameObj.loot.find { |i| i.name =~ /#{v}/i }
    elsif !floor_sack &&  v =~ /^\d+$/
      floor_sack = GameObj.new(v,'imaginary toolbox','imaginary toolbox')
    elsif !floor_sack &&  v =~ /(?:in|on|under|behind) \w+/i
      floor_sack = v
      #raw_mode = true
    elsif !slower && (v =~ /slower/i  || XMLData.name =~ /Elphieya/i)
      slower = true
    elsif v =~ /everytime/i
      everytime = true;every10 = false;
    end
  }
# todo: test this
=begin
  if Script.current.vars.count > 2 and !floor_sack and silver_mule and GameObj.loot.count == 97
    find_sack = Script.current.vars[1..-1].select{ |i| i !~ /#{silver_mule.noun}/i }
    echo "find_sack:#{find_sack}"
    found_sack = nil;
    if find_sack
      status_tags
        result = dothistimeout "tap #{find_sack}", 1, /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
      status_tags
      if result =~ /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
        found_sack = GameObj.new($1, $2, $3)
        found_sack_id = $1
        found_sack_noun=$2
        found_sack_name=$3
      end
      floor_sack = found_sack if found_sack
    end
  end
=end
  begin
    if ((!floor_sack && Script.current.vars[0] =~ /toolbo?x?/) or floor_sack =~ /(?:in|on|under|behind) \w+/)
      status_tags
        floor_sack = 'toolbox' if floor_sack.nil?
        result = dothistimeout "tap #{floor_sack}", 1, /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
      status_tags
      if result =~ /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
        toolbox = GameObj.new($1, $2, $3)
        toolbox_id = $1
        toolbox_noun=$2
        toolbox_name=$3
        #echo "#{toolbox_id} #{toolbox_noun} #{toolbox_name}"
      end
      floor_sack = toolbox if toolbox
    end
  end

  print_this = []
  print_this << @mono_start
  print_this << ""
  print_this <<  "+#{"-"*50}+"
  print_this <<  "  silver_mule: #{silver_mule}     "
  print_this <<  "  floor_sack : #{floor_sack}      "
  print_this <<  "+#{"-"*50}+"
  print_this << ""
  print_this << @mono_end
  _respond print_this.join("\n")


  sleep 3 if !silver_mule || !floor_sack #gives time to kill it if it didn't find the right container

  pause_script if (!silver_mule && !floor_sack) && Script.current.vars.length > 0
  pause_script if (!silver_mule || !floor_sack) && Script.current.vars.length > 2

  unless floor_sack || cloak
    print_this = [];
    print_this << @mono_start
    print_this << ""
    print_this <<  "+#{"-"*50}+"
    print_this << "*** You have not set your lootsack ***"
    print_this << "*** ;settings add lootsack <value> ***"
    print_this << "*** Where <value> is where you place your loot ***"
    print_this <<  "+#{"-"*50}+"
    print_this << ""
    print_this << @mono_end
    _respond print_this.join("\n")
    exit
  end

  look_in_boxes = proc {
    command_queue   = []
    command_queue   = boxes.map{|box| "look in ##{box.id}"}.reverse.to_a
    success_pattern = patterns[:lookedinathing]
    speed           = (slower == true ? 1 : 3)
    self.quickdo(command_queue, success_pattern, speed)
  }

  #/^You (put|drop|absent\-?mindedly)/

  move_items = proc {

    if checkleft or checkright
      fput 'store all'
      sleep 0.2
    end

    (restore_hands = true;empty_hands) if checkleft or checkright

    if checkleft and checkright
      respond "--- Your hands are full, pausing"
      pause_script
    end

    #putregex = /^You (?:put|drop|(?:discreetly )?tuck|attempt to shield your|place|.* place|slip|absent-mindedly drop|carefully add|untie your drawstring pouch|can't put something that you can't hold)/
    # need to move You suddenly feel completely overwhelmed by the magical properties to another pattern/handler
    putregex = /^You (?:put|drop|(?:discreetly )?tuck|attempt to shield your|place|.* place|slip|absent-mindedly drop|carefully add|untie your|suddenly feel completely overwhelmed by the magical properties).*$/

    items_to_move = {}

    if !raw_mode
      command_queue = []
      boxes.each{|box|
        box_count += 1 if !(box.contents.empty? || box.contents.nil?);
        box.contents.each{|item|
          next if item.name =~ /urglaes|black ora|doomstone|coins|box|chest|trunk|coffer/
          loot["#{item.type} - #{item.noun}, #{item.name.sub(/\b#{item.noun}/,'')}"]+= 1
          if item.type =~ /junk/ || item.name =~ /drake|feras|heavy quartz orb|steel spring/
            command_queue << "_drag ##{item.id} drop"
          else
            items_to_move[item.id] = { :item => item, :source => box.id }
            if floor_sack
              command_queue <<  "_drag ##{item.id} ##{floor_sack.id}"
            else
             command_queue << "_drag ##{item.id} ##{cloak.id}"
            end
          end
        }
      }


      success_pattern = putregex
      speed = 5; # just _drag
      #/You suddenly feel completely overwhelmed by the magical properties/
      break_pattern = /(You need a free hand to pick that up.|You can't put something that you can't hold.|^.*?won't fit in the.*)/
      output, broken = self.quickdo(command_queue, success_pattern, speed, break_pattern)
    end

    if raw_mode == true
      boxes.each{|box|
        box_count += 1 if !box.contents.empty?;
        box.contents.each{|item|
          next if item.name =~ /urglaes|black ora|doomstone|coins|box|chest|trunk|coffer|silver coin/
          sleep 0.1 if slower
          loot["#{item.type} - #{item.noun}, #{item.name.sub(/\b#{item.noun}/,'')}"]+= 1
          if item.type =~ /junk/ || item.name =~ /drake|feras|heavy quartz orb|steel spring/
            fput "_drag ##{item.id} drop"
          else
            items_to_move[item.id] = { :item => item, :source => box.id }
            multifput "get ##{item.id}", "put ##{item.id} #{floor_sack}"
          end
        }
      }
      broken = true if items_to_move.keys.include?(GameObj.right_hand.id) or items_to_move.keys.include?(GameObj.left_hand.id)
    end

      if broken #destination container was full, probably
        fput "put ##{GameObj.right_hand.id} in ##{items_to_move[GameObj.right_hand.id][:source]}" if items_to_move.keys.include?(GameObj.right_hand.id)
        fput "put ##{GameObj.left_hand.id} in ##{items_to_move[GameObj.left_hand.id][:source]}" if items_to_move.keys.include?(GameObj.left_hand.id)
      end

      #echo "broken: #{broken}; output.size: #{output.size}"
      #output.each { |o| echo o }
      #pause_script


  }

  coin_command = "get coins in"
  coin_command = "point ##{charm.id} at" if !charm.nil?
  
  get_coins = proc {
    n = 0
    boxes.each{|box|
      n = n + 1
      if box.contents.to_s.include?('coins') || box.contents.to_s.include?('silver coin')
        _respond "coin grab #{n}: ##{box.id}" if @debug
        loop {
          #grab silver
          
          #result = dothistimeout "get coins in ##{box.id}", 3, patterns[:gather_coins]
          result = dothistimeout "#{coin_command} ##{box.id}", 3, patterns[:gather_coins]
          (break;) if result =~ /Get what\?/;
          m = patterns[:gather_coins].match(result)

          coins          = m[:coins].delete(',').to_i
          coins          = 1 if result =~ /You gather the remaining coin./
          coins          = 0 if coins.nil?
          current_silver = current_silver + coins
          total_silver   = total_silver + coins

          waitrt?
          #offloading silver if overloaded
          #if result =~ /You can only collect \d+ of the coins due to your load/
          if m[:load]
            if silver_mule
              if current_silver > 0
                fput "give #{silver_mule} #{current_silver} silver"
                current_silver = 0;
              else
                msg = "\n  can't hold more silver  \n"
                self.gs_print(self.format_monsterbold(msg))
                pause_script
              end
            else
              msg = "\n  can't hold more silver  \n"
              self.gs_print(self.format_monsterbold(msg))
              pause_script
            end
          end
          #offloading silver according to settings
          fput "give #{silver_mule} #{coins} silver" if silver_mule && coins && everytime
          if (silver_mule && coins && every10 && current_silver > 10000) and coin_command =~ /^get coins/
            #fput "give #{silver_mule} 10000 silver";
            #current_silver = current_silver-10000;
            fput "give #{silver_mule} #{current_silver} silver"
            current_silver = 0
          end

          (break;) if result =~ /remaining|^You summon/
        }
      end
    }
    fput "give #{silver_mule} #{current_silver} silver" if silver_mule && !everytime && current_silver > 0
  }

  print_report = proc {
    #TODO: Need to rework this so only the loot moved is reported
    if broken and items_to_move.keys.size > 0
      loot = {}
      looted_ids = []
      if floor_sack
        (fput "look in ##{floor_sack.id}";sleep 0.3) if floor_sack.contents.nil?
        looted_ids = items_to_move.keys & floor_sack.contents.collect{ |c| c.id }
      else
        (fput "look in ##{cloak.id}";sleep 0.3) if cloak.contents.nil?
        looted_ids = items_to_move and items_to_move.keys and cloak.contents.collect{ |c| c.id }
      end
      looted_ids.each { |id|
        item = items_to_move[id][:item]
        loot["#{item.type} - #{item.noun}, #{item.name.sub(/\b#{item.noun}/,'')}"]+= 1
      }
    end
    print_this = [];
    print_this << @mono_start
    print_this << ""
    if loot.length > 0
      print_this << "+#{"-"*50}+"
      print_this << "  loot:"
      loot.sort.each { |k,v|
        print_this << "    #{v}  #{k}"
      }
    end
    print_this <<  "+#{"-"*50}+"
    print_this << "  boxes: #{box_count}"
    print_this << "  total silver: #{self.add_commas(total_silver)}"
    print_this <<  "+#{"-"*50}+"
    print_this << @mono_end

    if UserVars.xboxempty[:window]==true and $frontend=="stormfront"
      self.create_window()
      self.sendto_window(print_this.join("\n"))
    else
      _respond print_this.join("\n")
    end

    _respond self.format_monsterbold ("Failed to move all items from boxes. Destination container is probably full.") if broken
  }

  look_in_boxes.call
  move_items.call
  get_coins.call
  print_report.call
end