=begin
  original boxempty By: Drafix
    mod of boxempty ~ Xanlin
  
  doesn't try to open the boxes, your picker should be doing that if they're picking boxes on the ground.
  
  optional parameters: 

  ;xbox silvermule floorcontainer
  ;xbox silvermule containerid(numbers)
  ;xbox silvermule "in toolbox on table"
  ;xbox silvermule toolbox everytime slower
  
  Optional loot report to separate window:
  ;e echo UserVars.xboxempty[:window] = true
  
  parameters:
    silvermule => name of the pc you want to give the silver to
    floorcontainer => where you want to put the good loot
    everytime => give coins every time you loot them
    slower => go slower, because for some reason I disconnect when I run it
  
  add slower to the parameters if you need the script to go slower. 
  
          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: loot, boxes, rogue, utility
  requires_trust: true
        required: Lich >= 4.6.4
         version: 17
         
  add help for finding toolboxes hidden under hundreds of boxes
         
  updated with faster looking in boxes by LostRanger
  
  Sometimes gemstone decides you can only gather a handful of coins at a time.  Updated to speed that bit up. ( usually has to do with being grouped in a room with people not in your group )

=end
UserVars.xboxempty = Hash.new if UserVars.xboxempty.nil?
UserVars.xboxempty[:window] = false if UserVars.xboxempty[:window].nil?

module Xbox 
  def self.quickdo(command_queue, success_pattern, speed = 3)
    return if command_queue.length < 1;
    
    queue    = command_queue
    pattern  = success_pattern 
    flock    = speed 
    inflight = 0
    
    while queue.length > 0
        put queue.pop
        inflight += 1
        while inflight > flock
            nil until pattern.match(get)
            inflight -= 1
        end
    end
    inflight.times { nil until pattern.match(get)}
  end
  #------------------------------------------------------------------------------#
  # debug window -- ripped from showxml
  #------------------------------------------------------------------------------#
  @window_id = 'xboxempty';
  @window_title = 'xboxempty';
  @window_location = 'center';
  @options = {:show => true, :bold => true,:resident => true, :clear => false, :high => false, :time => false, :save => true };
  @stack  = [];
  @before = "<pushStream id='#{@window_id}' />";#<output class='mono'/>"
  @after  = "\n<popStream id='#{@window_id}' />";#<output class=''/>\n"  # TODO: See if we need to output.. output... or SF is smart enough
  def self.create_window();
    # Create the window
    buffer = [];
    xml = REXML::Element.new('streamWindow');
    xml.attributes['id'] = @window_id;
    xml.attributes['title'] = @window_title;
    xml.attributes['location'] = @window_location;
    # xml.attributes['subtitle'] = " - #{@script.name} #{VERSION}"
    xml.attributes['ifClosed'] = '';
    xml.attributes['scroll'] = 'auto';
    xml.attributes['resident'] = @options[:resident].to_s;
    xml.attributes['save'] = '' unless @options[:save];
    buffer << xml.to_s;
    if @options[:clear];
      xml = REXML::Element.new('clearStream');
      xml.attributes['id'] = @window_id;
      buffer << xml.to_s;
    end;
    if @options[:show];
      xml = REXML::Element.new('exposeStream');
      xml.attributes['id'] = @window_id;
      buffer << xml.to_s;
    end;
    puts buffer.join('');
  end; 
  def self.stream_clear; 
    xml = REXML::Element.new('clearStream');
    xml.attributes['id'] = @window_id;
    puts xml.to_s;
  end;
  def self.sendto_window(output,b=false);puts "#{@before}#{b == true ? "<b>" : ""}#{output}#{b == true ? "</b>" : ""}#{@after}";end;
  def self.xmlto_window(output,b=false);puts "#{@before}#{b == true ? "<b>" : ""}#{REXML::Text.new(output, respect_whitespace: true).to_s}#{b == true ? "</b>" : ""}#{@after}";end;

end
module Xutils
  @xutils_version = 20190701;
  @mono_start = %{<output class="mono" />}; @mono_end   = %{<output class="" />}
  monsterbold_start = $fake_stormfront ? "\034GSL\r\n " : "<pushBold\/>"
  monsterbold_end   = $fake_stormfront ? "\034GSM\r\n " : "<popBold\/>"
  def self.format_mono(msg) "<output class=\"mono\" />#{msg}<output class=\"\" />" end
  def self.format_monsterbold(msg) "#{monsterbold_start}#{msg.encode(:xml => :text)}#{monsterbold_end}" end
  def self.format_whisper(msg) "<preset id=\"whisper\">#{msg.encode(:xml => :text)}</preset>" end
  def self.sendto_familiar(msg) "<pushStream id=\"familiar\"/>#{msg.encode(:xml => :text)}\n<popStream/>\n" end
  def self.sendto_thought(msg) "<pushStream id=\"thoughts\"/>#{msg.encode(:xml => :text)}\n<popStream/>\n" end
  def self.gs_print(msg)
     if $frontend =~ /stormfront/
       puts msg
     elsif $frontend =~ /profanity/
       _respond msg
    else #wizard fe needs to have the xml stuff stripped
      $stdout.puts msg.gsub!(/<.*?>/, '')
    end
  end
  def self.pc_inroom(name) return true if GameObj.pcs.find {|i| i.noun.downcase == name.downcase } end
end

@debug         = false
boxes          = GameObj.loot.find_all{|item| item.type=~ /box/}
cloak          = GameObj.inv.find{|item| item.name =~ /#{UserVars.lootsack}/}
silver_mule    = nil     # this is where silver goes.
floor_sack     = nil     # this is where loot goes.
slower         = false   # flips based on input, reduces concurrent operations.
raw_mode       = false   # this uses text instead of ids for unseen items or items on items.
everytime      = false   # give silver every time you grab it
every10        = true    # give silver every time you have 10k
current_silver = 0       # tracking total silver for offloading to silvermule
total_silver   = 0       # for summary
box_count      = 0
loot           = Hash.new(0)
patterns       = Hash.new # DRY regex patterns
patterns[:lookedinathing] = /^There is nothing in the|^That is closed.$|^In the .* you see|^In the.*:|^Total Items?:/
patterns[:gather_coins]   = /^You gather the (?<remaining>remaining) (?<coins>[,\d]+) coins?.|You gather (?<coins>[,\d]+) of the coins.|Get what\?|You gather the remaining coin.|You can only collect (?<coins>[,\d]+) of the coins due to your (?<load>load)|You (?<load>cannot) hold any more silvers./
@mono_start = %{<output class="mono" />}
@mono_end   = %{<output class="" />}

script.vars[1..-1].each { |v|
  _respond v if @debug
  if GameObj.pcs.find { |pc| pc.noun =~ /^#{v}/i }
    silver_mule = GameObj.pcs.find { |pc| pc.noun =~ /^#{v}/i } #if !silver_mule
  elsif !floor_sack && GameObj.loot.find { |i| i.name =~ /#{v}/i }
    floor_sack = GameObj.loot.find { |i| i.name =~ /#{v}/i } 
  elsif !floor_sack &&  v =~ /^\d+$/
    floor_sack = GameObj.new(v,'imaginary toolbox','imaginary toolbox')
  elsif !floor_sack &&  v =~ /^(in|on) \w+/i
    floor_sack = v
    raw_mode = true
  elsif !slower && (v =~ /slower/i  || XMLData.name =~ /Elphieya/i)
    slower = true
  elsif v =~ /everytime/i
    everytime = true;every10 = false;
  end
}
# todo: test this
=begin
if script.vars.count > 2 and !floor_sack and silver_mule and GameObj.loot.count == 97
  find_sack = script.vars[1..-1].find{ |i| silver_mule.noun !~ /#{i}/i}
  found_sack = nil;
  if find_sack
    status_tags
      result = dothistimeout "tap #{find_sack}", 1, /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
    status_tags
    if result =~ /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
      found_sack = GameObj.new($1, $2, $3)
      found_sack_id = $1
      found_sack_noun=$2
      found_sack_name=$3
    end
    floor_sack = found_sack if found_sack
  end
end
=end
if !floor_sack && script.vars[0] =~ /toolbo?x?/
  status_tags
    result = dothistimeout "tap toolbox", 1, /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
  status_tags
  if result =~ /^You tap .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
    toolbox = GameObj.new($1, $2, $3)
    toolbox_id = $1
    toolbox_noun=$2
    toolbox_name=$3
    #echo "#{toolbox_id} #{toolbox_noun} #{toolbox_name}" 
  end
  floor_sack = toolbox if toolbox
end


print_this = []
print_this << @mono_start
print_this << ""
print_this <<  "+#{"-"*50}+"
print_this <<  "  silver_mule: #{silver_mule}     "
print_this <<  "  floor_sack : #{floor_sack}      "
print_this <<  "+#{"-"*50}+"
print_this << ""
print_this << @mono_end
_respond print_this.join("\n")


sleep 3 if !silver_mule || !floor_sack #gives time to kill it if it didn't find the right container

pause_script if (!silver_mule && !floor_sack) && script.vars.length > 0
pause_script if (!silver_mule || !floor_sack) && script.vars.length > 2

unless floor_sack || cloak
  print_this = [];
  print_this << @mono_start
  print_this << ""
  print_this <<  "+#{"-"*50}+"
  print_this << "*** You have not set your lootsack ***"
  print_this << "*** ;settings add lootsack <value> ***"
  print_this << "*** Where <value> is where you place your loot ***"
  print_this <<  "+#{"-"*50}+"
  print_this << ""
  print_this << @mono_end
  _respond print_this.join("\n")
  exit
end

command_queue   = []
command_queue   = boxes.map{|box| "look in ##{box.id}"}.reverse.to_a
success_pattern = patterns[:lookedinathing]
speed           = (slower == true ? 1 : 3)

Xbox.quickdo(command_queue, success_pattern, speed)

#/^You (put|drop|absent\-?mindedly)/
putregex = /^You (?:put|drop|(?:discreetly )?tuck|attempt to shield your|place|.* place|slip|absent-mindedly drop|carefully add|untie your drawstring pouch)/

if !raw_mode
  command_queue = []
  success_pattern = putregex
  boxes.each{|box|
    box_count += 1 if !(box.contents.empty? || box.contents.nil?);
    box.contents.each{|item|
      next if item.name =~ /urglaes|black ora|doomstone|coins|box|chest|trunk|coffer/
      loot["#{item.type} - #{item.noun}, #{item.name.sub(/\b#{item.noun}/,'')}"]+= 1
      if item.type =~ /junk/ || item.name =~ /drake|feras|heavy quartz orb|steel spring/
        command_queue << "_drag ##{item.id} drop"
      else
        if floor_sack
          command_queue <<  "_drag ##{item.id} ##{floor_sack.id}" 
        else 
         command_queue << "_drag ##{item.id} ##{cloak.id}" 
        end
      end
    }
  }
  speed = 5; # just _drag
  Xbox.quickdo(command_queue, success_pattern, speed)
end

if raw_mode == true
  boxes.each{|box|
    box_count += 1 if !box.contents.empty?;
    box.contents.each{|item|
      next if item.name =~ /urglaes|black ora|doomstone|coins|box|chest|trunk|coffer|silver coin/
      sleep 0.1 if slower
      loot["#{item.type} - #{item.noun}, #{item.name.sub(/\b#{item.noun}/,'')}"]+= 1
      if item.type =~ /junk/ || item.name =~ /drake|feras|heavy quartz orb|steel spring/
        fput "_drag ##{item.id} drop"
      else
        multifput "get ##{item.id}", "put ##{item.id} #{floor_sack}"
      end
    }
  }
end

n = 0
boxes.each{|box| 
  n = n + 1
  if box.contents.to_s.include?('coins') || box.contents.to_s.include?('silver coin')
    _respond "coin grab #{n}: ##{box.id}" if @debug
    loop {
      #grab silver
      result = dothistimeout "get coins in ##{box.id}", 3, patterns[:gather_coins]
      (break;) if result =~ /Get what\?/;
      m = patterns[:gather_coins].match(result)
      
      coins          = m[:coins].gsub(',','').to_i
      coins          = 1 if result =~ /You gather the remaining coin./
      coins          = 0 if coins.nil?
      current_silver = current_silver + coins
      total_silver   = total_silver + coins
      
      waitrt?
      #offloading silver if overloaded
      #if result =~ /You can only collect \d+ of the coins due to your load/
      if m[:load] 
        if silver_mule
          if current_silver > 0
            fput "give #{silver_mule} #{current_silver} silver"
            current_silver = 0;
          else
            msg = "\n  can't hold more silver  \n"
            Xutils.gs_print(Xutils.format_monsterbold(msg))
            pause_script
          end
        else
          msg = "\n  can't hold more silver  \n"
          Xutils.gs_print(Xutils.format_monsterbold(msg))
          pause_script
        end
      end
      #offloading silver according to settings
      fput "give #{silver_mule} #{coins} silver" if silver_mule && coins && everytime
      if (silver_mule && coins && every10 && current_silver > 10000)
        #fput "give #{silver_mule} 10000 silver";
        #current_silver = current_silver-10000;
        fput "give #{silver_mule} #{current_silver} silver"
        current_silver = 0
      end
      
      (break;) if result =~ /remaining/
    }
  end
}
fput "give #{silver_mule} #{current_silver} silver" if silver_mule && !everytime && current_silver > 0

print_this = [];
print_this << @mono_start
print_this << ""
if loot.length > 0 
  print_this << "+#{"-"*50}+"
  print_this << "  loot:"
  loot.sort.each { |k,v|
    print_this << "    #{v}  #{k}"
  }
end
print_this <<  "+#{"-"*50}+"
print_this << "  boxes: #{box_count}"
print_this << "  total silver: #{total_silver}"
print_this <<  "+#{"-"*50}+"
print_this << @mono_end

if UserVars.xboxempty[:window]==true and $frontend=="stormfront"
  Xbox.create_window()
  Xbox.sendto_window(print_this.join("\n"))
else
  _respond print_this.join("\n")
end