class Spell
  OLD_KNOWN_METHOD ||= Spell.instance_method(:known?)
  def known?
    SK.known?(self) or OLD_KNOWN_METHOD.bind(self).call()
  end

  OLD_TIME_PER_METHOD ||= Spell.instance_method(:time_per)
  def time_per(arg = nil)
    # dumb time per of 10m because lots of things break otherwise
    return 10.0 if SK.known?(self)
    return OLD_TIME_PER_METHOD.bind(self).call(arg)
  end
end

module SK
  NAMESPACE = "sk/known"

  Vars[NAMESPACE] ||= []

  def self.known?(spell)
    Vars[NAMESPACE].include?(spell.num.to_s)
  end

  def self.add(*numbers)
    Vars[NAMESPACE] = (Vars[NAMESPACE] + numbers).uniq
  end

  def self.remove(*numbers)
    Vars[NAMESPACE] = (Vars[NAMESPACE] - numbers).uniq
  end

  def self.main()
    action = Script.current.vars[1].to_sym
    spells = Script.current.vars[2..-1]
    case action
    when :add
      self.add(*spells)
    when :rm
      self.remove(*spells)
    else
      fail "unknown action #{action}"
    end
  end

  self.main() if Script.current.vars.size > 2
end