def self.damagecheck

	fput "assess"
	while line = get
		if (line.include? "You cannot seem to find any") || (line.include? "You take a moment to assess the structural")
			
		elsif (line.include? "damage")
			$thingstoyell << line
		elsif line.include? "Health of your ship"
			$thingstoyell << line
			return
		end

	end
end
$thingstoyell = Array.new

self.damagecheck
waitrt
$thingstoyell.each{|a| 
	if a.include? "damage"
		fput "yell #{a.split(":")[0]} is #{a.split("be ")[1]} "
	elsif a.include? "Health of your ship"
		damagepattern =/\[Health of your ship:\s(?<ship_damage>.*)\/(?<ship_max>[0-9]*)\]/
		totaldamage =  a.match(damagepattern)[:ship_damage]
		totalhull =  a.match(damagepattern)[:ship_max]

		case
			when (totaldamage.to_i * 100 / totalhull.to_i) > 99
				_respond "#{monsterbold_start}Everything is fine worrywart.#{monsterbold_end}"
			when (totaldamage.to_i * 100 / totalhull.to_i) > 90
				fput "yell Hull is holding"
			when (totaldamage.to_i  * 100 / totalhull.to_i) > 75
				fput "yell Taking some damge"
			when (totaldamage.to_i * 100 / totalhull.to_i) > 50
				fput "yell Looking pretty rough"
			when (totaldamage.to_i  * 100 / totalhull.to_i) > 25
				fput "yell She cannae take much moor o'this Cap'n"
			when (totaldamage.to_i  * 100 / totalhull.to_i) > 10
				fput "yell Stop being lazy and start repairing slackers, now, or you're never stepping on this boat again"
		end
	end
}
