=begin
	Uses the town locksmith for you. Requires 10k in cash money.
	
	oh, it will wait a minute for people so it isn't group friendly
	
	All good ideas stolen from npcpick by Baerden/Tillmen
	~sangreal
=end

if Lich.lootsack.nil?
	echo "Lootsack not set. Set a lootsack using ;settings change lootsack <container>"
	exit
end

sleep 1
start_script('go2',['bank','_disable_confirm_'])
wait_while { running?('go2') }
fput "deposit all"
fput "withdraw 10000 silver"

start_script('go2', [ 'locksmith', '_disable_confirm_' ])
wait_while { running?('go2') }

unless trash = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.noun =~ /^(?:crate|barrel|wastebarrel|casket)$/ } || trash = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.noun == 'coffer' }
	echo "Couldn't find the trash"
	exit
end

to_close = Array.new
category = {
	'Gem' => {
		'noun' => [ 'diamond', 'emerald', 'faenor-bloom', 'ruby', 'aetherstone', 'agate', 'ambergris', 'azurite', 'beryl', 'bloodjewel', 'bloodstone', 'bluerock', 'cordierite', 'deathstone', 'doomstone', 'dreamstone', 'eostone', 'firestone', 'galena', 'geode', 'hyacinth', 'onyx', 'pyrite', 'peridot', 'rhimar', 'riftshard', 'riftstone', 'rosepar', 'wyrdshard', 'spinel', 'faenor', 'blazestar', 'despanal', 'feystone', 'pearl', 'sapphire', 'opal', 'jacinth', 'garnet', 'moonstone', 'topaz', 'gem', 'coral', 'sunstone', 'starstone', 'quartz', 'heliodor', 'glimaerstone', 'carbuncle', 'turquoise', 'chalcedony', 'tourmaline', 'zircon', 'amethyst', 'lapis lazuli', 'amber' , 'sphene' , 'shell', 'bloodstone', 'jasper', 'mother-of-pearl', 'stone', 'thunderstone', 'diopside' ],
		'name' => [ 'petrified tiger tooth', 'piece of spiderweb obsidian', 'shard of tigerfang crystal', 'some powdered shimmertine shard', 'cinnabar crystal', 'shimmertine shard', 'quartz crystal', 'platinum fang', 'gold fang', 'rock crystal' ],
		'sack' => Lich.gemsack,
	},
	'Box' => {
		'noun' => [ 'box', 'coffer', 'chest', 'strongbox', 'trunk' ],
		'name' => [],
		'sack' => Lich.boxsack,
	},
	'Skin' => {
		'noun' => [ 'skin', 'talons', 'finger', 'tailfeather', 'scalp', 'hide', 'beard', 'tusk', 'heart', 'scale', 'mandible', 'tongue', 'tentacle', 'caederine', 'pelt', 'ear', 'claw', 'spine', 'pincer', 'tail', 'toe', 'fang', 'feather', 'nose', 'paw', 'jawbone', 'mane', 'skull', 'talon', 'shroud', 'sail', 'tailspike' ],
		'name' => [ 'jagged rift crawler tooth', 'mottled faeroth crest', 'some powdered skeleton bone', 'skeleton bone', 'hisskra tooth' ],
		'sack' => Lich.skinsack,
	},
	'Magic' => {
		'noun' => [ 'statue', 'sculpture', 'cube', 'orb', 'runestone' ],
		'name' => [ 'blue crystal', 'lesser mana potion', 'deep blue potion', 'lesser mana regeneration potion', 'lesser mana-well potion', 'greater mana potion', 'softly glowing blue potion', 'bright silvery potion', 'smooth stone talisman', 'dark translucent crystal', 'white crystal', 'black crystal', 'jagged glossy black shard', 'white flask', 'cloudy blue potion', 'dirtokh potion', 'gold ring', 'crystal amulet', 'ruby amulet', 'pinch of powdered iron filings', 'dull gold coin', 'scattering of deathstone granules', 'pure potion', 'impure potion' ],
		'sack' => Lich.magicsack,
	},
	'Reagent' => {
		'noun' => [ 'seed', 'hair', 'crystals', 'fire', 'dust', 'water', 'core', 'globe', 'essence' ],
		'name' => [ 'ayanad crystal', 'vial of amber-hued oil', 'radiant crimson essence shard', 'perfect myklian belly scale', 'dark shadow-shrouded crystal', 'essence shard', 'vial of viscous liquid', 'smooth stone', "s'ayanad crystal", "t'ayanad crystal", "n'ayanad crystal", 'glimmering blue essence shard', 'glowing violet essence shard', 'some essence of earth', 'some essence of air', 'vial of vitreous humor', 'spirit shard', 'small troll tooth', 'large troll tooth' ],
		'sack' => Lich.alchemysack,
	},
	'Herb' => {
		'noun' => [ 'leaf', 'moss', 'grass' ],
		'name' => [ 'some woth flower', 'dark pink rain lily', 'some mashed pink rain lily', 'witchwood twig', 'ebony twig', 'handful of elderberries','blaestonberry blossom', 'oak twig', 'handful of raspberries', 'some bur-clover root', 'some pine needles', 'bunch of wild grapes', 'some ground willow twig', 'genkew mushroom', 'sprig of wild lilac', 'some mashed sprig of wild lilac', 'some ground valerian', 'some valerian root', 'some mashed small violet', 'sprig of holly', 'mountain dryan', 'blue trafel mushroom', 'willow twig', 'luckbloom blossom', "flagon of Semak's Smooth ale", "barrel of Wort's Winter ale", "barrel of Reaper's Red ale", 'barrel of Volcano Vision ale', 'tincture of torban', 'tincture of wingstem', 'tincture of haphip', 'wild orchid', 'purple clover blossom', 'some mashed white hydrangea', 'some angelica root', 'wood violet', 'white hydrangea', 'tincture of cactacae', 'some bolmara lichen', 'tkaro root', 'bright red cranberry', 'ayana berry', 'tincture of pothinir', 'tincture of rose-marrow', 'tincture of wolifrew', 'tincture of acantha', 'small violet', 'slender twig', 'coppery rain lily', 'rose-marrow root', 'tincture of talneo', 'bubbling brown ale', 'spotted toadstool ale', 'ayana root', 'some ground ironfern', 'ironfern root', 'some ground tkaro', 'wavepetal blossom', 'some cactacae spine', 'some sovyn clove', 'wingstem potion', 'bur-clover potion', 'some calamia fruit', 'brostheras potion', 'some wolifrew lichen', 'rose-marrow potion', 'some haphip root', 'bolmara potion', 'some aloeas stem', 'talneo potion', 'rock lizard potion', "Ma Leaftoe's spiced torban tart", 'flower-shaped tart', 'elk horn potion', 'musk ox tart', 'tincture of aloeas', 'tincture of ephlox', 'tincture of basal', 'tincture of ambrominas', 'tincture of woth', 'manroot tea', 'feverfew potion', 'pennyroyal tea', 'flagon of Golden Goose ale', 'daggit tea', "barrel of Captn' Pegleg's ale", 'wyrmwood root tea', 'wyrmwood root potion', 'daggit root potion', 'some feverfew tea', 'snowflake elixir', 'tincture of bolmara', 'some red lichen tea', 'barrel of Mad Mutt Frothy ale', 'earthworm potion', 'some polar bear fat soup', 'some walrus blubber', 'sparrowhawk pie', 'some elk fat gel', "some ram's bladder", "some frog's bone porridge", "Leaftoe's lichen tart", 'Dabbings Family special tart', 'iceberry tart' ],
		'sack' => Lich.herbsack,
	},
	'Wand' => {
		'noun' => [ 'wand', 'rod' ], 
		'name' => [ 'silver-veined sliver of mistwood' ],
		'sack' => Lich.wandsack,
	},
	'Scroll' => {
		'noun' => [ 'scroll', 'paper', 'papyrus', 'vellum', 'palimpsest', 'parchment' ],
		'name' => [],
		'sack' => Lich.scrollsack,
	},
	'Jewelry' => {
		'noun' => [ 'necklace', 'crown', 'talisman', 'pendant', 'pin', 'ring', 'medallion', 'band', 'amulet', 'badge', 'earcuff', 'circlet', 'wrist-cuffs', 'earring', 'brooch', 'choker', 'hairsticks', 'armband', 'wristbands', 'bracelet', 'bracer', 'barrette', 'clasp', 'charm', 'anklet' ],
		'name' => [],
		'sack' => Lich.gemsack,
	},
	'Trash' => {
		'noun' => ['doughnut', 'muffin', 'cookie', 'tart', 'cupcake' ],
		'name' => [ 'rusty doorknob', 'tarnished cup', 'dented cup', 'rusty nail', 'shiny ring', 'rusty ring', 'corroded nail', 'tree bark', 'shiny bracelet', 'dented ring', 'chipped brick', 'rusty coin', 'dented coin', 'bent coin', 'scratched ring', 'rusty spoon', 'moldy bone', 'scratched spoon', 'polished plate', 'scratched nail', 'dented fork', 'tarnished horshoe', 'table leg', 'corroded earring', 'scratched earring', 'tarnished earring', 'polished medallion', 'tarnished medallion', 'dented bracelet', 'tarnished bracelet', 'rusty fork', 'tarnished spoon', 'tarnished fork', 'scratched nail', 'tarnished ring', 'corroded medallion', 'scratched medallion', 'shiny coin' ],
		'sack' => trash.id,
	},
	'Other' => {
		'noun' => [],
		'name' => [],
		'sack' => XMLData.stow_container_id,
	},
}


unless lootsack = GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack.strip)}/i } || GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i }
	echo "Couldn't find lootsack"
	exit
end

if lootsack.contents.nil?
	fput "open ##{lootsack.id}"
	close_lootsack = true
	if lootsack.contents.nil?
		echo 'set inventory on'
		exit
	end
end

unless table = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.noun =~ /^(?:table|counter)$/ }
	echo "Couldn't find the table"
	exit
end

if table.contents.nil? and (dothis "look on ##{table.id}", /On the .*? you see/) and table.contents.nil?
	echo 'fixme'
	exit
end

if table.contents.find { |obj| obj.noun == 'bell' }
	activator = 'ring bell'
elsif table.contents.find { |obj| obj.noun == 'keys' }
	activator = 'pull keys'
elsif table.contents.find { |obj| obj.noun == 'chime' }
	activator = 'ring chime'
else
	echo 'fixme'
	exit
end

open_box = proc { |box|
	for obj in table.contents
		if obj.noun =~ /^(?:box|strongbox|chest|coffer|trunk)$/
			fput "get ##{obj.id}"
			sleep 0.1
			fput "drop ##{obj.id}"
			sleep 0.1
		end
	end
	unless (GameObj.right_hand.id == box.id) or (GameObj.left_hand.id == box.id)
		fput "get ##{box.id}"
	end
	
	if box.name =~ /shifting/i then
		dothis "drop ##{box.id}",/flicker/
		box = GameObj.right_hand
	end
	fput "put ##{box.id} on ##{table.id}"
	sleep 0.1
	fput 'unhide' if invisible?
	fput activator

	sleep 0.1
	fput 'pay'
	sleep 0.1
	fput "get ##{box.id}"
	sleep 0.1
	fput "open ##{box.id}"
	sleep 0.1
	fput "get coins from ##{box.id}"
	sleep 0.5
	waitrt?

	box.contents.each{|item|
		container = nil
		away_sack_type = category.keys.find{|cat| category[cat]['name'].include?(item.name)} || category.keys.find{|cat| category[cat]['noun'].include?(item.noun)} || 'Other'
		if away_sack_type == 'Other' || away_sack_type == 'Trash'
			container = category[away_sack_type]['sack']
		else
			unless category[away_sack_type]['sack'].nil? || category[away_sack_type]['sack'].nil? == ""
				container = GameObj.inv.find { |cont| cont.name =~ /#{Regexp.escape(category[away_sack_type]['sack'].strip)}/i } || GameObj.inv.find { |cont| cont.name =~ /#{Regexp.escape(category[away_sack_type]['sack']).sub(' ', ' .*')}/i }
			end
			
			unless container
				container = category['Other']['sack']
			else
				container = container.id
			end
		end

		store_result = dothis "_drag ##{item.id} ##{container}",/^You put|^You slip|^You carefully|closed|fit|refer|^Do you want to put that in, on, or behind|^As you place/
		if store_result =~ /closed/
			dothistimeout "open ##{container}",2,/You open/
			dothistimeout "_drag ##{item.id} ##{container}",2,/You put|You slip|You carefully|closed|fit|refer/
			to_close.push(container)
		elsif store_result =~ /^Do you want/
			fput "put ##{item.id} in ##{container}"
		end
	}
	unless box.contents.empty?
		echo "box not empty? #{box.contents}"
		exit
	end
	fput "put ##{box.id} in ##{trash.id}"
	sleep 0.1
}

unless checkpcs.nil?
	exec_script = "
		Thread.new { wait_while { running?(#{Script.self.name.inspect}) }; Script.self.kill }
		ts = Script.running.find { |nm| nm.name =~ /^#{Script.self}/i}
		respond \"[#{Script.self}: Waiting for someone to finish. Unpause the script to resume. The script will unpause itself in a minute]\"
		200.times{
			if !ts.paused || ts.nil? || checkpcs.nil?
				break
			end
			sleep 0.3 
		}
		ts.unpause if (ts.paused && !ts.nil?)
		"
	start_exec_script(exec_script, flags={ :quiet => true })
	pause_script(Script.self)
end


if GameObj.right_hand.noun =~ /^(?:box|strongbox|chest|coffer|trunk)$/ && GameObj.left_hand.id.nil?
	open_box.call(GameObj.right_hand)
end
if GameObj.left_hand.noun =~ /^(?:box|strongbox|chest|coffer|trunk)$/ && GameObj.right_hand.id.nil?
	open_box.call(GameObj.left_hand)
end

empty_hands
10.times{break if GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?; sleep 0.3}
if GameObj.right_hand.id || GameObj.left_hand.id
	echo "Failed to empty hands"
	exit
end

bag_contents = GameObj.containers.delete_if{|x,y| !GameObj.inv.any?{|z| z.id == x}}.values.flatten
for obj in bag_contents
	if obj.noun =~ /^(?:box|strongbox|chest|coffer|trunk)$/
		open_box.call(obj)
	end
end

echo "Checking for a disk"
disk = nil
50.times { break if (disk = GameObj.loot.find { |obj| (obj.noun == 'disk') and obj.name =~ /#{checkname}/}); sleep 0.2 }
if disk
	if disk.contents.nil?
		fput "look in ##{disk.id}"
		sleep 1
	end
	for obj in disk.contents
		if obj.noun =~ /^(?:box|strongbox|chest|coffer|trunk)$/
			open_box.call(obj)
		end
	end
end


to_close.each{|bag|
	fput "close ##{bag}"
}
