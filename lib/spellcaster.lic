=begin
	spellcaster - make spellcasting great again
	created by Selandriel based on 'voodoo'
	v0.9.6: fix CAST_RX to catch more roundtimes more correctly
	v0.9.5: fix verb handling to better support all options
	v0.9.4: add support for configuring verb and stance for aliases
	v0.9.3: add timeout to cast procedure to prevent lockups
	v0.9.2: fix 'other' target handling; complete multicast support
	v0.9.1: fix channel rt handling to be less bad
	v0.9.0: initial release
=end

if running? 'voodoo'
	echo "You already have 'voodoo' running, which will conflict with this script."
	echo "Please ;kill voodoo and try again."
	exit
end

module Spellcaster
	@@options = CharSettings[:options] || {
		channel: false, conserve: false, safety: false, stance: false
	}

	@@mantle = CharSettings[:mantle] || {}

	@@stance = CharSettings[:stance] || {}

	@@alias = CharSettings[:alias] || {}
	@@verbs = CharSettings[:verbs] || {}

	UPSTREAM_HOOK_ID = '#{Script.current.name}_upstream_hook'

	ORDINALS = ['first','second','third','fourth','fifth','sixth','seventh','eighth','ninth','tenth','eleventh']
	STANCES = ['offensive','advance','forward','neutral','guarded','defensive']

	VALID_VERBS = ['cast','channel','evoke']

	STANCE_RX = /You are now in an? \w+ stance\./
	WAIT_RX = /(?:Cast Roundtime|Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\.|You are now in an? \w+ stance\./
	CAST_RX = /(?:Cast|Channel|Evoke) at what\?|You do not currently have a target\.|You (?:gesture|channel|evoke)|(?:\.\.\.)?[Ww]ait \d+ [Ss]ec(?:onds)?\.|You are unable to do that right now\.|You can't make that dextrous of a move!/

	SCCMD_RX = /^(?:<c>)?;(?:#{Script.current.name}|sc)(?:\s(.*))?$/
	SPELL_RX = /^(?:<c>)?(\d{3,4})\s?(.+?)?\s?(\d+)?$/
	ALIAS_RX = /^(?:<c>)?(\w+)\s?(.+?)?\s?(\d+)?$/

	SPELL_QUEUE = Queue.new
	SCCMD_QUEUE = Queue.new

	[]

	UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
		begin
			if command =~ SPELL_RX
				spell_number = $1
				spell_target = $2
				cast_counter = $3
				input_alias = nil
			elsif command =~ ALIAS_RX
				input_alias = $1.downcase
				spell_number = @@alias[input_alias]
				spell_target = $2
				cast_counter = $3
			end
		rescue Exception => e
			respond e.message
			respond e.backtrace.join("\r\n")
		end
		if spell_number
			SPELL_QUEUE.push({ number: spell_number, target: spell_target, alias: input_alias, count: cast_counter })
			nil
		elsif command =~ SCCMD_RX
			SCCMD_QUEUE.push($1)
			nil
		else
			command
		end
	end)

	before_dying do
		UpstreamHook.remove(UPSTREAM_HOOK_ID)
	end

	def self.send (message)
		message.gsub!('&','&amp;').gsub!('<','&lt;').gsub!('>','&gt;') if ($frontend == 'stormfront')
		puts "#{message}\r\n"
	end

	def self.prompt
		puts "<prompt time=\"#{XMLData.server_time}\">#{XMLData.prompt}</prompt>\r\n"
	end

	def self.command (args)
		action, first, second = args.split(' ')
		unless action
			Spellcaster.help
		else
			if action == 'help'
				Spellcaster.help
			elsif action == 'mantle'
				Spellcaster.mantle(first, second)
			elsif action == 'stance'
				Spellcaster.stance(first, second)
			elsif action == 'alias'
				Spellcaster.alias(first, second)
			elsif action == 'verb'
				Spellcaster.verb(first, second)
			elsif action == 'set'
				Spellcaster.option(first, second)
			else
				Spellcaster.help
			end
		end
		Spellcaster.prompt
	end

	def self.help
		Spellcaster.send "<output class=\"mono\"/>"
		Spellcaster.send ""
		Spellcaster.send " Spellcaster helps you cast your spells!"
		Spellcaster.send ""
		Spellcaster.send " Usage:"
		Spellcaster.send "  ;sc alias {spell} {name}"
		Spellcaster.send "  ;sc alias clear {name}"
		Spellcaster.send "    -- set an alias for a spell number"
		Spellcaster.send ""
		Spellcaster.send "  ;sc verb {spell} {verb}"
		Spellcaster.send "  ;sc verb {spell} clear"
		Spellcaster.send "    -- force spellcaster to use a specific verb for a given spell"
		Spellcaster.send ""
		Spellcaster.send "  ;sc stance {spell} {stance}"
		Spellcaster.send "    -- change stance to {stance} (default 'offensive') before casting {spell}"
		Spellcaster.send "        will stance back to guarded after cast"
		Spellcaster.send ""
		Spellcaster.send "  ;sc mantle {spell} [remove]"
		Spellcaster.send "    -- add [or remove] a given spell to your mantle list"
		Spellcaster.send "        spellcaster will attempt to keep these spells active"
		Spellcaster.send ""
		Spellcaster.send "  ;sc set {option} on|off"
		Spellcaster.send "    channel -- attempt to use channel verb for supported spells"
		Spellcaster.send "    safety -- prevent casting offensive spells without valid target in room"
		Spellcaster.send "    stance -- attempt to change stance for aimed spells only"
		Spellcaster.send ""
		Spellcaster.send "    conserve -- do not cast spell if insufficient mana or if specific target is not valid"
		Spellcaster.send ""
		Spellcaster.send " Options: #{@@options}"
		Spellcaster.send ""
		Spellcaster.send " Stances: #{@@stance}"
		Spellcaster.send ""
		Spellcaster.send " Alias: #{@@alias}"
		Spellcaster.send ""
		Spellcaster.send " Verbs: #{@@verbs}"
		Spellcaster.send ""
		Spellcaster.send "<output class=\"\"/>"
	end

	def self.mantle (*args)
		spell_number, remove = args
		spell_number = spell_number.to_i
		mantle = @@mantle[spell_number]
		unless spell_number
			Spellcaster.send "You must specify a valid spell number."
		else
			unless remove
				unless @@mantle.include?(spell)
					@@mantle.push(spell)
					Spellcaster.send "#{spell} has been added to your mantle list."
				else
					Spellcaster.send "Your"
				end
			else
				# if remove ~= /^remove$/
					# @@mantle.
			end
		end
	end

	def self.verb (*args)
		valid_verbs_message = "Valid verbs include: incant, channel, evoke"
		spell, verb = args
		unless spell && verb
			Spellcaster.send "You must specify a valid spell number and verb.  #{valid_verbs_message}"
		else
			if verb == 'clear'
				old_verb = @@verbs[spell]
				@@verbs.delete spell
				Spellcaster.send "Removed verb for spell #{spell}."
			else
				unless VALID_VERBS.include?(verb)
					Spellcaster.send "The specified verb '#{verb}' is invalid.  #{valid_verbs_message}"
				else
					old_verb = @@verbs[spell]
					if old_verb
						Spellcaster.send "Spell #{spell} was set to use the '#{old_verb}' verb, changing to '#{verb}'."
					else
						Spellcaster.send "Spell #{spell} will now use #{verb} verb."
					end
					@@verbs[spell] = verb
					CharSettings[:verbs] = @@verbs
					CharSettings.save
				end
			end
		end
	end

	def self.alias (*args)
		spell, command = args
		unless spell && command
			Spellcaster.send "You must specify a valid spell number and alias name."
		else
			if spell == 'clear'
				@@alias.delete command
				Spellcaster.send "Removed alias '#{command}'."
			else
				old_spell = @@alias[command]
				if old_spell
					Spellcaster.send "Alias '#{command}' was set to spell #{old_spell}, changing to #{spell}."
				else
					Spellcaster.send "Created alias '#{command}' for spell #{spell}."
				end
				@@alias[command] = spell
			end
			CharSettings[:alias] = @@alias
			CharSettings.save
		end
	end

	def self.stance (*args)
		spell, stance = args
		unless spell && stance
			Spellcaster.send "You must specify a valid spell number and stance."
		else
			if stance == 'clear'
				@@stance.delete spell
				Spellcaster.send "Removed stance for spell #{spell}."
			else
				unless STANCES.include?(stance)
					Spellcaster.send "Specified stance '#{stance}' is not recognized."
					Spellcaster.send "Valid options include: #{STANCES.join(', ')}"
				else
					old_stance = @@stance[spell]
					if old_stance
						Spellcaster.send "Stance for spell #{spell} was '#{old_stance}, changing to '#{stance}'."
					else
						Spellcaster.send "Set spell #{spell} to use stance '#{stance}'."
					end
					@@stance[spell] = stance
				end
			end
			CharSettings[:stance] = @@stance
			CharSettings.save
		end
	end

	def self.option (*args)
		option, value = args
		unless option && value
			Spellcaster.send "You must specify a valid option and value."
			Spellcaster.send "Valid options include: #{@@option.keys.join(' ')}"
		else
			option = option.to_sym
			unless @@options.keys.include?(option)
				Spellcaster.send "Specified option '#{option}' is not valid."
				Spellcaster.send "Current options are: #{@@option}"
			else
				value = (value == 'on')
				@@options[option] = value
				CharSettings[:options] = @@options
				CharSettings.save
				Spellcaster.send "Set option '#{option}' to #{value}."
			end
		end
	end

	def self.affordable? (spell, count)
		if spell.num == 516 && checkmana(1)
			true
		elsif count
			checkmana(spell.mana_cost * count.to_i)
		else
			checkmana(spell.mana_cost)
		end
	end

	def self.valid_targets?
		GameObj.npcs.count {|npc| npc.type =~ /aggressive/ && npc.status !~ /dead|gone/ } || 0
	end

	def self.valid_target? (target)
		s1, s2, s3 = target.downcase.split(' ')
		s1 = 'second' if s1 == 'other'
		n = ORDINALS.index(s1) || -1
		if n > -1
			if s3
				pattern = /#{s2}(?:.+?)#{s3}/
			else
				pattern = /#{s2}/
			end
		else
			if s2
				pattern = /#{s1}(?:.+?)#{s2}/
			else
				pattern = /#{s1}/
			end
		end
		# candidate = GameObj.pcs.select {|pc| pc.noun =~ pattern }
		candidate = GameObj.npcs.select {|npc| npc.name =~ pattern }.at(n)
		candidate && candidate.status !~ /dead|gone/ && candidate.type =~ /aggressive/
	end

	def self.cast (input)
		spell_number, spell_target, spell_alias, count = input.values_at(:number, :target, :alias, :count)
		spell = Spell[spell_number]
		
		if spell_target.to_i.to_s == spell_target
			count = spell_target
			spell_target = nil
		end

		unless spell
			Spellcaster.send "Spell number #{spell_number} is not a known spell."
			Spellcaster.prompt
			return
		end
		
		unless spell.known?
			Spellcaster.send "You do not known the #{spell.name} spell!"
			Spellcaster.prompt
			return
		end

		if @@options[:conserve]
			unless Spellcaster.affordable?(spell, count)
				Spellcaster.send "Insufficient mana to cast #{spell.name}."
				Spellcaster.prompt
				return
			end
			if spell.type == 'attack' && spell_target && !Spellcaster.valid_target?(spell_target)
				Spellcaster.send "Could not find valid target matching '#{spell_target}'."
				Spellcaster.prompt
				return
			end
		end

		if @@options[:safety] && spell.type == 'attack' && Spellcaster.valid_targets? == 0
			Spellcaster.send "No valid targets available to safely cast #{spell.name}."
			Spellcaster.prompt
			return
		end
		
		if checkcastrt > 0
			echo "Waiting for cast roundtime..."
			waitcastrt? while checkcastrt > 0
		end

		if @@stance[spell_alias] || @@stance[spell_number] || @@options[:stance] && spell.stance
			stance = @@stance[spell_alias] || @@stance[spell_number] || 'offensive'
			unless checkstance == stance || dead?
				result = dothistimeout "stance #{stance}", 2, STANCE_RX until result =~ STANCE_RX
			end
			result = nil
		end

		should_channel = spell.channel && @@options[:channel]

		verb = @@verbs[spell_alias] || @@verbs[spell_number] || 'cast'
		verb = 'channel evoke' if should_channel && verb == 'evoke'

		if spell_target
			if verb == 'channel evoke'
				put "target #{spell_target}"
				put "incant #{spell_number} #{verb} #{count}"
			else
				put "prepare #{spell_number}"
				put "#{verb} #{spell_target} #{count}"
			end
		else
			unless verb == 'cast'
				put "incant #{spell_number} #{verb} #{count}"
			else
				put "incant #{spell_number} #{count}"
			end
		end

		if @@stance[spell_alias] || @@stance[spell_number] || @@options[:stance] && spell.stance
			stance = 'guarded'
			# if verb == 'channel' || spell.channel
				timeout = (Time.now.to_f + 3.0)
				line = get until (line =~ CAST_RX || (Time.now.to_f) > timeout)
				waitrt if line =~ /You channel/
			# end
			result = dothistimeout "stance #{stance}", 2, STANCE_RX until result =~ STANCE_RX
			result = nil
		end
	end

	Spellcaster.prompt
	echo "Type ;sc for options."
	Spellcaster.prompt

	loop do
		unless SPELL_QUEUE.empty?
			spell = SPELL_QUEUE.pop
			SPELL_QUEUE.clear
			Spellcaster.cast spell
		end
		# unless MANTLE_QUEUE.empty?
		# 	spell = MANTLE_QUEUE.pop
		# 	Spellcaster.cast spell
		# end
		unless SCCMD_QUEUE.empty?
			command = SCCMD_QUEUE.pop
			SCCMD_QUEUE.clear
			Spellcaster.command command
		end
		sleep 0.1
	end

end
