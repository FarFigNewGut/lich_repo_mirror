=begin


The hisskra chieftain appears to be dazzling, drab, and spindly.
=end


class BoonDetector

  class CappedCollection
    MAX_SIZE ||= 200
    attr_accessor :list, :max_size
  
    def initialize(max_size = MAX_SIZE)
      @list     = []
      @max_size = max_size
    end

    def <<(id)
      @list << id
      while @list.size > @max_size
        @list.shift
      end
    end

    def include?(id)
      @list.include?(id)
    end
  end
  
  @@adroit       ||= "Jack of all Trades"
  @@afflicted    ||= "Diseased"
  @@apt          ||= "Counter-attack"
  @@barbed       ||= "Damage Weighting"
  @@belligerent  ||= "Boosted Offense"
  @@blurry       ||= "Confuse"
  @@canny        ||= "Mind Blast"
  @@combative    ||= "Boosted Offense"
  @@dazzling     ||= "Dispelling"
  @@deft         ||= "Jack of all Trades"
  @@diseased     ||= "Diseased"
  @@drab         ||= "Parting Shot"
  @@dreary       ||= "Parting Shot"
  @@ethereal     ||= "Ethereal"
  @@flashy       ||= "Dispelling"
  @@flexile      ||= "Boosted Defense"
  @@flickering   ||= "Blink"
  @@flinty       ||= "Damage Padding"
  @@frenzied     ||= "Frenzy"
  @@ghastly      ||= "Terrifying"
  @@ghostly      ||= "Ethereal"
  @@gleaming     ||= "Crit Weighting"
  @@glittering   ||= "Elemental Flares"
  @@glorious     ||= "Cheat Death"
  @@glowing      ||= "Extra Spells - Elemental"
  @@grotesque    ||= "Terrifying"
  @@hardy        ||= "Crit Padding"
  @@illustrious  ||= "Cheat Death"
  @@indistinct   ||= "Physical Negation"
  @@keen         ||= "Mind Blast"
  @@lanky        ||= "Weaken"
  @@luminous     ||= "Boosted Mana"
  @@lustrous     ||= "Boosted Mana"
  @@muculent     ||= "Regeneration"
  @@nebulous     ||= "Physical Negation"
  @@oozing       ||= "Poisonous"
  @@pestilent    ||= "Diseased"
  @@radiant      ||= "Extra Spells - Spiritual"
  @@raging       ||= "Frenzy"
  @@ready        ||= "Counter-attack"
  @@resolute     ||= "Crit Death Immune"
  @@robust       ||= "Boosted HP"
  @@rune_covered ||= "Magic Immune"
  @@shadowy      ||= "Soul Stealing"
  @@shielded     ||= "Bolt Shield"
  @@shifting     ||= "Confuse"
  @@shimmering   ||= "Crit Weighting"
  @@shining      ||= "Elemental Negation"
  @@sickly_green ||= "Poisonous"
  @@sinuous      ||= "Boosted Defense"
  @@slimy        ||= "Regeneration"
  @@sparkling    ||= "Elemental Negation"
  @@spindly      ||= "Weaken"
  @@spiny        ||= "Damage Weighting"
  @@stalwart     ||= "Boosted HP"
  @@steadfast    ||= "Stun Immune"
  @@stout        ||= "Crit Padding"
  @@tattooed     ||= "Magic Immune"
  @@tenebrous    ||= "Soul Stealing"
  @@tough        ||= "Damage Padding"
  @@twinkling    ||= "Extra Spells - Other"
  @@unflinching  ||= "Crit Death Immune"
  @@unyielding   ||= "Stun Immune"
  @@wavering     ||= "Blink"
  @@wispy        ||= "Ethereal"
  
  def BoonDetector.adroit;        @@adroit;         end
  def BoonDetector.afflicted;     @@afflicted;      end
  def BoonDetector.apt;           @@apt;            end
  def BoonDetector.barbed;        @@barbed;         end
  def BoonDetector.belligerent;   @@belligerent;    end
  def BoonDetector.blurry;        @@blurry;         end
  def BoonDetector.canny;         @@canny;          end
  def BoonDetector.combative;     @@combative;      end
  def BoonDetector.dazzling;      @@dazzling;       end
  def BoonDetector.deft;          @@deft;           end
  def BoonDetector.diseased;      @@diseased;       end
  def BoonDetector.drab;          @@drab;           end
  def BoonDetector.dreary;        @@dreary;         end
  def BoonDetector.ethereal;      @@ethereal;       end
  def BoonDetector.flashy;        @@flashy;         end
  def BoonDetector.flexile;       @@flexile;        end
  def BoonDetector.flickering;    @@flickering;     end
  def BoonDetector.flinty;        @@flinty;         end
  def BoonDetector.frenzied;      @@frenzied;       end
  def BoonDetector.ghastly;       @@ghastly;        end
  def BoonDetector.ghostly;       @@ghostly;        end
  def BoonDetector.gleaming;      @@gleaming;       end
  def BoonDetector.glittering;    @@glittering;     end
  def BoonDetector.glorious;      @@glorious;       end
  def BoonDetector.glowing;       @@glowing;        end
  def BoonDetector.grotesque;     @@grotesque;      end
  def BoonDetector.hardy;         @@hardy;          end
  def BoonDetector.illustrious;   @@illustrious;    end
  def BoonDetector.indistinct;    @@indistinct;     end
  def BoonDetector.keen;          @@keen;           end
  def BoonDetector.lanky;         @@lanky;          end
  def BoonDetector.luminous;      @@luminous;       end
  def BoonDetector.lustrous;      @@lustrous;       end
  def BoonDetector.muculent;      @@muculent;       end
  def BoonDetector.nebulous;      @@nebulous;       end
  def BoonDetector.oozing;        @@oozing;         end
  def BoonDetector.pestilent;     @@pestilent;      end
  def BoonDetector.radiant;       @@radiant;        end
  def BoonDetector.raging;        @@raging;         end
  def BoonDetector.ready;         @@ready;          end
  def BoonDetector.resolute;      @@resolute;       end
  def BoonDetector.robust;        @@robust;         end
  def BoonDetector.rune_covered;  @@rune_covered;   end
  def BoonDetector.shadowy;       @@shadowy;        end
  def BoonDetector.shielded;      @@shielded;       end
  def BoonDetector.shifting;      @@shifting;       end
  def BoonDetector.shimmering;    @@shimmering;     end
  def BoonDetector.shining;       @@shining;        end
  def BoonDetector.sickly_green;  @@sickly_green;   end
  def BoonDetector.sinuous;       @@sinuous;        end
  def BoonDetector.slimy;         @@slimy;          end
  def BoonDetector.sparkling;     @@sparkling;      end
  def BoonDetector.spindly;       @@spindly;        end
  def BoonDetector.spiny;         @@spiny;          end
  def BoonDetector.stalwart;      @@stalwart;       end
  def BoonDetector.steadfast;     @@steadfast;      end
  def BoonDetector.stout;         @@stout;          end
  def BoonDetector.tattooed;      @@tattooed;       end
  def BoonDetector.tenebrous;     @@tenebrous;      end
  def BoonDetector.tough;         @@tough;          end
  def BoonDetector.twinkling;     @@twinkling;      end
  def BoonDetector.unflinching;   @@unflinching;    end
  def BoonDetector.unyielding;    @@unyielding;     end
  def BoonDetector.wavering;      @@wavering;       end
  def BoonDetector.wispy;         @@wispy;          end

  def BoonDetector.name(name)
    BoonDetector.send(name.to_s.gsub(/[\s\-]/, '_').gsub("'", "").downcase)
  end
  
  def BoonDetector.method_missing(arg1)
    echo "#{arg1} is not a defined Boon type.  Is it another Boon type?"
  end
  
  def BoonDetector.appraise(npc)
    lines = nil
    lines = Lich::Util.quiet_command_xml("appraise ##{npc.id}", /The <pushBold\/><a exist="\d+" noun="\w+">[\w\s-]+<\/a><popBold\/> is \w+ in size and about |^Usage\:/) if GameObj.targets.any?{ |target| target.id == npc.id }
    if lines.find { |l| l =~ /The <pushBold\/><a exist="\d+" noun="\w+">[\w\s-]+<\/a><popBold\/> appears to be (.*)\./ }
      return adjectives = Regexp.last_match[1].to_s.gsub('and ', '').gsub('sickly green', 'sickly_green').gsub(',', '').split
    else
      return nil
    end
  end

  def BoonDetector.watcher
    npc_ids	= CappedCollection.new
    found_room = nil
    loop {
      if !(boon_creatures = GameObj.targets.select { |target| target.type =~ /boon/ }).empty? && found_room.nil? && GameObj.pcs.nil?
        found_room = Room.current.id
        boon_creatures.each { |npc|
          next if npc_ids.include?(npc.id)
          if (adjectives = BoonDetector.appraise(npc))
            boons = []
            adjectives.each { |adjective|
              boons.push(adjective + "(" + BoonDetector.name(adjective) + ")")
            }
            message = []
            message.push("(#{Time.now.strftime("%H:%M:%S")})")
            message.push("Room: #{found_room}")
            message.push("Name: #{npc.name}")
            message.push("ID: #{npc.id}")
            message.push("\n          ")
            message.push("Boons: #{boons.join(", ")}")
            Lich::Messaging.stream_window(message.join(" - "))
            npc_ids << npc.id
          end
        }
        sleep(0.5) until found_room != Room.current.id
        found_room = nil
      end
      sleep(0.5)
    }
  end
end

BoonDetector.watcher