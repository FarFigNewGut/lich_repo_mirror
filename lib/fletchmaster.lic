#Ruby
=begin
This script is a work-in-progress for mastering fletching.

It will begin fletching in your current room.
When you run out of wood, it will run to the fletcher and buy it for you (using #40, should check for all towns)
  Can get coins from the bank 
Can use a garbage can.
Only works on an arrow until a rank is gained or we get past the first three steps.
Pauses for experience if numbed or higher (presently hardcoded and thresholds must be changed by user directly in code)

Has a primitive GUI for variables.  Currently supported:
  Non-knife dagger
  Customized garbage can
  Handaxe
  TODO: Preferred fletching room / sane defaults
  TODO: Toggle for experience pausing.

Usage: Please run it from a room you want to fletch in or run setup to change the defaults.

    author: Kaldonis
    name: fletchmaster
    tags: fletching, artisan, guild, hardcore
    version: 1.0

===SEE THE GRAPHICAL INTERFACE===

;fletchmaster setup

=end

silence_me

hook_style = proc { |server_string|
  if server_string =~ /^I could not find what you were referring to\./
    DownstreamHook.remove('fletchmaster')
    echo "No knife!"
    nil
  elsif server_string =~/^You see nothing unusual\./
    DownstreamHook.remove('fletchmaster')
    echo "Knife!"
    nil
  else
    server_string
  end 
}

before_dying {
  DownstreamHook.remove('fletchmaster')
}

# basic GUI construct from ;mybounty
setup = proc{
	Gtk.queue {
		$FM_WINDOW = Gtk::Window.new
		$FM_WINDOW.title = "FletchMaster Setup"
		$FM_WINDOW.set_border_width(10)
		$FM_BOX = Gtk::VBox.new(false)
		$FM_BOX.set_border_width(5)

		$FM_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)

		$FM_WINDOW.add($FM_BOX)
		$FM_NOTEBOOK = Gtk::Notebook.new
		$FM_NOTEBOOK.set_show_border(true)
		$FM_BOX.add($FM_NOTEBOOK)
		$FM_NOTEBOOK.append_page($FM_VERTICAL_BOX1, Gtk::Label.new('General'))

		$FM_ENTRY = Hash.new 
		$FM_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$FM_TABLE1 = Gtk::Table.new(6, 3, false)
		$FM_TABLE1.row_spacings=3
		$FM_TABLE1.column_spacings=3
		$FM_VERTICAL_BOX1.pack_start($FM_TABLE1, false, false, 0)

	}

	def self.add_label_entry(table, label, variable)
		size = $FM_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.fletchmaster[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$FM_ENTRY[variable] = entry
		$FM_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$FM_ENTRY = Hash.new
		add_label_entry($FM_TABLE1, "Dagger:", 'dagger_setup')
		add_label_entry($FM_TABLE1, "Handaxe:", 'handaxe_setup')
		add_label_entry($FM_TABLE1, "Garbage:", 'garbage_setup')

	}

        
	Gtk.queue {
		$FM_WINDOW.signal_connect("delete_event") {
			$FM_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {
		$FM_TOOLTIPS = Gtk::Tooltips.new
		$FM_TOOLTIPS.enable

		label = Gtk::Label.new
		label.set_markup("Leave the boxes <b>blank</b> to use defaults.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(5, 0, 0, 25)
		align.add(label)
		$FM_TABLE1.attach(align, 1, 2, 9, 10)

		$FM_WINDOW.show_all
	}
        
	$FM_SETUP_COMPLETED = false
	until($FM_SETUP_COMPLETED)
		sleep 1
	end
       
	UserVars.fletchmaster ||= Hash.new
	$FM_ENTRY.keys.each { |key|
		if( $FM_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $FM_ENTRY[key].active?
			UserVars.fletchmaster[key] = $FM_ENTRY[key].active?
		else
			if(key == 'wounded_eval')
				UserVars.fletchmaster[key] = $FM_ENTRY[key].text
			else
				UserVars.fletchmaster[key] = $FM_ENTRY[key].text.strip.downcase
			end
		end
	}
	UserVars.save()
        
	Gtk.queue {
		$FM_WINDOW.destroy
	}
}


################
## Help
################################################

def usage
		respond "no usage written yet, please come again"
		exit
end


if script.vars[1] == "setup"
	setup.call
	exit
#elsif script.vars[1] == "help"
#	usage
#elsif script.vars[1] == "?"
#	usage
#elsif script.vars[1] =~ /(.*)/
#	message("Usage is: 
#;fletchmaster setup 
#;fletchmaster help
end

# this routine is mostly from ;go2
check_silvers = proc {
        hook_proc = proc { |server_string|
                if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
                        nil
                elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
                        DownstreamHook.remove('fletchmaster_check_silvers')
                        nil  
                else
                        server_string
                end
        }
        clear
        DownstreamHook.add('fletchmaster_check_silvers', hook_proc)
        silence_me unless undo_silence = silence_me
        put 'info'
        silence_me if undo_silence
        while (line = get) 
                if line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
                        silvers = $1.to_i
                        break
                end
        end
        silvers
}


#inits
start_spot = Room.current.id

if UserVars.fletchmaster["dagger_setup"].nil? || UserVars.fletchmaster["dagger_setup"].empty?
  dagger = "knife"
  echo "No dagger set.  Using default: #{dagger}.  Use setup to change." 
else
  dagger = UserVars.fletchmaster["dagger_setup"] 
  echo "Using dagger: #{dagger}"
end

DownstreamHook.add('fletchmaster',hook_style)
fput "look my #{dagger}"

if UserVars.fletchmaster["handaxe_setup"].nil? || UserVars.fletchmaster["handaxe_setup"].empty?
  handaxe = "handaxe"
  echo "No handaxe set.  Using default: #{handaxe}.  Use setup to change." 
else
  dagger = UserVars.fletchmaster["handaxe_setup"] 
  echo "Using handaxe: #{handaxe}"
end

garbage = ""
garbage_hash = /barrel|bin|fireplace|wastebasket/
GameObj.loot.find_all { |loot| if loot.name =~ /#{garbage_hash}/ ; garbage = loot.noun; break ; end; }

if UserVars.fletchmaster["garbage_setup"].nil? || UserVars.fletchmaster["garbage_setup"].empty?
  if Room.current.tags.include?("fletcher")
    goto "FLETCHER"
  end
  if garbage.nil? || garbage.empty? 
    # no setting, and we are not in the fletcher, and the room didn't have a detected garbage can
    echo "No garbage can could be found automatically.  Please use setup to customize it.  All shafts will be dropped!"
  else 
    echo "No garbage set.  Using room default: #{garbage}." 
  end
else
  garbage = UserVars.fletchmaster["garbage_setup"] 
  echo "Using custom garbage: #{garbage}"
end

# TODO: Check custom garbage, check custom knife.

#testing GUI setup
#exit

silvers_min = 200
silvers_max = 1000

woodorderno = 40
woodamount = 10

FLETCHING:

empty_hands
fput "get my #{dagger}"
fput "swap"

BEGIN:
    waitrt?
    fput "get 1 my SHAFT "
    match "SHAFTS", "Get what?"
    match "CUT", "arrow shaft"
  matchwait
CUT:
    waitrt?
    # TODO: Bug that causes it to hang?
    #        You need to measure, before cutting to proper length.
    fput "cut my SHAFT with my #{dagger}"
    match "RESTART", "Generally, you should paint or crest your shafts before cutting nocks in them"
    match "RESTART", "Do you mean to CUT NOCKS in the arrow shaft"
    match "RESTART", "You need to measure, before cutting to proper length"
    match "RANK", "That was a little easier"
    match "CHECK", "Roundtime"
  matchwait
CHECK:
    waitrt?
    match "NOCK", "shaft "
    match "RESTART", "#{dagger}"
    fput "hands"
  matchwait
NOCK:
    waitrt?
    fput "cut nock in my SHAFT with my #{dagger}"
    fput "cut nock in my SHAFT with my #{dagger}"
    match "RANK", "That was a little easier"
    match "RESTART", "Roundtime"
  matchwait
WAITEXP:
    sleep 30
RANK:
      fput "exp"
      match "RESTART", "Your mind is clear as a bell"
      match "RESTART", "Your mind is fresh and clear"
      match "RESTART", "Your mind is clear"
      match "RESTART", "Your mind is muddled"
      match "WAITEXP", "Your mind is becoming numbed"
      match "WAITEXP", "Your mind is numbed"
      match "WAITEXP", "You must rest"
  matchwait
RESTART:
    waitrt?
  if garbage.nil? || garbage.empty?
    fput "put my SHAFT"
  else
    fput "put my SHAFT in #{garbage}"
  end
goto "BEGIN"
  
FLETCHER:
  current_silvers = check_silvers.call
  if current_silvers < silvers_min
    empty_hands
    fput "gird"
    Script.run('go2', 'bank')
    fput "deposit all"
    fput "withdraw #{silvers_max}"
    line = get until line =~ /^The teller/
    if line =~ /The teller flips through the books and then looks up with a suspicious expression and says/
      echo "Not enough coins in account.  Get more silvers or decrease silvers_max below #{silvers_max} silvers in #{$lich_char}#{script.name}"
      exit
    end
  
  end
  if !Room.current.tags.include?("fletcher")
    empty_hands
    fput "gird"
    Script.run('go2', 'fletcher')
  end
  empty_hands
  Script.run('order', '40 10')
  #this part is broken...
  #Script.run('go2', '#{start_spot}')
  # TODO need to fail more politely
  Script.run('go2', start_spot.to_s)
  
  goto "STARTWOOD"
  #Script.run('order', '#{woodorderno} #{woodamount}')
exit

SHAFTS:
  echo "No SHAFTs!"
  empty_hands
  fput "get my #{handaxe}"
  match "WOOD", /You remove/
  match "WOOD", /You grab/
  match "FLETCHER", /Get what?/
  fput "get my wood"
matchwait

STARTWOOD:
## wooddaid.lic import
  empty_hands
  fput "get my #{handaxe}"
TOP:
    match "WOOD", /You remove/
    match "WOOD", /You grab/
    match "FLETCHING", /Get what?/
    fput "get my wood"
  matchwait
WOOD:
    match "WOODCUT", /With carefully placed cuts, you split/
    fput "cut arr from wood with hand"
  matchwait

WOODCUT:
    waitrt?
    fput "stow l"
goto "TOP"

## Stinkets 471707 at start of fletching
