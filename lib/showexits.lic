=begin

  showexits.lic: show current mapdb exits for room, with clickable links for FEs that support it.

  Can be passed a LichID or RealID(uid) to get that room's exits.

  Examples:
    ;showexits 228
    ;showexits u3003
    ;showexits

        author: elanthia-online
          game: any
          tags: mapdb, exits, paths, stringprocs
       version: 1.0.0
      required: Lich >= 5.6.2

     Help Contribute: https://github.com/elanthia-online/scripts

  Version Control:
    Major_change.feature_addition.bugfix
  v1.0.0  (2025-02-04)
    - initial release
=end

require 'terminal-table'

def valid_exits(room)
  if room.is_a?(Integer) || room.is_a?(String)
    room = room.to_s
    if room =~ /^u(\d+)$/
      lich_id = Map.ids_from_uid($1.to_i).first
      return {} if lich_id.nil?
      room = Room[lich_id]
    else
      room = Room[room]
    end
  elsif room.nil?
    room = Room.current
  end
  return unless room.is_a?(Map)
  room_exits = {}
  Room[room.id].wayto.each { |key, value|
    if value.to_s =~ /^(?:o|d|u|n|ne|e|se|s|sw|w|nw|out|down|up|north|northeast|east|southeast|south|southwest|west|northwest)$/
      room_exits[key] = { :wayto => LONGDIR[value] ? LONGDIR[value] : value, :name => Room[key].title.first.gsub(/\[|\]/, ''), :location => Room[key].location }
    end
  }
  Room[room.id].wayto.each { |key, value|
    next if value.to_s =~ /^(?:o|d|u|n|ne|e|se|s|sw|w|nw|out|down|up|north|northeast|east|southeast|south|southwest|west|northwest)$/
    if value.class != Proc
      room_exits[key] = { :wayto => value, :name => Room[key].title.first.gsub(/\[|\]/, ''), :location => Room[key].location }
    end
  }
  Room[room.id].wayto.each { |key, value|
    if value.class == Proc
      if Room[room.id].timeto[key].is_a?(Numeric) || (Room[room.id].timeto[key].is_a?(StringProc) && Room[room.id].timeto[key].call.is_a?(Numeric))
        room_exits[key] = { :wayto => "StringProc", :name => Room[key].title.first.gsub(/\[|\]/, ''), :location => Room[key].location }
      end
    end
  }
  return room_exits
end

def show_exits(room_exits)
  return if room_exits.nil?
  return unless room_exits.is_a?(Hash) && !room_exits.empty?
  headers = ['Room #', 'Wayto', 'Room Name', 'Room Location']
  table_rows = []
  room_exits.each { |key, value|
    table_rows.push([key, value[:wayto], value[:name], value[:location]])
  }

  table = Terminal::Table.new(
    headings: headers,
    rows: table_rows
  )
  table = table.to_s
  row_lines = /^\| ([\d]+\s+\| [\w\s\-]+?)\s+\| .*? \| .*? \|$/
  rows = table.scan(row_lines).flatten
  rows.each { |row|
    if row =~ /^(?<lich_id>\d+)\s+\| (?<wayto>[\w\s\-]+?)$/
      matches = Regexp.last_match
      next if Script.current.vars[0]
      if matches[:wayto] == "StringProc"
        row_cmd = row.gsub(matches[:wayto], "<d cmd=';go2 #{matches[:lich_id]}'>#{matches[:wayto]}</d>")
      else
        row_cmd = row.gsub(matches[:wayto], "<d cmd='#{matches[:wayto]}'>#{matches[:wayto]}</d>")
      end
      table = table.gsub(row, row_cmd)
    end
  }
  Lich::Messaging.mono(table)
end

show_exits(valid_exits(Script.current.vars[0]))
