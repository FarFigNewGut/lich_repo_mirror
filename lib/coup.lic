=begin

coup.lic is part 1/2 of
Coup de Grace script, compatible with Bigshot
Uses gracemon script to track Empowerment buff

Attempts to execute the provided target, or current target if none is provided.
Breaks if already empowered, or if target is not incapacitated, or if stamina is below maneuver cost.

send feedback to stayrange on PC

Usage: ;coup
OR ;coup target
OR ;coup setup
OR ;coup help

Bigshot command examples: 

    sleep 0.5, script coup target(!prone s20), cman hamstring target(prone s29), attack(prone !s29), attack(!s20)
        (coup else hamstring else attack)
    
        OR setup and set attackanyway with a stance

    cman hamstring target(prone s29), script coup target()


    author: Gwrawr (stayrange)
        name: coup
        tags: coup de grace, square, warrior, rogue, monk, cman
        version: 1.3
    credit to Nihiladrem for much of the bigshot interface

    #TODO Maintain ledger of mob HP in gracemon
    #TODO Match versions of coup, gracemon
                                                       
=end

setup = proc {

    echo "Attack when you can't coup de grace? (Simplifies bigshot commands, check comments)"
	echo "answer 1 or 0, yes or no"
	toggle_upstream
	loop do
		input = upstream_get
		case input
            when /y|1/
                Settings["attackanyway"]=true
                break
            when /n|0/
                Settings["attackanyway"]=false
                break
		end
	end

    if Settings["attackanyway"]=true
        echo "Attack stance (when you can't coup de grace)?"
        echo "type all or part of"
        loop do
            input = upstream_get
            case input
                when /offensive|of/
                    Settings["attackstance"]="offensive"
                    break
                when /advance|ad/
                    Settings["attackstance"]="advance"
                    break
                when /forward|fo/
                    Settings["attackstance"]="forward"
                    break
                when /neutral|n/
                    Settings["attackstance"]="neutral"
                    break
                when /guarded|g/
                    Settings["attackstance"]="guarded"
                    break
                when /defensive|d/
                    Settings["attackstance"]="defensive"
                    break
            end
        end

        echo "Stance dance (when you can't coup de grace)?"
        echo "answer 1 or 0, yes or no"
        loop do
            input = upstream_get
            case input
                when /y|1/
                    Settings["stancedance"]=true
                    break
                when /n|0/
                    Settings["stancedance"]=false
                    break
            end
        end
    end

    echo "Control mstrikes (when you can't coup de grace)?"
    echo "answer 1 or 0, yes or no"
    loop do
        input = upstream_get
        case input
            when /y|1/
                Settings["mstrike"]=true
                break
            when /n|0/
                Settings["mstrike"]=false
                break
        end
    end

    if Settings["mstrike"]
        echo "How many targets before mstriking?"
        echo "enter an integer between 2 and 10"
        loop do
            input = upstream_get
            case input
                when /(?<targets>\d)$/
                    targets = $~[:targets].to_i
                    if (targets<=10 && targets >= 2)
                        Settings["mstriketargets"]=targets
                        break 
                    end
            end
        end

        echo "Mstrike during cooldown?"
        echo "1 or 0, yes or no"
        loop do
            input = upstream_get
            case input
                when /y|1/
                    Settings["mstrikeduringcd"]=true
                    break
                when /n|0/
                    Settings["mstrikeduringcd"]=false
                    break
            end
        end
    end

	toggle_upstream
}

if variable[1]
	for i in 1..variable.length() do
		case variable[i]
			when /setup/
				setup.call()
				Settings.save
                exit
		end
	end
end

Settings["attackanyway"]=true if Settings["attackanyway"] == nil
Settings["attackstance"]="offensive" if Settings["attackstance"] == nil
Settings["stancedance"]=true if Settings["stancedance"] == nil
Settings["mstrike"]=true if Settings["mstrike"] == nil
Settings["mstriketargets"]=2 if Settings["mstriketargets"] == nil
Settings["mstrikeduringcd"]=false if Settings["mstrikeduringcd"] == nil
Settings.save

attackanyway=Settings["attackanyway"]

#get part 2
Script.run "repo", "download gracemon.lic" unless Script.exists? "gracemon"
#VERSIONMATCH

#basic attack on exit
#resume bigshot
before_dying { 
    if attackanyway
        while checkstance != Settings["attackstance"]
			fput "stance #{Settings["attackstance"]}"
		end

        if Settings["mstrike"] and GameObj.targets.length >= Settings["mstriketargets"] and (!Spell[9005].active? || Settings["mstrikeduringcd"])
            fput "mstrike"
        else
            fput "attack"
        end

        while Settings["stancedance"] && checkstance != "defensive"
            fput "stance defensive"
        end
    end
    unpause_script "bigshot" if running? "bigshot" 
}

#exit if empowered or not enough stamina
exit if running? "gracemon"
exit if stamina < 20
#bigshot can't know about gracemon, or bigshot will keep waiting for it to end
pause_script "bigshot" if running? "bigshot"


#set target if given a target and target is not set, or if no target is yet set
#thanks Nihiladrem!
unless (variable[0].nil?) || GameObj.npcs["##{XMLData.current_target_id}".to_i].nil?
	target = variable[0]
	if ("##{XMLData.current_target_id}") != target
		fput "target #{target}"
	end
end

#some things change (sorry olaf)
exit if GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /dead/
exit unless GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /stunned|lying down|webbed/


#execute maneuver
waitrt?
waitcastrt?
fput "cman coup"

#collect lines until result from "cman coup"
lines = []
loop do
    line = get
    lines << line
    case line
    when /Roundtime|Your muscles|too injured|Coup de Grace what|no valid target|aware of your intentions|injured enough to be susceptible|already dead|That would most likely be a bad idea/
        break
    when GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /dead/
        break
    end
end

#keep it secret, keep it safe
for line in lines
    if line =~ /heady flush/
        Script.start "gracemon"
        attackanyway=false
    end
end

#who?
unpause_script "bigshot" if running? "bigshot"
exit