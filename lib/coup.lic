=begin

coup.lic is part 1/2 of
Coup de Grace script, compatible with Bigshot
Uses gracemon script to track Empowerment buff

Under active development 12/26/2021

Attempts to execute the provided target, or current target if none is provided.
Breaks if already empowered, or if target is not incapacitated, or if stamina is below maneuver cost.

send feedback to stayrange on PC

Usage: ;coup
OR ;coup target
OR ;coup setup
OR ;coup list
OR ;coup help


Bigshot command examples: 

    sleep 0.5, script coup target(!prone s20), cman hamstring target(prone s29), attack(prone !s29), attack(!s20)
        (coup else hamstring else attack)
    
        OR setup and set attackanyway with a stance

    cman hamstring target(prone s29), script coup target()


    author: Gwrawr (stayrange)
        name: coup
        tags: coup de grace, coup, execute, enhance strength, enhanced strength, empowered, square, warrior, rogue, monk, cman
        version: 1.4
    credit to Nihiladrem for much of the bigshot interface

	#BUGFIX Bigshot doesn't actually give our character a target, so with a familiar in the room ...
        if not given a target name/noun... the familiar is targeted
	#	...use .targets and retarget

    #TODO 
    #TODO Maintain ledger of mob HP in gracemon
    #TODO Match versions of coup, gracemon
                                                       
=end

setup = proc {

    echo
    echo "Attack when you can't coup de grace? (Simplifies bigshot commands, check comments)"
	echo "answer 1 or 0, yes or no"
    echo
	toggle_upstream
	loop do
		input = upstream_get
		case input
            when /y|1/
                Settings["attackanyway"]=true
                break
            when /n|0/
                Settings["attackanyway"]=false
                break
		end
	end

    if Settings["attackanyway"]=true
        echo
        echo "Attack stance (when you can't coup de grace)?"
        echo "type all or part of, or 1->6 off->def"
        echo
        loop do
            input = upstream_get
            case input
                when /offensive|of|1/
                    Settings["attackstance"]="offensive"
                    break
                when /advance|ad|2/
                    Settings["attackstance"]="advance"
                    break
                when /forward|fo|3/
                    Settings["attackstance"]="forward"
                    break
                when /neutral|n|4/
                    Settings["attackstance"]="neutral"
                    break
                when /guarded|g|5/
                    Settings["attackstance"]="guarded"
                    break
                when /defensive|d|6/
                    Settings["attackstance"]="defensive"
                    break
            end
        end

        echo
        echo "Stance dance (when you can't coup de grace)?"
        echo "answer 1 or 0, yes or no"
        echo
        loop do
            input = upstream_get
            case input
                when /y|Y|1/
                    Settings["stancedance"]=true
                    break
                when /n|N|0/
                    Settings["stancedance"]=false
                    break
            end
        end
    end

    echo
    echo "Control mstrikes (when you can't coup de grace)?"
    echo "answer 1 or 0, yes or no"
    echo
    loop do
        input = upstream_get
        case input
            when /y|Y|1/
                Settings["mstrike"]=true
                break
            when /n|N|0/
                Settings["mstrike"]=false
                break
        end
    end

    if Settings["mstrike"]
        echo
        echo "How many targets before mstriking?"
        echo "enter an integer between 2 and 9"
        echo
        loop do
            input = upstream_get
            case input
                when /(?<targets>\d)$/
                    targets = $~[:targets].to_i
                    if (targets<=9 && targets >= 2)
                        Settings["mstriketargets"]=targets
                        break 
                    end
            end
        end

        echo
        echo "Mstrike during cooldown?"
        echo "1 or 0, yes or no"
        echo
        loop do
            input = upstream_get
            case input
                when /y|Y|1/
                    Settings["mstrikeduringcd"]=true
                    break
                when /n|N|0/
                    Settings["mstrikeduringcd"]=false
                    break
            end
        end

        if Settings["mstrikeduringcd"]
            echo
            echo "Per your settings, confirm mstrike during cooldown?"
            echo "1 or 0, yes or no"
            echo
            loop do
                input = upstream_get
                case input
                    when /y|Y|1/
                        Settings["confirmmstrikeduringcd"]=true
                        break
                    when /n|N|0/
                        Settings["confirmmstrikeduringcd"]=false
                        break
                end
            end


            echo
            echo "Cost to mstrike during cooldown?"
            echo "enter the cost"
            echo
            loop do
                input = upstream_get
                case input
                    when /(?<mstrikecdcost>\d*)$/
                        mstrikecdcost = $~[:mstrikecdcost].to_i
                        if (mstrikecdcost<=100 && mstrikecdcost >= 0)
                            Settings["mstrikecdcost"]=mstrikecdcost
                            break 
                        end
                end
            end
        end
    end

	toggle_upstream
}

list = proc {

    respond
    respond "Coup de Grace settings"
    respond
    respond "attackanyway               =   #{Settings["attackanyway"]}"
    respond "attackstance               =   #{Settings["attackstance"]}"
    respond "stancedance                =   #{Settings["stancedance"]}"
    respond "mstrike                    =   #{Settings["mstrike"]}"
    respond "mstriketargets             =   #{Settings["mstriketargets"]}"
    respond "mstrikeduringcd            =   #{Settings["mstrikeduringcd"]}"
    respond "confirmmstrikeduringcd     =   #{Settings["confirmmstrikeduringcd"]}"
    respond "mstrikecdcost              =   #{Settings["mstrikecdcost"]}"
    respond

}

if variable[1]
	for i in 1..variable.length() do
		case variable[i]
			when /setup/
				setup.call()
                list.call()
				Settings.save
                exit
            when /list/
                list.call()
                exit
            when /help/
                echo
                echo
                echo ";coup setup OR ;coup target OR ;coup OR ;coup list"
                echo
                echo "default settings bigshot eg cman hamstring target(prone s29), script coup target()"
                echo
                echo
                exit
		end
	end
end

Settings["attackanyway"]=true if Settings["attackanyway"] == nil
Settings["attackstance"]="offensive" if Settings["attackstance"] == nil
Settings["stancedance"]=true if Settings["stancedance"] == nil
Settings["mstrike"]=true if Settings["mstrike"] == nil
Settings["mstriketargets"]=2 if Settings["mstriketargets"] == nil
Settings["mstrikeduringcd"]=false if Settings["mstrikeduringcd"] == nil
Settings["confirmmstrikeduringcd"]=false if Settings["confirmmstrikeduringcd"] == nil
Settings["mstrikecdcost"]=50 if Settings["mstrikecdcost"] == nil
Settings.save

attackanyway=Settings["attackanyway"]

#get part 2
Script.run "repo", "download gracemon.lic" unless Script.exists? "gracemon"
#VERSIONMATCH

#basic attack on exit
#resume bigshot
before_dying { 
    if attackanyway
        while checkstance != Settings["attackstance"]
			fput "stance #{Settings["attackstance"]}"
		end

        if Settings["mstrike"] and !Spell[9699].active? and GameObj.targets.length >= Settings["mstriketargets"] and (!Spell[9005].active? || (Settings["mstrikeduringcd"] && Settings["mstrikecdcost"] <= stamina))
            fput "mstrike"
            fput "mstrike" if Spell[9005].active? && (Settings["mstrikecdcost"] <= stamina) && Settings["mstrikeduringcd"] && !Spell[506].active?
        else
            fput "attack"
        end

        while Settings["stancedance"] && checkstance != "defensive"
            fput "stance defensive"
        end
    end
    unpause_script "bigshot" if running? "bigshot" 
}

#exit if empowered or not enough stamina
exit if running? "gracemon"
exit if stamina < 20
#bigshot can't know about gracemon, or bigshot will keep waiting for it to end
pause_script "bigshot" if running? "bigshot"


#BUGGY LOGIC
#this only runs if variable[0] exists AND the target is not set to
#set target if given a target and target is not set, or if no target is yet set
#thanks Nihiladrem!
unless (variable[0].nil?) || GameObj.npcs["##{XMLData.current_target_id}".to_i].nil?
	target = variable[0]
	if ("##{XMLData.current_target_id}") != target
		fput "target #{target}"
	end
end

#some things change (sorry olaf)
3.times{
    if (GameObj.npcs["##{XMLData.current_target_id}".to_i] == nil || GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /dead/)
        echo "\n\nGetting new target\nTarget status is #{GameObj.npcs["##{XMLData.current_target_id}".to_i].status}\n\n"
        last = XMLData.current_target_id
        fput "target next"
        break if last == XMLData.current_target_id
    end
}

#valid target?
exit unless GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /stunned|lying down|webbed|sleeping/

docoupe = proc {
    waitrt?
    waitcastrt?
    fput "cman coup"
}


#collect lines until result from "cman coup"
lines = []
loop do
    docoupe.call()
    line = get
    lines << line
    case line
    when /heady flush/
        Script.start "gracemon"
        attackanyway=false
        break
    when /...wait/
        pause
    when /Roundtime|Your muscles|too injured|Coup de Grace what|no valid target|aware of your intentions|injured enough to be susceptible|already dead|That would most likely be a bad idea|little bit late/
        break
    when GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /dead/
        break
    end
end

#who?
unpause_script "bigshot" if running? "bigshot"
exit