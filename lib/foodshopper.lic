=begin

	https://discord.com/channels/226045346399256576/1285045233238806539
	
	Script created with Chat GPT.

    Food Shopper Script
    A utility script to search for foods based on names, descriptions, and locations.
    Supports multi-term searches with weighted relevance based on matches in the name, description, or location.
    
    SYNTAX - ;foodshopper TERM1 [TERM2] [TERM3] etc
    
    Author: Phocosoen
    Version: 1.0

    changelog:
        1.0 (2024-09-21)
            - Initial release
            - Supports searching with multiple terms
            - Results sorted based on relevance (name matches carry the highest weight)
            - Limits output to the most relevant 10 results with an indication of additional results if applicable.

=end

require 'yaml'

# Define paths for compiled data
DATA_DIR = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
COMPILED_FOODS_PATH = "#{DATA_DIR}compiled_foods.yaml"
GLOBAL_CONSTANTS_PATH = "#{$script_dir}/npcfoods.rb"  # Load from npcfoods.rb
METADATA_PATH = "#{DATA_DIR}compiled_foods_metadata.yaml"

# Ensure directories exist
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(DATA_DIR) unless Dir.exist?(DATA_DIR)

# Function to notify player to download the npcfoods.rb file if missing
def notify_player_to_download
  unless File.exist?(GLOBAL_CONSTANTS_PATH)
    message = "\n\n\n" \
              "************************************************************\n" \
              "*                                                          *\n" \
              "*   npcfoods.rb is missing.                                *\n" \
              "*                                                          *\n" \
              "*   Please download it using the command:                  *\n" \
              "*                                                          *\n" \
              "*     ;repo download npcfoods.rb                           *\n" \
              "*                                                          *\n" \
              "*   in your game console to ensure the script functions     *\n" \
              "*   correctly.                                             *\n" \
              "*                                                          *\n" \
              "************************************************************\n" \
              "\n\n\n"
    echo(message)
    exit
  end
end

# Ensure npcfoods.rb is present before proceeding
notify_player_to_download

# Function to get the current file size of npcfoods.rb
def current_file_size
  File.size(GLOBAL_CONSTANTS_PATH)
end

# Load or compile FOODS_DB with metadata check
def load_or_compile_foods_data(force_recompile = false)
  metadata = {}

  if File.exist?(METADATA_PATH)
    metadata = YAML.load_file(METADATA_PATH) || {}
  end

  last_compiled_size = metadata['file_size']
  current_size = current_file_size

  if force_recompile || !File.exist?(COMPILED_FOODS_PATH) || last_compiled_size != current_size
    echo("Compiling food data from npcfoods.rb...")

    begin
      load GLOBAL_CONSTANTS_PATH
    rescue LoadError => e
      echo("Error loading npcfoods.rb: #{e.message}")
      return {}
    rescue StandardError => e
      echo("Error during loading npcfoods.rb: #{e.message}")
      return {}
    end

    unless defined?(FOODS_DB)
      echo("Error: FOODS_DB constant is not defined in npcfoods.rb. Check that it is defined correctly and accessible.")
      return {}
    end

    # Save compiled data to YAML file
    File.open(COMPILED_FOODS_PATH, 'w') { |file| file.write(FOODS_DB.to_yaml) }
    # Save metadata
    File.open(METADATA_PATH, 'w') { |file| file.write({ 'file_size' => current_size }.to_yaml) }

    echo("Compiled food data saved to YAML file.")
    echo("Note: If foodshopper compiles a new YAML, please run the search again for the term you were searching for.")
    return {} # Return empty to indicate recompilation
  else
    # Attempt to load compiled data
    begin
      YAML.load_file(COMPILED_FOODS_PATH)
    rescue StandardError => e
      echo("Error loading compiled foods data: #{e.message}")
      {}
    end
  end
end

# Load FOODS_DB initially without reassigning the constant
FOODS_DB = load_or_compile_foods_data

# Function to safely access and possibly recompile FOODS_DB without reassigning the constant
def get_foods_db(force_recompile = false)
  force_recompile ? load_or_compile_foods_data(force_recompile) : FOODS_DB
end

# Levenshtein distance function for fuzzy matching
def levenshtein_distance(str1, str2)
  s1, s2 = str1.downcase, str2.downcase
  matrix = [(0..s1.length).to_a]
  (1..s2.length).each { |j| matrix << [j] + [0] * (s1.length) }

  (1..s2.length).each do |i|
    (1..s1.length).each do |j|
      if s2[i - 1] == s1[j - 1]
        matrix[i][j] = matrix[i - 1][j - 1]
      else
        matrix[i][j] = [matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]].min + 1
      end
    end
  end
  matrix.last.last
end

# Function to find and display foods by terms (updated to improve relevance scoring with multiple term matches)
def find_foods_by_terms(terms, database)
  terms = terms.map(&:downcase).map(&:strip)
  matching_items = []

  echo("Searching for terms '#{terms.join(' ')}' across specific fields...") if $debug_mode

  # Iterate through the food items
  database.each do |shop_name, foods|
    foods.each do |food|
      # Include the shop name in the food item for display purposes
      food = food.dup
      food[:shop_name] = shop_name

      # For each item, track how many fields match
      relevance_score = 0

      # Define a regex pattern to match words that start with the search term
      terms_regex = terms.map { |term| /\b#{Regexp.escape(term)}\w*/i }

      # Check how many terms match in each field (name, description, or location)
      name_match_count = terms_regex.count { |term| food[:name].downcase.match?(term) }
      description_match_count = terms_regex.count { |term| food[:description].downcase.match?(term) }
      location_match_count = terms_regex.count { |term| food[:location].downcase.match?(term) }

      # Assign higher scores if multiple terms are found in the name
      if name_match_count == terms.size
        relevance_score += 20  # Strong match if all terms are in the name
      elsif name_match_count > 0
        relevance_score += name_match_count * 10  # Medium score if some terms are in the name
      end

      # Assign lower scores for description and location matches
      relevance_score += description_match_count * 3  # Lower weight for description
      relevance_score += location_match_count * 5  # Medium weight for location

      # Debugging output for each comparison
      if $debug_mode
        terms.each do |term|
          echo("Checking food name: '#{food[:name].downcase}' includes '#{term}': #{food[:name].downcase.include?(term)}")
          echo("Checking description: '#{food[:description].downcase}' includes '#{term}': #{food[:description].downcase.include?(term)}")
          echo("Checking location: '#{food[:location].downcase}' includes '#{term}': #{food[:location].downcase.include?(term)}")
        end
      end

      # If any field matches, add the food item to matching items with its relevance score
      if relevance_score > 6
        echo("Match found: Name='#{food[:name]}', Desc='#{food[:description]}', Location='#{food[:location]}', Score=#{relevance_score}") if $debug_mode
        matching_items << { food: food, score: relevance_score }
      end
    end
  end

  # Sort the matched items by score in descending order (most relevant first)
  matching_items.sort_by! { |item| item[:score] }

  # Call the display function with the sorted items and total count
  display_food_matches(matching_items.map { |item| item[:food] }, matching_items.size)
end

# Function to display matched foods with sorting by relevance and limiting results to 10
def display_food_matches(matching_items, total_matches)
  if matching_items.empty?
    echo("No matching food items found.")
  else
    # Limit to the last 10 most relevant items after sorting
    limited_items = matching_items.last(10)

    # Display the total number of matches and the cutoff message if applicable
    echo("Showing #{limited_items.size} of #{total_matches} total matching food items:")

    # Display sorted matches
    limited_items.each do |item|
      echo("\n     #{item[:name]}\n          UID: #{item[:uid]} | #{item[:shop_name]} | #{item[:location]}\n          Menu#: #{item[:order_number]} | Backroom: #{item[:backroom_access]}\n\n          Description: #{item[:description]}\n          Exists in Real Life: #{item[:real_world_equivalent].include?('Exists') ? 'Y' : 'N'}")
    end

    # Display a cutoff message if there are more than 10 items
    if total_matches > 10
      echo("\nDisplaying the top 10 most relevant results. There are #{total_matches - 10} more matching items.")
    end
  end
end

# Main function to run the foodshopper (updated to handle multiple terms)
def run_foodfinder(script)
  # Determine if recompile is requested
  force_recompile = script.vars.include?("recompile")
  $debug_mode = script.vars.include?("debug")

  # Remove 'recompile' and 'debug' from the term if present
  terms = script.vars.reject { |var| var == "recompile" || var == "debug" }

  echo "Using terms: '#{terms.join(' ')}'" if $debug_mode

  if terms.nil? || terms.empty?
    echo("Usage: ;foodshopper TERM (e.g., ;foodshopper coffee) or ;foodshopper TERM debug for detailed output, or ;foodshopper recompile to refresh data.")
    return
  end

  # Load or recompile FOODS_DB based on the recompile flag
  foods_db = get_foods_db(force_recompile)

  # Handle the command with the parsed input
  find_foods_by_terms(terms, foods_db)
end

run_foodfinder(script)

