=begin

	Big plans for this script in the near future!
	
	But for now I just need help testing the "Look Portrait" feature. Start the script and click on the name of someone in the room and click "Look Portrait" to see if their portrait is properly downloaded from the Wiki and shows up in the Portrait window. Of course this will only work for poeple who have uploaded pictures in the Wiki for their character.
	
	If you wish to add your own portrait to the Wiki be sure to create a page with your character's name and name the page either your character's name or <character_name (prime)>.
	Example page names:
	Dreaven
	Dreaven (prime)
	
	Script won't yet work for something like Dreaven (platinum) yet, but should be an easy enough change in the future. I'm just lazy.
	
	Be sure to upload your character's portrait after creating their page. The script will use the first image you add to your character's page.

	Version 1: Initial release!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: dreaven.
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

require 'gtk3'
require 'httparty'
require 'nokogiri'

begin
	require 'httparty'
rescue LoadError
	respond "########################################################################################################"
	respond "This script requires the gem 'httparty' to run. To install this gem follow these steps:"
	respond "Press Windows Key + R to bring up Run."
	respond "Type in 'cmd' (without the quotes) and press enter."
	respond "Type in 'cd #{RbConfig::CONFIG['bindir']}' (without the quotes) to the terminal window (the window that popped up after you entered cmd) then press enter."
	respond "Type in 'gem install httparty' (without the quotes) to the terminal window and press enter."
	respond "After it has finished installing then log your character out and back in again and everything should be good."
	respond "########################################################################################################"
	exit
end

class RoomBuddyMain
	@pic_folder = "Character Portraits"
	FileUtils.mkdir_p(@pic_folder) unless File.directory?(@pic_folder)

	@windows = {}
	@pc_info = {}
	@menu_items = [ "Look Portrait", "Look", "Wave" ]
	@close_windows = nil
	
	def self.create_main_window
		width = 300
		height = 300
		@windows["Main"] = Gtk::Window.new(:toplevel)
		@windows["Main"].set_keep_above(true)
		@windows["Main"].set_title("Room Buddy - #{checkname}")
		@windows["Main"].resize(width, height)
		
		grid = Gtk::Grid.new
		
		scroll_window = Gtk::ScrolledWindow.new
		scroll_window.set_policy(:automatic, :automatic)
		scroll_window.width_request = width
		scroll_window.height_request  = height
		
		grid.attach(scroll_window, 0, 0, 1, 1)
		if GameObj.pcs
			@pc_grids = {}
			parent_grid = Gtk::Grid.new
			grid_number = 1
			@pc_grids["Grid Number #{grid_number}"] = Gtk::Grid.new
			grid_row = -1
			parent_grid.attach(@pc_grids["Grid Number #{grid_number}"], 0, grid_row += 1, 1, 1)
			
			column = -1
			@pc_grids["Grid Number #{grid_number}"].attach(Gtk::Label.new("Also here (#{checkpcs.count}): "), column += 1, 0, 1, 1)
			row_length = 0
			GameObj.pcs.each{ |pc|
				@pc_info[pc.noun] ||= {}
				@pc_info[pc.noun]["ID"] = pc.id
				pc_label = Gtk::Label.new("#{pc.noun}, ")
				pc_label.set_selectable(true)
				pc_label.override_color(:normal, Gdk::RGBA.new(0, 0, 1, 1))
				pc_label.override_background_color(:normal, Gdk::RGBA.new(0, 0, 0, 0))
				pc_label.signal_connect('button_press_event'){ |_, event|
					@pc_selected = pc.noun
					menu = Gtk::Menu.new
					@menu_items.each{ |item_name|
						menu_item = Gtk::MenuItem.new(item_name)
						menu_item.signal_connect('activate'){ |item|
							if item.label == "Look Portrait"
								put "look ##{@pc_info[pc.noun]["ID"]}"
								create_portrait_window
							else
								put "#{item.label} ##{@pc_info[pc.noun]["ID"]}"
							end
						}
						menu.append(menu_item)
					}
					menu.show_all
					menu.popup(nil, nil, event.button, event.time)
				}
				font_description = pc_label.style.font_desc
				context = pc_label.create_pango_context
				metrics = context.get_metrics(font_description, context.language)
				char_width = (metrics.approximate_char_width / Pango::SCALE) + 0.75
				row_length += (char_width * pc_label.text.length)
				if row_length > (width - 10)
					column = -1
					row_length = pc_label.text.length
					grid_number += 1
					@pc_grids["Grid Number #{grid_number}"] = Gtk::Grid.new
					parent_grid.attach(@pc_grids["Grid Number #{grid_number}"], 0, grid_row += 1, 1, 1)
				end
				@pc_grids["Grid Number #{grid_number}"].attach(pc_label, column += 1, 0, 1, 1)
			}
			
			scroll_window.add(parent_grid)
		else
			label = Gtk::Label.new
			scroll_window.add(label)
			label.text = "No one here"
		end
		
		@windows["Main"].signal_connect("destroy"){
			@windows.each{ |name,window|
				@close_windows = true
				@windows[name].close
				@windows[name] = nil
			}
			Gtk.main_quit
			kill_script "room-buddy" if running? "room-buddy"
		}
		
		@windows["Main"].add(grid)
		@windows.each{ |_,window| window.show_all }
	end

	def self.create_portrait_window
		window_width = 500
		window_height = 500
		if @windows["Portrait"].nil?
			@windows["Portrait"] = Gtk::Window.new(:toplevel)
			window = @windows["Portrait"]
			window.set_keep_above(true)
			window.resize(window_width, window_height)
			
			window.signal_connect("destroy"){
				window.close
				@windows["Portrait"] = nil
			}
		else
			window = @windows["Portrait"]
		end
		window.children.each{ |widget| window.remove(widget) }
		
		if !File.exist?(File.expand_path("#{@pic_folder}/#{@pc_selected}.jpg", __dir__))
			url = "https://gswiki.play.net/#{@pc_selected}"
			respond "You don't have #{@pc_selected}'s portrait downloaded."
			respond "Checking the Wiki to see if #{@pc_selected}'s portrait exists. Checking URL: #{url}"
			get_image(url)
		end
		
		if !File.exist?(File.expand_path("#{@pic_folder}/#{@pc_selected}.jpg", __dir__))
			url = "https://gswiki.play.net/#{@pc_selected}_(prime)"
			respond "Checking the Wiki to see if #{@pc_selected}'s portrait exists. Checking URL: #{url}"
			get_image(url)
		end

		if !File.exist?(File.expand_path("#{@pic_folder}/#{@pc_selected}.jpg", __dir__))
			no_portrait_label = Gtk::Label.new("#{@pc_selected} doesn't have a portrait uploaded to the Wiki.")
			window.set_title("Portrait of #{@pc_selected}")
			window.add(no_portrait_label)
		else
			window.set_title("Portrait of #{@pc_selected}")
			image = Gtk::Image.new
			pixbuf = GdkPixbuf::Pixbuf.new(file: File.expand_path("#{@pic_folder}/#{@pc_selected}.jpg", __dir__))
			image_width = pixbuf.width
			image_height = pixbuf.height
			if image_width > window_width || image_height > window_height
				if image_width > image_height
					ratio = window_width.to_f / image_width.to_f
					image_width = window_width
					image_height = (image_height * ratio).to_i
				else
					ratio = window_height.to_f / image_height.to_f
					image_width = (image_width * ratio).to_i
					image_height = window_height
				end
			end
			image.pixbuf = pixbuf.scale_simple(image_width, image_height, GdkPixbuf::InterpType::BILINEAR)

			window.add(image)
		end
		window.show_all
	end
	
	def self.get_image(url)
		begin
			html = URI.open(url).read
		rescue StandardError => e
			if e.message.include?("404")
				respond "Couldn't find portrait at #{url}"
			else
				respond "Error parsing image_doc: #{e.message}"
			end
		end

		begin
			image_doc = Nokogiri::HTML(html)
		rescue Nokogiri::SyntaxError => e
			respond "Error parsing image_doc: #{e.message}"
		end

		image_links = image_doc.css("a[href^='/File:']")
		image_link = image_links.first
		
		if image_link
			href = image_link['href']
			file_link = href.split('/').last
			image_url = "https://gswiki.play.net/#{file_link}"
			html = URI.open(image_url).read
			begin
				file_doc = Nokogiri::HTML(html)
			rescue Nokogiri::SyntaxError => e
				respond "Error parsing file_doc: #{e.message}"
			end
		
			original_file_link = file_doc.at_xpath("//a[contains(text(), 'Original file')]")
			if original_file_link
				original_file_url = "https://gswiki.play.net#{original_file_link['href']}"
			else
				respond "Couldn't find portrait."
			end

			if original_file_url
				begin
					url = original_file_url
					response = HTTParty.get(url)
					filename = "#{@pc_selected}.jpg"
					path = File.join(@pic_folder, filename)
					if response.success?
						File.open(path, 'wb') do |file|
							file.write(response.body)
						end
						respond "Portrait saved as #{filename}"
					else
						respond "Failed to download portrait: #{response.code} - #{response.message}"
					end
				rescue StandardError => e
					respond "An error occurred: #{e.message}"
				end
			end
		end
	end
	
	before_dying{
		@windows["Main"].close if @windows["Main"]
	}
end

Gtk.queue {
	RoomBuddyMain.create_main_window
	Gtk.main
}

sleep