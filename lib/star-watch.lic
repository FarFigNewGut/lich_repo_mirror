=begin
  
  This is a companion script for ;star-alt which allows alts to be listed after the main when seen in the room.
  
  For example, Also here: Tatterclaws (Starsworn). 
  
  ;star-alt will call this script; no need to run it manually. 

=end

# ------------------------------
# Build a lowercase alt=>main map once (outside the hook)
# ------------------------------
def build_alt_map_lc_once
  # Prefer the live global that star-alt populates (works even if this script
  # has a different filename than the one that created the data).
  if defined?($STAR_ALT_MAP_LC) && $STAR_ALT_MAP_LC.is_a?(Hash) && !$STAR_ALT_MAP_LC.empty?
    return $STAR_ALT_MAP_LC.dup
  end

  # Fallback: try to read from CharSettings (may be empty if data lives under a different script name)
  map = {}
  begin
    alts = CharSettings['main_alts'] || {}
    alts.each do |main, list|
      Array(list).each do |alt|
        a = alt.to_s.strip
        next if a.empty?
        map[a.downcase] = main
      end
    end
  rescue => e
    # Avoid spamming hooks; one-time notice is fine
    echo "star-watch: couldn't read CharSettings['main_alts']: #{e}"
  end
  map
end

ALT_MAP_LC = build_alt_map_lc_once  # captured by the hook; never touches settings during hooks

# ------------------------------
# Room annotator hook (pure string in, string out)
# ------------------------------
# ------------------------------
# Room annotator hook (pure string in, string out)
# ------------------------------
# ------------------------------
# Room annotator hook (pure string in, string out)
# ------------------------------
annotator = proc do |server_string|
  begin
    # Only touch "Also here:" lines
    if server_string.include?("Also here:") && server_string =~ /^(.*?Also here:\s*)(.*)$/m
      prefix, rest = $1, $2

      parts = rest.split(/,\s+/)

      new_parts = parts.map do |pc|
        # Linkified name? <a ... noun="Name">Name</a>
        if pc =~ /(.*?)(<a [^>]*noun=['"]([^'"]+)['"][^>]*>.*?<\/a>)(.*)/i
          pre, anchor, noun, post = $1, $2, $3, $4
          main = ALT_MAP_LC[noun.strip.downcase]
          main ? "#{pre}#{anchor} (#{main})#{post}" : pc
        else
          # Plain text (may include titles like "Lord Nazagor")
          altered = pc.dup
          ALT_MAP_LC.each do |alt_key, main|
            if altered.sub!(/\b(#{Regexp.escape(alt_key)})\b(?!\s*\()/i) { |m| "#{m} (#{main})" }
              break
            end
          end
          altered
        end
      end

      # add ".\n" after last part if it doesnâ€™t already end with punctuation
      if new_parts.any?
        last = new_parts[-1]
        # did we insert a "(Main)" anywhere?
        if new_parts.join.include?("(")
          unless last.strip.end_with?(".", "!", "?", "\n")
            new_parts[-1] = last + "\n"
          end
        end
      end

      prefix + new_parts.join(', ')
    else
      server_string
    end
  rescue
    # On any parsing hiccup, pass through the original line unchanged.
    server_string
  end
end

# Install hook with a stable, name-agnostic id
HOOK_ID = 'star_watch_alt_annotator'
DownstreamHook.remove(HOOK_ID) rescue nil
DownstreamHook.add(HOOK_ID, annotator)
before_dying { DownstreamHook.remove(HOOK_ID) rescue nil }

echo "star-watch: running. Alts will show as 'Alt (Main)' in 'Also here:' lines. Use ;kill star-watch to stop."

# Keep alive
loop { wait }
