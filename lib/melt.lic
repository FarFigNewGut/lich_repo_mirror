=begin

  Sometimes you want to turn off your spells so you don't melt
  in the middle of an RP event.  Step away and melt in private with ;melt.

  Stops all spells in stop list

          author: Xanlin (Xanlin on discord)
            game: GS
            tags: spells, roleplaying, rp
        required: Lich >= 4.6.4
         version: 1
=end
module Melt
  Script.current.want_downstream     = false;
  Script.current.want_downstream_xml = true;
  #------------------------------------------------------------------------------#
  @script_name = Script.current.name;
  def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
  def self.cleanup; [DownstreamHook, UpstreamHook].each{|provider| provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};  };end;
  def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;
  #------------------------------------------------------------------------------#
  @quiet = true;
  def self.stop_list()
    command       = "stop list";
    start_pattern = /^You can currently stop doing the following:/;
    quiet         = @quiet;
    end_pattern   = /^(<popBold\/>)?<prompt/;
    include_end   = false;
    timeout       = 5;
    data          =  self.quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
    return data.join("\n");
  end;
  #------------------------------------------------------------------------------#
  data = self.stop_list();
  commands = []
  command_pattern = /<d cmd='(?<cmd>stop [^']+)'>(?<descr>.*?)<\/d>/;
  data.scan(command_pattern).each {|cmd,descr| commands << cmd}
  commands.each { |cmd| fput cmd}
end