##quiet
## vim: set ft=ruby:
=begin

    SpiffyEBP by SpiffyJr (Kips)
    
    Checks your EBP rate and echo's the data once you quit the script.
    
     author: spiffyjr
      email: theman@spiffyjr.me
       name: SpiffyEBP
       tags: bounty
    version: 2.0

=end

settings = CharSettings.to_hash

# settings now keeps track of per stance statistics
if settings['block_count'] or settings['evade_count'] or settings['parry_count'] or settings['swings']
    echo '** sebp has been updated and requries clearing your old settings'
end

get_percent = proc do |stance, type|
    if not settings[stance]
        next 0
    end
    if not settings[stance][type]
        next 0
    end

    set = settings[stance].dup
    swings = set[:attack]
    
    if Spell[401].known? and Spell[406].known? and Spell[414].known? and Skills.elearth >= 25    
        if type == :barrier
            next (set[:barrier].to_f/swings.to_f)*100
        end
        swings -= set[:barrier]
    end

    if type == :evade
        next (set[:evade].to_f/swings.to_f)*100
    end

    swings -= set[:evade]
    if type == :block
        next (set[:block].to_f/swings.to_f)*100
    end

    swings -= set[:block]
    swings -= set[:range]
    if type == :parry
        next (set[:parry].to_f/swings.to_f)*100
    end
end

report = proc do |stance, type|
    ['offensive', 'advance', 'forward', 'neutral', 'guarded', 'defensive'].each do |s|
        if stance != :all and stance != s
            next
        end

        set = settings[s].dup
        if set.nil?
            next
        end

        if stance === :all
            puts "#{monsterbold_start}#{s}#{monsterbold_end}"
            respond "========================================================================================================================"
        end

        swings = set[:attack]
        if Spell[401].known? and Spell[406].known? and Spell[414].known? and Skills.elearth >= 25
            if type == :all or type == :barrier
                str = sprintf('Elemental Barrier: swings = %d, success = %d, percent = %2.2f%%', swings, set[:barrier], (set[:barrier].to_f/swings.to_f)*100)
                puts "#{monsterbold_start}[sebp: #{str}]#{monsterbold_end}"
            end
            swings -= set[:barrier]
        end

        if type == :all or type == :evade
            str = sprintf('Evade: swings = %d, success = %d, percent = %2.2f%%', swings, set[:evade], (set[:evade].to_f/swings.to_f)*100)
            puts "#{monsterbold_start}[sebp: #{str}]#{monsterbold_end}"
        end

        swings -= set[:evade]
        if type == :all or type == :block
            str = sprintf('Block: swings = %d, success = %d, percent = %2.2f%%', swings, set[:block], (set[:block].to_f/swings.to_f)*100)
            puts "#{monsterbold_start}[sebp: #{str}]#{monsterbold_end}"
        end

        swings -= set[:block]
        swings -= set[:range]
        if type == :all or type == :parry
            str = sprintf('Parry: swings = %d, success = %d, percent = %2.2f%%', swings, set[:parry], (set[:parry].to_f/swings.to_f)*100)
            puts "#{monsterbold_start}[sebp: #{str}]#{monsterbold_end}"
        end
    end
end

record = proc do |type|
    stance = checkstance()

    if not settings[stance]
        settings[stance] = {
            :attack => 0,
            :range => 0,
            :parry => 0,
            :block => 0,
            :evade => 0,
            :barrier => 0,
        }
    end

    settings[stance][type] += 1
end

if script.vars[1] == 'report'
    report.call(:all, :all)
    exit
elsif script.vars[1] == 'clear'
    echo '-- settings cleared'
    settings.clear()
end

before_dying do
    report.call(:all, :all)
end

has_swing = false

hook = proc do |line|
    if webbed? or bound? or stunned?
        next line
    end

    if line =~ /<pushBold\/>(?:The|An?) <a exist="([^"]+)" noun="([^"]+)">[^<]+<\/a><popBold\/>.*\byou\b/i
        has_swing = true
        record.call(:attack)

        if line =~ /hurls|throws/
            record.call(:range)
        end
    elsif line =~ /<prompt time="\d+">/
        has_swing = false
    end

    if not has_swing
        next line
    end

    percent = nil

    # You evade the attack with ease!
    # With blinding speed, you dodge the attack!
    # You evade the attack with incredible finesse!
    # You dodge just in the nick of time!
    if line =~ /you.*(?:(?:dodge|evade|avoid)|move slightly, )/i
        record.call(:evade)
        percent = get_percent.call(checkstance, :evade)
    # You skillfully interpose your paingrip between yourself and the incoming strike, deflecting it harmlessly to the side!
    elsif line =~ /interpose your (.*) between yourself and the .*!|(?:deflect|block) the attack with your (.*)!/
        item = ($1 || $2).to_s

        if item == ""
            echo "** failed to find item for interpose line, skipping..."
        elsif item =~ /buckler|targe|heater|parma|aegis|scutum|mantlet|pavis|shield/
            record.call(:block)
            percent = get_percent.call(checkstance, :block)
        else
            record.call(:parry)
            percent = get_percent.call(checkstance, :parry)
        end
    elsif line =~ /you block the attack/i
        record.call(:block)
        percent = get_percent.call(checkstance, :block)
    # You easily parry the attack with your mithril-spiked paingrip!
    # Amazingly, you manage to parry the attack with your paingrip!
    # You barely manage to fend off the attack with your paingrip!
    # With no room to spare, you manage to parry the blow with your mithril-spiked paingrip!
    elsif line =~ /you.*managed? to fend off|you beat back|parry .* with your|as you parry/i
        record.call(:parry)
        percent = get_percent.call(checkstance, :parry)
    elsif line =~ /A heavy barrier of stone momentarily forms around you and blocks the attack!/
        record.call(:barrier)
        percent = get_percent.call(checkstance, :barrier)
    end

    if percent.nil?
        next line
    end

    line.gsub("\r\n", '') + sprintf(" (%2.2f%%)\r\n", percent)
end

DownstreamHook.add('sebp', hook)