=begin

  Variables used: Vars.herbsack

  This script was created by ChatGPT, using a prompt provided by Brute.

  It can be used to distill solid herbs into tinctures.

         author: Alastir
   contributors: ChatGPT, Brute, Alastir, Tysong
           game: Gemstone
           tags: distill, survival, kit
        version: 1.0.1

  Version Control:
  Major_change.feature_addition.bugfix
    v1.0.1 - 2023-03-09
      - Rubocop syntax cleanup
      - Scoped into a module Distiller
    v1.0.0 - 2023-03-03
      - Initial release

=end

module Distiller
  def self.distill
    string = dothistimeout "look in my #{Vars.herbsack}", 3, /contains DOSEs of the following/
    if string =~ /contains DOSEs of the following/

      # Extract the solid and liquid herb information
      solid_herbs = string.scan(/DOSEs of the following solid herbs:(.*?)\./m).flatten.first.strip.split(", ")
      liquid_herbs = string.scan(/TINCTUREs of the following liquid herbs:(.*?)\./m).flatten.first.strip.split(", ")

      # Create hash tables to store the counts of each herb
      solid_counts = {}
      liquid_counts = {}

      # Parse the solid herb information and store the counts in the hash table
      solid_herbs.each do |herb_info|
        herb_name, count = herb_info.match(/^(.*?) \((\d+)\)$/).captures
        solid_counts[herb_name] = count.to_i
      end

      # Parse the liquid herb information and store the counts in the hash table
      liquid_herbs.each do |herb_info|
        herb_name, count = herb_info.match(/^(.*?) \((\d+)\)$/).captures
        liquid_counts[herb_name] = count.to_i
      end

      # Check if there is a solid herb that does not have a matching liquid herb
      missing_solid_herbs = solid_counts.keys - liquid_counts.keys
      if missing_solid_herbs.any?
        # Select the first missing solid herb
        missing_solid_herb = missing_solid_herbs.first
        echo "The missing herb is a solid herb: #{missing_solid_herb}"
        fput "point my #{Vars.herbsack} at dose #{missing_solid_herb}"
      else
        # Find the liquid herb with the lowest count that matches a solid herb
#       matching_liquid_herb = liquid_counts.select { |herb, _count| solid_counts.key?(herb) }.min_by { |_herb, count| count }.first
#       fput "point my #{Vars.herbsack} at dose #{matching_liquid_herb}"

        # Find the liquid herb with the lowest count that matches a solid herb
        matching_liquid_herb, liquid_count = liquid_counts.select { |herb, count| solid_counts.key?(herb) }.min_by { |herb, count| count }
        fput "point my #{Vars.herbsack} at dose #{matching_liquid_herb}" if liquid_count < 150
      end
    end
  end

  def self.automation
    regex_finished = Regexp.union(
      # Mechanical
      /^With a final metallic hum, the whir of gears from within your .* stutters to a halt.$/,
      # Natural
      /^With a final, muted sigh, the churn of water from within your .* gentles into quiescence.$/,
      # Magical
      /^With a final chime, the soft, melodic crackle from within your .* falls silent.$/
    )
    loop do
      waitforre(regex_finished)
      distill
    end
  end

  def self.specific(herb)
    fput "point my #{Vars.herbsack} at dose #{herb}"
  end

  def self.main
    case Script.current.vars[1]
    when /distill/i
      distill
      automation
    when /acantha|ambrominas|wolifrew|rose\-marrow|basal|yabathilium|ephlox|bolmara|aloeas|pothinir|cactacae|torban|haphip|talneo|calamia|woth|brostheras|wingstem|bur\-clover|sovyn/i
      specific(Script.current.vars[1].downcase)
    else
      echo 'Please start the distill process using ;distiller distill or distill a specific herb using ;distiller herbname'
    end
  end

  main
end
