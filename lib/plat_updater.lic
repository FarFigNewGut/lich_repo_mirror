=begin
  author: Caithris

	This script updates the Platinum map database, new Narost images, and the Platinum go2 from the GSGuide wiki.
	Version 0.3
	-Cait

	Added in 0.2, forcemap now works.
  Added in 0.3, fixed the issue with ;go2 again.

=end


if $SAFE > 0
	echo "This script needs to be trusted to work properly. (;trust #{script.name})"
	exit
end

require 'open-uri'
require 'openssl'

module OpenSSL
  module SSL
    remove_const :VERIFY_PEER
  end
end
OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE


force_map = script.vars.find { |var| var =~ /forcemap/ }

if XMLData.game =~ /^DR/ then
	echo "Sorry. This updater is for Gemstone Platinum Only."
	exit
end
if XMLData.game =~ /^GSIV/ then
	echo "Sorry. This updater is for Gemstone Platinum Only."
	exit
end
if XMLData.game =~ /^GSF/ then
	echo "Sorry. This updater is for Gemstone Platinum Only."
	exit
end

##### LICH ID... CAREFUL NOT TO BREAK THIS!!!
#lich_id="0B1x_XNbsk3DOc0c0cWtnTWRoRXc"
lich_id="0B1x_XNbsk3DONUlucklSVmkxR2M"

###Backup IDs.
#remote_map_id      ="0B1x_XNbsk3DOdzM1ZjdkX3NIVzQ"
#remote_map_version ="1391396244" 
#remote_map_id      ="0B1x_XNbsk3DOWnpVZ3gxbjN1UlU"
#remote_map_version ="1393950955"      
#remote_map_id      ="0B1x_XNbsk3DOczdiS3VnTk05M1U"            
#remote_map_version ="1405748710"
#remote_map_id      ="0B1x_XNbsk3DObzdBZnlUMnpDT3c"
#remote_map_version ="1407258691"
#remote_map_id      ="0B1x_XNbsk3DONW1FLVE2eFdrLWc"
#remote_map_version ="1413603697"



#go2_id="0B1x_XNbsk3DOZ0Q2NDJWQVEyb1U"
#go2_id="0B1x_XNbsk3DONE45bWJVcU1uTDQ"
#go2_id="0B1x_XNbsk3DOM0ZEZ3dFVzl1NFk"
#go2_id="0B1x_XNbsk3DObC15ZEZJZVpmTjA"
#go2_id="0B1x_XNbsk3DOcXU2TVp3QllTS28"

go2_id="0B1x_XNbsk3DOSzZ6UnVnaFpQNzQ"

remote_map_id      ="0B1x_XNbsk3DORVVyU0I1djdSb00"
remote_map_version ="1455312483"



images=Hash.new
images=[
["403px-SolhavenEmpathGuild.jpg","0B1x_XNbsk3DOM2tJTWk0SFl2SGc"],
["576px-Illi_Sorc_Guild.png","0B1x_XNbsk3DOc1B5YlhPc0ExNkU"],
["600px-Icemule_Sorc_Guild.png","0B1x_XNbsk3DONmJwS1JFZ2UyNlk"],
["600px-Landing_Sorc_Guild.png","0B1x_XNbsk3DOc1NqSV9uLXBsREk"],
["641px-TIEmpathGuild.jpg","0B1x_XNbsk3DOSlFVeDFiYmhqYUU"],
["794px-Rest_Sorc_Guild.png","0B1x_XNbsk3DOMko2YjUtUzZMZjA"],
["800px-RRClericGuild.jpg","0B1x_XNbsk3DOdG5mWmZYSHp1Y1k"],
["800px-TV_Sorc_Guild.png","0B1x_XNbsk3DOX3MtdkprYXJlVnM"],
["en-Aradhul_Road.png","0B1x_XNbsk3DOOEhxeGNhV1dhRFk"],
["enravelin.png","0B1x_XNbsk3DOcHFfeFZXcTJONDQ"],
["fireflyvilla.png","0B1x_XNbsk3DOdmNycEhxTHNDbmM"],
["ifw-isle_of_four_winds-60p-1310232949.png","0B1x_XNbsk3DOT0ptOUpOSHNaeFE"],
["Mist_Harbor_Wilds.png","0B1x_XNbsk3DObDgxNnI0UG1nU0U"],
["wl-cavernhold-1295073688.png","0B1x_XNbsk3DOZG5FSU5IZno2UU0"],
["WL-eguild.gif","0B1x_XNbsk3DOdmFpd3AtTUd6cU0"],
["LumneaFest.png","0B1x_XNbsk3DOZDZLN1RkVGxNWUE"],
["wl-burrow_way-1360361110.png", "0B1x_XNbsk3DOazhOaEt3N0gwcTQ"],
["albatross-1342665555.png", "0B1x_XNbsk3DOT3h4RnVfRmxvYjQ"],
["RtCF_Map.png", "0B1x_XNbsk3DOSlUwQUdMZTNmRDA"],
["tv-shadowguard.jpg", "0B1x_XNbsk3DOeFRnVTBDa05hVVU"],
["Briarmoon_Cove_Map.png", "0B1x_XNbsk3DORWtGRnpvbzloaTA"]
]

force_map = script.vars.find { |var| var =~ /forcemap/ }

unless script.vars.find {|var| var =~ /help/}
  if $version.split('.').collect { |num| num.rjust(5, '0') }.join('.') < '00004.00002.00006'
	  echo 'not updating the map database because your version of Lich is too old'
  else
	  begin
		  if File.exists?("#{$data_dir}#{XMLData.game}/map-#{remote_map_version}.dat") and force_map.nil? then
			  echo 'not updating the map database, already at latest'
			else
				if force_map then respond "Forcing map update..."; end
				if (old_dbs = Dir.entries("#{$data_dir}#{XMLData.game}").find_all { |n| n =~ /^map\-[0-9]+\.dat$/ }.sort)
					echo "deleting old map databases: #{old_dbs.join(', ')}"
					for filename in old_dbs
						File.delete("#{$data_dir}#{XMLData.game}/#{filename}")
					end
				end
				filename = "#{$data_dir}#{XMLData.game}/map-#{remote_map_version}.dat"

######INSERT NEW LOGIC HERE###########
				echo "writing map database to #{filename}..."

				File.open("#{filename}", "wb") do |saved_file|
				# the following "open" is provided by open-uri
				open("https://drive.google.com/uc?export=download&id=#{remote_map_id}", 'rb') do |read_file|
				gz_map_io = StringIO.new(read_file.read)
				reader = Zlib::GzipReader.new(gz_map_io)
				while data = reader.read(8192)
					saved_file.write(data)
				end
				saved_file.flush
				saved_file.fsync
		  end
		end
######END NEW GSGUIDE LOGIC##########
		GC.start
		echo 'loading map database...'
		Map.reload
		echo 'map database has been updated'
	end
end
begin
  echo "downloading go2.lic"
	File.open("#{$lich_dir}scripts/go2.lic", 'wb') { |file| 
  open("https://drive.google.com/uc?export=download&id=#{go2_id}", 'rb') do |read_file|
		file.write(read_file.read)
	  end
	}
	rescue
		echo "error: #{$!}"
	end
#				begin
#				echo "downloading updated Lich"

					
#					File.open("#{$lich_dir}lich.rbw", 'wb') { |file| 
#					  open("https://docs.google.com/uc?export=download&id=#{lich_id}", 'rb') do |read_file|
#						file.write(read_file.read)
#					  end
#					}
#				rescue
#					echo "error: #{$!}"
#				end

#				begin
#				echo "downloading new infomon"
#					
#					File.open("#{$lich_dir}scripts/infomon.lic", 'wb') { |file| 
#					  open("https://docs.google.com/uc?export=download&id=0B1x_XNbsk3DOem9raVVXdGJlX0E", 'rb') do |read_file|
#						file.write(read_file.read)
#					  end
#					}
#				rescue
#					echo "error: #{$!}"
#				end

			images.delete_if { |image_name, id| File.exists?("#{$lich_dir}maps/#{image_name}") }

			Dir.mkdir("#{$lich_dir}maps") unless File.exists?("#{$lich_dir}maps")
######NEW IMAGE LIST#######

			images.each { |image_name, image_id|
				begin
					echo "downloading #{image_name}..."
					File.open("#{$lich_dir}maps/#{image_name}", 'wb') { |file| 
					  open("https://drive.google.com/uc?export=download&id=#{image_id}", 'rb') do |read_file|
						file.write(read_file.read)
					  end
					}
				rescue
					echo "error: #{$!}"
				end
			}
			#New Lumnea File
				image_name="LumneaFest.png"
				image_id="0B1x_XNbsk3DOZDZLN1RkVGxNWUE"
				begin
					echo "downloading new #{image_name}..."
					
					File.open("#{$lich_dir}maps/#{image_name}", 'wb') { |file| 
					  open("https://drive.google.com/uc?export=download&id=#{image_id}", 'rb') do |read_file|
						file.write(read_file.read)
					  end
					}
				rescue
					echo "error: #{$!}"
				end
			#End New Lumnea File

		start_script("repository", ["unset-mapdb-updatable"])
		wait_while { running?('repository') }
		start_script("repository", ["unset-updatable", "go2.lic"])
		wait_while { running?('repository') }
		start_script("repository", ["set-updatable", "plat_updater.lic"])
		wait_while { running?('repository') }
		respond
		respond
		respond "Thank you for updating!"
		respond "Please remember to ;go2 portals=off, and ;go2 portals=on"
		respond "You do NOT need to restart Lich."
	end	
else
	respond
	respond 'Usage:'
	respond
	respond "  #{$clean_lich_char}plat_updater               - Normal upgrade."
	respond "  #{$clean_lich_char}plat_updater forcemap      - Use this if things are still broken."
#	respond "  #{$clean_lich_char}updater check"
#	respond "  #{$clean_lich_char}updater list"
#	respond "  #{$clean_lich_char}updater add <script name>"
#	respond "  #{$clean_lich_char}updater delete <script name>"
#	respond "  #{$clean_lich_char}updater lich <on/off>"
#	respond "  #{$clean_lich_char}updater map <on/off>"
	respond
end
