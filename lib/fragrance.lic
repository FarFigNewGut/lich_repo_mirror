=begin

	Fragrance: use ;fragrance setup to set your item.. be it perfume/cologne or something else. and the container you want to keep it in.
	If wearable, just check the checkbox and list what the item is in the top text entry box.
	Let me know how it works..

	  author: Nomada
	    game: Gemstone
	    tags: cologne, perfume, utility, roleplay, rp
	 version: 0.1
	required: cologne or perfume item.

	changelog:
		0.199 (2016-04-03):
			added detection and timeout.. needs more testing I bet.
		0.19 (2016-02-03):
			added wearable container support
		0.15 (2016-02-01):
			added a setup feature
		0.12 (2016-01-01):
			set vars for fragrance noun

=end


$f_types=["cologne", "perfume"]
use_interval = 10800
settings                   = CharSettings.to_hash
#Settings['frag_type'] ||=
#Settings['last_application'] ||= Time.now.to_i - use_interval


setup = proc{
    gtk_globals = Hash.new
    gtk_locals = Hash.new

    window = window_action = nil

    Gtk.queue {

    	gtk_globals['frag_type'] = Gtk::Entry.new.set_text(UserVars.frag_type)
        gtk_globals['frag_cont'] = Gtk::Entry.new.set_text(UserVars.frag_cont)

		gtk_locals['enable_wearable'] = Gtk::CheckButton.new('Wearable?').set_active(settings['enable_wearable'])

		window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
		window.set_title  "SMELLY GOOD!"
		window.border_width = 10
		window.signal_connect('delete_event') { Gtk.main_quit }

		vbox = Gtk::VBox.new(true, 5)

		tbox = (Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Fragrance Type:')).set_width_request(100))
		vbox.pack_start_defaults(tbox)
		vbox.pack_start(gtk_globals['frag_type'],true)


		tbox2 = (Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Fragrance Container:')).set_width_request(100))
		vbox.pack_start_defaults(tbox2)
		vbox.pack_start(gtk_globals['frag_cont'],true)

        vbox.pack_start(Gtk::Alignment.new(0,0,0,1).add(gtk_locals['enable_wearable'].set_width_request(150)),false)

        #vbox = Gtk::HBox.new(false,1)


 		 # Save/Close buttons
        hb_saveclose = Gtk::HBox.new
        save = Gtk::Button.new('_Save & Close')
        close = Gtk::Button.new('E_xit')

        save.signal_connect('clicked') { window_action = :save }
        close.signal_connect('clicked') { window_action = :done }

        hb_saveclose.pack_start(save,false)
        hb_saveclose.pack_start(close,false)
		vbox.pack_start(Gtk::Alignment.new(1,0,0,0).add(hb_saveclose),false)
		window.add(vbox)
		window.show_all

Gtk.main

    }

    before_dying { Gtk.queue { window.destroy } }
    wait_while { window_action.nil? }


    clean_entry = proc { |entry|
        entry.text = entry.text.strip

        if entry.text.empty?
            entry.text = nil
        end

        entry.text
    }

    if window_action == :save
        gtk_globals.each_pair { |option,widget|
            if widget.class == Gtk::CheckButton
                UserVars.change(option,widget.active?,:char)
            elsif widget.class == Gtk::Entry
                UserVars.change(option,clean_entry.call(widget),:char)
            else
                echo "error: unknown global widget #{option} [#{widget.class}]"
            end
        }

        gtk_locals.each_pair { |option,widget|
            if widget.class == Gtk::CheckButton
                settings[option] = widget.active?
            elsif widget.class == Gtk::Entry
                settings[option] = clean_entry.call(widget)
            else
                echo "error: unknown local widget #{option} [#{widget.class}]"
            end
        }
        echo 'settings saved'
    else
        echo 'closed without saving'
    end

}
# The subtle scent which had been clinging to you dissipates.

rub_set = proc {
	ts = UserVars.frag_type
	cont = UserVars.frag_cont

	fput "smell #{Char.name}"
	while line = get
		#line = waitfor "You quietly sniff at yourself.  You *think* you smell okay, but then, doesn't everybody?"
		if line == "You quietly sniff at yourself.  You *think* you smell okay, but then, doesn't everybody?"
			echo "YOU STINK"
			if settings['enable_wearable']
		    	fput "rub my #{ts}"
		    elsif
				fput "get my #{ts}"
				fput "pour #{ts} on #{Char.name}"
				fput "put #{ts} in my #{cont}"
				echo "Waiting #{((Settings['last_application'] + use_interval - Time.now.to_i)/60.0).as_time} to smell nice again"
				sleep [Settings['last_application'] + use_interval - Time.now.to_i, 1].max
				Settings['last_application'] = Time.now.to_i
			end
		end
	end

	#while line = get
	line = waitfor "The subtle scent which had been clinging to you dissipates."
    if line =~ "The subtle scent which had been clinging to you dissipates."
     	rub_set.call
    end

}
=begin
def wearCol()
	ts = UserVars.frag_type
	cont = UserVars.frag_cont

	if settings['enable_wearable'] #== widget.active?
		fput "rub my #{ts}"
	elsif
		fput "get my #{ts}"
		fput "pour #{ts} on #{Char.name}"
		fput "put #{ts} in my #{cont}"
	end
	#if script.vars[1] == 'clear'
	#	Settings['last_application'] = Time.now.to_i - use_interval;
	#elsif script.vars[1] == 'test'
	#	echo "TEST"
	#end
end
=end
	if script.vars.empty?
		rub_set.call
	elsif script.vars[1] =~ /setup/
		setup.call
	elsif script.vars[1] =~ /help/
		echo("Usage ;fragrance or ;fragrance setup")
	else
		echo("You are doing it wrong. Type ;fragrance help")
	end


## WEARABLE VERSIONS
#RUB TO ACTIVATE
#
#def wait
#	line = matchtimeout 15, "The subtle scent which had been clinging to you dissipates."
#     if line =~ "The subtle scent which had been clinging to you dissipates."
#     	wearCol
#     end
#end
=begin
loop {
	#wait
	wearCol
	echo "Waiting #{((Settings['last_application'] + use_interval - Time.now.to_i)/60.0).as_time} to smell nice again"
	sleep [Settings['last_application'] + use_interval - Time.now.to_i, 1].max
	Settings['last_application'] = Time.now.to_i
	echo "You now smell nice!..."
	wearCol()
	echo "Finished, waiting 3 hours before running this again."
}
=end
