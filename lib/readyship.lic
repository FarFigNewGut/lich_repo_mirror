# readyship: get your ship ready to sail!
# Author: Licel





def finishScript
  echo "*****ALL READY CAPN! Exiting."
  exit
end
class ShipRoom
  attr_accessor :damage,:pathTo,:pathFrom, :title, :exits

  def initialize(params = {})
    @pathTo = params.fetch(:pathTo,[""])
    @pathFrom = params.fetch(:pathFrom,[""])
    @exits = params.fetch(:exits,'error')
    @title = params.fetch(:title,'error')
    @damage = params.fetch(:damage,'unfixed')
  end

end
ASSESS_FORMAT = /\[Health of your ship: (\d*)\/(\d*)\]/
SHIP_FORMAT = /\[(.*),.*\]/
DAMAGE_FORMAT = /\s*(.*):\s*It appears to be .* damaged\./
FIXED_FORMAT = /\s*(.*):\s*You cannot seem to find any damage\./
AssessLine = Struct.new(:current, :total)
Shipline = Struct.new(:name)
Damageline = Struct.new(:title)
shiprooms = []
boatswainBonus = 0
shipdesc = fput "look"
shipname = shipdesc.match(SHIP_FORMAT) { |l| Shipline.new(*l.captures)}

case shipname.name
when "Frigate"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Frigate, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Frigate, Crew Quarters]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["e"],:title => "[Frigate, Kitchen]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e","e"],:pathFrom => ["w","w"],:exits => ["e"],:title => "[Frigate, Social Room]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Frigate, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Frigate, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Frigate, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w"],:title => "[Frigate, Bow]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Frigate, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Frigate, Captain's Quarters]")
  shiprooms.push(sr)
when "Carrack"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Carrack, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Carrack, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Carrack, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Carrack, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w"],:title => "[Carrack, Bow]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Carrack, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Carrack, Captain's Quarters]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["w","e"],:title => "[Carrack, Kitchen]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Carrack, Crew Quarters]")
  shiprooms.push(sr)
when "Brigantine"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Brigantine, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Brigantine, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Brigantine, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Brigantine, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Brigantine, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Brigantine, Captain's Quarters]")
  shiprooms.push(sr)
when "Sloop"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up"],:title => "[Sloop, Cargo Hold]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["up"],:title => "[Sloop, Main Deck]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Sloop, Crow's Nest]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Sloop, Helm]")
  shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Sloop, Captain's Quarters]")
  shiprooms.push(sr)
else
  echo "Your ship is not supported. Sucker. Hit up Licel."
  exit
end


roomtitle = fput "look"
found = shiprooms.select {|x| x.title == roomtitle}
myroom = found[0]
if found.length > 1
  result = fput "peer down"
  if result == "You peer down but see nothing of interest."
    myroom = found.select{|x| !x.exits.include? "d"}
    myroom = myroom[0]
  else
    myroom = found.select{|x| x.exits.include? "d"}
    myroom = myroom[0]
  end
end

myroom.pathFrom.each { |x| move x }

pause 0.5
waitrt?

move('u')
pause 0.5
fput "pull gang"

sail_results = ''
while(!sail_results.include?("fully open") && !sail_results.include?("already lowered"))
  waitrt?
  sail_results = fput "lower sail"
  pause 0.5
end

if shipname.name != 'Sloop'
  move('e')
  pause 0.5
  sail_results = ''
  while(!sail_results.include?("fully") && !sail_results.include?("already"))
    waitrt?
    sail_results = fput "lower sail"
    pause 0.5
  end
  pause 0.5
  move("w")

end

move("w")
pause 0.5
capstanResults = ""
while(!capstanResults.include?("already") && !capstanResults.include?("final"))
  waitrt?
  capstanResults = fput "turn capstan"
  pause 0.5
end

finishScript()
