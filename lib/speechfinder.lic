=begin

https://discord.com/channels/226045346399256576/1284700864132546602

Script created with Chat GPT.

Requires fast-stemmer gem which you will probably need to install.
If your Ruby installation is located at C:\Ruby4Lich5\3.2.2\bin, use the cd (change directory) command to navigate there:
     cd C:\Ruby4Lich5\3.2.2\bin
Once you're inside the Ruby bin directory, run the following command to install the gem:
     gem install fast-stemmer

This script is meant to help roleplayers find the right :TONE or =VERB for speech.

To search:
;speechfinder TERM1 TERM2 TERM3 etc

--- Lich: speechfinder active.
[speechfinder: :rejoicing            (Ranked #10)]
[speechfinder: :pleased              (Ranked #9)]
[speechfinder: :joyful               (Ranked #8)]
[speechfinder: :ecstatic             (Ranked #7)]
[speechfinder: :cheerful             (Ranked #6)]
[speechfinder: :contented            (Ranked #5)]
[speechfinder: :exultant             (Ranked #4)]
[speechfinder: :blissful             (Ranked #3)]
[speechfinder: :happy                (Ranked #2)]
[speechfinder: :lovelorn             (Ranked #1)]
[speechfinder: 
Displaying the top 10 most relevant results. There are 172 more matching items.]
--- Lich: speechfinder has exited.

1.0.0 (2024-09-14)
    - Initial release.
    
1.1.0 (2024-09-15)
    - Tones have been added and can be searched via the command ;send tfind TONE.
    - Output has been limited to the top 5 most relevant speech tones or speech verbs.
    - Changed script from a loop-based structure to an execution-based structure.
    - Added b variable option to search both verbs and tones at the same time.

1.2.0 (2024-09-22)
    - Introduced relevance-based scoring for matching results.
    - Matches in verb/tone names are given higher weight.
    - Matches in definitions are given medium weight.
    - Matches in categories are given the lowest weight.
    - Limited output to the top 5 most relevant matches, sorted by relevance score.

1.3.0 (2024-09-24)
    - Added player options to search only verbs (--verbs), only tones (--tones), or both (--both).
    - Added the --no-definitions option to hide definitions and display only the verb/tone.
    - Added the --yes-definitions option to turn definitions back on after using --no-definitions.
    - Players can now control the number of matches shown using --matches=NUM (between 1 and 10).

=end

require 'yaml'
require 'fast_stemmer'  # Import the fast-stemmer gem

# Define paths for compiled data and player preferences
DATA_DIR = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
COMPILED_VERBS_PATH = "#{DATA_DIR}compiled_verbs.yaml"
COMPILED_TONES_PATH = "#{DATA_DIR}compiled_tones.yaml"
SPEECHTONESANDVERBS_PATH = "#{$script_dir}/speechtonesandverbs.rb"
METADATA_PATH = "#{DATA_DIR}compiled_speech_metadata.yaml"
PLAYER_PREFS_PATH = "#{DATA_DIR}player_preferences.yaml"

# Ensure directories exist
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(DATA_DIR) unless Dir.exist?(DATA_DIR)

# Function to notify player to download the speechtonesandverbs.rb file if missing
def notify_player_to_download
  unless File.exist?(SPEECHTONESANDVERBS_PATH)
    message = "\n\n\n" \
              "************************************************************\n" \
              "*                                                          *\n" \
              "*   speechtonesandverbs.rb is missing.                     *\n" \
              "*                                                          *\n" \
              "*   Please download it using the command:                  *\n" \
              "*                                                          *\n" \
              "*     ;repo download speechtonesandverbs.rb                *\n" \
              "*                                                          *\n" \
              "*   in your game console to ensure the script functions     *\n" \
              "*   correctly.                                             *\n" \
              "*                                                          *\n" \
              "************************************************************\n" \
              "\n\n\n"
    echo(message)
    exit
  end
end

# Ensure speechtonesandverbs.rb is present before proceeding
notify_player_to_download

# Function to get the current file size of speechtonesandverbs.rb
def current_file_size
  File.size(SPEECHTONESANDVERBS_PATH)
end

# Load or save player preferences from/to YAML
def load_player_preferences
  if File.exist?(PLAYER_PREFS_PATH)
    YAML.load_file(PLAYER_PREFS_PATH) || {}
  else
    # Default preferences
    {
      'display_verbs' => true,
      'display_tones' => true,
      'show_definitions' => true,
      'matches_to_display' => 5
    }
  end
end

def save_player_preferences(prefs)
  File.open(PLAYER_PREFS_PATH, 'w') { |file| file.write(prefs.to_yaml) }
end

# Parse player options and update preferences
def parse_player_options(script, prefs)
  # Parse command-line options
  script.vars.each do |arg|
    case arg
    when '--verbs'
      prefs['display_verbs'] = true
      prefs['display_tones'] = false
    when '--tones'
      prefs['display_tones'] = true
      prefs['display_verbs'] = false
    when '--both'
      prefs['display_verbs'] = true
      prefs['display_tones'] = true
    when '--no-definitions'
      prefs['show_definitions'] = false
    when '--yes-definitions'  # This is the new option to turn definitions back on
      prefs['show_definitions'] = true
    when /--matches=(\d+)/
      match_count = $1.to_i
      prefs['matches_to_display'] = match_count.clamp(1, 10)
    end
  end

  # Save the updated preferences
  save_player_preferences(prefs)
end

# Load or compile VERBS_DB and TONES_DB with metadata check
def load_or_compile_data(force_recompile = false)
  metadata = {}

  if File.exist?(METADATA_PATH)
    metadata = YAML.load_file(METADATA_PATH) || {}
  end

  last_compiled_size = metadata['file_size']
  current_size = current_file_size

  if force_recompile || !File.exist?(COMPILED_VERBS_PATH) || !File.exist?(COMPILED_TONES_PATH) || last_compiled_size != current_size
    echo("Compiling data from speechtonesandverbs.rb...")

    begin
      load SPEECHTONESANDVERBS_PATH
    rescue LoadError => e
      echo("Error loading speechtonesandverbs.rb: #{e.message}")
      return {}
    rescue StandardError => e
      echo("Error during loading speechtonesandverbs.rb: #{e.message}")
      return {}
    end

    unless defined?(VERBS_DB) && defined?(TONES_DB)
      echo("Error: VERBS_DB or TONES_DB constant is not defined in speechtonesandverbs.rb. Check that they are defined correctly and accessible.")
      return {}
    end

    # Save compiled data to YAML files
    File.open(COMPILED_VERBS_PATH, 'w') { |file| file.write(VERBS_DB.to_yaml) }
    File.open(COMPILED_TONES_PATH, 'w') { |file| file.write(TONES_DB.to_yaml) }
    # Save metadata
    File.open(METADATA_PATH, 'w') { |file| file.write({ 'file_size' => current_size }.to_yaml) }

    echo("Compiled data saved to YAML files.")
  end

  # Load compiled data
  verbs_data = YAML.load_file(COMPILED_VERBS_PATH)
  tones_data = YAML.load_file(COMPILED_TONES_PATH)

  [verbs_data, tones_data]
end

# Load VERBS_DB and TONES_DB initially
VERBS_DB, TONES_DB = load_or_compile_data

# Levenshtein distance function for fuzzy matching
def levenshtein_distance(str1, str2)
  s1, s2 = str1.downcase, str2.downcase
  matrix = [(0..s1.length).to_a]
  (1..s2.length).each { |j| matrix << [j] + [0] * (s1.length) }

  (1..s2.length).each do |i|
    (1..s1.length).each do |j|
      if s2[i - 1] == s1[j - 1]
        matrix[i][j] = matrix[i - 1][j - 1]
      else
        matrix[i][j] = [matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]].min + 1
      end
    end
  end
  matrix.last.last
end

# Helper function to use Fast Stemmer for word stemming
def lemmatize(word)
  word.stem  # Apply the Fast Stemmer to the word
end

# Function to find and display verbs/tones by terms with substring matching
def find_speech_by_terms(terms, verbs_db, tones_db, prefs)
  minimum_term_length = 3
  terms = terms.map(&:downcase).map(&:strip).select { |term| term.length >= minimum_term_length }

  matching_items = {}

  # Search in VERBS_DB if the player has opted for it
  search_db(terms, verbs_db, :verbs, matching_items) if prefs['display_verbs']
  
  # Search in TONES_DB if the player has opted for it
  search_db(terms, tones_db, :tones, matching_items) if prefs['display_tones']

  matching_items.values.sort_by { |item| -item[:score] }  # Sort by highest score
end

# Helper function to search in a specific database (verbs or tones)
def search_db(terms, database, source, matching_items)
  terms_stems = terms.map { |term| lemmatize(term) }  # Get stems of the search terms
  
  database.each do |category, items|
    items.each do |name, definition|
      relevance_score = 0

      # 1. Exact match in name or name starts with the search term (highest priority)
      exact_match = terms.any? { |term| name.downcase == term }
      starts_with_match = terms.any? { |term| name.downcase.start_with?(term) }

      # 2. Match in definitions and synonyms that start with the search term
      definition_match = terms.any? { |term| definition.downcase.split.any? { |word| word.start_with?(term) } }
      stem_definition_match = terms_stems.any? { |stem| definition.downcase.split.any? { |word| word.start_with?(stem) } }

      # 3. Stem match in the name itself (e.g., "anger" matching "angry")
      stem_name_match = terms_stems.any? { |stem| name.downcase.start_with?(stem) }

      # 4. Scoring logic
      relevance_score += 1000 if exact_match  # Exact matches should always rank the highest
      relevance_score += 700 if starts_with_match  # "Starts with" matches in the name are highly relevant
      relevance_score += 500 if definition_match  # Matches in the definition that start with the term are next in priority
      relevance_score += 400 if stem_definition_match  # Stem matches in the definition are slightly lower but still important
      relevance_score += 600 if stem_name_match  # Stem matches in the name are prioritized just below exact matches

      # Consider matches in categories (lowest priority)
      category_match_count = terms.any? { |term| category.to_s.downcase.include?(term) } ? 1 : 0
      relevance_score += (category_match_count * 50) if category_match_count > 0  # Ensure it's numeric and non-zero

      # If any field matches, add or update the item in the matching list with its relevance score
      if relevance_score > 0
        if matching_items.key?(name)
          matching_items[name][:categories] << category unless matching_items[name][:categories].include?(category)
          matching_items[name][:score] += relevance_score
        else
          matching_items[name] = {
            name: name,
            definition: definition,
            categories: [category],
            score: relevance_score,
            source: source
          }
        end
      end
    end
  end
end

# Helper function to wrap text at a given line length with a prefix for indentation on wrapped lines
def wrap_text(text, indent_level = '', line_width = 150)
  text.split("\n").map do |line|
    chunks = line.scan(/\S.{0,#{line_width - 1}}\S(?=\s|$)|\S+/)
    [chunks.first, *chunks[1..]].join("\n#{' ' * indent_level}")
  end.join("\n")
end

# Function to display matched speech entries based on player preferences
def display_speech_matches(matching_items, total_matches, prefs)
  display_limit = prefs['matches_to_display']
  
  if matching_items.empty?
    echo("No matching speech items found.")
  else
    # Sort by relevance in descending order (most relevant first)
    limited_items = matching_items.sort_by { |item| -item[:score] }.first(display_limit)

    # Display the matches in ascending order, but reverse numbering so #1 is the most relevant
    limited_items.reverse.each_with_index do |item, index|
      next if item[:source] == :verbs && !prefs['display_verbs']
      next if item[:source] == :tones && !prefs['display_tones']

      prefix = item[:source] == :verbs ? '=' : ':'

      # Determine the reverse ranking (the first item will be #1, most relevant)
      rank = limited_items.size - index

      # Only show definitions if the player preference allows it
      if prefs['show_definitions']
        echo("\n  #{prefix}%-16s (Category: #{item[:categories].join(' | ')})\n                    Definition: #{wrap_text(item[:definition], 20, 150)}\n" % item[:name])
      else
        # Code for when definitions are not shown
        # Output the result with the name padded to 20 characters for alignment
        echo("#{prefix}%-20s (Ranked ##{rank})" % item[:name])
      end
    end

    # Display cutoff message if there are more matches not shown
    if total_matches > display_limit
      echo("\nDisplaying the top #{display_limit} most relevant results. There are #{total_matches - display_limit} more matching items.")
    end
  end
end

# Main function to run the speechfinder
def run_speechfinder(script)
  terms = script.vars.reject { |arg| arg.start_with?('--') }
  echo "Using terms: '#{terms.join(' ')}'" if $debug_mode

  if terms.nil? || terms.empty?
    echo("Usage: ;speechfinder TERM (e.g., ;speechfinder happy) [--verbs] [--tones] [--both] [--no-definitions] [--yes-definitions] [--matches=NUM]")
    return
  end

  # Load player preferences
  prefs = load_player_preferences

  # Update preferences based on player options passed in the command line
  parse_player_options(script, prefs)

  # Load the data for verbs and tones
  verbs_db, tones_db = VERBS_DB, TONES_DB

  # Handle the search with the parsed input and player preferences
  matching_items = find_speech_by_terms(terms, verbs_db, tones_db, prefs)

  # Display results based on preferences
  display_speech_matches(matching_items, matching_items.size, prefs)
end

run_speechfinder(script)
