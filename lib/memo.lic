# --- MEMORY STORAGE SYSTEM ---
require 'yaml'

DATA_FILE = File.join(SCRIPT_DIR, 'memory.yml')

# Function to store information
def memo_store_memory(key, value)
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}
  data[key] ||= []
  data[key] << value unless data[key].include?(value) # Avoid duplicates
  File.open(DATA_FILE, 'w') { |f| f.write(data.to_yaml) }
  respond "Stored memory for '#{key}'."
end

# Function to recall information
def memo_recall_memory(key)
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}
  if data[key]
    respond "Memory for '#{key}':"
    data[key].each_with_index { |entry, index| respond "#{index + 1}. #{entry}" }
    exit
  else
    respond "No memory found for '#{key}'."
    show_menu
  end
end

# Function to forget a specific memory entry
def memo_forget_memory_menu(key)
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}

  if data[key]
    respond "Memory entries for '#{key}':"
    data[key].each_with_index { |entry, index| respond "#{index + 1}. #{entry}" }
    respond "Please select an entry to forget using: ;send 3 (number)"

    entry_num = nil
    until entry_num && entry_num > 0 && entry_num <= data[key].size
      entry_num = get.strip.to_i rescue nil
    end

    removed_entry = data[key].delete_at(entry_num - 1)
    File.open(DATA_FILE, 'w') { |f| f.write(data.to_yaml) }
    respond "Forgot memory: '#{removed_entry}' from '#{key}'."
  else
    respond "No memory found for '#{key}'."
  end
end

# Function to list all stored keywords
def memo_list_keywords
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}
  if data.empty?
    respond "No stored memories found."
  else
    respond "Stored memory keywords: " + data.keys.join(", ")
  end
end

# --- MAIN EXECUTION: Handle Direct Keyword Input ---
if variable[1] && variable[1].downcase =~ /help/
  echo "
# ============================================================
#                  MEMO SCRIPT HELP
# ============================================================

# This script allows you to store, recall, and manage short memos.

# COMMANDS:
#  1. **;memo**  
#     - Opens an interactive menu where you can store, recall, or delete memories.  
#     - You will use `;send` commands to interact with the menu.  

#  2. **;memo (keyword)**  
#     - Directly recalls a stored memory for the given keyword.  
#     - Example: `;memo taco` → Displays the stored entry for 'taco'.  

#  3. **;memo store (keyword) (text)**  
#     - Allows you to store a memory without opening the menu.  
#     - Example: `;memo store taco Tacos are great!` → Saves the entry instantly.  

# NOTES:  
#  - If a keyword does not exist, the script will display \"No memory found\" and return to the menu.  
#  - If no arguments are provided (`;memo`), the script will open the interactive menu.  

"
  exit
end

if variable[1] && variable[1].downcase == "store"
  if variable[2] && variable[3]
    key = variable[2].downcase
    value = variable[3..-1].join(" ")
   memo_store_memory(key, value)
    exit
  else
    respond "Invalid format. Use: variable store (keyword) - (text)"
    exit
  end
end

if variable[1]  # If any argument is provided, assume it's a keyword and attempt to recall it
  memo_recall_memory(variable[1].downcase)
  exit
end

# If no argument, show the menu
# --- INTERACTIVE MENU ---
respond "
=======================================
What would you like to do?
    1. Store a memory - please ;send 1 (keyword) - (text)
    2. Recall a memory - please ;send 2 (keyword)
    3. Forget a memory - please ;send 3 (keyword)
    4. List all stored keywords - please ;send 4
======================================="
respond

# Wait for a valid `;send` command
line = nil
line = get until line.strip =~ /^[1-4] \S+.*|^[4]$/
command = line.strip

if command =~ /^1 (\S+) - (.+)$/
  key, value = command.match(/^1 (\S+) - (.+)$/).captures
  memo_store_memory(key.downcase, value.strip)

elsif command =~ /^2 (\S+)$/
  memo_recall_memory(command.match(/^2 (\S+)$/)[1].downcase)

elsif command =~ /^3 (\S+)$/
  memo_forget_memory_menu(command.match(/^3 (\S+)$/)[1].downcase)

elsif command.strip == "4"
  memo_list_keywords

else
  respond "Invalid selection. Exiting memory system."
end