# --- MEMORY STORAGE SYSTEM ---
require 'yaml'

DATA_FILE = File.join(SCRIPT_DIR, 'IMAGINATION', 'memory.yml')

# Function to store information
def store_memory(key, value)
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}
  data[key] ||= []
  data[key] << value unless data[key].include?(value) # Avoid duplicates
  File.open(DATA_FILE, 'w') { |f| f.write(data.to_yaml) }
  respond "Stored memory for '#{key}'."
end

# Function to recall information
def recall_memory(key)
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}
  if data[key]
    respond "Memory for '#{key}':"
    data[key].each_with_index { |entry, index| respond "#{index + 1}. #{entry}" }
    exit
  else
    respond "No memory found for '#{key}'."
    show_menu
  end
end

# Function to list all stored keywords
def list_keywords
  data = File.exist?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}
  if data.empty?
    respond "No stored memories found."
  else
    respond "Stored memory keywords: " + data.keys.join(", ")
  end
end

# --- MAIN EXECUTION: Handle Direct Keyword Input ---
if variable[1] && variable[1].downcase =~ /help/
  echo "This script is designed to help with storing information in a memo-based system."
  exit
end

if variable[1]  # If any argument is provided, assume it's a keyword and attempt to recall it
  recall_memory(variable[1].downcase)
  exit
end

# --- INTERACTIVE MENU ---
respond "
=======================================
What would you like to do?
    1. Store a memory - please ;send 1 (keyword) - (text)
    2. Recall a memory - please ;send 2 (keyword)
    3. Forget a memory - please ;send 3 (keyword)
    4. List all stored keywords - please ;send 4
======================================="
respond

# Wait for a valid `;send` command
line = nil
line = get until line.strip =~ /^[1-4] \S+.*|^[4]$/
command = line.strip

if command =~ /^1 (\S+) - (.+)$/
  key, value = command.match(/^1 (\S+) - (.+)$/).captures
  store_memory(key.downcase, value.strip)

elsif command =~ /^2 (\S+)$/
  recall_memory(command.match(/^2 (\S+)$/)[1].downcase)

elsif command =~ /^3 (\S+)$/
  forget_memory_menu(command.match(/^3 (\S+)$/)[1].downcase)

elsif command.strip == "4"
  list_keywords

else
  respond "Invalid selection. Exiting memory system."
end
