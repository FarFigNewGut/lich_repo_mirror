=begin
max_lock
Updated:  11-28-2014
Finds your max lock and trap, lored and unlored, with all picks, and also with all picks the script finds on your person
Lored lock values are known to be slightly inaccurate
author: Gibreficul
tags: utility, information, lockpicking
=end
$broken_picks = 'satchel'
$pick_list = [["copper\s", 1.00],["brass\s", 1.00],["steel\s", 1.10],["ivory\s", 1.20],["gold\s", 1.20],["silver\s", 1.30],["mithril\s", 1.45],["ora\s", 1.55],["glaes\s", 1.60],["laje\s", 1.75],["vultite\s", 1.80],["rolaren\s", 1.88],["veniom\s", 2.20],["invar\s", 2.25],["alum\s", 2.30],["golvern\s", 2.35],["kelyn\s", 2.40],["vaalin\s", 2.5],['imflass-edged', 2.51]]
$lock_list = [["a primitive lock", 35],["a rudimentary lock", 75],["an extremely easy lock", 115],["a very easy lock", 155],["an easy lock", 195],["a very basic lock", 235],["a fairly easy lock", 275],["a simple lock", 315],["a fairly simple lock", 355],["a fairly plain lock", 395],["a moderately well\-crafted lock", 435],["a well-crafted lock", 475],["a tricky lock", 515],["a somewhat difficult lock", 555],["a moderately difficult lock", 595],["a very well\-crafted lock", 635],["a difficult lock", 675],["an extremely well\-crafted lock", 715],["a very difficult lock", 755],["a fairly complicated lock", 795],["an intricate lock", 835],["an amazingly well\-crafted lock", 875],["a very complex lock", 915],["an impressively complicated lock", 955],["an amazingly intricate lock", 995],["an extremely difficult lock", 1035],["an extremely complex lock", 1075],["a masterfully well\-crafted lock", 1115],["an amazingly complicated lock", 1155],["an astoundingly complex lock", 1195],["an incredibly intricate lock", 1235],["an absurdly well\-crafted lock", 1275],["an exceedingly complex lock", 1315],["an absurdly difficult lock", 1355],["a masterfully intricate lock", 1395],["an unbelievably complicated lock", 1435],["an impossibly complex lock", 1485]]

def gmsg(text)
	### METHOD PROVIDED BY Casis, thank you.
	stringArray = Array.new
	stringArray = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
	if $fake_stormfront
		preface_text = "\034GSL\r\n "
		end_text = "\034GSM\r\n "
	else
		preface_text = "<pushBold\/>"
		end_text = "<popBold\/>"
	end
	stringArray.each { |line|
		puts "#{preface_text}#{line.gsub('\n','')}#{end_text}"
	}
end
def cmpicks
	$arange = []
	$yrange = []
	keyring = false
	if kring = GameObj.loot.find{|item| item.noun == 'keyring'}
		fput "_drag ##{kring.id} wear"
	end
	if GameObj.inv.find{|item| item.noun == "keyring"} || Char.name == "Gibreficul"
		clear
		clear
		action = proc{|server_string|
			case server_string
			when /Attached to a.*?keyring/
				nil
			else
				server_string
			end
		}
		#DownstreamHook.remove('keyring')
		#DownstreamHook.add('keyring', action)
		fput "look on ##{GameObj.inv.find{|item| item.noun == 'keyring'}.id}"
		keyring = matchwait "Attached"
		$keyring = keyring.scan(/([\w]+\-?[\w]+)(?:\slockpick|\skey\b)/).flatten
		#DownstreamHook.remove('keyring')
		$usepicks = false
	else
		gmsg "... ... ... *** ... *** ... *** SCANNING LOCKPICKS *** ... *** ... ***... ... ..."
		$keyring = false
		$usepicks = []
		$pick_list.each{|pick, mod|
			GameObj.inv.each{|thing|
				next if thing.noun =~ /#{$broken_picks}|keyring/
				thing.contents.each{|lockpick|
					if lockpick.name =~ /#{pick}/ && lockpick.noun == 'lockpick' then $usepicks.push(pick) unless $usepicks.include?(pick) end
				}
			}
		}
	end
	$pick_list.each{ |pick,mod|
		pick2 = pick.gsub(" ", "")
		lock = []
		lock.push(pick2)
		lock.push(((Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1]) * mod).floor)
		lock.push((((Stats.level / 2.0) + (Skills.pickinglocks / 10.0) + (Stats.dex[1] / 2.0) + (Stats.int[1] / 2.0) + 30 + Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1]) * mod).floor) if Spells.minorelemental >= 3
		lock.push((mod * (((Stats.level / 2) + (Skills.pickinglocks / 10) + (Stats.dex[1] / 2) + (Stats.int[1] / 2) + 30) / 2 + Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1])).round) unless Spells.minorelemental >= 3
		$arange.push(lock)
#		$yrange.push(lock) if [$keyring, $usepicks].flatten.include?(pick)
		if $keyring.include?(pick2)
			$yrange.push(lock) #if $keyring.include?(pick)
		end
		$yrange.push(lock) if $usepicks.include?(pick)
		maxtrap = Stats.dex[1] + Skills.to_bonus(Skills.disarmingtraps)
		lored_trap = Stats.dex[1] + Skills.to_bonus(Skills.disarmingtraps) + (Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + (Stats.agi[1] / 2) + (Stats.dis[1] / 2) if Spells.minorelemental >= 4
		lored_trap = Stats.dex[1] + Skills.to_bonus(Skills.disarmingtraps) + ((Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + (Stats.agi[1] / 2) + (Stats.dis[1] / 2)) / 2 unless Spells.minorelemental >= 4
		$maxtrap = []
		$maxtrap = [maxtrap,lored_trap]
	}
	if $yrange.empty?
		gmsg "yrange issue, spamming some shit to see if I can fix it"
		$gapcounter = 0 unless $gapcounter
		if $gapcounter >= 1
			$gapcounter = 0
			gmsg "EXITING, $YRANGE DID NOT LOAD PRPOERLY"
			gmsg "EXITING"
			exit
		else
			$gapcounter += 1
			GameObj.inv.find_all{|stuff| stuff.contents == nil}.each{|pack|
				multifput "open ##{pack.id}"
				openmeup = false
				openmeup = matchtimeout(1, "seem to be any way|open")
				fput "l in ##{pack.id}" if openmeup
			}
			cmpicks
		end
	else
#		gmsg "****** Gibreficul's pickbot script logic has loaded lockpicks and whatnot ******"
	end
end
def mlock
	unless GameObj.left_hand.noun == 'lockpick'
		cmpicks
		respond "ALL LOCKPICKS CALCULATED"
	else
		gmsg "You are holding a lockpick, lock list will not be updated."
	end
	$arange.each{ |pick,unlore,lore|
		respond "pick name: #{pick}, unlored: #{unlore}, lored: #{lore}"
	}
	gmsg "do ;send next  to continue:"
	matchtimeout(4,  "next")
	respond " ";respond " "
	gmsg "***  FOUND LOCKPICKS CALCULATED  ***"
	$yrange.each{ |pick,unlore,lore|
		respond "pick name: #{pick}, unlored: #{unlore}, lored: #{lore}"
	}
	respond " "
	gmsg "Max unlored trap: #{$maxtrap[0]} and max lored trap is #{$maxtrap[1]}"
end
mlock