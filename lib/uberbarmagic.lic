=begin
  UberBAR!!!
  Stormfront Only - check out UberBarWiz for a GTK version
  It makes you an UBERBAR!
  Combines XPSF, health, mana, stamina, spirit, experience, mind, stance, encumbrance and wound data into one bar!
  THIS VERSION FOR WIZARDS, SORCS, BARDS AND MONKS - adds a little progress bar showing how far along you are for wizard tears, sorcerer juice, LTPs, and monk spunk.
  Fully operational!!
  This version by Elkiros, who literally had no idea what he was doing the whole time
  Thanks to Gibreficul for the capped character code and testing
  Thanks to Dantax for helping me figure out the regex for capturing @CurrentMagic
  Thanks to Bait & Khazaann for writing Uberbar and Uberbarv - I only stood on the shoulders of giants
=end

if $SAFE > 0
  echo "error: This script needs to be trusted to work. (;trust #{script.name.downcase})"
  exit
end

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in UberBar"
  respond " This version is specific to the Stormfront frontend"
  respond " There is a Wizard (GTK) version on the repository on the repository"
  respond ""
  respond " ;repo download uberbarwiz"
  respond ""
  respond " Closing now"
  respond ""
  exit
end

favor_to_step = proc {
   (Society.rank*100) + (((XMLData.level**2)*(((Society.rank+2)/3)*5))/3)
}

silence = proc {
	action = proc { |server_string|
		if server_string =~ /^\s*Health\:|^\s*>resource/
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence", action)
}

check_magic = proc {
		@CurrentMagic = 0
		silence.call	
		fput "resource"
		while (line = get) 
            if line =~ /^\s*Essence\:\ ([\d,]+)/
                   @CurrentMagic = $1.to_i
				   @MagicPercent = @CurrentMagic / @MaxMagic * 100
                   break
            elsif line =~ /^\s*Necrotic Energy\:\ ([\d,]+)/
                   @CurrentMagic = $1.to_i
				   @MagicPercent = @CurrentMagic / @MaxMagic * 100
                   break
            elsif line =~ /^\s*Motes of Tranquility\:\ ([\d,]+)/
                   @CurrentMagic = $1.to_i
				   @MagicPercent = @CurrentMagic / @MaxMagic * 100
                   break				
            elsif line =~ /^\s*Weekly Kills to LKP\:\ ([\d,]+)/
                   @CurrentMagic = $1.to_i
				   @MagicPercent = @CurrentMagic / @MaxMagic * 100
                   break	
            elsif line =~ /^\s*Lore Knowledge Points\:\ ([\d,]+)/
                   @CurrentMagic = 750
				   @MagicPercent = @CurrentMagic / @MaxMagic * 100
                   break				   
			else   nil			   
            end
		end
		sleep 0.5
		DownstreamHook.remove("#{script.name}_silence")
}

#This routine is taken from ;go2
check_silvers = proc {
        hook_proc = proc { |server_string|
                if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
                        nil
                elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
                        DownstreamHook.remove('flowergirl_check_silvers')
                        nil  
                else
                        server_string
                end
        }
        clear
        DownstreamHook.add('flowergirl_check_silvers', hook_proc)
        silence_me unless undo_silence = silence_me
        put 'info'
        silence_me if undo_silence
        while (line = get) 
                if line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
                        silvers = $1.to_i
                        break
                end
        end
        silvers
}

wait_while { XMLData.next_level_text !~ /(experience|until next level)/ or !XMLData.next_level_value.integer? }

def ubWoundsFullDis()
  displayw = ""
  areas = [["nsys", "nerves"],["leftArm", "left arm"],["rightArm", "right arm"],["rightLeg", "right leg"],["leftLeg", "left leg"],["head", "head"],["rightFoot", "right foot"],["leftFoot", "left foot"],["rightHand", "right hand"],["leftHand", "left hand"],["rightEye", "right eye"],["leftEye", "left eye"],["back", "back"],["neck", "neck"],["chest", "chest"],["abdomen", "abdomen"]]
  areas.each do |area|
    if eval("Wounds.#{area[0]}") > 0 and area[0] == "nsys"   then displayw += "<image id='#{area[0]}' name='Nsys#{eval("Wounds.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Scars.#{area[0]}") > 0  and area[0] == "nsys"   then displayw += "<image id='#{area[0]}' name='Nsys#{eval("Scars.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Wounds.#{area[0]}") > 0            then displayw += "<image id='#{area[0]}' name='Injury#{eval("Wounds.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Scars.#{area[0]}") > 0            then displayw += "<image id='#{area[0]}' name='Scar#{eval("Scars.#{area[0]}")}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Wounds.#{area[0]}") == 0            then displayw += "<image id='#{area[0]}' name='#{area[0]}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    elsif eval("Scars.#{area[0]}") == 0            then displayw += "<image id='#{area[0]}' name='#{area[0]}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
    end
  end
  return displayw
end
def ubWoundsChangeDis(location)
  areas = { "nsys" => "nerves", "leftArm" => "left arm", "rightArm" => "right arm", "rightLeg" => "right leg", "leftLeg" => "left leg", "head" => "head", "rightFoot" => "right foot", "leftFoot" => "left foot", "rightHand" => "right hand", "leftHand" => "left hand", "rightEye" => "right eye", "leftEye" => "left eye", "back" => "back", "neck" => "neck", "chest" => "chest", "abdomen" => "abdomen", }
  displayw = ""
  if eval("Wounds.#{location}") > 0 and location == "nsys"      then displayw = "<image id='#{location}' name='Nsys#{eval("Wounds.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  elsif eval("Scars.#{location}") > 0 and location == "nsys"      then displayw = "<image id='#{location}' name='Nsys#{eval("Scars.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  elsif eval("Wounds.#{location}") > 0               then displayw = "<image id='#{location}' name='Injury#{eval("Wounds.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  elsif eval("Scars.#{location}") > 0               then displayw = "<image id='#{location}' name='Scar#{eval("Scars.#{location}")}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  else ; displayw = "<image id='#{location}' name='#{location}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
  end
  return displayw
end
def ubWoundsMash()
  woundmash = []
  areas = ["nsys","leftArm","rightArm","rightLeg","leftLeg","head","rightFoot","leftFoot","rightHand","leftHand","rightEye","leftEye","back","neck","chest","abdomen"]
  areas.each do |area|
    woundmash.push eval("(Wounds.#{area} * 10) + Scars.#{area}")
  end
  return woundmash
end

no_kill_all
no_pause_all
hide_me
debug = false
@MaxMagic = 0
xpnFirstTime = 0
nowTime = Time.now - 1
xpnNLT = xpnCur = xpnOld = xpnCap = xpnValue = xpnText = xpnHour = xpnLast = xpnTotal = 0
oldRM = oldHP = oldMP = oldST = oldSP = oldXP = oldMD = oldmagic = oldSN = oldEN = oldIN =xlnmesg = nil
oldWO = ubWoundsMash()
areas = ["nsys","leftArm","rightArm","rightLeg","leftLeg","head","rightFoot","leftFoot","rightHand","leftHand","rightEye","leftEye","back","neck","chest","abdomen"]
capped = false
firstpulse = true
capped = true if Char.level == 100
buffx = 3
buffy = 3
sizebx = 186
sizerx = 100
sizey = 13
fvrStep = 1 
fvrGain = 1
New_Silver = 0
oldfvr = ($favor[:step])
fvrGain = oldfvr
fvrStep = favor_to_step.call

def self.magicpercent
  ((@CurrentMagic.to_f.round(2) / @MaxMagic.to_f.round(2)) * 100).round(2)
end

if Char.prof == "Wizard"
    @MaxMagic = 16000
elsif Char.prof == "Sorcerer"
	@MaxMagic = 10000
elsif Char.prof == "Monk"
	@MaxMagic = 50000
elsif Char.prof == "Bard"
	@MaxMagic = 750
else
    @MaxMagic = 1
end

if fvrStep > 1
   fvrText = sprintf("Voln Favor: %2s /%2s (%2s%%)", fvrGain, fvrStep,(fvrGain*100/fvrStep) )
else   
   fvrStep= 1
   fvrText = sprintf("Master Favor: %2s", $favor[:symbol])
end
if fvrGain*100/fvrStep > 100
   fvrText = sprintf("Master Favor: %2s", $favor[:symbol])
end
Current_Silver = 0
Current_Silver = check_silvers.call
SilText = sprintf("Silvers: %2s", Current_Silver)
MindText = sprintf("%1s  (%2s%%)", XMLData.mind_text,XMLData.mind_value )
StanText = sprintf("%1s           (%2s%%)", XMLData.stance_text,XMLData.stance_value )
EncText = sprintf("%1s           (%2s%%)", XMLData.encumbrance_text, XMLData.encumbrance_value )
MagicText = sprintf("#{@CurrentMagic} / #{@MaxMagic}      (#{self.magicpercent.to_i}%%)")
before_dying {
  puts("<closeDialog id='UberBar'/>")
}

ublineloggl = "\"<label id='ublog'   value='Coins:'              justify='4'   anchor_left='ubinjury'   align='n'               top='#{buffy+10}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinehourl = "\"<label id='ubhour'  value='AVG/Hr:'               justify='4'   anchor_left='ubinjury'   anchor_top='ublog'      top='#{buffy}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinelastl = "\"<label id='ublast'  value='Pulse:'                justify='4'   anchor_left='ubinjury'   anchor_top='ubhour'     top='#{buffy}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinerooml = "\"<label id='ubroom'  value='Room:'                 justify='4'   anchor_left='ubinjury'   anchor_top='ublast'     top='#{buffy+2}' left='5' height='#{sizey}' width='#{sizerx/2}'/>\""
ublineloggv = "\"<label id='ublogv'  value='\#{Current_Silver}'          justify='1'   anchor_left='ublog'      align='n'               top='#{buffy+10}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinehourv = "\"<label id='ubhourv' value='\#{xpnHour}'           justify='6'   anchor_left='ubhour'     anchor_top='ublogv'     top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinelastv = "\"<label id='ublastv' value='\#{xpnLast}'           justify='6'   anchor_left='ublast'     anchor_top='ubhourv'    top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublineroomv = "\"<label id='ubroomv' value='\#{Room.current.id}'   justify='6'   anchor_left='ubroom'     anchor_top='ublastv'    top='#{buffy+2}' left='0' height='#{sizey}' width='#{sizerx/2}'/>\""
ublinebars  = "\"<image id='ubbars'  name='PanelBackground'        justify='4'   anchor_left='ubinjury'   align='n'               top='#{buffy}' left='5' height='80' width='0'/>\""
ublineheal  = "\"<skin id='ubheal'   name='healthBar'  controls='health'         anchor_left='ubinjury'   anchor_top='ubbars'     top='#{buffy}' left='#{buffx+1}' width='0' height='#{sizey+2}'/><progressBar id='health'      value='\#{percenthealth}'   text='\#{checkhealth}/\#{maxhealth}'   customText='t' anchor_left='ubinjury' anchor_top='ubbars'   top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey+2}'/>\""
ublinemana  = "\"<skin id='ubmana'   name='manaBar'    controls='mana'           anchor_left='ubinjury'   anchor_top='ubheal'     top='#{buffy}' left='#{buffx}' width='0' height='#{sizey+2}'/><progressBar id='mana'      value='\#{percentmana}'      text='\#{checkmana}/\#{maxmana}'   customText='t' anchor_left='ubinjury' anchor_top='health'   top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey+2}'/>\""
ublinestam  = "\"<skin id='ubstam'   name='staminaBar' controls='stamina'        anchor_left='ubinjury'   anchor_top='ubmana'     top='#{buffy}' left='#{buffx+1}' width='0' height='#{sizey+2}'/><progressBar id='stamina'   value='\#{percentstamina}'   text='\#{checkstamina}/\#{maxstamina}'   customText='t' anchor_left='ubinjury' anchor_top='mana'      top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey+2}'/>\""
ublinespir  = "\"<skin id='ubspir'   name='spiritBar'  controls='spirit'         anchor_left='ubinjury'   anchor_top='ubstam'     top='#{buffy}' left='#{buffx+1}' width='0' height='#{sizey+2}'/><progressBar id='spirit'      value='\#{percentspirit}'   text='\#{checkspirit}/\#{maxspirit}'   customText='t' anchor_left='ubinjury' anchor_top='stamina'   top='#{buffy}' left='#{buffx+1}' width='#{sizerx}' height='#{sizey+2}'/>\""
ublinenext  = "\"<progressBar id='ubnext'   value='\#{xpnValue}'                  text='\#{xpnText}'      anchor_top='ubinjury'   top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublinemind  = "\"<progressBar id='ubmind'   value='\#{XMLData.mind_value}'   text='\#{MindText}' customText='t'   anchor_top='ubnext'   top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublinestan  = "\"<progressBar id='ubstnc'   value='\#{XMLData.stance_value}'      text='\#{StanText}'     anchor_top='ubmind'     top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublineencm  = "\"<progressBar id='ubencm'   value='\#{XMLData.encumbrance_value}' text='\#{EncText}'      anchor_top='ubstnc'     top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
ublinemgic  = "\"<progressBar id='ubmgic'   value='\#{self.magicpercent}' text='\#{MagicText}'      anchor_top='ubencm'     top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
if fvrGain >= 0
   if fvrStep > 1
   ublineenvf  = "\"<progressBar id='ubenvf'    value='\#{(fvrGain*100)/favor_to_step.call}%'   text='\#{fvrText}'     anchor_top='ubmgic'   top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
   else
    fvrStep = 1
   ublineenvf  = "\"<progressBar id='ubenvf'    value='\#{(fvrGain*100)}%'   text='\#{fvrText}'     anchor_top='ubmgic'   top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>\""
   end
else
   ublineenvf  = "\"<progressBar id='ubenvf'    value=' '   text=' '     anchor_top='ubmgic'   top='#{buffy}' left='#{buffx}' width='0' height='0'/>\""
end
openLines = [
  "<closeDialog id='UberBar'/>",
  "<openDialog type='dynamic' id='UberBar' title='#{Char.name}'s Uberbar' target='UberBar' location='main' height='232' width='190' resident='true'>",
  "<dialogData id='UberBar'>",
  "<skin id='ubinjury' name='InjuriesPanel' controls='nsys,leftArm,rightArm,rightLeg,leftLeg,head,rightFoot,leftFoot,rightHand,leftHand,rightEye,leftEye,back,neck,chest,abdomen' top='5' left='5' width='100' height='150' align='nw'/>"]
tosend = openLines.join
tosend += ubWoundsFullDis()
if fvrGain >= 0
   openLines = [eval(ublineloggl), eval(ublinehourl), eval(ublinelastl), eval(ublinerooml), eval(ublineloggv), eval(ublinehourv), eval(ublinelastv), eval(ublineroomv), eval(ublinebars), eval(ublineheal), eval(ublinemana), eval(ublinestam), eval(ublinespir), eval(ublinenext), eval(ublinemind), eval(ublinestan), eval(ublineencm), eval(ublinemgic), eval(ublineenvf)
 ]
else
   openLines = [eval(ublineloggl), eval(ublinehourl), eval(ublinelastl), eval(ublinerooml), eval(ublineloggv), eval(ublinehourv), eval(ublinelastv), eval(ublineroomv), eval(ublinebars), eval(ublineheal), eval(ublinemana), eval(ublinestam), eval(ublinespir), eval(ublinenext), eval(ublinemind), eval(ublinestan), eval(ublineencm), eval(ublinemgic)]
end
tosend += openLines.join
tosend += "</dialogData></openDialog>"

puts(tosend)


loop {
  wait_while { oldHP == checkhealth and oldMP == checkmana and oldST == checkstamina and oldSP == checkspirit and oldXP == XMLData.next_level_text and oldMD == XMLData.mind_text and oldSN == XMLData.stance_text and oldEN == XMLData.encumbrance_text and oldIN == XMLData.injuries.to_s and oldmagic == @CurrentMagic and oldfvr == fvrGain  and (oldRM == Room.current.id or Time.now - nowTime < 1) }
  nowTime = Time.now
  doLines = "<dialogData id='UberBar'>"
  fvrGain = ($favor[:step])
  fvrStep = favor_to_step.call
  
  if oldHP != checkhealth       then echo "updated health" if debug   ; oldHP = checkhealth         ; doLines += eval(ublineheal) end
  if oldMP != checkmana         then echo "updated mana" if debug   ; oldMP = checkmana         ; doLines += eval(ublinemana) end
  if oldST != checkstamina      then echo "updated stamina" if debug   ; oldST = checkstamina         ; doLines += eval(ublinestam) end
  if oldSP != checkspirit       then echo "updated spirit" if debug   ; oldSP = checkspirit         ; doLines += eval(ublinespir) end
  if oldmagic != @CurrentMagic   then echo "updated weekly goals" if debug   ; oldmagic = @CurrentMagic         ; MagicText = sprintf("#{@CurrentMagic} / #{@MaxMagic}      (#{self.magicpercent.to_i}%%)");  doLines += eval(ublinemgic) end
  
  if oldMD != XMLData.mind_text      then
     oldMD = XMLData.mind_text
     MindText = sprintf("%1s  (%2s%%)", XMLData.mind_text,XMLData.mind_value )
     doLines += eval(ublinemind) 
  end
  
  if oldSN != XMLData.stance_text   then 
        oldSN = XMLData.stance_text      
        StanText = sprintf("%1s           (%2s%%)", XMLData.stance_text,XMLData.stance_value )
        doLines += eval(ublinestan)
  end
  
  if oldEN != XMLData.encumbrance_text   then
     oldEN = XMLData.encumbrance_text   
     EncText = sprintf("%1s           (%2s%%)", XMLData.encumbrance_text, XMLData.encumbrance_value )
     doLines += eval(ublineencm)
     Current_Silver = check_silvers.call
     if New_Silver != Current_Silver
     	New_Silver = Current_Silver
     	doLines += eval(ublineloggv)
     	SilText = sprintf("Silvers: %2s", Current_Silver)
     	echo SilText
     end
  end
  
  if oldRM != Room.current.id      then
     oldRM = Room.current.id   
     doLines += eval(ublineroomv) 
  end
  
  if oldfvr != fvrGain then 
     fvrGain = ($favor[:step])
     oldfvr = fvrGain
     if fvrStep  > 0
        fvrText = sprintf("Voln Favor: %2s/%2s (%2s%%)", fvrGain, fvrStep,(fvrGain*100/fvrStep) )
        if (fvrGain*100/fvrStep) > 500
           fvrText = sprintf("Master Favor: %2s", $favor[:symbol])
        end
     else      
        fvrText = sprintf("Master Favor: %2s", $favor[:symbol])
     end
     doLines += eval(ublineenvf) 
  end
  
  if oldXP != XMLData.next_level_text   then echo "updated next_level" if debug ; 
    xpnNLT = XMLData.next_level_text
    if xpnNLT =~ /( experience| until next level)/
      xpnCur = xpnNLT.delete(' experience').delete(' until next level').to_i
      xpnLast = xpnOld - xpnCur
      xpnLast *= -1 if xpnLast < 0
      xpnLast = 0 if xpnLast > 2499
      xpnmesg = sprintf("********  %2s EXP Gained this Pulse ********* (%2s)+",xpnLast,Time.now.strftime('%X'))
	  echo xpnmesg
	  check_magic.call
    else
      xpnCur = 0
      xpnLast = 0
    end
    if firstpulse
      xpnFirstTime = Time.now - 1
      xpnTotal = 0
      xpnLast = 0
      firstpulse = false
    end
    if capped
      xpnCap = (xpnCur / 2500 + 1) * 2500 - xpnCur
      xpnValue = 100 - (xpnCap / 25)
      xpnText = "#{xpnCap} until TP"
    else
      xpnValue = XMLData.next_level_value.to_i
      xpnText = sprintf("Lvl: %2s  (%2s%%)   %6s TNL", Char.level,xpnValue, xpnCur)
    end
    xpnTotal += xpnLast
    xpnHour = ((1.00 * xpnTotal) / ((nowTime - xpnFirstTime)/3600.00)).to_i
    xpnOld = xpnCur
    oldXP = XMLData.next_level_text
    doLines += eval(ublinenext) + eval(ublineloggv) + eval(ublinehourv) + eval(ublinelastv)
  end
  
  if oldIN != XMLData.injuries.to_s
    echo "updated injuries" if debug
    newWO = ubWoundsMash()
    newWO.length.times { |n|
      if oldWO[n] != newWO[n] then doLines += ubWoundsChangeDis(areas[n]) end
    }
    oldIN = XMLData.injuries.to_s
    oldWO = ubWoundsMash()
  end
  doLines += "</dialogData>"
  puts(doLines) if doLines != "<dialogData id='UberBar'></dialogData>"
}
