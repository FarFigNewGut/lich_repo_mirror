=begin

This script was designed to work with the newest (Nov 2019) version of the enchanting system essence gathering process.

It has the following features:
-Settable reset date for lumnis/tear cycle.
-Tracking of on and off node pulses and gains.
-Running tally of essence gained for a week.
-Lifetime essence-based stats.
-Conversion of static to a roughly numeric value.

This script also has the following limitations:
-Essence gained for a given week is an estimate, due to inability to detect if a pulse was full or partial, for the last pulse.
-Offline essence is not tracked, it only tracks online essence gains.

I am open to suggestions and improvements for this script.
Author - Claudaro
Tags - Wizards, Enchanting, Essence, Tears, Tracking, Static, 925

Versions
1.0 - Release
1.0.1 - fix
=end


UserVars.essencetracker                    ||= {}
UserVars.essencetracker[:weeklyessence]			= 0				if UserVars.essencetracker[:weeklyessence].nil?
UserVars.essencetracker[:essencereset]			= nil			if UserVars.essencetracker[:essencereset].nil?
UserVars.essencetracker[:prevessence]			= 0				if UserVars.essencetracker[:prevessence].nil?
UserVars.essencetracker[:lifenoded]				= 0				if UserVars.essencetracker[:lifenoded].nil?
UserVars.essencetracker[:lifenonnoded]			= 0				if UserVars.essencetracker[:lifenonnoded].nil?
UserVars.essencetracker[:currentnoded]			= 0				if UserVars.essencetracker[:currentnoded].nil?
UserVars.essencetracker[:currentnonnode]		= 0				if UserVars.essencetracker[:currentnonnode].nil?
UserVars.essencetracker[:currentnodedess]		= 0				if UserVars.essencetracker[:currentnodedess].nil?
UserVars.essencetracker[:currentnoness]			= 0				if UserVars.essencetracker[:currentnoness].nil?
UserVars.essencetracker[:lifenodeess]			= 0				if UserVars.essencetracker[:lifenodeess].nil?
UserVars.essencetracker[:lifenoness]			= 0				if UserVars.essencetracker[:lifenoness].nil?


if Spells.wizard <= 24
	respond "You are not a wizard, or not one able to enchant yet.  Come back when you are cooler."
	exit
end

if UserVars.essencetracker[:essencereset] == nil
	respond ""
	respond ""
	respond ""
	respond "This appears to be your fist time running this.  please use SENSE HELP to learn how to use this script."
	respond "Until you follow the directions in it for SENSE SET this script will NOT FUNCTION PROPERLY!"
	respond ""
	respond ""
	respond ""
	UserVars.essencetracker[:essencereset] = Time.new(2019,11,12,6,37)
end

resetin = nil
min = 0
hour = 0
day = 0

#pauses 10 seconds to let all the other start up nonsense scroll by, so this part isn't lost in it, for folks who use this with autostart.
#pause 10

if UserVars.essencetracker[:essencereset] != nil
	if Time.now >= UserVars.essencetracker[:essencereset] + (60*60*24*7)
		echo "new week!"
		UserVars.essencetracker[:essencereset] = UserVars.essencetracker[:essencereset] + (60*60*24*7)
		UserVars.essencetracker[:prevessence] = UserVars.essencetracker[:weeklyessence]
		UserVars.essencetracker[:weeklyessence] = 0
		respond "Previous Week: #{UserVars.essencetracker[:prevessence]}"
		respond "Previous Noded Pulses: #{UserVars.essencetracker[:currentnoded]} resulting in #{UserVars.essencetracker[:currentnodedess]} essence gained."
		respond "Previous Non Noded Pulses: #{UserVars.essencetracker[:currentnonnode]} resulting in #{UserVars.essencetracker[:currentnoness]} essence gained."
		UserVars.essencetracker[:lifenoded] = UserVars.essencetracker[:currentnoded] + UserVars.essencetracker[:lifenoded]
		UserVars.essencetracker[:currentnoded] = 0
		UserVars.essencetracker[:lifenonnoded] = UserVars.essencetracker[:currentnonnode] + UserVars.essencetracker[:lifenonnoded]
		UserVars.essencetracker[:currentnonnode] = 0
		UserVars.essencetracker[:lifenodeess] = UserVars.essencetracker[:currentnodedess] + UserVars.essencetracker[:lifenodeess]
		UserVars.essencetracker[:currentnodedess] = 0
		UserVars.essencetracker[:lifenoness] = UserVars.essencetracker[:currentnoness] + UserVars.essencetracker[:lifenoness]
		UserVars.essencetracker[:currentnoness] = 0
		
		
		
	else
		respond "Same week!"
		respond "Week so far: #{UserVars.essencetracker[:weeklyessence]}"
		respond "Current Noded Pulses: #{UserVars.essencetracker[:currentnoded]} resulting in #{UserVars.essencetracker[:currentnodedess]} essence gained."
		respond "Current Non Noded Pulses: #{UserVars.essencetracker[:currentnonnode]} resulting in #{UserVars.essencetracker[:currentnoness]} essence gained."
		respond ""
		resetin = (UserVars.essencetracker[:essencereset] + (60*60*24*7)) - Time.now
		loop do
			if resetin >= (60*60*24)
				day = day + 1
				resetin = resetin - (60*60*24)
			elsif resetin >= (60*60)
				hour = hour + 1
				resetin = resetin - (60*60)
			elsif resetin >= 60
				min = min + 1
				resetin = resetin - 60
			else
				break
			end
		end
		respond "Resets in: #{day}D,#{hour}H,#{min}M"
	end
end

percentstatic = proc {|server_string|
	if server_string =~ /^You feel the faint tingle of static essence accumulating around you./
		respond ""
		respond "You currently have between #{((500 + Char.maxmana) * 0.1).to_i} (10%) and 1 static stored."
		server_string
	elsif server_string =~ /^You feel a weak accumulation of static essence around you./
		respond ""
		respond "You currently have between #{((500 + Char.maxmana) * 0.25).to_i} (25%) and #{((500 + Char.maxmana) * 0.1).to_i} (10%) static stored."
		server_string
	elsif server_string =~ /^You feel a growing accumulation of static essence around you./
		respond ""
		respond "You currently have between #{((500 + Char.maxmana) * 0.5).to_i} (50%) and #{((500 + Char.maxmana) * 0.25).to_i} (25%) static stored."
		server_string
	elsif server_string =~ /^You feel a moderate accumulation of static essence around you./
		respond ""
		respond "You currently have between #{((500 + Char.maxmana) * 0.75).to_i} (75%) and #{((500 + Char.maxmana) * 0.5).to_i} (50%) static stored."
		server_string
	elsif server_string =~ /^You feel a significant accumulation of static essence around you./
		respond ""
		respond "You currently have between #{((500 + Char.maxmana) * 0.9).to_i} (90%) and #{((500 + Char.maxmana) * 0.75).to_i} (75%) static stored."
		server_string
	elsif server_string =~ /^You feel a strong accumulation of static essence around you./
		respond ""
		respond "You currently have between #{((500 + Char.maxmana) * 0.95).to_i} (95%) and #{((500 + Char.maxmana) * 0.90).to_i} (90%) static stored."
		server_string
	elsif server_string =~ /^You feel completely saturated with static essence./
		respond ""
		respond "You currently have between #{(500 + Char.maxmana)} (100%) and #{((500 + Char.maxmana) * 0.95).to_i} (95%) static stored."
		server_string
	elsif server_string =~ /^You sense that you have accumulated enough essence to complete a (.*) enchantment./
		tears = $1.to_i
		currenttears = 0
		if tears <= 25
			currenttears = (tears - 1) * 100
			if tears == 1
				respond "You have between 0 an 99 essence ready for enchanting."
			elsif tears == 25
				respond "You have between 2400 and 4799 essence ready for enchanting."
			else
				respond "You have between #{currenttears} and #{currenttears + 99} essence ready for enchanting."
			end
		else
			currenttears = ((tears - 24) * 2400)
			if tears == 50
				respond "You have between 62400 and 64000 essence ready for enchanting."
			else
				respond "You have between #{currenttears} and #{currenttears + 2399} essence ready for enchanting."
			end
		end
		respond ""
		server_string
	
	elsif server_string =~ /^The rapid accumulation of static essence has left you feeling overwhelmed and temporarily unable to absorb any new essence./
		respond "#{server_string}"
		respond ""
		nil
	
	else
		server_string
	end
}
DownstreamHook.add('percentstatic', percentstatic)
before_dying {
    DownstreamHook.remove('percentstatic')	
}


hook_proc = proc { |client_string|
	begin
		if client_string =~ /^(?:<c>)?sense(.*)/i
			esscommand = nil
			esscmdarray = nil
			sendsense = false
			essarg = nil
			esscommand = $1
			esscmdarray = esscommand.split
			if esscmdarray.count == 1
				cmd = esscmdarray[0]
			else
				cmd = esscmdarray[0]
				essarg = esscmdarray[1..esscmdarray.count - 1]
			end
			
			
			if cmd.downcase.strip == "info" or cmd.downcase.strip == "startup"
				resetin = (UserVars.essencetracker[:essencereset] + (60*60*24*7)) - Time.now
				day = 0
				hour = 0
				min = 0
				loop do
					if resetin >= (60*60*24)
						day = day + 1
						resetin = resetin - (60*60*24)
					elsif resetin >= (60*60)
						hour = hour + 1
						resetin = resetin - (60*60)
					elsif resetin >= 60
						min = min + 1
						resetin = resetin - 60
					else
						break
					end
				end
				respond "Previous Week: #{UserVars.essencetracker[:prevessence]}"
				respond "Lifetime Noded Pulses: #{UserVars.essencetracker[:lifenoded] + UserVars.essencetracker[:currentnoded]} resulting in #{UserVars.essencetracker[:lifenodeess] + UserVars.essencetracker[:currentnodedess]} essence."
				respond "Lifetime Non Noded Pulses: #{UserVars.essencetracker[:lifenonnoded] + UserVars.essencetracker[:currentnonnode]} resulting in #{UserVars.essencetracker[:lifenoness] + UserVars.essencetracker[:currentnoness]} essence."
				respond ""
				respond "Resets in: #{day}D,#{hour}H,#{min}M"
				respond ""
				respond "Node Pulse count: #{UserVars.essencetracker[:currentnoded]} resulting in #{UserVars.essencetracker[:currentnodedess]} essence for this week."
				respond "Non Node Pulse count: #{UserVars.essencetracker[:currentnonnode]} resulting in #{UserVars.essencetracker[:currentnoness]} essence for this week."
				respond "Essence This Week: #{UserVars.essencetracker[:weeklyessence]}"
				nil	
			end
			
			if cmd.downcase.strip == "set"
				if essarg.count != 5
					respond "This does not appear to be a correct format, to use this command properly, please provide the proper format."
					respond "The proper format is: sense set YYYY MM DD HH MM"
					respond "Where the letters represent the year, month, day, hour, and minute of your last Lumnis reset."
					respond "Any other format or deviation has great potential to break this script for you, and require a complete reset."
				else
					sanity = Time.new(essarg[0],essarg[1],essarg[2],essarg[3],essarg[4])
					if Time.now == sanity
						respond "Something is wrong, aborting for safety"
						exit
					end
					UserVars.essencetracker[:essencereset] = Time.new(essarg[0],essarg[1],essarg[2],essarg[3],essarg[4])
					respond "If you do not see the time you wished to enter, please try again with the proper format."
					respond "The proper format is: sense set YYYY MM DD HH MM"
					respond "Where the letters represent the year, month, day, hour, and minute of your last Lumnis reset."
					respond "Any other format or deviation has great potential to break this script for you, and require a complete reset."
					respond "The time you entered was #{UserVars.essencetracker[:essencereset]}"

					resetin = (UserVars.essencetracker[:essencereset] + (60*60*24*7)) - Time.now
					day = 0
					hour = 0
					min = 0
					loop do
						if resetin >= (60*60*24)
							day = day + 1
							resetin = resetin - (60*60*24)
						elsif resetin >= (60*60)
							hour = hour + 1
							resetin = resetin - (60*60)
						elsif resetin >= 60
							min = min + 1
							resetin = resetin - 60
						else
							break
						end
					end

					respond "Your scheduled to reset in #{day}D,#{hour}H,#{min}M"
				end
				nil
			end
			
			if cmd.downcase.strip == "help" or cmd.downcase.strip == "menu" or cmd.downcase.strip == "setup"
				respond "This script has the following menu options currently: help, info, and set"
				respond ""
				respond "Help brings up what you are reading right now."
				respond ""
				respond "Info displays the information provided on startup, in case you missed it, as well as some lifetime stats."
				respond ""
				respond "Set lets you change the date for the start of your LAST Lumnis cycle - THIS IS REQUIRED!"
				respond ""
				respond "A dummy value for SENSE SET was entered for you, until you update it using this command, this script will not work properly for you."
				respond "Please follow the directions below to set it immediately!"
				respond ""
				respond "First, find the date and time of your last Lumnis reset."
				respond "Second, all times in game are converted to Eastern, if that is not the time zone you live in, modify the time given to match your local timezone."
				respond "Third, using the date and time you have, enter the following command SENSE SET YYYY MM DD HH MM"
				respond "That format is the 4 digit year, two digit month, two digit day, two digit hour, and two digit minute in 24 hour time format."
				respond "It is important that you get this right, as if you do not, you may need to go into ;vars setup and delete the entry for this script  under ESSENCETRACKER and start over."
				respond ""
				respond "If you entered it correctly, you should get a confirmation message with how long until your next reset.  Confirm the time provided is reasonably correct (may be a minute off due to how in-game time works)"
				respond ""
				respond "Due to the inability to determine how much static was converted in the final pulse you get to become empty, the essence gained is an estimate only."
				respond "It will very likely display a higher value than you are actually at, but it should be reasonably close."
				nil
			end
			
			if cmd.downcase.strip == "" or cmd.downcase.strip == nil
				client_string
			end
						
		else
			client_string
		end
	rescue
		respond $!
		respond $!.backtrace
		UpstreamHook.remove('essencehook')
		client_string
	end
}
before_dying { UpstreamHook.remove('essencehook') }
UpstreamHook.add('essencehook', hook_proc)




PulseCount = 0
PulseTime = Time.now
PulseOnNode = 0
PulseOffNode = 0
effemc = 0
effemcbonus = 0
if Skills.emc >= 66
	NodePulseValue = 33 + (Skills.to_bonus(Skills.elfire) / 37).to_i + ((Skills.emc + 100 - 26) / 11).to_i
elsif Skills.emc >= 26
	effemc = Skills.emc - 26
	if effemc <= 10
		effemcbonus = (effemc * 5)
	elsif effemc > 10 and effemc <= 20
		effemcbonus = (50 + ((effemc - 10) * 4))
	elsif effemc > 20 and effemc <= 30
		effemcbonus = (90 + ((effemc - 20) * 3))
	elsif effemc > 30 and effemc <= 40
		effemcbonus = (120 + ((effemc - 30) * 2))
	end
	NodePulseValue = 33 + (Skills.to_bonus(Skills.elfire) / 37).to_i + (effemcbonus / 11).to_i
	
else
	"You do not have the required 26 ranks of Elemental Mana Control to convert static to essence.  You are unable to gain any essence at all until this requirement is met."
	exit
end
NonNodePulseValue = (NodePulseValue * (0.50 + ((Skills.to_bonus(Skills.elwater) / 10).to_i / 100.to_f))).to_i
PulseType = nil
yell = true



loop do
	line = get
	if line =~ /^You feel a soft pulse in the essence around you./
		fput "sense"
		PulseType = matchwait("You sense a convergence in the flows of essence and gather that this place must be a natural earthnode.","You sense that nearby flows of essence have been temporarily anchored in this room.","You sense that you have accumulated enough essence")
		if PulseType =~ /You sense a convergence in the flows of essence and gather that this place must be a natural earthnode./
			UserVars.essencetracker[:currentnoded] = UserVars.essencetracker[:currentnoded] + 1
			UserVars.essencetracker[:currentnodedess] = UserVars.essencetracker[:currentnoded] * NodePulseValue
			UserVars.essencetracker[:weeklyessence] = UserVars.essencetracker[:weeklyessence] + NodePulseValue
			#echo "Node Pulse count: #{PulseOnNode}"
			#echo PulseOnNode
		else
			UserVars.essencetracker[:currentnonnode] = UserVars.essencetracker[:currentnonnode] + 1
			UserVars.essencetracker[:currentnoness] = UserVars.essencetracker[:currentnonnode] * NonNodePulseValue
			UserVars.essencetracker[:weeklyessence] = UserVars.essencetracker[:weeklyessence] + NonNodePulseValue
			#echo "Non Node Pulse count: #{PulseOffNode}"
			#echo PulseOffNode
		end
		respond "Node Pulse count: #{UserVars.essencetracker[:currentnoded]} resulting in #{UserVars.essencetracker[:currentnodedess]} essence for this week."
		respond "Non Node Pulse count: #{UserVars.essencetracker[:currentnonnode]} resulting in #{UserVars.essencetracker[:currentnoness]} essence for this week."
		respond "Essence This Week: #{UserVars.essencetracker[:weeklyessence]}"
		#echo Time.now
		PulseCount = PulseCount + 1
		#echo (Time.now.to_i - PulseTime.to_i)
		#echo PulseCount
		PulseTime = Time.now
		yell = true
	else
		if (Time.now.to_i - PulseTime.to_i) >= 180 and yell == true
			respond "You have no further static left to absorb currently.  You are either at the weekly cap, or need to get more static!"
			yell = false
		end
	end
end