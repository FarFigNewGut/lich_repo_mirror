=begin

	Play craps with your friends! Or play craps with Dreaven at Dreavenings! No in game dice needed!
	
	This is the dealer client of the Craps set of scripts. Start up the script and you can set the rules how you like. Determine what currency will be used, what the payouts are, how long each betting round lasts, and more!
	
	There are two currency modes you can set.
	Gold: This is purely for fun. There is no physical currency used and the dealer tracks everything on their end.
	Silver: This is for real! Uses in game silver to place bets and you are awarded silver when you win bets.

	Version 1: Initial release!
	Version 2: Bug fix.
	
	NOTE: The game is pay as you play, meaning when the player makes a bet they give you the silvers up front, and when they win you pay them right away. Be sure you have enough silvers to cover all bets! If the script crashes for whatever reason, or your game client crashes for whatever reason, there is no mechanism for you to know who is owed what. Keeping a logging script going could be useful in such situations.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

class CrapsDealerMain
	@settings_save_file = "Craps Dealer Settings - #{checkname}.json"
	@stats_save_file = "Craps Dealer Stats - #{checkname}.json"
	@lock_file = "Lock File.lock"
	@stats_load_data = nil
	
	def self.load_the_data
		begin
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file|
				lock_file.flock(File::LOCK_EX)
				
				return unless File.exist?(@settings_save_file)
				
				@settings_load_data = JSON.parse(File.read(@settings_save_file))
			}
		rescue StandardError => e
			respond "Error message from ;CrapsDealer: #{e.message}"
		ensure
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file| lock_file.flock(File::LOCK_UN) }
		end
		
		begin
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file|
				lock_file.flock(File::LOCK_EX)
				
				return unless File.exist?(@stats_save_file)
				
				@stats_load_data = JSON.parse(File.read(@stats_save_file))
			}
		rescue StandardError => e
			respond "Error message from ;CrapsDealer: #{e.message}"
		ensure
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file| lock_file.flock(File::LOCK_UN) }
		end
	end
	
	load_the_data

	@all_silvers_received = {}
	@all_player_stats = @stats_load_data.dup
	@all_player_stats = {} unless @all_player_stats.is_a?(Hash)
	@all_player_stats["Gold"] = {} if !@all_player_stats.key?("Gold")
	@all_player_stats["Silver"] = {} if !@all_player_stats.key?("Silver")
	@auto_mode_enabled = nil

	@tooltips = {
		"Payout Info" => "Here is how payout odds work: The first number is divided by the second number and then this is multipled by the bet amount. The player also receives their original bet when they win.\n\nFor example: Let's say someone bet 100 on a 5 to 1 payout and they win, you divide 5 by 1 which is 5, multiply this by 100 which equals 500, add the original bet and the person receives 600, but since they lost 100 when they made the bet they are ahead by 500 in total.\n\nAnother example: 100 bet on 5 to 4 odds, 5 divided by 4 is 1.25, multiply this by 100 which is 125, person receives 125 plus their original 100 bet.",
		"Save" => "Click this button to save all settings and player stats.\n\nNote: Settings and player stats are automatically saved when the script is stopped and every 20 rounds of gameplay, but you can click this button to initiate a save just in case.",
		"Defaults" => "Click this button to set all settings to their default setting.",
		"Start Game" => "Click this button to start the game.\n\nNote: If you have made changes to any game settings or payouts then be sure to click the \"Save\" button before starting the game.\n\nAlso Note: People can still join the game after it has been started, but you won't be able to change any game settings or payouts after you click this button.",
		"Start Join" => "Click this button to allow people to join the game. After this button is clicked the \"Start Game\" button will show.\n\nNote: If you have made changes to any game settings or payouts then be sure to click the \"Save\" button before clicking this button.\n\nAlso Note: People can still join the game after it has been started, but you won't be able to change any game settings or payouts after you click this button.",
		"End Game" => "Click this button to end the game after the current shooter either wins or loses.",
		"Players Menu" => "List of all players who have joined the current game. Select a player to see their stats in the other two drop down menus.",
		"Player Session Stats Menu" => "These are session stats for the currently selected player. Session stats are reset every time you restart the script.",
		"Player Stats Menu"=> "These are the saved stats for the currently selected player. These stats are saved to a file on your computer and are updated during every game, even if you close and restart the script.",
		"Bonus" => "This is to hand out bonus currency to every person who joined the current session. Fill out how much currency you want to hand out to everyone then click the button.\n\nNOTE: This does NOT hand out Silver in a Silver game, it only hands out the for fun Gold currency if you're currently running a Gold game.",
		"Currency" => "Select the type of currency which will be used in this game. Gold is just for fun and the currency is all tracked by the script. Silver uses actual in game silver. Be sure you have enough on you to cover all bets!\n\nNOTE: You must click the \"Save\" button for the changes to take effect and changing currency type will restart the script.",
		"Lingo" => "Select the lingo you want to use when announcing actions during the game.\n\nCraps: The standard Craps lingo.\nLich Bones: A more fantasty take on standard Craps lingo.",
		"Betting Length Seconds" => "How many seconds to give players to make bets during the betting phase.",
		"Number Of Rounds" => "How many rounds you want the session to go on for.\n\nNote: You can enter 0 here and the game will last until you click the \"End Game\" button, at which point the game will end as soon as the current shooter wins or losses.",
		"Minimum Bet" => "The minimum bet players are allowed to make.",
		"Maximum Bet" => "The maximum bet players are allowed to make.",
		"Join Bonus" => "How much gold to give to players for joining your game.\n\nNote: This ONLY works during gold games. No bonus is handed out during silver games.",
		"Shooter Bonus" => "How much gold to give to the current shooter during every come out roll.\n\nNote: This ONLY works during gold games. No bonus is handed out during silver games.",
		"Number Of Warnings" => "How many warnings will be given to the current shooter to roll the dice before the dealer takes over as shooter.",
		"Seconds Between Warnings" => "How many seconds inbetween every warning given to shooter to roll the dice.",
	}

	@all_bet_types = [ "Pass", "Don't Pass", "Field", "Horn", "Hard 4", "Hard 10", "Hard 6", "Hard 8", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Craps", "Odds", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]

	@bets_allowed_before_come_out_roll = [ "Pass", "Don't Pass" ]

	@bets_allowed_after_come_out_roll = [ "Field", "Horn", "Hard 4", "Hard 10", "Hard 6", "Hard 8", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Craps", "Odds", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]

	@bets_inactive_on_come_out_rolls = [ "Hard 4", "Hard 6", "Hard 8", "Hard 10", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]

	@one_roll_bets = [ "Field", "Horn", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Craps" ]
	
	@all_payout_names = [ "Pass", "Don't Pass", "Hard 4", "Hard 6", "Hard 8", "Hard 10", "Field 2", "Field 3", "Field 4", "Field 9", "Field 10", "Field 11", "Field 12", "Horn 2", "Horn 3", "Horn 11", "Horn 12", "Craps", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10", "Odds Pass 4", "Odds Pass 5", "Odds Pass 6", "Odds Pass 8", "Odds Pass 9", "Odds Pass 10", "Odds Don't Pass 4", "Odds Don't Pass 5", "Odds Don't Pass 6", "Odds Don't Pass 8", "Odds Don't Pass 9", "Odds Don't Pass 10" ]

	@game_hash = {}
	@game_hash["Current Players"] = []
	@game_hash["Players Eligible For Shooter"] = []
	@game_hash["People Received Stats"] = []
	@game_hash["New Shooter Needed"] = true
	@game_hash["Current Round"] = 0
	@game_hash["Largest Winnings Bet Amount"] = 0

	@all_current_bets = {}
	@all_bet_types.each{ |bet_type| @all_current_bets[bet_type] = {} }
	@all_current_bets["Odds Pass"] = {}
	@all_current_bets["Odds Don't Pass"] = {}
	
	@session_stats = {}
	@dealer_session_stats = {}

	@all_payout_amounts_default = {
		"Pass" => { "First" => 1, "Second" => 1 },
		"Don't Pass" => { "First" => 1, "Second" => 1 },
		"Hard 4" => { "First" => 7, "Second" => 1 },
		"Hard 6" => { "First" => 9, "Second" => 1 },
		"Hard 8" => { "First" => 9, "Second" => 1 },
		"Hard 10" => { "First" => 7, "Second" => 1 },
		"Field 2" => { "First" => 2, "Second" => 1 },
		"Field 3" => { "First" => 1, "Second" => 1 },
		"Field 4" => { "First" => 1, "Second" => 1 },
		"Field 9" => { "First" => 1, "Second" => 1 },
		"Field 10" => { "First" => 1, "Second" => 1 },
		"Field 11" => { "First" => 1, "Second" => 1 },
		"Field 12" => { "First" => 2, "Second" => 1 },
		"Horn 2" => { "First" => 30, "Second" => 1 },
		"Horn 3" => { "First" => 15, "Second" => 1 },
		"Horn 11" => { "First" => 15, "Second" => 1 },
		"Horn 12" => { "First" => 30, "Second" => 1 },
		"Craps" => { "First" => 7, "Second" => 1 },
		"Any 7" => { "First" => 4, "Second" => 1 },
		"Prop 2" => { "First" => 30, "Second" => 1 },
		"Prop 3" => { "First" => 15, "Second" => 1 },
		"Prop 11" => { "First" => 15, "Second" => 1 },
		"Prop 12" => { "First" => 30, "Second" => 1 },
		"Place 4" => { "First" => 9, "Second" => 5 },
		"Place 5" => { "First" => 7, "Second" => 5 },
		"Place 6" => { "First" => 7, "Second" => 6 },
		"Place 8" => { "First" => 7, "Second" => 6 },
		"Place 9" => { "First" => 7, "Second" => 5 },
		"Place 10" => { "First" => 9, "Second" => 5 },
		"Odds Pass 4" => { "First" => 2, "Second" => 1 },
		"Odds Pass 5" => { "First" => 3, "Second" => 2 },
		"Odds Pass 6" => { "First" => 6, "Second" => 5 },
		"Odds Pass 8" => { "First" => 6, "Second" => 5 },
		"Odds Pass 9" => { "First" => 3, "Second" => 2 },
		"Odds Pass 10" => { "First" => 2, "Second" => 1 },
		"Odds Don't Pass 4" => { "First" => 1, "Second" => 2 },
		"Odds Don't Pass 5" => { "First" => 2, "Second" => 3 },
		"Odds Don't Pass 6" => { "First" => 5, "Second" => 6 },
		"Odds Don't Pass 8" => { "First" => 5, "Second" => 6 },
		"Odds Don't Pass 9" => { "First" => 2, "Second" => 3 },
		"Odds Don't Pass 10" => { "First" => 1, "Second" => 2 },
	}
		
	@all_main_settings_default = {
		"Betting Length Seconds" => 30,
		"Number Of Rounds" => 16,
		"Minimum Bet" => 1000,
		"Maximum Bet" => 100000,
		"Join Bonus" => 20000,
		"Shooter Bonus" => 2000,
		"Number Of Warnings" => 1,
		"Seconds Between Warnings" => 10,
	}
	
	def self.load_settings_payouts
		@all_payout_amounts = @all_payout_amounts_default.dup
		@all_payout_names.each{ |bet_type| @all_payout_amounts[bet_type] = @settings_load_data[bet_type] if @settings_load_data[bet_type] }
		
		@all_main_settings = @all_main_settings_default.dup
		@all_main_settings.each{ |name, value|
			if @settings_load_data[name]
				if @all_main_settings_default[name].is_a?(Integer)
					@all_main_settings[name] = @settings_load_data[name].to_i
				else
					@all_main_settings[name] = @settings_load_data[name]
				end
			end
		}
	end
	
	load_settings_payouts
	
	def self.save_settings
		File.open(@lock_file, File::RDWR | File::CREAT){ |lock|
			lock.flock(File::LOCK_EX)
			
			if File.exist?(@settings_save_file)
				save_data = JSON.parse(File.read(@settings_save_file))
			else
				save_data = {}
			end
			
			@all_payout_names.each{ |setting_name|
				save_data[setting_name] = {}
				save_data[setting_name]["First"] = @payout_entries["#{setting_name} First"].text
				save_data[setting_name]["Second"] = @payout_entries["#{setting_name} Second"].text
			}
			
			@main_entries.each{ |setting_name, entry| save_data[setting_name] = entry.text }

			@menu_items.each{ |setting_name,menu| save_data[setting_name] = @all_settings_menus[setting_name].active_text }

			File.open(@settings_save_file, 'w'){ |file| file.write(JSON.pretty_generate(save_data)) }
		}
		
		File.open(@lock_file, File::RDWR | File::CREAT){ |lock|
			lock.flock(File::LOCK_EX)
			
			save_data = @all_player_stats
				
			File.open(@stats_save_file, 'w'){ |file| file.write(JSON.pretty_generate(save_data)) }
			respond ";CrapsDealer: Data saved."
		}
	end
	
	def self.restart_game_window
		Thread.new{
			wait_until{ !running? "CrapsDealer" }
			start_script "CrapsDealer"
		}
		@main_window.close
	end
	
	def self.create_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.set_title("Craps: Dealer Client - #{checkname}")
		@main_window.set_default_size(400, 300)
		
		@main_tab_grid = Gtk::Grid.new
		@main_players_grid = Gtk::Grid.new
		@main_menus_grid = Gtk::Grid.new
		@main_bonus_currency_grid = Gtk::Grid.new
		@main_dice_grid = Gtk::Grid.new
		@main_information_grid = Gtk::Grid.new
		@game_settings_grid = Gtk::Grid.new
		@drop_down_grid = Gtk::Grid.new
		@main_entry_grid = Gtk::Grid.new
		@main_buttons_grid = Gtk::Grid.new
		@payouts_grid = Gtk::Grid.new
		
		@main_notebook = Gtk::Notebook.new
		@main_notebook.append_page(@main_tab_grid, Gtk::Label.new("Main"))
		@main_notebook.append_page(@game_settings_grid, Gtk::Label.new("Game Settings"))
		@main_notebook.append_page(@payouts_grid, Gtk::Label.new("Payouts"))
		
		create_payouts_page

		button_names = [ "Save", "Start Join", "Start Game", "End Game" ]
		@all_buttons = {}
		column = -1
		button_names.each{ |button_name|
			@all_buttons[button_name] = Gtk::Button.new(label: button_name)
			@all_buttons[button_name].set_tooltip_text(@tooltips[button_name])
			@main_buttons_grid.attach(@all_buttons[button_name], column += 1, 0, 1, 1)
		}
		@all_buttons["Save"].signal_connect("clicked"){
			save_settings
			if @original_currency_type != @currency_type
				restart_game_window
			else
				load_the_data
				load_settings_payouts
			end
		}
		@all_buttons["Start Join"].signal_connect("clicked"){ @all_main_settings["Start The Join"] = true }
		@all_buttons["Start Game"].signal_connect("clicked"){ @all_main_settings["Start The Game"] = true }
		@all_buttons["End Game"].signal_connect("clicked"){ set_game_over }
		
		@all_settings_menus = {}
		menus = [ "Currency", "Lingo" ]
		@menu_items = {
			"Currency" => [ "Gold", "Silver" ],
			"Lingo" => [ "Lich Bones", "Craps" ],
		}
		
		menus.each{ |menu_name| create_menu(menu_name) }
		
		@dealer_session_stats["#{@currency_type} Collected"] = 0
		@dealer_session_stats["#{@currency_type} Paid Out"] = 0
		@dealer_session_stats["Net #{@currency_type} Collected"] = 0
		
		@main_information_labels = {}
		info_labels = [ "Timer", "Current Shooter", "Current Point", "#{@currency_type} Paid Out", "#{@currency_type} Collected", "Net #{@currency_type} Collected" ]
		row = -1
		info_labels.each{ |label|
			@main_information_labels[label] = Gtk::Label.new("#{label}: ")
			@main_information_grid.attach(@main_information_labels[label], 0, row += 1, 1, 1)
			@main_information_labels[label].set_alignment(0.0, 0.5)
		}
		
		row = -1
		@main_tab_grid.attach(@main_players_grid, 0, row += 1, 1, 1)
		@main_tab_grid.attach(@main_menus_grid, 0, row += 1, 1, 1)
		@main_tab_grid.attach(@main_dice_grid, 0, row += 1, 1, 1)
		@main_tab_grid.attach(@main_information_grid, 0, row += 1, 1, 1)
		@main_tab_grid.attach(@main_bonus_currency_grid, 0, row += 1, 1, 1)
		@main_tab_grid.attach(@main_buttons_grid, 0, row += 1, 1, 1)
		
		@game_settings_grid.attach(@drop_down_grid, 0, 0, 1, 1)
		@game_settings_grid.attach(@main_entry_grid, 0, 1, 1, 1)
		@drop_down_column = -1
		
		if @currency_type != "Silver"
			@bonus_currency_entry = Gtk::Entry.new
			@bonus_currency_button = Gtk::Button.new(label: "Bonus #{@currency_type}")
			@bonus_currency_entry.set_tooltip_text(@tooltips["Bonus"])
			@bonus_currency_button.set_tooltip_text(@tooltips["Bonus"])
			
			@main_bonus_currency_grid.attach(@bonus_currency_entry, 0, 0, 1, 1)
			@main_bonus_currency_grid.attach(@bonus_currency_button, 1, 0, 1, 1)
			
			@bonus_currency_entry.text = "1"
			
			@bonus_currency_entry.signal_connect("changed"){ |entry_text|
				text = entry_text.text
				text.gsub!(/\D/, "")
				text = "1" if text.start_with?("0")
				entry_text.text = text[0, 10]
			}
			
			@bonus_currency_button.signal_connect("clicked"){
				amount = @bonus_currency_entry.text.to_i
				amount_commas = number = add_commas(amount)
				@game_hash["Current Players"].each{ |name|
					if checkpcs.include?(name)
						update_stat(name, "Current #{@currency_type}", amount)
						update_stat(name, "Total #{@currency_type} Received", amount)
						current_currency = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"])
						whisper(name, "You received a bonus of #{amount_commas} #{@currency_type}! Your current #{@currency_type} is #{current_currency}.")
						sleep 0.1
					end
				}
				put "recite Everyone currently joined to my game of #{@game_lingo["Game Name"]} has received #{amount_commas} bonus #{@currency_type}!"
				update_stats_menus
			}
		end

		@main_dice_grid.attach(Gtk::Label.new, 0, 0, 1, 1)
		@main_dice_grid.attach(Gtk::Label.new("                                                  Current Dice:"), 0, 1, 1, 1)
		@die_1_label = Gtk::Label.new.set_markup("<span size='72000'>&#x25FB;</span>")
		@die_2_label = Gtk::Label.new.set_markup("<span size='72000'>&#x25FB;</span>")
		@main_dice_grid.attach(@die_1_label, 0, 2, 1, 1)
		@main_dice_grid.attach(@die_2_label, 1, 2, 1, 1)
		
		@all_stat_menus = {}
		menu_name = "Players Menu"
		@all_stat_menus[menu_name] = Gtk::ComboBoxText.new
		@all_stat_menus[menu_name].set_tooltip_text(@tooltips[menu_name])
		@main_menus_grid.attach(@all_stat_menus[menu_name], 0, 0, 1, 1)
		@all_stat_menus[menu_name].signal_connect("changed"){ update_stats_menus }
		
		menu_name = "Player Session Stats Menu"
		@all_stat_menus[menu_name] = Gtk::ComboBoxText.new
		@all_stat_menus[menu_name].set_tooltip_text(@tooltips[menu_name])
		@main_menus_grid.attach(@all_stat_menus[menu_name], 1, 0, 1, 1)
		@all_stat_menus[menu_name].signal_connect("changed"){  }
		
		menu_name = "Player Stats Menu"
		@all_stat_menus[menu_name] = Gtk::ComboBoxText.new
		@all_stat_menus[menu_name].set_tooltip_text(@tooltips[menu_name])
		@main_menus_grid.attach(@all_stat_menus[menu_name], 2, 0, 1, 1)
		@all_stat_menus[menu_name].signal_connect("changed"){  }

		create_main_entries
		populate_stats_grid
		
		@main_window.signal_connect("destroy") do
			save_settings
			@main_window.close
			@main_window = nil
			Gtk.main_quit
			kill_script "CrapsDealer" if running? "CrapsDealer"
		end
		
		@main_window.add(@main_notebook)
		@main_window.show_all
		@all_buttons["End Game"].hide
		@all_buttons["Start Game"].hide
	end
	
	def self.set_game_over
		if @game_hash["Final Game"].nil?
			@game_hash["Final Game"] = true
			@all_buttons["End Game"].hide
			put "recite This is the final game! This game of #{@game_lingo["Game Name"]} will be over once #{@game_hash["Current Shooter"]} wins or loses."
		end
	end
	
	def self.update_players_label
		@current_players_labels.set_text("Current players: #{@game_hash["Current Players"].join(", ")}")
	end
	
	def self.update_stats_menus
		name = @all_stat_menus["Players Menu"].active_text
		@all_stat_menus["Player Session Stats Menu"].remove_all
		@session_stats[name].each{ |stat_name,value|
			number = add_commas(value)
			@all_stat_menus["Player Session Stats Menu"].append_text("#{stat_name}: #{number}")
		}
		@all_stat_menus["Player Session Stats Menu"].active = 0
		@all_stat_menus["Player Stats Menu"].remove_all
		@all_player_stats[@currency_type][name].each{ |stat_name,value|
			number = add_commas(value)
			@all_stat_menus["Player Stats Menu"].append_text("#{stat_name}: #{number}")
		}
		@all_stat_menus["Player Stats Menu"].active = 0
	end
	
	def self.populate_stats_grid
		@current_players_labels = Gtk::Label.new("Current players: #{@game_hash["Current Players"].join(", ")}")
		@current_players_labels.set_line_wrap(true)
		@current_players_labels.set_line_wrap_mode(:word)
		@main_players_grid.attach(@current_players_labels, 0, 0, 1, 1)
	end
	
	def self.create_main_entries
		@main_entries = {}
		@entries_main_labels = {}
		
		row = 0
		column = -1
		@all_main_settings.each{ |name, value|
			if column >= 5
				row += 1
				column = -1
			end
			@main_entries[name] = Gtk::Entry.new
			@main_entries[name].text = @all_main_settings[name].to_s
			@main_entries[name].set_tooltip_text(@tooltips[name])
			@entries_main_labels[name] = Gtk::Label.new("     #{name}     ")
			@entries_main_labels[name].set_tooltip_text(@tooltips[name])
			@main_entry_grid.attach(@entries_main_labels[name], column += 1, row, 1, 1)
			@main_entry_grid.attach(@main_entries[name], column += 1, row, 1, 1)
		}
		
		main_default_button = Gtk::Button.new(label: "Defaults")
		main_default_button.set_tooltip_text(@tooltips["Defaults"])
		@main_entry_grid.attach(main_default_button, 0, row += 1, 1, 1)
		main_default_button.signal_connect("clicked"){
			if @all_main_settings["Start The Join"].nil?
				@all_main_settings = @all_main_settings_default.dup
				@main_entries.each{ |name,entry| entry.text = @all_main_settings[name].to_s }
			end
		}
		
		limits = {
			"Number Of Warnings" => { "Minimum" => 1, "Character Limit" => 2 },
			"Seconds Between Warnings" => { "Minimum" => 1, "Character Limit" => 2 },
			"Betting Length Seconds" => { "Minimum" => 1, "Character Limit" => 2 },
			"Number Of Rounds" => { "Minimum" => 0, "Character Limit" => 3 },
			"Maximum Bet" => { "Minimum" => 1, "Character Limit" => 8 },
			"Join Bonus" => { "Minimum" => 0, "Character Limit" => 8 },
			"Shooter Bonus" => { "Minimum" => 0, "Character Limit" => 8 },
			"Minimum Bet" => { "Minimum" => 1, "Character Limit" => 8 },
		}
		
		@main_entries.each{ |name,entry|
			entry.set_width_chars(limits[name]["Character Limit"])
			entry.signal_connect("changed"){ |entry_text|
				text = entry_text.text
				text.gsub!(/\D/, "")
				text = "1" if limits[name]["Minimum"] == 1 && text.start_with?("0")
				entry_text.text = text[0, limits[name]["Character Limit"]]
			}
		}
	end
	
	def self.create_payouts_page
		@payout_entries = {}
		@payout_labels = {}
		row = 0
		column = -1
		@all_payout_names.each{ |name|
			if column >= 8
				row += 1
				column = -1
			end
			@payout_entries["#{name} First"] = Gtk::Entry.new
			@payout_entries["#{name} First"].text = @all_payout_amounts[name]["First"].to_s
			@payout_labels[name] = Gtk::Label.new("     #{name}     ")
			@payout_labels[name].set_tooltip_text(@tooltips["Payout Info"])
			@payouts_grid.attach(@payout_labels[name], column += 1, row, 1, 1)
			@payouts_grid.attach(@payout_entries["#{name} First"], column += 1, row, 1, 1)
			label = Gtk::Label.new(" to ")
			@payouts_grid.attach(label, column += 1, row, 1, 1)
			@payout_entries["#{name} Second"] = Gtk::Entry.new
			@payout_entries["#{name} Second"].text = @all_payout_amounts[name]["Second"].to_s
			@payouts_grid.attach(@payout_entries["#{name} Second"], column += 1, row, 1, 1)
		}
		
			payout_default_button = Gtk::Button.new(label: "Defaults")
			payout_default_button.set_tooltip_text(@tooltips["Defaults"])
			@payouts_grid.attach(payout_default_button, 0, row += 1, 1, 1)
			payout_default_button.signal_connect("clicked"){
				if @all_main_settings["Start The Join"].nil?
					@all_payout_amounts = @all_payout_amounts_default.dup
					@payout_entries.each{ |name,entry|
						if name =~ / First/
							new_name = name.split(" First")
							place = "First"
						else
							new_name = name.split(" Second")
							place = "Second"
						end
						entry.text = @all_payout_amounts[new_name[0]][place].to_s
					}
				end
			}
		
		@payout_entries.each{ |name,entry|
			entry.set_width_chars(3)
			entry.signal_connect("changed"){ |entry_text|
				text = entry_text.text
				text.gsub!(/\D/, "")
				text = "1" if text.start_with?("0")
				entry_text.text = text[0, 3]
			}
		}
		
		@game_hash["Payout Text"] = ""
		number = 1
		@payout_entries.each{ |name, entry|
			if number == 1
				@game_hash["Payout Text"] += name.gsub(" First", "")
				@game_hash["Payout Text"] += ": #{entry.text}"
				number += 1
			elsif number == 2		
				@game_hash["Payout Text"] += " to #{entry.text}, "
				number = 1
			end
		}
		@game_hash["Payout Text"].chop!.chop!
	end
	
	def self.create_menu(menu_name)
		@all_settings_menus[menu_name] = Gtk::ComboBoxText.new
		menu = @all_settings_menus[menu_name]
		@menu_items[menu_name].each{ |item| menu.append_text(item) }
		@drop_down_grid.attach(menu, @drop_down_column += 1, 0, 1, 1)
		menu.set_tooltip_text(@tooltips[menu_name])
		
		if menu_name == "Currency"
			menu.signal_connect("changed"){
				@currency_type = menu.active_text }
		elsif menu_name == "Lingo"
			menu.signal_connect("changed"){
				@lingo_option = menu.active_text 
				change_lingo_terms
			}
		end
		if @settings_load_data[menu_name]
			menu.model.each{ |model, path, iter|
				if @settings_load_data[menu_name] == menu.model.get_value(iter, 0)
					menu.set_active_iter(iter)
					break
				end
			}
		else
			menu.active = 0
		end
	end

	def self.add_new_player_stats(name)
		if @session_stats[name].nil?
			@session_stats[name] = {}
			@session_stats[name]["#{@currency_type} Won"] = 0
			@session_stats[name]["#{@currency_type} Spent"] = 0
			@session_stats[name]["Net #{@currency_type} Won"] = 0
			@session_stats[name]["Number Of Bets Made"] = 0
		end
		
		@all_player_stats[@currency_type][name] = {} unless @all_player_stats[@currency_type][name]
		all_stats = [ "Current #{@currency_type}", "#{@currency_type} Won", "#{@currency_type} Spent", "Total #{@currency_type} Received", "Times Chosen As Shooter", "Times Maintained Shooter", "Rounds Played As Shooter", "Times Played As Shooter", "Times Dealer Took Over As Shooter", "Wins On 1st Roll", "Wins After 1st Roll", "Total Wins", "Losses On 1st Roll", "Losses After 1st Roll", "Total Losses", "Total Win Rate", "1st Roll Win Rate", "Current Win Streak", "Longest Win Streak", "Largest Bet Win Amount", "Largest Bet Win Bet Type", "Number Of Bets Made", "Largest #{@currency_type} Bet" ]
		all_stats.each{ |stat_name| @all_player_stats[@currency_type][name][stat_name] = 0 unless @all_player_stats[@currency_type][name][stat_name] }
	end

	def self.add_commas(number)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
	end
	
	def self.update_win_rate(name, wins, losses, total, rate_name)
		if (wins == 0) && (losses == 0)
			@all_player_stats[@currency_type][name][rate_name] = "0%"
		else
			rate = ((wins.to_f / total) * 100).round(2)
			rate = "100" if rate == 100.0
			rate = "0" if rate == 0.0
			@all_player_stats[@currency_type][name][rate_name] = "#{rate}%"
		end
	end

	def self.update_stat(name, stat_name, number)
		@all_player_stats[@currency_type][name][stat_name] = @all_player_stats[@currency_type][name][stat_name].nil? ? number : @all_player_stats[@currency_type][name][stat_name] + number

		wins = @all_player_stats[@currency_type][name]["Total Wins"]
		losses = @all_player_stats[@currency_type][name]["Total Losses"]
		total = wins + losses
		rate_name = "Total Win Rate"
		update_win_rate(name, wins, losses, total, rate_name)
		
		wins = @all_player_stats[@currency_type][name]["Wins On 1st Roll"]
		losses = @all_player_stats[@currency_type][name]["Losses On 1st Roll"]
		total = wins + losses
		rate_name = "1st Roll Win Rate"
		update_win_rate(name, wins, losses, total, rate_name)
	end
	
	def self.update_session_stat(name, stat_name, number)
		@session_stats[name][stat_name] = @session_stats[name][stat_name].nil? ? number : @session_stats[name][stat_name] + number
		@session_stats[name]["Net #{@currency_type} Won"] = (@session_stats[name]["#{@currency_type} Won"] - @session_stats[name]["#{@currency_type} Spent"])
	end

	def self.start_betting_phase
		if @game_hash["This Is Come Out Roll"]
			put "'Betting is now open! Next roll is the #{@game_lingo["Come Out Roll"]}! #{@game_hash["Current Shooter"]} is the current #{@game_lingo["Shooter"]}. You may now also JOIN the game!"
		else
			put "'Betting is now open! #{@game_hash["Current Shooter"]} is looking for the #{@game_lingo["The Point Name"]} of #{@game_hash["Current Point"]}! You may now also JOIN the game!"
		end

		update_stats_menus
		@seconds_to_wait = @all_main_settings["Betting Length Seconds"].dup
		Thread.new{
			@all_main_settings["Betting Length Seconds"].times{
				@main_information_labels["Timer"].set_text("Timer (Seconds Remaining To Bet): #{@seconds_to_wait}")
				sleep 1
				@seconds_to_wait -= 1
			}
			@main_information_labels["Timer"].set_text("Timer:")
			if @game_hash["This Is Come Out Roll"]
				text = @game_lingo["Come Out Roll"]
			else
				text = "next roll"
			end
			put "'Betting is now closed! It's time for the #{text}!"
		}
		watching_lines
		wait_until{ @seconds_to_wait == 0 }

		sleep 1
		@all_buttons["End Game"].show if !@all_buttons["End Game"].visible?
		dealer_took_over if (@game_hash["Current Shooter"] != checkname) && (!checkpcs.include?(@game_hash["Current Shooter"]))
		if @game_hash["Current Shooter"] != checkname
			@game_hash["Roll Status"] = "Waiting"
			wait_for_shooter
			dealer_took_over if @game_hash["Roll Status"] == "No Response"
		end
		roll_results
	end

	def self.dealer_took_over
		whisper(@game_hash["Current Shooter"], "Sorry, I have to take over as shooter.")
		update_stat(@game_hash["Current Shooter"], "Times Dealer Took Over As Shooter", 1)
		@game_hash["Current Shooter"] = checkname
		@main_information_labels["Current Shooter"].set_text("Current Shooter: #{@game_hash["Current Shooter"]}")
	end

	def self.change_lines(text)
		text.gsub!("DIETOTAL", @die_total.to_s) if @die_total
		text.gsub!("SHOOTER", @game_hash["Current Shooter"].to_s) if @game_hash["Current Shooter"]
		text.gsub!("POINT", @game_hash["Current Point"].to_s) if @game_hash["Current Point"]
		text.gsub!("WINNINGS", @announce_winnings_currency.to_s) if @announce_winnings_currency
		text.gsub!("CURRENTCURRENCY", @announce_current_currency.to_s) if @announce_current_currency
		text.gsub!("AMOUNTBET", @announce_amount_bet.to_s) if @announce_amount_bet
	end

	def self.whisper(name, original)
		text = original.dup
		change_lines(text)
		put "whisper ooc #{name} #{text}"
	end

	def self.announce_roll_result(original)
		if original
			text = original.dup
			change_lines(text)
			put "'#{text}"
		end
	end

	def self.bet_won_payouts(bet_type)
		announce_roll_result(@game_lingo["#{bet_type} Rolled"])
		@all_current_bets[bet_type].each{ |name,bet_amount|
			if bet_type == "Field" || bet_type == "Horn" || bet_type == "Odds Pass" || bet_type == "Odds Don't Pass"
				bet_string = "#{bet_type} #{@die_total.to_s}"
			else
				bet_string = bet_type
			end
			
			if bet_type == "Horn"
				bet_total = (bet_amount / 4).truncate
			else
				bet_total = bet_amount.dup
			end
			
			win_amount = ((@all_payout_amounts[bet_string]["First"].to_f / @all_payout_amounts[bet_string]["Second"].to_f).round(2) * bet_total).truncate + bet_total
			update_session_stat(name, "#{@currency_type} Won", win_amount)
			@dealer_session_stats["#{@currency_type} Paid Out"] += win_amount
			
			number = add_commas(@dealer_session_stats["#{@currency_type} Paid Out"])
			@main_information_labels["#{@currency_type} Paid Out"].set_text("#{@currency_type} Paid Out: #{number}")
			
			number = add_commas(@dealer_session_stats["#{@currency_type} Collected"] - @dealer_session_stats["#{@currency_type} Paid Out"])
			@main_information_labels["Net #{@currency_type} Collected"].set_text("Net #{@currency_type} Collected: #{number}")
			
			if win_amount > @game_hash["Largest Winnings Bet Amount"]
				@game_hash["Largest Winnings Bet Amount"] = win_amount
				@game_hash["Largest Winnings Bet Type"] = bet_type
				@game_hash["Largest Winnings Player"] = name
			end
			@all_player_stats[@currency_type][name]["Largest Bet Win Amount"] = 0 if @all_player_stats[@currency_type][name]["Largest Bet Win Amount"].nil? 
			if win_amount > @all_player_stats[@currency_type][name]["Largest Bet Win Amount"]
				@all_player_stats[@currency_type][name]["Largest Bet Win Amount"] = win_amount
				@all_player_stats[@currency_type][name]["Largest Bet Win Bet Type"] = bet_type
			end
			
			@all_player_stats[@currency_type][name]["Largest #{@currency_type} Bet"] = bet_amount if bet_amount > @all_player_stats[@currency_type][name]["Largest #{@currency_type} Bet"]
			
			if @currency_type == "Silver"
				put "give #{name} #{win_amount}"
			else
				update_stat(name, "Current #{@currency_type}", win_amount)
				@announce_current_currency = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"])
			end
			update_stat(name, "#{@currency_type} Won", win_amount)
			update_stat(name, "#{@currency_type} Spent", bet_amount)
			update_stat(name, "Total #{@currency_type} Received", win_amount)
			update_stat(name, "Number Of Bets Made", 1)
			@announce_winnings_currency = add_commas(win_amount)
			if bet_type =~ /Place \d+/
				temp_bet_name = "Place"
			elsif bet_type =~ /Prop \d+/
				temp_bet_name = "Prop"
			else
				temp_bet_name = bet_type.dup
			end
			if bet_type =~ /(Hero|Lich) Cheer/i
				bet_name = $1.upcase
			elsif bet_type =~ /Odds (Pass|Don't Pass)/i
				bet_name = "Odds"
			else
				bet_name = bet_type.dup
			end
			whisper(name, "#{@game_lingo[bet_name]} WON. #{@game_lingo["#{temp_bet_name} Won"]}")
			sleep 0.1
		}
		@all_current_bets[bet_type] = {}
	end

	def self.bet_lost(bet_type)
		@all_current_bets[bet_type].each{ |name,bet_amount|
			@all_player_stats[@currency_type][name]["Largest #{@currency_type} Bet"] = bet_amount if bet_amount > @all_player_stats[@currency_type][name]["Largest #{@currency_type} Bet"]
			update_stat(name, "#{@currency_type} Spent", bet_amount)
			update_stat(name, "Number Of Bets Made", 1)
			@announce_current_currency = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"]) if @currency_type != "Silver"
			@announce_amount_bet = add_commas(bet_amount)
			if bet_type =~ /Place \d+/
				temp_bet_name = "Place"
			elsif bet_type =~ /Prop \d+/
				temp_bet_name = "Prop"
			else
				temp_bet_name = bet_type.dup
			end
			if bet_type =~ /(Hero|Lich) Cheer/i
				bet_name = $1.upcase
			elsif bet_type =~ /Odds (Pass|Don't Pass)/i
				bet_name = "Odds"
			else
				bet_name = bet_type.dup
			end
			whisper(name, "#{@game_lingo[bet_name]} LOST. #{@game_lingo["#{temp_bet_name} Lost"]}")
			sleep 0.1
		}
		@all_current_bets[bet_type] = {}
	end

	def self.pass_won_routine
		bet_won_payouts("Pass")
		bet_won_payouts("Odds Pass")
		bet_lost("Don't Pass")
		bet_lost("Odds Don't Pass")
	end

	def self.won_dont_pass_routine
		bet_won_payouts("Don't Pass")
		bet_won_payouts("Odds Don't Pass")
		bet_lost("Pass")
		bet_lost("Odds Pass")
	end

	def self.end_of_game
		put "'This game of #{@game_lingo["Game Name"]} is now over. If anyone had any outstanding bets your #{@currency_type} will be returned to you."
		
		new_hash = {}
		@all_player_stats[@currency_type].each{ |name,stat_name| new_hash[name] = @all_player_stats[@currency_type][name]["Longest Win Streak"] }
		sorted = new_hash.sort_by { |key, value| value || 0 }.to_h
		new_array = sorted.to_a.last
		longest_winner_name, value = new_array
		longest_winner_value = add_commas(value)
		
		new_hash = {}
		@session_stats.each{ |name,stat_name| new_hash[name] = @session_stats[name]["#{@currency_type} Won"] }
		sorted = new_hash.sort_by { |key, value| value || 0 }.to_h
		new_array = sorted.to_a.last
		most_currency_name, value = new_array
		most_currency_value = add_commas(value)
		
		text = nil
		if @game_hash["Largest Winnings Player"]
			largest_winngs_number = add_commas(@game_hash["Largest Winnings Bet Amount"])
			text = "Most #{@currency_type} won from a single bet this session was #{@game_hash["Largest Winnings Player"]} with #{largest_winngs_number} #{@currency_type} from a #{@game_lingo[@game_hash["Largest Winnings Bet Type"]]} bet."
		end
		
		put "recite Longest win streak ever is #{longest_winner_name} with a win streak of #{longest_winner_value}.;Most #{@currency_type} won this session is #{most_currency_name} with #{most_currency_value} #{@currency_type} in winnings.;#{text}"
		
		@all_current_bets.each{ |bet_type,values|
			values.each{ |name,bet_amount|
				if @currency_type != "Silver"
					update_stat(name, "Current #{@currency_type}", bet_amount)
					current_currency = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"])
				end
				amount_bet = add_commas(bet_amount)
				if @currency_type == "Silver"
					text = ""
				else
					text = " Your current #{@currency_type} is #{current_currency}."
				end
				whisper(name, "The game is over and you have an outstanding #{bet_type} bet. Your bet of #{amount_bet} #{@currency_type} has been returned.#{text}")
				sleep 0.1
			}
		}
		
		if @auto_mode_enabled
			kill_script "CrapsDealer" if running? "CrapsDealer"
		end
	end

	def self.roll_results
		win_lose_status = nil
		@game_hash["Current Round"] += 1
		save_settings if @game_hash["Current Round"] % 20 == 0
		@die1 = rand(1..6)
		@die2 = rand(1..6)
		
		@die_1_label.set_markup("<span size='72000'>&#x268#{@die1 - 1};</span>")
		@die_2_label.set_markup("<span size='72000'>&#x268#{@die2 - 1};</span>")
		
		@die_total = @die1 + @die2
		if @game_hash["Current Shooter"] == checkname
			put "act picks up the bones from the table and clenches them in their fist before tossing them on the table. When the bones stop they land on #{@die1} and #{@die2}."
		else
			put "act watches as #{@game_hash["Current Shooter"]} picks up the bones from the table and clenches them in their fist before tossing them on the table. When the bones stop they land on #{@die1} and #{@die2}."
		end
		update_stat(@game_hash["Current Shooter"], "Rounds Played As Shooter", 1)
		sleep 0.5
		
		announce_roll_result(@game_lingo["Generic Roll Result"])
		if @game_hash["This Is Come Out Roll"]
			@game_hash["This Is Come Out Roll"] = nil
			@main_information_labels["Current Point"].set_text("Current Point: #{@game_hash["Current Point"]}")
			if @die_total == 7 || @die_total == 11
				win_lose_status = "win"
				update_stat(@game_hash["Current Shooter"], "Wins On 1st Roll", 1)
				announce_roll_result(@game_lingo["Come Out Roll Win"])
				pass_won_routine
			elsif @die_total == 2 || @die_total == 3 || @die_total == 12
				win_lose_status = "lose"
				update_stat(@game_hash["Current Shooter"], "Losses On 1st Roll", 1)
				announce_roll_result(@game_lingo["Come Out Roll Loss"])
				won_dont_pass_routine
			else
				@game_hash["Current Point"] = @die_total
				@main_information_labels["Current Point"].set_text("Current Point: #{@game_hash["Current Point"]}")
				win_lose_status = "point"
			end
		else
			bet_type = "Hard 4"
			if (@die1 == 2) && (@die2 == 2)
				bet_won_payouts(bet_type)
			elsif @die_total == 4
				bet_lost(bet_type)
			end

			bet_type = "Hard 6"
			if (@die1 == 3) && (@die2 == 3)
				bet_won_payouts(bet_type)
			elsif @die_total == 6
				bet_lost(bet_type)
			end
			
			bet_type = "Hard 8"
			if (@die1 == 4) && (@die2 == 4)
				bet_won_payouts(bet_type)
			elsif @die_total == 8
				bet_lost(bet_type)
			end
			
			bet_type = "Hard 10"
			if (@die1 == 5) && (@die2 == 5)
				bet_won_payouts(bet_type)
			elsif @die_total == 10
				bet_lost(bet_type)
			end
			
			bet_type = "Field"
			if (@die_total == 2) || (@die_total == 3) || (@die_total == 4) || (@die_total == 9) || (@die_total == 10) || (@die_total == 11) || (@die_total == 12)
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end

			bet_type = "Horn"
			if (@die_total == 2) || (@die_total == 3) || (@die_total == 11) || (@die_total == 12)
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end
			
			bet_type = "Craps"
			if (@die_total == 2) || (@die_total == 3) || (@die_total == 12)
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end
			
			bet_type = "Any 7"
			if @die_total == 7
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end

			bet_type = "Prop 2"
			if @die_total == 2
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end
			
			bet_type = "Prop 3"
			if @die_total == 3
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end

			bet_type = "Prop 11"
			if @die_total == 11
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end
			
			bet_type = "Prop 12"
			if @die_total == 12
				bet_won_payouts(bet_type)
			else
				bet_lost(bet_type)
			end

			place_numbers = [ 4, 5, 6, 8, 9, 10 ]
			place_numbers.each{ |number| bet_won_payouts("Place #{number.to_s}") if @die_total == number }

			if @die_total == 7
				@game_hash["New Shooter Needed"] = true
				win_lose_status = "lose"
				announce_roll_result(@game_lingo["Sevened Out"])
				update_stat(@game_hash["Current Shooter"], "Losses After 1st Roll", 1)

				all_losing_bets = [ "Hard 4", "Hard 6", "Hard 8", "Hard 10", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]
				all_losing_bets.each{ |bet_type| bet_lost(bet_type) }
				won_dont_pass_routine
			elsif @die_total == @game_hash["Current Point"]
				win_lose_status = "win"
				update_stat(@game_hash["Current Shooter"], "Wins After 1st Roll", 1)
				announce_roll_result(@game_lingo["Hit The Point"])
				pass_won_routine
			else
				win_lose_status = "continue"
			end
		end

		@game_hash["New Shooter Needed"] = true if (@game_hash["Current Shooter"] == checkname) && (win_lose_status == "win" || win_lose_status == "lose")

		if win_lose_status == "win"
			update_stat(@game_hash["Current Shooter"], "Total Wins", 1)
			update_stat(@game_hash["Current Shooter"], "Current Win Streak", 1)
		elsif win_lose_status == "lose"
			@main_information_labels["Current Shooter"].set_text("Current Shooter: ")
			current_streak = @all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Current Win Streak"]
			longest_streak = @all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Longest Win Streak"]
			if longest_streak.nil?
				@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Longest Win Streak"] = current_streak ? current_streak.dup : 0
			else
				@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Longest Win Streak"] = current_streak.dup if current_streak > longest_streak
			end
			@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Current Win Streak"] = 0
			update_stat(@game_hash["Current Shooter"], "Total Losses", 1)
		end

		if (@game_hash["Current Round"] >= @all_main_settings["Number Of Rounds"]) && (@all_main_settings["Number Of Rounds"] != 0)
			end_of_game
		else
			sleep 2
			if (win_lose_status == "win") || (win_lose_status == "lose")
				update_stat(@game_hash["Current Shooter"], "Times Played As Shooter", 1)
				@die_1_label.set_markup("<span size='72000'>&#x25FB;</span>")
				@die_2_label.set_markup("<span size='72000'>&#x25FB;</span>")
				@game_hash["Current Point"] = nil
				@main_information_labels["Current Point"].set_text("Current Point: #{@game_hash["Current Point"]}")
				if @game_hash["Final Game"]
					end_of_game
				else
					come_out_roll
				end
			else
				if win_lose_status == "point"
					announce_roll_result(@game_lingo["Point Set"])
				elsif win_lose_status == "continue"
					announce_roll_result(@game_lingo["Point Not Hit"])
				end
				start_betting_phase
			end
		end
	end

	def self.wait_for_shooter
		@number_warnings = @all_main_settings["Number Of Warnings"].dup
		loop{
			wait = @all_main_settings["Seconds Between Warnings"]
			shooter = @game_hash["Current Shooter"]
			Thread.new{
				seconds = @all_main_settings["Seconds Between Warnings"].dup
				@all_main_settings["Seconds Between Warnings"].times{
					break if @game_hash["Roll Status"] == "Finished"
					@main_information_labels["Timer"].set_text("Timer (Seconds Remaining For Shooter): #{seconds} (Warnings remaining: #{@number_warnings - 1})")
					sleep 1
					seconds -= 1
				}
				@main_information_labels["Timer"].set_text("Timer:")
			}
			result = dothistimeout whisper(shooter, "You're the #{@game_lingo["Shooter"]}! Type CLENCH FIST to roll. If you don't want to be the #{@game_lingo["Shooter"]} then do nothing and the dealer will take over."), wait, /^#{shooter} clenches .* fist\.$|^#{shooter}\'s entire body tenses as .* clenches .* fist.|^#{shooter} tightens .* grip|^#{shooter}\'s entire body tenses as .* tightens .* grip/i
			if result =~ /^#{shooter} clenches .* fist\.$|^#{shooter}\'s entire body tenses as .* clenches .* fist.|^#{shooter} tightens .* grip|^#{shooter}\'s entire body tenses as .* tightens .* grip/i
				@game_hash["Roll Status"] = "Finished"
			end
			break if @game_hash["Roll Status"] == "Finished"
			@number_warnings -= 1
			break if @number_warnings == 0
		}
		@game_hash["Roll Status"] = "No Response" if @game_hash["Roll Status"] == "Waiting"
	end

	def self.come_out_roll
		@game_hash["Current Point"] = nil
		@main_information_labels["Current Point"].set_text("Current Point: #{@game_hash["Current Point"]}")
		if @game_hash["New Shooter Needed"]
			@game_hash["New Shooter Needed"] = nil
			@game_hash["Players Eligible For Shooter"] = @game_hash["Current Players"].dup if @game_hash["Players Eligible For Shooter"].empty?
			@game_hash["Players Eligible For Shooter"].delete_if{ |name| !checkpcs.include?(name) }
			if @game_hash["Players Eligible For Shooter"].empty?
				@game_hash["Current Shooter"] = checkname
			else
				@game_hash["Current Shooter"] = @game_hash["Players Eligible For Shooter"].sample
				@game_hash["Players Eligible For Shooter"].delete(@game_hash["Current Shooter"])
			end
			@main_information_labels["Current Shooter"].set_text("Current Shooter: #{@game_hash["Current Shooter"]}")
			update_stat(@game_hash["Current Shooter"], "Times Chosen As Shooter", 1)
			whisper_text = "You have been chosen as the #{@game_lingo["Shooter"]}!"
			text = "We are starting a new round of #{@game_lingo["Game Name"]}!;#{@game_hash["Current Shooter"]} has been chosen as the #{@game_lingo["Shooter"]}"
		else
			whisper_text = "You have maintained the title of #{@game_lingo["Shooter"]}!"
			update_stat(@game_hash["Current Shooter"], "Times Maintained Shooter", 1)
			text = "We are starting a new round of #{@game_lingo["Game Name"]}!;#{@game_hash["Current Shooter"]} maintains the title of #{@game_lingo["Shooter"]}"
		end
		
		if @currency_type != "Silver"
			update_stat(@game_hash["Current Shooter"], "Current #{@currency_type}", @all_main_settings["Shooter Bonus"])
			update_stat(@game_hash["Current Shooter"], "Total #{@currency_type} Received", @all_main_settings["Shooter Bonus"])

			current_currency = add_commas(@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Current #{@currency_type}"])
			bonus = add_commas(@all_main_settings["Shooter Bonus"])

			whisper_text += " You have received #{bonus} bonus #{@currency_type}. Your current #{@currency_type} is #{current_currency}."
		end
		whisper(@game_hash["Current Shooter"], whisper_text) if @game_hash["Current Shooter"] != checkname

		if (@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Total Wins"].nil?) && (@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Total Losses"].nil?)
			text2 = "and this is their first time as #{@game_lingo["Shooter"]}"
		else
			text2 = "and currently has a win rate of #{@all_player_stats[@currency_type][@game_hash["Current Shooter"]]["Total Win Rate"]}"
		end
		put "recite #{text} #{text2}."
		@game_hash["This Is Come Out Roll"] = true
		start_betting_phase
	end

	def self.change_lingo_terms
		@game_lingo = {}
		if @currency_type == "Silver"
			current_text = ""
		else
			current_text = "Your current #{@currency_type} is CURRENTCURRENCY."
		end
		@game_lingo["Pass"] = @lingo_option == "Lich Bones" ? "HERO" : "PASS"
		@game_lingo["Don't Pass"] = @lingo_option == "Lich Bones" ? "LICH" : "DON'T PASS"
		@game_lingo["Field"] = @lingo_option == "Lich Bones" ? "BESEECH" : "FIELD"
		@game_lingo["Horn"] = @lingo_option == "Lich Bones" ? "INFERNO" : "HORN"
		@game_lingo["Hard 4"] = @lingo_option == "Lich Bones" ? "CHARGE" : "HARD 4"
		@game_lingo["Hard 10"] = @lingo_option == "Lich Bones" ? "STRIKE" : "HARD 10"
		@game_lingo["Hard 6"] = @lingo_option == "Lich Bones" ? "FEINT" : "HARD 6"
		@game_lingo["Hard 8"] = @lingo_option == "Lich Bones" ? "JUDGEMENT" : "HARD 8"
		@game_lingo["Any 7"] = @lingo_option == "Lich Bones" ? "CLAW 7" : "ANY 7"
		@game_lingo["Prop 2"] = @lingo_option == "Lich Bones" ? "CLAW 2" : "PROP 2"
		@game_lingo["Prop 3"] = @lingo_option == "Lich Bones" ? "CLAW 3" : "PROP 3"
		@game_lingo["Prop 11"] = @lingo_option == "Lich Bones" ? "CLAW 11" : "PROP 11"
		@game_lingo["Prop 12"] = @lingo_option == "Lich Bones" ? "CLAW 12" : "PROP 12"
		@game_lingo["Craps"] = @lingo_option == "Lich Bones" ? "DRAIN" : "CRAPS"
		@game_lingo["Odds"] = @lingo_option == "Lich Bones" ? "CHEER" : "ODDS"
		@game_lingo["Place 4"] = @lingo_option == "Lich Bones" ? "ATTACK 4" : "PLACE 4"
		@game_lingo["Place 5"] = @lingo_option == "Lich Bones" ? "ATTACK 5" : "PLACE 5"
		@game_lingo["Place 6"] = @lingo_option == "Lich Bones" ? "ATTACK 6" : "PLACE 6"
		@game_lingo["Place 8"] = @lingo_option == "Lich Bones" ? "ATTACK 8" : "PLACE 8"
		@game_lingo["Place 9"] = @lingo_option == "Lich Bones" ? "ATTACK 9" : "PLACE 9"
		@game_lingo["Place 10"] = @lingo_option == "Lich Bones" ? "ATTACK 10" : "PLACE 10"
		@game_lingo["Come Out Roll"] = @lingo_option == "Lich Bones" ? "opening attack roll" : "come out roll"
		@game_lingo["Shooter"] = @lingo_option == "Lich Bones" ? "HERO" : "shooter"
		@game_lingo["Game Name"] = @lingo_option == "Lich Bones" ? "Lich Bones" : "Craps"
		@game_lingo["Before come out roll bets allowed"] = @lingo_option == "Lich Bones" ? "HERO, LICH" : "PASS, DON'T PASS"
		@game_lingo["After come out roll bets allowed"] = @lingo_option == "Lich Bones" ? "anything EXCEPT HERO and LICH." : "anything EXCEPT PASS and DON'T PASS."
		@game_lingo["Generic Roll Result"] = @lingo_option == "Lich Bones" ? "Rolled DIETOTAL!" : "Rolled DIETOTAL!"
		@game_lingo["Come Out Roll Win"] = @lingo_option == "Lich Bones" ? "DIETOTAL! SHOOTER has destroyed the LICH's phylactery! HERO wins!" : "DIETOTAL! Natural! SHOOTER has won on the come out roll!"
		@game_lingo["Come Out Roll Loss"] = @lingo_option == "Lich Bones" ? "DIETOTAL! The LICH implodes the HERO into a million pieces! LICH wins!" : "DIETOTAL! SHOOTER has crapped out!"
		@game_lingo["Sevened Out"] = @lingo_option == "Lich Bones" ? "DIETOTAL! SHOOTER has received a mortal wound! LICH wins!" : "DIETOTAL! SHOOTER has sevened out!"
		@game_lingo["Hit The Point"] = @lingo_option == "Lich Bones" ? "DIETOTAL! SHOOTER has delivered a killing blow to the lich! HERO wins!" : "DIETOTAL! SHOOTER has hit the point!"
		@game_lingo["Point Set"] = @lingo_option == "Lich Bones" ? "The quest is POINT." : "The point is POINT."
		@game_lingo["Point Not Hit"] = @lingo_option == "Lich Bones" ? "DIETOTAL. SHOOTER hasn't yet finished their quest. The battle continues." : "DIETOTAL. SHOOTER hasn't yet hit the point."
		@game_lingo["The Point Name"] = @lingo_option == "Lich Bones" ? "Quest" : "Point"
		@game_lingo["Hard 4 Rolled"] = @lingo_option == "Lich Bones" ? "2 2, the HERO knocked the LICH down with a shield CHARGE!" : "2 2, Ballerina! Hard Four!"
		@game_lingo["Hard 4 Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the HERO knocked the LICH down with a shield CHARGE! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Hard 4 bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Hard 4 Lost"] = @lingo_option == "Lich Bones" ? "The HERO ended up on the ground after trying a shield CHARGE! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Hard 4 bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Hard 6 Rolled"] = @lingo_option == "Lich Bones" ? "3 3, the HERO's FEINT worked!" : "3, 3, Hard Six!"
		@game_lingo["Hard 6 Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the HERO's FEINT worked! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Hard 6 bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Hard 6 Lost"] = @lingo_option == "Lich Bones" ? "The LICH did not fall for the FEINT! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Hard 6 bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Hard 8 Rolled"] = @lingo_option == "Lich Bones" ? "4 4, the HERO delivered a successful JUDGEMENT attack!" : "4, 4, Square Pair! Hard Eight!"
		@game_lingo["Hard 8 Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the HERO delivered a successful JUDGEMENT attack! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Hard 8 bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Hard 8 Lost"] = @lingo_option == "Lich Bones" ? "The JUDGEMENT attack against the LICH failed! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Hard 8 bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Hard 10 Rolled"] = @lingo_option == "Lich Bones" ? "5 5, the HERO's eyes glow as the LICH receives a divine STRIKE!" : "5, 5, Puppy Paws! Hard Ten!"
		@game_lingo["Hard 10 Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the HERO's eyes glow as the LICH receives a divine STRIKE! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Hard 10 bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Hard 10 Lost"] = @lingo_option == "Lich Bones" ? "The divine STRIKE was unsuccessful! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Hard 10 bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Field Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the HERO's patron has heeded their BESEECH, granting the HERO a boon in combat! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Field bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Field Lost"] = @lingo_option == "Lich Bones" ? "The BESEECH has failed! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Field bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Horn Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the LICH launched an INFERNO attack! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Horn bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Horn Lost"] = @lingo_option == "Lich Bones" ? "The LICH's INFERNO attack missed! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Horn bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Craps Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the LICH DRAINed the life force from the HERO! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Craps bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Craps Lost"] = @lingo_option == "Lich Bones" ? "The LICH failed at DRAINing the HERO's life force! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Craps bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Any 7 Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the LICH delivered a CLAW 7 attack! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Any 7 bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Any 7 Lost"] = @lingo_option == "Lich Bones" ? "The LICH's CLAW 7 attack missed! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Any 7 bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Prop Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the LICH delivered a CLAW DIETOTAL attack! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Prop DIETOTAL bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Prop Lost"] = @lingo_option == "Lich Bones" ? "The LICH's CLAW DIETOTAL attack missed! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Prop DIETOTAL bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Place Won"] = @lingo_option == "Lich Bones" ? "Congratulations, the HERO delivered an ATTACK DIETOTAL! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Place DIETOTAL bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Place Lost"] = @lingo_option == "Lich Bones" ? "The HERO was defeated before they could deliver an ATTACK DIETOTAL! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Place DIETOTAL bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Pass Won"] = @lingo_option == "Lich Bones" ? "Congratulations, your HERO bet won! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Pass bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Pass Lost"] = @lingo_option == "Lich Bones" ? "The HERO lost! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Pass bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Don't Pass Won"] = @lingo_option == "Lich Bones" ? "Congratulations, your LICH bet won! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Don't Pass bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Don't Pass Lost"] = @lingo_option == "Lich Bones" ? "The LICH lost! You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Don't Pass bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Odds Pass Won"] = @lingo_option == "Lich Bones" ? "Congratulations, your HERO CHEER was successful! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Odds bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Odds Pass Lost"] = @lingo_option == "Lich Bones" ? "Your HERO CHEER was unsuccessful. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Odds bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
		@game_lingo["Odds Don't Pass Won"] = @lingo_option == "Lich Bones" ? "Congratulations, your LICH CHEER was successful! You have won WINNINGS #{@currency_type}. #{current_text}" : "Congratulations! Your Odds bet won! You have won WINNINGS #{@currency_type}. #{current_text}"
		@game_lingo["Odds Don't Pass Lost"] = @lingo_option == "Lich Bones" ? "Your LICH CHEER was unsuccessful. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}" : "Your Odds bet lost. You are out your bet of AMOUNTBET #{@currency_type}. #{current_text}"
	end
	
	def self.update_silver_received(name, amount)
		@all_silvers_received[name] = 0 unless @all_silvers_received[name]
		@all_silvers_received[name] += amount
	end
	
	def self.return_silvers(name, amount)
		put "give #{name} #{amount}" if @all_silvers_received[name] != 0
		@all_silvers_received[name] = 0
	end

	def self.watching_lines
		clear
		while line = get
			if (line =~ /^You exclaim, \"Betting is now closed!/) || (line =~ /^You exclaim, \"Starting a game of .*!/)
				break
			elsif line =~ /^\(OOC\) ([a-zA-Z]+)\'s player whispers\, \"Bet (\d+) on (.*)\.\"$/ && (@all_main_settings["Join Phase Only"].nil?)
				name = $1
				bet_amount = $2.to_i
				bet_type = $3
				bet_amount = @all_silvers_received[name] if @currency_type == "Silver"
				if !@game_hash["Current Players"].include?(name)
					whisper(name, "You must first join the game by doing 'whisper ooc #{checkname} Join game.'")
				else
					if !@all_bet_types.include?(bet_type)
						whisper(name, "Sorry '#{bet_type}' isn't a valid type of bet.")
					elsif @all_current_bets[bet_type].include?(name)
						number = add_commas(@all_current_bets[bet_type][name])
						whisper(name, "You have already made a '#{bet_type}' bet for #{number} #{@currency_type}.")
						return_silvers(name, bet_amount) if @currency_type == "Silver"
					elsif bet_amount == 0
						whisper(name, "Why I oughta...you can't make a zero #{@currency_type} bet!")
					elsif bet_amount > @all_player_stats[@currency_type][name]["Current #{@currency_type}"] && @currency_type != "Silver"
						number = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"])
						whisper(name, "Sorry you do not have enough #{@currency_type} to make that bet. You currently have #{number} #{@currency_type}.")
					elsif @all_main_settings["Minimum Bet"] > bet_amount
						whisper(name, "Sorry the minimum bet amount is #{@all_main_settings["Minimum Bet"]}.")
						return_silvers(name, bet_amount)
					elsif (@all_main_settings["Maximum Bet"] < bet_amount) && (@all_main_settings["Maximum Bet"] != 0)
						if @currency_type == "Silver"
							remaining = bet_amount - @all_main_settings["Maximum Bet"]
							whisper(name, "Sorry the maximum bet amount is #{@all_main_settings["Maximum Bet"]}. I have kept #{@all_main_settings["Maximum Bet"]} Silvers to put towards your bet and I am returning #{remaining} silvers.")
							bet_amount = @all_main_settings["Maximum Bet"]
							return_silvers(name, remaining)
						else
							whisper(name, "Sorry the maximum bet amount is #{@all_main_settings["Maximum Bet"]}.")
						end
					elsif (bet_type == "Pass" && @all_current_bets["Don't Pass"].include?(name))
						number = add_commas(@all_current_bets["Don't Pass"][name])
						whisper(name, "You have already made a '#{@game_lingo["Don't Pass"]}' bet for #{number} #{@currency_type}. You can only bet on '#{@game_lingo["Pass"]}' or '#{@game_lingo["Don't Pass"]}', not both.")
						return_silvers(name, bet_amount)
					elsif (bet_type == "Don't Pass" && @all_current_bets["Pass"].include?(name))
						number = add_commas(@all_current_bets["Pass"][name])
						whisper(name, "You have already made a '#{@game_lingo["Pass"]}' bet for #{number} #{@currency_type}. You can only bet on '#{@game_lingo["Pass"]}' or '#{@game_lingo["Don't Pass"]}', not both.")
						return_silvers(name, bet_amount)
					elsif @game_hash["Current Point"].nil? && @bets_allowed_after_come_out_roll.include?(bet_type)
						whisper(name, "Sorry a bet for '#{bet_type}' may not be placed before the #{@game_lingo["Come Out Roll"]}. Available bets before the #{@game_lingo["Come Out Roll"]} are: #{@game_lingo["Before come out roll bets allowed"]}")
						return_silvers(name, bet_amount)
					elsif @game_hash["Current Point"] && @bets_allowed_before_come_out_roll.include?(bet_type)
						whisper(name, "Sorry a bet for '#{bet_type}' may not be placed after the #{@game_lingo["Come Out Roll"]}. Available bets after the #{@game_lingo["Come Out Roll"]} are: #{@game_lingo["After come out roll bets allowed"]}")
						return_silvers(name, bet_amount)
					elsif (bet_type == "Odds") && (!@all_current_bets["Pass"].include?(name)) && (!@all_current_bets["Don't Pass"].include?(name))
						whisper(name, "You can only place a bet for '#{@game_lingo["Odds"]}' if you have already made a bet for either '#{@game_lingo["Pass"]}' or '#{@game_lingo["Don't Pass"]}'.")
						return_silvers(name, bet_amount)
					else
						if bet_type == "Odds"
							other_bet_amount = @all_current_bets["Pass"][name] ? @all_current_bets["Pass"][name] : @all_current_bets["Don't Pass"][name]
							cheer_target = @all_current_bets["Pass"][name] ? "HERO" : "LICH"
							if bet_amount > (other_bet_amount * 2)
								remaining = (bet_amount - (other_bet_amount * 2))
								return_silvers(name, remaining)
								bet_amount = other_bet_amount * 2
								whisper(name, "A bet for '#{@game_lingo["Odds"]}' is capped at 2 times the bet of your '#{@game_lingo["Pass"]}' or '#{@game_lingo["Don't Pass"]}' bet. Your '#{@game_lingo["Odds"]}' bet has been automatically adjusted to #{bet_amount} #{@currency_type}.")
							end
						end
						@all_player_stats[@currency_type][name]["Current #{@currency_type}"] -= bet_amount if @currency_type != "Silver"
						update_session_stat(name, "#{@currency_type} Spent", bet_amount)
						update_session_stat(name, "Number Of Bets Made", 1)
						@dealer_session_stats["#{@currency_type} Collected"] += bet_amount
						
						number = add_commas(@dealer_session_stats["#{@currency_type} Collected"])
						@main_information_labels["#{@currency_type} Collected"].set_text("#{@currency_type} Collected: #{number}")
						
						number = add_commas(@dealer_session_stats["#{@currency_type} Collected"] - @dealer_session_stats["#{@currency_type} Paid Out"])
						@main_information_labels["Net #{@currency_type} Collected"].set_text("Net #{@currency_type} Collected: #{number}")
						
						if bet_type == "Odds"
							odds_type = @all_current_bets["Pass"][name] ? "Pass" : "Don't Pass"
							@all_current_bets["#{bet_type} #{odds_type}"][name] = bet_amount
						else
							@all_current_bets[bet_type][name] = bet_amount
						end
						bet_amount_currency = add_commas(bet_amount)
						current_currency = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"]) if @currency_type != "Silver"
						@all_silvers_received[name] = 0 if @currency_type == "Silver"
						text = "Your '#{@game_lingo[bet_type]}' bet for #{bet_amount_currency} #{@currency_type} has been accepted. "
						text += "This bet is inactive on the #{@game_lingo["Come Out Roll"]}. " if @bets_inactive_on_come_out_rolls.include?(bet_type)
						text += "This is a one roll bet. " if @one_roll_bets.include?(bet_type)
						text += "Your current #{@currency_type} is #{current_currency}." if @currency_type != "Silver"
						whisper(name, text)
						text = "'#{name} has placed a bet for '#{@game_lingo[bet_type]}' for #{bet_amount_currency} #{@currency_type}. "
						if @lingo_option == "Lich Bones"
							if bet_type == "Pass" || bet_type == "Don't Pass"
								text += "#{name} is betting on the #{@game_lingo[bet_type]} to win!"
							elsif bet_type == "Hard 4"
								text += "#{name} is hoping for a shield CHARGE!"
							elsif bet_type == "Hard 6"
								text += "#{name} is hoping for a FEINT!"
							elsif bet_type == "Hard 8"
								text += "#{name} is hoping for a JUDGEMENT attack!"
							elsif bet_type == "Hard 10"
								text += "#{name} is hoping for a divine STRIKE!"
							elsif bet_type == "Odds"
								text += "#{name} is CHEERing on the #{cheer_target}!"
							elsif bet_type =~ /Place (\d+)/
								text += "#{name} is hoping for a HERO ATTACK #{$1}!"
							elsif bet_type == "Any 7"
								text += "#{name} is hoping for a LICH CLAW 7 attack!"
							elsif bet_type =~ /Prop (\d+)/
								text += "#{name} is hoping for a LICH CLAW #{$1} attack!"
							elsif bet_type == "Field"
								text += "#{name} is BESEECHing the HERO's patron for assistance!"
							elsif bet_type == "Horn"
								text += "#{name} wants the LICH to launch an INFERNO attack!"
							elsif bet_type == "Craps"
								text += "#{name} wants a life DRAIN attack."
							end
						end
						put text
					end
				end
			elsif line =~ /^\(OOC\) ([a-zA-Z]+)\'s player whispers\, \"Stats\.\"$/
				name = $1
				if !@game_hash["Current Players"].include?(name)
					whisper(name, "You must first join the game by doing 'whisper ooc #{checkname} Join game.'")
				else
					if !@game_hash["People Received Stats"].include?(name)
						@game_hash["People Received Stats"].push(name)
						text = ""
						@all_player_stats[@currency_type][name].each{ |stat_name, stat_value|
							stat_value = add_commas(stat_value) if stat_value.is_a?(Integer)
							text += "#{stat_name}: #{stat_value}, "
						}
						text.chop!.chop!
						whisper(name, "Your #{@currency_type} stats: #{text}")
					end
				end
			elsif line =~ /^([a-zA-Z]+) just gave you a coin which you quickly pocket./
				name = $1
				update_silver_received(name, 1)
			elsif line =~ /^([a-zA-Z]+) just gave you (.*) coins which you quickly pocket./
				name = $1
				amount = $2.delete(",").to_i
				update_silver_received(name, amount)
			elsif line =~ /^\(OOC\) ([a-zA-Z]+)\'s player whispers\, \"Join game\.\"$/
				name = $1
				add_new_player_stats(name)
				text = "Welcome! "
				if !@game_hash["Current Players"].include?(name)
					@all_stat_menus["Players Menu"].append_text(name)
					@all_stat_menus["Players Menu"].active = 0 if @all_stat_menus["Players Menu"].active == -1
					@game_hash["Current Players"].push(name)
					@game_hash["Players Eligible For Shooter"].push(name)
					update_players_label
					if @currency_type != "Silver"
						update_stat(name, "Current #{@currency_type}", @all_main_settings["Join Bonus"])
						update_stat(name, "Total #{@currency_type} Received", @all_main_settings["Join Bonus"])
						bonus_currency = add_commas(@all_main_settings["Join Bonus"])
						text += "You have received #{bonus_currency} bonus #{@currency_type}! "
					end
				end
				
				if @currency_type == "Silver"
					currency_text = ""
				else
					current_currency = add_commas(@all_player_stats[@currency_type][name]["Current #{@currency_type}"])
					currency_text = "Your current #{@currency_type} is #{current_currency}. "
				end
				
				text += "#{currency_text} Currency: #{@currency_type}, Min bet: #{@all_main_settings["Minimum Bet"]}, Max bet: #{@all_main_settings["Maximum Bet"]}, Bet Length: #{@all_main_settings["Betting Length Seconds"]}."
				whisper(name, text)
				whisper(name, "Payout info: #{@game_hash["Payout Text"]}")
			end
		end
		clear
	end
	
	def self.variable=(value)
		if value =~ /auto/i
			@auto_mode_enabled = true
			@all_main_settings["Start The Join"] = true
		end
	end
	
	Thread.new{
		wait_until{ @all_main_settings["Start The Join"] }
		@main_entries.each{ |setting_name, entry| entry.editable = false }
		@payout_entries.each{ |setting_name, entry| entry.editable = false }
		@all_main_settings["Join Phase Only"] = true
		@all_buttons["Start Join"].hide
		@all_buttons["Start Game"].show
		put "'I will be starting a game of #{@game_lingo["Game Name"]} soon! Join me now!"
		if @auto_mode_enabled
			Thread.new{
				6.times{
					sleep 20
					put "'I will be starting a game of #{@game_lingo["Game Name"]} soon! Join me now!"
				}
				@all_main_settings["Start The Game"] = true
			}
		end
		watching_lines
	}

	Thread.new{
		wait_until{ @all_main_settings["Start The Game"] }
		@all_main_settings["Join Phase Only"] = nil
		@all_buttons["Start Game"].hide
		put "'Starting a game of #{@game_lingo["Game Name"]}!"
		come_out_roll
	}
	
	before_dying{
		@main_window.close if @main_window
	}
	
	add_new_player_stats(checkname)
	@original_currency_type = @currency_type.dup
end

Gtk.queue {
	CrapsDealerMain.create_window
	CrapsDealerMain.variable = script.vars[1]
	Gtk.main
}

sleep