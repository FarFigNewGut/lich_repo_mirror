#quiet
=begin

	Use this script to search for an RP-related (i.e., non-functional) verb!

	You can search by verb name (e.g., ";rpverbs waggle"), by race/profession (e.g., ";rpverbs sorcerer"), by conditions (e.g., ";rpverbs dead"), or by words that appear in the verb's output text (e.g., ";rpverbs mystically," which would find the WAGGLE verb, since "mystically" is in its output text). You can also include multiple words in quotes for a more specific search (e.g., ";rpverbs "wail eerily"").

	NOTE: Requires rpverbs_data2.xml (also on the repository).

	~ Mathari (on the PC)

=end

if script.vars.empty?
	respond
	respond("Usage:");
	respond("    #{$clean_lich_char}rpverbs <search_term>");
	respond
	respond("<search_term> can be the verb name (e.g., waggle), a profession or race name (for verbs specific to each), a condition on which the verb is used (e.g., dead), or a word that appears in the output text when the verb is used (e.g., the word \"mystically\" would find the verb WAGGLE). To search for multiple words, enclose them in quotation marks.")
	respond
	exit
end

unless(File.exists?($data_dir + "rpverbs_data2.xml"))
	echo
	echo "ERROR: This script needs rpverbs_data2.xml to function. Download it from the repo before running this script."
	echo
	exit
end

require 'rexml/document'

# Open XML file and read in XML
data_file = File.open($data_dir + "rpverbs_data2.xml")
xml_data = REXML::Document.new(data_file)
xml_root = xml_data.root

# Create an array of verb data (hashes, described below) from the XML file

verb_array = Array.new
xml_root.elements.each { |element|
	# Each verb has four "fields," represented in the XML as the verb element's
	# children: name, modifier, condition, and output.

	# We make a hash out of these fields... 
	# (The index numbers here are odd because REXML follows XPath's way of 
	#  counting nodes, and XPath counts whitespace *between* real nodes as
	#  additional nodes.)
	child_hash = { "name" => element[1].text.strip, "modifier" => element[3].text.strip, "condition" => element[5].text.strip, "output" => element[7].text.strip } 

	# ...then we add the hash to the verb array.
	verb_array.push(child_hash)
}


data_file.close()

# Downcase the user's search term for searching purposes
search = variable[1].downcase

found_count = 0 # For tracking whether or not a verb was found at all
display_string = ""

# Search the verb array for matches and display them.
# This first gets each verb hash from the larger array, then goes through each
# hash for a match.
verb_array.each { |verb_data| 
	verb_data.each { |key, value| 
		if value.downcase =~ /\b#{search}\b/
			found_count += 1
			data_index = verb_array.index(verb_data)
			# Construct string of verb information from hash and display it
			display_string << verb_array[data_index]["name"] # Verb name
			display_string << " "
			display_string << verb_array[data_index]["modifier"] # Modifier
			display_string << "\n     Condition: "
			display_string << verb_array[data_index]["condition"] # Condition
			display_string << "\n     Output: "
			display_string << verb_array[data_index]["output"] # Output
			display_string << "\n\n"

			puts display_string

			display_string = "" # Clear the string for the next verb
			break # Stop going through the same hash in order to avoid duplicates
		end
	}
}

if found_count == 0
	echo
	echo "Sorry, your search returned no results."
	echo
end

exit

