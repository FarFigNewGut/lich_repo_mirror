=begin

	This script:
		- opens your group when you die and closes it again when you get a life
		- opens your group when you're stunned and closes it again when you recover
		- joins someone when they try to add you to their group, if they're in the list
		- adds someone to your group when they try to join you, if they're in the list

	;group_ajar help

	 author: Tillmen (tillmen@lichproject.org)
	   game: Gemstone
	version: 0.1

=end


# [group_ajar]>group open            You can't do that while being digested!

hide_me

usage_string = "\n"
usage_string.concat "Usage:\n"
usage_string.concat "   #{$lich_char}#{script.name}              make the script do stuff and junk\n"
usage_string.concat "   #{$lich_char}#{script.name} add <name>   add a name to the auto join/group list\n"
usage_string.concat "   #{$lich_char}#{script.name} del <name>   delete a name from the list\n"
usage_string.concat "   #{$lich_char}#{script.name} list         list the list\n"
usage_string.concat "\n"

CharSettings['allow'] ||= Array.new

if script.vars.empty?
	# put 'group close'
	Thread.new {
		loop {
			begin
				wait_until { dead? and XMLData.room_title != '[The Belly of the Beast]' }
				loop {
					loop {
						break unless dead?
						break if (checkpcs.to_a & UserVars.attacked_me.to_a).empty?
						sleep 0.1
					}
					break unless dead?
					put 'group open'
					loop {
						break unless dead?
						break unless (checkpcs.to_a & UserVars.attacked_me.to_a).empty?
						sleep 0.1
					}
					break unless dead?
					put 'group close'
				}
				put 'group close' unless stunned?
			rescue
				echo $!
				puts $!.backtrace[0..1]
			end
		}
	}
	Thread.new {
		loop {
			begin
				wait_until { stunned?  }
				if (UserVars.attacked_me.nil? or (checkpcs.to_a & UserVars.attacked_me.to_a).empty?) and not $_SERVERBUFFER_.any? { |line| line =~ /^<spell exist='spell'>Raise Dead<\/spell>/ }
					put 'group open'
				end
				wait_while { stunned? }
				put 'group close' unless dead?
			rescue
				echo $!
				puts $!.backtrace[0..1]
			end
		}
	}
	action = proc { |client_string|
		begin
			if client_string =~ /^(?:<c>)?#{$lich_char}#{script.name} (.*)/
				script.downstream_buffer.push(client_string)
				nil
			else
				client_string
			end
		rescue
			UpstreamHook.remove(script.name)
			client_string
		end
	}
	before_dying { UpstreamHook.remove(script.name) }
	UpstreamHook.add(script.name, action)
	
	while line = get
		if line =~ /^(?:<c>)?#{$lich_char}#{script.name} (.*)/
			cmd, name = $1.split(' ')
			cmd.downcase!
			name.capitalize!
			if cmd == 'add'
				if CharSettings['allow'].include?(name)
					echo "#{name} has already been added."
				else
					CharSettings['allow'].push(name)
					echo "#{name} has been added."
				end
			elsif (cmd == 'del') or (cmd == 'delete')
				if CharSettings['allow'].delete(name)
					echo "#{name} has been deleted."
				else
					echo "#{name} was not found."
				end
			elsif cmd == 'list'
				if CharSettings['allow'].empty?
					echo '<empty>'
				else
					echo CharSettings['allow'].join(', ')
				end
			else
				respond usage_string
			end
		elsif line =~ /^([A-Z][a-z]+) tried to join your group, but your group status is closed\./
			if CharSettings['allow'].include?($1)
				waitrt?
				fput "group #{$1}"
			end
		elsif line =~ /^([A-Z][a-z]+) tried to (?:add you to (?:his|her) group|hold your hand), but your group status is closed\./
			if CharSettings['allow'].include?($1)
				waitrt?
				fput "join #{$1}"
			end
		end
	end
elsif (script.vars[1].downcase == 'add') and (name = script.vars[2].capitalize)
	if CharSettings['allow'].include?(name)
		echo "#{name} has already been added."
	else
		CharSettings['allow'].push(name)
		echo "#{name} has been added."
	end
	exit
elsif (script.vars[1] =~ /^del(?:ete)?$/i) and (name = script.vars[2].capitalize)
	if CharSettings['allow'].delete(name)
		echo "#{name} has been deleted."
	else
		echo "#{name} was not found."
	end
elsif script.vars[1].downcase == 'list'
	if CharSettings['allow'].empty?
		echo '<empty>'
	else
		echo CharSettings['allow'].join(', ')
	end
else
	respond usage_string
end
