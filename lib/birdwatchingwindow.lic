=begin

	==================================================
	Birdwatching Window (Wrayth UI Integration)
	Requires:
	;repo download birdwatching_explore.yaml
	;repo download bird_fieldguide.yaml
	;repo download bird_fieldguide.lic
	==================================================

	This script was created with the help of Chat GPT.

	This script creates a real-time Wrayth window titled **"Birdwatching"** that automatically updates with birds and feathers found in the current room based on `birdwatching_explore.yaml`.

	It is designed for users of the **Jeepers Creepers** birdwatching system and integrates seamlessly with the companion `bird_fieldguide.lic` script for field guide access.

	Features:
	- Automatically displays all birds and feathers recorded in the current room.
	- Categorizes birds into **Paper** and **Gem** collection modes.
	- Each entry includes clickable links to:
			- Collect 1 or 10 of a bird in either form
			- Collect 1 or 10 of a feather
			- Look up a field guide entry using `;send fg`, which interfaces with `bird_fieldguide.lic`
	- Dynamically extracts the species noun for correct `;send fg` lookup (last word for birds, second-to-last for feathers).
	- Refreshes automatically when the player moves to a new room.
	- Uses optimized Wrayth-compatible formatting for a clean and responsive UI.

	Requirements:
	- `birdwatching_explore.yaml` for room sightings
	- `bird_fieldguide.yaml` for species entries
	- `bird_fieldguide.lic` must be running to handle `;send fg` lookups

	tags: wrayth, birdwatching, Jeepers Creepers, spyglass, feathers, field guide
	version: 1.1.0

=end

require 'yaml'

puts("<closeDialog id='Birdwatching'/><openDialog type='dynamic' id='Birdwatching' title='Birdwatching' target='Birdwatching' scroll='auto' location='main' justify='3' height='300' resident='true'><dialogData id='Birdwatching'></dialogData></openDialog>")
# Define paths to YAML data
LICH5_PATHS = [
  "C:\\Lich5\\scripts",
  File.expand_path("~/Desktop/Lich5/scripts")
]

BIRDWATCHING_EXPLORE_PATH = nil

LICH5_PATHS.each do |path|
  if Dir.exist?(path)
    BIRDWATCHING_EXPLORE_PATH = File.join(path, "birdwatching_explore.yaml")
    break
  end
end

# Load YAML bird data
def load_bird_data
  return { 'rooms' => {} } unless File.exist?(BIRDWATCHING_EXPLORE_PATH)
  YAML.load_file(BIRDWATCHING_EXPLORE_PATH) || { 'rooms' => {} }
end

# Push Wrayth-compatible XML to create/update BirdRoomWindow
def push_bird_room_data_to_window
  data = load_bird_data
  uid = Room.current.uid.to_s.strip.gsub(/\[|\]/, '')
  return if uid.empty?

  birds = []
  feathers = []

  data["rooms"].each_value do |entries|
    entries.each do |entry|
      next unless entry.is_a?(Hash)
      sightings = entry[uid]
      next unless sightings

      birds += sightings["birds"] || []
      feathers += sightings["feathers"] || []
    end
  end

  y = 0
  output = "<dialogData id='Birdwatching' clear='t'>"
  output += "<label id='uid' value='UID: #{uid}' left='10' top='#{y}' font='font-bold'/>"
  y += 20

  unless birds.empty?
output += "<label id='birds_paper' value='Paper Birds:' left='10' top='#{y}' font='font-bold'/>"
y += 20
birds.each_with_index do |bird, i|
  output += "<link id='p_#{i}' value='[1]' cmd=';send paper #{bird} 1' left='0' top='#{y}'/>"
  output += "<link id='g_#{i}' value='[10]' cmd=';send paper #{bird} 10' left='30' top='#{y}'/>"
  species = bird.split.last.capitalize
  output += "<link id='bird_p_#{i}' value='#{bird}' cmd=';send fg #{species}' left='60' top='#{y}'/>"
  y += 20
end

output += "<label id='birds_gem' value='Gem Birds:' left='10' top='#{y}' font='font-bold'/>"
y += 20
birds.each_with_index do |bird, i|
  output += "<link id='gp1_#{i}' value='[1]' cmd=';send gem #{bird} 1' left='0' top='#{y}'/>"
  output += "<link id='gp10_#{i}' value='[10]' cmd=';send gem #{bird} 10' left='30' top='#{y}'/>"
  species = bird.split.last.capitalize
  output += "<link id='bird_g_#{i}' value='#{bird}' cmd=';send fg #{species}' left='60' top='#{y}'/>"
  y += 20
end

  end

  unless feathers.empty?
output += "<label id='feathers_label' value='Feathers:' left='10' top='#{y}' font='font-bold'/>"
y += 20
feathers.each_with_index do |feather, i|
  output += "<link id='f1_#{i}' value='[1]' cmd=';send feather #{feather} 1' left='0' top='#{y}'/>"
  output += "<link id='f10_#{i}' value='[10]' cmd=';send feather #{feather} 10' left='30' top='#{y}'/>"
  species = feather.split[-2].capitalize
  output += "<link id='feather_#{i}' value='#{feather}' cmd=';send fg #{species}' left='60' top='#{y}'/>"
  y += 20
end

  end

  output += "</dialogData>"
  puts(output)
end

# Room UID tracking loop
last_uid = nil

loop do
  current_uid = Room.current.uid.to_s.strip.gsub(/\[|\]/, '')

  if !current_uid.empty? && current_uid != last_uid
    last_uid = current_uid


    push_bird_room_data_to_window
  end

  sleep 0.5
end

