# Imagination - Character Image Viewer for Lich
# This script listens for "you see" messages and whispers, displaying character images dynamically.
# V 1.0 Requires IMAGINATION inside the lich script folder (same folder your scripts are in add a folder named
# IMAGINATION

require 'gtk3'

begin
  # Define the folder where images are stored
  IMAGINATION_FOLDER = File.join(SCRIPT_DIR, 'IMAGINATION')

  # Define image files for known characters
  IMAGE_FILES = {
    "tabubu"  => "Tabubupic.jpg",
    "dendum"  => "Dendumpic.jpg",
    "galiont" => "Galiontpic.jpg"
  }

  DEFAULT_IMAGE = "default.jpg"

  # Ensure the image folder exists
  unless File.exist?(IMAGINATION_FOLDER)
    respond "IMAGINATION folder not found in #{IMAGINATION_FOLDER}."
    respond "Please create the folder and place images inside."
    exit
  end

  unless File.exist?(File.join(IMAGINATION_FOLDER, DEFAULT_IMAGE))
    respond "default.jpg not found in #{IMAGINATION_FOLDER}."
    respond "Please add a default.jpg to the folder."
    exit
  end

  # Load CharSettings
  window_position = CharSettings['window_position'] || [500, 500]
  imagination_exit = false
  imagination_window_width = CharSettings['window_width'] || 500
  imagination_window_height = CharSettings['window_height'] || 500

  # Initialize the UI window
  window = nil
  image = nil
  layout = nil
  scroller = nil
  last_update_time = Time.now
  last_activity_time = Time.now # Separate time for activity checks

  # Function to load and display the correct image and update window title
  load_character_image = proc { |character|
    image_file = IMAGE_FILES[character.downcase] || 
                 "#{character.downcase}pic.jpg" || 
                 "#{character.downcase}pic.jpeg" || 
                 "#{character.downcase}pic.png"
    image_path = File.join(IMAGINATION_FOLDER, image_file)

    # If file doesn't exist, use default
    unless File.file?(image_path)
      image_path = File.join(IMAGINATION_FOLDER, DEFAULT_IMAGE)
    end

    Gtk.queue do
      # Get current window size
      win_width = window.allocation.width
      win_height = window.allocation.height

      # Get image dimensions
      _, img_width, img_height = GdkPixbuf::Pixbuf.get_file_info(image_path)

      # Determine the best scale factor for fitting into the window
      scale_x = win_width.to_f / img_width
      scale_y = win_height.to_f / img_height
      scale = [scale_x, scale_y].min # Keep aspect ratio

      # Ensure scaling does not exceed original size
      scale = [scale, 1.0].min

      # Apply scaling
      resized_width = (img_width * scale).to_i
      resized_height = (img_height * scale).to_i

      # Remove previous image if it exists
      layout.remove(image) if image

      # Load and scale the new image
      image = Gtk::Image.new
      image.set_pixbuf(GdkPixbuf::Pixbuf.new(:file => image_path).scale_simple(resized_width, resized_height, GdkPixbuf::InterpType::BILINEAR))
      layout.put(image, 0, 0)
      layout.move(image, 0, 0)

      # Update window title to reflect character name
      window.title = "Imagination - #{character.capitalize}"

      # Reset the timer when image changes
      last_update_time = Time.now

      window.show_all
    end
  }

  # Set up the UI window
  Gtk.queue {
    window = Gtk::Window.new
    window.title = "Imagination - Default"
    window.set_icon(@default_icon)
    window.signal_connect('delete_event') { imagination_exit = true }

    # Load saved position & size
    window.move(window_position[0], window_position[1]) if window_position.is_a?(Array)
    window.resize(imagination_window_width, imagination_window_height)

    scroller = Gtk::ScrolledWindow.new
    scroller.border_width = 0
    scroller.set_policy(:automatic, :always)
    window.add(scroller)
    window.keep_above = true

    layout = Gtk::Layout.new
    scroller.add(layout)

    # Show default image on startup
    load_character_image.call("default")

    # Resize image dynamically when window resizes
    window.signal_connect("configure_event") do
      load_character_image.call("default")
    end

    window.show_all
  }

  # Monitor game output for "you see" and whisper messages
  Thread.new do
    while !imagination_exit
      line = get

      # Ensure "You see a " lines are completely ignored before processing
      next if line.strip.downcase.start_with?("you see a ")

      # Handle whispers - checking for "whispers," and "You hear the faint whisper of" or "distant whisper"
      if line.strip.match(/whispers,/)
        # Check for direct whispers (like "Character whispers,")
        match = line.match(/(\w+) whispers,/)
        if match
          character = match[1] # Extracted whisper character name
          character = character.downcase
          load_character_image.call(character) # Display the image for the whispered character
          last_activity_time = Time.now # Reset inactivity timer
        end
      end

      # Handle distant/faint whispers (like "You hear the distant whisper of Character saying, ...")
      if line.strip.match(/You hear the (faint|distant) whisper of/)
        match = line.match(/(?:You hear the (faint|distant) whisper of )(\w+) saying,/)
        if match
          character = match[2] # Extracted whisper character name from distant/faint
          character = character.downcase
          load_character_image.call(character) # Display the image for the whispered character
          last_activity_time = Time.now # Reset inactivity timer
        end
      end
       
      # List of Prename titles
      # Check for character name in "You see" messages
      match = line.match(/You see (?:\b(?:Abyssal Riddlemaster|Academic|Adjudicator|Adjutant|Admiral|Apprentice|Archiver|Arena Challenger|Arena Champion|Arena Combatant|Arena Conqueror|Arena Contender|Arena Hero|Arena Heroine|Arena Icon|Arena Leader|Arena Occultist|Arena Worshipper|Ashmonger|Athrasenwyr|Baron|Bathcwyn|Blade|Bogwalker|Branch Guardian|Brother-Knight|Brother-in-Arms|Buccaneer|Castellan|Chamberlain|Chaser|Chatelaine|Commander|Commodore|Conquerer of Reim|Consummate Gardener|Court-Appointed|Courtier|Crypt Keeper|Cydsenwyr|Dame|Defender of Mist Harbor|Dragoon|Duke|Embalmer|Emperor|Faelcwyn|First Legionnaire|Fisher|Fisherman|Flockmaster|Forge|Forger|Four Winds Resident|Gardener|Gardner|Grand Lady|Grand Lord|Grand Magister|Grandmaster Fisher|Great Lady|Grocwyn|Herald|Herald Luminary|Herald-Statant|Herald-at-arms Emeritus|Herald-at-arms Guardant|Herald-at-arms Statant|Herbmyster|Herbwyfe|High Legionnaire|High Lord|Horseman|Horsewoman|Horticulturist|Hospitaller|Hunter|Huntress|Ice Fisherman|Imperial Magister|Instructor|Jouster|Knight|Knight Regent|Knight of the Empire|Knight-Banneret|Knight-Commander|Knight-Errant|Knight-Marshal|Knight-Protector|Knight-Regent|Knight-Sentinel|Lady|Lady in Waiting|Legionnaire|Lightweaver|Lord|Loremaster|Magister|Magister Provost|Maiden|Mariner|Master|Master Fisher|Master Hospitaller|Mathematician|Mavwyr|Mayor|Messenger|Militant-adjacent|Miss|Mister|Mistress|Novice|Orphan|Outlander|Paele|Peltast|Phytologist|Picklemaster|Pioneer|Pixie Seeker|Plantsman|Plantswoman|Plunderer|Prentice|Prentice Mage|Prentice Mavwyr|Preservationist|Protector|Recruiter|Researcher|Royal Magister|Sarissa|Scroll Keeper|Sea Robber|Seaward|Senechal|Seneschal|Sewer Scamp|Shieldmaiden|Sinistral of Tyranny|Sir|Sister-Knight|Sister-in-Arms|Small Game Hunter|Small Game Huntress|Solace-Hospitaller|Solace-in-faith|Squire|Squire Legionnaire|Strategist|The Infamous|Town Councilor|Tradesperson|Trainee|Urchin|Veteran|Void Dodger|Vulpine Chaser|Whimweaver|Wildlife Specialist|Willow Guardian|Willow GuardianEmbalmer|Winterberry Recruiter|Witchhunter|Worker)\b )?(\w+)/i)

      next unless match

      character = match[1] # Extracted name from "You see"
      character = character.downcase

      load_character_image.call(character)

      last_activity_time = Time.now # Reset inactivity timer

      sleep 0.5
    end
  end

  # Background thread to reset image to default after 10 seconds of inactivity
  # and shrink the window height to zero after 15 seconds of inactivity
  Thread.new do
    loop do
      sleep 5 # Check every 5 seconds instead of every second
      if Time.now - last_activity_time > 15 # If 15 seconds pass with no updates
        Gtk.queue do
          # Shrink the window height to zero after 15 seconds of inactivity
          window.resize(imagination_window_width, 0)
        end
      elsif Time.now - last_activity_time > 10  # If 10 seconds pass with no updates
        Gtk.queue do
          load_character_image.call("default")  # Reset to default image
        end
      end
    end
  end

  # Handle window settings on exit
  before_dying {
    window_position = window_width = window_height = nil
    Gtk.queue {
      window_position = window.position
      window_width = window.allocation.width
      window_height = window.allocation.height
    }
    sleep 0.01 while window_height.nil?
    Gtk.queue { window.destroy }

    CharSettings['window_position'] = window_position if (window_position.class == Array) and (window_position[0].to_i > 0) and (window_position[1].to_i > 0)
    CharSettings['window_width'] = window_width if (window_width.class == Integer) and (window_width > 100)
    CharSettings['window_height'] = window_height if (window_height.class == Integer) and (window_height > 100)
    Settings.save
  }

  # Keep UI responsive
  until imagination_exit
    sleep 0.5
  end
rescue => e
  echo "Error in script: #{e.message}"
  e.backtrace.each { |trace| echo trace }
end
