## vim: set ft=ruby:
=begin
	A script to help with CoL stuff. You can use:
		;col in
		;col out
		;col poohbah
		
	Using ;col by itself will attempt to do or turn in whatever task you're on.
	If it's skinning you must have the skins in your lootsack. ;set change lootsack <sack>
	
     author: spiffyjr
      email: theman@spiffyjr.me
       name: CoL Helper
       tags: society
    version: 1.0
=end

qna = {
	"A granite bench that serves a dual purpose as a grave marker sits between a pair of what sort of plants?" => "Junipers",
	"What creature's skull adorns the wall in The Legendary Rest's Desert Evening Room?" => "Minotaur"
}
items = { 
	'gold lockpick' => [ 5612 ],
	'heavy backpack' => [ 17290, 8664 ],
	'flowing white robe' => [ 8720, 12350 ],
	'arm greaves' => [ 12350, 12813 ],
	'tarnished silver wand' => [ 10364 ],
	'reinforced shield' => [ 12350, 12813 ],
	'chain hauberk' => [ 12350, 12813 ],
	'metal aventail' => [ 12350, 12813 ],
	'leather breastplate' => [ 12350, 12813 ],
	'crystal amulet' => [ 10364, 1249 ],
	'war hammer' => [ 12815 ],
	'silver wand' => [ 9396, 9278 ],
	'small chest' => [ 8664, 17290 ]
}

poohbah_locs = [ 4593 ]
col_entrances = [ 5922, 4595 ]

def holding?(item)
	item = item.to_s
	right = GameObj.right_hand
	left = GameObj.left_hand
	
	right.id.to_s == item or left.id.to_s == item or
	right.noun == item or left.noun == item or
	right.name == item or left.name == item
end

go2 = proc { |room|
	next if Room.current.id.to_s == room.to_s
	waitrt?

	wait_while{ running?('go2') }
	start_script('go2', [ room.to_s, '_disable_confirm_' ]);
	wait_while{ running?('go2') }
}
poohbah = proc { 
    go2.call(Room.current.find_nearest(poohbah_locs))
}

@@entrance = Room.current.find_nearest(col_entrances)

get_item = proc { |item, count|
	go2.call('bank')
	fput "withdraw 10000 silvers"
	
	go2.call(Room.current.find_nearest(items[item]))
	
	number = nil
	dothistimeout "order", 1, /You can APPRAISE/
	
	reget(20).each { |line| number = $1 if line =~ /(\d+)\. (?:a|an|some) (?:#{item})/ }
	
	if number.nil?
		echo '-- COL: unable to find item to buy', :all
		exit
	end
	
	fput "order #{count} of #{number}"
	fput "buy"
	fput "get package" unless holding?('package')
	
	go2.call('bank')
	fput "deposit all"
}

go2_col = proc {
	next if GameObj.npcs.find { |npc| npc.name =~ /Taskmaster/ }
	go2.call(@@entrance)
	
	if Room.current.id == 5922
		line = fput "go niche"		
		if line =~ /It was very dark and cramped in the niche/
			go2.call('town')
			echo '-- COL: not able to enter yet', :all
			exit
		end
		
		multifput 'touch pointed stone','push pointed stone','push small stone','push round stone','push long stone','push thick stone','push flat stone'
		move 'go hallway'
		move 'n'
		move 'n'
	end
}

out_col = proc {
	next unless checkarea =~ /Catacombs/ or checkarea =~ /Wine Cellar/
	
	npc = GameObj.npcs.first
	case npc.noun
		when /Services/
			move 'e'
		when /Gifts/
			move 's'
		when /Inquisitor/
			move 'w'
		when /Taskmaster/
		else
			next
	end
	
	if checkarea =~ /Catacombs/
		move 's'
		move 's'
		fput "stand"
		move 'go hallway'
		move 'out'
		fput 'search'
		move 'go crevice'
		go2.call('town')
	else
		go2.call('1481')
	end
}

offer_gift = proc {
	package = nil
	if checkleft =~ /package/
		package = GameObj.left_hand
	elsif checkright =~ /package/
		package = GameObj.right_hand
	end
	
	if package.nil?
		echo '-- COL: no package to give items with'
	end
	
	fput 'open my package'
	fput 'look in my package'
	sleep 1
	package.contents.each { |obj|
		fput "get ##{obj.id}"
		fput "put ##{obj.id} on altar"
		fput "offer ##{obj.id}"
	}
	fput 'drop my package'
	fput 'drop my package' if checkleft =~ /package/ or checkright =~ /package/
}

get_task = proc {
	dothistimeout 'society task', 3, /You have been tasked|Report to the/
}

if not (checkright =~ /package/ and checkleft.nil?) or (checkleft =~ /package/ and checkright.nil?)
	empty_hands
end

if script.vars[1] =~ /^out$/i
	out_col.call
	exit
elsif script.vars[1] =~ /^in$/i
	go2_col.call
	exit
elsif script.vars[1] =~ /^poohbah$/i
	poohbah.call
	exit
elsif script.vars[1] =~ /^help|\?$/i
end

line = get_task.call
case line
	when /Report to the High Taskmaster/
		if GameObj.npcs.find_all { |npc| npc.noun =~ /Taskmaster/ }.size > 0
			out_col.call
		else
			go2_col.call
		end
	when /Report to the Master of Gifts/
		go2_col.call
		move 'n'
		
		loop {
			line = get_task.call
			break if line !~ /Report to the Master of Gifts/
			
			sleep 1
		}
		
		move 's'
		out_col.call
	when /Report to the Master of Services/
		go2_col.call
		move 'w'
		
		loop {
			line = get_task.call
			break if line !~ /Report to the Master of Services/
			
			sleep 1
		}
		
		move 'e'
		out_col.call
	when /present the Master of Services with (\d+) more (.*)\./	
		count = $1
		skin  = $2.gsub(/s$/, '')
		
		out_col.call
		
		skinsack = GameObj[UserVars.lootsack]
		fput "open ##{skinsack.id}"
		if skinsack.contents.nil?
			fput "look in ##{skinsack.id}"
		end
		
		skins = skinsack.contents.find_all { |obj| obj.name =~ /#{skin}/}
		if skins.size >= count.to_i
			go2_col.call
			move 'w'
			
			count.to_i.times { 
				skin = skins.shift
				fput "get ##{skin.id}"			
				fput "offer ##{skin.id}"
			}
        else
            echo '-- you do not have enough skins yet'
            exit
		end
		
		move 'e'
	when /present the Master of Gifts with (\d+) more offerings? of (?:a|an|some) (.*)\./
		item = $2
		count = $1
		
		unless checkleft =~ /package/ or checkright =~ /package/
			out_col.call
			get_item.call(item,count)
		end
	
		go2_col.call
		
		move 'n'
		offer_gift.call
		move 's'
	when /Grand Inquisitor/
		go2_col.call
		
		move 'e'
		waitfor "#{Char.name}"
		reget(30).each { |line| qna.each_pair { |q,a| fput "answer #{a}" if line.include?(q) } }
		
		start_time = Time.now.to_f
		line = nil
		loop {
			if reget(1) =~ /The #{GameObj.npcs[0].noun}/
				line = reget(1)
				break
			end
			break if Time.now.to_f - start_time > 1
		}
		
		unless line =~ /Congratulations/
			echo '-- COL: you fucked up'
			exit
		end
end

fill_hands

