=begin
  lockmaster 1.3

  The lockmaster script will do the following:

  Usage: ;lockmaster [option]

  load - loads code to display lock value ranges alongside lock descriptions when measuring locks with your calipers.
  remove - unloads the code that displays lock value ranges.
  [debug] - [coming in v1.5] loads code to display relevant variables for each lock pick attempt.

  lock - Lock range reference.
  pick - Displays lock pick information with approximate safe and max lock limits for each pick based on your training and stats.
  notes - Shows 'pick' option with additional column definitions and Picking / Trap modifier notes.
  [trap] - [coming in v1.4] Trap range reference. [ranges are incomplete and need to be filled in - if you have info to add please let me know!]
  
  
  Version Notes:
  1.1 Cleaned up table output for folks using variable width fonts.
  1.2 Modified self-lore formula as it was consistently underrepresenting Max Lock (self lore).
      Changed self lore formula to use dex bonus vs. (dex bounus / 2), added MinElt Ranks / 10, exliminated X factor (prior value was 5)
      Also correct a formula error where I was using Ranks vs. bonus making the number even more conservative!
  1.3 Move 'lock' option to 'pick' which seems more appropriate (and makes room for the new 'lock' option.)
      Added 'lock' option which display a quick reference to lock ranges.
      Made some adjustments to display routine to correctly handle monsterbold in Stormfront.

  Callouts to ;lockpicks.lic, ;lockformulae.lic, and ;capacity.lic whose code examples were utilized in the initial creation of lockmaster.
  Thanks to: Nicolai, Nayolan, Rathboner, and JGALT22 for their input into ;lockmaster or the lore formulas!

  Feel free to contact me with questions, feedback, requests for additional features, etc. either
  in-game or via my play.net email address.

  -- Faulkil
=end


lmaction = proc { |server_string|
	if server_string =~ /Measuring carefully, it looks to be (.*) lock(.*)/m
		lock = $1
		end_stuff = $2
		if lock =~ /a primitive/i
			range = "5-35"
		elsif lock =~ /a rudimentary/i
			range = "40-75"
		elsif lock =~ /an extremely easy/i
			range = "80-115"
		elsif lock =~ /a very easy/i
			range = "120-155"
		elsif lock =~ /an easy/i
			range = "160-195"
		elsif lock =~ /a very basic/i
			range = "200-235"
		elsif lock =~ /a fairly easy/i
			range = "240-275"
		elsif lock =~ /a simple/i
			range = "280-315"
		elsif lock =~ /a fairly simple/i
			range = "320-355"
		elsif lock =~ /a fairly plain/i
			range = "360-395"
		elsif lock =~ /a moderately well-crafted/i
			range = "400-435"
		elsif lock =~ /a well-crafted/i
			range = "440-475"
		elsif lock =~ /a tricky/i
			range = "480-515"
		elsif lock =~ /a somewhat difficult/i
			range = "520-555"
		elsif lock =~ /a moderately difficult/i
			range = "560-595"
		elsif lock =~ /a very well-crafted/i
			range = "600-635"
		elsif lock =~ /a difficult/i
			range = "640-675"
		elsif lock =~ /an extremely well-crafted/i
			range = "680-715"
		elsif lock =~ /a very difficult/i
			range = "720-755"
		elsif lock =~ /a fairly complicated/i
			range = "760-795"
		elsif lock =~ /an intricate/i
			range = "800-835"
		elsif lock =~ /an amazingly well-crafted/i
			range = "840-875"
		elsif lock =~ /a very complex/i
			range = "880-915"
		elsif lock =~ /an impressively complicated/i
			range = "920-955"
		elsif lock =~ /an amazingly intricate/i
			range = "940-995"
		elsif lock =~ /an extremely difficult/i
			range = "1000-1035"
		elsif lock =~ /an extremely complex/i
			range = "1040-1075"
		elsif lock =~ /a masterfully well-crafted/i
			range = "1080-1115"
		elsif lock =~ /an amazingly complicated/i
			range = "1120-1155"
		elsif lock =~ /an astoundingly complex/i
			range = "1160-1195"
		elsif lock =~ /an incredibly intricate/i
			range = "1200-1235"
		elsif lock =~ /an absurdly well-crafted/i
			range = "1240-1275"
		elsif lock =~ /an exceedingly complex/i
			range = "1280-1315"
		elsif lock =~ /an absurdly difficult/i
			range = "1320-1355"
		elsif lock =~ /an unbelievably complicated/i
			range = "1360-1395"
		elsif lock =~ /a masterfully intricate/i
			range = "1400-1435"
		else
			range = "Unknown"
		end
		"Measuring carefully, it looks to be #{lock} (#{range}) lock#{end_stuff}"
	else
		server_string
	end
}


lmdebug = proc { |server_string|
	if server_string =~ /Measuring carefully, it looks to be (.*) lock(.*)/m
		lock = $1
		end_stuff = $2

		"Measuring carefully, it looks to be #{lock} (#{range}) lock#{end_stuff}"
	else
		server_string
	end
}

def lmmsg(mode, message)

  if mode == 1
  	if $fake_stormfront
    	then puts("\034GSL\r\n")
    	else puts("<pushBold\/>")
  	end
  	puts(message)
  	if $fake_stormfront
	    then puts("\034GSM\r\n")
	    else puts("<popBold\/>")
  	end
  else
    respond(message)
  end
end

#########################################################################

#Begin main program

if script.vars[1].downcase =~ /load/

 lmmsg(1,"Lock value ranges will now be displayed when measuring locks.")

	DownstreamHook.add('lockmaster', lmaction)

elsif (script.vars[1].downcase =~ /pick/ || script.vars[1].downcase =~ /note/)

	pick_list =	[
		["copper",  1.00, "poor",          0],
		["brass",   1.00, "very weak",     0],
		["steel",   1.10, "average",       1],
		["ivory",   1.20, "above average", 1],
		["gold",    1.20, "weak",          3],
		["silver",  1.30, "average",       3],
		["mithril", 1.45, "above average", 5],
		["ora",     1.55, "strong",        5],
		["glaes",   1.60, "incredible",    8],
		["laje",    1.75, "average",      12],
		["vultite", 1.80, "average",      20],
		["rolaren", 1.90, "very strong",  20],
		["veniom",  2.20, "excellent",    25],
		["invar",   2.25, "incredible",   35],
		["alum",    2.30, "very weak",    16],
		["golvern", 2.35, "strongest",    40],
		["kelyn",   2.40, "excellent",    30],
		["vaalin",  2.50, "incredible",   50]]

	arange = []

	#Calculate values for each lockpick

	baselock = Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1]
	
	selfloremodlock = (Stats.level / 2) + (Skills.to_bonus(Skills.pickinglocks) / 10) + Stats.dex[1] + (Spells.minorelemental / 10)

	#lore mod bonus cannot be greater than pick lock skill bonus.
	selfloremodlock = (selfloremodlock > Skills.to_bonus(Skills.pickinglocks) ? Skills.to_bonus(Skills.pickinglocks) : selfloremodlock)

	pick_list.each{ |pick, mod, strength, minlevel|
		lock = []
		lock.push(pick)
		lock.push(mod)
		lock.push(strength)
		lock.push(minlevel)
		lock.push((mod * baselock).floor)
		lock.push((mod * (baselock + selfloremodlock)).floor)

		arange.push(lock)
	}

	#Calculate trap values
	basetrap = Skills.to_bonus(Skills.disarmingtraps) + Stats.dex[1]

	selfloremodtrap = (Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + Stats.dex[1] + (Spells.minorelemental / 10)

	#lore mod bonus cannot be greater than pick lock skill bonus 
	selfloremodtrap = (selfloremodtrap > Skills.to_bonus(Skills.disarmingtraps) ? Skills.to_bonus(Skills.disarmingtraps) : selfloremodtrap)

	lmmsg(0,"..................  Lockmaster Calculate Lock and Trap Ranges  ...................")
	lmmsg(0,"         |      |               | Min   | Safe | Max  | Safe Lock   | Max Lock   |")
	lmmsg(0,"Material | Mod  | Strength      | Ranks | Lock | Lock | (Self Lore) | (Self Lore)|")
	lmmsg(0,"..................................................................................")
	arange.each{ |pick, mod, strength, minlevel, baselock, modlock |
		lmmsg(0,"#{pick.ljust(8)} | #{mod.to_s.ljust(4)} | #{strength.ljust(13)} | #{minlevel.to_s.rjust(5)} | #{(baselock-60).to_s.rjust(4)} | #{(baselock-1).to_s.rjust(4)} | #{(modlock-60).to_s.rjust(11)} | #{(modlock-1).to_s.rjust(10)} |")
	}
	lmmsg(0," ")
	lmmsg(0,"Safe Trap: #{basetrap-60}, Max Trap: #{basetrap -1}.")
	lmmsg(0,"Safe Trap (self lore): #{basetrap + selfloremodtrap - 60}, Max Trap (self lore): #{basetrap + selfloremodtrap -1}.")
	lmmsg(0," ")
	if script.vars[1].downcase =~ /pick/
		lmmsg(1,"Type ;lockmaster notes for more information.")
	else 
 		lmmsg(1,"Column Definitions:")
		lmmsg(0,"#{"Material".ljust(22)}: Lock pick material.")
		lmmsg(0,"#{"Strength".ljust(22)}: How resistant is the pick to breaking.")
		lmmsg(0,"#{"Mod".ljust(22)}: Multiplier to lockpick skill level when using pick.")
		lmmsg(0,"#{"Strength".ljust(22)}: How resistant is the pick to breaking.")
		lmmsg(0,"#{"Min Ranks".ljust(22)}: Minumum number of Lock Picking Ranks required to avoid a penalty when using the lock pick.")
		lmmsg(0,"#{"Safe Lock".ljust(22)}: *Approximate lock threshold where you won't break your pick on a failed roll.  Fumbles excluded.")
		lmmsg(0,"#{"Max Lock".ljust(22)}: *Approximate highest lock threshold using this pick.")
		lmmsg(0,"#{"Safe Lock (Self Lore)".ljust(22)}: *Approximate lock threshold where you won't break your pick on a failed roll.  Fumbles excluded.")
		lmmsg(0,"#{"Max Lock (self Lore)".ljust(22)}: *Approximate highest lock threshold using this pick.")
		lmmsg(0,"")
		lmmsg(0,"*Note: all values are approximate and assume average conditions / standard lockpicks.  Additional factors may noticably influence the locks and traps you are able to detect, disarm, or open.")
		lmmsg(0,"")
		lmmsg(1,"Spotting traps:")
		lmmsg(0,"Helps - Disarming Traps skill, Intuition bonus, Perception skill, Traplore, Presence, Self Control, good lighting, Lucksong (helps your luck)")
		lmmsg(0,"Hurts - Trap discovery difficulty, wounds, Sounds, Interference, Weapon Deflection, bad lighting, fog, fumbles")
		lmmsg(0,"")
		lmmsg(1,"Disarming traps:")
		lmmsg(0,"Helps - Disarm skill, Dexterity bonus, Lucksong (helps your luck), Traplore, Self Control, good lighting, 'modding down'")
		lmmsg(0,"Hurts - Trap disarming difficulty, fumbles, Sounds, Interference, Weapon Deflection, bad lighting, fog, wounds")
		lmmsg(0,"")
		lmmsg(1,"Picking:")
		lmmsg(0,"Helps - Picking skill, Dexterity bonus, Locklore, lockpick, open rolls, 'modding down'")
		lmmsg(0,"Hurts - Wounds, not enough skill for the used lockpick, fumbles")
  	end

elsif script.vars[1].downcase =~ /remove/
	lmmsg(1,"Lock value ranges will no longer be displayed when measuring locks.")

	DownstreamHook.remove('lockmaster')

elsif script.vars[1].downcase =~ /lock/
	lock_list = [
		["primitive"                ,    -5,   -40],
		["Rudimentary"              ,   -45,   -75],
		["Extremely Easy"           ,   -80,  -115],
		["Very Easy"                ,  -120,  -155],
		["Easy"                     ,  -160,  -195],
		["Very Basic"               ,  -200,  -235],
		["Fairly Easy"              ,  -240,  -275],
		["Simple"                   ,  -280,  -315],
		["Fairly Simple"            ,  -320,  -355],
		["Fairly Plain"             ,  -360,  -395],
	    ["Moderately Well Crafted"  ,  -400,  -435],
	    ["Well Crafted"             ,  -440,  -475],
	    ["Tricky"                   ,  -480,  -515],
	    ["Somewhat Difficult"       ,  -520,  -555],
	    ["Moderately Difficult"     ,  -560,  -595],
	    ["Very Well Crafted"        ,  -600,  -635],
	    ["Difficult"                ,  -640,  -675],
	    ["Extremely Well Crafted"   ,  -680,  -715],
	    ["Very Difficult"           ,  -720,  -755],
	    ["Fairly Complicated"       ,  -760,  -795],
	    ["Intricate"                ,  -800,  -835],
	    ["Amazingly Well-Crafted"   ,  -840,  -875],
	    ["Very Complex"             ,  -880,  -915],
	    ["Impressively Complicated" ,  -920,  -955],
	    ["Amazingly Intricate"      ,  -960,  -995],
	    ["Extremely Difficult"      , -1000, -1035],
	    ["Extremely Complex"        , -1040, -1075],
	    ["Masterfully Well-Crafted" , -1080, -1115],
	    ["Amazingly Complicated"    , -1120, -1155],
	    ["Astoundingly Complex"     , -1160, -1195],
	    ["Incredibly Intricate"     , -1200, -1235],
	    ["Absurdly Well-Crafted"    , -1240, -1275],
	    ["Exceedingly Complex"      , -1280, -1315],
	    ["Absurdly Difficult"       , -1320, -1355],
	    ["Unbelievably Complicated" , -1360, -1395],
	    ["Masterfully Intricate"    , -1400, -1435]]
	    
	lmmsg(0,"..............  Lockmaster ................")
	lmmsg(0,"      Lock Rating Quick Reference         |")
	lmmsg(0,"Lock Rating               | From |  To    |")
	lmmsg(0,"...........................................")
	lock_list.each{ |lock, minlock, maxlock |
		lmmsg(0,"#{lock.ljust(25)} | #{minlock.to_s.rjust(5)} | #{maxlock.to_s.rjust(5)} |")
	}
	lmmsg(0,"...........................................")
	
elsif script.vars[1].downcase =~ /trap/

	lmmsg(0,"..................  Lockmaster Calculate Lock and Trap Ranges  ...................")
	lmmsg(0,"         |      |               | Min   | Safe | Max  | Safe Lock   | Max Lock   |")
	lmmsg(0,"Material | Mod  | Strength      | Ranks | Lock | Lock | (Self Lore) | (Self Lore)|")
	lmmsg(0,"..................................................................................")

else
	lmmsg(1,"=== LockMaster 1.3 Usage ===")
	lmmsg(0,";lockmaster load - loads code to display lock value ranges alongside lock descriptions when measuring locks with your calipers.")
	lmmsg(0,";lockmaster remove - unloads the code that displays lock value ranges.")
	lmmsg(0,";lockmaster lock - Lock value range quick reference.")
	lmmsg(0,";lockmaster pick - Displays lock pick information with approximate safe and max lock limits for each pick based on your training and stats.")
	lmmsg(0,";lockmaster notes - Shows 'lock' option with additional column definitions and Picking / Trap modifier notes.")
	
end
