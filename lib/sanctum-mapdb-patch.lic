module Periapt
  Rooms ||= Map.list.select {|r| r.tags.include?("sanctum")}
  Rooms.size.eql?(2) or fail <<~ERR
    Error:map:integrity
    there were #{Rooms.size} rooms with tag=sanctum found
    it must be exactly 2
  ERR

  def self.use_periapt()
    dothistimeout("rub #%s" % self.periapt.id, 5, 
      Regexp.union(
        %r[spiraling out to form a swirling viridian portal hanging in midair],
        %r[light crackles in its inlaid emerald like forked lightning, but nothing else happens.],
        %r[is already active]))
  end

  def self.use_existing_portal()
    tries = 0
    1.times {
      waitrt?
      fput "stand" until standing?
      if portal = self.portal?
        last_count = XMLData.room_count
        ttl = Time.now + 3
        move "go #%s" % portal.id
        wait_while {XMLData.room_count.eql?(last_count) and Time.now < ttl}
        fail "could not traverse across the portal in #{tries} tries" if tries > 2
        if Time.now > ttl
          tries = tries + 1
          redo
        end
      end
    }
  end

  def self.exists?
    GameObj.inv.find {|item| item.name.eql?("small bone periapt")}
  end

  @periapt = nil
  def self.periapt()
    @periapt ||= self.exists?
    @periapt or fail <<~ERR
      could not find your periapt in your inventory
    ERR
  end

  def self.portal?
    GameObj.loot.find {|item| item.name.eql?(%[swirling viridian portal])}
  end

  def self.teleport()
    return self.use_existing_portal if self.portal?
    self.use_periapt
    return self.use_existing_portal if self.portal?
    wait_until("waiting on someone to create a portal") {self.portal?}
    self.use_existing_portal
  end

  def self.patch_mapdb()
    Rooms.permutation.each {|from, to|
      from.wayto[to.id.to_s] = StringProc.new <<~Wayto
        Periapt.teleport
      Wayto

      from.timeto[to.id.to_s] = StringProc.new <<~Timeto
        Periapt.exists? ? 5 : nil
      Timeto
    }
  end

  def self.add_context_tags
    #return if Rooms.map(&:tags).flatten.include?("sos")
    Rooms.each {|r| 
      if r.find_nearest_by_tag("town").nil?
        r.tags << "sos"
        r.tags << "sanctum"
        r.tags.uniq!
      else
        r.tags.delete("sanctum")
      end

      echo "%s -> %s" % [r.title.first, r.tags]
      Map.list[r.id] = r
    }
  end

  self.add_context_tags
  self.patch_mapdb
end