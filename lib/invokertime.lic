=begin
 invoker timer scriptt

 tags: invoker
 version: 1.05

Please run ;invokertime help for configuration setup
Can run ;invokertime        [ by its self to return countdown time till next arrival ]
Can run ;invokertime help   [ for help info]
Can run ;invokertime run    [ to run auto goto invoker and get spells or enable prompting before going ]

BESURE TO SET DST (DAYLIGHT SAVINGS TIME) setting if currently day light savings to get right time!
made by Oguo, email krisrmgua@gmail.com

 **Change Log**
 1.00 - intial release
 1.01 - adding go to invoker and ask for spells at desired times before he arrives
 1.02 - invoker times changed DST updated times
 1.03 - added DST variable to toggle on and off for DST time changes
 1.04 - added option, if bigshot is running to kill it and start again for invoker
 1.05 - updated DST to be global so updates for all charecters
=end

squelch_time = proc{
        started = false
        hook_proc = proc { |s|
                if started
                        if s =~ /<prompt/
                                DownstreamHook.remove('squelch-time')
                                nil
                        elsif s =~ /<output/
                                s
                        else
                                nil
                        end
                elsif s =~ /^Today is/
                        started = true
                        nil
                else
                        s
                end
        }
        DownstreamHook.add('squelch-time', hook_proc)
}

$HL = nil
$ML = nil
$DST = 0;

go_to_inv = proc {
  bigshot = false
  if Script.running? "bigshot"
    bigshot = true
    Script.kill "bigshot"
  end
  Script.run('go2', '288')
  loop {
    findinv = nil
    GameObj.npcs.find { |npc| findinv = 1 if npc.noun =~ /invoker/i }
    if findinv
      fput "ask invo for spells"
      break
    end
    sleep 1
  }
  Script.start "bigshot" if bigshot
}

get_time_left = proc {
  squelch_time.call
  silence_me
  fput "time"
  silence_me
  line = matchtimeout 3, "by the elven"
  if line =~ /It is (\d+):(\d+) by the elven/
    hour = $1
    min = $2

    ## 12am
    if hour == "00"
      hL = 1 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 1am
    elsif hour == "01"
      hL = 0 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 2am
    elsif hour == "02"
      hL = 1 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 3am
    elsif hour == "03"
      hL = 0 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 4am
    elsif hour == "04"
      hL = 3 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 5am
    elsif hour == "05"
      hL = 2 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 6am
    elsif hour == "06"
      hL = 1 if $DST == 0
      hL = 3 if $DST == 1
      mL = 60 - min.to_i

    ## 7am
    elsif hour == "07"
      hL = 0 if $DST == 0
      hL = 2 if $DST == 1
      mL = 60 - min.to_i

    ## 8am
    elsif hour == "08"
      hL = 3 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 9am
    elsif hour == "09"
      hL = 2 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 10am
    elsif hour == "10"
      hL = 1 if $DST == 0
      hL = 3 if $DST == 1
      mL = 60 - min.to_i

    ## 11am
    elsif hour == "11"
      hL = 0 if $DST == 0
      hL = 2 if $DST == 1
      mL = 60 - min.to_i

    ## 12 pm
    elsif hour == "12"
      hL = 3 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 1 pm
    elsif hour == "13"
      hL = 2 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 2pm
    elsif hour == "14"
      hL = 1 if $DST == 0
      hL = 3 if $DST == 1
      mL = 60 - min.to_i

    ## 3pm
    elsif hour == "15"
      hL = 0 if $DST == 0
      hL = 2 if $DST == 1
      mL = 60 - min.to_i

    ## 4pm
    elsif hour == "16"
      hL = 1 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 5pm
    elsif hour == "17"
      hL = 0 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 6pm
    elsif hour == "18"
      hL = 1 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 7pm
    elsif hour == "19"
      hL = 0 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 8pm
    elsif hour == "20"
      hL = 1 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 9pm
    elsif hour == "21"
      hL = 0 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i

    ## 10pm
    elsif hour == "22"
      hL = 1 if $DST == 0
      hL = 1 if $DST == 1
      mL = 60 - min.to_i

    ## 11pm
    elsif hour == "23"
      hL = 0 if $DST == 0
      hL = 0 if $DST == 1
      mL = 60 - min.to_i
    end
  
    $HL = hL
    $ML = mL
  end
}
##00 02 04 06 10 14 18 20 22
##00 02 04 08 12 16 18 20 22
DSTsav = Settings['invokerDST']
if DSTsav.nil?
  Settings['invokerDST'] = 0
end
if UserVars.invokertime.nil?
  Vars['invokertime'] = 2
end
if UserVars.invokerprompt.nil?
  Vars['invokerprompt'] = 0
end
#$DST = UserVars.invokerDST.to_i
$DST = Settings['invokerDST'].to_i
if UserVars.invokertime.to_i < 1 or UserVars.invokertime.to_i > 59
    respond "[[ INVOKERTIME]]\n"
    respond "-------------------------------------------------------------------------------------------------------\n"
    respond ";vars set invokertime=##  - VALUE MUST BE A INTEGER between 1 - 59"
    respond "-------------------------------------------------------------------------------------------------------\n"
    exit
end
if script.vars[1]
  option = script.vars[1]
  if option == "run"
    loop {
        get_time_left.call()
        if $HL == 1 or $HL == 2 or $HL == 3
            ## do nothing still more than a hour till arrival
        else
            if $ML <= UserVars.invokertime.to_i   ## If min till arrival is less than user defined time than go to invoker
                if UserVars.invokerprompt.to_i == 1
                    respond "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
                    respond "!!!!!!!!!!!!  INVOKERTIME !!!!!!!!!!!!\n"
                    respond "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
                    respond "-------------------------------------------------------------------------------------------------------\n"
                    respond "| Invoker arriving in #{UserVars.invokertime} minute(s) go now?\n"
                    respond "-------------------------------------------------------------------------------------------------------\n"
                    respond "Type ;send GO"
                    respond "-------------------------------------------------------------------------------------------------------\n"
                    line = get until line.strip =~ /^GO$/i
                    if line =~ /^GO$/i
                        go_to_inv.call()
                    end
                else
                    respond "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
                    respond "!!!!!!!!!!!!  INVOKERTIME !!!!!!!!!!!!\n"
                    respond "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
                    respond "-------------------------------------------------------------------------------------------------------\n"
                    respond "| Invoker arriving in #{UserVars.invokertime} minute(s) heading there now\n"
                    respond "-------------------------------------------------------------------------------------------------------\n"
                    go_to_inv.call()
                end
            end
        end
        sleep 60
    }
  elsif option == "DST"
    option2 = script.vars[2]
    if option2 == "0"
      Settings['invokerDST'] = 0
    elsif option2 == "1"
      Settings['invokerDST'] = 1
    else
      echo "BAD OPTION!"
    end
  else
    respond "[[ INVOKERTIME]]\n"
    respond "--------------------------------------------------------------------------------------------------------------------------\n"
    respond "|  ;invokertime               - get countdown time for next invoker arrival\n"
    respond "|  ;invokertime run           - run script constantly will go to park and ask for\n"
    respond "|                               spells (#{UserVars.invokertime}) minute(s) before he arrives\n"
    respond "|  ;vars set invokertime=##   - set number of minutes [1-59] to head to invoker before arrival. [#{UserVars.invokertime}] Default: 2\n"
    respond "|  ;vars set invokerprompt=1  - ask me to go to invoker when its time. [#{UserVars.invokerprompt}] Default: 0\n" 
    respond "|  ;invokertime DS1 1         - in march turn on DST by setting to 1 then when DST ends set back to 0  [#{Settings['invokerDST']}]\n"
    respond "--------------------------------------------------------------------------------------------------------------------------\n"
  end
else
  get_time_left.call()
  if $HL == 1 or $HL == 2 or $HL == 3
    respond "[[[[  #{$HL} hours and #{$ML} minutes till invoker returns!  ]]]]"
  else
    respond "[[[[  #{$ML} minutes till invoker returns!  ]]]]"
  end
end
