=begin
  This script creates a dedicated window to display other players in the room
  and their statuses in real time.
  Features:
  - Continuously updates with current players in the room.
  - Displays statuses (if available) in a standardized format.
  - Automatically removes players that leave.
  - Uses consistent window formatting.
  - Allows you to click on another player that is sleeping to POKE them awake.
  - Allows you to click on another player that is prone to PULL them up.
  - (Spell 108 Known) Allows you to click on another player that is stunned to cast 108 and UNSTUN them.
  - Allows you to click on another player that is stunned and wave any oak wand in your inventory at them to UNSTUN THEM.
  - (Spell 209 Known) Allows you to click on a player that is webbed to cast 209 and UNTRAMMEL them.
  
author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, players, pc
=end

hide_me
unless ['wrayth', 'stormfront'].include?($frontend)
  echo("This script is only compatible with Wrayth.")
  exit
end

# Open the players window using Wrayth's dynamic dialog.
puts("<closeDialog id='PlayerWindow'/><openDialog type='dynamic' id='PlayerWindow' title='Players' target='PlayerWindow' scroll='manual' location='main' justify='3' height='100' resident='true'><dialogData id='PlayerWindow'></dialogData></openDialog>")

@last_pcs = []

# Standardize status names for players.
def status_fix(status)
  case status
  when /dead/i then "dead"
  when /sitting/i then "sitting"
  when /kneeling/i then "kneeling"
  when /stunned/i then "stunned"
  when /calmed/i  then "calmed"
  when /frozen/i  then "frozen"
  when /held/i    then "held"
  when /web/i then "webbed"
  when /prone|lying down|knocked to the ground/i then "prone"
  when /unconscious|slumber|sleeping/i then "sleeping"
  else nil
  end
end

def oak_wand_check
  wands = {}
  GameObj.containers.each { |container| wands[container[0]] = []; GameObj[container[0]].contents.each { |item| wands[container[0]].push(item) if item.name =~ /oak(?:en)? (?:rod|wand)$/ } }
  return wands.first
end


#";e fput('get oak wand'); fput('wave wand at ##{player_id}')"
# Determine action based on player status.
def action_for_status(status, pc)
  case status
  when "stunned"
    if Spell[108].known?
      return ";e Spell[108].force_cast('##{pc.id}') if Spell[108].affordable?"
elsif wand_object = oak_wand_check
  wand_container_id = wand_object[0]
  wand = wand_object[1].first  # Get the first wand in the array
  
  if wand  # Ensure there's a wand to work with
    return ";e empty_hand; fput 'get ##{wand.id}'; fput 'wave ##{wand.id} at ##{pc.id}'; fput '_drag ##{wand.id} ##{wand_container_id}'; fill_hand"
  end
end

  when "sitting", "kneeling", "prone"
    return "pull ##{pc.id}"
  when "sleeping", "unconscious"
    return "poke ##{pc.id}"
  when "webbed"
    if Spell[209].known?
      return ";e Spell[209].force_cast('##{pc.id}') if Spell[209].affordable?"
    end
  end
end

# Build and push the player list to the window.
def push_players_to_window(pcs)
  output = "<dialogData id='PlayerWindow' clear='t'>"
  output += "<label id='total' value='PCs: #{pcs.size}' />"
  pcs.each_with_index do |pc, index|
    status = (pc.respond_to?(:status) && pc.status) ? status_fix(pc.status) : nil
    label_value = status ? "#{pc.name} (#{status})" : pc.name
    action_cmd = action_for_status(status, pc)
    
    output += "<link id='player_#{index}' value='#{label_value}' cmd=\"#{action_cmd}\" echo=\"#{action_cmd}\" justify='bottom' left='0' top='#{20 * (index + 1)}' />"
  end
  output += "</dialogData>"
  puts(output)
end

# Main update loop.
loop do
  pcs = GameObj.pcs.reject { |pc| pc.name == Char.name }
  if pcs != @last_pcs
    @last_pcs = pcs
    push_players_to_window(pcs)
  end
  sleep 0.025
end

echo "Dedicated Player Window is active."
