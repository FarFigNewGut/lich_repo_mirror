=begin
  https://discordapp.com/channels/226045346399256576/1339018254517145681

  This script creates a dedicated window to display other players in the room
  and their statuses in real time.
  Features:
  - Continuously updates with current players in the room.
  - Displays statuses (if available) in a standardized format.
  - Automatically removes players that leave.
  - Uses consistent window formatting.
  - Allows you to click on another player that is sleeping to POKE them awake.
  - Allows you to click on another player that is prone to PULL them up.
  - (Spell 108 Known) Allows you to click on another player that is stunned to cast 108 and UNSTUN them.
  - Allows you to click on another player that is stunned and wave any oak wand in your inventory at them to UNSTUN THEM.
  - (Spell 209 Known) Allows you to click on a player that is webbed to cast 209 and UNTRAMMEL them.
  - If you are an empath, allows you to click on another player that is injured and attempt to heal them using the lich script ;ecure.
  - Will only display player names (nouns) and will display them alphabetically.

  Changelog:
   1.2.0 (2025-05-31)
        Added Spam Filter On|Off to allow you to filter out all other players' spell casting, herb munching, empath healing, and urchin movement.
   1.0.0 (2025-02-11)
     Initial release.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, players, pc
=end

hide_me
unless ['wrayth', 'stormfront'].include?($frontend)
  echo("This script is only compatible with Wrayth.")
  exit
end

# Open the players window using Wrayth's dynamic dialog.
puts("<closeDialog id='PlayerWindow'/><openDialog type='dynamic' id='PlayerWindow' title='Players' target='PlayerWindow' scroll='manual' location='main' justify='3' height='100' resident='true'><dialogData id='PlayerWindow'></dialogData></openDialog>")

@last_pcs = []
@last_filter_state = nil # Track last known state of @filter_spells

# Standardize status names for players.
# Standardize status names for players, prioritizing "stunned" over "prone".
def player_status_fix(status)
  return "dead" if status =~ /dead/i
  return "stunned" if status =~ /stunned/i # Ensure "stunned" takes precedence
  return "sleeping" if status =~ /unconscious|slumber|sleeping/i
  return "prone" if status =~ /lying down|prone|knocked to the ground/i
  return "sitting" if status =~ /sitting/i
  return "kneeling" if status =~ /kneeling/i
  return "calmed" if status =~ /calmed/i
  return "frozen" if status =~ /frozen/i
  return "held" if status =~ /held/i
  return "webbed" if status =~ /web/i
  return nil
end

def oak_wand_check
  wands = {}
  GameObj.containers.each { |container| wands[container[0]] = []; GameObj[container[0]].contents.each { |item| wands[container[0]].push(item) if item.name =~ /oak(?:en)? (?:rod|wand)$/ } }
  return wands.first
end

# ";e fput('get oak wand'); fput('wave wand at ##{player_id}')"
# Determine action based on player status.
def action_for_status(status, pc)
  case status
  when "stunned"
    if Spell[108].known?
      return ";e Spell[108].force_cast('##{pc.id}') if Spell[108].affordable?"
    elsif (wand_object = oak_wand_check)
      wand_container_id = wand_object[0]
      wand = wand_object[1].first # Get the first wand in the array
      if wand # Ensure there's a wand to work with
        return ";e empty_hand; fput 'get ##{wand.id}'; fput 'wave ##{wand.id} at ##{pc.id}'; fput '_drag ##{wand.id} ##{wand_container_id}'; fill_hand"
      end
    end
  when "sitting", "kneeling", "prone"
    return "pull ##{pc.id}"
  when "sleeping", "unconscious"
    return "poke ##{pc.id}"
  when "webbed"
    if Spell[209].known?
      return ";e Spell[209].force_cast('##{pc.id}') if Spell[209].affordable?"
    end
  when nil && Char.profession =~ /empath/i
    return ";e kill_script 'ecure' if running?('ecure'); start_script('ecure', ['#{pc.name}'])"
  end
end

# Extracts the noun from the XML-based name format: <a exist="-11226620" noun="Lamamelodia">Lamamelodia</a>
def extract_noun(pc)
  return pc.noun if pc.respond_to?(:noun) && pc.noun
  return pc.name # Fallback to name if noun is unavailable
end

# Build and push the player list to the window, sorting by noun.
def push_players_to_window(pcs)
  sorted_pcs = pcs.sort_by { |pc| extract_noun(pc).downcase }

  output = "<dialogData id='PlayerWindow' clear='t'>"

  # First row: Filter toggle at top = 0
  filter_value = @filter_spam ? 'Spam Filter: ON' : 'Spam Filter: OFF'
  filter_cmd = "*filterspam"
  output += "<link id='filter_toggle' value='#{filter_value}' cmd='#{filter_cmd}' echo='Toggling Spam Filter...' justify='bottom' left='0' top='0' />"

  # Second row: PCs label at top = 20
  output += "<label id='total' value='PCs: #{sorted_pcs.size}' justify='bottom' left='0' top='20' />"

  # Remaining rows: Players, starting at top = 40
  top_offset = 2 # 2 lines above + 1 for spacing
  sorted_pcs.each_with_index do |pc, index|
    noun = extract_noun(pc)
    status = (pc.respond_to?(:status) && pc.status) ? player_status_fix(pc.status) : nil
    label_value = status ? "#{noun} (#{status})" : noun
    action_cmd = action_for_status(status, pc)

    output += "<link id='player_#{index}' value='#{label_value}' cmd=\"#{action_cmd}\" echo=\"#{action_cmd}\" justify='bottom' left='0' top='#{20 * (index + top_offset)}' />"
  end

  output += "</dialogData>"
  puts(output)
end

@filter_spam = true # default ON

UPSTREAM_HOOK_ID = "playerwindow::upstream"
DOWNSTREAM_HOOK_ID = "playerwindow::downstream"

UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
  case command.strip.downcase
  when /\*filterspam/i
    @filter_spam = !@filter_spam
    respond "Spam filtering is now #{@filter_spam ? 'ENABLED' : 'DISABLED'}."
    nil
  else
    command
  end
end)

@skip_next_line = false
@skip_two_lines = false

DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc { |line, _server_string|
  line = line.to_s # ensure itâ€™s always a String

  next line unless @filter_spam
  # Step 3: Skip line after gestures (effect)
  if @skip_next_line
    @skip_next_line = false
    next ""
  end

  # Step 2: Match gesture line, flag to skip next
  if line =~ /gestures at you\./
    @skip_next_line = false
  elsif line =~ /gestures\.|makes a complex gesture\.|continues to wax\.|killfully begins to weave another verse into/
    @skip_next_line = true
    next ""
  end

  # Step 1: Match spell prep (ending with ...)
  if line =~ /\.\.\.\s*$/ && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Custom Spell Preps
  if line =~ /hands over the ground, and a sudden chill fills the air as shadows rise to|wrists and condenses into thrice-wrapped coils as|whispers arcane incantations, and the air about|hands imbued with a flickering white light|upturned palms and drift upwards as they build in intensity|plucks two illusory strands out of the air and knots them together|completes several complex gestures while an incantation tumbles from/
    next ""
  end

  # Mana Spellups & Transfers
  if line =~ /releases upon .* a flurry of abjurations|Suddenly, a small bolt of energy arcs between them/i
    next ""
  end
  # Bard Songs
  if line =~ /renews .* songs|voice in rhythmic song\, commanding the aid of the elements/
    next ""
  end
  # Remove Healing
  if line =~ /takes a drink|takes a bite|concentrates|wound gradually fades\, forming on|dwarf empath tattoo|begins to look better as the cuts on/ && line !~ /#{Regexp.escape(Char.name)}/
    @skip_next_line = true
    next ""
  end

  # Manna Bread
  if line =~ /gobbles down a big bite|in one enormous bite/
    next ""
  end

  # Enhancive Armoires
  if line =~ /armoire/ && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Urchins
  if line =~ /with <a [^>]*?noun="([^"]+)">[^<]*<\/a> in tow/i
    name = $1.capitalize

    respond "#{name} leaves with an urchin."
    next ""
  elsif line =~ /who nods to <a [^>]*?noun="([^"]+)">[^<]*<\/a> and quickly/i
    name = $1.capitalize

    respond "#{name} enters with an urchin."
    next ""
  end

  line
})

before_dying do
  UpstreamHook.remove(UPSTREAM_HOOK_ID)
  DownstreamHook.remove(DOWNSTREAM_HOOK_ID)
end

# Main update loop.
loop do
  pcs = GameObj.pcs.reject { |pc| pc.name == Char.name }

  if pcs != @last_pcs || @filter_spells != @last_filter_state
    @last_pcs = pcs
    @last_filter_state = @filter_spells
    push_players_to_window(pcs)
  end

  sleep 0.025
end

echo "Dedicated Player Window is active."
