=begin
  https://discordapp.com/channels/226045346399256576/1339018254517145681

  This script creates a dedicated window to display other players in the room
  and their statuses in real time.
  Features:
  - Continuously updates with current players in the room.
  - Displays statuses (if available) in a standardized format.
  - Automatically removes players that leave.
  - Uses consistent window formatting.
  - Allows you to click on another player that is sleeping to POKE them awake.
  - Allows you to click on another player that is prone to PULL them up.
  - (Spell 108 Known) Allows you to click on another player that is stunned to cast 108 and UNSTUN them.
  - Allows you to click on another player that is stunned and wave any oak wand in your inventory at them to UNSTUN THEM.
  - (Spell 209 Known) Allows you to click on a player that is webbed to cast 209 and UNTRAMMEL them.
  - If you are an empath, allows you to click on another player that is injured and attempt to heal them using the lich script ;ecure.
  - Will only display player names (nouns) and will display them alphabetically.
  
author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, players, pc
=end

hide_me
unless ['wrayth', 'stormfront'].include?($frontend)
  echo("This script is only compatible with Wrayth.")
  exit
end

# Open the players window using Wrayth's dynamic dialog.
puts("<closeDialog id='PlayerWindow'/><openDialog type='dynamic' id='PlayerWindow' title='Players' target='PlayerWindow' scroll='manual' location='main' justify='3' height='100' resident='true'><dialogData id='PlayerWindow'></dialogData></openDialog>")

@last_pcs = []

# Standardize status names for players.
# Standardize status names for players, prioritizing "stunned" over "prone".
def status_fix(status)
  return "dead" if status =~ /dead/i
  return "stunned" if status =~ /stunned/i  # Ensure "stunned" takes precedence
  return "sleeping" if status =~ /unconscious|slumber|sleeping/i
  return "prone" if status =~ /lying down|prone|knocked to the ground/i
  return "sitting" if status =~ /sitting/i
  return "kneeling" if status =~ /kneeling/i
  return "calmed" if status =~ /calmed/i
  return "frozen" if status =~ /frozen/i
  return "held" if status =~ /held/i
  return "webbed" if status =~ /web/i
  return nil
end

def oak_wand_check
  wands = {}
  GameObj.containers.each { |container| wands[container[0]] = []; GameObj[container[0]].contents.each { |item| wands[container[0]].push(item) if item.name =~ /oak(?:en)? (?:rod|wand)$/ } }
  return wands.first
end


#";e fput('get oak wand'); fput('wave wand at ##{player_id}')"
# Determine action based on player status.
def action_for_status(status, pc)
  case status
  when "stunned"
    if Spell[108].known?
      return ";e Spell[108].force_cast('##{pc.id}') if Spell[108].affordable?"
	elsif wand_object = oak_wand_check
	  wand_container_id = wand_object[0]
	  wand = wand_object[1].first  # Get the first wand in the array 
	  if wand  # Ensure there's a wand to work with
        return ";e empty_hand; fput 'get ##{wand.id}'; fput 'wave ##{wand.id} at ##{pc.id}'; fput '_drag ##{wand.id} ##{wand_container_id}'; fill_hand"
      end
    end
  when "sitting", "kneeling", "prone"
    return "pull ##{pc.id}"
  when "sleeping", "unconscious"
    return "poke ##{pc.id}"
  when "webbed"
    if Spell[209].known?
      return ";e Spell[209].force_cast('##{pc.id}') if Spell[209].affordable?"
    end
  when nil && Char.profession =~ /empath/i
    return ";e kill_script 'ecure' if running?('ecure'); start_script('ecure', ['#{pc.name}'])"
  end
end

# Extracts the noun from the XML-based name format: <a exist="-11226620" noun="Lamamelodia">Lamamelodia</a>
def extract_noun(pc)
  return pc.noun if pc.respond_to?(:noun) && pc.noun
  return pc.name # Fallback to name if noun is unavailable
end

# Build and push the player list to the window, sorting by noun.
def push_players_to_window(pcs)
  sorted_pcs = pcs.sort_by { |pc| extract_noun(pc).downcase } # Sort by noun alphabetically

  output = "<dialogData id='PlayerWindow' clear='t'>"
  output += "<label id='total' value='PCs: #{sorted_pcs.size}' />"
  
  sorted_pcs.each_with_index do |pc, index|
    noun = extract_noun(pc) # Extract the noun for display
    status = (pc.respond_to?(:status) && pc.status) ? status_fix(pc.status) : nil
    label_value = status ? "#{noun} (#{status})" : noun # Show only the noun
    action_cmd = action_for_status(status, pc)
    
    output += "<link id='player_#{index}' value='#{label_value}' cmd=\"#{action_cmd}\" echo=\"#{action_cmd}\" justify='bottom' left='0' top='#{20 * (index + 1)}' />"
  end

  output += "</dialogData>"
  puts(output)
end

# Main update loop.
loop do
  pcs = GameObj.pcs.reject { |pc| pc.name == Char.name }
  if pcs != @last_pcs
    @last_pcs = pcs
    push_players_to_window(pcs)
  end
  sleep 0.025
end

echo "Dedicated Player Window is active."
