=begin
  https://discordapp.com/channels/226045346399256576/1339018254517145681

  This script creates a dedicated window to display other players in the room
  and their statuses in real time.
  Features:
  - Continuously updates with current players in the room.
  - Displays statuses (if available) in a standardized format.
  - Automatically removes players that leave.
  - Uses consistent window formatting.
  - Allows you to click on another player that is sleeping to POKE them awake.
  - Allows you to click on another player that is prone to PULL them up.
  - (Spell 108 Known) Allows you to click on another player that is stunned to cast 108 and UNSTUN them.
  - Allows you to click on another player that is stunned and wave any oak wand in your inventory at them to UNSTUN THEM.
  - (Spell 209 Known) Allows you to click on a player that is webbed to cast 209 and UNTRAMMEL them.
  - If you are an empath, allows you to click on another player that is injured and attempt to heal them using the lich script ;ecure.
  - Will only display player names (nouns) and will display them alphabetically.

  Changelog:
   1.2.0 (2025-05-31)
        Added Spam Filter On|Off to allow you to filter out all other players' spell casting, herb munching, empath healing, and urchin movement.
   1.0.0 (2025-02-11)
     Initial release.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, target, players, pc
=end

hide_me
unless ['wrayth', 'stormfront'].include?($frontend)
  echo("This script is only compatible with Wrayth.")
  exit
end

# Open the players window using Wrayth's dynamic dialog.
puts("<closeDialog id='PlayerWindow'/><openDialog type='dynamic' id='PlayerWindow' title='Players' target='PlayerWindow' scroll='manual' location='main' justify='3' height='100' resident='true'><dialogData id='PlayerWindow'></dialogData></openDialog>")

@last_pcs = []
@last_filter_state = nil # Track last known state of @filter_spells

# Standardize status names for players.
# Standardize status names for players, prioritizing "stunned" over "prone".
def player_status_fix(status)
  return "dead" if status =~ /dead/i
  return "stunned" if status =~ /stunned/i # Ensure "stunned" takes precedence
  return "sleeping" if status =~ /unconscious|slumber|sleeping/i
  return "prone" if status =~ /lying down|prone|knocked to the ground/i
  return "sitting" if status =~ /sitting/i
  return "kneeling" if status =~ /kneeling/i
  return "calmed" if status =~ /calmed/i
  return "frozen" if status =~ /frozen/i
  return "held" if status =~ /held/i
  return "webbed" if status =~ /web/i
  return nil
end

def oak_wand_check
  wands = {}
  GameObj.containers.each { |container| wands[container[0]] = []; GameObj[container[0]].contents.each { |item| wands[container[0]].push(item) if item.name =~ /oak(?:en)? (?:rod|wand)$/ } }
  return wands.first
end

# ";e fput('get oak wand'); fput('wave wand at ##{player_id}')"
# Determine action based on player status.
def action_for_status(status, pc)
  case status
  when "stunned"
    if Spell[108].known?
      return ";e Spell[108].force_cast('##{pc.id}') if Spell[108].affordable?"
    elsif (wand_object = oak_wand_check)
      wand_container_id = wand_object[0]
      wand = wand_object[1].first # Get the first wand in the array
      if wand # Ensure there's a wand to work with
        return ";e empty_hand; fput 'get ##{wand.id}'; fput 'wave ##{wand.id} at ##{pc.id}'; fput '_drag ##{wand.id} ##{wand_container_id}'; fill_hand"
      end
    end
  when "sitting", "kneeling", "prone"
    return "pull ##{pc.id}"
  when "sleeping", "unconscious"
    return "poke ##{pc.id}"
  when "webbed"
    if Spell[209].known?
      return ";e Spell[209].force_cast('##{pc.id}') if Spell[209].affordable?"
    end
  when nil && Char.profession =~ /empath/i
    return ";e kill_script 'ecure' if running?('ecure'); start_script('ecure', ['#{pc.name}'])"
  end
end

# Extracts the noun from the XML-based name format: <a exist="-11226620" noun="Lamamelodia">Lamamelodia</a>
def extract_noun(pc)
  return pc.noun if pc.respond_to?(:noun) && pc.noun
  return pc.name # Fallback to name if noun is unavailable
end

# Build and push the player list to the window, sorting by noun.
def push_players_to_window(pcs)
  sorted_pcs = pcs.sort_by { |pc| extract_noun(pc).downcase }

  output = "<dialogData id='PlayerWindow' clear='t'>"

  # First row: Filter toggle at top = 0
  filter_value = @filter_spam ? 'Spam Filter: ON' : 'Spam Filter: OFF'
  filter_cmd = "*filterspam"
  output += "<link id='filter_toggle' value='#{filter_value}' cmd='#{filter_cmd}' echo='Toggling Spam Filter...' justify='bottom' left='0' top='0' />"

  # Second row: PCs label at top = 20
  output += "<label id='total' value='PCs: #{sorted_pcs.size}' justify='bottom' left='0' top='20' />"

  # Remaining rows: Players, starting at top = 40
  top_offset = 2 # 2 lines above + 1 for spacing
  sorted_pcs.each_with_index do |pc, index|
    noun = extract_noun(pc)
    status = (pc.respond_to?(:status) && pc.status) ? player_status_fix(pc.status) : nil
    label_value = status ? "#{noun} (#{status})" : noun
    action_cmd = action_for_status(status, pc)

    output += "<link id='player_#{index}' value='#{label_value}' cmd=\"#{action_cmd}\" echo=\"#{action_cmd}\" justify='bottom' left='0' top='#{20 * (index + top_offset)}' />"
  end

  output += "</dialogData>"
  puts(output)
end

@filter_spam = true # default ON

UPSTREAM_HOOK_ID = "playerwindow::upstream"
DOWNSTREAM_HOOK_ID = "playerwindow::downstream"

UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
  case command.strip.downcase
  when /\*filterspam/i
    @filter_spam = !@filter_spam
    respond "Spam filtering is now #{@filter_spam ? 'ENABLED' : 'DISABLED'}."

    # Force window update
    pcs = GameObj.pcs.reject { |pc| pc.name == Char.name }
    @last_filter_state = !@filter_spam # Ensure it triggers refresh
    push_players_to_window(pcs)

    nil
  else
    command
  end
end)

@skip_next_line = false
@skip_two_lines = false

DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc { |line, _server_string|
  line = line.to_s # ensure itâ€™s always a String

  next line unless @filter_spam
  # Step 3: Skip line after gestures (effect)
  if @skip_next_line
    @skip_next_line = false
    next ""
  end

  # Step 2: Match gesture line, flag to skip next
  if line =~ /gestures at you\./
    @skip_next_line = false
  elsif line =~ /<a [^>]+>[^<]+<\/a> gestures at <a [^>]+>[^<]+<\/a>\./i ||
        line =~ /<a [^>]+>[^<]+<\/a> makes a complex gesture at <a [^>]+>[^<]+<\/a>\./i ||
        line =~ /gestures\.|makes a complex gesture\.|continues to wax\.|skillfully begins to weave another verse into|sings a melody\./
    @skip_next_line = true
    next ""
  end

  # Step 1: Match spell prep (ending with ...)
  if line =~ /\.\.\.\s*$/ && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Custom Spell Preps
  if line =~ /.* murmurs words of power into the air, summoning the elements to do .* bidding\.|.* intones a mystical orison, petitioning for the aid of .* patron\.|.* murmurs soft words into the air, the liquid syllables summoning the spirits to .* aid\.|.* traces a burning rune into the air, melding the spiritual and elemental powers by sheer force of will\.|.* whispers quietly into the wind, summoning the forces of nature to .* call\.|.* raises .* voice in rhythmic song, commanding the aid of the elements\.|.* lifts .* voice in a rallying cry, calling confidently on the power of .* patron for aid\.|.* weaves .* hands through the air, streamers of elemental mana twisting between .* fingers\.|.* raises .* clasped hands, fervently calling on the guidance of .* patron\.|.* outlines a luminous rune in the air, summoning the spirits to .* aid\.|.* scribes a hazy, dark sigil into the air, fusing elemental and spiritual power\.|.* casts .* voice into the air, causing the spirits to swirl around (?:him|her|them) with a sound like rustling leaves\.|.* lifts .* voice in song, skillfully twining elemental mana into .* harmony\.|.* traces .* patron's holy symbol in the air, using it to focus .* invocation\.|.* quickly intones a battle chant, imploring .* patron to lend (?:him|her|them) aid\.|.* melds a climactic chord into .* melody, .* voice rising in a crescendo\.|.* murmurs a twisting phrase, commanding both the elements and spirits together\.|.* invokes a short blessing, .* hands clasped in prayer\.|.* chants a short phrase, embers leaping from .* fingertips, as .* clenches .* hand into a smoke-shrouded fist\.|.* intones a mystical phrase, .* words flowing in a burst of speed, as .* hands move rapidly\.|.* chants a reverent prayer, imploring .* patron for aid in restoring the fallen to life\.|.* whispers a mystical phrase, as a nebulous haze shimmers into view around .* hands, casting them in murky shadows\.|.* whispers a mystical phrase, as pearlescent energy builds around .* hands, casting them in an opalescent silhouette\.|.* utters a sharp phrase, tiny thorns rippling across .* arms in a wave that moves toward .* hands\.|.* tucks .* hand behind .* back for a moment before moving it back to .* side\.|.* shower of sparks cascade from .* hands as .* intones a few words\.|.* gallimaufry of sounds pours from .* mouth as .* stumbles over some words\.|.* utters a plaintive plea to .*\.|.* lips move soundlessly\.|.* whispers a short prayer to .* followed by a soft incantation\.|.* fingertips momentarily glow a deep sanguine red as .* murmurs a few words\.|Looking bored, .* drones out a few words in a monotone\.|.* steeples .* fingers together and touches .* forehead to .* thumbs as .* prepares a spell\.|.* makes small, intricately twisting movements with .* hands at .* chest before projecting them outward abruptly\.|Inky shadows and twinkling lights commix around .* in a hypnotic eddy\.|.* rasps out a few words as tendrils of white smoke slither from .* mouth\.|Seven phantom tentacles sprout from the base of .* spine, wrapping .* in a binding embrace\.|.* gestures and quietly utters a phrase of magic\.|.* whispers something softly, and a whirlwind of flower petals envelops (?:him|her|them) before fading away into nothingness\.|Crystalline snowflakes drift softly down upon .* as .* says a few words\.|The scent of mournblooms fills the air as .* speaks a few words\.|A loud ticking sound emanates from .* as .* murmurs a short phrase\.|.* invokes the fury of a storm as .* prepares a spell\.|Anguished whispers amplify into a cacophony of sound that nearly drowns out .* attempts to prepare a spell\.|.* sketches a tart symbol and mutters an invocation to an unintelligible arkati followed by cheerful recitation\.|As .* slowly chants, swirls of tea-scented steam twist about .* before fading to nothingness\.|hands over the ground\, and a sudden chill fills the air as shadows rise to|chants in an arcane language which causes|face suddenly darkens as a ghostly death mask pinches|calling the forces of nature to aid|A swarm of ethereal crimson butterflies circle around|Polychromatic tentacles wrap about .* as .* chants a magical phrase\.|wrists and condenses into thrice-wrapped coils as|face twisted with pain as if .* very bones are aflame|upturned palms and drift upwards as they build in intensity|traces a series of glowing runes along|whispers a quiet invocation\.|intones a sonorous mantra and shifts|Reciting the mystical phrases of|skin is suffused with a subtle gold glow as|pulses with a white-blue light\!|focuses his thoughts\.|murmurs a brief incantation with a casual gesture\./i
    next ""
  end

  # Spells ending
  if line =~ /seems hesitant, looking unsure of|seems slightly different|air stops shimmering around|spirits are no longer lifted|undulate and grow stronger|slow down and become less nimble|slow down and become a bit less nimble|energy fades from around|gleam fades from|creaks and twists briefly before disintegrating|returns to its natural state|look of grim determination|slowly exhales as|suddenly appears less powerful|seems somewhat less buoyant|posture becomes noticeably more relaxed|The bright luminescence fades from around|appears to be less protected|appears to lose some confidence|The shimmering aura fades from around|loses some awareness\.|seems a bit less imposing\.|appears slightly less composed\.|The wall of force disappears from around|The mote of white light next to|becomes unbalanced for a second, then recovers\.|appears to lose some internal strength\.|The appearance of great calm leaves|The brilliant aura fades away from|The faint blue glow fades from around|complexion returns to normal\.|dull golden nimbus fades from around|look of renewed cognition fades\.|seems to thin slightly\.|becomes solid again\.|aura suddenly vanishes from around/ && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Mana Spellups & Transfers
  if line =~ /releases upon .* a flurry of abjurations|Suddenly, a small bolt of energy arcs between them|eyes, looking slightly drained\.|strains, but nothing happens\./i
    next ""
  end

  # Magic Items
  if line =~ /rubs a <a [^>]*?noun="[^"]+">[^<]+<\/a> in <a [^>]*?noun="[^"]+">(?:his|her)<\/a> hand\./i
    @skip_next_line = true
    next ""
  end

#Urglaes Thumb Armor
  if line =~ /spins the base of .*? urglaes thumb\-armor/i
    next ""
  end

  if line =~ /suddenly disintegrates\!/i && line !~ /^Your .* suddenly disintegrates\!/i
    next ""
  end

  # Bard Songs
  if line =~ /renews .* songs/
    next ""
  end

  # Remove Healing
  if line =~ /takes a drink|takes a bite|concentrates|gradually fades\, forming on|dwarf empath tattoo|begins to look better as the cuts on|focuses on .* with intense concentration|The cuts on .*? close and the bruises fade|The scar on .*? glows faintly white before fading altogether|The bruises around .*? fade\.|begins to look a little better\.|appears entirely restored\.|looks much more calm and refreshed\.|veins stand out briefly\.|begins to look better|gradually fades\, affecting|fingertips using a gentle\, circular motion\./ && line !~ /#{Regexp.escape(Char.name)}/
    @skip_next_line = true
    next ""
  end

  # Disks
  if line =~ /goes off in search of its master.|arrives in the room, shivering violently.  It then disintegrates./
    next ""
  end

  # Get Messaging
  if line =~ /<a [^>]*?noun="([^"]+)">[^<]*<\/a>\s*?(adjusts|carefully straps|draws|equips|grabs|puts|raises|reaches|removes|retrieves|sheathes|slings|slips|swaps|tosses|tucks|unsheathes|withdraws)/i && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Sigil Messaging
  if line =~ /the illumination of its sigils slowly ebbs away|touch, a number of sigils worked into its grain take on a faint luminescence/i && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Armor Support
  if line =~ /improving its ability to support the weight of/i && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

  # Manna Bread
  if line =~ /gobbles down a big bite|in one enormous bite|There is a bright flash and/
    next ""
  end

#Spiders
  if line =~ /spiders .* disappearing back into the/
    next ""
  end

  # Enhancive Armoires
  if line =~ /armoire/ && line !~ /#{Regexp.escape(Char.name)}/
    next ""
  end

#Sprites
  if line =~ /the sprite flying/
    next ""
  end

  # Urchins
  if line =~ /with <a [^>]*?noun="([^"]+)">[^<]*<\/a> in tow/i
    name = $1.capitalize

    respond "#{name} leaves with an urchin."
    next ""
  elsif line =~ /who nods to <a [^>]*?noun="([^"]+)">[^<]*<\/a> and quickly/i
    name = $1.capitalize

    respond "#{name} enters with an urchin."
    next ""
  end

  # Disorienting Winds - Entry
  if line =~ /leaving <a [^>]*?noun="([^"]+)">[^<]*<\/a> before you wearing a slightly disoriented look/i
    name = $1.capitalize
    respond "#{name} enters via FWI transport."
    next ""
  end

  # Disorienting Winds - Exit
  if line =~ /but <a [^>]*?noun="([^"]+)">[^<]*<\/a> is no longer there\./i
    name = $1.capitalize
    respond "#{name} leaves via FWI transport."
    next ""
  end

  # Shadowy Tendrils - Entry
  if line =~ /leaving <a [^>]*?noun="([^"]+)">[^<]*<\/a> in their place/i
    name = $1.capitalize
    respond "#{name} enters via FWI transport."
    next ""
  end

  # Shadowy Tendrils - Exit
  if line =~ /leaving no trace of <a [^>]*?noun="([^"]+)">[^<]*<\/a>/i
    name = $1.capitalize
    respond "#{name} leaves via FWI transport."
    next ""
  end

  # FWI Transport - Swirling Sounds Entry
  if line =~ /leaving <a [^>]*?noun="([^"]+)">[^<]*<\/a> before you wearing a slightly disoriented look/i
    name = $1.capitalize
    respond "#{name} enters via FWI transport."
    next ""
  end

  # FWI Transport - Swirling Sounds Exit
  if line =~ /taking <a [^>]*?noun="([^"]+)">[^<]*<\/a> with them\./i
    name = $1.capitalize
    respond "#{name} leaves via FWI transport."
    next ""
  end

  # FWI Transport - Quick Entry
  if line =~ /<a [^>]*?noun="([^"]+)">[^<]*<\/a> suddenly appears out of nowhere/i
    name = $1.capitalize
    respond "#{name} enters via FWI transport."
    next ""
  end

  # FWI Transport - Quick Exit
  if line =~ /<a [^>]*?noun="([^"]+)">[^<]*<\/a> reaches for .*? and vanishes/i
    name = $1.capitalize
    respond "#{name} leaves via FWI transport."
    next ""
  end

  # FWI Transport - Default Exit
  if line =~ /<a [^>]*?noun="([^"]+)">[^<]*<\/a>(?:'s)? eyes glaze over and .*? is no longer there!/i
    name = $1.capitalize
    respond "#{name} leaves via FWI transport."
    next ""
  end

  # FWI Transport - Default Entry
  if line =~ /<a [^>]*?noun="([^"]+)">[^<]*<\/a> slowly fades into view with a gasp of breath/i
    name = $1.capitalize
    respond "#{name} enters via FWI transport."
    next ""
  end

  # Cat Bell Movement (entry)
  if (match1 = line.match(/touts the arrival of .*?<a [^>]*?noun="([^"]+)">([^<]*?)<\/a>/i)) &&
     (match2 = line.match(/trotting into the (?:room|area)/i))

    visible = match1[2].strip
    name = visible.sub(/'s\z/, '')
    respond "#{name} enters."
    next ""
  end

  # Cat Bell Movement (exit)
  if (match1 = line.match(/follows.*?<a [^>]*?noun="([^"]+)">([^<]*?)<\/a>/i)) &&
     (match2 = line.match(/trotting <d cmd='go (\w+)'>\w+<\/d>/i))
    visible = match1[2].strip
    name = visible.sub(/'s\z/, '')
    direction = match2[1].downcase
    if @cardinal_directions.include?(direction)
      respond "#{visible} leaves #{direction}."
      next ""
    end
  end

  # Animalistic Totem
  if line =~ /.*?<a [^>]*?noun="([^"]+)">[^<]*<\/a>\s*?(?:strides|strolls) in with fluid grace/i
    name = $1.strip
    respond "#{name} enters."
    next ""
		end
  # Animalistic Totem Exit
		if line =~ /follows <a [^>]*?noun="([^"]+)">[^<]*<\/a>.*?moves <d cmd='go (\w+)'>\w+<\/d>/i
    name = $1.strip
    direction = $2.downcase
    if @cardinal_directions.include?(direction)
      respond "#{name} leaves #{direction}."
      next ""
    end
  end

  # Animalistic Totem Exit
if line =~ /.*?<a [^>]*?noun="([^"]+)">[^<]*<\/a>\s*?strides <d cmd='go (\w+)'>\w+<\/d>/i
    name = $1.strip
    direction = $2.downcase
    if @cardinal_directions.include?(direction)
      respond "#{name} leaves #{direction}."
      next ""
    end
  end

  line
})

before_dying do
  UpstreamHook.remove(UPSTREAM_HOOK_ID)
  DownstreamHook.remove(DOWNSTREAM_HOOK_ID)
end

# Main update loop.
loop do
  pcs = GameObj.pcs.reject { |pc| pc.name == Char.name }

  if pcs != @last_pcs || @filter_spells != @last_filter_state
    @last_pcs = pcs
    @last_filter_state = @filter_spells
    push_players_to_window(pcs)
  end

  sleep 0.025
end

echo "Dedicated Player Window is active."
