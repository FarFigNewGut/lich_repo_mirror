=begin

==================================================
You must download these two yamls to use this script.
;repo download bird_fieldguide.yaml
;repo download birdwatching_explore.yaml
==================================================

This script was created with the help of Chat GPT.

This script functions as a detailed field guide for bird watchers using the Jeepers Creepers birdwatching items.
https://gswiki.play.net/Jeepers_Creepers

The script provides information about all birds and feathers discovered in Elanthia. It does not explore new areas or record sightings but instead retrieves data from the birdwatching-explore.yaml file.

1.0.0 (2025-02-20)
  - Initial release.

COMMANDS

;send search QUERY
  Searches for a bird or feather by name and returns the five closest UIDs where it has been found.
  Example:
  >;send search lapis
  --- sent: search lapis
  [bird_fieldguide: Search results for lapis:
  Bird: brilliant lapis and vert peacock found in closest UIDs: [13100038, 13100039, 13100037, 13100036, 13100040]
  Bird: round-winged lapis blue jay found in closest UIDs: [13034403, 13034304, 13034303, 13034302, 13034301]
  Feather: ebon and lapis blue jay feather found in closest UIDs: [13034403, 13034304, 13034303, 13034302, 13034301]]

;send room
  Displays all birds and feathers found in the current rooms UID.
  Example:
  >;send room
  --- sent: room
  [bird_fieldguide: Entries for UID 14150113:
  Bird: rose-breasted ashen grey thielfira
  Feather: ash-tinted rosy thielfira feather]

;send birds
  Displays a comprehensive list of all birds discovered, categorized by species.
  
;send species
  Displays a condensed list of bird species found in Elanthia, omitting specific variations.

;send feathers
  Displays a comprehensive list of all feathers discovered, categorized by feather type.

;send totals
  Displays the total number of birds, feathers, and completed rooms recorded in the database.
  Example:
  >;send totals
  --- sent: totals
  [bird_fieldguide: **Birdwatching Totals:**
  - Birds found: 132
  - Feathers found: 132]

;send fg BIRD
  Retrieves a detailed field guide entry for a specific bird, including its description and vocalization.
  Example:
  >;send fg robin
  --- sent: fg robin
  ==================================================
  FIELD GUIDE ENTRY: ROBIN
  ==================================================
  
  Description: A cheerful songbird with a distinctive red or orange breast, often seen foraging on the ground.
  
  Vocalization: A rich, warbling song with rising and falling phrases, often sung at dawn.

  ==================================================
  END OF ENTRY
  ==================================================

;send feather FEATHER_NAME COUNT
  Repeats "peer my spyglass" until the specified feather is found the given number of times, then collects and stores it.
  Example:
  >;send feather ash-tinted rosy thielfira feather 10

;send paper BIRD COUNT
;send gem BIRD COUNT
;send hard BIRD COUNT
;send soft BIRD COUNT
;send choco BIRD COUNT
  These commands locate and capture the specified bird, storing it in a birdcage or candy form as indicated.
  The PAPER and GEM commands will place the birdcage in the FEET inventory slot if it is not worn.

tags: birdwatching, Jeepers Creepers, field guide
version: 1.0.0

=end


require 'yaml'

BIRDWATCHING_EXPLORE_PATH = "C:\\Lich5\\scripts\\birdwatching_explore.yaml"
BIRD_FIELDGUIDE_PATH = "C:\\Lich5\\scripts\\bird_fieldguide.yaml"

# Load bird and feather data from birdwatching-explore.yaml
def load_bird_data
  return { 'rooms' => {} } unless File.exist?(BIRDWATCHING_EXPLORE_PATH)
  YAML.load_file(BIRDWATCHING_EXPLORE_PATH) || { 'rooms' => {} }
end

# Load bird field guide data from bird_fieldguide.yaml
def load_bird_fieldguide
  return { "fieldguide" => {} } unless File.exist?(BIRD_FIELDGUIDE_PATH)
  YAML.load_file(BIRD_FIELDGUIDE_PATH) || { "fieldguide" => {} }
end

# Fetch all birds and feathers stored in YAML
def fetch_all_sightings
  data = load_bird_data
  birds = Hash.new { |h, k| h[k] = [] }
  feathers = Hash.new { |h, k| h[k] = [] }

  data["rooms"].each do |_, entries|
    entries.each do |entry|
      next unless entry.is_a?(Hash)
      entry.each do |uid, sightings|
        sightings["birds"]&.each { |bird| birds[bird] << uid }
        sightings["feathers"]&.each { |feather| feathers[feather] << uid }
      end
    end
  end

  { "birds" => birds, "feathers" => feathers }
end

# Get list of birds or feathers for the current room UID
def room_data
  data = load_bird_data
  uid = Room.current.uid.to_s.strip.gsub(/\[|\]/, '')

  return echo("This room has no UID. Cannot display entries.") if uid.empty?

  birds = []
  feathers = []

  data["rooms"].each do |_, entries|
    entries.each do |entry|
      next unless entry.is_a?(Hash)
      entry.each do |entry_uid, sightings|
        next unless entry_uid == uid
        birds += sightings["birds"] || []
        feathers += sightings["feathers"] || []
      end
    end
  end

  results = []
  results << "\nEntries for UID: #{uid}:"
  results += birds.map { |b| "Bird: '#{b}'" }
  results += feathers.map { |f| "Feather: '#{f}'" }

  if results.size == 1
    results << "No birds or feathers recorded for this room."
  end

  echo(results.join("\n"))
end

# Helper method to find up to 5 closest UIDs from a list to the current UID
def find_closest_uids(current_uid, uids, limit = 5)
  current_uid = current_uid.to_i
  cleaned_uids = uids.map { |uid| uid.to_s.gsub(/[^\d]/, '').to_i }  # Remove non-numeric characters and convert to integers
  # Sort by absolute distance to the current_uid and select up to the specified limit
  cleaned_uids.sort_by { |uid| (uid - current_uid).abs }.first(limit)
end

# Search for birds or feathers matching query and limit results to 5 closest UIDs
def search_data(query)
  sightings = fetch_all_sightings
  query = query.downcase
  current_uid = Room.current.uid.to_s.gsub(/[^\d]/, '').to_i  # Clean and convert the current UID to integer
  results = []

  sightings["birds"].each do |bird, uids|
    if bird.downcase.include?(query)
      closest_uids = find_closest_uids(current_uid, uids)
      results << "Bird: '#{bird}' found in closest UIDs: [#{closest_uids.join(', ')}]"
    end
  end

  sightings["feathers"].each do |feather, uids|
    if feather.downcase.include?(query)
      closest_uids = find_closest_uids(current_uid, uids)
      results << "Feather: '#{feather}' found in closest UIDs: [#{closest_uids.join(', ')}]"
    end
  end

  if results.empty?
    echo("No results found for '#{query}'.")
  else
    echo("Search results for '#{query}':\n" + results.join("\n"))
  end
end

# List all birds grouped by type
def list_birds_grouped_by_type
  sightings = fetch_all_sightings
  grouped_birds = Hash.new { |h, k| h[k] = [] }

  sightings["birds"].keys.each do |bird|
    type = bird.split.last
    grouped_birds[type] << bird
  end

  grouped_birds = grouped_birds.sort.to_h
  result = grouped_birds.map { |type, birds| "\n**#{type.capitalize}:**\n" + birds.map { |b| "- #{b}" }.join("\n") }

  echo(result.join("\n"))
end

# List all feathers grouped by type
def list_feathers_grouped_by_type
  sightings = fetch_all_sightings
  grouped_feathers = Hash.new { |h, k| h[k] = [] }

  sightings["feathers"].keys.each do |feather|
    words = feather.split
    index = words.index("feather")
    type = index && index > 0 ? words[index - 1] : "Unknown"
    grouped_feathers[type] << feather
  end

  grouped_feathers = grouped_feathers.sort.to_h
  result = grouped_feathers.map { |type, feathers| "\n**#{type.capitalize}:**\n" + feathers.map { |f| "- #{f}" }.join("\n") }

  echo(result.join("\n"))
end

# Display total birds and feathers found
def send_totals
  sightings = fetch_all_sightings
  total_birds = sightings["birds"].size
  total_feathers = sightings["feathers"].size

  total_birds_in_game = 389
  birds_left = total_birds_in_game - total_birds

  result = []
  result << "\n**Birdwatching Totals:**"
  result << "- Birds found: #{total_birds} / #{total_birds_in_game} (#{birds_left} left)."
  result << "- Feathers found: #{total_feathers}"

  echo(result.join("\n"))
end

# Fetch field guide entry
def send_fg(bird_name)
  data = load_bird_fieldguide
  bird_name = bird_name.downcase

  matched_bird = data["fieldguide"]&.keys&.find { |b| b.downcase.include?(bird_name) }

  if matched_bird
    description = data["fieldguide"][matched_bird]["description"]
    vocalization = data["fieldguide"][matched_bird]["vocalization"]

    echo("\n" + "="*50 + "\n FIELD GUIDE ENTRY: #{matched_bird.upcase} \n" + "="*50)
    echo("\nDescription: #{description}")
    echo("\nVocalization: #{vocalization}")
    echo("\n" + "="*50 + " END OF ENTRY " + "="*50)
  else
    echo("No field guide entry found for '#{bird_name}'.")
  end
end


# List only the main species names
def list_species
  sightings = fetch_all_sightings
  species_list = sightings["birds"].keys.map { |bird| bird.split.last }.uniq.sort

  echo("\n**Bird Species Found:**\n" + species_list.join("\n"))
end

# Displays help information for all commands
def send_help
  help_text = <<-HELP
\n
==================================================
         Bird Field Guide - Command List
==================================================
;send search QUERY
  Searches for a bird or feather by name and returns the five closest UIDs where it has been found.

;send room
  Displays all birds and feathers found in the current room's UID.

;send birds
  Displays a comprehensive list of all birds discovered, categorized by species.

;send species
  Displays a condensed list of bird species found in Elanthia, omitting specific variations.

;send feathers
  Displays a comprehensive list of all feathers discovered, categorized by feather type.

;send totals
  Displays the total number of birds, feathers, and completed rooms recorded in the database.

;send fg BIRD
  Retrieves a detailed field guide entry for a specific bird, including its description and vocalization.

;send feather FEATHER_NAME COUNT
  Searches for and collects the specified feather until the given count is reached.
  Example:
  >;send feather ash-tinted rosy thielfira feather 10

;send paper BIRD COUNT
;send gem BIRD COUNT
;send hard BIRD COUNT
;send soft BIRD COUNT
;send choco BIRD COUNT
  Searches for and captures the specified bird in a specific storage method:
  - `paper` and `gem` will place the bird in a cage.
  - `hard`, `soft`, and `choco` will store the bird as different candy types.
  Example:
  >;send paper brilliant lapis and vert peacock 1

;send help
  Displays this help menu.
==================================================
  HELP

  echo(help_text)
end

# Find and collect feathers
def find_and_store_feather(feather_description, count_needed = 1)
  count_needed = count_needed.to_i  # Ensure count_needed is an integer
  found_count = 0

  # Normalize the desired feather description
  desired_feather = feather_description.strip.downcase
  echo("Searching for feather: '#{desired_feather}'. Need to find #{count_needed} feather(s).")

  loop do
    waitrt?  # Wait for the roundtime to end before executing the next command
    fput "stow all" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput "get my spyglass" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput('peer my spyglass')
    sleep 0.15  # Slight delay to avoid too fast execution

    # Collect multiple lines of output
    output_lines = []
    begin
      Timeout.timeout(0.15) do
        while (line = get.strip)
          break if line.empty?
          output_lines << line
          break if output_lines.size >= 5  # Limit to max 5 lines
        end
      end
    rescue Timeout::Error
      # Timeout reached, continue with what we have in output_lines
    end

    # Check if the specified feather is found in the output
    output_lines.each do |line|
      if line =~ /you notice an? (.+? feather) hiding in the environment/i
        current_feather = $1.strip.downcase  # Normalize found feather to lowercase
        echo("Found feather: '#{current_feather}'")  # Show the feather found in the environment

        if current_feather == desired_feather
          echo("Feather '#{current_feather}' matches the desired feather. Attempting to collect it.")
          fput("get feather")  # Get the feather
          sleep 0.5  # Small delay before putting the feather

          # Attempt to put the feather in boa or sash
          if GameObj.inv.any? { |item| item.name =~ /boa/i }
            fput("put feather in my boa")
          elsif GameObj.inv.any? { |item| item.name =~ /sash/i }
            fput("put feather in my sash")
          else
            echo("No boa or sash found to store the feather.")
          end

          found_count += 1
          echo("Collected #{found_count} of #{count_needed} feather(s).")

          # Stop if we've found the specified number of feathers
          return echo("Successfully found and stored the feather '#{feather_description}' #{found_count} time(s).") if found_count >= count_needed

          break  # Break out of the output processing loop since the feather is found
        else
          echo("Feather '#{current_feather}' does not match the desired feather.")  # Indicate mismatch
        end
      end
    end
  end
end

# Find and capture birds
def find_and_store_bird(bird_description, count_needed = 1, command_type = 'paper')
  count_needed = count_needed.to_i  # Ensure count_needed is an integer
  found_count = 0

  # Normalize the desired bird description
  desired_bird = bird_description.strip.downcase
  echo("Searching for bird: '#{desired_bird}'. Need to find #{count_needed} bird(s).")

  # Retrieve and place the bird cage if command type is 'paper' or 'gem'
  if command_type == 'paper' || command_type == 'gem'
    fput("get my cage")
    fput('register my cage')
    fput("place feet cage")
  end

  loop do
    waitrt?  # Wait for the roundtime to end before executing the next command
    fput "stow all" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput "get my spyglass" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput('peer my spyglass')
    sleep 0.15  # Slight delay to avoid too fast execution

    # Collect multiple lines of output
    output_lines = []
    begin
      Timeout.timeout(0.15) do
        while (line = get.strip)
          break if line.empty?
          output_lines << line
          break if output_lines.size >= 5  # Limit to max 5 lines
        end
      end
    rescue Timeout::Error
      # Timeout reached, continue with what we have in output_lines
    end

    # Check if the specified bird is found in the output
    output_lines.each do |line|
      if line =~ /you notice an? (.+?) in this area/i
        current_bird = $1.strip.downcase  # Normalize found bird to lowercase
        echo("Found bird: '#{current_bird}'")  # Show the bird found in the environment

        if current_bird == desired_bird
          echo("Bird '#{current_bird}' matches the desired bird. Attempting to capture it.")

          # Handle specific actions based on the command type
          case command_type
          when 'paper'
            fput('shake my spyglass')
            fput('pluck my spyglass')
            fput('put left in cage')
          when 'gem'
		    fput('shake my spyglass')
            fput('whisper my spyglass option gem')
            fput('pluck my spyglass')
            fput('put left in cage')
          when 'hard'
		    fput('shake my spyglass')
            fput('whisper my spyglass option candy hard')
            fput('pluck my spyglass')
            fput('stow left')
          when 'soft'
		    fput('shake my spyglass')
            fput('whisper my spyglass option candy soft')
            fput('pluck my spyglass')
            fput('stow left')
          when 'choco'
		    fput('shake my spyglass')
            fput('whisper my spyglass option candy chocolate')
            fput('pluck my spyglass')
            fput('stow left')
		  else
            echo("Unknown command type: #{command_type}")
          end

          found_count += 1
          echo("Captured #{found_count} of #{count_needed} bird(s).")

          # Stop if we've found the specified number of birds
          if found_count >= count_needed
		    if command_type == 'paper' || command_type == 'gem'
				fput('get cage')  # Pick up the cage after completing the capture
				fput('stow cage')
			end
            return echo("Successfully found and captured the bird '#{bird_description}' #{found_count} time(s).")
          end

          break  # Break out of the output processing loop since the bird is found
        else
          echo("Bird '#{current_bird}' does not match the desired bird.")  # Indicate mismatch
        end
      end
    end
  end
end

# Updated main monitoring loop to include ;send help
def game_monitor
  while true
    line = get.strip

    case line
    when /^search\s+(.+)/i
      search_query = $1
      search_data(search_query)

    when /^room\b/i
      room_data

    when /^birds\b/i
      list_birds_grouped_by_type

    when /^species\b/i
      list_species

    when /^feathers\b/i
      list_feathers_grouped_by_type

    when /^totals\b/i
      send_totals

    when /^fg\s+(.+)/i
      bird_name = $1
      send_fg(bird_name)
	  
    when /^feather\s+(.+?)\s+(\d+)/i
      find_and_store_feather($1, $2.to_i)
	  
    when /^(paper|gem|hard|soft|choco)\s+(.+?)\s+(\d+)/i
      find_and_store_bird($2, $3.to_i, $1)
	  
    when /^help\b/i
      send_help
    end

    sleep 0.1
  end
rescue => e
  echo("Error in game monitor: #{e.message}")
end

# Start monitoring
game_monitor

