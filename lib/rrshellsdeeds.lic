=begin

				Author: Nagrad
          game: Gemstone
          tags: deeds, gems, shells, valuables
       version: 1.a
			
Took Demandred's Gemdeeds script and adapted it for RR use only.

Setup:  Make sure to use ;vars setup OR ;vars set gemsack=<container> to set your gem container
				before first use
				You could also use ;exec UserVars.gemsack = 'container' (?)
				Once the gemsack is set in vars, then:
				
				You may set your Max Variance using:
				;vars set gemdeeds_maxvariance=<value>
					examples:	;vars set gemdeeds_maxvariance=0.1
										;vars set gemdeeds_maxvariance=0.15
										;vars set gemdeeds_maxvariance=0.05
				The script will use 0.2 by default
				Note: This is the amount the script will attempt to stay below while trying to get deeds - i.e. 0.2 = 1.2 x the expected value of the deed (this is basically saying 20% over) 0.15 would be 15% etc.

Usage: ;rrshellsdeeds

Will automatically take you to the closest deed puzzle and get you as many deeds as the SHELLS
in the specified sack will obtain. 
=end

#
# Change this value if you want to adjust the percentage over
# optimal value that the script will buy deeds for.
#
# To Do here: @gemdeeds_maxvariance and the command line choosing of a container
# 						into UserVars - or Vars.gemsack perhaps for the container
#							Also maybe allow for a var to determine how much a gem is
#							worth compared to silvers...
#
# Default value (20%): 0.2
#
deed_rooms = [ '745', '4044', '9505', '10375', '10854', '28620' ]
target_room = ''
@gemdeeds_maxvariance = 0.2
@gemdeeds_multiplier = 3.0

if UserVars.gemdeeds_multiplier
	@gemdeeds_multiplier = UserVars.gemdeeds_multiplier.to_f
end

if UserVars.gemdeeds_maxvariance
	@gemdeeds_maxvariance = UserVars.gemdeeds_maxvariance.to_f
end

def go_to_deedroom(targetroom)
	Script.run("go2",'10854')
end

# test echo
#echo "multiplier is #{@gemdeeds_multiplier}"
#echo "variance is #{@gemdeeds_maxvariance}"

####################################

def appraise_gems()
	finalreport = Array.new
	
	container = GameObj.inv.find{ |container| container.name =~ /.*#{UserVars.gemsack}.*/ }
	
	if container.nil? then fput "look in #{container.name}" end

	gems = container.contents.select{ |item| 
		item.type =~ /valuable/ || item.noun == "scarab"
	}
	
	for gem in gems do
		silence_me
		dothistimeout "take ##{gem.id} from ##{container.id}", 5, /^You remove|You discreetly/
		fput "appraise ##{gem.id}"
		result = matchfind "I'll give you ? for it"
		finalreport << [result.delete(",").to_i, gem.id, gem.name]
		dothistimeout "put ##{gem.id} in ##{container.id}", 5, /^You put|You discreetly/
		silence_me
	end
	
	respond "All shells appraised:"
	finalreport.sort{ |a,b| a[0] <=> b[0] }.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
	
	return finalreport.sort{ |a,b| a[0] <=> b[0] }
end

#
# Loop, selecting the next most valuable gem that keeps our iterationsum within @gemdeeds_maxvariance
# until we have enough, or run out of gems
#
def get_deed_gems(deedcost, sortedgems)
	iterationsum = 0
	iterationgems = Array.new
	while sortedgems.length > 0 && iterationsum < deedcost do
		for ix in 0..(sortedgems.length-1)
			if sortedgems.at(ix)[0] + iterationsum > deedcost + (deedcost*@gemdeeds_maxvariance) then
				# The value of this gem pushes us over the limit, take the prevous gem
				if ix == 0 then
					sortedgems.delete_at(0)
					break
				end
				iterationsum = iterationsum + sortedgems.at(ix-1)[0]
				iterationgems << sortedgems.at(ix-1)
				sortedgems.delete_at(ix-1)
				break
			elsif ix == sortedgems.length-1 then
				iterationsum = iterationsum + sortedgems.at(ix)[0]
				iterationgems << sortedgems.at(ix)
				sortedgems.delete_at(ix)
				break
			end
		end
	end

	return iterationsum < deedcost ? nil : iterationgems
end
#
# RR Deed Routine
#
def do_rrspring_offering(deedgems)
	dothistimeout "kneel", 5, /You kneel down/
	dothistimeout "look in pool", 5, /yet serene and inviting/
	dothistimeout "look in pool", 5, /smiling as if in invitation/
	dothistimeout "touch pool", 5, /leaving you gazing at a glittering mound/
	deedgems.each { |gem|
		dothistimeout "take ##{gem[1]}", 5, /^You remove|You discreetly/
		dothistimeout "put ##{gem[1]} in pool", 5, /^It falls from your hand/
	}
	offeringresult = dothistimeout "touch pool", 5, /the world about shimmers and fades|He smiles sadly at you/
	if offeringresult =~ /the world about shimmers and fades/
		return "success"
		dothistimeout "touch flower", 5, /a single ripe seed/
		dothistimeout "get seed", 5, /pick up a ripe seed/
		dothistimeout "plant seed", 5, /she shall honor your own life/
	elsif offeringresult =~ /He smiles sadly at you/
		return "failed"
	fput "out"
	end
end

#
# Determine the cost of the users next deed
#
#This is fine as is
def get_next_deed_cost()
    deed_text = dothistimeout "experience", 5, /Experience:/
    deeds = deed_text.match(/.*Deeds: (\d*)/).captures[0]
    level = Char.level

    return (((100 * level.to_i + 100 * deeds.to_i + 101).to_f / @gemdeeds_multiplier).to_f).ceil
end


def main()
	if UserVars.gemsack.nil? then
		respond "\n*** You didn't set a gemsack using ;vars! ***\n\n    Set it using ;vars set gemsack=<container>\n     or ;vars setup\n\n\n"
		exit
	end
	
	# location setup
	return_room = Room.current.id
	deed_rooms = [ '745', '4044', '9505', '10375', '10854', '28620' ]
	target_room = Room.current.find_nearest(deed_rooms)
	#end

	deedcost = get_next_deed_cost()

	Script.run('go2', 'gemshop')

	sortedgems = appraise_gems()

	go_to_deedroom(target_room)

	num_deeds_done = 0
	num_deeds_failed = 0
	deedresult = nil

	while (deedgems = get_deed_gems(deedcost, sortedgems)) != nil do
		sum = 0
		deedgems.each{ |gem| sum += gem[0] }
		percentover = ((sum - deedcost).to_f / deedcost.to_f * 100)
		respond "\nDeed cost: #{deedcost}, #{deedgems.length} gems chosen with total value of #{sum}, which is %0.1f percent over minimum cost" % [percentover]
		deedgems.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
		respond "\n"
		#This is the call to the location deed puzzle spaghetti style
		if target_room == 10854 #River's Rest
			deedresult = do_rrspring_offering(deedgems)
		end
		
		num_deeds_done = num_deeds_done + 1 if deedresult == "success"
		num_deeds_failed = num_deeds_failed + 1 if deedresult == "failed"

		deedcost = get_next_deed_cost()
	end


	Script.run('go2', return_room.to_s)
	
	respond "\n\nDeed report: #{num_deeds_done} deeds obtained successfully, #{num_deeds_failed} failed attempts.\n\n"
end

# Start code in main()
main()
