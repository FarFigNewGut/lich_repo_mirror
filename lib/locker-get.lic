=begin
  Searches your local manifest for an item matching your input.
  Uses `locker get` (runners) to get it from your locker, unwrap it, and toss the packaging.
  
  ;locker-get dauber
  
            author: Xanlin (also Xanlin on discord)
            game: GS
            tags: utility, locker, inventory
         version: 0
        required: Lich >= 5.7.0

=end
module LockerGet
  @use_boosts = true
  
  def self.xml_encode(msg);return msg.encode(:xml => :text);end;
  def self.format_preset(msg,preset="speech");echo "preset #{preset} not found" if !["link", "speech","thought","whisper","watching","command", "selectedLink", "watching", "roomName"].include?(preset);return "<preset id=\"#{preset}\">#{self.xml_encode(msg)}</preset>";end;
    
  def self.nearest_manifest_town(input = nil) 
    input = Room.current.id if input.nil?
    pattern = /(the )?(town|hamlet|city|village|plains|free port|lowlands|tunnels and caverns|foothills|holdings|southern part|northern slopes|northern reaches|environs|somewhere)( o[fn] )?|,.*$|^the /i
    town = Room[Room["#{input}"].find_nearest_by_tag('town')].location
    # town = 'Teras' if town =~ /Kharam-Dzu/
    town = 'Mist Harbor' if town =~ /Isle of Four Winds/
    return "#{town.gsub(pattern,'')}"
  end

  def self.client_command(command, start_pattern, end_pattern = /^(?:<pop(?:Bold|Stream)\/>)?<prompt/, quiet = true, timeout = 5, include_end = true, silent = nil)
    return Lich::Util.quiet_command_xml(command, start_pattern, end_pattern, include_end, timeout, silent)
  end;

  @manifest_pattern = /^(?:<popBold\/>)?(?<depth> <d.*?>(?<ordinal>\d+)<\/d> +|  +)(?<pre>an |a )?(?<name>[^\(]*?)(?:containing (?<post>[^\(]*?))?(?<attrs>\(.*)?$/

  def self.manifest_search(inp)
    town = self.nearest_manifest_town
    command = "locker manifest #{town}"
    lines = self.client_command(command, /^Thinking back, you recall|^Looking in front of you, you see the contents of your locker/)
    matches = []
    lines.each{ |line|
      if m = @manifest_pattern.match(line) and line =~ /#{inp}/i
        matches << m if m[:ordinal].to_i > 0
        #respond m[:ordinal]
        #respond line
      end
    }
    return matches
  end

  def self.manifest_match(inp)
    _respond self.format_preset("inp: #{inp.inspect}",'whisper')
    matches = self.manifest_search(inp)
    (respond "no matches for #{inp.inspect}";return nil) if matches.empty?
    multi_matches = []
    if matches.size > 1
      matches.each_with_index{|m,x|
        name = "#{m[:name]} #{m[:post]}" 
        #respond "m[:post]:#{m[:post].inspect}"
        next if !m[:post].nil? and m[:post].to_s =~ /#{inp}/i  # for containing, gems, etc just grab the first one
        if multi_matches.find{|x| x.include?(name)}.nil?
          multi_matches << [name, m] 
        else
          #_respond m
        end
      }
      if multi_matches.size > 1
        respond "#{inp.inspect} matches #{multi_matches.count} manifest lines"
        multi_matches.each_with_index{|i,x|
          m = i[1]
          _respond m
          #locker_cmd = ";e LockerGet.unpackage('#{self.locker_command(i[1][:depth])}')"
          #ecmd = ";e LockerGet.unpackage('self.locker_command(i[1][:depth])}')"
          #dcmd = "<d cmd="#{locker_cmd}">#{i[0]}</d>"
          #respond "  #{x+1}. #{dcmd}"
          
        }
        return nil
      end
    end
    _respond self.format_preset("one type of match of #{matches.count} matches.",'whisper')
    return matches.first
  end
  
  def self.clear_hands()
    fput "store all"  if checkleft or checkright
    empty_hands       if checkleft or checkright
  end
  
  def self.unpackage(command, retry_on_fail = true)
    fput "unhide" if hidden? or invisible?
    self.clear_hands
    package_id = nil
    # locker get
    status_tags
    locker_get_result = dothistimeout "#{command}", 3, /<right exist="(?<id>\d+)"|You currently have no contract with the Elanthian Merchant's Guild for this service./
    status_tags
    #respond locker_get_result.inspect
    if locker_get_result =~ /no contract with/
      fput "boost runner locker" if @use_boosts == true
      if retry_on_fail == true
        return self.unpackage(command,false) 
      else
        echo "No more runners or boosts."
        return false
      end
    end
    return false if locker_get_result.nil?
    if locker_get_result =~ /<right exist="(?<id>\d+)"/
      package_id = Regexp.last_match[:id]
    end
    respond "package_id:#{package_id.inspect}" if @debug
    # open package
    open_result = dothistimeout "open my package", 3, /You open/
    return false if open_result.nil?
    sleep 0.3
    package = GameObj["#{package_id}"]
    respond "package:#{package.inspect}" if @debug
    respond "package.contents:#{package.contents.inspect}" if @debug
    # get item
    status_tags
    get_result = dothistimeout "get ##{package.contents.first.id} from package", 3, /^<left|right>/
    status_tags
    return false if get_result.nil?
    # drop package
    toss_result = dothistimeout "drop my package", 3, /You toss aside your package, having emptied it./
    fput "swap"
  end
  
  def self.locker_command(str)
    command = nil
    if /(locker get \d+)/.match(str)
      command = Regexp.last_match
    else
      _respond self.format_preset("misundertstood input #{str.inspect}",'whisper')
    end
  end
  
  def self.locker_get(inp)
    item = self.manifest_match(inp)
    return false if item.nil?
    command = self.locker_command(item[:depth])
    if command.nil?
      _respond self.format_preset("unable to get items from locker here.",'whisper')
      return false
    end
    self.unpackage(command)
  end
  
  
  @debug = false if @debug.nil?
  if Script.current.vars[0] =~ /@debug/
    @debug = true
    Script.current.vars.delete('@debug')
    Script.current.vars[0] = Script.current.vars.join(' ')
  end
  
  inp = Script.current.vars[0]
  self.locker_get(inp)
end