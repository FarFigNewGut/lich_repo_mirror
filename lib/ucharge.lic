=begin

		Author: Demandred
		Version: 3.2
		Game: GS
		Tags: Wizard,Charge Item,517

		Charges items. Gives a report of what was charged at the end, and whether it greened.

		UserVars:

		Be sure to alter these one at a time!

		itemstocharge -- A list of the items you want to charge and optionally how many charges you want minimum, in the following format
			Examples:	;ucharge --itemstocharge=small statue,quartz orb,ruby amulet
								;ucharge --itemstocharge=small statue 15,ruby amulet,quartz orb 17
								;ucharge --itemstocharge=quartz orb 27,small statue

					Note: The # of charges is a MINIMUM - this setting is only
								recommend if you know exactly how many charges you
								can safely infuse - it will keep trying for this
								many until the item greens, the charges are reached,
								or it gets a message about You cannot add more.

		unchargeditembag -- Where you keep empty statues, quartz orbs, etc...
			Example:  ;ucharge --unchargeditembag=satchel
			Special Case: ;ucharge --unchargeditembag=ground
				Will check the ground for items in your itemstocharge list
				(** Not recommended to use with chargeditembag=drop)

		chargeditembag -- Where you want the charged items put
			Example:  ;ucharge --chargeditembag=pack
			Special Case: ;ucharge --chargeditembag=drop
				will drop items on the ground when you finish charging them
				(** Not recommended to use with unchargeditembag=ground)

		greeneditembag -- Where you want to put greened items
			Example:  ;ucharge --greeneditembag=cloak

		orbgembag -- Where you keep your pre-prepared orb gems(already grot poured - script assumes
		any gem in this bag will be an orb gem)
			Example:  ;ucharge --orbgembag=pouch

	Changelog:

	3.2 - dumped the separate UserVars format and consolidated into the UserVars.ucharge hash
	3.1 - first change to move to a hash instead of spread uservars. Also fixed a regex
	3.0 - It's working!!!
	2.9 - This one is tough to track down. clear?
	2.8 - spell prep things
	2.7 - slight fix to rub porb
	2.6 - regex fixed
	2.5 - Cast roundtime!
	2.4 - reget logic for checking back to see if the orb shrunk added.
	2.3 - charge orb logic changed to line = get
	2.2 - rub logic change to line = get
	2.1 - Maybe a fix for this aggravation!
	2.0 - More debugging lines, bear with me!
	1.9 - Oops. Stupid next infinite iteration.
	1.8 - added some debugging lines and a var for them
	1.7 - checkright/checkleft logic changed to GameObj.right_hand.name/GameObj.left_hand.name
	1.6 - Fixed...MORE checks and comparisons.
	1.5 - fixed a comparison to be more precise.
	1.4 - Moved a call around - still orb wonkiness.
	1.3 - Grr. Some issues with initial p orb creation. Gotta nail these down - may be some weirdness still.
	1.2 - Some more logic fixes and such - additionally made it take first items instead of last.
	1.1 - Various fixes small and large to array logic and ground stuff and...yeah.
	1.0 - Initial release version.


	Contact Demandred in game or on the GS Discord to report issues.

=end

if !Spell[517].known?
	respond "You uh, don't seem to know the necessary spell."
	respond "You should learn 517 and then try this."
	respond "Exiting ;ucharge"
	exit
end

UserVars.ucharge ||= Hash.new

UserVars.ucharge[:debug] = false if UserVars.ucharge[:debug].nil?

items_to_charge_temp = Array.new
items_to_charge = Array.new
uc_items = Array.new
orb_gems = Array.new
charged_items = Array.new
orbbag = nil
uitembag = nil
citembag = nil
gitembag = nil
new_porb = true
porb_charged = false
last_orb_gem = false
current_charges = 0
item_greened = false
item_max = false
need_mana = true
last_item = false
fresh_item = true
count_flows = 0
first_porb = true
wanted_charges = nil

display_help = proc do
	respond ""
	respond ""
	respond "Setting up ucharge to charge items:"
	respond ""
	respond "Vars:"
	respond "(be sure to change vars one at a time(for now))"
	respond ""
	respond "itemstocharge -- A list of the items you want to charge and optionally how many charges you want minimum, in the following format"
	respond ""
	respond "Examples:"	
	respond ";ucharge --itemstocharge=small statue,quartz orb,ruby amulet"
	respond ";ucharge --itemstocharge=small statue 15,ruby amulet,quartz orb 17"
	respond ";ucharge --itemstocharge=quartz orb 27,small statue"
	respond ""
	respond "Note: The # of charges is a MINIMUM - this setting is only"
	respond "recommend if you know exactly how many charges you"
	respond "can safely infuse - it will keep trying for this"
	respond "many until the item greens, the charges are reached,"
	respond "or it gets a message about You cannot add more."
	respond ""
	respond "unchargeditembag -- Where you keep empty statues, quartz orbs, etc..."
	respond ""
	respond "Example:"
	respond ";ucharge --unchargeditembag=satchel"
	respond "Special Case:"
	respond ";ucharge --unchargeditembag=ground"
	respond "Will check the ground for items in your itemstocharge list"
	respond "(** Not recommended to use with chargeditembag=drop)"
	respond ""
	respond "chargeditembag -- Where you want the charged items put"
	respond ""
	respond "Example:"
	respond ";ucharge --chargeditembag=pack"
	respond "Special Case:"
	respond ";ucharge --chargeditembag=drop"
	respond "will drop items on the ground when you finish charging them"
	respond "(** Not recommended to use with unchargeditembag=ground)"
	respond ""
	respond "greeneditembag -- Where you want to put greened items"
	respond ""
	respond "Example:"
	respond ";ucharge --greeneditembag=cloak"
	respond ""
	respond "orbgembag -- Where you keep your pre-prepared orb gems(already grot poured - script assumes"
	respond "any gem in this bag will be an orb gem)"
	respond ""
	respond "Example:"
	respond ";ucharge --orbgembag=pouch"
	respond ""
	respond "Current settings:"
	respond ""
	respond "   Items to charge: \"#{UserVars.ucharge[:items_to_charge]}\""
	respond "Uncharged item bag: \"#{UserVars.ucharge[:uncharged_item_bag]}\""
	respond "  Charged item bag: \"#{UserVars.ucharge[:charged_item_bag]}\""
	respond "  Greened item bag: \"#{UserVars.ucharge[:greened_item_bag]}\""
	respond "       Orb gem bag: \"#{UserVars.ucharge[:orb_gem_bag]}\""
end

if script.vars[1] =~ /help|\?/
	display_help.call
	exit
elsif script.vars[0] =~ /--itemstocharge=([ ,a-zA-Z\d]+)$/
	UserVars.ucharge[:items_to_charge] = $1
	respond "Items to charge set to #{UserVars.ucharge[:items_to_charge]}"
	exit
elsif script.vars[0] =~ /--unchargeditembag=([ a-zA-Z]+)/
	UserVars.ucharge[:uncharged_item_bag] = $1
	respond "Uncharged item bag set to #{UserVars.ucharge[:uncharged_item_bag]}"
	exit
elsif script.vars[0] =~ /--chargeditembag=([ ,a-zA-Z]+)/
	UserVars.ucharge[:charged_item_bag] = $1
	respond "Charged item bag set to #{UserVars.ucharge[:charged_item_bag]}"
	exit
elsif script.vars[0] =~ /--greeneditembag=([ ,a-zA-Z]+)/
	UserVars.ucharge[:greened_item_bag] = $1
	respond "Greend item bag set to #{UserVars.ucharge[:greened_item_bag]}"
	exit
elsif script.vars[0] =~ /--orbgembag=([ ,a-zA-Z]+)/
	UserVars.ucharge[:orb_gem_bag] = $1
	respond "Orb gem bag set to #{UserVars.ucharge[:orb_gem_bag]}"
	exit
elsif script.vars[0] =~ /--debug/
	if UserVars.ucharge[:debug] == true
		UserVars.ucharge[:debug] = false
		respond "Debug set to false -- \"UserVars.ucharge[:debug] = true\" while running to change it while charging items"
	else
		UserVars.ucharge[:debug] = true
		respond "Debug set to true -- \"UserVars.ucharge[:debug] = false\" while running to change it while charging items"
	end
	exit
end

if UserVars.ucharge[:items_to_charge].nil? || UserVars.ucharge[:uncharged_item_bag].nil? || UserVars.ucharge[:charged_item_bag].nil? || UserVars.ucharge[:greened_item_bag].nil? || UserVars.ucharge[:orb_gem_bag].nil?
	echo "You need to set your items to charge using ;ucharge --itemstocharge=<items>" if UserVars.ucharge[:items_to_charge].nil?
	echo "You need to set your uncharged item bag using ;ucharge --unchargeditembag=<bag>" if UserVars.ucharge[:uncharged_item_bag].nil?
	echo "You need to set your charged item bag using ;ucharge --chargeditembag=<bag>" if UserVars.ucharge[:charged_item_bag].nil?
	echo "You need to set your greened item bag using ;ucharge --greeneditembag=<bag>" if UserVars.ucharge[:greened_item_bag].nil?
	echo "You need to set your orb gem bag using ;ucharge --orbgembag=<bag>" if UserVars.ucharge[:orb_gem_bag].nil?
	echo ""
	echo "\";u ucharge\" to display help"
	pause_script
	display_help.call
	exit
end

#if Room.current.tags !~ /workshop/
#	respond "You should go to a workshop for this script."
#	respond "Exiting ;ucharge"
#	exit
#end

echo "debug: Creating item arrays" if UserVars.ucharge[:debug]
# Create our array list of the types of items to charge
items_to_charge_temp = UserVars.ucharge[:items_to_charge].split(",")
if items_to_charge_temp == "" || items_to_charge_temp.empty? || items_to_charge_temp.nil?
	echo "You need to set what types of items to charge"
	echo "Example:  ;vars set itemstocharge=small statue,quartz orb"
	echo "NOTE: no spaces after the commas"
	exit
else
	echo "debug: before push to array for items_to_charge" if UserVars.ucharge[:debug]
	items_to_charge_temp.each do |entry|
		if entry =~ /([ a-zA-Z]+ [a-zA-Z]+) ?(\d+)?/
			items_to_charge.push([$1, $2])
		end
	end
	echo "debug: #{items_to_charge}" if UserVars.ucharge[:debug]
end
#echo items_to_charge # test echo

echo "debug: bag setup" if UserVars.ucharge[:debug]
# Set up and ready the bags to access
echo "debug: orbbag" if UserVars.ucharge[:debug]
orbbag = GameObj.inv.find { |b| UserVars.ucharge[:orb_gem_bag] =~ /#{b.noun}|#{b.name}/ }
if orbbag == false || orbbag.empty? || orbbag.nil? || orbbag == ""
	echo "You need to set an orb gem bag."
	echo "Example:  ;vars set orbgembag=pouch"
	exit
end
echo "debug: unchargeditembag" if UserVars.ucharge[:debug]
if UserVars.ucharge[:uncharged_item_bag] =~ /ground/
	uitembag = "ground"
else
	uitembag = GameObj.inv.find { |b| UserVars.ucharge[:uncharged_item_bag] =~ /#{b.name}|#{b.noun}/ }
end
if uitembag == false || uitembag.empty? || uitembag.nil? || uitembag == ""
	echo "You need to set an uncharged item bag"
	echo "Example:  ;vars set unchargeditembag=pack"
	exit
end
echo "debug: chargeditembag" if UserVars.ucharge[:debug]
if UserVars.ucharge[:charged_item_bag] =~ /drop/i
	citembag = "dropitems"
else
	citembag = GameObj.inv.find { |b| UserVars.ucharge[:charged_item_bag] =~ /#{b.name}|#{b.noun}/ }
end
if citembag == false || citembag.empty? || citembag.nil? || citembag == ""
	echo "You need to set a charged item bag"
	echo "Example:  ;vars set chargeditembag=cloak"
	exit
end
echo "debug: greeneditembag" if UserVars.ucharge[:debug]
gitembag = GameObj.inv.find { |b| UserVars.ucharge[:greened_item_bag] =~ /#{b.name}|#{b.noun}/ }
if gitembag == false || gitembag.empty? || gitembag.nil? || gitembag == ""
	echo "You need to set a greened item bag"
	echo "Example:  ;vars set greeneditembag=satchel"
	exit
end
echo orbbag if UserVars.ucharge[:debug]
echo uitembag if UserVars.ucharge[:debug]
echo citembag if UserVars.ucharge[:debug]

# Create our actual item array
echo "debug: pre-actual items on hand creation" if UserVars.ucharge[:debug]
if uitembag =~ /ground/
	echo "debug: ground uitembag" if UserVars.ucharge[:debug]
	GameObj.loot.each do |i|
		items_to_charge.each do |j|
			if i.name =~ /#{j[0]}/
				uc_items.push(i)
			end
		end
	end
else
	echo "debug: uitembag.contents" if UserVars.ucharge[:debug]
	uitembag.contents.each do |i|
		items_to_charge.each do |j|
			if i.name =~ /#{j[0]}/
				uc_items.push(i)
			end
		end
	end
end
#echo uc_items # test echo

# And now our orb array
echo "debug: orb array things" if UserVars.ucharge[:debug]
orb_gems = orbbag.contents.find_all { |g| g.type =~ /gem/ }
if !orb_gems || orb_gems == false || orb_gems.nil? || orb_gems.empty? || orb_gems == ""
	respond "You have no orbs gems"
	respond "Exiting ;ucharge"
	exit
end
# test echo
#echo orb_gems

# Check if there's already a pulsating orb in the room - if so don't make one.
echo "debug: prelim pulsating orb check" if UserVars.ucharge[:debug]
if GameObj.loot.any? { |i| i.name =~ /pulsating orb/ }
	new_porb = false
end

#
## Begin actual action procs
#

# Cast 517 on an orb gem, and delete it from the orbs array
gem_to_porb = proc do
	echo "debug: gem_to_porb proc" if UserVars.ucharge[:debug]
	if first_porb == false
		respond "Your pulsating orb has imploded and you need to make a new one."
		respond "If you would like to continue, please unpause ucharge by typing"
		respond ";u ucharge"
		respond "Otherwise, please kill ucharge by typing ;k ucharge"
		pause_script
	end
	orb_gems = orbbag.contents.find_all { |g| g.type =~ /gem/ }
	if !orb_gems || orb_gems == false || orb_gems.nil? || orb_gems.empty?
		respond "Out of orb gems somehow, most likely moved something."
		respond "Session ending"
		charged_items.push([uc_items[0].name, current_charges.to_s])
		exit
	end
	wait_until { checkcastrt == 0 }
	sleep 0.2
	fput "get ##{orb_gems[0].id}"
	wait_until { Spell[517].affordable? }
	fput "prep 517"
	fput "cast at ##{orb_gems[0].id}"
	wait_until {GameObj.loot.any? { |i| i.name =~ /pulsating orb/i }}
	orb_gems.delete(orb_gems[0])
	if orb_gems.count == 0
		last_orb_gem = true
		echo "This is your last orb gem, session will end soon"
	end
	new_porb = false
	if first_porb == true
		first_porb = false
	end
end

# Push the pulsating orb to ready to charge
charge_porb = proc do
	echo "debug: charge_porb proc" if UserVars.ucharge[:debug]
	wait_until { Spell[517].affordable? }
	if checkcastrt > 0
		waitcastrt?
		sleep 0.2
	end
	put "release" if !(prepped? == "Charge Item" || prepped? == "None")
	until prepped? == "Charge Item"
		fput "prep 517"
	end
	clear
	put "cast at pulsating orb"
	while line = get
		if line =~ /grows in size/
			next
		elsif line =~ /quickly implodes into oblivion/
			if last_orb_gem == true
				respond "Your pulsating orb imploded and you have no more orb gems."
				respond "Session is done."
				respond "Exiting ;ucharge"
				exit
			else
				new_porb = true
			end
			break
		elsif line =~ /humming tones of enchantment|already prepared for charging/
			porb_charged = true
			next
		elsif line =~ /Wait (\d) sec|You don\'t have a spell prepared\!/
			waitcastrt?
			sleep 0.2
			break
		elsif line =~ /Cast Roundtime \d Seconds\./
			sleep 0.5
			waitcastrt?
			sleep 0.2
			break
		end
	end
end

# Detect item for initial charge count
detect_item = proc do
	echo "debug: detect_item proc" if UserVars.ucharge[:debug]
	wait_until { checkcastrt == 0 }
	sleep 0.2
	wait_until { Spell[405].affordable? }
	fput "prep 405"
	result = dothistimeout "cast at ##{uc_items[0].id}", 5, /You sense that .+ with \d+ charges?(?: .+)?\./
	if result =~ /You sense that .+ with (\d+) charges?(?: .+)?\./
		current_charges = $1.to_i
	end
	if current_charges >= wanted_charges
		item_max = true
	end
	echo "debug: detect_item current_charges = #{current_charges}" if UserVars.ucharge[:debug]
	fresh_item = false
	sleep 0.5
	waitcastrt?
end

# rubbing the pulsating orb proc
rub_porb = proc do
	echo "debug: rub_porb proc" if UserVars.ucharge[:debug]
	clear
	put "rub pulsating orb"
	while line = get
		if line =~ /The orb isn\'t properly prepared for recharging\./
			porb_charged = false
			break
		elsif line =~ /You successfully add (\d+) additional charges?/
			current_charges += $1.to_i
			echo "debug: in rub proc current_charges = #{current_charges}" if UserVars.ucharge[:debug]
			if !wanted_charges.nil?
				if current_charges >= wanted_charges
					item_max = true
				end
			end
			break
		elsif line =~ /It flares a sickening green/
			item_greened = true
			break
		elsif line =~ /You do not have enough mana\.|You feel terribly drained\!/
			echo "debug: not enough mana in line get rub porb" if UserVars.ucharge[:debug]
			need_mana = true
			break
		elsif line =~ /You are unable to add any more|Nothing else seems to happen\./
			echo "debug: unable/nothing else in line get rub porb" if UserVars.ucharge[:debug]
			item_max = true
			break
		elsif line =~ /You are unable to properly channel the flows/
			if wanted_charges.nil?
				count_flows += 1
				if count_flows == 4
					item_max = true
					count_flows = 0
				end
			end
			break
		elsif line =~ /What were you referring to/
			new_porb = true
			break
		end
	end
end

before_dying do
	respond "Items, charges, and whether they greened"
	charged_items.each do |item|
		if item.count == 2
			respond "#{item[0]} - #{item[1]}"
		elsif item.count == 3
			respond "#{item[0]} - #{item[1]} - #{item[2]}"
		end
	end
	respond "End of report"
	respond "Thank you for using ucharge!"
end

#empty our hands
echo "debug: initial empty hands" if UserVars.ucharge[:debug]
if GameObj.right_hand.name != "Empty" || GameObj.left_hand.name != "Empty"
	echo "debug: hands not empty" if UserVars.ucharge[:debug]
	fput "store both"
	fput "stow all"
	wait_until { GameObj.right_hand.name == "Empty" && GameObj.left_hand.name == "Empty" }
end

#
## Our main logic loop
#
echo "debug: right before main logic loop" if UserVars.ucharge[:debug]
loop do

	lines = reget.reverse[0..5]
	if lines.any? { |l| l =~ /The pulsating orb shrinks somewhat\./ }
		porb_charged = false
	end

	if need_mana == true
		echo "debug: need mana" if UserVars.ucharge[:debug]
		wait_until { checkmana > 100 }
		need_mana = false
		next
	end

	if !(GameObj.loot.any? { |i| i.name =~ /pulsating orb/ })
		echo "debug: new_porb is true!" if UserVars.ucharge[:debug]
		new_porb = true
	end

	if new_porb == true
		gem_to_porb.call
		next
	end

	if porb_charged == false
		charge_porb.call
		next
	end

	if uc_items.count == 1 && last_item == false
		echo "debug: last item" if UserVars.ucharge[:debug]
		last_item = true
	end

	#if !checkright && !checkleft
	if GameObj.right_hand.name == "Empty" && GameObj.left_hand.name == "Empty" && last_item == false
		echo "debug: inside loop empty hands?" if UserVars.ucharge[:debug]
		fput "get ##{uc_items[0].id}"
		wait_until { checkright }
		items_to_charge.each do |it|
			if it[0] =~ /#{uc_items[0].name}/
				wanted_charges = it[1].to_i
				echo "debug: wanted_charges = #{wanted_charges}" if UserVars.ucharge[:debug]
			end
		end
		fresh_item = true
		next
	end

	if fresh_item == true
		detect_item.call
		next
	end

	if item_greened == true
		echo "debug: item_greened == true" if UserVars.ucharge[:debug]
		fput "put ##{uc_items[0].id} in ##{gitembag.id}"
		wait_until { !checkright }
		charged_items.push([uc_items[0].name, current_charges.to_s, "greened"])
		uc_items.delete(uc_items[0])
		wanted_charges = nil
		if last_item
			echo "Last item of the session"
			echo "You're done."
			exit
		end
		item_greened = false
		current_charges = 0
		fput "get ##{uc_items[0].id}"
		items_to_charge.each do |it|
			if it[0] =~ /#{uc_items[0].name}/
				wanted_charges = it[1].to_i
			end
		end
		echo "debug: item_greened wanted_charges = #{wanted_charges}" if UserVars.ucharge[:debug]
		fresh_item = true
		next
	end

	if item_max == true
		echo "debug: item_max == true" if UserVars.ucharge[:debug]
		if citembag == "dropitems"
			fput "drop ##{uc_items[0].id}"
		else
			fput "put ##{uc_items[0].id} in ##{citembag.id}"
		end
		wait_until { !checkright }
		charged_items.push([uc_items[0].name, current_charges.to_s])
		uc_items.delete(uc_items[0])
		wanted_charges = nil
		if last_item == true
			echo "Last item of the session"
			echo "You're done."
			exit
		end
		item_max = false
		current_charges = 0
		fput "get ##{uc_items[0].id}"
		items_to_charge.each do |it|
			if it[0] =~ /#{uc_items[0].name}/
				wanted_charges = it[1].to_i
			end
		end
		echo "debug: item_max wanted_charges = #{wanted_charges}" if UserVars.ucharge[:debug]
		fresh_item = true
		next
	end

	rub_porb.call

end