# star-squelch.lic
#
# Hides incoming lines that *begin* with any of your saved phrases.
#
# Phrases will be blocked by any of your characters running the script. 
#
# Commands:
# ;star-squelch                 # run the script
# ;kill star-squelch            # must stop script to add/remove phrases
# ;star-squelch add <phrase>    # add a phrase to ignore
# ;star-squelch list            # list saved phrases
# ;star-squelch remove <index>  # remove phrase by 1-based index
# ;star-squelch clear           # clear all phrases
#
#   Example:
#     ;star-squelch add [Merchant] Scriptspammer: "Selling
#
#     Star-squelch will ignore any phrase beginning with that exact text.

SCRIPT_NAME = 'star-squelch'
HOOK_NAME   = 'star-squelch-hook'

Settings.load rescue nil
Settings['prefixes'] ||= []
$STAR_SQUELCH_PREFIXES = Array(Settings['prefixes']).map(&:to_s)

def rebuild_norm!
  $STAR_SQUELCH_PREFIXES_NORM = $STAR_SQUELCH_PREFIXES.map { |p| p.delete('"') }
end
rebuild_norm!

def save_prefixes!
  Settings['prefixes'] = $STAR_SQUELCH_PREFIXES
  Settings.save
  rebuild_norm!
end

def normalize_phrase_on_save(phrase)
  return phrase if phrase.nil? || phrase.empty?
  idx = phrase.rindex(':')
  return phrase unless idx
  head = phrase[0..idx]            # include colon
  tail = phrase[(idx + 1)..-1] || ''
  # strip ALL spaces and quotes right after colon
  tail_clean = tail.sub(/\A[\s"]+/, '')
  # enforce colon + space + quote
  head + ' "' + tail_clean
end

STRIP_TAGS = /<[^>]*>/
def visible_text(s)
  s ? s.gsub(STRIP_TAGS, '') : ''
end

def suppressed?(text)
  return false if text.empty? || $STAR_SQUELCH_PREFIXES_NORM.empty?
  t = text.delete('"')
  $STAR_SQUELCH_PREFIXES_NORM.any? { |p| t.start_with?(p) }
end

cmd  = (Script.current.vars[1] || '').downcase
args = (Script.current.vars[2..-1] || [])

case cmd
when 'add'
  phrase = args.join(' ').strip
  if phrase.empty?
    echo "usage: ;#{SCRIPT_NAME} add <phrase>"
    exit
  end
  phrase = normalize_phrase_on_save(phrase)
  unless $STAR_SQUELCH_PREFIXES.include?(phrase)
    $STAR_SQUELCH_PREFIXES << phrase
    save_prefixes!
  end
  echo "added (#{$STAR_SQUELCH_PREFIXES.length} total): #{phrase}"
  exit

when 'list'
  if $STAR_SQUELCH_PREFIXES.empty?
    echo 'no prefixes saved.'
  else
    echo 'saved prefixes:'
    $STAR_SQUELCH_PREFIXES.each_with_index { |p, i| respond "#{i+1}. #{p}" }
  end
  exit

when 'remove'
  idx = args.first.to_i
  if idx <= 0 || idx > $STAR_SQUELCH_PREFIXES.length
    echo "invalid index. try ;#{SCRIPT_NAME} list"
    exit
  end
  removed = $STAR_SQUELCH_PREFIXES.delete_at(idx - 1)
  save_prefixes!
  echo "removed: #{removed}"
  exit

when 'clear'
  $STAR_SQUELCH_PREFIXES.clear
  save_prefixes!
  echo 'cleared all phrases.'
  exit
end

DownstreamHook.remove(HOOK_NAME) rescue nil
DownstreamHook.add(HOOK_NAME, proc { |server_string|
  begin
    txt = visible_text(server_string)
    suppressed?(txt) ? nil : server_string
  rescue => e
    echo "star-squelch error: #{e}"
    server_string
  end
})

before_dying do
  DownstreamHook.remove(HOOK_NAME) rescue nil
  echo 'star-squelch stopped.'
end

echo "star-squelch active. #{$STAR_SQUELCH_PREFIXES.length} phrases blocked."
loop { sleep 0.5 }
