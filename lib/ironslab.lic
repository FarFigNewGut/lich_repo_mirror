=begin

Script: 		Ironslab
Author: 		WilliamW1979 (WilliamW1979@netscape.net)
Game:			Gemstone
Date: 			July 16, 2017
Version: 		1.2
Description: 		Make 4 iron slabs in the Kobold mines (can do parts or whole process at once)
Commands: 		;iron
What script does:	Automates the iron slab process!
Categories:             Artisan, Society
Tags:                   forging, forge, craft, artisan, voln

Update History

1.2 - Removed the Vars.Container for those who use my other scripts via settings file!

1.1 - Added a command list to do individual parts and a player check to stop when other players are present in charcoal and crucible rooms

1.0 - Basic version

=end

class IRON

	attr_accessor :container, :settings_data

	def initialize
		unless $SAFE == 0
			@container = Vars.Container
		else
			if File.file?("#{$script_dir}/settings.lic")
				load("#{$script_dir}/settings.lic")
			else
				respond
				respond
				respond "This script requires settings.lic to run!"
				respond "It is a utility scripts for all my scripts (fix one file instead of updating all files for upgrades)"
				respond "kill script to prevent downloading"
				respond
				respond
				start_script 'repo', ["download settings.lic"]
				wait_while{running?("repo")}
				load("#{$script_dir}/settings.lic")
			end
			@settings_data = SETTINGS.new
			@container = @settings_data.get_setting("lootsack")
			if @container.nil?
				respond
				respond
				respond "please set lootsack using: ;iron lootsack [container]"
				respond
				respond
			end
		end
		
	end

	def command
		car = nil
		if variable[1].nil?
			var = "all"
		else
			var = variable[1]
		end
		if variable[1].nil?
			run
		elsif "charcoal".include?(variable[1])
			charcoal
		elsif "oil".include?(variable[1])
			oil
		elsif "ore".include?(variable[1])
			iron_ore
		elsif "slab".include?(variable[1])
			create_slab
		elsif "lootsack".include?(variable[1])
			if variable[2]
				@settings_data.save_setting("lootsack", variable[0].gsub(variable[1] + " ", ""))
			end
			exit
		else
			respond
			respond
			respond "Just a basic script to create iron ore automatically."
			respond
			respond "   Command                          Description"
			respond ";iron lootsack [container]      sets container (must be trusted to use this setting)"
			respond ";iron charcoal                  create charcoal"
			respond ";iron oil                       search for oil"
			respond ";iron ore                       search for 4 ores"
			respond ";iron slab                      go through process of creating the slab"
			respond ";iron                           Does them all!"
			respond
		end
	end

	def run
		charcoal
		oil
		iron_ore
		create_slab
	end

	def player_check
		if GameObj.pcs.nil?
			return false
		end
		return true
	end

	def charcoal
		start_script 'go2', ["7998"]
		wait_while{running?("go2")}
		fput "stow all"
		if player_check
			respond
			respond
			respond "Pausing, someone is here ;unpause to continue"
			respond
			respond
			fput ";pause"
		end
		fput "Get charcoal"
		unless GameObj.right_hand.noun == "charcoal"
			while true
				fput "get wood"
				if GameObj.right_hand.noun == "tinder"
					fput "Put tinder in burner"
					break
				end
				fput "put #{GameObj.right_hand.noun} in burner"
			end
			while true
				fput "get wood"
				if GameObj.right_hand.noun == "log"
					fput "Put log in burner"
					break
				end
				fput "put #{GameObj.right_hand.noun} in burner"
			end
			while true
				fput "get wood"
				if GameObj.right_hand.noun == "stick" and GameObj.left_hand.noun == "stick"
					fput "rub stick"
					break
				elsif GameObj.right_hand.noun == "stick"
					fput "swap"
				else
					fput "put #{GameObj.right_hand.noun} in burner"
				end
			end
			waitfor "burner rapidly cools off"
			fput "get charcoal"
		end
		multifput "open my #{@container}", "put charcoal in my #{@container}", "close my #{@container}"
	end

	def oil
		start_script 'go2', ["8009"]
		wait_while{running?("go2")}
		while GameObj.right_hand.name == "Empty"
			fput "search"
			if GameObj.loot.any? { |o| o.name == 'filthy flask of oil'}
				fput "get oil"
			end
		end
		multifput "open my #{@container}", "put oil in my #{@container}", "close my #{@container}"
	end

	def iron_ore
		start_script 'go2', ["8017"]
		wait_while{running?("go2")}
		iron = 0
		while iron < 4
			while GameObj.right_hand.name == "Empty"
				fput "search workface"
				if GameObj.loot.any? {|o| o.name == 'some iron ore'}
					iron += 1
					fput "get ore"
				end
			end
			multifput "open my #{@container}", "put ore in my #{@container}", "close my #{@container}"
		end
	end

	def create_slab
		start_script 'go2', ["8013"]
		wait_while{running?("go2")}
		if player_check
			respond
			respond
			respond "Pausing, someone is here ;unpause to continue"
			respond
			respond
			fput ";pause"
		end
		fill_crucible
		close_valve
		oil_machine
		pull_chain_bellows
		open_valve
		pull_chain_bellows
		pull_chain_bellows
		start_script 'go2', ["8013"]
		wait_while{running?("go2")}
		result = waitfor "it should be safe to handle", "ruined"
		if result.include?("ruined")
			respond
			respond
			respond "Something went horribly wrong!"
			respond
			respond
			return
		end
		fput "open #{@container}"
		multifput "get iron from crucible", "put iron in my #{container}"
		multifput "get iron from crucible", "put iron in my #{container}"
		multifput "get iron from crucible", "put iron in my #{container}"
		multifput "get iron from crucible", "put iron in my #{container}"
		fput "close #{@container}"
	end

	def fill_crucible
		fput "open my #{@container}"
		multifput "get my charcoal", "put my charcoal in crucible"
		multifput "get my ore", "put my ore in crucible"
		multifput "get my ore", "put my ore in crucible"
		multifput "get my ore", "put my ore in crucible"
		multifput "get my ore", "put my ore in crucible"
	end

	def close_valve
		start_script 'go2', ["8013"]
		wait_while{running?("go2")}
		fput "turn valve"
		result = waitfor "closes", "thin trickle"
		if result.include?("thin trickle")
			fput "turn valve"
		end
	end

	def open_valve
		start_script 'go2', ["8013"]
		wait_while{running?("go2")}
		fput "turn valve"
		result = waitfor "closes", ""
		if result.include?("closes")
			fput "turn valve"
		end
	end

	def pull_chain_bellows
		start_script 'go2', ["8014"]
		wait_while{running?("go2")}
		fput "pull chain"
		waitrt
		fput "pull bellows"
		waitrt
	end

	def oil_machine
		start_script 'go2', ["8014"]
		wait_while{running?("go2")}
		fput "get my oil"
		fput "pour oil in drums"
		fput "close my #{@container}"
	end
end

unless $SAFE == 0
	respond
	respond
	respond "If you are not using Vars.Container, then please trust script using: #{$lich_char}trust skin"
	respond
	respond
end

iron = IRON.new
iron.command