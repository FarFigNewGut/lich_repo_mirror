=begin

    qskin.lic
    Daedeus, 7/3/2015

    An extract of sloot's excellent skinning functionality as a separate script, with a few minor fixes
    USAGE:
        1.  Run ;sloot setup and set the skinning weapon, skinning sack
        2.  EDIT the variables in the beginning of this file, because it's hard to read those settings from sloot
        3.  Even if you don't edit, the defaults are what I use and should be good ?

    Added feature: skinweaponbluntsack (needs testing)
    If you store your edged and blunt skin tool in different sacks, set it with:

    ===================
    ;vars set skinweaponbluntsack = <whatever>
    ===================

    #ignore this line
    #settings = Marshal.load(Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', 'sloot'.encode('UTF-8'), "#{XMLData.game}:#{XMLData.name}".encode('UTF-8'))) #

=end
#======================================
#
#  TO USE THE BLUNT WEAPON SACK FEATURE, SET THE BLUNTWEAPONSACK WITH ;vars set skinweaponbluntsack=<sackname>
#
#========== EDIT THESE VARIABLES, THEY CANT BE PORTED FROM SLOOT EASILY
#proxy for settings that can't be accessed because they are stuffed away in CharSettings

    #stow your left hand instead of your right, to grab your skinning weapon, if neither of them are free
    enable_stow_left = false        

    #use an alternate weapon for skinning
    enable_skin_alternate = true

    #stance first while skinning, if there are no enemies
    enable_skin_stance_first = true

    #stance offensive
    enable_skin_offensive = true

    #kneel while skinning, if there are no enemies
    enable_skin_kneel = true

    #use a special command to stand up
    skin_stand_verb = nil

    #don't stance or kneel if there are mobs present
    enable_skin_safe_mode = true

    #enable skin sigil, if you have it
    enable_skin_sigil = true

    #enable casting 604, if you have it
    enable_skin_604 = true

    #just leave this true or don't use this script
    enable_skinning = true
#=============================


#Important variables
skin_prepared       = false

skin_prepared       = false
skin_empty_hands    = false
sacks               = Hash.new
skinweaponcurrent   = nil
skinweapon          = nil
skinweaponblunt     = nil

skinweaponsack      = nil
skinweaponbluntsack = nil

prev_stance         = checkstance
prev_stance_percent = percentstance

putregex = /^You (?:put|(?:discreetly )?tuck|You attempt to shield your|place|.* place|slip|wipe off the blade and sheathe|absent-mindedly drop|carefully add|find an incomplete bundle|untie your drawstring pouch)|^The .+ is already a bundle|^Your bundle would be too large if you if you tried to add that|^The .+ is too large to be bundled\.|^As you place your .+ inside your .+, you notice another .+ inside the .+ and carefully arrange the two .+ into a neat bundle\.|You hear a slight sizzling sound as you slide your/
putregexwithfail = /^You (?:put|(?:discreetly )?tuck|You attempt to shield your|place|.* place|slip|wipe off the blade and sheathe|absent-mindedly drop|carefully add|find an incomplete bundle|untie your drawstring pouch)|You can't|won't fit in|find there is no space for the|^The .+ is already a bundle|^Your bundle would be too large if you if you tried to add that|^The .+ is too large to be bundled\.|^As you place your .+ inside your .+, you notice another .+ inside the .+ and carefully arrange the two .+ into a neat bundle\.||You hear a slight sizzling sound as you slide your/



#initialize the sacks we need
['skin', 'skinweapon', 'skinweaponblunt'].each { |type|
    if !UserVars.send("#{type}sack").nil? and UserVars.send("#{type}sack").length > 0 and sack = GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.send("#{type}sack").strip)}/i }
        sacks[type] = sack
    end
}

# Returns an array of all dead npcs using GameObj
find_dead = proc { |type| 
    npcs = GameObj.npcs.find_all { |npc| npc.status == 'dead' }
    
    if CharSettings['critter_exclude'].to_s.length > 0
        npcs.delete_if { |npc| npc.name =~ /#{CharSettings['critter_exclude']}/ }
    end
    
    npcs
}
# Checks if it's safe to enhance skinning by kneeling or stancing to offensive
safe_to_enhance = proc {
    next true unless enable_skin_safe_mode
    !GameObj.npcs.any? { |npc| npc.status !~ /dead/ }
}

# Frees up the loot hand
free_hand = proc {
    next if checkleft.nil? or checkright.nil?

    if UserVars.lootsack.nil?
        msg.call("warning: attempting to empty hand using lich function but no loostack has been set")
    end
    
    if enable_stow_left
        empty_left_hand
    else
        empty_right_hand
    end
}

#change stance
change_stance = proc { |stance|
    loop {
        break if (checkstance == stance) or (stance == 'defensive' and checkstance 80)
        
        res = dothistimeout "stance #{stance}", 2, /You are now|Roundtime|Wait|wait|You move into/
        if res =~ /Roundtime: (\d+)|wait (\d+)/i
            sleep (($1 or $2).strip.to_f - 1)
        end
    }
}

# Gets an item
get_item = proc { |item,sack|
    left  = GameObj.left_hand
    right = GameObj.right_hand
    next true if right.id == item or left.id == item or checkleft =~ /#{item}/ or checkright =~ /#{item}/
    
    id = item.class == GameObj ? "##{item.id}" : item
    
    if sack.nil?
        line = "get #{id}"
    elsif sack.class == GameObj or sack = GameObj[sack]
        line = "get #{id} from ##{sack.id}"
    else
        line = "get #{id} from my #{sack}"
    end
    
    res = dothistimeout line, 3, /is out of your reach|^You can't pick that up\.$|^You already have that\.$|^You pick up|You remove|crumbles and decays away.$|crumbles into a pile of dust!$|^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
    if res =~ /is out of your reach/
        sleep 4
        redo
    elsif res =~ /^You can't pick that up\.$/
        next false
    elsif res =~ /^You already have that\.$|^You pick up|^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve)/
        next true
    elsif res =~ /^Get what?$/
        next false
    elsif res =~ /crumbles and decays away.$|crumbles into a pile of dust!$/
        next false
    end
    
    noun   = item.class == GameObj ? item.noun : item
    result = false
    30.times {
        if right.id == item or left.id == item or (checkleft and noun =~ /#{checkleft}/) or (checkright and noun =~ /#{checkright}/)
            result = true
            break
        end
        
        sleep 0.10
    }
    
    msg.call("get_item failed due to #{res}") unless result
    result
}

# Puts an item somewhere
put_item = proc { |item,sack|
    left_hand  = GameObj.left_hand
    right_hand = GameObj.right_hand
    
    next false unless right_hand.id == item or left_hand.id == item or checkleft =~ /#{item}/ or checkright =~ /#{item}/
    
    if sack.class == GameObj or sack = GameObj[sack]
        line = "put my #{item} in ##{sack.id}"
    else
        line = "put my #{item} in my #{sack}"
    end
    
    waitrt?
    waitrt?

    res = dothistimeout line, 3, putregexwithfail
    if res =~ /^You can't put .* in .*\.  It's closed\!$/
        open_sack.call(sack)
        next put_item.call(item,sack)
    elsif res =~ /^Your .* won't fit in .*\.$|find there is no space for the/
        next false
    end
    
    noun   = item.class == GameObj ? item.noun : item
    result = false
    30.times {
        if right_hand.id != item and left_hand.id != item and (not checkleft or noun !~ /#{checkleft}/) and (not checkright or noun !~ /#{checkright}/)
            result = true
            break
        end
        
        sleep 0.10
    }
    
    result
}

# Prepares for skinning process
prepare_skinner = proc { |critter|
    next if UserVars['skin_exclude'].include?(critter.name)
    next if skin_prepared
    next unless GameObj.npcs.any? { |npc| npc.status =~ /dead/ }

    #for this script, we always want to skin!
    next unless enable_skinning
    
    # Sigil of Resolve
    if Spell[9704].known? and Spell[9704].affordable? and not Spell[9704].active? and enable_skin_sigil
        Spell[9704].cast 
    end
    
    # 604 - Skinning
    if Spell[604].known? and Spell[604].affordable? and enable_skin_604
        while !Spell[604].active? 
            Spell[604].cast 
        end
    end
    
    if enable_skin_alternate
        if critter.name =~ /krag dweller|greater krynch/
            empty_hands
            skin_empty_hands = true
        else
            free_hand.call
        end
        
        skinweaponcurrent = skinweapon
        skinweaponsack = sacks['skinweapon']
        if critter.name =~ /krynch|spiked cavern urchin|krag dweller|stone mastiff|gargoyle/i and UserVars.skinweaponblunt.to_s.length > 1
            skinweaponcurrent = skinweaponblunt
            skinweaponsack = skinweaponbluntsack
        end
        
        unless get_item.call(skinweaponcurrent,skinweaponsack)
            msg.call("** failed to find #{skinweaponcurrent.name} in #{skinweaponsack.name}")
        end
    else
		if critter.name =~ /krag dweller|greater krynch/
			free_hand.call
		end
    end
    #2386, 2878
    if safe_to_enhance.call
        while enable_skin_kneel and !checkkneeling
            dothistimeout "kneel", 5, /^You kneel down\.$|^You move to|^You are already kneeling\.$/
        end
        
        if enable_skin_offensive
            change_stance.call('offensive')
        end
    end
    
    skin_prepared = true
}
# Get thee up!
stand_up = proc {
    if skin_stand_verb.nil? or skin_stand_verb.empty?
        until standing?
            dothistimeout "stand", 5, /^You stand back up\.$/
        end
    else
        until standing?
            fput skin_stand_verb
        end
    end
}

# Change back to previous stance
stance_back = proc {
    prev_stance_percent = 80 if prev_stance_percent > 80
    
    res = nil
    while percentstance < prev_stance_percent and res !~ /rage/
        res = dothistimeout "stance #{prev_stance}", 5, /rage|#{prev_stance}/
    end
}

# Finishes up skinning process
finish_skinner = proc {
    next unless skin_prepared
    next unless enable_skinning
    
    if enable_skin_stance_first
        stance_back.call
        stand_up.call
    else
        stand_up.call
        stance_back.call
    end
    
    if enable_skin_alternate
        unless put_item.call(skinweaponcurrent,UserVars.skinweaponsack)
            echo "failed to put #{skinweaponcurrent} in #{UserVars.skinweaponsack}"
        end
    end

    if skin_empty_hands
        fill_hands
        skin_empty_hands = false
    end
}

# Skins a critter
skin_critter = proc { |critter|    
    next if UserVars['skin_exclude'].include?(critter.name)
    
    cmd = "skin ##{critter.id}"
    if not skinweaponcurrent.nil? and checkleft =~ /#{skinweaponcurrent}/i
        cmd += " left"    
    end
    
    res = dothistimeout cmd, 5, /skinned|botched|already been|cannot skin|must be a member|can only skin|You are unable to break through|You break through the crust of the|You crack open a portion/
    if res =~ /^You cannot skin/
        UserVars['skin_exclude'].push(critter.name)
    elsif res =~ /You break through the crust of the .+ and withdraw (.+)!|You crack open a portion of the .+ and uncover (.+)!$/
        foundgem = $1.split.last
        gemsack = GameObj.inv.find { |obj| obj.name =~ /#{UserVars.gemsack}/}
        put_item.call(foundgem,gemsack)
    end
}

#======================
#prepare the item variables
if enable_skinning and enable_skin_alternate
    skinweaponsack  = sacks['skinweapon']
    skinweaponbluntsack = sacks['skinweaponblunt']

    if skinweaponsack.nil?
        echo "** skinning is enabled but I could not find your skin weapon sack"
        exit
    end

    if skinweaponbluntsack.nil?
        skinweaponbluntsack = skinweaponsack
    end

    if not skinweaponsack.contents
        fput "look in ##{skinweaponsack.id}"
    end
    
    if not skinweaponbluntsack.contents
        fput "look in ##{skinweaponbluntsack.id}"
    end
    skinweapon      = skinweaponsack.contents.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.skinweapon)}/i }
    skinweaponblunt = skinweaponbluntsack.contents.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.skinweaponblunt)}/i }
    
    if skinweapon.nil?
        echo "** skinning is enabled but I could not find your skin weapon"
    end    
    
    if skinweaponblunt.nil?
        skinweaponblunt = skinweapon
    end
end

critters = find_dead.call


critters.each { |critter| 
    next if critter.name =~ /Grimswarm/ or critter.type =~ /bandit/
    prepare_skinner.call(critter)
    skin_critter.call(critter) 
}
finish_skinner.call


#=======================