=begin
   This script creates a dedicated window to display all signature and regular verbs with VERB INFO available to the player.

IMPORTANT: You must run the script the first time with the command ;verbwindow build
   
   Features:
   - Automatically parses the output of the SIGNATURE and VERB LIST LETTER(a-z) commands and populates a dynamic Wrayth window with all signature verbs known by the player as well as all verbs in the game with VERB INFO.
   - Displays an alphabetical clickable list of all signature verbs and regular verbs that shows SIGNATURE VIEW or VERB INFO for a preview of each verb.
   - Verbs that do not require a target can be activated by clicking the ( ! ).
   - Tags signature verbs that require a player target with (T).
   - Allows the player to customize the list by clicking an [ X ] to hide signature or regular verbs.
   - Hidden verbs are populated at the very bottom of the window and can be clicked to make them unhidden.
   - Players can now load a profile (using ;send load `profile_name`) that overrides the hidden verbs list.
   - You can also save a custom profile using ;send save [profile_name] which stores the current visible regular verbs.
   
author: Phocosoen, ChatGPT
contributors: Tysong, Nisgui
tags: wrayth, frontend, mod, window, signature, emote, verb
version: 1.0.1
=end

require 'yaml'

# Set up the path to your YAML file.
$signature_yaml_path = File.join(DATA_DIR, XMLData.game, Char.name, "verbwindow.yaml")
WINDOW_ID = 'VerbWindow'
HOOK_ID   = 'verbwindow_hook'
CMD_QUEUE = Queue.new
$update_mutex = Mutex.new
$update_cv = ConditionVariable.new

# Define sample built-in profiles.
# Each profile lists the regular verbs that should remain visible.
PROFILES = {
  "all"       => :all,
  "none"      => [],

  # Demeanor-based profiles
  "cold"     => ["glare", "scowl", "grunt", "snort", "snap", "shrug", "stare", "swear", "sneer", "yell"],
  "reserved" => ["mumble", "blink", "fold", "ponder", "shrug", "nod", "fidget", "twitch", "wait", "sigh"],
  "neutral"  => ["nod", "glance", "listen", "observe", "stand", "turn", "fold", "shrug", "pace"],
  "friendly" => ["smile", "wave", "wink", "laugh", "applaud", "beam", "blush", "giggle", "salute"],
  "warm"     => ["hug", "nuzzle", "cuddle", "smooch", "pat", "preen", "rub", "tickle", "touch", "snuggle"],

  # Profession-based profiles
  "warrior"  => ["arrest", "clutch", "crack", "growl", "scowl", "stride", "tap", "wait", "yell", "grunt"],
  "rogue"    => ["blink", "cackle", "cower", "cringe", "duck", "jeer", "leer", "pace", "shrug", "twitch"],
  "monk"     => ["chant", "daydream", "exhale", "fidget", "fold", "gaze", "kneel", "mumble", "ponder", "stretch"],
  "cleric"   => ["beseech", "bow", "cheer", "kneel", "pray", "raise", "salute", "shush", "smile", "wave"],
  "empath"   => ["blush", "cuddle", "flinch", "giggle", "hug", "kiss", "nuzzle", "pat", "pout", "snuggle"],
  "sorcerer" => ["babble", "chant", "curse", "glare", "laugh", "mumble", "ponder", "raise", "snap", "stare"],
  "wizard"   => ["chant", "exhale", "gasp", "glance", "mumble", "ponder", "raise", "tap", "think", "wave"],
  "ranger"   => ["breathe", "brush", "cough", "dust", "fly", "glance", "listen", "observe", "pace", "wait"],
  "bard"     => ["beam", "bow", "cheer", "chuckle", "giggle", "hum", "laugh", "smile", "wink"],

  # Arkati-based profiles
  "charl" => ["wave", "shout", "sway", "gasp", "grunt", "glare", "jump", "wait"],
  "cholen" => ["dance", "giggle", "wink", "smile", "applaud", "flirt", "bow", "chuckle", "bounce", "guffaw"],
  "eonak" => ["ponder", "observe", "dust", "tinker", "fold", "nod", "grin", "rub", "salute", "hold"],
  "imaera" => ["kneel", "smile", "breathe", "pray", "giggle", "sway", "gasp", "touch", "hug", "flutter"],
  "jastev" => ["gaze", "mumble", "cry", "stare", "daydream", "blink", "think", "pout", "sigh", "pose"],
  "kai" => ["flex", "jump", "grin", "stride", "shout", "wave", "run", "sprint", "salute", "tap"],
  "koar" => ["salute", "stand", "nod", "rest", "glare", "bow", "shout", "think", "hold", "raise"],
  "lorminstra" => ["kneel", "pray", "rest", "nod", "gasp", "whisper", "breathe", "mumble", "wait", "look"],
  "lumnis" => ["ponder", "stare", "think", "observe", "blink", "rest", "gaze", "mumble", "touch", "nod"],
  "oleani" => ["blush", "hug", "nuzzle", "smile", "kiss", "wave", "gaze", "giggle", "wink", "purr"],
  "phoen" => ["smile", "salute", "warm", "laugh", "beam", "cheer", "grin", "gaze", "wave", "stretch"],
  "ronan" => ["dream", "yawn", "sleep", "mumble", "stare", "pace", "touch", "blink", "wait", "gasp"],
  "tonis" => ["jump", "run", "move", "wave", "pace", "wink", "dart", "bow", "turn", "smile"],
  "gosaena" => ["kneel", "mumble", "pray", "stare", "drool", "gasp", "cringe", "glare", "wait", "whimper"],
  "zelia" => ["babble", "cackle", "bounce", "giggle", "shout", "grin", "snort", "pout", "daydream", "blink"],
  "andelas" => ["growl", "snarl", "pace", "pounce", "grin", "glare", "smirk", "yelp", "jeer", "stare"],
  "eorgina" => ["glare", "smirk", "snarl", "command", "grin", "pose", "curse", "snap", "crack", "stride"],
  "fashlonae" => ["ponder", "mumble", "stare", "glance", "gaze", "fold", "tap", "observe", "touch", "think"],
  "ivas" => ["smirk", "flirt", "giggle", "wink", "nuzzle", "kiss", "pose", "lean", "smooch", "blush"],
  "luukos" => ["hiss", "glare", "touch", "smirk", "mumble", "snarl", "pace", "wait", "gasp", "snap"],
  "marlu" => ["growl", "glare", "snap", "yell", "crack", "curse", "sneer", "shout", "scream", "stare"],
  "mularos" => ["sigh", "cry", "grovel", "mumble", "glance", "touch", "cower", "kneel", "pout", "whimper"],
  "sheru" => ["shiver", "scream", "panic", "cower", "flinch", "cringe", "stare", "twitch", "drool", "snap"],
  "vtull" => ["yell", "growl", "snap", "snarl", "shout", "stride", "grunt", "glare", "curse", "clutch"],
  "aeia" => ["smile", "gather", "kneel", "gaze", "touch", "breathe", "giggle", "daydream", "blush", "fold"],
  "amasalen" => ["snap", "glare", "snarl", "curse", "touch", "pout", "grin", "growl", "yell", "sneer"],
  "arachne" => ["smirk", "glance", "touch", "cackle", "wink", "lean", "fold", "snap", "twist", "slink"],
  "ghezresh" => ["glare", "smirk", "lean", "observe", "mumble", "pose", "point", "stare", "grin", "fold"],
  "huntress" => ["glare", "growl", "pace", "stare", "grin", "sneer", "snap", "salute", "duck", "pose"],
  "jaston" => ["gaze", "sigh", "smile", "whistle", "nod", "wait", "wave", "flutter", "jump", "rest"],
  "kuon" => ["smile", "touch", "gather", "kneel", "fold", "gaze", "sniff", "breathe", "giggle", "wave"],
  "laethe" => ["cry", "blush", "stare", "hug", "pout", "lean", "mumble", "sigh", "look", "giggle"],
  "leya" => ["salute", "grin", "glare", "punch", "bow", "stance", "growl", "nod", "wait", "fold"],
  "niima" => ["smile", "gasp", "wave", "gaze", "splash", "grin", "jump", "cheer", "sway", "swim"],
  "onar" => ["glare", "sneer", "stare", "touch", "snap", "cower", "mumble", "wait", "lean", "fold"],
  "tilamaire" => ["dance", "pose", "smile", "giggle", "bow", "grin", "twirl", "wink", "bounce", "wave"],
  "voaris" => ["blush", "sigh", "hug", "gaze", "kiss", "smile", "nuzzle", "touch", "lean", "pout"],
  "voln" => ["salute", "stand", "pray", "kneel", "rest", "fold", "observe", "bow", "nod", "wait"]
}

# ==============================================================
# New functions for custom profiles.
# ==============================================================
# New: Get custom profiles from the existing YAML file.
def load_custom_profiles
  if File.exist?($signature_yaml_path)
    data = YAML.load_file($signature_yaml_path)
    data["custom_profiles"] || {}
  else
    {}
  end
end

# New: Save a custom profile using the existing YAML file.
def save_custom_profile(profile_name)
  visible_verbs = @regular_verbs.uniq.reject { |v| VerbAPI.hidden_verbs.include?(v) }
  data = File.exist?($signature_yaml_path) ? YAML.load_file($signature_yaml_path) : {}
  custom_profiles = data["custom_profiles"] || {}
  custom_profiles[profile_name.downcase] = visible_verbs
  data["custom_profiles"] = custom_profiles
  File.write($signature_yaml_path, data.to_yaml)
  echo "[verbwindow] Custom profile '#{profile_name}' saved. Visible verbs: #{visible_verbs.inspect}"
  CMD_QUEUE.push(:update)
end

# ===================================================================
# Add new verb descriptions automatically if not already present
# ===================================================================
ADDITIONAL_VERB_DESCRIPTIONS = {
  "agree"     => "You adopt an agreeable expression.",
  "approve"   => "You give an approval gesture with your hand.",
  "arrest"    => "Everyone better respect your authorit-ay!",
  "babble"    => "Babbling again, eh?",
  "beseech"   => "You beseech your deity for some divine assistance.",
  "blanch"    => "You feel the blood drain from your face.",
  "breathe"   => "You take a deep breath.",
  "brush"     => "You brush yourself off.",
  "cackle"    => "You cackle!",
  "chant"     => "You chant an impromptu melodic lilt which causes the air around you to shimmer.",
  "cheer"     => "You let out a cheer!",
  "chuckle"   => "You chuckle.",
  "clutch"    => "You wring your hands.",
  "cough"     => "You cough.",
  "crawl"     => "You move to a kneeling position. You crawl around a bit.",
  "cringe"    => "You cringe.",
  "cry"       => "As you begin to cry, tears run down your cheek, creating thin lines in the ash and soot.",
  "curse"     => "You curse the day you were born.",
  "daydream"  => "You lose yourself completely in a daydream...",
  "dismiss"   => "You wave your hand in a dismissive gesture.",
  "drool"     => "You drool.",
  "flinch"    => "You flinch.",
  "grunt"     => "You grunt.",
  "hum"       => "You hum a random, wandering tune.",
  "nod"       => "You nod.",
  "prance"    => "You prance back and forth energetically, taking light, springy steps.",
  "pray"      => "You mumble a few quick words of blessing for your meal.",
  "sigh"      => "You sigh.",
  "swear"     => "You whistle something nasty between clenched teeth.",
  "yawn"      => "You yawn.",
  "yelp"      => "You let out a yelp!"
}

# ==============================================================
# Module to handle in-memory toggle state for signature & regular verbs.
# ==============================================================
module VerbAPI
  @hidden_verbs_in_memory = []

  # Returns the hidden verbs array.
  def self.hidden_verbs
    @hidden_verbs_in_memory
  end

  # Load the list of hidden verbs from the YAML file into our in-memory store.
  def self.load_from_yaml(path)
    if File.exist?(path)
      data = YAML.load_file(path)
      @hidden_verbs_in_memory = data["hidden_verbs"] || []
    else
      @hidden_verbs_in_memory = []
    end
  end

  # Save the entire data structure to the YAML file (signature verbs, regular verbs, and hidden verbs).
def self.save_to_yaml(path, signature_verbs, regular_verbs)
  data = File.exist?(path) ? YAML.load_file(path) : {}
  sorted_verbs = regular_verbs.uniq.sort
  sorted_descriptions = ADDITIONAL_VERB_DESCRIPTIONS.slice(*sorted_verbs).sort.to_h

  data["signature_verbs"] = signature_verbs
  data["regular_verbs"] = sorted_verbs
  data["hidden_verbs"] = @hidden_verbs_in_memory
  data["regular_descriptions"] = sorted_descriptions
  File.write(path, data.to_yaml)
end

  # Toggle a verb's hidden state in memory and trigger an update of the window.
  def self.toggle(verb)
    verb = verb.to_s
    if @hidden_verbs_in_memory.include?(verb)
      @hidden_verbs_in_memory.delete(verb)
      echo "[verbwindow] Un-hid: #{verb}"
    else
      @hidden_verbs_in_memory << verb
      echo "[verbwindow] Hid: #{verb}"
    end
    CMD_QUEUE.push(:update)
  end
end

# ==============================================================
# New: Load a profile.
# This method accepts an array of verb names that should remain visible.
# All regular verbs not in this array will be hidden.
# ==============================================================
def load_profile(profile_visible)
  if profile_visible == :all
    VerbAPI.instance_variable_set(:@hidden_verbs_in_memory, [])
    echo "[verbwindow] All verbs unhidden."
  else
    signature_keys = @signature_verbs.keys
    new_hidden = @regular_verbs.uniq.reject { |v| profile_visible.include?(v) || signature_keys.include?(v) }
    VerbAPI.instance_variable_set(:@hidden_verbs_in_memory, new_hidden)
    echo "[verbwindow] Profile loaded. Visible verbs: #{profile_visible.inspect}"
  end
  VerbAPI.save_to_yaml($signature_yaml_path, @signature_verbs, @regular_verbs)
  CMD_QUEUE.push(:update)
end

# ==============================================================
# Load Data from YAML at startup.
# ==============================================================
@data = if File.exist?($signature_yaml_path)
          YAML.load_file($signature_yaml_path)
        else
          { "signature_verbs" => {}, "regular_verbs" => [], "hidden_verbs" => [] }
        end

@signature_verbs = @data["signature_verbs"] || {}
@regular_verbs   = @data["regular_verbs"]   || []

# Inject any new verbs from the predefined roleplay emote list
new_verbs_added = false
ADDITIONAL_VERB_DESCRIPTIONS.each_key do |verb|
  unless @regular_verbs.include?(verb)
    @regular_verbs << verb
    new_verbs_added = true
  end
end

# Save updated regular verbs to YAML if any were added
if new_verbs_added
  VerbAPI.save_to_yaml($signature_yaml_path, @signature_verbs, @regular_verbs)
  echo "[verbwindow] New emote-style verbs added and YAML updated."
end

# Load the in-memory hidden verbs from the YAML file.
VerbAPI.load_from_yaml($signature_yaml_path)


# ==============================================================
# Open the Verb Window.
# ==============================================================
puts("<closeDialog id='#{WINDOW_ID}'/>")
puts("<openDialog type='dynamic' id='#{WINDOW_ID}' title='Verbs' target='#{WINDOW_ID}' scroll='auto' location='main' justify='3' height='500' resident='true'><dialogData id='#{WINDOW_ID}'></dialogData></openDialog>")

# ==============================================================
# Downstream hook to capture data from the server output.
# ==============================================================
DownstreamHook.add(HOOK_ID, proc { |line|
  # Capture signature verbs (with target type).
  if line =~ /<d cmd="signature view ([^"]+)">([^<]+)<\/d>\s+(player|none)/i
    verb = $1.strip
    label = $2.strip
    target_type = $3.strip.downcase
    label += " (T)" if target_type == "player"
    unless @signature_verbs.key?(verb)
      @signature_verbs[verb] = { "label" => label, "description" => nil, "target" => target_type }
      CMD_QUEUE.push(:update)
    end

  # Capture regular verbs.
  elsif line =~ /^\s*(\w[\w'-]+)\s+\*\*/
    verb = $1.strip
    unless @regular_verbs.include?(verb)
      @regular_verbs << verb
      CMD_QUEUE.push(:update)
    end
  end
  line
})

# ==============================================================
# Method to render/update the Verb Window.
# ==============================================================
def render_signature_window
  hidden = VerbAPI.hidden_verbs
  echo "[verbwindow] Rendering window with #{hidden.size} hidden verb(s)."
  output = "<dialogData id='#{WINDOW_ID}' clear='t'>"
  top = 0

  # Header information.
  output += "<label id='header1' value='Click on verb for preview.' justify='left' left='0' top='#{top}' />"
  top += 20
  output += "<label id='header2' value='Click on ( ! ) to activate.' justify='left' left='0' top='#{top}' />"
  top += 20
  output += "<label id='sig_header' value='Signature Verbs:' justify='left' left='0' top='#{top}' />"
  top += 20

  # Split signature verbs into visible and hidden.
  visible_signature = @signature_verbs.sort_by(&:first).reject { |(verb, info)| hidden.include?(verb) }
  hidden_signature  = @signature_verbs.sort_by(&:first).select { |(verb, info)| hidden.include?(verb) }

  # Render visible signature verbs.
  visible_signature.each_with_index do |(verb, info), i|
    if info["target"] == "none"
      output += "<link id='exec_sig_#{i}' value='( ! )' cmd='signature #{verb}' echo='signature #{verb}' justify='left' left='0' top='#{top}' />"
    end
    output += "<link id='sig_#{i}' value='#{info['label']}' cmd='signature view #{verb}' echo='signature view #{verb}' justify='left' left='30' top='#{top}' />"
    output += "<link id='hide_sig_#{i}' value='[ X ]' cmd=';eq VerbAPI.toggle(:#{verb})' echo='[Hiding #{verb}]' justify='left' left='140' top='#{top}' />"
    top += 20
  end

  # If there are any hidden signature verbs, add a header and list them.
  unless hidden_signature.empty?
    output += "<label id='hidden_sig_header' value='Hidden Signature Verbs:' justify='left' left='0' top='#{top}' />"
    top += 20
    hidden_signature.each_with_index do |(verb, info), i|
      output += "<link id='hidden_sig_#{i}' value='( HIDDEN ) #{info['label']}' cmd=';eq VerbAPI.toggle(:#{verb})' echo='[Unhiding #{verb}]' justify='left' left='30' top='#{top}' />"
      top += 20
    end
  end

  # Render regular verbs – first non-hidden, then hidden verbs.
  output += "<label id='reg_header' value='Regular Verbs:' justify='left' left='0' top='#{top}' />"
  top += 20

  # Build a list of non-hidden regular verbs.
  visible_non_hidden = @regular_verbs.uniq.reject { |v| hidden.include?(v) }.sort
visible_non_hidden.each_with_index do |verb, i|
output += "<link id='exec_reg_#{i}' value='( ! )' cmd='#{verb}' echo='#{verb}' justify='left' left='0' top='#{top}' />"

# Use saved description from YAML first, then fallback to built-in, else nil
description = @data.dig("regular_descriptions", verb) || ADDITIONAL_VERB_DESCRIPTIONS[verb]

if description
  output += "<link id='reg_#{i}' value='#{verb}' cmd=';e echo #{description.inspect}' echo='[Previewing #{verb}]' justify='left' left='30' top='#{top}' />"
else
  output += "<link id='reg_#{i}' value='#{verb}' cmd='verb info #{verb}' echo='verb info #{verb}' justify='left' left='30' top='#{top}' />"
end



  output += "<link id='hide_reg_#{i}' value='[ X ]' cmd=';eq VerbAPI.toggle(:#{verb})' echo='[Hiding #{verb}]' justify='left' left='140' top='#{top}' />"
  top += 20
end


  # Now, if any regular verbs are hidden, add a header and list them.
  visible_hidden = @regular_verbs.uniq.select { |v| hidden.include?(v) }.sort
  unless visible_hidden.empty?
    output += "<label id='hidden_reg_header' value='Hidden Regular Verbs:' justify='left' left='0' top='#{top}' />"
    top += 20
    visible_hidden.each_with_index do |verb, i|
      output += "<link id='hidden_reg_#{i}' value='( HIDDEN ) #{verb}' cmd=';eq VerbAPI.toggle(:#{verb})' echo='[Unhiding #{verb}]' justify='left' left='30' top='#{top}' />"
      top += 20
    end
  end

  output += "</dialogData>"
  puts(output)
end

# ==============================================================
# Optional build mode for initially populating the verb list.
# ==============================================================
def build_verb_list
  ('a'..'z').each do |letter|
    fput "verb list #{letter}"
    sleep 0.4
  end
end

build_mode = Script.current.vars.include?("build")
echo "Verb Window script active."

if build_mode || (Script.current.vars[0] == "send" && Script.current.vars[1] == "build")
  fput "signature"
  build_verb_list
  wait_while { CMD_QUEUE.empty? == false }
  render_signature_window
  echo "[verbwindow: Verb Window population complete.]"
  DownstreamHook.remove(HOOK_ID)
  VerbAPI.save_to_yaml($signature_yaml_path, @signature_verbs, @regular_verbs)
elsif Script.current.vars[0] == "refresh"
  if File.exist?($signature_yaml_path)
    @data = YAML.load_file($signature_yaml_path)
    @signature_verbs = @data["signature_verbs"] || {}
    @regular_verbs   = @data["regular_verbs"]   || []
    VerbAPI.load_from_yaml($signature_yaml_path)
    CMD_QUEUE.push(:update)
  end
elsif Script.current.vars[0] == "send" && Script.current.vars[1] == "load"
  # Load a profile via ;send load [profile_name]
  profile_name = Script.current.vars[2].downcase
if PROFILES.has_key?(profile_name)
  load_profile(PROFILES[profile_name])  # Could be :all or an array
  echo "[verbwindow] Loaded built-in profile '#{profile_name}'."
else
  custom_profiles = load_custom_profiles
  if custom_profiles.has_key?(profile_name)
    load_profile(custom_profiles[profile_name])  # Always an array
    echo "[verbwindow] Loaded custom profile '#{profile_name}'."
  else
    all_profiles = PROFILES.keys + custom_profiles.keys
    echo "[verbwindow] Unknown profile '#{profile_name}'. Available profiles: #{all_profiles.join(', ')}"
  end
end

elsif Script.current.vars[0] == "send" && Script.current.vars[1] == "save"
  # Save a custom profile via ;send save [profile_name]
  profile_name = Script.current.vars[2]
  save_custom_profile(profile_name)

elsif Script.current.vars[0] == "send" && Script.current.vars[1] == "refresh"
  CMD_QUEUE.push(:update)
  echo "[verbwindow] Refreshing window."
elsif Script.current.vars[0] == "send" && Script.current.vars[1] == "help"
  help_text = <<-HELP
[verbwindow] Available commands:
  ;send build                => Rebuild the verb list and populate the YAML.
  ;send load [profile_name]  => Load a profile (custom, demeanor, profession, or Arkati).
    Demeanor profiles:      cold, reserved, neutral, friendly, warm, clear
    Profession profiles:    warrior, rogue, monk, cleric, empath, sorcerer, wizard, ranger, bard
    Arkati profiles:        charl, cholen, eonak, imaera, jastev, kai, koar, lorminstra, lumnis, oleani,
                            phoen, ronan, tonis, gosaena, zelia, andelas, eorgina, fashlonae, ivas,
                            luukos, marlu, mularos, sheru, vtull, aeia, amasalen, arachne, ghezresh,
                            huntress, jaston, kuon, laethe, leya, niima, onar, tilamaire, voaris, voln
  ;send save [profile_name]  => Save current visible regular verbs as a custom profile.
  ;send refresh              => Refresh the window.
  ;send help                 => Display this help message.
  HELP
  echo(help_text)
end

# Clear any queued update events to avoid a duplicate render.
until CMD_QUEUE.empty?
  CMD_QUEUE.pop
end

# ==============================================================
# Save to YAML when the script is shutting down.
# ==============================================================
before_dying do
  echo "[verbwindow] Final hidden verbs: #{VerbAPI.hidden_verbs.inspect}"
  VerbAPI.save_to_yaml($signature_yaml_path, @signature_verbs, @regular_verbs)
  echo "[verbwindow: Saved final data to #{$signature_yaml_path}.]"
  DownstreamHook.remove(HOOK_ID)
end

# ==============================================================
# Command Monitor (runs in its own thread to process ;send commands)
# ==============================================================
def verb_command_monitor
  while true
    line = get.strip
    # Only process lines that begin with 'send '
    next unless line =~ /^(build|load|refresh|help|save)\b/i

    case line
	when /^build\b/i
      fput "signature"
      build_verb_list
      wait_while { CMD_QUEUE.empty? == false }
      render_signature_window
      echo "[verbwindow: Verb Window population complete.]"
      DownstreamHook.remove(HOOK_ID)
      VerbAPI.save_to_yaml($signature_yaml_path, @signature_verbs, @regular_verbs)
    when /^load\s+(.+)/i
      profile_name = $1.strip.downcase
      if PROFILES.has_key?(profile_name)
        load_profile(PROFILES[profile_name])
        echo "[verbwindow] Loaded built-in profile '#{profile_name}'."
      else
        custom_profiles = load_custom_profiles
        if custom_profiles.has_key?(profile_name)
          load_profile(custom_profiles[profile_name])
          echo "[verbwindow] Loaded custom profile '#{profile_name}'."
        else
          all_profiles = PROFILES.keys + custom_profiles.keys
          echo "[verbwindow] Unknown profile '#{profile_name}'. Available profiles: #{all_profiles.join(', ')}"
        end
      end
    when /^save\s+(.+)/i
      profile_name = $1.strip
      save_custom_profile(profile_name)
    when /^refresh\b/i
      CMD_QUEUE.push(:update)
      echo "[verbwindow] Refreshing window."
    when /^help\b/i
  help_text = <<-HELP
[verbwindow] Available commands:
  ;send build                => Rebuild the verb list and populate the YAML.
  ;send load [profile_name]  => Load a profile (custom, demeanor, profession, or Arkati).
    Demeanor profiles:      cold, reserved, neutral, friendly, warm, clear
    Profession profiles:    warrior, rogue, monk, cleric, empath, sorcerer, wizard, ranger, bard
    Arkati profiles:        charl, cholen, eonak, imaera, jastev, kai, koar, lorminstra, lumnis, oleani,
                            phoen, ronan, tonis, gosaena, zelia, andelas, eorgina, fashlonae, ivas,
                            luukos, marlu, mularos, sheru, vtull, aeia, amasalen, arachne, ghezresh,
                            huntress, jaston, kuon, laethe, leya, niima, onar, tilamaire, voaris, voln
  ;send save [profile_name]  => Save current visible regular verbs as a custom profile.
  ;send refresh              => Refresh the window.
  ;send help                 => Display this help message.
  HELP
  echo(help_text)
    else
      echo "[verbwindow] Unknown command. Type ;send help for a command list."
    end
    sleep 0.1
  end
rescue => e
  echo("[verbwindow] Command monitor error: #{e.message}")
end

# Start the command monitor in a separate thread.
Thread.new { verb_command_monitor }

# ==============================================================
# Main loop – watches for update commands to refresh the window.
# ==============================================================
# Force a single initial update.
render_signature_window()

# Main loop – process events as they arrive.
loop do
  action = CMD_QUEUE.pop
  render_signature_window if action == :update || action.is_a?(Array)
end
