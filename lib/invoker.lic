=begin
  Runs continuously and notifies you when the invoker has returned.
  If you are already in the park it will use them automatically.
  Note: Once it prompts you if you would like to use them,
  the script will not do so automatically if you move in to the room.
  
  author: Nesmeor
  name: invoker
  tags: utility, spellup
  version: 2.0.0

  Changelog:

  2.0.0 (4/28/2021)
    - Script rewritten to be class based (Thanks Athias!)
    - Functionality optimized for less error prone interaction.
    - Script pausing functionality
  1.3.0 (4/27/2021):
    - Updated to Semantic Versioning
    - Created  Invoker.msg to handle messaging
    - Added error messaging for spells being asked multiple times
  1.2 (4/26/2021):
    Added auto-use if in Park room. Removed room customization from command line as the invoker only ever shows up in one place. If you need to change it you can still change the invoker_location variable at the top of the script, but I prefer simplicity where possible :)
  1.1 (4/24/2021):
    Added colorized text for stormfront UI

=end

if CharSettings[:auto] == nil
  CharSettings[:auto] = false
end

class Invoker
  def initialize
    @auto = CharSettings[:auto]
    @current_hour = nil
    @decision = false

    # This defaults the Town Square, Small Park
    invoker_location = 288

    loop {
      # Check the current time to see if the invoker is present
      invoker_present = Invoker.check_time
      if invoker_present
        # Capture the current hour to avoid trying multiple times
        new_hour = Time.now.hour
        # Make sure we haven't seen the invoker already
        if @current_hour != new_hour
          @decision = false
          until @decision
            if !Invoker.check_time
              break
            end
            # Automatically ask for spells if in the same room. 284 is duplicate ID
            if Room.current.id == invoker_location and @auto = true
              Invoker.get_spells
              update_time(new_hour)
            # Otherwise prompt the player to respond
            elsif @auto = true
              pause_scripts
              Invoker.visit_invoker
              unpause_scripts
              update_time(new_hour)
            else
              Invoker.msg "The invoker is now available. YES to visit them, SHAKE to skip this time."
              result = matchtimeout 30, /A good positive attitude never hurts\.|Shake what\?/
              if result =~ /A good positive attitude never hurts\./
                Invoker.visit_invoker
                update_time(new_hour)
              elsif result =~ /Shake what\?/
                Invoker.msg "Skipping invoker this hour."
                # Update time to skip
                update_time(new_hour)
              end
            end 
          end
        end
      end
      # Throttle while waiting for time to pass
      pause 30
    }
  end

  def update_time(new_hour)
    @current_hour = new_hour
    @decision = true
  end

  def self.check_time
    # Is it between 01 & 15 minutes?
    time = Time.now.strftime('%M')
    if time.to_s =~ /0[1-9]|1[0-5]/
      return true
    else
      return false
    end
  end

  def self.go2(cur_loc)
    set_locations = {
      "park"    => "288",
      "fwi"     => "3668",
    }

    if set_locations.include? cur_loc
      location = set_locations[cur_loc]
    else
      location = cur_loc
    end

    return if Room.current.id == location.to_i or Room.current.tags.include?(location)

    fput "unhide" if hidden? or invisible?
    waitrt?
    waitcastrt?
    Script.run("go2", "#{location.to_s} --disable-confirm", flags = { :quiet => true })
    sleep 0.2
  end

  def self.get_spells
    result = dothistimeout "ask invoker about spells", 5, /releases upon you|Please wait a few minutes before asking again/
    if result =~ /Please wait a few minutes before asking again/
       Invoker.msg "You have already asked for spells, please try again later!"
    end
  end

  def self.msg(text)
    if $frontend == 'stormfront'
      puts "\<preset id=\"whisper\"\>#{text}\<\/preset\>"
    else
      echo "#{text}"
    end
  end

  def self.visit_invoker
    # Capture current location
    current_room = Room.current.id
    # Go to the park
    Invoker.go2('park')
    # Ask the invoker for spells
    Invoker.get_spells
    # Return to previous location
    Invoker.go2(current_room)
  end

  def self.showhelp
     Invoker.msg "Runs continuously and notifies you when the invoker has returned."
     Invoker.msg "If you are already in the park it will use them automatically."
     Invoker.msg "Note: Once it prompts you if you would like to use them,"
     Invoker.msg "the script will not do so automatically if you move in to the room."
    exit
  end

  def pause_script(script)
    if Script.running?(script)
      Script.pause(script)
      before_dying { 
        Script.unpause(script)
      }
    end
  end

  def unpause_script(script)
    if Script.paused?(script)
      Script.unpause(script)
    end
  end

  def pause_scripts
    pause_script("go2")
    pause_script("bigshot")
  end

  def unpause_scripts
    unpause_script("go2")
    unpause_script("bigshot")
  end

end

if script.vars[1] == "help"
  Invoker.showhelp
elsif script.vars[1] =="auto_toggle"
  if CharSettings[:auto]
    CharSettings[:auto] = false
    echo "Switching to manual mode"
  else
    CharSettings[:auto] = true
    echo "Switch to automatic mode"
  end
else
  Invoker.new
end