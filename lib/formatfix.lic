=begin
Everything is configurable, open the script up in your favorite text editor and change what you dont like to false

Adds how much total health point damage you have left for poison and disease until it wears off
Makes the numbers for health and spirit points line up with stamina points
Rearranges and makes CMAN LIST show up as Column Formated text
Adds messaging to ensorcell flares to let you know what type flared
Changes roundtime and tended wounds over 60 seconds to show minutes instead of 1000+ seconds
Shortens status of players and creatures - Example: a tomb wight (dead), a subversive lake spirit (flying), Hazado (sitting)
Alternate way to display wounds of creatures
Adds time info to stun rounds
Remove the Monsterbold from INFO for a player designated amount for each stat

# Name: FormatFix
# Authors: Hazado
# Categories: 
# Tags: 
=end

#Config Settings
#Set to false for things you dont want to happen
TotalPoisonDisease 	= true
HealthSpiritAlign	= true
CMANListFormatting	= true
EnsorcellFlare		= true
MinuteRoundtime		= true
StatusShorten		= true
WoundsList			= true
RoundsToSeconds		= true
StrengthBonus       = 0
ConstitutionBonus   = 0
DexterityBonus      = 0
AgilityBonus        = 0
DisciplineBonus     = 0
AuraBonus           = 0
LogicBonus          = 0
IntuitionBonus      = 0
WisdomBonus         = 0
InfluenceBonus      = 0

#Script beyond here - DONT TOUCH!
hide_me
wounds = nil

action = proc { |server_string|
	if server_string =~ /Taking (.*) damage per round\.\s+Dissipating (.*) per round\./i && TotalPoisonDisease == true
		poison = $1.to_i
		dissipating = $2.to_i
		total = nil
		while (poison > 0)
			total += poison
			poison -= dissipating
		end
		server_string.sub!("Dissipating #{$2} per round.","Dissipating #{$2} per round.\r\n\tTotal of #{total} damage left.")
	elsif server_string =~ /(Maximum|Remaining) (Health Points:|Spirit Points:|Stamina Points:.*)(.*)/i && HealthSpiritAlign == true
		maxrem = $1
		hss = $2
		points = $3
		server_string.sub!(/(?:Maximum|Remaining) (?:Health Points:|Spirit Points:|Stamina Points:.*)(.*)/i,"#{maxrem} #{hss.ljust(15)}#{points}")
	elsif server_string =~ /(.*)(\(.*\)), Rank (.*) \(CM points needed: (.*)\)/i && CMANListFormatting == true
		server_string.sub!(/.*\(.*\), Rank .* \(CM points needed: .*\)/,"<output class=\"mono\"\/>#{$1.ljust(25)}Rank: #{$3.ljust(5)} Need: #{$4.ljust(5)}#{$2}\n<output class=\"\"\/>")
	elsif server_string =~ /Strength \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-StrengthBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Constitution \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-ConstitutionBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Dexterity \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-DexterityBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Agility \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-AgilityBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Discipline \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-DisciplineBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Aura \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-AuraBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Logic \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-LogicBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Intuition \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-IntuitionBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Wisdom \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-WisdomBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /Influence \(...\):\s+(\d+) \(..?.?\)\s+\.\.\.\s+(<pushBold\/>(\d+)<popBold\/> \(<pushBold\/>(\d+)<popBold\/>\))/
		stat = $3
		bonus = $4
		if (stat.to_i-InfluenceBonus.to_i) == $1.to_i
			server_string.sub!(/<pushBold\/>#{stat}<popBold\/> \(<pushBold\/>#{bonus}<popBold\/>\)/,"#{stat} \(#{bonus}\)")
		end
	elsif server_string =~ /(You feel healed!)/i && EnsorcellFlare == true
		server_string.sub!($1,"#{$1} (Health)")
	elsif server_string =~ /(You feel empowered!)/i && EnsorcellFlare == true
		server_string.sub!($1,"#{$1} (Mana)")
	elsif server_string =~ /(You feel rejuvenated!)/i && EnsorcellFlare == true
		server_string.sub!($1,"#{$1} (Spirit)")
	elsif server_string =~ /(You feel reinvigorated!)/i && EnsorcellFlare == true
		server_string.sub!($1,"#{$1} (Stamina)")
	elsif server_string =~ /(You feel energized!)/i && EnsorcellFlare == true
		server_string.sub!($1,"#{$1} (Attack)")
	elsif server_string =~ /(Roundtime: )((\d+) sec)/ && MinuteRoundtime == true
		if $3.to_i >= 60
			mintest = $3.to_i
			minutes = mintest/60
			seconds = mintest%60
			server_string.sub!($2,"#{minutes} min, #{seconds} sec")
		end
	elsif server_string =~ /((\d+)s)/i && MinuteRoundtime == true
		if $2.to_i >= 60
			mintest = $2.to_i
			minutes = mintest/60
			seconds = mintest%60
			server_string.sub!($1,"#{minutes}m#{seconds}s")
		end
	elsif server_string =~ /(\.\.\.wait (\d+) seconds\.)/i && MinuteRoundtime == true
		if $2.to_i >= 60
			mintest = $2.to_i
			minutes = mintest/60
			seconds = mintest%60
			if minutes.to_i > 1 
				minutes = "#{minutes} minutes"
			else
				minutes = "#{minutes} minute"
			end
			if seconds.to_i == 1
				seconds = "#{seconds} second"
			else
				seconds = "#{seconds} seconds"
			end
			server_string.sub!($1,"...wait #{minutes} and #{seconds}.")
		end
	elsif server_string =~ /((?:who|that) (?:is|appears) (lying down|dead|stunned|sitting|kneeling|flying|hiding|sleeping|webbed)(?: around)?)/i && StatusShorten == true
		while server_string =~ /((?:who|that) (?:is|appears) (lying down|dead|stunned|sitting|kneeling|flying|hiding|sleeping|webbed)(?: around)?)/i
			server_string.gsub!($1,"\(#{$2}\)")
		end
	elsif server_string =~ /(^<pushBold\/>.*(?:She|He|It)<\/a>.*(?:minor cuts and bruises|fractured and bleeding|completely severed|strange case of muscle twitching|case of sporadic convulsions|case of uncontrollable convulsions|minor bruises|moderate bleeding|possible mild concussion|severe head trauma|snapped bones and serious bleeding|deep gashes and serious bleeding|deep lacerations|bruised|swollen|blinded).*\.)/i && WoundsList == true
		wounds = server_string
		if wounds =~ /(.*(?:She|He|It).*has)/i
			wounds = wounds.sub($1,"\n\n<output class=\"mono\"\/>Wounds          Level")
		end
		while wounds =~ /(some minor cuts and bruises on <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   1")
		end
		while wounds =~ /(a fractured and bleeding (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   2")
		end
		while wounds =~ /(a completely severed (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   <pushBold/>3<popBold/>")
		end
		if wounds =~/(a strange case of muscle twitching(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'nerves'.ljust(15)}   1")
		elsif wounds =~/(a case of sporadic convulsions(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'nerves'.ljust(15)}   2")
		elsif wounds =~/(a case of uncontrollable convulsions(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'nerves'.ljust(15)}   <pushBold/>3<popBold/>")
		end
		if wounds =~/(minor bruises around <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> head(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'head'.ljust(15)}   1")
		elsif wounds =~/(minor lacerations about <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> head and a possible mild concussion(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'head'.ljust(15)}   2")
		elsif wounds =~/(severe head trauma and bleeding from <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> ears(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'head'.ljust(15)}   <pushBold/>3<popBold/>")
		end
		if wounds =~/(minor bruises around <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> neck(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'neck'.ljust(15)}   1")
		elsif wounds =~/(moderate bleeding from <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> neck(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'neck'.ljust(15)}   2")
		elsif wounds =~/(snapped bones and serious bleeding from <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> neck(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{'neck'.ljust(15)}   <pushBold/>3<popBold/>")
		end
		while wounds =~/(deep lacerations across <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   2")
		end
		while wounds =~/(deep gashes and serious bleeding from <pushBold\/><a exist=\"\d+\" noun=\"[\w\']*?\">(?:her|his|its)<\/a><popBold\/> (.*?)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   <pushBold/>3<popBold/>")
		end
		while wounds =~ /(a bruised (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   1")
		end
		while wounds =~ /(a swollen (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   2")
		end
		while wounds =~ /(a blinded (\w*\s*\w*?\s*\w*?\s*)(?:\,|\.| and))/i
			wounds = wounds.sub($1,"\n#{$2.ljust(15)}   <pushBold/>3<popBold/>")
		end
		wounds = wounds.concat("<output class=\"\"\/>\n\n")
	elsif server_string =~ /((You are stunned for )(.*)( rounds))!/i && RoundsToSeconds == true
		server_string.sub!($1,"#{$2}#{$3.to_i*5} seconds \(#{$3}#{$4}\)")
	end
	if !wounds.nil? && server_string =~ /<pushBold\/><a exist="\d+" noun="\w+">(?:She|He|It)<\/a><popBold\/> has.*?<a.*?>(?!<:his|her|its).*?<\/a>(?: \(worn\))?\.|nothing at this time\./
		server_string = server_string.concat(wounds)
		wounds = nil
	end
	server_string
}

DownstreamHook.remove("#{script.name}")
DownstreamHook.add("#{script.name}", action)