=begin

	Manages all of your bard spells.
	
	Will make sure you are always singing the songs you specify. Has an option to automatically use SHOUT 1040 if you're stunned/webbed. Has an option to cast/stop a song then cast it again after the effect wears off to help with multi-song penalties. Option to keep Song of Power running until about 30 seconds before it renews, then will stop Song of Power, wait for your songs to renew, then cast it again. Script will warn you if your current mana isn't sufficient to cover the cost of your auto-renewal. Also has an option to stop songs until your current mana is high enough to cover the cost of your auto-renewal. Plus much, MUCH more!
	
	Script is on a 10 second loop meaning it will check for missing songs, when to stop songs, etc, every 10 seconds.
	
	Be sure to do ;song-manager help for more additional info on setting up this script properly.

	Author: Tgo01
	Version 12

=end

display_help_screen = nil
total_actual_renew_cost = nil
total_expected_renew_cost = 0
rest_room_number = nil
rest_room_number = UserVars.song_manager["1011"].to_i if UserVars.song_manager["1011"].length > 0 && UserVars.song_manager["1011"] !~ /no/i && Spell[1011].known?
fortitude_song_active = nil
song_of_luck_active = nil
kais_triumph_song_active = nil
sonic_shield_active = nil
song_of_valor_active = nil
song_of_peace_active = nil
sonic_weapon_active = nil
sonic_armor_active = nil
song_of_noise_active = nil
song_of_power_active = nil
song_of_mirrors_active = nil
singing_sword_song_active = nil
renew_check = nil
song_number_to_stop = nil
mana_cost_to_stop = nil
stop_singing_songs_math = nil
stop_singing_songs_list = nil
low_mana_check_warning = nil
time_remaining_message = nil
done_checking_song_status = nil
first_multi_song_penalty_check = true
recast_all_spells = nil
safe_to_cast_1018 = true
stop_1018 = nil
math = nil
stop_singing_routine_stuff = nil
do_not_sing_new_songs = nil
first_couple_minutes_warning = nil
first_one_minute_warning = nil
first_less_than_one_minute_warning = nil
first_soon_warning = nil

renew_cost_1003 = 1
renew_cost_1006 = 3+([Spells.bard-6,0].max/8)
renew_cost_1007 = 2+[[Spells.bard-7,0].max,10].min
renew_cost_1009 = 4
renew_cost_1010 = 3+((Spells.bard-10)/10)	
renew_cost_1011 = 4
renew_cost_1012 = 4
renew_cost_1014 = 5
renew_cost_1017 = 7
renew_cost_1018 = 15
renew_cost_1019 = 8+((Spells.bard-19)/10)	
renew_cost_1025 = 15

setup = proc{
	Gtk.queue {
		$song_manager_WINDOW = Gtk::Window.new
		$song_manager_WINDOW.title = "Song Manager"
		$song_manager_WINDOW.set_border_width(10)
		$song_manager_BOX = Gtk::VBox.new(false)
		$song_manager_BOX.set_border_width(5)

		$song_manager_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
		$song_manager_VERTICAL_BOX2 = Gtk::VBox.new(false, 0)
		$song_manager_VERTICAL_BOX3 = Gtk::VBox.new(false, 0)

		$song_manager_WINDOW.add($song_manager_BOX)
		$song_manager_NOTEBOOK = Gtk::Notebook.new
		$song_manager_NOTEBOOK.set_show_border(true)
		$song_manager_BOX.add($song_manager_NOTEBOOK)
		$song_manager_NOTEBOOK.append_page($song_manager_VERTICAL_BOX1, Gtk::Label.new('Songs'))
		$song_manager_NOTEBOOK.append_page($song_manager_VERTICAL_BOX2, Gtk::Label.new('More Songs'))
		$song_manager_NOTEBOOK.append_page($song_manager_VERTICAL_BOX3, Gtk::Label.new('Other Options'))
		$song_manager_ENTRY = Hash.new 
		$song_manager_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$song_manager_TABLE1 = Gtk::Table.new(6, 3, false)
		$song_manager_TABLE1.row_spacings=3
		$song_manager_TABLE1.column_spacings=3
		$song_manager_VERTICAL_BOX1.pack_start($song_manager_TABLE1, false, false, 0)

		$song_manager_TABLE2 = Gtk::Table.new(6, 3, false)
		$song_manager_TABLE2.row_spacings=3
		$song_manager_TABLE2.column_spacings=3
		$song_manager_VERTICAL_BOX2.pack_start($song_manager_TABLE2, false, false, 0)

		$song_manager_TABLE3 = Gtk::Table.new(6, 3, false)
		$song_manager_TABLE3.row_spacings=3
		$song_manager_TABLE3.column_spacings=3
		$song_manager_VERTICAL_BOX3.pack_start($song_manager_TABLE3, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $song_manager_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.song_manager[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$song_manager_ENTRY[variable] = entry
		$song_manager_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$song_manager_ENTRY = Hash.new
		add_label_entry($song_manager_TABLE1, "Fortitude Song (1003):", '1003')
		add_label_entry($song_manager_TABLE1, "Song of Luck (1006):", '1006')
		add_label_entry($song_manager_TABLE1, "Kai's Triumph Song (1007):", '1007')
		add_label_entry($song_manager_TABLE1, "Sonic Shield Song (1009):", '1009')
		add_label_entry($song_manager_TABLE1, "Song of Valor (1010):", '1010')
		add_label_entry($song_manager_TABLE1, "Song of Peace (1011):", '1011')
		add_label_entry($song_manager_TABLE2, "Sonic Weapon Song (1012):", '1012')
		add_label_entry($song_manager_TABLE2, "Sonic Armor (1014):", '1014')
		add_label_entry($song_manager_TABLE2, "Song of Noise (1017):", '1017')
		add_label_entry($song_manager_TABLE2, "Song of Power (1018):", '1018')
		add_label_entry($song_manager_TABLE2, "Song of Mirrors (1019):", '1019')
		add_label_entry($song_manager_TABLE2, "Singing Sword Song (1025):", '1025')
		add_label_entry($song_manager_TABLE2, "Troubadour's Rally (1040):", '1040')
		add_label_entry($song_manager_TABLE3, "Auto Stop Songs:", 'auto_stop_songs')
		add_label_entry($song_manager_TABLE3, "Preserve Sonic Armor:", 'preserve_sonic_armor')
		add_label_entry($song_manager_TABLE3, "Preserve Sonic Weapon:", 'preserve_sonic_weapon')
		add_label_entry($song_manager_TABLE3, "Preserve Sonic Shield:", 'preserve_sonic_shield')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $song_manager_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.song_manager[variable].nil? ? default : UserVars.song_manager[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$song_manager_ENTRY[variable] = checkbox
		$song_manager_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$song_manager_WINDOW.signal_connect("delete_event") {
			$song_manager_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {
		$song_manager_TOOLTIPS = Gtk::Tooltips.new
		$song_manager_TOOLTIPS.enable

		label = Gtk::Label.new
		label.set_markup("For all songs enter <b>no</b> to not use that song.\n<b>1009:</b>  Enter the type of shield you wish to sing.\n<b>1011:</b>  Enter the room number where you rest to use 1011 while resting in said room. Script will stop singing 1011 when you move out of this room.\nEvery other song enter <b>yes</b> to always keep it running and <b>renew</b> to cast the song, stop it before your songs renew, then cast it again after your songs renew.\nStart script as <b>;song-manager help</b> for more info on using the <b>renew</b> setting.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$song_manager_TABLE1.attach(align, 1, 2, 8, 9)

		label = Gtk::Label.new
		label.set_markup("For all songs enter <b>no</b> to not use that song.\n<b>1012 and 1025:</b>  Enter the name of weapon you wish to use.\n<b>1014:</b>  Enter the ASG number of the type of armor you wish to use.\n<b>1040:</b>  Enter <b>yes</b> for script to shout 1040 if stunned/webbed and you have at least 40 mana. Enter <b>force</b> to use 1040 regardless of available mana.\nEvery other song enter <b>yes</b> to always keep it running and <b>renew</b> to cast the song, stop it before your songs renew, then cast it again after your songs renew.\nStart script as <b>;song-manager help</b> for more info on using the <b>renew</b> setting.\n<b>;song-manager help</b> also lists which ASG values corresponds to which armor type.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$song_manager_TABLE2.attach(align, 1, 2, 8, 9)
		
		label = Gtk::Label.new
		label.set_markup("<b>Auto Stop Songs:</b> Enter <b>yes</b> to have script automatically stop songs 30 seconds before auto renew if your song renewal is greater than your current mana.\nScript will stop songs one at a time until your song renewal is less than your current mana.\nFor each sonic equipment option enter <b>yes</b> to have script NOT stop that song, even if it would result in fried nerves from auto renewal.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$song_manager_TABLE3.attach(align, 1, 2, 8, 9)

		$song_manager_WINDOW.show_all
	}
        
	$song_manager_SETUP_COMPLETED = false
	until($song_manager_SETUP_COMPLETED)
		sleep 1
	end
       
	UserVars.song_manager ||= Hash.new
	$song_manager_ENTRY.keys.each { |key|
		if( $song_manager_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $song_manager_ENTRY[key].active?
			UserVars.song_manager[key] = $song_manager_ENTRY[key].active?
		else
			if(key == 'wounded_eval')
				UserVars.song_manager[key] = $song_manager_ENTRY[key].text
			else
				UserVars.song_manager[key] = $song_manager_ENTRY[key].text.strip.downcase
			end
		end
	}
	UserVars.save()
        
	Gtk.queue {
		$song_manager_WINDOW.destroy
	}
}

silence_me

display_help_screen = proc{
	respond "ASG value | Armor Type"
	respond "1           Normal Clothing"
	respond "2           Robes"
	respond "5           Light Leather"
	respond "6           Full Leather"
	respond "7           Reinforced Leather"
	respond "8           Double Leather"
	respond "9           Leather Breastplate"
	respond "10          Cuirbouilli Leather"
	respond "11          Studded Leather"
	respond "12          Brigandine Armor"
	respond "13          Chain Mail"
	respond "14          Double Chain"
	respond "15          Augmented Chain"
	respond "16          Chain Hauberk"
	respond "17          Metal Breastplate"
	respond "18          Augmented Plate"
	respond "19          Half Plate"
	respond "20          Full Plate"
	respond "How the \"renew\" setting works:"
	respond "Certain songs retain their benefit for the duration of your song length, whether you STOP singing the song or not. For example if you have a song length of 2 minutes and you start singing Song of Luck (1006) then you will retain this benefit for 2 minutes whether you STOP the song or not. However songs like Sonic Armor (1014) will stop functioning as soon as you STOP it."
	respond "This can be useful for certain songs if your multi-song penalty is higher than the cost of just manually starting the song again after the effect fades. Fortitude Song (1003) is the best example of this. Its renewal cost is only 1 mana but if you have a 12 mana multi-song penalty then its renewal cost is actually 13, therefore it makes more sense to sing 1003, STOP 1003 (but still retain its benefit), then spending 3 mana to sing 1003 again once the effect ends. This is exactly what the \"renew\" setting does."
	respond "The following songs can make use of the \"renew\" setting: 1003, 1006, 1007, 1010, 1019. Keep in mind this setting isn't always best for each of these songs because recasting the song can sometimes be more expensive than the renewal cost plus the multi-song penalty."
	respond "Song of Power (1018) can also use the \"renew\" setting but it works differently. Since letting Song of Power auto-renew can lead to injuries and it only costs 3 more mana to sing the song again as opposed to letting it auto-renew, it can make sense to STOP the song shortly before you auto-renew then sing the song again. Which is exactly what the \"renew\" feature does for this song."
}

before_dying { DownstreamHook.remove("#{script.name}_renew_check") }

renew_check = proc {
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if server_string =~ /will renew in a moment/
			stop_1018 = true if Spell[1018].active?
			time_remaining_message = server_string
		elsif server_string =~ /it will be quite some time before the effects fade|will be several minutes before your|will be a few minutes before your|will be a couple of minutes before your|will be about a minute|will renew shortly/
			if server_string =~ /it will be quite some time before the effects fade|will be several minutes before your|will be a few minutes before your/
				first_couple_minutes_warning = nil
				first_one_minute_warning = nil
				first_less_than_one_minute_warning = nil
				first_soon_warning = nil
				do_not_sing_new_songs = nil
			end
			time_remaining_message = server_string
			safe_to_cast_1018 = true
		end
		if server_string =~ /Your current renewal cost is (\d+) mana\./
			total_actual_renew_cost = $1.to_i
			DownstreamHook.remove("#{script.name}_renew_check")
			done_checking_song_status = true
			nil
		elsif server_string =~ /You are not singing any songs./
			DownstreamHook.remove("#{script.name}_renew_check")
			first_couple_minutes_warning = nil
			first_one_minute_warning = nil
			first_less_than_one_minute_warning = nil
			first_soon_warning = nil
			do_not_sing_new_songs = nil
			safe_to_cast_1018 = true
			done_checking_song_status = true
			nil
		elsif server_string =~ /\(1026\)/
			nil
		elsif server_string =~ /Holding Song|Song of Unravelling|Song of Rage|Song of Sonic Disruption|You are currently singing\:/
			nil
		elsif server_string =~ /Fortitude Song|Song of Peace|Song of Luck|Kai\'s Triumph Song|Sonic Shield Song|Song of Valor|Sonic Weapon Song|Sonic Armor|Song of Noise|Song of Power|Song of Mirrors|Singing Sword Song/
			if server_string =~ /Fortitude Song/
				fortitude_song_active = true
				total_expected_renew_cost += renew_cost_1003
			elsif server_string =~ /Song of Luck/
				song_of_luck_active = true
				total_expected_renew_cost += renew_cost_1006
			elsif server_string =~ /Kai\'s Triumph Song/
				kais_triumph_song_active = true
				total_expected_renew_cost += renew_cost_1007
			elsif server_string =~ /Sonic Shield Song/
				sonic_shield_active = true
				total_expected_renew_cost += renew_cost_1009
			elsif server_string =~ /Song of Valor/
				song_of_valor_active = true
				total_expected_renew_cost += renew_cost_1010
			elsif server_string =~ /Song of Peace/
				song_of_peace_active = true
				total_expected_renew_cost += renew_cost_1011
			elsif server_string =~ /Sonic Weapon Song/
				sonic_weapon_active = true
				total_expected_renew_cost += renew_cost_1012
			elsif server_string =~ /Sonic Armor/
				sonic_armor_active = true
				total_expected_renew_cost += renew_cost_1014
			elsif server_string =~ /Song of Noise/
				song_of_noise_active = true
				total_expected_renew_cost += renew_cost_1017
			elsif server_string =~ /Song of Power/
				song_of_power_active = true
				total_expected_renew_cost += renew_cost_1018
			elsif server_string =~ /Song of Mirrors/
				song_of_mirrors_active = true
				total_expected_renew_cost += renew_cost_1019
			elsif server_string =~ /Singing Sword Song/
				singing_sword_song_active = true
				total_expected_renew_cost += renew_cost_1025
			end
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_renew_check", action)
		put "song status"
}

recast_all_spells = proc{
	if Spell[1003].known? && Spell[1003].affordable? && !Spell[1003].active? && UserVars.song_manager["1003"] =~ /yes|renew/i
		Spell[1003].cast
		fput "stop 1003" if UserVars.song_manager["1003"] =~ /renew/i
	end
	if Spell[1006].known? && Spell[1006].affordable? && !Spell[1006].active? && UserVars.song_manager["1006"] =~ /yes|renew/i
		Spell[1006].cast
		fput "stop 1006" if UserVars.song_manager["1006"] =~ /renew/i
	end
	if Spell[1007].known? && Spell[1007].affordable? && !Spell[1007].active? && UserVars.song_manager["1007"] =~ /yes|renew/i
		Spell[1007].cast
		fput "stop 1007" if UserVars.song_manager["1007"] =~ /renew/i
	end
	if Spell[1009].known? && Spell[1009].affordable? && sonic_shield_active.nil? && UserVars.song_manager["1009"].length > 0 && UserVars.song_manager["1009"] !~ /no/i
		Spell[1009].cast("#{UserVars.song_manager["1009"]}")
	end
	if Spell[1010].known? && Spell[1010].affordable? && !Spell[1010].active? && UserVars.song_manager["1010"] =~ /yes|renew/i
		Spell[1010].cast
		fput "stop 1010" if UserVars.song_manager["1010"] =~ /renew/i
	end
	if Spell[1012].known? && Spell[1012].affordable? && sonic_weapon_active.nil? && UserVars.song_manager["1012"].length > 0 && UserVars.song_manager["1012"] !~ /no/i
		Spell[1012].cast("#{UserVars.song_manager["1012"]}")
	end
	if Spell[1014].known? && Spell[1014].affordable? && sonic_armor_active.nil? && UserVars.song_manager["1014"].length > 0 && UserVars.song_manager["1014"] !~ /no/i
		Spell[1014].cast("#{UserVars.song_manager["1014"]}")
	end
	if Spell[1017].known? && Spell[1017].affordable? && song_of_noise_active.nil? && UserVars.song_manager["1017"] =~ /yes|renew/i
		Spell[1017].cast
	end
	if Spell[1018].known? && Spell[1018].affordable? && song_of_power_active.nil? && UserVars.song_manager["1018"] =~ /yes|renew/i && safe_to_cast_1018
		Spell[1018].cast
	end
	if Spell[1019].known? && Spell[1019].affordable? && !Spell[1019].active? && UserVars.song_manager["1019"] =~ /yes|renew/i
		Spell[1019].cast
		fput "stop 1019" if UserVars.song_manager["1019"] =~ /renew/i
	end
	if Spell[1025].known? && Spell[1025].affordable? && singing_sword_song_active.nil? && UserVars.song_manager["1025"].length > 0 && UserVars.song_manager["1025"] !~ /no/i
		Spell[1025].cast("#{UserVars.song_manager["1025"]}")
	end
}

stop_singing_songs_math = proc{
	if math > 12
		total_actual_renew_cost -= 12
		math -= 12
	else
		total_actual_renew_cost -= math
		math -= math
	end
}

stop_singing_routine_stuff = proc{
	waitrt?
	wait_until { !stunned? }
	fput "stop #{song_number_to_stop}"
	total_actual_renew_cost -= mana_cost_to_stop
	stop_singing_songs_math.call
}

stop_singing_songs_list = proc{
	do_not_sing_new_songs = true
	math = total_actual_renew_cost - total_expected_renew_cost
	echo "I am trying to stop songs and need to be out of RT."
	loop{
		if singing_sword_song_active
			song_number_to_stop = "1025"
			mana_cost_to_stop = renew_cost_1025
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if song_of_mirrors_active
			song_number_to_stop = "1019"
			mana_cost_to_stop = renew_cost_1019
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if song_of_power_active
			song_number_to_stop = "1018"
			mana_cost_to_stop = renew_cost_1018
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if song_of_noise_active
			song_number_to_stop = "1017"
			mana_cost_to_stop = renew_cost_1017
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if song_of_valor_active
			song_number_to_stop = "1010"
			mana_cost_to_stop = renew_cost_1010
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if kais_triumph_song_active
			song_number_to_stop = "1007"
			mana_cost_to_stop = renew_cost_1007
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if song_of_luck_active
			song_number_to_stop = "1006"
			mana_cost_to_stop = renew_cost_1006
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if fortitude_song_active
			song_number_to_stop = "1003"
			mana_cost_to_stop = renew_cost_1003
			stop_singing_routine_stuff.call
		end
		break if total_actual_renew_cost < checkmana
		if UserVars.song_manager["preserve_sonic_shield"] !~ /yes/i
			if sonic_shield_active
				song_number_to_stop = "1009"
				mana_cost_to_stop = renew_cost_1009
				stop_singing_routine_stuff.call
			end
		end
		break if total_actual_renew_cost < checkmana
		if UserVars.song_manager["preserve_sonic_weapon"] !~ /yes/i
			if sonic_weapon_active
				song_number_to_stop = "1012"
				mana_cost_to_stop = renew_cost_1012
				stop_singing_routine_stuff.call
			end
		end
		break if total_actual_renew_cost < checkmana
		if UserVars.song_manager["preserve_sonic_armor"] !~ /yes/i
			if sonic_armor_active
				song_number_to_stop = "1014"
				mana_cost_to_stop = renew_cost_1014
				stop_singing_routine_stuff.call
			end
		end
		break
	}
}

low_mana_check_warning = proc{
	if total_actual_renew_cost > checkmana
		math = total_actual_renew_cost - checkmana
		if first_couple_minutes_warning.nil? && time_remaining_message =~ /will be a couple of minutes before your/
			first_couple_minutes_warning = true
			echo "WARNING! Your current song renewal cost is #{math} higher than your current mana and your songs will auto-renew in about 2 minutes."
		elsif first_one_minute_warning.nil? && time_remaining_message =~ /will be about a minute/
			first_one_minute_warning = true
			echo "WARNING! Your current song renewal cost is #{math} higher than your current mana and your songs will auto-renew in about 1 minute."
		elsif time_remaining_message =~ /will renew shortly/
			if first_less_than_one_minute_warning.nil?
				echo "WARNING! Your current song renewal cost is #{math} higher than your current mana and your songs will auto-renew in about 30 seconds."
			end
			first_less_than_one_minute_warning = true
			stop_singing_songs_list.call if UserVars.song_manager["auto_stop_songs"] =~ /yes/i	
		elsif time_remaining_message =~ /will renew in a moment/
			echo "WARNING! Your current song renewal cost is #{math} higher than your current mana and your songs will auto-renew any second now!" if first_soon_warning.nil?
			first_soon_warning = true
			stop_singing_songs_list.call if UserVars.song_manager["auto_stop_songs"] =~ /yes/i
		end
	end
}

if script.vars[1] =~ /setup/i
	setup.call
	exit
end

if script.vars[1] =~ /help/i
	display_help_screen.call
	exit
end

if (UserVars.song_manager.nil? || UserVars.song_manager.empty?) && script.vars[1] != 'setup'
	echo "Setup is required, type ;song-manager setup"
	exit
end

if Spell[1040].known? && UserVars.song_manager["1040"] =~ /yes|force/i
	Thread.new{
		loop{
			if stunned? || webbed?
				if checkmana == 0
					echo "You have song-manager set to automatically cast 1040 but you need at least 1 mana to use 1040."
					wait_until { checkmana(40) }
				elsif UserVars.song_manager["1040"] =~ /yes/i && checkmana < 40
					echo "You have song-manager set to only cast 1040 if you have 40 mana. Type SHOUT 1040 to manually cast 1040."
					wait_until { checkmana(40) }
				end
				echo "Trying to break stun/web."
				put "shout 1040" if stunned? || webbed?
			end
			sleep 1
		}
	}
end

loop{
	done_checking_song_status = nil
	fortitude_song_active = nil
	song_of_luck_active = nil
	kais_triumph_song_active = nil
	sonic_shield_active = nil
	song_of_valor_active = nil
	song_of_peace_active = nil
	sonic_weapon_active = nil
	sonic_armor_active = nil
	song_of_noise_active = nil
	song_of_power_active = nil
	song_of_mirrors_active = nil
	singing_sword_song_active = nil
	time_remaining_message = nil
	total_expected_renew_cost = 0
	total_actual_renew_cost = 0
	renew_check.call
	wait_until { done_checking_song_status }
	low_mana_check_warning.call
	if total_actual_renew_cost > total_expected_renew_cost && first_multi_song_penalty_check
		first_multi_song_penalty_check = nil
		multi_song_penalty = total_actual_renew_cost - total_expected_renew_cost
		echo "Your multi-song penalty with this setup is #{multi_song_penalty} mana. If you are fine with this then great. If not remove one or more songs to reduce/remove this penalty."
	end
	if stop_1018
		until !Spell[1018].active?
			echo "I am trying to stop 1018 and need to be out of RT."
			waitrt?
			wait_until { !stunned? }
			fput "stop 1018"
			sleep 0.2
		end
		stop_1018 = nil
		safe_to_cast_1018 = nil
	end
	recast_all_spells.call if do_not_sing_new_songs.nil?
	if rest_room_number && do_not_sing_new_songs.nil?
		if rest_room_number == Room.current.id && song_of_peace_active.nil? && Spell[1011].affordable?
			sleep 2
			Spell[1011].cast if rest_room_number == Room.current.id
		elsif rest_room_number != Room.current.id && song_of_peace_active
			sleep 2
			fput "stop 1011" if rest_room_number != Room.current.id
		end
	end
	sleep 10
}