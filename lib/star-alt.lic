=begin

   star-alt.lic is a script for tracking alts! Use it for friends, foes, or whatever else you want, it's up to you.
  
   You will also need to download star-watch.lic, a separate script which remains running. When you look at a room, star-watch will show an alt's name in parentheses after a main. For example, Also here: Tatterclaws (Starsworn).

   Commands include: 

    ;star-alt list -> prints a formatted table of your saved names
    ;star-alt list <name> -> prints main + all alts for that name (works for a main or an alt)   <-- added
    ;star-alt add <main> -> add someone to your list as a main
    ;star-alt add <main> <alt1> <alt2>... -> for the given main, add an alt -- add any # alts in one command!
    ;star-alt removemain <main> -> remove a main
    ;star-alt remove <main> <alt> -> remove an alt
    ;star-alt note <name> <note...> -> add a note for someone
    ;star-alt <name> -> list all the characters for that name (main + alts)
    ;star-alt find <name> -> see if that person is online
    ;star-alt find all -> see who's online from all saved characters
    ;star-alt reset -> reset (use with caution!)
    ;star-alt help -> more info

=end

# ------------------------------
# Persistent storage
# ------------------------------
CharSettings['main_alts'] ||= {}
CharSettings['notes']     ||= {}

# ------------------------------
# Global alt maps (shared with star-watch)
# ------------------------------
$STAR_ALT_MAP    ||= {}  # exact-case alt => main
$STAR_ALT_MAP_LC ||= {}  # lowercase  alt => main

def rebuild_alt_cache!
  $STAR_ALT_MAP.clear
  $STAR_ALT_MAP_LC.clear
  (CharSettings['main_alts'] || {}).each do |main, alts|
    Array(alts).each do |alt|
      a = alt.to_s.strip
      next if a.empty?
      $STAR_ALT_MAP[a]             = main
      $STAR_ALT_MAP_LC[a.downcase] = main
    end
  end
end

rebuild_alt_cache!

# ------------------------------
# Helpers
# ------------------------------
def format_name(name)
  name.to_s.split.map(&:capitalize).join(' ')
end

def wrap_text(text, width)
  return [''] if text.nil? || text.empty?
  out  = []
  line = ''
  text.split(/\s+/).each do |word|
    if line.empty?
      line = word
    elsif (line.length + 1 + word.length) <= width
      line << ' ' << word
    else
      out << line
      line = word
    end
  end
  out << line unless line.empty?
  out
end

# Given a name that might be a main or an alt, return the canonical main (or nil)
def resolve_main(name)
  n = format_name(name)
  return n if CharSettings['main_alts'].key?(n)
  $STAR_ALT_MAP_LC[n.downcase]
end

# ------------------------------
# Ensure star-watch is running
# ------------------------------
def ensure_star_watch_running
  begin
    running = []
    begin
      running = Script.running?('star-watch') # returns an array in modern Lich
    rescue
      # ignore and fall through
    end
    if running.respond_to?(:empty?) && !running.empty?
      # already running
      return
    end

    # Try several ways to start it, quietly.
    begin
      Script.start('star-watch')
    rescue
      begin
        start_script('star-watch')
      rescue
        begin
          Script.run('star-watch')
        rescue => e
          echo "star-alt: couldn't auto-start star-watch (#{e}). Run ;star-watch manually if needed."
        end
      end
    end
  rescue => e
    echo "star-alt: error while ensuring star-watch is running: #{e}"
  end
end

ensure_star_watch_running

# ------------------------------
# List (condensed table or single main)
# ------------------------------
def list_alts(name=nil)
  if CharSettings['main_alts'].empty?
    echo "No alts have been added yet."
    return
  end

  # If a name was provided, resolve and print just that main's roster (main + all alts)
  if name
    main = resolve_main(name)
    unless main
      echo "#{format_name(name)} does not exist."
      return
    end
    alts = Array(CharSettings['main_alts'][main]).map { |a| a.to_s.strip }.reject(&:empty?)
    roster = ([main] + alts).uniq
    note = (CharSettings['notes'][main] || '').to_s.strip
    echo "Characters for #{main}: #{roster.join(', ')}"
    echo "Notes: #{note}" unless note.empty?
    return
  end

  # Otherwise, print the full table
  w_main  = 12
  w_alts  = 18
  w_notes = 30

  headers = ['Main', 'Alts', 'Notes']
  border  = "+-#{'-' * w_main}-+-#{'-' * w_alts}-+-#{'-' * w_notes}-+"

  echo border
  echo "| #{headers[0].ljust(w_main)} | #{headers[1].ljust(w_alts)} | #{headers[2].ljust(w_notes)} |"
  echo border

  CharSettings['main_alts'].keys.sort.each do |main|
    raw_alts  = Array(CharSettings['main_alts'][main]).map { |a| a.to_s.strip }.reject(&:empty?)
    note      = (CharSettings['notes'][main] || '').to_s.strip
    alt_lines  = raw_alts.empty? ? [''] : raw_alts
    note_lines = wrap_text(note, w_notes)

    max_rows = [alt_lines.length, note_lines.length].max
    max_rows.times do |i|
      main_cell = (i == 0 ? main : '')
      alt_cell  = (alt_lines[i]  || '')
      note_cell = (note_lines[i] || '')

      alt_wrapped = wrap_text(alt_cell, w_alts)
      if alt_wrapped.length > 1
        echo "| #{main_cell.ljust(w_main)} | #{alt_wrapped.first.ljust(w_alts)} | #{note_cell.ljust(w_notes)} |"
        alt_wrapped[1..-1].each do |seg|
          echo "| #{''.ljust(w_main)} | #{seg.ljust(w_alts)} | #{''.ljust(w_notes)} |"
        end
      else
        echo "| #{main_cell.ljust(w_main)} | #{alt_cell.ljust(w_alts)} | #{note_cell.ljust(w_notes)} |"
      end
    end
  end

  echo border
end

# ------------------------------
# Mutators (rebuild cache after changes)
# ------------------------------
def add_alt(main_name, alt_name=nil)
  main_name = format_name(main_name)
  alt_name  = format_name(alt_name) if alt_name

  CharSettings['main_alts'][main_name] ||= []

  if alt_name
    if CharSettings['main_alts'][main_name].include?(alt_name)
      echo "#{alt_name} is already an alt of #{main_name}."
    else
      CharSettings['main_alts'][main_name] << alt_name
      echo "Added #{alt_name} as an alt of #{main_name}."
      rebuild_alt_cache!
    end
  else
    echo "Added #{main_name} as a main character."
  end
end

def remove_alt(main_name, alt_name)
  main_name = format_name(main_name)
  alt_name  = format_name(alt_name)

  if CharSettings['main_alts'][main_name]&.include?(alt_name)
    CharSettings['main_alts'][main_name].delete(alt_name)
    echo "Removed #{alt_name} from the alts of #{main_name}."
    rebuild_alt_cache!
  else
    echo "#{alt_name} is not an alt of #{main_name}."
  end
end

def remove_main(main_name)
  main_name = format_name(main_name)

  if CharSettings['main_alts'].key?(main_name)
    CharSettings['main_alts'].delete(main_name)
    CharSettings['notes'].delete(main_name)
    echo "Removed #{main_name} and all their alts."
    rebuild_alt_cache!
  else
    echo "#{main_name} does not exist."
  end
end

def reset_alts
  CharSettings['main_alts'] = {}
  CharSettings['notes']     = {}
  echo "Reset all main and alt information."
  rebuild_alt_cache!
end

def add_note(name, note)
  name = format_name(name)
  CharSettings['notes'][name] = note
  echo "Added note to #{name}: #{note}"
end

# ------------------------------
# Display & find
# ------------------------------
def display_entry(name)
  main = resolve_main(name)
  unless main
    echo "#{format_name(name)} does not exist."
    return
  end
  alts = Array(CharSettings['main_alts'][main]).map { |a| a.to_s.strip }.reject(&:empty?)
  echo "Main: #{main} - Alts: #{alts.join(', ')}"
  note = (CharSettings['notes'][main] || '').to_s.strip
  echo "Notes: #{note}" unless note.empty?
end

def find_character(name)
  main = resolve_main(name)
  unless main
    echo "#{format_name(name)} does not exist."
    return
  end
  names_to_find = [main] + Array(CharSettings['main_alts'][main])
  fput "find #{names_to_find.join(' ')}"
end

def find_all_characters
  all_names         = CharSettings['main_alts'].flat_map { |m, a| [m] + Array(a) }.uniq
  found_adventurers = []

  all_names.each_slice(9) do |group|
    results = Lich::Util.issue_command(
      "find #{group.join(' ')}",
      /Brave Adventurer|There are no adventurers/,
      quiet: true, silent: true, include_end: false
    )

    results.each do |line|
      if line =~ /^[A-Za-z]+$/
        name      = line.strip
        main_name = CharSettings['main_alts'].find { |m, a| Array(a).include?(name) }&.first
        found_adventurers << (main_name ? "#{name} (#{main_name})" : name)
      end
    end

    sleep 0.5
  end

  if found_adventurers.empty?
    echo "No adventurers questing from your list."
  else
    echo "Brave Adventurers Questing: #{found_adventurers.uniq.join(', ')}"
  end
end

# ------------------------------
# One-shot arg handling (then exit)
# ------------------------------
args = Script.current.vars
case args[1]
when 'list'
  # NEW: support ;star-alt list <name>  (lists main + all alts for that name)
  if args[2]
    list_alts(args[2])
  else
    list_alts
  end

when 'add'
  if args[2]
    main = args[2]
    if args.length > 3
      args[3..-1].each { |alt| add_alt(main, alt) }
    else
      add_alt(main)
    end
  else
    echo "Usage: ;star-alt add <main> [<alt> ...]"
  end

when 'remove'
  if args[2] && args[3]
    remove_alt(args[2], args[3])
  else
    echo "Usage: ;star-alt remove <main> <alt>"
  end

when 'removemain'
  if args[2]
    remove_main(args[2])
  else
    echo "Usage: ;star-alt removemain <main>"
  end

when 'note', 'notes'
  if args[2] && args[3]
    add_note(args[2], args[3..-1].join(' '))
  else
    echo "Usage: ;star-alt note <name> <note>"
  end

when 'reset'
  reset_alts

when 'find'
  if args[2] == 'all'
    find_all_characters
  elsif args[2]
    find_character(args[2])
  else
    echo "Usage: ;star-alt find <name> | find all"
  end

when nil, 'help'
  echo "Usage: ;star-alt list | list <name> | add <main> [<alt> ...] | remove <main> <alt> | removemain <main> | note <name> <note> | find <name> | find all | reset"

else
  # Treat as ";star-alt <name>"
  display_entry(args[1])
end