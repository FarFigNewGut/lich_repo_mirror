=begin

	This script was originally intended to use mage rechargable gems and make sure the
	last charge was never used so they would never crumble.  It can now also be used
	with worn rechargables or rechargable wands.

	This script expects each rechargable to have a unique name.  If you're using a common
	rechargable such as an oak wand, or if you have two rechargable uncut diamonds, you
	should probably make use of the dyers tent.

	Settings are shared with the chargeimbed script.  Use that script while recharging
	and the tracking is updated automatically.

	;useimbed help

	author: Tillmen (tillmen@lichproject.org)
	game: Gemstone
	tags: magic

=end

UserVars.imbeds = Hash.new unless UserVars.imbeds.class == Hash

if script.vars[1] == 'add'
	script.vars.shift
	unless name = script.vars.find { |var| var.split(' ').length > 1 }
		echo 'error: missing imbed name (use quotes)'
		exit
	end
	unless charges = script.vars.find { |var| var =~ /^[0-9][0-9]?$/ }
		echo 'error: missing number of charges'
		exit
	end
	unless spell = script.vars.find { |var| var =~ /^[0-9]{3,4}$/ }
		echo 'error: missing spell number'
		exit
	end
	unless activator = script.vars.find { |var| var =~ /^(?:rub|tap|wave|raise|eat|drink|throw|sprinkle)$/ }
		echo 'error: missing activator'
		exit
	end
	last_charge = script.vars.any? { |var| var =~ /^use\-?last\-?charge$/i }
	worn = script.vars.any? { |var| var.downcase == 'worn' }
	output = "\n"
	output.concat "        imbed name: #{name}\n"
	output.concat "         activator: #{activator}\n"
	output.concat "      spell number: #{spell}\n"
	output.concat "   current charges: #{charges}\n"
	output.concat "              worn: #{worn}\n"
	output.concat "   use last charge: #{last_charge}\n"
	output.concat "\n"
	output.concat "   to add this item, type #{monsterbold_start};u #{script.name}#{monsterbold_end} \n"
	output.concat "   to cancel, type #{monsterbold_start};k #{script.name}#{monsterbold_end} \n"
	output.concat "\n"
	puts output
	pause_script
	UserVars.imbeds[name] = { :spell => spell.to_i, :charges => charges.to_i, :activator => activator, :worn => worn, :use_last_charge => last_charge }
	echo 'imbed was added'
	exit
elsif script.vars[1] =~ /^del(?:ete)?$/
	imbed_name, imbed_info = UserVars.imbeds.find { |iname,iinfo| iname == script.vars[2..-1].join(' ') }
	if imbed_name
		UserVars.imbeds.delete(imbed_name)
		echo "#{imbed_name} was deleted"
	else
		echo 'no matching imbed found'
		echo "current imbeds: #{UserVars.imbeds.keys.join(', ')}"
	end
	exit
elsif script.vars[1] == 'list'
	max_name = 0
	UserVars.imbeds.keys.each { |name| max_name = [ max_name, name.length ].max }
	output = "\n#{'name'.ljust(max_name)}   spell   charges   activator   worn   use-last   spell name\n"
	output.concat "#{'----'.ljust(max_name)}   -----   -------   ---------   ----   --------   ----------\n"
	if script.vars[2] == 'charges'
		UserVars.imbeds.sort { |a,b| b[1][:charges] <=> a[1][:charges] }.each { |imbed|
			output.concat "#{imbed[0].ljust(max_name)}   #{imbed[1][:spell].to_s.rjust(5)}   #{imbed[1][:charges].to_s.rjust(7)}   #{imbed[1][:activator].rjust(9)}    #{if imbed[1][:worn]; 'yes'; else; ' no'; end}        #{if imbed[1][:use_last_charge]; 'yes'; else ' no'; end}   #{Spell[imbed[1][:spell]].name}\n"
		}
	else
		UserVars.imbeds.sort { |a,b| a[1][:spell] <=> b[1][:spell] }.each { |imbed|
			output.concat "#{imbed[0].ljust(max_name)}   #{imbed[1][:spell].to_s.rjust(5)}   #{imbed[1][:charges].to_s.rjust(7)}   #{imbed[1][:activator].rjust(9)}    #{if imbed[1][:worn]; 'yes'; else; ' no'; end}        #{if imbed[1][:use_last_charge]; 'yes'; else ' no'; end}   #{Spell[imbed[1][:spell]].name}\n"
		}
	end
	output.concat "\n"
	respond output
	exit
elsif script.vars[1] !~ /^[0-9]+$/
	output = "\n"
	output.concat "   Imbeds must be added to the script before they can be used:\n"
	output.concat "\n"
	output.concat "      ;useimbed add \"<imbed name>\" <spell number> <activator> <current charges> [worn] [use-last-charge]\n"
	output.concat "      ;useimbed add \"polished silver wand\" 901 wave 10 use-last-charge\n"
	output.concat "      ;useimbed add \"very ugly necklace\" 406 rub 6 worn use-last-charge\n"
	output.concat "      ;useimbed add \"cloudy white diamond\" 410 tap 40\n"
	output.concat "\n"
	output.concat "      The name of the imbed must be an exact match to the GameObj name, and it must be in quotes.\n"
	output.concat "\n"
	output.concat "   ;useimbed list\n"
	output.concat "\n"
	output.concat "   ;useimbed 406\n"
	output.concat "   ;useimbed 901 kobold\n"
	output.concat "\n"
	respond output
	exit
end

if UserVars.magicsack.nil? or UserVars.magicsack.empty?
	echo 'error: magicsack is not set. (;set change magicsack <container name>)'
	exit
end
unless magicsack = (GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.magicsack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.magicsack).sub(' ', ' .*')}$/i })
	echo 'error: failed to find your magicsack'
	exit
end
close_magicsack = false
open_magicsack = proc {
	if magicsack.contents.nil?
		open_result = dothistimeout "open ##{magicsack.id}", 5, /^You open|^That is already open\.$/
		if open_result =~ /^You open/
			close_magicsack = true
		else
			dothistimeout "look in ##{magicsack.id}", 5, /In .*? you see/
			if magicsack.contents.nil?
				echo 'error: failed to find magicsack contents'
				exit
			end
		end
	end
}

if script.vars[2]
	target = "at #{script.vars[2]}"
else
	target = ''
end

imbed_name, imbed_info = UserVars.imbeds.find { |iname,iinfo| iinfo[:spell] == script.vars[1].to_i }
if imbed_name
	unless (imbed_info[:use_last_charge] == true and imbed_info[:charges] > 0) or (imbed_info[:charges] > 1)
		echo "#{imbed_name} is out of charges."
		exit
	end
	if imbed_info[:worn]
		if imbed = GameObj.inv.find { |obj| obj.name == imbed_name }
			Spell.lock_cast rescue()
			waitrt?
			waitcastrt?
			if (imbed_info[:spell] == 518) and (checkstance != 'offensive')
				dothistimeout 'stance offensive', 5, /^You are now in an? \w+ stance\.$|^You are unable to change your stance\.$/
			end
			dothistimeout "#{imbed_info[:activator]} ##{imbed.id} #{target}", 2, /^You (?:rub|tap)/
			Spell.unlock_cast rescue()
			imbed_info[:charges] = imbed_info[:charges].to_i - 1
			respond "[ #{imbed_name}: #{imbed_info[:charges]} charges remaining. ]"
			if (imbed_info[:spell] == 518) and checkstance !~ /guarded|defensive/
				dothistimeout 'stance guarded', 5, /^You are now in an? \w+ stance\.$|^You are unable to change your stance\.$/
			end
			UserVars.save
		else
			open_magicsack.call
			if imbed = magicsack.contents.find { |obj| obj.name == imbed_name }
				Spell.lock_cast rescue()
				waitrt?
				waitcastrt?
				empty_hand
				dothistimeout "get ##{imbed.id}", 2, /^You remove/
				dothistimeout "wear ##{imbed.id}", 2, /^You/
				if (imbed_info[:spell] == 518) and (checkstance != 'offensive')
					dothistimeout 'stance offensive', 5, /^You are now in an? \w+ stance\.$|^You are unable to change your stance\.$/
				end
				dothistimeout "#{imbed_info[:activator]} ##{imbed.id} #{target}", 2, /^You (?:rub|tap|raise|wave)/
				Spell.unlock_cast rescue()
				imbed_info[:charges] = imbed_info[:charges].to_i - 1
				respond "[ #{imbed_name}: #{imbed_info[:charges]} charges remaining. ]"
				if (imbed_info[:spell] == 518) and checkstance !~ /guarded|defensive/
					dothistimeout 'stance guarded', 5, /^You are now in an? \w+ stance\.$|^You are unable to change your stance\.$/
				end
				# dothistimeout "remove ##{imbed.id} in ##{magicsack.id}", 2, /^You/
				# dothistimeout "put ##{imbed.id} in ##{magicsack.id}", 2, /^You put/
				fill_hand
				UserVars.save
			else
				echo "failed to find imbed: #{imbed_name}"
			end
		end
	else
		open_magicsack.call
		if imbed = magicsack.contents.find { |obj| obj.name == imbed_name }
			Spell.lock_cast rescue()
			waitrt?
			waitcastrt?
			empty_hand
			dothistimeout "get ##{imbed.id}", 2, /^You remove/
			if (imbed_info[:spell] == 518) and (checkstance != 'offensive')
				dothistimeout 'stance offensive', 5, /^You are now in an? \w+ stance\.$|^You are unable to change your stance\.$/
			end
			dothistimeout "#{imbed_info[:activator]} ##{imbed.id} #{target}", 2, /^You (?:rub|tap|raise|wave)/
			Spell.unlock_cast rescue()
			imbed_info[:charges] = [imbed_info[:charges].to_i, 40].min - 1
			respond "[ #{imbed_name}: #{imbed_info[:charges]} charges remaining. ]"
			if (imbed_info[:spell] == 518) and checkstance !~ /guarded|defensive/
				dothistimeout 'stance guarded', 5, /^You are now in an? \w+ stance\.$|^You are unable to change your stance\.$/
			end
			dothistimeout "put ##{imbed.id} in ##{magicsack.id}", 2, /^You put/
			fill_hand
			UserVars.save
		else
			echo "failed to find imbed: #{imbed_name}"
		end
	end
	fput "close ##{magicsack.id}" if close_magicsack
else
	echo 'no matching imbed found'
end
