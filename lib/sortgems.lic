=begin

	author: Vailan
	tags: inventory,gems
	version: 2023.08.08.1
	
	This utility uses a regex list of higher value gems that could potentially be purified into orbs and sorts them into a single container.
	
	Syntax: ;sortgems
		This will use your lootsack and take the gems that are potentially orbable and put them in your boxsack
		
	Syntax: ;sortgems [source]
		This will use the selected source container and take the gems that are potentially orbable and put them in your boxsack
		
	Syntax: ;sortgems [source] [destination]
		This will use the selected source container and take the gems that are potentially orbable and put them in the specified destination container
	
	Syntax: ;sortgems help
		Will output this information
	
	2023.08.08.1		- Draft Edition of the sortgems Utility
	
	
=end


#sortgems => ;e Script.run("foreach", "fullname=/uncut (diamond|ruby|emerald)|tiny (white|black|grey|pink) pearl|wyrm's-tooth amethyst|(maernstrike|star-of-Tamzyrr|dwarf-cut) diamond|(dragon's-tear|sylvarraend ruby) ruby|(azure|crimson|emerald|golden) blazestar|selanthan bloodjewel|scarlet despanal|firestone|(opaline|cats-eye) moonstone|(aster|moonglae) opal|(mermaid's tear|dragonseye|dragonsbreath) sapphire|(red|white) starstone|(faint gold|pale grey) tempest stone|(red|white|yellow) sunstone/ in my #{UserVars.lootsack};get item;put item in my #{UserVars.boxsack}")

GemRegex = "uncut (diamond|ruby|emerald)|tiny (white|black|grey|pink) pearl|wyrm's-tooth amethyst|(maernstrike|star-of-Tamzyrr|dwarf-cut) diamond|(dragon's-tear|sylvarraend ruby) ruby|(azure|crimson|emerald|golden) blazestar|selanthan bloodjewel|scarlet despanal|firestone|(opaline|cats-eye) moonstone|(aster|moonglae) opal|(mermaid's-tear|dragonseye|dragonsbreath) sapphire|(red|white) starstone|(faint gold|pale grey) tempest stone|(red|white|yellow) sunstone"

def outputHelp()
	strHelp = "This utility script is for sorting through gems to put potential orb gems in a separate container\r\n"
	strHelp += "\r\n"
	
	strHelp += "*******************************************************************************\r\n"
	strHelp += "Script Commands assuming used defaults\r\n"
	strHelp += "*******************************************************************************\r\n"
	strHelp += "  Syntax: ;sortgems\r\n"
	strHelp += "  	This will use your lootsack and take the gems that are potentially orbable and put them in your boxsack\r\n"
	
	strHelp += "\r\n"
	strHelp += "  Syntax: ;sortgems [source]\r\n"
	strHelp += "  	This will use the selected source container and take the gems that are potentially orbable and put them in your boxsack\r\n"
	
	strHelp += "\r\n"
	strHelp += "  Syntax: ;sortgems [source] [destination]\r\n"
	strHelp += "  	This will use the selected source container and take the gems that are potentially orbable and put them in the specified destination container\r\n"
	
	strHelp += "\r\n"
	strHelp += "  Syntax: ;sortgems help\r\n"
	strHelp += "  	Will output this help text\r\n"
	
	
	puts strHelp
	
	
	
end

def sortGems(sourceContainer,destContainer)
	
	#echo "Source=#{sourceContainer}"
	#echo "Dest=#{destContainer}"
	destinationContainerID = "0"
	#find destination Container first
	GameObj.inv.find {|dest|
		if dest.name=~/#{destContainer}/ 
			#echo "Found Destination = #{dest.name} ( #{dest.id})"
			destinationContainerID = dest.id
		end
	}
	#check to see if destination exists
	if destinationContainerID == "0"
		echo "There was an error finding your destination container of #{destContainer} so aborting"
		exit
	end
	#get source and iterate through contents
	GameObj.inv.find {|sack| 
		if sack.name=~/#{sourceContainer}/ 
			#echo "Found Source = #{sack.name} ( #{sack.id})"
			sack.contents.each{|item| 
				if item.type =~ /gem/
					
					if item.full_name =~ /#{GemRegex}/
						fput "get ##{item.id} from ##{sack.id}"
						fput "put ##{item.id} in ##{destinationContainerID}"
					end
				end
			}
		
		end
	}

end


sourceContainer = 	UserVars.lootsack
destContainer = 	UserVars.boxsack

if variable[0] == nil
	#use default loot sack as source and boxsack as destination
	sortGems(sourceContainer,destContainer)
else
	if variable[1] =~ /help/i
		outputHelp()
	else 
		sourceContainer = variable[1]
		if 	variable[2] != nil
			destContainer = variable[2]
		end

		sortGems(sourceContainer,destContainer)
	end

end
