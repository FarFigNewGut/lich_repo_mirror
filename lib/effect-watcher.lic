module Effects
  Defined = []

  class Watcher
    class Effect
      
      attr_reader :name, :start, :finish
      def initialize(name:, start:, finish: nil)
        @name = name
        @start = start
        @finish = finish
        Effects::Defined << self
      end
    end

    # these effects are slow to populate in the game feed, but incredibly deadly
    # reaction time is paramount to success/survival
    Effect.new(
      name:   "Condemn", 
      start:  %r(The pungent stench of decay fills the air as mist rises from the floor around you!),
      finish: %r(The burden of condemnation lifts from your spirit.)
    )

    Effect.new(name: "Jaws",
      start:  %r[Suddenly, you hear a loud \*clink\* as a large pair of carefully concealed metal jaws slam shut on your (right|left) leg!],
      finish:  %r(The metal jaws restraining your movement snap apart.)
    )

    Effect.new(name: "Net",
      start:  %r(Suddenly, a carefully concealed net springs up from the ground, completely entangling you!),
      finish: %r(The net entangling you rips and falls apart.)
    )

    Effect.new(name: "SunderShield",
      start:  %r(You feel your left arm go numb!),
      finish: %r(The numbness in your left arm fades away.)
    )

    Effect.new(name: "Burrowed",
      start:  %r(The ground seems to distort and shudder beneath your feet.)
    )

    Effect.new(name: "RiftSlow",
      start:  %r(The cold seeps into your flesh, burrowing down into your bones.  The sensation leaves your muscles feeling rigid and unresponsive.)
    )

    def self.start_effect(name, seconds)
      Log.out("starting %s for %s seconds" % [name, seconds])
      Effects::Debuffs.to_h[name] = Time.now + seconds
    end

    def self.end_effect(name)
      Log.out("ending %s" % [name])
      Effects::Debuffs.to_h.delete(name)
    end

    def self.main()
      while line=get
        Effects::Defined.each {|effect|
          self.start_effect(effect.name, 120) if line =~ effect.start
          self.end_effect(effect.name) if effect.finish && line =~ effect.finish
        }
      end
    end

    Watcher.main()
  end
end