=begin
***This script is an altered version of Dreaven's "title" script. I merely changed titles to races. Any errors found in this script should be directed to me gs4lass@gmail.com or GS4Lass#3319 on Discord. All credit should go to Dreaven (Tgo01). Thank you for allowing me to do this, Dreaven. ~Jennora***

	Adds races after people's names when you LOOK in a room. For example "Bob" would show up as "Bob (Human)", if the script has already recognized Bob as being a human.

	Here are commands to use while the script is running:

	To add someone's race you specify type: ;race add name race
	Race can be anything you want and as many words as you like.

	To remove someone type: ;race remove name

	To scan WHO list for new people needing race set type: ;race scan
	Note: This does a WHO for every race and adds races if the script doesn't already know their race.

	To remove all races from everyone and start with a clean slate type: ;race reset all

	To hide a particular race from showing type: ;race hide race_name
	Note you must type the full race name, capitalization doesn't matter. Script will still track people's races even if you set that race to hidden.

	To show a previously hidden race again type: ;race show race_name
	Note again you must type full race name and capitalization doesn't matter.
	To list races currently being hidden type: ;race list

	To show shortened race (five letters) type: ;race short

	To highlight the names of a particular class in MONSTER BOLD type ;race bold race_name
	Only one race can be highlighted at a time. Type ;race bold clear to have no race bolded.

	Kill the script to stop showing races.

	Author:  Jennora
	Version:  1.14

=end

CharSettings['player_races'] = Hash.new unless CharSettings['player_races']
CharSettings['races_not_to_show'] = Array.new unless CharSettings['races_not_to_show']
races_not_to_show = CharSettings['races_not_to_show']
CharSettings['use_shortened_race_names'] = nil unless CharSettings['use_shortened_race_names']
use_shortened_race_names = CharSettings['use_shortened_race_names']
CharSettings['race_to_bold'] = nil unless CharSettings['race_to_bold']
race_to_bold = CharSettings['race_to_bold']
script_races = Hash.new
display_races = nil
skip_this_person = nil
pc_name = nil
characters = nil
pc_found_in_list = nil
full_name = nil
pre_status = nil
post_status = nil
name = nil
scan_room = nil
players_added = nil
race = nil
all_list = nil
number_of_players_added = 0
gather_all_race_info = nil
list_of_all_races = [ "Human", "Giantman", "Half-Elf", "Sylvankind", "Dark Elf", "Elf", "Dwarf", "Halfling", "Forest Gnome", "Burghal Gnome", "Half-Krolvin", "Erithian", "Aelotoi" ]
checking_current_race = nil
squelch_who = nil

toggle_upstream

squelch_who = proc{
	started = false
	hook_proc = proc { |s|
		if started
			if s =~ /<prompt/
				DownstreamHook.remove('squelch-who')
				nil
			elsif s =~ /<output/
				s
			else
				nil
			end
		elsif s =~ /^Brave Adventurers Questing:/
			started = true
			nil
		else
			s
		end
	}
	DownstreamHook.add('squelch-who', hook_proc)
}

gather_all_race_info = proc{
	squelch_who.call
	silence_me
	fput "who race #{checking_current_race}"
	silence_me
	all_list = nil
	while (line = get)
		if (line =~ /Brave Adventurers Questing\:/)
			while (line = get)
				all_list += "#{line} " unless (line =~ /Total\:|^\[.*?\]\-[A-z]+\:|^\[server\]\: "/)
				break if (line =~ /Total\:/)
			end
			break
		end
	end
}


scan_room = proc{
	players_added = nil
	number_of_players_added = 0
	respond "##########################################################################"
	respond "I am scanning all players currently online, this might take a few seconds."
	respond "##########################################################################"
	list_of_all_races = [ "Human", "Giantman", "Half-Elf", "Sylvankind", "Dark Elf", "Elf", "Dwarf", "Halfling", "Forest Gnome", "Burghal Gnome", "Half-Krolvin", "Erithian", "Aelotoi" ]
	loop{
		break if list_of_all_races.length == 0
		checking_current_race = "#{list_of_all_races.at(0)}"
		list_of_all_races.delete_at(0)
		gather_all_race_info.call
		all_list = all_list.split(" ")
		all_list.each { |name|
			unless CharSettings['player_races'].include?(name)
				players_added += "#{name} (#{checking_current_race})\n"
				CharSettings['player_races'].store(name, "#{checking_current_race}")
				number_of_players_added += 1	
			end
		}
	}
	if players_added == nil
		respond "######################"
		respond "No players were added."
		respond "######################"
	else
		respond "##################################################"
		respond "The following players and their races were added:"
		respond "#{players_added}"
		if number_of_players_added == 1
			respond "#{number_of_players_added} player added."
		else
			respond "#{number_of_players_added} players added."
		end
		respond "##################################################"
	end
}

display_races = proc{
	action = proc { |server_string|
		if server_string =~ /^Also here\:|^\<component id\=\'room players\'\>Also here\:/
			pc_name = nil
			characters = server_string.split(", ")
			characters.each{ |pc|
				if pc =~ /(.*)(\<a exist\=\".*\" noun\=\"(.*)\"\>.*\<\/a\>)(.*)/
					pre_status = $1
					full_name = $2
					name = $3
					post_status = $4
					pc_found_in_list = nil
					if script_races.include?("#{name}")
						race = script_races.fetch("#{name}")
						(pc_found_in_list = true) if (!races_not_to_show.include?(race))
                    if (use_shortened_race_names) && (race =~ /^( Human|Giantman|Half-Elf|Sylvankind|Dark Elf|Elf|Dwarf|Halfling|Forest Gnome|Burghal Gnome|Half-Krolvin|Erithian|Aelotoi)$/i)
							race = race[0...5]
							race_to_bold = race_to_bold[0...5]
						end
						if race_to_bold == race
							pc_name += "#{pre_status}#{monsterbold_start}#{full_name}#{monsterbold_end} (#{race})#{post_status}, "
						else
							pc_name += "#{pre_status}#{full_name} (#{race})#{post_status}, "
						end
					end
				end
				unless pc_found_in_list
					pc_name += "#{pc}, "
				end
			}
			server_string = "#{pc_name}".chop.chop + "\n"
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_display_races", action)
		script_races = CharSettings['player_races']
}

display_races.call

before_dying { DownstreamHook.remove("#{script.name}_display_races") }
	
script_name = script.name.dup

loop{
	command = upstream_get
	if (command =~ /#{$lich_char}#{script_name} add ([a-zA-Z]+) (.*)/)
		name = $1.capitalize
		CharSettings['player_races'].store("#{name}", "#{$2}")
		DownstreamHook.remove("#{script.name}_display_races")
		display_races.call
		echo "#{name} has been added with the race of #{$2}"
	elsif (command =~ /#{$lich_char}#{script_name} remove ([a-zA-Z]+)/)
		name = $1.capitalize
		CharSettings['player_races'].delete("#{name}")
		DownstreamHook.remove("#{script.name}_display_races")
		display_races.call
		echo "#{name} has been removed from the list."
	elsif (command =~ /#{$lich_char}#{script_name} reset all/)
		CharSettings['player_races'] = Hash.new
		DownstreamHook.remove("#{script.name}_display_races")
		display_races.call
		echo "All races have been removed."
	elsif (command =~ /#{$lich_char}#{script_name} scan/)
		scan_room.call
		DownstreamHook.remove("#{script.name}_display_races")
		display_races.call
	elsif (command =~ /#{$lich_char}#{script_name} hide (.*)/)
		name = $1.capitalize
		if name !~ /^(Human|Giantman|Half-Elf|Sylvankind|Dark Elf|Elf|Dwarf|Halfling|Forest Gnome|Burghal Gnome|Half-Krolvin|Erithian|Aelotoi)$/i
			echo "You must type full race name to hide a particular race. Capitalization does not matter."
		else
			if CharSettings['races_not_to_show'].include?(name)
				echo "#{name} is already being hidden."
			else
				CharSettings['races_not_to_show'].push(name)
				races_not_to_show = CharSettings['races_not_to_show']
				echo "#{name} race is now hidden."
			end
		end
	elsif (command =~ /#{$lich_char}#{script_name} show (.*)/)
		name = $1.capitalize
		if name !~ /^(Human|Giantman|Half-Elf|Sylvankind|Dark Elf|Elf|Dwarf|Halfling|Forest Gnome|Burghal Gnome|Half-Krolvin|Erithian|Aelotoi)$/i
			echo "You must type full race name to hide a particular race. Capitalization does not matter."
		else
			if !CharSettings['races_not_to_show'].include?(name)
				echo "#{name} is already being shown."
			else
				CharSettings['races_not_to_show'].delete(name)
				races_not_to_show = CharSettings['races_not_to_show']
				echo "#{name} race will now be shown."
			end
		end
	elsif (command =~ /#{$lich_char}#{script_name} list/)
		if CharSettings['races_not_to_show'].length == 0
			echo "No races are being hidden."
		else
			echo "races being hidden: #{CharSettings['races_not_to_show']}"
		end
	elsif (command =~ /#{$lich_char}#{script_name} short/)
		CharSettings['use_shortened_race_names'] = true
		use_shortened_race_names = CharSettings['use_shortened_race_names']
		echo "race races will now be shortened."
	elsif (command =~ /#{$lich_char}#{script_name} long/)
		CharSettings['use_shortened_race_names'] = nil
		use_shortened_race_names = CharSettings['use_shortened_race_names']
		echo "race races will now be full length."
	elsif (command =~ /#{$lich_char}#{script_name} bold (.*)/)
		name = $1.capitalize
		if name == "Clear"
			CharSettings['race_to_bold'] = nil
			race_to_bold = CharSettings['race_to_bold']
			echo "No races are being bolded now."
		else
			if name !~ /^(Human|Giantman|Half-Elf|Sylvankind|Dark Elf|Elf|Dwarf|Halfling|Forest Gnome|Burghal Gnome|Half-Krolvin|Erithian|Aelotoi)$/i
				echo "You must type full race name to bold a particular race. Capitalization does not matter."
			else
				if CharSettings['race_to_bold'] == name
					echo "#{name} is already being bolded."
				else
					CharSettings['race_to_bold'] = name
					race_to_bold = CharSettings['race_to_bold']
					echo "#{name} race will now be bolded."
				end
			end
		end
	elsif (command =~ /#{$lich_char}#{script_name}/) || (command =~ /#{$lich_char}#{script_name} help/)
		respond "\n"
		respond "To add someone with a race you specify type: ;race add name race"
		respond "race can be anything you want and as many words as you like."
		respond "\n"
		respond "To remove someone type: ;race remove name"
		respond "\n"
		respond "To scan WHO list for new people needing races type: ;race scan"
		respond "Note: This does a WHO for every race and adds people's races if the script doesn't already know their race."
		respond "\n"
		respond "To remove all races from everyone and start with a clean slate type: ;race reset all"
		respond "\n"
		respond "To hide a particular race from showing type: ;race hide race_name"
		respond "Note you must type the full race name, capitalization doesn't matter. Script will still track people's races even if you set that race to hidden."
		respond "\n"
		respond "To show a previously hidden race again type: ;race show race_name"
		respond "Note again you must type full race name and capitalization doesn't matter."
		respond "To list races currently being hidden type: ;race list"
		respond "\n"
		respond "To show shortened race races type: ;race short"
		respond "\n"
		respond "To show full race races type: ;race long"
		respond "\n"
		respond "To highlight the names of a particular class in MONSTER BOLD type ;race bold race_name"
		respond "Only one race can be highlighted at a time. Type ;race bold clear to have no race bolded."
	end
}