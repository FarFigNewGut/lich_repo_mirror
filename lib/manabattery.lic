=begin
--------------------------------------------------------------------------------
 Title : Manabattery
 Date : 06/12/2013
 Author : Oweodry

 Use :
  ;manabattery Character
  ;manabattery Character bot
  ;manabattery slave bot

 Details :
  Transfers mana between two characters running this script. The 'bot' mode will
  run the script in a loop, coninuously requesting/sending mana when appropriate
  (useful for large imbed batches, charging magical items, etc). The 'slave'
  flag will cause the character to send mana when requested. Specifying a
  character will cause the script to request mana from that character.
  It has the following features:
      - Sends mana control info to compute the correct amount of mana to send
      - Will use sigil of power on the slave character (no override)
      - Will wait for pulses (crudely) if the slave needs more mana

 Notes :
  - 'Bot' function is optional. Running in non-bot mode will be a one-off SEND
  - Won't request mana (by default) unless it's at least 1 pulse worth of mana
  - Doesn't currently support sign of wracking (plan to add this eventually)
  - No support or future updates are guranteed
  - My scripts: http://forum.gsplayers.com/showthread.php?73663

 Updates :
  - 09/24/2013 Released
  - 06/12/2014 Fixed error where calculated transfer rate was greater than 95%

 Thanks :
  - Whirlin and Tg01 for saving me some time with the mana control SEND formula

--------------------------------------------------------------------------------
=end


# Help text
if script.vars.find { |val| val =~ /\bhelp\b/i }
	respond("\nRequests mana transfer or transfers mana")
	respond("Syntax:   ;#{script.name} (character) [slave] [bot] (mana)\n\n")
	respond("Flags/Arguments:")
	respond("   (character) - Requests mana from this character (not used for mana sending modes)")
	respond("   slave - Waits for a character running manabattery to request mana")
	respond("   bot - Sends/requests mana automatically without input (waits in a loop)")
	respond("   (mana) - Minimum amount of mana to ask for (won't request mana until missing at least this much, optional)\n\n")
	respond("Examples:")
	respond("   ;#{script.name} john - Will request mana from John just once as long as you are below full mana")
	respond("   ;#{script.name} john bot - Will continuously request mana from John when you are 1 pulse below full mana")
	respond("   ;#{script.name} john bot 25 - Will continuously request mana from John when you are 25 mana below full")
	respond("   ;#{script.name} slave bot - Will continuously send mana when requested by a character running #{script.name}\n\n")
	exit
end

# Calculate mana regen rate
def manaregen

	# Base regen rate
	if Room.current.tags.any? { |tag| tag =~ /node/i } then mregen = 0.25*maxmana
	else mregen = 0.15*maxmana
	end

	# Mana control bonus
	mregen += (Skills.emc/10).truncate + (Skills.mmc/10).truncate + (Skills.smc/10).truncate

	# Mana bread
	if Spell[203].active?
		# Base +1/min
		mregen += 2.5
		# MjS spell bonus (seed 4)
		if Spell[203].known?
			y = 0; seed = 4
			until y + seed > Spells.majorspirit
				y += seed; seed += 1; mregen += 2.5
			end
		end
	end

	# Other spells/effects
	if Spell[215].active? then mregen += 2.5; end
	if Spell['sigil of concentration'].active? then mregen +=5; end

	# Return result
	return mregen.truncate

end


# Operate as mana sending slave
if script.vars.find { |var| var == "slave" }

	# Monitor interactions
	while line = get

		# Mana request received
		if line =~ /^(.*) whispers.*Mana\: (\d*)\/(\d*).*EMC\: (\d*).*MMC\: (\d*).*SMC\: (\d*)/

			# Get mana status
			mchar = $1; mcur = $2.to_i; mmax = $3.to_i
			# Get mana control ranks
			emc = $4.to_i; mmc = $5.to_i; smc = $6.to_i

			# Compute mana transfer rates
			manatransfer = Hash.new
			manatransfer["emc"] = [(Skills.to_bonus(Skills.emc)/100.0)*(emc/100.0)*0.95, 0.95].min
			manatransfer["mmc"] = [(Skills.to_bonus(Skills.mmc)/100.0)*(mmc/100.0)*0.95, 0.95].min
			manatransfer["smc"] = [(Skills.to_bonus(Skills.smc)/100.0)*(smc/100.0)*0.95, 0.95].min
			mtrans = manatransfer.values.max

			# Compute mana to send
			mneed = mmax-mcur
			msend = (mneed/mtrans).ceil

			# Use sigil of power if able
			if Spell['sigil of power'].known?
				while Spell['sigil of power'].affordable? and (checkmana + manaregen + 25 < maxmana) and msend > checkmana
					# Pause for safety to allow lich to monitor stamina/mana
					Spell['sigil of power'].cast; pause 0.5
				end
			end
			# Adjust if battery has less mana
			if msend > checkmana then msend = (((checkmana*mtrans).truncate)/mtrans).ceil; end

			# Give mana recipient a status update
			if msend == 0 then fput "whisper #{mchar} Out of mana, please wait."
			else
				# Send mana
				fput "whisper #{mchar} Sending mana, please wait."
				if script.vars.find { |var| var == "bot" } then fput "SEND #{msend} #{mchar}"
				else echo "### Error: Non-bot mode not yet supported!"; exit
				end
			end

		end
	end

# Operate as a mana requester
else

	# Determine slave mana battery character
	batterychar = GameObj.pcs.find { |pc| pc.noun =~ /#{script.vars[1..-1].join("|")}/i }
	if batterychar.nil? then echo "### Error: Battery character not present!"; exit; end

	# Request mana while below max
	while checkmana < maxmana or script.vars.find { |var| var == "bot" }

		# If mana slave is present
		if GameObj.pcs.any? { |pc| pc.noun == batterychar.noun }
			# Request mana
			wait_until { checkmana < maxmana }
			emc = Skills.to_bonus(Skills.emc); mmc = Skills.to_bonus(Skills.mmc); smc = Skills.to_bonus(Skills.smc)
			fput "whisper #{batterychar.noun} Send mana. Mana: #{checkmana}/#{maxmana}, EMC: #{emc}, MMC: #{mmc}, SMC: #{smc}"
			# Wait for a response
			result = matchtimeout(5, /#{batterychar.noun}.*whisper/i)
			# Wait on a pulse
			if result =~ /#{batterychar.noun}.*out of mana/i
				echo "### Waiting on a pulse..."
				manacurrent = checkmana
				# Crude pulse check
				until checkmana > manacurrent
					manacurrent = checkmana
					pause 0.5
				end
			# Wait for mana
			elsif result =~ /#{batterychar.noun}.*sending mana/i
				waitforre(/#{batterychar.noun} faces you/i)
			end
		# If mana slave is not present
		else wait_until { GameObj.pcs.any? { |pc| pc.noun == batterychar.noun } }
		end

		# Break and (eventually) exit if we're not botting
		if !script.vars.find { |var| var == "bot" } then break
		# Else, wait until mana is needed
		else
			# Use mana buffer specified in arguments
			mbuff = script.vars.find { |var| var =~ /\d/ and var !~ /\D/ }.to_i
			# Else get mana buffer from mana regen rate
			if mbuff == 0 then mbuff = manaregen; end
			wait_until { checkmana + mbuff < maxmana }
		end

	end

end
