=begin
  Shake a jar|bottle|beaker in your hand and stow the result N times.
    syntax: ;shake <number of times|"all"> <optional destination container>
    usage: 
      ;shake 8              shakes and stows result 8 times
      ;shake all            same, but sets N = number of items in jar
      ;shake 8 backpack     shakes and puts result in backpack (no my)
      ;shake 8 my backpack  shakes and puts result in my backpack
      ;shake 8 sell         shakes and sells result
      
    author: Xanlin
      game: gs
      tags: utility, jar
  required: Lich >= 4.6.0.
   version: 0.4 (2019-06-27)
   changes: 
      0.2 
        - exit if you don't have a jar in your hands.
        - optional destination
        - faster shaking
      0.3
        - added selling
        - added "all" option
        - added check to make sure jar has N amount
      0.4 
        - fix for catching the noun on selling
=end
help_txt = %{
  Shake a jar|bottle|beaker in your hand and stow the result N times.
    syntax: ;shake <number of times|"all"> <optional destination container>
    usage: 
      ;shake 8              shakes and stows result 8 times
      ;shake all            same, but sets N = number of items in jar
      ;shake 8 backpack     shakes and puts result in backpack (no my)
      ;shake 8 my backpack  shakes and puts result in my backpack
      ;shake 8 sell         shakes and sells result
}
#exit and show help if no vars
(respond help_txt;exit) if script.vars[1] !~ /\d|all/i #script.vars[0].nil? || script.vars[0] =~ /help|setup/i || 

jar_pattern = /(beaker|bottle|jar)/i

#exit if holding 2 jars
(respond "pick one jar and try again";exit) if checkleft =~ jar_pattern && checkright =~ jar_pattern

#exit if holding 0 jars
jar = $1 if checkright =~ jar_pattern
jar = $1 if checkleft  =~ jar_pattern
(respond "shake: put a jar in your hand if you want to ;shake it";exit) if !jar

#set shakes and check if shakes > jar contents
shakes = script.vars[1].to_i if script.vars[1] !~/all/i
qty = 0

#get jar qty
fput "look in my #{jar}"
look = matchtimeout 5, "Inside the", "is empty."
if look =~ /Inside .*? you see (\d+) portion/i
  qty = $1.to_i
  shakes = qty if script.vars[1] =~ /all/i
elsif look =~ /The .*?#{jar} is empty./
  puts "shake: The {jar} is empty."
  exit
end

(puts "shake: Specified more shakes than jar has available";exit) if shakes > qty

#stow stuff if non-jar hand isn't empty
right = nil
left  = nil
(left = GameObj.left_hand.id; fput "stow left")  if checkleft && checkright && checkleft  !~ jar_pattern
(right = GameObj.right_hand.id; fput "stow right") if checkleft && checkright && checkright !~ jar_pattern

#set stow/put/sell commands
stow = checkleft ? "stow right" : "stow left" if !script.vars[2]
stow = "put #{checkleft ? "right" : "left"} in #{script.vars[2..-1].join(" ")}" if script.vars[2] && script.vars[2] !~ /sell/i
sell_hand = checkleft ? "right" : "left" if script.vars[2] =~ /sell/i

shake = "shake my #{jar}"

#---------------- do stuff ----------------#
@sell_noun = nil
if script.vars[2] !~ /sell/i
  shakes.times {fput shake; put stow;} 
elsif script.vars[2] =~ /sell/i
  shakes.times {
    fput shake; 
    if @sell_noun.nil?
      fput "glance"
      @sell_noun = (sell_hand =="right" ? GameObj.right_hand.noun : GameObj.left_hand.noun)
      put "sell #{@sell_noun}"
    else 
      put "sell #{@sell_noun}"
    end
  }
end

fput "get ##{left}"  if left 
fput "get ##{right}" if right
