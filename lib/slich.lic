##quiet
=begin
    SLich by SpiffyJr

     author: SpiffyLich
      email: theman@spiffyjr.me
       name: SpiffyLich
       tags: loot
    version: 1.0

    SpiffyLich overwrites some Lich functions for improved versions.
    
      * empty_hands and variations should work for any item or container with or without scripts
      * move will detect climb/swim and use Sigil of Resolve automatically if known
=end

# overwrites Lich definitions for improved versions
def s_put_item(item, sack)
    res = nil
    30.times {
        res = fput "put ##{item} in ##{sack}"
        if GameObj.right_hand.id != item and GameObj.left_hand.id != item
            break
        end
        
        if res =~ /^Your .*? won't fit in .*?\.$|^You can't .+ It's closed!$/
            break
        end
        
        sleep 0.10
    }
    
    res
end

def empty_hand
	$fill_hand_actions ||= Array.new
	actions = Array.new
	right_hand = GameObj.right_hand
	left_hand = GameObj.left_hand
	if UserVars.lootsack.nil? or UserVars.lootsack.empty?
		lootsack = nil
	else
		lootsack = GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack.strip)}/i } || GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i }
	end
	other_containers_var = nil
	other_containers = proc {
		if other_containers_var.nil?
			Script.current.want_downstream = false
			Script.current.want_downstream_xml = true
			result = dothistimeout 'inventory containers', 5, /^You are wearing/
			Script.current.want_downstream_xml = false
			Script.current.want_downstream = true
			other_containers_ids = result.scan(/exist="(.*?)"/).flatten - [ lootsack.id ]
			other_containers_var = GameObj.inv.find_all { |obj| other_containers_ids.include?(obj.id) }
		end
		other_containers_var
	}
	unless (right_hand.id.nil? and ([ Wounds.rightArm, Wounds.rightHand, Scars.rightArm, Scars.rightHand ].max < 3)) or (left_hand.id.nil? and ([ Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand ].max < 3))
		if right_hand.id and ((!XMLData.active_spells.keys.include?('Sonic Weapon Song') and !XMLData.active_spells.keys.include?('1012')) or ([ Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand ].max == 3)) and ([ Wounds.rightArm, Wounds.rightHand, Scars.rightArm, Scars.rightHand ].max < 3 or [ Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand ].max = 3)
			waitrt?
			if XMLData.active_spells.keys.include?('Sonic Weapon Song') or XMLData.active_spells.keys.include?('1012')
				type = right_hand.noun
				if (type == 'sword') and right_hand.name =~ /short/
					type = 'short'
				elsif (type.downcase == 'hammer') and right_hand.name =~ /Hammer of Kai/
					type = 'hammer of kai'
				end
				actions.unshift proc {
					if (sonic_weapon_song = Spell[1012]) and sonic_weapon_song.known? and sonic_weapon_song.affordable?
						sonic_weapon_song.cast(type)
					end
				}
				fput 'stop 1012'
			else
				actions.unshift proc {
					dothistimeout "get ##{right_hand.id}", 3, /^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
					20.times { break if GameObj.left_hand.id == right_hand.id or GameObj.right_hand.id == right_hand.id; sleep 0.1 }
					if GameObj.left_hand.id == right_hand.id
						dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
					end
				}
				if lootsack
					result = s_put_item(right_hand.id, lootsack.id) 
                    if result =~ /^You can't .+ It's closed!$/
						actions.push proc { fput "close ##{lootsack.id}" }
						dothistimeout "open ##{lootsack.id}", 3, /^You open|^That is already open\./
						result = s_put_item(right_hand.id, lootsack.id)
                    end
				else
					result = nil
				end
				if result.nil? or result =~ /^Your .*? won't fit in .*?\.$/
					for container in other_containers.call
						result = s_put_item(right_hand.id, container.id)
                        if result =~ /^You can't .+ It's closed!$/
							actions.push proc { fput "close ##{container.id}" }
							dothistimeout "open ##{container.id}", 3, /^You open|^That is already open\./
                            result = s_put_item(right_hand.id, container.id)	
                        end
						break if result =~ /^You (?:put|absent-mindedly drop|slip)/
					end
				end
			end
		else
			waitrt?
			if (left_hand.noun =~ /shield|buckler|targe|heater|parma|aegis|scutum|greatshield|mantlet|pavis|arbalest|bow|crossbow|yumi|arbalest/) and (wear_result = dothistimeout("wear ##{left_hand.id}", 8, /^You .*#{left_hand.noun}|^You can only wear \w+ items in that location\.$|^You can't wear that\.$/)) and (wear_result !~ /^You can only wear \w+ items in that location\.$|^You can't wear that\.$/)
				actions.unshift proc {
					dothistimeout "remove ##{left_hand.id}", 3, /^You|^Remove what\?/
					20.times { break if GameObj.left_hand.id == left_hand.id or GameObj.right_hand.id == left_hand.id; sleep 0.1 }
					if GameObj.right_hand.id == left_hand.id
						dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
					end
				}
			else
				actions.unshift proc {
					dothistimeout "get ##{left_hand.id}", 3, /^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
					20.times { break if GameObj.left_hand.id == left_hand.id or GameObj.right_hand.id == left_hand.id; sleep 0.1 }
					if GameObj.right_hand.id == left_hand.id
						dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
					end
				}
				if lootsack
                    result = s_put_item(left_hand.id, lootsack.id)
					if result =~ /^You can't .+ It's closed!$/
						actions.push proc { fput "close ##{lootsack.id}" }
						dothistimeout "open ##{lootsack.id}", 3, /^You open|^That is already open\./
						result = s_put_item(left_hand.id, lootsack.id)
                    end
				else
					result = nil
				end
				if result.nil? or result =~ /^Your .*? won't fit in .*?\.$/
					for container in other_containers.call
                        result = s_put_item(left_hand.id, container.id)
						if result =~ /^You can't .+ It's closed!$/
							actions.push proc { fput "close ##{container.id}" }
							dothistimeout "open ##{container.id}", 3, /^You open|^That is already open\./
							result = s_put_item(left_hand.id, container.id)
                        end
						break if result =~ /^You (?:put|absent-mindedly drop|slip)/
					end
				end
			end
		end
	end
	$fill_hand_actions.push(actions)
end

def empty_hands
	$fill_hands_actions ||= Array.new
	actions = Array.new
	right_hand = GameObj.right_hand
	left_hand = GameObj.left_hand
	if UserVars.lootsack.nil? or UserVars.lootsack.empty?
		lootsack = nil
	else
		lootsack = GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack.strip)}/i } || GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i }
	end
	other_containers_var = nil
	other_containers = proc {
		if other_containers_var.nil?
			Script.current.want_downstream = false
			Script.current.want_downstream_xml = true
			result = dothistimeout 'inventory containers', 5, /^You are wearing/
			Script.current.want_downstream_xml = false
			Script.current.want_downstream = true
			other_containers_ids = result.scan(/exist="(.*?)"/).flatten - [ lootsack.id ]
			other_containers_var = GameObj.inv.find_all { |obj| other_containers_ids.include?(obj.id) }
		end
		other_containers_var
	}
	if left_hand.id
		waitrt?
		if (left_hand.noun =~ /shield|buckler|targe|heater|parma|aegis|scutum|greatshield|mantlet|pavis|arbalest|bow|crossbow|yumi|arbalest/) and (wear_result = dothistimeout("wear ##{left_hand.id}", 8, /^You .*#{left_hand.noun}|^You can only wear \w+ items in that location\.$|^You can't wear that\.$/)) and (wear_result !~ /^You can only wear \w+ items in that location\.$|^You can't wear that\.$/)
			actions.unshift proc {
				dothistimeout "remove ##{left_hand.id}", 3, /^You|^Remove what\?/
				20.times { break if GameObj.left_hand.id == left_hand.id or GameObj.right_hand.id == left_hand.id; sleep 0.1 }
				if GameObj.right_hand.id == left_hand.id
					dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
				end
			}
		else
			actions.unshift proc {
				dothistimeout "get ##{left_hand.id}", 3, /^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
				20.times { break if (GameObj.left_hand.id == left_hand.id) or (GameObj.right_hand.id == left_hand.id); sleep 0.1 }
				if GameObj.right_hand.id == left_hand.id
					dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
				end
			}
			if lootsack
				result = s_put_item(left_hand.id, lootsack.id)
                if result =~ /^You can't .+ It's closed!$/
					actions.push proc { fput "close ##{lootsack.id}" }
					dothistimeout "open ##{lootsack.id}", 3, /^You open|^That is already open\./
					result = s_put_item(left_hand.id, lootsack.id)
                end
			else
				result = nil
			end
			if result.nil? or result =~ /^Your .*? won't fit in .*?\.$/
				for container in other_containers.call
                    result = s_put_item(left_hand.id, container.id)
					if result =~ /^You can't .+ It's closed!$/
						actions.push proc { fput "close ##{container.id}" }
						dothistimeout "open ##{container.id}", 3, /^You open|^That is already open\./
						result = s_put_item(left_hand.id, container.id)
                    end
					break if result =~ /^You (?:put|absent-mindedly drop|slip)/
				end
			end
		end
	end
	if right_hand.id
		waitrt?
		if XMLData.active_spells.keys.include?('Sonic Weapon Song') or XMLData.active_spells.keys.include?('1012')
			type = right_hand.noun
			if (type == 'sword') and right_hand.name =~ /short/
				type = 'short'
			elsif (type.downcase == 'hammer') and right_hand.name =~ /Hammer of Kai/
				type = 'hammer of kai'
			end
			actions.unshift proc {
				if (sonic_weapon_song = Spell[1012]) and sonic_weapon_song.known? and sonic_weapon_song.affordable?
					sonic_weapon_song.cast(type)
				end
			}
			fput 'stop 1012'
		else
			actions.unshift proc {
				dothistimeout "get ##{right_hand.id}", 3, /^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
				20.times { break if GameObj.left_hand.id == right_hand.id or GameObj.right_hand.id == right_hand.id; sleep 0.1 }
				if GameObj.left_hand.id == right_hand.id
					dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
				end
			}
			if lootsack
				result = s_put_item(right_hand.id, lootsack.id)
                if result =~ /^You can't .+ It's closed!$/
					actions.push proc { fput "close ##{lootsack.id}" }
					dothistimeout "open ##{lootsack.id}", 3, /^You open|^That is already open\./
					result = s_put_item(right_hand.id, lootsack.id)
                end
			else
				result = nil
			end
			if result.nil? or result =~ /^Your .*? won't fit in .*?\.$/
				for container in other_containers.call
					result = s_put_item(right_hand.id, container.id)
                    if result =~ /^You can't .+ It's closed!$/
						actions.push proc { fput "close ##{container.id}" }
						dothistimeout "open ##{container.id}", 3, /^You open|^That is already open\./
						result = s_put_item(left_hand.id, container.id)					
                    end
					break if result =~ /^You (?:put|absent-mindedly drop|slip)/
				end
			end
		end
	end
	$fill_hands_actions.push(actions)
end

def empty_left_hand
    $fill_left_hand_actions ||= Array.new
	actions = Array.new
	left_hand = GameObj.left_hand
	if UserVars.lootsack.nil? or UserVars.lootsack.empty?
		lootsack = nil
	else
		lootsack = GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack.strip)}/i } || GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i }
	end
	other_containers_var = nil
	other_containers = proc {
		if other_containers_var.nil?
			Script.current.want_downstream = false
			Script.current.want_downstream_xml = true
			result = dothistimeout 'inventory containers', 5, /^You are wearing/
			Script.current.want_downstream_xml = false
			Script.current.want_downstream = true
			other_containers_ids = result.scan(/exist="(.*?)"/).flatten - [ lootsack.id ]
			other_containers_var = GameObj.inv.find_all { |obj| other_containers_ids.include?(obj.id) }
		end
		other_containers_var
	}
	if left_hand.id
		waitrt?
		if (left_hand.noun =~ /shield|buckler|targe|heater|parma|aegis|scutum|greatshield|mantlet|pavis|arbalest|bow|crossbow|yumi|arbalest/) and (wear_result = dothistimeout("wear ##{left_hand.id}", 8, /^You .*#{left_hand.noun}|^You can only wear \w+ items in that location\.$|^You can't wear that\.$/)) and (wear_result !~ /^You can only wear \w+ items in that location\.$|^You can't wear that\.$/)
			actions.unshift proc {
				dothistimeout "remove ##{left_hand.id}", 3, /^You|^Remove what\?/
				20.times { break if GameObj.left_hand.id == left_hand.id or GameObj.right_hand.id == left_hand.id; sleep 0.1 }
				if GameObj.right_hand.id == left_hand.id
					dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
				end
			}
		else
			actions.unshift proc {
				dothistimeout "get ##{left_hand.id}", 3, /^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
				20.times { break if GameObj.left_hand.id == left_hand.id or GameObj.right_hand.id == left_hand.id; sleep 0.1 }
				if GameObj.right_hand.id == left_hand.id
					dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
				end
			}
			if lootsack
				result = s_put_item(left_hand.id, lootsack.id)
                if result =~ /^You can't .+ It's closed!$/
					actions.push proc { fput "close ##{lootsack.id}" }
					dothistimeout "open ##{lootsack.id}", 3, /^You open|^That is already open\./
					result = s_put_item(left_hand.id, lootsack.id)
				end
			else
				result = nil
			end
			if result.nil? or result =~ /^Your .*? won't fit in .*?\.$/
				for container in other_containers.call
					result = s_put_item(left_hand.id, container.id)
                    if result =~ /^You can't .+ It's closed!$/
						actions.push proc { fput "close ##{container.id}" }
						dothistimeout "open ##{container.id}", 3, /^You open|^That is already open\./
                        result = s_put_item(left_hand.id, container.id)
                    end
					break if result =~ /^You (?:put|absent-mindedly drop|slip)/
				end
			end
		end
	end
	$fill_left_hand_actions.push(actions)
end

def empty_right_hand    
	$fill_right_hand_actions ||= Array.new
	actions = Array.new
	right_hand = GameObj.right_hand
	if UserVars.lootsack.nil? or UserVars.lootsack.empty?
		lootsack = nil
	else
		lootsack = GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack.strip)}/i } || GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i }
	end
	other_containers_var = nil
	other_containers = proc {
		if other_containers_var.nil?
			Script.current.want_downstream = false
			Script.current.want_downstream_xml = true
			result = dothistimeout 'inventory containers', 5, /^You are wearing/
			Script.current.want_downstream_xml = false
			Script.current.want_downstream = true
			other_containers_ids = result.scan(/exist="(.*?)"/).flatten - [ lootsack.id ]
			other_containers_var = GameObj.inv.find_all { |obj| other_containers_ids.include?(obj.id) }
		end
		other_containers_var
	}
	if right_hand.id
		waitrt?
		if XMLData.active_spells.keys.include?('Sonic Weapon Song') or XMLData.active_spells.keys.include?('1012')
			type = right_hand.noun
			if (type == 'sword') and right_hand.name =~ /short/
				type = 'short'
			elsif (type.downcase == 'hammer') and right_hand.name =~ /Hammer of Kai/
				type = 'hammer of kai'
			end
			actions.unshift proc {
				if (sonic_weapon_song = Spell[1012]) and sonic_weapon_song.known? and sonic_weapon_song.affordable?
					sonic_weapon_song.cast(type)
				end
			}
			fput 'stop 1012'
		else
			actions.unshift proc {
				dothistimeout "get ##{right_hand.id}", 3, /^You (?:shield the opening of .*? from view as you |discreetly |carefully )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand/
				20.times { break if GameObj.left_hand.id == right_hand.id or GameObj.right_hand.id == right_hand.id; sleep 0.1 }
				if GameObj.left_hand.id == right_hand.id
					dothistimeout 'swap', 3, /^You don't have anything to swap!|^You swap/
				end
			}
			if lootsack
				result = s_put_item(right_hand.id, lootsack.id)
                if result =~ /^You can't .+ It's closed!$/
					actions.push proc { fput "close ##{lootsack.id}" }
					dothistimeout "open ##{lootsack.id}", 3, /^You open|^That is already open\./
					result = s_put_item(right_hand.id, lootsack.id)
				end
			else
				result = nil
			end
			if result.nil? or result =~ /^Your .*? won't fit in .*?\.$/
				for container in other_containers.call
					result = s_put_item(right_hand.id, container.id)
                    if result =~ /^You can't .+ It's closed!$/
						actions.push proc { fput "close ##{container.id}" }
						dothistimeout "open ##{container.id}", 3, /^You open|^That is already open\./
						result = s_put_item(right_hand.id, container.id)
					end
					break if result =~ /^You (?:put|absent-mindedly drop|slip)/
				end
			end
		end
	end
	$fill_right_hand_actions.push(actions)
end

def move(dir='none', giveup_seconds=30, giveup_lines=30)
	#[LNet]-[Private]-Casis: "You begin to make your way up the steep headland pathway.  Before traveling very far, however, you lose your footing on the loose stones.  You struggle in vain to maintain your balance, then find yourself falling to the bay below!"  (20:35:36)
	#[LNet]-[Private]-Casis: "You smack into the water with a splash and sink far below the surface."  (20:35:50)
	# You approach the entrance and identify yourself to the guard.  The guard checks over a long scroll of names and says, "I'm sorry, the Guild is open to invitees only.  Please do return at a later date when we will be open to the public."
	if dir == 'none'
		echo 'move: no direction given'
		return false
	end
    
    if dir =~ /climb|swim/ and Spell['Sigil of Resolve'].known? and Spell['Sigil of Resolve'].affordable? and not Spell['Sigil of Resolve'].active?
        Spell['Sigil of Resolve'].cast
    end

	need_full_hands = false
	tried_open = false
	tried_fix_drag = false
	line_count = 0
	room_count = XMLData.room_count
	giveup_time = Time.now.to_i + giveup_seconds.to_i
	save_stream = Array.new

	put_dir = proc {
		if XMLData.room_count > room_count
			fill_hands if need_full_hands
			Script.current.downstream_buffer.unshift(save_stream)
			Script.current.downstream_buffer.flatten!
			return true
		end
		waitrt?
		wait_while { stunned? }
		giveup_time = Time.now.to_i + giveup_seconds.to_i
		line_count = 0
		save_stream.push(clear)
		put dir
	}

	put_dir.call

	loop {
		line = get?
		unless line.nil?
			save_stream.push(line)
			line_count += 1
		end
		if line.nil?
			sleep 0.1
		elsif line =~ /^You can't do that while engaged!|^You are engaged to /
			# DragonRealms
			fput 'retreat'
			fput 'retreat'
			put_dir.call
		elsif line =~ /^You can't enter .+ and remain hidden or invisible\.|if he can't see you!$|^You can't enter .+ when you can't be seen\.$|^You can't do that without being seen\.$|^How do you intend to get .*? attention\?  After all, no one can see you right now\.$/
			fput 'unhide'
			put_dir.call
		elsif (line =~ /^You (?:take a few steps toward|trudge up to|limp towards|march up to|sashay gracefully up to|skip happily towards|sneak up to|stumble toward) a rusty doorknob/) and (dir =~ /door/)
			which = [ 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eight', 'ninth', 'tenth', 'eleventh', 'twelfth' ]
			if dir =~ /\b#{which.join('|')}\b/
				dir.sub!(/\b(#{which.join('|')})\b/) { "#{which[which.index($1)+1]}" }
			else
				dir.sub!('door', 'second door')
			end
			put_dir.call
		elsif line =~ /^You can't go there|^You can't (?:go|swim) in that direction\.|^Where are you trying to go\?|^What were you referring to\?|^I could not find what you were referring to\.|^How do you plan to do that here\?|^You take a few steps towards|^You cannot do that\.|^You settle yourself on|^You shouldn't annoy|^You can't go to|^That's probably not a very good idea|^You can't do that|^Maybe you should look|^You are already|^You walk over to|^You step over to|The [\w\s]+ is too far away|You may not pass\.|become impassable\.|prevents you from entering\.|Please leave promptly\.|is too far above you to attempt that\.$|^Uh, yeah\.  Right\.$|^Definitely NOT a good idea\.$|^Your attempt fails|^There doesn't seem to be any way to do that at the moment\.$/
			echo 'move: failed'
			fill_hands if need_full_hands
			Script.current.downstream_buffer.unshift(save_stream)
			Script.current.downstream_buffer.flatten!
			return false
		elsif line =~ /^An unseen force prevents you\.$|^Sorry, you aren't allowed to enter here\.|^That looks like someplace only performers should go\.|^As you climb, your grip gives way and you fall down|^The clerk stops you from entering the partition and says, "I'll need to see your ticket!"$|^The guard stops you, saying, "Only members of registered groups may enter the Meeting Hall\.  If you'd like to visit, ask a group officer for a guest pass\."$|^An? .*? reaches over and grasps [A-Z][a-z]+ by the neck preventing (?:him|her) from being dragged anywhere\.$|^You'll have to wait, [A-Z][a-z]+ .* locker|^As you move toward the gate, you carelessly bump into the guard|^You attempt to enter the back of the shop, but a clerk stops you.  "Your reputation precedes you!/
			echo 'move: failed'
			fill_hands if need_full_hands
			Script.current.downstream_buffer.unshift(save_stream)
			Script.current.downstream_buffer.flatten!
			# return nil instead of false to show the direction shouldn't be removed from the map database
			return nil
		elsif line =~ /^You grab [A-Z][a-z]+ and try to drag h(?:im|er), but s?he (?:is too heavy|doesn't budge)\.$|^Tentatively, you attempt to swim through the nook\.  After only a few feet, you begin to sink!  Your lungs burn from lack of air, and you begin to panic!  You frantically paddle back to safety!$|^Guards(?:wo)?man [A-Z][a-z]+ stops you and says, "(?:Stop\.|Halt!)  You need to make sure you check in|^You step into the root, but can see no way to climb the slippery tendrils inside\.  After a moment, you step back out\.$|^As you start .*? back to safe ground\.$|^You stumble a bit as you try to enter the pool but feel that your persistence will pay off\.$|^A shimmering field of magical crimson and gold energy flows through the area\.$/
			sleep 1
			waitrt?
			put_dir.call
		elsif line =~ /^Climbing.*(?:plunge|fall)|^Tentatively, you attempt to climb.*(?:fall|slip)|^You start.*but quickly realize|^You.*drop back to the ground|^You leap .* fall unceremoniously to the ground in a heap\.$|^You search for a way to make the climb .*? but without success\.$|^You start to climb .* you fall to the ground|^You attempt to climb .* wrong approach|^You run towards .*? slowly retreat back, reassessing the situation\./
			sleep 1
			waitrt?
			fput 'stand' unless standing?
			waitrt?
			put_dir.call
		elsif line =~ /^You begin to climb up the silvery thread.* you tumble to the ground/
			sleep 0.5
			waitrt?
			fput 'stand' unless standing?
			waitrt?
			if checkleft or checkright
				need_full_hands = true
				empty_hands
			end
			put_dir.call
		elsif line == 'You are too injured to be doing any climbing!'
			if (resolve = Spell[9704]) and resolve.known?
				wait_until { resolve.affordable? }
				resove.cast
				put_dir.call
			else
				return nil
			end
		elsif line =~ /^You(?:'re going to| will) have to climb that\./
			dir.gsub!('go', 'climb')
			put_dir.call
		elsif line =~ /^You can't climb that\./
			dir.gsub!('climb', 'go')
			put_dir.call
		elsif line =~ /^You can't drag/
			if tried_fix_drag
				fill_hands if need_full_hands
				Script.current.downstream_buffer.unshift(save_stream)
				Script.current.downstream_buffer.flatten!
				return false
			elsif (dir =~ /^(?:go|climb) .+$/) and (drag_line = reget.reverse.find { |l| l =~ /^You grab .*?(?:'s body)? and drag|^You are now automatically attempting to drag .*? when/ })
				tried_fix_drag = true
				name = (/^You grab (.*?)('s body)? and drag/.match(drag_line).captures.first || /^You are now automatically attempting to drag (.*?) when/.match(drag_line).captures.first)
				target = /^(?:go|climb) (.+)$/.match(dir).captures.first
				fput "drag #{name}"
				dir = "drag #{name} #{target}"
				put_dir.call
			else
				tried_fix_drag = true
				dir.sub!(/^climb /, 'go ')
				put_dir.call
			end
		elsif line =~ /^Maybe if your hands were empty|^You figure freeing up both hands might help\.|^You can't .+ with your hands full\.$|^You'll need empty hands to climb that\.$|^It's a bit too difficult to swim holding|^You will need both hands free for such a difficult task\./
			need_full_hands = true
			empty_hands
			put_dir.call
		elsif line =~ /(?:appears|seems) to be closed\.$|^You cannot quite manage to squeeze between the stone doors\.$/
			if tried_open
				fill_hands if need_full_hands
				Script.current.downstream_buffer.unshift(save_stream)
				Script.current.downstream_buffer.flatten!
				return false
			else
				tried_open = true
				fput dir.sub(/go|climb/, 'open')
				put_dir.call
			end
		elsif line =~ /^(\.\.\.w|W)ait ([0-9]+) sec(onds)?\.$/
			if $2.to_i > 1
				sleep ($2.to_i - "0.2".to_f)
			else
				sleep 0.3
			end
			put_dir.call
		elsif line =~ /will have to stand up first|must be standing first|^You'll have to get up first|^But you're already sitting!|^Shouldn't you be standing first|^Try standing up|^Perhaps you should stand up|^Standing up might help|^You should really stand up first/
			fput 'stand'
			waitrt?
			put_dir.call
		elsif line =~ /^Sorry, you may only type ahead/
			sleep 1
			put_dir.call
		elsif line == 'You are still stunned.'
			wait_while { stunned? }
			put_dir.call
		elsif line =~ /you slip (?:on a patch of ice )?and flail uselessly as you land on your rear(?:\.|!)$|You wobble and stumble only for a moment before landing flat on your face!$/
			waitrt?
			fput 'stand' unless standing?
			waitrt?
			put_dir.call
		elsif line =~ /^You flick your hand (?:up|down)wards and focus your aura on your disk, but your disk only wobbles briefly\.$/
			put_dir.call
		elsif line =~ /^You dive into the fast-moving river, but the current catches you and whips you back to shore, wet and battered\.$/
			waitrt?
			put_dir.call
		elsif line == "You don't seem to be able to move to do that."
			30.times { 
				break if clear.include?('You regain control of your senses!')
				sleep 0.1
			}
			put_dir.call
		end
		if XMLData.room_count > room_count
			fill_hands if need_full_hands
			Script.current.downstream_buffer.unshift(save_stream)
			Script.current.downstream_buffer.flatten!
			return true
		end
		if Time.now.to_i >= giveup_time
			echo "move: no recognized response in #{giveup_seconds} seconds.  giving up."
			fill_hands if need_full_hands
			Script.current.downstream_buffer.unshift(save_stream)
			Script.current.downstream_buffer.flatten!
			return nil
		end
		if line_count >= giveup_lines
			echo "move: no recognized response after #{line_count} lines.  giving up."
			fill_hands if need_full_hands
			Script.current.downstream_buffer.unshift(save_stream)
			Script.current.downstream_buffer.flatten!
			return nil
		end
	}
end