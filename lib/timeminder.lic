=begin

	author: Vailan
	tags: time,invoker,spells
	version: 2023.7.25.1
	
	This utility is simply watching for time ot be called and calculating the estimated time for the next invoker in the Landing and
	how much time before it occurs.
	
	It will also look at the average of time left on your invoker supplied spells and warn you if they have less time than that left.
	
	And if your spells appear to be expiring between next invoker and the following one it will warn of that too
	
	If recent versions of ;keepalive are in use they call 'time' as part of their process so this will see those and respond accordingly.
	This is typically run automatically per character using:
	';autostart add timeminder' per character
	or can be added globally using:
	';autostart --global add timeminder'
	
	Check out ;timeminder help
	
	2023.05.05		- Draft Edition of the TimeMinder
	2023.07.21		- Removed bold for missing spells
	2023.07.25    - Added Indication of if invoker is currently present and how much longer
	
=end


def checkSpells(nextHours,nextMinutes,followingHours,followingMinutes)
	 watchedSpells = Array.[]("101","104","105","107","112","401","406","414","503","509","601","602","618","911","1204","1208")
	 totalDuration = 0
	 missingList = ""
	 watchedSpells.each do |watchedSpell|
	 	spellFound = false
	 	Spell.active.each do |spell|
	 	#echo "#{watchedSpell} #{spell.num}"
			if watchedSpell.to_i == spell.num.to_i
		 		spellFound = true
		 		totalDuration += spell.timeleft
		 		#echo "#{watchedSpell} #{spell.num} (#{spell.name} #{spell.timeleft})"
		 			
		 	end
		 
		end
		if not spellFound
			#echo "Watched Spell #{watchedSpell} active"
			alertInfo = "Watched Spell #{watchedSpell} not active"
			puts "<output class=\"mono\"/>#{alertInfo}\r\n<output class=\"\"/>"
		end
	end
	averageTime = (totalDuration/watchedSpells.count).to_i
	#echo averageTime
	#echo "Average Time Left #{(averageTime / 60).to_i}h:#{((averageTime % 60)).to_i}m"
	if averageTime < nextHours * 60 + nextMinutes
		#echo "*** Warning Spells Expiring before next Invoker (Ave Time remaining = #{(averageTime / 60).to_i}h:#{((averageTime % 60)).to_i}m) ***"
		alertInfo = "*** Warning Spells Expiring before next Invoker (Ave Time remaining = #{(averageTime / 60).to_i}h:#{((averageTime % 60)).to_i}m) ***"
		puts "<output class=\"mono\"/>#{monsterbold_start}#{alertInfo}#{monsterbold_end}\r\n<output class=\"\"/>"
	
	elsif averageTime < followingHours * 60 + followingMinutes
		#echo "*** Warning Spells Expiring before next Invoker (Ave Time remaining = #{(averageTime / 60).to_i}h:#{((averageTime % 60)).to_i}m) ***"
		alertInfo = "*** Caution Spells Expiring after next invoker but before the following one (Ave Time remaining = #{(averageTime / 60).to_i}h:#{((averageTime % 60)).to_i}m) ***"
		puts "<output class=\"mono\"/>#{alertInfo}\r\n<output class=\"\"/>"
	
	end

end


def watchForTime
	dayofweek, dayofmonth, monthofyear, yearnumber, timeofday, appearanceoftime =  matchfind "Today is ?, day ? of the month ? in the year ?.  It is ? by the elven time standard.  It is currently ?."
	#echo "dayofweek=#{dayofweek}"
	#echo "monthofyear=#{monthofyear}"
	#echo "yearnumber=#{yearnumber}"
	#echo "timeofday=#{timeofday}"
	#echo "appearanceoftime=#{appearanceoftime}"
	calcofcurrenttime=#{DateTime.parse(timeofday).strftime("%H:%M")
	#echo "calcofcurrenttime=#{calcofcurrenttime}"

	#invokerTimes array can be updated if the schedule changes
	invokerTimes = Array.[]("22:01","20:01","18:01","14:01", "10:01", "08:01", "06:01", "02:01","00:01")
	nextInvokerTime = DateTime.parse("00:00")
	followingInvokerTime = DateTime.parse("00:01")
	priorInvokerTime = DateTime.parse("23:59")
	for timeEntry in invokerTimes
		if DateTime.parse(timeofday)<DateTime.parse(timeEntry)
			#echo "#{nextInvokerTime}=#{timeEntry}"
			followingInvokerTime=nextInvokerTime
			nextInvokerTime=DateTime.parse(timeEntry)
			
		else 
			if priorInvokerTime == DateTime.parse("23:59")
				priorInvokerTime = DateTime.parse(timeEntry)
			end
			
		end
	end
	#echo "Next Invoker @#{nextInvokerTime}"
	#echo "Following Invoker @#{followingInvokerTime}"
	nextTimeDifference = ((nextInvokerTime- DateTime.parse(timeofday))* 24 * 60 * 60).to_i
	if nextTimeDifference < 0 
		nextTimeDifference += 60*60*24
	end
	nextHours = (nextTimeDifference / 3600).to_i
	if nextHours < 0
		nextTimeDifference += 24 *60*60
	end
  nextMinutes = ((nextTimeDifference % 3600) / 60).to_i
  
	followingTimeDifference = ((followingInvokerTime - DateTime.parse(timeofday))* 24 * 60 * 60).to_i
	if followingTimeDifference < 0 
		followingTimeDifference += 60*60*24
	end
	followingHours = (followingTimeDifference / 3600).to_i
	if followingHours < 0
		followingTimeDifference += 24 *60*60
	end
  followingMinutes = ((followingTimeDifference % 3600) / 60).to_i
	
	#Logic to see how long ago last invoker was
	priorTimeDifference = ((DateTime.parse(timeofday)-priorInvokerTime)* 24 * 60 * 60).to_i
	#echo priorTimeDifference
	if priorTimeDifference < 0 
		priorTimeDifference += 60*60*24
	end
	priorHours = (priorTimeDifference / 3600).to_i
	if priorHours < 0
		priorTimeDifference += 24 *60*60
	end
  priorMinutes = ((priorTimeDifference % 3600) / 60).to_i
	#echo "Prior Hours= #{priorHours}"
	#echo "Prior Minutes= #{priorMinutes}"
	
	#Countdown to next Invoker
	#echo nextTimeDifference
	if (nextTimeDifference / 3600).to_i ==0 and ((nextTimeDifference % 3600) / 60).to_i <= 15
	
		if (nextTimeDifference / 3600).to_i ==0 and ((nextTimeDifference % 3600) / 60).to_i <= 10
		
			if (nextTimeDifference / 3600).to_i ==0 and ((nextTimeDifference % 3600) / 60).to_i <= 5
				echo "*** 5 Minute Warning ***"
			else 
				echo "*** 10 Minute Warning ***"
			end
		
		else 
			echo "*** 15 Minute Warning ***"
			
		end
		
	else 
		
	end
	
	#Time left for current invoker
	#echo nextTimeDifference
	if priorHours ==0 and priorMinutes <= 15
	
		puts "<output class=\"mono\"/>#{monsterbold_start}Current Invoker here for #{(15 - priorMinutes).to_s} more minutes.#{monsterbold_end}\r\n<output class=\"\"/>"
	
				
	else 
		
	end
	
	alertInfo = "Next Invoker is at #{nextInvokerTime.strftime("%H:%M")} EST which is in #{(nextTimeDifference / 3600).to_i}h:#{((nextTimeDifference % 3600) / 60).to_i}m"
	puts "<output class=\"mono\"/>#{monsterbold_start}#{alertInfo}#{monsterbold_end}\r\n<output class=\"\"/>"
	checkSpells(nextHours,nextMinutes,followingHours,followingMinutes)
	#at Midnight, 2:01 am, 4:01 am, 6:01 am, and 10:01 am
	#and 2:01 pm, 6:01 pm, 8:01 pm, and 10:01 pm
	
end

def showHelp
puts "<output class=\"mono\"/>#{monsterbold_start}#{"TimeMinder Help"}#{monsterbold_end}\r\n<output class=\"\"/>"
puts "<output class=\"mono\"/>#{monsterbold_start}This is typically run automatically per character using#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}';autostart add timeminder' per character#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}or can be added globally using#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}';autostart --global add timeminder'#{monsterbold_end}\r\n<output class=\"\"/>" 

puts "<output class=\"mono\"/>#{monsterbold_start}#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}While this is running, whenever the 'time' command is called this will report how much time until the next invoker as well as annouce if your current invoker supplied spells are missing and/or will on average last until the next invoker#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}Additonally, this will look to see if your average time on invokers spells will expire between the next invoker session and the one following it and caution you if so#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}This will also flag with 15, 10 and 5 minute warnings before next invoker visit scheduled as shown below#{monsterbold_end}\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>*** 15 Minute Warning ***\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>*** 10 Minute Warning ***\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>*** 5 Minute Warning ***\r\n<output class=\"\"/>" 
puts "<output class=\"mono\"/>#{monsterbold_start}#{monsterbold_end}\r\n<output class=\"\"/>" 



end

if variable[0] =~ /help|info|h/i
	showHelp
	exit
end
loop{
		#Check Time and report when closeto 
		watchForTime
		sleep 0.2
		
	}