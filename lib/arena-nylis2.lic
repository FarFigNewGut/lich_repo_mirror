#arena-nylis2
#author: Nylis
#Now with more elegance.  You still need to read the comments.
#you must monitor this script because it still hangs every once
#in a while.  manually killing the current opponent will sort
#things out.  i highly recommend that you set combatbrief on
#and set stormfront to ignore repetitive messaging once you feel
#confident that things are running smoothly.  with the amount of
#screen scroll it would be entirely possible to fail a script
#check while at the keyboard

#run the script and then walk into the entrance for the arena
#the script will run the arena repeatedly thereafter


#handles regular opponents - no modifications needed

def regular()

	waitrt?
	fput "watch"
	line = waitfor "...wait", "cannot concentrate well enough", "You are still stunned", "back pedal", "bob back and forth", "lean out of the way", "try to duck down", "roll out of the way", "prepare to jump", "doesn't appear to be up to anything", "looking for any untoward activities", "You've already spotted", "watching your every move"
	if(line =~ /back pedal/)
		waitrt?
		fput "pedal"
		killregular()
	end
	if(line =~ /bob back and forth/)
		waitrt?
		fput "bob"
		killregular()
	end
	if(line =~ /lean out of the way/)
		waitrt?
		fput "lean"
		killregular()
	end
	if(line =~ /try to duck down/)
		waitrt?
		fput "duck"
		killregular()
	end
	if(line =~ /roll out of the way/)
		waitrt?
		fput "roll"
		killregular()
	end
	if(line =~ /prepare to jump/)
		waitrt?
		fput "jump"
		killregular()
	end
	if(line =~ /You've already spotted|doesn't appear to be up to anything|watching your every move|cannot concentrate well enough/)
		waitrt?
		killregular()
	end
	if(line =~ /...wait|You are still stunned/)
		sleep 1
		regular()
	end
end


#kills regular opponents - i do not use a standard haste script
#you can set up your haste script however you like.  if you do
#not use haste comment it out or else remove it entirely.
#the kill script is available on the repository. or just add
#whatever kill script suits you

def killregular()

if !Spell[506].active 
	start_script("haste")
	wait_while {running?("haste")}
	waitcastrt?
end
start_script("universalkill-nylis2")
wait_while {running?("universalkill-nylis2")}
waitrt?
regular()

end


#handles champions - no modifications needed

def champion()

	waitrt?
	fput "watch"
	line = waitfor "...wait", "cannot concentrate well enough", "You are still stunned", "back pedal", "bob back and forth", "lean out of the way", "try to duck down", "roll out of the way", "prepare to jump", "doesn't appear to be up to anything", "looking for any untoward activities", "You've already spotted", "watching your every move"
	if(line =~ /back pedal/)
		waitrt?
		fput "pedal"
		killchampion()
	end
	if(line =~ /bob back and forth/)
		waitrt?
		fput "bob"
		killchampion()
	end
	if(line =~ /lean out of the way/)
		waitrt?
		fput "lean"
		killchampion()
	end
	if(line =~ /try to duck down/)
		waitrt?
		fput "duck"
		killchampion()
	end
	if(line =~ /roll out of the way/)
		waitrt?
		fput "roll"
		killchampion()
	end
	if(line =~ /prepare to jump/)
		waitrt?
		fput "jump"
		killchampion()
	end
	if(line =~ /You've already spotted|doesn't appear to be up to anything|watching your every move|cannot concentrate well enough/)
		waitrt?
		killchampion()
	end
	if(line =~ /...wait|You are still stunned/)
		sleep 1
		champion()
	end
end


#kills champions - i do not use a standard haste script
#you can set up your haste script however you like.  if you do
#not use haste comment it out or else remove it entirely.
#the kill script is available on the repository. or just add
#whatever kill script suits you.  note that for me, this is the
#same as the procedured to kill regular opponents.  you may want
#to use a different routine for champions.

def killchampion()

if !Spell[506].active 
	start_script("haste")
	wait_while {running?("haste")}
	waitcastrt?
end
start_script("universalkill-nylis2")
wait_while {running?("universalkill-nylis2")}
waitrt?
champion()

end


#handles the loot - your lich lootsack must contain arena slips 
#bloodscrip, and be the primary recepticle for your arena drops
#there is no mechanism for handling when your lootsack is full
#so keep an eye on things.  you must change the portion of the
#script that deals with putting away your weapon in order to 
#bundle your bloodscrip. you must have the current version of
#the mapdb in order for the script to return you to the entrance

def loot()

	fput "put my lance in my longcoat"
	sleep 2
	fput "open my package"
	sleep 2
	fput "empty my package into my #{Lich.lootsack}"
	waitrt?
	sleep 2
	fput "get my bloodscrip from my package"
	sleep 2
	fput "drop my package"
	sleep 2
	fput "get my bloodscrip from my #{Lich.lootsack}"
	sleep 2
	fput "bundle"
	sleep 2
	fput "put my bloodscrip in my #{Lich.lootsack}"
	sleep 2
	fput "get my lance"
	sleep 2
	fput "get my slip from my #{Lich.lootsack}"
	sleep 2
	start_script("go2", ["node"])
	wait_while {running?("go2")}
	fput "go entrance"

end


#the primary loop for the script - insert your name in place of
#mine

silence_me

loop {
line = waitfor "Send in a champion", "Send in another one", "FIGHT!", "Here are your winnings, Nylis."
if(line =~ /Send in another one|FIGHT!/)
	regular()
end
if(line =~ /Send in a champion/)
	champion()
end
if(line =~ /Here are your winnings, Nylis./)
	loot()
end
}
