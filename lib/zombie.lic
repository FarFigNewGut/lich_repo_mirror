=begin

	Death recovery

	This script has two modes.  If started with no command line, it will run in the
	background and wait for you to die.  When you die, it kills all your running
	scripts and waits for you to be alive again (either by decaying, or being raised
	by a cleric, or if you're dragged to the npc cleric it will ask for a raise).
	Once you're alive, if you have death's sting it will find the priestess, and buy
	potions to remove the sting.  After that, it will start any scripts you specify
	and wait for you to die again.

	If you die before the script is able to finish buying death sting potions and
	start your scripts, or if you fall to the minimum-deeds setting, the script will
	log you off.

	If the script is started with ";zombie once", it will just buy and drink enough
	potions to get rid of your death's sting and exit.

	;zombie help

	author: Tillmen (tillmen@lichproject.org)
	game: Gemstone
	tags: death

=end

priestess_wander_boundaries = Array.new
bank_list = Array.new

# Teras
priestess_wander_boundaries.concat [ '1991', '1958', '12511', '1952', '12574', '12514', '12515', '12532', '12534', '14700', '12535', '1930', '3357', '1934', '12538', '1900', '1902', '1922', '1884', '1838', '12543', '1979', '12545', '1968', '2260', '1966', '1844', '1842', '1863', '1881', '1851', '12452', '12422', '12447', '1856', '14819', '12451', '12469', '1860', '17253', '12492', '12470', '12383', '12420', '12414', '12397', '12413', '14815', '12352', '1871', '12790' ]
bank_list.push 1838

# Solhaven
priestess_wander_boundaries.concat [ '9396', '1426', '1273', '13974', '152', '5717', '12800', '5722', '12808', '5719', '9055', '5395', '1450', '9063', '629', '1608', '4416', '4614', '4628', '3782', '3903', '3749', '12813', '12812', '5713', '9065', '13490', '12811', '9066', '13488', '9056', '5710', '12815', '13238', '13054', '5398', '17380', '5689', '5711', '9294', '12809', '12818', '9295', '13174', '9062', '12819', '13515', '9296', '13512', '13513', '13193', '13252', '13261', '13188', '13225', '13226', '13187', '13172', '13175', '12798', '6102', '7852', '13322', '13321', '4622', '4623', '4624', '4625', '4619', '12825', '12827', '13314', '13298', '4620', '4621', '12844', '4583', '13478', '13479', '12848', '14374', '14234', '10114', '14238', '13208', '13476', '12862', '13351', '13475', '10113', '10301', '13351', '10300', '13363', '13473', '13474', '9310', '10064', '9305', '9304', '13367', '9303', '9302', '13435', '13472', '17425', '13006', '624', '13250', '13237', '13227' ]
bank_list.push 5710

# Ta'Illistim
priestess_wander_boundaries.concat [ '41', '3747', '3745', '634', '1439', '596', '1771', '1772', '1773', '2175', '3728', '3556', '3555', '3560', '3546', '13319', '13323', '13231', '17841', '13255', '13047', '13254', '13247', '13240', '12', '640', '4038', '13297', '751', '6', '9', '644', '13352', '1780', '644', '13307', '13364', '13365', '13366', '18136', '4026', '4025', '13311', '4024', '4019', '4017', '18136', '4020', '4022', '641', '13350' ]
bank_list.push 11

# River's Rest
priestess_wander_boundaries.concat [ '17723', '18373', '10897', '10887', '10838', '11006', '10939', '10934', '10935', '10937', '10940', '10941', '10943', '10944', '10946', '10916', '10917', '10989', '10911', '10949', '10951', '10952', '10955', '10986', '10966', '16009', '10951', '10956', '16024', '10991', '11063', '11748', '11433', '17657', '11123', '11005', '11002', '10997', '10996', '16019', '10990', '10898' ]
bank_list.push 10911

# Wehnimer's Landing
priestess_wander_boundaries.concat [ '3807', '6929', '221', '405', '8613', '8624', '8620', '8622', '8626', '7579', '4105', '420', '3741', '401', '8632', '7983', '8636', '8660', '1776', '8661', '8664', '230', '387', '7562', '8665', '399', '8631', '402', '8683', '1195', '8678', '3883', '3724', '260', '8615', '8614', '6944', '6945', '6951', '264', '3824', '1775', '14135', '8889', '8891', '8895', '8897', '8898', '8821', '9242', '408', '325', '8862', '319', '8864', '3809', '8860', '8857', '4610', '13504', '302', '258', '1245', '8720', '8719', '8717', '8715', '8697', '14448', '234', '8772', '275', '8774', '8795', '8817', '1264', '8900', '8730', '1251', '7514', '3890', '4055', '3885', '8793', '4074', '8904', '382', '334', '4076', '8909', '4085', '383', '8906', '1249', '1246', '4087', '8830', '324' ]
bank_list.push 400

# Zul Logoth
priestess_wander_boundaries.concat [ '5752', '14663', '9452', '9448', '5742', '9442', '1013', '9446', '5822', '9469', '9470', '9471', '9474', '9475', '9472', '16847', '16843', '9477', '9479', '9480', '9481', '16848', '9490', '9502', '9503', '9505', '9509', '9508', '9504', '16850', '9494', '3357', '9493', '9501', '9549', '16917', '9550', '9563', '9566', '13141', '9567', '16918', '1261', '9553' ]
bank_list.push 9472

# Icemule Trace
priestess_wander_boundaries.concat ['3423', '3229', '2378', '2388', '2389', '3445', '9007', '3453', '9001', '3452', '3451', '3448', '2397', '3455', '2398', '3439', '15690', '3437', '2486', '2419', '3397', '3398', '3402', '2417', '2418', '2422', '3411', '3431', '3429', '3426', '3459', '2405', '3425', '15606', '3355', '3332', '2382', '3350', '3357', '3352', '2371', '3307', '3726', '3409', '2332', '2357', '3365', '3366', '3362', '2309', '3363', '2326', '2328', '2324', '3370', '3778', '2428', '3372', '3234', '2457', '3395', '2466', '2462', '3389', '3381', '3375', '8972', '2476', '2473', '2424', '3461', '18958']
bank_list.push 3370

# Ta'Vaalor
priestess_wander_boundaries.concat ['14032', '5906', '10379', '17215', '10382', '10384', '12350', '5907', '10394', '13547', '10759', '17805', '10439', '10438', '10435', '5909', '10434', '14659', '17303', '10396', '10398', '10419', '10424', '17291', '17290', '3727', '10302', '5826', '10313', '10324', '10330', '10329', '10327', '18041', '18773', '13518', '5827', '10331', '10336', '10343', '10362', '10376', '10372', '10369', '17293', '10367', '17292', '10364', '10368']
bank_list.push 10325

CharSettings['minimum-deeds'] ||= 2

start_rooms = [ 285 ]

wander_history = Array.new

find_priestess_2 = proc {
	until checknpcs.include?('priestess') or dead?
		room = Room.current
		next_room_options = room.wayto.keys.find_all { |k| room.wayto[k] =~ /^(?:north|northeast|east|southeast|south|southwest|west|northwest|out|n|ne|e|se|s|sw|w|nw)$/ }
		next_room = next_room_options.find_all { |r| not wander_history.include?(r) }
		if next_room.empty?
			next_room = wander_history.find { |r| next_room_options.include?(r) }
		else
			next_room = next_room[rand(next_room.length)]
		end
		if next_room
			wander_history.delete(next_room)
			wander_history.push(next_room)
			way = Room.current.wayto[next_room]
			if way.class == String 
				move way
			elsif way.class == Proc
				way.call
			end
		else
			echo 'fixme'
			exit
		end
	end
}

find_priestess = proc {
	visited_rooms = Array.new
	until checknpcs.include?('priestess') or dead?
		next_room_options = Room.current.wayto.keys - priestess_wander_boundaries
		next_room = next_room_options.find_all { |r| not visited_rooms.include?(r) }
		if next_room.empty?
			next_room = visited_rooms.find { |r| next_room_options.include?(r) }
		else
			next_room = next_room[rand(next_room.length)]
		end
		visited_rooms.delete(next_room)
		visited_rooms.push(next_room)
		way = Room.current.wayto[next_room]
		if way.class == String 
			move way
		elsif way.class == Proc
			way.call
		else
			echo 'crap'
			move checkpaths[rand(checkpaths.length)]
		end
	end
}

check_silvers = proc {
	silvers = nil
	action = proc { |server_string|
		if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
			nil
		elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9,]+)/
			silvers = $1.gsub(',','').to_i
			DownstreamHook.remove("#{script.name}_check_silvers")
			nil
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_check_silvers", action)
	save_silent = script.silent
	script.silent = true
	put 'info'
	script.silent = save_silent
	wait_until { silvers }
	silvers
}

deaths_sting  = nil
deeds = nil
check_sting = proc {
	started = false
	action = proc { |server_string|
		if started
			if server_string =~ /<prompt/
				DownstreamHook.remove("#{script.name}_check_sting")
				server_string
			elsif server_string =~ /<output class=""\/>/
				server_string
			else
				nil
			end
		elsif server_string =~ /^\s+Level:\s+[0-9]+\s+Deeds:\s+(\-?[0-9]+)\s*$/
			started = true
			nil
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_check_sting", action)
	save_silent = script.silent
	script.silent = true
	put 'experience'
	script.silent = save_silent
	while line = get
		if line =~ /^\s+Level:\s+[0-9]+\s+Deeds:\s+(\-?[0-9]+)/
			deeds = $1.to_i
		elsif line =~ /^\s+Experience:\s+[0-9]+\s+Death's Sting\:\s+(.+)/
			deaths_sting = $1
			break
		end
	end
	echo "checking death's sting: #{deaths_sting}"
	deaths_sting
}

remove_sting = proc {
	check_sting.call
	unless deaths_sting == 'None'
		out_of_silvers = false
		bank_id = Room.current.find_nearest(bank_list)
		start_script 'go2', [ bank_id.to_s ]
		wait_while { running?('go2') }
		potion_cost = 750 + (150 * XMLData.level)
		fput "withdraw #{potion_cost * 5} silvers"
		start_script 'go2', [ Room.current.find_all_nearest_by_tag('town').delete_if { |num| Room[num].title.first =~ /Pinefar/ }.first ]
		wait_while { running?('go2') }
		if check_silvers.call < (potion_cost * 5)
			out_of_silvers = true
		end
		empty_hands
		until (deaths_sting == 'None') or dead?
			find_priestess_2.call
			result = dothistimeout "give ##{GameObj.npcs.find { |npc| npc.noun == 'priestess' }.id} #{potion_cost} silvers", 5, /^What is it you're trying to give\?$|^You start to hand the priestess [0-9,]+ silvers, but she only takes|^You count your coins and realize that you don't have that much money!$|^You hand the priestess/
			if result == "You count your coins and realize that you don't have that much money!"
				break if out_of_silvers
				this_room = Room.current
				start_script 'go2', [ bank_id.to_s ]
				wait_while { running?('go2') }
				fput "withdraw #{potion_cost * 5} silvers"
				start_script 'go2', [ this_room.id.to_s ]
				wait_while { running?('go2') }
				if check_silvers.call < (potion_cost * 5)
					out_of_silvers = true
				end
			elsif result =~ /^You hand the priestess [0-9,]+ silvers\.|^You start to hand the priestess [0-9,]+ silvers, but she only takes/
				dothistimeout 'drink my flask', 5, /^As you sip|^You take a sip/
				check_sting.call
			end
		end
		unless dead?
			fill_hands
			silvers = check_silvers.call
			if silvers > 0
				start_script 'go2', [ bank_id.to_s ]
				wait_while { running?('go2') }
				fput "deposit #{silvers}"
			end
		end
	end
}

give_up = proc {
	ARGV.delete('--reconnect')
	put 'quit'
}

CharSettings['major-sanct-wait'] = true if CharSettings['major-sanct-wait'].nil?

if script.vars[1]
	if script.vars[1].downcase == 'once'
		remove_sting.call
	elsif script.vars[1].downcase == 'set' and script.vars[3]
		if (script.vars[2].downcase == 'start-scripts')
			if script.vars[3].downcase == 'nil'
				CharSettings['start-scripts'] = nil
				echo 'setting cleared'
			else
				script_list = script.vars[3].split(',')
				for script_name in script_list
					unless Script.exists?(script_name)
						echo "warning: script does not exists (#{script_name})"
					end
				end
				CharSettings['start-scripts'] = script_list
				echo 'setting saved'
			end
		elsif (script.vars[2].downcase == 'unlink-from')
			if script.vars[3].downcase == 'nil'
				CharSettings['unlink-from'] = nil
				echo 'setting cleared'
			else
				name_list = script.vars[3].split(',').collect { |name| name.capitalize }
				CharSettings['unlink-from'] = name_list
				echo 'setting saved'
			end
		elsif script.vars[2] =~ /^min(?:imum)?\-deeds$/i
			if script.vars[3] =~ /^[0-9]+$/
				CharSettings['minimum-deeds'] = script.vars[3].to_i
				echo 'setting saved'
			else
				echo "you're doing it wrong"
			end
		elsif script.vars[2] =~ /^use-beseech$/i and (script.vars[3] =~ /^(?:on|off|yes|no|true|false)$/i)
			if script.vars[3] =~ /^(?:on|yes|true)$/
				CharSettings['use-beseech'] = true
			else
				CharSettings['use-beseech'] = false
			end
			echo 'setting saved'
		elsif script.vars[2] =~ /^use-recall$/i and (script.vars[3] =~ /^(?:on|off|yes|no|true|false)$/i)
			if script.vars[3] =~ /^(?:on|yes|true)$/
				CharSettings['use-recall'] = true
			else
				CharSettings['use-recall'] = false
			end
			echo 'setting saved'
		elsif script.vars[2] =~ /^major-sanct-wait$/i and (script.vars[3] =~ /^(?:on|off|yes|no|true|false)$/i)
			if script.vars[3] =~ /^(?:on|yes|true)$/
				CharSettings['major-sanct-wait'] = true
			else
				CharSettings['major-sanct-wait'] = false
			end
			echo 'setting saved'
		elsif (script.vars[2].downcase == 'major-sanct-script')
			if script.vars[3].downcase == 'nil'
				CharSettings['major-sanct-script'] = nil
				echo 'setting cleared'
			else
				script_name = script.vars[3]
				unless Script.exists?(script_name)
					echo "warning: script does not exists (#{script_name})"
				end
				CharSettings['major-sanct-script'] = script_name
				echo 'setting saved'
			end
		elsif (script.vars[2] =~ /^use\-?herbs$/i) and (script.vars[3] =~ /^(?:on|off|yes|no|true|false)$/i)
			if script.vars[3] =~ /^(?:on|yes|true)$/
				CharSettings['use-herbs'] = true
			else
				CharSettings['use-herbs'] = false
			end
			echo 'setting saved'
		else
			echo "You're doing it wrong."
		end
	elsif script.vars[1].downcase == 'list'
		output = "\n"
		output.concat "   start-scripts:      #{if CharSettings['start-scripts'].empty? or CharSettings['start-scripts'].nil?; '(none)'; else; CharSettings['start-scripts'].join(', '); end}\n"
		output.concat "   minimum-deeds:      #{CharSettings['minimum-deeds']}\n"
		output.concat "   use-herbs:          #{if CharSettings['use-herbs']; 'yes'; else; 'no'; end}\n"
		output.concat "   use-beseech:        #{if CharSettings['use-beseech']; 'yes'; else; 'no'; end}\n"
		output.concat "   use-recall:         #{if CharSettings['use-recall']; 'yes'; else; 'no'; end}\n"
		output.concat "   major-sanct-wait:   #{if CharSettings['major-sanct-wait']; 'yes'; else; 'no'; end}\n"
		output.concat "   major-sanct-script: #{if CharSettings['major-sanct-script'].nil?; '(none)'; else; CharSettings['major-sanct-script']; end}\n"
		output.concat "   unlink-from:        #{if CharSettings['unlink-from'].empty? or CharSettings['unlink-from'].nil?; '(none)'; else; CharSettings['unlink-from'].join(', '); end}\n"
		output.concat "\n"
		respond output
	else
		output = "\n"
		output.concat "   #{$clean_lich_char}#{script.name} set start-scripts <script1>,<script2>,<etc>   Scripts to run after you're alive and sting is removed\n"
		output.concat "   #{''.rjust($clean_lich_char.length)}#{''.rjust(script.name.length)}                                               (not used in \"once\" mode).\n"
		output.concat "   #{$clean_lich_char}#{script.name} set start-scrips nil                          Clear the setting.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set minimum-deeds <#>                         Log off if your deeds fall to this number.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set use-herbs <on/off>                        Run the useherbs script after you're alive but before\n"
		output.concat "   #{''.rjust($clean_lich_char.length)}#{''.rjust(script.name.length)}                                               removing sting (not used in \"once\" mode).\n"
		output.concat "   #{$clean_lich_char}#{script.name} set use-beseech <on/off>                      Try to raise yourself.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set use-recall <on/off>                       Use symbol of recall when you die.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set major-sanct-wait <on/off>                 Wait for the link to drop if raised in a major sanctuary.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set major-sanct-script <scriptname>           Start a script (probably to spellup) if raised in a major sanctuary.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set unlink-from <name1>,<name2>,<etc>         Don't allow some people to raise you.\n"
		output.concat "   #{$clean_lich_char}#{script.name} set unlink-from nil                           Clear the setting.\n"
		output.concat "\n"
		output.concat "   #{$clean_lich_char}#{script.name} once                                          Removes sting and exits.\n"
		output.concat "   #{$clean_lich_char}#{script.name}                                               Runs in the background waiting for you to die, and loops.\n"
		output.concat "\n"
		respond output
	end
else
	hide_me
	loop {
		script.want_downstream = false
		clear
		wait_until { dead? }
		script.want_downstream = true
		for s in Script.running
			s.kill unless s == Script.self
		end
		if CharSettings['use-recall']
			fput 'symbol of recall'
		end
		if Spell['Symbol of Mana'].known?
			can_use_symbol_of_mana = true
		else
			can_use_symbol_of_mana = false
		end
		while dead?
			put 'look'
			cleric = nil
			150.times {
				sleep 0.2
				unless CharSettings['unlink-from'].nil? or CharSettings['unlink-from'].empty?
					if clear.any? { |line| line =~ /^A silvery translucent thread extends from (?:#{CharSettings['unlink-from'].join('|')}) encompassing you\./ }
						put 'unlink confirm'
					end
				end
				break unless dead?
				break if cleric = GameObj.npcs.find { |npc| npc.name =~ /cleric Nagrek|priest Kindarel|willowy robed elven cleric|miracle worker|high holy cleric|Barnstel|wizened brown\-robed hermit/ }
				if CharSettings['use-beseech'] and Spell[350].known? and (Spell[350].affordable? or can_use_symbol_of_mana) and not Spell['Miracle Cooldown'].active? and (not GameObj.npcs.any? { |npc| (npc.type !~ /passive/) and (npc.status !~ /dead/) } or (Spell[6666].timeleft < 2))
					if can_use_symbol_of_mana and not Spell[350].affordable?
						can_use_symbol_of_mana = false
						Spell['Symbol of Mana'].cast
					end
					put 'beseech'
					sleep 3
				end
			}
			if dead? and cleric
				fput "ask #{cleric.noun} for life"
				fput "ask #{cleric.noun} for life"
				fput "ask #{cleric.noun} for raise"
				fput "ask #{cleric.noun} for raise"
				sleep 3
			end
		end
		check_sting.call
		unless deeds > CharSettings['minimum-deeds'].to_i
			echo 'low on deeds.  giving up.'
			give_up.call
		end

		if CharSettings['major-sanct-wait'] and (checkroom == '[Library Sanctuary]')
			if CharSettings['use-herbs'] and (([Wounds.head, Wounds.neck, Wounds.torso, Wounds.limbs, Wounds.nerves].max > 0) or (percenthealth < 90))
				start_script 'useherbs', [ '--buy-missing=off' ]
			end
			if CharSettings['major-sanct-script']
				need_major_sanct_script = true
			else
				need_major_sanct_script = false
			end
			while checkroom == '[Library Sanctuary]'
				if need_major_sanct_script and not running?('useherbs')
					start_script CharSettings['major-sanct-script']
					need_major_sanct_script = false
				end
				give_up.call if dead?
				if get =~ /^You sense the link to .*? soul slip peacefully away\./
					stop_script 'useherbs' if running?('useherbs')
					stop_script CharSettings['major-sanct-script'] if CharSettings['major-sanct-script'] and running?(CharSettings['major-sanct-script'])
					move 'out'
					break
				end
			end
			stop_script 'useherbs' if running?('useherbs')
			stop_script CharSettings['major-sanct-script'] if CharSettings['major-sanct-script'] and running?(CharSettings['major-sanct-script'])
		end

		give_up.call if dead?
		# fixme: npc cleric in Wehnimer's in Prime may not be mapped
		move 'go ramp' if checkroom =~ /Temple, Chapel of Life/
		start_script 'go2', [ Room.current.find_all_nearest_by_tag('town').delete_if { |num| Room[num].title.first =~ /Pinefar/ }.first ]
		wait_while { running?('go2') }
		give_up.call if dead?
		if CharSettings['use-herbs']
			if ([Wounds.head, Wounds.neck, Wounds.torso, Wounds.limbs, Wounds.nerves].max > 0) or (percenthealth < 90)
				start_script 'useherbs'
				wait_while { running?('useherbs') }
			end
		end
		give_up.call if dead?
		remove_sting.call
		give_up.call if dead?
		unless CharSettings['start-scripts'].empty? or CharSettings['start-scripts'].nil?
			for script_name in CharSettings['start-scripts']
				start_script script_name
			end
		end
	}
end
