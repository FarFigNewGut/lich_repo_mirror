=begin
    Purify2 script, not compatible with Lich versions 3.57 and lower.
    re-written by Gibreficul, original concept by Shaelun. rewritten and edited by Aethor Whiteaxe
    start the script with help as the script variable for usage information.
    NOTE: Containers MUST be worn.  I haven't accounted for purifying from a held container.
    UPDATE!  Fixed potential "divide by 0" error.
    
    updated: 12/31/2015 by aethor whiteaxe
    usage ;purify2
     uses ;vars set orbsack = container orb gems go here
		;vars set lootsack = container unsung gems go here
		;vars set magessack = container mage gems go here
		;vars set gemsack = container sung gems go here
		
		updated 1/4/2016
		added wracking ability for Council of Light Bards
		
		updated 1/6/2016
		added min value of 3500
		added useherbs ability
=end
VERSION = "3.11.4"
AUTHOR = "Aethor Whiteaxe"
silence_me
$friendlist = ["Aethor", "Teclys", "Salasin", "Skymare", "Higher"]
$gemnouns = ["aetherstone", "waterweb", "auboraline", "rivertear", "roestone", "smoldereye", "saewehna", "mekret", "wraithaline", "agate", "amber", "ambergris", "amethyst", "azurite", "beryl", "blazestar", "bloodjewel", "bloodstone", "bluerock", "caederine", "carbuncle", "chalcedony", "coral", "cordierite", "deathstone", "despanal", "diamond", "diopside", "doomstone", "dreamstone", "^egg$", "emerald", "eostone", "faenor", "faenor\-bloom", "^fang$", "feystone", "firestone", "galena", "garnet", "^gem$", "geode", "glimaerstone", "heliodor", "hyacinth", "jacinth", "jade", "jasper", "lapis", "lazuli", "moonstone", "obsidian", "onyx", "opal", "pearl", "peridot", "pyrite", "quartz", "rhimar", "riftshard", "riftstone", "rosepar", "ruby", "sapphire", "spherine", "spinel", "starstone", "^stone$", "sunstone", "thunderstone", "topaz", "tourmaline", "turquoise", "wyrdshard", "zircon"]
$gemnames = ["shimmertine shard","tigerfang crystal", "petrified tiger tooth", "quartz crystal", "platinum fang", "gold dust","platinum dust", "glaes dust", "gold fang", "rock crystal"]
loresongs = [" I hold of perfect hue;sing to me your value", " so bright and nice;sing to me your selling price", " I know I think I see;the worth that it has to me?", " with a bright luster;what value will you muster?", " oh so bold;will show a price that is now told"]
othersongs = [" I hold with magic skill;what is the purpose of your will"," with power and luster;what ability can you muster?", " I hold of perfect hue;sing to me your purpose true", " I hold with polished shine;sing your purpose or mine"]
tonis = proc{Spell[1035].cast if Spell[1035].known? && Char.level >= 35 && !Spell[1035].active?}
    mro = []
    tick = nil
    tock = nil
    time_total = 0
    mytime = Time.now.to_f
    mygems = []
    purified = 0
    orbs = 0
    shattered = 0
if script.vars[1] =~ /transfer/
    GameObj.inv.find{|cont| cont.noun =~ /#{script.vars[2]}/}.contents.each{|gem|
if gem.noun =~ /#{$gemnouns.join('|')}/ || gem.name =~ /#{$gemnames.join('|')}/
    put "_drag ##{gem.id} ##{GameObj.inv.find{|targ| targ.noun =~ /#{script.vars[3]}/}.id}" unless gem.name =~ /smooth stone/
    matchtimeout(1, "You put")
    end
    }
    exit
    end
    
def wait_rt
    wait_while { checkrt > 0 or checkcastrt > 0 }
    sleep 0.7
end

def wrack()
	if !checkpcs.nil? && Spell[9918].known? && !Spell[9012].active?
		fput "hide" until hidden? if !Spell[9901].nil?
		Spell[9918].cast if checkspirit >= 6
	end
end


sortorbs = true
script.vars[0]
orb_val = 3501
sortorbs = false if orb_val == nil
orb_val = orb_val.to_i if orb_val

unless GameObj.right_hand.name =~ /empty/i
    echo "RIGHT HAND IS FULL, EMPTY IT AND RESTART, EXITING"
    exit
    end
    fput "look in ##{GameObj.inv.find{|cont| cont.noun =~ /#{Vars.lootsack}/}.id}" if GameObj.inv.find{|cont| cont.noun =~ /#{Vars.lootsack}/}.contents.empty?
    GameObj.inv.find{|cont| cont.noun =~ /#{Vars.lootsack}/}.contents.each{|gem| mygems.push(gem.id.to_i) if (gem.noun =~ /#{$gemnouns.join('|')}/ || gem.name =~ /#{$gemnames.join('|')}/) && gem.name !~ /smooth stone/}
    howmany = mygems.length
mygems.each{|gem|
if purified + shattered + orbs == 0
    respond "***************************************************************************************** "
    respond "*****Welcome to Purify2 by Author: Aethor Whiteaxe   Version 3.11.4 ********************** "
    respond "*** Script detected #{mygems.length} gems in your #{Vars.lootsack}."
    respond "*** Purified gems will be placed in your #{Vars.gemsack}/}."
if sortorbs
    respond "*** You will sort out orbs valued over #{orb_val} to your #{Vars.orbsack}."
    elsif orbsack
    respond "*** You will sort all orbs, regardless of value to your #{Vars.orbsack}."
    end
    respond "***************************************************************************************** "
    start_time = Time.now.to_i
    else
    runtime = Time.now.to_f - mytime
    remaining = howmany - (purified + shattered + orbs)
    avgtime = runtime.round / (purified + shattered + orbs)
    respond "********************************************************************************** "
    respond "*****Welcome to Purify2 by Author: Aethor Whiteaxe   Version 3.11.4 ********************** "
    respond "*** Script has purified #{purified} gems, sorted #{orbs} orbs, and shattered #{shattered} gems."
    respond "*** #{remaining} gems remaining."
    respond "*** Script run time:  #{ "%02d" %((runtime)/60)}:#{ "%02d" % ((runtime)%60)}"
    respond "*** Average time per gem has been #{avgtime} seconds."
    respond "*** Estimated time left is #{ "%02d" %((remaining * avgtime)/60)}:#{ "%02d" % ((remaining * avgtime)%60)}"
    respond "********************************************************************************** "
    end
    wait_rt
    loresing = false
    orbed = false
    result = false
unless Wounds.rhand == 3
    put "_drag ##{gem} right"
    else
		start_script("useherbs")
		wait_while{running? "useherbs"}
		put "_drag ##{gem} right"
    end
until result =~ /what were you|cannot|must be holding|shatter|song misfires/i
    wrack() if mana? < 60
    put "wink teclys" if mana? < 60 #if GameObj.pcs.find{|pc| pc.noun == 'Teclys'} && mana? < 60
    wait_until('Waiting on mana...') { mana(20) }
    wait_while{muckled?}
    wait_while('Get yourself healed') {[Wounds.head, Scars.head, Wounds.nerves, Scars.nerves].max >= 2 || ([Wounds.rightHand, Wounds.rightArm, Scars.rightHand, Scars.rightArm].max >= 2 && [Wounds.leftHand, Wounds.leftArm, Scars.leftHand, Scars.leftArm].max >= 2) || ([Wounds.rightHand, Wounds.rightArm, Scars.rightHand, Scars.rightArm].max >= 2 && [Wounds.leftHand, Wounds.leftArm, Scars.leftHand, Scars.leftArm].max >= 2) || [Wounds.rightArm, Wounds.leftArm, Wounds.rightHand, Wounds.leftHand, Scars.rightArm, Scars.leftArm, Scars.rightHand, Scars.leftHand].max == 3}
    wait_rt
    multifput("prep 1004","sing ##{gem}")
    result = matchwait("turn as the very essence","gem becomes more perfect","shatter","crack","must be holding","what were you","appearing smoother and more pure", "improves somewhat","cannot be", "Sing Roundtime",'Spell Hindrance',"song misfires")
if result =~ /more perfect|what were you|improves somewhat|crack|shatter|cannot be|must be holding|smoother and more pure in color/
    nextline = get
    (loresing = true;orbed = true;break) if nextline =~ /very essence/
if result =~ /crack|somewhat|What were|cannot|must be holding|song misfires|shatter/
    shattered += 1 if result =~ /shatter/
    wait_while{stunned?}
    loresing = true if result =~ /cannot be/
    break
    end
    end
    end
if loresing && sortorbs
    saveorb = false
    wrack() if mana? < 60
    put "wink teclys" if mana? < 60 #if GameObj.pcs.find{|pc| pc.noun == 'Teclys'} && mana? < 60
    tonis.call if percentmana > 80
    wait_until('Waiting on mana...') { mana(20) }
    gemvalue = false
until gemvalue
    wait_rt
    fput "loresing #{GameObj.right_hand.name} #{loresongs[rand(loresongs.length).floor]}"
    gemvalue = matchtimeout(3, "worth about .* silvers", "nothing new", "decorative")
    end
if gemvalue.gsub(",","") =~ /.*?(\d+).*?silver/
    newgemvalue = $1.to_i
    else
    newgemvalue = 0
    end
    wait_rt
    sleep 1
    saveorb = true if newgemvalue > orb_val
    end
if loresing && saveorb && orbed
    fput "put ##{gem} in #{Vars.orbsack}"
    orbs += 1
    elsif loresing && (saveorb || (Vars.orbsack && !sortorbs))
    song = false
until song =~ /pulse|draw power|gem of some kind/
    wrack() if mana? < 60
    put "wink teclys" if mana? < 60 #if GameObj.pcs.find{|pc| pc.noun == 'Teclys'} && mana? < 10
    tonis.call if percentmana > 80
    wait_until('Waiting on mana...') { mana(8) }
    fput "loresing #{GameObj.right_hand.name} #{othersongs[rand(othersongs.length).floor]}"
    song = matchwait /pulses?|draw power|gem of some kind|nothing new|as a decorative one/
    wait_rt
    end
    fput "mark ##{gem}" if song =~ /pulse/
    
if song =~ /pulse|draw power/
    respond "*** Saving #{GameObj.right_hand.name} worth #{newgemvalue}" if saveorb
    fput "put ##{gem} in #{Vars.orbsack}"
    orbs += 1
    end
    end
unless GameObj.right_hand.name =~ /empty/i
    fput "put ##{gem} in #{Vars.gemsack}"
    purified += 1
    end
    gems = howmany - (purified + shattered + orbs)
    wait_while{stunned?}
    }
    runtime = Time.now.to_f - mytime
    remaining = howmany - (purified + shattered + orbs)
unless (purified + shattered + orbs) == 0
    avgtime = runtime.round / (purified + shattered + orbs)
    end
