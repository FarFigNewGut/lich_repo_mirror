=begin
	script by insodus
	
	lets you know exactly what to do with an enchanting project item

	2016/01/26 initial revision, pretty simple stuff so far
=end

SCRIPT_NAME = "chanterguide"
item = nil
ready_for_temper = false
ready_for_chant = false
currently_tempering = false
item_enchant_base = 0
item_enchant_mod = 0
item_enchant_total = 0
current_step = 0
has_penalties = false
temper_pot = nil

show_penalties = proc {
	line = dothistimeout "sense", 3, /You study your surroundings/
	if line =~ /this room is a strong magical workshop/
		respond "You are in a workshop, so you're good there."
	else
		respond "HOLD UP! You dont appear to be in a workshop!"
		has_penalties = true
	end
	if percentspirit() == 100
		respond "Your spirit is at full, so you're good there."
	else
		respond "HOLD UP! Your spirit is not at full."
		has_penalties = true
	end
	if percentencumbrance() == 0
		respond "You are not encumbered, so you're good there."
	else
		respond "HOLD UP! You are encumbered, you should lighten up before continuing."
		has_penalties = true
	end
	if Spells.wizard > 20
		if Spell[920].active?
			respond "You have your familiar summoned, make sure its with you."
		else
			respond "HOLD UP! You should cast 920 and summon your familiar!"
			has_penalties = true
		end
	end
}

do_detect = proc {
	fput "prep 405"
	line = dothistimeout "cast #{item}", 3, /You gesture at/
	while !(line =~ /Cast Roundtime/) do
		line = get
		ready_for_temper = true if line =~ /patterns of an enchanting project in progress, which you recognize as one of your own/
		ready_for_chant = true if line =~ /It is currently tempered and ready to be enchanted/
		currently_tempering = true if line =~ /which you recognize as one of your own.  It is currently tempering/
		
		item_enchant_mod = -4 if line =~ /You recognize the faint/
		item_enchant_mod = -3 if line =~ /You recognize the muted/
		item_enchant_mod = -2 if line =~ /You recognize the hazy/
		item_enchant_mod = -1 if line =~ /You recognize the soft/
		item_enchant_mod = 0 if line =~ /You recognize the vibrant/
		
		item_enchant_base = 5 if line =~ /red aura surrounding it/
		item_enchant_base = 10 if line =~ /orange aura surrounding it/
		item_enchant_base = 15 if line =~ /yellow aura surrounding it/
		item_enchant_base = 20 if line =~ /green aura surrounding it/
		item_enchant_base = 25 if line =~ /blue aura surrounding it/
		item_enchant_base = 30 if line =~ /indigo aura surrounding it/
		item_enchant_base = 35 if line =~ /violet aura surrounding it/
		item_enchant_base = 40 if line =~ /copper aura surrounding it/
		item_enchant_base = 45 if line =~ /silver aura surrounding it/
		item_enchant_base = 50 if line =~ /gold aura surrounding it/
		
		current_step = 1 if line =~ /and on the first step/
		current_step = 2 if line =~ /and on the second step/
		current_step = 3 if line =~ /and on the third step/
		current_step = 4 if line =~ /and on the fourth step/
		current_step = 5 if line =~ /and on the fifth step/
		current_step = 6 if line =~ /and on the sixth step/
		current_step = 99 if line =~ /and on the final step/
		
		if line =~ /You can't make any sense from the patterns/
			respond "Could not tell current enchant, have a bard sing it before continuing"
			exit
		end
		
		if line =~ /Cast at what/
			respond "Could not find what you were trying to enchant."
			fput 'release'
			exit
		end
		
	end
	
	item_enchant_total = item_enchant_base + item_enchant_mod
	respond "Item is currently +#{item_enchant_total}"
	
	proper_pot = "an unknown potion (don't proceed without more info)"
	if item_enchant_total <= 5
		proper_pot = "a Rohnuru potion (approx 1k per pour)"
		temper_pot = "rohnuru potion"
	elsif item_enchant_total <= 15
		proper_pot = "a Duqnuru potion (approx 2k per pour)"
		temper_pot = "duqnuru potion"
	elsif item_enchant_total <= 25
		proper_pot = "a Dirtokh potion (approx 3k per pour)"
		temper_pot = "dirtokh potion"
	elsif item_enchant_total <= 30
		proper_pot = "a Mirtokh potion (approx 4k per pour)"	
		temper_pot = "mirtokh potion"		
	end
	
	if ready_for_chant
		respond "Ready to be enchanted, good luck!\n\n"
		show_penalties.call
	end
	
	if currently_tempering
		respond "Currently tempering, you must wait." 
	end
	
	if ready_for_temper
		respond "Ready to be tempered, use #{proper_pot}"
	end
	
	if !ready_for_chant && !currently_tempering && !ready_for_temper
		respond "This does not seem to be an active project. You may temper it if you wish to get started, use #{proper_pot}"
	end
	
	if current_step > 0
		total_steps = (item_enchant_base / 5) + 1
		current_step = total_steps if current_step == 99
		steps_left = total_steps - current_step
		days_per_temper = (total_steps * 1.5).floor
		total_days = (total_steps - current_step) * days_per_temper
		respond "You have #{steps_left} steps left, which is roughly #{total_days} days left on this project"
	end
}

show_help = proc {
	output = "\n"
	output.concat "Usage:\n"
	output.concat "\n"
	output.concat "  #{$clean_lich_char}#{SCRIPT_NAME} help           -- shows this help screen\n"
	output.concat "  #{$clean_lich_char}#{SCRIPT_NAME} list           -- shows projects on this character\n"
	output.concat "  #{$clean_lich_char}#{SCRIPT_NAME} detect {item}  -- casts Detection on the item and lets you know what to do \n"
	output.concat "  #{$clean_lich_char}#{SCRIPT_NAME} next {item}    -- Executes the next step in the process, whatever that is \n"
	output.concat "  #{$clean_lich_char}#{SCRIPT_NAME} force {item}   -- Executes the next step in the process, and ignores penalties \n"
	output.concat "\n\n"
	respond output
	exit
}

store_temper = proc { |item,start_time,end_time|
	UserVars.chanter ||= Array.new
	UserVars.chanter.each { |item_arr|
		if item_arr[1] == item.name
			already_exists = true
			UserVars.chanter.delete(item_arr)
			break
		end
	}
	this_item_array = [ item.id, item.name, start_time, end_time, item_enchant_total, current_step ]
	UserVars.chanter.push(this_item_array)
}

list_tempers = proc {
	if UserVars.chanter.nil? || UserVars.chanter.size == 0
		respond "\n\nYou have no active projects.\n\n"
	else
		respond "\n\n------------------------------------- Projects -----------------------------------------\n"
		respond " Item Desc	                     | Enchant   | Step   | Status                           |\n"
		respond "----------------------------------------------------------------------------------------"
		UserVars.chanter.each { |chant_save|
			status = "?"
			ready1 = chant_save[2]
			ready2 = chant_save[3]
			if Time.now > ready2
				status = "Definitely Ready!"
			elsif Time.now > ready1
				status = "Possibly Ready!"
			else
				seconds_out = (ready1 - Time.now).to_i
				if seconds_out < 86400
					hours_out = (seconds_out / 3600.to_f).ceil
					status = "Not ready for at least #{hours_out} hours"
				else
					days_out = (seconds_out / 86400.to_f).ceil
					status = "Not ready for at least #{days_out} days"
				end
			end
			line = chant_save[1].ljust(30, " ") + " | "
			line += chant_save[4].to_s.ljust(9, " ") + " | "
			line += chant_save[5].to_s.ljust(6, " ") + " | "
			line += status.ljust(33, " ") + "|\n"
			respond "#{line}"
		}
		respond "----------------------------------------------------------------------------------------"
		respond "\n\n"
	end
}

do_next = proc {
	if ready_for_chant
		waitcastrt?
		fput "prep 925"
		line = dothistimeout "cast #{item}", 3, /You gesture at/
		if line =~ /Cast at what/
			respond "This really shouldn't happen, did you drop the item?"
			fput "rel"
			exit
		end
		while line !~ /Cast Roundtime|Cast at what/
			if line =~ /leaving behind a faint, fading aura/
				respond "\n\nSuccess! Restart the script to continue..."
				exit
			end
			line = get
		end
	end
	if ready_for_temper
		waitcastrt?
		fput "get #{temper_pot}"
		line = get
		if line =~ /Get what/
			respond "You need to go buy a #{temper_pot} and make it available"
			exit
		end
		if line =~ /You remove a #{temper_pot}|You already have that/
			line = dothistimeout "pour my #{temper_pot} on #{item}", 3, /You pour/
			if line =~ /at what/
				respond "This really shouldn't happen, did you drop the item?"
				exit
			end
			while line !~ /Roundtime/
				if line =~ /should be ready to (enchant|enchant in about)? ([0-9]+) to ([0-9]+) (days|hours)?/
					respond "Success! Recording it."
					daysleft = $2.to_i
					daysleft2 = $3.to_i
					hoursdays = $4.to_s
					if (hoursdays  =~ /day|days/)
						calcTime = Time.now + daysleft*24*60*60
						calcTime2 = Time.now + daysleft2*24*60*60
					else
						calcTime = Time.now + daysleft*60*60
						calcTime2 = Time.now + daysleft2*60*60			
					end
					encItem = GameObj.right_hand
					if (GameObj.right_hand.name =~ /potion/ || (righthand == nil && GameObj.left_hand.id != nil))
						encItem = GameObj.left_hand
					end
					store_temper.call(encItem, calcTime, calcTime2)
					respond "Done!"
					exit
				end
				line = get
			end
		end
	end
}

check_it_and_next = proc { |force|
	if item.nil? || item.to_s.strip.length == 0
		respond "You must specify what item to work on.  ;chanterguide next {item desc}"
		exit
	end
	do_detect.call
	if currently_tempering
		respond "\nNothing to do yet for this project."
		exit
	end
	if !force && has_penalties
		respond "\nYou have some penalty (listed above).  If you want to continue anyway, use ;chanterguide force #{item}"
		exit
	end
	do_next.call
}

if Spells.wizard < 25
	respond "This script isnt for you. You must be a Wizard with at least 25 ranks in Wizard base."
	exit
end


if script.vars[1] =~ /^list/
	list_tempers.call
elsif script.vars[1] =~ /^next/
	item = script.vars[2..-1].join(' ')
	check_it_and_next.call(false)
elsif script.vars[1] =~ /^force/
	item = script.vars[2..-1].join(' ')
	check_it_and_next.call(true)
elsif script.vars[1] =~ /^detect/
	item = script.vars[2..-1].join(' ')
	do_detect.call
elsif script.vars[1] =~ /^help|\?$/i
	show_help.call
elsif script.vars[1].nil?
	show_help.call
else
	show_help.call
end

