=begin
  Jfloo

  If you are in West Dragonspine it will take you between Landing and Icemule.
  If you are in East Dragonspine it will take you between Ta'Illistim and Ta'Vaalor.
  If you specify any argument after ;jfloo it will think you want to turn in gold rings from that argument.
  Example: ;jfloo greatcloak     will go to nearest outpost and turn in any gold rings found in greatcloak.
  If you just want to use the original features, simply type ;jfloo like always.
  Version 2.9 - Contact Jara if any issues, bugs or questions.
  With a wide grin, a silk-robed attendant turns to you and says, "I am quite interested in gold rings. I'm even willing to discount the price of a travel ticket or pass by 5000 silvers for each ring you give me.  You currently have no credits towards the purchase of a travel ticket."
  
  Xanlin todo
    add destination reached message
    remember passes
    remember credit amount
      gold ring container
      pass container
    get cash from mist harbor if local bank is empty
    
  Suddenly, a silver mist swirls about you.  Golden arcs streak across your vision, making it impossible to discern anything beyond the spinning silver mist.  Gradually, the whirlwind of color subsides and it becomes obvious that your surroundings have changed.
  Weyneidra the clerk says to you, "A roundtrip day pass to Icemule Trace will be free of charge.  ASK me again in the next minute if you wish to claim it."
  !>ask clerk about gold rings
  With a wide grin, Weyneidra the clerk turns to you and says, "I am quite interested in gold rings. I'm even willing to discount the price of a travel ticket or pass by 5000 silvers for each ring you give me.  If I recall correctly, you have a credit of 195000 silvers towards the purchase of a travel ticket."
  !>ask half about gold rings
  With a wide grin, a finely-dressed halfling turns to you and says, "I am quite interested in gold rings. I'm even willing to discount the price of a travel ticket or pass by 5000 silvers for each ring you give me.  If I recall correctly, you have a credit of 195000 silvers towards the purchase of a travel ticket."
  
  output.concat "         use day pass: #{UserVars.mapdb_use_day_pass == 'yes' ? 'on' : 'off'}\n"
  output.concat "         buy day pass: #{UserVars.mapdb_buy_day_pass.nil? ? 'off' : UserVars.mapdb_buy_day_pass}\n"
  output.concat "   day pass container: #{UserVars.day_pass_sack.nil? ? '(not set)' : UserVars.day_pass_sack}\n"
=end
version = "Jfloo Version 2.9"
before_dying {Script.kill("go2")}
@nearest_town = "#{Room[Room.current.find_nearest_by_tag("town")].location}"
@towns = Hash.new
@towns["Ta'Illistim"]                          ={ "buy" => "13169", "use" => "1276", "askfor" => "Ta'Vaalor", "clerk" => "attendant"} # the Lost Home
@towns["the town of Wehnimer's Landing"]       ={ "buy" => "8634", "use" => "8635", "askfor" => "Icemule", "clerk" => "clerk"}# Wehnimer's Landing
#@towns["the tunnels and caverns of Zul Logoth"]="9550" # Zul Logoth
@towns["the tunnels and caverns of Zul Logoth"]="none" # Zul Logoth
#@towns["the free port of Solhaven"]            ="14358"# Solhaven
@towns["the free port of Solhaven"]            ={ "buy" => "8634", "use" => "8635", "askfor" => "Icemule", "clerk" => "clerk"}# Wehnimer's Landing
#@towns["the town of Kharam-Dzu"]               ="12790"# the old Logging Road
@towns["the town of Kharam-Dzu"]               ="none"# the old Logging Road
@towns["Icemule Trace"]                        ={ "buy" => "8916", "use" => "15619", "askfor" => "Wehnimer's Landing", "clerk" => "halfling" } # Icemule Trace
@towns["the Pinefar Trading Post"]             ={ "buy" => "8916", "use" => "15619", "askfor" => "Wehnimer's Landing", "clerk" => "halfling" } # Icemule Trace
@towns["the city of Ta'Vaalor"]                ={ "buy" => "5883", "use" => "13779", "askfor" => "Ta'Illistim", "clerk" => "clerk" }# Victory Road
@towns["the Isle of Four Winds"]               ={ "rerun" => true }
#@towns["the village of Cysaegir"]              ="17130"# Cysaegir
#@towns["the town of River's Rest"]             ="16115"# 
@put_pattern = /You put a|You absent-mindedly drop/
@ask_pattern = /ASK me again|ASK<\/d> me again|says to you|you.*? exist="(\d+)" noun="pass"|hands you a Chronomage day pass/
@raise_pattern = /whirlwind of color subsides|pass is expired|not valid for departures/
@use    = @towns[@nearest_town]["use"]
@buy    = @towns[@nearest_town]["buy"]
@askfor = @towns[@nearest_town]["askfor"]
@clerk  = @towns[@nearest_town]["clerk"]

#try to leave unmapped room
fput checkpaths[0] if Room.current.id.nil?

if Room.current.id == nil
  respond "I'm not currently in a mapped room."
  respond "Please move rooms and try again."
  kill_script "jfloo"
end

buy_pass = proc { 
  Script.run("go2","bank")
  result3 = dothistimeout "withdraw 5000", 5, /carefully records|through the books/
  status_tags
  if result3 =~ /carefully records/
    Script.run("go2","#{@buy}") if Room.current.id != @buy.to_i
    ask = dothistimeout "ask #{@clerk} for #{@askfor}", 5, @ask_pattern
    if ask =~ /ASK me again|ASK<\/d> me again/
      again = dothistimeout "ask #{@clerk} for #{@askfor}", 5, @ask_pattern
      if again =~ /you.*? exist="(\d+)" noun="pass"/
        @pass_id = $1
      end
    elsif ask =~ /you.*? exist="(\d+)" noun="pass"/
      @pass_id = $1
    end
  elsif result3 =~ /through the books/
    echo
    respond "Not enough money in bank to buy ticket."
    respond "Try again when you have at least 5000 silvers."
    echo
    kill_script "jfloo"
  end
  status_tags
}
#@open_regex = /^You open|^That is already open\\.$|^There doesn't seem to be any way to do that\\.$|^What were you referring to\\?|^I could not find what you were referring to\\./
#@get_regex = /^You (?:shield the opening of .*? from view as you |discreetly |carefully |deftly )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have|unsheathe|detach)|^Get what\\?$|^Why don't you leave some for others\\?$|^You need a free hand|^You already have that/
#@put_regex = /^You (?:attempt to shield .*? from view as you |discreetly |carefully |absent-mindedly )?(?:put|place|slip|tuck|add|hang|drop|untie your|find an incomplete bundle|wipe off .*? and sheathe)|^A sigh of grateful pleasure can be heard as you feed .*? to your|^As you place|^I could not find what you were referring to\\.$|^Your bundle would be too large|^The .+ is too large to be bundled\\.|^As you place your|^The .*? is already a bundle|^Your .*? won't fit in .*?\\.$|^You can't .+ It's closed!$|^You can't put/
#pass_pattern = /(<?expired>EXPIRED)|(<?west>between the towns of Wehnimer's Landing and Icemule Trace)|(<?east>between the towns of)|(<?none>You can't do that.)/
@pass_pattern = /(?<expired>EXPIRED)|(?<west>unlimited travel between.*?Wehnimer's Landing)|(?<east>unlimited travel between.*?Ta'Illistim)|(?<none>You can't do that.)/
@no_pass    = false
@buy_pass   = true
@this_pass  = false
@other_pass = false
@pass_id    = nil
@expired    = false
@fill_hands = false
@left_hand  = nil

read_pass = proc {
  @no_pass    = false
  @buy_pass   = false
  @this_pass  = false
  @other_pass = false
  @pass_id    = nil
  @expired    = false
  status_tags
  result = dothistimeout "read my day pass",3,@pass_pattern
  status_tags
  if result =~ /exist="(\d+)"/
    @pass_id = $1
  end
  if result =~ /You can't do that/
    @no_pass  = true
    @buy_pass = true
  elsif result =~ /EXPIRED/
    @expired  = true
    fput "_drag ##{@pass_id} drop"
  elsif result =~ /#{@towns[@nearest_town]["askfor"]}/
    @this_pass = true
  else 
    fput "stow ##{@pass_id}" if GameObj.right_hand.id == @pass_id || GameObj.left_hand.id == @pass_id
    @other_pass = true
  end
  read_pass.call if @expired
}

if checkleft && checkright
  if GameObj.left_hand.name !~ /day pass/ && GameObj.right_hand.name !~ /day pass/
    @left_hand = GameObj.left_hand.id
    empty_left_hand
  end
end

read_pass.call

#fix this later, should be able to pass this junk into a more flexible read pass
if @other_pass && !@this_pass
  status_tags
  result = dothistimeout "read my other day pass",3,@pass_pattern
  status_tags
  if result =~ /exist="(\d+)"/
    @pass_id = $1
  end
  if result =~ /You can't do that/
    @no_pass  = true
    @buy_pass = true
  elsif result =~ /EXPIRED/
    @expired  = true
    fput "_drag ##{@pass_id} drop"
  elsif result =~ /#{@towns[@nearest_town]["askfor"]}/
    @this_pass = true
  else 
    fput "stow #{@pass_id}" if GameObj.right_hand.id == @pass_id
    @other_pass = false
    @buy_pass = true
  end
end

if @this_pass && @pass_id
  Script.run("go2","#{@towns[@nearest_town]["use"]}")
  if GameObj.left_hand.id != @pass_id && GameObj.right_hand.id != @pass_id
    fput "get ##{@pass_id}" 
  end
  fput "raise ##{@pass_id}"
  fput "stow ##{@pass_id}"
end

if @buy_pass
  buy_pass.call
  if GameObj.left_hand.name !~ /day pass/ && GameObj.right_hand.name !~ /day pass/
    echo "something went wrong buying a pass"
    exit
  end
  Script.run("go2","#{@towns[@nearest_town]["use"]}")
  if @pass_id
    fput "raise ##{@pass_id}"
    fput "stow ##{@pass_id}"
  end
end

fput "_drag ##{@left_hand} left" if @left_hand

if script.vars[1] =~ /drea?ve?n?|iteno?/i
  Script.run("go2","3619")
  sleep 0.25
  fput "go iteno table"
  sleep 2
  fput "go iteno table"
elsif script.vars[1] =~ /^(\d+)$/
  Script.run("go2","#{$1}")
elsif script.vars[0] =~ /;/
  do_client("#{script.vars[0]}")
end

exit