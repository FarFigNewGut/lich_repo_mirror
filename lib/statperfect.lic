=begin
	statperfect script by insodus
	based on the work of cphillips73@mchsi.com
	
	2016/01/25 -- Initial Revision
	
=end

# setup our lookups
ProfessionMod =  [ [ 2, 1, 1, 1, 1, 2, 1, 1, 1, 1],	# Warrior
			     [ 1, 2, 1, 1, 1, 1, 2, 1, 1, 1],	# Rogue
			     [ 1, 1, 1, 2, 1, 1, 1, 1, 1, 2],   # Wizard
			     [ 1, 1, 1, 1, 2, 1, 1, 1, 2, 1],   # Cleric
			     [ 1, 1, 1, 1, 1, 1, 1, 2, 2, 1],   # Empath
			     [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2],   # Sorceror
			     [ 1, 2, 1, 1, 2, 1, 1, 1, 1, 1],   # Ranger
			     [ 1, 1, 1, 1, 1, 1, 1, 2, 1, 2],   # Bard
                 [ 1, 1, 1, 1, 1, 2, 1, 1, 2, 1],   # Paladin
                 [ 1, 1, 2, 1, 1, 1, 1, 2, 1, 1],   # Savant
                 [ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1] ]	# Monk

ProfessionGI = [ [25,25,20,10,20,30,25,20,15,15],	# Warrior
			   [20,25,20,20,25,25,30,15,10,15],		# Rogue
			   [15,25,20,25,25,10,15,20,20,30],		# Wizard
			   [20,10,25,25,25,20,15,20,30,15],		# Cleric
			   [20,15,25,25,20,10,15,25,30,20],		# Empath
			   [15,20,25,25,20,10,15,20,25,30],		# Sorceror
			   [20,30,20,15,25,25,20,10,25,15],		# Ranger
			   [20,25,15,10,15,25,20,30,20,25],		# Bard
               [25,20,25,10,15,30,20,20,25,15],		# Paladin
               [15,15,25,25,20,10,20,30,25,20],		# Savant
               [20,25,30,10,20,25,25,20,15,15] ]	# Monk

RaceGI =  [ [-2, 5,-2, 0, 0, 0, 5, 0, 0, 0],	# Dark Elf
		    [ 5,-3, 3, 0, 0, 5,-5,-2, 3, 0],	# Dwarf
		    [-5, 5,-5, 0, 0, 0, 3, 3, 0, 5],	# Elf
		    [ 3,-2, 0, 0, 2, 5,-2, 0, 0, 0],	# Giantman
		    [ 0, 2,-2, 0, 0, 2, 2, 2, 0, 0],	# Half-Elf
		    [ 5, 5,-2,-2, 0,-5, 5, 0, 0, 0],	# Halfling
		    [ 2, 0, 0, 0, 2, 2, 0, 0, 0, 0],	# Human
		    [-2, 5,-5, 0, 0,-3, 5, 3, 0, 3],	# Sylvankind
            [ 2, 2, 2, 0, 0,-3, 3, 0, 0, 0],	# Forest Gnome
            [ 0, 3,-3, 5, 5,-5, 3, 0, 0,-2],	# Burghal Gnome
            [ 5, 2, 0,-2, 0, 3, 2,-2, 0,-2],	# Half-Krolvin
            [ 0, 0, 3, 2, 0,-2, 0, 3, 0, 0],	# New Race
            [-2, 3, 2, 0, 2, 0, 3,-2, 0, 0] ]	# Aelotoi

Races = [ 'Dark Elf', 'Dwarf', 'Elf', 'Giantman', 'Half-Elf', 'Halfling', 'Human', 
		  'Sylvankind', 'Forest Gnome', 'Burghal Gnome', 'Half-Krolvin', 'Aelotoi' ]
Race = Races.find_index(Stats.race)

Professions = [ 'Warrior', 'Rogue', 'Wizard', 'Cleric', 'Empath', 'Sorceror', 'Ranger',
				'Bard', 'Paladin', 'Savant', 'Monk']
Profession = Professions.find_index(Stats.prof)

# configurable options - TODO: do some cleansing on these
MaxLevel=100
PhysicalWeight = CharSettings['phy'].nil? ? 1.0 : CharSettings['phy'].to_f
MentalWeight = CharSettings['men'].nil? ? 1.0 : CharSettings['men'].to_f
Iterations = CharSettings['iter'].nil? ? 20000 : CharSettings['iter'].to_i
CapStr = CharSettings['cap'].nil? ? [ "None" ] : CharSettings['cap'].split(",")

# some global vars
Stat = [20,20,20,20,20,20,20,20,20,20]
MinimumStats = [20,20,20,20,20,20,20,20,20,20]
Physical = [0,1,5,6]
Mental = [3,4,7,8]
MentPhys = Mental + Physical
MinimumPTP=0
MinimumMTP=0
AllStats = Array.new(10)
GI = Array.new
$totalPTP=0
$totalMTP=0
$totalTP=0
$bestPTP=0
$bestMTP=0
$bestTP=0
$bestRawPTP=0
$bestRawMTP=0
$bestRawTP=0
$rawPTP=0
$rawMTP=0
$rawTP=0
$rand1=0
$rand2=0
$rand3=0
	
def total_stats
	Stat.inject(:+)
end

def min_stat
	Stat.index(Stat.min)
end

def calc_total_tp
	dicaur = ((Stat[2] * ProfessionMod[Profession][2] + 
			   Stat[9] * ProfessionMod[Profession][9])/2).floor
    $rawPTP = 25 + ((dicaur + Stat[0]*ProfessionMod[Profession][0] +
							  Stat[1]*ProfessionMod[Profession][1] +
							  Stat[5]*ProfessionMod[Profession][5] +
							  Stat[6]*ProfessionMod[Profession][6]) / 20)
    $rawMTP = 25 + ((dicaur + Stat[3]*ProfessionMod[Profession][3] +
							  Stat[4]*ProfessionMod[Profession][4] +
							  Stat[7]*ProfessionMod[Profession][7] +
							  Stat[8]*ProfessionMod[Profession][8]) / 20)
    $totalPTP = $rawPTP.floor
    $totalMTP = $rawMTP.floor
	
	# now add TP growth
	for i in 1..MaxLevel do
		dicaur = ((AllStats[2][Stat[2]][i]*ProfessionMod[Profession][2] +
                   AllStats[9][Stat[9]][i]*ProfessionMod[Profession][9])/2).floor
		rawphy = 25 + (dicaur +
                      AllStats[0][Stat[0]][i]*ProfessionMod[Profession][0] +
                      AllStats[1][Stat[1]][i]*ProfessionMod[Profession][1] +
                      AllStats[5][Stat[5]][i]*ProfessionMod[Profession][5] +
                      AllStats[6][Stat[6]][i]*ProfessionMod[Profession][6]) / 20
		rawmen = 25 + (dicaur +
                      AllStats[3][Stat[3]][i]*ProfessionMod[Profession][3] +
                      AllStats[4][Stat[4]][i]*ProfessionMod[Profession][4] +
                      AllStats[7][Stat[7]][i]*ProfessionMod[Profession][7] +
                      AllStats[8][Stat[8]][i]*ProfessionMod[Profession][8]) / 20
		$totalPTP += rawphy.floor
		$totalMTP += rawmen.floor
		$rawPTP += rawphy
		$rawMTP += rawmen
	end

	$totalTP = $totalPTP + $totalMTP
	$rawTP = $rawPTP + $rawMTP
end

def does_match_user_prefs?
	CapStr.each { |cap|
		if cap == 'str'
			return false if AllStats[5][Stat[5]][100] < 100
		elsif cap == 'dex'
			return false if AllStats[5][Stat[1]][100] < 100
		elsif cap == 'agi'
			return false if AllStats[5][Stat[6]][100] < 100
		elsif cap == 'con'
			return false if AllStats[5][Stat[0]][100] < 100
		elsif cap == 'dis'
			return false if AllStats[5][Stat[2]][100] < 100
		elsif cap == 'aur'
			return false if AllStats[5][Stat[9]][100] < 100
		elsif cap == 'int'
			return false if AllStats[5][Stat[4]][100] < 100
		elsif cap == 'wis'
			return false if AllStats[5][Stat[8]][100] < 100
		elsif cap == 'log'
			return false if AllStats[5][Stat[3]][100] < 100
		elsif cap == 'inf'
			return false if AllStats[5][Stat[7]][100] < 100
		end
	}
	true
end

def is_valid_statset?
	return false if (total_stats > 660)

	stats_over_70 = 0
	stats_over_90 = 0
  
	for i in 0..9 do
		return false if (Stat[i]<30 && ProfessionMod[Profession][i]==2)
		stats_over_70 += 1 if (Stat[i]>(70 + (10 * (ProfessionMod[Profession][i] - 1) ) ) )
		stats_over_90 += 1 if (Stat[i]>(90 + (10 * (ProfessionMod[Profession][i] - 1) ) ) )
		return false if (Stat[i]>100 || Stat[i]<20)
	end

	return false if (stats_over_70 > 4 || stats_over_90 > 1)
    true
end

def do_calc_max_tp
	approx_wait = (Iterations / 1000).floor
	respond "Starting run, expect to wait about #{approx_wait} for results...\n\n"

	for i in 0..9 do
		# initialize growth chart
		GI[i]=ProfessionGI[Profession][i] + RaceGI[Race][i]
		
		# setup the base stat for this prof
		if (ProfessionMod[Profession][i]==2)
			Stat[i]=30
			MinimumStats[i]=30
		end
	end

	# start with bumping up our prefered stats
	left_to_max = 4
	CapStr.each { |cap|
		if cap == 'str'
			Stat[5] = 85
			left_to_max -= 1
			MentPhys.delete(5)
		elsif cap == 'dex'
			Stat[1] = 85
			left_to_max -= 1
			MentPhys.delete(1)
		elsif cap == 'agi'
			Stat[6] = 85
			left_to_max -= 1
			MentPhys.delete(6)
		elsif cap == 'con'
			Stat[0] = 85
			left_to_max -= 1
			MentPhys.delete(0)
		elsif cap == 'dis'
			Stat[2] = 85
			left_to_max -= 1
			MentPhys.delete(2)
		elsif cap == 'aur'
			Stat[9] = 85
			left_to_max -= 1
			MentPhys.delete(9)
		elsif cap == 'int'
			Stat[4] = 85
			left_to_max -= 1
			MentPhys.delete(4)
		elsif cap == 'wis'
			Stat[8] = 85
			left_to_max -= 1
			MentPhys.delete(8)
		elsif cap == 'log'
			Stat[3] = 85
			left_to_max -= 1
			MentPhys.delete(3)
		elsif cap == 'inf'
			Stat[7] = 85
			left_to_max -= 1
			MentPhys.delete(7)
		end
	}
	
	# now bump up some others based on priority a mental/physical priority
	for i in 0..left_to_max do
		Stat[MentPhys[i]] = 85
	end
	
	# now do a couple loops to ensure a good starting point
	while total_stats < 660
		Stat[min_stat] += 1
	end
	while !is_valid_statset? do
		for i in 0..left_to_max do	
			Stat[MentPhys[i]] -= 1
			Stat[min_stat] += 1
		end
	end
	
	# create stats growth array -- AllStats[stat number 0-9][starting stat 20-100][level 1-160] = stat value
	for i in 0..9 do
		AllStats[i] = Array.new(101)
		for j in 20..100 do
			this_stat = j
			AllStats[i][j] = Array.new(MaxLevel + 1)
			for k in 1..MaxLevel do
				this_stat += 1 if (this_stat<GI[i] || (this_stat<100 && (k % (this_stat/GI[i]).floor)==0))
				AllStats[i][j][k] = this_stat
			end
		end
	end
	
	calc_total_tp
	$bestModifiedTotal = $totalPTP * PhysicalWeight + $totalMTP * MentalWeight;
	$bestRawPTP = $rawPTP;
	$bestRawMTP = $rawMTP;
	$bestRawTP = $rawTP;
	$bestPTP = $totalPTP;
	$bestMTP = $totalMTP;
	$bestTP = $totalTP;
	
	prng = Random.new
		
	# main loop, we just add/substract randomly until we get the best total TP
	recalced = 0
	while recalced < Iterations do
		$rand1=prng.rand(0..9)
		$rand2=prng.rand(0..9)
		while $rand1 == $rand2
			$rand2=prng.rand(0..9)
		end
		$rand3=prng.rand(1..20)

		Stat[$rand1]+=$rand3
		Stat[$rand2]-=$rand3
		
		# if it puts us in an illegal place, undo it
		if !is_valid_statset? || !does_match_user_prefs?
			Stat[$rand1]-=$rand3
			Stat[$rand2]+=$rand3
		else
			# if its legal, test it against what we had before
			recalced += 1
			calc_total_tp
			new_modified_total = $totalPTP * PhysicalWeight + $totalMTP * MentalWeight
			
			# if this one is better, store it
			if (new_modified_total > $bestModifiedTotal)
				$bestModifiedTotal = new_modified_total
				$bestRawPTP = $rawPTP
				$bestRawMTP = $rawMTP
				$bestRawTP = $rawTP
				$bestPTP = $totalPTP
				$bestMTP = $totalMTP
				$bestTP = $totalTP
			else
				Stat[$rand1]-=$rand3
				Stat[$rand2]+=$rand3
			end
		end
	end

	output =  "\n StatsPerfect Run Complete \n"
	output += "---------------------------------------------------------------------------------\n"
	output += "                    | Con | Dex | Dis | Log | Int | Str | Agi | Inf | Wis | Aur | \n"
	output += "Starting Stats      ";
	Stat.each { |num| output += "| " + (num == 100 ? "100 " : (num.to_s + "  ")) }
	output += "|\nCapped Stats        ";
	for i in 0..9 do
		capped_stat = AllStats[i][Stat[i]][100]
		output += "| " + (capped_stat == 100 ? "100 " : (capped_stat.to_s + "  "))
	end
	output += "|\n\nResulting total TP when you ding 100: #{$bestModifiedTotal} \n\n"
	respond output
end

def show_help
	output = "\n"
	output.concat "Usage:\n"
	output.concat "\n"
	output.concat "     #{$clean_lich_char}statperfect                  -- executes a run  \n"
	output.concat "     #{$clean_lich_char}statperfect help             -- shows this screen \n"
	output.concat "     #{$clean_lich_char}statperfect list             -- shows your current settings \n"
	output.concat "     #{$clean_lich_char}statperfect set {option}     -- allows you to customize the next run	\n"
	output.concat "                                   iter 10000   -- how many random changes to attempt \n"
	output.concat "                                   phy 1.0      -- option for physical TP weighting \n"
	output.concat "                                   men 1.0      -- option for mental TP weighting \n"
	output.concat "                                   cap {stats}  -- comma seperate list of stats to ensure cap at 100 \n"
	output.concat "                                                  {str/dex/agi/con/dis/aur/int/wis/log/inf} \n"
	output.concat "\n"
	respond output
end

def list_opts
	output = "\n"
	output.concat  "You will current weigh Physical TPs at: #{PhysicalWeight} \n"
	output.concat  "You will current weigh Mental TPs at: #{MentalWeight} \n"
	output.concat  "You will try this many random iterations per run: #{Iterations} \n"
	output.concat  "You will ensure these stats end up capped: #{CapStr} \n"
	output.concat  "\n"
	respond output
end

def show_summary
	output = "\n"
	output.concat "This script uses stat randomization to try and find an ideal build.\n"
	output.concat "It is not based on any formula.  As such it is intended to be run\n"
	output.concat "several times until you find a build you like based on capped stats\n"
	output.concat "and total TP at cap. I'll now output the help screen to show you\n"
	output.concat "what options you have before you execute a run.\n\n"
	respond output
	show_help
	list_opts
end
	
# show a summary screen on first run
if CharSettings['first_run'].nil?
	CharSettings['first_run'] = true
	show_summary
	exit
end
	
# main option parse
if script.vars[1] =~ /^help|\?$/i
	show_help
	exit
elsif script.vars[1] == 'set'
	if script.vars[2] == 'phy'
		CharSettings['phy'] = script.vars[3]
		echo 'physical TP setting saved'
	elsif script.vars[2] == 'men'
		CharSettings['men'] = script.vars[3]
		echo 'mental TP setting saved'
	elsif script.vars[2] == 'cap'
		CharSettings['cap'] = script.vars[3]
		echo 'capped stats setting saved'
	elsif script.vars[2] == 'iter'
		CharSettings['iter'] = script.vars[3]
		echo 'iterations number saved'
	else
		echo 'bad setting passed'
	end
elsif script.vars[1] == 'list'
	list_opts
else
	list_opts
	do_calc_max_tp
end
