# modification of some other gem sorting script by some guy
# this is only for putting gems in Brute's house but feel free to modify
#
# Yes, I know the code is ugly.
 # dark red-green bloodstone, some polished black coral (2), some polished blue coral, blue cordierite, small purple geode (5), piece of yellow jasper (2), 
 
gem_patterns = [ "((rock|quartz|glaesine) crystal)",
"(blue cordierite)",
"(red-green bloodstone)",
"((malachite|labradorite|aventurine|sardonyx|morganite) stone)",
"(star diopside)",
"(fire opal)",
"(clear sapphire)",
"((black|red|yellow) jasper)",
"((leopard|cat's eye|carnelian) quartz)",
"(pyrite)",
"((brown|clear) zircon)",
"((clear|blue) topaz)",
"((red|blue) spinel)",
"((blue|red|green|purple) geode)",
"(almandine garnet)",
"(quartz crystal)",
"((pink|blue|green|black) peridot)",
"((pink|blue|green|black) tourmaline)",
"(aquamarine gem)",
"(asterfire quartz)",
"(black deathstone)",
"(black dreamstone)",
"(black moonstone)",
"(black opal)",
"(black pearl)",
"(black tourmaline)",
"(blue diamond)",
"(blue dreamstone)",
"(blue lapis)",
"(blue moonstone)",
"(blue peridot)",
"(blue sapphire)",
"(blue starstone)",
"(chrysoberyl gem)",
"(cats-eye moonstone)",
"(chameleon agate)",
"(clear tourmaline)",
"(amethyst)",
"(dragonfire emerald)",
"(dragonfire opal)",
"(dragonfire quartz)",
"(dragonsbreath sapphire)",
"(firestone)",
"(beryl gem)",
"(golden moonstone)",
"(golden topaz)",
"(green dreamstone)",
"(green garnet)",
"(green peridot)",
"(green sapphire)",
"(green starstone)",
"(green tourmaline)",
"(green zircon)",
"(grey moonstone)",
"(grey pearl)",
"(opaline moonstone)",
"(citrine quartz)",
"(golden amber)",
"(rose quartz)",
"(pink coral)",
"(pink dreamstone)",
"(pink pearl)",
"(pink peridot)",
"(rhodochrosite stone)",
"(pink sapphire)",
"(pink spinel)",
"(pink topaz)",
"(pink tourmaline)",
"(pink coral)",
"((red|blue|black) coral)",
"(red dreamstone)",
"(red starstone)",
"(red sunstone)",
"(rhodochrosite stone)",
"(smoky topaz)",
"(star emerald)",
"(star ruby)",
"(star sapphire)",
"(turquoise stone)",
"(uncut diamond)",
"(uncut emerald)",
"(uncut ruby)",
"(violet sapphire)",
"(violet spinel)",
"(white dreamstone)",
"(white opal)",
"(white pearl)",
"(white starstone)",
"(white sunstone)",
"(yellow dreamstone)",
"(yellow sapphire)",
"(yellow sunstone)",
"(yellow zircon)",
"(lapis lazuli)",
"(blue lapis lazuli)"

         ].sort.uniq
	 
		 
# -----------------------------------------------------------------------------
# Get item into get_location. Return true if the item is now in hand or false
# if it was not.
# -----------------------------------------------------------------------------
GetItem = proc { |item, get_location|
    put "get " + item + " from " + get_location

    response = waitfor("You remove", "cannot", "closed", "full", "Get what?")

    if response =~ /closed/
        # Container closed. Attempt only once to open it and stow
        # the item.  If opening or stowing afterwards fails, we'll
        # abandon the attempt and just return false.
        put "open " + stow_location
        response = waitfor("can't", "You open")

        if ( response =~ /You open/ )
            put "get " + item + " in " + get_location
            response = waitfor("You remove", "cannot", "closed", "Get what?"	)
        end
    end

    if ( response =~ /You remove/ )
        true
    else
        false
    end
}

# -----------------------------------------------------------------------------
# Stow a item into stow_location. Return true if the item was stowed or false
# if it was not.
# -----------------------------------------------------------------------------
StowItem = proc { |item, stow_location|
    put "put my " + item + " in " + stow_location

    response = waitfor("You put", "cannot", "full", "closed")

    if response =~ /closed/
        # Container closed. Attempt only once to open it and stow
        # the item.  If opening or stowing afterwards fails, we'll
        # abandon the attempt and just return false.
        put "open " + stow_location
        response = waitfor("can't", "You open")
    
        if ( response =~ /You open/ )
            put "put my " + item + " in " + stow_location
            response = waitfor("You put", "cannot", "full", "closed", "won't fit")
        end
    end

    if ( response =~ /You put/ )
        true
    else
        false
    end
}

# -----------------------------------------------------------------------------
# Get a partially/completely full container for the given gemtype from the
# specified container of jars. Return either the noun for the container found
# or nil if no container was found.
# -----------------------------------------------------------------------------
GetExistingJar = proc { |gem_type, rummage_container, rummage_container2, rummage_container3, rummage_container4, rummage_container5 |
	foundJar=false
	currentContainer=rummage_container
	while ! foundJar
		put "rummage in " + currentContainer + " ingredient " + gem_type

		response = waitfor("jar",
						   "bottle",
						   "beaker",
						   "but can't seem to locate any ingredient",
						   "hands are full")

		if response =~ /(jar|bottle|beaker)/
			container_name = $1
			foundJar=true
		elsif response =~ /your hands are full/
			echo "Unexpected items in hands. Aborting."
			exit
		else
			case currentContainer
			when rummage_container
				currentContainer=rummage_container2
			when rummage_container2
				currentContainer=rummage_container3
			when rummage_container3
				currentContainer=rummage_container4
			when rummage_container4
				currentContainer=rummage_container5
			when rummage_container5
				container_name = nil
				foundJar=true
			end
		end
		
	end
	
   container_name
}

# -----------------------------------------------------------------------------
# Get a (presumed empty) jar-like object from the named container. Return either
# the noun for the container found or nil if no container was found.
# -----------------------------------------------------------------------------
GetFreshJar = proc { |fresh_location|
    jarTypes      = ["jar", "beaker", "bottle"]
    new_container = nil

    jarTypes.each{|jar_type|
        if GetItem.call(jar_type, fresh_location)
            new_container = jar_type
            break
        end
    }
    new_container

}

# -----------------------------------------------------------------------------
# Get a partially/completely full container for the given gemtype from the
# specified container of jars. Return value is meaningless.
# -----------------------------------------------------------------------------
MoveGemTypeToJars = proc { |gem_type,
                            source_container,
                            jar_container,
							jar_container2,
							jar_container3,
							jar_container4,
							jar_container5,
                            fresh_container,
                            full_container,
							full_container2,
							full_container3|
    done     = false
    jar_type = nil

    begin
        put "get " + gem_type + " from " + source_container

        result = waitfor("You remove", "Get what", "free hand")

        if ( result =~ /Get what/ )
            done = true
        elsif ( result =~ /free hand/ )
            echo "Unexpected items in hands. Aborting."
            exit
        else
            # Get a jar/bottle/beaker if we don't have one already
            if jar_type.nil?
                jar_type = GetExistingJar.call(gem_type, jar_container, jar_container2, jar_container3, jar_container4, jar_container5 )

                if jar_type.nil?
                    jar_type = GetFreshJar.call(fresh_container)
                end
            end

            if ! jar_type.nil?
                put "put " + gem_type + " in " + jar_type

                result = waitfor("into your",
                                 "to the contents of",
                                 "full",
                                 "better of mixing",
                                 "holding the")

                if result =~ /full/
                    # Put the gem back so we're in a clean state
                    if ! StowItem.call(gem_type, source_container)
                        echo "Unable to gem back into " + source_container
                        echo "Aborting"
                        done = true
                        exit
                    end

                    if StowItem.call(jar_type, full_container)
                        # This will cause us to get a new jar at the
                        # top of the loop.
                        jar_type = nil
					elsif StowItem.call(jar_type, full_container2)
						jar_type = nil
					elsif StowItem.call(jar_type, full_container3)
						jar_type = nil
                    else
                        echo "Unable to stow full jar in " + full_container + ", " + full_container2 + ", or " + full_container3
                        echo "Aborting"
                        done = true
                        exit
                    end
                end # jar full
            else
                echo "Unable to get a container for " + gem_type
                echo "Aborting"
                done = true
                exit
            end
        end # Got gem
    end while (! done)

	
    if ! jar_type.nil? # do we have a jar in hand?
		haveJar=true
		currentContainer=jar_container
		while haveJar
			put "put my " + jar_type + " in " + currentContainer

			response = waitfor("you put", "won't fit")

			if ( response =~ /won't fit/ )
				case currentContainer
				when jar_container
					currentContainer=jar_container2
				when jar_container2
					currentContainer=jar_container3
				when jar_container3
					currentContainer=jar_container4
				when jar_container4
					currentContainer=jar_container5
				end	
			else
				haveJar=false
			end
		end	
    end
}

# -----------------------------------------------------------------------------
# Main code loop.  Determine every unique gem-string present in the source
# container and call MoveGemTypeToJars() for that gem type.
# -----------------------------------------------------------------------------
if script.vars.find { |val| val =~ /\bhelp\b/i }
    respond "Summary: Moves lose gems into jars.
Requires the following settings:
    ;setting add gems_2jars gems=<loose gem location>
    ;setting add gems_2jars emptyjars=<empty jar container>
    ;setting add gems_2jars partjars=<partially filled jars container>
    ;setting add gems_2jars fulljars=<filled jars container>"
    exit
end

# Load character settings
gem_container   = "my jacket"
case XMLData.name
	when "Brute"
		gem_container   = "my jacket"
	when "Gob"
		gem_container   = "my bag"
	when "Wham"	
		gem_container = "my sack"
	when "Hoy"	
		gem_container = "my cloak"
	when "Luute"	
		gem_container = "my sack"
	when "Helsfeld"	
		gem_container = "my bag"
	when "Gondain"
		gem_container = "my cloak"
	when "Yaps"
		gem_container = "my cloak"
	when "Kyal"
		gem_container = "my vest"
	when "Neimanz"
		gem_container = "my cloak"
end

part_container  = "backpack on table"
part_container2 = "pack on table"
part_container3 = "satin cloak on table"
part_container4 = "tanned cloak on table"
part_container5 = "glaes cloak on table"
empty_container = "sack behind table"
full_container  = "puma cloak behind table"
full_container2  = "panther cloak behind table"
full_container3 = "linen cloak on table"


# Open the containers.
put "open " + gem_container
put "open " + part_container
put "open " + part_container2
put "open " + part_container3
put "open " + part_container4
put "open " + part_container5
put "open " + empty_container
put "open " + full_container

# We could do better here, but I'm being lazy at the moment.
put "open " + gem_container
waitfor("You open", "That is already open.")

# Let's see what's in the container to make the list of gems to
# work upon.
put "look in " + gem_container
response = waitfor("There is nothing in there.",
                   "I could not find what you were referring to.",
                   "In the .+ you see").gsub(/ and (?:an|a|some)/, ',')

				   echo response
if response =~ /I could not find what you were referring to./
    echo "No " + gem_container + " found. Did you configure the script?"
    exit
elsif response =~ /There is nothing in there./
    echo "Your " + gem_container + " is empty. Go hunt!"
    exit
else # By speculative implication, there's gems to process. I suspect there's
     # more error cases to handle, but we're doing good so far.

    # Process the response line turning it into an array of arrays of items found.
    # BUGBUG: Is this the optimal order or would it be more efficient to uniq.
    #         then compact? I suspect yes.
    gems = response.scan(/\b(?:#{gem_patterns.join('|')})(?=,|\.)/).
           # then into a single array of strings
           flatten.
           # then remove the nils
           compact.
           # then remove the duplicates
           uniq

end

# We would've exited above if we didn't think we had a valid gems array. Worst case
# we should have an empty array and execute never.
gems.each{|gem|
    # Special cases until we get the regexps fixed
    gem_words = gem.split(" ")
	gem_words[2]="lapis" if gem_words[2] == "lazuli"
    if gem_words.length==3
        gem = gem_words[0] + " " + gem_words[2]
    end

    MoveGemTypeToJars.call(gem,
                           gem_container,
                           part_container,
						   part_container2,
						   part_container3,
						   part_container4,
						   part_container5,
                           empty_container,
                           full_container,
						   full_container2,
						   full_container3)
}


echo ("And we're done!  Exiting.")
exit
