=begin

		Author: Samrit
   Contributor:	Demandred
          game: Gemstone
          tags: deeds, tavaalor
       version: 2.7

-- Pre-Ta'Vaalor rewrite

	Usage example:
		;gems2deeds greatcloak

	For the landing only, specify a sack with gems in it and this script will get 
	all gems appraised and go to the temple (in the landing only!) and create 
	deeds from those gems using the formula (100*level + 100*deed + 101)/3 
	to determine the cost of a deed in gems.

	It will generate as many deeds as possible from all gems in the specified sack,
	and it will spend no more than 20% over the optimal value of the deed. 

	Advanced note: you can tweak the max percentage it will spend over minimum 
	cost of the deed by opening and editing the first variable in the script.

	Script by Samrit

-- Post Ta'Vaalor rewrite
	
	EDIT of original gems2deeds.lic by Demandred:
	
	I have made an attempt to edit this for use in Ta'Vaalor. All credit for the
	original script goes to Samrit, as stated above. I did change the % to 10% (.1)
	default and dropped the value to 1.5 I hope. Not sure if 3x will work (it wasn't
	working for my Aelotoi characters in the Landing, for some reason, so who knows)
	
	I haven't added a check to see if the door is open or closed, might do that later;
	so if someone is in the room already it probably will fail. Might have to kill it
	and restart.
	
	Fixed a couple oddities, doesn't leave the room to try to come back in...
	Never done versions or whatnot, this is my second push to the repository....so:
	
	2.7 - A few minor changes for now - return to start room, cleaned a few unncessary lines out. Big rewrite coming soon.
	2.6 - updated for commas and exp display changes, as well as added scarabs to items
		  it will use...also changed version syntax to show my versions as 2.x for now.
	2.5 - changed default variance to .2
	2.4 - eh, go back to King's Court when done, I like this better.
	2.3 - Leave the room when all done
	2.2 - fixed some stuff so you stay in the room until done
	2.1 - initial rewrite of Samrit's for Ta'Vaalor
	
=end

#
# Change this value if you want to adjust the percentage over
# optimal value that the script will buy deeds for.
#
# Default value (20%): 0.2
#
MAX_VARIANCE = 0.2

####################################

def appraise_gems(uservar)
	finalreport = Array.new
	
	container = GameObj.inv.find{ |container| container.name =~ /.*#{uservar}.*/ }
	
	if container.nil? then fput "look in #{container.name}" end

	gems = container.contents.select{ |item| 
		item.type == "gem" || item.noun == "scarab"
	}
	
	for gem in gems do
		silence_me
		dothistimeout "take ##{gem.id} from ##{container.id}", 5, /^You remove|You discreetly/
		fput "appraise ##{gem.id}"
		result = matchfind "I'll give you ? for it"
		finalreport << [result.delete(",").to_i, gem.id, gem.name]
		dothistimeout "put ##{gem.id} in ##{container.id}", 5, /^You put|You discreetly/
		silence_me
	end
	
	respond "All gems appraised:"
	finalreport.sort{ |a,b| a[0] <=> b[0] }.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
	
	return finalreport.sort{ |a,b| a[0] <=> b[0] }
end


#
# Loop, selecting the next most valuable gem that keeps our iterationsum within MAX_VARIANCE
# until we have enough, or run out of gems
#
def get_deed_gems(deedcost, sortedgems)
	iterationsum = 0
	iterationgems = Array.new
	while sortedgems.length > 0 && iterationsum < deedcost do
		for ix in 0..(sortedgems.length-1)
			if sortedgems.at(ix)[0] + iterationsum > deedcost + (deedcost*MAX_VARIANCE) then
				# The value of this gem pushes us over the limit, take the prevous gem
				if ix == 0 then
					sortedgems.delete_at(0)
					break
				end
				iterationsum = iterationsum + sortedgems.at(ix-1)[0]
				iterationgems << sortedgems.at(ix-1)
				sortedgems.delete_at(ix-1)
				break
			elsif ix == sortedgems.length-1 then
				iterationsum = iterationsum + sortedgems.at(ix)[0]
				iterationgems << sortedgems.at(ix)
				sortedgems.delete_at(ix)
				break
			end
		end
	end

	return iterationsum < deedcost ? nil : iterationgems
end


#
# Do the mistwood door drawer step, expects to be inside the door found in the Garden of the Ancients (10375)
#
def do_tvdrawer_offering(deedgems)
	dothistimeout "close door", 2, /You hear a muffled /
	dothistimeout "pull hemp", 2, /A stone panel moves aside/
	dothistimeout "open drawer", 2, /The drawer slides open/
	deedgems.each { |gem|
		dothistimeout "take ##{gem[1]}", 5, /^You remove|You discreetly/
		dothistimeout "put ##{gem[1]} in drawer", 5, /You put/
	}
	dothistimeout "close drawer", 5, /The drawer slides closed/
	dothistimeout "open door", 5, /Creaking slightly/
end

#
# Determine the cost of the users next deed
#
def get_next_deed_cost()
    deed_text = dothistimeout "experience", 5, /Experience:/
    deeds = deed_text.match(/.*Deeds: (\d*)/).captures[0]
    level = Char.level
    return (((100 * level.to_i + 100 * deeds.to_i + 101).to_f * 2 / 3).to_f).ceil
end


def main()
	if variable[1].nil? then
		respond "\n*** You didn't specify the sack that your gems are in! ***\n\n    Usage: ;gems2deeds your-gem-sack\n\n\n"
		exit
	end

	return_room = Room.current.id

	deedcost = get_next_deed_cost()
	
	Script.run('go2', 'gemshop')

	sortedgems = appraise_gems(variable[1])

	Script.run('go2', '10375')
	fput "search vine", /You search through the vines and find an opened mistwood door/
	waitrt?
	dothistimeout "go mistwood door", 2, /small stone room is little more/

	num_deeds_done = 0
	while (deedgems = get_deed_gems(deedcost, sortedgems)) != nil do
		sum = 0
		deedgems.each{ |gem| sum += gem[0] }
		percentover = ((sum - deedcost).to_f / deedcost.to_f * 100)
		respond "\nDeed cost: #{deedcost}, #{deedgems.length} gems chosen with total value of #{sum}, which is %0.1f percent over minimum cost" % [percentover]
		deedgems.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
		respond "\n"
		do_tvdrawer_offering(deedgems)
		num_deeds_done = num_deeds_done + 1

		deedcost = get_next_deed_cost()
	end
	
	dothistimeout "go door", 2, /Tall maoral tree /
	
	Script.run('go2', return_room.to_s)
	
	respond "\n\nGood deeds done: #{num_deeds_done}, now do go something life threatening with them!\n\n"
end

# Start code in main()
main()

