=begin
  maximize your mana, and the mana of those around you.
  Designed to work with GoS and Voln society.
  Will self cast mana bread if known.

  caveats:
    - assumes you don't care about stamina outside of maximizing
      mana

  examples:
    ;battery           - maximizes your personal mana pool
    ;battery <person>  - sends a sustainable amount of mana to the person every minute
  
  version: 0.0.2
  Required: Lich 4.3.12
  Tags: mana, send mana, send, battery
  Author: Ondreian

=end

module Battery
  # let's make autocomplete play nice
  SURGE          = Spell["Adrenal Surge"]
  SURGE_COOLDOWN = Spell["Adrenal Surge Cooldown"]
  MANA_BREAD     = Spell[203]
  SURPLUS        = (mana * 0.25).floor
  POPPED_MUSCLES = Spell["POPed muscles"]

  module Sunfist
    POWER         = Spell["Sigil of Power"]
    CONCENTRATION = Spell["Sigil of Concentration"]

    def self.match?
      POWER.known?
    end
    
    def self.popper
      (checkstamina / 50.00).ceil
    end

    def self.concentrate
      return unless CONCENTRATION.known?
      return if     CONCENTRATION.active? 
      return unless CONCENTRATION.affordable?
      Spell.lock_cast
      CONCENTRATION.cast 
      Spell.unlock_cast
      ttl = Time.now + 5
      wait_until do CONCENTRATION.active? or Time.now > ttl end
    end

    def self.powerup
      return unless POWER.known?
      return if POPPED_MUSCLES.active?
      while POWER.affordable? && percentmana < 80
        POWER.cast 
        sleep 1
      end
    end
    
    def self.recover_critical_low
      return unless POWER.known?
      return unless SURGE.known?
      return if POPPED_MUSCLES.active?
      unless percentmana > 40 || SURGE_COOLDOWN.active?
        popper.times do 
          fput "sigil power"
          sleep 1
        end
        Battery.adrenaline
      end
    end

    def self.run()
      loop do
        Battery.adrenaline()
        Sunfist.concentrate()
        Battery.bake()
        recover_critical_low
        powerup if (maxmana - checkmana) > 50
        sleep 1
      end
    end
  end

  module Voln
    SYMBOL_MANA          = Spell[9813]
    SYMBOL_MANA_COOLDOWN = Spell[9048]

    def self.match?
      SYMBOL_MANA.known?
    end

    def self.manaup
      SYMBOL_MANA.cast unless SYMBOL_MANA_COOLDOWN.active? || mana > (maxmana - 50)
    end

    def self.run
      loop do
        wait_while do cutthroat? end
        Battery.bake
        recover_critical_low
        manaup if (maxmana - checkmana) > 50
        sleep 0.1
      end
    end

    def self.recover_critical_low
      manaup
    end
  end

  def self.adrenaline
    SURGE.cast() if POPPED_MUSCLES.active? && SURGE.affordable? && SURGE.known?
  end
  
  def self.bake
    return unless Script.current.vars.include?("--bread")
    return if Char.right.tags.include?("weapon")
    return if Char.total_wound_severity > 0
    return unless MANA_BREAD.known?
    unless MANA_BREAD.active?
      empty_left_hand if Char.left && Char.right

      hand = Char.right ? :left : :right

      MANA_BREAD.cast
      2.times do fput "gobble ##{Char.send(hand).id}" end
      fill_hands
    end
  end

  def self.loose_find_person(target = Script.current.vars.last)
    GameObj.pcs.find do |pc|
      pc.name.downcase =~ /#{target}/i
    end
  end

  def self.send(person, amount = SURPLUS)
    fput "send #{amount} ##{person.id}"
  end
end

unless Script.current.vars.last.nil? or Script.current.vars.last.start_with?("--")
  person = Script.current.vars.last
  def target
    Battery.loose_find_person
  end

  if target.nil?
    respond "[battery.exit] #{person} not found"
    exit
  else
    respond "[battery.info] powering #{target}"
  end

  send_thread = Thread.new do
    loop do
      # if they left the room to run an errand
      # don't freak out you clingy puff-ball
      if target.nil?
        respond "[battery.info] waiting for #{person} to return..."
        wait_while do target.nil? end
      end
      if percentmana > 50
        Battery.send(target)
      end
      sleep 45
    end
  end

  before_dying {
    send_thread.join.kill
  }
end

if Battery::Sunfist.match?
  Battery::Sunfist.run
end

if Battery::Voln.match?
  Battery::Voln.run
end