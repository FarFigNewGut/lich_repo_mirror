#quiet
=begin

  healbot_actions.lic: Companion script to healbot_core - maintains collection of commands

        author: Elanthia-Online
  contributors: Athias
          game: Gemstone
          tags: utility, shattered, automated
       version: 1.0.1
      required: Lich >= 4.6.58
        source: https://github.com/elanthia-online/scripts

  notes:
    This script is intended to be completely automated
    AFK scripting a violation of ToS, and this script is only intended for use in Shattered

  Healbot Actions:
    transfer  - transfer wounds from (character)
    sendmana  - send mana to (character)
    givebread - give mana bread to (character)
    healdown  - healwounds until they are rank 1 or less
    eatbread  - eats mana bread if needed

=end

hide_me

# Base Variables
hb_command = script.vars[1]
hb_target = script.vars[2]
healbot_actions = Array.new
healbot_actions = ["transfer", "sendmana", "waggleme", "givebread", "healdown", "eatbread"]


# Commands Class
#
# defines all of the commands that 
class Commands

  ####################
  # command transfer #
  ####################

  def transfer(character)

    # transfer variables
    transfer_list = Array.new
    transfer_list = []
    exclude_list = ["Drasik"]
    done = false
    blood_only = nil

    if exclude_list.include?(character)
      # TODO: Change this to work based on variables
      exit
    end

    get_injuries = proc {
      appraisal = dothistimeout "appraise #{character}", 3, /You take a quick appraisal of|APPRAISE TARGET/
      if appraisal =~ /APPRAISE TARGET/
        exit
      end
      if appraisal =~ /head/ then transfer_list.push("head") end
      if appraisal =~ /right eye/ then transfer_list.push("right eye") end
      if appraisal =~ /left eye/ then transfer_list.push("left eye") end
      if appraisal =~ /neck/ then transfer_list.push("neck") end
      if appraisal =~ /chest/ then transfer_list.push("chest") end
      if appraisal =~ /back/ then transfer_list.push("back") end
      if appraisal =~ /abdomen|abdominal/ then transfer_list.push("abdomen") end
      if appraisal =~ /twitching|convulsions/ then transfer_list.push("nerves") end
      if appraisal =~ /right arm/ then transfer_list.push("right arm") end
      if appraisal =~ /right hand/ then transfer_list.push("right hand") end
      if appraisal =~ /right leg/ then transfer_list.push("right leg") end
      if appraisal =~ /left arm/ then transfer_list.push("left arm") end
      if appraisal =~ /left hand/ then transfer_list.push("left hand") end
      if appraisal =~ /left leg/ then transfer_list.push("left leg") end
      if transfer_list.empty?
        blood_only = true
        transfer_list.push("blood")
      else
        blood_only = false
        transfer_list.push("blood")
      end
    }

    transfer_injuries = proc {
      transfer_list.each { |wound|
        tricky = dothistimeout "transfer #{character} #{wound}", 3, /meets with your standards of conduct|gradually fades|Transfer from whom?|You must heal your own,|You strain to do the transfer, but it doesn't work|You draw the minor wound afflicting|does not appear to be suffering from a lack of blood.|Your connection to your spirit with \w+ is too weak to act on/
        if tricky =~ /meets with your standards of conduct|Your connection to your spirit with/
          put "transfer #{character} #{wound}"
        elsif tricky =~ /You must heal your own/
          Script.run('heal_down')
          break
        elsif tricky=~ /Transfer from whom?|Your connection to your spirit with \w+ is too weak to act on/
          break
        end
        sleep 0.5 if !blood_only
      } 
      done = true
    }

    until done || !checkpcs.include?(character)
      get_injuries.call
      transfer_injuries.call
      if !blood_only
        # TODO: Change this to work based on vars
        if character == "Sarcasm"
          fput "say ::#{character} beep, boop, Robot love sexy time!" if checkpcs.include?(character)
        elsif character == "Mitch"
          fput "say ::#{character} beep, boop, Beaver love happy time!" if checkpcs.include?(character)
        else
          fput "say ::#{character} beep, boop, you are healed!" if checkpcs.include?(character)
        end
      end
    end
  end

  ####################
  # command waggleme #
  ####################

  def waggleme(character)
    buff_spells = ["101", "103", "107", "202"]

    buff_spells.each { |cur_spell|
      if Spell[cur_spell].known?
        if !buff_list
          buff_list = cur_spell
          buff_cost = cur_spell.split(//).last(2).join.to_i
        else
          buff_list = buff_list + "," + cur_spell
          buff_cost = buff_cost + 
    cur_spell.split(//).last(2).join.to_i
        end
      end
    }

    if ((checkmana - buff_cost)*100/maxmana) >= 50 && ( character != checkname )
    echo "buffing #{character}"
    start_script "waggle", ["--cast-list=#{buff_list}", "--start-at=10", "--stop-at=20", "--stop-before=250", "--skip-jerks=off", "#{character}"]
    else
      fput "say ::#{character} I need mana first"
    end
  end

  #####################
  # command givebread #
  #####################

  def givebread(character)

    if checkright != nil
      if checkleft != nil
        respond "*****"
        respond "* ERROR: Holding multiple items, please check"
        respond "*****"
        exit
      end
    end

    if Spell[203].affordable?
      waitcastrt?
      multifput "prep 203","summon travel biscuit"
      fput "give biscuit to #{character}"
      accepted = matchtimeout 3, /has accepted your offer and is now holding a/
      if !accepted
        fput "cancel"
        fput "put biscuit in fissure"
      end
    end
  end

  ####################
  # command sendmana #
  ####################

  def sendmana(character)
    cur_mana = checkmana
    if checkpcs.include?(character)
      if ( cur_mana.to_i >= 150 )
        fput "send 50 #{character}"
      else
        fput "say ::#{character} beep, boop, Batteries are low!"
      end
    end
  end

  ####################
  # command healdown #
  ####################

  def healdown(character)
    fput "'beep, boop, activating system refresh!"

    leave_minors = ["neck","chest","back","abdomen","right leg","left leg","right arm","right leg"]           

    cure_wound = proc { |loc|
      if loc =~ /right/
        loc = loc.gsub(/(?<=[a-z])(?=[A-Z])/, ' ')
      elsif loc =~ /left/
        loc = loc.gsub(/(?<=[a-z])(?=[A-Z])/, ' ')
      elsif loc =~ /nsys/
        loc = "nerves"
      end
      if mana < 20
        fput "tap"
        wait_until {mana > 20}
      end
      fput "cure #{loc}"
      sleep 0.2
      waitrt?
      waitcastrt?
    }
    XMLData.injuries.keys.each {|location|
      if XMLData.injuries[location]["wound"] > 1 
        until XMLData.injuries[location]["wound"] <= 1 
          cure_wound.call(location)
        end
      end
      if !leave_minors.include?(location)
        until XMLData.injuries[location]["wound"] == 0 
          cure_wound.call(location)
        end
      end
      if XMLData.injuries[location]["scar"] > 1 
        until XMLData.injuries[location]["scar"] <= 1 
          cure_wound.call(location)
        end
      end
      if !leave_minors.include?(location)
        until XMLData.injuries[location]["scar"] == 0 
          cure_wound.call(location)
        end
      end
    }

    until health == maxhealth
      cure_wound.call("blood")
    end
  end

  def eatbread(character)

      bread_types = /manna bread|ground acorn bread|tiered honey-infused flatbread|loaf of dark bread|baked thyme-dusted flatbread|dense wheat cracker|black buckwheat cracker|crispy rye cracker|flaky salted cracker|nutty wheat cracker|scored peppercorn flatbread|airy pale-colored teacake|dark-swirled rye crisps|black olive-laden bread|mushroom and potato cake|dark crusty ale bread|golden dwarf bread|crispy elven waybread|golden elven waybread|brown elven waybread|lemongrass biscuit|rose-infused rice bread|petal-wrapped oatcake|garlic-laced sweet corn cake|squash blossom fritter|pineapple-glazed pumpkin loaf|cheese-filled manioc ball|cracked wheat bread|travel biscuit|filled piece of bread|piece of sea biscuit|seal meat and oat bread|willow paste bread|reddish cream-filled tart|brownish cream-filled tart|spinach-paste steamed dumpling|oblong fried dumpling|sugared barley and oat cake|sundried tomato and garlic loaf|onion and garlic-stuffed bread|thin crisp of hummus-topped bread|blue and yellow ground cornmeal|small wild rice and millet cake|round of fried dough|wafer of candied seeds/

    if checkright != nil
      if checkleft != nil
        respond "*****"
        respond "* ERROR: Holding multiple items, please check"
        respond "*****"
        exit
      end
    end
   
    if Spell[203].timeleft < 900 && Spell[203].affordable?
      cast 203
      if GameObj.right_hand.name =~ bread_types
        until checkright == nil
          dothistimeout "eat my #{GameObj.right_hand.noun}", 2, /You take a bite of your/
          sleep 0.2
        end
      elsif GameObj.left_hand.name =~ bread_types
        until checkleft == nil
          dothistimeout "eat my #{GameObj.left_hand.noun}", 2, /You take a bite of your/
          sleep 0.2
        end
      end
    end
  end

  # End of healbot_commands
end

# Initialize Class
hb_commands = Commands.new

# Make sure RT is observed firs
waitrt?
waitcastrt?

# Run the script
if hb_command && hb_target
  if healbot_actions.include?(hb_command)
    hb_commands.send(hb_command, hb_target)
  else
    respond "*****"
    respond "*"
    respond "* ERROR: Healbot command does not exist"
    respond "*"
    respond "* hb_command: #{hb_command}"
    respond "* hb_target: #{hb_target}"
    respond "*"
    respond "*****"
  end
else
  respond "*****"
  respond "*"
  respond "* ERROR: Healbot action or target not defined"
  respond "*"
  respond "* hb_command: #{hb_command}"
  respond "* hb_target: #{hb_target}"
  respond "*"
  respond "*****"
end

