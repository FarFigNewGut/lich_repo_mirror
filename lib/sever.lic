=begin
  Sever - Stop all un-known spells except the listed entries.  Useful for choosing which spell(s) to keep active in a spell sever area.

             author: LostRanger (thisgenericname@gmail.com)
              game: Gemstone
              tags: utility, inventory, 
           required: Lich > 5.0.1
			version: 0.0.1

  changelog:
    version 0.1 (2022-07-28)
      * Initial release
=end

module SeverScript
    VERSION = '0.0.1 BETA (2022-07-28)'
    VERSION_INT = 0_000_001

    def self.usage
        cmd = "#{$lich_char}#{@script.name}"
        msg = [
            "Usage: #{cmd} CHECK",
            "       List all active spells believed subject to spell sever.",
            "",
            "       #{cmd} ALL",
            "       Stop all severable spells.",
            "",
            "       #{cmd} spell1 spell2 spell3 ... [FORCE]",
            "       Stop all severable spells except the listed ones.",
            "       If any of the specified spells is not active, nothing will be stopped.  Use FORCE to override that.",
            "",
            "Spells may be listed by number or name; partial name matching is allowed provided that only one spell matches.",
            "Use quotes to indicate spell names that are multiple words, e.g:\n  #{cmd} Strength \"Spirit Warding II\"",
            "",
            "This script is unaware of hostile spell effects and will attempt to stop them.",
        ]
        respond msg
    end

    def self.format_spell(spell)
        return "(#{spell.num})".rjust(8) + " #{spell.name}"
    end

    def self.run(script)
        self.show_changelog
        @script = script
        vars = script.vars
        vars.delete_at(0)
        vars.map!(&:downcase)
        cmd = "#{$lich_char}#{script.name}"

        if vars.empty?
            return self.usage
        end

        # Build a list of severable spells.
        severable_spells = Spell.active.find_all{|x| x.num > 100 && x.num < 1700 && !x.known?}

        if vars.any?("check")
            if severable_spells.empty?
                echo "No severable spells found!"
                return
            end

            msg = [
                "Potentially severable spell#{severable_spells.count == 1 ? '' : 's'}:", "",
            ]
            severable_spells.each {|spell| msg << self.format_spell(spell)}
            respond msg
            return
        end

        exempted_spells = Set.new
        force = !(vars.delete('force')).nil?
        unless vars.any?("all")
            vars.each do |term|
                num = term.to_i
                pattern = Regexp.new(term.split(/\s+/).join(".*\\s+.*"), Regexp::IGNORECASE)
                matching_spells = severable_spells.find_all{|spell| (num != 0 && spell.num == num) || pattern =~ spell.name}

                if matching_spells.count > 1
                    msg = [
                        "Found multiple matching spells for \"#{term}\":", "",
                    ]
                    matching_spells.each {|spell| msg << self.format_spell(spell) }
                    respond msg
                end

                if matching_spells.empty?
                    echo "No spell found matching #{term}."
                    unless force
                        return
                    end
                else
                    exempted_spells.add(matching_spells[0].num)
                end
            end
        end

        severable_spells.each do |spell|
            unless exempted_spells.include?(spell.num) 
                fput "stop #{spell.num}"
            end
        end
    end

    def self.show_changelog
        prev = GameSettings[:current_version] || 0

        changelog = {
            0_000_001 => [
                "Version 0.0.1 changes (2022-07-28):",
                '',
                "  * Initial release.",
            ],
        }

        if prev != VERSION_INT
            msg = []
            msg << "<preset id='speech'>--------------------</preset>"
            msg << "<preset id='speech'>Welcome to #{$lich_char}#{@script.name}</preset> <preset id='whisper'>#{VERSION}</preset>"
            msg << ''
            changelog.each do |version, notes|
                if version > prev or version == VERSION_INT
                    msg << "<preset id='whisper'>#{notes[0]}</preset>"
                    msg += notes[1..-1]
                    msg << ''
                end
            end
            msg << '<output class="mono" />'
            msg << "For a more detailed changelog: <d>#{$lich_char}repo info #{@script.name}</d>."
            msg << "To enable automatic updates:   <d>#{$lich_char}repo set-updatable #{@script.name}</d>`."
            # msg << "For details on new features:   <d>#{$lich_char}#{@script.name} help</d>"
            # msg << "                   or visit:   #{HELP_URL}"
            msg << "For more LostRanger scripts:   https://bit.ly/lostranger-scripts"
            msg << '<output class="" />'
            msg << ''
            msg << "This message will only be displayed once unless a new version is downloaded."
            msg << "<preset id='speech'>--------------------</preset>"
            _respond msg
            GameSettings[:current_version] = VERSION_INT
            sleep 1.5
        end
    end
end

SeverScript.run(script)
