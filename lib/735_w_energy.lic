=begin
	Modified by Dantax to track energy

	Always leave this script running (add to your favs list), whenever you prepare 735 the script will run a check on all positive/negative variables that are under your control (wounds, workshop, spirit) and it will inform you of what you should correct before proceeding with your 735 cast to make sure you have the best possible chance to successfully ensorcell your item. The script will also give you a base percentage chance of success (this is just a guess on my part, no data has gone into this guess) when you first channel at an item. Script will also keep track of successful and failed casts and will give you your own observed success rate the next time you do a first channel at an item.

	Script will also keep track of your current week's and previous week's kills to help determine how many kills you need to reach your weekly cap, read the usage below for how this works. If you have the option set to receive after kill stats the script will also remind you every 50 kills to cast 735 to check to see if you have reached your cap for the week.

	Usage:
	Simply prepare 735 and cast at yourself or at an item for stats about your success rate with 735.
	Type "ens on" to show stats after each kill.
	Type "ens off" to turn off stats after each kill.
	Type "ens remind on" to remind you to cast 735 after every 50 kills.
	Type "ens remind off" to stop reminding you to cast 735 after every 50 kills.
	Type "ens stats" to show all stats from current week and previous week.
	Type "ens reset" to reset ALL stats for current week. It is not recommended to use this option but it's here in case you want it.
	Type "ens begin" after your first kill that yields experience after your gift has started for the week to start the script tracking your kills for the week.
	Type "ens end" when you have reached your energy cap for the week so the script stops keeping track for the week.
	Type "ens help" for help.

=end

critters = { "black rolton" => 1, "black-winged daggerbeak" => 1, "carrion worm" => 1, "fanged rodent" => 1, "fire ant" => 1, "giant ant" => 1, "giant rat" => 1, "kobold" => 1, "lesser ghoul" => 1, "mountain rolton" => 1, "rolton" => 1, "skeleton" => 1, "slimy little grub" => 1, "spotted gnarp" => 1, "young grass snake" => 1, "zombie rolton" => 1, "mistydeep siren" => 2, "big ugly kobold" => 2, "brown gak" => 2, "cave gnome" => 2, "fanged goblin" => 2, "ghost" => 2, "goblin" => 2, "lesser frost shade" => 2, "lesser shade" => 2, "moaning phantom" => 2, "pale crab" => 2, "phantom" => 2, "rabid squirrel" => 2, "sea nymph" => 2, "spotted gak" => 2, "thyril" => 2, "bresnahanini rolton" => 3, "cave gnoll" => 3, "cave nipper" => 3, "dark vysan" => 3, "fire salamander" => 3, "greater ghoul" => 3, "greater ice spider" => 3, "hobgoblin" => 3, "ice skeleton" => 3, "kobold shepherd" => 3, "mountain snowcat" => 3, "relnak" => 3, "spotted velnalin" => 3, "striped gak" => 3, "striped relnak" => 3, "troglodyte" => 3, "velnalin" => 3, "white vysan" => 3, "black urgh" => 4, "cobra" => 4, "fanged viper" => 4, "mongrel kobold" => 4, "revenant" => 4, "ridge orc" => 4, "spotted leaper" => 4, "urgh" => 4, "water moccasin" => 4, "whiptail" => 4, "bobcat" => 5, "coyote" => 5, "dark apparition" => 5, "mist wraith" => 5, "mongrel hobgoblin" => 5, "nasty little gremlin" => 5, "night golem" => 5, "water witch" => 5, "cockatrice" => 6, "firephantom" => 6, "leaper" => 6, "lesser mummy" => 6, "lesser orc" => 6, "monkey" => 6, "snowy cockatrice" => 6, "spectral fisherman" => 6, "spotted lynx" => 6, "blood eagle" => 7, "greater kappa" => 7, "hobgoblin shaman" => 7, "lesser burrow orc" => 7, "lesser red orc" => 7, "shelfae soldier" => 7, "albino tomb spider" => 8, "bone golem" => 8, "crystal crab" => 8, "greater burrow orc" => 8, "greater orc" => 8, "greater spider" => 8, "mottled thrak" => 8, "thrak" => 8, "brown spinner" => 9, "crocodile" => 9, "death dirge" => 9, "manticore" => 9, "snow spectre" => 9, "cave worm" => 10, "giant marmot" => 10, "gnoll worker" => 10, "great boar" => 10, "rabid guard dog" => 10, "raider orc" => 10, "werebear" => 10, "neartofar orc" => 11, "shelfae chieftain" => 11, "wall guardian" => 11, "crystal golem" => 12, "dark orc" => 12, "darkwoode" => 13, "deranged sentry" => 13, "gnoll thief" => 13, "great stag" => 13, "plumed cockatrice" => 13, "tawny brindlecat" => 13, "agresh troll scout" => 14, "black boar" => 14, "brown boar" => 14, "forest troll" => 14, "giant weasel" => 14, "great brown bear" => 14, "grey orc" => 14, "silverback orc" => 14, "shadowy spectre" => 14, "specter" => 14, "swamp troll" => 14, "arctic puma" => 15, "black leopard" => 15, "gnoll ranger" => 15, "humpbacked puma" => 15, "large ogre" => 15, "luminescent arachnid" => 15, "neartofar troll" => 15, "panther" => 15, "puma" => 15, "wraith" => 15, "ridgeback boar" => 15, "tomb wight" => 15, "wolfshade" => 15, "agresh bear" => 16, "agresh troll warrior" => 16, "banded rattlesnake" => 16, "black bear" => 16, "cave troll" => 16, "fire guardian" => 16, "fire rat" => 16, "ghost wolf" => 16, "ghoul master" => 16, "hill troll" => 16, "mongrel troll" => 16, "mongrel wolfhound" => 16, "mountain ogre" => 16, "phosphorescent worm" => 16, "plains orc warrior" => 16, "red bear" => 16, "wind witch" => 16, "black panther" => 17, "dark shambler" => 17, "forest ogre" => 17, "giant veaba" => 17, "gnoll guard" => 17, "krolvin mercenary" => 17, "mountain goat" => 17, "mountain troll" => 17, "plains ogre" => 17, "plains orc scout" => 17, "spiked cavern urchin" => 17, "bighorn sheep" => 18, "cave lizard" => 18, "elder ghoul master" => 18, "fire cat" => 18, "ghostly warrior" => 18, "greenwing hornet" => 18, "mountain lion" => 18, "nedum vereri" => 18, "plains lion" => 18, "plains orc shaman" => 18, "rotting krolvin pirate" => 18, "shelfae warlord" => 18, "thunder troll" => 18, "war troll" => 18, "krolvin warrior" => 19, "agresh troll chieftain" => 20, "arch wight" => 20, "gnoll priest" => 20, "major spider" => 20, "massive grahnk" => 20, "ogre warrior" => 20, "steel golem" => 20, "striped warcat" => 20, "wood wight" => 20, "ancient ghoul master" => 21, "arachne servant" => 21, "cave bear" => 21, "plains orc chieftain" => 21, "cougar" => 22, "crested basilisk" => 22, "dark panther" => 22, "warthog" => 22, "arachne acolyte" => 23, "centaur" => 23, "centaur ranger" => 23, "crazed zombie" => 23, "fenghai" => 23, "niirsha" => 23, "nonomino" => 23, "rotting woodsman" => 23, "zombie" => 23, "arctic wolverine" => 24, "burly reiver" => 24, "giant albino scorpion" => 24, "ice hound" => 24, "night hound" => 24, "reiver" => 24, "roa'ter wormling" => 24, "roa'ter wormling" => 24, "veteran reiver" => 24, "wolverine" => 24, "carceris" => 25, "gnoll jarl" => 25, "krolvin warfarer" => 25, "sacristan spirit" => 25, "spectral monk" => 25, "arachne priest" => 26, "arachne priestess" => 26, "jungle troll" => 26, "tree spirit" => 26, "grutik savage" => 27, "cyclops" => 27, "frenzied monk" => 27, "lesser stone gargoyle" => 27, "monastic lich" => 27, "snow leopard" => 27, "troll chieftain" => 27, "darken" => 28, "dobrem" => 28, "fire ogre" => 28, "giant hawk-owl" => 28, "ki-lin" => 28, "martial eagle" => 28, "moaning spirit" => 28, "grutik shaman" => 29, "arctic manticore" => 29, "ice troll" => 29, "pra'eda" => 29, "scaly burgee" => 29, "elder tree spirit" => 30, "giant albino tomb spider" => 30, "hisskra warrior" => 30, "hooded figure" => 30, "hunter troll" => 30, "jungle troll chieftain" => 30, "lesser wood sprite" => 30, "mammoth arachnid" => 30, "tegursh sentry" => 30, "ash hag" => 31, "krynch" => 31, "skeletal ice troll" => 31, "wild hound" => 31, "caribou" => 32, "ghostly mara" => 32, "giant fog beetle" => 32, "rotting corpse" => 32, "rotting farmhand" => 32, "ghostly pooka" => 33, "hisskra shaman" => 33, "maw spore" => 33, "mezic" => 33, "moor hound" => 33, "sand beetle" => 33, "skeletal giant" => 33, "three-toed tegu" => 33, "cold guardian" => 34, "colossus vulture" => 34, "hisskra chieftain" => 34, "lava troll" => 34, "moor witch" => 34, "rock troll zombie" => 34, "skeletal soldier" => 34, "spectral warrior" => 34, "tundra giant" => 34, "barghest" => 35, "bog troll" => 35, "moor eagle" => 35, "shimmering fungus" => 35, "spectral shade" => 35, "spectral woodsman" => 35, "troll wraith" => 35, "water wyrd" => 35, "arctic titan" => 36, "dust beetle" => 36, "fire giant" => 36, "krolvin slaver" => 36, "snow crone" => 36, "spectral lord" => 36, "undertaker bat" => 36, "sheruvian initiate" => 37, "huge mein golem" => 37, "lesser moor wight" => 37, "magru" => 37, "shadow mare" => 37, "skeletal warhorse" => 37, "tusked ursian" => 37, "frost giant" => 38, "grizzly bear" => 38, "krolvin corsair" => 38, "mud wasp" => 38, "shadow steed" => 38, "vesperti" => 38, "wood sprite" => 38, "greater bog troll" => 39, "greater moor wight" => 39, "stone gargoyle" => 39, "storm giant" => 39, "vourkha" => 39, "forest bendith" => 40, "kiramon worker" => 40, "myklian" => 40, "spectral miner" => 40, "Sheruvian monk" => 41, "bog wraith" => 41, "lesser ice giant" => 41, "roa'ter" => 41, "skeletal lord" => 41, "baesrukha" => 42, "dark vortece" => 42, "frozen corpse" => 42, "minor glacei" => 42, "phantasma" => 42, "shan cleric" => 42, "shan ranger" => 42, "shan warrior" => 42, "shan wizard" => 42, "siren lizard" => 42, "swamp hag" => 42, "dreadnought raptor" => 43, "night mare" => 43, "wasp nest" => 43, "bog wight" => 44, "firethorn shoot" => 44, "forest trali shaman" => 44, "gaunt spectral servant" => 44, "mastodonic leopard" => 44, "polar bear" => 44, "ice wraith" => 45, "lesser vruul" => 45, "cinder wasp" => 46, "forest trali" => 46, "greater ice giant" => 46, "kiramon defender" => 46, "lesser faeroth" => 46, "otting chimera" => 46, "bog spectre" => 47, "major glacei" => 47, "dybbuk" => 48, "horned vor'taz" => 48, "red-scaled thrak" => 48, "sand devil" => 48, "warrior shade" => 48, "waern" => 49, "banshee" => 50, "flesh golem" => 50, "greater faeroth" => 50, "seeker" => 52, "snow madrinol" => 52, "tomb troll" => 52, "wooly mammoth" => 52, "ice golem" => 53, "lesser ice elemental" => 53, "sabre-tooth tiger" => 53, "stone sentinel" => 53, "animated slush" => 54, "ethereal mage apprentice" => 54, "skayl" => 54, "tomb troll necromancer" => 54, "eidolon" => 55, "nightmare steed" => 55, "stone troll" => 55, "decaying Citadel guardsman" => 56, "glacial morph" => 56, "lava golem" => 56, "massive pyrothag" => 58, "rotting Citadel arbalester" => 58, "stone giant" => 58, "black forest viper" => 59, "massive black boar" => 59, "winged viper" => 60, "black forest ogre" => 60, "fire elemental" => 60, "putrefied Citadel herald" => 60, "wind wraith" => 61, "Illoke mystic" => 62, "phantasmal bestial swordsman" => 62, "stone mastiff" => 62, "Sheruvian harbinger" => 63, "ice elemental" => 63, "massive troll king" => 63, "soul golem" => 63, "fire sprite" => 64, "grifflet" => 64, "emaciated hierophant" => 66, "red tsark" => 66, "Illoke shaman" => 67, "muscular supplicant" => 67, "yeti" => 67, "lesser griffin" => 69, "hunch-backed dogmatist" => 70, "krag yeti" => 70, "fire mage" => 71, "krag dweller" => 72, "storm griffin" => 73, "lesser minotaur" => 74, "greater vruul" => 75, "moulis" => 75, "naisirc" => 75, "minotaur warrior" => 76, "shrickhen" => 76, "farlook" => 77, "aving lunatic" => 77, "dhu goleras" => 78, "minotaur magus" => 78, "seraceris" => 78, "Vvrael witch" => 80, "Csetairi" => 81, "caedera" => 82, "earth elemental" => 82, "gnarled being" => 82, "bent being" => 82, "stooped being" => 82, "twisted being" => 82, "lesser construct" => 83, "Vvrael warlock" => 84, "greater krynch" => 84, "gremlock" => 84, "lich qyn'arj" => 84, "Illoke elder" => 86, "aivren" => 86, "festering taint" => 86, "n'ecare" => 87, "greater earth elemental" => 88, "Illoke jarl" => 89, "Ithzir scout" => 89, "Ithzir initiate" => 91, "lost soul" => 91, "Ithzir janissary" => 92, "water elemental" => 92, "Ithzir herald" => 93, "vaespilon" => 93, "triton dissembler" => 94, "Ithzir adept" => 96, "greater construct" => 96, "siren" => 96, "triton executioner" => 96, "fallen crusader" => 97, "Ithzir seer" => 97, "spectral triton defender" => 98, "triton combatant" => 98, "glistening cerebralite" => 100, "triton radical" => 100, "war griffin" => 100, "triton magus" => 102, "enormous rift crawler" => 103, "ethereal triton sentry" => 103, "darkly inked fetish master" => 104, "greater water elemental" => 105, "murky soul siphon" => 106, "Vvrael destroyer" => 108, "Lich" => 110 }

slnecromancySeeds = { 3 => 1, 10 => 2, 21 => 3, 36 => 4, 55 => 5, 78 => 6, 105 => 7, 136 => 8, 171 => 9, 210 => 10 }
slnecromancyEnergyPerKill = 0;

calcNecroEnergyPerKill = proc {
	slnecromancySeeds.each do|key, value|
		if Skills.slnecromancy >= key
			slnecromancyEnergyPerKill = value
		elsif Skills.slnecromancy < key
			break
		end
	end
}

(message = Array.new;number = 0;chances = 0;CharSettings['success'] = Array.new if CharSettings['success'].nil?;CharSettings['failure'] = Array.new if CharSettings['failure'].nil?;total = 0;test_number = 0;check_workshop = nil;in_workshop = nil;check_stats = nil;wis = nil;int = nil;display_stats = nil;attempt = nil;difficulty = nil;success_or_fail = nil;kill_updated = nil;critter_level = nil;kill_track = Array.new;already_checked = Array.new;silence = nil;critter_stats = nil;new_week = nil)

CharSettings['success'][1] = 0 if CharSettings['success'][1].nil?
CharSettings['failure'][1] = 0 if CharSettings['failure'][1].nil?
CharSettings['success'][2] = 0 if CharSettings['success'][2].nil?
CharSettings['failure'][2] = 0 if CharSettings['failure'][2].nil?
CharSettings['success'][3] = 0 if CharSettings['success'][3].nil?
CharSettings['failure'][3] = 0 if CharSettings['failure'][3].nil?
CharSettings['success'][4] = 0 if CharSettings['success'][4].nil?
CharSettings['failure'][4] = 0 if CharSettings['failure'][4].nil?
CharSettings['success'][5] = 0 if CharSettings['success'][5].nil?
CharSettings['failure'][5] = 0 if CharSettings['failure'][5].nil?
CharSettings['success'][6] = 0 if CharSettings['success'][6].nil?
CharSettings['failure'][6] = 0 if CharSettings['failure'][6].nil?
CharSettings['success'][7] = 0 if CharSettings['success'][7].nil?
CharSettings['failure'][7] = 0 if CharSettings['failure'][7].nil?
CharSettings['success'][8] = 0 if CharSettings['success'][8].nil?
CharSettings['failure'][8] = 0 if CharSettings['failure'][8].nil?
CharSettings['success'][9] = 0 if CharSettings['success'][9].nil?
CharSettings['failure'][9] = 0 if CharSettings['failure'][9].nil?
CharSettings['critter_level_acceptable_counter'] = 0 if CharSettings['critter_level_acceptable_counter'].nil?
CharSettings['unknown_critter_level_counter'] = 0 if CharSettings['unknown_critter_level_counter'].nil?
CharSettings['critter_level_too_low_counter'] = 0 if CharSettings['critter_level_too_low_counter'].nil?
CharSettings['acceptable_critters_killed'] = Hash.new if CharSettings['acceptable_critters_killed'].nil?
CharSettings['unknown_level_critters_killed'] = Hash.new if CharSettings['unknown_level_critters_killed'].nil?
CharSettings['low_level_critters_killed'] = Hash.new if CharSettings['low_level_critters_killed'].nil?
CharSettings['stats_checker_threshold'] = 50 if CharSettings['stats_checker_threshold'].nil?
CharSettings['max_weekly_energy'] = nil if CharSettings['max_weekly_energy'].nil?
CharSettings['last_week_max_weekly_energy'] = nil if CharSettings['last_week_max_weekly_energy'].nil?
CharSettings['after_kill_stats'] = "yes" if CharSettings['after_kill_stats'].nil?
CharSettings['last_week_critter_level_acceptable_counter'] = 0 if CharSettings['last_week_critter_level_acceptable_counter'].nil?
CharSettings['last_week_unknown_critter_level_counter'] = 0 if CharSettings['last_week_unknown_critter_level_counter'].nil?
CharSettings['last_week_critter_level_too_low_counter'] = 0 if CharSettings['last_week_critter_level_too_low_counter'].nil?
CharSettings['last_week_acceptable_critters_killed'] = Hash.new if CharSettings['last_week_acceptable_critters_killed'].nil?
CharSettings['last_week_unknown_level_critters_killed'] = Hash.new if CharSettings['last_week_unknown_level_critters_killed'].nil?
CharSettings['last_week_low_level_critters_killed'] = Hash.new if CharSettings['last_week_low_level_critters_killed'].nil?
CharSettings['last_week_necromancy_lore'] = nil if CharSettings['last_week_necromancy_lore'].nil?
CharSettings['last_week_current_level'] = nil if CharSettings['last_week_current_level'].nil?
CharSettings['reminder_to_cast_735'] = "yes" if CharSettings['reminder_to_cast_735'].nil?
critter_id = nil
critter_name = nil
silence_me
status_tags
toggle_upstream

Thread.new{
	loop{
		command = upstream_get
		if command =~ /ens stats/i
			calcNecroEnergyPerKill.call
			silence.call
			respond "CURRENT WEEK:"
			respond "Can gain more energy this week: YES" if CharSettings['max_weekly_energy'] != "yes"
			respond "Can gain more energy this week: NO" if CharSettings['max_weekly_energy'] == "yes"
			respond "Current level: #{Stats.level}"
			respond "Current Necromancy Lore ranks: #{Skills.slnecromancy}"
			respond "Current Necromancy Lore bonus energy per kill: #{slnecromancyEnergyPerKill}"
			respond "Critters killed within level range: #{CharSettings['critter_level_acceptable_counter']}"
			respond "Critters killed of unknown level: #{CharSettings['unknown_critter_level_counter']}"
			respond "Critters killed of too low level: #{CharSettings['critter_level_too_low_counter']}"
			respond "\n"
			respond "Critters within level range killed:"
			myEnergy = 0
			totalNecroLoreBonus = 0
			CharSettings['acceptable_critters_killed'].each do|key, value|
				respond "#{key}: #{value}"
				
				if key =~ /(level (\d+))/
					creatureLevel = $2.to_i
					energyFromCreatureLevel = [10 + creatureLevel - Stats.level, 20].min
					necroLoreBonus = [slnecromancyEnergyPerKill, energyFromCreatureLevel].min
					totalCreatureNecroLoreBonus = necroLoreBonus * value.to_i
					totalNecroLoreBonus += totalCreatureNecroLoreBonus
					currentCreatureEnergy = [energyFromCreatureLevel + necroLoreBonus, 30].min
					respond "Necro lore bonus per kill: #{necroLoreBonus}"
					
					totalCreatureEnergy += currentCreatureEnergy * value.to_i
					myEnergy += totalCreatureEnergy
					respond "level: #{creatureLevel}"
					respond "Creature Energy: #{currentCreatureEnergy}"
					respond "Total Creature Necro Lore Bonus: #{totalCreatureNecroLoreBonus}"
					respond "Total Creature Energy: #{totalCreatureEnergy}"
					respond "\n"
				end
				
			end
			respond "------------------------------"
			respond "Critters of unknown level killed:"
			CharSettings['unknown_level_critters_killed'].each do|key, value|
				respond "#{key}: #{value}"
			end
			respond "------------------------------"
			respond "Critters too low level killed:"
			CharSettings['low_level_critters_killed'].each do|key, value|
				respond "#{key}: #{value}"
			end
			respond "------------------------------"
			respond "\n"
			respond "Total Necro lore bonus: #{totalNecroLoreBonus}"
			respond "\n"
			respond "Weekly Energy: #{myEnergy} / 10000 (#{myEnergy.to_f / 10000.0 * 100.0}%)"
			respond "\n"
						
			respond "LAST WEEK:"
			respond "Can gain more energy this week: YES" if CharSettings['last_week_max_weekly_energy'] != "yes"
			respond "Can gain more energy this week: NO" if CharSettings['last_week_max_weekly_energy'] == "yes"
			respond "Last week level: #{CharSettings['last_week_current_level']}"
			respond "Last week Necromancy Lore ranks: #{CharSettings['last_week_necromancy_lore']}"
			respond "Critters killed within level range: #{CharSettings['last_week_critter_level_acceptable_counter']}"
			respond "Critters killed of unknown level: #{CharSettings['last_week_unknown_critter_level_counter']}"
			respond "Critters killed of too low level: #{CharSettings['last_week_critter_level_too_low_counter']}"
			respond "\n"
			respond "Critters within level range killed:"
			CharSettings['last_week_acceptable_critters_killed'].each do|key, value|
				respond "#{key}: #{value}"
			end
			respond "------------------------------"
			respond "Critters of unknown level killed:"
			CharSettings['last_week_unknown_level_critters_killed'].each do|key, value|
				respond "#{key}: #{value}"
			end
			respond "------------------------------"
			respond "Critters too low level killed:"
			CharSettings['last_week_low_level_critters_killed'].each do|key, value|
				respond "#{key}: #{value}"
			end
			respond "------------------------------"
		elsif command =~ /ens on/i
			silence.call
			respond "Show stats after each kill: ON"
			CharSettings['after_kill_stats'] = "yes"
		elsif command =~ /ens off/i
			silence.call
			respond "Show stats after each kill: OFF"
			CharSettings['after_kill_stats'] = "no"
		elsif command =~ /ens remind on/i
			silence.call
			respond "Show 735 reminder after every 50 kills: ON"
			CharSettings['reminder_to_cast_735'] = "yes"
		elsif command =~ /ens remind off/i
			silence.call
			respond "Show 735 reminder after every 50 kills: OFF"
			CharSettings['reminder_to_cast_735'] = "no"
		elsif command =~ /ens reset/i
			silence.call
			CharSettings['critter_level_acceptable_counter'] = 0
			CharSettings['unknown_critter_level_counter'] = 0
			CharSettings['critter_level_too_low_counter'] = 0
			CharSettings['acceptable_critters_killed'] = Hash.new
			CharSettings['unknown_level_critters_killed'] = Hash.new
			CharSettings['low_level_critters_killed'] = Hash.new
			respond "Stats have been reset."
		elsif command =~ /ens begin/i
			silence.call
			new_week.call
		elsif command =~ /ens end/i
			silence.call
			echo "Okay, you have reached your max energy for the week!"
			CharSettings['max_weekly_energy'] = "yes"
		elsif command =~ /ens help/i
			silence.call
			respond "Type 'ens on' to show stats after each kill."
			respond "Type 'ens off' to turn off stats after each kill."
			respond "Type 'ens remind on' to remind you to cast 735 after every 50 kills."
			respond "Type 'ens remind off' to stop reminding you to cast 735 after every 50 kills."
			respond "Type 'ens stats' to show all stats from current week and previous week."
			respond "Type 'ens reset' to reset ALL stats for current week. It is not recommended to use this option but it's here in case you want it."
			respond "Type 'ens begin' to start a new week of ensorcelling if script didn't catch that your gift has reset."
			respond "Type 'ens end' when you have reached your energy cap for the week so the script stops keeping track for the week."
			respond "Type 'ens help' for help."
		end
	}
}

Thread.new{
	loop{
		already_checked = Array.new
		sleep 1800
	}
}

Thread.new{
	loop{
		if GameObj.npcs.find{|npc| npc.status =~ /dead/ }
			GameObj.npcs.each{|npc|
				if (npc.status =~ /dead/) && (kill_track.include?(npc.id))
					critter_id = npc.id
					critter_name = npc.name
					kill_track.delete(critter_id)
					already_checked.push(critter_id) unless already_checked.include?(critter_id)
					critter_level = nil
					kill_updated = nil
					critter_stats = nil
					critters.each{|key, value|
						if key == critter_name
							critter_level = value
							critter_stats = "#{key} (level #{value})"
							kill_updated = true
							break
						end
					}
					echo "Killed #{critter_stats}" if CharSettings['after_kill_stats'] == "yes"
					(critter_stats = "#{npc.name} (unknown level)";respond "Killed #{critter_stats}") unless kill_updated if CharSettings['after_kill_stats'] == "yes"
					if critter_level == nil
						CharSettings['unknown_critter_level_counter'] += 1 if CharSettings['max_weekly_energy'] != "yes"
						CharSettings['unknown_level_critters_killed'][critter_stats] += 1 if CharSettings['max_weekly_energy'] != "yes"
					elsif (Stats.level - 9) > critter_level
						CharSettings['critter_level_too_low_counter'] += 1 if CharSettings['max_weekly_energy'] != "yes"
						CharSettings['low_level_critters_killed'][critter_stats] += 1 if CharSettings['max_weekly_energy'] != "yes"
					else
						CharSettings['critter_level_acceptable_counter'] += 1 if CharSettings['max_weekly_energy'] != "yes"
						CharSettings['acceptable_critters_killed'][critter_stats] += 1 if CharSettings['max_weekly_energy'] != "yes"
					end
				end
			}
		end
			#respond "Critters killed within level range: #{CharSettings['critter_level_acceptable_counter']}" if CharSettings['after_kill_stats'] == "yes" and CharSettings['max_weekly_energy'] != "yes"
			#respond "Critters killed of unknown level: #{CharSettings['unknown_critter_level_counter']}" if CharSettings['after_kill_stats'] == "yes" and CharSettings['max_weekly_energy'] != "yes"
			#respond "Critters killed of too low level: #{CharSettings['critter_level_too_low_counter']}" if CharSettings['after_kill_stats'] == "yes" and CharSettings['max_weekly_energy'] != "yes"
			#respond "You have reached your maximum necrotic energy for the week. Type 735 stats to see your kills for the week." if CharSettings['max_weekly_energy'] == "yes" and CharSettings['after_kill_stats'] == "yes"
			#respond "It's been at least 50 kills since you last checked if you reached max energy for the week." if (CharSettings['unknown_critter_level_counter'] + CharSettings['critter_level_too_low_counter'] + CharSettings['critter_level_acceptable_counter']) >= CharSettings['stats_checker_threshold'] and CharSettings['max_weekly_energy'] != "yes" and CharSettings['reminder_to_cast_735'] == "yes"
		sleep 0.1
	}
}

new_week = proc{
	echo "You are gaining energy again."
	CharSettings['last_week_critter_level_acceptable_counter'] = CharSettings['critter_level_acceptable_counter']
	CharSettings['last_week_unknown_critter_level_counter'] = CharSettings['unknown_critter_level_counter']
	CharSettings['last_week_critter_level_too_low_counter'] = CharSettings['critter_level_too_low_counter']
	CharSettings['last_week_acceptable_critters_killed'] = CharSettings['acceptable_critters_killed']
	CharSettings['last_week_unknown_level_critters_killed'] = CharSettings['unknown_level_critters_killed']
	CharSettings['last_week_low_level_critters_killed'] = CharSettings['low_level_critters_killed']
	CharSettings['last_week_max_weekly_energy'] = CharSettings['max_weekly_energy']
	CharSettings['critter_level_acceptable_counter'] = 0
	CharSettings['unknown_critter_level_counter'] = 0
	CharSettings['critter_level_too_low_counter'] = 0
	CharSettings['acceptable_critters_killed'] = Hash.new
	CharSettings['unknown_level_critters_killed'] = Hash.new
	CharSettings['low_level_critters_killed'] = Hash.new
	CharSettings['stats_checker_threshold'] = 50
	CharSettings['max_weekly_energy'] = nil
	CharSettings['last_week_necromancy_lore'] = Skills.slnecromancy
	CharSettings['last_week_current_level'] = Stats.level
}	

silence = proc {
	action = proc { |server_string|
		if server_string =~ /Please rephrase that command./i
			DownstreamHook.remove("#{script.name}_silence")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence", action)
}

display_stats = proc {
	check_stats.call
	respond "------------------------------"
	respond "Level: #{Char.level}"
	respond "Sorcerer spell ranks: #{Spells.sorcerer}"
	respond "Wisdom: #{wis}"
	respond "Intuition: #{int}"
	respond "EMC Ranks: #{Skills.emc}"
	respond "SMC Ranks: #{Skills.smc}"
	respond "Arcane Symbols Ranks: #{Skills.arcanesymbols}"
	respond "Magic Item Use Ranks: #{Skills.magicitemuse}"
	respond "Difficulty: #{difficulty}" if difficulty != nil
	respond "Attempt: #{attempt}" if attempt != nil
	respond "Success!" if success_or_fail == "success"
	respond "Failure!" if success_or_fail == "failure"
	respond "------------------------------"
}

check_workshop = proc {
	action = proc { |server_string|
		if server_string =~ /You attempt to discern any aspects of this room that could affect your ability to pierce the veil in any summoning exploits/i
			DownstreamHook.remove("#{script.name}_check_workshop")
			nil
		elsif server_string =~ /is not a magical workshop/i
			in_workshop = "no"
			nil
		elsif server_string =~ /this room is a magical workshop/i
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_check_workshop", action)
		(waitrt?;fput "sense")
}

check_stats = proc {
	action = proc { |server_string|
		if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Influence \(INF\)\:/
			nil
		elsif server_string =~ /^\s*Wisdom \(WIS\)\:\s+\d+\s+\(\-?\d+\)\s+\.\.\.\s+(\d+)\s+\(\-?\d+\)/i
			wis = $1
			nil
		elsif server_string =~ /^\s*Intuition \(INT\)\:\s+\d+\s+\(\-?\d+\)\s+\.\.\.\s+(\d+)\s+\(\-?\d+\)/i
			int = $1
			nil
		elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
			DownstreamHook.remove("#{script.name}_check_stats")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_check_stats", action)
		fput "info"
}

while line = get
	if line =~ /You begin drawing a faint, twisting symbol while softly intoning the words for Ensorcell|Mirage\-like distortions surround you as you prepare the Ensorcell spell\.\.\./i
		(message = Array.new;number = 0;attempt = nil;success_or_fail = nil)
		(in_workshop = nil;check_workshop.call)
		(number += 1;message[number] = "You are not in a workshop.") if in_workshop == "no"
		(number += 1;message[number] = "You do not have full spirit.") if checkspirit != maxspirit
		(number += 1;message[number] = "You have wounds.") if (Wounds.head != 0 or Wounds.neck != 0 or Wounds.abs != 0 or Wounds.lhand != 0 or Wounds.rhand != 0 or Wounds.larm != 0 or Wounds.rarm != 0 or Wounds.chest != 0 or Wounds.back != 0 or Wounds.rleg != 0 or Wounds.lleg != 0 or Wounds.nerves != 0)
		(number += 1;message[number] = "You have scars.") if (Scars.head != 0 or Scars.neck != 0 or Scars.abs != 0 or Scars.lhand != 0 or Scars.rhand != 0 or Scars.larm != 0 or Scars.rarm != 0 or Scars.chest != 0 or Scars.back != 0 or Scars.rleg != 0 or Scars.lleg != 0 or Scars.nerves != 0)
		respond "------------------------------"
		message.each{|i|
			respond "#{i}" if i != nil
		}
		respond "No problems found, you're ready to cast." if number == 0
		respond "------------------------------"
		while line = get
			#if line =~ /^Your rapid build up of necrotic energy has left you feeling overwhelmed and temporarily unable to absorb any new necrotic power\.$/
			#	CharSettings['max_weekly_energy'] = "yes"
			#end
			(difficulty = "you can only fail if you are horribly unlucky (1)";chances = 1;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 99%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /you can only fail if you are horribly unlucky/i
			(difficulty = "you should be able to ensorcell it easily enough, barring bad luck (2)";chances = 2;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 90%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /you should be able to ensorcell it easily enough, barring bad luck/i
			(difficulty = "odds are on your side to successfully complete the ensorcellment (3)";chances = 3;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 75%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /odds are on your side to successfully complete the ensorcellment/i
			(difficulty = "more likely than not to succeed on your cast, but you will need some luck (4)";chances = 4;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 55%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /more likely than not to succeed on your cast, but you will need some luck/i	
			(difficulty = "this ensorcellment will be difficult, but possible (5)";chances = 5;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 35%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /this ensorcellment will be difficult, but possible/i
			(difficulty = "this ensorcellment will be very difficult (6)";chances = 6;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 15%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /this ensorcellment will be very difficult/i
			(difficulty = "this ensorcellment will be nearly impossible (7)";chances = 7;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 1%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /this ensorcellment will be nearly impossible/i
			(difficulty = "you will likely need a miracle to complete this ensorcellment (8)";chances = 8;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: Less than 1%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /you will likely need a miracle to complete this ensorcellment/i
			(difficulty = "this ensorcellment is completely beyond your abilities (9)";chances = 9;total = CharSettings['success'][chances] + CharSettings['failure'][chances];m = CharSettings['success'][chances].to_f / total * 100;m = sprintf "%.3f", m;respond "------------------------------\nBase success chance: 0%\nYour observed success chance: #{m}%\n------------------------------") if line =~ /this ensorcellment is completely beyond your abilities/i
			(success_or_fail = "success";CharSettings['success'][chances] += 1) if line =~ /Success\!.*You manage to breach/i
			(success_or_fail = "failure";CharSettings['failure'][chances] += 1) if line =~ /Failure\!.*You are unable/i
			attempt = $1 if line =~ /You make an? (.*)(\.|\!)/i
			if line =~ /Cast Roundtime/i
				CharSettings['stats_checker_threshold'] = (CharSettings['unknown_critter_level_counter'] + CharSettings['critter_level_too_low_counter'] + CharSettings['critter_level_acceptable_counter'] + 50)
				test_number = 0
				respond "------------------------------"
				respond "Easiest to hardest difficulty successes:"
				CharSettings['success'].each { |i|
					if i != nil
						test_number += 1
						total = (i + CharSettings['failure'][test_number])
						m = i.to_f / total * 100;m = sprintf "%.3f", m
						respond "Successful casts: #{i}, Failed casts: #{CharSettings['failure'][test_number]}, #{m}%"
						break if test_number >= 9
					end
				}
				respond "------------------------------"
				display_stats.call
				break
			end
			break if line =~ /(You feel the magic of your spell rush away from you.|You feel the magic of your spell depart.)/i
		end
		next
	end
	if line =~ /You (?:swing|gesture|sing|weave another verse|continue to sing|channel|fire|wave|tap|rub|hurl|thrust|slash|throw|punch|attempt to punch|attempt to kick|attempt to throw|quickly dart behind .*? and try to hamstring|mentally attempt to locate your implanted essence|rush forward|You .*?attempt to (?:kick|punch|jab|grapple)|A wave of power flows out of you and toward).*(<a exist=['\"](.*?)['\"])/i
		temp = $2
		while line = get
			if line =~ /damage|cringes in pain|shudders in pain|twists in great pain|is wracked with painful spasms|shudders and twists in intense pain|contorts in excruciating agony/i
				(kill_track.push(temp) unless kill_track.include?(temp) || already_checked.include?(temp))
			end
			break if line =~ /Roundtime/i
		end
	end
	if line =~ /^A soft feeling of serenity touches your mind, providing you with a clearer understanding of recent events\.$/i
		new_week.call
	end
end