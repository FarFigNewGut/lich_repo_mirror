=begin

  Usage: 

   ;osacrew setup                       Opens the setup window
   ;osacrew underway                    Will get your ship underway
   ;osacrew underway anchor             Will raise the anchor
   ;osacrew underway sails              Will lower your sails
   ;osacrew repair                      Will begin damage control on the ship
   ;osacrew swap                        Enables you to swap commands with ease
   ;osacrew orders                      Will await your commander to announce location of ship then board ship
   ;osacrew settings                    Will show current settings

   This is a companion to osacommander. It is ran on your crew members to complete simple tasks on the ship including combat. 
   Enjoy 

   ~Peggyanne 
 PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. 
7/22/2021 Initial Release, Supports All Ship Types

=end
VERSION = '3.0.0'
$TITLE = "OSACrew: v. (#{VERSION})"
$osacrewv2 = self
@once = "False"

		  $get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }


  def set_value(key, clean, default)
    if (!UserVars.osacrew[key].nil? && UserVars.osacrew[key] !~ /^\s*$/)
      cleaned = clean_value(clean, UserVars.osacrew[key])
      instance_variable_set("@#{key.upcase}", cleaned)
    else
      instance_variable_set("@#{key.upcase}", default)
    end
  end
  
  def self.profile(vars)
      if vars[5] =~ /load/i
      if vars[4] != nil
        dir = "#{$lich_dir}scripts/osacrew_profiles"
        filename = "#{dir}/#{vars[3]}.yaml"
        if !File.exists?("#{filename}")
          echo "Trying to load a profile that does not exist."
        else
          from_file = YAML.load_file(filename)
          UserVars.osacrew = from_file
          echo "Settings loaded from profile: #0{filename}."
        end
      else
        echo "You forgot to name your profile you wish to load."
        echo "Syntax: ;osacrew profile load <NAME Here, no Spaces!>"
      end
    elsif vars[3] =~ /save/i
      if vars[4] != nil
        Dir.mkdir("#{$lich_dir}scripts/osacrew_profiles") unless File.exists?("#{$lich_dir}scripts/osacrew_profiles")
        dir = "#{$lich_dir}scripts/osacrew_profiles"
        filename = "#{dir}/#{vars[4]}.yaml"
        if File.exists?("#{filename}")
          echo "File already exists, if you wish to overwrite, please ;unpause bigshot."
          echo "Else ;kill bigshot and choose another filename."
          pause_script
        end
        File.write(filename, UserVars.osacrew.to_yaml)
        echo "Settings saved to profile: #{filename}."
      else
        echo "You forgot to name your profile you wish to save."
        echo "Syntax: ;osacrew profile save <NAME Here, no Spaces!>"
      end
    end
  end
	  
def self.setup
	@theme_state = Lich.track_dark_mode if defined? Lich.track_dark_mode
    Gtk.queue do
      @get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  @OC_WINDOW = Gtk::Window.new
      @OC_WINDOW.title = $TITLE
      @OC_WINDOW.set_icon(@default_icon)
      @OC_WINDOW.set_border_width(10)
      @OC_WINDOW.keep_above = true
	  
		if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
			grey = Gdk::RGBA::parse("#d3d3d3")
			@OP_WINDOW.override_background_color(:normal, grey)
		end

      @OC_BOX = @get_vBox.call
      @OC_BOX.set_border_width(5)
      @OC_WINDOW.add(@OC_BOX)

      @OC_NOTEBOOK = Gtk::Notebook.new
      @OC_NOTEBOOK.set_show_border(true)
	  if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
		@OC_NOTEBOOK.override_background_color(:normal, grey)
	  end
      @OC_BOX.add(@OC_NOTEBOOK)
      @OC_ENTRY = Hash.new # For mapping entries to variables
      @OC_TABLE_SIZE = Hash.new # For mapping table sizes

  end


  # # Gtk.queue {
    # # @OC_TABLE1 = Gtk::Table.new(10, 5, false)
    # # @OC_TABLE1.row_spacings=3
    # # @OC_TABLE1.column_spacings=3
    # # @OC_VERTICAL_BOX1.pack_start(@OC_TABLE1, :expand => false, :fill => false, :padding => 0)

  # }
  
	Gtk.queue do
      tab_names = %w[
        General
		Bless
		Combat
      ]
	  
     tab_names.each.with_index(1) do |name, val|
        new_table = Gtk::Table.new(10, 4, true).tap do |table|
          table.row_spacings = 1
          table.column_spacings = 1
        end

        new_box = if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end

        if Gtk.check_version(3,0,0).nil?
          new_box.pack_start(new_table, expand: false, fill: false, padding: 0)
        else
          new_box.pack_start(new_table, false, false, 0)
        end

        @OC_NOTEBOOK.append_page(new_box, Gtk::Label.new(name))

        instance_variable_set("@OC_TABLE#{val}", new_table)
        instance_variable_set("@OC_VERTICAL_BOX#{val}", new_box)
      end
end


def self.add_label_entry(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacrew[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 1, 2, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end

def self.add_label_entry2(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacrew[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 3, 4, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
end  

    def self.add_dropdown(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacrew[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacrew[variable].to_s != "Fixnum" && UserVars.osacrew[variable].to_s != "Integer"
          UserVars.osacrew[variable]
        end
        dropdown.set_active(UserVars.osacrew[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 0, 1, size, size + 1)
      table.attach(align2, 1, 2, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

def self.add_dropdown2(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacrew[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacrew[variable].to_s != "Fixnum" && UserVars.osacrew[variable].to_s != "Integer"
          UserVars.osacrew[variable]
        end
        dropdown.set_active(UserVars.osacrew[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 2, 3, size, size + 1)
      table.attach(align2, 3, 4, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

      def self.add_text_area(vbox, label, variable)
      # Grab value for a manual check since we can't rely on a version of Ruby with safe operators
      current_value = UserVars.osacrew[variable]

      entry = Gtk::TextView.new
      entry.buffer.text = current_value ? current_value.gsub("||","\n") : ""

      swin = Gtk::ScrolledWindow.new
      swin.border_width = 5
      swin.add(entry)
      swin.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

      frame = Gtk::Frame.new(label)
      frame.add(swin)

      vbox.pack_start_defaults(frame)

      @OC_ENTRY[variable] = entry
    end
	
  Gtk.queue do
    @OC_ENTRY = Hash.new
    add_label_entry(@OC_TABLE1, "Commander:", 'commander', true)
	add_label_entry(@OC_TABLE1, "Crew Channel:", 'crew', true)
	add_label_entry(@OC_TABLE1, "Medical Officer:", 'medicalofficer', true) 	
    add_label_entry(@OC_TABLE1, "Society Script:", 'societyscript', true)
	add_label_entry(@OC_TABLE1, "Spell up Script:", 'spellupscript', true)
	add_label_entry(@OC_TABLE1, "FWI Trinket:", 'fwitrinket', true)
	add_label_entry(@OC_TABLE2, "UAC Hand Wraps:", 'uachands', true)
	add_label_entry(@OC_TABLE2, "UAC Foot Wraps:", 'uacfeet', true)
	add_label_entry(@OC_TABLE2, "Paladin Infuse Spell:", 'infusespell',true)
	add_dropdown(@OC_TABLE3, "Attack Option:", 'attacktype', 'None,UAC Brawling,UAC Brawling - Stealth,Melee 1H 2H,Melee 1H 2H Stealth,Bow + Arrow,Bow + Arrow Stealth,Crossbow + Bolt,Crossbow + Bolt Stealth,Magic Bolt Spell Casters,Warding Magic Users,Archer Hybrid Users Spell Openers,Meelee Hybrid Users Spell Openers,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008')
	add_dropdown2(@OC_TABLE3, "Undead Attack Option:", 'undeadattacktype', 'None,UAC Brawling,UAC Brawling - Stealth,Melee 1H 2H,Melee 1H 2H Stealth,Bow + Arrow,Bow + Arrow Stealth,Crossbow + Bolt,Crossbow + Bolt Stealth,Magic Bolt Spell Casters,Warding Magic Users,Archer Hybrid Users Spell Openers,Meelee Hybrid Users Spell Openers,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008', true)
	add_dropdown(@OC_TABLE3, "Attack Opener:", 'attackopen', 'None,Shield Strike,Weapon Flurry,OHE Cripple,Shield Charge,Voln Sleep')
	add_dropdown2(@OC_TABLE3, "Undead Attack Opener:", 'undeadattackopen', 'None,Shield Strike,Weapon Flurry,OHE Cripple,Shield Charge,Voln Sleep', true)
	add_dropdown(@OC_TABLE3,  "AOE Attack:", 'aoe','None,Whirlwind 2 hander attack,Cyclone Polearms,Pulverizer OHB,Whirling Blade 1HE,Volley Ranged,Clash Brawling,Shield Throw')
	add_dropdown2(@OC_TABLE3,  "Undead AOE Attack:", 'undeadaoe','None,Whirlwind 2 hander attack,Cyclone Polearms,Pulverizer OHB,Whirling Blade 1HE,Volley Ranged,Clash Brawling,Shield Throw', true)
	add_label_entry(@OC_TABLE3, "Spell Opener:", 'spellopen')
	add_label_entry2(@OC_TABLE3, "Undead Spell Opener:", 'undeadspellopen', true)
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype')
	add_label_entry2(@OC_TABLE3, "Undead Attack Spell:", 'undeadspelltype', true)
end
  
    def self.add_checkbox(table, x_pos, label, variable, newrow = false, default = false)
      size = @OC_TABLE_SIZE[table] || 0
      checkbox = Gtk::CheckButton.new label
      value = UserVars.osacrew[variable] || default
      checkbox.active = value
      table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
      @OC_ENTRY[variable] = checkbox
      @OC_TABLE_SIZE[table] += 1 if newrow
    end
	
  Gtk.queue do
  # Commander
	
    add_checkbox(@OC_TABLE1, 0,  "Crew Tasks", 'osacrewtasks')
	add_checkbox(@OC_TABLE1, 1,  "Group Spellups", 'groupspellup')
	add_checkbox(@OC_TABLE1, 2,  "Four Winds Access", 'fwi', true)
	add_checkbox(@OC_TABLE1, 0,  "Sell Loot", 'slootsell')
    add_checkbox(@OC_TABLE2, 0,  "Bless Caster", 'givebless')
	add_checkbox(@OC_TABLE2, 1,  "Need Bless", 'needbless')
	add_checkbox(@OC_TABLE3, 0,  "Scripted Combat", 'osacombat')
	add_checkbox(@OC_TABLE3, 1,  "Channel Attack", 'spellchan')
	add_checkbox(@OC_TABLE3, 2,  "Mind Over Body (1213)", 'mob')
	add_checkbox(@OC_TABLE3, 3,  "Group Bravery (211)", 'groupbravery', true)
	add_checkbox(@OC_TABLE3, 1,  "Evoke Attack", 'spellevoke')
	add_checkbox(@OC_TABLE3, 2,  "Focus Barrier (1216)", 'focus')
	add_checkbox(@OC_TABLE3, 3,  "Group Heroism (215)", 'groupheroism', true)
	add_checkbox(@OC_TABLE3, 1,  "Channel Undead Attack", 'undeadspellchan')
	add_checkbox(@OC_TABLE3, 2,  "Beacon of Courage (1608)", 'beaconofcourage')
	add_checkbox(@OC_TABLE3, 3,  "Song of Tonis (1035)", 'songoftonis', true)
	add_checkbox(@OC_TABLE3, 1,  "Evoke Undead Attack", 'undeadspellevoke', true)
  end
  Gtk.queue do
    @OC_WINDOW.signal_connect("delete_event") {
      @OC_SETUP_COMPLETED = true
    }
  end

  Gtk.queue do 
#   @OC_TOOLTIPS = Gtk::Tooltips.new
#   @OC_TOOLTIPS.enable

	#size = @OC_TABLE_SIZE[@OC_TABLE1]
	#label = Gtk::Label.new
    #label.set_markup("Commander and Crew are case sensitive, If Crew is left unchecked you will be considered a passenger and skip crew tasks")
    #align = Gtk::Alignment.new(1, 0, 0, 0)
    #align.set_padding(5, 0, 0, 25)
    #align.add(label)
    #@OC_TABLE1.attach(align, 1, 2, size, size + 1)
	
	#attack_tip = "ATTACKOPTION\nUAC Brawling\nUAC Brawling - Stealth\nMelee (1H, 2H, Shield)\nMelee (1H, 2H, Shield) Stealth\nBow + Arrow\nBow + Arrow Stealth\nCrossbow + Bolt\nCrossbow + Bolt Stealth\nBolt Spell Casters\nWarding Magic Users\nArcher Hybrid Users Spell Openers\nMeelee Hybrid Users Spell Openers\nBard Support - 1035- 1002\nBard Caster 1030 AOE 1008 Single Target"
    #@OC_ENTRY['attacktype'].set_tooltip_text(attack_tip)
	#aoeatt_tip = "Meelee AOE attack Options Select Number\nWhirlwind 2 hander attack\nCyclone Polearms\nPulverizer OHB\nWhirling Blade 1HE\nVolley Ranged\nClash Brawling\nShield Throw"
	#@OC_ENTRY['aoe'].set_tooltip_text(aoeatt_tip)
	#spell_tip = "Please input spell number to cast by default for Attack"
    #@OC_ENTRY['spelltype'].set_tooltip_text(spell_tip)
	#a_open = "Attack Openers Option\n 0 - None\nShield Strike\nWeapon Flurry\nOHE Cripple\nShield Charge\nVoln Sleep 2 targets or more"
	#@OC_ENTRY['attackopen'].set_tooltip_text(a_open)
	#s_open = "Spell Openers.  Input Spell Number to Disable or weaken enemies  ex: 709 to do Grasp of the Grave"
	#@OC_ENTRY['spellopen'].set_tooltip_text(s_open)
	
	#size = @OC_TABLE_SIZE[@OC_TABLE2]
	#label = Gtk::Label.new
    #label.set_markup("Check Need Bless for auto blessing, Ensure weapon can be blessed that is marked for bless")
    #align = Gtk::Alignment.new(1, 0, 0, 0)
    #align.set_padding(5, 0, 0, 25)
    #align.add(label)
    #@OC_TABLE2.attach(align, 1, 2, size, size + 1)

    #size = @OC_TABLE_SIZE[@OC_TABLE3]
	#label = Gtk::Label.new
    #label.set_markup("Use your own Scripts or Choose from our Attack Options")
    #align = Gtk::Alignment.new(1, 0, 0, 0)
    #align.set_padding(5, 0, 0, 25)
    #align.add(label)
    #@OC_TABLE3.attach(align, 1, 2, size, size + 1)
	
	#size = @OC_TABLE_SIZE[@OC_TABLE4]
	#label = Gtk::Label.new
    #label.set_markup("Use your own Scripts or Choose from our Attack Options")
    #align = Gtk::Alignment.new(1, 0, 0, 0)
    #align.set_padding(5, 0, 0, 25)
    #align.add(label)
    #@OC_TABLE4.attach(align, 1, 2, size, size + 1)
	
    @OC_WINDOW.show_all
  end

  @OC_SETUP_COMPLETED = false
  until(@OC_SETUP_COMPLETED)
    sleep(0.5)
  end

    UserVars.osacrew ||= Hash.new
    @OC_ENTRY.keys.each do |key|
      echo "#{key} - #{@OC_ENTRY[key].to_s}" if $osacrew_debug
      if @OC_ENTRY[key].to_s =~ /CheckButton/
        value = @OC_ENTRY[key].active?
        UserVars.osacrew[key] = @OC_ENTRY[key].active?
      elsif @OC_ENTRY[key].to_s =~ /ComboBox/
        UserVars.osacrew[key] = @OC_ENTRY[key].active
      elsif @OC_ENTRY[key].to_s =~ /TextView/
        # Store these with double pipes so we don't mess up any supplied expressions
        UserVars.osacrew[key] = @OC_ENTRY[key].buffer.text.gsub("\n","||")
      else
        if key == 'wounded_eval'
          UserVars.osacrew[key] = @OC_ENTRY[key].text
        else
          UserVars.osacrew[key] = @OC_ENTRY[key].text.strip
        end
      end
    end
    UserVars.save

  Gtk.queue do
    @OC_WINDOW.destroy
 end
end

no_file = proc{
respond "

In order to run OSACrew you need #{@needfile}
=================================================
Do you wish to download it now?
    1\. Yes
    2\. No
=================================================
Please Select an Option - 
      ;send <#> "
respond
clear
line = nil
line = get until line.strip =~ /^[0-9]+$/
answer = line
if answer == "1"
	respond "
	Excellent, Downloading Now!
	"
	start_script 'repository', [ 'download', "#{@needfile}.lic" ]
	wait_until { !running?('repository') }
	respond "
	Download Complete, Moving On...
	"
elsif answer == "2"
	echo "Very Well, Please Restart OSACrew When You Have It."
	exit
	end
}

@needfile = nil
if !Script.exists?('osashare')
	@needfile = "osashare"
	no_file.call
end
if !Script.exists?('help-osashare')
	@needfile = "help-osashare"
	no_file.call
end
if !Script.exists?('osacombat')
	@needfile = "osacombat"
	no_file.call
end
if !Script.exists?('beseech')
	@needfile = "beseech"
	no_file.call
end
if !Script.exists?('eloot')
	@needfile = "eloot"
	no_file.call
end

def crew_task_complete
	pause rand(5)
	do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
end

def crew_ship_type
	if checkroom.include?("Sloop")
		@crew_ship_type = "sloop"
	elsif checkroom.include?("Brigantine")
		@crew_ship_type = "brigantine"
	elsif checkroom.include?("Carrack")
		@crew_ship_type = "carrack"
	elsif checkroom.include?("Galleon")
		@crew_ship_type = "galleon"
	elsif checkroom.include?("Frigate")
		@crew_ship_type = "frigate"
	elsif checkroom.include?("Man O' War")
		@crew_ship_type = "man o' war"
	end
end

def crew_go_to_main_deck
	if checkroom.include?	("Bow")
		move "west"
		crew_go_to_main_deck
	elsif checkroom.include?	("Forward Deck")
		move "west"
		crew_go_to_main_deck
	elsif checkroom.include?	("Crow's Nest")
		move "down"
		crew_go_to_main_deck
	elsif checkroom.include?	("Enemy Ship, Quarters")
		move "out"
		pause 0.5
		move "east"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Helm")
		move "east"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Main Deck")
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Mid Deck")
		move "west"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Cargo Hold")
		move "up"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?("Main Deck")
		return
	elsif checkroom.include?("Cargo Hold")
		move "up"
	elsif checkroom.include?("Helm")
		move "east"
	elsif checkroom.include?("Captain's Quarters")
		move "out"
		pause 0.5
		move "east"
	elsif checkroom.include?("Mess Hall")
		move "west"
		pause 0.5
		move "up"
	elsif checkroom.include?("Crew Quarters")
		move "east"
		pause 0.5
		move "up"
	elsif checkroom.include?("Mid Deck")
		move "west"
	elsif checkroom.include?("Social Room")
		move "west"
		pause 0.5
		move "west"
		pause 0.5
		move "up"
	end
end

def crew_cast_bless
	result = matchtimeout 5, /^\[Private]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
		if result =~ /^\[Private]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
			if Spell[1604].known? and Spell[1604].affordable?
				Spell[1604].cast("#{@name}")
			end
			waitcastrt?
			if Spell[304].known? and Spell[304].affordable?
				Spell[304].cast("#{@name}")
			else
				Spell[9802].cast("#{@name}")
			end
		else
			respond ""
			respond "                                  Something May Have Gone Wrong With The Bless                               "
			respond ""
		end
end

def crew_give_bless
	do_client ";chat on #{UserVars.osacrew["crew"]} #{@name}"
	result = matchtimeout 5, /^\[Private]-GSIV:#{@name}\: \"I Have One.\"|^\[Private]-GSIV:#{@name}\: \"I Have Two.\"/
		if result =~ /^\[Private]-GSIV:#{@name}\: \"I Have One.\"/
			crew_cast_bless
		elsif result =~ /^\[Private]-GSIV:#{@name}\: \"I Have Two.\"/
			2.times{crew_cast_bless}
		end
end

def crew_who_needs_blessed
	result = matchtimeout 1, /^\[Private]-GSIV:(.*)\: \"I Need Blessed Please!\"/
	if result =~ /^\[Private]-GSIV:(.*)\: \"I Need Blessed Please!\"$/
		@blessname.push($1)
		crew_who_needs_blessed
	end
end

def crew_recieve_bless
result = matchtimeout 15, /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
	if result =~ /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
		return
	else
		respond ""
		respond "                                  Something May Have Gone Wrong With The Bless                               "
		respond ""
	end
end

def crew_get_bless
	if UserVars.osacrew["needbless"]
		do_client ";chat to #{UserVars.osacrew["blesser"]} I Need Blessed Please!"
		waitfor /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["blesser"]}\: \"#{checkname}/
		if UserVars.osacrew["uachands"].empty? and UserVars.osacrew["uacfeet"].empty?
			fput "gird"
		else
			if !UserVars.osacrew["uachands"].empty?
				fput "remove #{UserVars.osacrew["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacrew["uacfeet"].empty?
				fput "remove #{UserVars.osacrew["uacfeet"]}"
			end
		end
		fput "glance"
		if !checkleft.nil? && checkright.nil?
			fput "swap"
		end
		if !checkleft.nil? && !checkright.nil?
			do_client ";chat to #{UserVars.osacrew["blesser"]} I Have Two."
			do_client ";chat to #{UserVars.osacrew["blesser"]} I Am Ready."
			crew_recieve_bless
			fput "swap"
			do_client ";chat to #{UserVars.osacrew["blesser"]} Ok, The Next One Is Ready."
			crew_recieve_bless
		else
			do_client ";chat to #{UserVars.osacrew["blesser"]} I Have One."
			do_client ";chat to #{UserVars.osacrew["blesser"]} I Am Ready."
			crew_recieve_bless
		end
		if UserVars.osacrew["uachands"].empty? and UserVars.osacrew["uacfeet"].empty?
			fput "store both"
		else
			if !UserVars.osacrew["uachands"].empty?
				fput "wear #{UserVars.osacrew["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacrew["uacfeet"].empty?
				fput "wear #{UserVars.osacrew["uacfeet"]}"
			end
		end	
	end
end

def crew_make_bread
	pause 1
	waitrt?
	waitcastrt?
	Spell[203].cast if (Spell[203].known?) && (Spell[203].affordable?)
		fput "give #{checkright} to #{@bread_recipient}"
		wait_until {checkright.nil?}
end

def crew_check_bread
	checkpcs.each do |n|
		@bread_recipient = n
		crew_make_bread
	end
end

def crew_gobble_bread
	result = dothistimeout "gobble #{checkright}", 1, /That was the last of it/
		if result =~ /That was the last of it/
			return
		else
			crew_gobble_bread
		end
end

def crew_spell_up
	if Stats.prof == "Empath"
		if running? "cure"
			stop_script "cure"
		end
		wait_while { running?("cure") }
		Script.run("cure","group")
		wait_while { running?("cure") }
	end
	if !UserVars.osacrew["spellupscript"].empty?
		start_script "#{UserVars.osacrew["spellupscript"]}"
		wait_while { running?("#{UserVars.osacrew["spellupscript"]}") }
	end
	crew_task_complete
	if UserVars.osacrew["groupspellup"] == true
		if !running? 'osashare'
			start_script 'osashare'
		end
	end
end

def crew_damage_control
	wait_while { running?("osacombat") }
	if UserVars.osacrew["osacrewtasks"] == true
		if checkleft or checkright
			fput "store both"
		end
		if checkleft or checkright
			fput "stow both"
		end
		crew_start_damage_control
		crew_go_to_main_deck
		multimove "west", "go door"
	else
		crew_go_to_main_deck
		multimove "west", "go door"
	end
end

def crew_give_coins
	wealth_line = dothistimeout "wealth quiet", 1, /coins? with you.$/
	@coins = wealth_line.match(/([0-9,]+)/)[1].sub(/[^0-9]/, '').to_i
	if  @coins == 0
		respond "Your Pockets Are Empty!"
	else
		fput "give #{UserVars.osacrew["commander"]} #{@coins} coins"
	end
end

def crew_gem_count
	multifput "open my #{Vars.gemsack}", "look in my #{Vars.gemsack}"
	result = matchtimeout 1, /Gems \[(.*)\]|There is nothing in the/
	if result =~ /Gems \[(.*)\]/
		fput "close my #{Vars.gemsack}"
		do_client ";chat to #{UserVars.osacrew["commander"]} I have #{$1} gems on me."
	elsif result =~ /There is nothing in the/
		fput "close my #{Vars.gemsack}"
		do_client ";chat to #{UserVars.osacrew["commander"]} I have 0 gems on me."
	end
end

def crew_status_check
	do_client ";chat on #{UserVars.osacrew["crew"]} Health: #{health}/#{maxhealth}     Mana: #{mana}/#{maxmana}     Stamina: #{stamina}/#{maxstamina}     Spirit: #{spirit}/#{maxspirit}"
end

def crew_cap_check
	result = dothistimeout "exp", 1, /Exp to next TP: (((([0-9,]+)\,[0-9,]+))|[0-9,]+)|PTPs\/MTPs: (((([0-9,]+)\,[0-9,]+))|[0-9,]+)\/(((([0-9,]+)\,[0-9,]+))|[0-9,]+)/
	if result =~ /Exp to next TP: (((([0-9,]+)\,[0-9,]+))|[0-9,]+)/
		@exptntp = $1
		if get =~ /PTPs\/MTPs: (.*)\/(((([0-9,]+)\,[0-9,]+))|[0-9,]+)/
			@ptrainingpoints = $1
			@mtrainingpoints = $2
		end
	end
end

def crew_exp_check
	if Stats.level.to_i != 100
		do_client ";chat on #{UserVars.osacrew["crew"]} Exp Till Level #{Stats.level.to_i + 1} Is: #{XMLData.next_level_text.to_i} And My State Of Mind Is: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}"
	else
		crew_cap_check
		do_client ";chat on #{UserVars.osacrew["crew"]} Exp Till Next Training Point Is: #{@exptntp} | #{@ptrainingpoints} Physical Training Points | #{@mtrainingpoints} Mental Training Points | State Of Mind Is: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}"
	end
end

def crew_get_bird
	result = dothistimeout "take #{@bird}", 1, /Get what?|Are you sure|You grab a/
		if result =~ /Get what?/
			echo "Waiting For The Bird To Return And Try Again"
			waitfor /The (.*) flies in/
			crew_get_bird
		elsif result =~ /Are you sure/
			crew_get_bird
		elsif result =~ /You grab a/
			return
		end
end
	
def crew_check_nest
result = dothistimeout "look in nest", 1, /In the thatch nest|There is nothing/
	if result =~ /In the thatch nest|There is nothing/
		result = matchtimeout 1, /(a|an)(.*)(sparrow|albatross|gull|pigeon|toucan|parrot|raven|crow|eagle|pelican|frigatebird|snow petrel)/
			if result =~ /(a|an)(.*)(sparrow|albatross|gull|pigeon|toucan|parrot|raven|crow|eagle|pelican|frigatebird|snow petrel)/
				@bird = $3
				crew_get_bird
				waitfor /The (.*) flies in/
				if @turnin == true
					fput "turn #{checkname} note"
					@turnin = false
					crew_check_task
				else
					fput "take #{checkname} note"
					crew_go_to_main_deck
					multimove "west","go door"
					wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
					crew_task_complete
				end
			else
				if checkroom.include? "Man O' War"
					crew_go_to_other_nest
				else
					crew_return_to_cabin
				end
			end
	else
		crew_check_nest
	end
end

def crew_check_other_nest
result = dothistimeout "look in nest", 1, /In the thatch nest|There is nothing/
	if result =~ /In the thatch nest|There is nothing/
		result = matchtimeout 1, /(a|an)(.*)(sparrow|albatross|gull|pigeon|toucan|parrot|raven|crow|eagle|pelican|frigatebird|snow petrel)/
			if result =~ /(a|an)(.*)(sparrow|albatross|gull|pigeon|toucan|parrot|raven|crow|eagle|pelican|frigatebird|snow petrel)/
				@bird = $3
				crew_get_bird
				waitfor /The (.*) flies in/
				if @turnin == true
					fput "turn #{checkname} note"
					@turnin = false
					crew_check_task
				else
					fput "take #{checkname} note"
					crew_go_to_main_deck
					multimove "west","go door"
					wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
					crew_task_complete
				end
			else
					crew_return_to_cabin
			end
	else
		crew_check_other_nest
	end
end

def crew_return_to_cabin
	crew_go_to_main_deck
	multimove "west","go door"
	pause 20
	crew_go_to_nest
end

def crew_go_to_other_nest
	crew_go_to_main_deck
	multimove "east","east","up"
	crew_check_other_nest
end

def crew_go_to_nest
	crew_go_to_main_deck
	move "up"
	crew_check_nest
end

def crew_check_task
result = dothistimeout "osa task", 1, /You do not currently have a task from the Sea Hag's Roost|You should return to the Sea Hag's Roost to report your success|Abandons your current task/
    if result =~ /You do not currently have a task from the Sea Hag's Roost/
		@turnin = false
		if checkroom.include? "Sea Hag's Roost, Tavern"
			fput "take board"
			pause 0.5
			crew_task_complete
		else 
			crew_go_to_nest
		end
	elsif result =~ /You should return to the Sea Hag's Roost to report your success/
		@turnin = true
		if checkroom.include? "Sea Hag's Roost, Tavern"
			if saturated?
				wait_until {!saturated?}
			end
			fput "turn board"
			pause 0.5
			fput "take board"
			pause 0.5
			crew_task_complete
		else
			if saturated?
				wait_until {!saturated?}
			end
			crew_go_to_nest
		end
	elsif result =~ /Abandons your current task/
		if checkroom.include? "Sea Hag's Roost, Tavern"
			crew_task_complete
		else
			if !checkroom.include? "Captain's Quarters" 
				crew_go_to_main_deck
				multimove "west","go door"
			end
			wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
			crew_task_complete
		end
	else
		if checkroom.include? "Sea Hag's Roost, Tavern"
			crew_task_complete
		else
			if !checkroom.include? "Captain's Quarters" 
				crew_go_to_main_deck
				multimove "west","go door"
			end
			wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
			crew_task_complete
		end
    end
end

def crew_lower_sail
	result = dothistimeout "lower sail", 3, /You grab a hold of the main line of the (.*)sail and untie it from the cleat.  Holding the line in both hands you slowly lower the (.*)sail until it is at half mast|You grab a hold of the main line of the (.*)sail and untie it from the cleat.  Holding the line in both hands you slowly lower the (.*)sail until it is fully open|The (.*)sail is already lowered as far as it can go!/
        waitrt?
	if result =~ /...wait/
		waitrt?
		crew_lower_sail
	elsif result =~ /You grab a hold of the main line of the (.*)sail and untie it from the cleat.  Holding the line in both hands you slowly lower the (.*)sail until it is at half mast/
		waitrt?
		crew_lower_sail
	elsif result =~ /You grab a hold of the main line of the (.*)sail and untie it from the cleat.  Holding the line in both hands you slowly lower the (.*)sail until it is fully open/
		@crew_lowered_sail = true
		waitrt?
	elsif result =~ /The (.*)sail is already lowered as far as it can go!/
		end
end

def crew_one_mast
	fput "pull gangplank"
	crew_lower_sail
	if @crew_lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Main Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Main Mast Unfurled, She's Ready to Sail Captain!"
		end
		@crew_lowered_sail = false
	end
	pause 0.5
	move "west"
end

def crew_two_masts
	fput "pull gangplank"
	crew_lower_sail
	if @crew_lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@crew_lowered_sail = false
	end
	pause 0.5
	move "east"
	crew_lower_sail
	if @crew_lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@crew_lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def crew_three_masts
	fput "pull gangplank"
	crew_lower_sail
	if @crew_lowered_sail
		waitrt?
		fput "yell Mizzen Mast Unfurled"
		@crew_lowered_sail = false
	end
	pause 0.5
	move "east"
	crew_lower_sail
	if @crew_lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@crew_lowered_sail = false
	end
	pause 0.5
	move "east"
	crew_lower_sail
	if @crew_lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@crew_lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def crew_how_many_masts
	crew_ship_type
	crew_go_to_main_deck
	if @crew_ship_type == "sloop" 
		crew_one_mast
	elsif @crew_ship_type == "brigantine"
		crew_two_masts
	elsif @crew_ship_type == "carrack"
		crew_two_masts
	elsif @crew_ship_type == "galleon"
		crew_two_masts
	elsif @crew_ship_type == "frigate"
		crew_two_masts	
	elsif @crew_ship_type == "man o' war"
		crew_three_masts
	end
end

def crew_get_underway
	crew_how_many_masts
	crew_go_to_capstan
	multifput "depart","depart"
	fput "yell Underway! Shift Colors!"
end

def crew_raise_anchor
	result = dothistimeout "push capstan", 3, /You lean your body against the wooden bars protruding from the sides of the wooden capstan and begin to push|You lean your body against the wooden bars protruding from the sides of the wooden capstan and give it one final push|The anchor is already up/
        waitrt?
	if result =~ /...wait/
		waitrt?
		crew_raise_anchor
	elsif result =~ /You lean your body against the wooden bars protruding from the sides of the wooden capstan and begin to push/
		waitrt?
		crew_raise_anchor
	elsif result =~ /You lean your body against the wooden bars protruding from the sides of the wooden capstan and give it one final push/
		@crew_anchor_aweigh = true
		waitrt?
	elsif result =~ /The anchor is already up/
		end
end

def crew_go_to_capstan
	waitrt?
	waitcastrt?
	if variable[2].include? "anc"
		crew_go_to_main_deck
	end
	echo "Raising Anchor"
	if variable[2].include? "anc"
		move "west"
	end
	crew_raise_anchor
	waitrt?
	if @crew_anchor_aweigh
		fput "yell Anchor's Aweigh!"
		@crew_anchor_aweigh = false
	end
end

def crew_send_mana
	if checkmana >= 20
		if running? "osacombat"
			pause_script "osacombat"
		end
		if running? "osacombat"
			pause_script "osacombat"
		end
		waitrt?
		waitcastrt?
		fput "send 20 #{@manaperson}"
		if running? "osacombat"
			unpause_script "osacombat"
		end
	end
end

def crew_dump_gems
	waitfor /#{UserVars.osacrew["commander"]}(.*) says, "#{checkname}."/
	pause 0.5
	fput "remove my #{Vars.gemsack}"
	pause 0.5
	fput "open my #{Vars.gemsack}"
	pause 0.5
	fput "give #{Vars.gemsack} to #{UserVars.osacrew["commander"]}"
	waitfor /#{UserVars.osacrew["commander"]} offers you/
	fput "accept"
	pause 0.5
	fput "close my #{Vars.gemsack}"
	pause 0.5
	fput "wear my #{Vars.gemsack}"
end

def crew_to_wood
	if checkroom.include?	("Bow")
		move "west"
		crew_to_wood
	elsif checkroom.include?	("Forward Deck")
		move "west"
		crew_to_wood
	elsif checkroom.include?	("Crow's Nest")
		move "down"
		crew_to_wood
	elsif checkroom.include?	("Captain's Quarters")
		move "out"
		pause 0.5
		move "east"
		pause 0.5
		move "down"
	elsif checkroom.include?	("Helm")
		move "east"
		pause 0.5
		move "down"
	elsif checkroom.include?	("Main Deck")
		move "down"
	elsif checkroom.include?	("Mid Deck")
		move "west"
		pause 0.5
		move "down"
	elsif checkroom.include?	("Cargo Hold")
		move "up"
		pause 0.5
		move "down"
	elsif checkroom.include?("Mess Hall")
		move "west"
	elsif checkroom.include?("Crew Quarters")
		move "east"
	elsif checkroom.include?("Social Room")
		move "west"
		pause 0.5
		move "west"
	end
end

def crew_from_wood
	if @repair_room == "Bow"
		move "up"
		pause 0.5
		move "east"
		pause 0.5
		move "east"
		if @crew_ship_type == "man o' war"
			pause 0.5
			move "east"
		end
	elsif @repair_room == "Forward"
		move "up"
		pause 0.5
		move "east"
		if @crew_ship_type == "man o' war"
			pause 0.5
			move "east"
		end
	elsif @repair_room == "Mid"
		move "up"
		pause 0.5
		move "east"
	elsif @repair_room == "Main"
		move "up"
	elsif @repair_room == "Cargo"
		return
	elsif @repair_room == "Mess"
		move "east"
	elsif @repair_room == "Crew"
		move "west"
	elsif @repair_room == "Captain"
		move "up"
		pause 0.5
		move "west"
		pause 0.5
		move "go door"
	elsif @repair_room == "Crow"
		move "up"
		pause 0.5
		move "up"
	elsif @repair_room == "FCrow"
		move "up"
		pause 0.5
		move "east"
		pause 0.5
		move "east"
		pause 0.5
		move "up"
	elsif @repair_room == "Social"
		move "east"
		pause 0.5
		move "east"
	elsif @repair_room == "Helm"
		move "up"
		pause 0.5
		move "west"
	end
end

def crew_repairs_finished
	crew_go_to_main_deck
	move "down"
	if checkleft
		fput "put left in wood"
	end
	if checkright
		fput "put right in wood"
	end
	move "up"
	echo "The Hull is Repaired Captain!"
	@crew_repairs_complete = true
end

def crew_out_of_wood
	crew_go_to_main_deck
	move "down"
	if checkleft
		fput "put left in wood"
	end
	if checkright
		fput "put right in wood"
	end
	move "up"
	echo "We Are Out of Shoring Planks Captain!"
	@crew_out_of_wood = true
end

def crew_get_wood
	waitrt?
	if checkleft and checkright
		return
	end
	result = dothistimeout "get wood", 3, /You will need a free|You search through the salvaged wood and|You search through the salvaged wood only|...wait/
		if result =~ /You will need a free/
			return
		elsif result =~ /You search through the salvaged wood and/
			waitrt?
			crew_get_wood
		elsif result =~ /You search through the salvaged wood only/
			waitrt?
			crew_out_of_wood
		elsif result =~ /...wait/
			pause 1
			waitrt?
			crew_get_wood
		end
end

def crew_fix_ship
	waitrt?
	if @fixed == true
		return
	end
	if !checkleft and !checkright
			waitrt?
			crew_to_wood
			crew_get_wood
			if @crew_out_of_wood == true
				return
			end
			crew_from_wood
	end
	result = dothistimeout "fix", 3, /...wait|all the damage|some of the damage|This area does not look/
		if result =~ /...wait/
			pause 1
			waitrt?
			crew_fix_ship
		elsif result =~ /all the damage/
			@fixed = true
			waitrt?
			crew_fix_ship
		elsif result =~ /some of the damage/
			@fixed = false
			waitrt?
			crew_fix_ship
		elsif result =~ /This area does not look/
			@fixed = true
			waitrt?
			crew_fix_ship
		end
end

def crew_assess_damage
	waitrt?
	result = dothistimeout "assess", 3, /It appears to be|You cannot seem to find any damage/
		if result =~ /It appears to be/
			waitrt?
			return
		elsif result =~ /You cannot seem to find any damage./
				@fixed = true
				if get =~ /\[Health of your ship: (.*)\/(.*)\]/
					if $1 == $2
						waitrt?
						crew_repairs_finished
					else
						return
					end
				end
		end
end

def crew_check_rooms
	fput "assess"
	while line = get
	case line
		when /Main Deck:  You cannot seem/
			@crew_master = true
		when /Main Deck:  It appears to be/
			@crew_master = true
			@crew_main = true
		when /Helm:  It appears to be/
			@crew_helm = true
		when /Cargo Hold:  It appears to be/
			@crew_cargo = true
		when /Captain\'s Quarters:  It appears to be/
			@crew_captain = true
		when /Forward Crow's Nest:  It appears to be/
			@crew_fcrow = true
		when /Crow's Nest:  It appears to be/
			@crew_crow = true
		when /Mess Hall:  It appears to be/
			@crew_mess = true
		when /Mid Deck:  It appears to be/
			@crew_mid = true
		when /Crew Quarters:  It appears to be/
			@crew_crew = true
		when /Bow:  It appears to be/
			@crew_bow = true
		when /Social Room:  It appears to be/
			@crew_social = true
		when /Forward Deck:  It appears to be/
			@crew_forward = true
		when /\[Health of your ship: (.*)\/(.*)\]/
			if $1 == $2
				waitrt?
				crew_repairs_finished
				return
			end
		when /Roundtime:/
			return	
	end
	end
end

def crew_repair_sequence
	if @crew_master == true
		crew_get_wood
		crew_from_wood
		crew_fix_ship
		if @crew_repairs_complete == true or @crew_out_of_wood == true
			return
		end
		crew_to_wood
	end
	if @crew_master == false
		crew_assess_damage
		if @crew_repairs_complete == true or @crew_out_of_wood == true
			return
		end
		crew_fix_ship
		if @crew_repairs_complete == true or @crew_out_of_wood == true
			return
		end
	end
end


def crew_repairs_mid_deck
	@fixed = false
	@repair_room = "Mid"
	if @crew_mid == true
		crew_repair_sequence
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_finished
end

def crew_repairs_forward_crow
	@fixed = false
	@repair_room = "FCrow"
	if @crew_fcrow == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "down"
		pause 0.5
		move "west"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_mid_deck
end

def crew_repairs_forward_deck
	@fixed = false
	@repair_room = "Forward"
	if @crew_forward == true
		crew_repair_sequence
	end
	if @crew_master == false
		if @crew_ship_type == "man o' war"
			move "up"
			crew_repairs_forward_crow
		end
		if @crew_ship_type == "galleon" or "carrack" or "frigate" or "brigantine"
			crew_repairs_finished
		end
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_forward_crow
end

def crew_repairs_bow
	@fixed = false
	@repair_room = "Bow"
	if @crew_bow == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "west"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_forward_deck
end

def crew_repairs_crew_quarters
	@fixed = false
	@repair_room = "Crew"
	if @crew_crew == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "east"
		pause 0.5
		move "up"
		pause 0.5
		move "east"
		pause 0.5
		if @crew_ship_type == "brigantine"
			crew_repairs_forward_deck
		end
		if @crew_ship_type == "man o' war"
			move "east"
			pause 0.5
			move "east"
			pause 0.5
			crew_repairs_bow
		end
		if @crew_ship_type == "galleon" or "carrack" or "frigate"
			move "east"
			pause 0.5
			crew_repairs_bow
		end
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_bow
end

def crew_repairs_mess_hall
	@fixed = false
	@repair_room = "Mess"
	if @crew_mess == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "west"
		pause 0.5
		move "west"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_crew_quarters
end

def crew_repairs_social_room
	@fixed = false
	@repair_room = "Social"
	if @crew_social == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "west"
		pause 0.5
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_mess_hall
end

def crew_repairs_cargo_hold
	@fixed = false
	@repair_room = "Cargo"
	if @crew_cargo == true
		crew_repair_sequence
	end
	if @crew_master == false
		if @crew_ship_type == "sloop"
			crew_repairs_finished
		end
		if @crew_ship_type == "man o' war" or "frigate" or "galleon"
				move "east"
				pause 0.5
				move "east"
				pause 0.5
				crew_repairs_social_room
		end
		if @crew_ship_type == "carrack" or "brigantine"
				move "east"
				pause 0.5
				crew_repairs_mess_hall
		end
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_social_room
end

def crew_repairs_crow_nest
	@fixed = false
	@repair_room = "Crow"
	if @crew_crow == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "down"
		pause 0.5
		move "down"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_cargo_hold
end

def crew_repairs_captain_quarters
	@fixed = false
	@repair_room = "Captain"
	if @crew_captain == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "out"
		pause 0.5
		move "east"
		pause 0.5
		move "up"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_crow_nest
end

def crew_repairs_helm
	@fixed = false
	@repair_room = "Helm"
	if @crew_helm == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "go door"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_captain_quarters
end

def crew_repairs_main_deck
	@fixed = false
	@repair_room = "Main"
	if @crew_main == true
		crew_repair_sequence
	end
	if @crew_master == false
		move "west"
	end
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_repairs_helm
end

def crew_not_master
	@crew_master = false 
	@crew_main = true
	@crew_helm = true
	@crew_captain = true
	@crew_crow = true
	@crew_cargo = true
		if @crew_ship_type == "brigantine"
			@crew_mess = true
			@crew_forward = true
			@crew_crew = true
		end
		if @crew_ship_type == "carrack"
			@crew_bow = true
			@crew_mess = true
			@crew_forward = true
			@crew_crew = true
		end
		if @crew_ship_type == "galleon" or "frigate"
			@crew_bow = true
			@crew_mess = true
			@crew_forward = true
			@crew_crew = true
			@crew_social = true
		end
		if @crew_ship_type == "man o' war"
			@crew_bow = true
			@crew_mess = true
			@crew_forward = true
			@crew_crew = true
			@crew_social = true
			@crew_mid = true
			@crew_fcrow = true
		end
	move "up"
	crew_repairs_main_deck
end

def crew_start_damage_control
	pause 0.5
	if checkleft or checkright
		echo "









					 ******************* YOU MUST EMPTY YOUR HANDS BEFORE MAKING REPAIRS *********************








		"
		return
	end
	@crew_out_of_wood = false
	@crew_repairs_complete = false
	@crew_master = false
	@crew_main = false
	@crew_helm = false
	@crew_captain = false
	@crew_crow = false
	@crew_cargo = false
	@crew_mess = false
	@crew_social = false
	@crew_crew = false
	@crew_bow = false
	@crew_mid = false
	@crew_forward = false
	@crew_fcrow = false

	crew_go_to_main_deck
	move "down"
	crew_check_rooms
	if @crew_repairs_complete == true or @crew_out_of_wood == true
		return
	end
	crew_ship_type
	if @crew_master == true
		crew_repairs_main_deck
	end
	if @crew_master == false
		crew_not_master
	end
end

def crew_help_display
	respond ""
	respond "   Usage: "
	respond ""
	respond "   ;osacrew setup                       Opens the setup window"
	respond "   ;osacrew underway                    Will get your ship underway"
	respond "   ;osacrew underway anchor             Will raise the anchor"
	respond "   ;osacrew underway sails              Will lower your sails"
	respond "   ;osacrew repair                      Will begin damage control on the ship"
	respond "   ;osacrew swap                        Enables you to swap commands with ease"
	respond "   ;osacrew orders                      Will await your commander to announce location of ship then board ship"
	respond "   ;osacrew disembark                   Will depart the crew at the next convienent location"
	respond "   ;osacrew settings                    Will show current settings"
	respond ""
	respond "   This is a companion to osacommander. It is ran on your crew members to complete simple tasks on the ship including combat. "
	respond "   Enjoy "
	respond ""
	respond "   ~Peggyanne "
	respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
		exit
end

def crew_sell
	if UserVars.osacrew["slootsell"]
		start_script("eloot", ['sell'])
		wait_while { running?("eloot") }
	end
	crew_task_complete
end

def crew_match_city
	if (Room.current.location.include? "Landing" or Room.current.location.include? "Solhaven") and (@crew_orders_town.include? "Solhaven" or @crew_orders_town.include? "Landing")
		@crew_city_match = true
	end
	if Room.current.location.include? "River's Rest" and @crew_orders_town.include? "River's Rest"
		@crew_city_match = true
	end
	if Room.current.location.include? "Kharam-Dzu" and @crew_orders_town.include? "Kharam-Dzu"
		@crew_city_match = true
	end
	if Room.current.location.include? "Kraken's Fall" and @crew_orders_town.include? "Kraken's Fall"
		@crew_city_match = true
	end
	if @crew_city_match == true
		start_script("go2", [@crew_orders_room])
		wait_while { running?("go2") }
		fput "go gangplank"
		multimove "west", "go door"
		respond "
		Crewman #{checkname} Standing By And Awaiting Orders Captain!
		"
		return
	else
		respond "
		The Ship Has Arrived In #{@crew_orders_town}, Please Travel Closer Or Await It's Arrival Near #{Room.current.location}
		"
		exit
	end
end

def crew_start_orders
	@crew_city_match = false
	respond "   ---------------------------==================================================================================================---------------------------

				                                               Welcome Back Crewman #{checkname}, Waiting For The Ship To Arrive!

	   ---------------------------==================================================================================================---------------------------"
	   while line = get
	   case line
	   when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"The Ship Is Now Moored In (.*). Room Number: (.*) \[/
		@crew_orders_town = $1
		@crew_orders_room = $2
		do_client ";chat to #{UserVars.osacrew["commander"]} Crewman #{checkname}, Requesting Permission To Come Aboard!"
		result = matchtimeout 30, /^\[Private]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Granted\, Come Aboard!"|^\[Private]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!"/
			if result =~ /^\[Private]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Granted\, Come Aboard!"/
				crew_match_city
				return
			elsif result =~ /^\[Private]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!"/
				respon "
						Sorry Shipmate, The Ship Has A Full Berth! Restarting Orders!
						"
				crew_start_orders
		end
	end	
	end
end

def crew_display_settings
	respond "

Your Current Crew Settings Are As Follows:

Commander:                  #{UserVars.osacrew["commander"]}

Crew:                       #{UserVars.osacrew["crew"]}

Medical Officer:            #{UserVars.osacrew["medicalofficer"]}

Society Script:             #{UserVars.osacrew["societyscript"]}

Spell Up Script:            #{UserVars.osacrew["spellupscript"]}

"
end

def crew_disembark
	UserVars.osacrew["depart"] = true
	respond ""
	respond "                     You Will Depart The Crew When The Crew Visits The Bank Next!
	                                      Thanks For Sailing With Us...
										 "
end

def crew_crew_swap
	if variable[2].nil?
			respond "
		 
		 Select A Crew, Commander and Medical Officer 
		  ;osacrew <crew> <commander> <medicalofficer>
		 
		 "
		exit
	end
	UserVars.osacrew["crew"] = "#{variable[2]}"
	UserVars.osacrew["commander"] = "#{variable[3]}"
	UserVars.osacrew["medicalofficer"] = "#{variable[4]}"
	
	respond ""
	respond "Your Crew Settings Are:"
	respond ""
	respond "Crew:                #{UserVars.osacrew["crew"]}"
	respond "Commander:           #{UserVars.osacrew["commander"]}"
	respond "Medical Officer:     #{UserVars.osacrew["medicalofficer"]}"
	respond ""
	respond ""
end

if script.vars[1] =~ /call/
(eval script.vars[2]).call

elsif (script.vars[1] =~ /setup/i)
  self.setup()
  exit
elsif script.vars[1].downcase == 'help'
	crew_help_display
elsif script.vars[1].downcase == 'swap'
	crew_crew_swap
elsif script.vars[1].downcase == 'orders'
	crew_start_orders
elsif script.vars[1] == '?'
	crew_help_display
elsif script.vars[1] =~ /underway/
		if script.vars[2].nil?
			crew_get_underway
			exit
		end
		if !script.vars[2].include? "sai" and !variable[2].include? "anc"
			respond "
					Please Select A Valid Underway Option: Sails or Anchor.
						No Option Will default To Full Underway Process
					"
		end
		if script.vars[2].include? "sai"
			crew_how_many_masts
		end
		if script.vars[2].include? "anc"
			crew_go_to_capstan
		end	
elsif script.vars[1] =~ /repair/
	crew_start_damage_control
elsif script.vars[1] =~ /settings/
	crew_display_settings
	exit
end

before_dying {
if checkname == (UserVars.osacrew["commander"])
	if script.vars[1] != /settings/
		do_client ";chat on #{UserVars.osacrew["crew"]} *Ding* *Ding* #{@ship_name} Departing!"
	end
else
	if !script.vars[1] != /settings/
		do_client ";chat on #{UserVars.osacrew["crew"]} *Ding* *Ding* Crewman #{checkname} Departing!"
	end
end
}

toggle_upstream

Thread.new{
	loop{
		command = upstream_get
			if command =~/^\<c\>;osacrew setup/i
				self.setup()
			elsif command =~/^\<c\>;osacrew settings/i
				variable[1] = "settings"
				crew_display_settings
			elsif command =~/^\<c\>;osacrew disembark/i
				crew_disembark
			end
	}
}

fput "flag sortedview on"
UserVars.osacrew["depart"] = false
@crew_lowered_sail = false
@crew_anchor_aweigh = false
if script.vars[1].nil?
	crew_display_settings
end

	while line = get
	case line
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["blesser"]}\: \"Does Anyone Need A Bless\?\"/
		if running? "pb"
			next
		end
		if UserVars.osacrew["needbless"]
			crew_get_bless
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "(Ok Lets Do This!|Undead Mode!)\"/
		if UserVars.osacrew["osacombat"] == true
			if !running? "osacombat"
				start_script "osacombat"
			end
		else
			echo "You Are Not Currently In A Combatant Role, Ready Thyself For Combat!"
			fput "gird"
			if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
				fput "leave"
				move "go door"
			end
		end
		#start_script "osahealthmonitor"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Turn To!\"/
		wait_until { !running?("eloot") }
		if UserVars.osacrew["osacombat"] == true
				stop_script "osacombat"
				wait_while { running?("osacombat") }
		end
		waitrt?
		waitcastrt?
		if checkleft or checkright
			fput "store both"
		end
		if running? "osahealthmonitor"
			#stop_script "osahealthmonitor"
		end
		fput "leave"
		pause 0.5
		fput "group open"
		crew_damage_control
		wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
		#waitfor /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Status Report!\"/
		crew_task_complete
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Silvers\"/
		crew_give_coins
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Stop\"/
		if UserVars.osacrew["osacombat"] == true
			if running? "osacombat"
				stop_script "osacombat"
				wait_while { running?("osacombat") }
			end
			waitrt?
			waitcastrt?
			fput "store both"
			if running? "osahealthmonitor"
				#stop_script "osahealthmonitor"
			end
		end
	when /^\[Private]-GSIV:#{UserVars.osacrew["commander"]}\: \"Gem Count Please\"/
			crew_gem_count
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"All Hands Make Ready To Get Underway!\"/
		if UserVars.osacrew["osacrewtasks"] == true
			fput "leave"
			pause 0.5
			fput "group open"
			crew_how_many_masts
			move "go door"
		else
			crew_go_to_main_deck
			pause 0.5
			multimove "west", "go door"
			echo "You Are Not Currently In A Crew Role, Please Standby To Standby!" 
		end
		pause 1
		wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
		crew_task_complete
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Exit\"/
		fput "exit"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Status\"/
		crew_status_check
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Spells\"/
		crew_spell_up
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Exp\"/
		crew_exp_check
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Task Time!\"/
		crew_check_task
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Deposit\"/
		if UserVars.osacrew["depart"] == true
			multifput "depo all", "salute #{UserVars.osacrew["commander"]}", "whisper #{UserVars.osacrew["commander"]} Thank you for the privilege captain!", "turn #{checkname}"
			start_script("go2", ['town'])
			wait_while { running?("go2") }
			exit
		end
		fput "depo all"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Sheath\"/
		do_client "sheath"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Reset\"/
		do_client ";e stop_script 'osacrew';wait_while { running?('osacrew') };start_script 'osacrew'"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Change Of Command: (.*)\"/
		UserVars.osacrew["commander"] = $1
		respond "
		Your New Commanding Officer Is Now: #{UserVars.osacrew["commander"]}
		"
		when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Crew Swap: (.*)\"/
		do_client ";lnet untune #{UserVars.osacrew["crew"]}"
		pause 0.5
		UserVars.osacrew["crew"] = $1
		pause 0.5
		do_client ";lnet tune #{UserVars.osacrew["crew"]}"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Pause\"/
		if UserVars.osacrew["osacombat"] == true
			if running? "osacombat"
				pause_script "osacombat"
			end
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Unpause\"/
		if UserVars.osacrew["osacombat"] == true
			if running? "osacombat"
				unpause_script "osacombat"
			end
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Dumpem!\"/
		if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne")
			crew_dump_gems
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:(.*)\: \"I Need Mana!\"$/
		@manaperson = $1
		echo @manaperson
		crew_send_mana
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Make Repairs!\"/
		if UserVars.osacrew["osacrewtasks"]
			crew_damage_control
		else
			echo "You Are Not Currently In A Crew Role, Please Standby To Standby!"
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Can Anyone Bless\?\"/
		if UserVars.osacrew["givebless"]
			do_client ";chat to #{UserVars.osacrew["commander"]} I Can Captain!"
			result = matchtimeout 3, /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"#{checkname}, Will You Please Bless The Crew\?"/
				if result =~ /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"#{checkname}, Will You Please Bless The Crew\?"/
					do_client ";chat on #{UserVars.osacrew["crew"]} Of Course Captain!"
					@blessname = Array.new
					do_client ";chat on #{UserVars.osacrew["crew"]} Does Anyone Need A Bless?"
					crew_who_needs_blessed
					@blessname.each do |n|
						@name = n
						crew_give_bless
					end
					do_client ";chat on #{UserVars.osacrew["crew"]} The Crew Has Been Properly Blessed Captain!"
				else
					next
				end
		else
			next
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"(.*), Will You Please Bless The Crew\?\"/
		UserVars.osacrew["blesser"] = $1
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"I Will Be Providing All Crew Blessings!\"/
		UserVars.osacrew["blesser"] = UserVars.osacrew["commander"]
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Quarters! All Hands To Quarters For Muster, Instruction and Inspection!\"/
			pause rand(5)
			do_client ";chat to #{UserVars.osacrew["commander"]} Crewman #{checkname} Reporting For Duty Captain!"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Invoker!\"/
		fput "ask invoker about spells"
		pause 0.5
		fput "spell active"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Update (.*)\"/
		if (checkname != "Bait") and (checkname != "Subeta") and (checkname != "Ithloria") and (checkname != "Carolanne")
			do_client ";repo download #{$1}"
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Crew, Report To: (.*)\"/
		echo $1
		start_script("go2", [$1])
		wait_while { running?("go2") }
		multifput "salute #{UserVars.osacrew["commander"]}", "join #{UserVars.osacrew["commander"]}"
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Mana Spellup\"/
		if (Stats.prof != "Warrior") and (Stats.prof !="Rogue")
			fput "mana spellup"
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Backdoor (.*) (.*)\"/
		if (checkname == "#{$1}")
			do_client "#{$2}"
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:(.*): "\*Ding\* \*Ding\* Crewman (.*) Departing!\"/
		if checkname == (UserVars.osacrew["commander"])
			respond "
			Removing #{$2} From The Ship's Roster!
			"
			@crewsize.delete "#{$2}"
			do_client ";var set crewsize= #{@crewsize.count}"
		end
	when /You make your way across the #{@gangplank}/
		@home = Room.current.id.to_s
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Sell Gems\"/
		if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne")
			fput "rem my pouch"
			pause 0.5
			fput "open my pouch"
			pause 0.5
			fput "sell my pouch"
			pause 0.5
			fput "close my pouch"
			pause 0.5
			fput "wear my pouch"
		end
	when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Sell Your Loot And Report When You Are Done\"/
		crew_sell
	when /Attention To Quarters!/
		fput "snap attention"
		waitfor /Post!/
		fput "salute #{UserVars.osacrew["commander"]}" if UserVars.osacrew["commander"] != checkname
		if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne") or (checkname == "Dargol")
			fput "exit"
		end
	end
	end