UserVars.osacrew["crewversion"] = '5.9.0 (September 3rd, 2024)'
$TITLE = "OSACrew: v. (#{UserVars.osacrew["crewversion"]})"
$osacrew = self
@once = "False"

		  $get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }

=begin
	OSACrew Version: 5.9.0 (September 3rd, 2024)
	
	   Usage: 
	
	   ;osacrew setup                       Opens the setup window
	   ;osacrew underway                    Will get your ship underway
	   ;osacrew underway anchor             Will raise the anchor
	   ;osacrew underway sails              Will lower your sails
	   ;osacrew navigation                  Will begin port to port travel
	   ;osacrew repair                      Will begin damage control on the ship
	   ;osacrew cannons                     Will man the cannons of your choosing
	   ;osacrew swap                        Enables you to swap commands with ease
	   ;osacrew orders                      Will await your commander to announce location of ship then board ship
	   ;osacrew disembark                   Will depart the crew at the next convienent location
	   ;osacrew settings                    Will show current settings
	   ;osacrew profile                     Will save/load profiles for different commander settings
	
	   This is a companion to OSACommander. It is ran on your crew members to complete simple tasks on the ship including combat. 
	   Enjoy 
	
	   ~Peggyanne 
	 PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. 
=end

def crew_help_display
	respond ""
	respond "   OSACrew Version: #{UserVars.osacrew["crewversion"]}"
	respond ""
	respond "   Usage: "
	respond ""
	respond "   ;osacrew setup                       Opens the setup window"
	respond "   ;osacrew underway                    Will get your ship underway"
	respond "   ;osacrew underway anchor             Will raise the anchor"
	respond "   ;osacrew underway sails              Will lower your sails"
	respond "   ;osacrew navigation                  Will begin port to port travel"
	respond "   ;osacrew repair                      Will begin damage control on the ship"
	respond "   ;osacrew cannons                     Will man the cannons of your choosing"
	respond "   ;osacrew swap                        Enables you to swap commands with ease"
	respond "   ;osacrew orders                      Will await your commander to announce location of ship then board ship"
	respond "   ;osacrew disembark                   Will depart the crew at the next convienent location"
	respond "   ;osacrew settings                    Will show current settings"
	respond "   ;osacrew profile                     Will save/load profiles for different commander settings"
	respond ""
	respond "   This is a companion to OSACommander. It is ran on your crew members to complete simple tasks on the ship including combat. "
	respond "   Enjoy "
	respond ""
	respond "   ~Peggyanne "
	respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
end

  def set_value(key, clean, default)
    if (!UserVars.osacrew[key].nil? && UserVars.osacrew[key] !~ /^\s*$/)
      cleaned = clean_value(clean, UserVars.osacrew[key])
      instance_variable_set("@#{key.upcase}", cleaned)
    else
      instance_variable_set("@#{key.upcase}", default)
    end
  end
  
  def self.profile(vars)
  require 'yaml'
  require 'fileutils'
  FileUtils.mkdir_p(File.join($data_dir, XMLData.game, Char.name, "osacrew_profiles"))
    if vars[2] =~ /load/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacrew_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if !File.exist?("#{filename}")
          respond ""
          respond " You are trying to load a profile that does not exist."
          respond ""
          respond "***************************"
          respond " Notice- your default osacrew profiles folder has changed to:"
          respond " #{dir}"
          respond ""
          respond " The old location is here: #{File.join($script_dir, 'osacrew_profiles')}"
          respond " You can copy this folder or appropriate profiles into the relevant character directory in your operating system"
          respond "****************************"
          respond ""
        else
          from_file = YAML.load_file(filename)
          UserVars.osacrew = from_file
          echo "Settings loaded from profile: #{filename}."
        end
      else
        echo "You forgot to name your profile you wish to load."
        echo "Syntax: ;osacrew profile load <NAME Here, no Spaces!>"
      end
    elsif vars[2] =~ /save/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacrew_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if File.exist?("#{filename}")
          echo "File already exists, if you wish to overwrite, please ;unpause osacrew."
          echo "Else ;kill osacrew and choose another filename."
          pause_script
        end
        File.write(filename, UserVars.osacrew.to_yaml)
        echo "Settings saved to profile: #{filename}."
      else
        echo "You forgot to name your profile you wish to save."
        echo "Syntax: ;osacrew profile save <NAME Here, no Spaces!>"
      end
    end
  end
	  
def self.setup
	@theme_state = Lich.track_dark_mode if defined? Lich.track_dark_mode
    Gtk.queue do
      @get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  @OC_WINDOW = Gtk::Window.new
      @OC_WINDOW.title = $TITLE
      @OC_WINDOW.set_icon(@default_icon)
      @OC_WINDOW.set_border_width(10)
      @OC_WINDOW.keep_above = true
	  
		if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
			grey = Gdk::RGBA::parse("#d3d3d3")
			@OP_WINDOW.override_background_color(:normal, grey)
		end

      @OC_BOX = @get_vBox.call
      @OC_BOX.set_border_width(5)
      @OC_WINDOW.add(@OC_BOX)

      @OC_NOTEBOOK = Gtk::Notebook.new
      @OC_NOTEBOOK.set_show_border(true)
	  if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
		@OC_NOTEBOOK.override_background_color(:normal, grey)
	  end
      @OC_BOX.add(@OC_NOTEBOOK)
      @OC_ENTRY = Hash.new # For mapping entries to variables
      @OC_TABLE_SIZE = Hash.new # For mapping table sizes

  end
  
	Gtk.queue do
      tab_names = %w[
        General
		Support
      ]
	  
     tab_names.each.with_index(1) do |name, val|
        new_table = Gtk::Table.new(10, 4, true).tap do |table|
          table.row_spacings = 1
          table.column_spacings = 1
        end

        new_box = if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end

        if Gtk.check_version(3,0,0).nil?
          new_box.pack_start(new_table, expand: false, fill: false, padding: 0)
        else
          new_box.pack_start(new_table, false, false, 0)
        end

        @OC_NOTEBOOK.append_page(new_box, Gtk::Label.new(name))

        instance_variable_set("@OC_TABLE#{val}", new_table)
        instance_variable_set("@OC_VERTICAL_BOX#{val}", new_box)
      end
end

def self.add_label_entry(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacrew[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 1, 2, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end

def self.add_label_entry2(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacrew[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 3, 4, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry3(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry4(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry5(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 4, 5, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry6(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 1, 2, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

    def self.add_dropdown(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacrew[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacrew[variable].to_s != "Fixnum" && UserVars.osacrew[variable].to_s != "Integer"
          UserVars.osacrew[variable]
        end
        dropdown.set_active(UserVars.osacrew[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 0, 1, size, size + 1)
      table.attach(align2, 1, 2, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

def self.add_dropdown2(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacrew[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacrew[variable].to_s != "Fixnum" && UserVars.osacrew[variable].to_s != "Integer"
          UserVars.osacrew[variable]
        end
        dropdown.set_active(UserVars.osacrew[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 2, 3, size, size + 1)
      table.attach(align2, 3, 4, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

      def self.add_text_area(vbox, label, variable)
      # Grab value for a manual check since we can't rely on a version of Ruby with safe operators
      current_value = UserVars.osacrew[variable]

      entry = Gtk::TextView.new
      entry.buffer.text = current_value ? current_value.gsub("||","\n") : ""

      swin = Gtk::ScrolledWindow.new
      swin.border_width = 5
      swin.add(entry)
      swin.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

      frame = Gtk::Frame.new(label)
      frame.add(swin)

      vbox.pack_start_defaults(frame)

      @OC_ENTRY[variable] = entry
    end
  Gtk.queue do
    @OC_ENTRY = Hash.new
	add_label_entry3(@OC_TABLE1, "Chain Of Command Settings:", true)
    add_label_entry(@OC_TABLE1, "Commander:", 'commander', true)	
	add_label_entry(@OC_TABLE1, "Crew Channel:", 'crew', true)
	add_label_entry(@OC_TABLE1, "Medical Officer:", 'medicalofficer', true)
	#add_label_entry(@OC_TABLE1, "Security Officer:", 'securityofficer', true)
	#add_label_entry(@OC_TABLE1, "Security Officer Room Number:", 'security_officer_location', true)
	add_label_entry3(@OC_TABLE1, "General Settings:", true)
	add_label_entry(@OC_TABLE1, "Percent Mana Before Getting Underway (Default: 80)", 'checkformana', true)
	add_checkbox(@OC_TABLE1, 0,  "Perform Crew Tasks (Sails and Repairs)", 'osacrewtasks')
	add_checkbox(@OC_TABLE1, 1,  "Wind The Sails", 'windedsails', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Mana Spellup Before Group Spellup", 'mana_spellup')
	add_checkbox(@OC_TABLE1, 1,  "Cast At Crew During Group Spellup", 'groupspellup')
	add_checkbox(@OC_TABLE1, 2,  "Cast At Self During Group Spellup", 'selfspellup', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Long Term Exp Boost At Task Turn In", 'uselte')
	add_checkbox(@OC_TABLE1, 1,  "Sell Loot", 'lootsell', true)
	add_label_entry3(@OC_TABLE2, "Armor Specializations Known:", false)
	add_label_entry6(@OC_TABLE2, "Armor Specialization To Use:", false)
	add_label_entry4(@OC_TABLE2, "Armor Specialization To Request:", true)
	add_label_entry3(@OC_TABLE2, "", true)
	add_checkbox(@OC_TABLE2, 0,  "Armor Blessing", 'have_armor_blessing', false)
	add_checkbox(@OC_TABLE2, 1,  "Armor Blessing", 'use_armor_blessing', false)
	add_checkbox(@OC_TABLE2, 2,  "Armor Blessing", 'need_armor_blessing', true)
	add_checkbox(@OC_TABLE2, 0,  "Armor Reinforcement", 'have_armor_reinforcement', false)
	add_checkbox(@OC_TABLE2, 1,  "Armor Reinforcement", 'use_armor_reinforcement', false)
	add_checkbox(@OC_TABLE2, 2,  "Armor Reinforcement", 'need_armor_reinforcement', true)
	add_checkbox(@OC_TABLE2, 0,  "Armor Support", 'have_armor_support', false)
	add_checkbox(@OC_TABLE2, 1,  "Armor Support", 'use_armor_support', false)
	add_checkbox(@OC_TABLE2, 2,  "Armor Support", 'need_armor_support', true)
	add_checkbox(@OC_TABLE2, 0,  "Armored Casting", 'have_armor_casting', false)
	add_checkbox(@OC_TABLE2, 1,  "Armored Casting", 'use_armor_casting', false)
	add_checkbox(@OC_TABLE2, 2,  "Armored Casting", 'need_armor_casting', true)
	add_checkbox(@OC_TABLE2, 0,  "Armored Evasion", 'have_armor_evasion', false)
	add_checkbox(@OC_TABLE2, 1,  "Armored Evasion", 'use_armor_evasion', false)
	add_checkbox(@OC_TABLE2, 2,  "Armored Evasion", 'need_armor_evasion', true)
	add_checkbox(@OC_TABLE2, 0,  "Armored Fluidity", 'have_armor_fluidity', false)
	add_checkbox(@OC_TABLE2, 1,  "Armored Fluidity", 'use_armor_fluidity', false)
	add_checkbox(@OC_TABLE2, 2,  "Armored Fluidity", 'need_armor_fluidity', true)
	add_checkbox(@OC_TABLE2, 0,  "Armored Stealth", 'have_armor_stealth', false)
	add_checkbox(@OC_TABLE2, 1,  "Armored Stealth", 'use_armor_stealth', false)
	add_checkbox(@OC_TABLE2, 2,  "Armored Stealth", 'need_armor_stealth', true)
	add_label_entry3(@OC_TABLE2, "", true)
	add_checkbox(@OC_TABLE2, 0,  "Use Armor Specializations On Crew", 'armor_specs')
end
  
    def self.add_checkbox(table, x_pos, label, variable, newrow = false, default = false)
      size = @OC_TABLE_SIZE[table] || 0
      checkbox = Gtk::CheckButton.new label
      value = UserVars.osacrew[variable] || default
      checkbox.active = value
      table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
      @OC_ENTRY[variable] = checkbox
      @OC_TABLE_SIZE[table] += 1 if newrow
    end
	
  Gtk.queue do
    @OC_WINDOW.signal_connect("delete_event") {
      @OC_SETUP_COMPLETED = true
    }
  end

  Gtk.queue do 
	
    @OC_WINDOW.show_all
  end

  @OC_SETUP_COMPLETED = false
  until(@OC_SETUP_COMPLETED)
    sleep(0.5)
  end

    UserVars.osacrew ||= Hash.new
    @OC_ENTRY.keys.each do |key|
      echo "#{key} - #{@OC_ENTRY[key].to_s}" if $osacrew_debug
      if @OC_ENTRY[key].to_s =~ /CheckButton/
        value = @OC_ENTRY[key].active?
        UserVars.osacrew[key] = @OC_ENTRY[key].active?
      elsif @OC_ENTRY[key].to_s =~ /ComboBox/
        UserVars.osacrew[key] = @OC_ENTRY[key].active
      elsif @OC_ENTRY[key].to_s =~ /TextView/
        # Store these with double pipes so we don't mess up any supplied expressions
        UserVars.osacrew[key] = @OC_ENTRY[key].buffer.text.gsub("\n","||")
      else
        if key == 'wounded_eval'
          UserVars.osacrew[key] = @OC_ENTRY[key].text
        else
          UserVars.osacrew[key] = @OC_ENTRY[key].text.strip
        end
      end
    end
    UserVars.save

  Gtk.queue do
    @OC_WINDOW.destroy
 end
end

#================= Shipboard Movement Section =================

def ship_type
	#Sloop Map
	if !Room[29038].tags.include? "main_deck"
		Room[29039].tags.push("cargo_hold")
		Room[29038].tags.push("main_deck")
		Room[29040].tags.push("crows_nest")
		Room[29041].tags.push("helm")
		Room[29042].tags.push("captains_quarters")
		Room[29038].tags.push("main_cannon")
	end
	if !Room[30787].tags.include? "enemy_main_deck"
		Room[30790].tags.push("enemy_cargo_hold")
		Room[30787].tags.push("enemy_main_deck")
		Room[30791].tags.push("enemy_crows_nest")
		Room[30788].tags.push("enemy_helm")
		Room[30789].tags.push("enemy_quarters")
	end
	if Room[29038].wayto["30787"].nil?
		Room[29038].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30787"] = 0.2
		Room[29038].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30792"] = 0.2
		Room[29038].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30266"] = 0.2
		Room[29038].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30798"] = 0.2
		Room[29038].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30805"] = 0.2
		Room[29038].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30778"] = 0.2
	end
	#Brigantine Map
	if !Room[30142].tags.include? "main_deck"
		Room[30145].tags.push("cargo_hold")
		Room[30142].tags.push("main_deck")
		Room[30144].tags.push("forward_deck")
		Room[30143].tags.push("crows_nest")
		Room[30147].tags.push("mess_hall")
		Room[30146].tags.push("crew_quarters")
		Room[30141].tags.push("helm")
		Room[30140].tags.push("captains_quarters")
		Room[30142].tags.push("main_cannon")
		Room[30144].tags.push("forward_cannon")
	end
	if !Room[30792].tags.include? "enemy_main_deck"
		Room[30795].tags.push("enemy_cargo_hold")
		Room[30792].tags.push("enemy_main_deck")
		Room[30797].tags.push("enemy_forward_deck")
		Room[30796].tags.push("enemy_crows_nest")
		Room[30793].tags.push("enemy_helm")
		Room[30794].tags.push("enemy_quarters")
	end
	if Room[30142].wayto["30787"].nil?
		Room[30142].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30787"] = 0.2
		Room[30142].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30792"] = 0.2
		Room[30142].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30266"] = 0.2
		Room[30142].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30798"] = 0.2
		Room[30142].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30805"] = 0.2
		Room[30142].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30778"] = 0.2
	end
	#Carrack Map
	if !Room[30119].tags.include? "main_deck"
		Room[30125].tags.push("cargo_hold")
		Room[30119].tags.push("main_deck")
		Room[30121].tags.push("forward_deck")
		Room[30122].tags.push("bow")
		Room[30123].tags.push("crows_nest")
		Room[30127].tags.push("mess_hall")
		Room[30126].tags.push("crew_quarters")
		Room[30120].tags.push("helm")
		Room[30124].tags.push("captains_quarters")
		Room[30119].tags.push("main_cannon")
		Room[30121].tags.push("forward_cannon")
	end
	if !Room[30266].tags.include? "enemy_main_deck"
		Room[30269].tags.push("enemy_cargo_hold")
		Room[30266].tags.push("enemy_main_deck")
		Room[30271].tags.push("enemy_forward_deck")
		Room[30272].tags.push("enemy_bow")
		Room[30270].tags.push("enemy_crows_nest")
		Room[30267].tags.push("enemy_helm")
		Room[30268].tags.push("enemy_quarters")
	end
	if Room[30119].wayto["30787"].nil?
		Room[30119].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30787"] = 0.2
		Room[30119].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30792"] = 0.2
		Room[30119].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30266"] = 0.2
		Room[30119].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30798"] = 0.2
		Room[30119].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30805"] = 0.2
		Room[30119].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30778"] = 0.2
	end
	#Galleon Map
	if !Room[30176].tags.include? "main_deck"
		Room[30182].tags.push("cargo_hold")
		Room[30176].tags.push("main_deck")
		Room[30177].tags.push("forward_deck")
		Room[30178].tags.push("bow")
		Room[30181].tags.push("crows_nest")
		Room[30185].tags.push("social_room")
		Room[30184].tags.push("mess_hall")
		Room[30183].tags.push("crew_quarters")
		Room[30179].tags.push("helm")
		Room[30180].tags.push("captains_quarters")
		Room[30176].tags.push("main_cannon")
		Room[30177].tags.push("forward_cannon")
	end
	if !Room[30798].tags.include? "enemy_main_deck"
		Room[30801].tags.push("enemy_cargo_hold")
		Room[30798].tags.push("enemy_main_deck")
		Room[30803].tags.push("enemy_forward_deck")
		Room[30804].tags.push("enemy_bow")
		Room[30802].tags.push("enemy_crows_nest")
		Room[30799].tags.push("enemy_helm")
		Room[30800].tags.push("enemy_quarters")
	end
	if Room[30176].wayto["30787"].nil?
		Room[30176].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30787"] = 0.2
		Room[30176].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30792"] = 0.2
		Room[30176].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30266"] = 0.2
		Room[30176].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30798"] = 0.2
		Room[30176].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30805"] = 0.2
		Room[30176].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30778"] = 0.2
	end
	#Frigate Map
	if !Room[30166].tags.include? "main_deck"
		Room[30167].tags.push("cargo_hold")
		Room[30166].tags.push("main_deck")
		Room[30171].tags.push("forward_deck")
		Room[30172].tags.push("bow")
		Room[30173].tags.push("crows_nest")
		Room[30170].tags.push("social_room")
		Room[30169].tags.push("mess_hall")
		Room[30168].tags.push("crew_quarters")
		Room[30174].tags.push("helm")
		Room[30175].tags.push("captains_quarters")
		Room[30166].tags.push("main_cannon")
		Room[30171].tags.push("forward_cannon")
	end
	if !Room[30805].tags.include? "enemy_main_deck"
		Room[30808].tags.push("enemy_cargo_hold")
		Room[30805].tags.push("enemy_main_deck")
		Room[30810].tags.push("enemy_forward_deck")
		Room[30809].tags.push("enemy_crows_nest")
		Room[30806].tags.push("enemy_helm")
		Room[30807].tags.push("enemy_quarters")
	end
	if Room[30166].wayto["30787"].nil?
		Room[30166].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30787"] = 0.2
		Room[30166].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30792"] = 0.2
		Room[30166].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30266"] = 0.2
		Room[30166].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30798"] = 0.2
		Room[30166].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30805"] = 0.2
		Room[30166].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30778"] = 0.2
	end
	#Man O' War Map
	if !Room[30130].tags.include? "main_deck"
		Room[30136].tags.push("cargo_hold")
		Room[30130].tags.push("main_deck")
		Room[30131].tags.push("mid_deck")
		Room[30132].tags.push("forward_deck")
		Room[30133].tags.push("bow")
		Room[30135].tags.push("crows_nest")
		Room[30134].tags.push("forward_crows_nest")
		Room[30139].tags.push("social_room")
		Room[30138].tags.push("mess_hall")
		Room[30137].tags.push("crew_quarters")
		Room[30128].tags.push("helm")
		Room[30129].tags.push("captains_quarters")
		Room[30130].tags.push("main_cannon")
		Room[30131].tags.push("mid_cannon")
		Room[30132].tags.push("forward_cannon")
	end
	if !Room[30778].tags.include? "enemy_main_deck"
		Room[30781].tags.push("enemy_cargo_hold")
		Room[30778].tags.push("enemy_main_deck")
		Room[30783].tags.push("enemy_mid_deck")
		Room[30786].tags.push("enemy_forward_deck")
		Room[30784].tags.push("enemy_bow")
		Room[30782].tags.push("enemy_crows_nest")
		Room[30785].tags.push("enemy_forward_crows_nest")
		Room[30779].tags.push("enemy_helm")
		Room[30780].tags.push("enemy_quarters")
	end
	if Room[30130].wayto["30787"].nil?
		Room[30130].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30787"] = 0.2
		Room[30130].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30792"] = 0.2
		Room[30130].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30266"] = 0.2
		Room[30130].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30798"] = 0.2
		Room[30130].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30805"] = 0.2
		Room[30130].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30778"] = 0.2
	end
end

def crew_map_gangplank
	if UserVars.osacrew["ship_type"] == "man o' war"
		Room[UserVars.osacrew["gangplank"]].wayto["30130"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30130"] = 0.2
		Room["30130"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30130"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end
	
	if UserVars.osacrew["ship_type"] == "frigate"
		Room[UserVars.osacrew["gangplank"]].wayto["30166"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30166"] = 0.2
		Room["30166"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30166"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end

	if UserVars.osacrew["ship_type"] == "galleon"
		Room[UserVars.osacrew["gangplank"]].wayto["30176"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30176"] = 0.2
		Room["30176"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30176"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end

	if UserVars.osacrew["ship_type"] == "carrack"
		Room[UserVars.osacrew["gangplank"]].wayto["30119"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30119"] = 0.2
		Room["30119"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30119"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end

	if UserVars.osacrew["ship_type"] == "brigantine"
		Room[UserVars.osacrew["gangplank"]].wayto["30142"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30142"] = 0.2
		Room["30142"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30142"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end
	

	if UserVars.osacrew["ship_type"] == "sloop"
		Room[UserVars.osacrew["gangplank"]].wayto["29038"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["29038"] = 0.2
		Room["29038"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["29038"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end
end

def crew_clear_gangplank
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30130")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30130")
	Room[30130].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30130].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30166")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30166")
	Room[30166].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30166].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30176")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30176")
	Room[30176].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30176].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30119")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30119")
	Room[30119].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30119].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30142")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30142")
	Room[30142].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30142].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("29038")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("29038")
	Room[29038].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[29038].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
end

def determine_enemy_type
	result = Lich::Util.quiet_command("look ocean", /\[(.*)\]/, end_pattern = /(Open waters: (.*)|Obvious paths: (.*))/, include_end = false ,timeout = 0.5, silent = true)
	if result.to_s =~ /You notice (.*) approaching your position/
		if $1.include? "ethereal"
			UserVars.osacrew["enemy_type"] = "undead"
		end
		if $1.include? "krolvin"
			UserVars.osacrew["enemy_type"] = "krolvin"
		end
		if $1.include? "dark"
			UserVars.osacrew["enemy_type"] = "pirate"
		end
	else
		echo "Unable To Determine Enemy Type, Default Is\: Pirate"
		UserVars.osacrew["enemy_type"] = "pirate"
	end
end

def ship_map
	case Room.current.id
	when (29038..29042)
			UserVars.osacrew["ship_type"] = "sloop"
			@captains_quarters = 29042
			UserVars.osacrew["ship_map"] = ["main_deck", "cargo_hold", "crows_nest", "helm", "captains_quarters"]
			@Slooptimes = UserVars.osacrew["Slooptimes"].last(50)
			UserVars.osacrew["Slooptimes"] = @Slooptimes
			if @Slooptimes.nil? or @Slooptimes.empty?
				@Slooptimes = [0.315]
			end
			@Sailtimes = @Slooptimes
	when (30140..30147)
			UserVars.osacrew["ship_type"] = "brigantine"
			UserVars.osacrew["ship_map"] = ["forward_deck", "main_deck", "crows_nest", "cargo_hold", "mess_hall", "crew_quarters", "helm", "captains_quarters"]
			@Brigtimes = UserVars.osacrew["Brigtimes"].last(50)
			UserVars.osacrew["Brigtimes"] = @Brigtimes
			if @Brigtimes.nil? or @Brigtimes.empty?
				@Brigtimes = [0.30000000000000000]
			end
			@Sailtimes = @Brigtimes
	when (30119..30127)
			UserVars.osacrew["ship_type"] = "carrack"
			UserVars.osacrew["ship_map"] = ["bow", "forward_deck", "crows_nest", "main_deck", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Cartimes = UserVars.osacrew["Cartimes"].last(50)
			UserVars.osacrew["Cartimes"] = @Cartimes
			if @Cartimes.nil? or @Cartimes.empty?
				@Cartimes = [0.30000000000000000]
			end
			@Sailtimes = @Cartimes
	when (30176..30186)
			UserVars.osacrew["ship_type"] = "galleon"
			UserVars.osacrew["ship_map"] = ["bow", "forward_deck", "crows_nest", "main_deck", "social_room", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Galtimes = UserVars.osacrew["Galtimes"].last(50)
			UserVars.osacrew["Galtimes"] = @Galtimes
			if @Galtimes.nil? or @Galtimes.empty?
				@Galtimes = [0.30000000000000000]
			end
			@Sailtimes = @Galtimes
	when (30166..30175)
			UserVars.osacrew["ship_type"] = "frigate"
			UserVars.osacrew["ship_map"] = ["bow", "forward_deck", "crows_nest", "main_deck", "social_room", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Fritimes = UserVars.osacrew["Fritimes"].last(50)
			UserVars.osacrew["Fritimes"] = @Fritimes
			if @Fritimes.nil? or @Fritimes.empty?
				@Fritimes = [0.30000000000000000]
			end
			@Sailtimes = @Fritimes
	when (30128..30139)
			UserVars.osacrew["ship_type"] = "man o' war"
			UserVars.osacrew["ship_map"] = ["bow", "forward_crows_nest", "forward_deck", "mid_deck", "crows_nest", "main_deck", "social_room", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Mantimes = UserVars.osacrew["Mantimes"].last(50)
			UserVars.osacrew["Mantimes"] = @Mantimes
			if @Mantimes.nil? or @Mantimes.empty?
				@Mantimes = [0.35000000000000000]
			end
			@Sailtimes = @Mantimes
	end
end

def cargo_hold
	ship_type
	start_script("go2", ["cargo_hold"]) if !Room.current.tags.include? "cargo_hold"
	wait_while { running?("go2") }
end

def main_deck
	ship_type
	start_script("go2", ["main_deck"]) if !Room.current.tags.include? "main_deck"
	wait_while { running?("go2") }
end

def mid_deck
	ship_type
	start_script("go2", ["mid_deck"]) if !Room.current.tags.include? "mid_deck"
	wait_while { running?("go2") }
end

def forward_deck
	ship_type
	start_script("go2", ["forward_deck"]) if !Room.current.tags.include? "forward_deck"
	wait_while { running?("go2") }
end

def bow
	ship_type
	start_script("go2", ["bow"]) if !Room.current.tags.include? "bow"
	wait_while { running?("go2") }
end

def crows_nest
	ship_type
	start_script("go2", ["crows_nest"]) if !Room.current.tags.include? "crows_nest"
	wait_while { running?("go2") }
end

def forward_crows_nest
	ship_type
	start_script("go2", ["forward_crows_nest"]) if !Room.current.tags.include? "forward_crows_nest"
	wait_while { running?("go2") }
end

def social_room
	ship_type
	start_script("go2", ["social_room"]) if !Room.current.tags.include? "social_room"
	wait_while { running?("go2") }
end

def mess_hall
	ship_type
	start_script("go2", ["mess_hall"]) if !Room.current.tags.include? "mess_hall"
	wait_while { running?("go2") }
end

def crew_quarters
	ship_type
	start_script("go2", ["crew_quarters"]) if !Room.current.tags.include? "crew_quarters"
	wait_while { running?("go2") }
end

def helm
	ship_type
	start_script("go2", ["helm"]) if !Room.current.tags.include? "helm"
	wait_while { running?("go2") }
end

def captains_quarters
	ship_type
	start_script("go2", ["captains_quarters"]) if !Room.current.tags.include? "captains_quarters"
	wait_while { running?("go2") }
end

def enemy_cargo_hold
	ship_type
	start_script("go2", ["enemy_cargo_hold"]) if !Room.current.tags.include? "enemy_cargo_hold"
	wait_while { running?("go2") }
end

def enemy_main_deck
	ship_type
	start_script("go2", ["enemy_main_deck"]) if !Room.current.tags.include? "enemy_main_deck"
	wait_while { running?("go2") }
end

def enemy_mid_deck
	ship_type
	start_script("go2", ["enemy_mid_deck"]) if !Room.current.tags.include? "enemy_mid_deck"
	wait_while { running?("go2") }
end

def enemy_forward_deck
	ship_type
	start_script("go2", ["enemy_forward_deck"]) if !Room.current.tags.include? "enemy_forward_deck"
	wait_while { running?("go2") }
end

def enemy_bow
	ship_type
	start_script("go2", ["enemy_bow"]) if !Room.current.tags.include? "enemy_bow"
	wait_while { running?("go2") }
end

def enemy_crows_nest
	ship_type
	start_script("go2", ["enemy_crows_nest"]) if !Room.current.tags.include? "enemy_crows_nest"
	wait_while { running?("go2") }
end

def enemy_forward_crows_nest
	ship_type
	start_script("go2", ["enemy_forward_crows_nest"]) if !Room.current.tags.include? "enemy_forward_crows_nest"
	wait_while { running?("go2") }
end

def enemy_helm
	ship_type
	start_script("go2", ["enemy_helm"]) if !Room.current.tags.include? "enemy_helm"
	wait_while { running?("go2") }
end

def enemy_quarters
	ship_type
	start_script("go2", ["enemy_quarters"]) if !Room.current.tags.include? "enemy_quarters"
	wait_while { running?("go2") }
end

#================= Medical Officer Section =================
def medicalofficer_triage
	if variable[1].downcase =~ /debug/
		echo "medicalofficer_triage"
	end
		result = matchtimeout 3, /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*)\: \"I Am Injured!\"$/
		if result.to_s =~ /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*)\: \"I Am Injured!\"$/
			@medicalofficer_patient.push($1)
			medicalofficer_triage
		end
end

def medicalofficer_checkup
	if variable[1].downcase =~ /debug/
		echo "medicalofficer_checkup"
	end
		if Script.running?("ecure")
			wait_while { running?("ecure") }
		end
		waitrt?
		waitcastrt?
		if checkstunned
			wait_until {!checkstunned}
		end
		echo "Your Patients Are: #{@medicalofficer_patient}"
		start_script("ecure", [@medicalofficer_patient])
		wait_while { running?("ecure") }
		pause 0.2
end

def medicalofficer_fix_muscles_ks
		if Script.running?("ecure")
			LNet.send_message(attr = { 'type' => 'private', 'to' => @person }, "Please wait one moment while I finish up.")
			wait_while { running?("ecure") }
		end
		pause_script "osacombat"
		wait_until {!checkstunned}
		waitrt?
		waitcastrt?
		pause 0.5
		fput "transfer #{@person} exertion"
		if Spell[1107].affordable?
			Spell[1107].cast
		end
		unpause_script "osacombat"
end

def medicalofficer_fix_muscles
		if Script.running?("ecure")
			LNet.send_message(attr = { 'type' => 'private', 'to' => @person }, "Please wait one moment while I finish up.")
			wait_while { running?("ecure") }
		end
		pause_script "osacombat"
		wait_until {!checkstunned}
		waitrt?
		waitcastrt?
		pause 0.5
		if Spell[1107].affordable?
			Spell[1107].cast "#{@person}"
		end
		unpause_script "osacombat"
end

def medicalofficer_fix_poison
		if Script.running?("ecure")
			LNet.send_message(attr = { 'type' => 'private', 'to' => @person }, "Please wait one moment while I finish up.")
			wait_while { running?("ecure") }
		end
		pause_script "osacombat"
		wait_until {!checkstunned}
		waitrt?
		waitcastrt?
		pause 0.5
		if Spell[114].affordable?
			Spell[114].cast "#{@person}"
		end
		unpause_script "osacombat"
end

def medicalofficer_give_bread
	result = matchtimeout 3, /^\#{@person} has accepted your offer/
	if result.to_s =~ /^\#{@person} has accepted your offer/
		return
	else
		multifput "cancel", "drop right"
	end
end

def medicalofficer_bread
	if checkmana > 4
		waitrt?
		waitcastrt?
		fput "incant 203"
		pause 1
		fput "give ##{GameObj.right_hand.id} to #{@person}"
		medicalofficer_give_bread
		end
end

def medicalofficer_bread_orders
	result = matchtimeout 3, /^\[Private\]-GSIV:(.*)\: \"I Will Take Some Please.\"/
	if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Will Take Some Please.\"/
        crewmate = $1
        @breadlist.push(crewmate)
		medicalofficer_bread_orders
	end
end

def medicalofficer_spells
		if Script.running?("ewaggle")
			LNet.send_message(attr = { 'type' => 'private', 'to' => @recipient }, "Please wait one moment while I finish up.")
			wait_while { running?("ewaggle") }
		end
		waitrt?
		waitcastrt?
		start_script("ewaggle", ['@recipient'])	
end
#================ Misc Section ================
def crew_check_balance
	balance_line = Lich::Util.quiet_command("bank acc", /You currently have the following amounts on deposit\:/, end_pattern = /(You currently have (.*) inter-town bank transfer option available.)/, include_end = false ,timeout = 1.5, silent = true)
	if balance_line.to_s =~ /Total\: ([0-9,]+)/
		@bankbalance = $1.to_s.delete(',').to_i
	end
end

def crew_begin_balance
	crew_check_balance
	@beginbalance = "#{@bankbalance}"
end

def crew_after_balance
	crew_check_balance
	@afterbalance = "#{@bankbalance}"
end

def crew_sell_loot
	crew_begin_balance
	start_script("eloot", ["sell"])
	wait_while { running?("eloot") }
	crew_after_balance
	@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
	if @endbalance > 0
		fput "withdraw #{@endbalance} silver"
	end
	fput "join #{UserVars.osacrew["commander"]}"
	crew_task_complete
end

def commander_give_permission
	@commander_request = Array.new
	@crew_check = 0
	commander_crew_request
	if !@commander_request.nil?
		@commander_request.each do |n|
			@crew_request = n
			commander_check_crew
		end
		@commander_request.clear
	end
end

def commander_check_crew
	if UserVars.osacrew["crewsize"].nil?
		respond ""
		respond "                       You Must First Perform A Muster                                                               "
		respond ""
		 
	end
	@crew_check = (@crew_check + 1)
	if (@crew_check + UserVars.osacrew["crewsize"].count) > UserVars.osacrew["commander_max_crew"]
		LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_request }, "Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!")
	else
		LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_request }, "Permission Granted, Come Aboard!")
	end
end

def commander_crew_request
		result = matchtimeout 5, /^\[Private\]-GSIV:(.*)\: \"Crewman (.*), Requesting Permission To Come Aboard!"$/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"Crewman (.*), Requesting Permission To Come Aboard!"$/
			@commander_request.push($2)
			commander_crew_request
		else
			respond "
			No Remaining Crew Requests, Moving On!
			"
		end
end

def change_stance(new_stance, force = true)
    return if Spell[216].active? || dead?
    perfect_stance = nil
    if new_stance =~ /10|20|30|40|50|60|70|80|90|100/i
      perfect_stance = new_stance
      new_stance = "advance" if perfect_stance =~ /10|20/i
      new_stance = "forward" if perfect_stance =~ /30|40/i
      new_stance = "neutral" if perfect_stance =~ /50|60/i
      new_stance = "guarded" if perfect_stance =~ /70|80/i
      new_stance = "defensive" if perfect_stance =~ /90|100/i
    end
    if (stance() =~ /#{new_stance}/)
      return
    elsif (checkcastrt() > 0 && new_stance =~ /def/)
      return if stance() == 'guarded'
    end

    if ((force) && (perfect_stance != nil) && (CMan.known?("Stance Perfection")))
      dothistimeout("cman stance #{perfect_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    elsif (force)
      dothistimeout("stance #{new_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    else
      fput "stance #{new_stance}"
    end
end

def wait_rt
	pause 0.1
	waitrt?
	waitcastrt?
	pause 0.1
end	

def stance_defensive
	wait_rt
    change_stance('defensive')
end

def stance_offensive
	wait_rt
    change_stance('offensive')
end

def stealth_disabler_routine
	if UserVars.osacombat["stealth_disabler"] == 0
		stance_defensive
		fput "search"
		waitrt?
		waitcastrt?
	elsif UserVars.osacombat["stealth_disabler"] == 1
		$stealth_disabler = "Dispel Invisibility"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 2
		$stealth_disabler = "Searing Light"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 3
		$stealth_disabler = "Light"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 4
		$stealth_disabler = "Censure"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 5
		$stealth_disabler = "Divine Wrath"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 6
		$stealth_disabler = "Elemental Wave"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 7
		$stealth_disabler = "Major Elemental Wave"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 8
		$stealth_disabler = "Cone of Elements"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 9
		$stealth_disabler = "Sunburst"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 10
		$stealth_disabler = "Nature's Fury"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 11
		$stealth_disabler = "Grasp of the Grave"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 12
		$stealth_disabler = "Implosion"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 13
		$stealth_disabler = "Tremors"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 14
		$stealth_disabler = "Call Wind"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 15
		$stealth_disabler = "Aura of the Arkati"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 16
		$stealth_disabler = "Judgement"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 17
		stance_offensive
		fput "cman eviscerate"
		stance_defensive
	elsif UserVars.osacombat["stealth_disabler"] == 18
		stance_offensive
		Warcry.use("Cry", "All")
		stance_defensive
	elsif UserVars.osacombat["stealth_disabler"] == 19
		stance_defensive
		fput "symbol of sleep"
		waitrt?
		waitcastrt?
	end
end

def cast_disabler
	if !Spell["#{$stealth_disabler}"].known?
		respond ""
		respond "You Have Selected A Stealth Diabling Spell You Do Not Know, Please Select One Known To Your Character. Defaulting To Search"
		respond ""
		return
		fput "search"
		waitrt?
		waitcastrt?
	else
		fput "prep #{$stealth_disabler}"
		fput "cast"
		waitrt?
		waitcastrt?
		if $stealth_disabler == "Light"
			fput "search"
			waitrt?
			waitcastrt?
		end
	end
end

#================ Cannoneer Section ================

def gunner_set_mode
	respond "
	=======================================
	What duties are you assuming\?
		1\. Load Only
		2\. Fire Only
		3\. Load And Fire
	=======================================
	Select your mode - 
		  ;send <#> "
	respond
	clear
	line = nil
	line = get until line.strip =~ /^[0-9]+$/
	duty = line
	if duty == "1"
		UserVars.osacombat["loadonly"] = true
		UserVars.osacombat["fireonly"] = false
		UserVars.osacombat["loadandfire"] = false
	elsif duty == "2"
		UserVars.osacombat["loadonly"] = false
		UserVars.osacombat["fireonly"] = true
		UserVars.osacombat["loadandfire"] = false
	elsif duty == "3"
		UserVars.osacombat["loadonly"] = false
		UserVars.osacombat["fireonly"] = false
		UserVars.osacombat["loadandfire"] = true
	end

	respond "


	=======================================
	Which  \?
		1\. Main Deck"
	if UserVars.osacrew["ship_type"] == "man o' war"
		respond "2\. Mid Deck"
		respond "3\. Forward Deck"
	else
		respond "2\. Forward Deck"
	end
	respond "=======================================
	Select your cannons - 
		  ;send <#> "
	respond
	clear
	line = nil
	line = get until line.strip =~ /^[0-9]+$/
	cannons = line
	if cannons == "1"
		UserVars.osacombat["maincannons"] = true
		UserVars.osacombat["midcannons"] = false
		UserVars.osacombat["forwardcannons"] = false
	elsif cannons == "2"
		UserVars.osacombat["maincannons"] = false
		UserVars.osacombat["midcannons"] = true
		UserVars.osacombat["forwardcannons"] = false
	elsif cannons == "3"
		UserVars.osacombat["maincannons"] = false
		UserVars.osacombat["midcannons"] = false
		UserVars.osacombat["forwardcannons"] = true
	end
end

def gunner_get_balls
	if @boarded or @thirty or @sunk or @stop
		return
	end
	waitrt?
	cargo_hold
	result = dothistimeout "get balls", 2, /You cannot fire your cannons while boarded|You search through the cannon balls and find an iron cannon ball|You search through the cannon balls only to find that you are out of cannon balls|...wait/
		if result.to_s =~ /You cannot fire your cannons while boarded/
			@boarded = true
			return
		elsif result.to_s =~ /You search through the cannon balls and find an iron cannon ball/
			waitrt?
			if GameObj.left_hand.id and GameObj.right_hand.id
				return
			end
			gunner_get_balls
		elsif result.to_s =~ /You search through the cannon balls only to find that you are out of cannon balls/
			if GameObj.left_hand.id or GameObj.right_hand.id
				return
			else	
				gunner_out_of_balls
			end
		elsif result.to_s =~ /...wait/
			waitrt?
			gunner_get_balls
		end
end

def gunner_out_of_balls
	if GameObj.right_hand.noun.to_s == "ball"
		fput "drop right"
	end
	if GameObj.left_hand.noun.to_s == "ball"
		fput "drop left"
	end
	respond "
	
	         ------------====== The Ship Is Out Of Cannon Balls ======-------------
	
	"
	@thirty = true
end

def gunner_load_cannon
	if @boarded or @thirty or @sunk or @stop
		return
	end
	waitrt?
	if !Room.current.tags.include? @cannons
		start_script("go2", [@cannons])
		wait_while { running?("go2") }
	end
	result = dothistimeout "load cannon", 2, /You carefully lift your cannon ball and drop it into the tubular opening of a (.*) cannon|You need to be holding a cannon ball in order to load the (.*) cannon|You cannot fire your cannons while boarded|The (.*) cannon already appears to be loaded to capacity/
		if result.to_s =~ /You carefully lift your cannon ball and drop it into the tubular opening of a (.*) cannon/
			waitrt?
			if checkloot.include? "ball"
				fput "get ball"
			end
			if GameObj.left_hand.id.nil? and GameObj.right_hand.id.nil?
				gunner_get_balls
			end
			gunner_load_cannon
		elsif result.to_s =~ /You need to be holding a cannon ball in order to load the (.*) cannon/
			gunner_get_balls
			gunner_load_cannon
		elsif result.to_s =~ /You cannot fire your cannons while boarded/
			@boarded = true
			return
		elsif result.to_s =~ /The (.*) cannon already appears to be loaded to capacity/
			if GameObj.right_hand.noun.to_s == "ball"
				fput "drop right"
			end
			if GameObj.left_hand.noun.to_s == "ball"
				fput "drop left"
			end
		end
end

def gunner_fire_cannon
	if @boarded or @thirty or @sunk or @stop
		return
	end
	waitrt?
	if !Room.current.tags.include? @cannons
		start_script("go2", [@cannons])
		wait_while { running?("go2") }
	end
	result = dothistimeout "fire cannon", 2, /You cannot fire your cannons while boarded|You'll need to load one of the cannons first|...wait|You fire a (.*) cannon at the (.*)/
		if result.to_s =~ /You cannot fire your cannons while boarded/
			@boarded = true
			return
		elsif result.to_s =~ /You'll need to load one of the cannons first/
			return
		elsif result.to_s =~ /...wait/
			waitrt?
			gunner_fire_cannon
		elsif result.to_s =~ /You fire a (.*) cannon at the (.*)/
			waitrt?
			gunner_fire_cannon
		end
end

def gunner_boarded
	waitrt?
	if GameObj.right_hand.noun.to_s == "ball"
		fput "drop right"
	end
	if GameObj.left_hand.noun.to_s == "ball"
		fput "drop left"
	end
	if UserVars.osacombat["osacombat"] == true
		main_deck
		wait_until {checkpcs.include? UserVars.osacrew["commander"]}
		fput "join #{UserVars.osacrew["commander"]}"
		if !running? "osacombat" 
			start_script "osacombat"
		end
	else
		echo "You Are Not Currently In A Combatant Role, Ready Thyself For Combat!"
		if checkname != "Tearieyes"
			do_client "gird"
		else
			fput "get stick from my sling"
		end
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
				captains_quarters
		end
	end
	@boarded = false
	@thirty = false
	@sunk = false
	@stop = false
end	

def gunner_stop
	waitrt?
	if GameObj.right_hand.noun.to_s == "ball"
		fput "drop right"
	end
	if GameObj.left_hand.noun.to_s == "ball"
		fput "drop left"
	end
	main_deck
	wait_until {checkpcs.include? UserVars.osacrew["commander"]}
	fput "join #{UserVars.osacrew["commander"]}"
	@boarded = false
	@thirty = false
	@sunk = false
	@stop = false
end	

def gunner_sunk
	waitrt?
	if GameObj.right_hand.noun.to_s == "ball"
		fput "drop right"
	end
	if GameObj.left_hand.noun.to_s == "ball"
		fput "drop left"
	end
	damage_control
	@boarded = false
	@thirty = false
	@sunk = false
	@stop = false
end	

def gunner_cycle
	if UserVars.osacombat["maincannons"]
		@cannons = "main_cannon"
	end
	if UserVars.osacombat["midcannons"]
		@cannons = "mid_cannon"
	end
	if UserVars.osacombat["forwardcannons"]
		@cannons = "forward_cannon"
	end
	if UserVars.osacombat["loadonly"]
		@duty = "load"
	end
	if UserVars.osacombat["fireonly"]
		@duty = "fire"
	end
	if UserVars.osacombat["loadandfire"]
		@duty = "both"
	end
	gunner_get_balls
	if @duty == "load" or @duty == "both"
		if !@boarded and !@thirty and !@sunk and !@stop
			gunner_load_cannon
		else
			if (@boarded or @thirty)
				gunner_boarded
			end
			if @sunk
				gunner_sunk
			end
			if @stop
				gunner_stop
			end
			return
		end
	end
	if @duty == "fire" or @duty == "both"
		if !@boarded and !@thirty and !@sunk and !@stop
			gunner_fire_cannon
		else
			if (@boarded or @thirty)
				gunner_boarded
			end
			if @sunk
				gunner_sunk
			end
			if @stop
				gunner_stop
			end
			return
		end
	end
	if !@boarded and !@thirty and !@sunk and !@stop
		gunner_cycle
	else
		if (@boarded or @thirty)
			gunner_boarded
		end
		if @sunk
			gunner_sunk
		end
		if @stop
			gunner_stop
		end
		return
	end
end

#================ Damage Control Section ================

def damage_control
	if UserVars.osacrew["osacrewtasks"]
		wait_while { running?("osacombat") }
		if !GameObj.left_hand.id.nil? or !GameObj.right_hand.id.nil?
			fput "store both"
		end
		if UserVars.osacrew["osacrewtasks"]
			main_deck
			ship_map
			begin_repairs
		end
		if !GameObj.left_hand.id.nil? or !GameObj.right_hand.id.nil? 
			cargo_hold
			if !GameObj.left_hand.id.nil?
				fput "put left in wood"
			end
			if !GameObj.right_hand.id.nil?
				fput "put right in wood"
			end
		end
		main_deck
		if @out_of_wood		
			echo "The Hull Is Repaired As Much As Possible. However, We Are Out Of Shoring Planks Captain!"
		end
		if @out_of_wood == false
			echo "The Hull Is Repaired Captain!"
		end
	else
		echo "You Are Not Currently In A Crew Role, Please Standby To Standby!"
	end
	captains_quarters
	wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
	crew_task_complete
end

def begin_repairs
	pause 0.5
	@repairs_complete = false
	@out_of_wood = false
	@repair_map = Array.new
	@repair_map = UserVars.osacrew["ship_map"]
	check_rooms
	@repair_map.each do |repair_room|
		@fixed = false
		@repair_room = repair_room
		if @out_of_wood
			break
		end
		if @repairs_complete
			break
		end
		if !Room.current.tags.include? @repair_room
			start_script("go2", [@repair_room])
			wait_while { running?("go2") }
		end
		waitrt?
		result = dothistimeout "assess", 3, /It appears to be|You cannot seem to find any damage/
			if result.to_s =~ /It appears to be/
				waitrt?
				fix_ship
			elsif result.to_s =~ /You cannot seem to find any damage./
				if get.to_s =~ /\[Health of your ship: (.*)\/(.*)\]/ && $1 == $2
					waitrt?
					@repairs_complete = true
					return
				end
			end
		end
end

def check_rooms
	fput "assess"
	while line = get
	case line
		when /Main Deck:  It appears to be/
			@boatswain = true	
		when /Main Deck:  You cannot seem/
			@boastswain = true
			@repair_map.delete("main_deck")
		when /Helm:  You cannot seem/
			@repair_map.delete("helm")
		when /Cargo Hold:  You cannot seem/
			@repair_map.delete("cargo_hold")
		when /Captain\'s Quarters:  You cannot seem/
			@repair_map.delete("captains_quarters")
		when /Forward Crow's Nest:  You cannot seem/
			@repair_map.delete("forward_crows_nest")
		when /Crow's Nest:  You cannot seem/
			@repair_map.delete("crows_nest")
		when /Mess Hall:  You cannot seem/
			@repair_map.delete("mess_hall")
		when /Mid Deck:  You cannot seem/
			@repair_map.delete("mid_deck")
		when /Crew Quarters:  You cannot seem/
			@repair_map.delete("crew_quarters")
		when /Bow:  You cannot seem/
			@repair_map.delete("bow")
		when /Social Room:  You cannot seem/
			@repair_map.delete("social_room")
		when /Forward Deck:  You cannot seem/
			@repair_map.delete("forward_deck")
		when /\[Health of your ship: (.*)\/(.*)\]/
			if $1 == $2
				waitrt?
				@repairs_complete = true
				return
			end
		when /Roundtime:/
			return	
	end
	end
end

def get_wood
	if GameObj.left_hand.id and GameObj.right_hand.id
		if !Room.current.tags.include? @repair_room
			start_script("go2", [@repair_room])
			wait_while { running?("go2") }
		end
		return
	end
	cargo_hold
	result = dothistimeout "get wood", 3, /You will need a free|You search through the salvaged wood and|You search through the salvaged wood only|...wait/
		if result.to_s =~ /You will need a free/
			get_wood
		elsif result.to_s =~ /You search through the salvaged wood and/
			waitrt?
			get_wood
		elsif result.to_s =~ /You search through the salvaged wood only/
			waitrt?
			@out_of_wood = true
		elsif result.to_s =~ /...wait/
			pause 1
			waitrt?
			get_wood
		end
end

def fix_ship
	if @fixed == true
		return
	end
	if !GameObj.left_hand.id and !GameObj.right_hand.id
			waitrt?
			get_wood
			if @out_of_wood == true
				return
			end
			if !Room.current.tags.include? @repair_room
				start_script("go2", [@repair_room])
				wait_while { running?("go2") }
			end
	end
	result = dothistimeout "fix", 3, /...wait|all the damage|some of the damage|This area does not look/
		if result.to_s =~ /...wait/
			pause 1
			waitrt?
			fix_ship
		elsif result.to_s =~ /all the damage/
			@fixed = true
			waitrt?
			fix_ship
		elsif result.to_s =~ /some of the damage/
			@fixed = false
			waitrt?
			fix_ship
		elsif result.to_s =~ /This area does not look/
			@fixed = true
			waitrt?
			fix_ship
		end
end

#================ Navigation Section ================

def sailing_from_icemule
	if @dest == "Wehnimer\'s Landing"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [3, 'southeast'], [3, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [20, 'south'], [1, 'southeast'], [6, 'south'], [4, 'southwest'], [3, 'northwest'], [5, 'west'], [4, 'northwest'], [8, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [20, 'south'], [5, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [20, 'south'], [1, 'southeast'], [18, 'south'], [8, 'southeast'], [2, 'east'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [20, 'south'], [1, 'southeast'], [7, 'south'], [17, 'southwest'], [4, 'southeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [19, 'south'], [14, 'southeast'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [20, 'south'], [1, 'southeast'], [19, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[1, 'southwest'], [4, 'south'], [4, 'southwest'], [1, 'south'], [1, 'southeast'], [20, 'south'], [1, 'southeast'], [19, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_landing
	if @dest == "Icemule Trace"
		@route = [[4, 'northwest'], [3, 'west'], [3, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [15, 'south'], [1, 'southwest'], [4, 'west'], [1, 'southwest'], [1, 'south'], [3, 'southwest'], [2, 'west'], [4, 'northwest'], [8, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [13, 'south'], [5, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [13, 'south'], [1, 'southeast'], [18, 'south'], [9, 'southeast'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [18, 'south'], [1, 'southeast'], [2, 'south'], [14, 'southwest'], [6, 'south'], [1, 'southeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [13, 'south'], [1, 'southeast'], [19, 'south'], [14, 'southeast'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [13, 'south'], [1, 'southeast'], [19, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[4, 'northwest'], [2, 'west'], [2, 'south'], [3, 'southwest'], [13, 'south'], [1, 'southeast'], [19, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_teras
	if @dest == "Icemule Trace"
		@route = [[8, 'east'], [4, 'southeast'], [5, 'east'], [3, 'southeast'], [4, 'northeast'], [6, 'north'], [1, 'northwest'], [20, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[8, 'east'], [4, 'southeast'], [2, 'east'], [3, 'northeast'], [1, 'north'], [1, 'northeast'], [4, 'east'], [1, 'northeast'], [15, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[8, 'east'], [5, 'southeast'], [9, 'east'], [5, 'northeast'], [1, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[8, 'east'], [4, 'southeast'], [2, 'east'], [8, 'southeast'], [1, 'south'], [10, 'southeast'], [2, 'east'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[1, 'east'], [1, 'southeast'], [15, 'south'], [9, 'southeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[7, 'east'], [5, 'southeast'], [3, 'east'], [9, 'southeast'], [2, 'south'], [14, 'southeast'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[7, 'east'], [5, 'southeast'], [3, 'east'], [9, 'southeast'], [2, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[7, 'east'], [5, 'southeast'], [3, 'east'], [9, 'southeast'], [2, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_solhaven
	if @dest == "Icemule Trace"
		@route = [[5, 'northwest'], [20, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[5, 'northwest'], [13, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[1, 'northwest'], [5, 'southwest'], [9, 'west'], [5, 'northwest'], [8, 'west'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[1, 'northwest'], [2, 'southwest'], [14, 'south'], [7, 'southeast'], [2, 'east'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[1, 'northwest'], [1, 'southwest'], [1, 'south'], [19, 'southwest'], [4, 'southeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[1, 'northwest'], [3, 'southwest'], [13, 'south'], [14, 'southeast'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[1, 'northwest'], [3, 'southwest'], [13, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[1, 'northwest'], [3, 'southwest'], [13, 'south'], [13, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_brisker
	if @dest == "Icemule Trace"
		@route = [[3, 'west'], [7, 'northwest'], [19, 'north'], [1, 'northwest'], [20, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[1, 'southwest'], [9, 'northwest'], [18, 'north'], [1, 'northwest'], [13, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[2, 'west'], [10, 'northwest'], [1, 'north'], [8, 'northwest'], [2, 'west'], [4, 'northwest'], [8, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[2, 'west'], [7, 'northwest'], [14, 'north'], [2, 'northeast'], [1, 'southeast'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[2, 'west'], [8, 'northwest'], [1, 'north'], [5, 'northwest'], [12, 'southwest'], [3, 'southeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[1, 'west'], [1, 'southwest'], [6, 'southeast'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[1, 'west'], [1, 'southwest'], [5, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[1, 'west'], [1, 'southwest'], [5, 'southeast'], [4, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end 
end

def sailing_from_kraken
	if @dest == "Icemule Trace"
		@route = [[1, 'west'], [4, 'northwest'], [17, 'northeast'], [7, 'north'], [1, 'northwest'], [20, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[1, 'west'], [1, 'northwest'], [6, 'north'], [14, 'northeast'], [2, 'north'], [1, 'northwest'], [18, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[1, 'west'], [9, 'northwest'], [15, 'north'], [1, 'northwest'], [1, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[1, 'west'], [4, 'northwest'], [19, 'northeast'], [1, 'north'], [1, 'northeast'], [1, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[1, 'west'], [3, 'northwest'], [12, 'northeast'], [5, 'southeast'], [1, 'south'], [8, 'southeast'], [2, 'east'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[1, 'west'], [4, 'northwest'], [12, 'northeast'], [5, 'southeast'], [1, 'south'], [14, 'southeast'], [1, 'south'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[1, 'south'], [4, 'southeast'], [5, 'south'], [10, 'southeast'], [4, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[1, 'south'], [4, 'southeast'], [5, 'south'], [10, 'southeast'], [4, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_river
	if @dest == "Icemule Trace"
		@route = [[14, 'northwest'], [19, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[14, 'northwest'], [19, 'north'], [1, 'northwest'], [13, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[14, 'northwest'], [2, 'north'], [9, 'northwest'], [3, 'west'], [5, 'northwest'], [7, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[14, 'northwest'], [13, 'north'], [3, 'northeast'], [1, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[6, 'northwest'], [1, 'northeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route =  [[1, 'north'], [14, 'northwest'], [1, 'north'], [5, 'northwest'], [12, 'southwest'], [4, 'southeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[1, 'southwest'], [2, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[1, 'southwest'], [2, 'south'], [11, 'southwest'], [5, 'south'], [6, 'southwest'], [2, 'south'], [1, 'southwest'], [4, 'south'], [2, 'southeast'], [7, 'east'], [4, 'southeast'], [3, 'northeast'], [4, 'east'], [2, 'northeast'], [7, 'east'], [2, 'southeast'], [5, 'northeast'], [2, 'north'], [2, 'northwest'], [3, 'north'], [6, 'northwest'], [4, 'northeast'], [4, 'east'], [6, 'northeast'], [12, 'east'], [6, 'northeast'], [6, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_nielira
	if @dest == "Icemule Trace"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [19, 'north'], [1, 'northwest'], [20, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [19, 'north'], [1, 'northwest'], [13, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [2, 'north'], [9, 'northwest'], [3, 'west'], [5, 'northwest'], [7, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [13, 'north'], [3, 'northeast'], [1, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [4, 'north'], [5, 'northwest'], [1, 'northeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [4, 'north'], [10, 'northwest'], [5, 'north'], [4, 'northwest'], [1, 'north'], [1, 'port']]  
	end
	if @dest == "River\'s Rest"
		@route = [[2, 'southwest'], [3, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [2, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Ta\'Vaalor"
		@route = [[1, 'east'], [4, 'northeast'], [12, 'east'], [4, 'northeast'], [3, 'east'], [2, 'northeast'], [3, 'east'], [8, 'northeast'], [4, 'north'], [1, 'port']]
	end
end

def sailing_from_vaalor
	if @dest == "Icemule Trace"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [19, 'north'], [1, 'northwest'], [20, 'north'], [1, 'northwest'], [1, 'north'], [4, 'northeast'], [4, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Wehnimer\'s Landing"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [19, 'north'], [1, 'northwest'], [13, 'north'], [3, 'northeast'], [2, 'north'], [2, 'east'], [4, 'southeast'], [1, 'port']]
	end
	if @dest == "Kharam Dzu"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [2, 'north'], [9, 'northwest'], [3, 'west'], [5, 'northwest'], [7, 'west'], [1, 'port']]
	end
	if @dest == "Solhaven"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [13, 'north'], [3, 'northeast'], [1, 'southeast'], [1, 'port']]
	end
	if @dest == "Brisker\'s Cove"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [4, 'north'], [13, 'northwest'], [4, 'north'], [5, 'northwest'], [1, 'northeast'], [1, 'east'], [1, 'port']]
	end
	if @dest == "Kraken\'s Fall"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [4, 'north'], [10, 'northwest'], [5, 'north'], [4, 'northwest'], [1, 'north'], [1, 'port']]
	end
	if @dest == "River\'s Rest"
		@route = [[4, 'south'], [8, 'southwest'], [6, 'west'], [6, 'southwest'], [12, 'west'], [6, 'southwest'], [4, 'west'], [4, 'southwest'], [6, 'southeast'], [3, 'south'], [2, 'southeast'], [2, 'south'], [5, 'southwest'], [2, 'northwest'], [7, 'west'], [2, 'southwest'], [4, 'west'], [3, 'southwest'], [4, 'northwest'], [7, 'west'], [2, 'northwest'], [4, 'north'], [1, 'northeast'], [2, 'north'], [6, 'northeast'], [5, 'north'], [11, 'northeast'], [2, 'north'], [1, 'northeast'], [1, 'port']]
	end
	if @dest == "Nielira Harbor"
		@route = [[4, 'south'], [8, 'southwest'], [3, 'west'], [2, 'southwest'], [3, 'west'], [4, 'southwest'], [12, 'west'], [4, 'southwest'], [1, 'west'], [1, 'port']]
	end
end

def crew_start_nav
	if Room.current.location != "Ships"
		respond "
                 Please Restart When You Are On Your Ship
				 "
		exit
	end
	ship_map
	helm
	result = Lich::Util.quiet_command("look ocean", /\[(.*)\]/, end_pattern = /(Open waters: (.*)|Obvious paths: (.*))/, include_end = false ,timeout = 0.4, silent = true)
	if result.to_s =~ /Potential docking options include (.*)./
		if $1.include? 'a bustling port'
			@nearest_town = "Kraken\'s Fall"
		elsif $1.include? 'a diverse port'
			@nearest_town = "Solhaven"
		elsif $1.include? 'a lively port'
			@nearest_town = "Wehnimer\'s Landing"
		elsif $1.include? 'an idle port'
			@nearest_town = "River\'s Rest"
		elsif $1.include? 'an ash-covered port'
			@nearest_town = "Kharam Dzu"
		elsif $1.include? 'a sprawling imperial port'
			@nearest_town = "Brisker\s Cove"
		elsif $1.include? 'a ramshackle port'
			@nearest_town = "Icemule Trace"
		elsif $1.include? 'an industrious port'
			@nearest_town = "Ta\'Vaalor"
		elsif $1.include? 'a naefira and ivy-draped port'
			@nearest_town = "Nielira Harbor"
		end
		ship_flag
	else
		start_script("osacommander", ['underway'])
		waitfor /You yell, "Underway!"/
		crew_start_nav
	end
	crew_nav_destination
end

def crew_nav_destination
	@city_one = "Icemule Trace"
	@city_two = "Wehnimer\'s Landing"
	@city_three = "Brisker\'s Cove"
	@city_four = "Solhaven"
	@city_five = "River\'s Rest"
	@city_six = "Kharam Dzu"
	@city_seven = "Nielira Harbor"
	@city_eight = "Ta\'Vaalor"
	if @nearest_town == "Icemule Trace"
		@city_one = "Kraken\'s Fall"
	elsif @nearest_town == "Wehnimer\'s Landing"
		@city_two = "Kraken\'s Fall"
	elsif @nearest_town == "Brisker\'s Cove"
		@city_three = "Kraken\'s Fall"
	elsif @nearest_town == "Solhaven"
		@city_four = "Kraken\'s Fall"
	elsif @nearest_town == "River\'s Rest"
		@city_five = "Kraken\'s Fall"
	elsif @nearest_town == "Kharam Dzu"
		@city_six = "Kraken\'s Fall"
	elsif @nearest_town == "Nielira Harbor"
		@city_seven = "Kraken\'s Fall"
	elsif @nearest_town == "Ta\'Vaalor"
		@city_eight = "Kraken\'s Fall"
	end
	helm
	respond "


	=======================================
	Please Select A Destination Captain\?
		1\. #{@city_one}
		2\. #{@city_two}
		3\. #{@city_three}
		4\. #{@city_four}
		5\. #{@city_five}
		6\. #{@city_six}
		7.\ #{@city_seven}
		8.\ #{@city_eight}
	=======================================
	Select a destination - 
		  ;send <#> or 0 to Quit"
	respond ""
	clear
	line = nil
	line = get until line.strip =~ /^[0-9]+$/
	destination = line
	if destination == "1"
		@start_time = Time.now.to_f
		@dest = "#{@city_one}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "2"
		@start_time = Time.now.to_f
		@dest = "#{@city_two}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "3"
		@start_time = Time.now.to_f
		@dest = "#{@city_three}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "4"
		@start_time = Time.now.to_f
		@dest = "#{@city_four}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "5"
		@start_time = Time.now.to_f
		@dest = "#{@city_five}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "6"
		@start_time = Time.now.to_f
		@dest = "#{@city_six}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "7"
		@start_time = Time.now.to_f
		@dest = "#{@city_seven}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	elsif destination == "8"
		@start_time = Time.now.to_f
		@dest = "#{@city_eight}"
		echo "Set course to #{@dest} from #{@nearest_town}"
		#near_city
	else
		echo "Those Are Uncharted Waters, Captain!"
	end
	if @nearest_town == "Solhaven"
		sailing_from_solhaven
	elsif @nearest_town == "River\'s Rest"
		sailing_from_river
	elsif @nearest_town == "Wehnimer\'s Landing"
		sailing_from_landing
	elsif @nearest_town == "Kharam Dzu"
		sailing_from_teras
	elsif @nearest_town == "Kraken\'s Fall"
		sailing_from_kraken
	elsif @nearest_town == "Icemule Trace"
		sailing_from_icemule
	elsif @nearest_town == "Ta\'Vaalor"
		sailing_from_vaalor
	elsif @nearest_town == "Nielira Harbor"
		sailing_from_nielira
	elsif @nearest_town == "Brisker\s Cove"
		sailing_from_brisker
	end
	crew_navigation_array
end

def crew_navigation_array
	number_of_moves = Array.new
	@start_trip = Time.now
	@averagetime = (@Sailtimes.sum/ @Sailtimes.size.to_f)
	helm
	@route.each do |distance,course|
		number_of_moves.push(distance)
	end
	@total_moves = number_of_moves.sum.to_f
	@estimated_trip_time = (@total_moves * @averagetime).as_time
	@end_trip_time = (Time.now + ((@total_moves * @averagetime) * 60))
	if checkname == UserVars.osacrew["commander"]
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{UserVars.osacrew["commander_ship_name"]} Expects To Make Way From #{@nearest_town} And Will Be Moored In #{@dest} At Approximately: #{@end_trip_time.strftime("%H:%M %p")}")
		waitrt?
		pause 0.2
		fput "yell #{UserVars.osacrew["commander_ship_name"]} Expects To Make Way From #{@nearest_town} And Will Be Moored In #{@dest} At Approximately: #{@end_trip_time.strftime("%H:%M %p")}" 	
	end
	respond "
	Estimated Trip Time: #{@estimated_trip_time}
	Estimated Arrival Time: #{@end_trip_time.strftime("%H:%M %p")}
	"
	@route.each do |distance,course|
		@course = course
		#echo @course
		fput "turn wheel #{course}"
		distance.times {crew_keep_course}
	end
	@end_trip = Time.now
	@trip_total_time = ((@end_trip - @start_trip)/ 60.00)
	respond ""
	respond "Average move time for you ship is: #{@averagetime.as_time}"
	respond "Estimated Trip Time Was: #{@estimated_trip_time}"
	respond "Actual Trip Time: #{@trip_total_time.as_time}"
	
end

def ship_flag
	result = dothistimeout "ship flag", 3, /is currently flying (.*) flag./
		if result.to_s =~ /is currently flying (.*) flag./
			if $1 != "a white"
				crows_nest
				fput "ship flag white"
				waitrt?
			end
		end
end

#================ Underway Section ================

def lower_sail
	result = dothistimeout "lower sail", 3, /you slowly lower the (.*) sail until it is at half mast|you slowly lower the (.*) sail until it is fully open|far as it can go!/
        waitrt?
	if result.to_s =~ /...wait/
		waitrt?
		lower_sail
	elsif result.to_s =~ /you slowly lower the (.*) sail until it is at half mast/
		waitrt?
		lower_sail
	elsif result.to_s =~ /you slowly lower the (.*) sail until it is fully open/
		@lowered_sail = true
		waitrt?
	elsif result.to_s =~ /far as it can go!/
		end
end

def raise_anchor
	result = dothistimeout "push capstan", 3, /begin to push|one final push|anchor is already up/
        waitrt?
	if result.to_s =~ /...wait/
		waitrt?
		raise_anchor
	elsif result.to_s =~ /begin to push/
		waitrt?
		raise_anchor
	elsif result.to_s =~ /one final push/
		@anchor_aweigh = true
		waitrt?
	elsif result.to_s =~ /anchor is already up/
		return
	end
end

def one_mast
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Main Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Main Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
end

def two_masts
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def three_masts
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Mizzen Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def crew_det_drift
	echo "Determining Corrective Course"
	result = matchtimeout 300, /The (.*) wheel slowly turns off course.|The (.*) (cuts through the ocean, heading|drifts slowly) ([a-z,]+) (at full speed|,|.)/
	if result.to_s =~ /The (.*) wheel slowly turns off course./
		@ph_corrected = "None"
		echo @ph_corrected
	elsif result.to_s =~ /The (.*) (cuts through the ocean, heading|drifts slowly) ([a-z,]+) (at full speed|,|.)/
		if $3 == @course
			@ph_corrected = "None"
			echo @ph_corrected
		elsif $3 == "northeast"
			@ph_corrected = "southwest"
			echo @ph_corrected
		elsif $3 == "northwest"
			@ph_corrected = "southeast"
			echo @ph_corrected
		elsif $3 == "southwest"
			@ph_corrected = "northeast"
			echo @ph_corrected
		elsif $3 == "southeast"
			@ph_corrected = "northwest"
			echo @ph_corrected
		elsif $3 == "north"
			@ph_corrected = "south"
			echo @ph_corrected
		elsif $3 == "south"
			@ph_corrected = "north"
			echo @ph_corrected
		elsif $3 == "west"
			@ph_corrected = "east"
			echo @ph_corrected
		elsif $3 == "east"
			@ph_corrected = "west"
			echo @ph_corrected
		end
	end
end	

def crew_fix_wheel
	echo "Taking Corrective Course"
	if @ph_corrected == "None"
		fput "turn wheel #{@course}"
		crew_keep_course
		return
	end
	result = dothistimeout "turn wheel #{@ph_corrected}", 300, /The (.*) (cuts through the ocean, heading|drifts slowly)|The sound of ropes coming free of the rigging|A large swell crashes into the side of the|The (.*) suddenly drifts from its course as the/
		if result.to_s =~ /The (.*) (cuts through the ocean, heading|drifts slowly)/
			waitrt?
			echo "Resuming Original Course"
			waitrt?
		elsif result.to_s =~ /The sound of ropes coming free of the rigging/
			echo "The Sails Have Been Furled"
			crew_how_many_masts
		elsif result.to_s =~ /A large swell crashes into the side of the/
			echo "Rogue Wave! Secure that Anchor!"
			crew_fix_anchor
		elsif result.to_s =~ /The (.*) suddenly drifts from its course as the/
			respond "The Ship's Gone Off Course Captain!"
			crew_det_drift
			echo "Corrective Course Determined"
			crew_fix_wheel
		end
end

def crew_keep_course
		#echo "Maintaining Course"
		@sailing_begin_time = Time.now
	result = matchtimeout 300, /The (.*) (cuts through the ocean, heading|drifts slowly)|A large swell crashes into the side of the|The sound of ropes coming free of the rigging|The (.*) suddenly drifts from its course as the|The (.*) drifts steadily toward the/
	if result.to_s =~ /The (.*) (cuts through the ocean, heading|drifts slowly)/
			@sailing_end_time = Time.now
			@sailingtime = ((@sailing_end_time - @sailing_begin_time) / 60.00)
			#respond "Time to move was: #{@sailingtime.as_time}"
			@Sailtimes.push(@sailingtime)
			if UserVars.osacrew["ship_type"] == 'sloop'
				UserVars.osacrew["Slooptimes"] = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'brigantine'
				@Brigtimes = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'carrack'
				@Cartimes = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'galleon'
				@Galtimes = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'frigate'
				@Fritimes = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'man o\' war'
				@Mantimes = @Sailtimes
			end
			@averagetime = (@Sailtimes.sum/ @Sailtimes.size.to_f)
			#respond "Average move time for you ship is: #{@averagetime.as_time}"
			waitrt?
	elsif result.to_s =~ /A large swell crashes into the side of the/
			waitrt?
			fput "yell Rogue Wave! Secure the Anchor!"
			helm
			waitrt?
			waitcastrt?
			raise_anchor
			crew_keep_course
	elsif result.to_s =~ /The sound of ropes coming free of the rigging/
			waitrt?
			fput "yell The Sails Have Furled, Let Go the Halyard, Sheets, and Braces!"
			helm
			waitrt?
			fput "kick capstan"
			waitrt?
			main_deck
			if UserVars.osacrew["ship_type"] == "sloop" 
				one_mast
			elsif (UserVars.osacrew["ship_type"] == "brigantine" or UserVars.osacrew["ship_type"] == "carrack" or UserVars.osacrew["ship_type"] == "galleon" or UserVars.osacrew["ship_type"] == "frigate")
				two_masts
			elsif UserVars.osacrew["ship_type"] == "man o' war"
				three_masts
			end
			raise_anchor
			crew_keep_course
	elsif result.to_s =~ /The (.*) suddenly drifts from its course as the/
			echo "The Ship Has Gone Off Course"
			waitrt?
			helm
			waitcastrt?
			crew_det_drift
			echo "Corrective Course Determined"
			crew_fix_wheel
			waitrt?
			if @ph_corrected != "None"
				crew_keep_course
			end
	elsif result.to_s =~ /The (.*) drifts steadily toward the/
			@sailing_end_time = Time.now
			@sailingtime = ((@sailing_end_time - @sailing_begin_time) / 60.00)
			#respond "Time to move was: #{@sailingtime.as_time}"
			@Sailtimes.push(@sailingtime)
			if UserVars.osacrew["ship_type"] == 'sloop'
				UserVars.osacrew["Slooptimes"]= @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'brigantine'
				UserVars.osacrew["Brigtimes"] = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'carrack'
				UserVars.osacrew["Cartimes"] = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'galleon'
				UserVars.osacrew["Galtimes"] = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'frigate'
				UserVars.osacrew["Fritimes"] = @Sailtimes
			end
			if UserVars.osacrew["ship_type"] == 'man o\' war'
				UserVars.osacrew["Mantimes"] = @Sailtimes
			end
			@averagetime = (@Sailtimes.sum/ @Sailtimes.size.to_f)
			waitrt?
			respond "Liberty Call! Liberty Call!"
			@end_trip = Time.now
			@trip_total_time = ((@end_trip - @start_trip)/ 60.00)
			respond "
			Estimated Trip Time Was: #{@estimated_trip_time}"
			respond "Actual Trip Time: #{@trip_total_time.as_time}
			"
			Lich::Util.quiet_command("look ocean", /\[(.*)\]/, end_pattern = /(Open waters: (.*)|Obvious paths: (.*))/, include_end = false ,timeout = 0.4, silent = true)
			sleep 0.25
			room_title = room_description = room_exits_string = nil
			history = ($_SERVERBUFFER_ + $_SERVERBUFFER_.history)
			history.each_index { |i|
            history[i-7..i].each { |line|
                if line =~ /<style id="roomName" \/>(.*)$/
                    room_title = $1.strip
                elsif line =~ /<style id="roomDesc"\/>(.*?)<style id=""\/>/
                    room_description = $1.strip.gsub(/<.*?>/, '')
                elsif line =~ /(Obvious (?:paths|exits): .*)/
                    room_exits_string = $1.strip.gsub(/<.*?>/, '')
                end
                }}
			room = Map.list.find { |room| room.title.include?(room_title) and room.desc.include?(room_description) and room.paths.include?(room_exits_string) }
			unless room
			desc_regex = /#{Regexp.escape(room_description).gsub(/\\\.(?:\\\.\\\.)?/, '|')}/
			room = Map.list.find { |room| room.title.include?(room_title) and room.paths.include?(room_exits_string) and room.desc.find { |desc| desc =~ desc_regex } }
			end
			main_deck
			fput "push gang"
			if checkname == UserVars.osacrew["commander"]
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{UserVars.osacrew["commander_ship_name"]} Is Now Moored In #{room.location}. Room Number: #{room.id} #{room.title[0]}. Estimated Trip Time Was Approximately: #{@estimated_trip_time}, Actual Trip Time Was: #{@trip_total_time.as_time}")
			end
			if !UserVars.osacrew["gangplank"].nil? 
				Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
			end
			crew_clear_gangplank
			UserVars.osacrew["gangplank"] = room.id
			Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
			crew_map_gangplank
			if UserVars.osacrew["othersailors"]
				commander_give_permission
			end
			exit
	end
end

def crew_get_underway
	main_deck
	ship_map
	if UserVars.osacrew["ship_type"] == "sloop" 
		one_mast
	elsif (UserVars.osacrew["ship_type"] == "brigantine" or UserVars.osacrew["ship_type"] == "carrack" or UserVars.osacrew["ship_type"] == "galleon" or UserVars.osacrew["ship_type"] == "frigate")
		two_masts
	elsif UserVars.osacrew["ship_type"] == "man o' war"
		three_masts
	end
	waitrt?
	waitcastrt?
	helm
	echo "Raising Anchor"
	raise_anchor
	waitrt?
	if @anchor_aweigh
		fput "yell Anchor's Aweigh!"
		@anchor_aweigh = false
	end
	multifput "depart","depart"
	fput "yell Underway!"
end

#================ Task Section ================
def go_to_handler
	start_script("go2", ["handler"])
	wait_while { running?("go2") }
	if Room.current.location == "Kraken's Fall"
		start_script("go2", ['28950'])
		wait_while { running?("go2") }
	end
end

def crew_check_task
	checktask = Lich::Util.quiet_command("osa task", /OSA TASK/, end_pattern = /Expedites your current task cooldown./, include_end = false ,timeout = 0.75, silent = true)
		if checktask.to_s =~ /You do not currently have a task from the Sea Hag's Roost/
			go_to_handler
			fput "take board"
			pause 0.5
			captains_quarters
			wait_until {checkpcs.include? UserVars.osacrew["commander"]}
			crew_task_complete
		elsif checktask.to_s =~ /You should return to the Sea Hag's Roost to report your success/
			if saturated?
				if UserVars.osacrew["uselte"]
					fput "boost long"
				end
				wait_until {!saturated?}
			end
			go_to_handler
			fput "turn board"
			pause 0.5
			fput "take board"
			pause 0.5
			captains_quarters
			wait_until {checkpcs.include? UserVars.osacrew["commander"]}
			crew_task_complete
		elsif checktask.to_s =~ /Abandons your current task/
			wait_until {checkpcs.include? UserVars.osacrew["commander"]}
			crew_task_complete
		else
			wait_until {checkpcs.include? UserVars.osacrew["commander"]}
			crew_task_complete
		end
end

def crew_task_complete
	if !UserVars.osacrew["commander"].include? "#{checkname}"
		pause rand(1..8)
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Task Complete")
	end
end

#================ Spellup Section ================

def crew_send_mana
	if percentmana >= 50 && (checkpcs.include? @manaperson) && $matched_type
		if running? "osacombat"
			pause_script "osacombat"
		end
		if running? "osacombat"
			pause_script "osacombat"
		end
		waitrt?
		waitcastrt?
		fput "send #{(maxmana/100)*20.to_i} #{@manaperson}"
		if running? "osacombat"
			unpause_script "osacombat"
		end
	end
	$matched_type = false
end

def crew_recieve_bread
	result = matchtimeout 30, /#{UserVars.osacrew["medicalofficer"]} offers (.*) (a|some)|#{UserVars.osacrew["medicalofficer"]} offers you (a|some)/
	if result.to_s =~ /#{UserVars.osacrew["medicalofficer"]} offers you (a|some)/
		fput "accept"
		crew_eat_bread
	elsif result.to_s =~ /#{UserVars.osacrew["medicalofficer"]} offers (.*) (a|some)/
			crew_recieve_bread
	end
end

def crew_eat_bread
	fput "gobble ##{GameObj.right_hand.id}"
	if !GameObj.right_hand.noun.nil?
		crew_eat_bread
	else
		return
	end
end

def determine_group_members
	UserVars.osacrew["everyone_in_my_group"] = Array.new
	UserVars.osacrew["everyone_in_my_group"].clear
	res = Lich::Util.quiet_command("group", /You are leading (.*)|You are not currently in a group.|You are grouped with (.*)./, end_pattern = /GROUP HELP for a list of other options./, include_end = false ,timeout = 0.6, silent = true)
	grouped = res.to_s.scan(/[A-Z]\w*/).flatten.uniq
	grouped.delete_if { |name| name =~  /Your|You/i }
	grouped.each{|member| UserVars.osacrew["everyone_in_my_group"].push(member) if !UserVars.osacrew["everyone_in_my_group"].include? (member) }
end

def self_armor_spec
	if UserVars.osacrew["my_armor_spec"].downcase.include? "blessing"
		waitrt?
		fput "armor blessing"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "reinforcement"
		waitrt?
		fput "armor reinforement"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "support"
		waitrt?
		fput "armor support"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "casting"
		waitrt?
		fput "armor casting"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "evasion" 
		waitrt?
		fput "armor evasion"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "fluidity"
		waitrt?
		fput "armor fluidity"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "stealth"
		waitrt?
		fput "armor stealth"
	end
end

def crew_apply_support
	@supportlist.each do |n, t|
		@support_rec = n
		@support_type = t
		if @support_type == "Blessing"
			waitrt?
			fput "armor blessing #{@support_rec}"
			pause 5
		elsif @support_type == "Reinforcement"
			waitrt?
			fput "armor reinforement #{@support_rec}"
			pause 5
		elsif @support_type == "Support"
			waitrt?
			fput "armor support #{@support_rec}"
			pause 5
		elsif @support_type == "Casting"
			waitrt?
			fput "armor casting #{@support_rec}"
			pause 5
		elsif @support_type == "Evasion" 
			waitrt?
			fput "armor evasion #{@support_rec}"
			pause 5
		elsif @support_type == "Fluidity"
			waitrt?
			fput "armor fluidity #{@support_rec}"
			pause 5
		elsif @support_type == "Stealth"
			waitrt?
			fput "armor stealth #{@support_rec}"
			pause 5
		end
	end
end

def mana_share
	$mana_type = Array.new
	$mana_type.clear
	$my_mana_type = Array.new
	$my_mana_type.clear
	if (Skills.smc >= 24)
		$mana_type.push ("Spiritual")
		$my_mana_type.push ("Spiritual")
	end
	if (Skills.mmc >= 24)
		$mana_type.push ("Mental")
		$my_mana_type.push ("Mental")
	end
	if (Skills.emc >= 24)
		$mana_type.push ("Elemental")
		$my_mana_type.push ("Elemental")
	end
	if $mana_type.count > 1
		$new_mana_type = $mana_type.last()
		$mana_type.delete "#{$mana_type.last()}"
		$mana_type.push ("or #{$new_mana_type}")
	end
	if $mana_type.count.to_i == 3
		$mana_message = "I Need #{$mana_type[0]}, #{$mana_type[1]} #{$mana_type[2]} Mana!"
	end
	if $mana_type.count.to_i == 2
		$mana_message = "I Need #{$mana_type[0]} #{$mana_type[1]} Mana!"
	end
	if $mana_type.count.to_i == 1
		$mana_message = "I Need #{$mana_type[0]} Mana!"
	end
end

def need_mana
	while running?("ewaggle")
		pause 1
		if percentmana < 15
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
			wait_until {percentmana > 15}
		end
	end
end

def crew_spellup_time_left
	$timeleft = Array.new
	Spell.active.each { |s| 
		if ((s.timeleft <= 250) and (s.timeleft > 2)) 
			$timeleft.push (s.timeleft)
		end}
		UserVars.osacrew["waggletimeleft"] = ($timeleft.sum/$timeleft.count)
end

def crew_spell_individual
	if UserVars.osacrew["groupspellup"] == true
		if !Feat.known?("Kroderine Soul")
			echo "Spelling up, #{$pc}"
			start_script("ewaggle", ['--start-at=240', '--stop-at=240', '--stop-before=500', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on', $pc])
			need_mana
		end
	end
end

def crew_spell_up
	if Stats.prof == "Empath"
		if running? "ecure"
			stop_script "ecure"
		end
		wait_while { running?("ecure") }
		Script.run("ecure","group")
		wait_while { running?("ecure") }
	end
	if Feat.known?("Kroderine Soul")
		multifput "leave", "group open"
	end
	spellup = Lich::Util.quiet_command("mana", /Normal/, end_pattern = /You have used the MANA SPELLUP ability (.*) out of (.*) times for today\./, include_end = true ,timeout = 0.4, silent = true)
	if spellup.to_s =~ /You have used the MANA SPELLUP ability (.*) out of (.*) times for today\./
		if ($2 == "0") or ($1 == $2 )
			$mana_spellup = false
		else
			$mana_spellup = true
		end
		if !UserVars.osacrew["mana_spellup"]
			$mana_spellup = false
		end
		if $mana_spellup
			crew_spellup_time_left
			if (UserVars.osacrew["waggletimeleft"] <= 90)
				waitrt?
				waitcastrt?
				pause 0.2
				fput "mana spellup"
			end
		end
	end
	spellup
	if UserVars.osacrew["selfspellup"] == true
		start_script("ewaggle", ['--start-at=240', '--stop-at=240', '--stop-before=500', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on'])
		need_mana
	end
	if UserVars.osacrew["groupspellup"] == true
		pause 2
		UserVars.osacrew["everyone_in_my_group"].delete(checkname)
		determine_group_members
		if !Feat.known?("Kroderine Soul")
			UserVars.osacrew["everyone_in_my_group"].each do |n|
				$pc = n
				echo "Spelling up, #{$pc}"
				start_script("ewaggle", ['--start-at=240', '--stop-at=240', '--stop-before=500', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on', $pc])
				need_mana
			end
		end
	end
	if UserVars.osacrew["armor_specs"] == true
		crew_apply_support
		@supportlist.clear
	end	
	self_armor_spec
	crew_task_complete
end

#================ Bless Section ================

def recieve_bless
result = matchtimeout 15, /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
	if result.to_s =~ /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
		return
	else
		respond ""
		respond "                                  Something May Have Gone Wrong With The Bless                               "
		respond ""
	end
end

def get_bless
	if UserVars.osacombat["needbless"]
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Need Blessed Please!")
		waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"#{checkname}/
		if UserVars.osacombat["uachands"].empty? and UserVars.osacombat["uacfeet"].empty?
			fput "gird"
			pause 1
		else
			if !UserVars.osacombat["uachands"].empty?
				fput "remove #{UserVars.osacombat["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacombat["uacfeet"].empty?
				fput "remove #{UserVars.osacombat["uacfeet"]}"
			end
		end
		if !GameObj.left_hand.id.nil? && GameObj.right_hand.id.nil?
			fput "swap"
		end
		if !GameObj.left_hand.id.nil? && !GameObj.right_hand.id.nil?
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Have Two.")
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Am Ready.")
			recieve_bless
			fput "swap"
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "Ok, The Next One Is Ready.")
			recieve_bless
		else
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Have One.")
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Am Ready.")
			recieve_bless
		end
		if UserVars.osacombat["uachands"].empty? and UserVars.osacombat["uacfeet"].empty?
			fput "store both"
		else
			if !UserVars.osacombat["uachands"].empty?
				fput "wear #{UserVars.osacombat["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacombat["uacfeet"].empty?
				fput "wear #{UserVars.osacombat["uacfeet"]}"
			end
		end	
	end
end

def cast_bless
	result = matchtimeout 5, /^\[Private\]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private\]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
		if result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private\]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
			if Spell[1604].known? and Spell[1604].affordable?
				Spell[1604].cast("#{@name}")
			end
			waitcastrt?
			if Spell[304].known? and Spell[304].affordable?
				Spell[304].cast("#{@name}")
			else
				fput "symbol bless #{@name}"
			end
		end
end
		
def give_bless
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{@name}")
	result = matchtimeout 5, /^\[Private\]-GSIV:#{@name}\: \"I Have One.\"|^\[Private\]-GSIV:#{@name}\: \"I Have Two.\"/
		if result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Have One.\"/
			cast_bless
		elsif result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Have Two.\"/
			2.times{cast_bless}
		end
end

def who_needs_blessed
	result = matchtimeout 1, /^\[Private\]-GSIV:(.*)\: \"I Need Blessed Please!\"/
	if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Need Blessed Please!\"/
		@blessname.push($1)
		who_needs_blessed
	end
end

def begin_bless
	if (Spell[304].known? or Spell[9802].known?) && UserVars.osacombat["givebless"] == true
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Will Be Providing All Crew Blessings!")
		@blessname = Array.new
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Does Anyone Need A Bless?")
		who_needs_blessed
		@blessname.each do |n|
			@name = n
			give_bless
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "The Crew Has Been Properly Blessed!")
	else
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Can Anyone Bless?")
		result = matchtimeout 3, /^\[Private\]-GSIV:(.*)\: \"I Can Captain!\"/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Can Captain!\"/
			UserVars.osacrew["blesser"] = $1
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{UserVars.osacrew["blesser"]}, Will You Please Bless The Crew?")
			waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"Does Anyone Need A Bless\?\"/
			get_bless
			waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"The Crew Has Been Properly Blessed Captain!"/
		else
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "We Do Not Have Anyone Present Who Can Bless The Crew, We Will Continue Without!")
		end
	end		
end

def status_check
	@capped = false
	@resource = nil
	@resource_total = nil
	@resource_weekly = nil
	exp = Lich::Util.quiet_command("exp", /Level:/, end_pattern = /You mind is (.*)\./, include_end = false ,timeout = 0.4, silent = true)
	if exp.to_s =~ /Exp to next TP: ([0-9,]+)/
		@capped = true
		@exptntp = $1
	elsif exp.to_s =~ /Exp until lvl: ([0-9,]+)/
		@capped = false
	end
	if exp.to_s =~ /PTPs\/MTPs: ([0-9,]+)\/([0-9,]+)/
		@mtrainingpoints = $2
		@ptrainingpoints = $1
	end
	resource = Lich::Util.quiet_command("resource", /Health: ([0-9,]+)\/([0-9,]+)     Mana: ([0-9,]+)\/([0-9,]+)     Stamina: ([0-9,]+)\/([0-9,]+)     Spirit: ([0-9,]+)\/([0-9,]+)/, end_pattern = /Suffused (.*): ([0-9,]+)/, include_end = true, timeout = 0.5, silent = true)
	if resource.to_s =~ /(Necrotic Energy|Essence|Motes of Tranquility|Devotion|Nature's Grace|Luck Inspiration|Grit): ([0-9,]+)\/50,000/
		@resource = $1
		@resource_weekly = $2
	end
	if resource.to_s =~ /([0-9,]+)\/200,000/
		@resource_total = $1
	end
	if resource.to_s =~ /(.*) ([0-9,]+)\/200,000/
		@resource_total = $2
	end
	if !@capped && !@resource.nil? && checkname != UserVars.osacrew["commander"]
		pause rand(1..3)
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}")
	end
	if !@capped && @resource.nil? && checkname != UserVars.osacrew["commander"]
		pause rand(1..3)
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}")
	end
	if @capped && !@resource.nil? && checkname != UserVars.osacrew["commander"]
		pause rand(1..3)
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}")
	end
	if @capped && @resource.nil? && checkname != UserVars.osacrew["commander"]
		pause rand(1..3)
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}")
	end
	if !@capped && !@resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}"
		respond ""
	end
	if !@capped && @resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}"
		respond ""
	end
	if @capped && !@resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}"
		respond ""
	end
	if @capped && @resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}"
		respond ""
	end
end

def crew_match_city
	if (Room.current.location.include? "Landing" or Room.current.location.include? "Solhaven") and (@crew_orders_town.include? "Solhaven" or @crew_orders_town.include? "Landing")
		@crew_city_match = true
	end
	if Room.current.location.include? "River's Rest" and @crew_orders_town.include? "River's Rest"
		@crew_city_match = true
	end
	if Room.current.location.include? "Kharam-Dzu" and @crew_orders_town.include? "Kharam-Dzu"
		@crew_city_match = true
	end
	if Room.current.location.include? "Kraken's Fall" and @crew_orders_town.include? "Kraken's Fall"
		@crew_city_match = true
	end
	if @crew_city_match == true
		start_script("go2", [@crew_orders_room])
		wait_while { running?("go2") }
		wait_until { Room.current.id == @crew_orders_room.to_i }
		fput "go gangplank"
		captains_quarters
		respond "
		Crewman #{checkname} Standing By And Awaiting Orders Captain!
		"
		return
	else	
		respond "
		The Ship Has Arrived In #{@crew_orders_town}, Please Travel Closer Or Await It's Arrival Near #{Room.current.location}
		"
		exit
	end
end

def crew_give_coins
	if Lich::Util.silver_count != 0
		fput "give #{UserVars.osacrew["commander"]} #{Lich::Util.silver_count}"
	else
		return
	end
end

def crew_start_orders
	@crew_city_match = false
	respond "   ---------------------------==================================================================================================---------------------------

				                                               Welcome Back Crewman #{checkname}, Waiting For The Ship To Arrive!

	   ---------------------------==================================================================================================---------------------------"
	   while line = get
	   case line
	   when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"(.*) Is Now Moored In (.*). Room Number: (.*) \[/
		@crew_orders_town = $2
		@crew_orders_room = $3
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Crewman #{checkname}, Requesting Permission To Come Aboard!")
		result = matchtimeout 30, /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Granted\, Come Aboard!"|^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!"/
			if result.to_s =~ /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Granted\, Come Aboard!"/
				crew_match_city
				return
			elsif result.to_s =~ /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!"/
				respond "
						Sorry Shipmate, The Ship Has A Full Berth! Restarting Orders!
						"
				crew_start_orders
		end
	end	
	end
end

def cast_sails
	if Spell[912].known?
		Spell[912].cast "sail"
	end
	if Spell[612].known?
		Spell[612].cast "sail"
	end
	waitrt?
	waitcastrt?
end

def check_winded
	if @winded
		pause 5
		return
	else
		main_deck
		return
	end
end

def winded_sails
	if @winded
		main_deck
		cast_sails
	else
		main_deck
		return
	end
	if @winded
		if UserVars.osacrew["ship_map"].include? "mid_deck"
			mid_deck
			cast_sails
		end
	else
		main_deck
		return
	end
	if @winded
		if UserVars.osacrew["ship_map"].include? "forward_deck"
			forward_deck
			cast_sails
		end
	else
		main_deck
		return
	end
	10.times{check_winded}
	winded_sails
end

def crew_display_settings
	if UserVars.osacrew["othersailors"] == true
		$othersailors_value = "Yes"
	else
		$othersailors_value = "No"
	end
	if UserVars.osacrew["stowaways"] == true
		$stowaways_value = "Yes"
	else
		$stowaways_value = "No"
	end
	if UserVars.osacrew["piratehunter"] == true
		$piratehunter_value = "Yes"
	else 
		$piratehunter_value = "No"
	end
	if UserVars.osacrew["cleanup"] == true
		$cleanup_value = "Yes"
	else
		$cleanup_value = "No"
	end
	if UserVars.osacrew["helmsman_enabled"] == true
		$helmsman_enabled = "Yes"
	else
		$helmsman_enabled = "No"
	end
	if UserVars.osacrew["cleanup_type"] == nil
		$cleanup_type_value = "Normal"
	elsif UserVars.osacrew["cleanup_type"] == raze
		$cleanup_type_value = "Raze Spawn"
	elsif UserVars.osacrew["cleanup_type"] == spawn
		$cleanup_type_value = "Treasure Spawn"
	end
	respond "

	Your Current Crew Settings Are As Follows:

	Commander:                  #{UserVars.osacrew["commander"]}

	Crew:                       #{UserVars.osacrew["crew"]}

	Medical Officer:            #{UserVars.osacrew["medicalofficer"]}

	"
	if checkname == (UserVars.osacrew["commander"])
		respond "
		
	You Are Currently Commander Of #{UserVars.osacrew["commander_ship_name"]}, A Battle Ready #{UserVars.osacrew["commander_ship_type"].split(/ |\_/).map(&:capitalize).join(" ")}!

	Current Crew Size:                          #{UserVars.osacrew["crewsize"].count} out of #{UserVars.osacrew["commander_max_crew"]}

	Accepting Outside Scripted Crew:            #{$othersailors_value}

	Pausing For Non-Scripted Crew:              #{$stowaways_value}

	Enemy Detection Mode:                       #{$piratehunter_value}

	Currently Cleaning Up Stragglers:           #{$cleanup_value}

	Current Clean Up Mode:                      #{$cleanup_type_value}

	Helmsman Qualified:                         #{$helmsman_enabled}
	"
	end
end

def crew_disembark
	UserVars.osacrew["depart"] = true
	respond ""
	respond "                     You Will Depart The Crew When The Crew Visits The Bank Next!
	                                      Thanks For Sailing With Us...
										 "
end

def no_file
	respond "

	In order to run OSACrew you need #{@needfile}
	=================================================
	Do you wish to download it now?
		1\. Yes
		2\. No
	=================================================
	Please Select an Option - 
		  ;send <#> "
	respond
	clear
	line = nil
	line = get until line.strip =~ /^[0-9]+$/
	answer = line
	if answer == "1"
		respond "
		Excellent, Downloading Now!
		"
		start_script 'repository', [ 'download', "#{@needfile}", "--author=elanthia-online" ]
		wait_until { !running?('repository') }
		respond "
		Download Complete, Moving On...
		"
	elsif answer == "2"
		echo "Very Well, Please Restart OSACrew When You Have It."
		exit
		end
end

def crew_crew_swap
	if variable[2].nil?
			respond "
		 
		 Please Select A Valid Commander:
		  
		  ;osacrew swap <commander>
		 
		 "
		return
	else
		LNet.send_message(attr = { 'type' => 'private', 'to' => variable[2] }, "Crewman #{checkname} Checking Onboard Captain!")
		result = matchtimeout 3, /^\[Private\]-GSIV:(.*)\: \"Excellent Crewman #{checkname}, Welcome Aboard! Our Medical Officer Is: (.*). Our Shipboard Communications Channel Is: (.*)\"/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"Excellent Crewman #{checkname}, Welcome Aboard! Our Medical Officer Is: (.*). Our Shipboard Communications Channel Is: (.*)\"/
			UserVars.osacrew["commander"] = $1
			UserVars.osacrew["medicalofficer"] = $2
			UserVars.osacrew["crew"] = $3
			respond ""
			_respond "\<preset id=\"thought\"\>" + "Your Crew Settings Have Changed And Now Are:" + "\<\/preset\>"
			respond ""
			_respond "\<preset id=\"thought\"\>" + "Crew:                #{UserVars.osacrew["crew"]}" + "\<\/preset\>"
			_respond "\<preset id=\"thought\"\>" + "Commander:           #{UserVars.osacrew["commander"]}" + "\<\/preset\>"
			_respond "\<preset id=\"thought\"\>" + "Medical Officer:     #{UserVars.osacrew["medicalofficer"]}" + "\<\/preset\>"
			respond ""
			respond ""
		else
			respond "The Captain Didn't Respond, Try Again Later!"
			respond ""
			respond ""
		end
	end
end

if script.vars[1] =~ /call/
(eval script.vars[2]).call
elsif (script.vars[1] =~ /setup/i)
  self.setup()
  exit
elsif (Script.current.vars[1] =~ /profile/i)
	self.profile(Script.current.vars)
	exit
elsif (script.vars[1] =~ /navigation/i)
	crew_start_nav
	UserVars.osacrew["piratehunter"] = false 
elsif script.vars[1].downcase == 'help'
	crew_help_display
	exit
elsif script.vars[1].downcase == 'cannons'
	@boarded = false
	@thirty = false
	@sunk = false
	@stop = false
	gunner_set_mode
	do_client ';e while thirty = get;if thirty.match?(/^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Stop\"/);@stop = true;exit;elsif thirty.match?(/The sides of the (.*) collide against your (.*)/);@boarded = true;exit;elsif thirty.match?(/Tenebrous Cauldron.  Victory is yours!/);@sunk = true;exit;elsif thirty.match?(/^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Thirty second warning, drop what yer doing and prepare for battle. Here they come!"/);@thirty = true;exit;end;end'
	gunner_cycle
	@boarded = false
	@thirty = false
	@sunk = false
	@stop = false
	exit
elsif script.vars[1].downcase == 'swap'
	crew_crew_swap
elsif script.vars[1].downcase == 'orders'
	crew_start_orders
elsif script.vars[1] == '?'
	crew_help_display
	exit
elsif script.vars[1] == 'version'
	respond ""
	respond "OSACombat Version #{UserVars.osacrew["combatversion"]}"
	respond ""
	exit
elsif script.vars[1] =~ /underway/
		if script.vars[2].nil?
			crew_get_underway
			exit
		end
		if !script.vars[2].include? "sai" and !variable[2].include? "anc"
			respond "
					Please Select A Valid Underway Option: Sails or Anchor.
						No Option Will default To Full Underway Process
					"
		end
		if script.vars[2].include? "sai"
			ship_map
			if UserVars.osacrew["ship_type"] == "sloop" 
				one_mast
			elsif (UserVars.osacrew["ship_type"] == "brigantine" or UserVars.osacrew["ship_type"] == "carrack" or UserVars.osacrew["ship_type"] == "galleon" or UserVars.osacrew["ship_type"] == "frigate")
				two_masts
			elsif UserVars.osacrew["ship_type"] == "man o' war"
				three_masts
			end
		end
		if script.vars[2].include? "anc"
			ship_map
			crew_go_to_capstan
		end	
elsif script.vars[1] =~ /repairs/
	damage_control
	exit
elsif script.vars[1] =~ /settings/
	crew_display_settings
	exit
end

before_dying {
if checkname == (UserVars.osacrew["commander"])
	if script.vars[1] != /settings/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "*Ding* *Ding* #{UserVars.osacrew["commander_ship_name"]} Departing!") if !UserVars.osacrew["crew"].empty?
	end
else
	if !script.vars[1] != /settings/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "*Ding* *Ding* Crewman #{checkname} Departing!") if !UserVars.osacrew["crew"].empty?
	end
end
}

if UserVars.osacrew["crew"].empty? or UserVars.osacrew["crew"].nil?
	respond "*********** Your Crew Channel Is Not Set, Please Set Your Crew Channel Before Proceeding (If You Do Not Have One Set, Use Your Character\'s First Name) ************"
	exit
end
if UserVars.osacrew["commander"].empty? or UserVars.osacrew["commander"].nil?
	respond "*********** Your Commander Is Not Set, Please Set Your Crew Channel Before Proceeding (If You Do Not Have One, Use Your Character\'s First Name) ************"
	exit
end
@needfile = nil
if !Script.exists?('eloot')
	@needfile = "Eloot"
	no_file.call
end
if !Script.exists?('eherbs')
	@needfile = "Eherbs"
	no_file.call
end
if !Script.exists?('foreach')
	@needfile = "Foreach"
	no_file.call
end
if !Script.exists?('ewaggle')
	@needfile = "Ewaggle"
	no_file.call
end
if !Script.exists?('ecure')
	@needfile = "Ecure"
	no_file.call
end
fput "flag sortedview on"
UserVars.osacrew["depart"] = false
UserVars.osacrew["piratehunter"] = false
@crew_lowered_sail = false
@crew_anchor_aweigh = false
@combat_cure = false
@boarded = false
@thirty = false
@sunk = false
@stop = false
UserVars.osacrew["logging"] = false
@medicalofficer_patient = Array.new
@supportlist = Array.new
if UserVars.osacombat["stealth_disabler"].nil?
	UserVars.osacombat["stealth_disabler"] = 0
end
if UserVars.osacrew["boarding"].nil?
	UserVars.osacrew["boarding"] = false
end
if checkname != UserVars.osacrew["commander"]
	UserVars.osacrew["cleanup"] = false
	UserVars.osacrew["piratehunter"] = false
end
if UserVars.osacombat["aoe_if"].to_s.empty?
	UserVars.osacombat["aoe_if"] = 0
end
if UserVars.osacombat["undead_aoe_if"].to_s.empty?
	UserVars.osacombat["undead_aoe_if"] = 0
end
if UserVars.osacombat["opener_if"].to_s.empty?
	UserVars.osacombat["opener_if"] = 0
end
if UserVars.osacombat["undead_opener_if"].to_s.empty?
	UserVars.osacombat["undead_opener_if"] = 0
end
if UserVars.osacrew["checkformana"].to_s.empty?
	UserVars.osacrew["checkformana"] = 80
end
if UserVars.osacrew["crewsize"].to_s.empty?
	UserVars.osacrew["crewsize"] = Array.new
end
if UserVars.osacrew["crewsize"].to_s.nil?
	UserVars.osacrew["crewsize"] = Array.new
end
if script.vars[1].nil?
	crew_display_settings
end
Room[30129].tags.push("meta:trashcan:bucket")
Room[30175].tags.push("meta:trashcan:bucket")
Room[30180].tags.push("meta:trashcan:bucket")
Room[30124].tags.push("meta:trashcan:bucket")
Room[30140].tags.push("meta:trashcan:bucket")
Room[29042].tags.push("meta:trashcan:bucket")
mana_share
$matched_type = false
ship_type
determine_group_members
while line = get
	case line
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"Does Anyone Need A Bless\?\"/
		if running? "osacommander"
			next
		end
		if UserVars.osacombat["needbless"]
			get_bless
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Enemy Vessel Detected, (.*) Sound General Quarters! Gunners Man Your Irons!"/
		if $1.downcase.include? "ethereal"
			UserVars.osacrew["enemy_type"] = "undead"
		end
		if $1.downcase.include? "krolvin"
			UserVars.osacrew["enemy_type"] = "krolvin"
		end
		if $1.downcase.include? "dark"
			UserVars.osacrew["enemy_type"] = "pirate"
		end
		ship_map
		if UserVars.osacombat["cannoneer"] == true
			@boarded = false
			@thirty = false
			@sunk = false
			@stop = false
			do_client ';e while thirty = get;if thirty.match?(/^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Stop\"/);@stop = true;exit;elsif thirty.match?(/The sides of the (.*) collide against your (.*)/);@boarded = true;exit;elsif thirty.match?(/Tenebrous Cauldron.  Victory is yours!/);@sunk = true;exit;elsif thirty.match?(/^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Thirty second warning, drop what yer doing and prepare for battle. Here they come!"/);@thirty = true;exit;end;end'
			gunner_cycle
		else
			if UserVars.osacombat["osacombat"] == true
				if !running? "osacombat" 
					start_script "osacombat"
				end
			else
				echo "You Are Not Currently In A Combatant Role, Ready Thyself For Combat!"
				if checkname != "Tearieyes"
					do_client "gird"
				else
					fput "get stick from my sling"
				end
				if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
						captains_quarters
				end
			end
		end	
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Enemy Vessel Detected, (.*) Inbound. Sound General Quarters!"/
		if $1.downcase.include? "ethereal"
			UserVars.osacrew["enemy_type"] = "undead"
			UserVars.osacombat["creature_type"] = "undead"
		end
		if $1.downcase.include? "krolvin"
			UserVars.osacrew["enemy_type"] = "krolvin"
			UserVars.osacombat["creature_type"] = "living"
		end
		if $1.downcase.include? "dark"
			UserVars.osacrew["enemy_type"] = "pirate"
			UserVars.osacombat["creature_type"] = "living"
		end
		ship_map
		if UserVars.osacrew["windedsails"]
			@winded = true
			do_client ';e while winded = get;if winded.match?(/(.*) Is Now Moored In (.*). Estimated Trip Time Was Approximately/);@winded = false;exit;elsif winded.match?(/The sides of the (.*) collide against your (.*)/);@winded = false;exit;elsif winded.match?(/^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Stop\"/);@winded = false;exit;elsif winded.match?(/^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Thirty second warning, drop what yer doing and prepare for battle. Here they come!"/);@winded = false;exit;end;end'
			winded_sails
			wait_until {checkpcs.include? UserVars.osacrew["commander"]}
			fput "join #{UserVars.osacrew["commander"]}"
			@winded = true
		end
		if UserVars.osacombat["osacombat"] == true
			if !running? "osacombat"
				start_script "osacombat"
			end
		else
			echo "You Are Not Currently In A Combatant Role, Ready Thyself For Combat!"
			if checkname != "Tearieyes"
				do_client "gird"
			else
				fput "get stick from my sling"
			end
			if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
				captains_quarters
			end
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "(.*) Expects To Make Way From/
		if UserVars.osacrew["windedsails"]
			@winded = true
			do_client ";e while winded = get;if winded.match?(/(.*) Is Now Moored In (.*). Estimated Trip Time Was Approximately/);@winded = false;exit;end;end"
			winded_sails
			wait_until {checkpcs.include? UserVars.osacrew["commander"]}
			fput "join #{UserVars.osacrew["commander"]}"
			@winded = true
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Turn To!\"/
		ship_type
		wait_until { !running?("eloot") }
		if UserVars.osacombat["osacombat"] == true
				stop_script "osacombat"
				wait_while { running?("osacombat") }
		end
		waitrt?
		waitcastrt?
		if !GameObj.left_hand.id.nil? or !GameObj.right_hand.id.nil?
			fput "store both"
		end
		fput "leave"
		pause 0.5
		fput "group open"
		if Room.current.tags.include? "captains_quarters"
			nil
		else
			damage_control
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Stop\"/
		if UserVars.osacombat["osacombat"] == true
			if running? "osacombat"
				stop_script "osacombat"
				wait_while { running?("osacombat") }
			end
			waitrt?
			waitcastrt?
			fput "store both"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"All Hands Make Ready To Get Underway!\"/
		ship_map
		if UserVars.osacrew["osacrewtasks"] == true
			fput "leave"
			pause 0.5
			fput "group open"
			main_deck
			if UserVars.osacrew["ship_type"] == "sloop" 
				one_mast
			elsif (UserVars.osacrew["ship_type"] == "brigantine" or UserVars.osacrew["ship_type"] == "carrack" or UserVars.osacrew["ship_type"] == "galleon" or UserVars.osacrew["ship_type"] == "frigate")
				two_masts
			elsif UserVars.osacrew["ship_type"] == "man o' war"
				three_masts
			end
			#move "go door"
			captains_quarters
		else
			captains_quarters
			echo "You Are Not Currently In A Crew Role, Please Standby To Standby!" 
		end
		pause 1
		if percentmana <= 84
			respond ""
			respond "          -----------------------------------------------------"
			respond "          |                Waiting For Mana                   |"
			respond "          -----------------------------------------------------"
			respond ""
			wait_until {percentmana >= 85}
		end
		pause 5
		wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}" and Room.current.tags.include? "captains_quarters"}
		crew_task_complete
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Status\"/
		status_check
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Spells\"/
		crew_spell_up
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Crew, Spell Up (.*).\"/
		$pc = $1
		crew_spell_individual
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Task Time!\"/
		crew_check_task
		
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Deposit\"/
		fput "depo all"
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Sheath\"/
		do_client "sheath"
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Reset\"/
		do_client ";e stop_script 'osacrew';wait_while { running?('osacrew') };start_script 'osacrew'"
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Change Of Command: (.*)\"/
		UserVars.osacrew["commander"] = $1
		respond "
		Your New Commanding Officer Is Now: #{UserVars.osacrew["commander"]}
		"
		when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Crew Swap: (.*)\"/
		do_client ";lnet untune #{UserVars.osacrew["crew"]}"
		pause 0.5
		UserVars.osacrew["crew"] = $1
		pause 0.5
		do_client ";lnet tune #{UserVars.osacrew["crew"]}"
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Pause\"/
		if UserVars.osacombat["osacombat"] == true
			if running? "osacombat"
				pause_script "osacombat"
			end
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Unpause\"/
		if UserVars.osacombat["osacombat"] == true
			if running? "osacombat"
				unpause_script "osacombat"
			end
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*)\: \"I Need (.*) Mana!\"$/
		@manaperson = $1
		$mana_type_needed = Array.new
		$mana_type_needed.clear
		replacements = {'or ' => ' ', ' ' => '', ',' => ' '}
		$mana_type_needed = $2.gsub(Regexp.union(replacements.keys), replacements).split(' ')
		$mana_type_needed.each do |n|
			$matched_type = true if $my_mana_type.include? (n)
		end
		crew_send_mana
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Make Repairs!\"/
		damage_control
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Can Anyone Bless\?\"/
		if UserVars.osacombat["givebless"]
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "I Can Captain!")
			result = matchtimeout 3, /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"#{checkname}, Will You Please Bless The Crew\?"/
				if result.to_s =~ /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"#{checkname}, Will You Please Bless The Crew\?"/
					LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Of Course Captain!")
					@blessname = Array.new
					LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Does Anyone Need A Bless?")
					who_needs_blessed
					@blessname.each do |n|
						@name = n
						give_bless
					end
					LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "The Crew Has Been Properly Blessed Captain!")
				else
					next
				end
		else
			next
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"(.*), Will You Please Bless The Crew\?\"/
		UserVars.osacrew["blesser"] = $1
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"I Will Be Providing All Crew Blessings!\"/
		UserVars.osacrew["blesser"] = UserVars.osacrew["commander"]
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Quarters! All Hands To Quarters For Muster, Instruction and Inspection!\"/
			pause rand(1..5)
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Crewman #{checkname} Reporting For Duty Captain!")
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Current Version Are As Follows(.)/
		start_script("osacombat", ["version"])
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "My Versions are as follows: Combat #{UserVars.osacrew["combatversion"]} and Crew #{UserVars.osacrew["crewversion"]}")
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Crew, Report To: (.*)\"/
		if !checkpcs.include? "#{UserVars.osacrew["commander"]}"
			start_script("go2", [$1])
			wait_while { running?("go2") }
			multifput "salute #{UserVars.osacrew["commander"]}", "join #{UserVars.osacrew["commander"]}"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Mana Spellup\"/
		if (Stats.prof != "Warrior") and (Stats.prof !="Rogue")
			fput "mana spellup"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*): "\*Ding\* \*Ding\* Crewman (.*) Departing!\"/
		if checkname == (UserVars.osacrew["commander"]) and UserVars.osacrew["crewsize"].include? "#{$2}" and !UserVars.osacrew["logging"]
			respond "
			Removing #{$2} From The Ship's Roster!
			"
			UserVars.osacrew["crewsize"].delete "#{$2}"
			#do_client ";var set crewsize=#{@crewsize.count}"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*): "Crewman (.*), Returning For Duty Captain!\"/
		if checkname == (UserVars.osacrew["commander"]) and !UserVars.osacrew["crewsize"].include? "#{$2}"
			respond "
			Adding #{$2} To The Ship's Roster!
			"
			UserVars.osacrew["crewsize"].push ($2)
			#do_client ";var set crewsize=#{@crewsize.count}"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["medicalofficer"]}: "I Shall Supply The Bread!\"/
		if (UserVars.osacrew["groupspellup"] or UserVars.osacrew["selfspellup"])
			fput "stow all"
			pause rand(1..3)
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "I Will Take Some Please.")
			crew_recieve_bread
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-(GSIV:#{UserVars.osacrew["commander"]}|You): "Let Us Break Bread Together!\"/
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Shall Supply The Bread!")
			@breadlist = Array.new
			medicalofficer_bread_orders
			multifput "stow all", "incant 203"
			crew_eat_bread
			@breadlist.each do |n|
				@person = n
				medicalofficer_bread
			end
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Bread Is Served!")
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Connection Test: #{checkname}\"/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Test Satisfactory Captain!")
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Lay Below Crewman #{checkname}!\"/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Lay Below, Aye Captain!")
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "*Ding* *Ding* Crewman #{checkname} Departing!") if !UserVars.osacrew["crew"].empty?
		waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}: "Crewman #{checkname}, Quarterdeck!\"/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Crewman #{checkname}, Returning For Duty Captain!")
	when /Attention To Quarters!/
		fput "snap attention"
		waitfor /Post!/
		fput "salute #{UserVars.osacrew["commander"]}" if UserVars.osacrew["commander"] != checkname
		if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne") or (checkname == "Dargol") or (checkname == "Polyanne")
			fput "exit"
		end
	when /^\[Private\]-GSIV:(.*)\: \"Crewman (.*) Checking Onboard Captain!\"/
		if checkname == UserVars.osacrew["commander"]
			@newcheckin = $1
			pause 0.5
			LNet.send_message(attr = { 'type' => 'private', 'to' => @newcheckin }, "Excellent Crewman #{@newcheckin}, Welcome Aboard! Our Medical Officer Is: #{UserVars.osacrew["medicalofficer"]}. Our Shipboard Communications Channel Is: #{UserVars.osacrew["crew"]}")
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Does Anyone Need Armor Adjustments\?\"/
		pause rand(1..3)
		if UserVars.osacrew["need_armor_blessing"]
			if Effects::Spells.time_left("Armor Blessing") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armor Blessing, Please")
			end
		end
		if UserVars.osacrew["need_armor_reinforcement"]
			if Effects::Spells.time_left("Armor Reinforcement") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armor Reinforcement, Please")
			end
		end
		if UserVars.osacrew["need_armor_support"]
			if Effects::Spells.time_left("Armor Support") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armor Support, Please")
			end
		end
		if UserVars.osacrew["need_armor_casting"]
			if Effects::Spells.time_left("Armored Casting") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armored Casting, Please")
			end
		end
		if UserVars.osacrew["need_armor_evasion"]
			if Effects::Spells.time_left("Armored Evasion") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armored Evasion, Please")
			end
		end
		if UserVars.osacrew["need_armor_fluidity"]
			if Effects::Spells.time_left("Armored Fluidity") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armored Fluidity, Please")
			end
		end
		if UserVars.osacrew["need_armor_stealth"]
			if Effects::Spells.time_left("Armored Stealth") <= 60
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Armored Stealth, Please")
			end
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*): \"I Need (Armor|Armored) (.*), Please/
		person = $1
		type = $3
		if type == "Blessing"
			if UserVars.osacrew["have_armor_blessing"]
				@supportlist.push([person, type])
			end
		elsif type == "Reinforcement"
			if UserVars.osacrew["have_armor_reinforcement"]
				@supportlist.push([person, type])
			end
		elsif type == "Support"
			if UserVars.osacrew["have_armor_support"]
				@supportlist.push([person, type])
			end
		elsif type == "Casting"
			if UserVars.osacrew["have_armor_casting"]
				@supportlist.push([person, type])
			end
		elsif type == "Evasion" 
			if UserVars.osacrew["have_armor_evasion"]
				@supportlist.push([person, type])
			end
		elsif type == "Fluidity"
			if UserVars.osacrew["have_armor_fluidity"]
				@supportlist.push([person, type])
			end
		elsif type == "Stealth"
			if UserVars.osacrew["have_armor_stealth"]
				@supportlist.push([person, type])
			end
		end
	when /You could use this opportunity to (.*)!/
		if UserVars.osacombat["use_reactive"]
			UserVars.osacrew["reactive"] = true
			UserVars.osacrew["reactivetype"] = $1
		else
			UserVars.osacrew["reactive"] = false
		end
	when /^\[Private\]-(Noob|GSIV):(.*)\: \"(heal|Heal|spells|dims|bread|surge KS|surge)\"/
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			@person = $2
			echo @person
			pause_script "osacombat"
			@combat_cure = true
			if $3 == "heal"
				@medicalofficer_patient.push(@person)
				medicalofficer_checkup
				@medicalofficer_patient.clear
			elsif $3 == "sugre KS"
				medicalofficer_fix_muscles_ks
			elsif $3 == "surge" 
				medicalofficer_fix_muscles
			elsif $3 == "dims"
				medcalofficer_dims
			elsif $3 == "spells"
				medcalofficer_spells
			elsif $3 == "bread" 
				medicalofficer_bread
			end
			@combat_cure = false
			unpause_script "osacombat"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*)\: \"I Am Poisoned!\"$/
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			@person = $1
			pause_script "osacombat"
			@combat_cure = true
			medicalofficer_fix_poison
			unpause_script "osacombat"
			@combat_cure = false
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:(.*)\: \"I Am Injured!\"$/
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			pause_script "osacombat"
			@combat_cure = true
			@medicalofficer_patient.push($1)
			medicalofficer_triage
			medicalofficer_checkup
			unpause_script "osacombat"
			@medicalofficer_patient.clear
			@combat_cure = false
		end
	when /The (Krolvin|Pirate|Ethereal) Captain shouts in rage aboard the (.*) as (he|she) enters the fray!/
		if UserVars.osacrew["cleanup"] && checkname == UserVars.osacrew["commander"]
			wait_until {GameObj.targets.count {|npc| npc.status !~ /dead|gone|prone/ && npc.name !~ /animated| arm|arms|tentacle|tentacles/ } < 1}
			start_script "eloot"
			wait_while { running?("eloot") }
			start_script("osacommander", ["cleanup"])
		end
	when /A large swell crashes into the side of the/
		if (UserVars.osacrew["piratehunter"])
			pause_script "osacommander"
			waitrt?
			helm
			fput "yell Rogue Wave! Secure the Anchor!"
			waitrt?
			waitcastrt?
			raise_anchor
			fput "turn wheel ship"
			waitrt?
			captains_quarters
			unpause_script "osacommander"
		end
	when /The sound of ropes coming free of the rigging/
		if (UserVars.osacrew["piratehunter"])
			pause_script "osacommander"
			waitrt?
			fput "yell The Sails Have Furled, Let Go the Halyard, Sheets, and Braces!"
			waitrt?
			waitcastrt?
			main_deck
			if UserVars.osacrew["ship_type"] == "sloop" 
				one_mast
			elsif (UserVars.osacrew["ship_type"] == "brigantine" or UserVars.osacrew["ship_type"] == "carrack" or UserVars.osacrew["ship_type"] == "galleon" or UserVars.osacrew["ship_type"] == "frigate")
				two_masts
			elsif UserVars.osacrew["ship_type"] == "man o' war"
				three_masts
			end
			fput "turn wheel ship"
			waitrt?
			captains_quarters
			unpause_script "osacommander"
		end
	when /The (.*) suddenly drifts from its course as the/
		if (UserVars.osacrew["piratehunter"])
			echo "The Ship Has Gone Off Course"
			pause_script "osacommander"
			waitrt?
			helm
			waitcastrt?
			crew_det_drift
			echo "Corrective Course Determined"
			crew_fix_wheel
			fput "turn wheel ship"
			waitrt?
			captains_quarters
			unpause_script "osacommander"
		end
	when /A distant thudding of the drums of war acts as a harbinger for (.*) ripping|As the water falls\,\ (.*) materializes next to your ship!|(.*)carves through the ocean toward your (.*)/
			if (checkname == UserVars.osacrew["commander"]) and UserVars.osacrew["piratehunter"]
				wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
				start_script("osacommander", ['start'])
			end
	when /A sudden booming of cannon fire erupts from the enemy/
			if (checkname == UserVars.osacrew["commander"]) and ((!UserVars.osacrew["boarding"]) and UserVars.osacrew["piratehunter"])
				wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
				start_script("osacommander", ['start'])
			end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Thirty second warning, drop what yer doing and prepare for battle. Here they come!"/
		@thirty = true
	when /The sides of the (.*) collide against your (.*)/
		@boarded = true
	when /#{UserVars.osacrew["commander"]}(.*) exclaims, "Send them to the bottom boys!"/
		Lich::Util.quiet_command("target random", /(Could not find a valid target\.|You are now targeting (.*)\.)/, end_pattern = /(Could not find a valid target\.|You are now targeting (.*)\.)/, include_end = false ,timeout = 0.2, silent = true)
	when /^\[Private\]-GSIV:(.*)\: \"Captain\, I\'ve Been Injured and Will Return Shortly\"/
		if checkname == UserVars.osacrew["commander"] 
			if running? "osacombat"
				pause_script "osacombat"
			end
			if running? "osacombat"
				pause_script "osacommander"
			end
			@crew_being_healed = $1
			LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_being_healed }, "Ok Crewman, We Are At #{Room.current.id} And Will Await Your Arrival")
			wait_until {checkpcs.include?(@crew_being_healed)}
			fput "hold #{@crew_being_healed}"
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"(.*) Is Now Moored In (.*) Room Number: (.*) \[(.*)./
		if !UserVars.osacrew["gangplank"].nil? 
			Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
		end
		crew_clear_gangplank
		UserVars.osacrew["gangplank"] = $3
		Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
		crew_map_gangplank
	when /^\[Private\]-GSIV:Peggyanne\: \"Update Yo Shit!"/
		if (checkname != "Bait") and (checkname != "Subeta") and (checkname != "Ithloria") and (checkname != "Carolanne") and (checkname != "Polyanne")
			start_script("repository", ["download", "osacrew"])
			wait_while { running?("repository") }
			pause 1
			start_script("repository", ["download", "osacombat"])
			wait_while { running?("repository") }
			pause 1
			start_script("repository", ["download", "osacommander"])
			wait_while { running?("repository") }
			pause 1
			LNet.send_message(attr = { 'type' => 'private', 'to' => 'peggyanne' }, "Update Complete!")
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Update!\"/
		if (checkname != "Bait") and (checkname != "Subeta") and (checkname != "Ithloria") and (checkname != "Carolanne") and (checkname != "Polyanne")
			start_script("repository", ["download", "osacrew"])
			wait_while { running?("repository") }
			pause 1
			start_script("repository", ["download", "osacombat"])
			wait_while { running?("repository") }
			pause 1
			start_script("repository", ["download", "osacommander"])
			wait_while { running?("repository") }
			pause 1
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Update Complete!")
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Silvers\"/
		crew_give_coins
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Crew, Sell Your Loot!\"/
		if UserVars.osacrew["lootsell"]
			crew_sell_loot
		else
			crew_task_complete
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"At Ease, Crew!\"/
		wait_until { percentmind < 100 }
		crew_task_complete
	when /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Your Services Are Requested At (.*) Crewman"/
		start_script("go2", [$1])
		wait_while { running?("go2") }
		waitfor /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"That's All Of Them!"/
		start_script("tpick", ["ground"])
		wait_while { running?("tpick") }
		pause 5
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "All Set, Captain!")
		captains_quarters
	when /(.*) removes you from (his|her) group./
		if UserVars.osacombat["check_for_group"]
			UserVars.osacrew["everyone_in_my_group"].clear
		end
	when /(.*) (disband|disbands) (his|her|your) group./
		if UserVars.osacombat["check_for_group"]
			if UserVars.osacrew["everyone_in_my_group"].include? $1 or $1 == "You"
				UserVars.osacrew["everyone_in_my_group"].clear
			end
		end
	when /(You join (.*).|(.*) gently takes hold of your hand.)/
		if UserVars.osacombat["check_for_group"]
			determine_group_members
		end
	when /(.*) (remove|removes) (.*) from the group./
		if UserVars.osacombat["check_for_group"]
			UserVars.osacrew["everyone_in_my_group"].delete($3)
		end
		UserVars.osacrew["everyone_in_my_group"] = UserVars.osacrew["everyone_in_my_group"].uniq
	when /(.*) gently (take|takes) hold of (.*)'s hand./
		if UserVars.osacombat["check_for_group"]
			if UserVars.osacrew["everyone_in_my_group"].include? $1 or $1 == "You"
				UserVars.osacrew["everyone_in_my_group"].push($3)
			end
		end
		UserVars.osacrew["everyone_in_my_group"] = UserVars.osacrew["everyone_in_my_group"].uniq
	when /(.*) joins your group./
		if UserVars.osacombat["check_for_group"]
			UserVars.osacrew["everyone_in_my_group"].push($1)
		end
		UserVars.osacrew["everyone_in_my_group"] = UserVars.osacrew["everyone_in_my_group"].uniq
	when /You are leading (.*)./
		grouped = $1.to_s.scan(/[A-Z]\w*/).flatten.uniq
		UserVars.osacrew["everyone_in_my_group"].clear
		grouped.each{|member| UserVars.osacrew["everyone_in_my_group"].push(member) if !UserVars.osacrew["everyone_in_my_group"].include? (member) }
	when /You are grouped with (.*)./
		grouped = $1.to_s.scan(/[A-Z]\w*/).flatten.uniq
		UserVars.osacrew["everyone_in_my_group"].clear
		grouped.each{|member| UserVars.osacrew["everyone_in_my_group"].push(member) if !UserVars.osacrew["everyone_in_my_group"].include? (member) }
	when /^Something stirs in the shadows./
		if UserVars.osacombat["stealth_disabler"] != 0
			stealth_disabler_routine
			fput "target random"
		end
	when /^\[(#{UserVars.osacrew["commander"]}|Private)\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Command: (.*)/
		$command = $2
		if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne") or (checkname == "Polyanne")
			do_client $command
		end
	when /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Spell Up Completed"/
		if Feat.known?("Kroderine Soul")
			pause 0.5
			fput "join #{UserVars.osacrew["commander"]}"
		end
	end
end