=begin
    author: Lucullan
    date: 10/12/2024

    This script will run the EG arena, rest when it hits above 100% mind, and wait until you are ready
    to fight again. Unless you're at or above 99% mind it will ALWAYS make the first run regardless.
    After that it will rest at the arena node until you hit your mind threshold, and minimum
    stamina/mana thresholds.

    It doesn't do any selling. That's on you.

    Step 1:  Make sure your variables are configured.
      Run the script with the 'setup' argument to configure your settings.

      ;ebon_arena setup - runs the settings GUI
      ;ebon_arena help - shows this message

      If you do anything special to ready your weapons, modify the ready_weapons method.
      Uses 'gird' by default.
      If you do anything special to store your weapons, modify the store_weapons method.
      Uses 'store all' by default.

      # Modify out with what you do to ready and stow your weapons if you need to
      def ready_weapons
         fput "gird"
      end

      def store_weapons
        fput "store all"
      end

      Here are a list of the settings available to you:
       min_stamina_percent:        Scale is 1-100. The minimum percentage of stamina you should have before running the arena. Default is 20.
       min_mana_percent:           Scale is 1-100. The minimum percentage of mana you should have before running the arena. Default is 20.
       max_encumbrance_percent:    Scale is 1-100. The maximum percentage of encumbrance you should have before running the arena. Default is 20.
                                   Important: Script will exit when encumbered since waiting will not solve this problem.
       mind_threshold:             Scale is 0-1. The percentage of mind you should have before resting. Default is 0.75.
       cube_sack:                  The name of the sack you keep your cube in. Default is 'cloak'.
       loot_sack:                  The name of the sack you keep your loot in. Default is 'bag'.
       should_use_boost_long:      true or false. Whether or not to use boost long when your mind is above 60%. Default is false.
       use_bigshot_quick:          true or false. Whether or not to use bigshot quick for hunting logic. Default is true.
       attack_script_name:         The name of the attack script you want to use if not using bigshot.
                                   Default is 'lucattack'... you know... because Lucullan
                                   Otherwise it just loops fput "attack" until the bad guy is dead.
       should_pause_before_run:    true or false. Whether or not to pause before each run of the arena. Default is false.


      Uses ;BIGSHOT QUICK for hunting logic. So make sure your bigshot is setup correctly.
      This can be disabled by setting use_bigshot_quick to false in the config.
      If you do this then you'll have to hunt manually.
      Bigshot settings suggestions:
        Hunting Tab:
                  valid targets = (?:.*)
                  quickhunt targets = (?:.*)
                  active hunting scripts = signore, isigns, etc.
                  society abilities/spells/cmans = etc.
        Looting is not necessary with the arena aside from the occassional "loot room" to get anything dropped
        Bigshot DOES use the loot script field by default, input something like = eloot/sloot.
        You don't need it for this script, though and it can slow things down.

      Commands Tab:
                 Fill these boxes with how you want it to attack
                     hunting commands(a): = 917 target(m17), attack target(x20), etc.
                     ** quick hunting commands: 917 target(m17), attack target(x20), etc.
                 Set everything else up with how you want it.

      Start the script with your combat gear in your hands, or with empty hands and it will use GIRD.

    Step 2: Go to EG
    Step 3: Run the script
    Step 4: Profit.. well.. charge your necrotic ring anyway.

=end
def message(type = "info", text)
  # color options - set type to use
  # yellow, orange, teal, green, plain

  return if type == "debug"

  if text.class == Hash
    text = text.inspect.gsub("#<", "#")
  elsif text.class == Array
    text = text.to_s
  elsif text.class == String
    text = text.gsub("#<", "#")
  end

  Lich::Messaging.msg(type, text)
end

require 'yaml'

module ConfigManager
  def self.load_config(config_name, defaults = {})
    data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
    config_file_path = "#{data_dir}#{config_name}.yaml"

    config_data = if File.exist?(config_file_path)
                    YAML.load_file(config_file_path) || {}
                  elsif UserVars.respond_to?(config_name)
                    UserVars.send(config_name) || {}
                  else
                    {}
                  end

    config_data = defaults.merge(config_data)
    config_data
  end

  def self.save_config(config_name, data)
    data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
    config_file_path = "#{data_dir}#{config_name}.yaml"
    Dir.mkdir(data_dir) unless Dir.exist?(data_dir)

    begin
      File.open(config_file_path, "w") { |file| file.write(data.to_yaml) }
      echo("Preferences successfully saved to #{config_file_path}.")
    rescue StandardError => e
      echo("Failed to save preferences: #{e.message}")
    end
  end
end

require 'gtk3'

module ConfigGUI
  def self.run(config_name, defaults = {}, display_params = {})
    config = ConfigManager.load_config(config_name, defaults)
    window = nil
    window_closed = false

    begin
      Gtk.queue {
        # Create a window
        window = Gtk::Window.new("Configure #{config_name}")
        window.set_default_size(400, 300)

        # Create a main container
        vbox = Gtk::Box.new(:vertical, 10)
        window.add(vbox)

        # Create a hash to store the entries
        entries = {}

        # Create entry fields for each config item
        config.each do |key, value|
          hbox = Gtk::Box.new(:horizontal, 10)

          label = Gtk::Label.new(format_key(key.to_s))
          datatype = display_params.dig(key, :datatype) || :text
          tooltip = display_params.dig(key, :tooltip) || ""

          widget = case datatype
                   when :boolean
                     checkbox = Gtk::CheckButton.new
                     checkbox.active = value
                     checkbox
                   when :dropdown
                     Gtk::ComboBoxText.new.tap do |combo|
                       (display_params.dig(key, :options) || []).each { |opt| combo.append_text(opt) }
                       combo.active = (display_params.dig(key, :options) || []).index(value) || 0
                     end
                   else
                     entry = Gtk::Entry.new
                     entry.text = value.to_s
                     entry
                   end

          widget.tooltip_text = tooltip if tooltip
          entries[key] = widget

          hbox.pack_start(label, expand: false, fill: false, padding: 5)
          hbox.pack_start(widget, expand: true, fill: true, padding: 5)

          vbox.pack_start(hbox, expand: false, fill: false, padding: 5)
        end

        # Add a save button
        save_button = Gtk::Button.new(label: "Save")
        save_button.signal_connect("clicked") do
          # Save the changes back to config
          entries.each do |key, widget|
            value = case widget
                    when Gtk::CheckButton
                      widget.active?
                    when Gtk::ComboBoxText
                      widget.active_text
                    else
                      parse_entry_value(widget.text)
                    end
            config[key] = value
          end
          ConfigManager.save_config(config_name, config)
          window.destroy
          window_closed = true
        end

        # Add a close event that does NOT save
        window.signal_connect("destroy") do
          window_closed = true
        end

        # Add the button to the layout
        vbox.pack_start(save_button, expand: false, fill: false, padding: 5)

        # Show the window
        window.show_all
      }

      # Wait until the window is closed
      wait_while { !window_closed }
    rescue StandardError => e
      echo("An error occurred: #{e.message}")
      puts e.backtrace # Optional: Print the stack trace for debugging
      exit(1)
    end
  end

  # Format key to Title Case for display
  def self.format_key(key)
    key.split('_').map(&:capitalize).join(' ')
  end

  # Parse entry value to appropriate type
  def self.parse_entry_value(value)
    if value =~ /^\d+$/
      value.to_i
    elsif value =~ /^\.?\d+$/ || value =~ /^\d+\.\d+$/
      value.start_with?('.') ? "0#{value}".to_f : value.to_f
    elsif value =~ /^true$/i || value =~ /^false$/i
      value.downcase == 'true'
    else
      value
    end
  end
end


class ExperienceMonitor
  def initialize
    @last_checked = nil
    @cached_exp = [0, 0]
  end

  def get_exp(force = false)
    # if @last_checked && (Time.now - @last_checked) < 15 && !force
    #   return @cached_exp
    # end

    res = Lich::Util.quiet_command_xml("exp", /<output class="mono"\/>/, /<prompt time=/)
    if res.any? { |line| line =~ /Field Exp: ([\d,]+)\/([\d,]+)/i }
      field_current = $1.delete(',').to_i
      field_max = $2.delete(',').to_i
      @cached_exp = [field_current, field_max]
      @last_checked = Time.now
    end
    return @cached_exp
  end

  def get_true_percentage(force = false)
    field_current, field_max = get_exp(force)
    return field_current.to_f / field_max.to_f
  end

  def get_percentage_display
    field_current, field_max = get_exp
    return "%.2f%%" % ((field_current.to_f / field_max.to_f) * 100)
  end
end


defaults = {
  min_stamina_percent: 20,
  min_mana_percent: 20,
  max_encumbrance_percent: 20,
  mind_threshold: 0.75,
  cube_sack: 'cloak',
  loot_sack: 'bag',
  should_use_boost_long: false,
  use_bigshot_quick: true,
  attack_script_name: 'lucattack',
  should_pause_before_run: false,
  should_run_continuously: false,
}

container_nouns = []
GameObj.containers.keys.each { |container_id|
  container_nouns.push(GameObj[container_id].noun)
}

display_params = {
  min_stamina_percent: { datatype: :text, tooltip: "Scale 1-100. Minimum stamina percentage before starting a fight." },
  min_mana_percent: { datatype: :text, tooltip: "Scale 1-100. Minimum mana percentage before starting a fight." },
  max_encumbrance_percent: { datatype: :text, tooltip: "Scale 1-100. Maximum percentage encumbrance before starting a fight." },
  mind_threshold: { datatype: :text, tooltip: "Scale 0-1. Percentage of mind before resting." },
  cube_sack: { datatype: :text, tooltip: "Container for cube." },
  loot_sack: { datatype: :text, tooltip: "Container for loot." },
  should_use_boost_long: { datatype: :boolean, tooltip: "Use boost long when mind is high." },
  use_bigshot_quick: { datatype: :boolean, tooltip: "Use Bigshot Quick for hunting logic." },
  attack_script_name: { datatype: :text, tooltip: "Name of the attack script to use if not using Bigshot.\n If blank and use_bigshot_quick is false, then it just loops fput \"attack\" until the bad guy is dead." },
  should_pause_before_run: { datatype: :boolean, tooltip: "Pause before each arena run." },
  should_run_continuously: { datatype: :boolean, tooltip: "Run the script continuously. Will only do an encumberance check. Note: DO NOT AFK Script in prime!" },
}

# Load configuration data
config = ConfigManager.load_config(:ebon_arena, defaults)

if script.vars[0] == 'setup'
  ConfigGUI.run(:ebon_arena, defaults, display_params)
  config = ConfigManager.load_config(:ebon_arena, defaults)
  message "Configuration has been saved!"
  exit
elsif script.vars[0] == 'help'
  puts <<~HEREDOC
    author: Lucullan
    date: 10/12/2024

    This script will run the EG arena, rest when it hits above 100% mind, and wait until you are ready 
    to fight again. Unless you're at or above 99% mind it will ALWAYS make the first run regardless. 
    After that it will rest at the arena node until you hit your mind threshold, and minimum 
    stamina/mana thresholds.

    It doesn't do any selling. That's on you.

    Step 1:  Make sure your variables are configured.
      Run the script with the 'setup' argument to configure your settings.
      
      ;ebon_arena setup - runs the settings GUI
      ;ebon_arena help - shows this message

      If you do anything special to ready your weapons, modify the ready_weapons method.
      Uses 'gird' by default. 
      If you do anything special to store your weapons, modify the store_weapons method.
      Uses 'store all' by default.

      # Modify out with what you do to ready and stow your weapons if you need to
      def ready_weapons
         fput "gird"
      end

      def store_weapons
        fput "store all"
      end

      Here are a list of the settings available to you:
       min_stamina_percent:        Scale is 1-100. The minimum percentage of stamina you should have before running the arena. Default is 20.
       min_mana_percent:           Scale is 1-100. The minimum percentage of mana you should have before running the arena. Default is 20.
       max_encumbrance_percent:    Scale is 1-100. The maximum percentage of encumbrance you should have before running the arena. Default is 20.
                                   Important: Script will exit when encumbered since waiting will not solve this problem.
       mind_threshold:             Scale is 0-1. The percentage of mind you should have before resting. Default is 0.75. 
       cube_sack:                  The name of the sack you keep your cube in. Default is 'cloak'.
       loot_sack:                  The name of the sack you keep your loot in. Default is 'bag'.
       should_use_boost_long:      true or false. Whether or not to use boost long when your mind is above 60%. Default is false.
       use_bigshot_quick:          true or false. Whether or not to use bigshot quick for hunting logic. Default is true.
       attack_script_name:         The name of the attack script you want to use if not using bigshot. 
                                   Default is 'lucattack'... you know... because Lucullan
                                   Otherwise it just loops fput "attack" until the bad guy is dead.
       should_pause_before_run:    true or false. Whether or not to pause before each run of the arena. Default is false.


      Uses ;BIGSHOT QUICK for hunting logic. So make sure your bigshot is setup correctly.
      This can be disabled by setting use_bigshot_quick to false in the config.
      If you do this then you'll have to hunt manually.
      Bigshot settings suggestions:
        Hunting Tab:
                  valid targets = (?:.*)
                  quickhunt targets = (?:.*)
                  active hunting scripts = signore, isigns, etc.
                  society abilities/spells/cmans = etc.
        Looting is not necessary with the arena aside from the occassional "loot room" to get anything dropped
        Bigshot DOES use the loot script field by default, input something like = eloot/sloot. 
        You don't need it for this script, though, and it can slow things down so I recommend leaving it blank.

      Commands Tab:
                 Fill these boxes with how you want it to attack
                     hunting commands(a): = 917 target(m17), attack target(x20), etc.
                     ** quick hunting commands: 917 target(m17), attack target(x20), etc.
                 Set everything else up with how you want it.

      Start the script with your combat gear in your hands, or with empty hands and it will use GIRD.

    Step 2: Go to EG
    Step 3: Run the script
    Step 4: Profit.. well.. charge your necrotic ring anyway.

  HEREDOC
  exit
end

# Usage in the script
min_stamina_percent = config[:min_stamina_percent]
min_mana_percent = config[:min_mana_percent]
mind_threshold = config[:mind_threshold]
cube_sack = config[:cube_sack]
loot_sack = config[:loot_sack]
should_use_boost_long = config[:should_use_boost_long]
use_bigshot_quick = config[:use_bigshot_quick]
attack_script_name = config[:attack_script_name]
should_pause_before_run = config[:should_pause_before_run]
should_run_continuously = config[:should_run_continuously]



# Fill these out with what you do to ready and stow your weapons
def ready_weapons
  fput "gird"
end

def store_weapons
  fput "store all"
  fput "stow all"
end


# echo "Config settings loaded: #{config.inspect}"
message "Welcome to the Ebon Gate Arena script!"
message "Please make sure you have your combat gear ready to go!"
message "IMPORTANT: "
message "Run ;ebon_arena setup to configure your settings."
message "Run ;ebon_arena help for more information."
message "This script will run the arena until fried, then rest until you hit your mind threshold, or stamina/mana thresholds."
message "It will then run the arena again."
message "unpause to continue"
pause_script

def check_encumbrance(max_encumbrance_percent = 20)
  if percentencumbrance >= max_encumbrance_percent
    respond "You're carrying too much stuff, lighten up!"
    respond "You're carrying too much stuff, lighten up!"
    respond "You're carrying too much stuff, lighten up!"
    respond "You're carrying too much stuff, lighten up!"
    respond "You're carrying too much stuff, lighten up!"
    Script.kill('ebon_arena')
  end
end

def check_ready(min_stamina_percent, min_mana_percent, max_encumbrance_percent = 20)
  check_encumbrance(max_encumbrance_percent)
  if percentmana < min_mana_percent
    message("Low mana. Waiting a pulse")
    return false
  end
  if percentstamina < min_stamina_percent
    message("Low stamina. Waiting a pulse")
    return false
  end
  return true
end

#need to account for exp better
# need to add a flag for if it is possible to use a vine or hide in the room
exp_mon = ExperienceMonitor.new

def i_win
  message("#################")
  message("All done! You win!")
  message("#################")
  false
end

store_weapons
iterations = 1
while true
  if config[:should_run_continuously] == true
    message("Running continuously. DO NOT AFK SCRIPT IN PRIME!")
    check_encumbrance(config[:max_encumbrance_percent])
  elsif exp_mon.get_true_percentage(true) > 0.95 || !check_ready(config[:min_stamina_percent], config[:min_mana_percent], config[:max_encumbrance_percent])
    if config[:should_use_boost_long] && exp_mon.get_true_percentage > 0.6
      fput "boost long"
    end
    message("Not ready to go yet. Gonna rest a few beats")
    message("Current mind is #{exp_mon.get_percentage_display}")
    message("Mind threshold is #{config[:mind_threshold]}")
    message("Mana percentage threshold is #{config[:min_mana_percent]}")
    message("Stamina percentage threshold is #{config[:min_stamina_percent]}")
    pause '30s'
    # log the following logic check
    echo "Is mind below threashold? " + (exp_mon.get_true_percentage <= config[:mind_threshold]).to_s
    echo "Are we ready to fight? " + (check_ready(config[:min_stamina_percent], config[:min_mana_percent], config[:max_encumbrance_percent])).to_s
    until exp_mon.get_true_percentage <= config[:mind_threshold] && check_ready(config[:min_stamina_percent], config[:min_mana_percent], config[:max_encumbrance_percent])
      message("STILL RESTING")
      message("Current mind is #{exp_mon.get_percentage_display}")
      message("Mind threshold is #{config[:mind_threshold]}")
      message("Mana percentage threshold is #{config[:min_mana_percent]}")
      message("Stamina percentage threshold is #{config[:min_stamina_percent]}")
      pause '30s'
    end
  end

  Script.run('go2', '28549')
  message('Pausing 4 seconds for dramatic effect...')
  message('Starting arena run number ' + iterations.to_s)
  message("BUM BUM BUM!")
  pause '4s'
  if config[:should_pause_before_run]
    message("Pausing before execution")
    message("Unpause to continue")
    pause_script
  end
  cube_sack = config[:cube_sack]
  loot_sack = config[:loot_sack]
  fput "get my stone cube"
  have_cube = waitfor /You remove/,/You reach/,/You discreetly remove/,/You retrieve/,/You grab/, "Get what?"
  if have_cube == "Get what?"
    # fput "open my " + cube_sack
    fput "get my cube from my " + cube_sack
    have_cube_yet = waitfor /You grab an enruned stone cube /, "Get what?", /You remove an enruned/
    if have_cube_yet == "Get what?"
      puts "You don't have a cube!"
      puts "Go get you a cube, brutha!"
      exit
    end
  end

  fput "pay"
  fput "look at my cube"
  fput "open my " + cube_sack
  fput "put my cube in my " + cube_sack
  # fput "close my " + cube_sack
  ready_weapons
  waitfor "A sinister voice announces,"
  fput "beg"

  #Get the loot sack ready in case there is mid-fight loot
  fput "open my " + loot_sack


  still_fighting = true

  while still_fighting

    line = get
    # message("Line: #{line}")
    case line
    when /A sinister voice announces, "Send in/
      unless GameObj.targets.empty?
        if config[:use_bigshot_quick]
          unless Script.running?('bigshot')
            Script.start('bigshot', 'quick')
          end
        elsif !config[:attack_script_name].empty? && !config[:use_bigshot_quick]
          unless Script.running?(config[:attack_script_name])
            Script.start(config[:attack_script_name])
          end
        elsif config[:attack_script_name].empty? && !config[:use_bigshot_quick]
          until GameObj.targets.empty?
            fput "attack"
            waitrt?
          end
        end
      end
    when /is triumphant/, /Necrotic energy is absorbed/, /Skeletal hands clatter /
      i_win
      still_fighting = false
    when / vanquished the opponent!"/
      message('dead guy')
      waitrt?
      fput "loot room"
    when /A lithe dark-skinned abyran'ra escorts you from the cursed pit./
      i_win
      still_fighting = false
      store_weapons
      message("Ruh roh! Missed the end of the fight!")
      message("You'll need to make sure you got your heart!")
      message("Pausing the script. Get your gear sorted out and then unpause.")
    else
      # message("I think we won? Or the script is has a timing issue.")
      # message("Checking if bad guys are here. This is just a fail safe...")
      unless GameObj.targets.empty?
        if config[:use_bigshot_quick]
          unless Script.running?('bigshot')
            Script.start('bigshot', 'quick')
          end
        elsif !config[:attack_script_name].empty? && !config[:use_bigshot_quick]
          unless Script.running?(config[:attack_script_name])
            Script.start(config[:attack_script_name])
          end
        elsif config[:attack_script_name].empty? && !config[:use_bigshot_quick]
          until GameObj.targets.empty?
            fput "attack"
            waitrt?
          end
        end
      end
    end
  end

  store_weapons
  iterations += 1
  thing = matchfind "and regurgitates ? into your right hand."
  puts "the thing is: " + thing.to_s
  fput "glance"
  is_silvers_prize = false
  if GameObj.right_hand.noun == "heart"
    fput "break my heart"
    item = matchfind "Glancing around, you notice ? the ground"
    # put item.to_s
    # if item contains "silvers scattered" then fput "get silvers"
    if item == "some silver coins scattered across"
      is_silvers_prize = true
      fput "get coins"
    end
  end
  unless is_silvers_prize
    fput "put my #{GameObj.right_hand.noun} in my " + loot_sack
  end
  # fput "close my " + loot_sack
end