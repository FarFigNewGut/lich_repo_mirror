# This helps you obtain the 25 common and uncommon Spirit Beasts you need before you can capture a legendary. It runs a 15-minute timer. When the timer expires, it tries to capture a spirit beast in your room. If you're in town, it tells you to go outside. When it uses BEAST SENSE, it compares the beasts to the ones you already have and tries to capture a new one. It can be used to sense legendary beasts, but the functionality to capture them is currently broken.  Be careful when using it in combat because it'll throw you into a long roundtime. 

module Tatterbeast
  @next_sense_time = Time.now
  @start_time = Time.now
  @common_beasts = []
  @uncommon_beasts = []
  @legendary_beasts = []
  @beasts_captured = 0

  def self.start
    check_beasts_captured
    check_bound_beasts_initially
    loop do
      if Time.now >= @next_sense_time
        sense_beast
      end

      check_for_manual_sense
      sleep 1
    end
  end

  def self.sense_beast
    fput 'beast sense'
    waitrt?
    @next_sense_time = Time.now + 15 # check every 15 seconds to avoid spamming
    @start_time = Time.now
  end

  def self.check_for_manual_sense
    line = get_line
    if line =~ /You detect the presence of/
      beasts = line.scan(/(?:common|uncommon|legendary) ([\w\s]+) spirit/)
      beasts.flatten!
      check_bound_beasts(beasts, line)
    elsif line =~ /The surroundings feel too civilized to hold any spiritual energy\./
      respond "You'll need to travel outside of town and try again."
    elsif line =~ /attempting to align yourself with the spirits floes within the area, but cannot quite manage to attune yourself to the spirits here\./
      roundtime = line[/Roundtime: (\d+) sec\./, 1].to_i
      wait_for_roundtime(roundtime)
      sense_beast
    elsif line =~ /Your senses are dulled by your recent brush with the spirit world.  You will need to wait another (\d+) minutes? and (\d+) seconds? before your senses have recovered\./
      minutes = line[/(\d+) minutes?/, 1].to_i
      seconds = line[/(\d+) seconds?/, 1].to_i
      total_wait_time = (minutes * 60) + seconds
      respond "Waiting #{total_wait_time} seconds before retrying."
      sleep total_wait_time
      sense_beast
    elsif line =~ /You detect the presence of a tremendously powerful legendary spirit:/
      legendary_beast = line.scan(/legendary spirit: the ([\w\s]+)!/)
      legendary_beast.flatten!
      attune_and_capture_legendary(legendary_beast.first)
    end
  end

  def self.check_beasts_captured
    fput 'beast status'
    while line = get_line
      if line =~ /Beasts Captured:\s+(\d+)/
        @beasts_captured = $1.to_i
        break
      end
    end
  end

  def self.check_bound_beasts_initially
    @common_beasts = get_bound_beasts('common')
    @uncommon_beasts = get_bound_beasts('uncommon')
    @legendary_beasts = get_bound_beasts('legendary')
  end

  def self.check_bound_beasts(detected_beasts, line)
    detected_beasts_with_rarity = line.scan(/(?:common|uncommon|legendary) ([\w\s]+) spirit/)
    detected_beasts_with_rarity.flatten!

    beasts_to_attune = detected_beasts_with_rarity.reject do |beast|
      @common_beasts.include?(beast.downcase) || @uncommon_beasts.include?(beast.downcase) || @legendary_beasts.include?(beast.downcase)
    end

    if beasts_to_attune.empty?
      sense_beast
      return
    end

    attune_beasts(beasts_to_attune)
  end

  def self.get_bound_beasts(rarity)
    fput "beast list #{rarity}"
    bound_beasts = []
    while line = get_line
      break if line =~ /You have bound a total of/ || line =~ /You have bound no/
      if line =~ /You have bound the following #{rarity.capitalize} Spirit Beasts:/
        next
      else
        bound_beasts += line.split(',').map(&:strip).map(&:downcase)
      end
    end
    bound_beasts
  end

  def self.attune_beasts(beasts)
    beasts.each do |beast|
      fput "beast attune #{beast}"
      line = waitfor(/You have already captured a #{beast} spirit|You tighten your grip on your|You haven't detected that type of Spirit Beast here|Roundtime: \d+ sec\./)
      if line =~ /You haven't detected that type of Spirit Beast here/
        sleep 1
        fput "beast attune #{beast}"
      elsif line =~ /You have already captured a #{beast} spirit and will need to release it before bonding another\./
        sense_beast
        return
      elsif line =~ /attuning yourself to the presence of the #{beast} spirit lingering in the area\.  You sense its trepidation at the possibility of being captured!/
        roundtime = line[/Roundtime: (\d+) sec\./, 1].to_i
        wait_for_roundtime(roundtime)
        capture_beast
        return
      end
    end
    sense_beast if @beasts_captured < 25 && Time.now - @start_time <= 60
    respond "No attunable spirits detected within 60 seconds. Please move to another room." if @beasts_captured < 25
  end

  def self.attune_and_capture_legendary(legendary_beast)
    fput "beast attune #{legendary_beast}"
    line = waitfor(/You have already captured a #{legendary_beast} spirit|You tighten your grip on your|You haven't detected that type of Spirit Beast here|Roundtime: \d+ sec\./)
    if line =~ /You haven't detected that type of Spirit Beast here/
      sleep 1
      fput "beast attune #{legendary_beast}"
    elsif line =~ /You tighten your grip on your silver talisman, attuning yourself to the presence of the #{legendary_beast} spirit lingering in the area\.  You sense its trepidation at the possibility of being captured!/
      roundtime = line[/Roundtime: (\d+) sec\./, 1].to_i
      wait_for_roundtime(roundtime)
      capture_beast
    end
  end

  def self.capture_beast
    fput 'beast capture'
    line = waitfor(/You have already captured a .+ spirit and will need to release it before bonding another\.|You hold out your silver talisman and extend your thoughts to encompass the .+ spirit lingering in the area\./)
    if line =~ /You have already captured a .+ spirit and will need to release it before bonding another\./
      sense_beast
    elsif line =~ /and extend your thoughts to encompass the .+ spirit lingering in the area\./
      respond "Success! ;tatterbeast.lic will now pause for 15 minutes, then attempt to beast sense again."
      sleep 900 # Pause for 15 minutes
      sense_beast
    end
  end

  def self.wait_for_roundtime(seconds)
    sleep seconds
  end

  def self.respond(message)
    puts "[tatterbeast: #{message}]"
  end

  def self.get_line
    while true
      line = waitfor(/^.+$/)
      return line unless line.strip.empty?
    end
  end
end

Tatterbeast.start
