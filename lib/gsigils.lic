
# Like the script?  Consider donating via paypal cheffinainteasy9@gmail.com or silver to Glaves

=begin
# 
# author: Glaves
# version: 4.0
# 
# tags: sigils, gos, isigils, power, determination, sunfist, gtk2, gtk3
#
# 
# 
#
# Reworked again by Glaves
# Added adrenaline surge muscle unpopping
# Added Sigil of Power if under 75% Mana 
# Added Sigil of Health if under 70% Health 
# Added wound eval for unable to cast or loot for determination
# Fixed popping muscles using Sigil of Power (hopefully)
# Added wait command if in Maaghara labyrinth tunnel
# Added a check for popped muscles to sleep the script
# Fixed the script stalling out and not restarting after popped muscles
# Added using andrenaline surge if you are an empath if you are under 20% stamina
# Added unpoping of muscles if you're an empath
# Added support for both GTK2 and GTK3
#
#
# The check for Below X Health and Below X Mana must be manually changed within the loop on lines 159 and 164
#
# 
#
# ~Glaves
=end

	settings = CharSettings.to_hash
	GTK2_Active = (Gtk::Version::STRING.chr == '2')
	GTK3_Active = (Gtk::Version::STRING.chr == '3')

if script.vars.empty?
	target_list = [ Char.name ]
elsif script.vars[1].downcase == 'help'													
	respond
	respond 'Usage:'
	respond "   #{$clean_lich_char}#{script.name} help                     show this message"
	respond "   #{$clean_lich_char}#{script.name} setup                    show setup window"
	respond
	exit
elsif script.vars[1] =~ /^setup$|^options$/i												
	window = window_action = nil
	
	Gtk.queue {															
		gtk_checks = Hash.new 													
		
		saveButton = Gtk::Button.new("_Save and Close") if GTK2_Active
		saveButton = Gtk::Button.new(:label => "_Save and Close") if GTK3_Active
	
		window = Gtk::Window.new(:toplevel)
		window.set_title  "Gsigils"				
		window.border_width = 20												

		vbox = Gtk::VBox.new(false, 0) if GTK2_Active
		vbox = Gtk::Box.new(:vertical, 0) if GTK3_Active
		
		contact_check = Gtk::CheckButton.new("Sigil of Contact: Activates ESP Net")						
		contact_check.active = settings['9703']
		gtk_checks['9703'] = contact_check 											
	
		resolve_check = Gtk::CheckButton.new("Sigil of Resolve: Climbing, Swimming, and Survival")
		resolve_check.active = settings['9704'] 
		gtk_checks['9704'] = resolve_check 											
		
		minbane_check = Gtk::CheckButton.new("Sigil of Minor Bane: HDW and +5 AS")
		minbane_check.active = settings['9705'] 
		gtk_checks['9705'] = minbane_check 											
		
		defense_check = Gtk::CheckButton.new("Sigil of Defense: +1 DS per rank - 5 minutes")
		defense_check.active = settings['9707'] 
		gtk_checks['9707'] = defense_check 											
		
		offense_check = Gtk::CheckButton.new("Sigil of Offense: +1 AS per rank - 5 minutes")
		offense_check.active = settings['9708'] 
		gtk_checks['9708'] = offense_check 											
		
		minprot_check = Gtk::CheckButton.new("Sigil of Minor Protection: +5 DS and HDP - 1 minute")
		minprot_check.active = settings['9710'] 
		gtk_checks['9710'] = minprot_check 											
		
		focus_check = Gtk::CheckButton.new("Sigil of Focus: +1 TD per rank - 1 minute")
		focus_check.active = settings['9711'] 
		gtk_checks['9711'] = focus_check 											

		mending_check = Gtk::CheckButton.new("Sigil of Mending: Increases HP recovery by 15, all Herbs eaten in 3 sec - 10 minutes")
		mending_check.active = settings['9713'] 
		gtk_checks['9713'] = mending_check 											
		
		concnetration_check = Gtk::CheckButton.new("Sigil of Concentration: +5 mana regeneration - 10 minutes")
		concnetration_check.active = settings['9714'] 
		gtk_checks['9714'] = concnetration_check 										
		
		majbane_check = Gtk::CheckButton.new("Sigil of Major Bane: Adds +10 AS, HCW (melee/ranged/bolt) - 1 minute")
		majbane_check.active = settings['9715']  
		gtk_checks['9715'] = majbane_check 											
		
		majprot_check = Gtk::CheckButton.new("Sigil of Major Protection: Adds +10 DS, HCP - 1 minute")
		majprot_check.active = settings['9719'] 
		gtk_checks['9719'] = majprot_check 											
		
		majbane_check.signal_connect('toggled') { Gtk.queue { minbane_check.active = false if majbane_check.active? } }		
		minbane_check.signal_connect('toggled') { Gtk.queue { majbane_check.active = false if minbane_check.active? } }		
		
		majprot_check.signal_connect('toggled') { Gtk.queue { minprot_check.active = false if majprot_check.active? } }
		minprot_check.signal_connect('toggled') { Gtk.queue { majprot_check.active = false if minprot_check.active? } }

#		tooltips = Gtk::Tooltips.new												
		contact_check.set_tooltip_text("1 Mana").has_tooltip = true
		resolve_check.set_tooltip_text("5 Stamina").has_tooltip = true
		minbane_check.set_tooltip_text("3 Mana, 2 Stamina").has_tooltip = true
		defense_check.set_tooltip_text("5 Mana, 5 Stamina").has_tooltip = true
		offense_check.set_tooltip_text("5 Mana, 5 Stamina").has_tooltip = true
		minprot_check.set_tooltip_text("5 Mana, 10 Stamina").has_tooltip = true
		focus_check.set_tooltip_text("5 Mana, 5 Stamina").has_tooltip = true
		mending_check.set_tooltip_text("10 Mana, 15 Stamina").has_tooltip = true
		concnetration_check.set_tooltip_text("20 Stamina").has_tooltip = true
		majbane_check.set_tooltip_text("10 Mana, 10 Stamina").has_tooltip = true
		majprot_check.set_tooltip_text("10 Mana, 15 Stamina").has_tooltip = true

		vbox.pack_start(contact_check, :expand => false, :fill => true, :padding => 0)										
		vbox.pack_start(resolve_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(minbane_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(defense_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(offense_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(minprot_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(focus_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(mending_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(concnetration_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(majbane_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(majprot_check, :expand => false, :fill => true, :padding => 0)
		vbox.pack_start(saveButton)												
		
		window.add(vbox)
		saveButton.signal_connect('clicked') {											
			Gtk.queue {
																	
																	
				gtk_checks.each_pair { 
					|number,check| settings[number] = check.active? 
				}
			
				window_action = :save											
			}
		}
			
		window.signal_connect('delete_event') {window_action = :cancel}								
		window.show_all																
		window.resizable = false														
	}

	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }

																	
	Script.self.kill														
end		


def obipower
		if percenthealth < 70 && checkstamina > 30 && Spell[9717].affordable?
			put "Sigil of heal"
			waitrt?
			waitcastrt?
		end
		if percentmana < 75 && checkstamina > 60
			put "Sigil of power"
			waitrt?
			waitcastrt?
		else
			return
		end
	end
	

def check_spells
spells_keep = [1607, 1605, 1601, 1606, 1610, 1611, 1612, 1613, 1616, 1617, 1618]

spells_keep.each { |s| 

if Spell[s].affordable? && !Spell[s].active? && Spell[s].known?
    cast s
	end
	}
end
	
def unpop
if Spell[9699].active? && Spell[1107].known? && Spell[1107].affordable?
waitcrt?
waitcastrt?
Spell[1107].cast
end
end

def adrenaline
if Spell[1107].known? && Spell[1107].affordable? && !Spell[9010].active? && percentstamina <= 20
waitrt?
waitcastrt?
Spell[1107].cast
end
end

spam_rooms = [14660,9828,14661,14662]
  
loop{
	unpop
	exit if checkdead
	wait_while {spam_rooms.include?(Room.current.id)} 
	unpop
	wait while Spell[9699].active? unless Spell[1107].known?
	
	settings.each_pair { |num,active|
    if [Wounds.head, Scars.head, Wounds.leftEye, Scars.leftEye, Wounds.rightEye, Scars.rightEye, Wounds.nsys, Scars.nsys].max > 1 ||  [Wounds.leftArm, Wounds.leftHand, Wounds.rightArm, Wounds.rightHand, Scars.leftArm, Scars.leftHand, Scars.rightArm, Scars.rightHand].max > 2 || [Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max > 0 && [Wounds.rightArm, Wounds.rightHand, Scars.leftArm, Scars.leftHand].max > 0 
      if Spell[9716].affordable? && !Spell[9716].active?
        Spell[9716].cast
        waitrt?
		waitcastrt?
			end
		elsif active and Spell[num].known? and Spell[num].affordable? and not Spell[num].active?
			Spell[num].cast
			waitrt?
			waitcastrt?
		end
		
	}	
	unpop
	#adrenaline
	obipower
	sleep 1
}
