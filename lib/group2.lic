=begin
--------------------------------------------------------------------------------
 Title : Group2
 Date : 05/30/2012
 Author : Oweodry

 Use :
  ;group2 <roomid>

 Details :
  Group friendly movement script. Uses code from step2 and watches for instances
  where members of your group appear to have been left behind. Script will HOLD
  PCs who were in your group once the non-group-friendly area has been crossed. 
  It will also pull them from prone/sitting/kneeling positions, and wait out 
  stuns (some areas can cause this on failed climb checks).

 Notes :
  - Player running this script must be group leader.
  - PCs must be in your group at the time of running the script.
  - PCs in your group should have their group status open.
  - Doesn't support go2 aliases or go2 targets yet.
  - No support or future updates are guranteed
  - My scripts: http://forum.gsplayers.com/showthread.php?73663

 Updates :
  - 05/28/2012 Released
  - 05/30/2012 Scrubbed extra blank lines with the hook.

 Thanks :
  - Tillmen for step2 (large portion copied directly from there)

--------------------------------------------------------------------------------
=end

# Failsafe routines
if mvscript = ["go2","step2","child2","ego2","rescue-sunfist"].find { |scriptname| running?"#{scriptname}" }
	echo "Looks like you're already headed somewhere! (#{mvscript} is running)"
	exit
end

# Failsafe routines from step2
unless script.vars[1] =~ /^[0-9]+$/
	echo "usage: #{$lich_char}#{script.name} <room number>"
	exit
end
unless start_room = Room.current
	echo 'current room was not found in the map database'
	exit
end
unless destination_room = Room[script.vars[1]]
	echo 'destination room was not found in the map database'
	exit
end
if start_room == destination_room
	echo 'start room and destination room are the same'
	exit
end

# Stepping function from step2
def step2(start_room,destination_room)
	unless $step2_path and (s = $step2_path.index(start_room.id)) and (d = $step2_path.index(destination_room.id)) and (s < d)
		previous, shortest_distances = Map.dijkstra(Room.current.id, variable[1].to_i)
		unless previous[destination_room.id]
			echo "error: failed to find a path between your current room (#{start_room.id}) and destination room (#{destination_room.id})"
			exit
		end
		$step2_path = [ destination_room.id ]
		$step2_path.push(previous[$step2_path[-1]]) until previous[$step2_path[-1]].nil?
		$step2_path.reverse!
		previous = shortest_distances = nil
	end
	way = start_room.wayto[$step2_path[$step2_path.index(start_room.id)+1].to_s]
	if way.class == String
		move way
	elsif way.class == Proc
		way.call
	else
		echo 'error in the map database'
		exit
	end
end

# Checks whether entire group list is present or not
def groupstatus
	$grouplist.find_all { |pc| checkpcs.include?(pc) }.size == $grouplist.size
end

$grouplist=[]
def checkgroupline(line)
	line =~ /exist="\-[0-9]+" noun=".*">(.*)<\/a>/i
	if !$1.nil? then $grouplist.push($1); end
end

# Get names of PCs in your group
action = proc { |server_string|
	if checkgroupline(server_string) or server_string =~ /group status is currently|to set your group status|^.$/m then nil
	else server_string
	end
}

echo "Collecting list of group memebers..."
DownstreamHook.add('grouphook',action)
$_SERVER_.puts "group"; pause 1
DownstreamHook.remove('grouphook')

if $grouplist.size == 0
	echo "You don't have a group to lead!"
	exit
end

# Movement loop
fput "whisper ooc group GROUP OPEN while we move, please."
until Room.current.id == destination_room.id
	if !groupstatus
		wait_until { groupstatus }
		GameObj.pcs.each { |pc|
			if $grouplist.include(pc.noun) 
				fput "hold ##{pc.id}"
				if pc.status =~ /prone|kneeling|sitting/i then fput "pull #{pc.id}"
				elsif pc.status =~ /stunned/i then wait_until { pc.status !~ /stunned/i }
				end
			end
		}
	end
	step2(Room.current,destination_room)
end
