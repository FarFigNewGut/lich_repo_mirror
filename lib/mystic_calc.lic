=begin
	Shows all factors contributing to your chance of success for Mystic Tattoos.
	See https://gswiki.play.net/TATTOO_(verb)#Mystic_Tattoos

	author: Greminty
	name: mystic_calc
	tags: mystic, tattoo, monk, calc
	version: 1.0

=end

show_help = proc {
  output =      "***********************************************************************************\n"
  output.concat " #{$lich_char}#{script.name} calculates your percent chance of success for applying a Mystic Tattoo\n\n"
  output.concat " See https://gswiki.play.net/TATTOO_(verb)#Mystic_Tattoos\n\n"
  output.concat "   USAGE:\n\n" 
  output.concat "    #{$lich_char}#{script.name}\n\n"
  output.concat "      Uses your stats and skills to calculate the chance of success for the highest tier possible.\n\n"
  output.concat "***********************************************************************************\n"
  respond output
}

if script.vars[0].strip =~ /^help$/i
  show_help.call
  exit
end

# https://gswiki.play.net/TATTOO_(verb)#Mystic_Tattoos
# Monk Level + 2*DEX bonus + 2*DIS bonus + Physical Fitness ranks*3/4 + First Aid ranks/2 + 2*spell ranks + 
# Arcane Symbols ranks + Mental Mana Control/Spirit Mana Control ranks + Lore skill bonus - 100 * (circle of tattoo)

common_factors = {
'level' => Stats.level,
'DEX Bonus * 2' => Stats.enhanced_dex[1] * 2,
'DIS Bonus * 2' => Stats.enhanced_dis[1] * 2,
'Physical Fitness ranks * 3/4' => Skills.physicalfitness * 3 / 4,
'First Aid ranks / 2' => Skills.firstaid / 2,
'Spell ranks * 2' => (Spells.minormental + Spells.minorspiritual) * 2,
'Arcane Symbols ranks' => Skills.arcanesymbols,
'Mental Mana Control ranks' => Skills.mmc,
'Spiritual Mana Control ranks' => Skills.smc,
}
others_factors = {
'Telepathy Lore *Bonus* (for others)' => Skills.to_bonus(Skills.mltelepathy),
}

self_factors = {
'Transformation Lore *Bonus* (for self)' => Skills.to_bonus(Skills.mltransformation),
};

total = 0;
common_factors.each { |k, v|
  total += v.to_i;
  respond sprintf("  %4d : %s", v, k);
};
self_total = total;
self_factors.each { |k, v|
  self_total += v.to_i;
  respond sprintf("  %4d : %s", v, k)
};

others_total = total;
others_factors.each { |k, v|
  others_total += v.to_i;
  respond sprintf("  %4d : %s", v, k)
};

respond ""

respond sprintf("  %4d : %s", self_total, "For Self Tatts");
tier = (self_total / 100).to_i
respond sprintf(" 100%% T%d / %d%% T%d", tier - 1, self_total - 100*tier, tier)

respond sprintf("  %4d : %s", others_total, "For Others");
tier = (others_total / 100).to_i
respond sprintf(" 100%% T%d / %d%% T%d", tier - 1, others_total - 100*tier, tier)

exit