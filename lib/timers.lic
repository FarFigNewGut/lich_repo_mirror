=begin

	A highly customizable window for displaying spell durations.
	
	You can choose to show Spell durations, Buff durations, Debuff durations, Cooldown durations, and even create your own Custom durations based on game lines.
	
	You can choose the color of the bar, the color of the text, what you want the text for each bar to say, the size of the bar, the font type, and so much more!
	
	You can create as many windows as you like. One window can list all buffs, one window can list all debuffs, one window can list all cooldowns, etc. You can even have a window automatically hide if there are no bars to show and pop up again once there are bars to show.
	
	There are too many options to list! You have to download the script and check it out for yourself.

	Version 1: Initial release!
	Version 2: Fixed bug with script crashing if you tried to change any "Default Settings" on a window that is hidden.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 2

=end

require 'gtk3'
require 'pango'

class AllTimers
	@@current_profile_file = nil
	def self.update_default_values(win_name)
		@@original_values = {}
		@@original_values["Bar Color"] = "silver"
		@@original_values["Trough Color"] = "white"
		@@original_values["Bar Height"] = "25"
		@@original_values["Text Color"] = "black"
		@@original_values["Font Family"] = "Arial"
		@@original_values["Font Size"] = "8"
		@@original_values["Text Display"] = "Name Only"
		@@original_values["Bar Order"] = "Spell Number"
		@@original_values["Hide Bar"] = "No"
		@@original_values["Full Bar"] = "250"
		@@original_values["Priority"] = "100"
		@@original_values["Spells"] = "Yes"
		@@original_values["Cooldowns"] = "No"
		@@original_values["Buffs"] = "No"
		@@original_values["Debuffs"] = "No"
		@@original_values["Game Line"] = ""
		@@original_values["Duration"] = "900"
		
		@@window_originals = {}
		@@window_originals["Window Height"] = "50"
		@@window_originals["Window Width"] = "152"
		@@window_originals["Keep Above"] = "Yes"
		@@window_originals["Show Title"] = "Yes"
		@@window_originals["Hide When Empty"] = "No"
		@@window_originals["Window Position"] = "[100, 100]"

		@@default_values[win_name] = @@original_values.dup
		@@default_load_save_data[win_name].each{ |setting,value| @@default_values[win_name][setting] = value }

		@@window_defaults[win_name] = @@window_originals.dup
		@@window_load_save_data[win_name].each{ |setting,value| @@window_defaults[win_name][setting] = value }
	end
	
	def self.update_bar_widths(bar, win_name)
		bar_width = @@window_load_save_data[win_name]["Window Width"] ? @@window_load_save_data[win_name]["Window Width"].to_i : @@window_originals["Window Width"].to_i
		bar.set_size_request(bar_width, -1)
	end

	def self.create_bar(spell_num, spell_name, win_name, effect_type)
		@@bar_info[win_name] = {} if @@bar_info[win_name].nil?
		@@bar_info[win_name][spell_num] = {} if @@bar_info[win_name][spell_num].nil?
		bar = @@bar_info[win_name][spell_num]
		bar["Progress Bar"] = Gtk::ProgressBar.new
		bar["Label"] = Gtk::Label.new
		bar["Label Text"] = ""
		bar["Full Name"] = spell_name
		bar["Event Box"] = Gtk::EventBox.new
		bar["Overlay"] = Gtk::Overlay.new
		bar["Active"] = true
		bar["Restart Timer"] = "Yes"
		bar["Effect Type"] = effect_type
		bar["Text Numbers Only"] = "#{spell_num}"
		bar["Text Name Only"] = bar["Full Name"]
		bar["Text Both"] = "#{bar["Full Name"]} (#{spell_num})"
		update_bar_widths(@@bar_info[win_name][spell_num]["Progress Bar"], win_name)

		bar_color(spell_num, win_name)
		label_font_color(spell_num, win_name)
		
		bar["Overlay"] = Gtk::Overlay.new
		
		bar["Overlay"].set_tooltip_text("Click to open the settings window where you can customize this bar and change other settings.")
		
		bar["Event Box"].signal_connect('button-press-event') do
			@@current_win = win_name
			if @@customize_window.nil?
				create_customize_window(spell_num)
			else
				set_window_title(@@current_win)
				set_menu_active(@@windows_menu, @@current_win)
				create_customize_tab(spell_num)
				@other_spin_buttons["Spell Bar"].value = spell_num.to_i
				@main_notebook.set_current_page(0)
			end
		end
		
		bar["Event Box"].add(bar["Label"])
		bar["Overlay"].add_overlay(bar["Event Box"])
		bar["Overlay"].add(bar["Progress Bar"])
	end
	
	def self.save_window_position(win_name)
		if @@all_windows[win_name].position
			@@save_file_data = true if @@original_position[win_name] != @@all_windows[win_name].position
			@@window_load_save_data[win_name]["Window Position"] = @@all_windows[win_name].position
		end
	end
	
	def self.create_profile_menu
		@@profile_menu = Gtk::ComboBoxText.new
		Dir.children(File.join(LICH_DIR)).each{ |file_name| @@profile_menu.append_text(file_name.gsub!(/Timers Profile|.txt| /, "")) if file_name =~ /Timers Profile/ }

		default_profile = nil
		if @@current_profile_file
			default_profile = @@current_profile_file
		else
			filename = "Timers Default Profiles.txt"
			if File.exist?(filename)
				File.open(filename, "r") do |file|
					file.each_line do |line|
						default_profile = $1 if line.start_with?(/#{checkname}\: (.*)/)
					end
				end
			else
				File.open(filename, "w")
			end

			if @@profile_menu.model.iter_n_children(nil) == 0
				File.open("Timers Profile Original.txt", "w")
				@@profile_menu.append_text("Original")
			end

			if default_profile
				default_profile = nil if !File.exist?("Timers Profile #{default_profile}.txt")
			end
		end

		if default_profile.nil?
			@@profile_menu.set_active(0)
			default_profile = @@profile_menu.active_text
			filename = "Timers Default Profiles.txt"
			needed_line = checkname
			file_lines = File.readlines(filename)
			file_lines.each{ |line| file_lines.delete(line) if line =~ /#{checkname}/ }
			File.open(filename, 'w') do |file|
				file.write("#{checkname}: #{default_profile}\n")
				file_lines.each{ |line| file.write(line) }
			end
		else
			set_menu_active(@@profile_menu, default_profile)
		end
		
		@@current_profile_file = default_profile
		@@default_profile_file = default_profile
		
		if $timers_script_vars_1
			@@current_profile_file = $timers_script_vars_1
			set_menu_active(@@profile_menu, @@current_profile_file)
		end
		
		@@profile_menu.set_tooltip_text("Load the profile you would like to modify.")
		
		@@profile_menu.signal_connect("changed") do |widget|
			selected_profile = widget.active_text
			save_data_to_profile
			@@do_not_stop_script = true
			save_window_position("Main")
			@@all_windows["Main"].close
			kill_script "timers"
			Thread.new{
				wait_until{ !running? "timers" }
				start_script "timers", [selected_profile, @@spell_number]
			}
		end
	end
	
	def self.set_menu_active(menu, wanted_item)
		needed_item = nil
		menu.model.each{ |model, path, iter|
			if wanted_item == menu.model.get_value(iter, 0)
				needed_item = iter
				break
			end
		}
		menu.set_active_iter(needed_item)
	end
	
	def self.comment_response(message)
		respond
		respond "########################################################################################################"
		respond "Message from ;timers"
		respond message
		respond "########################################################################################################"
		respond
	end
	
	def self.load_text_data
		@@current_win = "Main"
		@@bar_info = {}
		@@bar_load_save_data = {}
		@@default_values = {}
		@@window_defaults = {}
		@@default_load_save_data = {}
		@@window_load_save_data = {}
		@@original_position = {}
		@@bar_load_save_data[@@current_win] = {}
		@@default_load_save_data[@@current_win] = {}
		@@window_load_save_data[@@current_win] = {}
		window_name = @@current_win
		hash = @@bar_load_save_data
		spell_num = nil
		comment_response("Loading settings from #{@@current_profile_file} profile.")
		file_name = "Timers Profile #{@@current_profile_file}.txt"
		if File.exist?(file_name)
			File.open(file_name, "r") do |file|
				file.each_line do |line|
					if line.start_with?(/Window Name: (.*)/)
						window_name = $1
						@@bar_load_save_data[window_name] = {}
						@@default_load_save_data[window_name] = {}
						@@window_load_save_data[window_name] = {}
						hash = @@bar_load_save_data[window_name]
					elsif line.start_with?(/(\d+):/)
						spell_num = $1
						hash[spell_num] = {} if hash[spell_num].nil?
					elsif line.start_with?("Default Settings")
						hash = @@default_load_save_data[window_name]
						spell_num = nil
					elsif line.start_with?("Window Settings")
						hash = @@window_load_save_data[window_name]
						spell_num = nil
					elsif line =~ /: /
						info = line.split(": ")
						if spell_num
							hash[spell_num][info[0]] = info[1].chop
						else
							hash[info[0]] = info[1].chop
						end
					end
				end
			end
		end
	end
	
	def self.bar_color(spell_num, win_name)
		settings = {}
		setting_names = [ "Bar Color", "Trough Color", "Bar Height" ]
		setting_names.each{ |name| settings[name] = @@default_values[win_name][name] }

		if @@default_load_save_data[win_name].count > 0
			settings.each{ |key,value| settings[key] = @@default_load_save_data[win_name][key] if @@default_load_save_data[win_name][key] }
		end

		if @@bar_load_save_data[win_name][spell_num]
			settings.each{ |key,value| settings[key] = @@bar_load_save_data[win_name][spell_num][key] if @@bar_load_save_data[win_name][spell_num][key] }
		end

		provider = Gtk::CssProvider.new
		css = <<~CSS
			progressbar progress {
				min-height: #{settings["Bar Height"]}px;
				background-color: #{settings["Bar Color"]};
			}

			progressbar trough {
				min-height: #{settings["Bar Height"]}px;
				background-color: #{settings["Trough Color"]};
			}
		CSS

		begin
			provider.load_from_data(css)
		rescue Gtk::CssProviderError
			provider = Gtk::CssProvider.new
			css = <<~CSS
				progressbar progress {
					min-height: #{settings["Bar Height"]}px;
					background-color: #{@@original_values["Bar Color"]};
				}

				progressbar trough {
					min-height: #{settings["Bar Height"]}px;
					background-color: #{@@original_values["Trough Color"]};
				}
			CSS
			provider.load_from_data(css)
		end

		context = @@bar_info[win_name][spell_num]["Progress Bar"].style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
	end
	
	def self.label_font_color(spell_num, win_name)
		settings = {}
		setting_names = [ "Text Color", "Font Family", "Font Size" ]
		setting_names.each{ |name| settings[name] = @@default_values[win_name][name] }
		
		if @@default_values[win_name]["Text Display"] == "Numbers Only"
			@@bar_info[win_name][spell_num]["Label Text"] = "#{spell_num}"
		elsif @@default_values[win_name]["Text Display"] == "Name Only"
			@@bar_info[win_name][spell_num]["Label Text"] = @@bar_info[win_name][spell_num]["Full Name"]
		elsif @@default_values[win_name]["Text Display"] == "Both"
			@@bar_info[win_name][spell_num]["Label Text"] = "#{@@bar_info[win_name][spell_num]["Full Name"]} (#{spell_num})"
		end
		@@bar_info[win_name][spell_num]["Label Text"] = @@bar_load_save_data[win_name][spell_num]["Text Display"] if @@bar_load_save_data[win_name][spell_num]["Text Display"]

		if @@bar_load_save_data[win_name][spell_num]
			settings.each{ |key,value| settings[key] = @@bar_load_save_data[win_name][spell_num][key] if @@bar_load_save_data[win_name][spell_num][key] }
		end
	
		provider = Gtk::CssProvider.new
		css = <<~CSS
		label {
			color: #{settings["Text Color"]};
			font-family: #{settings["Font Family"]};
			font-size: #{settings["Font Size"]}pt;
		}
		CSS

		begin
			provider.load_from_data(css)
		rescue Gtk::CssProviderError
			provider = Gtk::CssProvider.new
			css = <<~CSS
				label {
					color: #{@@original_values["Text Color"]};
					font-family: #{@@original_values["Font Family"]};
					font-size: #{settings["Font Size"]}pt;
				}
			CSS
			provider.load_from_data(css)
		end
		
		context = @@bar_info[win_name][spell_num]["Label"].style_context
		context.add_provider(provider, Gtk::StyleProvider::PRIORITY_APPLICATION)
	end
	
	def self.reset_the_grids(name, notebook_index)
		@page_name[name] = NewNotebookTab.new
		@main_notebook.remove_page(notebook_index)
		
		row = -1
		@@tab_grids[name].each{ |grid_name,grid|
			@@tab_grids[name][grid_name] = Gtk::Grid.new
			@@tab_grids[name]["Prime Grid"].attach(@@tab_grids[name][grid_name], 0, row += 1, 1, 1) if grid_name != "Prime Grid"
		}
		@main_notebook.insert_page(@@tab_grids[name]["Prime Grid"], @page_labels[name], notebook_index)
	end
	
	def self.get_list_of_hidden_bars
		@@list_of_all_hidden_bars = Array.new
		@@bar_load_save_data[@@current_win].each{ |spell_num,hash|
			hash.each{ |setting,value| @@list_of_all_hidden_bars.push(spell_num) if setting == "Hide Bar" && value == "Yes" && !@@list_of_all_hidden_bars.include?(spell_num) }
		}
		converted = @@list_of_all_hidden_bars.map(&:to_i)
		list = converted.sort
		@@hidden_bars_label.set_text("#{list.join(", ")}")
		@@hidden_bars_label.set_line_wrap(true)
	end
	
	def self.set_window_title(win_name)
		@@customize_window.title = "Setup Menu for #{win_name} Window - #{@@current_profile_file} Profile"
	end
	
	def self.create_customize_window(spell_number)
		create_profile_menu if @@profile_menu.nil?
		@@hidden_bars_label = Gtk::Label.new
		@@spell_number = spell_number
		@@customize_window = Gtk::Window.new(:toplevel)
		@@customize_window.set_keep_above(true)
		@@customize_window.set_position(Gtk::WindowPosition::CENTER)
		set_window_title(@@current_win)
		@@customize_window.set_default_size(300, 200)
		
		@main_notebook = Gtk::Notebook.new
		
		@@tab_grids = {}
		@page_labels = {}
		create_grids = [ "Prime Grid", "Grid 1", "Grid 2", "Grid 3", "Grid 4", "Grid 5", "Grid 6" ]

		page_names = [ "Customize", "Default Settings", "Window Settings", "Profiles", "Other/Hidden Bars" ]
		page_names.each{ |name|
			@page_labels[name] = Gtk::Label.new(name)
			@@tab_grids[name] = {}
			row = -1
			create_grids.each{ |grid_name| 
				@@tab_grids[name][grid_name] = Gtk::Grid.new
				@@tab_grids[name]["Prime Grid"].attach(@@tab_grids[name][grid_name], 0, row += 1, 1, 1) if grid_name != "Prime Grid"
			}
			@main_notebook.append_page(@@tab_grids[name]["Prime Grid"], @page_labels[name])
		}

		@page_labels["Window Settings"].set_tooltip_text("Change Window Settings.")
		@page_labels["Profiles"].set_tooltip_text("Change, add, and delete profiles in this tab. Also select your default profile.\n\nAll settings will be saved to your current profile.")
		@page_labels["Other/Hidden Bars"].set_tooltip_text("You can select any spell number in this tab to customize that spell's bar.\n\nAlso all bars you have hidden will be listed in this tab.")
		
		@color_info = "\n\nA list of available colors can be found here: www.w3.org/wiki/CSS/Properties/color/keywords\n\nBe sure to enter the color name correctly, if you enter an incorrect color name the color will change to the default color."
		@font_info = "\n\nMost font names can be used.\n\nBe sure to enter the font name correctly, if you enter an incorrect font name the font will change to the default font."

		@page_name = {}
		##############
		#Customize Tab Start
		##############
		def self.create_customize_tab(spell_number)
			AllTimers.get_list_of_hidden_bars
			@@spell_number = spell_number
			create_bar(@@spell_number, "Unknown", @@current_win, "Spells") if @@bar_info[@@current_win][@@spell_number].nil?
			@@bar_info[@@current_win][@@spell_number]["Active"] = nil unless @@bar_info[@@current_win][@@spell_number]["Active"]
			name = "Customize"
			
			reset_the_grids(name, 0)
			@page_labels[name].set_label("Customize #{@@spell_number}")
			@page_labels[name].set_tooltip_text("Customize bar settings for spell number #{@@spell_number}.")
			tooltips = {
				"Bar Color" => "Set the color of the remaining time on this bar.#{@color_info}",
				"Trough Color" => "Set the color of the elapsed time on this bar.#{@color_info}",
				"Text Color" => "Set the text color for this bar.#{@color_info}",
				"Font Family" => "Enter the name of the font you want to use for this bar.#{@font_info}",
				"Font Size" => "Enter the size of the font for this bar.",
				"Bar Height" => "Enter the height of the bar for this bar.",
				"Text Display" => "Enter the text you want displayed for this bar.",
				"Hide Bar" => "Check this box to always hide this bar.",
				"Full Bar" => "Enter number of minutes considered to be a full bar. For example if 100 minutes is entered here, and the spell has 50 minutes remaining on its duration, then the left half of the bar will be the \"Bar Color\" color and the right half will be the \"Trough Color\".\n\nMost spells have a maximum duration of 250 minutes but some have a much lower maximum duration.\n\nEnter 0 to not show the \"Trough Color\" and instead the entire bar will always be the \"Bar Color\" color.",
				"Priority" => "Set the priority for this bar. Bars with the lowest numbered priority are always listed first, regardless of the \"Bar Order\" setting in the Default Settings tab.\n\nFor example if a bar has a priority of 1 it will always be listed first, then bars with 2 listed next, and so on.",
			}
			
			entry_settings = [ "Text Display", "Bar Color", "Trough Color", "Text Color", "Font Family" ]
			spin_button_settings = [ "Font Size", "Bar Height", "Full Bar", "Priority" ]
			
			all_settings = entry_settings + spin_button_settings
			
			check_boxes = {}
			check_boxes["Hide Bar"] = Gtk::CheckButton.new("Hide Bar")

			@page_name[name].create_tooltips(tooltips)
			@page_name[name].all_settings(all_settings)
			@page_name[name].add_check_boxes(check_boxes)
			@page_name[name].create_entries(entry_settings, spin_button_settings)
			@page_name[name].populate_page(@@default_values[@@current_win], @@bar_load_save_data[@@current_win], name)
			@@tab_grids[name]["Prime Grid"].show_all
		end
		create_customize_tab(@@spell_number)
		##############
		#Customize Tab End
		##############

		##############
		#Default Settings Tab Start
		##############
		def self.create_default_tab
			name = "Default Settings"

			reset_the_grids(name, 1)			
			@page_labels[name].set_label(name)
			@page_labels[name].set_tooltip_text("Change default settings for all bars.\n\nBar settings in the Customize tab override all default settings.")
			
			tooltips = {
				"Bar Color" => "Set the default color of the remaining time on all bars.#{@color_info}",
				"Trough Color" => "Set the default color of the elapsed time on all bars.#{@color_info}",
				"Text Color" => "Set the text color for all bars.#{@color_info}",
				"Font Family" => "Enter the name of the font you want to use for all bars.#{@font_info}",
				"Font Size" => "Enter the size of the font for all bars.",
				"Bar Height" => "Enter the height of the bar for all bars.",
				"Hide Bar" => "Check this box to always hide all bars.\n\nYou can unhide individual bars in their customize settings tab.",
				"Full Bar" => "Enter number of minutes considered to be a full bar. For example if 100 minutes is entered here, and the spell has 50 minutes remaining on its duration, then the left half of the bar will be the \"Bar Color\" color and the right half will be the \"Trough Color\".\n\nMost spells have a maximum duration of 250 minutes but some have a much lower maximum duration.\n\nEnter 0 to not have a progress bar duration and instead the entire bar will always be the \"Bar Color\" color.",
				"Spells" => "Check this box to show Spell bars in this window.",
				"Cooldowns" => "Check this box to show Cooldown bars in this window.",
				"Buffs" => "Check this box to show Buff bars in this window.",
				"Debuffs" => "Check this box to show Debuff bars in this window.",
			}
			radios = {}
			
			radios["Text Display"] = {}
			radios["Text Display"]["Numbers Only"] = Gtk::RadioButton.new("Numbers Only")
			radios["Text Display"]["Name Only"] = Gtk::RadioButton.new(radios["Text Display"]["Numbers Only"], "Name Only")
			radios["Text Display"]["Both"] = Gtk::RadioButton.new(radios["Text Display"]["Numbers Only"], "Both")
			
			default = @@default_load_save_data[@@current_win]["Text Display"] ? @@default_load_save_data[@@current_win]["Text Display"] : @@default_values[@@current_win]["Text Display"]

			radios["Text Display"].each{ |key,value|
				value.set_tooltip_text("Set the default way spell names are displayed in each bar.\n\nNumbers Only Example: 101: 2:10:34\nName Only Example: Spirit Warding I: 2:10:34\nBoth Example: Spirit Warding I (101): 2:10:34\n\nDefault is: #{@@original_values["Text Display"]}")
				value.active = true if default == key
			}
			
			radios["Bar Order"] = {}
			radios["Bar Order"]["Spell Number"] = Gtk::RadioButton.new("Spell Number")
			radios["Bar Order"]["Expires First"] = Gtk::RadioButton.new(radios["Bar Order"]["Spell Number"], "Expires First")
			radios["Bar Order"]["Expires Last"] = Gtk::RadioButton.new(radios["Bar Order"]["Spell Number"], "Expires Last")
			
			default = @@default_load_save_data[@@current_win]["Bar Order"] ? @@default_load_save_data[@@current_win]["Bar Order"] : @@default_values[@@current_win]["Bar Order"]

			radios["Bar Order"].each{ |key,value|
				value.set_tooltip_text("Select the order in which you want the bars listed.\nSpell Number: Bars will be listed in numerical order based on their spell number.\nExpires First: Spells with the shortest remaining duration will be listed first.\nExpires Last: Spells with the longest remaining duration will be listed first.\n\nDefault is: #{@@original_values["Bar Order"]}")
				value.active = true if default == key
			}

			entry_settings = [ "Bar Color", "Trough Color", "Text Color", "Font Family" ]
			spin_button_settings = [ "Font Size", "Bar Height", "Full Bar" ]
			
			all_settings = entry_settings + spin_button_settings
			
			check_boxes = {}
			check_boxes["Hide Bar"] = Gtk::CheckButton.new("Hide Bar")
			check_boxes["Spells"] = Gtk::CheckButton.new("Spells")
			check_boxes["Cooldowns"] = Gtk::CheckButton.new("Cooldowns")
			check_boxes["Buffs"] = Gtk::CheckButton.new("Buffs")
			check_boxes["Debuffs"] = Gtk::CheckButton.new("Debuffs")

			@page_name[name].create_tooltips(tooltips)
			@page_name[name].all_settings(all_settings)
			@page_name[name].add_check_boxes(check_boxes)
			@page_name[name].create_entries(entry_settings, spin_button_settings)
			@page_name[name].add_radios(radios)
			@page_name[name].populate_page(@@original_values, @@default_load_save_data[@@current_win], name)
			@@tab_grids[name]["Prime Grid"].show_all
		end
		create_default_tab
		##############
		#Default Settings Tab End
		##############
		
		##############
		#Window Settings Tab Start
		##############
		name = "Window Settings"
		@page_name[name] = NewNotebookTab.new
			
		tooltips = {
			"Window Height" => "Enter the height of the window.",
			"Window Width" => "Enter the width of the window. This will also make the bars longer.",
			"Keep Above" => "Check this box to make this window always be on top of other windows.",
			"Show Title" => "NOTE: This setting doesn't take effect until you restart the script.\n\nCheck this box to show the window's title bar. This bar is where the window's name, minimize, maximize, and close buttons are located.\n\nUncheck this box to hide the title bar for a cleaner look.\n\nOnce title bar is hidden you won't be able to click and drag the window to a new position. You can use the Horizontal and Vertical settings below to move the window.",
			"Hide When Empty" => "NOTE: Main Window cannot be hidden.\n\nCheck to have this window hidden when there are no active bars and shown when there are active bars.\n\nUncheck to always show window.",
		}

		entry_settings = nil
		spin_button_settings = [ "Window Height", "Window Width" ]
			
		all_settings = entry_settings + spin_button_settings
		
		check_boxes = {}
		check_boxes["Keep Above"] = Gtk::CheckButton.new("Keep Above")
		check_boxes["Show Title"] = Gtk::CheckButton.new("Show Title")
		check_boxes["Hide When Empty"] = Gtk::CheckButton.new("Hide When Empty")

		@page_name[name].create_tooltips(tooltips)
		@page_name[name].all_settings(all_settings)
		@page_name[name].add_check_boxes(check_boxes)
		@page_name[name].create_entries(entry_settings, spin_button_settings)
		@page_name[name].populate_page(@@window_originals, @@window_load_save_data[@@current_win], name)
		##############
		#Window Settings Tab End
		##############
		
		##############
		#Profile Tab Start
		##############
		name = "Profiles"
		@page_name[name] = NewNotebookTab.new
		@page_name[name].create_profile_tab(name)
		##############
		#Profile Tab End
		##############

		##############
		#Other/Hidden Bars Tab Start
		##############
		name = "Other/Hidden Bars"
		
		buttons = {}
		@other_spin_buttons = {}	
		
		setting = "Spell Bar"
		adjustment = Gtk::Adjustment.new(0, 1, 1000000, 1, 5, 0)
		@other_spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
		
		@other_spin_buttons[setting].value = @@spell_number.to_i
		buttons[setting] = Gtk::Button.new(:label => "Customize")
		
		text = "\n\nSince you are editing the information via this button instead of clicking the spell in the spell bar, \"Text Display\" in the Customize tab will show up as \"Unknown\" for the spell name. This is just for display purposes in the Customize tab, the spell name will show as normal in the spell bar when the spell is active. If you want the display name to remain as the default spell name then don't change the \"Text Display\" information."
		@other_spin_buttons[setting].set_tooltip_text("Enter the number of the spell you want to customize and click the button to the right to bring up its customize window.#{text}")
		buttons[setting].set_tooltip_text("Enter the number of the spell you want to customize to the left then click this button to bring up that spell's customize window.#{text}")

		get_list_of_hidden_bars
		custom_bars_label = Gtk::Label.new("Spell numbers 1-100 are Custom bars where you can setup what game line triggers the creation of a bar and the duration of said bar.")
		custom_bars_label.set_line_wrap(true)

		@@tab_grids[name]["Grid 1"].attach(@other_spin_buttons[setting], 0, 0, 1, 1)
		@@tab_grids[name]["Grid 1"].attach(buttons[setting], 1, 0, 1, 1)
		@@tab_grids[name]["Grid 2"].attach(Gtk::Label.new, 0, 1, 1, 1)
		@@tab_grids[name]["Grid 2"].attach(custom_bars_label, 0, 2, 1, 1)
		@@tab_grids[name]["Grid 2"].attach(Gtk::Label.new, 0, 3, 1, 1)
		@@tab_grids[name]["Grid 3"].attach(Gtk::Label.new("List of all hidden bars for the current window:"), 0, 4, 1, 1)
		@@tab_grids[name]["Grid 3"].attach(Gtk::Label.new, 0, 5, 1, 1)
		@@tab_grids[name]["Grid 4"].attach(@@hidden_bars_label, 0, 6, 1, 1)
		buttons[setting].signal_connect("clicked") do
			new_spell_num = @other_spin_buttons[setting].value.to_i.to_s
			create_customize_tab(new_spell_num)
			@main_notebook.set_current_page(0)
		end
		##############
		#Other/Hidden Bars Tab End
		##############
		@@customize_window.add(@main_notebook)
		@@customize_window.show_all
		
		@@customize_window.signal_connect('destroy') do
			@@profile_menu = nil
			@@customize_window = nil
		end
		@main_notebook.set_current_page(3) if $timers_script_vars_1
		$timers_script_vars_1 = nil
		$timers_script_vars_2 = nil

		get_current_window_positon
	end
	
	def self.hide_bars(win_name, spell_num)
		bar = @@bar_info[win_name][spell_num]
		bar["Hide Bar"] = @@bar_load_save_data[win_name][spell_num]["Hide Bar"] ? @@bar_load_save_data[win_name][spell_num]["Hide Bar"] : @@default_values[win_name]["Hide Bar"]
		if bar["Hide Bar"] == "Yes"
			bar["Overlay"].hide if bar["Overlay"].visible?
		else
			bar["Overlay"].show if !bar["Overlay"].visible?
		end
	end
	
	def self.window_var
		@@position_spin_buttons = {}
		@@customize_window = nil
		@@do_not_stop_script = nil
		@@all_windows = {}
		@@customize_window = nil
		@@no_spells_found_button = {}
		@@windows_menu = nil
		@@scrolled_window = {}
		@@main_grid = {}
		@@save_file_data = nil
		@@redo_bar_order = nil
	end
	
	def self.restart_window(name)
		if @@all_windows[name]
			Gtk.main_quit
		end
		Gtk.queue {
			create_new_window("Main")
			Gtk.main
		}
	end

	def self.get_spell_info(win_name)
		name_number = ""
		new_bar = nil
		
		all_effects = {}
		effect_names = [ "Spells", "Cooldowns", "Buffs", "Debuffs" ]
		
		effect_names.each{ |effect_name|
			show = @@default_load_save_data[win_name][effect_name] ? @@default_load_save_data[win_name][effect_name] : @@original_values[effect_name]
			all_effects[effect_name] = Effects::Spells if show == "Yes" && effect_name == "Spells"
			all_effects[effect_name] = Effects::Cooldowns if show == "Yes" && effect_name == "Cooldowns"
			all_effects[effect_name] = Effects::Buffs if show == "Yes" && effect_name == "Buffs"
			all_effects[effect_name] = Effects::Debuffs if show == "Yes" && effect_name == "Debuffs"
		}
		
		all_effects.each{ |effect_type,effect_info| 
			effect_info.each{ |name|
				if name.to_s =~ /\d+/
					name_number = "#{name}, "
				else
					name_number += name
					spell_num, spell_name = name_number.split(", ")
					if @@bar_info[win_name][spell_num]["Progress Bar"].nil?
						create_bar(spell_num, spell_name, win_name, effect_type)
						new_bar = true
					end
				end
			}
		}
		
		@@bar_info[win_name].each{ |spell_num,_|
			effect_names.each{ |effect_name|
				show = @@default_load_save_data[win_name][effect_name] ? @@default_load_save_data[win_name][effect_name] : @@original_values[effect_name]
				@@bar_info[win_name].delete(spell_num) if (@@bar_info[win_name][spell_num]["Effect Type"] == effect_name && show == "No") || @@bar_info[win_name][spell_num]["Active"].nil?
			}
		}

		if new_bar || @@redo_bar_order
			if !@@all_windows[win_name].visible?
				@@all_windows[win_name].show_all
				position = @@window_load_save_data[win_name]["Window Position"] ? @@window_load_save_data[win_name]["Window Position"] : @@window_originals["Window Position"]
				position = eval(position)
				@@all_windows[win_name].move(position[0].to_i, position[1].to_i)
			end

			row_number = -1
			hash_spell_duration = {}
			all_effects.each{ |effect_type,effect_info| 
				effect_info.each{ |name|
					hash_spell_duration[name] = (Time.now - effect_info.to_h[name.to_i]).abs if effect_info.to_h[name.to_i]
				}
			}
			@@bar_info[win_name].each{ |spell_number,_|
				if @@bar_info[win_name][spell_number]["Effect Type"] == "Custom" && (@@bar_info[win_name][spell_number]["Remaining Time"].nil? || @@bar_info[win_name][spell_number]["Restart Timer"] == "Yes")
					duration = @@bar_load_save_data[win_name][spell_number]["Duration"] ? @@bar_load_save_data[win_name][spell_number]["Duration"].to_i : @@default_values[win_name]["Duration"].to_i
					@@bar_info[win_name][spell_number]["Remaining Time"] = duration
					@@bar_info[win_name][spell_number]["Restart Timer"] = "No"
				end
				hash_spell_duration[spell_number] = @@bar_info[win_name][spell_number]["Remaining Time"] if @@bar_info[win_name][spell_number]["Remaining Time"]
			}

			needed_order = @@default_load_save_data[win_name]["Bar Order"] ? @@default_load_save_data[win_name]["Bar Order"] : @@default_values[win_name]["Bar Order"]
			if needed_order == "Spell Number"
				needed_hash = @@bar_info[win_name].sort_by{ |key, value|
					priority = @@bar_load_save_data[win_name][key]["Priority"] ? @@bar_load_save_data[win_name][key]["Priority"].to_i : @@default_values[win_name]["Priority"].to_i
					[priority, key.to_i]
				}
			elsif needed_order == "Expires First"
				needed_hash = hash_spell_duration.sort_by{ |key, value|
					priority = @@bar_load_save_data[win_name][key]["Priority"] ? @@bar_load_save_data[win_name][key]["Priority"].to_i : @@default_values[win_name]["Priority"].to_i
					[priority, value.to_i]
				}
			elsif needed_order == "Expires Last"
				needed_hash = hash_spell_duration.sort_by{ |key, value|
					priority = @@bar_load_save_data[win_name][key]["Priority"] ? @@bar_load_save_data[win_name][key]["Priority"].to_i : @@default_values[win_name]["Priority"].to_i
					[priority, -value.to_i]
				}
			end

			@@main_grid[win_name].each{ |widget| @@main_grid[win_name].remove(widget) }
			needed_hash.each{ |key,value|
				@@main_grid[win_name].attach(@@bar_info[win_name][key.to_s]["Overlay"], 0, row_number += 1, 1, 1) if @@bar_info[win_name][key.to_s]["Overlay"]
			}

			@@main_grid[win_name].queue_draw
			@@all_windows[win_name].show_all
		end
	end

	def self.update_window(win_name)
		window_height = @@window_load_save_data[win_name]["Window Height"] ? @@window_load_save_data[win_name]["Window Height"].to_i : @@window_originals["Window Height"].to_i
		@@scrolled_window[win_name].set_size_request(-1, window_height.to_i)
		@@all_windows[win_name].resize(20, 20)
		
		setting = "Keep Above"
		setting_state = @@window_load_save_data[win_name][setting] ? @@window_load_save_data[win_name][setting] : @@window_originals[setting]
		if setting_state == "Yes"
			@@all_windows[win_name].set_keep_above(true)
		else
			@@all_windows[win_name].set_keep_above(false)
		end
	end

	def self.delete_bar_duplicates(window_name)
		@@bar_load_save_data[window_name].each{ |spell_num,hash|
			hash.each{ |setting,value|
				if setting == "Text Display"
					@@bar_load_save_data[window_name][spell_num].delete(setting) if value == @@bar_info[window_name][spell_num]["Text Numbers Only"] || value == @@bar_info[window_name][spell_num]["Text Name Only"] || value == @@bar_info[window_name][spell_num]["Text Both"] || value == "Unknown"
				else
					@@bar_load_save_data[window_name][spell_num].delete(setting) if value == @@default_values[window_name][setting]
				end
			}
		}
	end
	
	def self.save_data_to_profile
		if @@save_file_data
			comment_response("Saving settings to #{@@current_profile_file} profile.")
			needed_file = "Timers Profile #{@@current_profile_file}.txt"
			File.open(needed_file, "w") do |file|
				@@all_windows.each{ |window_name,window|
					file.puts "\nWindow Name: #{window_name}"
					@@bar_load_save_data[window_name].each{ |spell_num,value|
						delete_bar_duplicates(window_name)
						if @@bar_load_save_data[window_name][spell_num].count > 0
							file.puts "\n#{spell_num}:"
							@@bar_load_save_data[window_name][spell_num].each{ |setting,setting_value| file.puts "#{setting}: #{setting_value}" if setting_value.length > 0}
						end
					}
					@@default_load_save_data[window_name].each{ |setting,setting_value| @@default_load_save_data[window_name].delete(setting) if @@default_load_save_data[window_name][setting] == @@original_values[setting] }
					@@default_load_save_data[window_name].delete("Text Display") if @@default_load_save_data[window_name]["Text Display"] == @@original_values[window_name]["Text Display"]
					if @@default_load_save_data[window_name].count > 0
						file.puts "\nDefault Settings"
						@@default_load_save_data[window_name].each{ |setting,setting_value| file.puts "#{setting}: #{setting_value}" }
					end
					@@window_load_save_data[window_name].each{ |setting,setting_value| @@window_load_save_data[window_name].delete(setting) if @@window_load_save_data[window_name][setting] == @@window_originals[setting] }
					if @@window_load_save_data[window_name].count > 0
						file.puts "\nWindow Settings"
						@@window_load_save_data[window_name].each{ |setting,setting_value| file.puts "#{setting}: #{setting_value}" }
					end
				}
			end
			@@save_file_data = nil
		else
			comment_response("No changes were made to #{@@current_profile_file} profile.")
		end
	end
	
	def self.get_current_window_positon
		position = @@all_windows[@@current_win].position
		@@position_spin_buttons["Horizontal"].value = position[0].to_i
		@@position_spin_buttons["Vertical"].value = position[1].to_i
	end

	def self.create_new_window(win_name)
		@@all_windows[win_name] = Gtk::Window.new(:toplevel)
		@@all_windows[win_name].set_title(win_name)
		@@no_spells_found_button[win_name] = Gtk::Button.new(:label => "No spells active")
		update_default_values(win_name)
		@@bar_load_save_data[win_name] = {} if @@bar_load_save_data[win_name].nil?
		@@default_load_save_data[win_name] = {} if @@default_load_save_data[win_name].nil?
		@@window_load_save_data[win_name] = {} if @@window_load_save_data[win_name].nil?
		
		position = @@window_load_save_data[win_name]["Window Position"] ? @@window_load_save_data[win_name]["Window Position"] : @@window_originals["Window Position"]
		position = eval(position)
		@@original_position[win_name] = position.dup
		@@all_windows[win_name].move(position[0].to_i, position[1].to_i)
		
		@@no_spells_found_button[win_name].signal_connect('button-press-event') do
			@@current_win = win_name
			if @@customize_window.nil?
				create_customize_window("101")
			else
				set_window_title(win_name)
				set_menu_active(@@windows_menu, @@current_win)
				create_customize_tab("101")
			end
		end
		
		setting = "Show Title"
		setting_state = @@window_load_save_data[win_name][setting] ? @@window_load_save_data[win_name][setting] : @@window_originals[setting]
		if setting_state == "Yes"
			@@all_windows[win_name].set_decorated(true)
		else
			@@all_windows[win_name].set_decorated(false)
		end
		
		@@main_grid[win_name] = Gtk::Grid.new
		@@main_grid[win_name].attach(@@no_spells_found_button[win_name], 0, 0, 1, 1)

		@@scrolled_window[win_name] = Gtk::ScrolledWindow.new
		@@scrolled_window[win_name].set_policy(Gtk::PolicyType::NEVER, Gtk::PolicyType::AUTOMATIC)
		update_window(win_name)

		@@scrolled_window[win_name].add(@@main_grid[win_name])
		@@all_windows[win_name].add(@@scrolled_window[win_name])

		get_spell_info(win_name)
		
		if win_name == "Main"
			timer_id = GLib::Timeout.add_seconds(1) do
				if !running? "timers"
					save_window_position("Main")
					@@all_windows["Main"].close
				end
				@@all_windows.each{ |window_name,window|
					get_spell_info(window_name)
					@@bar_info[window_name].each{ |spell_num,value|
						AllTimers.hide_bars(window_name, spell_num)
						bar = @@bar_info[window_name][spell_num]
						if (!Effects::Spells.active?(spell_num.to_i) && !Effects::Cooldowns.active?(spell_num.to_i) && !Effects::Buffs.active?(spell_num.to_i) && !Effects::Debuffs.active?(spell_num.to_i) && @@bar_info[window_name][spell_num]["Effect Type"] != "Custom") || (bar["Remaining Time"] == 0 && @@bar_info[window_name][spell_num]["Effect Type"] == "Custom")
							if bar["Active"]
								bar.each{ |key,value|
									if bar[key].class == Gtk::ProgressBar || bar[key].class == Gtk::Label || bar[key].class == Gtk::EventBox || bar[key].class == Gtk::Overlay
										@@main_grid[window_name].remove(bar[key])
										bar[key].destroy if bar[key].class
									end
								}
								@@bar_info[window_name].delete(spell_num) if bar["Active"]
							end
						else
							bar["Active"] = true
							if @@bar_info[window_name][spell_num]["Effect Type"] == "Custom"
								@@bar_info[window_name][spell_num]["Remaining Time"] -= 1
								seconds_remaining = @@bar_info[window_name][spell_num]["Remaining Time"].to_f
							else
								if Effects::Spells.to_h[spell_num.to_i]
									seconds_remaining = (Time.now - Effects::Spells.to_h[spell_num.to_i]).abs if Effects::Spells.to_h[spell_num.to_i]
								elsif Effects::Cooldowns.to_h[spell_num.to_i]
									seconds_remaining = (Time.now - Effects::Cooldowns.to_h[spell_num.to_i]).abs if Effects::Cooldowns.to_h[spell_num.to_i]
								elsif Effects::Buffs.to_h[spell_num.to_i]
									seconds_remaining = (Time.now - Effects::Buffs.to_h[spell_num.to_i]).abs if Effects::Buffs.to_h[spell_num.to_i]
								elsif Effects::Debuffs.to_h[spell_num.to_i]
									seconds_remaining = (Time.now - Effects::Debuffs.to_h[spell_num.to_i]).abs if Effects::Debuffs.to_h[spell_num.to_i]
								end
							end

							hours = (seconds_remaining / 3600).to_i.to_s
							minutes = ((seconds_remaining % 3600) / 60).to_i.to_s
							minutes = "0#{minutes}" if minutes.length == 1
							seconds = (seconds_remaining % 60).to_i.to_s
							seconds = "0#{seconds}" if seconds.length == 1
							bar["Label"].set_text("#{bar["Label Text"]}: #{hours}:#{minutes}:#{seconds}")

							full_bar = @@bar_load_save_data[window_name][spell_num]["Full Bar"] ? @@bar_load_save_data[window_name][spell_num]["Full Bar"].to_i : @@default_values[window_name]["Full Bar"].to_i
							full_bar_seconds = full_bar * 60
							bar["Progress Bar"].fraction = seconds_remaining / full_bar_seconds
						end
					}
					if !@@all_windows[window_name].destroyed?
						state = nil
						visible_widgets = @@main_grid[window_name].children.count { |child| child.visible? && !child.is_a?(Gtk::Button) }
						if visible_widgets == 0
							if @@window_load_save_data[window_name]["Hide When Empty"] == "Yes" && @@all_windows[window_name].visible? && window_name != "Main"
								state = "Hide"
							elsif !@@main_grid[window_name].get_child_at(0, 0).is_a?(Gtk::Button) && @@all_windows[window_name].visible?
								@@main_grid[window_name].attach(@@no_spells_found_button[window_name], 0, 0, 1, 1)
								state = "Show"
							end
						else
							@@main_grid[window_name].remove(@@no_spells_found_button[window_name]) if @@main_grid[window_name].get_child_at(0, 0).is_a?(Gtk::Button)
							state = "Show" if !@@all_windows[window_name].visible?
						end
						
						if state == "Hide"
							@@all_windows[window_name].hide
						elsif state == "Show"
							if !@@all_windows[window_name].visible?
								@@all_windows[window_name].show_all
								position = @@window_load_save_data[win_name]["Window Position"] ? @@window_load_save_data[win_name]["Window Position"] : @@window_originals["Window Position"]
								position = eval(position)
								@@all_windows[win_name].move(position[0].to_i, position[1].to_i)
							end
						end
					end
				}
				@@redo_bar_order = nil
				true
			end
		end
		
		@@all_windows[win_name].signal_connect('delete-event') do
			save_window_position(win_name)
			false
		end
		
		@@all_windows[win_name].signal_connect('destroy') do
			if win_name == "Main"
				GLib::Source.remove(timer_id)
				@@customize_window.close
				@@all_windows.each{ |name_window,window|
					if !window.destroyed? && name_window != "Main"
						save_window_position(name_window)
						window.close
					end
				}
				save_data_to_profile
				@@all_windows = {}
				if running? "timers"
					kill_script "timers" if @@do_not_stop_script.nil?
				end
			else
				save_window_position("Main")
				@@all_windows["Main"].close
			end
		end
		
		@@all_windows[win_name].show_all
		@@window_load_save_data.each{ |w_name,window| create_new_window(w_name) if w_name != "Main" && win_name == "Main" }
		create_customize_window($timers_script_vars_2) if $timers_script_vars_1
	end
end

class NewNotebookTab < AllTimers
	def initialize		
		@labels = {}
		@tooltips = {}
		@entries = {}
		@buttons = {}
		@spin_buttons = {}
		@radios = {}
		@check_boxes = {}
		@all_settings = nil
	end
	
	def set_default_text_display
		@default_text_display = ""
		if @@default_values[@@current_win]["Text Display"] == "Numbers Only"
			@default_text_display = "#{@@spell_number}"
		elsif @@default_values[@@current_win]["Text Display"] == "Name Only"
			@default_text_display = @@bar_info[@@current_win][@@spell_number]["Full Name"]
		elsif @@default_values[@@current_win]["Text Display"] == "Both"
			@default_text_display = "#{@@bar_info[@@current_win][@@spell_number]["Full Name"]} (#{@@spell_number})"
		end
	end
	
	def create_entries(entry_settings, spin_button_settings)
		entry_settings.each{ |setting| @entries[setting] = Gtk::Entry.new }
		spin_button_settings.each{ |setting|
			if setting == "Font Size"
				adjustment = Gtk::Adjustment.new(0, 1, 30, 1, 5, 0)
			elsif setting == "Bar Height"
				adjustment = Gtk::Adjustment.new(0, 1, 50, 1, 5, 0)
			elsif setting == "Window Height"
				adjustment = Gtk::Adjustment.new(0, 50, 1000, 1, 5, 0)
			elsif setting == "Window Width"
				adjustment = Gtk::Adjustment.new(0, 152, 1000, 1, 5, 0)
			elsif setting == "Full Bar"
				adjustment = Gtk::Adjustment.new(0, 0, 1000, 1, 5, 0)
			elsif setting == "Priority"
				adjustment = Gtk::Adjustment.new(0, 1, 100, 1, 5, 0)
			elsif setting == "Duration"
				adjustment = Gtk::Adjustment.new(0, 1, 90000, 1, 5, 0)
			end
			@spin_buttons[setting] = Gtk::SpinButton.new(adjustment, 1, 0)
		}
	end
	
	def add_radios(radios)
		@radios = radios
	end
	
	def add_check_boxes(check_boxes)
		@check_boxes = check_boxes
	end
	
	def create_tooltips(tooltips)
		@tooltips = tooltips
	end
	
	def all_settings(all_settings)
		@all_settings = all_settings
	end
	
	def create_profile_tab(name)
		grid1 = @@tab_grids[name]["Grid 1"]
		grid2 = @@tab_grids[name]["Grid 2"]
		grid3 = @@tab_grids[name]["Grid 3"]
		grid3 = @@tab_grids[name]["Grid 4"]
		
		profile_info = "\n\nProfile names can only contain letters and numbers.\n\nProfiles are case-insensitive (example if you have a profile named \"test\" you can't create one named \"Test\".\n\nProfiles are saved as text files in your lich directory with the name of \"Timers Profile <profile name>\""
		
		@all_settings = [ "Create Profile" ]
		@tooltips = {
			"Create Profile" => "Enter the name of profile and click \"Create Profile\" button to the right to create a new profile.#{profile_info}",
			
			"Load Profile" => "Select the profile you want to load.",
			
			"Save" => "Click this button to save any changes made to the current profile.\n\nSettings are saved to a file on your computer's hard drive when you close the main window, change profiles, or click this button.",
			
			"Default Profile" => "Click this button to make the currently loaded profile your default profile.\n\nThe default profile is the profile that will be loaded whenever the script is first started.",
		}

		setting = "Load Profile"
		@labels[setting] = Gtk::Label.new("#{setting}     ")
		@labels[setting].set_tooltip_text(@tooltips[setting])
		
		setting = "Default Profile"
		@buttons[setting] = Gtk::Button.new(:label => setting)
		@buttons[setting].set_tooltip_text(@tooltips[setting])
		
		setting = "Save"
		@buttons[setting] = Gtk::Button.new(:label => setting)
		@buttons[setting].set_tooltip_text(@tooltips[setting])
		
		@all_settings.each{ |setting|
			@labels[setting] = Gtk::Label.new("#{setting}     ")
			@labels[setting].set_tooltip_text(@tooltips[setting])
			@entries[setting] = Gtk::Entry.new
			@entries[setting].set_tooltip_text(@tooltips[setting])
			@buttons[setting] = Gtk::Button.new(:label => setting)
		}
		@buttons["Create Profile"].set_tooltip_text("Enter the name of profile to the left and then click this button to create a new profile.#{profile_info}")

		@entries["Create Profile"].signal_connect("changed") do
			text = @entries["Create Profile"].text
			text.gsub!(/[^a-zA-Z0-9]/, "")
			@entries["Create Profile"].text = text
		end
		
		@buttons["Default Profile"].signal_connect("clicked") do
			default_profile = @@profile_menu.active_text
			if default_profile == @@default_profile_file
				AllTimers.comment_response("#{default_profile} is already the default profile.")
			else
				filename = "Timers Default Profiles.txt"
				needed_line = checkname
				file_lines = File.readlines(filename)
				file_lines.each{ |line| file_lines.delete(line) if line =~ /#{checkname}/ }
				File.open(filename, 'w') do |file|
					file.write("#{checkname}: #{default_profile}\n")
					file_lines.each{ |line| file.write(line) }
				end
				@@default_profile_file = default_profile
				AllTimers.comment_response("Default profile has been changed to #{default_profile}.")
			end
		end
		@buttons["Create Profile"].signal_connect("clicked") do
			all_profile_names = []
			@@profile_menu.model.each{ |model, path, iter| all_profile_names.push(@@profile_menu.model.get_value(iter, 0).downcase) }
			profile_name = @entries["Create Profile"].text
			if profile_name.length < 1
				AllTimers.comment_response("You must enter at least one character for the Profile Name.")
			elsif all_profile_names.include?(profile_name.downcase)
				AllTimers.comment_response("You already have a profile with this name. Choose a different name.\nProfiles are case-insensitive (example if you have a profile named \"test\" you can't create one named \"Test\".")
			else
				File.open("Timers Profile #{profile_name}.txt", "w")
				@@profile_menu.append_text("#{profile_name}")
				@entries["Create Profile"].text = ""
				@@profile_menu.set_active(@@profile_menu.model.iter_n_children - 1)
			end
		end
		
		@buttons["Save"].signal_connect("clicked") do
			AllTimers.save_data_to_profile
		end

		row = -1
		@all_settings.each{ |setting|
			column = -1
			grid1.attach(@labels[setting], column += 1, row += 1, 1, 1)
			grid1.attach(@entries[setting], column += 1, row, 1, 1)
			grid1.attach(@buttons[setting], column += 1, row, 1, 1)
		}

		column = -1
		grid1.attach(@labels["Load Profile"], column += 1, row += 1, 1, 1)
		grid1.attach(@@profile_menu, column += 1, row, 1, 1)
		grid1.attach(@buttons["Default Profile"], column += 1, row, 1, 1)
		grid1.attach(@buttons["Save"], column += 1, row, 1, 1)
	end

	def populate_page(default, save_data, name)
		set_default_text_display

		grid1 = @@tab_grids[name]["Grid 1"]
		grid2 = @@tab_grids[name]["Grid 2"]
		grid3 = @@tab_grids[name]["Grid 3"]
		grid4 = @@tab_grids[name]["Grid 4"]
		grid5 = @@tab_grids[name]["Grid 5"]
		grid6 = @@tab_grids[name]["Grid 6"]
		all_grids = [ grid1, grid2, grid3, grid4, grid5, grid6 ]

		if name == "Customize"
			save_data[@@spell_number] = {} if save_data[@@spell_number].nil?
			save = save_data[@@spell_number]
		else
			save = save_data
		end

		row = -1
		grid = all_grids.shift if @radios.count > 0
		@radios.each{ |key,value|
			row += 1
			column = -1
			value.each{ |radio_name,radio_button|
				grid.attach(radio_button, column += 1, row, 1, 1)
			}
		}
		
		if name == "Default Settings"
			column = -1
			row += 1
			grid = all_grids.shift

			@check_boxes.each{ |setting,checkbox|
				if setting =~ /Spells|Cooldowns|Buffs|Debuffs/
					checkbox.set_tooltip_text(@tooltips[setting])
					activated = save[setting] ? save[setting] : default[setting]
					if activated == "Yes"
						checkbox.active = true
					else
						checkbox.active = false
					end
					grid.attach(checkbox, column += 1, row, 1, 1)
				end
			}
		end
		
		row = 0
		grid = all_grids.shift
		@all_settings.each{ |setting|
			if setting == "Text Display"
				@buttons[setting] = Gtk::Button.new(:label => "Default: #{@default_text_display}")
			else
				@buttons[setting] = Gtk::Button.new(:label => "Default: #{default[setting]}")
			end
			
			@buttons[setting].signal_connect("clicked") do
				if setting == "Text Display"
					@entries[setting].text = @default_text_display
				else
					if @entries.has_key?(setting)
						@entries[setting].text = default[setting]
					elsif @spin_buttons.has_key?(setting)
						@spin_buttons[setting].value = default[setting]
					end
				end
			end

			@labels[setting] = Gtk::Label.new(setting)
			@labels[setting].set_tooltip_text(@tooltips[setting])

			if setting == "Text Display"
				@entries[setting].text = @@bar_info[@@current_win][@@spell_number]["Label Text"]
			else
				if @entries.has_key?(setting)
					@entries[setting].text = save[setting] ? save[setting] : default[setting]
				elsif @spin_buttons.has_key?(setting)
					@spin_buttons[setting].value = save[setting] ? save[setting].to_i : default[setting].to_i
				end
			end

			column = -1
			grid.attach(@labels[setting], column += 1, row += 1, 1, 1)
			grid.attach(Gtk::Label.new("     "), column += 1, row, 1, 1)
			if @entries.has_key?(setting)
				grid.attach(@entries[setting], column += 1, row, 1, 1)
			elsif @spin_buttons.has_key?(setting)
				grid.attach(@spin_buttons[setting], column += 1, row, 1, 1)
			end
			grid.attach(Gtk::Label.new("     "), column += 1, row, 1, 1)
			grid.attach(@buttons[setting], column += 1, row, 1, 1)
		}
		
		@entries.each{ |setting,value| value.set_tooltip_text(@tooltips[setting]) }
		@spin_buttons.each{ |setting,value| value.set_tooltip_text(@tooltips[setting]) }
		@buttons.each{ |setting,value| value.set_tooltip_text("Click to change this setting back to default.") }
		
		if name == "Customize" && @@spell_number.to_i >= 1 && @@spell_number.to_i <= 100
			tooltip = "Enter the game line that triggers the creation of this bar.\n\nNOTE: This uses regex information. Here is a brief rundown of regex if you are not familiar with it:\n\nRegex can be used to capture just part of a game line. For example you can enter just \"waves to you\" to trigger the bar creation when ANYONE waves at you.\n\nYou can also enter \"Dreaven waves at you.\" to have it trigger specifically when Dreaven waves at you.\n\nYou can ignore entire chunks of game lines by using .*\n\nFor example you can enter \"A kobold swings .* at you!\" and it would trigger no matter what the kobold is swinging at you.\n\nSome special characters (. * \\ etc) work differently in a regex and the script won't recognize them in a game line unless you specifically escape them by putting a \\ in front of the special character.\n\nFor example * means 0 or more in a regex, so if a game line has a * in it and you want the script to recognize it as a *, you would need to put \\* in the game line.\n\nIf you are unsure which special characters need to be escaped then you can just escape all special characters, nothing bad happens if you escape a special character that doesn't need to be escaped."
			@entries["Game Line"] = Gtk::Entry.new
			@entries["Game Line"].text = save["Game Line"] ? save["Game Line"] : default["Game Line"]
			@entries["Game Line"].set_tooltip_text(tooltip)
			@labels["Game Line"] = Gtk::Label.new("Game Line:")
			@labels["Game Line"].set_tooltip_text(tooltip)
			
			tooltip = "Enter the duration in seconds for this Custom bar when it is created."
			adjustment = Gtk::Adjustment.new(0, 1, 90000, 1, 5, 0)
			@spin_buttons["Duration"] = Gtk::SpinButton.new(adjustment, 1, 0)
			@spin_buttons["Duration"].value = save["Duration"] ? save["Duration"].to_i : default["Duration"].to_i
			@spin_buttons["Duration"].set_tooltip_text(tooltip)
			@labels["Duration"] = Gtk::Label.new("Duration:")
			@labels["Duration"].set_tooltip_text(tooltip)
			
			column = -1
			grid.attach(@labels["Game Line"], column += 1, row += 1, 1, 1)
			grid.attach(Gtk::Label.new("     "), column += 1, row, 1, 1)
			grid.attach(@entries["Game Line"], column += 1, row, 1, 1)
			column = -1
			grid.attach(@labels["Duration"], column += 1, row += 1, 1, 1)
			grid.attach(Gtk::Label.new("     "), column += 1, row, 1, 1)
			grid.attach(@spin_buttons["Duration"], column += 1, row, 1, 1)
		end

		if @check_boxes.count > 0
			column = -1
			row += 1
			grid = all_grids.shift

			@check_boxes.each{ |setting,checkbox|
				checkbox.set_tooltip_text(@tooltips[setting])
				activated = save[setting] ? save[setting] : default[setting]
				if activated == "Yes"
					checkbox.active = true
				else
					checkbox.active = false
				end
				grid.attach(checkbox, column += 1, row, 1, 1)
			}
		end
		
		if name == "Window Settings"
			grid = all_grids.shift
			window_labels = {}
			window_entries = {}
			new_settings = [ "Create Window", "Delete Window", "Modify Window" ]
			window_tooltips = {
				"Create Window" => "Enter name of new window you want to create.\n\nName must be at least one character long and you can't have duplicate window names.\n\nClick \"Create Window\" button to the right when ready.",
				
				"Delete Window" => "WARNING: DELETING A WINDOW WILL DELETE ALL SETTINGS ASSOCIATED FOR THAT WINDOW.\n\nAlso script will need to be restarted after deleting a window.\n\nEnter the name of the window you want to delete.\n\nClick \"Delete Window\" button to the right when ready.",
				
				"Modify Window" => "Choose which window you want to modify.\n\nAll settings in the Customize, Default Settings, Window Settings, and Other/Hidden Bars tabs will be specific to the current window.",
			}
			new_settings.each{ |new|
				window_labels[new] = Gtk::Label.new("#{new}     ")
				window_entries[new] = Gtk::Entry.new
				window_labels[new].set_tooltip_text(window_tooltips[new])
				window_entries[new].set_tooltip_text(window_tooltips[new])
				@buttons[new] = Gtk::Button.new(:label => new)
			}
			@buttons.delete("Modify Window")
			
			@buttons["Create Window"].set_tooltip_text("Enter name of new window you want to create to the left.\n\nName must be at least one character long and you can't have duplicate window names.\n\nClick this button when ready.")
			
			@buttons["Delete Window"].set_tooltip_text("WARNING: DELETING A WINDOW WILL DELETE ALL SETTINGS ASSOCIATED FOR THAT WINDOW.\n\nAlso script will need to be restarted after deleting a window.\n\nEnter the name of the window you want to delete the left.\n\nClick this button when ready.")

			@@windows_menu = Gtk::ComboBoxText.new
			@@all_windows.each{ |name,window| @@windows_menu.append_text(name) }
			AllTimers.set_menu_active(@@windows_menu, @@current_win)
			
			@@windows_menu.set_tooltip_text("Choose which window you want to modify.\n\nAll settings in the Customize, Default Settings, Window Settings, and Other/Hidden Bars tabs will be specific to the current window.")
			
			grid.attach(Gtk::Label.new, 0, 5, 1, 1)
			grid.attach(window_labels["Create Window"], 0, 6, 1, 1)
			grid.attach(window_entries["Create Window"], 1, 6, 1, 1)
			grid.attach(@buttons["Create Window"], 2, 6, 1, 1)
			grid.attach(window_labels["Delete Window"], 0, 7, 1, 1)
			grid.attach(window_entries["Delete Window"], 1, 7, 1, 1)
			grid.attach(@buttons["Delete Window"], 2, 7, 1, 1)
			grid.attach(window_labels["Modify Window"], 0, 8, 1, 1)
			grid.attach(@@windows_menu, 1, 8, 1, 1)
			grid.attach(Gtk::Label.new, 0, 9, 1, 1)
			
			@@windows_menu.signal_connect("changed") do |widget|
				@@current_win = widget.active_text
				AllTimers.set_window_title(@@current_win)
				AllTimers.create_customize_tab(@@spell_number)
				AllTimers.create_default_tab
				save = @@window_load_save_data[@@current_win]
				@all_settings.each{ |setting|
					if @entries.has_key?(setting)
						@entries[setting].text = save[setting] ? save[setting] : default[setting]
					elsif @spin_buttons.has_key?(setting)
						@spin_buttons[setting].value = save[setting] ? save[setting].to_i : default[setting].to_i
					end
				}
				@check_boxes.each{ |setting,checkbox| 
					activated = save[setting] ? save[setting] : default[setting]
					if activated == "Yes"
						checkbox.active = true
					else
						checkbox.active = false
					end
				}
				AllTimers.get_current_window_positon
			end
			
			@buttons["Create Window"].signal_connect("clicked") do
				win_name = window_entries["Create Window"].text
				if win_name.length < 1
					AllTimers.comment_response("You must enter at least one character for the Window Name.")
				elsif @@all_windows.has_key?(win_name)
					AllTimers.comment_response("You already have a window with this name. Choose a different name.")
				else
					@@windows_menu.append_text(win_name)
					AllTimers.create_new_window(win_name)
					window_entries["Create Window"].text = ""
					@@windows_menu.set_active(@@windows_menu.model.iter_n_children - 1)
					@@save_file_data = true
				end
			end
			
			@buttons["Delete Window"].signal_connect("clicked") do
				win_name = window_entries["Delete Window"].text
				if win_name == "Main"
					AllTimers.comment_response("You cannot delete the Main window.")
				else
					needed_item = nil
					@@windows_menu.model.each{ |model, path, iter|
						if win_name == @@windows_menu.model.get_value(iter, 0)
							needed_item = iter
							break
						end
					}
					if needed_item
						@@all_windows[win_name].close
						@@all_windows.delete(win_name)
						@@window_load_save_data.delete(win_name)
						@@windows_menu.set_active(0)
						@@bar_load_save_data[win_name] = nil
						@@default_load_save_data[win_name] = nil
						@@window_load_save_data[win_name] = nil
						@@bar_info[win_name] = nil
						window_entries["Delete Window"].text = ""
						@@windows_menu.model.remove(needed_item)
						@@save_file_data = true
					else
						AllTimers.comment_response("The Window Name you entered does not exist. Enter the exact Window Name (case sensitive) and try again.")
					end
				end
			end
			
			grid = all_grids.shift			
			adjustment = Gtk::Adjustment.new(0, -1000, 5000, 1, 5, 0)
			@@position_spin_buttons["Horizontal"] = Gtk::SpinButton.new(adjustment, 1, 0)
			
			adjustment = Gtk::Adjustment.new(0, -1000, 5000, 1, 5, 0)
			@@position_spin_buttons["Vertical"] = Gtk::SpinButton.new(adjustment, 1, 0)
			
			@@position_spin_buttons["Horizontal"].signal_connect("value-changed") do
				@@all_windows[@@current_win].move(@@position_spin_buttons["Horizontal"].value, @@position_spin_buttons["Vertical"].value)
			end
			
			@@position_spin_buttons["Vertical"].signal_connect("value-changed") do
				@@all_windows[@@current_win].move(@@position_spin_buttons["Horizontal"].value, @@position_spin_buttons["Vertical"].value)
			end
			
			horizontal_label = Gtk::Label.new("Horizontal position     ")
			vertical_label = Gtk::Label.new("Vertical position     ")

			tooltip = "Enter the Horizontal position you want for the current window.\n\nMousewheel up/down and arrow keys up/down change the value by 1.\nPageUp/PageDown keys change the value by 5"
			
			horizontal_label.set_tooltip_text(tooltip)
			@@position_spin_buttons["Horizontal"].set_tooltip_text(tooltip)
			
			tooltip = "Enter the Vertical position you want for the current window.\n\nMousewheel up/down and arrow keys up/down change the value by 1.\nPageUp/PageDown keys change the value by 5"
			
			vertical_label.set_tooltip_text(tooltip)
			@@position_spin_buttons["Vertical"].set_tooltip_text(tooltip)

			grid.attach(horizontal_label, 0, 1, 1, 1)
			grid.attach(@@position_spin_buttons["Horizontal"], 1, 1, 1, 1)
			grid.attach(vertical_label, 0, 2, 1, 1)
			grid.attach(@@position_spin_buttons["Vertical"], 1, 2, 1, 1)
			grid.attach(Gtk::Label.new, 0, 3, 1, 1)
			grid = all_grids.shift
		end
		
		column = -1
		button_names = [ "Save", "All Default" ]
		grid = all_grids.shift
		button_names.each{ |button_name|
			@buttons[button_name] = Gtk::Button.new(:label => button_name)
			grid.attach(@buttons[button_name], column += 1, 4, 1, 1)
		}

		@buttons["Save"].set_tooltip_text("Click to save and apply the current settings.\n\nSettings are saved to a file on your computer's hard drive when you close the main window, change profiles, or click the \"Save\" button in the Profiles tab.")
		@buttons["All Default"].set_tooltip_text("Click to change all settings for this bar back to default settings.")

		@buttons["Save"].signal_connect("clicked") do
			if @entries.count > 0
				@entries.each{ |setting,value|
					save[setting] = @entries[setting].text if @entries[setting].text.length > 0
						
					if setting == "Text Display"
						@@bar_info[@@current_win][@@spell_number] = {} if @@bar_info[@@current_win][@@spell_number].nil?
						@@bar_info[@@current_win][@@spell_number]["Label Text"] = save[setting] if save[setting]
						text = @@bar_info[@@current_win][@@spell_number]["Label Text"]
						save.delete(setting) if text == @@bar_info[@@current_win][@@spell_number]["Text Numbers Only"] || text == @@bar_info[@@current_win][@@spell_number]["Text Name Only"] || text == @@bar_info[@@current_win][@@spell_number]["Text Both"]
					end
				}
			end

			if @spin_buttons.count > 0
				@spin_buttons.each{ |setting,value| save[setting] = @spin_buttons[setting].value.to_i.to_s }
			end
			
			if @radios.count > 0
				@radios.each{ |setting,radio|
					radio.each{ |radio_label,value| save[setting] = radio_label if value.active? }
				}
			end
			
			if @check_boxes.count > 0
				@check_boxes.each{ |setting,checkbox|
					if checkbox.active?
						save[setting] = "Yes"
					else
						save[setting] = "No"
					end
				}
			end
			
			save = nil if save.empty?
			if name == "Customize"
				AllTimers.bar_color(@@spell_number, @@current_win)
				AllTimers.label_font_color(@@spell_number, @@current_win)
				AllTimers.get_list_of_hidden_bars
			elsif name == "Default Settings"
				AllTimers.delete_bar_duplicates(@@current_win)
				AllTimers.update_default_values(@@current_win)
				set_default_text_display
				@@bar_info[@@current_win].each{ |spell_num,value|
					AllTimers.bar_color(spell_num, @@current_win)
					AllTimers.label_font_color(spell_num, @@current_win)
				}
				AllTimers.create_customize_tab(@@spell_number)
				AllTimers.get_list_of_hidden_bars
			elsif name == "Window Settings"
				AllTimers.update_default_values(@@current_win)
				AllTimers.update_window(@@current_win)
				@@bar_info[@@current_win].each{ |spell_num,value|
					AllTimers.update_bar_widths(@@bar_info[@@current_win][spell_num]["Progress Bar"], @@current_win)
				}
			end
			if !@@all_windows[@@current_win].visible? && !@check_boxes["Hide When Empty"].active?
				if !@@all_windows[@@current_win].visible?
					@@all_windows[@@current_win].show_all
					position = @@window_load_save_data[@@current_win]["Window Position"] ? @@window_load_save_data[@@current_win]["Window Position"] : @@window_originals["Window Position"]
					position = eval(position)
					@@all_windows[@@current_win].move(position[0].to_i, position[1].to_i)
				end
				@@main_grid[@@current_win].queue_draw
				@@all_windows[@@current_win].show_all
			end
			@@save_file_data = true
			@@redo_bar_order = true
		end
		
		@buttons["All Default"].signal_connect("clicked") do
			@radios["Text Display"]["Name Only"].active = true if @radios["Text Display"]
			if @check_boxes.count > 0
				@check_boxes.each{ |setting,checkbox|
					if default[setting] == "Yes"
						@check_boxes[setting].active = true
					else
						@check_boxes[setting].active = nil
					end
				}
			end
			@all_settings.each{ |setting|
				if setting == "Text Display"
					@entries[setting].text = @default_text_display
				else
					if @entries.has_key?(setting)
						@entries[setting].text = default[setting]
					elsif @spin_buttons.has_key?(setting)
						@spin_buttons[setting].value = default[setting]
					end
				end
			}
		end
	end
end

$timers_script_vars_1 = script.vars[1]
$timers_script_vars_2 = script.vars[2]

AllTimers.create_profile_menu
AllTimers.window_var
AllTimers.load_text_data
AllTimers.restart_window("Main")

AllTimers.comment_response("Click on any bar to open the Setup menu.\nClose any window or stop the script to close all open windows.\nA list of available colors for bar colors and text colors can be found here:\nwww.w3.org/wiki/CSS/Properties/color/keywords")

class Watching < AllTimers
	while line = get
		@@all_windows.each{ |win_name,window|
			@@bar_load_save_data[win_name].each{ |spell_number,_|
				if line =~ /#{@@bar_load_save_data[win_name][spell_number]["Game Line"]}/ && @@bar_load_save_data[win_name][spell_number]["Game Line"].length > 0
					spell_name = @@bar_load_save_data[win_name][spell_number]["Text Display"] ? @@bar_load_save_data[win_name][spell_number]["Text Display"] : "Custom"
					AllTimers.create_bar(spell_number, spell_name, win_name, "Custom")
					@@redo_bar_order = true
				end
			}
		}
	end
end