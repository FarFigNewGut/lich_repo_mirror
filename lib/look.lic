=begin
	
	Script to look in, on, behind, and under everything inside a room.
	Can start the script with a variable to only look at that item.
	
	Squelches messages so your screen doesn't get overwhelmed.
	
	author: Hazado
	game: Gemstone
	tags: look
	version: 0.3

=end
silence_me
$temp = Array.new
def squelch
	lookaction  = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if $temp.any? {|s| s == server_string}
			nil
			next
		end
		$temp.push(server_string)
		case server_string
		when /There is nothing.*there.|You see nothing unusual.|That is closed./
			nil
		else
			server_string
		end
	}
	DownstreamHook.remove('looksquelch')
	DownstreamHook.add('looksquelch', lookaction)
end

squelch
before_dying {DownstreamHook.remove('looksquelch')}

stuff = GameObj.room_desc
if GameObj.loot
	stuff += GameObj.loot
end

stuff.delete_if { |x| x.noun == "disk" }

if script.vars[1]
	stuff = Array.new
	crap = Array.new
	status_tags
	clear
	put "look #{script.vars[1]}"
	end_time = Time.now + 1
	while Time.now < end_time
		sleep 0.1
		while line = get?
			crap.concat(line.scan(/<a exist="[^"]+" noun="[^"]+">.*?<\/a>/))
			if line =~ /#{script.vars[1]}|You see nothing unusual\./
				end_time -= 1
				break
			end
		end
	end
	status_tags
	for xml_obj in crap
		xml_obj =~ /<a exist="([^"]+)" noun="([^"]+)">(.*?)<\/a>/
		new_obj = GameObj.new($1, $2, $3)
		unless GameObj.pcs.any? { |pc| pc.id == new_obj.id } || stuff.any? {|s| s.id == new_obj.id}
			stuff.push(new_obj)
		end
	end
	["in", "on", "under", "behind"].each do |y|
		fput "l #{y} #{script.vars[1]}"
	end
	fput "read #{script.vars[1]}"
end
stuff.each do |x|
	crap = Array.new
	status_tags
	clear
	put "look ##{x.id}"
	end_time = Time.now + 1
	while Time.now < end_time
		sleep 0.1
		while line = get?
			crap.concat(line.scan(/<a exist="[^"]+" noun="[^"]+">.*?<\/a>/))
			if line =~ /#{x.noun}|You see nothing unusual\./
				end_time -= 1
				break
			end
		end
	end
	status_tags
	for xml_obj in crap
		xml_obj =~ /<a exist="([^"]+)" noun="([^"]+)">(.*?)<\/a>/
		new_obj = GameObj.new($1, $2, $3)
		unless GameObj.pcs.any? { |pc| pc.id == new_obj.id } || stuff.any? {|s| s.id == new_obj.id}
			stuff.push(new_obj)
			stuff.delete_if { |x| x.noun == "disk" }
		end
	end
	["in", "on", "under", "behind"].each do |y|
		fput "l #{y} ##{x.id}"
	end
	fput "read ##{x.id}"
end
pause 0.5