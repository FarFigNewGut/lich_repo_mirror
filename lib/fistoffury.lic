=begin
    Fist of Fury UAC Script
    Advanced combat automation with dynamic stance management and targeted attacks for UAC
    
    FEATURES:
    1. Combat Flow
       - Starts with Surge of Strength if encumbrance is > 10%
       - Attempts sweep on standing targets
       - Uses Weapon Fury as first attack
       - Main attack sequence: jab -> followup -> kick combo
       
    2. Stance Management
       - Offensive stance for single target
       - Advancing stance for two targets
       - Forward stance for three or more targets
       
    3. Attack Targeting
       - Uses followup attacks immediately when available
       - In excellent position:
         * Attempts targeted kicks in one line:
           1. Left leg to keep target prone
           2. Neck for insta kills
           3. Regular kick if leg or neck is unavailable
    
    EXIT CONDITIONS:
    - Target dies
    - Target leaves
    - More than MAX_TARGETS present (you set this number manually in the script below - default is 3)
    
    Author: Ecnew
    Tags: UAC, unarmed, fury
    Version: 1.0
=end

PRONE_REGEX = /sleeping|webbed|stunned|kneeling|sitting|^lying|prone|frozen|held in place/
MAX_TARGETS = 3

def check_target_valid?
  # Exit if no target or target invalid
  if !GameObj.target || !GameObj.target.id || GameObj.target.id.empty?
    echo "Target lost! Exiting..."
    exit
  end
  
  # Exit if target left or dead
  if GameObj.target.status =~ /gone|dead/
    echo "Target is gone! Exiting..."
    exit
  end
  true
end

def check_combat_ready?
  check_target_valid?
  
  # Exit if too many targets
  if GameObj.targets.length > MAX_TARGETS
    echo "Too many targets! Exiting..."
    exit
  end
  true
end

def get_stance
  case GameObj.targets.length
    when 1 then "offensive"   # offensive for single target
    when 2 then "advance"     # advancing for two targets
    when 3 then "forward"     # forward for three targets
    else "defensive"          # defensive when over max targets setting
  end
end

def adjust_stance
  check_target_valid?
  desired_stance = get_stance
  waitrt?
  fput "stance #{desired_stance}" unless percentstance == case desired_stance
    when "offensive" then 0
    when "advance" then 20
    when "forward" then 40
    else 100
  end
end

def try_surge
  if CMan.available?("Surge of Strength") && !Spell[9699].active? && checkstamina > 50 && percentencumbrance > 10
    waitrt?
    fput "cman surge"
  end
end

def try_sweep
  return unless CMan.available?("Sweep") && 
                !Spell[9699].active? && 
                checkstamina > 50 && 
                check_combat_ready? &&
                GameObj.target.status !~ PRONE_REGEX
  waitrt?
  adjust_stance
  check_target_valid?
  fput "cman sweep ##{GameObj.target.id}"
  waitrt?
end

def execute_attack(action)
  return nil unless check_combat_ready?
  waitrt?
  adjust_stance
  
  check_target_valid?
  if action == 'kick' && @current_position == :excellent
    # Try targeted kick first, then regular kick
    fput "kick ##{GameObj.target.id} left leg\n kick ##{GameObj.target.id} neck\n kick ##{GameObj.target.id}"
  else
    fput "#{action} ##{GameObj.target.id}"
  end
  
  result = { position: :continue, followup: nil }
  
  while line = get
    # Check target validity after each line
    check_target_valid?
    
    if line =~ /Strike leaves foe vulnerable to a followup (\w+) attack/
      result[:followup] = $1
    elsif line =~ /excellent position/
      result[:position] = :excellent
    elsif line =~ /good positioning/
      result[:position] = :good
    elsif line =~ /dies|death cry|slumps over|falls to the ground dead/
      return nil
    end
    break if line =~ /Roundtime/
  end
  
  check_target_valid?
  result
end

def combat_sequence
  return unless check_combat_ready?
  
  try_surge
  try_sweep
  
  if Weapon.known?("Fury") && Weapon.available?("Fury") && checkstamina > 50 && check_combat_ready?
    waitrt?
    adjust_stance
    fput "weapon fury ##{GameObj.target.id}"
    while line = get
      break if !check_combat_ready?
      break if line =~ /Fury is still in cooldown|Distracted|recentering yourself|Your furious assault|awkward proposition|little bit late|still stunned|too injured|what?|seconds/i
    end
    waitrt?
    return unless check_combat_ready?
  end
  
  # Track position state between attacks
  @current_position = :normal
  
  # Main combat loop
  begin
    loop do
      return unless check_combat_ready?
      
      # Try sweep before jab if target not prone
      try_sweep if GameObj.target.status !~ PRONE_REGEX
      
      result = execute_attack('jab')
      return unless result
      
      if result[:followup]
        followup_result = execute_attack(result[:followup])
        return unless followup_result
        # Try sweep after followup if target not prone
        try_sweep if GameObj.target.status !~ PRONE_REGEX
        next
      end
      
      # Update position state
      @current_position = result[:position]
      
      if @current_position == :excellent
        begin
          loop do
            return unless check_combat_ready?
            
            # Try sweep before kick if target not prone
            try_sweep if GameObj.target.status !~ PRONE_REGEX
            
            kick_result = execute_attack('kick')
            return unless kick_result
            
            if kick_result[:followup]
              followup_result = execute_attack(kick_result[:followup])
              return unless followup_result
              # Try sweep after followup if target not prone
              try_sweep if GameObj.target.status !~ PRONE_REGEX
              next
            end
            
            # Update position state
            @current_position = kick_result[:position]
            next if @current_position == :excellent
            break
          end
        rescue
          return
        end
      end
    end
  rescue
    return
  end
end

# Main loop
loop do
  combat_sequence
  sleep 0.1
end
