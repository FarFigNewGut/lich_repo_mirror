=begin
    Fist of Fury UAC Script
    Advanced combat automation with dynamic stance management and targeted attacks for UAC
    
    FEATURES:
    1. Combat Flow
       - Starts with Surge of Strength if encumbrance is > configured threshold
       - Attempts sweep on standing targets
       - Main attack sequence:
         * Always tries Weapon Fury first if available
         * In excellent position:
           - Uses targeted kicks
         * Otherwise:
           - Uses jabs and followups
       
    2. Stance Management
       - Dynamic stance based on number of targets:
         * Single target: Offensive stance
         * Two targets: Advance stance
         * Three targets: Forward stance
         * More than max targets: Defensive stance and exit
       - Efficient stance switching (only changes when needed)
       
    3. Position-Based Actions
       - Any Position:
         * Tries Weapon Fury first
       - Good Position:
         * Falls back to jabs after fury
       - Excellent Position:
         * Optional hide before kicks
       
    4. Safety Features
       - Target validation between actions
       - Proper error handling and recovery
       - Switches to defensive stance on exit
       - Roundtime safety checks between actions
       
    5. Customizable Settings (;fist setup)
       - Max targets allowed (1-10)
       - Encumbrance threshold for Surge
       - Stamina threshold for abilities
       - Kick target priority (configurable locations)
       - Hide before kicks option
    
    EXIT CONDITIONS:
    - Target dies
    - Target leaves
    - More than MAX_TARGETS present (use ;fist setup to choose 1-10, default is 3)
    
    USAGE:
    ;fist                    - Start combat
    ;fist setup             - Configure settings
    ;fist help              - Show help
    
    CHANGELOG:
    v1.2 (2025-01-05)
    - Added Weapon Fury integration:
      * Checks at start of every round
      * Used in good/excellent position
      * More aggressive usage
    - Improved combat flow:
      * Uses followup kicks regardless of position
      * Targeted kicks in excellent position
      * Better position-based action selection
    - Added safety improvements
    - Added configuration options
    - Enhanced position handling
    
    v1.1 (2025-01-04)
    - Added basic settings menu
    - Added max targets configuration
    - Fixed stance management
    
    v1.0 (2025-01-04)
    - Initial release
    - Basic UAC combat functionality
    - Dynamic stance switching
    - Targeted kicks
    
    Author: Ecnew
    Tags: UAC, unarmed, fury
    Version: 1.2
=end

# Default settings
DEFAULT_SETTINGS = {
  'max_targets' => 3,
  'encumbrance_threshold' => 10,
  'stamina_threshold' => 50,
  'kick_targets' => ['left leg', 'neck'],
  'stance_offensive' => 0,
  'stance_advance' => 20,
  'stance_forward' => 40,
  'hide_before_kick' => false
}

def initialize_settings
  DEFAULT_SETTINGS.each do |key, value|
    CharSettings[key] = value unless CharSettings[key]
  end
end

def show_current_settings
  respond
  respond "FistOfFury Settings"
  respond "-----------------"
  respond "1. Max targets: #{CharSettings['max_targets']}"
  respond "2. Encumbrance threshold for Surge: #{CharSettings['encumbrance_threshold']}%"
  respond "3. Stamina threshold for abilities: #{CharSettings['stamina_threshold']}%"
  respond "4. Kick target priority: #{CharSettings['kick_targets'].join(', ')}"
  respond "5. Stance percentages:"
  respond "   Single target: #{CharSettings['stance_offensive']}%"
  respond "   2 targets: #{CharSettings['stance_advance']}%"
  respond "   More than 2: #{CharSettings['stance_forward']}%"
  respond "6. Hide before kick: #{CharSettings['hide_before_kick'] ? 'Yes' : 'No'}"
  respond
  respond "Enter ;send and the setting number to change (1-6), or 'exit' to keep current values:"
end

def update_setting(choice)
  case choice
  when '1'
    respond "Enter new max targets (1-10):"
    result = matchtimeout(10, "1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
    CharSettings['max_targets'] = result.to_i if result
  when '2'
    respond "Enter new encumbrance threshold (0-100):"
    result = matchtimeout(10, /^\d+$/)
    CharSettings['encumbrance_threshold'] = [[result.to_i, 0].max, 100].min if result
  when '3'
    respond "Enter new stamina threshold (0-100):"
    result = matchtimeout(10, /^\d+$/)
    CharSettings['stamina_threshold'] = [[result.to_i, 0].max, 100].min if result
  when '4'
    respond "Enter kick targets in order, separated by comma (e.g., 'left leg, neck'):"
    result = matchtimeout(10, /^[a-zA-Z, ]+$/)
    CharSettings['kick_targets'] = result.split(',').map(&:strip) if result
  when '5'
    respond "Enter single target stance stance percentage (0,20,40,60,80,100):"
    result = matchtimeout(10, "0", "20", "40", "60", "80", "100")
    if result
      CharSettings['stance_offensive'] = result.to_i
      respond "Enter 2 target stance percentage (0,20,40,60,80,100):"
      result = matchtimeout(10, "0", "20", "40", "60", "80", "100")
      if result
        CharSettings['stance_advance'] = result.to_i
        respond "Enter more than 2 targets stance percentage (0,20,40,60,80,100):"
        result = matchtimeout(10, "0", "20", "40", "60", "80", "100")
        if result
          CharSettings['stance_forward'] = result.to_i
        end
      end
    end
  when '6'
    respond "Hide before kick? (yes/no):"
    result = matchtimeout(10, "yes", "no")
    CharSettings['hide_before_kick'] = (result == "yes") if result
  end
end

if script.vars[1] =~ /help|setup/i
  if script.vars[1] =~ /setup/i
    initialize_settings
    loop do
      show_current_settings
      choice = matchtimeout(30, /^[1-6]$/, "exit")
      break if choice == "exit"
      update_setting(choice)
    end
    respond "Settings saved!"
    exit
  else
    respond
    respond 'FistOfFury - Combat Script'
    respond 'Usage:'
    respond '  ;FistOfFury               - Start combat'
    respond '  ;FistOfFury setup         - Open settings menu'
    respond '  ;FistOfFury help          - Show this message'
    respond
    exit
  end
end

PRONE_REGEX = /sleeping|webbed|stunned|kneeling|sitting|^lying|prone|frozen|held in place/
MAX_TARGETS = (Vars.op['flee_count'] || CharSettings['max_targets'] || 3).to_i

fput "target random" unless GameObj.target

def check_target_valid?
  # Exit if no target or target invalid
  if !GameObj.target || !GameObj.target.id || GameObj.target.id.empty?
    echo "Target lost! Exiting..."
    fput "stance defensive"
    exit
  end
  
  # Exit if target left or dead
  if GameObj.target.status =~ /gone|dead/
    echo "Target is gone! Exiting..."
    exit
  end
  true
end

def check_combat_ready?
  check_target_valid?
  
  # Exit if too many targets
  if GameObj.targets.length > MAX_TARGETS
    echo "Too many targets! Exiting..."
    exit
  end
  true
end

def get_stance
  case GameObj.targets.length
    when 1 then "offensive"   # offensive for single target
    when 2 then "advance"     # advancing for two targets
    when 3 then "forward"     # forward for three targets
    else "defensive"          # defensive when over max targets setting
  end
end

def current_stance
  # Wait briefly to ensure we get complete stance message
  pause 0.2
  case checkstance
    when /offensive/ then "offensive"
    when /advancing/ then "advance"
    when /forward/ then "forward"
    when /defensive/ then "defensive"
    else nil
  end
end

def adjust_stance
  check_target_valid?
  desired_stance = get_stance
  current = current_stance
  
  # Only change stance if we're not already in the desired stance
  # and we haven't tried to change stance in the last 2 seconds
  return if desired_stance == current || 
           (defined?(@last_stance_change) && Time.now - @last_stance_change < 2)
  
  safe_wait
  fput "stance #{desired_stance}"
  safe_wait
  @last_stance_change = Time.now
end

def safe_wait
  pause 0.1
  waitrt?
end

def try_surge
  if CMan.available?("Surge of Strength") && 
     !Spell[9699].active? && 
     checkstamina > CharSettings['stamina_threshold'] && 
     percentencumbrance > CharSettings['encumbrance_threshold']
    safe_wait
    fput "cman surge"
  end
end

def try_sweep
  return unless CMan.available?("Sweep") && 
                !Spell[9699].active? && 
                checkstamina > CharSettings['stamina_threshold'] && 
                check_combat_ready? &&
                GameObj.target.status !~ PRONE_REGEX
  adjust_stance
  check_target_valid?
  safe_wait
  fput "cman sweep ##{GameObj.target.id}"
  safe_wait
end

def try_weapon_fury
  if Weapon.known?("Fury") && 
     Weapon.available?("Fury") && 
     checkstamina > CharSettings['stamina_threshold'] && 
     check_combat_ready?
    adjust_stance
    safe_wait
    fput "weapon fury ##{GameObj.target.id}"
    safe_wait
    matchtimeout(10, /You draw back and take a slow, steady breath, recentering yourself for the fight\./)
    return true
  end
  return false
end

def execute_attack(action)
  return nil unless check_combat_ready?
  adjust_stance
  check_target_valid?
  
  if action == 'kick' && !@current_position == :excellent
    # Only do targeted kicks for regular kicks (not followups)
    # and only in excellent position
    return { position: :continue, followup: nil } unless @current_position == :excellent
    
    # Try targeted kicks in configured order
    CharSettings['kick_targets'].each do |target|
      if CharSettings['hide_before_kick']
        safe_wait
        fput "hide"
        safe_wait
      end
      safe_wait
      fput "kick ##{GameObj.target.id} #{target}"
      safe_wait
      check_target_valid?
    end
    
    # Fallback to regular kick
    if CharSettings['hide_before_kick']
      safe_wait
      fput "hide"
      safe_wait
    end
    safe_wait
    fput "kick ##{GameObj.target.id}"
    safe_wait
  else
    safe_wait
    fput "#{action} ##{GameObj.target.id}"
    safe_wait
  end
  
  result = { position: :continue, followup: nil }
  
  # Check for combat results
  while line = get
    check_target_valid?
    
    if line =~ /Strike leaves foe vulnerable to a followup (\w+) attack/
      result[:followup] = $1
    elsif line =~ /excellent positioning/
      result[:position] = :excellent
      @current_position = :excellent
    elsif line =~ /good positioning/
      result[:position] = :good
      @current_position = :good
    elsif line =~ /decent positioning/
      result[:position] = :decent
      @current_position = :decent
    elsif line =~ /dies|death cry|slumps over|falls to the ground dead/
      return nil
    end
    break if line =~ /Roundtime|\.\.\.wait/
  end
  
  check_target_valid?
  result
end

def combat_sequence
  return unless check_combat_ready?
  
  try_surge
  try_sweep
  
  # Initialize position tracking
  @current_position = :normal
  
  loop do
    return unless check_combat_ready?
    
    # Always try fury first if available
    next if try_weapon_fury
    
    # In excellent position, use kicks
    if @current_position == :excellent
      execute_attack("kick")
      next
    end
    
    # Execute primary attack if not in excellent position
    result = execute_attack("jab")
    return unless result
    
    # Handle followup attacks if available
    if result[:followup]
      # Always do followups (including kicks)
      followup_result = execute_attack(result[:followup])
      
      # Check position after followup
      if followup_result
        # Try fury if in good or excellent position
        if [:good, :excellent].include?(@current_position)
          next if try_weapon_fury
        end
        # Only do regular kicks in excellent position
        if @current_position == :excellent
          execute_attack("kick") unless result[:followup] == "kick"
          next
        end
      end
      
      next if followup_result
    end
    
    # Try fury if in good position
    if @current_position == :good
      next if try_weapon_fury
    end
  end
end

# Main loop
loop do
  combat_sequence
  sleep 0.1
end
