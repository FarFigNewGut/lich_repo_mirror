=begin
    
  Usage:
    ;use_urchins
      - checks URCHIN STATUS
      - updates UserVars.mapdb_use_urchins (boolean)
      - updates UserVars.mapdb_urchins_expire (expiration time as integer)
    
    ;use_urchins off
      - updates UserVars.mapdb_use_urchins to false
  
  Note: only uses urchins when go2 is running, 
    so it won't interfere with child2, ego2, official2, step2, or other movement scripts.

          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: travel, mapdb, go2, urchin
        required: Lich >= 4.6.4
         version: 2
=end
UserVars.mapdb_use_urchins = true if UserVars.mapdb_use_urchins.nil?;
UserVars.mapdb_urchins_expire = 0 if UserVars.mapdb_urchins_expire.nil?;
#------------------------------------------------------------------------------#
# script settings #
#------------------------------------------------------------------------------#
@script                     = script;
@script.want_downstream     = false;
@script.want_downstream_xml = true;
#------------------------------------------------------------------------------#
# quiet_command by LostRanger, modded a bit by Xanlin #
#------------------------------------------------------------------------------#
@script_name = script.name;
def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
def self.hook_cleanup(); [DownstreamHook, UpstreamHook].each{|provider| provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};  };end;
def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;
@quiet = false;
#------------------------------------------------------------------------------#
#@debug = false;
@debug = true;
@quiet = true;
#------------------------------------------------------------------------------#
# urchin status #
#------------------------------------------------------------------------------#
def self.urchin_status(run_quiet=@quiet);
  status        = false;
  expires       = nil;
  command       = "urchin status";
  start_pattern = /You currently have no access to the urchin guides.|You will have access to the urchin guides until/;
  quiet         = run_quiet;
  end_pattern   = /^(<popBold\/>)?<prompt/;
  include_end   = false;
  timeout       = 5;
  result        = self.quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  expires_pattern = /You will have access to the urchin guides until (?<expires>.*?)\./;
  result.each { |line|
    m = line.match(expires_pattern);
    if m;
      status = true;
      expires = Time.parse(m[:expires].gsub(/(\d+)\/(\d+)\/(\d+) (\d+:\d+:\d+) (.*?)$/, '\3-\1-\2 \4 \5'));
      UserVars.mapdb_use_urchins = true;
      UserVars.mapdb_urchins_expire = expires.to_i;
    end;
  };
  return status,expires;
end;

if script.vars[0] =~ /off/i
  if UserVars.mapdb_use_uchins == false
    respond "The option to use urchin guides in town is already off."
  else
    UserVars.mapdb_use_urchins = false;
    respond "The option to use urchin guides in town is now off."
  end
  exit
end

status, expires = self.urchin_status();
if status == true
  respond "Your urchin status is now set to expire on #{expires}."
else
  respond "It seems you don't curently have urchin access."
end