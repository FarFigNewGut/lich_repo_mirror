=begin
  Proof of concept for adding urchin shortcuts in mapdb.

  Currently:
    - only links endpoints together, not every room that you can use URCHIN GUIDE from.
    - adds links and rooms to the local mapdb, but doesn't save them.
    - must be run once per town to add them, unless you save your map on your own.

  Usage:
    ;use_urchins
      - checks URCHIN STATUS
      - updates UserVars.urchins_enable (boolean)
      - updates UserVars.urchins_expires (expiration time as integer)
      - If you can use urchins,
        and you haven't already scanned the current town recently or that scan was complete, will scan it.
        - creates a fake room to handle shortcuts, if it doesn't exist.

    ;use_urchins rescan
      - rescan for debugging
      - If you can use urchins, scans the current town.
        - creates a fake room to handle shortcuts, if it doesn't exist.

  To reset your local mapdb:
    ;e Map.reload

          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: travel, mapdb, go2, urchin
        required: Lich >= 4.6.4
         version: 1.0.0
=end
UserVars.urchins_enable  = false if UserVars.urchins_enable.nil?;
UserVars.urchins_expires = false if UserVars.urchins_expires.nil?;
UserVars.delete('urchins_towns') if UserVars.urchins_towns;
$urchins_towns   = {}    if $urchins_towns.nil?;
#------------------------------------------------------------------------------#
# script settings #
#------------------------------------------------------------------------------#
@script                     = script;
@script.want_downstream     = false;
@script.want_downstream_xml = true;
#------------------------------------------------------------------------------#
# quiet_command by LostRanger, modded a bit by Xanlin #
#------------------------------------------------------------------------------#
@script_name = script.name;
def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
def self.hook_cleanup(); [DownstreamHook, UpstreamHook].each{|provider| provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};  };end;
def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;
@quiet = false;
#------------------------------------------------------------------------------#
@debug = false;
@quiet = true;
#------------------------------------------------------------------------------#
# helpers #
#------------------------------------------------------------------------------#
def self.match_to_hash(match,downcase=false);
  (respond "not match data";return nil) unless match.class == MatchData;
  hash = Hash[match.names.map(&:to_sym).zip(match.captures.map(&:strip).map do |capture|
    capture =~ /\A[-+]?[0-9,]+\z/ ? capture.delete(',').to_i : (downcase ? capture.downcase : capture);
  end)];
  return hash;
end;
def self.d_cmd(cmd,text);
  return "<d cmd=\"#{cmd}\">#{text}</d>";
end;
#------------------------------------------------------------------------------#
# disambiguation tags #
#------------------------------------------------------------------------------#
urchin_tags = Hash.new;
# river's rest #
urchin_tags[10840] = 'urchin guide drawbridge';
urchin_tags[10949] = 'urchin guide pawn';
# illy #
urchin_tags[179]   = 'urchin guide empathguild';
urchin_tags[1439]  = 'urchin guide gemshop';
urchin_tags[13241] = 'urchin guide healer';
urchin_tags[644]   = 'urchin guide pawn';
urchin_tags[23]    = 'urchin guide bardguild';
urchin_tags[156]   = 'urchin guide briarstone';
urchin_tags[7]     = 'urchin guide moonglae';
urchin_tags[529]   = 'urchin guide shimmarglin';
# vaalor #
urchin_tags[10397] = 'urchin guide healer';
urchin_tags[10396] = 'urchin guide herbalist';
urchin_tags[3746]  = 'urchin guide justice';
urchin_tags[3544]  = 'urchin guide locksmithpool';
urchin_tags[10379] = 'urchin guide pawn';
#urchin_tags[ddd]   = 'urchin guide stable';
urchin_tags[10313] = 'urchin guide townhall';
urchin_tags[10376] = 'urchin guide clericguild';
urchin_tags[3510]  = 'urchin guide empathguild';
urchin_tags[3521]  = 'urchin guide warriorguild';
urchin_tags[3495]  = 'urchin guide wizardguild';
urchin_tags[3498]  = 'urchin guide helgreths';
urchin_tags[3519]  = 'urchin guide kingscourt';
urchin_tags[3483]  = 'urchin guide amaranthgate';
urchin_tags[3523]  = 'urchin guide annattogate';
urchin_tags[3490]  = 'urchin guide vermiliongate';
urchin_tags[3516]  = 'urchin guide victorygate';
#urchin_tags[ddd]   = 'urchin guide postoffice';
#urchin_tags[ddd]   = 'urchin guide postoffice';
# mist harbor #
urchin_tags[23807] = 'urchin guide collectibles';
urchin_tags[12306] = 'urchin guide pawn';
urchin_tags[21155] = 'urchin guide bardguild';
urchin_tags[19557] = 'urchin guide empathguild';
# landing #
urchin_tags[3785]  = 'urchin guide bounty';
urchin_tags[6321]  = 'urchin guide clericguild';
urchin_tags[7970]  = 'urchin guide debts';
urchin_tags[420]   = 'urchin guide guard';
urchin_tags[28256] = 'urchin guide stable';
urchin_tags[291]   = 'urchin guide westgate';
# solhaven #
urchin_tags[14358] = 'urchin guide chronomages';
urchin_tags[5719]  = 'urchin guide gemshop';
urchin_tags[5711]  = 'urchin guide pawn';
#urchin_tags[ddd]   = 'urchin guide stable';
urchin_tags[12815] = 'urchin guide weapons';
urchin_tags[27811] = 'urchin guide bardguild';
urchin_tags[1508]  = 'urchin guide empathguild';
urchin_tags[1550]  = 'urchin guide sorcererguild';
urchin_tags[3905]  = 'urchin guide marketbridge';
# icemule #
urchin_tags[3778]  = 'urchin guide bounty';
urchin_tags[2422]  = 'urchin guide gemshop';
urchin_tags[2400]  = 'urchin guide locksmithpool';
#urchin_tags[ddd]   = 'urchin guide stable';
urchin_tags[2408]  = 'urchin guide bardguild';
urchin_tags[2326]  = 'urchin guide clericguild';
urchin_tags[2388]  = 'urchin guide warriorguild';
urchin_tags[2412]  = 'urchin guide southgate';
urchin_tags[2386]  = 'urchin guide westgate';
#urchin_tags[ddd]   = 'urchin guide postoffice';
# cysaegir #
urchin_tags[17163] = 'urchin guide alchemy';
#urchin_tags[ddd]   = 'urchin guide stable';
urchin_tags[4653]  = 'urchin guide common';
#urchin_tags[ddd]   = 'urchin guide postoffice';
# teras #
#urchin_tags[ddd]  = 'urchin guide armor';
urchin_tags[12511] = 'urchin guide bounty';
urchin_tags[1885]  = 'urchin guide pawn';
urchin_tags[20884] = 'urchin guide temple';
urchin_tags[12543] = 'urchin guide clericguild';
urchin_tags[1874]  = 'urchin guide poorquarter';
# kraken's fall #
urchin_tags[28933] = 'urchin guide gemshop';
urchin_tags[28935] = 'urchin guide locksmith';
urchin_tags[28940] = 'urchin guide pawn';
urchin_tags[28897] = 'urchin guide catwalk';
urchin_tags[29033] = 'urchin guide portmaster';
#urchin_tags[ddd]  = 'urchin guide postoffice';
# add missing tags #
urchin_tags.each { |k,v|
  if !Room[k].tags.include?(v);
    Room[k].tags.push(v);
  end;
};
#------------------------------------------------------------------------------#
# urchin hideouts #
#------------------------------------------------------------------------------#
def self.urchin_rooms_by_title(title,town,tag);
  title = "[#{title}]" if title[0] != '[';
  rooms = Room.list.select{ |r|
    r.title.include?(title) and (r.location.nil? or r.location == '' or r.location =~ /#{town}|the Adventurer's Guild/);
  };
  if rooms.size == 0;
  rooms = Room.list.select{ |r|
    r.title.include?(title);
  };
  end;
  if rooms.size > 1;
    location_rooms = rooms.select{ |r| Room[Room[r.id].find_nearest_by_tag("town")].location.gsub(/the town of /,'') =~ /#{town}/ };
    if location_rooms.size > 0;
      rooms = location_rooms;
    end;
  end;
  if rooms.size > 1;
    tag_rooms = rooms.select { |r| r.tags.include?(tag)};
    if tag_rooms.size > 0;
      rooms = tag_rooms;
    end;
  end;
  return rooms;
end;
def self.new_urchin_room(town);
  id          = Map.get_free_id;
  title       = ["[#{town} - Urchin Hideout]"];
  description = ["This is a fake room used to hold wayto/timeto for urchin guides."];
  paths       = ["Obvious exits: bwahaha"];
  r           = Map.new(id,title,description,paths);
  r.location  = town;
  r.tags      = ["urchin hideout"];
  return r;
end;
def self.get_urchin_room(town);
  title = "[#{town} - Urchin Hideout]";
  rooms = Room.list.select{ |r|
    r.title.include?(title);
  };
  if rooms.size > 1;
    respond "error, found multiple urchin rooms";
  end;
  return rooms[0];
end;
def self.urchin_link(room_id,cmd,urchin_room_id,expires);
  Room[room_id].wayto[urchin_room_id.to_s] = StringProc.new("fput 'unhide' if hidden?; true");
  Room[room_id].timeto[urchin_room_id.to_s] = StringProc.new("if UserVars.urchins_enable and Time.now.to_i < UserVars.urchins_expires; 0.2; end;");
  Room[urchin_room_id].wayto[room_id.to_s] = cmd;
  Room[urchin_room_id].timeto[room_id.to_s] = 0.1;
end;
#------------------------------------------------------------------------------#
# urchin status #
#------------------------------------------------------------------------------#
def self.urchin_status(run_quiet=@quiet);
  status        = false;
  expires       = nil;
  command       = "urchin status";
  start_pattern = /You currently have no access to the urchin guides.|You will have access to the urchin guides until/;
  quiet         = run_quiet;
  end_pattern   = /^(<popBold\/>)?<prompt/;
  include_end   = false;
  timeout       = 5;
  result        = self.quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  expires_pattern = /You will have access to the urchin guides until (?<expires>.*?)\./;
  result.each { |line|
    m = line.match(expires_pattern);
    if m;
      status = true;
      expires = Time.parse(m[:expires].gsub(/(\d+)\/(\d+)\/(\d+) (\d+:\d+:\d+) (.*?)$/, '\3-\1-\2 \4 \5'));
      UserVars.urchins_enable = true;
      UserVars.urchins_expires = expires.to_i;
    end;
  };
  return status,expires;
end;
#------------------------------------------------------------------------------#
# urchin places #
#------------------------------------------------------------------------------#
def self.urchin_places(run_quiet=@quiet);
  places        = Hash.new;
  command       = "urchin places";
  start_pattern = /Valid places:|No valid places from this location./;
  quiet         = run_quiet;
  end_pattern   = /^(<popBold\/>)?<prompt/;
  include_end   = false;
  timeout       = 5;
  result        = self.quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  places_pattern = /<d cmd='(?<cmd>[^']+)'>(?<place>[^<]*?)<\/d> *\((?<title>[^\)]*?)\)/;
  result.each { |line|
    if m = line.match(places_pattern);
      place = self.match_to_hash(m);
      place[:cmd] = place[:cmd].downcase;
      place[:place] = place[:place].downcase;
      places[place[:place].downcase] = place;
    end;
  };
  return places;
end;
#------------------------------------------------------------------------------#
# check status, add urchin places for current town #
#------------------------------------------------------------------------------#
if Room.current.id.nil?;
  respond "#{@script_name}: Must be in a mapped room.";
  exit;
end;
town = Room[Room.current.find_nearest_by_tag("town")].location.gsub(/the town of /,'');
status, expires = self.urchin_status();
if @debug;
  respond "status: #{status}";
  respond "expires: #{expires}";
  respond "!$urchins_towns.keys.include?(town): #{!$urchins_towns.keys.include?(town) ? true : false}";
  respond "$urchins_towns[town] < Time.now.to_i: #{$urchins_towns[town] < Time.now.to_i ? true : false}";
  respond "script.vars[0] =~ /refresh|scan|reset/): #{script.vars[0] =~ /refresh|scan|reset/ ? true : false}";
end;
if status == true and (!$urchins_towns.keys.include?(town) or $urchins_towns[town] < Time.now.to_i or script.vars[0] =~ /refresh|scan|reset/);
  # scan new urchin town #
  urchin_room = self.get_urchin_room(town);
  places = self.urchin_places;
  if places.size == 0;
    respond "No valid places found.";
  else;
    # found places, make the room if new #
    if !urchin_room;
      urchin_room = self.new_urchin_room(town);
    end;
    # add places to the room #
    missing_room_ids = 0;
    urchin_room_id = urchin_room.id;
    places.each { |k,v|
      rooms = self.urchin_rooms_by_title(v[:title],town,v[:cmd]);
      if rooms.size == 1;
        v[:room_id] = rooms[0].id;
        target_town = Room[Room[v[:room_id]].find_nearest_by_tag("town")].location.gsub(/the town of /,'');
        if town == target_town;
          self.urchin_link(v[:room_id],v[:cmd],urchin_room_id,expires);
        end;
        _respond "#{self.d_cmd(v[:cmd],v[:cmd])}: #{v[:title]}, #{rooms[0].title[0]} #{rooms[0].id} }" if @debug;
      else;
        missing_room_ids += 1;
        _respond "#{self.d_cmd(v[:cmd],v[:cmd])}: #{v[:title]}, #{rooms.size} rooms found";
      end;
    };
    if missing_room_ids == 0;
      # prevent rescanning if we have a clean scan, for seven days #
      $urchins_towns[town] = Time.now.to_i + 604800; #will refresh every seven days, assuming you're logged in that long #
    end;
  end;
end;
