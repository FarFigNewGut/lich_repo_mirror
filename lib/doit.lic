=begin

	Nisch test scripts

	Author: Nisch
	Created: 2022-02-20
	Version: 1.0.0
	
	Changelog:
	
		1.0.0 (2022-02-20)
			- Created this script
	
=end

if script.vars.empty?
	# Continue
	respond
	respond "Nisch Tests!"
	respond
elsif script.vars[1].downcase == 'help'
	respond
	respond 'Usage:'
	respond
	respond "   1. Make sure your STOW container is setup. Type: Type: stow set [container name] "
	respond "   2. Make sure your LOOTSACK container is setup. Type: ;var set lootsack=[container name] " 
	respond "   3. Make sure your JARSACK container is setup. Type: ;var set jarsack=[container name] " 
	respond "   4. Make sure you have EMPTY JARS in your JARSACK. You can buy more at the Alchemist Shop "
	respond "   5. You can set a 2nd JARSACK container as well. Type: ;var set jarsack2=[container name] "	
	respond
	respond "   #{$clean_lich_char}#{script.name} help                 show this message"
	respond "   #{$clean_lich_char}#{script.name}                      start organizing gems into jars automatically"
	respond
	exit
elsif script.vars[1].downcase == 'setup'
	respond
	respond 'Usage:'
	respond
	respond "   1. Make sure your STOW container is setup. Type: Type: stow set [container name] "
	respond "   2. Make sure your LOOTSACK container is setup. Type: ;var set lootsack=[container name] " 
	respond "   3. Make sure your JARSACK container is setup. Type: ;var set jarsack=[container name] " 
	respond "   4. Make sure you have EMPTY JARS in your JARSACK. You can buy more at the Alchemist Shop "
	respond "   5. You can set a 2nd JARSACK container as well. Type: ;var set jarsack2=[container name] "
	respond
	respond "   #{$clean_lich_char}#{script.name} help                 show this message"
	respond "   #{$clean_lich_char}#{script.name} setup                show this message"
	respond
	respond "   #{$clean_lich_char}#{script.name}                      start organizing gems into jars automatically"
	respond
	exit
end

unless $stowContainer = GameObj.inv.find{|bag| bag.id == XMLData.stow_container_id}
	echo 'Exiting: Stow Container not found. Type: stow set [container name].'
	exit
end

unless $lootContainer = GameObj.inv.find { |bag| bag.name =~ /#{Vars.lootsack}/i }
	echo 'Exiting: LootSack not found. Type: ;var set lootsack=[container name]'
	exit
end

unless $jarContainer = GameObj.inv.find { |bag| bag.name =~ /#{Vars.jarsack}/i }
	echo 'Exiting: JarSack not found. Type: ;var set jarsack=[container name]'
	#fput ";var set jarsack=pouch"
	exit
end

unless $jarContainer2 = GameObj.inv.find { |bag| bag.name =~ /#{Vars.jarsack2}/i }
	echo 'Exiting: JarSack2 not found. Type: ;var set jarsack2=[container name]'
	fput ";var set jarsack2=pouch"
	exit
end


$randomItemList = Array.new
$gemList = Array.new
$emptyJarList = Array.new
$jarList = Array.new
$jarExists = false

$randomItemList2 = Array.new

$emptyJarList2 = Array.new
$jarList2 = Array.new
$jarExists2 = false

$maxLoops = 5
$numLoops = 0

# Default is 1600
SELL_VALUE = 1600

SortGems = proc{

	if $gemList.size < 1 then
		echo "No gems found (SortGems)."
		#exit
	else
		#echo "GEMS: " + $gemList.to_s
	end

	$gemList.each{|gem|
	
		if $jarList.size > 0 then
		
			$jarList.each{|jar|
				
				tmpGemName = gem[:name]

				tmpJarAfterName = jar[:after_name]
				
				if tmpGemName != nil && tmpJarAfterName != nil then

					if tmpJarAfterName.include? tmpGemName		
					
						$jarExists = true
						
						multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
						"get #" + jar[:id].to_s, 
						"put #" + gem[:id].to_s + " in #" + jar[:id].to_s, 
						"put #" + jar[:id].to_s + " in #" + $jarContainer.id.to_s

						$gemList.delete_if {|obj| obj[:id] == gem[:id]}
						
						sleep 1
						
					end
				
				end
			}
			
		else
			$jarExists = false
		end
		
		if $jarExists == false then
		
			#echo "Need an empty jar"
			
			emptyJar = nil
			
			if $emptyJarList.size < 1 then
				
				# Continue

			else
				
				emptyJar = $emptyJarList.first		
				
			end
			
			if emptyJar == nil then
			
				# Continue
				
			else
				
				multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
				"get #" + emptyJar[:id].to_s, 
				"put #" + gem[:id].to_s + " in #" + emptyJar[:id].to_s, 
				"put #" + emptyJar[:id].to_s + " in #" + $jarContainer.id.to_s
				
				$gemList.delete_if {|obj| obj[:id] == gem[:id]}
				$emptyJarList.delete_if {|obj| obj[:id] == emptyJar[:id]}		
				$jarList.push(emptyJar)
				
				CheckContainers.call
				
				SortGems.call
				
				sleep 1
				
				break
			
			end
			
		end
		
		$jarExists = false
		
		###########################################
		# jarsack2
		###########################################
		
		echo "check jarsack2"
		
		if $jarList2.size > 0 then
		
			$jarList2.each{|jar|
				
				tmpGemName = gem[:name]
				
				tmpJarAfterName = jar[:after_name]
				
				if tmpGemName != nil && tmpJarAfterName != nil then
				
					if tmpJarAfterName.include? tmpGemName			
					
						$jarExists2 = true
						
						multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
						"get #" + jar[:id].to_s, 
						"put #" + gem[:id].to_s + " in #" + jar[:id].to_s, 
						"put #" + jar[:id].to_s + " in #" + $jarContainer2.id.to_s
						
						$gemList.delete_if {|obj| obj[:id] == gem[:id]}
						
						sleep 1
						
					end
				
				end
			}
			
		else
			$jarExists2 = false
		end
		
		if $jarExists2 == false then
		
			#echo "Need an empty jar for jarsack2"
			
			if $emptyJarList2.size < 1 then
				echo 'Exiting: Run the script again or put more empty jars in jarsack2. You can buy more at the Alchemist Shop.'
				
				fput "close #" + $lootContainer.id.to_s
				fput "close #" + $jarContainer.id.to_s

				#fput "close #" + $lootContainer2.id.to_s
				fput "close #" + $jarContainer2.id.to_s				
				
				exit			
			end
			
			emptyJar = $emptyJarList2.first

			#echo emptyJar.to_s
			
			if emptyJar == nil then
				echo 'Exiting: Run the script again or put more empty jars in jarsack2.  You can buy more at the Alchemist Shop.'
				
				fput "close #" + $lootContainer.id.to_s
				fput "close #" + $jarContainer.id.to_s

				fput "close #" + $jarContainer2.id.to_s				
				
				exit		
			end
			
			multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
			"get #" + emptyJar[:id].to_s, 
			"put #" + gem[:id].to_s + " in #" + emptyJar[:id].to_s, 
			"put #" + emptyJar[:id].to_s + " in #" + $jarContainer2.id.to_s
			
			$gemList.delete_if {|obj| obj[:id] == gem[:id]}
			$emptyJarList2.delete_if {|obj| obj[:id] == emptyJar[:id]}		
			$jarList2.push(emptyJar)
			
			CheckContainers.call
			
			SortGems.call
			
			sleep 1
			
			break
		end
		
		$jarExists2 = false		
		
	}
}

def keep_sorting
	if $numLoops <= $maxLoops then
		#echo "keep sorting"
		CheckContainers.call
		SortGems.call
		sleep 1
	else
		#echo "Stop sorting: Max loops reached"
	end
end


CheckContainers = proc {

	$randomItemList = Array.new
	$gemList = Array.new
	$emptyJarList = Array.new
	$jarList = Array.new
	$jarExists = false
	
	$randomItemList2 = Array.new

	$emptyJarList2 = Array.new
	$jarList2 = Array.new
	$jarExists2 = false	

	GameObj.containers.each{|id,container|
		
		if id == $lootContainer.id then
		
			container.each{|item|
				
				if item.type == "gem" then
				
					thisGem = {}
					thisGem[:id] = item.id
					thisGem[:type] = item.type
					thisGem[:noun] = item.noun
					thisGem[:name] = item.name
					
					$gemList.push(thisGem)
				
				else
				
					thisItem = {}
					thisItem[:id] = item.id
					thisItem[:type] = item.type
					thisItem[:noun] = item.noun
					thisItem[:name] = item.name
					
					$randomItemList.push(thisItem)
					
				end
		
			}
		
		end		
		
		
		if id == $jarContainer.id then
		
			container.each{|item|

				if item.noun == "jar" && item.after_name == nil then
				
					#emptyJarList.push([item.id,item.type,item.noun,item.name])
					thisJar = {}
					thisJar[:id] = item.id
					thisJar[:type] = item.type
					thisJar[:noun] = item.noun
					thisJar[:name] = item.name
					thisJar[:after_name] = item.after_name
					
					$emptyJarList.push(thisJar)

					#fput "get #" + $lootContainer.id.to_s

					#	multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
					#"get #" + jar[:id].to_s, 
					#"put #" + gem[:id].to_s + " in #" + jar[:id].to_s, 
					#"put #" + jar[:id].to_s + " in #" + $jarContainer.id.to_s

					#multifput "get #" + item.id.to_s,
					#"drop #" + item.id.to_s
					
					if script.vars[1].downcase == "sell" and script.vars[2].downcase == "empty-jars" then
						respond "Sell empty jars (1)!"
						# Get Item + Sell Item
						multifput "get #" + item.id.to_s,
						"sell my jar"
					end


				elsif item.noun == "jar" && item.after_name != nil then

					if script.vars[1].downcase == "sell" and script.vars[2].downcase == "empty-jars" then
						#print "This jar should be empty (1)?"
						#print("\n")
						#print(item.after_name)
						#print("\n")
						next
					end		

					thisJar = {}
					thisJar[:id] = item.id
					thisJar[:type] = item.type
					thisJar[:noun] = item.noun
					thisJar[:name] = item.name
					thisJar[:after_name] = item.after_name
					
					$jarList.push(thisJar)
					print "JAR 1:\n"
					print item.id + "\n"

					# TODO - get each gem out of the jar...
					notEmpty = true	

					#get jar qty
					jar_quantity = 0
					fput "get ##{item.id} from ##{$jarContainer.id}"
					fput "look in my jar"
					look = matchtimeout 5, "Inside the", "is empty."
					if look =~ /Inside .*? you see (\d+) portion/i
						qty = $1.to_i
						print("Quantity:")
						print(qty)
						print("\n")
						jar_quantity = qty
						fput "swap"
					elsif look =~ /The .*?#{jar} is empty./
						print("Jar is empty so STOP...")
						respond("The jar is empty (1).")
					end

					test_max = 25
					test_counter = 0
					counter = 1
					while notEmpty
						keep_this = false
						sell_this = false
						test_counter += 1
						if test_counter > test_max
							print("end test.")
							exit
						end
						if counter > jar_quantity
							print("Done with this jar..")
							fput "put jar in my ##{$jarContainer.id}"
							notEmpty = false
						end
						if look =~ /Inside .*? you see (\d+) portion/i
							#respond("Keep going...")
							counter += 1
							dothistimeout "shake my jar", 5, /^You give your jar a hard shake|You shake your jar/
							gem = GameObj.right_hand
							if gem.type.to_s == "gem" then
								if sell_this == true then
									print("Automatic sell without appraisal again!")
									fput "sell ##{gem.id.to_s}"
									#silence_me			
								else
									respond "Appraise this"
									fput "appraise #" + gem.id.to_s
									result = matchfind "I'll give you ? for it"
									result = result.gsub(/[^0-9]/, '')
									print("Sell Value:")
									print("\n")
									print(result.to_i)
									print("\n")
									if result.to_i < SELL_VALUE then
										sell_this = true
										fput "sell ##{gem.id.to_s}"
										#print("Sell this item?")
									else
										keep_this = true
										dothistimeout "put ##{gem.id.to_s} in my jar", 5, /^You add/
										dothistimeout "put jar in ##{$jarContainer.id}", 5, /^You put/
										notEmpty = false
									end
									#silence_me			
								end
					
							else
								print("jar is empty? this is not a gem?")
								print(gem.type)
								dothistimeout "put ##{gem.id.to_s} in my jar", 5, /^You add/
								dothistimeout "put jar in ##{$jarContainer.id}", 5, /^You put/
								notEmpty = false								
							end
							#print(gem_id)
							#print(gem.id)
							#print("\n")
							#print(gem.noun) ## gem.noun = opal
							#print("\n")
							#print(gem.type) ## gem.type == gem
							#print("\n")
							sleep 1
						elsif look =~ /The .*?#{jar} is empty./
							print("stop going")
							notEmpty = false
							exit
						else
							print("something else. stop.")
							notEmpty = false
							exit
						end
					end

					#while notEmpty
						#respond "Get a gem and appraise it (1).."
						#result = matchfind ""
						#respond "[get] #" + gem[:id].to_s
						#silence_me
						#dothistimeout "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 5, /^You remove/
						#fput "appraise #" + gem[:id].to_s
						#result = matchfind "I'll give you ? for it"
						#if result.to_i < SELL_VALUE then
						#	fput "sell ##{gem[:id].to_s}"
						#else
						#	dothistimeout "put ##{gem[:id].to_s} in my jar", 5, /^You put/
						#end
						#silence_me
					
					print("All done!")
					respond "All done!"
					
				end
		
			}
		
		end				
		
		if $jarContainer2 != nil then
		
			if id == $jarContainer2.id then
			
				container.each{|item|
					
					if item.noun == "jar" && item.after_name == nil then
					
						thisJar = {}
						thisJar[:id] = item.id
						thisJar[:type] = item.type
						thisJar[:noun] = item.noun
						thisJar[:name] = item.name
						thisJar[:after_name] = item.after_name
						
						$emptyJarList2.push(thisJar)

						#fput "get #" + $lootContainer.id.to_s

						#	multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
						#"get #" + jar[:id].to_s, 
						#"put #" + gem[:id].to_s + " in #" + jar[:id].to_s, 
						#"put #" + jar[:id].to_s + " in #" + $jarContainer.id.to_s

						# Get Item + Sell Item
						if script.vars[1].downcase == "sell" and script.vars[2].downcase == "empty-jars" then
							respond "Sell empty jars (2)!"
							# Get Item + Sell Item
							multifput "get #" + item.id.to_s,
							"sell my jar"
						end

						#multifput "get #" + item.id.to_s,
						#"drop #" + item.id.to_s
						
					elsif item.noun == "jar" && item.after_name != nil then

						if script.vars[1].downcase == "sell" and script.vars[2].downcase == "empty-jars" then
							#print "This jar should be empty (2)?"
							#print("\n")
							#print(item.after_name)
							#print("\n")
							next
						end						
						
						thisJar = {}
						thisJar[:id] = item.id
						thisJar[:type] = item.type
						thisJar[:noun] = item.noun
						thisJar[:name] = item.name
						thisJar[:after_name] = item.after_name
						
						$jarList2.push(thisJar)
						
						respond "Get a gem and appraise it (2).."
						print item.to_s
						#get jar qty
						fput "look in my #{jar}"
						look = matchtimeout 5, "Inside the", "is empty."
						if look =~ /Inside .*? you see (\d+) portion/i
							qty = $1.to_i
							print(qty)
							shakes = qty if script.vars[1] =~ /all/i
							print(shakes)
							exit
						elsif look =~ /The .*?#{jar} is empty./
							puts "shake: The {jar} is empty."
							exit
						end						
							
							#respond "[get] #" + gem[:id].to_s
							#silence_me
							#dothistimeout "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 5, /^You remove/
							#fput "appraise #" + gem[:id].to_s
							#result = matchfind "I'll give you ? for it"
							#if result.to_i < SELL_VALUE then
							#	fput "sell ##{gem[:id].to_s}"
							#else
							#	dothistimeout "put ##{gem[:id].to_s} in my jar", 5, /^You put/
							#end
							#silence_me
						

					end
			
				}
			end			
		end	
	}
}

Main = proc {

	fput "stow all"

	if script.vars[1].downcase == "sell" then

		CheckContainers.call

		echo "EmptyJars1: " + $emptyJarList.size.to_s
		echo "EmptyJars2: " + $emptyJarList2.size.to_s
		
		if $gemList.size < 1 then
		
			echo "No floating gems found (sell)."
		
			#fput "close #" + $lootContainer.id.to_s
			#fput "close #" + $jarContainer.id.to_s
			#fput "close #" + $jarContainer2.id.to_s	
			
			exit
		end
		
		$jarExists = false
		$jarExists2 = false

	elsif script.vars[1].downcase == "check" then

		CheckContainers.call

		echo "EmptyJars1: " + $emptyJarList.size.to_s
		echo "EmptyJars2: " + $emptyJarList2.size.to_s
		
		if $gemList.size < 1 then
			echo "No gems found (check)."
			#fput "close #" + $lootContainer.id.to_s
			#fput "close #" + $jarContainer.id.to_s
			#fput "close #" + $jarContainer2.id.to_s	
			exit
		end
		$jarExists = false
		$jarExists2 = false
	end
}

# Let's do this!
Main.call
