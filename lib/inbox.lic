=begin
  a minimal LNet inbox utility. 
  Works for both lnet & 0net
  ;inbox help for more info
  
  Required: Lich 4.3.12
  Tags: lnet, 0net, meta, core
  Author: Ondreian


=end
if $SAFE > 0
  echo "error: This script needs to be trusted to work. (;trust #{script.name})"
  exit
end

class LNet
  class Inbox
    INBOX_LIMIT    = 20
    CLI_PREFIX     = %{<c>;inbox }
    CLI_PREFIX_IDX = CLI_PREFIX.size
    @pattern    = /^\[Private\]\-GSIV:(?<from>.*?): "(?<body>.*?)"/
    @messages ||= Array.new

    EPOCS = {
      hour:   60 * 60,
      minute: 60,
    }

    @inbox_cli = Proc.new do |input|
      if input.start_with?(CLI_PREFIX)
        begin
          Inbox.handle_cli_input(input)   
        rescue => err
          respond err
          respond err.backtrace
        end
        nil
      else
        input
      end
    end

    def self.add_cli_hook()
      UpstreamHook.add("lnet::inbox::cli", @inbox_cli)
      before_dying do
        UpstreamHook.remove("lnet::inbox::cli")
      end
    end

    def self.ingest(message)
      data = message.match(@pattern)
      @messages << [Time.now, {from: data[:from], body: data[:body]}]
      @messages.shift while @messages.size > INBOX_LIMIT
      self
    end

    def self.init()
      Inbox.add_cli_hook()
      while incoming=get
        Inbox.ingest(incoming) if incoming.match(@pattern)
      end
    end

    def self.empty()
      @messages = Array.new
    end

    def self.oldest_first()
      Inbox.messages.sort do |left, right|
        left.first - right.first
      end
    end

    def self.newest_first()
      oldest_first.reverse
    end

    def self.to_s(timestamp, message)
      return %{#{Time.at(Time.now - timestamp).utc.strftime("%H:%M:%S")} >> #{message[:from]} | #{message[:body]}}
    end

    def self.messages()
      @messages
    end

    def self.raise_bad_command(cmd, args)
      _respond %{
        <b>Inbox does not implement #{cmd}</b>

        did you mean?
          #{API.singleton_methods.join(", ")}
      }
    end

    def self.handle_cli_input(input)
      input = input[CLI_PREFIX_IDX..-1]
      cmd, *args = input.split(" ")
      if API.singleton_methods.include?(cmd.to_sym)
        API.send(cmd, args)
      else
        raise_bad_command(cmd, args)
      end
    end

    def self.log(message)
      _respond %{<b>Inbox : #{message}</b>}
    end

    module API    
      def self.empty(args = nil)
        Inbox.empty()
        Inbox.log(":ok > messages emptied")
      end

      def self.messages(args = nil)
        Inbox.log(%{messages [#{Inbox.messages.size}]})

        Inbox.oldest_first.each.with_index do |message, i|
          _respond "[#{i + 1}] " + Inbox.to_s(*message)
        end
      end

      def self.delete(num)
        idx = num.to_i - 1
        Inbox.messages.delete_at(idx)
        Inbox.log(%{:ok > deleted message[#{num.to_i}] => #{Inbox.messages.size} remaining})
      end

      def self.reply(args)
        to, *parts = args.map(&:strip).reject(&:empty?).compact
        return Inbox.log("cannot find who to reply to") if to.nil?
        return Inbox.log("cannot send an empty reply") if parts.to_a.empty?
        
        message = if to.match(%r{^[\d+]$})
          Inbox.messages[to._i - 1]
        else
          Inbox.messages.find do |message| message.last[:from].downcase.eql?(to.downcase) end
        end
        
        return Inbox.log("could not find a corresponding message from #{to}") if message.nil?
        # send the private message
        LNet.send_message(attr={'type'=>'private', 'to'=> message.last[:from]}, parts.join(" "))

        if to.match(%r{^[\d+]$})
          Inbox.messages.delete_at(to._i - 1)
        else
          Inbox.messages.delete_if do |message|
            message.last[:from].downcase.eql?(to.downcase)
          end
        end
      end
      
      def self.help(args = nil)
        _respond %{
          <b>Inbox@1.0.0</b>

          available commands:
            #{API.singleton_methods.join(", ")}
        }
      end
    end

    Inbox.init()
  end
end