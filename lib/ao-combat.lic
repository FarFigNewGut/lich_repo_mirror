=begin
Author: Daedeus

Combat functions for use by other scripts.
Not released yet.

=end

#Used in Bystander detection, INSERT YOUR CHARACTERS HERE
$YourCharacters = /Doghan|Wizard/

$BanditNames = /bandit|thug|robber|marauder|outlaw|mugger|thief|rogue|highwayman/ 
AOEDisablerSpells = [709,410]
$disablerLastCast = nil
$DisablerCooldown = 12 #cooldown for AOE disabling spells

class Combat
    @lastTarget = nil
    def Test()
        echo "TEST"
    end
    def AnyDead?()
        return GameObj.npcs.any? { |s| s.status =~ /dead/ }
    end
    def Dead?(target)
        return true if target.nil? || target.kind_of?(String)
        return target.status =~ /dead|gone/ || !GameObj.npcs.any? {|s| s.id == target.id}
    end
    def IsBandit?()
        GameObj.npcs.any? { |i|
            i.status !~ /dead/ && 
            i.name =~ /#{$BanditNames}/ }
    end
    def CastDisabler()
        echo "lastCast: #{$disablerLastCast} , time since last: #{Time.now - $disablerLastCast}" if !$disablerLastCast.nil?
        if !$disablerLastCast.nil? && Time.now - $disablerLastCast < $DisablerCooldown
            echo "DONT CAST"
            return
        end
        AOEDisablerSpells.each { |sp| 
            if Spell[sp].known? && Spell[sp].affordable?
                Spell[sp].cast
                $disablerLastCast = Time.now
                break
            end
        }
    end
    def HelpAllies()
        fput "stand" if !standing?
        GameObj.pcs.each { |p|
            if p.status =~ /stunned/
                start_script "ai-unstun", [p.name]
                wait_while { running? "ai-unstun" }
            end
            
            if !$unstun_success
                #use a disabler
                # $Combat.CastDisabler()
            end

            if p.status =~ /prone|kneeling/
                fput "pull #{p}" 
            end
        }
    end
    def CastSpells(spellArray)
        spellArray.each { |s|
            Spell[s].cast if Spell[s].known? && !Spell[s].active? && Spell[s].affordable?
        }
    end
    def ChangeStance( new_stance, force = true )
        return if Spell[1617].active? || Spell[216].active? || dead?

        if( stance() =~ /#{new_stance}/ )
            return
        elsif( checkcastrt() > 0 && new_stance =~ /def/ )
            return if stance() == 'guarded'
        end

        if(force)
            result = dothistimeout( "stance #{new_stance}", 3, /You are now in an?|Cast Round Time in effect|You are unable to change/ )
        else
            fput "stance #{new_stance}"
        end
    end
    def Targets?(name)
        GameObj.npcs.any? { |i|
            i.status !~ /dead/ &&
            i.type =~ /aggressive/ && 
            i.name =~ /#{name}/ }
    end
    def NumTargets(name)
        GameObj.npcs.count { |i| 
            i.status !~ /dead/ &&
            i.type =~ /aggressive/ &&
            i.name =~ /#{name}/ }
    end
    def GetTargets(name)
        GameObj.npcs.find_all { |i|
            i.status !~ /dead/ &&
            i.type =~ /aggressive/ && 
            i.name =~ /#{name}/ }
    end
    def GetTarget(name)
        #a combination of GetTargets and ChooseTarget
        @lastTarget = ChooseTarget(GetTargets(name))
        return @lastTarget
    end
    def GetStrongTarget(name)
        #a combination of GetTargets and ChooseStrongTarget
        @lastTarget = ChooseStrongTarget(GetTargets(name))
        return @lastTarget
    end
    def ChooseStrongTarget(npcs)
        #search here for NON-STUNNED/PRONE target
        strong = npcs.find { |i| i.status !~ /stunned|prone|webbed/ }
        return strong if !strong.nil?
        return npcs[0]
    end

    WoundHerbs = [
            { 
                "head" => /rose-marrow potion|tincture of rose-marrow|elk horn potion|feverfew tea/
            },
            {
                "head" => /aloeas stem|tincture of aloeas|tiny ram's bladder tart|feverfew potion|sticky lichen tea/,
                "nerves" => /bolmara potion|tincture of bolmara|snowflake elixir|red lichen potion|glowing mold tea/,
                "limb" => /ephlox moss|tincture of ephlox|frog's bone porridge|sweetfern potion|crushed cavegrass tea/
            }
    ]

    def HealCriticalWounds()
        if UserVars.herbsack.nil?
            echo "No herbsack!"
            return
        end
        herbsack = GameObj[UserVars.herbsack]
        if herbsack.contents.nil?
            fput "look in ##{herbsack.id}"
            sleep 0.3
        end

        while Wounds.neck >= 2  #cutthroat
            eatHerbForWound(herbsack,WoundHerbs[1]["head"], "neck")
        end

        while Wounds.nsys >= 2  #spellcasting
            eatHerbForWound(herbsack,WoundHerbs[1]["nerves"], "nerves")
        end
        
        while Wounds.head >= 2
            eatHerbForWound(herbsack,WoundHerbs[1]["head"], "head")
        end

        while Wounds.head >= 1
            eatHerbForWound(herbsack,WoundHerbs[0]["head"], "head")
        end

        while Wounds.leftEye >= 2 || Wounds.rightEye >= 2
            eatHerbForWound(herbsack,WoundHerbs[1]["head"], "head")
        end

        #while Scars.leftArm == 3 || Scars.rightArm == 3 || Scars.leftLeg == 3 || Scars.rightLeg == 3
        #end
    end
    def HealWounds()
        if UserVars.herbsack.nil?
            echo "No herbsack!"
            return
        end
        herbsack = GameObj[UserVars.herbsack]
        if herbsack.contents.nil?
            fput "look in ##{herbsack.id}"
            sleep 0.3
        end
        while Wounds.leftArm >= 2 || Wounds.rightArm >= 2 || Wounds.rightLeg >= 2 || Wounds.leftLeg >= 2
            eatHerbForWound(herbsack,WoundHerbs[1]["limb"], "limb")
        end
    end
    def eatHerbForWound(herbsack,herbRegex, woundname)
        herb = herbsack.contents.find { |h| 
            h.name =~ herbRegex
        }
        if herb.nil?
            echo "Unable to find herb for #{woundname}."
        else
            fput "get ##{herb.id}"
            fput "drink ##{herb.id}" if herb.name =~ /potion|tincture|tea|elixir/
            fput "eat ##{herb.id}" if herb.name =~ /stem|tart|wolifrew lichen|moss/
            fput "put ##{herb.id} in ##{herbsack.id}"
        end
    end
    def ChooseTarget(npcs)
        #search here for HIGH PRIORITY target
        #kill caster / ranged first
        caster = npcs.find { |n| n.name =~ /warchief|mage|adept|wizard|elementalist|sorcerer|sorceress|witch|warlock|ranger|cleric|sniper|hunter|archer/ }
        return caster if !caster.nil?
        #currently none

        #search here for VULNERABLE target
        vulnerable = npcs.find { |i| i.status =~ /stunned|prone|webbed/ }
        return vulnerable if !vulnerable.nil?

        #return random target
        return $target if !Dead?($target)

        $target = npcs.find{ |i| i.status !~ /dead|gone/ }
        return $target
    end
    def ByStanders?()
        if $IgnoreBystanders
            echo "IGNORING BYSTANDERS: $IgnoreBystanders == true"
            return false
        end
        GameObj.pcs.any? { |pc|
            if $Group.nil?
                pc.name !~ $YourCharacters
            else
                pc.name !~ $Group && pc.name !~ $YourCharacters
            end
        }
    end
    def HasFreeMstrike?()
			#9005 - Mstrike recovery
			#9699 - popped muscles
        return !Spell[9005].active? && !Spell[9699].active?
    end
end

$Combat = Combat.new