=begin

	This script can get deeds in the following towns:
	
	Landing - will use gems for deeds
	Icemule Trace - will use wands and lockpicks for deeds
	River's Rest - will use River's Rest gems for deeds
		
	For instructions on how to use the script start script as:
	
	;dirty-deeds help

	You like deeds right? Of course you do! Everyone does! But who likes to do all of the guess work of how many gems and which gems you need to drop in order to get a deed? No one!
	
	This script takes all of the guess work out of getting you those deeds!
	
	Do ;dirty-deeds setup to setup all of your settings. You can set what multiplier you want to use in each town, how many deeds you want to get, which container to use to get items from, which items you don't want to use to get deeds, and so much more!
	
	The script starts out using the accepted formula on the wiki for gaining deeds, which is: 101 + (level * 100) + (deeds * 100). However this formula isn't perfect and at high experience levels is fairly inaccurate. When the script determines it can no longer rely on the formula for getting you deeds it will instead add silvers (which you can specify how many silvers to add) to the total item value you used when you last failed, and remember this figure until you fail to get a deed again.
	
	The script also tracks various stats every time you attempt to get a deed; stats such as total item value used in deed attempt, your total experience at the time, how many deeds you had, and whether or not you gained a deed with the attempt.

	Changelog:
	Version 8: Fixed bug with GTK errors.
	Version 9: Updated new racial trading bonuses.
	Version 9: The Icemule deed room now has a room number which was causing the script to endlessly loop. This has been fixed.
	Version 10: Updated all instaces of Stats.prof to Stats.prof and all instances of Char.level to Stats.level
	Version 11: Fixed possible bug that tried to use whatever was in your right or left hand when the script was started as a gem.
	Version 12: The setup window is now on top of all other windows.
	
	To do list:

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 12
	tags: deeds, deed, Landing, Icemule, River's Rest

=end

fput "stow right" if checkright
fput "stow left" if checkleft

lich_up_to_date = nil
version = LICH_VERSION.split(".")
lich_up_to_date = true if version[0].to_i > 4 || version[1].to_i > 6 || version[2].to_i > 53

if lich_up_to_date
	inf_bonus = Stats.enhanced_inf[1]
else
	inf_bonus = Stats.inf[1]
end

if Skills.to_bonus(Skills.trading) == 0
	@dirty_deeds_trading_bonus = 0
else
	@dirty_deeds_trading_bonus = [0, (Skills.to_bonus(Skills.trading) + inf_bonus) / 12].max
end

@dirty_deeds_landing_trading_bonus = @dirty_deeds_trading_bonus.dup
@dirty_deeds_icemule_trading_bonus = @dirty_deeds_trading_bonus.dup
@dirty_deeds_riverrest_trading_bonus = @dirty_deeds_trading_bonus.dup

if Char.race =~ /Human/i
	@dirty_deeds_riverrest_trading_bonus += 5
elsif Char.race =~ /Krolvin/i
	@dirty_deeds_riverrest_trading_bonus += 5
	@dirty_deeds_icemule_trading_bonus += 5
elsif Char.race =~ /Giant/i
	@dirty_deeds_landing_trading_bonus += 5
elsif Char.race =~ /Halfling/i
	@dirty_deeds_landing_trading_bonus += 5
	@dirty_deeds_icemule_trading_bonus += 5
elsif Char.race =~ /Half\-Elf/i
	@dirty_deeds_landing_trading_bonus += 5
elsif Char.race =~ /Dark Elf/i
	@dirty_deeds_landing_trading_bonus += 5
elsif Char.race =~ /Forest Gnome/i
	@dirty_deeds_landing_trading_bonus += 5
elsif Char.race =~ /Sylvan/i
	@dirty_deeds_icemule_trading_bonus += 5
end

@dirty_deeds_all_riverrest_gems = "amethyst clam shell|angulate wentletrap shell|beige clam shell|black helmet shell|black-spined conch shell|blue-banded coquina shell|bright noble pectin shell|blue periwinkle shell|candystick tellin shell|checkered chiton shell|crown conch shell|crown-of-Charl shell|dark brown triton shell|dovesnail shell|egg cowrie shell|emperor's crown shell|empress's crown shell|fluted limpet shell|giant paper nautilus shell|golden cowrie shell|golden triton shell|polished hornsnail shell|piece of iridescent mother-of-pearl|king helmet shell|iridescent tempest shell|large chipped clam shell|large moonsnail shell|lavender nassa shell|leopard cowrie shell|lynx cowrie shell|marlin spike shell|multi-colored snail shell|opaque spiral shell|pearl nautilus shell|pink-banded coquina shell|pink clam shell|polished batwing chiton shell|polished black tegula shell|polished green abalone shell|polished red abalone shell|polished silver abalone shell|purple-cap cowrie shell|queen helmet shell|red helmet shell|ruby-lined nassa shell|sea urchin shell|silvery clam shell|snake-head cowrie shell|snow cowrie shell|Solhaven Bay scallop shell|sparkling silvery conch shell|speckled conch shell|spiny siren's-comb shell|spiral turret shell|split-back pink conch shell|striated abalone shell|sundial shell|three-lined nassa shell|tiger cowrie shell|tiger-striped nautilus shell|translucent golden spiral shell|yellow-banded coquina shell|yellow helmet shell|white clam shell|white gryphon's wing shell|Kezmonian honey beryl|Selanthan bloodjewel|uncut star-of-Tamzyrr diamond|dwarf-cut sapphire"

@dirty_deeds_all_icemule_items = "oaken wand|polished bloodwood wand|twisted wand|smooth bone wand|clear glass wand|pale thanot wand|iron wand|silver wand|aquamarine wand|golden wand|metal wand|green coral wand|smooth amber wand|slender blue wand|crystal wand|lockpick"

UserVars.dirty_deeds = Hash.new unless UserVars.dirty_deeds
UserVars.dirty_deeds["item_setting_container"] = "" if UserVars.dirty_deeds["item_setting_container"].length < 1 || UserVars.dirty_deeds["item_setting_container"].nil?
UserVars.dirty_deeds["max_setting_value"] = "30000" if UserVars.dirty_deeds["max_setting_value"].length < 1 || UserVars.dirty_deeds["max_setting_value"].nil?
UserVars.dirty_deeds["max_setting_deeds"] = "10" if UserVars.dirty_deeds["max_setting_deeds"].length < 1 || UserVars.dirty_deeds["max_setting_deeds"].nil?
UserVars.dirty_deeds["confirm_setting_needed"] = "yes" if UserVars.dirty_deeds["confirm_setting_needed"].length < 1 || UserVars.dirty_deeds["confirm_setting_needed"].nil?
UserVars.dirty_deeds["silver_setting_increase"] = "500" if UserVars.dirty_deeds["silver_setting_increase"].length < 1 || UserVars.dirty_deeds["silver_setting_increase"].nil?
UserVars.dirty_deeds["landing_setting_value"] = "3.0" if UserVars.dirty_deeds["landing_setting_value"].length < 1 || UserVars.dirty_deeds["landing_setting_value"].nil?
UserVars.dirty_deeds["icemule_setting_value"] = "3.0" if UserVars.dirty_deeds["icemule_setting_value"].length < 1 || UserVars.dirty_deeds["icemule_setting_value"].nil?
UserVars.dirty_deeds["riverrest_setting_value"] = "3.0" if UserVars.dirty_deeds["riverrest_setting_value"].length < 1 || UserVars.dirty_deeds["riverrest_setting_value"].nil?

@dirty_deeds_setting_container = UserVars.dirty_deeds["item_setting_container"]
@dirty_deeds_max_value = UserVars.dirty_deeds["max_setting_value"].to_i
@dirty_deeds_max_deeds = UserVars.dirty_deeds["max_setting_deeds"].to_i
if UserVars.dirty_deeds["confirm_setting_needed"] =~ /yes/i
	@dirty_deeds_confirm_needed = true
else
	@dirty_deeds_confirm_needed = nil
end
@dirty_deeds_silver_increase = UserVars.dirty_deeds["silver_setting_increase"].to_i
@dirty_deeds_landing_value = UserVars.dirty_deeds["landing_setting_value"].to_f
@dirty_deeds_icemule_value = UserVars.dirty_deeds["icemule_setting_value"].to_f
@dirty_deeds_river_rest_value = UserVars.dirty_deeds["riverrest_setting_value"].to_f

@dirty_deeds_display_post_information = nil
@dirty_deeds_text_to_display = Array.new
@dirty_deeds_starting_deeds = nil
@dirty_deeds_item_container = GameObj.inv.find{ |container| container.noun =~ /#{@dirty_deeds_setting_container}/i }
@dirty_deeds_number_of_deed_attempts = 0
@dirty_deeds_total_gem_values_used_for_successful_attempts = 0
@dirty_deeds_total_gem_values_used_for_all_attempts = 0

CharSettings['deed_attempt_stats_for_landing'] = Hash.new unless CharSettings['deed_attempt_stats_for_landing']
CharSettings['minimum_value_needed_for_deed_in_landing'] = nil unless CharSettings['minimum_value_needed_for_deed_in_landing']
CharSettings['deed_attempt_stats_for_icemule'] = Hash.new unless CharSettings['deed_attempt_stats_for_icemule']
CharSettings['minimum_value_needed_for_deed_in_icemule'] = nil unless CharSettings['minimum_value_needed_for_deed_in_icemule']
CharSettings['deed_attempt_stats_for_riverrest'] = Hash.new unless CharSettings['deed_attempt_stats_for_riverrest']
CharSettings['minimum_value_needed_for_deed_in_riverrest'] = nil unless CharSettings['minimum_value_needed_for_deed_in_riverrest']

CharSettings['gems_to_ignore'] = Array.new unless CharSettings['gems_to_ignore']

@dirty_deeds_ignore_all_these_items = "NONEYABUSINESS"
if CharSettings['gems_to_ignore'].count > 0
	@dirty_deeds_ignore_all_these_items = nil
	CharSettings['gems_to_ignore'].each{ |i| @dirty_deeds_ignore_all_these_items += "#{i}|" }
	@dirty_deeds_ignore_all_these_items.chop!
end

if Gem.loaded_specs["gtk3"]
	gtk_version = 3
else
	gtk_version = 2
end

setup = proc{
	
	Gtk.queue {
		$DIRTY_DEEDS_WINDOW = Gtk::Window.new
		$DIRTY_DEEDS_WINDOW.title = "Dirty Deeds"
		$DIRTY_DEEDS_WINDOW.set_border_width(10)
		
		#GTK2 and GTK3 nonsense:
		if gtk_version == 2
			$DIRTY_DEEDS_BOX = Gtk::VBox.new(false)
			$DIRTY_DEEDS_BOX.set_border_width(5)

			$DIRTY_DEEDS_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
			$DIRTY_DEEDS_VERTICAL_BOX2 = Gtk::VBox.new(false, 0)
		else
			$DIRTY_DEEDS_BOX = Gtk::Box.new(:vertical)
			$DIRTY_DEEDS_BOX.set_border_width(5)

			$DIRTY_DEEDS_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
			$DIRTY_DEEDS_VERTICAL_BOX2 = Gtk::Box.new(:vertical, 0)
		end
		#####

		$DIRTY_DEEDS_WINDOW.add($DIRTY_DEEDS_BOX)
		$DIRTY_DEEDS_WINDOW.set_keep_above(true)
		$DIRTY_DEEDS_NOTEBOOK = Gtk::Notebook.new
		$DIRTY_DEEDS_NOTEBOOK.set_show_border(true)
		$DIRTY_DEEDS_BOX.add($DIRTY_DEEDS_NOTEBOOK)
		$DIRTY_DEEDS_NOTEBOOK.append_page($DIRTY_DEEDS_VERTICAL_BOX1, Gtk::Label.new('General'))
		$DIRTY_DEEDS_NOTEBOOK.append_page($DIRTY_DEEDS_VERTICAL_BOX2, Gtk::Label.new('Towns'))
		$DIRTY_DEEDS_ENTRY = Hash.new 
		$DIRTY_DEEDS_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$DIRTY_DEEDS_TABLE1 = Gtk::Table.new(6, 3, false)
		$DIRTY_DEEDS_TABLE1.row_spacings=3
		$DIRTY_DEEDS_TABLE1.column_spacings=3
		$DIRTY_DEEDS_VERTICAL_BOX1.pack_start($DIRTY_DEEDS_TABLE1, false, false, 0)
		
		$DIRTY_DEEDS_TABLE2 = Gtk::Table.new(6, 3, false)
		$DIRTY_DEEDS_TABLE2.row_spacings=3
		$DIRTY_DEEDS_TABLE2.column_spacings=3
		$DIRTY_DEEDS_VERTICAL_BOX2.pack_start($DIRTY_DEEDS_TABLE2, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $DIRTY_DEEDS_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.dirty_deeds[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$DIRTY_DEEDS_ENTRY[variable] = entry
		$DIRTY_DEEDS_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$DIRTY_DEEDS_ENTRY = Hash.new
		add_label_entry($DIRTY_DEEDS_TABLE1, "Container", 'item_setting_container')
		add_label_entry($DIRTY_DEEDS_TABLE1, "Max Value", 'max_setting_value')
		add_label_entry($DIRTY_DEEDS_TABLE1, "Max Deeds", 'max_setting_deeds')
		add_label_entry($DIRTY_DEEDS_TABLE1, "Confirm", 'confirm_setting_needed')
		add_label_entry($DIRTY_DEEDS_TABLE1, "Silver Increase", 'silver_setting_increase')
		add_label_entry($DIRTY_DEEDS_TABLE2, "Landing Value", 'landing_setting_value')
		add_label_entry($DIRTY_DEEDS_TABLE2, "Icemule Value", 'icemule_setting_value')
		add_label_entry($DIRTY_DEEDS_TABLE2, "River's Rest Value", 'riverrest_setting_value')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $DIRTY_DEEDS_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.dirty_deeds[variable].nil? ? default : UserVars.dirty_deeds[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$DIRTY_DEEDS_ENTRY[variable] = checkbox
		$DIRTY_DEEDS_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$DIRTY_DEEDS_WINDOW.signal_connect("delete_event") {
			$DIRTY_DEEDS_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {

		label = Gtk::Label.new
		label.set_markup("
		<b>The help menu was displayed in game when you started setup.
		This help menu explains what each setting does.
		To see the help menu in the future do ;dirty-deeds help
		Leave any field blank to revert it to the default value.
		</b>")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$DIRTY_DEEDS_TABLE1.attach(align, 1, 2, 8, 100)
		
		label = Gtk::Label.new
		label.set_markup("
		<b>The help menu was displayed in game when you started setup.
		This help menu explains what each setting does.
		To see the help menu in the future do ;dirty-deeds help
		Leave any field blank to revert it to the default value.
		</b>")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$DIRTY_DEEDS_TABLE2.attach(align, 1, 2, 8, 100)

		$DIRTY_DEEDS_WINDOW.show_all
	}
        
	$DIRTY_DEEDS_SETUP_COMPLETED = false
	until($DIRTY_DEEDS_SETUP_COMPLETED)
		sleep 1
	end
	
	UserVars.dirty_deeds ||= Hash.new
	$DIRTY_DEEDS_ENTRY.keys.each { |key|
		if( $DIRTY_DEEDS_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $DIRTY_DEEDS_ENTRY[key].active?
			UserVars.dirty_deeds[key] = $DIRTY_DEEDS_ENTRY[key].active?
		else
			UserVars.dirty_deeds[key] = $DIRTY_DEEDS_ENTRY[key].text.strip.downcase
		end
	}

	UserVars.save()
        
	Gtk.queue {
		$DIRTY_DEEDS_WINDOW.destroy
	}
}

before_dying{
	if @dirty_deeds_display_post_information
		if @dirty_deeds_town_getting_deeds_in == "Icemule"
			fput "open door"
			fput "go door"
		end
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_needed_appraise_room_number]
		wait_while{ running? "go2" }
		@dirty_deeds_text_to_display.push("All finished!")
		@dirty_deeds_text_to_display.push("Stats during this run:")
		@dirty_deeds_text_to_display.push("Deed attempts:                         #{@dirty_deeds_number_of_deed_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		@dirty_deeds_text_to_display.push("Deeds gained:                          #{@dirty_deeds_deeds_gained.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		@dirty_deeds_text_to_display.push("Total item values:                     base value: #{((@dirty_deeds_total_gem_values_used_for_all_attempts / @dirty_deeds_increased_value_to_use).truncate).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}     increased value: #{@dirty_deeds_total_gem_values_used_for_all_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		if @dirty_deeds_deeds_gained > 0
			@dirty_deeds_text_to_display.push("Total values for successful attempts:  base value: #{((@dirty_deeds_total_gem_values_used_for_successful_attempts / @dirty_deeds_increased_value_to_use).truncate).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}     increased value: #{@dirty_deeds_total_gem_values_used_for_successful_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
			@dirty_deeds_text_to_display.push("Average item value per deed gained:    base value: #{(((@dirty_deeds_total_gem_values_used_for_successful_attempts / @dirty_deeds_increased_value_to_use).truncate) / @dirty_deeds_deeds_gained).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}      increased value: #{(@dirty_deeds_total_gem_values_used_for_successful_attempts / @dirty_deeds_deeds_gained).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
		dirty_deeds_message_about_needed_value
		@dirty_deeds_text_to_display.push("Any items left over were either too valuable according to settings or weren't enough to get a deed.")
		dirty_deeds_display_message
	end
}

def dirty_deeds_update_town_information
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		@dirty_deeds_trading_bonus += 5 if Char.race =~ /Giant|Halfling|Half\-Elf|Dark Elf|Forest Gnome/i
		@dirty_deeds_the_deed_room = 4045
		@dirty_deeds_room_outside_the_deed_room = 4044
		@dirty_deeds_increased_value_to_use = @dirty_deeds_landing_value
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		@dirty_deeds_trading_bonus += 5 if Char.race =~ /Halfling|Krolvin|Sylvan/i
		@dirty_deeds_the_deed_room = 2332
		@dirty_deeds_increased_value_to_use = @dirty_deeds_icemule_value
	elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
		@dirty_deeds_trading_bonus += 5 if Char.race =~ /Human|Krolvin/i
		@dirty_deeds_the_deed_room = 10854
		@dirty_deeds_increased_value_to_use = @dirty_deeds_river_rest_value
	end
end

def dirty_deeds_help_menu_message
	@dirty_deeds_text_to_display.push("Container: Enter the NOUN of the container you want to use items from.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Max Value: Enter the highest value over minimum required to get deed.")
	@dirty_deeds_text_to_display.push("Example: You need 5000 silvers to get deed, you enter 4000")
	@dirty_deeds_text_to_display.push("script won't use item totals over 9000 to get a deed.")
	@dirty_deeds_text_to_display.push("Keep in mind this goes by the increased item value.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Max deeds: Maximum number of deeds to get every time script is started.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Confirm: Enter 'yes' to have script display all items and values it will use before every deed attempt.")
	@dirty_deeds_text_to_display.push("Then you can either confirm to use those items or deny then those items won't be used for a deed.")
	@dirty_deeds_text_to_display.push("Enter 'no' to not require confirmation.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Silver increase: Increase required silver value by this much every time you fail to get a deed.")
	@dirty_deeds_text_to_display.push("Example: 4200 silvers didn't get a deed, if you enter 1000 here then 5200 will be used to get a deed.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Towns tab: enter the multiplier you want to use for each town.")
	@dirty_deeds_text_to_display.push("Example: If you enter 2.5 for Landing then all items will have their values")
	@dirty_deeds_text_to_display.push("multiplied by 2.5 in Landing when calculating how much silvers you need for a deed.")
	@dirty_deeds_text_to_display.push("If you need 5000 silvers for a deed then script would use")
	@dirty_deeds_text_to_display.push("2000 silvers in item value for a deed with a multiplier of 2.5")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Commands that aren't part of the setup menu:")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push(";dirty-deeds add item name here: adds item to your list of items to not use as deeds.")
	@dirty_deeds_text_to_display.push("You can either add just noun (typically last word in item name): ;dirty-deeds add ruby")
	@dirty_deeds_text_to_display.push("This would make script not use ANY rubies.")
	@dirty_deeds_text_to_display.push("Or use the item's name (typically last two words in name): ;dirty-deeds add uncut ruby")
	@dirty_deeds_text_to_display.push("This would make script not use uncut rubies but it would still use star rubies.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push(";dirty-deeds setto <value here>: Sets the minimum silver value you want to use for deeds in all towns.")
	@dirty_deeds_text_to_display.push("Example: ;dirty-deeds setto 10000 would use 10000 silvers as the minimum to get a deed.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push(";dirty-deeds remove item name: remove item from your list of items not to use.")
	@dirty_deeds_text_to_display.push(";dirty-deeds remove all: remove ALL items from your list of items not to use.")
	@dirty_deeds_text_to_display.push(";dirty-deeds list: list all items you are not using for deeds.")
	@dirty_deeds_text_to_display.push(";dirty-deeds stats: see all of your stats when attempting to get deeds.")
	@dirty_deeds_text_to_display.push(";dirty-deeds reset stats: reset all of your stats.")
	@dirty_deeds_text_to_display.push(";dirty-deeds reset formula: go back to using the accepted formula in all towns.")
	dirty_deeds_display_message
end

def dirty_deeds_stats_message_display
	if CharSettings['deed_attempt_stats_for_landing'].length == 0 && CharSettings['deed_attempt_stats_for_icemule'].length == 0 && CharSettings['deed_attempt_stats_for_riverrest'].length == 0
		@dirty_deeds_text_to_display.push("You don't have any stats yet! What you trying to pull here?")
	else
		if CharSettings['deed_attempt_stats_for_landing'].length > 0
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("Wehnimer's Landing stats:")
			CharSettings['deed_attempt_stats_for_landing'].each{ |key,value|
			@dirty_deeds_text_to_display.push("Attempt number: #{key.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Total experience: #{CharSettings['deed_attempt_stats_for_landing'][key][:total_experience].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Item value: #{CharSettings['deed_attempt_stats_for_landing'][key][:gem_value_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deeds: #{CharSettings['deed_attempt_stats_for_landing'][key][:deeds_before_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deed gained: #{CharSettings['deed_attempt_stats_for_landing'][key][:deed_gained]}")
			}
		end
		if CharSettings['deed_attempt_stats_for_icemule'].length > 0
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("Icemule Trace stats:")
			CharSettings['deed_attempt_stats_for_icemule'].each{ |key,value|
			@dirty_deeds_text_to_display.push("Attempt number: #{key.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Total experience: #{CharSettings['deed_attempt_stats_for_icemule'][key][:total_experience].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Item value: #{CharSettings['deed_attempt_stats_for_icemule'][key][:gem_value_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deeds: #{CharSettings['deed_attempt_stats_for_icemule'][key][:deeds_before_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deed gained: #{CharSettings['deed_attempt_stats_for_icemule'][key][:deed_gained]}")
			}
		end
		if CharSettings['deed_attempt_stats_for_riverrest'].length > 0
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("River's Rest stats:")
			CharSettings['deed_attempt_stats_for_riverrest'].each{ |key,value|
			@dirty_deeds_text_to_display.push("Attempt number: #{key.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Total experience: #{CharSettings['deed_attempt_stats_for_riverrest'][key][:total_experience].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Item value: #{CharSettings['deed_attempt_stats_for_riverrest'][key][:gem_value_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deeds: #{CharSettings['deed_attempt_stats_for_riverrest'][key][:deeds_before_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deed gained: #{CharSettings['deed_attempt_stats_for_riverrest'][key][:deed_gained]}")
			}
		end
	end
	dirty_deeds_display_message
end

def dirty_deeds_display_message
	_respond
	longest_string = 0
	@dirty_deeds_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@dirty_deeds_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@dirty_deeds_text_to_display = Array.new
end

def dirty_deeds_get_deed_cost
	fput "exp"
	while line = get
		if line =~ /Total Exp\: (.*)\s+Death\'s Sting\:/
			@dirty_deeds_total_current_exp = $1.delete(",").to_i
		elsif line =~ /Long\-Term Exp\: .*\Deeds\: (\d+)/
			@dirty_deeds_current_deeds = $1.to_i
			@dirty_deeds_starting_deeds = $1.to_i if @dirty_deeds_starting_deeds.nil?
			break
		end
	end
	if CharSettings['minimum_value_needed_for_deed_in_landing']
		@dirty_deeds_landing_needed_value_information = CharSettings['minimum_value_needed_for_deed_in_landing']
	else
		@dirty_deeds_landing_needed_value_information = (101 + ((Stats.level + @dirty_deeds_current_deeds) * 100))
	end
	if CharSettings['minimum_value_needed_for_deed_in_icemule']
		@dirty_deeds_icemule_needed_value_information = CharSettings['minimum_value_needed_for_deed_in_icemule']
	else
		@dirty_deeds_icemule_needed_value_information = (101 + ((Stats.level + @dirty_deeds_current_deeds) * 100))
	end
	if CharSettings['minimum_value_needed_for_deed_in_riverrest']
		@dirty_deeds_riverrest_needed_value_information = CharSettings['minimum_value_needed_for_deed_in_riverrest']
	else
		@dirty_deeds_riverrest_needed_value_information = (101 + ((Stats.level + @dirty_deeds_current_deeds) * 100))
	end
	
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		if CharSettings['minimum_value_needed_for_deed_in_landing']
			@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_landing']
		else
			@dirty_deeds_gem_value_needed_for_deed = (101 + ((Stats.level + @dirty_deeds_current_deeds) * 100))
		end
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		if CharSettings['minimum_value_needed_for_deed_in_icemule']
			@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_icemule']
		else
			@dirty_deeds_gem_value_needed_for_deed = (101 + ((Stats.level + @dirty_deeds_current_deeds) * 100))
		end
	elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
		if CharSettings['minimum_value_needed_for_deed_in_riverrest']
			@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_riverrest']
		else
			@dirty_deeds_gem_value_needed_for_deed = (101 + ((Stats.level + @dirty_deeds_current_deeds) * 100))
		end
	end
end

def dirty_deeds_message_about_needed_value
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		if CharSettings['minimum_value_needed_for_deed_in_landing']
			@dirty_deeds_text_to_display.push("Formula no longer works for you in Landing. Minimum item value being used: #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		else
			@dirty_deeds_text_to_display.push("Expected needed item value based on current accepted formula:            #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		if CharSettings['minimum_value_needed_for_deed_in_icemule']
			@dirty_deeds_text_to_display.push("Formula no longer works you in Icemule Trace. Minimum item value being used: #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		else
			@dirty_deeds_text_to_display.push("Expected needed item value based on current accepted formula:            #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
	elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
		if CharSettings['minimum_value_needed_for_deed_in_riverrest']
			@dirty_deeds_text_to_display.push("Formula no longer works you in River's Rest. Minimum item value being used: #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		else
			@dirty_deeds_text_to_display.push("Expected needed item value based on current accepted formula:            #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
	end
end

def dirty_deeds_go_to_deed_room
	until Room.current.id == @dirty_deeds_the_deed_room
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_the_deed_room]
		wait_while{ running? "go2" }
	end
	if @dirty_deeds_town_getting_deeds_in == "Icemule"
		fput "search flow"
		until Room.current.id == 23547
			waitrt?
			fput "go door"
			sleep 0.5
		end
		fput "close door"
	end
end

def dirty_deeds_go_to_room_outside_deed_room
	until Room.current.id == @dirty_deeds_room_outside_the_deed_room
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_room_outside_the_deed_room]
		wait_while{ running? "go2" }
	end
end

def dirty_deeds_get_a_deed
	total_number_of_gems_to_use = 1
	dirty_deeds_go_to_deed_room if @dirty_deeds_town_getting_deeds_in == "Icemule" || @dirty_deeds_town_getting_deeds_in == "River's Rest"
	loop{
		loop{
			needed_gems = Array.new
			current_number = 0
			temp_hash_of_all_gem_values = Marshal.load(Marshal.dump(@dirty_deeds_all_gem_values))
			needed_gems[current_number] = temp_hash_of_all_gem_values.max_by{ |key,value| value }
			temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])

			loop{
				current_number += 1
				break if current_number >= total_number_of_gems_to_use
				needed_gems[current_number] = temp_hash_of_all_gem_values.min_by{ |key,value| value }
				temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])
			}

			if needed_gems.count < current_number
				break
			else
				running_total = 0
				needed_gems.each{ |i| running_total += i[1] if i}
				if running_total > (@dirty_deeds_gem_value_needed_for_deed + @dirty_deeds_max_value)
					@dirty_deeds_all_gem_values.delete(needed_gems[0][0])
				else
					break
				end
			end
		}
		
		loop{
			running_total = 0
			@dirty_deeds_all_gem_values.each{ |key,value| running_total += value }
			exit if running_total < @dirty_deeds_gem_value_needed_for_deed
			needed_gems = Array.new
			current_number = 0
			temp_hash_of_all_gem_values = Marshal.load(Marshal.dump(@dirty_deeds_all_gem_values))
			needed_gems[current_number] = temp_hash_of_all_gem_values.max_by{ |key,value| value }
			temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])

			loop{
				current_number += 1
				break if current_number >= total_number_of_gems_to_use || temp_hash_of_all_gem_values.length == 0
				needed_gems[current_number] = temp_hash_of_all_gem_values.min_by{ |key,value| value }
				temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])
			}

			if needed_gems.count < current_number
				exit
			else
				running_total = 0
				needed_gems.each{ |i| running_total += i[1] if i}
				if running_total >= @dirty_deeds_gem_value_needed_for_deed
					running_total = 0
					needed_gems = needed_gems.sort_by!(&:last).reverse
					final_needed_gems = Array.new
					current_number = 0
					needed_gems.each{ |i| 
						running_total += i[1] if i
						final_needed_gems[current_number] = i
						current_number += 1
						break if running_total >= @dirty_deeds_gem_value_needed_for_deed
					}
					if @dirty_deeds_town_getting_deeds_in == "Landing"
						dirty_deeds_go_to_deed_room
						2.times{ fput "hit chime with mallet" }
						until kneeling?
							waitrt?
							fput "kneel"
							sleep 0.2
						end
					end
					dirty_deeds_message_about_needed_value
					@dirty_deeds_text_to_display.push("Each item and their values being used for this attempt:")
					@dirty_deeds_text_to_display.push("")
					final_needed_gems.each{ |gem|
						current_gem_name = @dirty_deeds_item_container.contents.find{ |i| i if i.id == gem[0] }
						@dirty_deeds_text_to_display.push("#{current_gem_name.name}     base value: #{((gem[1] / @dirty_deeds_increased_value_to_use).truncate).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}     increased value: #{gem[1].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
					}
					@dirty_deeds_text_to_display.push("")
					@dirty_deeds_text_to_display.push("Current gem value being used to try for deed:                           #{running_total.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
					dirty_deeds_display_message
					permission_has_been_granted = nil
					if @dirty_deeds_confirm_needed
						@dirty_deeds_text_to_display.push("If these items are acceptable to use for a deed then do ;send confirm")
						@dirty_deeds_text_to_display.push("If you don't want to use these items for a deed then do ;send cancel")
						dirty_deeds_display_message
						while line = get
							if line =~ /confirm/i
								permission_has_been_granted = true
								break
							elsif line =~ /cancel/i
								permission_has_been_granted = nil
								break
							end
						end
					else
						permission_has_been_granted = true
					end
					final_needed_gems.each{ |i| @dirty_deeds_all_gem_values.delete(i[0])}
					if permission_has_been_granted
						if @dirty_deeds_town_getting_deeds_in == "Landing"
							final_needed_gems.each{ |i|
								fput "get ##{i[0]}"
								fput "drop ##{i[0]}"
							}
							fput "hit chime with mallet"
						elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
							fput "pull chain"
							fput "open drawer"
							final_needed_gems.each{ |i|
								fput "get ##{i[0]}"
								fput "put ##{i[0]} in drawer"
							}
							fput "close drawer"
						elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
							until standing?
								waitrt?
								fput "stand"
								sleep 0.1
							end
							until kneeling?
								waitrt?
								fput "kneel"
								sleep 0.1
							end
							waitrt?
							2.times{ fput "look in pool" }
							waitrt?
							fput "touch pool"
							final_needed_gems.each{ |i|
								fput "get ##{i[0]}"
								fput "put ##{i[0]} in pool"
							}
							fput "touch pool"
							while line = get
								if line =~ /He smiles sadly at you/
									break
								elsif line =~ /You are welcome to my garden/
									until checkright.nil?
										waitrt?
										fput "stow right" if checkright
										sleep 0.1
									end
									fput "touch flower"
									fput "get seed"
									fput "plant seed"
									until standing?
										waitrt?
										fput "stand"
										sleep 0.1
									end
									move 'out'
									break
								end
							end
						end
						@dirty_deeds_deed_count_before_attempt = @dirty_deeds_current_deeds.dup
						dirty_deeds_get_deed_cost
						if @dirty_deeds_deed_count_before_attempt == @dirty_deeds_current_deeds
							if @dirty_deeds_town_getting_deeds_in == "Landing"
								CharSettings['minimum_value_needed_for_deed_in_landing'] = running_total + @dirty_deeds_silver_increase
								@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_landing']
								CharSettings['deed_attempt_stats_for_landing'].store((CharSettings['deed_attempt_stats_for_landing'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "No")
							elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
								CharSettings['minimum_value_needed_for_deed_in_icemule'] = running_total + @dirty_deeds_silver_increase
								@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_icemule']
								CharSettings['deed_attempt_stats_for_icemule'].store((CharSettings['deed_attempt_stats_for_icemule'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "No")
							elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
								CharSettings['minimum_value_needed_for_deed_in_riverrest'] = running_total + @dirty_deeds_silver_increase
								@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_riverrest']
								CharSettings['deed_attempt_stats_for_riverrest'].store((CharSettings['deed_attempt_stats_for_riverrest'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "No")
							end
							@dirty_deeds_text_to_display.push("You did not receive a deed after that attempt.")
							@dirty_deeds_text_to_display.push("Script will no longer use the accepted formula when determining how much a deed costs you.")
							@dirty_deeds_text_to_display.push("Every time you fail to get a deed the deed cost will increase by #{@dirty_deeds_silver_increase} silvers of the last attempt.")
							@dirty_deeds_text_to_display.push("Your new item value deed cost is #{@dirty_deeds_gem_value_needed_for_deed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}.")
							dirty_deeds_display_message
						else
							if @dirty_deeds_town_getting_deeds_in == "Landing"
								CharSettings['deed_attempt_stats_for_landing'].store((CharSettings['deed_attempt_stats_for_landing'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "Yes")
							elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
								CharSettings['deed_attempt_stats_for_icemule'].store((CharSettings['deed_attempt_stats_for_icemule'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "Yes")
							elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
								CharSettings['deed_attempt_stats_for_riverrest'].store((CharSettings['deed_attempt_stats_for_riverrest'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "Yes")
							end
							@dirty_deeds_text_to_display.push("Deed gained!")
							dirty_deeds_display_message
							@dirty_deeds_total_gem_values_used_for_successful_attempts += running_total
						end
						@dirty_deeds_total_gem_values_used_for_all_attempts += running_total
						@dirty_deeds_deeds_gained = @dirty_deeds_current_deeds - @dirty_deeds_starting_deeds
						@dirty_deeds_number_of_deed_attempts += 1
						exit if @dirty_deeds_deeds_gained >= @dirty_deeds_max_deeds
						if @dirty_deeds_town_getting_deeds_in == "Icemule"
							fput "open door"
							fput "close door"
						end
					else
						fput "hit chime with mallet" if @dirty_deeds_town_getting_deeds_in == "Landing"
					end
				else
					total_number_of_gems_to_use += 1
					break
				end
			end
			dirty_deeds_go_to_room_outside_deed_room if @dirty_deeds_town_getting_deeds_in == "Landing"
		}
	}
	exit
end

def dirty_deeds_get_values_of_gems
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		@dirty_deeds_needed_appraise_room_number = 1776
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		@dirty_deeds_needed_appraise_room_number = 2464
	elsif @dirty_deeds_town_getting_deeds_in == "River's Rest"
		@dirty_deeds_needed_appraise_room_number = 10935
	end
	kill_script "go2" if running? "go2"
	wait_while{ running? "go2" }
	start_script "go2", [@dirty_deeds_needed_appraise_room_number]
	wait_while{ running? "go2" } 
	@dirty_deeds_all_gem_values = Hash.new
	fput "open ##{@dirty_deeds_item_container.id}"
	fput "look in ##{@dirty_deeds_item_container.id}"
	sleep 1
	if checkright || checkleft
		echo "Trying to STOW anything in your left and right hand. The script will pause until your left and right hand are free."
		fput "stow right" if checkright
		fput "stow left" if checkleft
		wait_until{ checkright.nil? && checkleft.nil? }
	end
	@dirty_deeds_item_container.contents.each{ |item|
		appraised_item_value = nil
		if (item.name !~ /#{@dirty_deeds_ignore_all_these_items}/) && ((item.type == "gem" && @dirty_deeds_town_getting_deeds_in == "Landing") || item.name =~ /#{@dirty_deeds_all_icemule_items}/ && @dirty_deeds_town_getting_deeds_in == "Icemule" || item.name =~ /#{@dirty_deeds_all_riverrest_gems}/ && @dirty_deeds_town_getting_deeds_in == "River's Rest")
			fput "get ##{item.id}"
			result = dothistimeout "appraise ##{item.id}", 2, /I'\ll give you (.*) silvers? for it if you want to sell\.|I\'ll give you (.*) silver coins? for it\.|I already quoted (.*) silvers?\.|I only deal in gems and jewelry|I\'ve no use for that\./
			if result =~ /I'\ll give you (.*) silvers? for it if you want to sell\./
				appraised_item_value = $1.delete(",").to_i
			elsif result =~ /I\'ll give you (.*) silver coins? for it\./
				appraised_item_value = $1.delete(",").to_i
			elsif result =~ /I already quoted (.*) silvers?\./
				appraised_item_value = $1.delete(",").to_i
			elsif result =~ /I only deal in gems and jewelry|I\'ve no use for that\./
				fput "put ##{item.id} in ##{@dirty_deeds_item_container.id}"
			elsif result.nil?
				fput "put ##{item.id} in ##{@dirty_deeds_item_container.id}"
			end
		end
		if appraised_item_value
			appraised_item_value = ((((appraised_item_value.to_f / (100 + @dirty_deeds_trading_bonus)) * 100).truncate) * @dirty_deeds_increased_value_to_use).truncate
			@dirty_deeds_all_gem_values[GameObj.right_hand.id] = appraised_item_value
			fput "put ##{item.id} in ##{@dirty_deeds_item_container.id}"
		end
	}
end

if script.vars[1] =~ /setup/i
	dirty_deeds_help_menu_message
	setup.call
elsif @dirty_deeds_setting_container.nil? || @dirty_deeds_setting_container.length < 1
	@dirty_deeds_text_to_display.push("You haven't set your container in the setup menu. This is required.")
	@dirty_deeds_text_to_display.push("To enter setup menu do ;dirty-deeds setup")
	dirty_deeds_display_message
else
	if script.vars[1] =~ /stats/i
		dirty_deeds_stats_message_display
	elsif script.vars[1] =~ /help/i
		dirty_deeds_help_menu_message
	elsif script.vars[1] =~ /reset/i && script.vars[2] =~ /stats/i
		CharSettings['deed_attempt_stats_for_landing'] = Hash.new
		CharSettings['deed_attempt_stats_for_icemule'] = Hash.new
		CharSettings['deed_attempt_stats_for_riverrest'] = Hash.new
		@dirty_deeds_text_to_display.push("Your stats have been reset.")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /reset/i && script.vars[2] =~ /form/i
		CharSettings['minimum_value_needed_for_deed_in_landing'] = nil
		CharSettings['minimum_value_needed_for_deed_in_icemule'] = nil
		CharSettings['minimum_value_needed_for_deed_in_riverrest'] = nil
		@dirty_deeds_text_to_display.push("Script will now use the accepted formula in all towns.")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /reset/i
		@dirty_deeds_text_to_display.push("Reset command wasn't recognized.")
		@dirty_deeds_text_to_display.push("Reset options are:")
		@dirty_deeds_text_to_display.push(";dirty-deeds reset stats")
		@dirty_deeds_text_to_display.push(";dirty-deeds reset formula")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /add/i
		this_is_the_gem = script.vars[0].split(' ')[1..-1].join(' ').downcase
		CharSettings['gems_to_ignore'].push(this_is_the_gem)
		@dirty_deeds_text_to_display.push("All gems you are ignoring:")
		CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
		dirty_deeds_display_message
	elsif script.vars[1] =~ /remove|delete/i && script.vars[2].downcase == "all"
		CharSettings['gems_to_ignore'] = Array.new
		@dirty_deeds_text_to_display.push("All gems have been removed from your list.")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /remove|delete/i
		this_is_the_gem = script.vars[0].split(' ')[1..-1].join(' ').downcase
		CharSettings['gems_to_ignore'].delete(this_is_the_gem)
		@dirty_deeds_text_to_display.push("All gems you are ignoring:")
		CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
		dirty_deeds_display_message
	elsif script.vars[1] =~ /list/i
		@dirty_deeds_text_to_display.push("All gems you are ignoring:")
		CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
		dirty_deeds_display_message
	elsif script.vars[1] =~ /setto/i && script.vars[2] =~ /\d+/
		CharSettings['minimum_value_needed_for_deed_in_landing'] = script.vars[2].to_i
		CharSettings['minimum_value_needed_for_deed_in_icemule'] = script.vars[2].to_i
		CharSettings['minimum_value_needed_for_deed_in_riverrest'] = script.vars[2].to_i
		@dirty_deeds_text_to_display.push("Minimum silver value in all towns has been set to #{script.vars[2].to_i}")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /setto/i
		@dirty_deeds_text_to_display.push("setto command not recognized.")
		@dirty_deeds_text_to_display.push("setto command example: ;dirty-deeds setto 10000")
		dirty_deeds_display_message
	else
		if @dirty_deeds_item_container.nil?
			@dirty_deeds_text_to_display.push("I could not find the container you specified.")
			@dirty_deeds_text_to_display.push("What you entered for the noun of your container: #{@dirty_deeds_setting_container}")
			@dirty_deeds_text_to_display.push("Change your 'Container' setting by doing ;dirty-deeds setup")
			dirty_deeds_display_message
		else
			dirty_deeds_get_deed_cost
			@dirty_deeds_text_to_display.push("Script will use ALL appropriate items found in: #{@dirty_deeds_item_container.name}")
			@dirty_deeds_text_to_display.push("Number of deeds to get: #{@dirty_deeds_max_deeds}")
			@dirty_deeds_text_to_display.push("Won't use item values #{@dirty_deeds_max_value.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers over minimum to get a deed.")
			if @dirty_deeds_confirm_needed
				@dirty_deeds_text_to_display.push("Confirmation required: yes")
			else
				@dirty_deeds_text_to_display.push("Confirmation required: no")
			end
			@dirty_deeds_text_to_display.push("Silver value required will increase by #{@dirty_deeds_silver_increase} every time you fail to get a deed.")
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("Wehnimer's Landing stats: Trading bonus: #{@dirty_deeds_landing_trading_bonus}%, item multiplier: #{@dirty_deeds_landing_value}, silvers needed for deed: #{@dirty_deeds_landing_needed_value_information}")
			@dirty_deeds_text_to_display.push("Icemule Trace stats: Trading bonus:      #{@dirty_deeds_icemule_trading_bonus}%, item multiplier: #{@dirty_deeds_icemule_value}, silvers needed for deed: #{@dirty_deeds_icemule_needed_value_information}")
			@dirty_deeds_text_to_display.push("River's Rest stats: Trading bonus:      #{@dirty_deeds_riverrest_trading_bonus}%, item multiplier: #{@dirty_deeds_river_rest_value}, silvers needed for deed: #{@dirty_deeds_riverrest_needed_value_information}")
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("Where are we getting deeds from today? Do ;send <number> for your choice")
			@dirty_deeds_text_to_display.push("For example to get deeds in Landing do ;send 1")
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("1 Wehnimer's Landing:      Script will use gems")
			@dirty_deeds_text_to_display.push("2 Icemule Trace:           Script will use wands and lockpicks")
			@dirty_deeds_text_to_display.push("3 River's Rest:            Script will use River's Rest gems")
			dirty_deeds_display_message
			while line = get
				if line == "1"
					@dirty_deeds_town_getting_deeds_in = "Landing"
					break
				elsif line == "2"
					@dirty_deeds_town_getting_deeds_in = "Icemule"
					break
				elsif line == "3"
					@dirty_deeds_town_getting_deeds_in = "River's Rest"
					break
				end
			end
			dirty_deeds_update_town_information
			dirty_deeds_get_deed_cost
			dirty_deeds_message_about_needed_value
			dirty_deeds_get_values_of_gems
			running_total = 0
			@dirty_deeds_text_to_display.push("Your trading bonus in this town is                                       #{@dirty_deeds_trading_bonus}%")
			@dirty_deeds_all_gem_values.each{ |key,value| running_total += value }
			if running_total < @dirty_deeds_gem_value_needed_for_deed
				@dirty_deeds_text_to_display.push("Total value of items in your container is                                #{running_total.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
				@dirty_deeds_text_to_display.push("You don't have enough to get a deed.")
				dirty_deeds_display_message
			else
				@dirty_deeds_display_post_information = true
				@dirty_deeds_text_to_display.push("Total value of items in your container is                                #{running_total.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
				dirty_deeds_display_message
				sleep 2
				dirty_deeds_get_a_deed
			end
		end
	end
end