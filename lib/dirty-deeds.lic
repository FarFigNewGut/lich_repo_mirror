=begin

	THIS SCRIPT CURRENTLY ONLY WORKS IN THE LANDING. IT WILL TAKE YOU TO THE LANDING SO IF YOU DON'T WANT TO GO THERE THEN I SUGGEST NOT RUNNING THIS SCRIPT.
	
	tl;dr version: script will appraise all gems in the container you specify, calculate how much gem value you need to get a deed, and drop the needed gems in order to get you a deed. It will keep getting deeds in this manner until you either: run out of gems, don't have enough gem value to get a deed, or you get the number of deeds you specify.
	
	For instructions on how to use the script start script as:
	
	;dirty-deeds

	You like deeds right? Of course you do! Everyone does! But who likes to do all of the guess work of how many gems and which gems you need to drop in order to get a deed? No one!
	
	This script takes all of the guess work out of getting you those deeds!
	
	Simply start up the script with the name of the container filled with gems you want to use to get deeds with and the script will appraise all of the gems to get their values (and even take your trading bonus into account to get their base value) and use those values to figure out which deeds you need to drop in order to receive a deed. AMAZING!
	
	The script starts out using the accepted formula on the wiki for gaining deeds, which is: 101 + (level * 100) + (deeds * 100), with gems being worth about 3x their base value.
	However this formula isn't perfect and at high experience levels is fairly inaccurate. When the script determines it can no longer rely on the formula for getting you deeds it will instead add 500 silvers to the total gem value you used when you last failed, and remember this figure until you fail to get a deed again.
	
	For example if you used 3,000 silvers in gems to attempt to get a deed and didn't get a deed then the script will use 3,500 silvers in gem value from then on until you once again fail to get a deed, at which point if you failed to get a deed with 3,800 silvers in gem value it will start doing 4,300 silvers in value, etc etc.
	
	The script also tracks various stats every time you attempt to get a deed; stats such as total gem value used in deed attempt, your total experience at the time, how many deeds you had, and whether or not you gained a deed with the attempt.
	
	;dirty-deeds stats: see all of your stats when attempting to get deeds.
	;dirty-deeds reset: reset all of your stats.
		
	Changelog:
	Version 1: Initial release and stuff.
	Version 2: Added option to add gems to a list of gems to NOT use for deeds. Do ;dirty-deeds for all the instructions.
	
	To do list:
		
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 2

=end

lich_up_to_date = nil
version = LICH_VERSION.split(".")
lich_up_to_date = true if version[0].to_i > 4 || version[1].to_i > 6 || version[2].to_i > 53

if lich_up_to_date
	inf_bonus = Stats.enhanced_inf[1]
else
	inf_bonus = Stats.inf[1]
end

if Skills.to_bonus(Skills.trading) == 0
	@dirty_deeds_trading_bonus = 0
else
	@dirty_deeds_trading_bonus = [0, (Skills.to_bonus(Skills.trading) + inf_bonus) / 12].max
end

if Char.race =~ /Dark Elf/i
	@dirty_deeds_trading_bonus -= 5
elsif Char.race =~ /Krolvin/i
	@dirty_deeds_trading_bonus -= 25
end

#Landing deed room information:
@dirty_deeds_landing_deed_room = 4045
@dirty_deeds_landing_outside_deed_room = 4044

@dirty_deeds_display_post_information = nil
@dirty_deeds_text_to_display = Array.new
@dirty_deeds_max_amount_over_needed = 1000000
@dirty_deeds_gem_container = GameObj.inv.find{ |container| container.noun =~ /#{script.vars[1]}/i }
@dirty_deeds_starting_deeds = nil
@dirty_deeds_max_deeds = 1000
@dirty_deeds_max_deeds = $1.to_i if script.vars.any?{ |i| i =~ /^max(\d+)/i }
@dirty_deeds_max_amount_over_needed = $1.to_i if script.vars.any?{ |i| i =~ /^(\d+)/i }
@dirty_deeds_number_of_deed_attempts = 0
@dirty_deeds_total_gem_values_used_for_successful_attempts = 0
@dirty_deeds_total_gem_values_used_for_all_attempts = 0
@dirty_deeds_deed_cost_increase_after_each_failure = 500

CharSettings['minimum_value_needed_for_deed'] = nil unless CharSettings['minimum_value_needed_for_deed']
CharSettings['deed_attempt_stats'] = Hash.new unless CharSettings['deed_attempt_stats']
CharSettings['gems_to_ignore'] = Array.new unless CharSettings['gems_to_ignore']
CharSettings['instructions_have_been_read'] = nil unless CharSettings['instructions_have_been_read']

@dirty_deeds_ignore_all_these_gems = nil
if CharSettings['gems_to_ignore'].count > 0
	CharSettings['gems_to_ignore'].each{ |i| @dirty_deeds_ignore_all_these_gems += "#{i}|" }
	@dirty_deeds_ignore_all_these_gems.chop!
end

before_dying{
	if @dirty_deeds_display_post_information
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [1776]
		wait_while{ running? "go2" }
		@dirty_deeds_text_to_display.push("All finished!")
		@dirty_deeds_text_to_display.push("Stats during this run:")
		@dirty_deeds_text_to_display.push("Deed attempts:                         #{@dirty_deeds_number_of_deed_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		@dirty_deeds_text_to_display.push("Deeds gained:                          #{@dirty_deeds_deeds_gained.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		@dirty_deeds_text_to_display.push("Total gem values:                      #{@dirty_deeds_total_gem_values_used_for_all_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		if @dirty_deeds_deeds_gained > 0
			@dirty_deeds_text_to_display.push("Total values for successful attempts:  #{@dirty_deeds_total_gem_values_used_for_successful_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
			@dirty_deeds_text_to_display.push("Average gem value per deed gained:     #{(@dirty_deeds_total_gem_values_used_for_successful_attempts / @dirty_deeds_deeds_gained).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
		dirty_deeds_message_about_needed_value
		@dirty_deeds_text_to_display.push("Any gems left over were either too valuable according to your settings or weren't enough to get a deed.")
		dirty_deeds_display_message
	end
}

def dirty_deeds_help_menu_message
	@dirty_deeds_text_to_display.push("Enter the NOUN of the container you want to use gems from when starting the script.")
	@dirty_deeds_text_to_display.push("For example: ;dirty-deeds cloak")
	@dirty_deeds_text_to_display.push("Keep in mind ALL gems in this container will be used for deeds.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("OPTIONAL: Enter the highest gem value total over minimum you want to use to get a deed.")
	@dirty_deeds_text_to_display.push("Example: You need 2000 to get deed, you enter 4000, script won't use gem values over 6000 to get deed.")
	@dirty_deeds_text_to_display.push("Example of how to start script with this setting: ;dirty-deeds cloak 4000")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("OPTIONAL: Enter maximum number of deeds you want to get.")
	@dirty_deeds_text_to_display.push("Example: max10 (note no spaces)")
	@dirty_deeds_text_to_display.push("Example how to start script: ;dirty-deeds max10")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Container noun MUST come first, however the order of optional commands don't matter.")
	@dirty_deeds_text_to_display.push(";dirty-deeds cloak max10 4000 and ;dirty-deeds cloak 4000 max10 will both work.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Your trading bonus in Landing is: #{@dirty_deeds_trading_bonus}%")
	@dirty_deeds_text_to_display.push("The trading bonus information helps determine the base value of your gems after appraisal.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Other commands to use:")
	@dirty_deeds_text_to_display.push(";dirty-deeds add gem name here: adds gem to your list of gems to not use as deeds.")
	@dirty_deeds_text_to_display.push("You can either add just noun (typically last word in gem name): ;dirty-deeds add ruby")
	@dirty_deeds_text_to_display.push("This would make script not use ANY rubies.")
	@dirty_deeds_text_to_display.push("Or use the gem's name (typically last two words in name): ;dirty-deeds add uncut ruby")
	@dirty_deeds_text_to_display.push("This would make script not use uncut rubies but it would still use star rubies.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push(";dirty-deeds remove gem name: remove gem from your list of gems not to use.")
	@dirty_deeds_text_to_display.push(";dirty-deeds remove all: remove ALL gems from your list of gems not to use.")
	@dirty_deeds_text_to_display.push(";dirty-deeds list: list all gems you are not using for deeds.")
	@dirty_deeds_text_to_display.push(";dirty-deeds stats: see all of your stats when attempting to get deeds.")
	@dirty_deeds_text_to_display.push(";dirty-deeds reset: reset all of your stats.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Also remember this script will run you to the Landing except when using the reset or stats options.")
	dirty_deeds_display_message
end

def dirty_deeds_stats_message_display
	if CharSettings['deed_attempt_stats'].length == 0
		@dirty_deeds_text_to_display.push("You don't have any stats yet! What you trying to pull here?")
	else
		CharSettings['deed_attempt_stats'].each{ |key,value|
			@dirty_deeds_text_to_display.push("Attempt number: #{key.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Total experience: #{CharSettings['deed_attempt_stats'][key][:total_experience].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Gem value: #{CharSettings['deed_attempt_stats'][key][:gem_value_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deeds: #{CharSettings['deed_attempt_stats'][key][:deeds_before_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deed gained: #{CharSettings['deed_attempt_stats'][key][:deed_gained]}")
		}
	end
	dirty_deeds_display_message
end

def dirty_deeds_display_message
	_respond
	longest_string = 0
	@dirty_deeds_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@dirty_deeds_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@dirty_deeds_text_to_display = Array.new
end

def dirty_deeds_get_deed_cost
	fput "exp"
	while line = get
		if line =~ /Total Exp\: (.*)\s+Death\'s Sting\:/
			@dirty_deeds_total_current_exp = $1.delete(",").to_i
		elsif line =~ /Long\-Term Exp\: \d+\s+Deeds\: (\d+)/
			@dirty_deeds_current_deeds = $1.to_i
			@dirty_deeds_starting_deeds = $1.to_i if @dirty_deeds_starting_deeds.nil?
			break
		end
	end
	if CharSettings['minimum_value_needed_for_deed']
		@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed']
	else
		@dirty_deeds_gem_value_needed_for_deed = (101 + ((Char.level + @dirty_deeds_current_deeds) * 100)) / 3
	end
end

def dirty_deeds_message_about_needed_value
	if CharSettings['minimum_value_needed_for_deed']
		@dirty_deeds_text_to_display.push("Accepted formula no longer works for you. Minimum gem value being used: #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	else
		@dirty_deeds_text_to_display.push("Expected needed gem value based on current accepted formula:            #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	end
end

def dirty_deeds_go_to_deed_room
	until Room.current.id == @dirty_deeds_landing_deed_room
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_landing_deed_room]
		wait_while{ running? "go2" }
	end
end

def dirty_deeds_go_to_room_outside_deed_room
	until Room.current.id == @dirty_deeds_landing_outside_deed_room
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_landing_outside_deed_room]
		wait_while{ running? "go2" }
	end
end

def dirty_deeds_get_a_deed
	total_number_of_gems_to_use = 1
	loop{
		loop{
			needed_gems = Array.new
			current_number = 0
			temp_hash_of_all_gem_values = Marshal.load(Marshal.dump(@dirty_deeds_all_gem_values))
			needed_gems[current_number] = temp_hash_of_all_gem_values.max_by{ |key,value| value }
			temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])

			loop{
				current_number += 1
				break if current_number >= total_number_of_gems_to_use
				needed_gems[current_number] = temp_hash_of_all_gem_values.min_by{ |key,value| value }
				temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])
			}

			if needed_gems.count < current_number
				break
			else
				running_total = 0
				needed_gems.each{ |i| running_total += i[1] if i}
				if running_total > (@dirty_deeds_gem_value_needed_for_deed + @dirty_deeds_max_amount_over_needed)
					@dirty_deeds_all_gem_values.delete(needed_gems[0][0])
				else
					break
				end
			end
		}
		
		loop{
			running_total = 0
			@dirty_deeds_all_gem_values.each{ |key,value| running_total += value }
			exit if running_total < @dirty_deeds_gem_value_needed_for_deed
			needed_gems = Array.new
			current_number = 0
			temp_hash_of_all_gem_values = Marshal.load(Marshal.dump(@dirty_deeds_all_gem_values))
			needed_gems[current_number] = temp_hash_of_all_gem_values.max_by{ |key,value| value }
			temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])

			loop{
				current_number += 1
				break if current_number >= total_number_of_gems_to_use || temp_hash_of_all_gem_values.length == 0
				needed_gems[current_number] = temp_hash_of_all_gem_values.min_by{ |key,value| value }
				temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])
			}

			if needed_gems.count < current_number
				exit
			else
				running_total = 0
				needed_gems.each{ |i| running_total += i[1] if i}
				if running_total >= @dirty_deeds_gem_value_needed_for_deed
					running_total = 0
					needed_gems = needed_gems.sort_by!(&:last).reverse
					final_needed_gems = Array.new
					current_number = 0
					needed_gems.each{ |i| 
						running_total += i[1] if i
						final_needed_gems[current_number] = i
						current_number += 1
						break if running_total >= @dirty_deeds_gem_value_needed_for_deed
					}
					dirty_deeds_go_to_deed_room
					2.times{ fput "hit chime with mallet" }
					until kneeling?
						waitrt?
						fput "kneel"
						sleep 0.2
					end
					dirty_deeds_message_about_needed_value
					@dirty_deeds_text_to_display.push("Current gem value being used to try for deed:                           #{running_total.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
					dirty_deeds_display_message
					final_needed_gems.each{ |i|
						fput "get ##{i[0]}"
						fput "drop ##{i[0]}"
					}
					fput "hit chime with mallet"
					final_needed_gems.each{ |i| @dirty_deeds_all_gem_values.delete(i[0])}
					@dirty_deeds_deed_count_before_attempt = @dirty_deeds_current_deeds.dup
					dirty_deeds_get_deed_cost
					if @dirty_deeds_deed_count_before_attempt == @dirty_deeds_current_deeds
						CharSettings['minimum_value_needed_for_deed'] = running_total + @dirty_deeds_deed_cost_increase_after_each_failure
						@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed']
						@dirty_deeds_text_to_display.push("You did not receive a deed after that attempt.")
						@dirty_deeds_text_to_display.push("Script will no longer use the accepted formula when determining how much a deed costs you.")
						@dirty_deeds_text_to_display.push("Every time you fail to get a deed the deed cost will increase by #{@dirty_deeds_deed_cost_increase_after_each_failure} silvers of the last attempt.")
						@dirty_deeds_text_to_display.push("Your new gem value deed cost is #{@dirty_deeds_gem_value_needed_for_deed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}.")
						dirty_deeds_display_message
						CharSettings['deed_attempt_stats'].store((CharSettings['deed_attempt_stats'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "No")
					else
						CharSettings['deed_attempt_stats'].store((CharSettings['deed_attempt_stats'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "Yes")
						@dirty_deeds_total_gem_values_used_for_successful_attempts += running_total
					end
					@dirty_deeds_total_gem_values_used_for_all_attempts += running_total
					@dirty_deeds_deeds_gained = @dirty_deeds_current_deeds - @dirty_deeds_starting_deeds
					@dirty_deeds_number_of_deed_attempts += 1
					exit if @dirty_deeds_deeds_gained >= @dirty_deeds_max_deeds
				else
					total_number_of_gems_to_use += 1
					break
				end
			end
			dirty_deeds_go_to_room_outside_deed_room
		}
	}
	exit
end

def dirty_deeds_get_values_of_gems
	kill_script "go2" if running? "go2"
	wait_while{ running? "go2" }
	start_script "go2", [1776]
	wait_while{ running? "go2" }
	@dirty_deeds_all_gem_values = Hash.new
	fput "open ##{@dirty_deeds_gem_container.id}"
	fput "look in ##{@dirty_deeds_gem_container.id}"
	sleep 1
	fput "stow right" if checkright
	fput "stow left" if checkleft
	@dirty_deeds_gem_container.contents.each{ |item|
		if item.type == "gem" && item.name !~ /#{@dirty_deeds_ignore_all_these_gems}/
			fput "get ##{item.id}"
			fput "appraise ##{item.id}"
			while line = get
				if line =~ /I'\ll give you (.*) silvers? for it if you want to sell\./
					appraised_gem_value = $1.delete(",").to_i
					appraised_gem_value = ((appraised_gem_value.to_f / (100 + @dirty_deeds_trading_bonus)) * 100).truncate
					@dirty_deeds_all_gem_values[GameObj.right_hand.id] = appraised_gem_value
					fput "put ##{item.id} in ##{@dirty_deeds_gem_container.id}"
					break
				elsif line =~ /I only deal in gems and jewelry/
					fput "put ##{item.id} in ##{@dirty_deeds_gem_container.id}"
					break
				end
			end
		end
	}
end

if CharSettings['instructions_have_been_read'].nil?
	CharSettings['instructions_have_been_read'] = true
	@dirty_deeds_text_to_display.push("THESE ARE FIRST TIME INSTRUCTIONS.")
	@dirty_deeds_text_to_display.push("BE SURE TO READ ALL OF THESE INSTRUCTIONS BEFORE RUNNING SCRIPT AGAIN.")
	@dirty_deeds_text_to_display.push("To see these instructions in the future simply start script as ;dirty-deeds.")
	@dirty_deeds_text_to_display.push("")
	dirty_deeds_help_menu_message
else
	if script.vars[1].nil?
		dirty_deeds_help_menu_message
	else
		if script.vars[1] =~ /stats/i
			dirty_deeds_stats_message_display
		elsif script.vars[1] =~ /reset/i
			CharSettings['deed_attempt_stats'] = Hash.new
			@dirty_deeds_text_to_display.push("Your stats have been reset.")
			dirty_deeds_display_message
		elsif script.vars[1] =~ /add/i
			this_is_the_gem = script.vars[0].split(' ')[1..-1].join(' ').downcase
			CharSettings['gems_to_ignore'].push(this_is_the_gem)
			@dirty_deeds_text_to_display.push("All gems you are ignoring:")
			CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
			dirty_deeds_display_message
		elsif script.vars[1] =~ /remove|delete/i && script.vars[2].downcase == "all"
			CharSettings['gems_to_ignore'] = Array.new
			@dirty_deeds_text_to_display.push("All gems have been removed from your list.")
			dirty_deeds_display_message
		elsif script.vars[1] =~ /remove|delete/i
			this_is_the_gem = script.vars[0].split(' ')[1..-1].join(' ').downcase
			CharSettings['gems_to_ignore'].delete(this_is_the_gem)
			@dirty_deeds_text_to_display.push("All gems you are ignoring:")
			CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
			dirty_deeds_display_message
		elsif script.vars[1] =~ /list/i
			@dirty_deeds_text_to_display.push("All gems you are ignoring:")
			CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
			dirty_deeds_display_message
		else
			if @dirty_deeds_gem_container.nil?
				@dirty_deeds_text_to_display.push("I could not find the container you specified.")
				@dirty_deeds_text_to_display.push("What you entered for the noun of your container: #{script.vars[1]}")
				@dirty_deeds_text_to_display.push("")
				dirty_deeds_help_menu_message
			else
				dirty_deeds_get_deed_cost
				@dirty_deeds_text_to_display.push("This script will take you to the Landing.")
				@dirty_deeds_text_to_display.push("The container it will use gems from is your: #{@dirty_deeds_gem_container.name}")
				dirty_deeds_message_about_needed_value
				if @dirty_deeds_max_amount_over_needed == 1000000
					@dirty_deeds_text_to_display.push("You haven't entered a max value to use to get a deed.")
				else
					@dirty_deeds_text_to_display.push("To start you won't use gem values over #{(@dirty_deeds_gem_value_needed_for_deed + @dirty_deeds_max_amount_over_needed).to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers to get a deed.")
				end
				@dirty_deeds_text_to_display.push("")
				@dirty_deeds_text_to_display.push("If this is wrong or not acceptable then enter: ;k dirty-deeds")
				@dirty_deeds_text_to_display.push("Script will start moving in 5 seconds.")
				dirty_deeds_display_message
				sleep 5
				dirty_deeds_get_values_of_gems
				@dirty_deeds_display_post_information = true
				dirty_deeds_get_a_deed
			end
		end
	end
end