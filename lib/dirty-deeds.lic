=begin

	This script can get deeds in the following towns:
	
	Landing - will use gems for deeds
	Icemule - will use wands and lockpicks for deeds
	
	tl;dr version: script will appraise all gems in the container you specify, calculate how much gem value you need to get a deed, and drop the needed gems in order to get you a deed. It will keep getting deeds in this manner until you either: run out of gems, don't have enough gem value to get a deed, or you get the number of deeds you specify.
	
	For instructions on how to use the script start script as:
	
	;dirty-deeds

	You like deeds right? Of course you do! Everyone does! But who likes to do all of the guess work of how many gems and which gems you need to drop in order to get a deed? No one!
	
	This script takes all of the guess work out of getting you those deeds!
	
	Simply start up the script with the name of the container filled with gems you want to use to get deeds with and the script will appraise all of the gems to get their values (and even take your trading bonus into account to get their base value) and use those values to figure out which deeds you need to drop in order to receive a deed. AMAZING!
	
	The script starts out using the accepted formula on the wiki for gaining deeds, which is: 101 + (level * 100) + (deeds * 100), with gems being worth about 3x their base value.
	However this formula isn't perfect and at high experience levels is fairly inaccurate. When the script determines it can no longer rely on the formula for getting you deeds it will instead add 500 silvers to the total gem value you used when you last failed, and remember this figure until you fail to get a deed again.
	
	For example if you used 3,000 silvers in gems to attempt to get a deed and didn't get a deed then the script will use 3,500 silvers in gem value from then on until you once again fail to get a deed, at which point if you failed to get a deed with 3,800 silvers in gem value it will start doing 4,300 silvers in value, etc etc.
	
	The script also tracks various stats every time you attempt to get a deed; stats such as total gem value used in deed attempt, your total experience at the time, how many deeds you had, and whether or not you gained a deed with the attempt.
	
	;dirty-deeds stats: see all of your stats when attempting to get deeds.
	;dirty-deeds reset: reset all of your stats.

	Changelog:
	Version 1: Initial release and stuff.
	Version 2: Added option to add gems to a list of gems to NOT use for deeds. Do ;dirty-deeds for all the instructions.
	Version 3: New features: You can now save settings and load them so you don't have to enter each command every time you start up script. There is now an option so you have to confirm before any gems are dropped for deeds. To see how these settings work do ;dirty-deeds
	
	To do list:

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 4

=end

lich_up_to_date = nil
version = LICH_VERSION.split(".")
lich_up_to_date = true if version[0].to_i > 4 || version[1].to_i > 6 || version[2].to_i > 53

if lich_up_to_date
	inf_bonus = Stats.enhanced_inf[1]
else
	inf_bonus = Stats.inf[1]
end

if Skills.to_bonus(Skills.trading) == 0
	@dirty_deeds_trading_bonus = 0
else
	@dirty_deeds_trading_bonus = [0, (Skills.to_bonus(Skills.trading) + inf_bonus) / 12].max
end

@dirty_deeds_confirmation_is_required = nil
@dirty_deeds_display_post_information = nil
@dirty_deeds_text_to_display = Array.new
@dirty_deeds_max_amount_over_needed = 1000000
@dirty_deeds_starting_deeds = nil
@dirty_deeds_max_deeds = 1000
@dirty_deeds_gem_container = GameObj.inv.find{ |container| container.noun =~ /#{script.vars[1]}/i }
@dirty_deeds_max_deeds = $1.to_i if script.vars.any?{ |i| i =~ /^max(\d+)/i }
@dirty_deeds_max_amount_over_needed = $1.to_i if script.vars.any?{ |i| i =~ /^(\d+)/i }
@dirty_deeds_number_of_deed_attempts = 0
@dirty_deeds_total_gem_values_used_for_successful_attempts = 0
@dirty_deeds_total_gem_values_used_for_all_attempts = 0
@dirty_deeds_deed_cost_increase_after_each_failure = 500

CharSettings['deed_attempt_stats'] = Hash.new unless CharSettings['deed_attempt_stats'] #This is Landing stats
CharSettings['minimum_value_needed_for_deed'] = nil unless CharSettings['minimum_value_needed_for_deed'] #This is for Landing
CharSettings['deed_attempt_stats_for_icemule'] = Hash.new unless CharSettings['deed_attempt_stats_for_icemule']
CharSettings['minimum_value_needed_for_deed_in_icemule'] = nil unless CharSettings['minimum_value_needed_for_deed_in_icemule']


CharSettings['gems_to_ignore'] = Array.new unless CharSettings['gems_to_ignore']
CharSettings['instructions_have_been_read'] = nil unless CharSettings['instructions_have_been_read']
CharSettings['confirmation_request_has_been_saved'] = nil unless CharSettings['confirmation_request_has_been_saved']

CharSettings['container_information_saved'] = nil unless CharSettings['container_information_saved']
CharSettings['max_gem_value_saved'] = nil unless CharSettings['max_gem_value_saved']
CharSettings['max_deeds_information_saved'] = nil unless CharSettings['max_deeds_information_saved']

if script.vars.any?{ |i| i =~ /^confirm/i }
	@dirty_deeds_confirmation_is_required = true
	CharSettings['confirmation_request_has_been_saved'] = true
end

CharSettings['confirmation_request_has_been_saved'] = nil if script.vars.any?{ |i| i =~ /^stop-confirm/i }
@dirty_deeds_confirmation_is_required = true if CharSettings['confirmation_request_has_been_saved']

@dirty_deeds_ignore_all_these_gems = "NONEYABUSINESS"
if CharSettings['gems_to_ignore'].count > 0
	@dirty_deeds_ignore_all_these_gems = nil
	CharSettings['gems_to_ignore'].each{ |i| @dirty_deeds_ignore_all_these_gems += "#{i}|" }
	@dirty_deeds_ignore_all_these_gems.chop!
end

before_dying{
	if @dirty_deeds_display_post_information
		if @dirty_deeds_town_getting_deeds_in == "Icemule"
			fput "open door"
			fput "go door"
		end
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_needed_room_number]
		wait_while{ running? "go2" }
		@dirty_deeds_text_to_display.push("All finished!")
		@dirty_deeds_text_to_display.push("Stats during this run:")
		@dirty_deeds_text_to_display.push("Deed attempts:                         #{@dirty_deeds_number_of_deed_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		@dirty_deeds_text_to_display.push("Deeds gained:                          #{@dirty_deeds_deeds_gained.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		@dirty_deeds_text_to_display.push("Total item values:                     #{@dirty_deeds_total_gem_values_used_for_all_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		if @dirty_deeds_deeds_gained > 0
			@dirty_deeds_text_to_display.push("Total values for successful attempts:  #{@dirty_deeds_total_gem_values_used_for_successful_attempts.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
			@dirty_deeds_text_to_display.push("Average item value per deed gained:    #{(@dirty_deeds_total_gem_values_used_for_successful_attempts / @dirty_deeds_deeds_gained).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
		dirty_deeds_message_about_needed_value
		@dirty_deeds_text_to_display.push("Any items left over were either too valuable according to settings or weren't enough to get a deed.")
		dirty_deeds_display_message
	end
}

def dirty_deeds_update_town_information
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		if Char.race =~ /Dark Elf/i
			@dirty_deeds_trading_bonus -= 5
		elsif Char.race =~ /Krolvin/i
			@dirty_deeds_trading_bonus -= 25
		end
		@dirty_deeds_the_deed_room = 4045
		@dirty_deeds_room_outside_the_deed_room = 4044
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		if Char.race =~ /Halfling/i
			@dirty_deeds_trading_bonus += 5
		elsif Char.race =~ /Dark Elf/i
			@dirty_deeds_trading_bonus -= 5
		elsif Char.race =~ /Burghal/i
			@dirty_deeds_trading_bonus -= 5
		end
		@dirty_deeds_the_deed_room = 2332
	end
end

def dirty_deeds_help_menu_message
	@dirty_deeds_text_to_display.push("Enter the NOUN of the container you want to use gems from when starting the script.")
	@dirty_deeds_text_to_display.push("Example: ;dirty-deeds cloak")
	@dirty_deeds_text_to_display.push("ALL gems in this container will be used for deeds.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("OPTIONAL: Enter the highest gem value total over minimum you want to use to get a deed.")
	@dirty_deeds_text_to_display.push("Example: You need 2000 to get deed, you enter 4000, script won't use gem values over 6000 to get deed.")
	@dirty_deeds_text_to_display.push("Example: ;dirty-deeds cloak 4000")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("OPTIONAL: Enter maximum number of deeds you want to get.")
	@dirty_deeds_text_to_display.push("Example: max10 (note no spaces)")
	@dirty_deeds_text_to_display.push("Example: ;dirty-deeds cloak max10")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("OPTIONAL: confirm. This makes it so you have to confirm the gems being used before they are dropped.")
	@dirty_deeds_text_to_display.push("OPTIONAL: stop-confirm. Stop requiring confirmation.")
	@dirty_deeds_text_to_display.push("Example: ;dirty-deeds cloak confirm")
	@dirty_deeds_text_to_display.push("Confirm option is saved until you do ;dirty-deeds stop-confirm.")
	@dirty_deeds_text_to_display.push("So you don't have to use the \"confirm\" command every time you start script.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("OPTIONAL: save. Saves all of your current commands")
	@dirty_deeds_text_to_display.push("so you don't have to type them every time you start script.")
	@dirty_deeds_text_to_display.push("Example: ;dirty-deeds cloak max10 4000 save")
	@dirty_deeds_text_to_display.push("Would save cloak, max10, and 4000 as your default settings.")
	@dirty_deeds_text_to_display.push("You can now start script as ;dirty-deeds load")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Container noun MUST come first, however the order of optional commands don't matter.")
	@dirty_deeds_text_to_display.push(";dirty-deeds cloak max10 4000 confirm and ;dirty-deeds cloak confirm 4000 max10 will both work.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Other commands to use:")
	@dirty_deeds_text_to_display.push(";dirty-deeds add gem name here: adds gem to your list of gems to not use as deeds.")
	@dirty_deeds_text_to_display.push("You can either add just noun (typically last word in gem name): ;dirty-deeds add ruby")
	@dirty_deeds_text_to_display.push("This would make script not use ANY rubies.")
	@dirty_deeds_text_to_display.push("Or use the gem's name (typically last two words in name): ;dirty-deeds add uncut ruby")
	@dirty_deeds_text_to_display.push("This would make script not use uncut rubies but it would still use star rubies.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push(";dirty-deeds remove gem name: remove gem from your list of gems not to use.")
	@dirty_deeds_text_to_display.push(";dirty-deeds remove all: remove ALL gems from your list of gems not to use.")
	@dirty_deeds_text_to_display.push(";dirty-deeds list: list all gems you are not using for deeds.")
	@dirty_deeds_text_to_display.push(";dirty-deeds stats: see all of your stats when attempting to get deeds.")
	@dirty_deeds_text_to_display.push(";dirty-deeds reset: reset all of your stats.")
	@dirty_deeds_text_to_display.push("")
	@dirty_deeds_text_to_display.push("Also remember this script will run you to the Landing when you specify a container.")
	dirty_deeds_display_message
end

def dirty_deeds_stats_message_display
	if CharSettings['deed_attempt_stats'].length == 0 && CharSettings['deed_attempt_stats_for_icemule'].length == 0
		@dirty_deeds_text_to_display.push("You don't have any stats yet! What you trying to pull here?")
	else
		if CharSettings['deed_attempt_stats'].length > 0
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("Landing stats:")
			CharSettings['deed_attempt_stats'].each{ |key,value|
			@dirty_deeds_text_to_display.push("Attempt number: #{key.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Total experience: #{CharSettings['deed_attempt_stats'][key][:total_experience].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Gem value: #{CharSettings['deed_attempt_stats'][key][:gem_value_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deeds: #{CharSettings['deed_attempt_stats'][key][:deeds_before_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deed gained: #{CharSettings['deed_attempt_stats'][key][:deed_gained]}")
			}
		end
		if CharSettings['deed_attempt_stats_for_icemule'].length > 0
			@dirty_deeds_text_to_display.push("")
			@dirty_deeds_text_to_display.push("Icemule stats:")
			CharSettings['deed_attempt_stats_for_icemule'].each{ |key,value|
			@dirty_deeds_text_to_display.push("Attempt number: #{key.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Total experience: #{CharSettings['deed_attempt_stats_for_icemule'][key][:total_experience].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Gem value: #{CharSettings['deed_attempt_stats_for_icemule'][key][:gem_value_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deeds: #{CharSettings['deed_attempt_stats_for_icemule'][key][:deeds_before_attempt].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}, Deed gained: #{CharSettings['deed_attempt_stats_for_icemule'][key][:deed_gained]}")
			}
		end
	end
	dirty_deeds_display_message
end

def dirty_deeds_display_message
	_respond
	longest_string = 0
	@dirty_deeds_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@dirty_deeds_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@dirty_deeds_text_to_display = Array.new
end

def dirty_deeds_get_deed_cost
	fput "exp"
	while line = get
		if line =~ /Total Exp\: (.*)\s+Death\'s Sting\:/
			@dirty_deeds_total_current_exp = $1.delete(",").to_i
		elsif line =~ /Long\-Term Exp\: \d+\s+Deeds\: (\d+)/
			@dirty_deeds_current_deeds = $1.to_i
			@dirty_deeds_starting_deeds = $1.to_i if @dirty_deeds_starting_deeds.nil?
			break
		end
	end
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		if CharSettings['minimum_value_needed_for_deed']
			@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed']
		else
			@dirty_deeds_gem_value_needed_for_deed = (101 + ((Char.level + @dirty_deeds_current_deeds) * 100)) / 3
		end
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		if CharSettings['minimum_value_needed_for_deed_in_icemule']
			@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_icemule']
		else
			@dirty_deeds_gem_value_needed_for_deed = (101 + ((Char.level + @dirty_deeds_current_deeds) * 100)) / 3
		end
	end
end

def dirty_deeds_message_about_needed_value
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		if CharSettings['minimum_value_needed_for_deed']
			@dirty_deeds_text_to_display.push("Formula no longer works for you in Landing. Minimum item value being used: #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		else
			@dirty_deeds_text_to_display.push("Expected needed item value based on current accepted formula:            #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		if CharSettings['minimum_value_needed_for_deed_in_icemule']
			@dirty_deeds_text_to_display.push("Formula no longer works you in Icemule. Minimum item value being used: #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		else
			@dirty_deeds_text_to_display.push("Expected needed item value based on current accepted formula:            #{@dirty_deeds_gem_value_needed_for_deed.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
		end
	end
end

def dirty_deeds_go_to_deed_room
	until Room.current.id == @dirty_deeds_the_deed_room
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_the_deed_room]
		wait_while{ running? "go2" }
	end
	if @dirty_deeds_town_getting_deeds_in == "Icemule"
		fput "search flow"
		until Room.current.id.nil?
			waitrt?
			fput "go door"
			sleep 0.5
		end
		fput "close door"
	end
end

def dirty_deeds_go_to_room_outside_deed_room
	until Room.current.id == @dirty_deeds_room_outside_the_deed_room
		kill_script "go2" if running? "go2"
		wait_while{ running? "go2" }
		start_script "go2", [@dirty_deeds_room_outside_the_deed_room]
		wait_while{ running? "go2" }
	end
end

def dirty_deeds_get_a_deed
	total_number_of_gems_to_use = 1
	dirty_deeds_go_to_deed_room if @dirty_deeds_town_getting_deeds_in == "Icemule"
	loop{
		loop{
			needed_gems = Array.new
			current_number = 0
			temp_hash_of_all_gem_values = Marshal.load(Marshal.dump(@dirty_deeds_all_gem_values))
			needed_gems[current_number] = temp_hash_of_all_gem_values.max_by{ |key,value| value }
			temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])

			loop{
				current_number += 1
				break if current_number >= total_number_of_gems_to_use
				needed_gems[current_number] = temp_hash_of_all_gem_values.min_by{ |key,value| value }
				temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])
			}

			if needed_gems.count < current_number
				break
			else
				running_total = 0
				needed_gems.each{ |i| running_total += i[1] if i}
				if running_total > (@dirty_deeds_gem_value_needed_for_deed + @dirty_deeds_max_amount_over_needed)
					@dirty_deeds_all_gem_values.delete(needed_gems[0][0])
				else
					break
				end
			end
		}
		
		loop{
			running_total = 0
			@dirty_deeds_all_gem_values.each{ |key,value| running_total += value }
			exit if running_total < @dirty_deeds_gem_value_needed_for_deed
			needed_gems = Array.new
			current_number = 0
			temp_hash_of_all_gem_values = Marshal.load(Marshal.dump(@dirty_deeds_all_gem_values))
			needed_gems[current_number] = temp_hash_of_all_gem_values.max_by{ |key,value| value }
			temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])

			loop{
				current_number += 1
				break if current_number >= total_number_of_gems_to_use || temp_hash_of_all_gem_values.length == 0
				needed_gems[current_number] = temp_hash_of_all_gem_values.min_by{ |key,value| value }
				temp_hash_of_all_gem_values.delete(needed_gems[current_number][0])
			}

			if needed_gems.count < current_number
				exit
			else
				running_total = 0
				needed_gems.each{ |i| running_total += i[1] if i}
				if running_total >= @dirty_deeds_gem_value_needed_for_deed
					running_total = 0
					needed_gems = needed_gems.sort_by!(&:last).reverse
					final_needed_gems = Array.new
					current_number = 0
					needed_gems.each{ |i| 
						running_total += i[1] if i
						final_needed_gems[current_number] = i
						current_number += 1
						break if running_total >= @dirty_deeds_gem_value_needed_for_deed
					}
					if @dirty_deeds_town_getting_deeds_in == "Landing"
						dirty_deeds_go_to_deed_room
						2.times{ fput "hit chime with mallet" }
						until kneeling?
							waitrt?
							fput "kneel"
							sleep 0.2
						end
					end
					dirty_deeds_message_about_needed_value
					@dirty_deeds_text_to_display.push("Each gem and their base value being used for this attempt:")
					@dirty_deeds_text_to_display.push("")
					final_needed_gems.each{ |gem|
						current_gem_name = @dirty_deeds_gem_container.contents.find{ |i| i if i.id == gem[0] }
						@dirty_deeds_text_to_display.push("#{current_gem_name.name} #{gem[1].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
					}
					@dirty_deeds_text_to_display.push("")
					@dirty_deeds_text_to_display.push("Current gem value being used to try for deed:                           #{running_total.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
					dirty_deeds_display_message
					permission_has_been_granted = nil
					if @dirty_deeds_confirmation_is_required
						@dirty_deeds_text_to_display.push("If these items are acceptable to use for a deed then do ;send confirm")
						@dirty_deeds_text_to_display.push("If you don't want to use these items for a deed then do ;send cancel")
						dirty_deeds_display_message
						while line = get
							if line =~ /confirm/i
								permission_has_been_granted = true
								break
							elsif line =~ /cancel/i
								permission_has_been_granted = nil
								break
							end
						end
					else
						permission_has_been_granted = true
					end
					final_needed_gems.each{ |i| @dirty_deeds_all_gem_values.delete(i[0])}
					if permission_has_been_granted
						if @dirty_deeds_town_getting_deeds_in == "Landing"
							final_needed_gems.each{ |i|
								fput "get ##{i[0]}"
								fput "drop ##{i[0]}"
							}
							fput "hit chime with mallet"
						elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
							fput "pull chain"
							fput "open drawer"
							final_needed_gems.each{ |i|
								fput "get ##{i[0]}"
								fput "put ##{i[0]} in drawer"
							}
							fput "close drawer"
						end
						@dirty_deeds_deed_count_before_attempt = @dirty_deeds_current_deeds.dup
						dirty_deeds_get_deed_cost
						if @dirty_deeds_deed_count_before_attempt == @dirty_deeds_current_deeds
							if @dirty_deeds_town_getting_deeds_in == "Landing"
								CharSettings['minimum_value_needed_for_deed'] = running_total + @dirty_deeds_deed_cost_increase_after_each_failure
								@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed']
								CharSettings['deed_attempt_stats'].store((CharSettings['deed_attempt_stats'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "No")
							elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
								CharSettings['minimum_value_needed_for_deed_in_icemule'] = running_total + @dirty_deeds_deed_cost_increase_after_each_failure
								@dirty_deeds_gem_value_needed_for_deed = CharSettings['minimum_value_needed_for_deed_in_icemule']
								CharSettings['deed_attempt_stats_for_icemule'].store((CharSettings['deed_attempt_stats_for_icemule'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "No")
							end
							@dirty_deeds_text_to_display.push("You did not receive a deed after that attempt.")
							@dirty_deeds_text_to_display.push("Script will no longer use the accepted formula when determining how much a deed costs you.")
							@dirty_deeds_text_to_display.push("Every time you fail to get a deed the deed cost will increase by #{@dirty_deeds_deed_cost_increase_after_each_failure} silvers of the last attempt.")
							@dirty_deeds_text_to_display.push("Your new item value deed cost is #{@dirty_deeds_gem_value_needed_for_deed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}.")
							dirty_deeds_display_message
						else
							if @dirty_deeds_town_getting_deeds_in == "Landing"
								CharSettings['deed_attempt_stats'].store((CharSettings['deed_attempt_stats'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "Yes")
							elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
								CharSettings['deed_attempt_stats_for_icemule'].store((CharSettings['deed_attempt_stats_for_icemule'].length + 1), :total_experience => @dirty_deeds_total_current_exp, :gem_value_attempt => running_total, :deeds_before_attempt => @dirty_deeds_deed_count_before_attempt, :deed_gained => "Yes")
							end
							@dirty_deeds_text_to_display.push("Deed gained!")
							dirty_deeds_display_message
							@dirty_deeds_total_gem_values_used_for_successful_attempts += running_total
						end
						@dirty_deeds_total_gem_values_used_for_all_attempts += running_total
						@dirty_deeds_deeds_gained = @dirty_deeds_current_deeds - @dirty_deeds_starting_deeds
						@dirty_deeds_number_of_deed_attempts += 1
						exit if @dirty_deeds_deeds_gained >= @dirty_deeds_max_deeds
						if @dirty_deeds_town_getting_deeds_in == "Icemule"
							fput "open door"
							fput "close door"
						end
					else
						fput "hit chime with mallet" if @dirty_deeds_town_getting_deeds_in == "Landing"
					end
				else
					total_number_of_gems_to_use += 1
					break
				end
			end
			dirty_deeds_go_to_room_outside_deed_room
		}
	}
	exit
end

def dirty_deeds_get_values_of_gems
	if @dirty_deeds_town_getting_deeds_in == "Landing"
		@dirty_deeds_needed_room_number = 1776
	elsif @dirty_deeds_town_getting_deeds_in == "Icemule"
		@dirty_deeds_needed_room_number = 2464
	end
	kill_script "go2" if running? "go2"
	wait_while{ running? "go2" }
	start_script "go2", [@dirty_deeds_needed_room_number]
	wait_while{ running? "go2" } 
	@dirty_deeds_all_gem_values = Hash.new
	fput "open ##{@dirty_deeds_gem_container.id}"
	fput "look in ##{@dirty_deeds_gem_container.id}"
	sleep 1
	fput "stow right" if checkright
	fput "stow left" if checkleft
	@dirty_deeds_gem_container.contents.each{ |item|
		appraised_gem_value = nil
		if (item.name !~ /#{@dirty_deeds_ignore_all_these_gems}/) && ((item.type == "gem" && @dirty_deeds_town_getting_deeds_in == "Landing") || item.name =~ /oaken wand|polished bloodwood wand|twisted wand|smooth bone wand|clear glass wand|pale thanot wand|iron wand|silver wand|aquamarine wand|golden wand|metal wand|green coral wand|smooth amber wand|slender blue wand|crystal wand|lockpick/ && @dirty_deeds_town_getting_deeds_in == "Icemule")
			fput "get ##{item.id}"
			result = dothistimeout "appraise ##{item.id}", 2, /I'\ll give you (.*) silvers? for it if you want to sell\.|I\'ll give you (.*) silver coins? for it\.|I already quoted (.*) silvers?\.|I only deal in gems and jewelry|I've no use for that./
			if result =~ /I'\ll give you (.*) silvers? for it if you want to sell\./
				appraised_gem_value = $1.delete(",").to_i
			elsif result =~ /I\'ll give you (.*) silver coins? for it\./
				appraised_gem_value = $1.delete(",").to_i
			elsif result =~ /I already quoted (.*) silvers?\./
				appraised_gem_value = $1.delete(",").to_i
			elsif result =~ /I only deal in gems and jewelry|I\'ve no use for that\./
				fput "put ##{item.id} in ##{@dirty_deeds_gem_container.id}"
			elsif result.nil?
				fput "put ##{item.id} in ##{@dirty_deeds_gem_container.id}"
			end
		end
		if appraised_gem_value
			appraised_gem_value = ((appraised_gem_value.to_f / (100 + @dirty_deeds_trading_bonus)) * 100).truncate
			@dirty_deeds_all_gem_values[GameObj.right_hand.id] = appraised_gem_value
			fput "put ##{item.id} in ##{@dirty_deeds_gem_container.id}"
		end
	}
end

if CharSettings['instructions_have_been_read'].nil?
	CharSettings['instructions_have_been_read'] = true
	@dirty_deeds_text_to_display.push("THESE ARE FIRST TIME INSTRUCTIONS.")
	@dirty_deeds_text_to_display.push("BE SURE TO READ ALL OF THESE INSTRUCTIONS BEFORE RUNNING SCRIPT AGAIN.")
	@dirty_deeds_text_to_display.push("To see these instructions in the future simply start script as ;dirty-deeds.")
	@dirty_deeds_text_to_display.push("")
	dirty_deeds_help_menu_message
	exit
end
if script.vars[1] =~ /load/
	@dirty_deeds_gem_container = GameObj.inv.find{ |container| container.noun =~ /#{CharSettings['container_information_saved']}/i } if CharSettings['container_information_saved']
	@dirty_deeds_max_amount_over_needed = CharSettings['max_gem_value_saved'] if CharSettings['max_gem_value_saved']
	@dirty_deeds_max_deeds = CharSettings['max_deeds_information_saved'] if CharSettings['max_deeds_information_saved']
	@dirty_deeds_text_to_display.push("These settings have been loaded:")
	@dirty_deeds_text_to_display.push("Container:     #{CharSettings['container_information_saved']}") if CharSettings['container_information_saved']
	@dirty_deeds_text_to_display.push("Max gem value: #{CharSettings['max_gem_value_saved']}") if CharSettings['max_gem_value_saved']
	@dirty_deeds_text_to_display.push("Max deeds:     #{CharSettings['max_deeds_information_saved']}") if CharSettings['max_deeds_information_saved']
	@dirty_deeds_text_to_display.push("")
end
if script.vars[1].nil?
	dirty_deeds_help_menu_message
else
	if script.vars[1] =~ /stats/i
		dirty_deeds_stats_message_display
	elsif script.vars[1] =~ /reset/i
		CharSettings['deed_attempt_stats'] = Hash.new
		CharSettings['deed_attempt_stats_for_icemule'] = Hash.new
		@dirty_deeds_text_to_display.push("Your stats have been reset.")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /add/i
		this_is_the_gem = script.vars[0].split(' ')[1..-1].join(' ').downcase
		CharSettings['gems_to_ignore'].push(this_is_the_gem)
		@dirty_deeds_text_to_display.push("All gems you are ignoring:")
		CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
		dirty_deeds_display_message
	elsif script.vars[1] =~ /remove|delete/i && script.vars[2].downcase == "all"
		CharSettings['gems_to_ignore'] = Array.new
		@dirty_deeds_text_to_display.push("All gems have been removed from your list.")
		dirty_deeds_display_message
	elsif script.vars[1] =~ /remove|delete/i
		this_is_the_gem = script.vars[0].split(' ')[1..-1].join(' ').downcase
		CharSettings['gems_to_ignore'].delete(this_is_the_gem)
		@dirty_deeds_text_to_display.push("All gems you are ignoring:")
		CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
		dirty_deeds_display_message
	elsif script.vars[1] =~ /list/i
		@dirty_deeds_text_to_display.push("All gems you are ignoring:")
		CharSettings['gems_to_ignore'].each{ |gem_name| @dirty_deeds_text_to_display.push("#{gem_name}") }
		dirty_deeds_display_message
	else
		if @dirty_deeds_gem_container.nil?
			@dirty_deeds_text_to_display.push("I could not find the container you specified.")
			@dirty_deeds_text_to_display.push("What you entered for the noun of your container: #{script.vars[1]}")
			@dirty_deeds_text_to_display.push("")
			dirty_deeds_help_menu_message
		else
			if script.vars.any?{ |i| i =~ /^save/i }
				CharSettings['container_information_saved'] = nil
				CharSettings['max_gem_value_saved'] = nil
				CharSettings['max_deeds_information_saved'] = nil
				CharSettings['container_information_saved'] = script.vars[1].downcase
				CharSettings['max_gem_value_saved'] = $1.to_i if script.vars.any?{ |i| i =~ /^(\d+)/i }
				CharSettings['max_deeds_information_saved'] = $1.to_i if script.vars.any?{ |i| i =~ /^max(\d+)/i }
				@dirty_deeds_text_to_display.push("Your information has been saved as:")
				@dirty_deeds_text_to_display.push("Container noun:          #{CharSettings['container_information_saved']}") if CharSettings['container_information_saved']
				@dirty_deeds_text_to_display.push("Max gem value:           #{CharSettings['max_gem_value_saved']}") if CharSettings['max_gem_value_saved']
				@dirty_deeds_text_to_display.push("Max deeds:               #{CharSettings['max_deeds_information_saved']}") if CharSettings['max_deeds_information_saved']
				@dirty_deeds_text_to_display.push("Confirmation required:   Yes") if CharSettings['confirmation_request_has_been_saved']
				@dirty_deeds_text_to_display.push("")
				@dirty_deeds_text_to_display.push("To use this information in the future simply do ;dirty-deeds load")
				@dirty_deeds_text_to_display.push("To overwrite these settings use the save command again.")
				@dirty_deeds_text_to_display.push("You can use other commands in the meantime, these settings are only used when you use load.")
				dirty_deeds_display_message
			else
				dirty_deeds_get_deed_cost
				@dirty_deeds_text_to_display.push("Script will use ALL appropriate items found in this container: #{@dirty_deeds_gem_container.name}")
				dirty_deeds_message_about_needed_value
				if @dirty_deeds_max_deeds == 1000
					@dirty_deeds_text_to_display.push("You have specified you want to get as many deeds as possible.")
				else
					@dirty_deeds_text_to_display.push("You have specified you want to get #{@dirty_deeds_max_deeds} deeds.")
				end
				if @dirty_deeds_max_amount_over_needed == 1000000
					@dirty_deeds_text_to_display.push("You haven't entered a max value to use to get a deed.")
				else
					@dirty_deeds_text_to_display.push("To start you won't use gem values over #{(@dirty_deeds_gem_value_needed_for_deed + @dirty_deeds_max_amount_over_needed).to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers to get a deed.")
				end
				@dirty_deeds_text_to_display.push("You have opted to confirm before gems are dropped for a deed.") if @dirty_deeds_confirmation_is_required
				@dirty_deeds_text_to_display.push("")
				@dirty_deeds_text_to_display.push("Where are we getting deeds from today? Do ;send <number> for your choice")
				@dirty_deeds_text_to_display.push("For example to get deeds in Landing do ;send 1")
				@dirty_deeds_text_to_display.push("")
				@dirty_deeds_text_to_display.push("1 Wehnimer's Landing:      Script will use gems")
				@dirty_deeds_text_to_display.push("2 Icemule Trace:           Script will use wands and lockpicks")
				dirty_deeds_display_message
				while line = get
					if line == "1"
						@dirty_deeds_town_getting_deeds_in = "Landing"
						break
					elsif line == "2"
						@dirty_deeds_town_getting_deeds_in = "Icemule"
						break
					end
				end
				dirty_deeds_update_town_information
				dirty_deeds_get_values_of_gems
				@dirty_deeds_display_post_information = true
				dirty_deeds_get_a_deed
			end
		end
	end
end