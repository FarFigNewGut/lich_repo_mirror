=begin
	THIS SCRIPT ONLY WORKS WITH ;mana-tracking
	
	BE SURE TO: ;repo download mana-tracking
	
	You only need to start ;mana-tracking
	
	That script will start this script automatically.
	
	Also if you start the other script as:
	
	;mana-tracking reset
	
	It will automatically reset the stats on this script as well.

	Author:  Tgo01
	Version:  6

=end

time_to_check_experience = 10
silence = nil
get_sense_info = nil
original_enchant_possible = nil
current_enchant_possible = nil
current_experience = nil
math = nil
math2 = nil
difference = nil
update_sense_info = nil

CharSettings['total_time_spent_casting'] = 0 unless CharSettings['total_time_spent_casting']
$mana_tracking_total_time_spent_casting = CharSettings['total_time_spent_casting']
CharSettings['current_time_spent_casting'] = 0 unless CharSettings['current_time_spent_casting']
$mana_tracking_current_time_spent_casting = CharSettings['current_time_spent_casting']

CharSettings['total_essense_gained'] = 0 unless CharSettings['total_essense_gained']
$mana_tracking_total_essense_gained = CharSettings['total_essense_gained']

starting_experience = Stats.exp

CharSettings['starting_enchant_since_last_reset'] = nil unless CharSettings['starting_enchant_since_last_reset']
CharSettings['number_of_pulses'] = 0 unless CharSettings['starting_enchant_since_last_reset']
$mana_tracking_number_of_pulses = CharSettings['number_of_pulses']

if script.vars[1] =~ /reset/i
	CharSettings['total_essense_gained'] = 0
	$mana_tracking_total_essense_gained = CharSettings['total_essense_gained']
	CharSettings['starting_enchant_since_last_reset'] = nil
	CharSettings['total_time_spent_casting'] = 0
	$mana_tracking_total_time_spent_casting = CharSettings['total_time_spent_casting']
	CharSettings['current_time_spent_casting'] = 0
	$mana_tracking_current_time_spent_casting = CharSettings['current_time_spent_casting']
	CharSettings['number_of_pulses'] = 0
	$mana_tracking_number_of_pulses = CharSettings['number_of_pulses']
end

silence = proc {
	action = proc { |server_string|
		if server_string =~ /Name\:|Strength \(STR\)\:|Constitution \(CON\)\:|Dexterity \(DEX\)\:|Agility \(AGI\)\:|Discipline \(DIS\)\:|Aura \(AUR\)\:|Logic \(LOG\)\:|Intuition \(INT\):|Wisdom \(WIS\):|Influence \(INF\)\:|Normal \(Bonus\)/
			nil
		elsif server_string =~ /Mana\:/
			DownstreamHook.remove("#{script.name}_silence")
			nil
		elsif server_string =~ /Expr\: (\d+)/
			current_experience = $1.to_i
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence", action)
}

update_sense_info = proc{
	waitrt?
	wait_until { !stunned? }
	wait_until { !webbed? }
	original_enchant_possible = nil
	loop{
		waitrt?
		result = dothistimeout "sense", 3, /You sense that you have accumulated enough essence to complete a \+(\d+) enchantment/
		if result =~ /You sense that you have accumulated enough essence to complete a \+(\d+) enchantment/
			original_enchant_possible = $1.to_i
			CharSettings['starting_enchant_since_last_reset'] = $1.to_i if CharSettings['starting_enchant_since_last_reset'].nil?
		end
		break if original_enchant_possible
	}
	$mana_tracking_update_sense_info = nil
}

get_sense_info = proc{
	CharSettings['number_of_pulses'] += 1 if $mana_tracking_keeping_track_of_time
	$mana_tracking_number_of_pulses = CharSettings['number_of_pulses']
	echo "Pulse just happened! Number of pulses since last enchant update: #{CharSettings['number_of_pulses']}"
	waitrt?
	wait_until { !stunned? }
	wait_until { !webbed? }
	current_enchant_possible = nil
	loop{
		waitrt?
		result = dothistimeout "sense", 3, /You sense that you have accumulated enough essence to complete a \+(\d+) enchantment/
		if result =~ /You sense that you have accumulated enough essence to complete a \+(\d+) enchantment/
			current_enchant_possible = $1.to_i
		end
		break if current_enchant_possible
	}
	if current_enchant_possible != original_enchant_possible
		difference = current_enchant_possible - original_enchant_possible
		if current_enchant_possible < 25
			CharSettings['total_essense_gained'] += (difference * 100)
		else
			if original_enchant_possible < 25
				math = (current_enchant_possible - difference)
				math = (25 - math)
				CharSettings['total_essense_gained'] += (math * 100)
				math = (current_enchant_possible - 25)
				CharSettings['total_essense_gained'] += (math * 2400)
			else
				CharSettings['total_essense_gained'] += (difference * 2400)
			end
		end
		$mana_tracking_total_essense_gained = CharSettings['total_essense_gained']
		math = $mana_tracking_current_mana_spent / CharSettings['number_of_pulses']
		echo "##############################"
		echo "##############################"
		echo "##############################"
		echo "##############################"
		echo "##############################"
		echo "Enchant has been updated!"
		echo "Skills: EMC: #{Skills.emc}, Harness Power: #{Skills.harnesspower}, Air: #{Skills.elair}, Earth: #{Skills.elearth}, Fire: #{Skills.elfire}, Water: #{Skills.elwater}"
		echo "Starting enchant since last reset: #{CharSettings['starting_enchant_since_last_reset']}"
		echo "Going from +#{original_enchant_possible} to +#{current_enchant_possible}"
		echo "Mana spent since last enchant update: #{$mana_tracking_current_mana_spent}"
		echo "Number of pulses since last enchant update: #{CharSettings['number_of_pulses']}"
		echo "Average mana per pulse: #{math}"
		math = CharSettings['current_time_spent_casting'] / 60
		math2 = CharSettings['current_time_spent_casting'] % 60
		echo "Time spent casting (minutes:seconds) since last update: #{math}:#{math2}"
		echo "##############################"
		echo "##############################"
		echo "##############################"
		echo "##############################"
		echo "##############################"
		CharSettings['number_of_pulses'] = 0
		CharSettings['current_time_spent_casting'] = 0
		original_enchant_possible = current_enchant_possible
	end
}

before_dying { DownstreamHook.remove("#{script.name}_silence") }

update_sense_info.call

Thread.new{
	loop{
		wait_until { $mana_tracking_keeping_track_of_time }
		loop{
			CharSettings['total_time_spent_casting'] += 1
			$mana_tracking_total_time_spent_casting = CharSettings['total_time_spent_casting']
			CharSettings['current_time_spent_casting'] += 1
			$mana_tracking_current_time_spent_casting = CharSettings['current_time_spent_casting']
			break if $mana_tracking_keeping_track_of_time.nil?
			sleep 1
			}
	}
}

loop{
	if $mana_tracking_update_sense_info
		update_sense_info.call
	else
		current_experience = nil
		silence.call
		silence_me
		fput "info"
		silence_me
		wait_until { current_experience }
		if current_experience != starting_experience
			starting_experience = current_experience
			get_sense_info.call
		end
	end
	sleep time_to_check_experience
}