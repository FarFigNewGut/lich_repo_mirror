=begin

Repairs all of your lockpicks found in tpick's broken_lockpick_container value.

When successful, will put the lockpick into tpick's lockpick_container value.
Suggest starting with empty hands.

Assuming you have the LMAS REPAIR ability.

by: Daedeus

|  2.) a thin copper wire                                 20 |
|  3.) a thin brass wire                                  45 |
|  4.) a thin steel wire                                  85 |
|  5.) a thin gold wire                                  350 |
|  6.) a thin silver wire                                425 |
|  7.) a thin ora wire                                   850 |
|  8.) a thin mithril wire                              1025 |
|  9.) a thin laje wire                                 2900 |
| 10.) a thin alum wire                                 3900 |
| 11.) a thin vultite wire                              5100 |
| 12.) a thin rolaren wire                              6500 |
| 13.) a thin veniom wire                               8500 |
| 14.) a thin kelyn wire                               11000 |
| 15.) a thin invar wire                               13000 |
| 16.) a thin golvern wire                             16000 |
| 17.) a thin vaalin wire                              21000 
=end

Wires = {
    "vaalin" => { :cost => 21000, :order => 17 },
    "golvern" => { :cost => 16000, :order => 16 },
    "invar" => { :cost => 13000, :order => 15 },
    "kelyn" => { :cost => 11000, :order => 14 },
    "veniom" => { :cost => 8500, :order => 13 },
    "rolaren" => { :cost => 6500, :order => 12 },
    "vultite" => { :cost => 5100, :order => 11 },
    "alum" => { :cost => 3900, :order => 10 },
    "laje" => { :cost => 2900, :order => 9 },
    "mithril" => { :cost => 1025, :order => 8 },
    "ora" => { :cost => 850, :order => 7 },
    "silver" => { :cost => 425, :order => 6 },
    "gold" => { :cost => 350, :order => 5 },
    "steel" => { :cost => 85, :order => 4 },
    "brass" => { :cost => 45, :order => 3 },
    "copper" => { :cost => 25, :order => 2 }
}
sack = UserVars.tpick["broken_lockpick_container"]
picksack = UserVars.tpick["lockpick_container"]

if sack.nil?
    echo "I don't know where your broken lockpicks are."
    echo "Try setting the broken lockpick container value in tpick.lic"
    exit
end

if picksack.nil?
    echo "I don't know where to put repaired lockpicks in."
    echo "Try setting the lockpick container value in tpick.lic"
    exit
end

if GameObj[sack].nil?
    echo "Could not find you broken lockpick container, #{sack}."
    exit
end
if GameObj[picksack].nil?
    echo "Could not find you lockpick container, #{picksack}."
    exit
end

echo "Checking #{sack} for broken lockpicks..."

lockpicks = Hash.new

# if you have special lockpicks with really special names, may have to edit this regex
gettype = proc { |name|
    name =~ /(vaalin|kelyn|golvern|alum|invar|veniom|rolaren|vultite|laje|glaes|ora|mithril|silver|ivory|gold|steel|brass|copper) (?:lockpick|hook|key)/
    $1
}

#lifted from useherbs
check_silvers = proc {
   action = proc { |server_string|
      if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
         nil
      elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+[0-9]+/
         DownstreamHook.remove("#{script.name}_check_silvers")
         nil
      else
         server_string
      end
   }
   DownstreamHook.add("#{script.name}_check_silvers", action)
   silence_me unless undo_silence = silence_me
   clear
   put 'info'
   silence_me if undo_silence
   while line = get
      if line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
         silvers = $1.to_i
         break
      end
   end
   silvers
}

withdraw = proc { |amount|
    go('bank')
   
    result = dothistimeout "withdraw #{amount} silvers", 1, /debt collector/
    if result =~ /debt collector/
        fput "withdraw #{amount} silvers"
    end
}

#RogueWorkshopRooms = [ 17978,16574,17960,17881 ]
def go(dest)
    start_script "go2", [dest]
    wait_while { running? "go2" }
end
def goNearest(destArr)
    go(Room.current.find_nearest(destArr))
end

needed_silver = 0
lockpicks = Hash.new
GameObj[sack].contents.each { |i| 
    if i.type =~ /lockpick/
        type = gettype.call(i.name)
        echo "Found a #{i.name} - this is a #{type} lockpick"
        needed_silver += Wires[type][:cost]

        lockpicks[i.id] = Wires[type]
    end
}

echo "You'll need #{needed_silver} silvers to repair these lockpicks."
sleep 2
silvers = check_silvers.call
withdraw.call(needed_silver - silvers) if needed_silver > silvers

#empty hands
fput "stow right" unless checkright.nil?
fput "stow left" unless checkleft.nil?

go('rogue guild toolbenchs')
fput "go toolbench"
lockpicks.each { |id,wire|
    fput "get ##{id}"
    fput "order #{wire[:order]}"
    fput "buy"
    result = dothistimeout "lmas repair ##{id}", 5, /cooling rapidly to form a tight bond|refuses to break free/
    if result =~ /cooling rapidly/
        echo "Successfully repaired #{GameObj.right_hand.name}."
        waitrt?
        fput "put ##{id} in ##{GameObj[picksack].id}"
    elsif result =~ /refuses to break free/
        echo "This pick cannot be repair; we will drop it."
        waitrt?
        fput "drop ##{id}"
    end
    waitrt?
    fput "stow wire" if checkleft
}

fput "out"