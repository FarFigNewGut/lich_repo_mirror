=begin

    author: Gwrawr (stayrange)
        name: gforge
        tags: forge, forging, perfects, perfect, artisan, crafting
        version: 1.0b

        #TODO
            grinding, vising are similar, could be one function with a parameter for grind/vise

            make a dump function

            fix multi locations

=end

#$supplyroom = "9422" #ZUL

iterations = 1
makeHead = false
makeHandle = false
makePerfect = false

$keepProduct = true

$product = "forging-hammer"
$head = "hammer-head"
$shaft = "handle-glyph"
$headglyph = "head"
$shaftglyph = "handle"

$material = "bronze"
$type = "bar"

$supplyroom = "8618" #LANDING
$container = "cloak"
$bestbag = "backpack"
$supplies = ""
$dump = ""

flags = []
if variable[1]
    for var in variable
        case var
            when /(--product|-p)=(?<product>\w+)$/
                flags << "product"
                if $~[:product] =~ /(?<product>forging-hammer|dagger|quarterstaff)/
                    $product = $~[:product]
                    case $product
                        when /forging-hammer/
                            $head = "hammer-head"
                            $shaft = "hammer-handle"
                            $headglyph = "head"
                            $shaftglyph = "handle"
                        when /quarterstaff/
                            $head = "staff-endcap"
                            $shaft = "staff-shaft"
                            $headglyph = "endcap-glyph"
                            $shaftglyph = "shaft-glyph"
                        else
                            "Product not supported"
                            exit
                    end
                else
                    echo "Invalid product"
                    exit
                end
            when /--(material|m|metal|wood)|-(m|w)/
                flags << "material"
                if var =~ /(?<newmaterial>bronze|iron|steel|mithril|ora|imflass|vultite|gornar|zorchar|drakar|rhimar|razern|faenor)/
                    $material = $~[:newmaterial]
                    echo "material set to #{$material}"
                    if $material == "bronze"
                        $type = "bar"
                    else
                        $type = "slab"
                    end
                else
                    echo "Invalid material"
                    exit
                end
            when /--(dump|d)|-d/
                flags << "dump"
                $keepProduct = false
            when /--(vise|combine)|-(v|c)/
                flags << "vise"
                makePerfect = true
            when /--(shaft|handle|haft|hilt)|-(h|s)/
                flags << "handle"
                makeHandle=true
            when /--head|--blade|-b/
                flags << "head"
                makeHead=true
            when /(--(iterations|i)|-i)=(?<iterations>\d+)/
                flags << "iterations"
                iterations = $~[:iterations].to_i
            when /help/
                echo "********************************************************************************************************************"
                echo "********************************************************************************************************************"
                echo "                                                                                                                    "
                echo "  *****                                                                                                             "
                echo "  FLAGS   --help              display this                                                                          "
                echo "          --setup             enter setup GUI                                                                       "
                echo "          --material=XYZ      set material to XYZ                                                                   "
                echo "          --metal=                                                                                                  "
                echo "          --wood=                                                                                                   "
                echo "           -m=                                                                                                      "
                echo "           -w=                                                                                                      "
                echo "          --product=XYZ       set product to XYZ                                                                    "
                echo "           -p=                                                                                                      "
                echo "          --handle            make handles ON                                                                       "
                echo "          --shaft                                                                                                   "
                echo "          --hilt                                                                                                    "
                echo "          --haft                                                                                                    "
                echo "           -h                                                                                                       "
                echo "           -s                                                                                                       "
                echo "          --head              make heads/blades ON                                                                  "
                echo "          --blade                                                                                                   "
                echo "           -b                                                                                                       "
                echo "          --iterations=X       complete X iterations                                                                "
                echo "          --i=X                                                                                                     "
                echo "           -i=X                                                                                                     "
                echo "                              eg:     --handle --i=4      will make 4 best handles                                  "
                echo "                              eg:     --iterations=4      will make 4 of each handle and head                       "
                echo "                                                                                                                    "
                echo "                                                                                                                    "
                echo "          --vise              combine handles and heads ON (OFF by default with no args)                            "
                echo "          --combine                                                                                                 "
                echo "           -c                                                                                                       "
                echo "           -v                                                                                                       "
                echo "                              eg  -vise --i=2 will attempt to create 2 perfects from handles and hafts already made "
                echo "                                  --handle --haft --vise makes 1 perfect from scratch                               "
                echo "                                                                                                                    "
                echo "          --dump              trash products                                                                        "
                echo "           -d                                                                                                       "
                echo "                                                                                                                    "
                ehco "                              default behavior is ;gforge --handle --head --iterations=1 --material=bronze          "
                echo "                                                                                                                    "
                echo "                                                                                                                    "
                echo "********************************************************************************************************************"
                echo "      please run ;gforge --setup and set your finished product bag, your materials bag                              "
                echo "      please include a local bank note in your materials bag and silvers on your person                             "
                echo "********************************************************************************************************************"
                echo "                                                                                                                    "
                echo "      BEGINNER Forgers: it is reccommended to...                                                                    "
                echo "              1) train crafting to 400 making bronze hammer-heads and hammer-handles                                "
                echo "              2) train crafting to 500 making best magical hammer-heads and hammer-handles (around 20 of each)      "
                echo "                          by making best magical hammers and handles in a 1:1 ratio                                 "
                echo "              3) gift of the gods and assemble your magical components for a perfect magical forging hammer         "
                echo "              4) train your first weapon skill to 500 using bronze                                                  "
                echo "              5) optionally train your second weapon skill to 500 using bronze                                      "
                echo "                                                                                                                    "
                echo "                                                                                                                    "
                echo "********************************************************************************************************************"
                echo "********************************************************************************************************************"
                exit
            else
                echo "please use ;gforge help" unless var =~ /gfo/
        end
    end
    if flags.include? "iterations" or flags.include? "dump" or flags.include? "material" or flags.include? "product"
        if not ( flags.include? "handle" or flags.include? "head" or flags.include? "vise" )
            makeHandle=true
            makeHead=true
        end
    end
else
    makeHandle=true
    makeHead=true
    iterations=1
end

def go2(room)
    Script.run "go2", "#{room}"
end

def swap()
    loop do
        result = ""
        put "swap"
        until result =~ /You swap|wait/
            result << get
        end
        case result
            when /You swap/
                break
            when /wait/
                #continue
        end
    end
end

def getSupplies()
    $supplies = fput "look in #{$container}"
    unless $supplies =~ /(a \w* ?)(?<type>bar|slab)(.|,)/
        fput "out" if checkroom =~ /Workshop/
        go2($supplyroom) unless checkroom =~ /Supply Shop/
        fput "get #{$~[:note]}" if $supplies =~ /(?<note>chit|note)/

        catalog = ""
        fput "order"
        until catalog =~ /You can APPRAISE/
            catalog << get 
        end
        
        if catalog =~ /(?<catnum>\d+)\. a \w* ?#{$material} #{$type}/
            catnum = $~[:catnum]
            1.times {
                multifput "order #{catnum}", "buy"
                loop do
                    result = "" 
                    put "put my #{$type} in my #{$container}"
                    until result =~ /You put|won't fit|wait/
                        result << get
                    end
                    case result
                        when /You put/
                            break
                        when /won't fit/
                            echo "Supply bag is full, please clean it out"
                            exit
                        when /wait/
                            #continue
                    end
                end
                $supples << "a #{$material} #{$type}, "
            }

            fput "order #{catnum}"
            buy = ""
            put "buy"
            until buy =~ /Sold for|But you do not have/
                buy << get
            end

            case buy
                when /Sold for/
                    #continue
                when /But you do not have/
                    go2("bank")
                    note = "note"
                    note = "chit" if checkroom =~ /ICEMULE BANK/
                    put "deposit all"
                    multifput "withdraw 100000 note", "put my #{note} in my #{$container}", "withdraw 1500 coin"
                    $supplies << "a #{note}, "
                    go2("forge")
                    getSupplies()
            end

            swap() if checkright =~ /#{$type}/
            fput "put #{$~[:note]} in my #{$container}" if checkleft =~ /(?<note>chit|note)/ or checkright =~ /(?<note>chit|note)/
            fput "go workshop"
        else
            echo "store doesn't have your material"
            exit
        end
    else
        $type = $~[:type]
    end
end

def getBar()
    if checkright =~ /#{$type}/
        swap()
        return true
    end
    if $supplies =~ /(a \w* ?#{$material} #{$type})(.|,)/
        swap() if checkright =~ /#{$type}/
        if checkleft =~ /#{$type}/
            return true
        else
            put "get my #{$type} from my #{$container}"
            result = ""
            until result =~ /Get what|You remove/
                result << get
            end
            case result
                when /Get what/
                    return false
                else
                    swap()
                    return true
            end
        end
    else
        return false
    end
end

#TODO put looping, materials here
def scribe(glyph)
    loop do
        pause 0.1
        if checkright =~ /#{$type}/ and checkleft == nil
            swap()
        end
        stare = ""
        put "stare #{glyph}"
        until stare =~ /Before the design is complete you reach an edge|Glancing around you see a grinder|...wait/
            stare << get
        end
        waitrt?
        case stare
            when /Before the design is complete you reach an edge/
                case $material
                    when /iron|steel|bronze/
                        fput "put my #{$type} in #{$dump}"
                    else
                        fput "put my #{$type} in my #{$bestbag}"
                end
                pause 0.1
                getSupplies() if not getBar()
                scribe(glyph)
            when /...wait/
                scribe(glyph)
            when /Glancing around you see a grinder/
                break
        end
    end
end

def grind()
    result = ""
    put "turn grinder"
    until result =~ /...wait|this piece is the very best|rent on this workshop has expired|You finish your work and stand up|a few choice words|safest thing to do now|#{Char.name} is using/
        result << get
    end
    waitrt?
    case result
        when /...wait/
            grind()
        when /this piece is the very best/
            return "best"
            #BESTWORK
        when /a few choice words/
            return "ruin"
        when /safest thing to do now is to/, /#{Char.name} is using/
            return "redo"
        when /You finish your work and stand up/
            return "done"
        when /rent on this workshop has expired/
            multifput "out", "go workshop"
            grind()
    end
end

def polish()
    loop do
        result = ""
        put "lean polisher"
        until result =~ /You straighten up from working at the polishing wheel|rent on this workshop has expired/
            result << get
        end
        if result =~ /rent on this workshop has expired/
            multifput "out", "go workshop"
            polish()
        else
            break
        end
    end
end

def vise()
    result = fput "turn vise"
    until result =~ /this piece is the very best|rent on this workshop has expired|You finish your work and stand up|a few choice words|safest thing to do now|#{Char.name} is using/
        result << get
    end
    waitrt?
    case result
        when /this piece is the very best/
            return "perfect"
        when /a few choice words/
            return "ruin"
        when /safest thing to do now is to/, /#{Char.name} is using/
            return "redo"
        when /You finish your work and stand up/
            return "done"
        when /rent on this workshop has expired/
            multifput "out", "go workshop"
            grind()
    end
end

##TODO CONSOLIDATE makeHead makeHandle to makeThing
def makeHead()
    besthead = false
    while not besthead
        getSupplies() if not getBar()
        fput "go workshop" unless checkroom =~ /Workshop]/
        get #extra line when entering workshop
        GameObj.loot.each { |loot| if loot.name =~ /barrel/ then $dump = "barrel" elsif loot.name =~ /bin/ then $dump = "bin" end }

        scribe($headglyph)
        
        loop do
            result = grind()
            case result
                when /done/
                    fput "put my #{$head} in #{$dump}"
                    getSupplies() if not getBar()
                    scribe($headglyph)
                when /best/
                    besthead=true
                    break
                when /ruin/
                    fput "put my toothpick in #{$dump}"
                    getSupplies() if not getBar()
                    scribe($headglyph)
                when /redo/
                    scribe($headglyph)
            end
        end
        fput "put my #{$type} in my #{$container}" if checkright =~ /#{$type}/
        polish()
        if $keepProduct 
            fput "put my #{$head} in my #{$bestbag}"
        else
            fput "put my #{$head} in #{$dump}"
        end
        sleep 0.5
    end
end

def makeHandle()
    bestshaft = false
    while not bestshaft
        getSupplies() if not getBar()
        fput "go workshop" unless checkroom =~ /Workshop/
        get #extra line when entering workshop
        GameObj.loot.each { |loot| if loot.name =~ /barrel/ then $dump = "barrel" elsif loot.name =~ /bin/ then $dump = "bin" end }

        scribe($shaftglyph)
        loop do
            result = grind()
            case result
                when /best/
                    bestshaft=true
                    break
                when /done/
                    fput "put my #{$shaft} in #{$dump}"
                    getSupplies() if not getBar()
                    scribe($shaft)
                when /ruin/
                    fput "put my toothpick in #{$dump}"
                    getSupplies() if not getBar()
                    scribe($shaftglyph)
                when /redo/
                    scribe($shaftglyph)
            end
        end
        fput "put my #{$type} in my #{$container}" if checkright =~ /#{$type}/
        polish()
        if $keepProduct 
            fput "put my #{$shaft} in my #{$bestbag}"
        else
            fput "put my #{$shaft} in #{$dump}"
        end
        sleep 0.5
    end
end

def makePerfect()
    loop do
        multifput "get my #{$head} from my #{bestbag}", "get my #{$shaft} from my #{bestbag}"
        result = vise()
        case result
            when /perfect/
                echo YOU DID IT!
                echo YOU DID IT!
                exit
            when /done/
                echo awwwwwwwww
                exit
            when /ruin/
                #viseruined
            when /redo/
                vise()
        end
    end
end

$supplies = fput "look in #{$container}"
iterations.times { makeHead() if makeHead }
iterations.times { makeHandle() if makeHandle }
iterations.times { makePerfect() if makePerfect }

#change iteration times, attempt to make perfect.... or make this many perfects if only vising<<
#but most behavior is to just use all our handles and heads