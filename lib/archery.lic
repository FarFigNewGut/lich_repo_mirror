#QUIET

=begin
  Archery by Nisugi

  author: Nisugi
    name: Archery
    tags: combat archery ranger
   version: 1.0


  This is a combat script for archery designed for Ranger's. 
  It requires cab.lic for full functionality. Also requires Lich 5.
  
  - Will keep barkskin active. Will attempt to commune barkskin when incapacitated.
    * ;archery commune   - to enable if you have 15 blessings ranks.
  - Will activate reaction shots in real time.
  - Will weave 1 second spike thorn/natures fury in when arcane reflexes procs.
    * ;archery fury
  - Will Volley/Pindown based on number of targets.
    * ;archery volley <count>
    * ;archery pindown <count>
  - Will Snipe after aquiring tangleweed and barrage buffs. (toggle barrage to only get buff)
    * ;archery snipe
  - Specify your target and stop after it dies or clear the room.
    * ;archery mtarget   - toggle between clearing room or killing target.
    * ;archery <target> <snipe>   - specify your target and optionally snipe.
	
=end

debug = false
story_mode = false
silence_me if story_mode == true

#Local variables
npcs = nil
cons = nil
target = nil
chosen = nil
mtarget = true #false to only attack the creatures you specified. true to attack everything else after it dies.
sniping = false

#Global variables.
UserVars.archery   				  ||= {}
UserVars.archery[:barrageocd]		= true			if UserVars.archery[:barrageocd].nil?
UserVars.archery[:volleycount]		= 3				if UserVars.archery[:volleycount].nil?
UserVars.archery[:pindowncount]		= 4				if UserVars.archery[:pindowncount].nil?
UserVars.archery[:furycount]		= 3				if UserVars.archery[:furycount].nil?
UserVars.archery[:mtarget]			= true			if UserVars.archery[:mtarget].nil?
UserVars.archery[:commune]			= false 		if UserVars.archery[:commune].nil?
UserVars.archery[:arcanereflex]		= true			if UserVars.archery[:arcanereflex].nil?
UserVars.archery[:companion]		= "panther"		if UserVars.archery[:companion].nil?
UserVars.archery[:tangleweed]		= "tangleweed"	if UserVars.archery[:tangleweed].nil?
UserVars.archery[:townnumber]       = nil           if UserVars.archery[:townnumber].nil?



#while GameObj.targets.any? {|npc| (npc.status !~ /dead|gone/) && (npc.name !~ /arm|arms|palpi|tentacle/)}
#Find a target
get_target = proc {
  echo "getting target" if debug == true
  npcs = GameObj.targets
  cons = GameObj.npcs.find { |npc| npc.name =~ /lesser construct|greater construct/ }
  npcs.delete_if { |npc| npc.name =~ /arm|arms|palpi|tentacle/ }
  npcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate|jock/i && npc.name !~ /ethereal|celestial|unworldly/i }
  if chosen == nil
    target = npcs.find { |npc| (npc.name =~ //)  && (npc.status !~ /dead|gone/) }
  else
    target = npcs.find { |npc| (npc.name == chosen.to_s)  && (npc.status !~ /dead|gone/) }
	chosen = nil if UserVars.archery[:mtarget] == true
  end
}

#Deal with status effects and not standing.
status = proc {
  echo "status check" if debug == true
  exit if dead?
  waitrt?
  waitcastrt?
  if muckled?
	fput "commune" if UserVars.cab[:barkskincd] <= Time.now && UserVars.archery[:commune] == true
  end
  wait_until {!muckled?} #cutthroat? calmed? silenced? bound? sleeping? muckled? webbed? stunned? dead? frozen?
  if (Wounds.head > 1) || (Wounds.neck > 1) || (Wounds.abs > 1) || (Wounds.lhand > 1) || (Wounds.rhand > 1) || (Wounds.larm > 1) || (Wounds.rarm > 1) || (Wounds.chest > 1) || (Wounds.back > 1) || (Wounds.rleg > 1) || (Wounds.lleg > 1) || (Wounds.nerves > 1) || (Scars.head > 1) || (Scars.neck > 1) || (Scars.abs > 1) || (Scars.lhand > 1) || (Scars.rhand > 1) || (Scars.larm > 1) || (Scars.rarm > 1) || (Scars.chest > 1) || (Scars.back > 1) || (Scars.rleg > 1) || (Scars.lleg > 1) || (Scars.nerves > 1) || (percenthealth < 50)
    echo "YOU NEED TO HEAL"
	echo "YOU NEED TO HEAL"
	echo "YOU NEED TO HEAL"
	exit
  end
  fput "stand" until standing?
}

#608 if available, hides otherwise
hide = proc {
  echo "hide" if debug == true
  waitrt?
  waitcastrt?
  sleep 0.1
  Spell[608].cast if Spell[608].affordable? && !hiding? && Char.prof =~ /Ranger/
  sleep 0.1
  put "hide" if !hiding?
}

#Keep Barkskin up.
barkskin = proc {
  if UserVars.cab[:barkskin] == false && UserVars.cab[:barkskincd] <= Time.now
    echo "barkskin" if debug == true
    waitrt?
	waitcastrt?
	sleep 0.1
    Spell[605].cast if Spell[605].affordable?
    next
  end
}


if script.vars[1].downcase == 'setup'
  echo "setup your face"
  exit
elsif variable[1].downcase == 'help'
  respond("Archery by Nisugi")
  respond("")
  respond("Archery is a combat script for Rangers.")
  respond("You can specify a target if you like.")
  respond("Use with Bigshot by putting 'script archery' in the commands box.")
  respond("")
  respond("Basic usage: #{$lich_char}#{script.name}")
  respond("Basic usage: #{$lich_char}#{script.name} <target>")
  respond("Basic usage: #{$lich_char}#{script.name} <target> snipe")
  respond("Basic usage: #{$lich_char}#{script.name} snipe")
  respond("Basic usage: #{$lich_char}#{script.name} volley <number of critters>")
  respond("Basic usage: #{$lich_char}#{script.name} pindown <number of critters>")
  respond("Basic usage: #{$lich_char}#{script.name} fury <number of critters>")
  respond("Basic usage: #{$lich_char}#{script.name} companion <animal companion noun>")
  respond("Basic usage: #{$lich_char}#{script.name} tangleweed <tangleweed noun>")
  respond("Basic usage: #{$lich_char}#{script.name} fury <number of critters>")
  respond("Basic usage: #{$lich_char}#{script.name} barrage")
  respond("Basic usage: #{$lich_char}#{script.name} mtarget")
  respond("Basic usage: #{$lich_char}#{script.name} commune")
  respond("Basic usage: #{$lich_char}#{script.name} arcanereflex")
  respond("")
  respond("Extra commands:")
  respond("help    		- show this help message")
  respond("snipe   		- after aquiring tangleweed/barrage buffs will snipe. Toggle barrage on cool down off")
  respond("volley  		- set the number of creatures required before you Volley.")
  respond("pindown 		- set the number of creatures required before you Pin Down.")
  respond("companion 	- set your animal companions noun.")
  respond("tangleweed 	- set your tangleweeds noun.")
  respond("fury    		- set the number of creatures required before you Nature's Fury with Arcane Reflex.")
  respond("barrage 		- toggle between Barrage on cooldown or only to gain enhanced dexterity.")
  respond("mtarget 		- toggle between stopping after target dead or clearing room.")
  respond("commune 		- toggle between attempting to commune barkskin when incapacitated.")
  respond("arcanereflex - toggle between weaving in 1s casts or not. Turn off to stay hidden during sniping")
  respond("")
  respond("Things to make sniping better:")
  respond(";archery barrage - to set barrage to only get the enhanced dexterity buff")
  respond(";archery aracanereflex - to set arcane reflex to not weave in 1s casts")
  respond(";archery volley 5 - increase the number of targets to stop aoe from removing hiding.")
  respond(";archery pindown 5 - increase the number of targets to stop aoe from removing hiding.")
  exit
elsif script.vars[1].downcase == 'snipe'
  sniping = true
elsif script.vars[1].downcase == 'barrage'
  if UserVars.archery[:barrageocd] == true
	UserVars.archery[:barrageocd] = false
	respond("You will now Barrage only when Enhanced Dexterity is not active.")
  elsif UserVars.archery[:barrageocd] == false
    UserVars.archery[:barrageocd] = true
	respond("You will now Barrage on cooldown.")
  end
  exit
elsif script.vars[1].downcase == 'mtarget'
  if UserVars.archery[:mtarget] == true
	UserVars.archery[:mtarget] = false
	respond("You will now only kill your chosen target.")
  elsif UserVars.archery[:mtarget] == false
    UserVars.archery[:mtarget] = true
	respond("You will now KILL all creatures. You SOCIOPATH!")
  end
  exit
elsif script.vars[1].downcase == 'commune'
  if UserVars.archery[:commune] == true
	UserVars.archery[:commune] = false
	respond("You WILL NOT attempt to commune for barkskin when incapacitated.")
  elsif UserVars.archery[:commune] == false
    UserVars.archery[:commune] = true
	respond("You WILL attempt to commune for barkskin when incapacitated.")
  end
  exit
elsif script.vars[1].downcase == 'arcanereflex'
  if UserVars.archery[:arcanereflex] == true
	UserVars.archery[:arcanereflex] = false
	respond("You WILL NOT weave in 1s casts when arcane reflex procs.")
  elsif UserVars.archery[:arcanereflex] == false
    UserVars.archery[:arcanereflex] = true
	respond("You WILL weave in 1s casts when arcane reflex procs.")
  end
  exit
elsif script.vars[1].downcase == 'volley'
  if script.vars[2].downcase == nil
	respond("You must specify how many critters must be present to enable Volley")
  else
    UserVars.archery[:volleycount] = script.vars[2]
	respond("You will now Volley when #{UserVars.archery[:volleycount]} number of critters are present.")
  end
  exit
elsif script.vars[1].downcase == 'fury'
  if script.vars[2].downcase == nil
	respond("You must specify how many critters must be present to enable Nature's Fury")
  else
    UserVars.archery[:furycount] = script.vars[2]
	respond("You will now Nature's Fury when #{UserVars.archery[:furycount]} number of critters are present and arcane reflex is active.")
  end
  exit
elsif script.vars[1].downcase == 'pindown'
  if script.vars[2].downcase == nil
	respond("You must specify how many critters must be present to enable Pin Down")
  else
    UserVars.archery[:pindowncount] = script.vars[2]
	respond("You will now Pin Down when #{UserVars.archery[:pindowncount]} number of critters are present.")
  end
  exit
elsif script.vars[1].downcase == 'companion'
  if script.vars[2].downcase == nil
	respond("Specify your companions noun. IE: panther, falcon, ect.")
  else
    UserVars.archery[:companion] = script.vars[2]
	respond("You have set your companion as #{UserVars.archery[:companion]}")
  end
  exit
elsif script.vars[1].downcase == 'tangleweed'
  if script.vars[2].downcase == nil
	respond("Specify your tangleweeds noun. IE: tangleweed, bramble, widgeonweed, ect.")
  else
    UserVars.archery[:tangleweed] = script.vars[2]
	respond("You have set your tangleweed as #{UserVars.archery[:tangleweed]}")
  end
  exit
elsif script.vars[1].downcase != nil
  chosen = script.vars[1].downcase
end
if script.vars[2].downcase == 'snipe'
  sniping = true
end
if !Script.running?('cab')
  echo " *** Archery.lic requires Cab.lic. Please download and start Cab.lic. Consider adding to autostart with ;autostart add archery *** "
  exit
end


#Here we go
get_target.call if target == nil  
while target != nil
  
  if UserVars.cab[:sanc] == true
	walk
	UserVars.cab[:sanc] = nil
	sleep 0.2
  end

  (target = nil) if target.status =~ /dead|gone/
  get_target.call if target == nil 
  break if target == nil
  echo "#{target} #{target.status}" if debug == true
  status.call
  fput "stow right" if checkright != nil
  fput "ready ranged" if checkleft !~ /bow|crossbow/
  barkskin.call if Spell[605].known?
	
  	if !Effects::Buffs.active?('Tangleweed Vigor') && Spell[610].known? && cons == nil
      if target.status !~ /flying/
		echo "tangleweed" if debug == true
		weed = GameObj.loot.find { |l| l.noun =~ /#{UserVars.archery[:tangleweed]}/ }
		if weed == nil
		  waitrt?
		  waitcastrt?
		  sleep 0.1
		  put "stance offensive" if checkstance !~ /offensive/
	      Spell[610].cast if Spell[610].affordable?
		  sleep 0.2
	      next
		end
	  end
	end
	
	if GameObj.targets.size >= UserVars.archery[:volleycount].to_i
	  echo "volley" if debug == true
	  if Weapon.available?("Volley")
	    waitrt?
		sleep 0.1
		put "stance offensive" if checkstance !~ /offensive/
		put "weapon volley"
		sleep 0.5
		next
	  end
	end

	if UserVars.cab[:reaction] != nil
      echo "reaction" if debug == true
      put "stance offensive" if checkstance !~ /offensive/
	  put "weapon #{UserVars.cab[:reaction]}"
	  sleep 0.2
	  UserVars.cab[:reaction] = nil
	  next
    end
	
	if UserVars.cab[:arcanereflex] == true && !hiding? && Char.prof == "Ranger" && UserVars.archery[:arcanereflex] == true && cons == nil
	  echo "arcane reflex" if debug == true
	  waitrt?
	  waitcastrt?
	  sleep 0.1
	  if GameObj.targets.size >= UserVars.archery[:furycount].to_i
	    Spell[635].cast if Spell[635].affordable? && target.status !~ /flying/
		sleep 0.2
	  else
		Spell[616].cast if Spell[616].affordable? && target.status !~ /flying/
	    sleep 0.2
	  end
	  next
	end
  
    if GameObj.targets.size >= UserVars.archery[:pindowncount].to_i 
	  echo "pin down" if debug == true
	  if Weapon.available?("Pin Down") && target.status !~ /flying/ && target.name !~ /war griffin/
	    waitrt?
		sleep 0.1
	    put "stance offensive" if checkstance !~ /offensive/
		put "weapon pindown"
		sleep 0.2
		next
	  end
	end
	  
    if UserVars.archery[:barrageocd] != true && Weapon.available?("Barrage")
	  if !Effects::Buffs.active?("Enh. Dexterity (+10)")
	    echo "barrage" if debug == true
	    waitrt?
		sleep 0.1
	    put "stance offensive" if checkstance !~ /offensive/
		put "raise bow" if !Spell[9097].active? && Char.name == "Nisugi" #+25 AS Briar
		waitrt?
		dothistimeout "weapon barrage ##{target.id}", 10, /^Upon firing your last arrow, you release a measured breath and lower your|^Distracted, you hesitate, and your assault is broken.  Frustrated, you return your remaining arrows.|^Your satisfying display of dexterity bolsters you and inspires those around you!|^A little bit late for that don't you think?|^Wait (.*) seconds.|^You are still stunned.|^You are too injured to fire that!|^Barrage what?|(.*) is already dead./
		sleep 0.2
		next
      end
	elsif Weapon.available?("Barrage")
      if checkstamina >= 50
	    echo "barrage" if debug == true
		waitrt?
		sleep 0.1
		put "stance offensive" if checkstance !~ /offensive/
		put "raise bow" if UserVars.cab[:briarpower] == false && Char.name == "Nisugi" #+25 AS Briar
		waitrt?
		dothistimeout "weapon barrage ##{target.id}", 10, /^Upon firing your last arrow, you release a measured breath and lower your|^Distracted, you hesitate, and your assault is broken.  Frustrated, you return your remaining arrows.|^Your satisfying display of dexterity bolsters you and inspires those around you!|^A little bit late for that don't you think?|^Wait (.*) seconds.|^You are still stunned.|^You are too injured to fire that!|^Barrage what?|(.*) is already dead./
		sleep 0.2
		next
      end
	end
	
	if target != nil
	  echo "fire" if debug == true
	  hide.call if sniping == true
	  waitrt?
	  sleep 0.1
	  put "stance offensive" if checkstance !~ /offensive/
      put "fire ##{target.id}"
      sleep 0.5
	  next
    end
  
  end


waitrt?
fput "stance defensive" if checkstance != /defensive|guarded/
respond("[  *** COMBAT COMPLETE ***  ]")
exit