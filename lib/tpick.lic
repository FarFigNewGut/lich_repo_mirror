=begin

	This script fulfills all of your lockpicking needs!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 5

=end
$tpick_current_version = 5
class TpickMain
	@version_history = 
"
Version 5:
	Bug Fixes:
		-Fixed issue with script not dropping an empty box if there are no trash receptacle in the current room.

Version 4:
	Bug Fixes:
		-Fixed issue with script sometimes not working properly if you changed your profession.
		-Fixed issue with the 'Bash' feature not working when used as a command line variable.
		-Fixed bug with 'Picks On Level' setting only using Copper or Vaalin lockpicks.
		-Fixed bug with Trap Lore Bonus always being set to 0 if your character doesn't know 404 but they do know Lmas Focus.

Version 3:
	Bug Fixes:
		-Fixed issue with script not moving onto wedges/other options the first time you roll higher than your 'Vaalin Lock Roll' setting and don't pick the lock.
		
Version 2:
	Bug Fixes:
		-Fixed bug with script not properly calculating your lockpicking/disarming bonus from using Lock Mastery Focus.

Version 1:
	New and improved ;tpick!
			
	Cleaned up some code.
			
	Settings page:
		-Redid the settings page.
		-Changed some settings to be more clear in what they do.
		-If a setting doesn't pertain to your character (such as a setting only a Rogue would use and you're not a Rogue) then those settings are hidden.
		-Settings are now saved to a file in your Lich folder named 'Tpick Settings.'
		-You can now load settings from a different character.
		-Every setting has a tooltip to describe what that setting does.
		-Most of your old settings should transfer to the new settings when you first start the script.
				
	Stats:
		-Stats are now saved to a file in your Lich folder named 'Tpick Stats.'
		-Your old stats should save to the new stats when you first start the script.
			
	Information Window:
		-Created an Information Window that displays various information while the script is running.
		-The Information Window is now where you can see all of your stats.
		-You can select picking mode and options from the Information Window and start a picking session by clicking the 'Start' button.
		-You can click now click the 'Stop' button on the Information Window to finish up the current box you are working on and then stop working on anymore boxes.
		
	Command Line Variables:
		-You can now use the word 'pool' instead of 'worker'. Both now work and do the same thing.
		
	Other Things:
		-Many other things I am sure I'm forgetting.
	"
	
	@windows["Information"].close if @windows["Information"]
	@save_file = "Tpick Settings.json"
	@save_stats_file = "Tpick Stats.json"
	@lock_file = "Lock File.lock"
	@windows = {}
	@grids = {}
	@entries = {}
	@buttons = {}
	@menus = {}
	@non_settings_menus = {}
	@check_boxes = {}
	@labels = {}
	@spin_buttons = {}
	@adjustments = {}
	@all_textviews = {}
	@all_buffers = {}
	@scrolled_windows = {}
	@all_notebooks = {}
	@needed_values = {}
	@all_messages = []
	@load_data = nil
	@stats_data = nil
	@script_variables = nil
	@reset_all_stats = nil
	$tpick_commands_set = nil
	@current_session_picking = 0
	@reset_profession = nil
	
	@worn_containers = Lich::Util.quiet_command_xml("inv containers", /You are wearing|You are holding/)
	@worn_containers = @worn_containers[-2]
	@worn_containers = @worn_containers.split(/You are wearing |, and |, | and |\.|no containers at this time/)
	@worn_containers.reject!{ |item| item.empty? }
	@worn_containers.map!{ |item| item = item.gsub(/(^an? |some )/, "") }
	
	$tpick_worn_containers = {}
	@worn_containers.each{ |container|
		key = container.scan(/>(.*?)<\/a>/).join(" ")
		value = container.scan(/<a exist="(\d+)"/).join(" ")
		$tpick_worn_containers[key] = value
	}
	
	@required_settings = [ "Vaalin", "Lockpick Container", "Broken Lockpick Container", "Scale Weapon Container", "Locksmith's Container", "Scale Trap Weapon" ]
	
	@all_spinbuttons = [ "Max Lock", "Max Lock Roll", "Trap Roll", "Calibrate Count", "Trap Check Count", "Lock Roll", "Vaalin Lock Roll", "Lock Buffer", "Unlock (407) Mana", "Percent Mana To Keep", "Number Of 416 Casts", "Max Level", "Minimum Tip Start", "Minimum Tip Interval", "Minimum Tip Floor", "Time To Wait", "Use 403 On Level", "Use 404 On Level" ]
	@all_menus = [ "Trick", "Unlock (407)", "Rest At Percent", "Pick At Percent", "Lockpick Container", "Broken Lockpick Container", "Wedge Container", "Calipers Container", "Scale Weapon Container", "Locksmith's Container" ]
	@all_checkboxes = [ "Trash Boxes", "Calibrate On Startup", "Auto Bundle Vials", "Bracer Tier 2", "Bracer Override", "Calibrate Auto", "Auto Repair Bent Lockpicks", "Keep Trying", "Run Silently", "Use Monster Bold", "Don't Show Messages", "Don't Show Commands", "Light (205)", "Presence (402)", "Celerity (506)", "Rapid Fire (515)", "Self Control (613)", "Song of Luck (1006)", "Song of Tonis (1035)", "Use Lmaster Focus", "Disarm (408)", "Use Vaalin When Fried", "Phase (704)", "Only Disarm Safe", "Pick Enruned", "Lockpick Open", "Lockpick Close", "Broken Open", "Broken Close", "Wedge Open", "Wedge Close", "Calipers Open", "Calipers Close", "Weapon Open", "Weapon Close", "Use Calipers", "Use Loresinging", "Standard Wait" ]
	
	@lockpick_names = [ "Detrimental", "Ineffectual", "Copper", "Steel", "Gold", "Silver", "Mithril", "Ora", "Glaes", "Laje", "Vultite", "Mein", "Rolaren", "Accurate", "Veniom", "Invar", "Alum", "Golvern", "Kelyn", "Vaalin" ]
	
	@box_info_labels = [ "Box Name", "Box ID", "Lock Difficulty", "Trap Difficulty", "Current Trap", "Tip Amount", "Critter Name", "Critter Level", "Putty Remaining", "Cotton Remaining", "Vials Remaining", "Window Message" ]
	
	@repair_names = [ "Repair Copper", "Repair Brass", "Repair Steel", "Repair Gold", "Repair Silver", "Repair Mithril", "Repair Ora", "Repair Laje", "Repair Vultite", "Repair Rolaren", "Repair Veniom", "Repair Invar", "Repair Alum", "Repair Golvern", "Repair Kelyn", "Repair Vaalin" ]
	
	@trap_names_all = [ "Scarab", "Needle", "Jaws", "Sphere", "Crystal", "Scales", "Sulphur", "Cloud", "Acid Vial", "Springs", "Fire Vial", "Spores", "Plate", "Glyph", "Rods", "Boomer", "No Trap" ]
	
	@rogue_only_checkboxes = [ "Wedge Open", "Wedge Close", "Calipers Open", "Calipers Close", "Use Calipers", "Calibrate Auto", "Calibrate On Startup", "Auto Bundle Vials", "Auto Repair Bent Lockpicks", "Use Lmaster Focus" ]
		
	@rogue_only_entries = [ "Wedge Container", "Calipers Container", "Trick", ";rogues Lockpick", "Repair Copper", "Repair Brass", "Repair Steel", "Repair Gold", "Repair Silver", "Repair Mithril", "Repair Ora", "Repair Laje", "Repair Vultite", "Repair Rolaren", "Repair Veniom", "Repair Invar", "Repair Alum", "Repair Golvern", "Repair Kelyn", "Repair Vaalin" ]
	
	@all_spells = [ "Light (205)", "Presence (402)", "Unlock (407)", "Disarm (408)", "Celerity (506)", "Rapid Fire (515)", "Self Control (613)", "Song of Luck (1006)", "Song of Tonis (1035)" ]
	
	@settings_for_403 = [ "Use 403 On Level", "Lock Pick Enhancement (403)" ]
	
	@settings_for_404 = [ "Use 404 On Level", "Disarm Enhancement (404)" ]

	container_info = "\n\nThis lists all of your currently worn containers. If you don't see your container listed be sure you are wearing it then restart the script."
	spell_info = "Check this box to keep this spell active while disarming and picking boxes.\n\nIf the spell wears off then the script will wait until you have enough mana to recast the spell before continuing."
	min_tip_info = "IMPORTANT: 'Minimum Tip Start', 'Minimum Tip Interval', and 'Minimum Tip Floor' settings are all related.\n\nExample of how these settings work: 'Minimum Tip Start' set to 1000, 'Minimum Tip Interval' set to 40, 'Minimum Tip Floor' set to 500: Script would start asking for 1000+ silver jobs, when none are available it would subtract 40 and start asking for 960+ silver jobs.\nIt would keep doing this until it reached 500 silvers, at which point it would start over again at 1000.\n\nAnother example: Set 'Minimum Tip Start' to 200, 'Minimum Tip Interval' to 0, and 'Minimum Tip Floor' to 0 to always ask for 200+ silver jobs.\n\nSet all 3 settings to 0 to not request a minimum silver job and instead work on any box offered.\n\nDefault value: 0"
	open_info = "Check this box if you want the script to open this container when the script is started."
	close_info = "Check this box if you want the script to close this container before the script exits."
	gnomish_info = "IMPORTANT: The settings 'Gnomish Bracer', 'Bracer Tier 2', and 'Bracer Override' are all related. Be sure to read the tooltips for each and fill them out correctly.\n\n"
	adjust_info = "\n\nWindow will be adjusted as you change this value but the setting won't be saved until you click the 'Save' button."
	default_info = "\n\nDefault value:"
	tip_info = "This setting is related to the 'Drop Off Boxes' option.\n\nIf 'Tip Percent' is checked then the number in 'Tip Amount' is what percent of the box value you are tipping for each box.\n\nIf 'Tip Percent' is unchecked then the number in 'Tip Amount' is how much silver you are tipping for each box."
	@tooltips = {
		"Lockpick Tooltip" => "VAALIN LOCKPICK SETTING IS REQUIRED. ALL OTHER LOCKPICKS ARE OPTIONAL.\n\nEnter the FULL name of your lockpicks, NOT including the words 'a' or 'an'.\nExample: silver lockpick\n\nIf you are using a KEYRING for your lockpicks enter the full name as they appear when you LOOK ON KEYRING.\n\nYou MUST fill out the Vaalin Lockpick setting. If you don't have a vaalin lockpick then enter the name of your highest quality lockpick.\n\nIf you don't have a particular lockpick then leave it blank and the script will enter your next best lockpick.\n\nDetrimental, Ineffectual, mein, and accurate lockpicks aren't very common, if you don't have any of those then leave those settings blank.\n\nYou can enter multiple lockpicks of the same kind by separating them with a comma.\nFor example if you have two copper lockpicks you can enter the following in the Copper Lockpick setting: dark red copper lockpick,red tinted copper lockpick.\nNote no space after the comma.",
		"Repair Tooltip" => "If you wish to use the repair feature of this script (automatically repairs any broken lockpicks) you need to fill out each material setting with the lockpicks that are made out of that material/can be repaired with a wire from that material.\n\nExample: if you have a lockpick that is made out of steel, regardless of the modifier of that lockpick, then enter the name of that lockpick in the 'steel' setting.\n\nUse the same instructions for filling out each setting as in the 'Lockpick' tab: enter the full name not including the words 'a' or 'an', if you have the lockpicks on a keyring use the full name as they appear when you LOOK ON KEYRING, separate multiple lockpicks with a ',' no spaces.\n\nExample: blue steel lockpick,red steel lockpick",
		"Lockpick Container" => "Select the container where your lockpicks will be stored.#{container_info}",
		"Broken Lockpick Container" => "Select the container where your broken lockpicks will be stored.#{container_info}",
		"Wedge Container" => "Note: If you won't be using wedges then it doesn't matter what you select here.\n\nSelect the container where your wedges will be stored.#{container_info}",
		"Calipers Container" => "Note: If you won't be using calipers then it doesn't matter what you select here.\n\nSelect the container where your calipers will be stored.#{container_info}",
		"Scale Weapon Container" => "Select the container where your weapon for disarming scale traps will be stored.#{container_info}",
		"Locksmith's Container" => "Select the container where putty and cotton balls are found.#{container_info}",
		"Other Containers" => "If you leave this setting blank the script will STOW everything else that is not listed above.\n\nList all other item names/item types and the containers you want them to go into. Separate the names/types and containers by ':' and separate each of these by a comma.\n\nExample: gem: sack, diamond: soft brown cloak, silver wand: ebony pack\n\nNote you can use either the full name of a container or just the noun, but if you are wearing more than one of a particular container (like two sacks) be sure to use full names.\n\nNames will be matched before types. Example if you have: \"gem: pack, diamond: cloak\" then all diamonds will be put into your cloak and all other gems will be put into your pack.\n\nAny Lich item types will work, here are the more common ones: herb, gem, armor, weapon, reagent, jewelry, uncommon, scroll, clothing, collectible, cursed, wand",
		"Auto Deposit Silvers" => "Enter 'yes' to auto deposit silvers when encumbered and picking pool boxes or ground picking and looting.\n\nOr enter the name and commands of your preferred selling script, ;tpick will run this script when encumbered.\n\nExample: eloot sell\n\nAfter depositing silvers/running the named script ;tpick will go back to your original spot and continue picking.",
		"Gnomish Bracer" => "#{gnomish_info}Enter name of your gnomish bracer, not including 'a' or 'an'.",
		"Bracer Tier 2" => "#{gnomish_info}Check this box if your Gnomish Bracer is at least tier 2 and you want the script to use your Gnomish Bracer to disarm traps.",
		"Bracer Override" => "#{gnomish_info}Check this box if you only want the script to use your Gnomish Bracer for disarming traps and will use your 'Lockpick Container' setting to find and store lockpicks.",
		"Bashing Weapon" => "Only use this setting if you are a warrior who has learned Bashing in the warrior guild and you want to bash open your boxes instead of picking them.\n\nEnter the name of the weapon you use for bashing boxes.\n\nExample: glaes club",
		"Scale Trap Weapon" => "Enter the name of the weapon you use for disarming scale traps.\n\nExample: black iron pick",
		"Remove Armor" => "Enter the name of your armor if you want the script to remove your armor before casting a spell. The script will automatically wear the armor again before the script exits.\n\nExample: plate armor",
		"Max Lock" => "Enter the highest lock you are willing to attempt, any locks higher than this will be wedged, popped, or skipped.\n\nFor example if you enter 400 in this setting then any locks with a difficulty higher than 400 will be wedged, popped, or skipped.\n\nEntering a negative number would instead only attempt locks that are at most that value lower than your max skill with a vaalin lockpick.\n\nFor example if the highest lock you can pick with a vaalin lockpick is 700 and you enter -50 into this setting, then any locks higher than 650 will be wedged, popped, or skipped.#{default_info} 10000",
		"Max Lock Roll" => "Example: If you set this to 30 then whenever you roll lower than 30 when picking a lock the script will attempt to pick again no matter what messaging you received.\n\nSet this to 0 if you want the script to always move to a higher lockpick when receiving a message that you aren't able to pick the lock.\n\nThe script will always move on to a higher lockpick if you break your current lockpick.#{default_info} 0",
		"Trap Roll" => "Determines what difficulty boxes you want to attempt.\n\nSet to 0 to never try anything higher than your total disarm skill + lore bonus.\n\nSet to 10000 to attempt to disarm all traps.\n\nExample: Setting to 10 would attempt traps 10 points higher than your disarm skill + lore bonus.\n\nExample: Setting to -10 would only attempt traps that are a maximum of 10 points lower than your disarm skill + lore bonus.\n\nScript will always use 404/Lmaster Focus (if you know either one) if it determines you need the spell to disarm a trap.#{default_info} 10000",
		"Trick" => "Select the Lock Mastery trick you want to use when picking a box.\n\nSelect 'pick' to not use a trick.\n\nSelect 'random' to use a random trick each time you pick a lock.\n\nIMPORTANT: Script does not check whether or not you know the selected trick, be sure you have enough Lock Mastery ranks to use the selected trick. Refer to the following:\n\nSpin: 1 rank of Lock Mastery required\nTwist: 10 ranks of Lock Mastery required\nTurn: 20 ranks of Lock Mastery required\nTwirl: 30 ranks of Lock Mastery required\nToss: 40 ranks of Lock Mastery required\nBend: 50 ranks of Lock Mastery required\nFlip: 60 ranks of Lock Mastery required\nRandom: 60 ranks of Lock Mastery required",
		"Trash Boxes" => "Check this box to have script TRASH empty boxes if possible, if the TRASH verb can't find a proper trash bin then the script will drop the box on the ground.\n\nUncheck this box to have the script STOW all empty boxes.#{default_info} Checked",
		"Calibrate On Startup" => "Check this box to have the script calibrate your calipers whenever the script is started.",
		"Calibrate Count" => "IMPORTANT: Be sure to read the 'Calibrate Auto' setting below as it is related to this setting.\n\nScript will calibrate your calipers every time you pick this many boxes.#{default_info} 10",
		"Calibrate Auto" => "Check this box if you want the script to automatically calibrate your calipers when it is needed.\n\nExample of how this setting works: If this box is checked and you set the 'Calibrate Count' setting above to 100, then whenever the script notices your calipers readings are 100+ off from the actual lock difficulty it will calibrate your calipers.\n\nUncheck this box to not use the auto feature and instead use the 'Calibrate Count' for the specified use it states in its tooltip.",
		"Auto Bundle Vials" => "Check this box if you want the script to bundle vials into your locksmith's container after receiving a vial from disarming a vial trap.\n\nUncheck this box to have script stow the vials.#{default_info} Checked",
		"Auto Repair Bent Lockpicks" => "IMPORTANT: You learn how to repair bent lockpicks at rank 25 of Lock Mastery in the Rogue Guild, the script does not check if you have 25 ranks yet. Only check this box if you have at least 25 ranks in Lock Mastery.\n\nCheck this box to have the script automatically repair lockpciks after they have been bent.",
		"Trap Check Count" => "Enter how many times you want the script to manually check for traps.#{default_info} 1",
		"Lock Roll" => "Maximum roll before moving to a higher lockpick.\n\nExample: If this value is 50 and you roll higher than 50 and didn't pick the lock the script will move to the next lockpick, if you roll 50 or less then the script will keep trying with the current lockpick.#{default_info} 50",
		"Vaalin Lock Roll" => "Same as 'Lock Roll' setting above, but this setting is only when using a vaalin lockpick. Since there is no lockpick higher than vaalin, if you roll higher than this setting then the script will move on to using wedges, popping, or giving up on the box.\n\nSet to 101 to always try picking a lock with a vaalin lockpick.\n\nNOTE: This number should be equal to or higher than the 'Lock Roll' setting.#{default_info} 80",
		"Lock Buffer" => "Example: Set this to 50 and the script will add +50 to lock difficulty from all caliper readings, just in case your caliper readings aren't 100% accurate.\n\nFor example if your calipers said the lock has a difficulty of 200, then setting this to 50 would treat all calculations as if the difficulty were 250.#{default_info} 0",
		"Keep Trying" => "Check this box to have the script keep trying the current lockpick if you receive messaging indicating you can pick the lock with your current lockpick. This would override your 'Lock Roll' and 'Vaalin Lock Roll' settings.\n\nUncheck this box to have the script always follow your 'Lock Roll' and 'Vaalin Lock Roll' settings.#{default_info} Unchecked",
		"Run Silently" => "Check this box to not see most calculations feedback in the game window or in the 'Messages' tab of the Information Window while script is running. Important messages will still be shown.#{default_info} Unchecked",
		"Use Monster Bold" => "Check this box to use Monster Bold color for most messages.#{default_info} Unchecked",
		"Don't Show Messages" => "Check this box to not show ANY messages from the script in the game window, this includes what the script considers important messages.\n\nUncheck this box to show messages from the script in the game window.\n\nRegardless of this setting messages will still be shown in the 'Messages' tab of the Information Window.#{default_info} Unchecked",
		"Don't Show Commands" => "Check this box to not show commands the script is sending to the game.#{default_info} Unchecked",
		"Light (205)" => spell_info,
		"Presence (402)" => spell_info,
		"Celerity (506)" => spell_info,
		"Rapid Fire (515)" => "Check this box to keep Rapid Fire (515) active while casting other spells such as 407, 408, and 416.",
		"Self Control (613)" => spell_info,
		"Song of Luck (1006)" => spell_info,
		"Song of Tonis (1035)" => "Check this box to keep Song of Tonis (1035) active while disarming and picking boxes.\n\nScript will not wait until you have enough mana to cast 1035, it will cast if you have enough mana or move on if you don't.",
		"Use Lmaster Focus" => "IMPORTANT: Use the settings below to determine when you want to use Lmaster Focus for when you're picking and disarming.\n\nCheck this box to use LMASTER FOCUS instead of 403/404.",
		"Lock Pick Enhancement (403)" => "Enter 'yes' to keep this spell active.\n\nEnter 'no' to only use this spell when needed (after a failed pick attempt or for a very high lock.)\n\nEnter 'cancel' to have this spell STOPPED when starting a new box.\n\nEnter 'never' to NEVER use this spell.\n\nEnter a number to use this spell if the lock difficulty is above this number. Example: Entering 100 would use this spell whenever the lock difficulty is higher than 100.\n\nEnter 'auto' to have the script cast this spell when needed and to STOP the spell before picking if it isn't needed.\n\nYou can combine these options by separating each command with a space or comma, for example you can enter: auto 100 cancel",
		"Disarm Enhancement (404)" => "Enter 'yes' to keep this spell active.\n\nEnter 'no' to only use this spell when needed (after a failed disarm attempt or for a very difficult trap.)\n\nEnter 'cancel' to have this spell STOPPED when starting a new box.\n\nEnter 'never' to NEVER use this spell.\n\nEnter a number to use this spell if the trap difficulty is above this number. Example: Entering 100 would use this spell whenever the trap difficulty is higher than 100.\n\nEnter 'auto' to have the script cast this spell when needed and to STOP the spell before disarming if it isn't needed.\n\nEnter 'detect' to use this spell when detecting traps but will STOP this spell if it's not needed to disarm the trap.\n\nYou can combine these options by separating each command with a space or comma, for example you can enter: auto 100 detect",
		"Unlock (407)" => "Select 'Plate' to have the script open plated boxes (except mithril or enruned) with 407 if you have no acid vials or wedges.\n\nSelect 'Vial' to have the script use 407 to open non-mithril and non-enruned plated boxes, and will use vials on mithril and enruned plated boxes.\n\nSelect 'All' to have the script use 407 to open all boxes (except mithril and enruned.)\n\nSelect 'Never' to have the script NEVER use 407 to open any box.",
		"Unlock (407) Mana" => "Example: If you enter 50 here then the script will keep using 407 to attempt to open a box until you reach 50% of your maximum mana, at that point the script will give up and move on.\n\nEnter -1 to have the script keep using 407 until it successfully opens a box. This means the script might have to stop and wait for mana if you run out.#{default_info} 50",
		"Disarm (408)" => "Check this box to use 408 to disarm scarabs WHEN THEY ARE ON THE GROUND.\n\nUncheck this box to manually 'disarm' scarabs.",
		"Percent Mana To Keep" => "Example: If you enter 50 then the script won't cast any spells if your current mana is 50% or less than your max mana.\n\nEnter -1 to always cast spells as long as you have enough mana.#{default_info} -1",
		"Use Vaalin When Fried" => "Check this box to skip using calipers and loresinging and always use a vaalin lockpick to pick locks while your mind is fried.#{default_info} Checked",
		"Rest At Percent" => "The script will pause and wait for your mind to clear out when it reaches this mind state or higher.\n\nSelect 'Never' to never pause the script based on mind state.\n\nThis setting is ignored when you are doing 'Other' picking (when people hand you a box.)#{default_info} Never",
		"Pick At Percent" => "The script will start picking when your mind reaches this state or lower.\n\nSelect 'Always' to always pick boxes no matter what your mind state is.\n\nThis setting is ignored when you are doing 'Other' picking (when people hand you a box.)#{default_info} Always",
		"Ready" => "Enter what to say when you are ready to be handed boxes from another person.\n\nExample: Ready.#{default_info} BLANK",
		"Can't Open Box" => "Enter what to say when you can't open a box for another person.\n\nExample: Sorry, I can't open this box.#{default_info} BLANK",
		"Scarab Found" => "Enter what to say before you disarm a scarab trap.\n\nExample: Scarab coming down.#{default_info} BLANK",
		"Scarab Safe" => "Enter what to say after you have disarmed a scarab.\n\nExample: Scarab safe.#{default_info} BLANK",
		"Phase (704)" => "Check this box to use Phase (704) on each box to check for glyph traps.#{default_info} Checked",
		"Number Of 416 Casts" => "Enter the number of times you want to check a box for traps using Piercing Gaze (416).#{default_info} 1",
		"Only Disarm Safe" => "Some traps have a chance of being set off when using 408.\nCheck this box to skip boxes with traps that are not 100% safe, uncheck this box to attempt disarming those traps with 408.\n\nSome traps are completely safe to use 407 on (the trap won't be triggered), and some traps are completely safe to use 408 on (the spell won't set off the trap on a failure), the script always uses 407/408 on these boxes regardless of this setting.\n\nSome traps are NEVER safe to use 408 on, the script will ALWAYS skip these boxes regardless of this setting.#{default_info} Checked",
		"Pick Enruned" => "Check this box to manually pick all enruned and mithril boxes. This of course requires lockpicks and the picking skill and requires filling out the lockpicks section of the settings and other required settings.",
		"Max Level" => "Enter maximum critter level of boxes you will work on, higher level boxes will be turned in.#{default_info} 200",
		"Minimum Tip Start" => min_tip_info,
		"Minimum Tip Interval" => min_tip_info,
		"Minimum Tip Floor" => min_tip_info,
		"Time To Wait" => "IMPORTANT: 'Time To Wait' and 'Standard Wait' settings are related. Be sure to read the tooltips for both.\n\nEnter how many seconds you want to wait before asking the pool worker for another job when the pool worker tells you they can't assign you a new job at the moment.#{default_info} 15",
		"Standard Wait" => "IMPORTANT: 'Time To Wait' and 'Standard Wait' settings are related. Be sure to read the tooltips for both.\n\nCheck this box to use the standard wait times. These wait times vary based on the message received from the pool worker. These can range from 10 seconds to 5 minutes depending on the message.\n\nUncheck this box to instead always wait the number of seconds specified in the 'Time To Wait' setting above, regardless of message received.\n\nNo matter which setting you choose, the script will still respect your 'Rest When Fried' setting below.#{default_info} Checked",
		"Use 403 On Level" => "Example: Enter 80 to always use 403 on boxes which come from critters level 80+.#{default_info} 200",
		"Use 404 On Level" => "Example: Enter 80 to always use 404 on boxes which come from critters level 80+.#{default_info} 200",
		"Rest When Fried" => "Leave this setting blank if you don't want to do anything when fried and instead will wait in the locksmith's pool room until the worker assigns you more boxes.\n\nExample: Enter '112' if you want the script to move you to Lich room number 112 when you're fried.\n\nExample: Enter '112:go table' if you want the script to move you to Lich room number 112 then after arriving in Lich room number 112 the script will enter 'GO TABLE'.\n\nThe script will move you back to the pool room when your mind reaches the level you specify in the 'Pick At Percent' setting under the 'Experience' tab.\n\nNote this setting doesn't go by when you're fried, but rather when you receive messaging from the pool worker that you can't do anymore boxes until you let your mind clear out a bit.",
		"Picks On Level" => "Leave this blank if you don't want to use this feature.\n\nIMPORTANT: This setting works by default for all professions except for Rogues and Bards.\n\nIf you are a Rogue and you want to use this setting be sure the setting 'Use Calipers' is NOT checked.\n\nIf you are a Bard and you want to use this setting be sure the setting 'Use Loresinging' is NOT checked.\n\nThis setting will also work for any profession if you are using the 'v' command line variable.\n\nExample of how to use this setting: 10 copper, 20 steel, 30 gold, 50 lage, 75 invar, 90 kelyn\n\nThis would use your copper lockpick for critters between levels 1-10, steel lockpick for critters between levels 11-20, gold lockpick for critters between levels 21-30, etc.\n\nVaalin is used for any levels not specified, in the above example that would be for critters 91+.\n\nDO NOT use the names of your lockpicks, use the lockpick type. Refer to the below list as a reference:\n\ncopper, steel, gold, silver, mithril, ora, glaes, laje, vultite, rolaren, veniom, invar, alum, golvern, kelyn, vaalin",
		";rogues Lockpick" => "WARNING: Using this setting will probably break your lockpicks more often but you will likely get reps faster.\n\nLeave this setting blank to ignore this feature and use other settings to determine which pick to use.\n\nEnter the QUALITY of the lockpick to use when doing ;rogues tasks.\n\nFor example enter 'steel' to use whatever you have listed in your steel lockpick setting.\n\nIf the script notices you can't get a rep using whatever you have set then it will change this setting to go up 1 level of quality.\n\nIt's a good idea to have one lockpick of each kind to ensure you can easily get reps with these tasks.",
		"Profiles" => "Select the profile you wish to load then click the 'Load' button. This will fill out all settings with the selected character's settings.\n\nNOTE: Clicking 'Save' will save the current settings to #{checkname}'s profile, regardless of which character is selected in this menu.\n\n#{checkname}'s settings won't be saved until you click the 'Save' button.",
		"Save" => "Click this button to save the current settings to #{checkname}'s profile.\n\nNOTE: Some changes won't take effect until the ;tpick script is restarted.",
		"Load" => "Select the profile you wish to load in the menu to the left then click this button. This will fill out all settings with the selected character's settings.\n\nNOTE: Clicking 'Save' will save the current settings to #{checkname}'s profile, regardless of which character is selected in this menu.\n\n#{checkname}'s settings won't be saved until you click the 'Save' button.",
		"Defaults" => "Click this button to set all settings to the default values.\n\n#{checkname}'s settings won't be saved until you click the 'Save' button.",
		"Reset Stats" => "Type in the word 'reset' and then click the 'Reset Stats' button to reset ALL of #{checkname}'s stats.\n\nIMPORTANT: The script will close once you click the 'Reset Stats' button and you will need to restart it.",
		"Use Calipers" => "IMPORTANT: Script does not check if you are trained to use calipers from the Rogue Guild. Only check this box if you can use calipers.\n\nCheck this box to use calipers to get the lock difficulty and have the script automatically choose the best lockpick based on lock difficulty.\n\nUncheck this box to not use calipers and instead always use a vaalin lockpick on every lock.",
		"Use Loresinging" => "Check this box to use loresinging to get the lock difficulty and have the script automatically choose the best lockpick based on lock difficulty.\n\nUncheck this box to not use loresinging and instead always use a vaalin lockpick on every lock.",
		"Lockpick Open" => open_info,
		"Lockpick Close" => close_info,
		"Broken Open" => open_info,
		"Broken Close" => close_info,
		"Wedge Open" => open_info,
		"Wedge Close" => close_info,
		"Calipers Open" => open_info,
		"Calipers Close" => close_info,
		"Weapon Open" => open_info,
		"Weapon Close" => close_info,
		"Scan" => "IMPORTANT: You must have at least 24 ranks in Lock Mastery to use this feature. Also make sure your 'Lockpick Container' setting has been filled out and that you have clicked 'Save' after filling it out, then restart the script. Also be sure all of your lockpicks are currently in your 'Lockpick Container.'\n\nALSO IMPORTANT: It might take a minute or two to finish the scan (depends on how many items you have in your Lockpick Container), DO NOT interact with this setting window and do not enter any commands into the game until the process is complete.\n\nClick this button to have the script scan your lockpicks and automatically assign them to the setting where they belong based on their modifier.\n\nNOTE: You still need to click the 'Save' button after the lockpicks have been assigned if you wish to save the settings.\n\nALSO NOTE: You should probably use this feature in a private room as it will be a bit spammy.",
		"Copy" => "Click this button to copy over all of the settings of your lockpicks from the 'Lockpicks' tab.",
		"Width" => "Set the width you want for the information window.#{adjust_info}",
		"Height" => "Set the height you want for the information window.#{adjust_info}",
		"Horizontal" => "Set the horizontal position you want for the Information window.#{adjust_info}",
		"Vertical" => "Set the vertical position you want for the Information window.#{adjust_info}",
		"Scarab Value" => "Enter how many silvers the script should value scarabs.\n\nNote: This is for informational purposes only, the script will multiply how many scarabs you have received by this value to display how many silvers you have earned from finding scarabs.#{default_info} 5000",
		"Show Window" => "Check this box to have the Information Window shown when ;tpick is started.\n\nUncheck this box to not show the Information Window when ;tpick is started.\n\nYou can always have the Information Window shown when starting script if you start script with 'show' as one of the command line variables.\n\nExample: ;tpick show\n\nExample ;tpick solo show#{default_info} Checked",
		"Track Loot" => "Note: This setting pertains to Total Loot (loot gained across all sessions of ;tpick.) Session Loot (loot gained during the most recent session of using ;tpick) is always tracked.\n\nStats for tracking Total Loot is saved to the 'Tpick Stats' file on your computer and can potentially get large over time, especially if you use this script on multiple characters.\n\nCheck this box to save Total Loot stats.\n\nUncheck this box to not save Total Loot stats.\n\nIMPORTANT: Unchecking this box then clicking the 'Save' button will delete your Total Loot stats so if you want to save this information be sure to copy it before you change this setting.#{default_info} Unchecked",
		"Close Window/Script" => "Check this box to have ;tpick stopped whenever the Information Window is closed.\n\nUncheck this box to not have ;tpick stopped when the Information Window is closed.\n\nOnce the Information Window is closed the only way to see it again is to restart ;tpick.#{default_info} Checked",
		"Keep Window Open" => "Check this box to keep the Information Window open if the ;tpick script stops.\n\nUncheck this box to have the Information Window close when the ;tpick script stops.#{default_info} Unchecked",
		"One & Done" => "Check this box to close the Information Window after the command line mode has finished.\n\nFor example with this box checked: if you started script as ;tpick ground, then as soon as the script has finished picking all of the boxes on the ground the Information Window would close.\n#{default_info} Checked.",
		"Lockpicking" => "All stats related to picking boxes.",
		"Loot Total" => "This page shows all loot you have received while using this script. This includes loot you have taken out of boxes while using ground loot, while using solo, and while picking up boxes you have dropped off at the locksmith's pool.\n\nIt also tracks how many scarabs you have disarmed and picked up while using this script.",
		"Loot Session" => "This page shows all stats pertaining to the current session.\n\nThis includes how long the script has been running during the current session, how mnay silvers you have taken out of boxes, how many silvers you have received as tips from picking boxes at the locksmith's pool, as well as any other loot you have taken out of boxes during the current session.",
		"Traps" => "This page shows how many times you have encountered each type of trap.",
		"Lockpicks" => "This page shows how many locks you have picked with each type of lockpick since the last time you broke a lockpick of that type.\n\nIt also shows how many locks you have picked with any lockpick since the last time you broke any type of lockpick.",
		"Locksmith's Pool" => "This page shows all stats pertaining to picking boxes at the locksmith's pool, including total boxes picked, time spent actually disarming/picking boxes, time spent waiting for the worker to assign you more boxes, number of scarabs found, the value of scarabs found, and tips received.",
		"Non-Locksmith's Pool" => "This page shows all stats pertaining to picking boxes while not using the locksmith's pool.\n\nIt includes the time spent picking boxes and number of boxes picked.",
		"Total" => "This page shows all stats of Locksmith's Pool and Non-Locksmith's Pool combined.",
		"Messages" => "The 100 most recent messages received from the script will be displayed here.\n\nNOTE: The top message is the most recent message received and the bottom message is the oldest message.",
		"Stats" => "View all of your stats.",
		"Settings" => "Change settings related to the Information Window.",
		"Version History" => "List of all changes in previous versions of ;tpick.",
		"Main" => "This page shows what the script is currently doing and the stats of the current box being worked on.",
		"Default Mode" => "Leave this setting blank if you don't want to use this feature.\n\nEnter the commands you want to start the script with if you just start the script as ;tpick\n\nFor example: If you enter 'pool v' then whenever you start the script as just ;tpick the script will automatically start with the commands 'pool' which means to pick boxes at the Locksmith's Pool, and 'v' which means to always use a Vaalin lockpick.\n\nYou can enter whichever commands you want.\n\nNOTE: Even if you have commands in this setting, you can still start script with command lines to use those command lines, so starting script as ;tpick pool would pick boxes at the Locksmith's pool, regardless of what commands you have listed here.\n\nAlso starting script as ;tpick show won't use any commands and will startup the Information Window and wait for a command.\n\nCommands:\nplin: Open plinites instead of boxes.\nbash: Use Warrior Bashing instead of lockpicks.\ndisarm: Only disarm boxes and don't pick the locks.\nrelock: Relock boxes after opening them.\nc: Start with a copper lockpick and move up if the lockpick can't pick the lock\nv: Always use a Vaalin lockpick to pick locks.\nwedge: Always use a wedge to open boxes.\nloot: Loot boxes after opening them when doing ground picking.\npop: Use 416, 407, and 408 to open boxes.\nground: Pick boxes on the ground.\nother: Wait for someone to GIVE you a box, disarm/pick the box, hand it back.\npool: Pick boxes at the Locksmith's pool\nsolo: Pick all boxes in your open containers and disk.\npickup: Pickup any boxes you have waiting that you dropped off to be picked at the Locksmith's pool. Script will loot all boxes.\ndrop: Used to drop off boxes at the Locksmith's pool.\nExample how to use drop for a flat tip: drop 200\nExample how to use drop for a percent of the box's value: drop 15%",
		"Tip Amount" => tip_info,
		"Tip Percent" => tip_info,
		"Picking Mode" => "Pool Picking: Pick boxes at a Locksmith's Pool.\nGround Picking: Pick all boxes on the ground but do not loot any boxes.\nGround Picking + Loot: Pick and loot all boxes on the ground.\nSolo Picking: Pick all boxes in your open containers and disk.\nOther Picking: Wait for someone to hand you a box, pick box, hand it back.\nRefill Locksmith's Container: Refill all of the putty and cotton balls in your Locksmith's Container to 100\nRepair Lockpicks: Repair all of your broken lockpicks\nDrop Off Boxes: Drop off all boxes in your open containers and disk at the Locksmith's pool\nPick Up Boxes: Pick up and loot all boxes that are ready at the Locksmith's pool.",
		"Picking Options" => "None: Don't use any options.\nAlways Use Vaalin: Always use a Vaalin lockpick to pick any lock.\nStart With Copper: Start with a Copper lockpick and use better lockpicks as needed\nRelock Boxes: Relock boxes after picking them\nAlways Use Wedge: Always use a wedge to open boxes\nPop Boxes: Use 416, 407, and 408 to open boxes\nPlinites: Open plinites instead of boxes\nDisarm Only: Only disarm boxes, won't open the locks\nBash Only: Don't disarm boxes, will use Warrior Bash to open boxes\nBash + Disarm: Will disarm boxes then use Warrior Bash to open them",
		"Start" => "Choose the Picking Mode and Picking Options above then click this button to start up the selected mode.",
		"Stop" => "Once this button is clicked the script will finish the box it is currently working on and then stop.",
		"Show Tooltips" => "Check this box to not show any tooltips in both this Information Window and also the Setup Window.\n\nUncheck this box to show all tooltips.",
	}
	
	change_me = "REQUIRED CHANGE ME"
	@defaults = {
		"Vaalin" => change_me,
		"Lockpick Container" => change_me,
		"Broken Lockpick Container" => change_me,
		"Scale Weapon Container" => change_me,
		"Locksmith's Container" => change_me,
		"Scale Trap Weapon" => change_me,
		"Max Lock" => 10000,
		"Max Lock Roll" => 0,
		"Trap Roll" => 10000,
		"Trick" => "pick",
		"Calibrate Count" => 10,
		"Trap Check Count" => 1,
		"Lock Roll" => 50,
		"Vaalin Lock Roll" => 80,
		"Lock Pick Enhancement (403)" => "never",
		"Disarm Enhancement (404)" => "never",
		"Unlock (407)" => "Never",
		"Unlock (407) Mana" => 50,
		"Percent Mana To Keep" => -1,
		"Number Of 416 Casts" => 1,
		"Rest At Percent" => "Never",
		"Pick At Percent" => "Always",
		"Use Vaalin When Fried" => "Yes",
		"Phase (704)" => "Yes",
		"Auto Bundle Vials" => "Yes",
		"Only Disarm Safe" => "Yes",
		"Trash Boxes" => "Yes",
		"Lock Buffer" => 0,
		"Minimum Tip Start" => 0,
		"Minimum Tip Interval" => 0,
		"Minimum Tip Floor" => 0,
		"Time To Wait" => 15,
		"Standard Wait" => "Yes",
		"Max Level" => 200,
		"Use 403 On Level" => 200,
		"Use 404 On Level" => 200,
		"Width" => 500,
		"Height" => 410,
		"Horizontal" => 0,
		"Vertical" => 0,
		"Scarab Value" => 5000,
		"Show Window" => "Yes",
		"Track Loot" => "No",
		"Close Window/Script" => "Yes",
		"Keep Window Open" => "No",
		"One & Done" => "Yes",
		"Show Tooltips" => "Yes",
		"Default Mode" => "",
	}
	
	all_empty = [ "Detrimental", "Ineffectual", "Copper", "Steel", "Gold", "Silver", "Mithril", "Ora", "Glaes", "Laje", "Vultite", "Mein", "Rolaren", "Accurate", "Veniom", "Invar", "Alum", "Golvern", "Kelyn", "Repair Copper", "Repair Brass", "Repair Steel", "Repair Gold", "Repair Silver", "Repair Mithril", "Repair Ora", "Repair Laje", "Repair Vultite", "Repair Rolaren", "Repair Veniom", "Repair Invar", "Repair Alum", "Repair Golvern", "Repair Kelyn", "Repair Vaalin", "Wedge Container", "Calipers Container", "Other Containers", "Auto Deposit Silvers", "Gnomish Bracer", "Bashing Weapon", "Remove Armor", "Ready", "Can't Open Box", "Scarab Found", "Scarab Safe", "Rest When Fried", "Picks On Level", ";rogues Lockpick", "Picking Options", "Picking Mode", "Tip Amount" ]
	all_no = [ "Lockpick Open", "Lockpick Close", "Broken Open", "Broken Close", "Wedge Open", "Wedge Close", "Calipers Open", "Calipers Close", "Weapon Open", "Weapon Close", "Use Calipers", "Use Loresinging", "Pick Enruned", "Disarm (408)", "Keep Trying", "Run Silently", "Use Monster Bold", "Don't Show Messages", "Don't Show Commands", "Light (205)", "Presence (402)", "Celerity (506)", "Rapid Fire (515)", "Self Control (613)", "Song of Luck (1006)", "Song of Tonis (1035)", "Calibrate On Startup", "Calibrate Auto", "Auto Repair Bent Lockpicks", "Bracer Tier 2", "Bracer Override", "Use Lmaster Focus", "Tip Percent" ]
	
	all_empty.each{ |name| @defaults[name] = "" }
	all_no.each{ |name| @defaults[name] = "No" }
	
	def self.message(message)
		_respond "#{monsterbold_start}\n\n\n########################################\n########################################\n########################################\n#{message}\n########################################\n########################################\n########################################\n\n\n#{monsterbold_end}"
	end
	
	def self.load_the_data
		begin
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file|
				lock_file.flock(File::LOCK_EX)
				
				return unless File.exist?(@save_file)
				
				@all_load_data = JSON.parse(File.read(@save_file))
			}
			
			@all_characters = []
			@all_load_data.each{ |character,_| @all_characters.push(character) }
			@all_characters = @all_characters.sort
			@load_data = @all_load_data[checkname]
			@load_data.delete_if{ |key,value| value.is_a?(String) && value.length == 0 }
			return @all_load_data
		rescue StandardError => e
			message("Error message from ;#{@script_name}: #{e.message}")
		ensure
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file| lock_file.flock(File::LOCK_UN) }
		end
	end
	
	def self.load_the_stats
		begin
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file|
				lock_file.flock(File::LOCK_EX)
				
				return unless File.exist?(@save_stats_file)
				
				@stats_data = JSON.parse(File.read(@save_stats_file))
			}

			@stats_data = @stats_data[checkname]
			return @stats_data
		rescue StandardError => e
			message("Error message from ;#{@script_name}: #{e.message}")
		ensure
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file| lock_file.flock(File::LOCK_UN) }
		end
	end
	
	load_the_data
	
	def self.save_settings(save_type)
		File.open(@lock_file, File::RDWR | File::CREAT){ |lock|
			lock.flock(File::LOCK_EX)
			
			if File.exist?(@save_file)
				save_data = JSON.parse(File.read(@save_file))
			else
				save_data = {}
			end
			
			save_data[checkname] ||= {}
			
			if save_type == "All"
				@needed_values.each{ |name,value| save_data[checkname][name] = value if (name != "403") && (name != "404") }
				@spin_buttons.each{ |name,button| save_data[checkname][name] = button.value.round(1) }
				@entries.each{ |name,entry|
					entry.text = entry.text.gsub(/^(a |an )/, "") if (@lockpick_names.include?(name)) || (@repair_names.include?(name)) || (name =~ /^(Remove Armor|Gnomish Bracer)$/)
					save_data[checkname][name] = entry.text
				}
				@menus.each{ |name,menu| save_data[checkname][name] = menu.active_text }
				@check_boxes.each{ |name,box|
					if box.active?
						save_data[checkname][name] = "Yes"
					else
						save_data[checkname][name] = "No"
					end
				}
				if @reset_profession == "Rogue"
					@rogue_only_checkboxes.each{ |name| save_data[checkname][name] = @defaults[name].dup }
					@rogue_only_entries.each{ |name| save_data[checkname][name] = "" }
					save_data[checkname]["Lock Buffer"]= @defaults["Lock Buffer"].dup
					save_data[checkname]["Calibrate Count"]= @defaults["Calibrate Count"].dup
				elsif @reset_profession == "Warrior"
					save_data[checkname]["Bashing Weapon"] = ""
				elsif @reset_profession == "Bard"
					save_data[checkname]["Use Loresinging"] = @defaults["Use Loresinging"].dup
				end
				if @reset_profession
					@all_spells.each{ |name|
						new_name = name.match(/(\d+)/)
						new_name = new_name[1].to_i
						save_data[checkname][name] = @defaults[name].dup if (!Spell[new_name].known?) && (save_data[checkname][name] == "Yes")
					}
					
					@settings_for_403.each{ |name| save_data[checkname][name] = @defaults[name].dup if !Spell[403].known? && (Stats.prof != "Rogue") }
					@settings_for_404.each{ |name| save_data[checkname][name] = @defaults[name].dup if !Spell[404].known? && (Stats.prof != "Rogue") }
				end
			elsif save_type == "Menu Only"
				save_data[checkname]["Picking Options"] = @non_settings_menus["Picking Options"].active_text
				save_data[checkname]["Picking Mode"] = @non_settings_menus["Picking Mode"].active_text
				save_data[checkname]["Tip Amount"] = @spin_buttons["Tip Amount"].value
				if @check_boxes["Tip Percent"].active?
					save_data[checkname]["Tip Percent"] = "Yes"
				else
					save_data[checkname]["Tip Percent"] = "No"
				end
			end
				
			UserVars.tpick = nil if UserVars.tpick
			File.open(@save_file, 'w'){ |file| file.write(JSON.pretty_generate(save_data)) }
			message(";#{@script_name}: Data saved.") if save_type == "All"
		}
	end
	
	if Stats.prof != "Rogue"
		@reset_profession = "Rogue" if @rogue_only_checkboxes.find{ |name| @load_data[name] != @defaults[name] && @load_data[name] }
		@reset_profession = "Rogue" if @rogue_only_entries.find{ |name| @load_data[name].count("^ ") > 0 }
		
		name = "Lock Buffer"
		@reset_profession = "Rogue" if @load_data[name].to_i != @defaults[name] && @load_data[name]
		
		name = "Calibrate Count"
		@reset_profession = "Rogue" if @load_data[name].to_i != @defaults[name] && @load_data[name]
	end
		
	if Stats.prof != "Warrior"
		@reset_profession = "Warrior" if @load_data["Bashing Weapon"].count("^ ") > 0
	end
		
	if Stats.prof != "Bard"
		name = "Use Loresinging"
		@reset_profession = "Bard" if @load_data[name] != @defaults[name] && @load_data[name]
	end
	
	@all_spells.each{ |name|
		new_name = name.match(/(\d+)/)
		new_name = new_name[1].to_i
		if !Spell[new_name].known? && @load_data[name] == "Yes"
			@reset_profession = "Spells" unless @reset_profession
			break
		end
	}
	
	@settings_for_403.each{ |name| @reset_profession = "Spells" if (!Spell[403].known?) && (@load_data[name] != @defaults[name]) && (@load_data[name]) && (Stats.prof != "Rogue") }
	@settings_for_404.each{ |name| @reset_profession = "Spells" if (!Spell[404].known?) && (@load_data[name] != @defaults[name]) && (@load_data[name]) && (Stats.prof != "Rogue") }

	if @reset_profession
		save_settings("All")
		if @reset_profession == "Spells"
			message("It looks like you unlearned some spells. Some or all of your spell settings have been set to their default settings. You will need to restart the script. You shouldn't see this error message again unless you unlearn spells again.")
		else
			message("It looks like you changed your profession from #{@reset_profession} to #{Stats.prof}. All of your #{@reset_profession} only settings have been set to their default settings. You will need to restart the script. You shouldn't see this error message again unless you change your profession again.")
		end
		exit
	end
	
	@defaults.each{ |setting_name,value|
		if value.is_a?(Integer)
			@needed_values[setting_name] = @load_data[setting_name] ? @load_data[setting_name].to_i : @defaults[setting_name]
		else
			@needed_values[setting_name] = @load_data[setting_name] ? @load_data[setting_name] : @defaults[setting_name]
		end
	}
	
	def self.save_the_stats
		File.open(@lock_file, File::RDWR | File::CREAT){ |lock|
			lock.flock(File::LOCK_EX)
			
			if File.exist?(@save_stats_file)
				save_data = JSON.parse(File.read(@save_stats_file))
			else
				save_data = {}
			end

			save_data[checkname] = @stats_data
				
			File.open(@save_stats_file, 'w'){ |file| file.write(JSON.pretty_generate(save_data)) }
		}
	end
	
	def self.import_settings
		old_new_settings = { "Lockpick Container" => "lockpick_container", "Broken Lockpick Container" => "broken_lockpick_container", "Wedge Container" => "wedge_container", "Calipers Container" => "calipers_container", "Scale Weapon Container" => "scale_weapon_container", "Locksmith's Container" => "locksmiths_container", "Other Containers" => "all_other_containers", "Auto Deposit Silvers" => "auto_deposit_silvers", "Bashing Weapon" => "bashing_weapon", "Scale Trap Weapon" => "scale_trap_weapon", "Remove Armor" => "remove_armor", "Lock Pick Enhancement (403)" => "always_use_403", "Disarm Enhancement (404)" => "always_use_404", "Ready" => "ready", "Can't Open Box" => "cant_open_box", "Scarab Found" => "scarab_found", "Scarab Safe" => "scarab_safe", "Rest When Fried" => "pool_picking_rest_when_fried", "Picks On Level" => "picks_to_use_based_on_critter_level", ";rogues Lockpick" => "lockpick_to_use_for_rogues_tasks", "Detrimental" => "detrimental", "Ineffectual" => "ineffectual", "Copper" => "copper", "Steel" => "steel", "Gold" => "gold", "Silver" => "silver", "Mithril" => "mithril", "Ora" => "ora", "Glaes" => "glaes", "Laje" => "laje", "Vultite" => "vultite", "Mein" => "mein", "Rolaren" => "rolaren", "Accurate" => "accurate", "Veniom" => "veniom", "Invar" => "invar", "Alum" => "alum", "Golvern" => "golvern", "Kelyn" => "kelyn", "Vaalin" => "vaalin" }
		
		old_new_settings.each{ |new,old| @needed_values[new] = UserVars.tpick[old] if UserVars.tpick[old].count("^ ") > 0 }
		
		old_new_settings = { "Max Lock" => "max_lock", "Max Lock Roll" => "max_lock_roll", "Trap Roll" => "trap_roll", "Trap Check Count" => "number_of_times_to_check_for_traps", "Lock Roll" => "lock_roll", "Percent Mana To Keep" => "percent_mana_to_keep", "Vaalin Lock Roll" => "vaalin_lock_roll", "Number Of 416 Casts" => "number_of_416_casts", "Max Level" => "max_critter_level", "Use 403 On Level" => "use_403_based_on_critter_level", "Use 404 On Level" => "use_404_based_on_critter_level", "Lock Buffer" => "lock_buffer" }
		
		old_new_settings.each{ |new,old| @needed_values[new] = UserVars.tpick[old].to_i if UserVars.tpick[old].count("^ ") > 0 }
		
		old_new_settings = { "Trash Boxes" => "trash_boxes", "Auto Bundle Vials" => "auto_bundle_vials", "Auto Repair Bent Lockpicks" => "auto_repair_bent_lockpicks", "Keep Trying" => "keep_trying_if_within_abilities", "Run Silently" => "run_silently", "Use Monster Bold" => "use_monster_bold", "Don't Show Commands" => "do_not_show_commands", "Use Lmaster Focus" => "use_lmaster_focus", "Light (205)" => "always_use_205", "Presence (402)" => "always_use_402", "Disarm (408)" => "always_use_408", "Celerity (506)" => "always_use_506", "Rapid Fire (515)" => "always_use_515", "Self Control (613)" => "always_use_613", "Song of Luck (1006)" => "always_use_1006", "Song of Tonis (1035)" => "always_use_1035", "Use Vaalin When Fried" => "use_vaalin_when_fried", "Phase (704)" => "always_use_704", "Only Disarm Safe" => "only_disarm_safe", "Pick Enruned" => "pick_enruned_and_mithril" }
		
		old_new_settings.each{ |new,old| @needed_values[new] = "Yes" if UserVars.tpick[old] =~ /yes/i }
		
		@needed_values["Trick"] = UserVars.tpick["trick"].downcase if UserVars.tpick["trick"].count("^ ") > 0
		
		if UserVars.tpick["always_use_407"].count("^ ") > 0
			settings_407 = UserVars.tpick["always_use_407"].split(",")
			@needed_values["Unlock (407)"] = settings_407[0].capitalize
			@needed_values["Unlock (407)"] = "Never" if @needed_values["Unlock (407)"] =~ /no/i
			@needed_values["Unlock (407) Mana"] = settings_407[1]
		end
		
		if UserVars.tpick["rest_percent"].to_i == 100
			@needed_values["Rest At Percent"] = "Must Rest (100%)"
		elsif UserVars.tpick["rest_percent"].to_i == 90
			@needed_values["Rest At Percent"] = "Numbed (90%)"
		elsif UserVars.tpick["rest_percent"].to_i == 75
			@needed_values["Rest At Percent"] = "Becoming Numbed (75%)"
		elsif UserVars.tpick["rest_percent"].to_i == 62
			@needed_values["Rest At Percent"] = "Muddled (62%)"
		elsif UserVars.tpick["rest_percent"].to_i == 50
			@needed_values["Rest At Percent"] = "Clear (50%)"
		elsif UserVars.tpick["rest_percent"].to_i == 25
			@needed_values["Rest At Percent"] = "Fresh And Clear (25%)"
		elsif UserVars.tpick["rest_percent"].to_i == 0
			@needed_values["Rest At Percent"] = "Clear As A Bell (0%)"
		else
			@needed_values["Rest At Percent"] = "Never"
		end
		
		if UserVars.tpick["pick_percent"].to_i == 100
			@needed_values["Pick At Percent"] = "Must Rest (100%)"
		elsif UserVars.tpick["pick_percent"].to_i == 90
			@needed_values["Pick At Percent"] = "Numbed (90%)"
		elsif UserVars.tpick["pick_percent"].to_i == 75
			@needed_values["Pick At Percent"] = "Becoming Numbed (75%)"
		elsif UserVars.tpick["pick_percent"].to_i == 62
			@needed_values["Pick At Percent"] = "Muddled (62%)"
		elsif UserVars.tpick["pick_percent"].to_i == 50
			@needed_values["Pick At Percent"] = "Clear (50%)"
		elsif UserVars.tpick["pick_percent"].to_i == 25
			@needed_values["Pick At Percent"] = "Fresh And Clear (25%)"
		elsif UserVars.tpick["pick_percent"].to_i == 0
			@needed_values["Pick At Percent"] = "Clear As A Bell (0%)"
		else
			@needed_values["Pick At Percent"] = "Always"
		end
		
		if UserVars.tpick["gnomish_bracer"].count("^ ") > 0
			gnome_bracer = UserVars.tpick["gnomish_bracer"].split(",")
			@needed_values["Gnomish Bracer"] = bracers_name = gnome_bracer[0]
			@needed_values["Bracer Tier 2"] = "Yes" if UserVars.tpick["gnomish_bracer"] =~ /2|3/
			@needed_values["Bracer Override"] = "Yes" if UserVars.tpick["gnomish_bracer"] =~ /override/
		end
		
		if UserVars.tpick["calibrate"] =~ /yes/i
			@needed_values["Calibrate On Startup"] = "Yes"
		elsif UserVars.tpick["calibrate"] =~ /never/i
			@needed_values["Use Calipers"] = "No"
			@needed_values["Use Loresinging"] = "No"
		end
		
		if UserVars.tpick["calibratecount"] =~ /auto/i
			cal_count = UserVars.tpick["calibratecount"].split(" ")
			@needed_values["Calibrate Auto"] = "Yes"
			@needed_values["Calibrate Count"] = cal_count[1].to_i
		else
			@needed_values["Calibrate Count"] = UserVars.tpick["calibratecount"].to_i if UserVars.tpick["calibratecount"].count("^ ") > 0
		end

		save_settings("All")
		create_settings_window
	end
	
	def self.load_profile
		person = @non_settings_menus["Profiles"].active_text
		if person
			@entries.each{ |name,entry|
				if @all_load_data[person][name].nil?
					entry.text = ""
				else
					entry.text = @all_load_data[person][name]
				end			
			}
			@spin_buttons.each{ |name,button| button.value = @all_load_data[person][name] if @all_load_data[person][name] }
			@check_boxes.each{ |name,checkbox|
				if @all_load_data[person][name] == "Yes"
					checkbox.active = true
				else
					checkbox.active = false
				end
			}
			
			message(";#{@script_name}: #{person} settings have been loaded. #{checkname} saved settings won't be changed until you click 'Save', so if you want to revert these changes either load #{checkname}'s profile or restart the script.")
		end
	end
	
	def self.load_defaults
		@entries.each{ |name,entry|
			if @defaults[name].nil?
				entry.text = ""
			else
				entry.text = @defaults[name]
			end			
		}
		@spin_buttons.each{ |name,button| button.value = @defaults[name] }
		@check_boxes.each{ |name,checkbox|
			if @defaults[name] == "Yes"
				checkbox.active = true
			else
				checkbox.active = false
			end
		}
		
		message(";#{@script_name}: Default settings have been loaded. #{checkname} saved settings won't be changed until you click 'Save', so if you want to revert these changes either load #{checkname}'s profile or restart the script.")
	end
	
	def self.match_menu_item(menu, item_needed)
		item_found = nil
		menu.model.each{ |model, path, iter|
			if item_needed == menu.model.get_value(iter, 0)
				menu.set_active_iter(iter)
				item_found = true
				break
			end
		}
		menu.set_active(0) unless item_found
	end
	
	def self.create_text_view(name)
		@all_textviews[name] = Gtk::TextView.new
		@all_buffers[name] = @all_textviews[name].buffer
		@all_textviews[name].editable = false
		@all_textviews[name].wrap_mode = :word
		css_provider = Gtk::CssProvider.new
		css_provider.load(data: <<-CSS)
			textview {
				font-family: Courier New;
				font-size: 10pt;
			}
		CSS
		@all_textviews[name].style_context.add_provider(css_provider, Gtk::StyleProvider::PRIORITY_USER)
		@scrolled_windows[name] = Gtk::ScrolledWindow.new
		@scrolled_windows[name].set_policy(:automatic, :automatic)
		@scrolled_windows[name].add(@all_textviews[name])
	end
	
	def self.create_welcome_window
		width = 500
		height = 300
		@windows["Welcome"] = Gtk::Window.new(:toplevel)
		@windows["Welcome"].set_keep_above(true)
		@windows["Welcome"].set_title("Welcome - #{checkname}")
		@windows["Welcome"].resize(width, height)
		create_notebook("Welcome")
		
		all_tabs = [ "Welcome", "Version History" ]
		all_tabs.each{ |name|
			create_text_view(name)
			if name == "Welcome"
				if !File.exist?(@save_file)
					text = "Welcome to ;tpick! The script for all of your picking needs!
					
					This script has a lot of settings and features to customize your picking experience.
					
					Hover your mouse over anything in the settings window for more information on that setting.
					
					You can close this window when you're ready, but be sure to go through each tab at the top of the 'Settings' window and go over each setting.
					
					Only settings in red are required to be filled out to get started, but it's a good idea to read each setting.
					
					When you're all finished filling out the settings be sure to click the 'Save' button on the main tab.
					"
				else
					text = "A lot has changed since you last used this script!
							
					Most importantly is your settings are no longer saved to your ;vars, instead they are saved to a file in your Lich folder named 'Tpick Settings.'
							
					Also the settings window has changed and now requires you to click the 'Save' button to save your settings.
						
					You can now hover your mouse over every setting to see more information about that setting.
							
					Your old settings should have been properly moved over to your new settings, but go through each tab on the settings page and be sure all of your settings are filled our properly."
				end
				text = text.gsub("\t", "")
			elsif name == "Version History"
				text = @version_history
			end
			@all_buffers[name].text = text
			create_version_history_page if name == "Version History"
			
			@all_notebooks["Welcome"].append_page(@scrolled_windows[name], Gtk::Label.new(name))
		}
		
		@windows["Welcome"].signal_connect("destroy"){
			@windows["Welcome"].close
			@windows["Welcome"] = nil
		}
		
		@windows["Welcome"].add(@all_notebooks["Welcome"])
		@windows["Welcome"].show_all
	end
	
	def self.add_text_info(tab_name, names)
		create_text_view(tab_name)

		set_text_info(tab_name, names)
		
		if tab_name == "Loot Total"
			@labels[tab_name] = Gtk::Label.new(tab_name.gsub(" Total", ""))
			@all_notebooks["Stats"].append_page(@scrolled_windows[tab_name], @labels[tab_name])
		elsif tab_name == "Loot Session"
			@labels[tab_name] = Gtk::Label.new(tab_name.gsub("Loot ", ""))
			@all_notebooks["Stats"].append_page(@scrolled_windows[tab_name], @labels[tab_name])
		else
			@labels[tab_name] = Gtk::Label.new(tab_name)
			@all_notebooks["Lockpicking"].append_page(@scrolled_windows[tab_name], @labels[tab_name])
		end
	end
	
	def self.set_stat_info
		@stats_info = {}
		@stat_names.each{ |name| @stats_info[name] = @stats_data[name] }
		@stats_info["Pool Time Spent Picking"] -= @stats_info["Pool Time Spent Waiting"]
		@stats_info["Total Boxes Picked"] = @stats_info["Pool Boxes Picked"] + @stats_info["Non-Pool Boxes Picked"]
		@stats_info["Total Time Spent Picking"] = @stats_info["Pool Time Spent Picking"] + @stats_info["Non-Pool Time Spent Picking"]
		@stats_info["Total Traps"] = 0
		@trap_names_all.each{ |trap| @stats_info["Total Traps"] += @stats_info[trap] if @stats_info[trap] }
	end
	
	def self.set_text_info(tab_name, names)
		all_names = []
		needed_stats = {}
		names.each{ |name|
			needed_stats[name] = @stats_info[name]
			if name =~ /^(Loot Session|Loot Total|Opened\/Broke For Each Pick)$/
				needed_stats[name].each{ |key,value| all_names.push(key) }
			else
				all_names.push(name.gsub(/^(Non-Pool |Pool |Total |Loot |Session )/, ""))
			end
		}

		longest_name = all_names.map(&:length).max
		text = needed_stats.map{ |name,value|
			needed_value = ""
			
			scarab_silvers = @stats_info["Pool Scarabs Received"] * @needed_values["Scarab Value"]
			total_silvers = scarab_silvers + @stats_info["Pool Tips Silvers"]
			total_time = @stats_info["Pool Time Spent Picking"] + @stats_info["Pool Time Spent Waiting"]
			if name == "Pool Scarab Silvers"
				value = scarab_silvers
			elsif name == "Pool Total Silvers"
				value = total_silvers
			elsif name == "Pool Silvers/Hour"
				if total_time > 0
					value = ((total_silvers / total_time) * 3600).to_i
				else
					value = 0
				end
			end
			
			if name =~ /^(Pool Time Spent Picking|Pool Time Spent Waiting|Non-Pool Time Spent Picking|Total Time Spent Picking|Session Time Spent Picking)$/
				if name == "Session Time Spent Picking"
					@current_session_picking += (Time.now - @stats_data["Session Start Time"])
					@stats_data["Session Start Time"] = Time.now
					t = @current_session_picking
				else
					t = value
				end
				needed_value = "%02d:%02d:%02d" % [t / 3600, t / 60 % 60, t % 60]
			elsif value.is_a?(Integer)
				needed_value = add_commas(value)
			end
			if name =~ /^(Loot Session|Loot Total|Opened\/Broke For Each Pick)$/
				needed_name = "Silver"
				needed_value += "#{needed_name.ljust(longest_name)}  : #{add_commas(value["Silver"])}\n" if value.include?("Silver")
				
				needed_name = "Scarabs"
				needed_value += "#{needed_name.ljust(longest_name)}  : #{add_commas(value["Scarabs"])}\n" if value.include?("Scarabs")
				
				value.each{ |name,value| needed_value += "#{name.ljust(longest_name)}  : #{add_commas(value)}\n" if name !~ /^(Silver|Scarabs)$/ }
				needed_value
			else
				if @trap_names_all.include?(name)
					percent = @stats_info["Total Traps"] == 0 ? 0 : ((needed_value.delete(",").to_f / @stats_info["Total Traps"]) * 100).round(2)
					"#{name.gsub(/^(Non-Pool |Pool |Total |Loot |Session )/, "").ljust(longest_name)}  : #{needed_value} (#{percent}%)"
				else
					"#{name.gsub(/^(Non-Pool |Pool |Total |Loot |Session )/, "").ljust(longest_name)}  : #{needed_value}"
				end
			end
		}.join("\n")
		
		@all_buffers[tab_name].text = text
	end
	
	def self.add_commas(number)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
	end
	
	def self.update_stat_info
		set_stat_info
		@all_stats.each{ |tab_name,names| set_text_info(tab_name, names) }
	end
	
	def self.create_notebook(name)
		@all_notebooks[name] = Gtk::Notebook.new
		@all_notebooks[name].set_hexpand(true)
		@all_notebooks[name].set_vexpand(true)
	end
	
	def self.change_menu_options
		menu = @non_settings_menus["Picking Options"]
		picking_mode = @non_settings_menus["Picking Mode"].active_text
		tip_amount = @spin_buttons["Tip Amount"]
		percent = @check_boxes["Tip Percent"]
		menu.remove_all
		if picking_mode == "Drop Off Boxes"
			tip_amount.set_sensitive(true)
			percent.set_sensitive(true)
		else
			tip_amount.set_sensitive(false)
			percent.set_sensitive(false)
		end
		if picking_mode !~ /Drop Off Boxes|Pick Up Boxes|Refill Locksmith's Container|Repair Lockpicks/
			options = []
			options.push("None")
			options.push("Always Use Vaalin")
			options.push("Start With Copper")
			options.push("Relock Boxes") if picking_mode =~ /^(Ground Picking|Ground Picking \+ Loot|Solo Picking)$/
			options.push("Always Use Wedge") if Stats.prof == "Rogue"
			options.push("Pop Boxes") if Spell[416].known?
			options.push("Plinites") if picking_mode !~ /^(Pool Picking|Ground Picking|Ground Picking \+ Loot)$/
			options.push("Disarm Only") if picking_mode =~ /^(Ground Picking|Ground Picking \+ Loot)$/
			options.push("Bash Only") if (Stats.prof == "Warrior") && (picking_mode =~ /^(Solo Picking|Ground Picking|Ground Picking \+ Loot)$/)
			options.push("Bash + Disarm") if (Stats.prof == "Warrior") && (picking_mode =~ /^(Ground Picking|Ground Picking \+ Loot)$/)
			options.each{ |option| menu.append_text(option) }
			menu.set_active(0)
		end
	end

	def self.get_tpick_commands
		commands = []
		picking_mode = @non_settings_menus["Picking Mode"]
		picking_options = @non_settings_menus["Picking Options"]
		commands.push(picking_mode.active_text)
		commands.push(picking_options.active_text) if (picking_options.active_text != "None") && (picking_options.active_text)
		if picking_mode.active_text == "Drop Off Boxes"
			commands.push(@spin_buttons["Tip Amount"].value.to_i.to_s)
			commands.push("Percent") if @check_boxes["Tip Percent"].active?
		end
		return commands
	end
	
	def self.create_version_history_page
		buffer = @all_buffers["Version History"]
		bold_tag = buffer.create_tag("bold", { "weight" => Pango::WEIGHT_BOLD })
		underline_tag = buffer.create_tag("underline", { "underline" => Pango::Underline::SINGLE })
		regex = /(Version \d+:|Settings page:|Stats:|Information Window:|Command Line Variables:|Other Things:|Bug Fixes:)/
		matches = @version_history.enum_for(:scan, regex).map { Regexp.last_match }
		
		matches.each{ |match|
			start_pos = match.begin(0)
			end_pos = match.end(0)

			start_iter = buffer.get_iter_at_offset(start_pos)
			end_iter = buffer.get_iter_at_offset(end_pos)
			buffer.apply_tag(bold_tag, start_iter, end_iter)
			buffer.apply_tag(underline_tag, start_iter, end_iter)
		}
	end
	
	def self.reset_stats
		if @entries["Reset Stats"].text == "reset"
			@reset_all_stats = true
			@windows["Information"].close
			kill_script @script_name if running? @script_name
		end
		@entries["Reset Stats"].text = ""
	end
	
	def self.create_information_window
		if (@needed_values["Show Window"] == "Yes") || (@script_variables.any?{ |i| i.downcase == "show" })
			@windows["Information"] = Gtk::Window.new(:toplevel)
			@windows["Information"].set_keep_above(true)
			@windows["Information"].set_title("Tpick - #{checkname}")
			@windows["Information"].resize(@needed_values["Width"], @needed_values["Height"])
			@windows["Information"].move(@needed_values["Horizontal"], @needed_values["Vertical"])
			
			note_books = [ "Information", "Stats", "Lockpicking" ]
			note_books.each{ |name| create_notebook(name) }
			
			create_text_view("Version History")
			@all_buffers["Version History"].text = @version_history
			
			create_version_history_page
			create_text_view("Messages")
			
			pages = [ "Main", "Messages", "Stats", "Settings", "Version History" ]
			pages.each{ |name| 
				@grids["#{name} Main"] = Gtk::Grid.new
				@labels[name] = Gtk::Label.new(name)
				if name =~ /^(Version History|Messages)$/
					@all_notebooks["Information"].append_page(@scrolled_windows[name], @labels[name])
				else
					@all_notebooks["Information"].append_page(@grids["#{name} Main"], @labels[name])
				end
			}
			
			row = -1
			all_spinbuttons = [ "Width", "Height", "Horizontal", "Vertical", "Scarab Value" ]
			all_spinbuttons.each{ |name|
				if name =~ /^(Width|Height|Horizontal|Vertical)$/
					number = @needed_values[name]
					@adjustments[name] = Gtk::Adjustment.new(number, -1000, 5000, 1, 10, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name == "Scarab Value"
					number = @needed_values[name]
					@adjustments[name] = Gtk::Adjustment.new(number, 1, 20000, 1, 10, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				end
				if name =~ /^(Width|Height)$/
					@spin_buttons[name].signal_connect("value-changed"){ @windows["Information"].resize(@spin_buttons["Width"].value, @spin_buttons["Height"].value) }
				elsif name =~ /^(Horizontal|Vertical)$/
					@spin_buttons[name].signal_connect("value-changed"){ @windows["Information"].move(@spin_buttons["Horizontal"].value, @spin_buttons["Vertical"].value) }
				end
				@labels[name] = Gtk::Label.new("     #{name}     ")
				@grids["Settings Main"].attach(@labels[name], 0, row += 1, 1, 1)
				@grids["Settings Main"].attach(@spin_buttons[name], 1, row, 1, 1)
			}
			
			row += 1
			column = -1
			checkboxes = [ "Show Window", "Track Loot", "Close Window/Script", "Keep Window Open", "One & Done", "Show Tooltips" ]
			checkboxes.each{ |name|
				@check_boxes[name] = Gtk::CheckButton.new(name)
				if @needed_values[name] == "Yes"
					@check_boxes[name].active = true
				else
					@check_boxes[name].active = false
				end
				@grids["Settings Main"].attach(@check_boxes[name], column += 1, row, 1, 1)
				if column > 0
					column = -1
					row += 1
				end
			}
			
			name = "Default Mode"
			@entries[name] = Gtk::Entry.new
			@entries[name].text = @needed_values[name]
			@labels[name] = Gtk::Label.new("     #{name}     ")
			@grids["Settings Main"].attach(@labels[name], 0, row += 1, 1, 1)
			@grids["Settings Main"].attach(@entries[name], 1, row, 1, 1)
			
			buttons = [ "Save", "Defaults", "Reset Stats" ]
			buttons.each{ |name|
				@buttons[name] = Gtk::Button.new(name)
				if name == "Defaults"
					@grids["Settings Main"].attach(@buttons[name], 1, row, 1, 1)
				else
					@grids["Settings Main"].attach(@buttons[name], 0, row += 1, 1, 1)
				end
				if name == "Reset Stats"
					@entries[name] = Gtk::Entry.new
					@grids["Settings Main"].attach(@entries[name], 1, row, 1, 1)
				end
			}
			
			@buttons["Save"].signal_connect("clicked"){ save_settings("All") }
			@buttons["Defaults"].signal_connect("clicked"){ load_defaults }
			@buttons["Reset Stats"].signal_connect("clicked"){ reset_stats }
			
			row = -1
			grids = [ "Instructions Labels", "Menus", "Spin Buttons", "Buttons", "Box Labels" ]
			grids.each{ |name|
				@grids["Main #{name}"] = Gtk::Grid.new
				@grids["Main Main"].attach(@grids["Main #{name}"], 0, row += 1, 1, 1)
			}

			label = Gtk::Label.new("Choose the picking mode and option below.")
			@grids["Main Instructions Labels"].attach(label, 0, row += 1, 1, 1)
			
			column = -1
			buttons = [ "Start", "Stop" ]
			buttons.each{ |name|
				@buttons[name] = Gtk::Button.new(name)
				@grids["Main Buttons"].attach(@buttons[name], column += 1, 0, 1, 1)
				if name == "Start"
					@buttons[name].signal_connect("clicked"){
						$tpick_commands_set = true
					}
				elsif name == "Stop"
					@buttons[name].set_sensitive(false)
					@buttons[name].signal_connect("clicked"){
						@buttons[name].set_sensitive(false)
						$tpick_stop_immediately = true
						message(";#{@script_name}: 'Stop' button clicked. Script will finish the box you are currently working on and then stop.")
					}
				end
			}
			
			name = "Tip Amount"
			value = @load_data[name].to_s.length > 0 ? @load_data[name].to_i : 1
			@adjustments[name] = Gtk::Adjustment.new(value, 1, 10000, 1, 10, 0)
			@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
			@labels[name] = Gtk::Label.new("  #{name}  ")
			@grids["Main Spin Buttons"].attach(@labels[name], 0, 0, 1, 1)
			@grids["Main Spin Buttons"].attach(@spin_buttons[name], 1, 0, 1, 1)
			
			name = "Tip Percent"
			@check_boxes[name] = Gtk::CheckButton.new(name)
			if @load_data[name] == "Yes"
				@check_boxes[name].active = true
			else
				@check_boxes[name].active = false
			end
			@grids["Main Spin Buttons"].attach(@check_boxes[name], 2, 0, 1, 1)
			
			row = -1
			@box_info_labels.each{ |name|
				@labels[name] = Gtk::Label.new(name.gsub("Window Message",""))
				@labels[name].halign = Gtk::Align::START
				css_provider = Gtk::CssProvider.new
				css_provider.load(data: <<-CSS)
					label {
						font-family: Courier New;
						font-size: 10pt;
					}
				CSS
				@labels[name].style_context.add_provider(css_provider, Gtk::StyleProvider::PRIORITY_USER)
				@labels[name].set_line_wrap(true)
				@labels[name].wrap_mode = :word
				@grids["Main Box Labels"].attach(@labels[name], 0, row += 1, 1, 1)
			}

			column = -1
			options_menus = [ "Picking Mode", "Picking Options" ]
			options_menus.each{ |name|
				@non_settings_menus[name] = Gtk::ComboBoxText.new
				menu = @non_settings_menus[name]
				if name == "Picking Mode"
					options = [ "Pool Picking", "Ground Picking", "Ground Picking + Loot", "Solo Picking", "Other Picking", "Refill Locksmith's Container", "Repair Lockpicks", "Drop Off Boxes", "Pick Up Boxes" ]
					options.delete("Repair Lockpicks") if Stats.prof != "Rogue"
					menu.signal_connect("changed"){ change_menu_options }
					options.each{ |option| menu.append_text(option) }
				end
				@grids["Main Menus"].attach(menu, column += 1, row, 1, 1)
			}
			
			match_menu_item(@non_settings_menus["Picking Mode"], @load_data["Picking Mode"])
			match_menu_item(@non_settings_menus["Picking Options"], @load_data["Picking Options"])

			@labels["Lockpicking"] = Gtk::Label.new("Lockpicking")
			@all_notebooks["Stats"].append_page(@all_notebooks["Lockpicking"], @labels["Lockpicking"])

			@all_stats = {
				"Traps" => [ "Scarab", "Needle", "Jaws", "Sphere", "Crystal", "Scales", "Sulphur", "Cloud", "Acid Vial", "Springs", "Fire Vial", "Spores", "Plate", "Glyph", "Rods", "Boomer", "No Trap" ],
				
				"Lockpicks" => [ "Locks Opened Since Last Pick Broke", "Opened/Broke For Each Pick" ],
				
				"Locksmith's Pool" => [ "Pool Boxes Picked", "Pool Time Spent Picking", "Pool Time Spent Waiting", "Pool Scarabs Received", "Pool Scarab Silvers", "Pool Tips Silvers", "Pool Total Silvers", "Pool Silvers/Hour" ],
				
				"Non-Locksmith's Pool" => [ "Non-Pool Boxes Picked", "Non-Pool Time Spent Picking" ],
				
				"Total" => [ "Total Boxes Picked", "Total Time Spent Picking" ],
				
				"Loot Session" => [ "Session Time Spent Picking", "Session Boxes Picked", "Loot Session" ],
				
				"Loot Total" => [ "Boxes Looted", "Loot Total" ],
			}
			
			@stat_names = [ "Scarab", "Needle", "Jaws", "Sphere", "Crystal", "Scales", "Sulphur", "Cloud", "Acid Vial", "Springs", "Fire Vial", "Spores", "Plate", "Glyph", "Rods", "Boomer", "No Trap", "Locks Opened Since Last Pick Broke", "Pool Boxes Picked", "Pool Tips Silvers", "Pool Scarab Silvers", "Pool Total Silvers", "Pool Silvers/Hour", "Pool Scarabs Received", "Pool Time Spent Picking", "Pool Time Spent Waiting", "Non-Pool Boxes Picked", "Non-Pool Time Spent Picking", "Opened/Broke For Each Pick", "Loot Session", "Boxes Looted", "Loot Total", "Session Boxes Picked" ]
			
			@grids["Stats Main"].attach(@all_notebooks["Stats"], 0, 0, 1, 1)
			
			set_stat_info		
			@all_stats.each{ |tab_name,names| add_text_info(tab_name, names) }

			@windows["Information"].signal_connect("destroy"){
				save_settings("Menu Only")
				@windows["Information"].close
				@windows["Information"] = nil
				if @load_data["Close Window/Script"] == "Yes"
					Gtk.main_quit
					kill_script @script_name if running? @script_name
				end
			}
			
			add_all_tooltips
			
			@windows["Information"].add(@all_notebooks["Information"])
			@windows["Information"].show_all
		else
			message(";#{@script_name}: To show the Information Window start script as: ;#{@script_name} show")
		end
	end
	
	def self.add_all_tooltips
		main_hash = [ @entries, @buttons, @menus, @non_settings_menus, @check_boxes, @labels, @spin_buttons ]
		main_hash.each{ |hash| hash.each{ |name,widget|
				if @needed_values["Show Tooltips"] == "Yes"
					if @repair_names.include?(name)
						widget.set_tooltip_text(@tooltips["Repair Tooltip"])
					elsif @lockpick_names.include?(name)
						widget.set_tooltip_text(@tooltips["Lockpick Tooltip"])
					else
						widget.set_tooltip_text(@tooltips[name])
					end					
				end
			}
		}
	end
	
	def self.create_settings_window
		width = 300
		height = 300
		@windows["Settings"] = Gtk::Window.new(:toplevel)
		@windows["Settings"].set_keep_above(true)
		@windows["Settings"].set_title("Settings - #{checkname}")
		@windows["Settings"].resize(width, height)
		
		@windows["Settings"].signal_connect("destroy"){
			@windows.each{ |name,window|
				window.close
				@windows[name] = nil
			}
			Gtk.main_quit
			kill_script @script_name if running? @script_name
		}
		
		create_notebook("Settings")
		main_tab_grids = [ "Main", "Lockpicks", "Repair", "Containers", "Other", "Rogues Only", "Spells", "Experience", "Speech", "Popping", "Pool" ]
		
		main_tab_grids.each{ |name|
			create_it = true
			create_it = nil if name == "Rogues Only" && Stats.prof != "Rogue"
			create_it = nil if name == "Repair" && Stats.prof != "Rogue"
			create_it = nil if name == "Popping" && Stats.prof !~ /Bard|Rogue|Sorcerer|Warrior|Wizard/
			create_it = nil if name == "Spells" && Stats.prof =~ /Monk|Paladin/
			if create_it
				@grids["#{name} Main"] = Gtk::Grid.new
				@all_notebooks["Settings"].append_page(@grids["#{name} Main"], Gtk::Label.new(name))
			end
		}

		@lock_pick_hash = {
			"Detrimental" => "0.80 mod (Detrimental)",
			"Ineffectual" => "0.90 mod (Ineffectual)",
			"Copper" => "1.00 mod (Copper Lockpick)",
			"Steel" => "1.10 mod (Steel Lockpick)",
			"Gold" => "1.20 mod (Gold Lockpick)",
			"Silver" => "1.30 mod (Silver Lockpick)",
			"Mithril" => "1.45 mod (Mithril Lockpick)",
			"Ora" => "1.55 mod (Ora Lockpick)",
			"Glaes" => "1.60 mod (Glaes Lockpick)",
			"Laje" => "1.75 mod (Laje Lockpick)",
			"Vultite" => "1.80 mod (Vultite Lockpick)",
			"Mein" => "1.85 mod (Mein)",
			"Rolaren" => "1.90 mod (Rolaren Lockpick)",
			"Accurate" => "2.00 mod (Accurate)",
			"Veniom" => "2.20 mod (Veniom Lockpick)",
			"Invar" => "2.25 mod (Invar Lockpick)",
			"Alum" => "2.30 mod (Alum Lockpick)",
			"Golvern" => "2.35 mod (Golvern Lockpick)",
			"Kelyn" => "2.40 mod (Kelyn Lockpick)",
			"Vaalin" => "2.50 mod (Vaalin Lockpick)",
		}
		
		container_names = [ "Lockpick Container", "Lockpick Open", "Lockpick Close", "Broken Lockpick Container", "Broken Open", "Broken Close", "Wedge Container", "Wedge Open", "Wedge Close", "Calipers Container", "Calipers Open", "Calipers Close", "Scale Weapon Container", "Weapon Open", "Weapon Close", "Locksmith's Container", "Other Containers" ]
		rogue_only = [ "Wedge Container", "Wedge Open", "Wedge Close", "Calipers Container", "Calipers Open", "Calipers Close" ]
		container_names.reject!{ |name| rogue_only.include?(name) } if Stats.prof != "Rogue"
		
		other_names = [ "Max Lock", "Max Lock Roll", "Trap Roll", "Trap Check Count", "Lock Roll", "Vaalin Lock Roll", "Auto Deposit Silvers", "Bashing Weapon", "Scale Trap Weapon", "Remove Armor", "Gnomish Bracer", "Bracer Tier 2", "Bracer Override", "Use Calipers", "Use Loresinging", "Trash Boxes", "Keep Trying", "Run Silently", "Use Monster Bold", "Don't Show Messages", "Don't Show Commands" ]
		
		other_names.delete("Bashing Weapon") if Stats.prof != "Warrior"
		other_names.delete("Use Calipers") if Stats.prof != "Rogue"
		other_names.delete("Use Loresinging") if Stats.prof != "Bard"
		
		rogue_names = [ "Trick", ";rogues Lockpick", "Lock Buffer", "Calibrate Count", "Calibrate Auto", "Calibrate On Startup", "Auto Bundle Vials", "Auto Repair Bent Lockpicks" ]
		
		spell_names = [ "Use Lmaster Focus", "Light (205)", "Presence (402)", "Lock Pick Enhancement (403)", "Disarm Enhancement (404)", "Unlock (407)", "Unlock (407) Mana", "Disarm (408)", "Celerity (506)", "Rapid Fire (515)", "Self Control (613)", "Song of Luck (1006)", "Song of Tonis (1035)", "Percent Mana To Keep" ]
		
		spell_names.delete("Use Lmaster Focus") if Stats.prof != "Rogue"
		spell_names.delete("Lock Pick Enhancement (403)") if !Spell[403].known? && Stats.prof != "Rogue"
		spell_names.delete("Disarm Enhancement (404)") if !Spell[404].known? && Stats.prof != "Rogue"
		spell_names.reject!{ |name|
			if name =~ /\((\d+)\)/
				number = $1
				!Spell[number].known? && number != "403" && number != "404"
			else
				false
			end
		}
		
		spell_names.delete("Percent Mana To Keep") if spell_names.count == 1

		experience_names = [ "Use Vaalin When Fried", "Rest At Percent", "Pick At Percent" ]
		
		speech_names = [ "Ready", "Can't Open Box", "Scarab Found", "Scarab Safe" ]
		
		if !Spell[416].known?
			popping_names = []
		else
			popping_names = [ "Number Of 416 Casts", "Phase (704)", "Only Disarm Safe", "Pick Enruned" ]
		end
		popping_names.delete("Phase (704)") if !Spell[704].known?
		
		pool_names = [ "Max Level", "Minimum Tip Start", "Minimum Tip Interval", "Minimum Tip Floor", "Time To Wait", "Standard Wait", "Use 403 On Level", "Use 404 On Level", "Rest When Fried", "Picks On Level" ]	
		pool_names.delete("Use 403 On Level") if !Spell[403].known? && Stats.prof != "Rogue"
		pool_names.delete("Use 404 On Level") if !Spell[404].known? && Stats.prof != "Rogue"
		
		create_main_tab
		
		create_tab(@lockpick_names, @grids["Lockpicks Main"]) if @grids["Lockpicks Main"]
		create_tab(@repair_names, @grids["Repair Main"]) if @grids["Repair Main"]
		create_tab(container_names, @grids["Containers Main"]) if @grids["Containers Main"]
		create_tab(other_names, @grids["Other Main"]) if @grids["Other Main"]
		create_tab(rogue_names, @grids["Rogues Only Main"]) if @grids["Rogues Only Main"]
		create_tab(spell_names, @grids["Spells Main"]) if @grids["Spells Main"]
		create_tab(experience_names, @grids["Experience Main"]) if @grids["Experience Main"]
		create_tab(speech_names, @grids["Speech Main"]) if @grids["Speech Main"]
		create_tab(popping_names, @grids["Popping Main"]) if @grids["Popping Main"]
		create_tab(pool_names, @grids["Pool Main"]) if @grids["Pool Main"]
		
		@grids["Spells Main"].attach(Gtk::Label.new("You don't know any relevant spells."), 0, 0, 1, 1) if spell_names.count == 0
		@grids["Popping Main"].attach(Gtk::Label.new("You must know the spell Piercing Gaze (416) in order to use the Popping feature of this script."), 0, 0, 1, 1) if popping_names.count == 0
		
		if @grids["Repair Main"]
			@buttons["Copy"] = Gtk::Button.new("Copy")
			@grids["Repair Main"].attach(@buttons["Copy"], 2, 6, 1, 1)
			@buttons["Copy"].signal_connect("clicked"){ @lockpick_names.each{ |name| @entries["Repair #{name}"].text = @entries[name].text } }
		end
		
		@labels.each{ |name,label|
			if @required_settings.include?(name)
				label.override_color(:normal, Gdk::RGBA.new(255, 0, 0, 1.0))
			end
		}

		@check_boxes.each{ |box_name,checkbox|
			if @needed_values[box_name] == "Yes"
				checkbox.active = true
			else
				checkbox.active = false
			end
		}
		
		add_all_tooltips
		
		@windows["Settings"].add(@all_notebooks["Settings"])
		@windows["Settings"].show_all
	end
	
	def self.create_main_tab
		row = -1
		column = -1
		@non_settings_menus["Profiles"] = Gtk::ComboBoxText.new
		@all_characters.each{ |character| @non_settings_menus["Profiles"].append_text(character) }
		match_menu_item(@non_settings_menus["Profiles"], checkname)
		new_label = Gtk::Label.new("IMPORTANT: All settings in RED are required settings and MUST be filled out for the script to work properly. These settings will always be in red, even if they are filled out properly.\n\nAll other settings are optional.\n\nHover your mouse over each setting to see a tooltip for what that setting does.\n\nIt is recommended that you read the tooltip for each setting to be sure you fill out each setting properly.\n\nIMPORTANT: Having a Shimmering Trinket active might interfere with some features of this script (like the SCAN feature or if you're using a keyring for your lockpicks), so if you're having any issues try disabling your Shimmering Trinket first to see if this solves the issue.")
		new_label.set_line_wrap(true)
		label_grid = Gtk::Grid.new
		checkbox_grid = Gtk::Grid.new
		buttons_grid = Gtk::Grid.new
		label_grid.attach(new_label, 0, 0, 1, 1)
		@grids["Main Main"].attach(label_grid, 0, 0, 1, 1)
		@grids["Main Main"].attach(buttons_grid, 0, 2, 1, 1)
		buttons_grid.attach(@non_settings_menus["Profiles"], column += 1, row, 1, 1)
		buttons = [ "Save", "Load", "Defaults" ]
		buttons.push("Scan") if Stats.prof == "Rogue"
		buttons.each{ |name|
			@buttons[name] = Gtk::Button.new(name)
			buttons_grid.attach(@buttons[name], column += 1, row, 1, 1)
		}
		
		@buttons["Save"].signal_connect("clicked"){ save_settings("All") }
		@buttons["Load"].signal_connect("clicked"){ load_profile }
		@buttons["Defaults"].signal_connect("clicked"){ load_defaults }
		@buttons["Scan"].signal_connect("clicked"){ scan_lockpicks }
	end
	
	def self.create_tab(names, grid)
		row = -1
		column = 0
		names.each{ |name|
			if @all_spinbuttons.include?(name)
				number = @needed_values[name]
				if name == "Max Lock" || name == "Trap Roll"
					@adjustments[name] = Gtk::Adjustment.new(number, -500, 10000, 1, 10, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name =~ /^(Max Lock Roll|Lock Roll)$/
					@adjustments[name] = Gtk::Adjustment.new(number, 0, 100, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name == "Calibrate Count"
					@adjustments[name] = Gtk::Adjustment.new(number, 1, 10000, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name =~ /^(Trap Check Count|Number Of 416 Casts)$/
					@adjustments[name] = Gtk::Adjustment.new(number, 1, 10, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name == "Vaalin Lock Roll"
					@adjustments[name] = Gtk::Adjustment.new(number, 0, 101, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name == "Lock Buffer"
					@adjustments[name] = Gtk::Adjustment.new(number, 0, 1000, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name =~ /^(Unlock \(407\) Mana|Percent Mana To Keep)$/
					@adjustments[name] = Gtk::Adjustment.new(number, -1, 100, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name =~ /^(Max Level|Use 403 On Level|Use 404 On Level)$/
					@adjustments[name] = Gtk::Adjustment.new(number, 1, 200, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name =~ /^(Minimum Tip Start|Minimum Tip Interval|Minimum Tip Floor)$/
					@adjustments[name] = Gtk::Adjustment.new(number, 0, 100000, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				elsif name == "Time To Wait"
					@adjustments[name] = Gtk::Adjustment.new(number, 5, 300, 1, 1, 0)
					@spin_buttons[name] = Gtk::SpinButton.new(@adjustments[name], 1, 0)
				end
				widget = @spin_buttons[name]
			elsif @all_menus.include?(name)
				@menus[name] = Gtk::ComboBoxText.new
				if name == "Trick"
					items = [ "pick", "spin", "twist", "turn", "twirl", "toss", "bend", "flip", "random" ]
					items.each{ |item| @menus[name].append_text(item) }
				elsif name == "Unlock (407)"
					items = [ "Plate", "Vial", "All", "Never" ]
					items.each{ |item| @menus[name].append_text(item) }
				elsif name == "Rest At Percent"
					items = [ "Never", "Must Rest (100%)", "Numbed (90%)", "Becoming Numbed (75%)", "Muddled (62%)", "Clear (50%)", "Fresh And Clear (25%)", "Clear As A Bell (0%)" ]
					items.each{ |item| @menus[name].append_text(item) }
				elsif name == "Pick At Percent"
					items = [ "Always", "Must Rest (100%)", "Numbed (90%)", "Becoming Numbed (75%)", "Muddled (62%)", "Clear (50%)", "Fresh And Clear (25%)", "Clear As A Bell (0%)" ]
					items.each{ |item| @menus[name].append_text(item) }
				elsif name =~ /^(Lockpick Container|Broken Lockpick Container|Wedge Container|Calipers Container|Scale Weapon Container|Locksmith's Container)$/
					$tpick_worn_containers.each{ |item,_| @menus[name].append_text(item) }
				end
				widget = @menus[name]
				match_menu_item(widget, @needed_values[name])
			elsif @all_checkboxes.include?(name)
				if name =~ / Open| Close/
					@check_boxes[name] = Gtk::CheckButton.new(name)
				else
					@check_boxes[name] = Gtk::CheckButton.new("")
				end
				if name == "Use Lmaster Focus"
					@check_boxes[name].signal_connect('toggled'){
						if @check_boxes[name].active?
							@labels["Lock Pick Enhancement (403)"].text = "Lock Mastery (Picking)"
							@labels["Disarm Enhancement (404)"].text = "Lock Mastery (Disarming)"
						else
							@labels["Lock Pick Enhancement (403)"].text = "Lock Pick Enhancement (403)"
							@labels["Disarm Enhancement (404)"].text = "Disarm Enhancement (404)"
						end
					}
				end
				widget = @check_boxes[name]				
			else
				@entries[name] = Gtk::Entry.new
				@entries[name].text = @needed_values[name]
				widget = @entries[name]
			end
			if @lock_pick_hash.key?(name)
				@labels[name] = Gtk::Label.new("     #{@lock_pick_hash[name]}     ")
			elsif @repair_names.include?(name)
				temp = name.gsub("Repair ", "")
				@labels[name] = Gtk::Label.new("     #{temp}     ")
			else
				@labels[name] = Gtk::Label.new("     #{name}     ")
			end
			if (name =~ / Open| Close/) && (@all_checkboxes.include?(name))
				if name =~ / Open/
					grid.attach(widget, column, row += 1, 1, 1)
				else
					grid.attach(widget, column += 1, row, 1, 1)
					column -= 1
				end
			else
				@labels[name].halign = Gtk::Align::START
				grid.attach(@labels[name], column, row += 1, 1, 1)
				grid.attach(widget, column += 1, row, 1, 1)
				column -= 1
				if row >= 9
					row = -1
					column += 2
				end
			end
		}
	end
	
	def self.appraise_lockpick(name)
		@lockpick_info = nil
		put "lmas appraise my #{checkright}"
		wait_until{ @lockpick_info }
		if @lockpick_info != "NONE"
			precision = @lockpick_info[0]
			strength = @lockpick_info[1]
			@lockpick_found = true
			if precision =~ /^detrimental$/i
				@load_data["Detrimental"] += "#{name},"
			elsif precision =~ /^ineffectual$/i
				@load_data["Ineffectual"] += "#{name},"
			elsif precision =~ /^very inaccurate$/i
				@load_data["Copper"] += "#{name},"
			elsif precision =~ /^inaccurate$/i
				@load_data["Steel"] += "#{name},"
			elsif precision =~ /^somewhat inaccurate$/i
				@load_data["Gold"] += "#{name},"
			elsif precision =~ /^inefficient$/i
				@load_data["Silver"] += "#{name},"
			elsif precision =~ /^unreliable$/i
				@load_data["Mithril"] += "#{name},"
			elsif precision =~ /^below average$/i
				@load_data["Ora"] += "#{name},"
			elsif precision =~ /^average$/i
				@load_data["Glaes"] += "#{name},"
			elsif precision =~ /^above average$/i
				@load_data["Laje"] += "#{name},"
			elsif precision =~ /^somewhat accurate$/i
				@load_data["Mein"] += "#{name},"
			elsif precision =~ /^favorable$/i
				@load_data["Rolaren"] += "#{name},"
			elsif precision =~ /^advantageous$/i
				@load_data["Rolaren"] += "#{name},"
			elsif precision =~ /^accurate$/i
				@load_data["Accurate"] += "#{name},"
			elsif precision =~ /^highly accurate$/i
				if strength =~ /^incredibly strong$/i
					@load_data["Invar"] += "#{name},"
				else
					@load_data["Veniom"] += "#{name},"
				end
			elsif precision =~ /^excellent$/i
				if strength =~ /^astonishingly strong$/i
					@load_data["Golvern"] += "#{name},"
				else
					@load_data["Alum"] += "#{name},"
				end
			elsif precision =~ /^incredible$/i
				@load_data["Kelyn"] += "#{name},"
			elsif precision =~ /^unsurpassed$/i
				@load_data["Vaalin"] += "#{name},"
			else
				message(";#{@script_name}: I don't recognize the precision level of #{name}.\n\nPlease send the LMAS APPRAISE information of this lockpick to Dreaven.")
			end
		end
		until checkright.nil?
			waitrt?
			put "put my #{checkright} in ##{@container_lockpick.id}"
			sleep 0.3
		end
	end
	
	def self.scan_lockpicks
		@lockpick_names.each{ |name| @load_data[name] = "" }
		waitrt?
		put "stow right" if checkright
		put "stow left" if checkleft

		@lockpick_found = nil
		@container_lockpick = GameObj.inv.find{ |i| i.name == @load_data["Lockpick Container"] }
		if @container_lockpick.nil?
			message(";#{@script_name}: Could not find #{@load_data["Lockpick Container"]}, which you have listed as your 'Lockpick Container.'")
		else
			put "look in ##{@container_lockpick.id}"
			sleep 0.5
			@container_lockpick.contents.each{ |item|
				until checkright
					waitrt?
					put "get ##{item.id}"
					sleep 0.3
				end
				appraise_lockpick(item.name)
			}

			if @lockpick_found.nil?
				if @load_data["Lockpick Container"] =~ /vambrace/i
					command_to_use = "look in ##{@container_lockpick.id}"
				else
					command_to_use = "look on ##{@container_lockpick.id}"
				end
				@lockpick_container_contents = nil
				put "#{command_to_use}"
				wait_until{ @lockpick_container_contents }
				if @lockpick_container_contents && @lockpick_container_contents != "NONE"
					lockpick_container_contents_hash = Hash.new
					@lockpick_container_contents.each{ |i|
						lockpick_container_contents_hash[$2] = $1 if i =~ /exist\=\"(.*)\" noun\=\".*\"\>(.*)\<\/a\>/
					}
					lockpick_container_contents_hash.each{ |key,value|
						if value != @container_lockpick.id
							until checkright
								waitrt?
								put "get ##{value}"
								sleep 0.3
							end
							appraise_lockpick(key)
						end
					}
				end
			end
			@lockpick_names.each{ |name|
				@load_data[name].chop!
				@entries[name].text = @load_data[name]
			}
			message(";#{@script_name}: Finishing scanning your lockpicks.")
		end
	end
	
	def self.script_name=(value)
		@script_name = value
	end
	
	def self.variables=(value)
		@script_variables = value
	end
	
	def self.data_stats=(value)
		if @reset_all_stats
			@stats_data = {}
		else
			@stats_data = value
		end
	end
	
	def self.update_info_box=(needed_info)
		@all_messages.unshift(needed_info["Window Message"]) if needed_info["Window Message"]
		@all_messages.pop if @all_messages.count > 100
		@all_buffers["Messages"].text = @all_messages.join("\n\n")	
		all_box_stats = {}
		all_names = []
		needed_info["Window Message"] = nil if needed_info["Window Message"] =~ /Number of locks successfully opened/
		@box_info_labels.each{ |name|
			if needed_info[name]
				all_box_stats[name] = needed_info[name]
			else
				all_box_stats[name] = ""
			end
			all_names.push(name)
		}
		longest_name = all_names.map(&:length).max

		all_box_stats.each{ |name,value|
			if name == "Window Message"
				@labels[name].text = value
			else
				@labels[name].text = "#{name.ljust(longest_name)}  : #{value}"
			end
		}
	end
	
	before_dying{
		@windows["Settings"].close if @windows["Settings"]
		@windows["Information"].close if @windows["Information"] && ((@load_data["Keep Window Open"] == "No") || (@load_data["One & Done"] == "Yes"))
	}
	
	Thread.new{
		loop{
			wait_until{ $tpick_commands_set }
			@buttons["Start"].set_sensitive(false)
			@buttons["Stop"].set_sensitive(true)
			@non_settings_menus["Picking Mode"].set_sensitive(false)
			@non_settings_menus["Picking Options"].set_sensitive(false)
			@stats_data["Session Start Time"] = Time.now
			
			wait_until{ $tpick_commands_set.nil? }
			@buttons["Start"].set_sensitive(true)
			@buttons["Stop"].set_sensitive(false)
			@non_settings_menus["Picking Mode"].set_sensitive(true)
			@non_settings_menus["Picking Options"].set_sensitive(true)
			@current_session_picking += (Time.now - @stats_data["Session Start Time"])
		}
	}
	
	def self.watching
		status_tags
		while line = get
			sline = strip_xml(line)
			if line =~ /you see/
				@lockpick_container_contents = line.split(/ an? /)
			elsif sline =~ /There is nothing on/
				@lockpick_container_contents = "NONE"
			elsif sline =~ /It seems to have an? (.*) level of precision and (?:is|has) (.*)\.\s+(?:As far as|Judging)/
				@lockpick_info = []
				@lockpick_info.push($1)
				@lockpick_info.push($2)
			elsif sline =~ /That's not a lockpick!|Please rephrase that command\./
				@lockpick_info = "NONE"
			end
		end
	end
end

TpickMain.script_name = script.name
TpickMain.variables = script.vars

@all_load_data = TpickMain.load_the_data
@load_data = @all_load_data[checkname]
@load_data.each{ |setting_name,value| @load_data[setting_name] = @load_data[setting_name].to_i if (value.is_a?(Float)) }

@load_data["403"] = @load_data["Lock Pick Enhancement (403)"].dup
@load_data["404"] = @load_data["Disarm Enhancement (404)"].dup

@lockpick_names = [ "Detrimental", "Ineffectual", "Copper", "Steel", "Gold", "Silver", "Mithril", "Ora", "Glaes", "Laje", "Vultite", "Mein", "Rolaren", "Accurate", "Veniom", "Invar", "Alum", "Golvern", "Kelyn", "Vaalin" ]

#Stats Info Begin
new_old_stats = {
	"Scarab" => "scarab",
	"Needle" => "needle",
	"Jaws" => "jaws",
	"Sphere" => "sphere",
	"Crystal" => "crystal",
	"Scales" => "scales",
	"Sulphur" => "sulphur",
	"Cloud" => "cloud",
	"Acid Vial" => "acid_vial",
	"Springs" => "springs",
	"Fire Vial" => "fire_vial",
	"Spores" => "spores",
	"Plate" => "plate",
	"Glyph" => "glyph",
	"Rods" => "rods",
	"Boomer" => "boomer",
	"No Trap" => "no_trap",
	"Locks Opened Since Last Pick Broke" => "number_of_locks_opened_since_last_broken_pick",
	"Pool Boxes Picked" => "number_of_total_boxes_picked_pool_picking",
	"Pool Tips Silvers" => "total_silvers_earned_from_pool_picking",
	"Pool Scarabs Received" => "total_scarabs_received_pool_picking",
	"Pool Time Spent Picking" => "total_time_spent_pool_picking",
	"Pool Time Spent Waiting" => "time_to_subtract_from_overall_actual_picking_time",
	"Non-Pool Boxes Picked" => "total_boxes_picked",
	"Non-Pool Time Spent Picking" => "total_time_spent_picking_boxes",
	"Opened/Broke For Each Pick" => "number_of_current_uses_for_lockpicks",
	"Loot Total" => nil,
	"Boxes Looted" => nil,
}

@stats_data = {}
@stats_data["Loot Session"] = {}
@stats_data["Session Start Time"] = Time.now
@stats_data["Session Boxes Picked"] = 0
@loaded_stats_data = TpickMain.load_the_stats
data_save = nil
new_old_stats.each{ |new,old|
	if new == "Loot Total"
		if @load_data["Track Loot"] == "No"
			@loaded_stats_data[new] = {}
		else
			@stats_data[new] = @loaded_stats_data[new] ? @loaded_stats_data[new] : {}
		end
	elsif new =~ /^(Opened\/Broke For Each Pick)$/
		@stats_data[new] = @loaded_stats_data[new] ? @loaded_stats_data[new] : {}
	else
		data_save = true if @loaded_stats_data[new].nil?
		@stats_data[new] = @loaded_stats_data[new] ? @loaded_stats_data[new].to_i : 0
	end
	
	if CharSettings[old]
		data_save = true
		@stats_data[new] = CharSettings[old]
		CharSettings[old] = nil
	end
	
	@stats_data[new] = @stats_data[new].transform_values(&:to_i) if new =~ /^(Loot Total|Loot Session|Opened\/Broke For Each Pick)$/
}

CharSettings['total_trap_count'] = nil if CharSettings['total_trap_count']
TpickMain.data_stats = @stats_data
TpickMain.save_the_stats if data_save
#Stats Info End
#####

def tpick_silent(flag, message)
	#If flag is true then always show message.
	#If flag is nil then only show message if @load_data["Run Silently"] == "No"
	flag = true if @load_data["Run Silently"] == "No"
	if flag
		if message !~ /Putty remaining/
			@tpick_vars["Window Message"] = message
			update_box_for_window
		end
		if @load_data["Don't Show Messages"] == "No"
			_respond ""
			if @load_data["Use Monster Bold"] == "Yes"
				_respond "#{monsterbold_start}########################################\n#{message}\n#########################################{monsterbold_end}"
			else
				_respond "########################################\n#{message}\n########################################"
			end
			_respond ""
		end
	end
end

@settings_pick_names = {}
@all_repair_names = {}
@all_pick_ids = {}
@all_repair_ids = {}

lockpick_names = [ "Detrimental", "Ineffectual", "Copper", "Steel", "Gold", "Silver", "Mithril", "Ora", "Glaes", "Laje", "Vultite", "Mein", "Rolaren", "Accurate", "Veniom", "Invar", "Alum", "Golvern", "Kelyn", "Vaalin" ]
repair_names = [ "Repair Copper", "Repair Brass", "Repair Steel", "Repair Gold", "Repair Silver", "Repair Mithril", "Repair Ora", "Repair Laje", "Repair Vultite", "Repair Rolaren", "Repair Veniom", "Repair Invar", "Repair Alum", "Repair Golvern", "Repair Kelyn", "Repair Vaalin" ]

lockpick_names.each{ |name|
	@all_pick_ids[name] = []
	@settings_pick_names[name] = @load_data[name].split(",")
}

repair_names.each{ |name|
	@all_repair_ids[name] = []
	@all_repair_names[name] = @load_data[name].split(",")
}

#BEGIN Variables from ;rogues
@rogue_lockpicks_to_break_and_repair.each{ |i| @tpick_vars["Lockpicks To Break For Rogue"] << i.dup } if @rogue_lockpicks_to_break_and_repair.count > 0
@tpick_finished_with_current_rogue_task = nil
#END Variables from ;rogues

@tpick_vars = {}
@tpick_vars["Starting Room"] = Room.current.id
@tpick_vars["Check Ground Again"] = true
@tpick_vars["All Box Types"] = "(strongbox|box|chest|trunk|coffer|case)"
@tpick_vars["Armor To Remove"] = nil
@tpick_vars["Armor To Remove"] = @load_data["Remove Armor"] if @load_data["Remove Armor"].count("^ ") > 0
@tpick_vars["All Scarab IDs"] = []
@tpick_vars["Lockpicks To Break For Rogue"] = []
@tpick_vars["Calibrate Auto Amount"] = @load_data["Calibrate Count"] if @load_data["Calibrate Auto"] == "Yes"
@tpick_vars["Box Opened"] = true
@tpick_vars["Box IDs Already Picked"] = Array.new
@tpick_vars["Repair Names"] = repair_names.dup

$tpick_exit_tpick_immediately = nil
$tpick_stop_immediately = nil

@tpick_vars["Pick Mod"] = [ 0.80, 0.90, 1.00, 1.10, 1.20, 1.30, 1.45, 1.55, 1.60, 1.75, 1.80, 1.85, 1.90, 2.00, 2.20, 2.25, 2.30, 2.35, 2.40, 2.50 ]
@tpick_vars["Lock Difficulties"] = {
	"a primitive lock" => 35,
	"a rudimentary lock" => 75,
	"an extremely easy lock" => 115,
	"a very easy lock" => 155,
	"an easy lock" => 195,
	"a very basic lock" => 235,
	"a fairly easy lock" => 275,
	"a simple lock" => 315,
	"a fairly simple lock" => 355,
	"a fairly plain lock" => 395,
	"a moderately well-crafted lock" => 435,
	"a well-crafted lock" => 475,
	"a tricky lock" => 515,
	"a somewhat difficult lock" => 555,
	"a moderately difficult lock" => 595,
	"a very well-crafted lock" => 635,
	"a difficult lock" => 675,
	"an extremely well-crafted lock" => 715,
	"a very difficult lock" => 755,
	"a fairly complicated lock" => 795,
	"an intricate lock" => 835,
	"an amazingly well-crafted lock" => 875,
	"a very complex lock" => 915,
	"an impressively complicated lock" => 955,
	"an amazingly intricate lock" => 995,
	"an extremely difficult lock" => 1035,
	"an extremely complex lock" => 1075,
	"a masterfully well-crafted lock" => 1115,
	"an amazingly complicated lock" => 1155,
	"an astoundingly complex lock" => 1195,
	"an incredibly intricate lock" => 1235,
	"an absurdly well-crafted lock" => 1275,
	"an exceedingly complex lock" => 1315,
	"an absurdly difficult lock" => 1355,
	"an unbelievably complicated lock" => 1395,
	"a masterfully intricate lock" => 1435,
	"an absurdly complex lock" => 1475,
	"an impossibly complex lock" => 1515,
	"You cannot even estimate its difficulty beyond being out of your league" => "IMPOSSIBLE",
}
@tpick_vars["Dex Bonus"] = Stats.enhanced_dex[1]
@tpick_vars["Pick Skill"] = (Skills.to_bonus(Skills.pickinglocks) + @tpick_vars["Dex Bonus"])
@tpick_vars["Pick Lore"] = [(Stats.level / 2) + (Skills.to_bonus(Skills.pickinglocks) / 10) + (@tpick_vars["Dex Bonus"]) + (Spells.minorelemental / 4), Skills.to_bonus(Skills.pickinglocks)].min
@tpick_vars["Disarm Skill"] = (@tpick_vars["Dex Bonus"] + Skills.to_bonus(Skills.disarmingtraps))
if Spell[404].known?
	@tpick_vars["Disarm Lore"] = [(Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + @tpick_vars["Dex Bonus"] + (Spells.minorelemental / 4), Skills.to_bonus(Skills.disarmingtraps)].min
else
	@tpick_vars["Disarm Lore"] = 0
end

before_dying {
	@stats_data["Pool Time Spent Picking"] += (Time.now - @tpick_vars["Worker Start Time"]) if @tpick_vars["Worker Start Time"]
	DownstreamHook.remove("#{script.name}_check_locksmiths_container")
	DownstreamHook.remove("#{script.name}_check_for_mithril_or_enruned")
	if script.vars.any?{ |i| i !~ /buy|repair|setup/i }
		containers_open_or_close = []
		containers_need_open_close = { 
			@load_data["Lockpick Container"] => @load_data["Lockpick Close"],
			@load_data["Broken Lockpick Container"] => @load_data["Broken Close"],
			@load_data["Wedge Container"] => @load_data["Wedge Close"],
			@load_data["Calipers Container"] => @load_data["Calipers Close"],
			@load_data["Scale Weapon Container"] => @load_data["Weapon Close"],
		}
		containers_need_open_close.each{ |name,option| containers_open_or_close.push(name) if (name.count("^ ") > 0) && (option == "Yes") && (!containers_open_or_close.include?(name)) }
		if containers_open_or_close.count > 0
			tpick_silent(nil, "I will close your containers as soon as you're out of RT then I will exit.") if checkrt > 0
			wait_until { checkrt == 0 }
			containers_open_or_close.each{ |i|
				container_to_close = GameObj.inv.find{ |t| t.name == i }
				fput "close ##{container_to_close.id}" if container_to_close
			}
		end
		if @tpick_vars["Armor Removed"] && @tpick_vars["Armor To Remove"]
			tpick_silent(nil, "I will equip your armor as soon as you're out of RT then I will exit.") if checkrt > 0
			wait_until { checkrt == 0 }
			tpick_put_stuff_away
			fput "get #{@tpick_vars["Armor To Remove"]}"
			wait_until { checkright }
			fput "wear #{@tpick_vars["Armor To Remove"]}"
		end
	end
	TpickMain.data_stats = @stats_data
	TpickMain.save_the_stats
	_respond "\n#{monsterbold_start}########################################\n#{@tpick_vars["Error Message"]}\n#########################################{monsterbold_end}\n" if @tpick_vars["Error Message"]
	_respond "\n#{monsterbold_start}########################################\n#{@tpick_vars["Crash Report"]}\n#########################################{monsterbold_end}\n" if @tpick_vars["Crash Report"]
}

def do_relock_boxes
	no_vaalin_picks
	waitrt?
	tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
	fput "get ##{@all_pick_ids["Vaalin"].first}"
	fput "close ##{@tpick_vars["Current Box"].id}"
	fput "lm relock ##{@tpick_vars["Current Box"].id}"
	tpick_drop_box if @tpick_vars["Picking Mode"] == "ground"
	tpick_put_stuff_away
end

def garbage_check
	waitrt?
	if @load_data["Trash Boxes"] == "Yes"
		if checkroom =~ /table|booth/i
			tpick_drop_box if @tpick_vars["Picking Mode"] == "solo"
			fput "clean table"
		else
			waitrt?
			throw_away = true
			if @tpick_vars["No Garbage In Room"]
				if @tpick_vars["No Garbage In Room"] == Room.current.id
					throw_away = nil
				else
					@tpick_vars["No Garbage In Room"] = nil
				end
			end
			if throw_away
				tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
				result = dothistimeout "trash ##{@tpick_vars["Current Box"].id}", 2, /You need to find|As you toss/
				if result =~ /You need to find/
					@tpick_vars["No Garbage In Room"] = Room.current.id
					tpick_drop_box if @tpick_vars["Picking Mode"] == "solo"
				elsif result =~ /As you toss/
					@tpick_vars["No Garbage In Room"] = nil
				elsif result.nil?
					tpick_drop_box if @tpick_vars["Picking Mode"] == "solo"
				end
			end
		end
	else
		@tpick_stow_current_box = true
		tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
		tpick_put_stuff_away
	end
	waitrt?
end

def cast_407
	if @load_data["Unlock (407) Mana"] > -1
		@tpick_vars["Stop Using 407"] = nil
		if checkmana < maxmana * (@load_data["Unlock (407) Mana"] / 100.0)
			tpick_silent(nil, "According to your 407 settings your mana is too low to continue trying to open this box with 407.")
			@tpick_vars["Stop Using 407"] = true
		end
	end
	if @tpick_vars["Current Box"].name =~ /enruned|mithril/i || @tpick_vars["Box Is Enruned/Mithril"] || @load_data["Unlock (407)"] == "Never" || @tpick_vars["Stop Using 407"]
		tpick_silent(true, "Can't open this plated box because it is mithril or enruned or because your settings are set to not use 407 to open boxes.") unless @tpick_vars["Stop Using 407"]
		if @tpick_vars["Picking Mode"] == "solo"
			where_to_stow_box
			tpick_put_stuff_away
			sleep 0.1
		elsif @tpick_vars["Picking Mode"] == "other"
			tpick_say("Can't Open Box")
			open_others
		elsif @tpick_vars["Picking Mode"] == "ground"
			tpick_drop_box
			@tpick_vars["Can't Open Plated Box Count"] += 1
			@tpick_vars["Box Opened"] = nil
		elsif @tpick_vars["Picking Mode"] == "worker"
			@tpick_vars["Give Up On Box"] = true
		end
	else
		tpick_cast_spells (515) if @tpick_vars["Use 515"]
		if checkmana < 20
			tpick_silent(true, "Waiting for mana.")
			wait_until { checkmana >= 20 }
		end
		unless @load_data["403"] =~ /never/i
			result = Lich::Util.quiet_command_xml("spell active", /You currently have the following active effects/)
			tpick_cast_spells (403)
		end
		tpick_prep_spell(407, "Unlock")
		result = dothistimeout "cast ##{@tpick_vars["Current Box"].id}", 4, /vibrates slightly but nothing else happens.|(suddenly flies open.|is already open.)/i
		if result =~ /(suddenly flies open.|is already open.)/i
			if @tpick_vars["Picking Mode"] == "solo"
				open_solo
			elsif @tpick_vars["Picking Mode"] == "other"
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				tpick_drop_box
			elsif @tpick_vars["Picking Mode"] == "worker"
				nil
			end
		elsif result =~ /vibrates slightly but nothing else happens./i || result.nil?
			cast_407
		end
	end
end

def calibrate_calipers
	if $rogue_do_not_calibrate_calipers.nil?
		tpick_silent(nil, "Calibrating calipers.")
		3.times{
			waitrt?
			unless GameObj.right_hand.name =~ /calipers/ || GameObj.left_hand.name =~ /calipers/
				fput "get my calipers"
				sleep 0.2
			end
		}
		if GameObj.right_hand.name !~ /calipers/ && GameObj.left_hand.name !~ /calipers/
			tpick_silent(true, "Couldn't find your calipers.\nTo fix the below issues enter ;tpick setup\nMake sure your calipers container is filled out properly and that you have calipers.\nIf you don't want to use calipers then go to the 'Other' tab and uncheck the box for the setting 'Use Calipers.'")
			exit
		end
		result = dothistimeout "lmas calibrate my calipers", 4, /You\'re good\, but you\'re not that good\.|You should leave them alone.|Roundtime/i
		if result =~ /You\'re good\, but you\'re not that good\.|You should leave them alone./i
			tpick_put_stuff_away
		elsif result =~ /Roundtime/i
			waitrt?
			calibrate_calipers if @tpick_vars["Can Use Calipers"]
		elsif result.nil?
			calibrate_calipers
		end
	end
end

def start_ground
	total_boxes_count
	GameObj.loot.each{ |box|
		exit if $tpick_exit_tpick_immediately
		break if $tpick_stop_immediately
		if box.type =~ /box/ && !@tpick_vars["Box IDs Already Picked"].include?(box.id)
			update_all_stats
			@tpick_vars["Box IDs Already Picked"].push(box.id) unless @tpick_vars["Box IDs Already Picked"].include?(box.id)
			@tpick_vars["Box Opened"] = true
			update_box_for_window
			tpick_stop_403_404
			stuff_to_do
			waitrt?
			@tpick_vars["Box Was Not Locked"] = nil
			@tpick_vars["Start Time"] = Time.now
			start_values_nilled
			@tpick_vars["Current Box"] = box
			@tpick_vars["Manual Trap Checks Remaining"] = @load_data["Trap Check Count"].dup
			if @tpick_vars["Pop Boxes"]
				pop_boxes_begin(check_mithril_or_enruned)
			elsif @tpick_vars["Bash Open Boxes"]
				if @tpick_vars["Disarm Only"]
					if (@tpick_vars["Gnomish Bracers"]) && (@load_data["Bracer Tier 2"] == "Yes")
						gnomish_bracers_trap_check
					else
						manually_disarm_trap
					end
				else
					bash_the_box_open
				end
			else
				if (@tpick_vars["Gnomish Bracers"]) && (@load_data["Bracer Tier 2"] == "Yes")
					gnomish_bracers_trap_check
				else
					manually_disarm_trap
				end
			end
			@tpick_vars["Update Information"] = true
			total_boxes_picked_math
			tpick_drop_box
			if @tpick_vars["Ground Loot"]
				encumbrance_check if @load_data["Auto Deposit Silvers"].count("^ ") > 0
				if (@tpick_vars["Bash Open Boxes"]) && (@tpick_vars["Box Was Not Locked"].nil?)
					GameObj.loot.each{ |item|
						@tpick_vars["Current Item"] = item
						tpick_gather_the_loot
					}
					update_all_stats
				elsif (@tpick_vars["Box Opened"] = true) || (@tpick_vars["Box Was Not Locked"])
					waitrt?
					tpick_cast_spells (506) if @tpick_vars["Use 506"]
					tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
					fput "open ##{@tpick_vars["Current Box"].id}" unless @tpick_vars["Pop Boxes"]
					(dothistimeout "look in ##{box.id}", 10, /In .*? you see|In the .*\:|There is nothing in/i) if box.contents.nil?
					box.contents.each{ |item|
						@tpick_vars["Current Item"] = item
						tpick_gather_the_loot
					}
					update_all_stats
					if @tpick_vars["Relock Boxes"]
						do_relock_boxes
					end
					garbage_check
				end
				@stats_data["Boxes Looted"] += 1
				update_all_stats
			else
				if @tpick_vars["Pop Boxes"]
					nil
				else
					fput "open ##{@tpick_vars["Current Box"].id}" if (@tpick_vars["Box Opened"] = true) && (@tpick_vars["Disarm Only"].nil?)
				end
			end
			tpick_put_stuff_away
		end
	}
	if $tpick_stop_immediately.nil?
		if @tpick_vars["Check Ground Again"]
			@tpick_vars["Check Ground Again"] = nil
			tpick_silent(true, "Checking for boxes I might have missed.")
			@tpick_vars["Box Math"] = nil
			start_ground
		else
			tpick_silent(true, "All done!")
			tpick_silent(true, "Couldn't open #{@tpick_vars["Can't Open Plated Box Count"]} box(es), which are still on the ground.") if @tpick_vars["Can't Open Plated Box Count"] > 0
		end
	end
end

def wedge_lock
	waitrt?
	tpick_get_box if @tpick_vars["Picking Mode"] == "ground" && checkright.nil?
	if Stats.prof == 'Rogue'
		3.times{
			waitrt?
			unless GameObj.right_hand.name =~ /wedge/ || GameObj.left_hand.name =~ /wedge/
				fput "get my wedge"
				sleep 0.2
			end
		}
	end
	if GameObj.right_hand.name !~ /wedge/ && GameObj.left_hand.name !~ /wedge/
		if @tpick_vars["Use A Wedge"]
			tpick_silent(true, "Currently working on a ;rogues task for using a wedge but you appear to be out of wedges.\n;tpick will now exit and ;rogues will create more wedges then start ;tpick again.")
			exit
		else
			if (@load_data["Unlock (407)"] == "Never") || (!Spell[407].known?)
				tpick_silent(true,  "Couldn't open this box.")
				if @tpick_vars["Picking Mode"] == "other"
					tpick_say("Can't Open Box")
					open_others
				elsif @tpick_vars["Picking Mode"] == "ground"
					@tpick_vars["Box Opened"] = nil
				elsif @tpick_vars["Picking Mode"] == "solo"
					where_to_stow_box
					tpick_put_stuff_away
					sleep 0.1
				elsif @tpick_vars["Picking Mode"] == "worker"
					@tpick_vars["Give Up On Box"] = true
				end
			else
				if Stats.prof == 'Rogue'
					tpick_silent(nil, "Couldn't find any wedges, going to try popping this box.")
				else
					tpick_silent(nil, "Going to try popping this box.")
				end
				cast_407
			end
		end
	else
		result = dothistimeout "lmaster wedge ##{@tpick_vars["Current Box"].id}", 3, /What do you expect to wedge it with|(suddenly splits away from the casing|Why bother)|Roundtime/i
		if result =~ /What do you expect to wedge it with/i
			tpick_put_stuff_away
			wedge_lock
		elsif result =~ /(suddenly splits away from the casing|Why bother)/i
			tpick_put_stuff_away
			open_solo if @tpick_vars["Picking Mode"] == "solo"
			open_others if @tpick_vars["Picking Mode"] == "other"
			tpick_drop_box if @tpick_vars["Picking Mode"] == "ground"
		elsif result =~ /Roundtime/i || result.nil?
			wedge_lock
		end
	end
end

def open_others
	@tpick_vars["Update Information"] = true
	total_boxes_picked_math
	waitrt?
	fput "give ##{@tpick_vars["Current Box"].id} to #{@tpick_vars["Customer"]}"
	waitfor "has accepted your offer" if checkright != nil
	start_others if $tpick_stop_immediately.nil?
end

def open_solo
	@tpick_vars["Update Information"] = true
	total_boxes_picked_math
	waitrt?
	tpick_cast_spells (506) if @tpick_vars["Use 506"]
	tpick_cast_spells (1035) if @tpick_vars["Use 1035"]	
	fput "open ##{@tpick_vars["Current Box"].id}" unless @tpick_vars["Pop Boxes"]
	lootbox = GameObj.right_hand
	(dothistimeout "look in my #{lootbox}", 10, /In .*? you see|In the .*\:|There is nothing in/) if lootbox.contents.nil?
	waitrt?
	fput "swap"
	lootbox.contents.each{ |item|
		@tpick_vars["Current Item"] = item
		tpick_gather_the_loot
	}
	@stats_data["Boxes Looted"] += 1
	update_all_stats
	do_relock_boxes if @tpick_vars["Relock Boxes"]
	garbage_check
	tpick_put_stuff_away
	sleep 0.1
end

def next_pick
	@tpick_vars["Before Needed Pick"] = @tpick_vars["Needed Pick"]
	@tpick_vars["Before Pick"] = @tpick_vars["Recommended Pick"]
	if @tpick_vars["Recommended Pick"] == "Detrimental"
		@tpick_vars["Needed Pick"] = @load_data["Ineffectual"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Ineffectual"].first
		@tpick_vars["Recommended Pick"] = "Ineffectual"
	elsif @tpick_vars["Recommended Pick"] == "Ineffectual"
		@tpick_vars["Needed Pick"] = @load_data["Copper"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Copper"].first
		@tpick_vars["Recommended Pick"] = "Copper"
	elsif @tpick_vars["Recommended Pick"] == "Copper"
		@tpick_vars["Needed Pick"] = @load_data["Steel"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Steel"].first
		@tpick_vars["Recommended Pick"] = "Steel"
	elsif @tpick_vars["Recommended Pick"] == "Steel"
		@tpick_vars["Needed Pick"] = @load_data["Gold"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Gold"].first
		@tpick_vars["Recommended Pick"] = "Gold"
	elsif @tpick_vars["Recommended Pick"] == "Gold"
		@tpick_vars["Needed Pick"] = @load_data["Silver"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Silver"].first
		@tpick_vars["Recommended Pick"] = "Silver"
	elsif @tpick_vars["Recommended Pick"] == "Silver"
		@tpick_vars["Needed Pick"] = @load_data["Mithril"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Mithril"].first
		@tpick_vars["Recommended Pick"] = "Mithril"
	elsif @tpick_vars["Recommended Pick"] == "Mithril"
		@tpick_vars["Needed Pick"] = @load_data["Ora"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Ora"].first
		@tpick_vars["Recommended Pick"] = "Ora"
	elsif @tpick_vars["Recommended Pick"] == "Ora"
		@tpick_vars["Needed Pick"] = @load_data["Glaes"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Glaes"].first
		@tpick_vars["Recommended Pick"] = "Glaes"
	elsif @tpick_vars["Recommended Pick"] == "Glaes"
		@tpick_vars["Needed Pick"] = @load_data["Laje"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Laje"].first
		@tpick_vars["Recommended Pick"] = "Laje"
	elsif @tpick_vars["Recommended Pick"] == "Laje"
		@tpick_vars["Needed Pick"] = @load_data["Vultite"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Vultite"].first
		@tpick_vars["Recommended Pick"] = "Vultite"
	elsif @tpick_vars["Recommended Pick"] == "Vultite"
		@tpick_vars["Needed Pick"] = @load_data["Mein"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Mein"].first
		@tpick_vars["Recommended Pick"] = "Mein"
	elsif @tpick_vars["Recommended Pick"] == "Mein"
		@tpick_vars["Needed Pick"] = @load_data["Rolaren"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Rolaren"].first
		@tpick_vars["Recommended Pick"] = "Rolaren"
	elsif @tpick_vars["Recommended Pick"] == "Rolaren"
		@tpick_vars["Needed Pick"] = @load_data["Accurate"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Accurate"].first
		@tpick_vars["Recommended Pick"] = "Accurate"
	elsif @tpick_vars["Recommended Pick"] == "Accurate"
		@tpick_vars["Needed Pick"] = @load_data["Veniom"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Veniom"].first
		@tpick_vars["Recommended Pick"] = "Veniom"
	elsif @tpick_vars["Recommended Pick"] == "Veniom"
		@tpick_vars["Needed Pick"] = @load_data["Invar"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Invar"].first
		@tpick_vars["Recommended Pick"] = "Invar"
	elsif @tpick_vars["Recommended Pick"] == "Invar"
		@tpick_vars["Needed Pick"] = @load_data["Alum"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Alum"].first
		@tpick_vars["Recommended Pick"] = "Alum"
	elsif @tpick_vars["Recommended Pick"] == "Alum"
		@tpick_vars["Needed Pick"] = @load_data["Golvern"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Golvern"].first
		@tpick_vars["Recommended Pick"] = "Golvern"
	elsif @tpick_vars["Recommended Pick"] == "Golvern"
		@tpick_vars["Needed Pick"] = @load_data["Kelyn"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Kelyn"].first
		@tpick_vars["Recommended Pick"] = "Kelyn"
	elsif @tpick_vars["Recommended Pick"] == "Kelyn"
		@tpick_vars["Needed Pick"] = @load_data["Vaalin"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Vaalin"].first
		@tpick_vars["Recommended Pick"] = "Vaalin"
	elsif @tpick_vars["Recommended Pick"] == "Vaalin" && @tpick_vars["Roll Amount"] != 100
		@tpick_vars["403 Needed"] = "yes" unless @load_data["403"] =~ /never/i
		@tpick_vars["Needed Pick"] = @load_data["Vaalin"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Vaalin"].first
		@tpick_vars["Recommended Pick"] = "Vaalin"
	elsif @tpick_vars["Recommended Pick"] == "Vaalin" && @tpick_vars["Roll Amount"] == 100
		@tpick_vars["Needed Pick"] = "wedge"
	end
	no_vaalin_picks
	if @tpick_vars["Needed Pick ID"].nil?
		if @tpick_vars["Recommended Pick"] == "Vaalin"
			tpick_silent(true, "ALL OF YOUR VAALIN LOCKPICKS ARE BROKEN. YOU REALLY SHOULD HAVE AT LEAST 1 WORKING VAALIN LOCKPICK WHEN RUNNING THIS SCRIPT.")
			exit
		else
			tpick_silent(true, "All of your #{@tpick_vars["Recommended Pick"]} lockpicks seem to be broken or you don't have any lockpicks of that type, trying a higher tier lockpick.")
			next_pick
		end
	elsif @tpick_vars["Before Needed Pick"] == @tpick_vars["Needed Pick"] && @tpick_vars["Recommended Pick"] != "Vaalin"
		next_pick
	else
		nextpick2
	end
end

def no_vaalin_picks
	if (@all_pick_ids["Vaalin"].first.nil? || @all_pick_ids["Vaalin"].count == 0) && (@tpick_vars["Picking Mode"])
		@tpick_vars["Error Message"] = "I could not find any of your Vaalin Lockpicks. You need at least 1 Vaalin Lockpick (any lockpick you enter into the 'Vaalin Lockpick' setting) for this script to run correctly.\n\nCheck ;tpick setup to be sure 'Vaalin Lockpick' and 'Lockpick Container' are filled out correctly and be sure you have your Vaalin Lockpick in your Lockpick container.\n\nIt is also possible that all of your Vaalin lockpicks are broken, you should repair or replace them in that case."
		exit
	end
end

def plate_trap_disarm
	if @rogue_current_task == "Wedge open boxes" && @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker"
		tpick_silent(true, "Working on a ;rogues task to use wedges so I'm going to use a wedge on this box.")
		@tpick_vars["Use A Wedge"] = true
		wedge_lock
	else
		if @load_data["Unlock (407)"] == "Vial" && @tpick_vars["Current Box"].name !~ /enruned|mithril/i && @tpick_vars["Box Is Enruned/Mithril"].nil?
			tpick_silent(nil, "According to your settings you want to use 407 on non-enruned/mithril plated boxes.")
			cast_407
		else
			tpick_silent(nil, "Disarming trap.")
			waitrt?
			tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
			tpick_cast_spells (506) if @tpick_vars["Use 506"]
			if @tpick_vars["Always Use Wedge"]
				wedge_lock
			else
				tpick_cast_spells (404) if @tpick_vars["Need 404"]
				tpick_cast_spells (506) if @tpick_vars["Use 506"]
				result = dothistimeout "disarm ##{@tpick_vars["Current Box"].id}", 3, /You try to pour .* onto the .*\, but it just won\'t pour\!|the metal plate covering the lock begins to melt away|but it appears to have been melted through|Gonna chew through it|The darn thing is built too tightly|You still have a good enough picture of the trap in your mind/i
				if result =~ /the metal plate covering the lock begins to melt away|but it appears to have been melted through/i
					measure_lock
				elsif result =~ /Gonna chew through it/i
					tpick_silent(nil, "No vials found bundled in your locksmith's container, going to look for loose vials in your locksmith's container.")
					get_vials_and_stuff
				elsif result =~ /The darn thing is built too tightly|You still have a good enough picture of the trap in your mind/
					plate_trap_disarm
				elsif result =~ /You try to pour .* onto the .*\, but it just won\'t pour\!/
					tpick_silent(true, "THIS IS A BUG WITH THE GAME: IT IS TRYING TO POUR YOUR LOCKSMITH'S CONTAINER ON THE BOX. Looking for loose vials in your locksmith's container.")
					get_vials_and_stuff
				elsif result.nil?
					plate_trap_disarm
				end
			end
		end
	end
end

def measure_lock
	@tpick_vars["Always Use Vaalin"] = nil if $rogue_need_to_measure_boxes
	stuff_to_do if @tpick_vars["Picking Mode"] == "solo"
	waitrt?
	tpick_cast_spells (506) if @tpick_vars["Use 506"]
	tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
	@tpick_vars["Recommended Pick"] = nil
	if @load_data["Use 403 On Level"] != 200
		if @tpick_vars["Critter Level"].nil?
			tpick_silent(nil, "Critter level unknown, using 403 based on your settings.")
			@tpick_vars["403 Needed"] = "yes"
		else
			if @load_data["Use 403 On Level"] <= @tpick_vars["Critter Level"]
				tpick_silent(nil, "Critter level is #{@tpick_vars["Critter Level"]}, using 403 based on your settings.")
				@tpick_vars["403 Needed"] = "yes"
			end
		end
	end
	@tpick_vars["Use A Wedge"] = nil
	if @rogue_current_task == "Wedge open boxes" && @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker"
		required_plated_boxes = 0
		fput "gld"
		while line = get
			if line =~ /The Training Administrator told you to wedge open some boxes\./
				while line = get
					if line =~ /At least (\d+) more should have a plated lock or fused tumblers\, or be out of your league with a pick\./
						required_plated_boxes = $1.to_i
					elsif line =~ /You have (.*) repetitions? remaining (?:for|to complete) this task\./
						if $1 == "no"
							total_reps_remaining = 0
						else
							total_reps_remaining = $1.to_i
						end
						break
					end
				end
				break
			end
		end
		if @tpick_vars["Current Trap Type"] != "Scales"
			if required_plated_boxes == total_reps_remaining
				tpick_silent(true, "Either no more plated boxes or only plated boxes are required for your task.\nTherefore I am not using a wedge on this box.")
				@tpick_vars["Use A Wedge"] = nil
			elsif required_plated_boxes != total_reps_remaining || required_plated_boxes == 0
				tpick_silent(true, "Non-plated boxes are required to get a rep for your current task.\nTherefore I am using a wedge on this box.")
				@tpick_vars["Use A Wedge"] = true
			end
		end
	end
	if @tpick_vars["Use A Wedge"]
		wedge_lock
	elsif @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @rogue_current_task == "Repair broken lockpicks"
		tpick_silent(true, "Trying to break a lockpick.")
		@tpick_vars["Always Use Vaalin"] = nil
		if @tpick_vars["Lockpicks To Break For Rogue"].count == 0
			@tpick_finished_with_current_rogue_task = true
			exit
		else
			until checkright
				break if @tpick_vars["Lockpicks To Break For Rogue"].count == 0
				waitrt?
				fput "get ##{@tpick_vars["Lockpicks To Break For Rogue"].first}"
				sleep 0.2
			end
		end
		pick_3
	elsif @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @tpick_vars["True Lock Difficulty"].nil? && @load_data[";rogues Lockpick"].count("^ ") > 0 && @rogue_current_task !~ /Measure then pick tough boxes|Calibrate calipers in the field|Gather trap components|Melt open plated boxes/
		if $rogue_change_needed_lockpick
			all_lockpicks = [ "copper", "steel", "gold", "silver", "mithril", "ora", "glaes", "laje", "vultite", "rolaren", "veniom", "invar", "alum", "golvern", "kelyn", "vaalin" ]
			number = 0
			all_lockpicks.each{ |i|
				break if i == @load_data[";rogues Lockpick"].downcase
				number += 1
			}
			$rogue_change_needed_lockpick = nil
			number += 1
			@load_data[";rogues Lockpick"] = all_lockpicks[number]
		end
		tpick_silent(true, ";tpick is automating your current ;rogues task.\n;tpick will use the lockpick in the 'Lockpick' setting under the ';rogues integration' tab.\n;rogues will automatically adjust this setting as necessary.")
		@tpick_vars["Always Use Vaalin"] = nil
		@tpick_vars["Recommended Pick"] = @load_data[";rogues Lockpick"].capitalize
		lock_pick_information
		pick_2
	elsif @load_data["Unlock (407)"] == "All"
		tpick_silent(nil, "Always use 407 setting enabled, using 407.")
		if (@tpick_vars["Scale Trap Found"])
			tpick_silent(true, "Can't open a scales trap with 407.")
			if @tpick_vars["Picking Mode"] == "solo"
				where_to_stow_box
			elsif @tpick_vars["Picking Mode"] == "other"
				tpick_say("Can't Open Box")
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				@tpick_vars["Can't Open Plated Box Count"] += 1
				@tpick_vars["Box Opened"] = nil
			elsif @tpick_vars["Picking Mode"] == "worker"
				@tpick_vars["Give Up On Box"] = true
			end
		else
			tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
			cast_407
		end
	elsif @tpick_vars["Picks For Critter Level"] && @tpick_vars["Picking Mode"] == "worker" && @tpick_vars["True Lock Difficulty"].nil?
		@tpick_vars["Needed Pick"] = nil
		if @tpick_vars["Critter Level"].nil?
			@tpick_vars["Recommended Pick"] = "Vaalin"
		else
			@tpick_vars["Picks For Critter Level"].each{ |i|
				@tpick_vars["Temp Picks Critter Level"] = i.split(" ")
				if @tpick_vars["Temp Picks Critter Level"][0].to_i >= @tpick_vars["Critter Level"]
					if @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Copper"
						@tpick_vars["Recommended Pick"] = "Copper"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Steel"
						@tpick_vars["Recommended Pick"] = "Steel"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Gold"
						@tpick_vars["Recommended Pick"] = "Gold"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Silver"
						@tpick_vars["Recommended Pick"] = "Silver"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Mithril"
						@tpick_vars["Recommended Pick"] = "Mithril"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Ora"
						@tpick_vars["Recommended Pick"] = "Ora"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Glaes"
						@tpick_vars["Recommended Pick"] = "Glaes"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Laje"
						@tpick_vars["Recommended Pick"] = "Laje"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Vultite"
						@tpick_vars["Recommended Pick"] = "Vultite"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Rolaren"
						@tpick_vars["Recommended Pick"] = "Rolaren"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Veniom"
						@tpick_vars["Recommended Pick"] = "Veniom"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Invar"
						@tpick_vars["Recommended Pick"] = "Invar"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Alum"
						@tpick_vars["Recommended Pick"] = "Alum"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Golvern"
						@tpick_vars["Recommended Pick"] = "Golvern"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Kelyn"
						@tpick_vars["Recommended Pick"] = "Kelyn"
					elsif @tpick_vars["Temp Picks Critter Level"][1].capitalize == "Vaalin"
						@tpick_vars["Recommended Pick"] = "Vaalin"
					end
					break
				end
			}
		end
		@tpick_vars["Recommended Pick"] = "Vaalin" if @tpick_vars["Recommended Pick"].nil?
		lock_pick_information
		if @tpick_vars["Critter Level"]
			tpick_silent(nil, "Critter level is #{@tpick_vars["Critter Level"]}, using a #{@tpick_vars["Recommended Pick"]} lockpick based on your settings.")
		else
			tpick_silent(nil, "Critter level is unknown, using a #{@tpick_vars["Recommended Pick"]} lockpick.")
		end
		pick_2
	elsif @tpick_vars["Always Use Vaalin"]
		tpick_silent(nil, "Always use Vaalin setting enabled, using a Vaalin lockpick.")
		@tpick_vars["Recommended Pick"] = "Vaalin"
		lock_pick_information
		@tpick_vars["403 Needed"] = "yes" unless @load_data["403"] =~ /never/i
		pick_2
	elsif (@load_data["Use Vaalin When Fried"] == "Yes") && ((percentmind >= 100))
		tpick_silent(nil, "Always use Vaalin when fried enabled, using a Vaalin lockpick.")
		(@tpick_vars["Box Math"] = nil)
		@tpick_vars["Recommended Pick"] = "Vaalin"
		lock_pick_information
		@tpick_vars["403 Needed"] = "yes" unless @load_data["403"] =~ /never/i
		pick_2
	elsif @tpick_vars["Start With Copper"] && @tpick_vars["True Lock Difficulty"].nil?
		tpick_silent(nil, "Start with copper option enabled, starting with lockpick in your copper lockpick setting.")
		@tpick_vars["Recommended Pick"] = "Copper"
		lock_pick_information
		pick_2	
	else
		waitrt?
		if (@tpick_vars["True Lock Difficulty"].nil?)
			@tpick_vars["Number Of Times To Measure"] = 0
			measure_detection
			fput "speak common" if Stats.prof == 'Bard'
			if Stats.prof == 'Rogue'
				tpick_put_stuff_away
			elsif Stats.prof == 'Bard' && @tpick_vars["Picking Mode"] == "ground"
				tpick_drop_box
			end
		end
		number = 0
		@tpick_vars["Needed Pick"] = nil
		@tpick_vars["Needed Pick ID"] = nil
		if @tpick_vars["Lock Difficulty"] == "not locked"
			@tpick_vars["Box Math"] = nil
			if @tpick_vars["Picking Mode"] == "solo"
				open_solo
			elsif @tpick_vars["Picking Mode"] == "other"
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				nil
			elsif @tpick_vars["Picking Mode"] == "worker"
				nil
			end
		elsif @tpick_vars["Lock Difficulty"] == "can't find trap"
			tpick_silent(true, "Doesn't look like you have the skill to detect the trap on this box.")
			@tpick_vars["Box Math"] = nil
			if @tpick_vars["Picking Mode"] == "solo"
				where_to_stow_box
			elsif @tpick_vars["Picking Mode"] == "other"
				tpick_say("Can't Open Box")
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				nil
			elsif @tpick_vars["Picking Mode"] == "worker"
				@tpick_vars["Give Up On Box"] = true
			end
		elsif @tpick_vars["Lock Difficulty"] == "can't measure"
			tpick_silent(true, "You can't determine the lock difficulty.")
			if (@tpick_vars["Scale Trap Found"])
				tpick_silent(true, "This box has a scales trap therefore it can't be popped or wedged. Skipping box.")
				@tpick_vars["Box Math"] = nil
				if @tpick_vars["Picking Mode"] == "solo"
					where_to_stow_box
				elsif @tpick_vars["Picking Mode"] == "other"
					tpick_say("Can't Open Box")
					open_others
				elsif @tpick_vars["Picking Mode"] == "ground"
					nil
				elsif @tpick_vars["Picking Mode"] == "worker"
					@tpick_vars["Give Up On Box"] = true
				end
			else
				tpick_silent(true, "Going to try wedging this box open since the lock difficulty can't be determined.")
				wedge_lock
			end
		elsif @tpick_vars["Lock Difficulty"] == "need vaalin"
			@tpick_vars["Recommended Pick"] = "Vaalin"
			lock_pick_information
			temp_math_number = @tpick_vars["Pick Skill"]
			quick_maths = (temp_math_number * @tpick_vars["Recommended Pick Modifier"]).truncate
			tpick_silent(nil, "Recommended lock pick: #{@tpick_vars["Recommended Pick"]} with a modifier of #{@tpick_vars["Recommended Pick Modifier"]}\nRecommend 403: No\nYour calculated lockpicking skill: #{@tpick_vars["Pick Skill"]}\nYour total picking skill for this attempt is: #{quick_maths}\nLock difficulty: #{@tpick_vars["Lock Difficulty"]}")
			pick_2
		elsif @tpick_vars["Lock Difficulty"] == "Soul Golem" && @tpick_vars["Give Up On Box"]
			tpick_silent(true, "Message indicates this box is trapped. Normally this means this is a Soul Golem box but the worker didn't say this was from a Soul Golem. To be on the safe side I am turning this box in and moving on.")
		else
			@tpick_vars["Total Pick Skill"] = (@tpick_vars["Pick Skill"] + @tpick_vars["Pick Lore"]) * 2.50
			if @tpick_vars["Max Lock Compared To Skill"] && @tpick_vars["Lock Difficulty"] > (@tpick_vars["Total Pick Skill"] - @tpick_vars["Max Lock Attempt"])
				if (@tpick_vars["Scale Trap Found"])
					tpick_silent(true, "Lock difficulty: #{@tpick_vars["Lock Difficulty"]}, your max picking skill with a Vaalin lockpick: #{@tpick_vars["Total Pick Skill"]}, you won't pick anything higher than #{@tpick_vars["Max Lock Attempt"]} points below your max skill according to the Max Lock setting in the ;setup menu. This box also has a scales trap so can't be popped or wedged open. Skipping box.")
					if @tpick_vars["Picking Mode"] == "solo"
						where_to_stow_box
					elsif @tpick_vars["Picking Mode"] == "other"
						tpick_say("Can't Open Box")
						open_others
					elsif @tpick_vars["Picking Mode"] == "ground"
						@tpick_vars["Can't Open Plated Box Count"] += 1
						@tpick_vars["Box Opened"] = nil
					elsif @tpick_vars["Picking Mode"] == "worker"
						@tpick_vars["Give Up On Box"] = true
					end
				else
					tpick_silent(true, "Lock difficulty: #{@tpick_vars["Lock Difficulty"]}, your max picking skill with a Vaalin lockpick: #{@tpick_vars["Total Pick Skill"]}, you won't pick anything higher than #{@tpick_vars["Max Lock Attempt"]} points below your max skill according to the Max Lock setting in the ;setup menu so a lockpick won't be used.")
					wedge_lock
				end
			elsif @tpick_vars["Lock Difficulty"] > @tpick_vars["Max Lock Attempt"] && @tpick_vars["Max Lock Compared To Skill"].nil?
				if (@tpick_vars["Scale Trap Found"])
					tpick_silent(true, "This lock is higher than the Max Lock setting you entered in the ;setup menu so a lockpick won't be used. This box also has a scales trap so can't be popped or wedged open. Skipping box.")
					if @tpick_vars["Picking Mode"] == "solo"
						where_to_stow_box
					elsif @tpick_vars["Picking Mode"] == "other"
						tpick_say("Can't Open Box")
						open_others
					elsif @tpick_vars["Picking Mode"] == "ground"
						@tpick_vars["Can't Open Plated Box Count"] += 1
						@tpick_vars["Box Opened"] = nil
					elsif @tpick_vars["Picking Mode"] == "worker"
						@tpick_vars["Give Up On Box"] = true
					end
				else
					tpick_silent(true, "This lock is higher than the Max Lock setting you entered in the ;setup menu so a lockpick won't be used.")
					wedge_lock
				end
			else
				if @tpick_vars["Lock Difficulty"] > (@tpick_vars["Total Pick Skill"] + @load_data["Vaalin Lock Roll"])
					if (@tpick_vars["Scale Trap Found"])
						tpick_silent(true, "Can't pick this box based on my calculations (and it has a scales trap.) If you think this is in error increase the Vaalin Lock Roll setting in the setup menu. Skipping box.")
						if @tpick_vars["Picking Mode"] == "solo"
							where_to_stow_box
						elsif @tpick_vars["Picking Mode"] == "other"
							tpick_say("Can't Open Box")
							open_others
						elsif @tpick_vars["Picking Mode"] == "ground"
							@tpick_vars["Can't Open Plated Box Count"] += 1
							@tpick_vars["Box Opened"] = nil
						elsif @tpick_vars["Picking Mode"] == "worker"
							@tpick_vars["Give Up On Box"] = true
						end
					else
						tpick_silent(true, "Can't pick this box based on my calculations. If you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
						wedge_lock
					end
				else
					calculate_needed_lockpick
					text = "Recommended lock pick: #{@tpick_vars["Recommended Pick"]} with a modifier of #{@tpick_vars["Recommended Pick Modifier"]}\n"
					if @tpick_vars["403 Needed"] == "yes"
						if @tpick_vars["Use 403 For Lock Difficulty"] && @tpick_vars["Lock Difficulty"] > @tpick_vars["Use 403 For Lock Difficulty"]
							text += "Lock difficulty is higher than your 403 setting in setup menu, using 403.\n"
						else
							text += "Recommend 403: Yes\n"
						end
						text += "Your calculated lockpicking skill: #{@tpick_vars["Pick Skill"]}\n"
						text += "Your calculated lockpicking lore: #{@tpick_vars["Pick Lore"]}\n"
						temp_math_number = @tpick_vars["Pick Skill"] + @tpick_vars["Pick Lore"]
					else
						text += "Recommend 403: No\n"
						text += "Your calculated lockpicking skill: #{@tpick_vars["Pick Skill"]}\n"
						temp_math_number = @tpick_vars["Pick Skill"]
					end
					quick_maths = (temp_math_number * @tpick_vars["Recommended Pick Modifier"]).truncate
					text += "Your total picking skill for this attempt is: #{quick_maths}\n"
					text += "Lock difficulty: #{@tpick_vars["Lock Difficulty"]}"
					tpick_silent(nil, text)
					if @tpick_vars["Needed Pick ID"].nil?
						if @tpick_vars["Recommended Pick"].capitalize == "Vaalin"
							tpick_silent(true, "ALL OF YOUR VAALIN LOCKPICKS ARE BROKEN. YOU REALLY SHOULD HAVE AT LEAST 1 WORKING VAALIN LOCKPICK WHEN RUNNING THIS SCRIPT.")
							exit
						else
							tpick_silent(true, "All of your #{@tpick_vars["Recommended Pick"]} lockpicks seem to be broken, trying a higher tier lockpick.")
						end
						next_pick
					else
						pick_2
					end
				end
			end
		end
	end
end

def pick_2
	waitrt?
	if (@tpick_vars["Gnomish Bracers"]) && @load_data["Bracer Override"] == "No"
		find_gnomish_lockpick
	else
		3.times{
			waitrt?
			unless GameObj.right_hand.id == @tpick_vars["Needed Pick ID"] || GameObj.left_hand.id == @tpick_vars["Needed Pick ID"]
				fput "get ##{@tpick_vars["Needed Pick ID"]}"
				sleep 0.2
			end
		}
		if GameObj.right_hand.id != @tpick_vars["Needed Pick ID"] && GameObj.left_hand.id != @tpick_vars["Needed Pick ID"]
			tpick_silent(true, "Couldn't find #{@tpick_vars["Needed Pick"]}.")
			waitrt?
			@tpick_vars["Roll Amount"] = 100
			next_pick
		else
			pick_3
		end
	end
end

def pick_3
	@tpick_vars["Next Task"] = nil
	@tpick_vars["Roll Amount"] = nil
	if (@tpick_vars["Open Plinites"]) || @tpick_vars["Current Box"].name =~ /plinite/
		tpick_silent(nil, "Attempting to extract plinite.")
	else
		tpick_silent(nil, "Attempting to pick lock.")
	end
	waitrt?
	tpick_cast_spells (506) if @tpick_vars["Use 506"]
	tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
	unless @load_data["403"] =~ /never/i
		if (@tpick_vars["403 Needed"] == "yes" || @tpick_vars["Use 403"])
			result = Lich::Util.quiet_command_xml("spell active", /You currently have the following active effects/)
			(tpick_cast_spells (403))
		end
	end
	if @load_data["403"] =~ /auto/i && @tpick_vars["403 Needed"].nil? && @tpick_vars["Need 403"].nil? && @tpick_vars["Use 403"].nil?
		tpick_stop_spell(403)
	end
	finished_task = nil
	loop{
		if (@tpick_vars["Open Plinites"]) || @tpick_vars["Current Box"].name =~ /plinite/
			fput "extract ##{@tpick_vars["Current Box"].id}"
		elsif @tpick_vars["Gnomish Bracers"] && @load_data["Bracer Override"] == "No"
			tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
			fput "push my #{@tpick_vars["Gnomish Bracers"]}"
		else
			if $rogue_trick_to_use
				@tpick_vars["Do Trick"] = $rogue_trick_to_use.dup
			elsif @load_data["Trick"] == "random"
				random_trick = [ "spin", "twist", "turn", "twirl", "toss", "bend", "flip" ].sample
				@tpick_vars["Do Trick"] = "lmas ptrick #{random_trick}"
			end
			wait_until { checkrt == 0 }
			fput "#{@tpick_vars["Do Trick"]} ##{@tpick_vars["Current Box"].id}"
		end
		if (@tpick_vars["Open Plinites"]) || @tpick_vars["Current Box"].name =~ /plinite/
			while line = get
				if line =~ /^You make .* attempt \(d100(?:\(open\))?\=(\d+)\)\./
					@tpick_vars["Roll Amount"] = $1.to_i
					if @tpick_vars["Roll Amount"] == 1
						waitrt?
						@tpick_vars["Next Task"] = "pick3"
						finished_task = true
						break
					end
				elsif line =~ /As you do you so\, you push just a little too hard and rupture the core\!/
					waitrt?
					@tpick_vars["Next Task"] = "next plinite"
					finished_task = true
					break
				elsif line =~ /you withdraw your .* with the feeling that retrieving the core is within your abilities/
					waitrt?
					@tpick_vars["Next Task"] = "pick3"
					finished_task = true
					break
				elsif line =~ /with the feeling that your abilities are probably not sufficient to retrieve the core/ || line =~ /You fumble about for a bit before you realize you are using a broken|you realize that the .* is broken/
					if (GameObj.right_hand.id != @tpick_vars["Current Box"].id) && (@tpick_vars["Picking Mode"] == "ground" || @tpick_vars["Picking Mode"] == "worker")
						if line =~ /You fumble about for a bit before you realize you are using a broken|you realize that the .* is broken/
							@tpick_lockpick_is_broken = true
							tpick_put_stuff_away
							@all_pick_ids[@tpick_vars["Recommended Pick"]].shift
							@tpick_vars["Roll Amount"] = 100 if @all_pick_ids["Vaalin"].length < 1
							no_vaalin_picks
						else
							tpick_put_stuff_away
						end
					end
					tpick_put_stuff_away
					if @tpick_vars["Needed Pick"] == @load_data["Vaalin"]
						if @tpick_vars["Picking Mode"] == "worker"
							tpick_silent(true, "Can't extract this plinite based on my calculations. If you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
							@tpick_vars["Next Task"] = "next plinite"
						else
							tpick_silent(true, "Can't extract this plinite, OPENing it instead. If you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
							waitrt?
							fput "open ##{@tpick_vars["Current Box"].id}"
							@tpick_vars["Next Task"] = "next plinite"
						end
					else
						@tpick_vars["Next Task"] = "nextpick"
					end
					finished_task = true
					break
				elsif line =~ /where it can be easily PLUCKed/
					@tpick_vars["Next Task"] = "open plinite"
					finished_task = true
					break
				elsif line =~ /^Roundtime\:/
					finished_task = true
					break
				elsif line =~ /\.\.\.wait/
					break
				end
			end
		else
			flip_trick_is_being_used = nil
			while line = get
				if line =~ /you instead attempt to quietly turn the tumblers to within a hair\'s breadth of clicking/
					flip_trick_is_being_used = true
				#Get roll amount:
				elsif line =~ /^You make .* attempt \(d100(?:\(open\))?\=(\d+)\)\./
					@tpick_vars["Roll Amount"] = $1.to_i
					@tpick_vars["Next Task"] = "pick3" if @tpick_vars["Roll Amount"] == 1
				####################################################################################################
				#Box has been opened or was already open:
				elsif line =~ /^You struggle with the .*\.  As you do\, you get a sense that the .* has .* \(\-(\d+) thief\-lingo difficulty ranking\)\.  Then\.\.\.CLICK\!  It opens\!|^The .* gives off an audible \*click\* as the tumblers snap open\.|^It does not appear to be locked./
					@tpick_vars["Calibrate-Count"] += 1
					waitrt?
					tpick_put_stuff_away
					if line =~ /^It does not appear to be locked./
						@tpick_vars["Box Math"] = nil
					elsif line =~ /^You struggle with the .*\.  As you do\, you get a sense that the .* has .* \(\-(\d+) thief\-lingo difficulty ranking\)\.  Then\.\.\.CLICK\!  It opens\!|^The .* gives off an audible \*click\* as the tumblers snap open\./
						actual_lock_difficulty = $1.to_i if line =~ /^You struggle with the .*\.  As you do\, you get a sense that the .* has .* \(\-(\d+) thief\-lingo difficulty ranking\)\.  Then\.\.\.CLICK\!  It opens\!/
						if @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @rogue_current_task == "Repair broken lockpicks"
							@tpick_vars["Box Math"] = nil
						else
							@stats_data["Locks Opened Since Last Pick Broke"] += 1
							@stats_data["Opened/Broke For Each Pick"][@tpick_vars["Recommended Pick"]] += 1
							successful_lockpick_text = "Number of locks successfully opened since last broken lockpick: "
							@stats_data["Opened/Broke For Each Pick"].each{ |key,value| successful_lockpick_text += "#{key}: #{value}, "	}
							successful_lockpick_text = successful_lockpick_text.chop.chop
							successful_lockpick_text += ". Number of total locks picked since any lockpick broke: #{@stats_data["Locks Opened Since Last Pick Broke"]}"
							tpick_silent(true, successful_lockpick_text)
							if Stats.prof == "Rogue"
								if $rogue_calibrate_every_box
									calibrate_calipers
								elsif @tpick_vars["Calibrate Auto Amount"] && @tpick_vars["Measured Lock"].is_a?(Integer) && actual_lock_difficulty.is_a?(Integer)
									calibrate_auto_math = (@tpick_vars["Measured Lock"] - actual_lock_difficulty).abs
									if calibrate_auto_math >= @tpick_vars["Calibrate Auto Amount"]
										unless @tpick_vars["Pop Boxes"]
											tpick_silent(nil, "The difference between calipers reading and actual lock difficulty was #{calibrate_auto_math}. According to your settings you want your calipers calibrated.")
											calibrate_calipers
										end
									end
								elsif (@tpick_vars["Calibrate-Count"] >= @load_data["Calibrate Count"]) && (@tpick_vars["Calibrate Auto Amount"].nil?)
									if @tpick_vars["Can Use Calipers"] && @tpick_vars["Always Use Vaalin"].nil? && @tpick_vars["Start With Copper"].nil?
										calibrate_calipers unless @tpick_vars["Pop Boxes"]
									end
									@tpick_vars["Calibrate-Count"] = 0
								end
							end
						end
					end
					if @tpick_vars["Scale Trap Found"]
						@tpick_vars["Next Task"] = "scale_disarm_call"
					elsif @tpick_vars["Picking Mode"] == "solo"
						@tpick_vars["Next Task"] = "Open Solo"
					elsif @tpick_vars["Picking Mode"] == "other"
						@tpick_vars["Next Task"] = "open_other"
					elsif @tpick_vars["Picking Mode"] == "ground"
						tpick_drop_box if @tpick_vars["Gnomish Bracers"] && @load_data["Bracer Override"] == "No"
						@tpick_vars["Next Task"] = "open_ground"
					elsif @tpick_vars["Picking Mode"] == "worker"
						@tpick_vars["Next Task"] = "worker finished"
					end
					finished_task = true
					break
				####################################################################################################
				#No read from the box:
				elsif line =~ /^You are not able to pick the lock\, and learn little about it\./
					if @tpick_vars["Roll Amount"] == 1
						tpick_silent(nil, "This attempt was a fumble, going to try again.")
						@tpick_vars["Next Task"] = "pick3"
					else
						roll_amount_check
					end
					finished_task = true
					break
				####################################################################################################
				#Box can be opened with current lockpick:
				elsif (line =~ /^You are not able to pick the .*\, but you get a sense that it has .* lock\.  About a \-(\d+) difficulty lock \(in thief\-lingo\)\.|^You are not able to pick the lock\, but you get a feeling that it is within your abilities\./) || (line =~ /^You get a sense that the .* \(\-(\d+) thief\-lingo difficulty ranking\)\./ && flip_trick_is_being_used.nil?)
					if (line =~ /^You are not able to pick the .*\, but you get a sense that it has .* lock\.  About a \-(\d+) difficulty lock \(in thief\-lingo\)\./ || line =~ /^You get a sense that the .* \(\-(\d+) thief\-lingo difficulty ranking\)\./) && @tpick_vars["True Lock Difficulty"].nil?
						@tpick_vars["Lock Difficulty"] = $1.to_i
						update_box_for_window
						@tpick_vars["True Lock Difficulty"] = true
						if @tpick_vars["Needed Pick"] == @load_data["Vaalin"]
							if @tpick_vars["Roll Amount"] > @load_data["Vaalin Lock Roll"]
								if (@tpick_vars["Need 403"].nil?) && (@load_data["403"] !~ /never/i)
									tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. Going to use 403/Lmas Focus now.")
									@tpick_vars["Roll Amount"] = 99
								elsif @load_data["403"] =~ /never/i
									tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. Your settings indicate you don't want to use 403/Lmas Focus. According to your Vaalin Lock Roll setting you should stop trying to use lockpicks.")
									@tpick_vars["Roll Amount"] = 100
								else
									tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. You are already using 403. According to your Vaalin Lock Roll setting you should stop trying to use lockpicks.")
									@tpick_vars["Roll Amount"] = 100
								end
								tpick_put_stuff_away
								@tpick_vars["Next Task"] = "nextpick"
							else
								tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. Trying same pick again")
								@tpick_vars["Next Task"] = "pick3"
							end
						else
							@tpick_vars["Next Task"] = "measure again"
						end
					else
						if @tpick_vars["Roll Amount"] == 1
							tpick_silent(nil, "This attempt was a fumble, going to try again.")
							@tpick_vars["Next Task"] = "pick3"
						else
							if @load_data["Keep Trying"] == "Yes"
								tpick_silent(nil, "Messaging indicates you can open this box with current lockpick, according to your settings you want to try same lockpick again.")
								@tpick_vars["Next Task"] = "pick3"
							else
								tpick_silent(nil, "Messaging indicates you can open this box with current lockpick, but according to your settings you don't want to try same lockpick again.")
								roll_amount_check
							end
						end
					end
					finished_task = true
					break unless line =~ /^You get a sense that the .* \(\-(\d+) thief\-lingo difficulty ranking\)\./
				####################################################################################################
				#Lockpick has been damaged, most likely box can't be opened with current lockpick:			
				elsif line =~ /^Your .* gets stuck in the lock\!  You carefully try to work it free but end up bending the tip\!|^Your .* gets stuck in the lock\!  You carefully try to work it free\, but it may have been weakened by the stress\./
					waitrt?
					wait_until { checkrt == 0 }
					if line =~ /^Your .* stuck in the lock\!  You carefully try to work it free but end up bending the tip\!/ && @load_data["Auto Repair Bent Lockpicks"] == "Yes" && Stats.prof == "Rogue"
						waitrt?
						wait_until { checkrt == 0 }
						tpick_silent(nil, "Lockpick tip was bent, going to try repairing it.")
						tpick_stow_box if @tpick_vars["Picking Mode"] !~ /ground|worker/
						fput "lmas repair ##{@tpick_vars["Needed Pick ID"]}"
						waitrt?
						sleep 1
						wait_until { checkrt == 0 }
						tpick_get_box if @tpick_vars["Picking Mode"] !~ /ground|worker/
					end
					if @tpick_vars["Roll Amount"] == 1
						tpick_silent(nil, "This attempt was a fumble, going to try again.")
						@tpick_vars["Next Task"] = "pick3"
					elsif @tpick_vars["Roll Amount"] < @load_data["Max Lock Roll"]
						tpick_silent(nil, "You rolled #{@tpick_vars["Roll Amount"]}, your settings are to try again because you rolled less than #{@load_data["Max Lock Roll"]}.")
						@tpick_vars["Next Task"] = "pick3"
					else
						if @tpick_vars["Needed Pick"] != @load_data["Vaalin"]
							tpick_silent(nil, "This pick doesn't seem to be cutting it, going to try a different one.")
						elsif @tpick_vars["Needed Pick"] == @load_data["Vaalin"]
							if (@tpick_vars["Need 403"].nil?) && (@load_data["403"] !~ /never/i)
								tpick_silent(nil, "A Vaalin pick doesn't seem to be cutting it alone, going to try 403/Lmas Focus.")
								@tpick_vars["Roll Amount"] = 99
							elsif @load_data["403"] =~ /never/i
								tpick_silent(nil, "A Vaalin pick doesn't seem to be cutting it alone and your settings indicate you never want to use 403/Lmas Focus, going to try wedges or 407.")
								@tpick_vars["Roll Amount"] = 100
							else
								tpick_silent(nil, "A Vaalin pick with 403/Lmas Focus doesn't seem to be cutting it, going to try wedges or 407.")
								@tpick_vars["Roll Amount"] = 100
							end
						end
						tpick_put_stuff_away
						@tpick_vars["Next Task"] = "nextpick"
					end
					finished_task = true
					break
				####################################################################################################
				#Lockpick has been broken or was already broken:
				elsif line =~ /^\* SNAP \*  Crud\!  You broke your .* in the attempt\!|^You attempt to pick the .* and fumble about for a bit before you realize you are using a broken .*\.|^Your .* gets stuck in the lock\!  You carefully try to work it free but end up snapping off the tip\!/
					if @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @rogue_current_task == "Repair broken lockpicks"
						@tpick_vars["Lockpicks To Break For Rogue"].delete(GameObj.right_hand.id)
						until checkright.nil?
							waitrt?
							fput "stow ##{GameObj.right_hand.id}"
							sleep 0.2
						end
						if @tpick_vars["Lockpicks To Break For Rogue"].count == 0
							tpick_silent(true, "That's the last lockpick to break! Let's repair them all now.")
							@tpick_finished_with_current_rogue_task = true
							exit
						else
							tpick_silent(true, "Broke this lockpick! #{@tpick_vars["Lockpicks To Break For Rogue"].count} more to go!")
						end
					else
						if line =~ /^\* SNAP \*  Crud\!  You broke your .* in the attempt\!|^Your .* gets stuck in the lock\!  You carefully try to work it free but end up snapping off the tip\!/
							tpick_silent(true, "Your #{@tpick_vars["Recommended Pick"]} lockpick successfully picked #{@stats_data["Opened/Broke For Each Pick"][@tpick_vars["Recommended Pick"]]} locks before it broke. You successfully picked #{@stats_data["Locks Opened Since Last Pick Broke"]} locks since you last broke any lockpick.")
							@stats_data["Locks Opened Since Last Pick Broke"] = 0
							@stats_data["Opened/Broke For Each Pick"][@tpick_vars["Recommended Pick"]] = 0
						end
						tpick_silent(true, "#{@tpick_vars["Needed Pick"]} is broken.")
						waitrt?
						@tpick_vars["Next Task"] = "broken lockpick stow"
					end
					finished_task = true
					break
				####################################################################################################
				#Not holding a lockpick, either because the character doesn't have the needed pick or the needed pick is broken:
				elsif line =~ /^You must be holding a lockpick to perform that trick\.|^You didn\'t mention what you want to pick the lock with\./
					tpick_silent(true, "Couldn't find #{@tpick_vars["Needed Pick"]}.")
					waitrt?
					@tpick_vars["Next Task"] = "nextpick"
					finished_task = true
					break
				####################################################################################################
				elsif line =~ /^Roundtime\:/
					finished_task = true
					break
				elsif line =~ /\.\.\.wait/
					break
				elsif line =~ /^You want to pick a lock on what/
					exit
				end
			end
		end
		break if finished_task
	}
	if @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @rogue_current_task == "Repair broken lockpicks"
		if @tpick_vars["Next Task"] == "scale_disarm_call"
			disarm_scale
		elsif @tpick_vars["Next Task"] == "worker finished"
			nil
		elsif @tpick_vars["Next Task"] == "open plinite"
			if @tpick_vars["Picking Mode"] == "worker"
				@tpick_vars["Give Up On Box"] = true
			end
		elsif @tpick_vars["Next Task"] == "next plinite"
			tpick_put_stuff_away
			@tpick_vars["Give Up On Box"] = true if @tpick_vars["Picking Mode"] == "worker"
		else
			measure_lock
		end
	else
		if @tpick_vars["Next Task"] == "Open Solo"
			open_solo
		elsif @tpick_vars["Next Task"] == "open_other"
			open_others
		elsif @tpick_vars["Next Task"] == "worker finished"
			relock_boxes_for_rogues if @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @rogue_current_task == "Relock tough boxes"
		elsif @tpick_vars["Next Task"] == "open_ground"
			nil
		elsif @tpick_vars["Next Task"] == "pick3"
			pick_3
		elsif @tpick_vars["Next Task"] == "nextpick"
			next_pick
		elsif @tpick_vars["Next Task"] == "measure again"
			tpick_silent(nil, "Got a read on this box, going to change to best suited lockpick.")
			waitrt?
			tpick_put_stuff_away
			measure_lock
		elsif @tpick_vars["Next Task"] == "broken lockpick stow"
			if @tpick_vars["Gnomish Bracers"] && @load_data["Bracer Override"] == "No"
				next_pick
			else
				@tpick_lockpick_is_broken = true
				tpick_put_stuff_away
				@all_pick_ids[@tpick_vars["Recommended Pick"]].shift
				@tpick_vars["Roll Amount"] = 100 if @all_pick_ids["Vaalin"].length < 1
				no_vaalin_picks
				next_pick
			end
		elsif @tpick_vars["Next Task"] == "open plinite"
			if @tpick_vars["Picking Mode"] == "worker"
				@tpick_vars["Give Up On Box"] = true
			else
				open_current_plinite
			end
		elsif @tpick_vars["Next Task"] == "next plinite"
			tpick_put_stuff_away
			@tpick_vars["Give Up On Box"] = true if @tpick_vars["Picking Mode"] == "worker"
		elsif @tpick_vars["Next Task"] == "scale_disarm_call"
			disarm_scale
		end
	end
end

def disarm_scale
	tpick_silent(nil, "Attempting to disarm scales trap.")
	3.times{
		waitrt?
		unless GameObj.right_hand.id == @tpick_vars["Scale Weapon ID"] || GameObj.left_hand.id == @tpick_vars["Scale Weapon ID"]
			fput "get ##{@tpick_vars["Scale Weapon ID"]}"
			sleep 0.2
		end
	}
	if GameObj.right_hand.id != @tpick_vars["Scale Weapon ID"] && GameObj.left_hand.id != @tpick_vars["Scale Weapon ID"]
		tpick_silent(true, "To fix the below issues enter ;tpick setup\nBe sure to fill out the setting for the name of your scale trap weapon.\nBe sure to fill out the setting for which container your scale trap weapon is in.\nAlso be sure you have your scale trap weapon.\n\nCouldn't find your #{@load_data["Scale Trap Weapon"]}.")
		exit
	end
	tpick_cast_spells (404) if @tpick_vars["Need 404"] == "yes" || @tpick_vars["Use 404"]
	tpick_cast_spells (506) if @tpick_vars["Use 506"]
	tpick_cast_spells (613) if @tpick_vars["Use 613"]
	tpick_cast_spells (1006) if @tpick_vars["Use 1006"]
	tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
	result = dothistimeout "disarm ##{@tpick_vars["Current Box"].id}", 3, /slice through the cord/i
	if result =~ /slice through the cord/
		waitrt?
		tpick_put_stuff_away
		if @tpick_vars["Picking Mode"] == "solo"
			open_solo
		elsif @tpick_vars["Picking Mode"] == "other"
			open_others
		elsif @tpick_vars["Picking Mode"] == "ground"
			sleep 0.1
		elsif @tpick_vars["Picking Mode"] == "worker"
			sleep 0.1
		end
	elsif result.nil?
		waitrt?
		tpick_put_stuff_away
		tpick_cast_spells (404)
		tpick_cast_spells (506) if @tpick_vars["Use 506"]
		disarm_scale
	end
end

def manually_disarm_trap
	waitrt?
	tpick_get_current_worker_box if @tpick_vars["Picking Mode"] == "worker" && @tpick_vars["Current Box"].nil?
	if @tpick_vars["Current Box"].name =~ /plinite/
		detect_plinite
	else
		if @tpick_vars["Time To Disarm Trap"]
			tpick_silent(nil, "Attempting to disarm trap.")
		else
			tpick_silent(nil, "Checking for traps.")
			@tpick_vars["403 Needed"] = nil
			@tpick_vars["Need 404"] = nil
		end
		if (@tpick_vars["Current Trap Type"] == "Sphere") || (@tpick_vars["Current Trap Type"] == "Sphere trap found, need to use lockpick to disarm.")
			no_vaalin_picks
			3.times{
				waitrt?
				unless GameObj.right_hand.id == @all_pick_ids["Vaalin"].first || GameObj.left_hand.id == @all_pick_ids["Vaalin"].first
					fput "get ##{@all_pick_ids["Vaalin"].first}"
					sleep 0.2
				end
			}
			if GameObj.right_hand.id != @all_pick_ids["Vaalin"].first && GameObj.left_hand.id != @all_pick_ids["Vaalin"].first
				tpick_silent(true, "Couldn't find your #{@load_data["Vaalin"]}.")
				exit
			end
		end
		waitrt?
		if @load_data["Use 404 On Level"] != 200
			if @tpick_vars["Critter Level"].nil?
				tpick_silent(nil, "Critter level unknown, using 404 based on your settings.")
				@tpick_vars["Need 404"] = "yes"
			else
				if @load_data["Use 404 On Level"] <= @tpick_vars["Critter Level"]
					tpick_silent(nil, "Critter level is #{@tpick_vars["Critter Level"]}, using 404 based on your settings.")
					@tpick_vars["Need 404"] = "yes"
				end
			end
		end
		tpick_cast_spells (402) if @tpick_vars["Use 402"]
		tpick_cast_spells (404) if @tpick_vars["Use 404"] || @tpick_vars["Need 404"]
		tpick_cast_spells (506) if @tpick_vars["Use 506"]
		tpick_cast_spells (613) if @tpick_vars["Use 613"]
		tpick_cast_spells (1006) if @tpick_vars["Use 1006"]
		tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
		trap_cant_be_disarmed = nil
		if @tpick_vars["Picking Mode"] != "ground" && @tpick_vars["Picking Mode"] != "worker"
			wait_until { GameObj.right_hand.id}
			@tpick_vars["Current Box"] = GameObj.right_hand
			update_box_for_window
		end
		waitrt?
		sleep 1
		waitrt?
		sleep 0.3
		waitrt?
		sleep 0.1
		waitrt?
		if @tpick_vars["Current Trap Type"] == "Scarab"
			@tpick_vars["All Scarab IDs"] = Array.new
			GameObj.loot.each{ |i|
				@tpick_vars["All Scarab IDs"].push(i.id) if i.noun == "scarab"
			}
		end
		tpick_say("Scarab Found") if @tpick_vars["Current Trap Type"] == "Scarab"
		if @tpick_vars["Time To Disarm Trap"] && @tpick_vars["Trap Difficulty"]
			if (@load_data["404"] =~ /detect/i) && (@tpick_vars["Disarm Skill"] > @tpick_vars["Trap Difficulty"]) && (@tpick_vars["Use 404/Trap Higher Than Setting"].nil?)
				tpick_silent(nil, "According to your settings you want to stop 404 when it's not needed to disarm a trap.")
				tpick_stop_spell(404)
			end
			if @load_data["404"] =~ /auto/i && @tpick_vars["Use 404"].nil? && @tpick_vars["Need 404"].nil? && @tpick_vars["Use 404/Trap Higher Than Setting"].nil?
				tpick_stop_spell(404)
			end
			fput "disarm ##{@tpick_vars["Current Box"].id}"
		else
			tpick_cast_spells (404) if @load_data["404"] =~ /detect/i
			tpick_cast_spells (506) if @tpick_vars["Use 506"]
			fput "detect ##{@tpick_vars["Current Box"].id}"
		end
		while line = get
			if line =~ /\(.*\-(\d+)\)\./
				@tpick_vars["Trap Difficulty"] = $1.to_i
				disarm_skill_plus_lore = (@tpick_vars["Disarm Skill"] + @tpick_vars["Disarm Lore"])
				@tpick_vars["Total Trap Skill"] = (@tpick_vars["Disarm Skill"] + @tpick_vars["Disarm Lore"] + @load_data["Trap Roll"])
				if @tpick_vars["Time To Disarm Trap"].nil?
					tpick_silent(nil, "Trap difficulty is: #{@tpick_vars["Trap Difficulty"]}\nYour disarm skill is: #{@tpick_vars["Disarm Skill"]}\nYour total disarm skill with lore is: #{disarm_skill_plus_lore}\nHighest trap you are willing to try is: #{@tpick_vars["Total Trap Skill"]}")
				end
				if @tpick_vars["Trap Difficulty"] > @tpick_vars["Total Trap Skill"]
					trap_cant_be_disarmed = true
				elsif @tpick_vars["404 For Trap-Difficulty"]
					if @tpick_vars["Trap Difficulty"] > @tpick_vars["404 For Trap-Difficulty"]
						if @tpick_vars["Time To Disarm Trap"].nil?
							tpick_silent(nil, "Trap difficulty is higher than your setting in the setup menu for when to use Disarm Enhancement (404), going to use Disarm Enhancement (404).")
						end
						@tpick_vars["Use 404/Trap Higher Than Setting"] = true
						@tpick_vars["Need 404"] = "yes"
					end
				elsif ((@tpick_vars["Trap Difficulty"] + 40) > @tpick_vars["Disarm Skill"]) && (Spell[404].known? || @load_data["Use Lmaster Focus"] == "Yes")
					if @tpick_vars["Time To Disarm Trap"].nil?
						tpick_silent(nil, "This trap looks tough, going to use Disarm Enhancement (404) or Lock Mastery Focus.")
					end
					@tpick_vars["Need 404"] = "yes"
				elsif @tpick_vars["Trap Difficulty"] > @tpick_vars["Disarm Skill"] && !Spell[404].known? && @load_data["Use Lmaster Focus"] != "Yes"
					trap_cant_be_disarmed = true
				end
	#####Is box enruned or mithril?
			elsif line =~ /You carefully begin to examine (.*) for traps\.\.\./
				@tpick_vars["Box Is Enruned/Mithril"] = nil
				@tpick_vars["Box Is Enruned/Mithril"] = true if $1 =~ /enruned|mithril/
	#####Failed to disarm box
			elsif line =~ /Having discovered a trap on the.* you begin to carefully attempt to disarm it\.\.\./
				@tpick_vars["Current Trap Type"] = "Couldn't disarm trap, trying again."
	#####Scarab information#####
			#Manual detection
			elsif line =~ /Peering closely into the lock\, you spy an? [a-zA-Z]+ (.*) scarab wedged into the lock mechanism\./
				@tpick_vars["Scarab Name"] = $1
				@tpick_vars["Current Trap Type"] = "Scarab"
			#Successful manual disarm
			elsif line =~ /You carefully nudge the scarab free of its prison without disturbing the lock too much\.\s+The scarab falls from the lock and onto the ground in front of you\./
				@tpick_vars["Current Trap Type"] = "Scarab trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /The lock appears to be free of all obstructions\./
				@tpick_vars["Current Trap Type"] = "Scarab trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /Looking closely at the lock\, you spy.*scarab wedged into the lock mechanism\.\s+The scarab is surrounded by crimson glow\./
				@tpick_vars["Current Trap Type"] = "Scarab trap has already been disarmed with 408."
				break
	#####Needle information#####
			#Manual detection
			elsif line =~ /Hmmm\, you can see what appears to be a tiny hole next to the lock plate which doesn\'t seem to belong there\.\s+Looking closer you see a gleaming sliver of metal recessed in the hole\./
				@tpick_vars["Current Trap Type"] = "Needle"
			#Successful manual disarm
			elsif line =~ /Using a bit of putty from your.*\, you manage to block the tiny hole in the lock plate\.|Using a pair of metal grips\, you carefully remove .* from .* and cover the tip with a bit of putty\./
				@tpick_vars["Current Trap Type"] = "Needle trap has been disarmed."
				@tpick_vars["Putty Remaining"] -= 1
				break
			#Already manually disarmed
			elsif line =~ /You see a tiny hole next to the lock plate which has been completely plugged\.|You can see what appears to be a tiny hole next to the lock plate which doesn\'t seem to belong there\.  However\, nothing about it seems to indicate cause for alarm\.|You spot a shiny metal needle sticking out of a small hole next to the lockplate with some sort of dark paste on it\./
				@tpick_vars["Current Trap Type"] = "Needle trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /You can see what appears to be a tiny hole next to the lock plate which doesn\'t belong there\.\s+An occasional glint of red winks at you from within the hole\./
				@tpick_vars["Current Trap Type"] = "Needle trap has already been disarmed with 408."
				break
	#####Jaws information#####
			#Manual detection
			elsif line =~ /You notice a discolored oval ring around the outside of the .* which makes you suspicious\.\s+Your suspicions are confirmed when you look inside the keyhole and notice the spring\-loaded jaws pressed flush against the .* walls\./
				@tpick_vars["Current Trap Type"] = "Jaws"
			#Successful manual disarm
			elsif line =~ /Using the pair of metal grips\, you manage to pull out the two pins that hold the upper and lower jaw pieces together\.\s+As the pins are removed\, the jaws suddenly close and warp under the tremendous strain applied by their arming mechanism\.|Using the pair of metal grips\, you manage to pull out the two pins that hold the upper and lower jaw pieces together\.|Using your metal grips\, you carefully remove a pair of small steel jaws from the .* before piecing the apparatus back together\./
				@tpick_vars["Current Trap Type"] = "Jaws trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /You notice a discolored oval ring around the outside of the .* which makes you suspicious\.\s+Your suspicions are confirmed when you look inside the keyhole and notice the spring\-loaded jaws pressed flush against the.*walls\, but the pins that hold the jaws together have been pushed out\.|You notice a discolored oval ring around the outside of the .*\, but further examination gives the impression that some vital part of whatever trap was here has been removed\./
				@tpick_vars["Current Trap Type"] = "Jaws trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /You see a pair of metal jaws clamped tightly before the lockplate on the.*\.|The jaws are surrounded with a reddish glow\./
				@tpick_vars["Current Trap Type"] = "Jaws trap has already been disarmed with 408. Can't pick it."
				break
			#Trap has already been set off
			elsif line =~ /You see a pair of bloody jaws clamped tightly before the lockplate on the/
				@tpick_vars["Current Trap Type"] = "Jaws trap has already been set off."
				break
	#####Sphere information#####
			#Manual detection
			elsif line =~ /Examining the .*\, you locate.*sphere held in a metal bracket towards the back of the lock mechanism\..*It appears that were the tumblers to be activated\, the gem would be caught amongst them\./
				@tpick_vars["Current Trap Type"] = "Sphere"
			#Successful manual disarm
			elsif line =~ /With utmost care\, you slip your.* into the lock and gently nudge the.*Another moment of prodding\, and you are able to poke the gem free of its metal housing\, whereupon it falls down into the lock mechanism and out of sight\.|With utmost care\, you slip your.* into the lock and gently nudge the.*Tilting the .* forward\, you knock the gem free of its metal housing and poke it out through the back of the lock\, allowing it to gently roll down the inside of the .*\'s front wall\./
				@tpick_vars["Current Trap Type"] = "Sphere trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /A thorough search of the area inside the tumblers reveals what appears to be a metal bracket of some sort\, although it seems to be empty now\./
				@tpick_vars["Current Trap Type"] = "Sphere trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /The sphere is surrounded by a.*crimson glow\./i
				@tpick_vars["Current Trap Type"] = "Sphere trap has already been disarmed with 408."
				break
			#Need pick in hand messaging
			elsif line =~ /No matter how you try\, your fingers are just too big to get back there to the gem\.\s+You\'ll need some sort of thin\, rigid implement like a lockpick\./
				@tpick_vars["Current Trap Type"] = "Sphere trap found, need to use lockpick to disarm."
				no_vaalin_picks
				3.times{
					waitrt?
					unless GameObj.right_hand.id == @all_pick_ids["Vaalin"].first || GameObj.left_hand.id == @all_pick_ids["Vaalin"].first
						fput "get ##{@all_pick_ids["Vaalin"].first}"
						sleep 0.2
					end
				}
				if GameObj.right_hand.id != @all_pick_ids["Vaalin"].first && GameObj.left_hand.id != @all_pick_ids["Vaalin"].first
					tpick_silent(true, "Couldn't find your #{@load_data["Vaalin"]}.")
					exit
				end
			#Setting off trap manually
			elsif line =~ /Suddenly\, you hear a sound like shattered crystal and .* light flashes from the lock mechanism\!/
				@tpick_vars["Current Trap Type"] = "Sphere trap has been set off."
				tpick_silent(true, "Sphere trap has been set off! Exiting.")
				exit
			#Trap has already been set off
			elsif line =~ /A thorough and careful search of the lock mechanism indicates that the entire .* is MANGLED\. It\'s probably not trapped anymore\./
				@tpick_vars["Current Trap Type"] = "Sphere trap has already been set off."
				break
	#####Crystal information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy.*crystal which seems imbedded in the locking mechanism\.\s+It looks as if opening the lock without the exact key could shatter it\./
				@tpick_vars["Current Trap Type"] = "Crystal"
			#Successful manual disarm
			elsif line =~ /With a little ingenuity you manage to grind down parts of the lock mechanism with your metal file\, so it won\'t come in contact with the crystal when you try to open it\./
				@tpick_vars["Current Trap Type"] = "Crystal trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy.*crystal which seems imbedded in the locking mechanism\.\s+It looks as if opening the lock without the exact key could shatter it\, but parts of the mechanism have been ground away to avoid unwanted contact with the crystal\./
				@tpick_vars["Current Trap Type"] = "Crystal trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /You can see.*crystal imbedded in the locking mechanism\, with a slight reddish glow about it\./
				@tpick_vars["Current Trap Type"] = "Crystal trap has already been disarmed with 408."
				break
	#####Scales information#####
			#Manual detection
			elsif line =~ /At first glance\, the.* appears to be covered with hundreds of tiny metal scales\.\s+Closer examination reveals the \"scales\" to be razor sharp at the edges and possessing of a downward\-facing needlelike tip\.\s+However\, you should be able to avoid cutting yourself if you are careful\.|Despite heavy scrutiny\, you can see no way to pry off any of the scales\, nor any particular reason to\.\s+With a modicum of caution\, they should present no danger\.\s+Nothing else about the.* suggests that it is trapped\./
				@tpick_vars["Current Trap Type"] = "Scales"
			#Successful manual disarm
			elsif line =~ /You gently slide your.*into the space under the lid and slice through the cord\.\s+That oughta do it\./
				@tpick_vars["Current Trap Type"] = "Scales trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /Peering in through the crack between the lid and the casing\, you see what appears to be a thin cord dangling from the case\.\s+It looks to have been sliced through\./
				@tpick_vars["Current Trap Type"] = "Scales trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /A crimson glow seeps between the lid and the casing of the .*\./
				@tpick_vars["Current Trap Type"] = "Scales trap has already been disarmed with 408."
				break
			#Need dagger in hand messaging
			elsif line =~ /You figure that if you had a dagger\, you could probably cut the cord\./
				@tpick_vars["Current Trap Type"] = "Scales trap found, need to use dagger to disarm."
				break
	#####Sulphur information#####
			#Manual detection
			elsif line =~ /Feeling around the inside of the lock\, you notice that the casing is coated with a rough\, grainy substance\.\s+You lean forward and peer between the walls of the casing\.\s+Examining the lock closely\, you notice a small bladder filled with a strange liquid wedged between the tumblers\.\s+With your face this close to the lock\, you pick up the faintest scent of sulphur\./
				@tpick_vars["Current Trap Type"] = "Sulphur"
			#Successful manual disarm
			elsif line =~ /You carefully use the tip of a small metal file to scrape away the rough\, grainy substance which lines the walls of the casing\.\s+After a few moments\, you feel comfortable with the small section you have cleaned\.\s+You take out a thin needle and carefully slide it between the walls of the casing\, taking great care not to touch them\.\s+As the tip of the needle punctures the small bladder\, a strange clear gel oozes forth from the hole\.\s+The gel gives off a strong odor of sulphur\.\s+As the air hits the gel\, it begins to harden and turn to dust\, blowing away in the wind as if it never existed\./
				@tpick_vars["Current Trap Type"] = "Sulphur trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /Feeling around the inside of the lock\, you notice that the casing is coated with a rough\, grainy substance\.\s+A small section of the casing has been scraped clean of the strange substance\.\s+You lean forward and peer between the walls of the casing\.\s+Examining the lock closely\, you notice a deflated bladder wedged between the tumblers\.\s+There is a small hole in the bladder\, most likely from whatever ruptured it\.\s+The lock emanates a strong scent of sulphur\./
				@tpick_vars["Current Trap Type"] = "Sulphur trap has already been disarmed."
				break
			#Trap has already been set off
			elsif line =~ /A thorough and careful search of the lock mechanism indicates that the entire .* is MANGLED\./
				@tpick_vars["Current Trap Type"] = "Sulphur trap has already been set off."
				break
			#Already disarmed with 408
			#TRAP CANNOT BE DISARMED WITH 408
	#####Cloud information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\./
				@tpick_vars["Current Trap Type"] = "Cloud"
			#Successful manual disarm
			elsif line =~ /Using the metal grips from your.*\, you manage to reach in and grasp the post of the metal hammer\, and bend the weak metal out of striking range of the vial\.|Having rendered the hammer harmless\, you carefully remove a green\-tinted vial filled with thick acrid smoke from the .*\./
				@tpick_vars["Current Trap Type"] = "Cloud trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a tiny hammer device which has been bent back slightly\.|Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which has been bent from striking range of the vial\.|Looking closely into the keyhole of the lock, you spy a tiny hammer device and several splinters of glass/
				@tpick_vars["Current Trap Type"] = "Cloud trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which has a red glow about it\./
				@tpick_vars["Current Trap Type"] = "Cloud trap has already been disarmed with 408."
				break
	#####Acid vial information#####
			#Manual detection
			elsif line =~ /Peering closely into the lock\, you spy a tiny vial placed just past the tumblers of the lock mechanism\.\s+It would appear that any tampering with the lock mechanism would cause the tumblers to crush the vial and release whatever substance is inside\./
				@tpick_vars["Current Trap Type"] = "Acid Vial"
			#Successful manual disarm
			elsif line =~ /You carefully push a small ball of cotton into the lock mechanism\, surrounding and protecting the small vial from anything that may shatter it\.|Using a pair of metal grips\, you carefully remove the padded clear glass vial from the .*\./
				@tpick_vars["Current Trap Type"] = "Acid vial trap has been disarmed."
				@tpick_vars["Cotton Remaining"] -= 1
				break
			#Already manually disarmed
			elsif line =~ /Peering closely into the lock\, you spy a tiny vial placed just past the tumblers of the lock mechanism\.\s+A small ball of cotton has been pushed up against the vial\, protecting it from anything that may shatter it\.|Looking closely at the lock\, you spy a small metal housing set just inside the lock mechanism\, but it appears empty\.|Looking closely into the keyhole of the lock\, you spy a small metal housing\, which appears to be empty\./
				@tpick_vars["Current Trap Type"] = "Acid vial trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /You notice what appears to be a tiny vial placed just past the tumblers of the lock mechanism\.\s+A crimson glow surrounds the vial\.|Looking closely at the lock\, you spy a tiny vial set just inside the lock mechanism\.\s+The vial is surrounded by crimson glow\./
				@tpick_vars["Current Trap Type"] = "Acid vial trap has already been disarmed with 408."
				break
			#Setting off trap manually
			elsif line =~ /You peer inside the lock and see that the tumblers have all been fused into a lump of useless metal/
				@tpick_vars["Current Trap Type"] = "Acid vial trap has been set off."
				break
			#Trap has already been set off
			elsif line =~ /You peer inside the lock and see that the tumblers have been fused into a lump of useless metal./
				@tpick_vars["Current Trap Type"] = "Acid vial trap has already been set off."
				break
	#####Springs information#####
			#Manual detection
			elsif line =~ /After carefully examining the lock\, you move on to the hinges of the .*\.\s+Just as you were to pass the.* off as safe\, you notice what appears to be the ends of springs incorporated with the hinges\.\s+Seems rather odd to have.* designed to spring open when it is unlocked\./
				@tpick_vars["Current Trap Type"] = "Springs"
			#Successful manual disarm
			elsif line =~ /With a little force applied to the springs\, you manage to pop them inside the.*\, from within which comes the tinkle of breaking glass\, followed by a strong acrid smell\.|With a little force applied to the springs\, you manage to pop them inside.*\, where they bounce around for a moment\.\s+You also hear something else rolling around in there\./
				@tpick_vars["Current Trap Type"] = "Springs trap has been disarmed."
				break
			#Already manually disarmed
			#Same messaging as when no traps found.
			#Already disarmed with 408
			elsif line =~ /You spot a reddish glow about the hinges of the.*\./
				@tpick_vars["Current Trap Type"] = "Springs trap has already been disarmed with 408."
				break
	#####Fire vial information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of fire\-red liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\./
				@tpick_vars["Current Trap Type"] = "Fire Vial"
			#Successful manual disarm
			elsif line =~ /Using the metal grips from your.*\, you manage to reach in and grasp the post of the metal hammer\, and bend the weak metal out of striking range of the vial\.|Having rendered the hammer harmless\, you carefully remove a thick glass vial filled with murky red liquid from the.*\./
				@tpick_vars["Current Trap Type"] = "Fire vial trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a tiny hammer device which has been bent back slightly\.|Looking closely into the keyhole of the lock\, you spy a small vial of fire\-red liquid and a tiny hammer device which has been bent from striking range of the vial\.|Looking closely into the keyhole of the lock, you spy a tiny hammer device and several splinters of glass/
				@tpick_vars["Current Trap Type"] = "Fire vial trap has already been disarmed."
				break
			#Already disarmed with 408 NEED MESSAGING
			#elsif line =~ //
			#	@tpick_vars["Current Trap Type"] = "Fire vial trap has already been disarmed with 408."
			#	break
	#####Spores information#####
			#Manual detection
			elsif line =~ /Peering into the.*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+The tube is capped with a thin membrane\, but it seems likely that the tumblers would tear it off while turning\./
				@tpick_vars["Current Trap Type"] = "Spores"
			#Successful manual disarm
			elsif line =~ /Taking a lump of putty from your.*\, you carefully apply it to the end of the small tube\.\s+That should block whatever it\'s meant to deploy\./
				@tpick_vars["Current Trap Type"] = "Spores trap has been disarmed."
				@tpick_vars["Putty Remaining"] -= 1
				break
			#Already manually disarmed
			elsif line =~ /Peering into the.*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+It appears as though the tube has been plugged with something\./
				@tpick_vars["Current Trap Type"] = "Spores trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /You see a thin tube extending from the lock mechanism down into the.*\.\s+The end of the tube is surrounded by a crimson glow\.|Peering into the.*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+A crimson glow surrounds the mouth of the tube\./
				@tpick_vars["Current Trap Type"] = "Spores trap has already been disarmed with 408."
				break
			#Trap has already been set off
			elsif line =~ /Peering into the .*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+It appears as though the tube used to be covered with a thin membrane\, but it has torn mostly away\, and greyish\-green powder covers the area around it\./
				@tpick_vars["Current Trap Type"] = "Spores trap has already been set off."
				break
	#####Plate information#####
			#Manual detection
			elsif line =~ /There appears to be a plate over the lock\, sealing it and preventing any access to the tumblers\.|Gonna chew through it/
				@tpick_vars["Current Trap Type"] = "Plate"
			#Successful manual disarm
			elsif line =~ /You carefully pour the contents of.*onto the .* where you think the keyhole ought to be\.\s+.*\, the metal plate covering the lock begins to melt away\./
				@tpick_vars["Current Trap Type"] = "Plate trap has been disarmed."
				@tpick_vars["Vials Remaining"] -= 1
				break
			#Already manually disarmed
			elsif line =~ /You see a metal plate covering the lock plate\, but it appears to have been melted through\, granting sufficient access to the lock to attempt picking it./
				@tpick_vars["Current Trap Type"] = "Plate trap has already been disarmed."
				break
			#Already disarmed with 408
			#Trap can't be disarmed with 408
	#####Glyph information#####
			#Manual detection
			elsif line =~ /You notice some spiderweb\-like scratches on the lock plate which seem\, after some bit of scrutiny\, too organized to be just wear and tear \-\- it might be some type of glyph spell\./
				@tpick_vars["Current Trap Type"] = "Glyph"
				@tpick_vars["Box Has Glyph Trap"] = true
			#Successful manual disarm
			elsif line =~ /Knowing how delicate magical glyphs can be\, you scrape some extra lines into the markings hoping to alter their meaning and defeat the spell they may hold\./
				@tpick_vars["Current Trap Type"] = "Glyph trap has been disarmed."
				@tpick_vars["Box Has Glyph Trap"] = true
				break
			#Already manually disarmed
			elsif line =~ /You notice some spiderweb\-like scratches on the lock plate which seem\, after some bit of scrutiny\, too organized to be just wear and tear \-\- it might be some type of glyph spell\, but some of the markings have been altered\.\s+This may prevent any magical nature they have from manifesting itself\./
				@tpick_vars["Current Trap Type"] = "Glyph trap has already been disarmed."
				@tpick_vars["Box Has Glyph Trap"] = true
				break
			#Already disarmed with 408
			#Trap can't be disarmed with 408
	#####Rods information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole\, you notice a pair of small metal rods a hair\'s width from touching each other\.\s+Peering around the inside of the keyhole\, you can see that the lock would push the two rods together should the lock be tampered with\./
				@tpick_vars["Current Trap Type"] = "Rods"
			#Successful manual disarm
			elsif line =~ /With great care you take a pair of metal grips and bend the sensitive metal rods out of alignment\.\s+It looks as though they cannot be pressed together by the lock mechanism any more\./
				@tpick_vars["Current Trap Type"] = "Rods trap has been disarmed."
				break
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole\, you notice a pair of small metal rods that have been bent in opposite directions of each other\./
				@tpick_vars["Current Trap Type"] = "Rods trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /Near the lock mechanism\, you notice a pair of small metal rods surrounded by a crimson glow\.|Looking closely into the keyhole\, you notice a pair of small metal rods that have a slight reddish glow about them\./
				@tpick_vars["Current Trap Type"] = "Rods trap has already been disarmed with 408."
				break
	#####Boomer information#####
			#Manual detection
			elsif line =~ /Carefully\, you feel around the lock and notice the inside chamber is coated with a strange white substance\.\s+From your experience you recognize this as a common.*detonation system for an explosive mixture that was used to treat the .*\./
				@tpick_vars["Current Trap Type"] = "Boomer"
			#Successful manual disarm
			elsif line =~ /Using a bit of putty from your.*\, you cake a thin layer on the lock casing\, hopefully sufficient to prevent sparks when the metal arm strikes it\./
				@tpick_vars["Current Trap Type"] = "Boomer trap has been disarmed."
				@tpick_vars["Putty Remaining"] -= 1
				break
			#Already manually disarmed
			elsif line =~ /A thin layer of mud or putty has been dabbed on the connecting point of the striking arm and the white substance to prevent it from igniting the.* when it is unlocked\./
				@tpick_vars["Current Trap Type"] = "Boomer trap has already been disarmed."
				break
			#Already disarmed with 408
			elsif line =~ /A deep red glow surrounds the striking arm of the trap mechanism\.\s+You hope it will keep the arm from making contact with the explosive white substance\./
				@tpick_vars["Current Trap Type"] = "Boomer trap has already been disarmed with 408."
				break
	#####No trap found#####
			elsif line =~ /You discover no traps\./
				@tpick_vars["Current Trap Type"] = "No trap found."
				break
	#####Box is already open#####
			elsif line =~ /Um, but it\'s open|There is no lock on that|You blink in surprise as though just becoming aware of.*presence\.|What were you referring to\?|You want to pick a lock on what/
				@tpick_vars["Current Trap Type"] = "Box is already open."
				@tpick_vars["Box Math"] = nil
				break
	#####No putty#####
			elsif line =~ /You figure that if you had some sort of putty/
				tpick_silent(true, "No putty to disarm this trap. Exiting.\nBe sure to fill up your locksmith's container.\nThe script can do it for you by doing: ;tpick buy")
				exit
	#####Roundtime#####
			elsif line =~ /Roundtime|\.\.\.wait/
				break
			end
		end
		update_box_for_window
		all_trap_names = [ "Scarab", "Needle", "Jaws", "Sphere", "Crystal", "Scales", "Sulphur", "Cloud", "Acid Vial", "Springs", "Fire Vial", "Spores", "Plate", "Glyph", "Rods", "Boomer" ]
		
		@stats_data[@tpick_vars["Current Trap Type"]] += 1 if all_trap_names.include?(@tpick_vars["Current Trap Type"])

		@tpick_vars["Time To Disarm Trap"] = true
		if (@tpick_vars["Current Trap Type"] == "No trap found." || @tpick_vars["Current Trap Type"] == "Scarab trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Scarab trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Needle trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Needle trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Needle trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Jaws trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Jaws trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Sphere trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Sphere trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Sphere trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Crystal trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Crystal trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Crystal trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Scales trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Scales trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Scales trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Sulphur trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Sulphur trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Cloud trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Cloud trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Cloud trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Acid vial trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Acid vial trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Acid vial trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Springs trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Springs trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Fire vial trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Fire vial trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Fire vial trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Spores trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Spores trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Spores trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Plate trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Plate trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Glyph trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Glyph trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Rods trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Rods trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Rods trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Boomer trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Boomer trap has already been disarmed." || @tpick_vars["Current Trap Type"] == "Boomer trap has already been disarmed with 408." || @tpick_vars["Current Trap Type"] == "Scarab trap has been disarmed." || @tpick_vars["Current Trap Type"] == "Spores trap has already been set off." || @tpick_vars["Current Trap Type"] == "Sphere trap has already been set off." || @tpick_vars["Current Trap Type"] == "Sulphur trap has already been set off.")
			tpick_silent(nil, @tpick_vars["Current Trap Type"])
			(@tpick_vars["Box Math"] = nil) if (@tpick_vars["Current Trap Type"] =~ /already/)
			@tpick_vars["Manual Trap Checks Remaining"] -= 1
			if (@tpick_vars["Current Trap Type"] == "No trap found.") && (@tpick_vars["Bracers Found Trap"] || @tpick_vars["Manual Trap Checks Remaining"] > 0)
				if @tpick_vars["Bracers Found Trap"]
					tpick_silent(nil, "No trap found but bracers said there was a trap. Checking again.")
				else
					tpick_silent(nil, "Number of trap checks remaining: #{@tpick_vars["Manual Trap Checks Remaining"]}")
				end
				@tpick_vars["Time To Disarm Trap"] = nil
				manually_disarm_trap
			else
				if @tpick_vars["Current Trap Type"] == "No trap found."
					@stats_data["No Trap"] += 1
				end
				waitrt?
				if @load_data["Auto Bundle Vials"] == "Yes" && (GameObj.right_hand.name =~ /vial/ || GameObj.left_hand.name =~ /vial/)
					if @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker" && @rogue_current_task == "Gather trap components" && @rogue_trap_components_needed_names.find{ |name| name =~ /clear vial|thick vial|green vial/ }
						tpick_silent(true, "This vial is needed for your task so we are not bundling it in your locksmith's kit.")
					else
						tpick_bundle_vials
					end
				end
				if @tpick_vars["Current Trap Type"] == "Scarab trap has been disarmed."
					tpick_silent(nil, "Disarming scarab.")
					waitrt?
					tpick_cast_spells (506) if @tpick_vars["Use 506"]
					tpick_cast_spells (1035) if @tpick_vars["Use 1035"]
					sleep 1
					waitrt?
					scarab_object = nil
					GameObj.loot.each{ |i|
						if i.name =~ /#{@tpick_vars["Scarab Name"]}/ && i.noun == "scarab" && !@tpick_vars["All Scarab IDs"].include?(i.id)
							if @load_data["Disarm (408)"] == "Yes"
								loop{
									tpick_cast_spells (515) if @tpick_vars["Use 515"]
									if checkmana < 13
										tpick_silent(true, "Waiting for mana.")
										wait_until { checkmana(13) }
									end
									until checkprep == "Disarm"
										waitrt?
										waitcastrt?
										fput "release" unless checkprep == "Disarm"
										fput "prep 408"
										sleep 0.5
									end
									result = dothistimeout "cast ##{i.id}", 3, /The runes on the scarab go still\.|Cast Roundtime/
									if result =~ /The runes on the scarab go still\./
										scarab_object = i
										break
									elsif result =~ /Cast Roundtime/
										nil
									end
								}
							else
								waitrt?
								result = dothistimeout "disarm ##{i.id}", 5, /^As you reach for the|^Knowing how delicate magical runes can be/i
								if result =~ /^As you reach for the/
									nil
								elsif result =~ /^Knowing how delicate magical runes can be/
									scarab_object = i
								end
							end
						end
						break if scarab_object
					}
					tpick_say("Scarab Safe")
					until checkright == "scarab" || checkleft == "scarab"
						waitrt?
						fput "get ##{scarab_object.id}"
						sleep 0.5
					end
					@stats_data["Pool Scarabs Received"] += 1 if @tpick_vars["Picking Mode"] == "worker"
					@stats_data["Loot Session"]["Scarabs"] += 1
					@stats_data["Loot Total"]["Scarabs"] += 1 if @load_data["Track Loot"] == "Yes"
					tpick_put_stuff_away
				end
				tpick_put_stuff_away
				if (@tpick_vars["Disarm Only"])
					if (@tpick_vars["Bash Open Boxes"])
						bash_the_box_open
					else
						@tpick_vars["Box Math"] = nil
						nil
					end
				else
					if @tpick_vars["Always Use Wedge"]
						wedge_lock
					else
						measure_lock
					end
				end
			end
		elsif @tpick_vars["Current Trap Type"] == "Couldn't disarm trap, trying again."
			tpick_silent(nil, @tpick_vars["Current Trap Type"])
			@tpick_vars["Need 404"] = "yes"
			tpick_cast_spells (404)
			tpick_cast_spells (506) if @tpick_vars["Use 506"]
			manually_disarm_trap
		elsif @tpick_vars["Current Trap Type"].nil?
			tpick_silent(true, "Something went wrong on my end, repeating the DISARM command.")
			tpick_cast_spells (404)
			tpick_cast_spells (506) if @tpick_vars["Use 506"]
			manually_disarm_trap
		elsif (@tpick_vars["Current Trap Type"] == "Acid vial trap has been set off." || @tpick_vars["Current Trap Type"] == "Acid vial trap has already been set off.")
			tpick_silent(true, "#{@tpick_vars["Current Trap Type"]}\nLock has been fused.")
			if (@tpick_vars["Disarm Only"])
				if (@tpick_vars["Bash Open Boxes"])
					bash_the_box_open
				else
					@tpick_vars["Box Math"] = nil
					nil
				end
			else
				fused_lock_disarm
			end
		elsif @tpick_vars["Current Trap Type"] == "Box is already open."
			tpick_silent(nil, @tpick_vars["Current Trap Type"])
			if @tpick_vars["Picking Mode"] == "solo"
				open_solo
			elsif @tpick_vars["Picking Mode"] == "other"
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				nil
			elsif @tpick_vars["Picking Mode"] == "worker"
				nil
			end
		elsif @tpick_vars["Current Trap Type"] == "Plate"
			tpick_silent(nil, "Found a #{@tpick_vars["Current Trap Type"]} trap.")
			if (@tpick_vars["Disarm Only"])
				if (@tpick_vars["Bash Open Boxes"])
					bash_the_box_open
				else
					@tpick_vars["Box Math"] = nil
					nil
				end
			else
				if (@load_data["404"] =~ /detect/i) && (@tpick_vars["Disarm Skill"] > @tpick_vars["Trap Difficulty"]) && (@tpick_vars["Trap Difficulty"]) && (@tpick_vars["Use 404/Trap Higher Than Setting"].nil?)
					tpick_silent(nil, "According to your settings you want to stop 404 when it's not needed to disarm a trap.")
					tpick_stop_spell(404)
				end
				plate_trap_disarm
			end
		elsif @tpick_vars["Current Trap Type"] == "Jaws trap has already been disarmed with 408. Can't pick it." || @tpick_vars["Current Trap Type"] == "Jaws trap has already been set off."
			tpick_silent(nil, @tpick_vars["Current Trap Type"])
			if (@tpick_vars["Disarm Only"])
				if (@tpick_vars["Bash Open Boxes"])
					bash_the_box_open
				else
					@tpick_vars["Box Math"] = nil
					nil
				end
			else
				fused_lock_disarm
			end
		else
			if @tpick_vars["Current Trap Type"] == "Scales trap found, need to use dagger to disarm." || @tpick_vars["Current Trap Type"] == "Sphere trap found, need to use lockpick to disarm."
				tpick_silent(nil, @tpick_vars["Current Trap Type"])
			else
				tpick_silent(nil, "Found a #{@tpick_vars["Current Trap Type"]} trap.")
			end
			if trap_cant_be_disarmed
				tpick_silent(true, "Trap difficulty is too high according to your settings. Can't open box.")
				if @tpick_vars["Picking Mode"] == "solo"
					where_to_stow_box
				elsif @tpick_vars["Picking Mode"] == "other"
					tpick_say("Can't Open Box")
					open_others
				elsif @tpick_vars["Picking Mode"] == "ground"
					@tpick_vars["Box Opened"] = nil
					@tpick_vars["Box Was Not Locked"] = nil
					@tpick_vars["Can't Open Plated Box Count"] += 1
				elsif @tpick_vars["Picking Mode"] == "worker"
					@tpick_vars["Give Up On Box"] = true
				end
			else
				tpick_silent(nil, "Attempting to disarm trap.") if @tpick_vars["Current Trap Type"] != "Scales" && @tpick_vars["Time To Disarm Trap"].nil?
				if @tpick_vars["Current Trap Type"] == "Scales"
					tpick_silent(nil, "Scales trap found, picking lock first then disarming.")
					@tpick_vars["Scale Trap Found"] = true
					measure_lock
				elsif @tpick_vars["Current Trap Type"] == "Scales trap found, need to use dagger to disarm."
					disarm_scale
				elsif (@tpick_vars["Current Trap Type"] == "Needle" || @tpick_vars["Current Trap Type"] == "Jaws" || @tpick_vars["Current Trap Type"] == "Crystal" || @tpick_vars["Current Trap Type"] == "Sulphur" || @tpick_vars["Current Trap Type"] == "Cloud" || @tpick_vars["Current Trap Type"] == "Acid Vial" || @tpick_vars["Current Trap Type"] == "Springs" || @tpick_vars["Current Trap Type"] == "Fire Vial" || @tpick_vars["Current Trap Type"] == "Spores" || @tpick_vars["Current Trap Type"] == "Glyph" || @tpick_vars["Current Trap Type"] == "Rods" || @tpick_vars["Current Trap Type"] == "Boomer" || @tpick_vars["Current Trap Type"] == "Sphere" || @tpick_vars["Current Trap Type"] == "Sphere trap found, need to use lockpick to disarm." || @tpick_vars["Current Trap Type"] == "Scarab")
					manually_disarm_trap
				end
			end
		end
	end
end

def check_disk
	@tpick_vars["Stow In Disk"] = true
	unless disk = GameObj.loot.find { |obj| obj.name =~ /#{Char.name} disk|coffin/ }
		if @tpick_vars["Checked For Disk"].nil?
			tpick_silent(true, "Waiting 4 seconds for disk")
			40.times { break if GameObj.loot.any? { |obj| obj.name =~ /#{Char.name} disk|coffin/ }; sleep 0.1 }
				disk = GameObj.loot.find { |obj| obj.name =~ /#{Char.name} disk|coffin/ }
			end
		end
	if disk.nil?
		tpick_silent(nil, "No disk found.") if @tpick_vars["Checked For Disk"].nil?
		exit
	end
	if disk and disk.contents.nil?
		dothistimeout "look in ##{disk.id}", 3, /In the|There is nothing in/
	end
	disk.contents.each{ |item|
		break if $tpick_stop_immediately
		if item.type =~ /box/i
			waitrt?
			if @tpick_vars["Pop Boxes"]
				@tpick_vars["Current Box"] = item
				update_box_for_window
				pop_boxes_begin(check_mithril_or_enruned)
			else
				fput "get ##{item.id}"
				@tpick_vars["Start Time"] = Time.now
				@tpick_vars["Critter Name"] = nil
				start_values_nilled
				@tpick_vars["Manual Trap Checks Remaining"] = @load_data["Trap Check Count"].dup
				if (@tpick_vars["Gnomish Bracers"]) && (@load_data["Bracer Tier 2"] == "Yes")
					gnomish_bracers_trap_check
				else
					manually_disarm_trap
				end
			end
		end
	}
end

def start_solo
	total_boxes_count
	@tpick_vars["All Box IDs"].each{ |box|
		exit if $tpick_exit_tpick_immediately
		break if $tpick_stop_immediately
		update_all_stats
		tpick_stop_403_404
		fput "get ##{box}"
		@tpick_vars["Start Time"] = Time.now
		@tpick_vars["Critter Name"] = nil
		start_values_nilled
		stuff_to_do
		@tpick_vars["Manual Trap Checks Remaining"] = @load_data["Trap Check Count"].dup
		if (@tpick_vars["Gnomish Bracers"]) && (@load_data["Bracer Tier 2"] == "Yes")
			gnomish_bracers_trap_check
		else
			manually_disarm_trap
		end
	}
	check_disk if $tpick_stop_immediately.nil?
end

def start_others
	waitrt?
	$tpick_currently_working_on_box = nil
	exit if $tpick_exit_tpick_immediately
	fput "accept"
	while line = get
		if line =~ /^You accept ([a-zA-Z]+)\'s offer and are now holding.*\.$/i || line =~ /^([a-zA-Z]+) offers you (.*) #{@tpick_vars["All Box Types"]}.*\.  Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds\.$/
			@tpick_vars["Customer"] = $1
			$tpick_currently_working_on_box = true
			sleep 1
			fput "accept" if line =~ /^([a-zA-Z]+) offers you (.*) #{@tpick_vars["All Box Types"]}.*\.  Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds\.$/ && checkright.nil?
			@tpick_vars["Start Time"] = Time.now
			tpick_stop_403_404
			@tpick_vars["Critter Name"] = nil
			start_values_nilled
			@tpick_vars["Manual Trap Checks Remaining"] = @load_data["Trap Check Count"].dup
			if (@tpick_vars["Gnomish Bracers"]) && (@load_data["Bracer Tier 2"] == "Yes")
				gnomish_bracers_trap_check
			else
				manually_disarm_trap
			end
			update_all_stats
			break
		end
	end
end

def relock_boxes_for_rogues
	until checkright
		waitrt?
		fput "get ##{@tpick_vars["Needed Pick ID"]}"
		sleep 0.3
	end
	loop{
		waitrt?
		result = dothistimeout "lmas relock ##{@tpick_vars["Current Box"].id}", 5, /Then\.\.\.CLICK\!  It locks\!/
		break if result =~ /Then\.\.\.CLICK\!  It locks\!/
	}
	loop{
		waitrt?
		result = dothistimeout "pick ##{@tpick_vars["Current Box"].id}", 5, /Then\.\.\.CLICK\!  It opens\!/
		break if result =~ /Then\.\.\.CLICK\!  It opens\!/
	}
	tpick_put_stuff_away
end

def tpick_bundle_vials
	start_script "sorter" if @tpick_vars["Start Sorter"]
	if GameObj.right_hand.name =~ /vial/
		@tpick_vars["Current Vial"] = GameObj.right_hand.id
	elsif GameObj.left_hand.name =~ /vial/
		@tpick_vars["Current Vial"] = GameObj.left_hand.id
	end
	tpick_stow_box if (@tpick_vars["Picking Mode"] == "solo" || @tpick_vars["Picking Mode"] == "other")
	tpick_put_stuff_away
	wait_until { checkright.nil? && checkleft.nil? }
	fput "remove ##{@tpick_vars["Locksmith's Container"].id}"
	20.times{
		break if checkright
		sleep 0.1
	}
	if checkright.nil?
		fput "get ##{@tpick_vars["Locksmith's Container"].id}"
		15.times{
			break if checkright
			sleep 0.1
		}
	end
	if checkright.nil?
		tpick_silent(true, "I could not find your locksmith's container to bundle a vial inside of it.")
	else
		fput "get ##{@tpick_vars["Current Vial"]}"
		wait_until { checkleft }
		fput "bundle"
		fput "wear ##{@tpick_vars["Locksmith's Container"].id}"
		@tpick_vars["Vials Remaining"] += 1
		@tpick_vars["Vials Remaining"] = [@tpick_vars["Vials Remaining"], 100].min
		update_box_for_window
		wait_until { checkright.nil? }
	end
	if @tpick_vars["Picking Mode"] == "solo" || @tpick_vars["Picking Mode"] == "other"	
		tpick_get_box
		wait_until { checkright }
	end
end

def open_current_plinite
	tpick_put_stuff_away
	waitrt?
	fput "pluck ##{@tpick_vars["Current Box"].id}"
	@tpick_stow_current_box = true
	tpick_put_stuff_away
end

def start_plinites
	@tpick_vars["All Box IDs"].each{ |plinite|
		tpick_put_stuff_away
		@tpick_vars["Plinite Already Open"] = nil
		@tpick_vars["Can't Determine Plinite Difficulty"] = nil
		until GameObj.right_hand.id == plinite || GameObj.left_hand.id == plinite
			waitrt?
			fput "get ##{plinite}"
			sleep 0.2
		end
		@tpick_vars["Current Box"] = GameObj.right_hand if GameObj.right_hand.name =~ /plinite/
		@tpick_vars["Current Box"] = GameObj.left_hand if GameObj.left_hand.name =~ /plinite/
		update_box_for_window
		detect_plinite
	}
end

def gnomish_bracers_check_result
	waitrt?
	@tpick_vars["Bracers Found Trap"] = nil
	result = dothistimeout "rub my #{@tpick_vars["Gnomish Bracers"]}", 3, /begins to glow with a deep red light|begins to glow with a bright green light|Perhaps you need to be holding a container/
	if result =~ /begins to glow with a deep red light/
		waitrt?
		@tpick_vars["Bracers Found Trap"] = true
		manually_disarm_trap
	elsif result =~ /begins to glow with a bright green light/
		waitrt?
		if (@tpick_vars["Disarm Only"])
			if (@tpick_vars["Bash Open Boxes"])
				bash_the_box_open
			else
				@tpick_vars["Box Math"] = nil
				tpick_drop_box
			end
		else
			measure_lock
		end
	elsif result =~ /Perhaps you need to be holding a container/
		waitrt?
		manually_disarm_trap
	elsif result.nil?
		gnomish_bracers_check_result
	end
end

def update_box_for_window
	needed_info = {}
	needed_info["Box Name"] = @tpick_vars["Current Box"].name
	needed_info["Box ID"] = @tpick_vars["Current Box"].id
	needed_info["Lock Difficulty"] = @tpick_vars["Lock Difficulty"]
	needed_info["Trap Difficulty"] = @tpick_vars["Trap Difficulty"]
	needed_info["Current Trap"] = @tpick_vars["Current Trap Type"]
	needed_info["Tip Amount"] = @tpick_vars["Offered Tip Amount"]
	needed_info["Critter Name"] = @tpick_vars["Critter Name"]
	needed_info["Critter Level"] = @tpick_vars["Critter Level"]
	needed_info["Putty Remaining"] = @tpick_vars["Putty Remaining"]
	needed_info["Cotton Remaining"] = @tpick_vars["Cotton Remaining"]
	needed_info["Vials Remaining"] = @tpick_vars["Vials Remaining"]
	needed_info["Window Message"] = @tpick_vars["Window Message"]
	TpickMain.update_info_box = needed_info
end

def gnomish_bracers_trap_check
	if @tpick_vars["Picking Mode"] != "ground" && @tpick_vars["Picking Mode"] != "worker"
		wait_until { GameObj.right_hand.id != nil}
		@tpick_vars["Current Box"] = GameObj.right_hand
		update_box_for_window
	end
	tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
	tpick_get_current_worker_box if @tpick_vars["Picking Mode"] == "worker" && @tpick_vars["Current Box"].nil?
	gnomish_bracers_check_result
end

def find_gnomish_lockpick
	found_pick = nil
	spin_number = 0
	waitrt?
	fput "turn my #{@tpick_vars["Gnomish Bracers"]}"
	while line = get
		if line =~ /^You spin your/
			(found_pick = true) if (line =~ /#{@tpick_vars["Needed Pick"]}/)
			break
		end
	end
	if found_pick.nil?
		loop{
			spin_number += 1
			waitrt?
			fput "spin my #{@tpick_vars["Gnomish Bracers"]}"
			while line = get
				if line =~ /^You spin your/
					(found_pick = true) if (line =~ /#{@tpick_vars["Needed Pick"]}/)
					break
				end
			end
			break if (found_pick) || (spin_number > 20)
		}
	end
	if (spin_number > 20)
		tpick_silent(true, "Couldn't find the lockpick needed to pick this lock in your #{@tpick_vars["Gnomish Bracers"]}.")
		next_pick
	else
		pick_3
	end
end

def get_wire_order_numbers
	move 'out' if checkpaths 'out'
	target_room = Map.list.find_all { |room| room.tags.include?("rogue guild toolbenchs") || room.tags.include?("rogue guild workshop") }
	start_script 'go2', [ Room.current.find_nearest(target_room) ]
	wait_while{ running?('go2') }
	move 'go toolbench'
	fput "read sign"
	@tpick_repair_info = {}
	while line = get
		if line =~ /(\d+)\.\) a thin ([a-zA-Z]+) wire\s+(\d+)/
			order_number = $1
			material_name = $2
			order_cost = $3
			@tpick_repair_info[material_name] = { "Order Number" => order_number, "Order Cost" => order_cost }
			$tpick_copper_wire = $1
			$tpick_copper_wire_cost = $2
		elsif line =~ /a thin bar of vaalin/
			break
		end
	end
	move 'out' if checkpaths 'out'
end

def fused_lock_disarm
	if @rogue_current_task == "Wedge open boxes" && @rogue_automate_current_task_with_tpick && @tpick_vars["Picking Mode"] == "worker"
		tpick_silent(true, "Working on a ;rogues task to use wedges so I'm going to use a wedge on this box.")
		@tpick_vars["Use A Wedge"] = true
		wedge_lock
	elsif Stats.prof == 'Rogue'
		tpick_silent(nil, "Going to try wedging this box open.")
		wedge_lock
	elsif Stats.prof != 'Rogue' and !Spell[407].known?
		tpick_silent(true, "Can't open this box.")
		if @tpick_vars["Picking Mode"] == "solo"
			where_to_stow_box
		elsif @tpick_vars["Picking Mode"] == "other"
			tpick_say("Can't Open Box")
			open_others
		elsif @tpick_vars["Picking Mode"] == "ground"
			@tpick_vars["Can't Open Plated Box Count"] += 1
			@tpick_vars["Box Opened"] = nil
		elsif @tpick_vars["Picking Mode"] == "worker"
			nil
		end
	elsif Stats.prof != 'Rogue' and Spell[407].known?
		tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
		tpick_silent(nil, "Going to try popping this box.")
		cast_407
	end
end

def disarm_the_trap
	box_is_disarmed = nil
	loop{
		tpick_cast_spells (402) if @tpick_vars["Use 402"]
		tpick_cast_spells (404) if @tpick_vars["Use 404"]
		tpick_cast_spells (515) if @tpick_vars["Use 515"]
		tpick_prep_spell(408, "Disarm")
		fput "cast at ##{@tpick_vars["Current Box"].id}"
		while line = get
			if line =~ /Now to isolate the offending mechanism and disable it\.\.\.The.*vibrates slightly but nothing else happens\.|You begin to probe the.*for unusual mechanisms\.\.\.The.*vibrates slightly but nothing else happens\./
				tpick_silent(nil, "Couldn't disarm trap. Trying again.")
				break
			elsif line =~ /Now to isolate the offending mechanism and disable it\.\.\.Your heart skips a beat as you hear a small sizzle from the.*keyhole\..*You begin to jump back\, but not in time as the entire.*explodes in a deafening\, fiery detonation\!/
				tpick_silent(true, "The trap was set off! Script is now exiting.")
				exit
			elsif line =~ /Now to isolate the offending mechanism and disable it\.\.\.The.*pulses once with a deep crimson light\!/
				box_is_disarmed = true
				tpick_silent(nil, "Box is disarmed.")
				break
			end
		end
		break if box_is_disarmed
	}
	pop_open_box
end

def pop_boxes_begin(check_mithril_or_enruned)
	tpick_put_stuff_away
	if @tpick_vars["Picking Mode"] == "worker"
		tpick_get_current_worker_box
	else
		until checkright
			fput "get ##{@tpick_vars["Current Box"].id}"
			sleep 0.2
		end
		wait_until{ GameObj.right_hand.name != "Empty" }
		@tpick_vars["Current Box"] = GameObj.right_hand
		update_box_for_window
	end
	@tpick_vars["Start Time"] = Time.now
	@tpick_vars["Remaining 416 Casts"] = @load_data["Number Of 416 Casts"]
	stuff_to_do
	@tpick_vars["Hand Status"] = nil
	if @tpick_vars["Picking Mode"] == "worker"
		if @tpick_vars["Current Box"].name =~ /enruned|mithril/i
			@tpick_vars["Hand Status"] = "mithril or enruned"
		else
			@tpick_vars["Hand Status"] = "good"
		end
	else
		@tpick_vars["Check For Command"] = "glance"
		check_mithril_or_enruned.call
	end
	wait_until { @tpick_vars["Hand Status"] }
	if @tpick_vars["Current Box"].name =~ /plinite/i && @tpick_vars["Picking Mode"] == "worker"
		tpick_silent(true, "Can't open plinites when popping.")
		@tpick_vars["Give Up On Box"] = true
	elsif @tpick_vars["Hand Status"] == "mithril or enruned" && @load_data["Pick Enruned"] == "No"
		tpick_silent(true, "Can't open this box because it is mithril or enruned.")
		waitrt?
		if @tpick_vars["Picking Mode"] == "ground"
			tpick_drop_box
		elsif @tpick_vars["Picking Mode"] == "solo"
			where_to_stow_box
		elsif @tpick_vars["Picking Mode"] == "worker"
			@tpick_vars["Give Up On Box"] = true
		end
		@tpick_vars["Box Opened"] = nil
	elsif @tpick_vars["Hand Status"] == "empty"
		tpick_silent(true, "No box was found in your hands.")
		exit
	else
		if @load_data["Phase (704)"] == "Yes"
			cast_704_at_box
		else
			tpick_silent(nil, "Checking for traps.")
			tpick_drop_box if @tpick_vars["Picking Mode"] == "ground"
			check_for_trap
		end
	end
end

def pop_open_box
	if @tpick_vars["Hand Status"] == "mithril or enruned" && @load_data["Pick Enruned"] == "Yes"
		measure_lock
	else
		box_is_open = nil
		tpick_silent(nil, "Popping box.")
		loop{
			unless @load_data["403"] =~ /never/i
				result = Lich::Util.quiet_command_xml("spell active", /You currently have the following active effects/)
				tpick_cast_spells (403)
			end
			tpick_cast_spells (515) if @tpick_vars["Use 515"]
			tpick_prep_spell(407, "Unlock")
			fput "cast at ##{@tpick_vars["Current Box"].id}"
			waitrt?
			while line = get
				if line =~ /The.*vibrates slightly but nothing else happens\.|Suddenly\, part of the.*face breaks away and a pair of gleaming jaws snap shut before the lockplate\!\s+Good thing your hand wasn\'t there\!|Roundtime/
					break
				elsif line =~ /You hear a soft click from the.*and it suddenly flies open\.|But the.*is already open\./
					@tpick_vars["Do Not Ask To Check"] = true
					box_is_open = true
					break
				end
			end
			break if box_is_open
		}
		open_solo if @tpick_vars["Picking Mode"] != "ground" && @tpick_vars["Picking Mode"] != "worker"
	end
end

def check_for_trap
	tpick_cast_spells (402) if @tpick_vars["Use 402"]
	tpick_cast_spells (404) if @tpick_vars["Use 404"]
	tpick_cast_spells (515) if @tpick_vars["Use 515"]
	@tpick_vars["Current Trap Type"] = nil
	tpick_prep_spell(416, "Piercing Gaze")
	fput "cast at ##{@tpick_vars["Current Box"].id}"
	while line = get
		if line =~ /Peering closely into the lock\, you spy an? [a-zA-Z]+ (.*) scarab wedged into the lock mechanism\./
			@tpick_vars["Scarab Name"] = $1
			@tpick_vars["Current Trap Type"] = "Scarab"
		elsif line =~ /You notice what appears to be a sharp sliver of metal nestled in a hole next to the lock plate\./
			@tpick_vars["Current Trap Type"] = "Needle"
		elsif line =~ /You notice a discolored oval ring around the outside of the.*which makes you suspicious\.\s+Your suspicions are confirmed when you look inside the keyhole and notice the spring\-loaded jaws pressed flush against the.*walls\./
			@tpick_vars["Current Trap Type"] = "Jaws"
		elsif line =~ /You see a tiny sphere imbedded in the lock mechanism\./
			@tpick_vars["Current Trap Type"] = "Sphere"
		elsif line =~ /You can see a small crystal imbedded in the locking mechanism\./
			@tpick_vars["Current Trap Type"] = "Crystal"
		elsif line =~ /You see a cord stretched between the lid and case\./
			@tpick_vars["Current Trap Type"] = "Scales"
		elsif line =~ /Peering through the .*\, you notice that the lock casing is coated with a rough\, grainy substance\, and a small bladder is wedged between the tumblers of the lock\./
			@tpick_vars["Current Trap Type"] = "Sulphur"
		elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\./
			@tpick_vars["Current Trap Type"] = "Cloud"
		elsif line =~ /You notice what appears to be a tiny vial placed just past the tumblers of the lock mechanism\.\s+It appears that any tampering with the lock mechanism will cause the tumblers to crush the vial\./
			@tpick_vars["Current Trap Type"] = "Acid Vial"
		elsif line =~ /Peering through the .*\, you notice that the hinges have some springs incorporated into the design in an unusual fashion\./
			@tpick_vars["Current Trap Type"] = "Springs"
		elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of fire\-red liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\./
			@tpick_vars["Current Trap Type"] = "Fire Vial"
		elsif line =~ /You see a thin tube extending from the lock mechanism down into the .*\.\s+The tube appears to be filled with a greenish powder\./
			@tpick_vars["Current Trap Type"] = "Spores"
		elsif line =~ /There appears to be a plate over the lock\, sealing it and preventing any access to the tumblers\./
			@tpick_vars["Current Trap Type"] = "Plate"
		elsif line =~ /Suddenly a dark splotch erupts from the lock mechanism and envelops you\!  Time seems to slow down and almost stop\.\.\./
			@tpick_vars["Current Trap Type"] = "Glyph"
		elsif line =~ /Near the lock mechanism\, you notice a pair of small metal rods a hair\'s width from rubbing together\./
			@tpick_vars["Current Trap Type"] = "Rods"
		elsif line =~ /The inside chamber is lined with some unidentifiable substance\./
			@tpick_vars["Current Trap Type"] = "Boomer"
		elsif line =~ /You gaze at the.*but your vision is obscured\./
			@tpick_vars["Current Trap Type"] = "check again"
		elsif line =~ /Roundtime/
			@stats_data[@tpick_vars["Current Trap Type"]] += 1 if @tpick_vars["Current Trap Type"] != "check again"
			break
		end
	end
	if @tpick_vars["Current Trap Type"] != "check again" && @tpick_vars["Current Trap Type"] != nil
		tpick_silent(nil, "Found a #{@tpick_vars["Current Trap Type"]} trap.")
	end
	if @tpick_vars["Current Trap Type"] == "check again"
		tpick_silent(nil, "Failed detecting a trap, trying again.")
		check_for_trap
	elsif @tpick_vars["Current Trap Type"] == "Needle" || @tpick_vars["Current Trap Type"] == "Jaws" || @tpick_vars["Current Trap Type"] == "Plate"
		tpick_silent(nil, "Trap is safe to skip disarming.")
		pop_open_box
	elsif @tpick_vars["Current Trap Type"] == "Crystal" || @tpick_vars["Current Trap Type"] == "Springs"
		tpick_silent(nil, "Trap is safe to use 408 on. Must be disarmed before popping.")
		disarm_the_trap
	elsif @tpick_vars["Current Trap Type"] == "Scarab" || @tpick_vars["Current Trap Type"] == "Sphere" || @tpick_vars["Current Trap Type"] == "Scales" || @tpick_vars["Current Trap Type"] == "Acid Vial" || @tpick_vars["Current Trap Type"] == "Fire Vial" || @tpick_vars["Current Trap Type"] == "Spores" || @tpick_vars["Current Trap Type"] == "Boomer" || @tpick_vars["Current Trap Type"] == "Cloud" || @tpick_vars["Current Trap Type"] == "Rods"
		tpick_silent(nil, "408 might set off trap. Must be disarmed before popping.")
		if @load_data["Only Disarm Safe"] == "Yes"
			tpick_silent(true, "Skipping box due to tpick setting 'Only Disarm Safe' is set to yes.")
			where_to_stow_box
			@tpick_vars["Box Opened"] = nil
		else
			disarm_the_trap
		end
	elsif @tpick_vars["Current Trap Type"] == "Sulphur"
		tpick_silent(true, "Skipping box because 408 will set this trap off.")
		if @tpick_vars["Picking Mode"] == "worker"
			@tpick_vars["Give Up On Box"] = true
		else
			where_to_stow_box
			@tpick_vars["Box Opened"] = nil
		end
	elsif @tpick_vars["Current Trap Type"] == "Glyph"
		tpick_silent(true, "The box had a glyph trap on it. Taking you back to the room you started in.")
		while checkroom =~ /Temporal Rift/
			move 'e'
			sleep 0.1
		end
		sleep 0.5
		start_script "go2", [@tpick_vars["Starting Room"]]
		wait_while{ running?('go2') }
		tpick_silent(true, "This box has a glyph trap and cannot be opened.")
		if @tpick_vars["Picking Mode"] == "worker"
			@tpick_vars["Give Up On Box"] = true
		else
			where_to_stow_box
			@tpick_vars["Box Opened"] = nil
		end
	elsif @tpick_vars["Current Trap Type"].nil?
		tpick_silent(nil, "No trap found.")
		@tpick_vars["Remaining 416 Casts"] -= 1
		if @tpick_vars["Remaining 416 Casts"] < 1
			@stats_data["No Trap"] += 1
			pop_open_box
		else
			tpick_silent(nil, "416 casts remaining: #{@tpick_vars["Remaining 416 Casts"]}.")
			check_for_trap
		end
	end
end

def fill_up_locksmith_container(check_lock_smiths_container)
	move 'out' if checkpaths 'out'
	start_script 'go2', [ 'bank', '--disable-confirm' ]
	wait_while{ running?('go2') }
	fput "unhide" if hidden?
	fput "depo all"
	fput "withdraw 1000"
	start_script 'go2', [ Room[Room.current.find_nearest_by_tag('locksmith')], '--disable-confirm' ]
	wait_while{ running?('go2') }
	waitrt?
	fput "order"
	while line = get
		if line =~ /\d+.*\s{2}(\d+).*(locksmith\'s|tool kit|toolkit|leather case)/
			@tpick_vars["Toolkit Order Number"] = $1
		elsif line =~ /(\d+).*(locksmith\'s|tool kit|toolkit|leather case)/
			@tpick_vars["Toolkit Order Number"] = $1
		end
		break if line =~ /You can APPRAISE/
	end
	tpick_put_stuff_away
	wait_until { checkright.nil? && checkleft.nil? }
	until checkright
		waitrt?
		fput "remove ##{@tpick_vars["Locksmith's Container"].id}"
		sleep 0.2
	end
	buy_locksmith_pouch
	if @tpick_vars["Putty Remaining"] < 50 || @tpick_vars["Cotton Remaining"] < 50
		buy_locksmith_pouch
	end
	fput "wear ##{@tpick_vars["Locksmith's Container"].id}"
	check_lock_smiths_container.call
end

def pop_start
	@tpick_vars["All Box IDs"].each{ |box|
		@tpick_vars["Current Box"] = box
		update_box_for_window
		pop_boxes_begin(check_mithril_or_enruned)
	}
	check_disk
end

check_lock_smiths_container = proc{
	action = proc { |server_string|
		if server_string =~ /lump of squishy white putty with about (\d+) pinch|(\d+) little ball|(\d+) vials? of liquid|you see a pinch of squishy white putty/
			if server_string =~ /you see a lump of squishy white putty with about (\d+) pinch/
				@tpick_vars["Putty Remaining"] = $1.to_i
			elsif server_string =~ /you see a pinch of squishy white putty/
				@tpick_vars["Putty Remaining"] = 1
			else 
				@tpick_vars["Putty Remaining"] = 0
			end
			if server_string =~ /(\d+) little ball/
				@tpick_vars["Cotton Remaining"] = $1.to_i
			else
				@tpick_vars["Cotton Remaining"] = 0
			end
			if server_string =~ /(\d+) vials? of liquid/
				@tpick_vars["Vials Remaining"] = $1.to_i
			else
				@tpick_vars["Vials Remaining"] = 0
			end
			DownstreamHook.remove("#{script.name}_check_locksmiths_container")
			nil
		elsif server_string =~ /There is nothing|In the/
			(@tpick_vars["Putty Remaining"] = 0) unless (@tpick_vars["Putty Remaining"])
			(@tpick_vars["Cotton Remaining"] = 0) unless (@tpick_vars["Cotton Remaining"])
			(@tpick_vars["Vials Remaining"] = 0) unless (@tpick_vars["Vials Remaining"])
			DownstreamHook.remove("#{script.name}_check_locksmiths_container")
			server_string
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_check_locksmiths_container", action)
	silence_me
	if running? "sorter"
		kill_script "sorter"
		wait_until { !running? "sorter" }
		@tpick_vars["Start Sorter"] = true
	end
	fput "look in ##{@tpick_vars["Locksmith's Container"].id}"
	silence_me
	update_box_for_window
}

def where_to_stow_box
	if @tpick_vars["Picking Mode"] == "solo"
		if @tpick_vars["Stow In Disk"]
			fput "put ##{@tpick_vars["Current Box"].id} in #{checkname} disk"
		else
			tpick_stow_box
		end
	end
end

def stuff_to_do
	if (@load_data["Rest At Percent"] != "Never") && (@load_data["Pick At Percent"] != "Always") && (@tpick_vars["Picking Mode"] != "worker")
		rest_percent = @load_data["Rest At Percent"].scan(/\d+/).join.to_i
		if rest_percent <= percentmind
			pick_percent = @load_data["Pick At Percent"].scan(/\d+/).join.to_i
			tpick_silent(true, "Resting until mind reaches #{pick_percent}%.")
			wait_until { pick_percent >= percentmind }
		end
	end
end

def check_for_boxes
	@tpick_vars["All Box IDs"] = []
	if @tpick_vars["Open Plinites"]
		GameObj.containers.values.flatten.each{ |i| @tpick_vars["All Box IDs"].push(i.id) if i.name =~ /plinite/ }
	else
		GameObj.containers.values.flatten.each{ |i| @tpick_vars["All Box IDs"].push(i.id) if i.type == "box" }
	end
end

def start_worker
	@tpick_vars["Do Not Ask To Check"] = nil
	tpick_put_stuff_away
	stuff_to_do
	@tpick_vars["Current Box"] = nil
	update_box_for_window
	waitrt?
	if @tpick_vars["Pool NPC"].nil?
		tpick_silent(true, "Get yourself to a worker who assigns you jobs.")
	else
		encumbrance_check if @load_data["Auto Deposit Silvers"].count("^ ") > 0
		@tpick_vars["Offered Tip Amount"] = nil
		exit if @rogue_the_current_task_is_finished || $tpick_exit_tpick_immediately
		if $tpick_stop_immediately.nil?
			if @tpick_vars["Current Minimum Tip"] > 0
				fput "ask ##{@tpick_vars["Pool NPC"].id} for job minimum #{@tpick_vars["Current Minimum Tip"]}"
			else
				fput "ask ##{@tpick_vars["Pool NPC"].id} for job"
			end
			while line = get
				if line =~ /says\, \"You should finish the job you\'re working on first\.  If you\'re done\, ask me to CHECK it for you\.\"/
					@tpick_vars["Next Task"] = nil
					break
				elsif line =~ /says\, \"Ah\, here we are\.  The client is offering a tip of (.*) silvers? and mentioned it being from [a-zA-Z]+ (.*) \(level (\d+)\)\./
					@tpick_vars["Offered Tip Amount"] = $1.delete(",").to_i	
					@tpick_vars["Critter Name"] = $2
					@tpick_vars["Critter Level"] = $3.to_i
					@tpick_vars["Next Task"] = nil
					break
				elsif line =~ /says\, \"Ah\, here we are\.  The client is offering a tip of (.*) silvers? and they aren't sure where it came from/
					@tpick_vars["Offered Tip Amount"] = $1.delete(",").to_i	
					@tpick_vars["Critter Name"] = "Unknown"
					@tpick_vars["Critter Level"] = Stats.level
					@tpick_vars["Next Task"] = nil
					break
				elsif line =~ /says\, \"You\'ve done enough boxes for now\.  Why don\'t you ask me again about 10 minutes from now\.\"/
					@tpick_vars["Next Task"] = "Wait 300 Seconds"
					break
				elsif line =~ /says\, \"You\'ve done enough boxes for now\.  Why don\'t you ask me again a few minutes from now\.\"/
					@tpick_vars["Next Task"] = "Wait 120 Seconds"
					break
				elsif line =~ /says\, \"You\'ve done enough boxes for now\.  Why don\'t you ask me again about a minute from now\.\"/
					@tpick_vars["Next Task"] = "Wait 60 Seconds"
					break
				elsif line =~ /says\, \"What\, you think we have a job already\?  Wait a bit longer before asking again\.\"/
					@tpick_vars["Next Task"] = "Wait 10 Seconds"
					break
				elsif line =~ /says\, \"You\'ve done enough for a while\.  Why don\'t you rest your mind a bit\?\"/
					@tpick_vars["Next Task"] = "Rest Wait"
					break
				elsif line =~ /says\, \"We don't have any jobs for you at the moment\./ || line =~ /says\, \"You haven\'t quite reflected on your past failure\.|says\, \"You\'ve done enough/
					@tpick_vars["Next Task"] = "Tip Wait"
					break
				elsif line =~ /Come back when you learn a thing or two/
					tpick_silent(true, "You need to train in more ranks in lockpicking before you can pick boxes at the locksmith pool.")
					exit
				end
			end
			if @tpick_vars["Next Task"] =~ /Wait/
				exit if @tpick_vars["Exit When Waiting"]
				wait_time = nil
				if @tpick_vars["Next Task"] == "Tip Wait"
					if (@load_data["Minimum Tip Interval"]) && (@load_data["Minimum Tip Floor"])
						if @tpick_vars["Current Minimum Tip"] > @load_data["Minimum Tip Floor"]
							text = "No boxes at your current minimum rate. Lowering minimum tip wanted."
							@tpick_vars["Current Minimum Tip"] -= @load_data["Minimum Tip Interval"]
							@tpick_vars["Current Minimum Tip"] = [@tpick_vars["Current Minimum Tip"], @load_data["Minimum Tip Floor"].dup].max
							wait_time = @load_data["Standard Wait"] == "No" ? @load_data["Time To Wait"] : 10
						else
							@tpick_vars["Current Minimum Tip"] = @load_data["Minimum Tip Start"].dup
							text = "No boxes at your lowest minimum rate."
							wait_time = @load_data["Standard Wait"] == "No" ? @load_data["Time To Wait"] : 30
						end
					else
						text = "No boxes available at the moment."
						wait_time = @load_data["Standard Wait"] == "No" ? @load_data["Time To Wait"] : 30
					end
				elsif @tpick_vars["Next Task"] == "Rest Wait"
					if (@tpick_vars["Pool Fried Commands"]) && (@load_data["Pick At Percent"] != "Always")
						pool_fried_start_time = Time.now
						pick_percent = @load_data["Pick At Percent"].scan(/\d+/).join.to_i
						tpick_silent(true, "Worker isn't assigning you boxes because your mind is too full. Running your resting routine then coming back to pick more boxes when your mind reaches #{pick_percent}%.")
						starting_pool_room_number = Room.current.id
						start_script "go2", [@tpick_vars["Pool Fried Commands"][0]]
						wait_while { running? "go2" }
						fput "#{@tpick_vars["Pool Fried Commands"][1]}" if @tpick_vars["Pool Fried Commands"][1]
						tpick_silent(true, "Resting until mind reaches #{pick_percent}%.")
						wait_until { pick_percent >= percentmind }
						tpick_silent(true, "Mind cleared out! Heading back to pick more boxes!")
						start_script "go2", [starting_pool_room_number]
						wait_while { running? "go2" }
						@stats_data["Pool Time Spent Waiting"] += (Time.now - pool_fried_start_time)
					else
						text = "Worker isn't assigning boxes because your mind is too full."
						wait_time = @load_data["Standard Wait"] == "No" ? @load_data["Time To Wait"] : 120
					end
				else
					text = "No boxes available at the moment."
					get_time = @tpick_vars["Next Task"].split
					wait_time = @load_data["Standard Wait"] == "No" ? @load_data["Time To Wait"] : get_time[1].to_i
				end
				if wait_time
					tpick_silent(true, "#{text} Waiting #{wait_time} seconds and trying again.")
					real_time_waited = 0
					wait_time.times{
						break if $tpick_stop_immediately
						sleep 1
						real_time_waited += 1
					}
					if real_time_waited > 0
						@stats_data["Pool Time Spent Waiting"] += real_time_waited
					else
						@stats_data["Pool Time Spent Waiting"] += wait_time
					end
				end
				update_all_stats
				start_worker
			else
				if @tpick_vars["Critter Level"] > @load_data["Max Level"]
					tpick_silent(true, "Critter level too high, turning in box. Critter level: #{@tpick_vars["Critter Level"]}.")
					@tpick_vars["Give Up On Box"] = true
					ask_worker
					start_worker
				else
					if @rogue_current_task == "Gather trap components" && @rogue_task_for_footpad_or_administrator == "Footpad"
						tpick_silent(true, "Need #{@rogue_reps_remaining - @rogue_trap_components_needed_array.count} more trap components.")
					end
					tpick_stop_403_404
					@tpick_vars["Manual Trap Checks Remaining"] = @load_data["Trap Check Count"].dup
					if (@tpick_vars["Gnomish Bracers"]) && (@load_data["Bracer Tier 2"] == "Yes") && @tpick_vars["Current Box"].name !~ /plinite/i
						gnomish_bracers_trap_check
					elsif @tpick_vars["Pop Boxes"]
						pop_boxes_begin(check_mithril_or_enruned)
					else
						manually_disarm_trap
					end
					ask_worker unless @tpick_vars["Do Not Ask To Check"]
					start_worker
				end
			end
		end
	end
end

def lock_pick_information
	if @tpick_vars["Recommended Pick"] == "Detrimental"
		@tpick_vars["Needed Pick"] = @load_data["Detrimental"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Detrimental"].first
		@tpick_vars["Recommended Pick Modifier"] = 0.80
	elsif @tpick_vars["Recommended Pick"] == "Ineffectual"
		@tpick_vars["Needed Pick"] = @load_data["Ineffectual"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Ineffectual"].first
		@tpick_vars["Recommended Pick Modifier"] = 0.90
	elsif @tpick_vars["Recommended Pick"] == "Copper"
		@tpick_vars["Needed Pick"] = @load_data["Copper"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Copper"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.00
	elsif @tpick_vars["Recommended Pick"] == "Steel"
		@tpick_vars["Needed Pick"] = @load_data["Steel"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Steel"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.10
	elsif @tpick_vars["Recommended Pick"] == "Gold"
		@tpick_vars["Needed Pick"] = @load_data["Gold"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Gold"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.20
	elsif @tpick_vars["Recommended Pick"] == "Silver"
		@tpick_vars["Needed Pick"] = @load_data["Silver"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Silver"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.30
	elsif @tpick_vars["Recommended Pick"] == "Mithril"
		@tpick_vars["Needed Pick"] = @load_data["Mithril"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Mithril"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.45
	elsif @tpick_vars["Recommended Pick"] == "Ora"
		@tpick_vars["Needed Pick"] = @load_data["Ora"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Ora"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.55
	elsif @tpick_vars["Recommended Pick"] == "Glaes"
		@tpick_vars["Needed Pick"] = @load_data["Glaes"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Glaes"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.60
	elsif @tpick_vars["Recommended Pick"] == "Laje"
		@tpick_vars["Needed Pick"] = @load_data["Laje"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Laje"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.75
	elsif @tpick_vars["Recommended Pick"] == "Vultite"
		@tpick_vars["Needed Pick"] = @load_data["Vultite"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Vultite"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.80
	elsif @tpick_vars["Recommended Pick"] == "Mein"
		@tpick_vars["Needed Pick"] = @load_data["Mein"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Mein"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.85
	elsif @tpick_vars["Recommended Pick"] == "Rolaren"
		@tpick_vars["Needed Pick"] = @load_data["Rolaren"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Rolaren"].first
		@tpick_vars["Recommended Pick Modifier"] = 1.90
	elsif @tpick_vars["Recommended Pick"] == "Accurate"
		@tpick_vars["Needed Pick"] = @load_data["Accurate"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Accurate"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.00
	elsif @tpick_vars["Recommended Pick"] == "Veniom"
		@tpick_vars["Needed Pick"] = @load_data["Veniom"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Veniom"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.20
	elsif @tpick_vars["Recommended Pick"] == "Invar"
		@tpick_vars["Needed Pick"] = @load_data["Invar"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Invar"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.25
	elsif @tpick_vars["Recommended Pick"] == "Alum"
		@tpick_vars["Needed Pick"] = @load_data["Alum"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Alum"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.30
	elsif @tpick_vars["Recommended Pick"] == "Golvern"
		@tpick_vars["Needed Pick"] = @load_data["Golvern"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Golvern"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.35
	elsif @tpick_vars["Recommended Pick"] == "Kelyn"
		@tpick_vars["Needed Pick"] = @load_data["Kelyn"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Kelyn"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.40
	elsif @tpick_vars["Recommended Pick"] == "Vaalin"
		@tpick_vars["Needed Pick"] = @load_data["Vaalin"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Vaalin"].first
		@tpick_vars["Recommended Pick Modifier"] = 2.50
		no_vaalin_picks
	end
end

def nextpick2
	if @tpick_vars["Needed Pick"] == "wedge"
		if @tpick_vars["Open Plinites"] || @tpick_vars["Current Box"].name =~ /plinite/
			if @tpick_vars["Picking Mode"] == "worker"
				tpick_silent(true, "Can't extract this plinite based on my calculations. If you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
				@tpick_vars["Give Up On Box"] = true
			else
				tpick_silent(true, "Can't extract this plinite, OPENing it instead. If you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
				waitrt?
				fput "open ##{@tpick_vars["Current Box"].id}"
			end
		elsif (@tpick_vars["Scale Trap Found"])
			tpick_silent(true, "Can't pick this box and it has a scales trap.")
			if @tpick_vars["Picking Mode"] == "solo"
				where_to_stow_box
			elsif @tpick_vars["Picking Mode"] == "other"
				tpick_say("Can't Open Box")
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				@tpick_vars["Can't Open Plated Box Count"] += 1
				@tpick_vars["Box Opened"] = nil
			end
		else
			if Stats.prof =~ /Rogue/
				tpick_silent(nil, "Can't pick this lock, going to try to wedge it open.")
				wedge_lock
			elsif Spell[407].known? && @tpick_vars["Box Has Glyph Trap"].nil?
				tpick_silent(nil, "Can't pick this lock, going to try to pop it open.")
				cast_407
			else
				tpick_silent(true, "I can't use 407 on this box because it has a glyph trap.") if Spell[407].known? && @tpick_vars["Box Has Glyph Trap"]
				tpick_silent(true, "Couldn't open this box.")
				if @tpick_vars["Picking Mode"] == "other"
					tpick_say("Can't Open Box")
					open_others
				elsif @tpick_vars["Picking Mode"] == "ground"
					@tpick_vars["Box Opened"] = nil
				elsif @tpick_vars["Picking Mode"] == "solo"
					where_to_stow_box
					tpick_put_stuff_away
					sleep 0.1
				end
			end
		end
	elsif @tpick_vars["Before Needed Pick"] == @load_data["Vaalin"]
		tpick_silent(nil, "Trying to pick with Vaalin lockpick again.")
		pick_2
	else
		tpick_silent(nil, "Couldn't pick lock with #{@tpick_vars["Before Pick"]} pick, trying #{@tpick_vars["Recommended Pick"]} pick.")
		pick_2
	end
end

def total_boxes_picked_math
	if (@tpick_vars["Update Information"])
		if (@tpick_vars["Box Math"].nil?)
			tpick_silent(nil, "This box was not added to your total boxes picked nor was the time spent opening it recorded.")
		else
			total_picking_time = (Time.now - @tpick_vars["Start Time"])
			@stats_data["Non-Pool Time Spent Picking"] += total_picking_time
			@stats_data["Non-Pool Boxes Picked"] += 1
			@stats_data["Session Boxes Picked"] += 1
		end
		if @tpick_vars["Picking Mode"] == "solo" || @tpick_vars["Picking Mode"] == "ground"
			@tpick_vars["Total Boxes Number"] -= 1
			@tpick_vars["Total Boxes Number"] = [@tpick_vars["Total Boxes Number"], 0].max
		end
	end
	@stats_data["Non-Pool Time Spent Picking"] = @stats_data["Non-Pool Time Spent Picking"].round(2) unless @stats_data["Non-Pool Time Spent Picking"] == 0
	average_picking_time = (@stats_data["Non-Pool Time Spent Picking"] / @stats_data["Non-Pool Boxes Picked"]).round(2) if @stats_data["Non-Pool Boxes Picked"] > 0
	if @stats_data["Non-Pool Boxes Picked"] > 0
		_respond "\n"
		_respond "####################"
		_respond "####################"
		_respond "Total boxes picked: #{@stats_data["Non-Pool Boxes Picked"].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
		_respond "Total time picking: #{@stats_data["Non-Pool Time Spent Picking"].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} seconds"
		_respond "Average time per box: #{average_picking_time} seconds"
		_respond "####################"
		_respond "####################"
		_respond "\n"
	end
	if (@tpick_vars["Picking Mode"] == "solo" || @tpick_vars["Picking Mode"] == "ground") && (@tpick_vars["Total Boxes Number"] > 0)
		calculate_time_left = (@tpick_vars["Total Boxes Number"] * average_picking_time).round(2) if @stats_data["Non-Pool Boxes Picked"] > 0
		_respond
		_respond "####################"
		_respond "####################"
		_respond "Boxes remaining: #{@tpick_vars["Total Boxes Number"]}"
		(_respond "Estimated time remaining: #{calculate_time_left} seconds") if @stats_data["Non-Pool Boxes Picked"] > 0
		_respond "####################"
		_respond "####################"
		_respond
	end
	@tpick_vars["Box Math"] = true
end

def get_vials_and_stuff
	wait_until { checkrt == 0 }
	3.times{
		waitrt?
		wait_until { checkrt == 0 }
		unless GameObj.right_hand.name =~ /vial/ || GameObj.left_hand.name =~ /vial/
			fput "get vial from ##{@tpick_vars["Locksmith's Container"].id}"
			sleep 0.2
		end
	}
	if GameObj.right_hand.name !~ /vial/ && GameObj.left_hand.name !~ /vial/
		tpick_silent(true, "No vials found bundled in your locksmith's container and no loose vials found in your locksmith's container")
		if Stats.prof == 'Rogue'
			tpick_silent(nil, "Going to try wedging this box open.")
			wedge_lock
		elsif (Stats.prof != 'Rogue') && ((!Spell[407].known?) || (@load_data["Unlock (407)"] !~ /Plate|All/))
			tpick_silent(true, "Can't open this plated box.")
			if @tpick_vars["Picking Mode"] == "solo"
				exit
			elsif @tpick_vars["Picking Mode"] == "other"
				tpick_say("Can't Open Box")
				open_others
			elsif @tpick_vars["Picking Mode"] == "ground"
				(@tpick_vars["Can't Open Plated Box Count"] += 1;@tpick_vars["Box Opened"] = nil)
			elsif @tpick_vars["Picking Mode"] == "worker"
				nil
			end
		elsif (Stats.prof != 'Rogue') && (Spell[407].known?) && (@load_data["Unlock (407)"] =~ /Plate|All/)
			tpick_get_box if @tpick_vars["Picking Mode"] == "ground"
			tpick_silent(nil, "Going to try popping this box.")
			cast_407
		end
	else
		tpick_silent(nil, "Found a loose vial! Let's do this!")
		plate_trap_disarm
	end
end

def total_boxes_count
	@tpick_vars["Total Boxes Number"] = 0
	if @tpick_vars["Picking Mode"] == "ground"
		GameObj.loot.each { |item| (@tpick_vars["Total Boxes Number"] += 1) if (item.type == "box" && !@tpick_vars["Box IDs Already Picked"].include?(item.id)) }
	elsif @tpick_vars["Picking Mode"] == "solo"
		@tpick_vars["Total Boxes Number"] = @tpick_vars["All Box IDs"].length
	end
	total_boxes_picked_math
end

def start_values_nilled
	@tpick_vars["Scale Trap Found"] = nil
	@tpick_vars["Current Trap Type"] = nil
	@tpick_vars["Time To Disarm Trap"] = nil
	@tpick_vars["True Lock Difficulty"] = nil
	@tpick_vars["Box Has Glyph Trap"] = nil
	@tpick_vars["Use 404/Trap Higher Than Setting"] = nil
	@tpick_vars["Current Box"] = nil
	@tpick_vars["Lock Difficulty"] = nil
	@tpick_vars["Trap Difficulty"] = nil
	@tpick_vars["Current Trap Type"] = nil
	@tpick_vars["Offered Tip Amount"] = nil
	@tpick_vars["Critter Name"] = nil
	@tpick_vars["Critter Level"] = nil
	@tpick_vars["Window Message"] = nil
	@tpick_vars["Need 403"] = nil
	@tpick_vars["Need 403"] = true if @load_data["403"] =~ /yes/
	update_box_for_window
end

def count_boxes_in_disk
	unless disk = GameObj.loot.find { |obj| obj.name =~ /#{Char.name} disk|coffin/ }
		tpick_silent(true, "Waiting 4 seconds for disk")
		40.times { break if GameObj.loot.any? { |obj| obj.name =~ /#{Char.name} disk|coffin/ }; sleep 0.1 }
			disk = GameObj.loot.find { |obj| obj.name =~ /#{Char.name} disk|coffin/ }
		end
	if disk and disk.contents.nil?
		dothistimeout "look in ##{disk.id}", 3, /In the|There is nothing in/
	end
	disk.contents.each{|item|
		if item.type =~ /box/i
			@tpick_vars["Total Number Of Boxes"] += 1
			@tpick_vars["All Box IDs"].push(item.id)
		end
	}
end

def ask_worker
	waitrt?
	result = dothistimeout "ask ##{@tpick_vars["Pool NPC"].id} to check", 3, /If you want to give up\, ASK me to CHECK it again within 30 seconds\.\"|\"That\'s some quality work\.  Here\'s your payment of (.*) silvers?\.\"|You aren\'t working on a job\.|Too tough for ya\, eh\?/
	if result =~ /\"That\'s some quality work\.  Here\'s your payment of (.*) silvers?\.\"/
		@stats_data["Pool Tips Silvers"] += $1.delete(",").to_i
		@stats_data["Loot Session"]["Silver"] += $1.delete(",").to_i
		@stats_data["Pool Boxes Picked"] += 1
		@stats_data["Session Boxes Picked"] += 1
		update_all_stats
		start_values_nilled
	elsif result =~ /If you want to give up\, ASK me to CHECK it again within 30 seconds\.\"|You aren\'t working on a job\./ && @tpick_vars["Give Up On Box"]
		fput "ask ##{@tpick_vars["Pool NPC"].id} to check"
	elsif result =~ /Too tough for ya\, eh\?/
		nil
	elsif result.nil?
		tpick_silent(nil, "Didn't recognize game line I was looking for, trying again.")
		ask_worker
	end
	@tpick_vars["Give Up On Box"] = nil
end

def roll_amount_check
	waitrt?
	if @tpick_vars["Needed Pick"] != @load_data["Vaalin"]
		if @tpick_vars["Roll Amount"] > @load_data["Lock Roll"].to_i
			tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Lock Roll setting: #{@load_data["Lock Roll"]}. Trying next pick.")
			tpick_put_stuff_away
			@tpick_vars["Next Task"] = "nextpick"
		else
			tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Lock Roll setting: #{@load_data["Lock Roll"]}. Trying same pick again")
			@tpick_vars["Next Task"] = "pick3"
		end
	elsif @tpick_vars["Needed Pick"] == @load_data["Vaalin"]
		if @tpick_vars["Roll Amount"] > @load_data["Vaalin Lock Roll"]
			if @tpick_vars["403 Needed"].nil?
				tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. Going to use 403 now.")
				@tpick_vars["Roll Amount"] = 99
			else
				tpick_silent(true, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. You are already using 403. According to your Vaalin Lock Roll setting you should stop trying to use lockpicks.")
				@tpick_vars["Roll Amount"] = 100
			end
			tpick_put_stuff_away
			@tpick_vars["Next Task"] = "nextpick"
		else
			tpick_silent(nil, "You rolled: #{@tpick_vars["Roll Amount"]}, your Vaalin Lock Roll setting: #{@load_data["Vaalin Lock Roll"]}. Trying same pick again")
			@tpick_vars["Next Task"] = "pick3"
		end
	end
end

def detect_plinite_result
	waitrt?
	@tpick_vars["Plinite Already Open"] = nil
	tpick_cast_spells (404) if (@tpick_vars["Use 404"]) || (@tpick_vars["Need 404"])
	tpick_cast_spells (506) if @tpick_vars["Use 506"]
	result = dothistimeout "detect ##{@tpick_vars["Current Box"].id}", 3, /It looks like it would be.*\(\-(\d+)\)\.|You struggle to determine the difficulty of the extraction \(somewhere between .* and \-(\d+)\)\.|You promptly discover that the core has already been removed\.|You are unable to determine the difficulty of the extraction\.|You promptly discover that the core has already been extracted and merely needs to be PLUCKed from the tip of the shard\./
	if result =~ /It looks like it would be.*\(\-(\d+)\)\./ || result =~ /You struggle to determine the difficulty of the extraction \(somewhere between .* and \-(\d+)\)\./
		@tpick_vars["Lock Difficulty"] = $1.to_i
	elsif result =~ /You promptly discover that the core has already been removed\./
		tpick_silent(nil, "This plinite has already been extracted.")
		tpick_put_stuff_away
		@tpick_vars["Plinite Already Open"] = true
	elsif result =~ /You are unable to determine the difficulty of the extraction\./
		@tpick_vars["Can't Determine Plinite Difficulty"] = true
		@tpick_vars["Lock Difficulty"] = 1000000
	elsif result =~ /You promptly discover that the core has already been extracted and merely needs to be PLUCKed from the tip of the shard\./
		open_current_plinite unless @tpick_vars["Picking Mode"] == "worker"
		@tpick_vars["Plinite Already Open"] = true
	elsif result.nil?
		detect_plinite_result
	end
	update_box_for_window
end

def cast_704_at_box
	waitrt?
	waitcastrt?
	tpick_prep_spell(704, "Phase")
	result = dothistimeout "cast at ##{@tpick_vars["Current Box"].id}", 3, /resists the effects of your magic|appears lighter|then stabilizes|but quickly returns to normal|Roundtime/
	@tpick_vars["Current Box"] = GameObj.right_hand
	update_box_for_window
	if result =~ /resists the effects of your magic/
		tpick_silent(true, "Box has a glyph trap and cannot be opened.")
		if @tpick_vars["Picking Mode"] == "ground"
			tpick_drop_box
		elsif @tpick_vars["Picking Mode"] == "solo"
			where_to_stow_box
		elsif @tpick_vars["Picking Mode"] == "worker"
			@tpick_vars["Give Up On Box"] = true
		end
		@tpick_vars["Box Opened"] = nil
	elsif result =~ /appears lighter|then stabilizes|but quickly returns to normal|Roundtime/
		tpick_silent(nil, "Box has no glyph trap. Checking for other traps.")
		if @tpick_vars["Picking Mode"] != "worker"
			tpick_drop_box
			tpick_get_box if @tpick_vars["Picking Mode"] != "ground"
		end
		check_for_trap
	elsif result.nil?
		cast_704_at_box
	end
end

def buy_locksmith_pouch
	fput "order #{@tpick_vars["Toolkit Order Number"]}"
	fput "buy"
	wait_until { checkleft }
	fput "open ##{GameObj.left_hand.id}"
	fput "bundle"
	@tpick_vars["Current Box"] = GameObj.left_hand
	tpick_drop_box
end

def measure_detection
	@tpick_vars["Lock Difficulty"] = nil
	@tpick_vars["Measured Lock"] = nil
	if Stats.prof == 'Rogue'
		tpick_silent(nil, "Measuring lock.")
		3.times{
			waitrt?
			unless GameObj.right_hand.name =~ /calipers/ || GameObj.left_hand.name =~ /calipers/
				fput "get my calipers"
				sleep 0.2
			end
		}
		if GameObj.right_hand.name !~ /calipers/ && GameObj.left_hand.name !~ /calipers/
			tpick_silent(true, "To fix the below issues enter ;tpick setup\nMake sure your calipers container is filled out properly and that you have calipers.\nIf you don't want to use calipers then go to the 'Other' tab and uncheck the box for the 'Use Calipers' setting.\n\nCouldn't find your calipers.")
			exit
		end
		fput "lmaster measure ##{@tpick_vars["Current Box"].id}"
	elsif Stats.prof == 'Bard'
		tpick_silent(nil, "Loresinging to box to find out lock difficulty.")
		if @tpick_vars["Picking Mode"] == "ground"
			tpick_get_box
			wait_until { GameObj.right_hand.id == @tpick_vars["Current Box"].id || GameObj.left_hand.id == @tpick_vars["Current Box"].id }
		end
		waitrt?
		fput "speak bard"
		finished_it = nil
		if @tpick_vars["Picking Mode"] == "worker"
			loresong_stuff = "loresing ::#{checkname} #{@tpick_vars["Current Box"].noun} on #{@tpick_vars["Pool Table"]}:: #{@tpick_vars["Current Box"].noun} that looks like a clock;What's the purpose of your lock?"
		else
			loresong_stuff = "loresing #{checkright} that I hold;let your purpose now be told"
		end
		loop{
			break if finished_it
			result = dothistimeout "#{loresong_stuff}", 2, /^You sing/i
			if result =~ /^You sing/
				finished_it = true
			end
		}
	end
	while line = get
		if line =~ /\-(\d+) in thief\-lingo difficulty ranking/
			@tpick_vars["Lock Difficulty"] = $1.to_i
			break
		end
		@tpick_vars["Lock Difficulties"].each{ |key,value|
			if line =~ /#{key}/
				@tpick_vars["Lock Difficulty"] = value
				break
			end
		}
		if line =~ /You place the probe in the lock and grimace as something feels horribly wrong/i #This game line indicates the rogue is trying to measure a box with calipers when the box still has an active trap, since all soul golem boxes are technically trapped (the trap just randomizes the difficulty of the lock) this line will appear on every soul golem box. The solution below is to use a vaalin lockpick on soul golem boxes from the worker and to turn in all other boxes when this message appears. When not picking boxes from the worker the script will still use a vaalin lockpick.
			if @tpick_vars["Critter Name"] =~ /soul golem/i
				@tpick_vars["Lock Difficulty"] = "need vaalin"
				break
			else
				if @tpick_vars["Picking Mode"] == "worker"
					@tpick_vars["Give Up On Box"] = true
					@tpick_vars["Lock Difficulty"] = "Soul Golem"
					break
				else
					@tpick_vars["Lock Difficulty"] = "need vaalin"
					break
				end
			end
		end
		(@tpick_vars["Lock Difficulty"] = "not locked";break) if line =~ /has already been unlocked/i
		(@tpick_vars["Lock Difficulty"] = "can't find trap";break) if line =~ /As you start to place the probe in the lock/
		(@tpick_vars["Lock Difficulty"] = "can't measure";break) if line =~ /but your song simply wasn't powerful enough/
		exit if line =~ /^Try measuring something with a lock./
	end
	waitrt?
	@tpick_vars["Measured Lock"] = @tpick_vars["Lock Difficulty"] if @tpick_vars["Lock Difficulty"].is_a?(Integer)
	if @tpick_vars["Lock Difficulty"].is_a?(Integer) && @load_data["Lock Buffer"] > 0
		@tpick_vars["Lock Difficulty"] += @load_data["Lock Buffer"]
		tpick_silent(nil, "You have lock buffer set to #{@load_data["Lock Buffer"]}, going to assume this lock is +#{@load_data["Lock Buffer"]} higher at -#{@tpick_vars["Lock Difficulty"]}")
	end
	@tpick_vars["Number Of Times To Measure"] += 1
	if @tpick_vars["Lock Difficulty"] == "can't measure" && @tpick_vars["Number Of Times To Measure"] < 3
		measure_detection
	elsif @tpick_vars["Lock Difficulty"] == "IMPOSSIBLE"
		@tpick_vars["Lock Difficulty"] = "can't measure"
	end
	update_box_for_window
end

def encumbrance_check
	if percentencumbrance > 99
		tpick_silent(nil, "Your settings indicate you want to deposit silvers when encumbered, and you are encumbered, so we are depositing silvers.")
		@tpick_vars["Starting Room Number"] = Room.current.id
		if @load_data["Auto Deposit Silvers"] !~ /yes/i
			script_commands = @load_data["Auto Deposit Silvers"].split(" ")
			start_script "#{script_commands[0]}", ["#{script_commands[1]}", "#{script_commands[2]}", "#{script_commands[3]}", "#{script_commands[4]}"]
			wait_while{ running? "#{script_commands[0]}" }
		end
		start_script 'go2', [ 'bank', '--disable-confirm' ]
		wait_while{ running?('go2') }
		fput "depo all"
		start_script "go2", [@tpick_vars["Starting Room Number"]]
		wait_while{ running?('go2') }
	end
end

def coins_from_boxes_comma_nonsense
	if @tpick_vars["Silvers From Box"] < 625
		sleep 0.1
	else
		while line = get
			if line =~ /Roundtime\: (\d+) sec/
				sleep ($1.to_i + 1)
				break
			end
		end									
	end
	waitrt?
end

def gather_stuff
	waitrt?
	if @tpick_vars["Current Item"].name =~ /coins/
		@tpick_vars["Got All Coins"] = nil
		loop{
			break if @tpick_vars["Got All Coins"]
			fput "get ##{@tpick_vars["Current Item"].id}"
			while line = get
				if line =~ /You gather the remaining (.*) coins?/
					@tpick_vars["Silvers From Box"] = $1.delete(",").to_i
					coins_from_boxes_comma_nonsense
					@tpick_vars["Got All Coins"] = true
					break
				elsif line =~ /^You can only collect (.*) of the coins due to your load\./
					@tpick_vars["Silvers From Box"] = $1.delete(",").to_i
					tpick_silent(true, "You can't carry anymore silvers!")
					coins_from_boxes_comma_nonsense
					@tpick_vars["Got All Coins"] = true
					break
				elsif line =~ /^You cannot hold any more silvers\./
					tpick_silent(true, "You can't carry anymore silvers!")
					@tpick_vars["Got All Coins"] = true
					break
				elsif line =~ /^You gather (.*) of the coins?/
					@tpick_vars["Silvers From Box"] = $1.delete(",").to_i
					coins_from_boxes_comma_nonsense
					break
				end
			end
		}
		@stats_data["Loot Session"]["Silver"] += @tpick_vars["Silvers From Box"]
		@stats_data["Loot Total"]["Silver"] += @tpick_vars["Silvers From Box"] if @load_data["Track Loot"] == "Yes"
	else
		@stats_data["Loot Session"][@tpick_vars["Current Item"].name] += 1
		@stats_data["Loot Total"][@tpick_vars["Current Item"].name] += 1 if (@tpick_vars["Current Item"].type !~ /^(clothing|junk|food|herb|cursed|toy|ammo)$/) && (@load_data["Track Loot"] == "Yes")
		if @tpick_vars["Picking Up"]
			fput "get ##{@tpick_vars["Current Item"].id}"
			wait_until{ checkleft }
			tpick_put_stuff_away
		else
			fput "get ##{@tpick_vars["Current Item"].id}"
		end
	end
end

def tpick_gather_the_loot
	waitrt?
	if (@tpick_vars["Current Item"].type !~ /cursed/) && (@tpick_vars["Current Item"].type != "box")
		gather_stuff
	end
	waitrt?
	if (@tpick_vars["Current Item"].name !~ /coins/) && (@tpick_vars["Current Item"].type !~ /cursed/) && (@tpick_vars["Current Item"].type != "box")
		wait_until { GameObj.right_hand.id == @tpick_vars["Current Item"].id || GameObj.left_hand.id == @tpick_vars["Current Item"].id }
		tpick_bundle_vials if @load_data["Auto Bundle Vials"] == "Yes" && @tpick_vars["Current Item"].name =~ /vial/ && (GameObj.right_hand.name =~ /vial/ || GameObj.left_hand.name =~ /vial/)
		tpick_put_stuff_away
	end
	waitrt?
end

def detect_plinite
	@tpick_vars["Need 404"] = "yes" unless @load_data["404"] =~ /never/i
	waitrt?
	no_vaalin_picks
	3.times{
		waitrt?
		unless GameObj.right_hand.id == @all_pick_ids["Vaalin"].first || GameObj.left_hand.id == @all_pick_ids["Vaalin"].first
			fput "get ##{@all_pick_ids["Vaalin"].first}"
			sleep 0.2
		end
	}
	if GameObj.right_hand.id != @all_pick_ids["Vaalin"].first && GameObj.left_hand.id != @all_pick_ids["Vaalin"].first
		tpick_silent(true, "Couldn't find your #{@load_data["Vaalin"]}")
		exit
	end
	detect_plinite_result
	tpick_put_stuff_away
	if @tpick_vars["Plinite Already Open"].nil?
		@tpick_vars["Total Pick Skill"] = (@tpick_vars["Pick Skill"] + @tpick_vars["Pick Lore"]) * 2.50
		if @tpick_vars["Lock Difficulty"] > (@tpick_vars["Total Pick Skill"] + @load_data["Vaalin Lock Roll"])
			if @tpick_vars["Picking Mode"] == "worker"
				tpick_silent(true, "Can't extract this plinite based on my calculations.\nIf you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
				@tpick_vars["Can't Determine Plinite Difficulty"] = nil
				@tpick_vars["Give Up On Box"] = true
			else
				tpick_silent(true, "Can't extract this plinite, OPENing it instead.\nIf you think this is in error increase the Vaalin Lock Roll setting in the setup menu.")
				@tpick_vars["Can't Determine Plinite Difficulty"] = nil
				waitrt?
				fput "open ##{@tpick_vars["Current Box"].id}"
			end
		else
			calculate_needed_lockpick
			text = "Recommended lock pick: #{@tpick_vars["Recommended Pick"]} with a modifier of #{@tpick_vars["Recommended Pick Modifier"]}\n"
			if @tpick_vars["403 Needed"] == "yes"
				if @tpick_vars["Use 403 For Lock Difficulty"] && @tpick_vars["Lock Difficulty"] > @tpick_vars["Use 403 For Lock Difficulty"]
					text += "Lock difficulty is higher than your 403 setting in setup menu, using 403.\n"
				else
					text += "Recommend 403: Yes\n"
				end
				text += "Your calculated lockpicking skill: #{@tpick_vars["Pick Skill"]}\n"
				text += "Your calculated lockpicking lore: #{@tpick_vars["Pick Lore"]}\n"
				temp_math_number = @tpick_vars["Pick Skill"] + @tpick_vars["Pick Lore"]
			else
				text += "Recommend 403: No\n"
				text += "Your calculated lockpicking skill: #{@tpick_vars["Pick Skill"]}\n"
				temp_math_number = @tpick_vars["Pick Skill"]
			end
			quick_maths = (temp_math_number * @tpick_vars["Recommended Pick Modifier"]).truncate
			tpick_silent(nil, text)
			if @tpick_vars["Needed Pick ID"].nil?
				if @tpick_vars["Recommended Pick"] == "Vaalin"
					tpick_silent(true, "ALL OF YOUR VAALIN LOCKPICKS ARE BROKEN. YOU REALLY SHOULD HAVE AT LEAST 1 WORKING VAALIN LOCKPICK WHEN RUNNING THIS SCRIPT.")
					exit
				else
					tpick_silent(true, "All of your #{@tpick_vars["Recommended Pick"]} lockpicks seem to be broken, trying a higher tier lockpick.")
				end
				next_pick
			else
				pick_2
			end
		end
	elsif @tpick_vars["Plinite Already Open"]
		@tpick_vars["Give Up On Box"] = true if @tpick_vars["Picking Mode"] == "worker"
	end
end

def check_for_lockpicks_etc(check_lock_smiths_container)
	if @tpick_vars["Scale Weapon Container"].contents.nil?
		fput "look in ##{@tpick_vars["Scale Weapon Container"].id}"
		sleep 1
	end
	
	@tpick_vars["Scale Weapon ID"] = @tpick_vars["Scale Weapon Container"].contents.find { |i| i.name =~ /#{@load_data["Scale Trap Weapon"]}/i }
	@tpick_vars["Scale Weapon ID"] = @tpick_vars["Scale Weapon ID"].id
	
	if @tpick_vars["Scale Weapon ID"].nil?
		@tpick_vars["Scale Weapon ID"] = GameObj.containers.values.flatten.find { |i| i.name =~ /#{@load_data["Scale Trap Weapon"]}/i }
		@tpick_vars["Scale Weapon ID"] = @tpick_vars["Scale Weapon ID"].id
	end

	if @tpick_vars["Lockpick Container"].contents.nil?
		fput "look in ##{@tpick_vars["Lockpick Container"].id}"
		sleep 1
	end
	@tpick_vars["Lockpick Container"].contents.each{ |i| @all_pick_ids.each{ |name,_| @all_pick_ids[name].push(i.id) if @settings_pick_names[name].include?(i.name) } }
	@tpick_vars["Lockpick Container"].contents.each{ |i| @all_repair_ids.each{ |name,_| @all_repair_ids[name].push(i.id) if @all_repair_names[name].include?(i.name) } }

	if @all_pick_ids["Vaalin"].count == 0
		if @load_data["Lockpick Container"] =~ /vambrace/i
			command_to_use = "look in ##{@tpick_vars["Lockpick Container"].id}"
		else
			command_to_use = "look on ##{@tpick_vars["Lockpick Container"].id}"
		end
		status_tags
		fput "#{command_to_use}"
		while line = get
			if line =~ /you see/
				lockpick_container_contents = line
				lockpick_container_contents = lockpick_container_contents.split(/ an? /)
				break
			elsif line =~ /There is nothing on/
				break
			end
		end
		status_tags
		if lockpick_container_contents
			lockpick_container_contents_hash = Hash.new
			lockpick_container_contents.each{ |i|
				lockpick_container_contents_hash[$2] = $1 if i =~ /exist\=\"(.*)\" noun\=\".*\"\>(.*)\<\/a\>/
			}
			lockpick_container_contents_hash.each{ |key,value| @all_pick_ids.each{ |name,_| @all_pick_ids[name].push(value) if @settings_pick_names[name].include?(key) } }
			lockpick_container_contents_hash.each{ |key,value| @all_repair_ids.each{ |name,_| @all_repair_ids[name].push(value) if @all_repair_names[name].include?(key) } }
		end
	end
	
	if @tpick_vars["Locksmith's Container"]
		check_lock_smiths_container.call
		if (@tpick_vars["Putty Remaining"] == 0) && (@tpick_vars["Cotton Remaining"]) == 0
			@tpick_vars["Error Message"] = "The container you have selected as your Locksmith's Container doesn't appear to be a Locksmith's Container. Run ;tpick setup and be sure to select your Locksmith's Container."
			exit
		end
		tpick_silent(true, "Putty remaining: #{@tpick_vars["Putty Remaining"]}\nCotton balls remaining: #{@tpick_vars["Cotton Remaining"]}\nVials of acid remaining: #{@tpick_vars["Vials Remaining"]}")
		start_script "sorter" if @tpick_vars["Start Sorter"]
	end
end

def tpick_repair_lockpicks(pick, material)
	result = dothistimeout "look ##{pick}", 1, /The.*appears to be broken\.|You see nothing unusual\.|I could not find what you were referring to\.|appears to be somewhat damaged/
	if result =~ /The.*appears to be broken\./
		get_wire_order_numbers unless @tpick_repair_info
		fput "get ##{pick}"
		move 'out' if checkpaths 'out'
		start_script 'go2', [ 'bank', '--disable-confirm' ]
		wait_while{ running?('go2') }
		fput "depo all"
		fput "withdraw #{@tpick_repair_info[material]["Order Cost"]} silvers"
		target_room = Map.list.find_all { |room| room.tags.include?("rogue guild toolbenchs") || room.tags.include?("rogue guild workshop") }
		start_script 'go2', [ Room.current.find_nearest(target_room) ]
		wait_while{ running?('go2') }
		move 'go toolbench'
		waitrt?
		fput "order #{@tpick_repair_info[material]["Order Number"]}"
		fput "buy"
		waitrt?
		result = dothistimeout "lmas repair ##{pick}", 2, /cooling rapidly to form a tight bond|but the broken tip refuses to work free/
		if result =~ /cooling rapidly to form a tight bond/
			waitrt?
			fput "put ##{pick} in ##{@tpick_vars["Lockpick Container"].id}"
		elsif result =~ /but the broken tip refuses to work free/
			tpick_silent(true, "This lockpick cannot be repaired.")
			exit
		elsif result.nil?
			tpick_silent(true, "Didn't recognize any game lines.")
			exit
		end
	elsif result =~ /You see nothing unusual\.|I could not find what you were referring to\.|appears to be somewhat damaged/
		nil
	end
end

def bash_the_box_open
	fput "drop ##{@tpick_vars["Current Box"].id}" if (GameObj.right_hand.id == @tpick_vars["Current Box"].id) || (GameObj.left_hand.id == @tpick_vars["Current Box"].id)
	tpick_silent(nil, "Bashing open box.")
	waitrt?
	result = dothistimeout "open ##{@tpick_vars["Current Box"].id}", 3, /That is already open\.|You open|It appears to be locked\./i
	if result =~ /That is already open\.|You open/
		@tpick_vars["Box Math"] = nil
		@tpick_vars["Box Was Not Locked"] = true
	elsif result =~ /It appears to be locked\./ 
		fput "get my #{@load_data["Bashing Weapon"]}"
		until @tpick_vars["Current Box"].status == "gone"
			waitrt?
			fput "bash ##{@tpick_vars["Current Box"].id}"
			waitrt?
			sleep 0.2
		end
	elsif result.nil?
		bash_the_box_open
	end	
end

check_mithril_or_enruned = proc{
	action = proc { |server_string|
		if server_string =~ /You glance down to see.*(mithril|enruned).*/
			@tpick_vars["Hand Status"] = "mithril or enruned"
			DownstreamHook.remove("#{script.name}_check_for_mithril_or_enruned")
			nil
		elsif server_string =~ /You glance down.*left hand.*/
			@tpick_vars["Hand Status"] = "good"
			DownstreamHook.remove("#{script.name}_check_for_mithril_or_enruned")
			nil
		elsif server_string =~ /You glance down at your empty hands\./
			@tpick_vars["Hand Status"] = "empty"
			DownstreamHook.remove("#{script.name}_check_for_mithril_or_enruned")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_check_for_mithril_or_enruned", action)
		silence_me
		fput "#{@tpick_vars["Check For Command"]}"
		silence_me
}

def calculate_needed_lockpick
	number = 0
	@tpick_vars["Total Pick Skill"] = (@tpick_vars["Pick Skill"] + @tpick_vars["Pick Lore"])
	if (@tpick_vars["Total Pick Skill"]) * 2.50 - @tpick_vars["Lock Difficulty"] + @load_data["Lock Roll"] < 100 || @tpick_vars["Can't Determine Plinite Difficulty"]
		@tpick_vars["Needed Pick"] = @load_data["Vaalin"]
		@tpick_vars["Needed Pick ID"] = @all_pick_ids["Vaalin"].first
		no_vaalin_picks
		@tpick_vars["403 Needed"] = "yes" unless @load_data["403"] =~ /never/i
		@tpick_vars["Need 404"] = "yes" unless @load_data["404"] =~ /never/i
		@tpick_vars["Need 403"] = true unless @load_data["403"] =~ /never/i
		number = 19
	else
		@tpick_vars["Pick Mod"].each do |i|
			@tpick_vars["Total Pick Skill"] = (@tpick_vars["Pick Skill"]) * i
			if @tpick_vars["Total Pick Skill"] - @tpick_vars["Lock Difficulty"] + @load_data["Lock Roll"].to_i < 100
				number += 1
				@tpick_vars["Need 403"] = true if number > 18 && @load_data["403"] !~ /never/i
			else
				break
			end
			@tpick_vars["Need 403"] = true if (@tpick_vars["Use 403 For Lock Difficulty"]) && (@tpick_vars["Lock Difficulty"] > @tpick_vars["Use 403 For Lock Difficulty"])
		end
		if @tpick_vars["Need 403"]
			number = 0
			@tpick_vars["403 Needed"] = "yes" unless @load_data["403"] =~ /never/i
			@tpick_vars["Need 404"] = "yes" unless @load_data["404"] =~ /never/i
			@tpick_vars["Pick Mod"].each do |i|
				@tpick_vars["Total Pick Skill"] = (@tpick_vars["Pick Skill"] + @tpick_vars["Pick Lore"]) * i
				if @tpick_vars["Total Pick Skill"] - @tpick_vars["Lock Difficulty"] + @load_data["Lock Roll"].to_i < 100
					number += 1
				else
					break
				end
			end
		end
	end
	number = [number, 19].min
	@tpick_vars["Recommended Pick"]	= @lockpick_names[number]
	lock_pick_information
end

def tpick_put_stuff_away
	@rogue_trap_components_needed_nouns ||= []
	both_hands = [ GameObj.right_hand, GameObj.left_hand]
	both_hands.each{ |item|
		if @rogue_trap_components_needed_nouns.include?(item.noun)
			if @rogue_trap_components_needed_nouns.any? { |item| item.match(/vial/) }
				@rogue_trap_components_needed_array.push(item.id) if (item.name =~ /clear glass vial/ && @rogue_trap_components_needed_names.include?("clear vial")) || (item.name =~ /thick glass vial|green\-tinted vial/ && @rogue_trap_components_needed_names.include?("thick vial"))
			else
				@rogue_trap_components_needed_array.push(item.id)
			end
		end
		if item.name != "Empty" && (item.id != @tpick_vars["Current Box"].id || @tpick_stow_current_box)
			container_id_to_stow_item_in = nil
			short_name_container = nil
			if @all_pick_ids.any?{ |key,value| value.include?(item.id) }
				if @tpick_lockpick_is_broken
					container_id_to_stow_item_in = @tpick_vars["Broken Lockpick Container"].id
				else
					container_id_to_stow_item_in = @tpick_vars["Lockpick Container"].id
				end
			elsif item.name =~ /wedge/
				container_id_to_stow_item_in = @tpick_vars["Wedge Container"].id
			elsif item.name =~ /caliper/
				container_id_to_stow_item_in = @tpick_vars["Calipers Container"].id
			elsif item.id == @tpick_vars["Scale Weapon ID"]
				container_id_to_stow_item_in = @tpick_vars["Scale Weapon Container"].id
			end
			if container_id_to_stow_item_in.nil? && @all_other_container_options.length > 0
				name_match = nil
				type_match = nil
				name_match_container_full_name = nil
				name_match_container_short_name = nil
				type_match_container_full_name = nil
				type_match_container_short_name = nil
				@all_other_container_options.each{ |i|
					i.strip!
					i.rstrip!
					i = i.split(":")
					i[1].strip!
					i[1].rstrip!
					if item.name =~ /#{i[0]}/
						name_match_container_full_name = GameObj.inv.find{ |t| t.name == i[1] }
						name_match_container_short_name = i[1]
						name_match = true
					elsif item.type =~ /#{i[0]}/
						type_match_container_full_name = GameObj.inv.find{ |t| t.name == i[1] }
						type_match_container_short_name = i[1]
						type_match = true
					end
					break if name_match && type_match
				}
				if name_match
					if name_match_container_full_name
						container_id_to_stow_item_in = name_match_container_full_name.id
					else
						short_name_container = name_match_container_short_name
					end
				else
					if type_match_container_full_name
						container_id_to_stow_item_in = type_match_container_full_name.id
					else
						short_name_container = type_match_container_short_name
					end
				end
			end
			if container_id_to_stow_item_in || short_name_container
				3.times{
					waitrt?
					unless GameObj.right_hand.id != item.id && GameObj.left_hand.id != item.id
						if container_id_to_stow_item_in
							fput "put ##{item.id} in ##{container_id_to_stow_item_in}"
						else
							fput "put ##{item.id} in my #{short_name_container}"
						end
						sleep 0.2
					end
				}
				if GameObj.right_hand.id == item.id || GameObj.left_hand.id == item.id
					tpick_silent(nil, "Couldn't put #{item.name} in its proper container, STOWing it instead.")
				end
			end
			until GameObj.right_hand.id != item.id && GameObj.left_hand.id != item.id
				waitrt?
				fput "stow ##{item.id}"
				sleep 0.2
			end
		end
	}
	@tpick_stow_current_box = nil
	@tpick_lockpick_is_broken = nil
end

def update_all_stats
	if @tpick_vars["Worker Start Time"]
		@stats_data["Pool Time Spent Picking"] += (Time.now - @tpick_vars["Worker Start Time"])
		@tpick_vars["Worker Start Time"] = Time.now
	end
	
	TpickMain.data_stats = @stats_data
	TpickMain.update_stat_info
end

def tpick_cast_spells(number)
	if number == 402
		spell_name_to_check = "Presence"
	elsif number == 403
		@tpick_vars["Need 403"] = true
		spell_name_to_check = "Lock Pick Enhancement"
	elsif number == 404
		spell_name_to_check = "Disarm Enhancement"
	elsif number == 506
		spell_name_to_check = "Celerity"
	elsif number == 515
		spell_name_to_check = "Rapid Fire"
	elsif number == 613
		spell_name_to_check = "Self Control"
	elsif number == 1006
		spell_name_to_check = "Song of Luck"
	elsif number == 1035
		spell_name_to_check = "Song of Tonis"
	end
	if @load_data["Use Lmaster Focus"] == "Yes" && (number == 403 || number == 404)
		if (Effects::Buffs.active?('Focused') && 10 > (Time.now - Effects::Buffs.to_h["Focused"]).abs) || (!Effects::Buffs.active?('Focused'))
			successful_action = nil
			until successful_action
				result = dothistimeout "lmaster focus", 2, /You focus intently on your picking and disarm skill\./
				if result =~ /You focus intently on your picking and disarm skill\./
					successful_action = true
				end
			end
		end
	elsif @load_data["Percent Mana To Keep"] > percentmana
		tpick_silent(true, "According to your settings your current mana is too low to cast spells.")
	else
		spell_needs_to_be_recast = nil
		if number == 402 || number == 506 || number == 515 || number == 1035
			spell_needs_to_be_recast = true if (Spell[spell_name_to_check].known?) && ((Effects::Buffs.active?(spell_name_to_check) && 10 > (Time.now - Effects::Buffs.to_h[spell_name_to_check]).abs) || (!Effects::Buffs.active?(spell_name_to_check)))
		else
			spell_needs_to_be_recast = true if (Spell[spell_name_to_check].known?) && ((Effects::Spells.active?(spell_name_to_check) && 10 > (Time.now - Effects::Spells.to_h[spell_name_to_check]).abs) || (!Effects::Spells.active?(spell_name_to_check)))
		end
		if spell_needs_to_be_recast
			if number == 1035 && !Spell[spell_name_to_check].affordable?
				nil
			else
				if number == 515
					if checkmana < 50
						tpick_silent(true, "Waiting for at least 50 mana before casting Rapid Fire (515).")
						wait_until { checkmana(50) }
					end
				elsif (Spell[spell_name_to_check].cost.to_i + 5) > checkmana
					tpick_silent(true, "Waiting for mana.")
					wait_until { (Spell[spell_name_to_check].cost.to_i + 5) < checkmana }
				end
				if @tpick_vars["Armor To Remove"] && @tpick_vars["Armor Removed"].nil? && checkroom !~ /table/i
					@tpick_vars["Armor Removed"] = true
					wait_until { checkrt == 0 }
					fput "remove #{@tpick_vars["Armor To Remove"]}"
					fput "stow #{@tpick_vars["Armor To Remove"]}"
				end
				until Spell[spell_name_to_check].active?
					Spell[spell_name_to_check].cast
				end
				sleep 0.2
			end
		end
	end
	waitrt?
end

def tpick_prep_spell(number, name)
	if Spell[number].known?
		if (Spell[number].cost.to_i + 5) > checkmana
			tpick_silent(true, "Waiting for mana.")
			wait_until { (Spell[number].cost.to_i + 5) < checkmana }
		end
		until checkprep == "#{name}"
			waitrt?
			waitcastrt?
			fput "release" if checkprep !~ /None|#{name}/i
			fput "prep #{number}"
			sleep 0.2
		end
	end
end

def tpick_drop_box
	until GameObj.right_hand.id != @tpick_vars["Current Box"].id && GameObj.left_hand.id != @tpick_vars["Current Box"].id
		waitrt?
		fput "drop ##{@tpick_vars["Current Box"].id}"
		sleep 0.2
	end
end

def tpick_get_box
	until GameObj.right_hand.id == @tpick_vars["Current Box"].id || GameObj.left_hand.id == @tpick_vars["Current Box"].id
		waitrt?
		fput "get ##{@tpick_vars["Current Box"].id}"
		sleep 0.2
	end
end

def tpick_stop_spell(number)
	fput "stop #{number}" if Spell[number].active?
	fput "stop lmaster focus" if Effects::Buffs.active?('Focused')
end

def tpick_stop_403_404		
	waitrt?
	fput "stop 403" if Spell[403].active? && (@tpick_vars["Cancel 403"] =~ /cancel/i || @load_data["403"] =~ /cancel/i)
	fput "stop 404" if Spell[404].active? && (@tpick_vars["Cancel 404"] =~ /cancel/i || @load_data["404"] =~ /cancel/i)
	fput "stop lmaster focus" if Effects::Buffs.active?('Focused') && (@tpick_vars["Cancel 403"] =~ /cancel/i || @load_data["403"] =~ /cancel/i || @tpick_vars["Cancel 404"] =~ /cancel/i || @load_data["404"] =~ /cancel/i)
end

def tpick_stow_box
	until GameObj.right_hand.id != @tpick_vars["Current Box"].id && GameObj.left_hand.id != @tpick_vars["Current Box"].id
		waitrt?
		fput "stow ##{@tpick_vars["Current Box"].id}"
		sleep 0.2
	end
end

def tpick_say(words)
	fput "say #{@load_data[words]}" if @load_data[words].count("^ ") > 0
end

def get_pool_info
	Room.current.tags.find{ |i| i =~ /meta:boxpool:npc:(.*)/;@tpick_vars["Pool NPC"] = $1}
	@tpick_vars["Pool NPC"] = GameObj.npcs.find{ |i| @tpick_vars["Pool NPC"] == i.name }

	Room.current.tags.find{ |i| i =~ /meta:boxpool:table:(.*)/;@tpick_table_found = $1}
	@tpick_vars["Pool Table"] = GameObj.loot.find{ |i| @tpick_table_found == i.name }
	@tpick_vars["Pool Table"] = GameObj.room_desc.find{ |i| @tpick_table_found == i.name } if @tpick_vars["Pool Table"].nil?
end

def start_up_procedure(check_lock_smiths_container)
	if @tpick_vars["Drop Off Boxes"].nil? && @tpick_vars["Pick Up Boxes"].nil?
		check_for_containers(check_lock_smiths_container) if @tpick_vars["Checked For Containers"].nil?
		no_vaalin_picks
	end
	@tpick_vars["Checked For Containers"] = true
	get_pool_info if @tpick_vars["Picking Mode"] == "worker"
	if @tpick_vars["Buy Mode"]
		refill_locksmiths_container(check_lock_smiths_container)
	elsif @tpick_vars["Repair Mode"]
		repair_lockpicks_start
	elsif @tpick_vars["Drop Off Boxes"]
		@tpick_vars["Current Room"] = Room.current.id
		if @tpick_vars["Pool NPC"].nil?
			tpick_silent(true, "The 'drop' command only works at locksmith pools.")
			exit
		end
		if @tpick_vars["Tip Being Offered"].nil?
			tpick_silent(true, "You need to specify how much you are tipping and if you want it to be a percent.\nFor example do ';tpick drop 100' to tip 100 silvers per box\nDo \";tpick drop 10 percent\" or ';tpick drop 10%' if you want to tip 10% per box")
			exit
		end
		if @tpick_vars["Tip Is A Percent"] && @tpick_vars["Tip Being Offered"] > 100
			tpick_silent(true, "Wise guy, huh? You can't tip more than 100%!")
			exit
		end
		tpick_put_stuff_away
		check_for_boxes
		@tpick_vars["Total Number Of Boxes"] = @tpick_vars["All Box IDs"].length
		count_boxes_in_disk
		tpick_silent(true, "Total number of boxes: #{@tpick_vars["Total Number Of Boxes"]}")
		if @tpick_vars["Total Number Of Boxes"] == 0
			tpick_silent(true, "You don't have any boxes.")
		else
			if @tpick_vars["Tip Is A Percent"]
				tpick_silent(true, "You are tipping #{@tpick_vars["Tip Being Offered"]}% for each box.")
				sleep 1
				start_script 'go2', [ 'bank', '--disable-confirm' ]
				wait_while{ running?('go2') }
				fput "depo all"
				fput "withdraw #{3500 * @tpick_vars["Total Number Of Boxes"]} silvers"
				start_script 'go2', [ @tpick_vars["Current Room"] ]
				wait_while{ running?('go2') }
				40.times { break if GameObj.loot.any? { |obj| obj.name =~ /#{Char.name} disk|coffin/ }; sleep 0.1 }
				@tpick_vars["All Box IDs"].each{ |box|
					tpick_put_stuff_away
					fput "get ##{box}"
					fput "give #{@tpick_vars["Pool NPC"]} #{@tpick_vars["Tip Being Offered"]} percent"
					fput "give #{@tpick_vars["Pool NPC"]} #{@tpick_vars["Tip Being Offered"]} percent"
				}
			else
				tpick_silent(true, "You are tipping #{@tpick_vars["Tip Being Offered"]} silvers for each box for a total tip needed of #{@tpick_vars["Tip Being Offered"] * @tpick_vars["Total Number Of Boxes"]}")
				sleep 1
				start_script 'go2', [ 'bank', '--disable-confirm' ]
				wait_while{ running?('go2') }
				fput "depo all"
				fput "withdraw #{@tpick_vars["Tip Being Offered"] * @tpick_vars["Total Number Of Boxes"]} silvers"
				start_script 'go2', [ @tpick_vars["Current Room"] ]
				wait_while{ running?('go2') }
				40.times { break if GameObj.loot.any? { |obj| obj.name =~ /#{Char.name} disk|coffin/ }; sleep 0.1 }
				@tpick_vars["All Box IDs"].each{ |box|
					tpick_put_stuff_away
					fput "get ##{box}"
					fput "give #{@tpick_vars["Pool NPC"]} #{@tpick_vars["Tip Being Offered"]}"
					fput "give #{@tpick_vars["Pool NPC"]} #{@tpick_vars["Tip Being Offered"]}"
				}
			end
		end
	elsif @tpick_vars["Pick Up Boxes"]
		if @tpick_vars["Pool NPC"].nil?
			tpick_silent(true, "This command only works at locksmith pools.")
			exit
		end
		tpick_put_stuff_away
		no_boxes = nil
		loop{
			break if no_boxes
			fput "ask #{@tpick_vars["Pool NPC"]} about return"
			while line = get
				if line =~ /We don\'t have any boxes ready for you/
					no_boxes = true
					break
				elsif line =~ /here\'s your .* back/
					wait_until { checkright }
					@tpick_vars["Picking Up"] = true
					sleep 0.2
					lootbox = GameObj.right_hand
					@tpick_vars["Current Box"] = GameObj.right_hand
					update_box_for_window
					fput "open ##{lootbox.id}"
					25.times{
						break if lootbox.contents
						fput "look in ##{lootbox.id}"
						sleep 0.2
					}
					lootbox.contents.each{|item|
						@tpick_vars["Current Item"] = item
						waitrt?
						gather_stuff if item.type !~ /cursed/
					}
					@stats_data["Boxes Looted"] += 1
					update_all_stats
					garbage_check
					tpick_put_stuff_away
					break
				elsif line =~ /\"You need to lighten your load first\.\"/
					@tpick_vars["Starting Room Number"] = Room.current.id
					start_script 'go2', [ 'bank', '--disable-confirm' ]
					wait_while{ running?('go2') }
					fput "depo all"
					start_script "go2", [@tpick_vars["Starting Room Number"]]
					wait_while{ running?('go2') }
					break
				end
			end
		}
	elsif @tpick_vars["Picking Mode"] == "ground" || @tpick_vars["Bash Open Boxes"]
		if @tpick_vars["Open Plinites"]
			tpick_silent(true, "Ground feature cannot be used when opening plinites.")
			exit
		end
		calibrate_calipers if (@load_data["Calibrate On Startup"] == "Yes") && (@tpick_vars["Always Use Vaalin"].nil?) && (@tpick_vars["Pop Boxes"].nil?) && (@tpick_vars["Can Use Calipers"]) && (@tpick_vars["Start With Copper"].nil?)
		start_ground
	elsif @tpick_vars["Picking Mode"] == "other"
		if @tpick_vars["Open Plinites"]
			tpick_silent(true, "Other feature cannot be used when opening plinites.")
			exit
		end
		if (@tpick_vars["Disarm Only"]) && (@tpick_vars["Bash Open Boxes"].nil?)
			tpick_silent(true, "Disarm only feature only works for ground picking.")
			exit
		end
		tpick_say("Ready")
		start_others
	elsif @tpick_vars["Picking Mode"] == "worker"
		if @tpick_vars["Open Plinites"]
			tpick_silent(true, "Worker feature cannot be used when opening plinites.")
			exit
		end
		if (@tpick_vars["Disarm Only"]) && (@tpick_vars["Bash Open Boxes"].nil?)
			tpick_silent(true, "Disarm only feature only works for ground picking.")
			exit
		end
		calibrate_calipers if (@load_data["Calibrate On Startup"] == "Yes") && (@tpick_vars["Always Use Vaalin"].nil?) && (@tpick_vars["Pop Boxes"].nil?) && (@tpick_vars["Can Use Calipers"]) && (@tpick_vars["Start With Copper"].nil?)
		tpick_silent(true, @tpick_vars["Picks Information"]) if @tpick_vars["Picks For Critter Level"]
		@tpick_vars["Worker Start Time"] = Time.now
		start_worker
	elsif @tpick_vars["Picking Mode"] == "solo"
		if (@tpick_vars["Disarm Only"]) && (@tpick_vars["Bash Open Boxes"].nil?)
			tpick_silent(true, "Disarm only feature only works for ground picking.")
			exit
		end
		check_for_boxes
		if @tpick_vars["Pop Boxes"]
			pop_start
		elsif @tpick_vars["Open Plinites"]
			start_plinites
		else
			calibrate_calipers if (@load_data["Calibrate On Startup"] == "Yes") && (@tpick_vars["Always Use Vaalin"].nil?) && (@tpick_vars["Pop Boxes"].nil?) && (@tpick_vars["Can Use Calipers"]) && (@tpick_vars["Start With Copper"].nil?)
			start_solo
		end
	end
end

def tpick_get_current_worker_box
	until @tpick_vars["Current Box"]
		dothistimeout "look on ##{@tpick_vars["Pool Table"].id}", 3, /^On the/
		@tpick_vars["Pool Table"].contents.each{ |item|
			if item.name =~ /#{checkname}/
				@tpick_vars["Current Box"] = item
				update_box_for_window
				break
			end
		}
		if @tpick_vars["Current Box"].nil?
			@tpick_vars["Pool Table"].contents.each{ |item|
				fput "tap ##{item.id}"
				while line = get
					if line =~ /^You probably shouldn\'t do that\./
						break
					elsif line =~ /^You tap/
						@tpick_vars["Current Box"] = item
						update_box_for_window
						break
					end
				end
				break if @tpick_vars["Current Box"]
			}
		end
		sleep 1
	end
	tpick_silent(nil, "Found your box/plinite!\nName: #{@tpick_vars["Current Box"]}, ID: #{@tpick_vars["Current Box"].id}, tip: #{@tpick_vars["Offered Tip Amount"]}, Critter name: #{@tpick_vars["Critter Name"]}, Critter level: #{@tpick_vars["Critter Level"]}")
	update_box_for_window
end

def refill_locksmiths_container(check_lock_smiths_container)
	check_lock_smiths_container.call
	if (@tpick_vars["Putty Remaining"] == 0) && (@tpick_vars["Cotton Remaining"]) == 0
		@tpick_vars["Error Message"] = "The container you have selected as your Locksmith's Container doesn't appear to be a Locksmith's Container. Run ;tpick setup and be sure to select your Locksmith's Container."
		exit
	end
	start_script "sorter" if @tpick_vars["Start Sorter"]
	if @tpick_vars["Putty Remaining"] >= 100 && @tpick_vars["Cotton Remaining"] >= 100
		tpick_silent(true, "You already have 100 each of putty and cotton balls.")
		exit
	else
		if Wounds.lhand >= 3 || Wounds.rhand >= 3 || Wounds.larm >= 3 || Wounds.rarm >= 3 || Scars.lhand >= 3 || Scars.rhand >= 3 || Scars.larm >= 3 || Scars.rarm >= 3 
			tpick_silent(true, "Your wounds are too great to do this task. You can't do this with a missing hand or arm.")
			exit
		else
			tpick_put_stuff_away
			fill_up_locksmith_container(check_lock_smiths_container)
		end
	end
end

def repair_lockpicks_start
	if Stats.prof == "Rogue"
		tpick_put_stuff_away
		@tpick_vars["Broken Lockpick Container"].contents.each{ |i| @all_pick_ids.each{ |name,_| @all_pick_ids[name].push(i.id) if @settings_pick_names[name].include?(i.name) } }
		@tpick_vars["Broken Lockpick Container"].contents.each{ |i| @all_repair_ids.each{ |name,_| @all_repair_ids[name].push(i.id) if @all_repair_names[name].include?(i.name) } }
		@tpick_vars["Repair Names"].each{ |name| @all_repair_ids[name].each { |pick| tpick_repair_lockpicks(pick, name.gsub("Repair ", "").downcase) } }
		move 'out' if checkroom =~ /workbench/i
	else
		tpick_silent(true, "Only rogues can repair lockpicks.")
	end
end

def check_for_containers(check_lock_smiths_container)
	containers = [ "Lockpick Container", "Broken Lockpick Container", "Wedge Container", "Calipers Container", "Scale Weapon Container", "Locksmith's Container" ]
	containers.each{ |name|
		if @load_data[name]
			id = $tpick_worn_containers.fetch(@load_data[name], "Not Found")
			@tpick_vars[name] = GameObj.inv.find{ |i| i.id == id }
		end
	}
	if @tpick_vars["Locksmith's Container"].nil?
		fput "inv containers"
		while line = get
			if line =~ /You are wearing/
				all_worn_containers = line
				break
			end
		end
		all_worn_containers = all_worn_containers.split(/\,|\./)
		all_worn_containers.each{ |i| fput "look in #{i.split.last}" }
		@tpick_vars["Locksmith's Container"] = GameObj.containers.values.flatten.find { |obj| obj.name == @load_data["Locksmith's Container"] }
	end

	if @tpick_vars["Lockpick Container"].nil? || @tpick_vars["Broken Lockpick Container"].nil? || (@tpick_vars["Wedge Container"].nil? && Stats.prof == "Rogue") || ((@tpick_vars["Calipers Container"].nil?) && (Stats.prof == "Rogue") && (@load_data["Use Calipers"] == "Yes")) || @tpick_vars["Scale Weapon Container"].nil? || @tpick_vars["Locksmith's Container"].nil?
		text = "To fix the below issues enter ;tpick setup\nBe sure to properly fill out the name of each of your containers.\nIt is also possible you aren't wearing the missing container.\n\n"
		text += "Could not find your lockpick container.\n" if @tpick_vars["Lockpick Container"].nil?
		text += "Could not find your broken lockpick container.\n" if @tpick_vars["Broken Lockpick Container"].nil?
		text += "Could not find your wedge container.\n" if @tpick_vars["Wedge Container"].nil? && Stats.prof == "Rogue"
		text += "Could not find your calipers container.\n" if @tpick_vars["Calipers Container"].nil? && Stats.prof == "Rogue"
		text += "Could not find your scale weapon container.\n" if @tpick_vars["Scale Weapon Container"].nil?
		text += "Could not find your locksmith's container.\n" if @tpick_vars["Locksmith's Container"].nil?
		text.chop!.chop!
		@tpick_vars["Error Message"] = text.dup
		exit
	end
	
	check_for_lockpicks_etc(check_lock_smiths_container)
end

def main_program(check_lock_smiths_container, script)
	$tpick_lock_mastery_ranks = nil

	if Stats.prof == "Rogue"
		@tpick_vars["Can Use Calipers"] = true
		if @load_data["Trick"] == "pick"
			@tpick_vars["Do Trick"] = "pick"
		elsif @load_data["Trick"] != "random"
			@tpick_vars["Do Trick"] = "lmas ptrick #{@load_data["Trick"]}"	
		end
		
		if ($tpick_lock_mastery_ranks.nil?) && (@load_data["Use Lmaster Focus"] == "Yes")
			result = dothistimeout "gld", 3, /You have no guild affiliation\.|Click GLD MENU for additional commands\.|You have (\d+) ranks in the Lock Mastery skill\.|You are a Master of Lock Mastery\./
			if result =~ /You have no guild affiliation\.|Click GLD MENU for additional commands\./
				$tpick_lock_mastery_ranks = 0
			elsif result =~ /You have (\d+) ranks in the Lock Mastery skill\./
				$tpick_lock_mastery_ranks = $1.to_i
			elsif result =~ /You are a Master of Lock Mastery\./
				$tpick_lock_mastery_ranks = 63
			elsif result.nil?
				$tpick_lock_mastery_ranks = 0
			end
			@tpick_vars["Pick Lore"] = (2 * $tpick_lock_mastery_ranks) + (@tpick_vars["Dex Bonus"] / 2)
			@tpick_vars["Disarm Lore"] = (2 * $tpick_lock_mastery_ranks) + (@tpick_vars["Dex Bonus"] / 2)
		end
	else
		@tpick_vars["Can Use Calipers"] = nil
		@tpick_vars["Do Trick"] = "pick"
	end

	if UserVars.tpick
		Gtk.queue {
			TpickMain.import_settings
			TpickMain.create_welcome_window
			Gtk.main
		}
		
		TpickMain.watching
	elsif !File.exist?("Tpick Settings.json")
		Gtk.queue {
			TpickMain.create_settings_window
			TpickMain.create_welcome_window
			Gtk.main
		}
		
		TpickMain.watching
	elsif script.vars.any?{ |i| i =~ /setup/i }
		Gtk.queue {
			TpickMain.create_settings_window
			Gtk.main
		}
		
		TpickMain.watching
	end

	Gtk.queue {
		TpickMain.create_information_window
		Gtk.main
	}

	@tpick_vars["Gnomish Bracers"] = @load_data["Gnomish Bracer"].dup if @load_data["Gnomish Bracer"].count("^ ") > 0

	containers_open_or_close = []
	containers_need_open_close = { 
		@load_data["Lockpick Container"] => @load_data["Lockpick Open"],
		@load_data["Broken Lockpick Container"] => @load_data["Broken Open"],
		@load_data["Wedge Container"] => @load_data["Wedge Open"],
		@load_data["Calipers Container"] => @load_data["Calipers Open"],
		@load_data["Scale Weapon Container"] => @load_data["Weapon Open"],
	}
	containers_need_open_close.each{ |name,option| containers_open_or_close.push(name) if (name.count("^ ") > 0) && (option == "Yes") && (!containers_open_or_close.include?(name)) }
	if containers_open_or_close.count > 0
		containers_open_or_close.each{ |i|
			container_to_open = GameObj.inv.find{ |t| t.name == i }
			fput "open ##{container_to_open.id}" if container_to_open
		}
	end

	if @load_data["Rest When Fried"].count("^ ") > 0
		@tpick_vars["Pool Fried Commands"] = @load_data["Rest When Fried"].split(":")
		@tpick_vars["Pool Fried Commands"][0].strip!
		@tpick_vars["Pool Fried Commands"][0].rstrip!
		@tpick_vars["Pool Fried Commands"][1].strip!
		@tpick_vars["Pool Fried Commands"][1].rstrip!
	end

	@all_other_container_options = nil
	@all_other_container_options = @load_data["Other Containers"].split(",")

	fput "stow right" if checkright
	fput "stow left" if checkleft

	tpick_put_stuff_away

	@tpick_vars["Max Lock Attempt"] = @load_data["Max Lock"].dup
	if @load_data["Max Lock"] < 0
		@tpick_vars["Max Lock Compared To Skill"] = true
	else
		@tpick_vars["Max Lock Compared To Skill"] = nil
	end

	if Spell[403].known? || Stats.prof == "Rogue"
		@tpick_vars["Use 403 For Lock Difficulty"] = $1.to_i if @load_data["403"] =~ /(\d+)/
		@tpick_vars["Use 403"] = true if @load_data["403"] =~ /yes/
		@tpick_vars["Cancel 403"] = "cancel" if @load_data["403"] =~ /cancel/
	end

	if Spell[404].known? || Stats.prof == "Rogue"
		@tpick_vars["404 For Trap-Difficulty"] = $1.to_i if @load_data["404"] =~ /(\d+)/
		@tpick_vars["Use 404"] = true if @load_data["404"] =~ /yes/
		@tpick_vars["Cancel 404"] = "cancel" if @load_data["404"] =~ /cancel/
	end

	@tpick_vars["Use 402"] = true if @load_data["Presence (402)"] == "Yes"
	@tpick_vars["Use 506"] = true if @load_data["Celerity (506)"] == "Yes"
	@tpick_vars["Use 515"] = true if @load_data["Rapid Fire (515)"] == "Yes"
	@tpick_vars["Use 1035"] = true if @load_data["Song of Tonis (1035)"] == "Yes"
	@tpick_vars["Use 613"] = true if @load_data["Self Control (613)"] == "Yes"
	@tpick_vars["Use 1006"] = true if @load_data["Song of Luck (1006)"] == "Yes"

	@tpick_vars["Current Minimum Tip"] = @load_data["Minimum Tip Start"].dup

	tpick_silent(true, "Max level wanted: #{@load_data["Max Level"]}") if @load_data["Max Level"] != 200

	@tpick_vars["Always Use Vaalin"] = true if (@load_data["Use Calipers"] == "No") && (@load_data["Use Loresinging"] == "No") && (@tpick_vars["Start With Copper"].nil?)

	@tpick_vars["Start With Copper"] = nil if (@tpick_vars["Always Use Vaalin"]) && (@tpick_vars["Start With Copper"])

	@tpick_vars["Always Use Vaalin"] = true if (Stats.prof !~ /Rogue|Bard/) && (@tpick_vars["Start With Copper"].nil?)

	if (@load_data["Picks On Level"].count("^ ") > 0) && (@tpick_vars["Always Use Vaalin"])
		@tpick_vars["Picks For Critter Level"] = @load_data["Picks On Level"].split(",")
		@tpick_vars["Picks Information"] = "Your picks to use based on critter level settings: "
		number = 0
		@tpick_vars["Picks For Critter Level"].each{ |i|
			@tpick_vars["Temp Picks Critter Level"] = i.split(" ")
			if number == 0
				@tpick_vars["Picks Information"] += "Levels #{number}-#{@tpick_vars["Temp Picks Critter Level"][0]}: #{@tpick_vars["Temp Picks Critter Level"][1]}. "
			else
				@tpick_vars["Picks Information"] += "Levels #{number + 1}-#{@tpick_vars["Temp Picks Critter Level"][0]}: #{@tpick_vars["Temp Picks Critter Level"][1]}. "
			end
			number = @tpick_vars["Temp Picks Critter Level"][0].to_i
		}
		@tpick_vars["Picks Information"] += "All higher levels: Vaalin"
	end

	default_commands = @load_data["Default Mode"].split if (@load_data["Default Mode"].count("^ ") > 0) && (script.vars.count == 0)

	@tpick_vars["Open Plinites"] = true if (script.vars.any?{ |i| i =~ /plin/i }) || (default_commands.any?{ |i| i.downcase == "plin" })
	@tpick_vars["Bash Open Boxes"] = true if (script.vars.any?{ |i| i =~ /bash/i }) || (default_commands.any?{ |i| i.downcase == "bash" })
	@tpick_vars["Disarm Only"] = true if (script.vars.any?{ |i| i =~ /disarm/i }) || (default_commands.any?{ |i| i.downcase == "disarm" })
	@tpick_vars["Relock Boxes"] = true if (script.vars.any?{ |i| i =~ /relock/i }) || (default_commands.any?{ |i| i.downcase == "relock" })
	@tpick_vars["Drop Off Boxes"] = true if (script.vars.any?{ |i| i =~ /drop/i }) || (default_commands.any?{ |i| i.downcase == "drop" })
	@tpick_vars["Pick Up Boxes"] = true if (script.vars.any?{ |i| i =~ /return|pickup/i }) || (default_commands.any?{ |i| i.downcase == "pickup" })
	@tpick_vars["Tip Is A Percent"] = true if (script.vars.any?{ |i| i =~ /percent|\%/i }) || (default_commands.any?{ |i| i.downcase =~ /\%/ })
	@tpick_vars["Start With Copper"] = true if (script.vars.any?{ |i| i.downcase == "c" }) || (default_commands.any?{ |i| i.downcase == "c" })
	@tpick_vars["Always Use Vaalin"] = true if (script.vars.any?{ |i| i.downcase == "v" }) || (default_commands.any?{ |i| i.downcase == "v" })
	@tpick_vars["Always Use Wedge"] = true if (script.vars.any?{ |i| i =~ /wedge/i }) || (default_commands.any?{ |i| i.downcase == "wedge" })
	@tpick_vars["Ground Loot"] = true if (script.vars.any?{ |i| i =~ /loot/i }) || (default_commands.any?{ |i| i.downcase == "loot" })
	@tpick_vars["Pop Boxes"] = true if (script.vars.any?{ |i| i =~ /pop/i }) || (default_commands.any?{ |i| i.downcase == "pop" })
	script.vars.each{ |i| @tpick_vars["Tip Being Offered"] = i.to_i if i =~ /\d+/ }
	default_commands.each{ |i| @tpick_vars["Tip Being Offered"] = i.to_i if i =~ /\d+/ }
	@tpick_vars["Picking Mode"] = "ground" if (script.vars.any?{ |i| i =~ /ground/i }) || (default_commands.any?{ |i| i.downcase == "ground" })
	@tpick_vars["Picking Mode"] = "other" if (script.vars.any?{ |i| i =~ /other/i }) || (default_commands.any?{ |i| i.downcase == "other" })
	@tpick_vars["Picking Mode"] = "worker" if (script.vars.any?{ |i| i =~ /worker|pool/i }) || (default_commands.any?{ |i| i.downcase == "pool" })
	@tpick_vars["Picking Mode"] = "solo" if (script.vars.any?{ |i| i =~ /solo/i }) || (default_commands.any?{ |i| i.downcase == "solo" })
	@tpick_vars["Picking Mode"] = true if (script.vars.any?{ |i| i =~ /return|pickup|drop/i }) || (default_commands.any?{ |i| i =~ /return|pickup|drop/i })
	@tpick_vars["Buy Mode"] = true if script.vars.any?{ |i| i =~ /buy/i } || (default_commands.any?{ |i| i == "buy" })
	@tpick_vars["Repair Mode"] = true if script.vars.any?{ |i| i =~ /repair/i } || (default_commands.any?{ |i| i == "repair" })
	@tpick_vars["Exit When Waiting"] = true if (script.vars.any?{ |i| i =~ /exit/i })

	if Stats.prof != "Warrior" && @tpick_vars["Bash Open Boxes"]
		tpick_silent(true, "Only Warriors can use the 'bash' feature.")
		exit
	end

	if @tpick_vars["Open Plinites"]
		if @tpick_vars["Disarm Only"]
			tpick_silent(true, "Disarm feature cannot be used when opening plinites.")
			exit
		elsif @tpick_vars["Relock Boxes"]
			tpick_silent(true, "Relock feature cannot be used when opening plinites.")
			exit
		elsif @tpick_vars["Bash Open Boxes"]
			tpick_silent(true, "Bash feature cannot be used when opening plinites.")
			exit
		elsif @tpick_vars["Pop Boxes"]
			tpick_silent(true, "Popping feature cannot be used when opening plinites.")
			exit
		end
	end

	if @tpick_vars["Relock Boxes"] && @tpick_vars["Bash Open Boxes"]
		tpick_silent(true, "'relock' and 'bash' cannot both be used together.")
		exit
	end

	if @tpick_vars["Pop Boxes"] && !Spell[416].known?
		tpick_silent(true, "Popping feature requires the knowledge of Piercing Gaze (416).")
		exit
	end

	Spell[205].cast if @load_data["Light (205)"] == "Yes"

	@tpick_vars["Window Active"] = true if (@load_data["Show Window"] != "No") || (script.vars.any?{ |i| i.downcase == "show"})
	@tpick_vars["Command Lines Used"] = true if (@tpick_vars["Drop Off Boxes"] || @tpick_vars["Pick Up Boxes"] || @tpick_vars["Picking Mode"]) || (@tpick_vars["Buy Mode"]) || (@tpick_vars["Repair Mode"])
	silence_me if @load_data["Don't Show Commands"] == "Yes"

	if (@tpick_vars["Command Lines Used"]) && ((@tpick_vars["Window Active"].nil?) || (@load_data["One & Done"] == "Yes"))
		$tpick_commands_set = true
		start_up_procedure(check_lock_smiths_container)
	elsif @tpick_vars["Window Active"]
		loop{
			if @tpick_vars["Command Lines Used"]
				$tpick_commands_set = true
				start_up_procedure(check_lock_smiths_container)
			else
				tpick_silent(true, "Waiting for commands. Select the picking mode and any option you want then click the 'Start' button in the Information Window to pick some boxes.")
				wait_until{ $tpick_commands_set }
				commands = TpickMain.get_tpick_commands
				@tpick_vars["Picking Mode"] = "worker" if commands.include?("Pool Picking")
				@tpick_vars["Picking Mode"] = "ground" if commands.any?{ |command| command =~ /Ground/ }
				@tpick_vars["Picking Mode"] = "solo" if commands.include?("Solo Picking")
				@tpick_vars["Picking Mode"] = "other" if commands.include?("Other Picking")
				@tpick_vars["Ground Loot"] = true if commands.any?{ |command| command =~ /Loot/ }
				@tpick_vars["Open Plinites"] = true if commands.include?("Plinites")
				@tpick_vars["Bash Open Boxes"] = true if commands.any?{ |command| command =~ /Bash/ }
				@tpick_vars["Disarm Only"] = true if commands.any?{ |command| command =~ /Disarm/ }
				@tpick_vars["Relock Boxes"] = true if commands.include?("Relock Boxes")
				@tpick_vars["Drop Off Boxes"] = true if commands.include?("Drop Off Boxes")
				@tpick_vars["Tip Is A Percent"] = true if commands.include?("Percent")
				@tpick_vars["Tip Being Offered"] = $1.to_i if commands.any?{ |command| command =~ /(\d+)/ }
				@tpick_vars["Pick Up Boxes"] = true if commands.include?("Pick Up Boxes")
				@tpick_vars["Start With Copper"] = true if commands.include?("Start With Copper")
				@tpick_vars["Always Use Vaalin"] = true if commands.include?("Always Use Vaalin")
				@tpick_vars["Always Use Wedge"] = true if commands.include?("Always Use Wedge")
				@tpick_vars["Pop Boxes"] = true if commands.include?("Pop Boxes")
				@tpick_vars["Buy Mode"] = true if commands.include?("Refill Locksmith's Container")
				@tpick_vars["Repair Mode"] = true if commands.include?("Repair Lockpicks")
				start_up_procedure(check_lock_smiths_container)
			end
			all_command_options = [ "Open Plinites", "Bash Open Boxes", "Disarm Only", "Relock Boxes", "Drop Off Boxes", "Pick Up Boxes", "Tip Is A Percent", "Start With Copper", "Always Use Vaalin", "Always Use Wedge", "Ground Loot", "Pop Boxes", "Tip Being Offered", "Picking Mode", "Command Lines Used", "Buy Mode", "Repair Mode" ]
			all_command_options.each{ |i| @tpick_vars[i] = nil }
			$tpick_stop_immediately = nil
			$tpick_commands_set = nil
		}
	elsif script.vars.count > 0
		start_up_procedure(check_lock_smiths_container)
	else
		text = "You must specify which mode you want when starting this script.\n;tpick solo = Pick all boxes in your open containers.\n;tpick other = Wait for someone to GIVE you a box, you will then pick the box and GIVE it back to the person.\n;tpick ground = Pick all boxes on the ground.\n;tpick worker = Pick boxes at a pool. Only works if you're in a pool room when starting script.\n;tpick setup = Enter setup menu.\n;tpick show - Shows the Information Window which has more features and stats."
		tpick_silent(true, text)
	end
end

begin
	main_program(check_lock_smiths_container, script)
rescue => e
	@tpick_vars["Crash Report"] = "The script has crashed. Please provide the following information to Dreaven or Discord for assistance.\n"
	@tpick_vars["Crash Report"] += "Tpick Version: #{$tpick_current_version}\n"
	@tpick_vars["Crash Report"] += "Lich Version: #{$version}\n"
	@tpick_vars["Crash Report"] += "Front End: #{$frontend}\n"
	@tpick_vars["Crash Report"] += "Realm: #{XMLData.game}\n"
	@tpick_vars["Crash Report"] += "#{e}\n"
	e.backtrace.each{ |line| @tpick_vars["Crash Report"] += "#{line}\n" }
	@tpick_vars["Crash Report"].chop!.chop!
end