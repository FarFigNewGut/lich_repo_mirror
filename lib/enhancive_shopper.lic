=begin
This script inspects all items in a pawnshop and identifies those with enhancive properties, displaying real-time details via the familiar window and providing a summary once all scanning is complete. It automates the inspection process, capturing boosts and bonuses associated with items, helping players quickly assess the value of items found in the pawnshop.

*IMPORTANT* Script requires foreach.lic to function.
;repo download foreach.lic --author=elanthia-online

Script created with Chat GPT.

1.0.0 (2024-09-12)
    - Initial release.

    Example of Familiar Window Output:
    Inspecting: a villswood shield
      Boost: +8 to Intuition Base
      Boost: +6 to Shield Use Bonus
      Boost: +5 to Stamina Recovery
      Boost: +1 to Dodging Bonus
    Inspecting: some scratched ora arm greaves
      Boost: +11 to Max Mana
      Boost: +1 to Spiritual Lore - Summoning Ranks
    Inspecting: an old mithril aventail
      Boost: +10 to Logic Base

    Example of Summary Output:
    Summary of Enhancive Items Found:]
    a villswood shield:
         Boost: +8 to Intuition Base | Boost: +6 to Shield Use Bonus | Boost: +5 to Stamina Recovery | Boost: +1 to Dodging Bonus]
    some scratched ora arm greaves:
         Boost: +11 to Max Mana | Boost: +1 to Spiritual Lore - Summoning Ranks]
    an old mithril aventail:
         Boost: +10 to Logic Base]
=end


# Initialize a hash to store items with their enhancives
enhancive_items = {}

# Method to capture and inspect each item
def inspect_items(enhancive_items)
  # Wait until foreach is running
  until running?('foreach')
    sleep 0.5 # Check every half a second
  end

  # While foreach is running, capture inspection output
  while running?('foreach')
    # Retrieve the output of the inspection command
    result = get

    # Check if the result contains item inspection details
    if result =~ /You carefully inspect (.+) for sale\./
      item_name = $1.strip
      enhancive_items[item_name] ||= [] # Initialize array if not already present
    end

    # Capture any enhancive boosts from the inspection result
    if result =~ /It provides a boost of (\d+) to (.+)\./
      boost_value = $1.to_i
      boost_type = $2.strip
      enhancive_items[item_name] << "Boost: +#{boost_value} to #{boost_type}"

      # Only output the item name if it has not been displayed yet
      if enhancive_items[item_name].size == 1 # Checks if this is the first boost
        echo_to_familiar_window("Inspecting: #{item_name}")
      end

      # Output the boost details in real-time
      echo_to_familiar_window("  Boost: +#{boost_value} to #{boost_type}")
    end

    # Short delay to prevent overloading the inspection process
    sleep 0.01
  end

  # Once foreach is no longer running, output the final summary
end

# Method to send output specifically to the familiar window
def echo_to_familiar_window(message)
  if $frontend =~ /stormfront|profanity/i
    fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/><output class=\"mono\"/>\n"
    fam_window_end = "\n<output class=\"\"/><popStream/>\r\n"
  else
    fam_window_begin = "\034GSe\r\n"
    fam_window_end = "\034GSf\r\n"
  end
  _respond("#{fam_window_begin}#{message}#{fam_window_end}")
end

# Display a summary of all enhancive items found in a compact format
def display_summary(enhancive_items)
  echo "\n[test: Summary of Enhancive Items Found:]"
  enhancive_items.each do |item, boosts|
    next if boosts.empty? # Skip items without any boosts

    # Join boosts with ' | ' separator for compact display
    boosts_list = boosts.join(' | ')
    echo("\n#{item}:\n     #{boosts_list}")
  end
end

stop_signal = { stop: false }

# Thread 1: Run foreach commands to inspect items on different tables
thread_foreach = Thread.new do
    table_commands = [
      "on weapon table; inspect item; sleep 0.25",
      "on armor table; inspect item; sleep 0.25",
      "on miscellaneous table; inspect item; sleep 0.25",
      "on jewelry table; inspect item; sleep 0.25",
      "on goods table; inspect item; sleep 0.25",
#      "on arcan table; inspect item; sleep 0.25",
#      "on magic table; inspect item; sleep 0.25"
    ]

    table_commands.each do |command|
      start_script 'foreach', [command]
      wait_while { running?('foreach') }
    end
	display_summary(enhancive_items)
	stop_signal[:stop] = true
end

# Thread 2: Capture and inspect items for enhancive boosts
thread_inspect = Thread.new do
  break if stop_signal[:stop] # Exit if stop signal is set
  inspect_items(enhancive_items)
end

# Wait for both threads to complete
thread_foreach.join
thread_inspect.join
