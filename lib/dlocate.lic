=begin
  My custom script used to process various tasks at login.
  Uploaded for example purposes.
  
  Currently does the following:
    * gathers all current autostarted scripts for later use in evals
    * sets LNet privacy settings for locate, spells, skills, info, health, bounty
    * gets initial bounty values for hud_bounty if set to run automatically
    * modifies local GameObj for additional values
    * modifies Spell defaults for 950
    * modifies local mapdb for Rift Birthing sands  to Pinefar courtyard via Symbol of Return
    * modifies local mapdb to add custom urchin location support
    * finally runs in a loop to set LNet privacy to open/close depending on current dead status

  author: Tysong
  tags: lnet, bounty, custom, mapdb, spell, gameobj

=end
autostart_scripts = []
begin
  hash = Marshal.load(Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', "autostart".encode('UTF-8'), ":".encode('UTF-8')))
  hash['scripts'].each { |setting| autostart_scripts.push(setting[:name]) }
  hash = Marshal.load(Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', "autostart".encode('UTF-8'), "#{XMLData.game}:#{XMLData.name}".encode('UTF-8')))
  hash['scripts'].each { |setting| autostart_scripts.push(setting[:name]) }
rescue
  respond "--- Lich: error: #{$!}"
  respond $!.backtrace[0..1]
  exit
end

if autostart_scripts.include?('0net') || autostart_scripts.include?('lnet')
  echo 'Setting privacy settings for LNet.'
  sleep(1) until defined?(LNet)
  ['locate', 'spells', 'skills', 'info', 'health', 'bounty'].each { |action|
    LNet.options['permission'][action] = 'enemies'
  }
  LNet.options['permission']['locate'] = 'friends'
end

if Script.exists?('hud_bounty.lic') && autostart_scripts.include?('hud_bounty')
  echo 'Getting initial bounty totals for hud_bounty.lic script.'
  sleep(1) until defined?(BountyHUD)
  fput 'bounty'
end

echo 'Applying GameObj-data.xml, spell-list.xml, and mapdb fixes.'
sleep(1) while Script.running?('repository')
echo "Adding 'strand of silver horsehair' to uncommon gameobj type."
GameObj.type_data['uncommon'][:name] = Regexp.new(/#{GameObj.type_data['uncommon'][:name].inspect.gsub('\\', '').gsub('/', '')}|(?:strand of silver horsehair)$/)

echo 'Setting Core Tap (950) as stanceable for Spell class.'
Spell[950].instance_variable_set(:@stance, true)

unless Room[2635].wayto.key?("2804")
  echo 'Rift Birth sands to Pinefar Courtyard Voln Return updated!'
  Room[2635].timeto["2804"] = StringProc.new("(Society.status == 'Order of Voln' && Society.rank >= 25) ? 0.2 : nil")
  Room[2635].wayto["2804"] = "symbol of return"
end

urchin_custom_chars  = ['Tysong', 'Player2']
urchin_custom_number = 1
urchin_custom_room   = 29624 # Estate, Destruction HOA Property
urchin_custom_town   = 30716 # KF(30716), WL(30708), IMT(30709), SH(30710), RR(30711), ZL(30712), TV(30713), TI(30714), KD(30715), CY(30717), FWI(30718)
if urchin_custom_chars.include?(Char.name) && !Room[urchin_custom_room].tags.include?("urchin guide custom#{urchin_custom_number}")
  echo "Adding URCHIN GUIDE CUSTOM#{urchin_custom_number} to #{Room[urchin_custom_room].title}"
  Room[urchin_custom_room].tags.push("urchin guide custom#{urchin_custom_number}")
  Room[urchin_custom_room].tags.push('urchin-access') unless Room[urchin_custom_room].tags.include("urchin-access")
  Room[urchin_custom_room].timeto["#{urchin_custom_town}"] = StringProc.new("Map[7].timeto['30714'].call;")
  Room[urchin_custom_room].wayto["#{urchin_custom_town}"]  = StringProc.new("true")
  Room[urchin_custom_town].timeto["urchin_custom_room"]    = StringProc.new("Map[30714].timeto['7'].call;")
  Room[urchin_custom_town].wayto["urchin_custom_room"]     = "urchin guide custom#{urchin_custom_number}"
end

loop do
  if dead?
    send_to_script(lnet_script.to_s, 'allow locate all')
    wait_while { dead? }
    send_to_script(lnet_script.to_s, 'allow locate friend')
  end
  sleep(1)
end