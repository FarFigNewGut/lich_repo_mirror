=begin
	Pickpocketing script.
	
	WORK IN PROGRESS. Right now it just does SENSE and does PROFILE on everyone to get their levels.
	
	Author:  Tgo01
	Version:  2

=end

#To do list:
#Keep track of how often you have attempted to steal from a person.
#Keep track of how often you attempted to steal from a person but didn't steal anything.
#Keep track of how many times someone has caught you stealing from them.
#Keep track of how many times someone has caught you stealing from someone else.

#Use FAME to determine someone's level if their PROFILE doesn't show it. 50+ million would be considered level 100, under 100k would be considered level 10 or something, etc etc. If FAME determines someone is level 100 add them to the CharSettings['potential_marks_stats'] Hash.

#Allow player to add someone directly to the CharSettings['potential_marks_stats'] Hash if they know the person is level 100.

#Add settings to allow player to ignore potential marks based on race and profession and allow people to add specific players to ignore list.

CharSettings['potential_marks_stats'] = Hash.new #unless CharSettings['potential_marks_stats']
CharSettings['races_to_ignore'] = Array.new unless CharSettings['races_to_ignore']
CharSettings['professions_to_ignore'] = Array.new unless CharSettings['professions_to_ignore']
CharSettings['custom_names_ignore_list'] = Array.new unless CharSettings['custom_names_ignore_list']

potential_marks_level = Hash.new

show_ignore_list = nil
show_race_ignore_info = nil
show_profession_ignore_info = nil

text = nil

if script.vars[1] =~ /race/i
	show_ignore_list = true
	show_race_ignore_info = true
	option = script.vars[3].capitalize
	option += " #{script.vars[4].capitalize}" if script.vars[4]
	option = "Half-Elf" if option =~ /Half-Elf/i
	option = "Half-Krolvin" if option =~ /Half-Krolvin/i
	if script.vars[2] =~ /add/i
		if option =~ /^(Aelotoi|Burghal Gnome|Dark Elf|Dwarf|Elf|Erithian|Forest Gnome|Giantman|Half-Elf|Half-Krolvin|Halfling|Human|Sylvankind)$/i
			CharSettings['races_to_ignore'].push(option) unless CharSettings['races_to_ignore'].include?(option)
		else
			respond ""
			respond "Race wasn't recognized. Do ;pickpocket race add <Aelotoi, Burghal Gnome, Dark Elf, Dwarf, Elf, Erithian, Forest Gnome, Giantman, Half-Elf, Half-Krolvin, Halfling, Human, Sylvankind>"
		end
	elsif script.vars[2] =~ /remove/i
		if option =~ /^(Aelotoi|Burghal Gnome|Dark Elf|Dwarf|Elf|Erithian|Forest Gnome|Giantman|Half Elf|Half Krolvin|Halfling|Human|Sylvankind)$/i
			CharSettings['races_to_ignore'].delete(option)
		else
			respond ""
			respond "Race wasn't recognized. Do ;pickpocket race add <Aelotoi, Burghal Gnome, Dark Elf, Dwarf, Elf, Erithian, Forest Gnome, Giantman, Half-Elf, Half-Krolvin, Halfling, Human, Sylvankind>"
		end
	elsif script.vars[2] =~ /reset/i
		CharSettings['races_to_ignore'] = Array.new
	end
elsif script.vars[1] =~ /prof/i
	show_ignore_list = true
	show_profession_ignore_info = true
	option = script.vars[3].capitalize
	if script.vars[2] =~ /add/i
		if option =~ /^(Bard|Cleric|Empath|Monk|Paladin|Ranger|Rogue|Sorcerer|Warrior|Wizard)$/i
			CharSettings['professions_to_ignore'].push(option) unless CharSettings['professions_to_ignore'].include?(option)
		else
			respond ""
			respond "Profession wasn't recognized. Do ;pickpocket prof add <Bard, Cleric, Empath, Monk, Paladin, Ranger, Rogue, Sorcerer, Warrior, Wizard>"
		end
	elsif script.vars[2] =~ /remove/i
		if option =~ /^(Bard|Cleric|Empath|Monk|Paladin|Ranger|Rogue|Sorcerer|Warrior|Wizard)$/i
			CharSettings['professions_to_ignore'].delete(option)
		else
			respond ""
			respond "Profession wasn't recognized. Do ;pickpocket prof add <Bard, Cleric, Empath, Monk, Paladin, Ranger, Rogue, Sorcerer, Warrior, Wizard>"
		end
	elsif script.vars[2] =~ /reset/i
		CharSettings['professions_to_ignore'] = Array.new
	end
elsif script.vars[1] =~ /list/
	show_ignore_list = true
end

if show_race_ignore_info
	respond ""
	respond "You can do ;pickpocket list to show your ignore list or ;pickpocket race reset to remove all races from race ignore list."
elsif show_profession_ignore_info
	respond ""
	respond "You can do ;pickpocket list to show your ignore list or ;pickpocket prof reset to remove all professions from profession ignore list."
end

if show_ignore_list
	respond ""
	respond "Ignore list:"
	if CharSettings['races_to_ignore'].length > 0
		text = nil
		CharSettings['races_to_ignore'].each{|i|
			text += "#{i}, "
		}
		text = text.chop.chop
		respond "Races: #{text}"
	else
		respond "Races: None"
	end
	if CharSettings['professions_to_ignore'].length > 0
		text = nil
		CharSettings['professions_to_ignore'].each{|i|
			text += "#{i}, "
		}
		text = text.chop.chop
		respond "Professions: #{text}"
	else
		respond "Professions: None"
	end
	if CharSettings['custom_names_ignore_list'].length > 0
		text = nil
		CharSettings['custom_names_ignore_list'].each{|i|
			text += "#{i}, "
		}
		text = text.chop.chop
		respond "Races: #{text}"
	else
		respond "Custom names: None"
	end
	exit
end

fput "sense"
while line = get
	if line =~ /Unless you find a wealthy corpse\, you would probably have more luck convincing a roa\'ter to dance than you would picking a pocket here\./ #Most difficult
		echo "Difficulty: Too difficult! ABORT MISSION!."
		exit
	elsif line =~ /The odds aren't really in your favor\, but when has that ever stopped you\?/ #Middle
		echo "Difficulty: Might work."
		break
	elsif line =~ /While not exactly a walk in the park, you could probably get away with it if you made careful choices\./ #Easiest
		echo "Difficulty: Looking good."
		break
	end
end
potential_marks_stats = Hash.new
potential_marks_profession = Hash.new
potential_marks_race = Hash.new
#checkpcs.each{|i|
#	if !CharSettings['potential_marks_stats'].include?(i)
#		result = dothistimeout "profile #{i}", 2, /Level\: (\d+)/i
#		if result =~ /Level\: (\d+)/
#			potential_marks_stats.store(i, $1.to_i) unless potential_marks_stats.include?(i)
#			CharSettings['potential_marks_stats'].store(i, $1.to_i) unless CharSettings['potential_marks_stats'].include?(i) if $1.to_i == 100
#		elsif result.nil?
#			echo "Couldn't get character's level."
#		end
#	else
#		potential_marks_stats.store(i, 100) unless potential_marks_stats.include?(i)
#	end
#}

checkpcs.each{|i|
	profile_person = nil
	profile_person = true if CharSettings['potential_marks_stats'][i][:Level] < 100
	profile_person = true if CharSettings['races_to_ignore'].length > 0 && CharSettings['potential_marks_stats'][i][:Race].nil?
	profile_person = true if CharSettings['professions_to_ignore'].length > 0 && CharSettings['potential_marks_stats'][i][:Profession].nil?
	if profile_person
		fput "profile #{i}"
		while line = get
			if line =~ /Level\: (\d+)/
				potential_marks_level[i] = $1.to_i
				if CharSettings['potential_marks_stats'].include?(i)
					CharSettings['potential_marks_stats'][i][:Level] = $1.to_i
				else
					CharSettings['potential_marks_stats'].store(player_name = i, :Level => $1.to_i)
				end
			end
			if line =~ /Profession\: ([a-zA-Z]+)/
				if CharSettings['potential_marks_stats'].include?(i)
					CharSettings['potential_marks_stats'][i][:Profession] = $1
				else
					CharSettings['potential_marks_stats'].store(player_name = i, :Profession => $1)
				end
			end
			if line =~ /Race\: (Burghal Gnome)/ || line =~ /Race\: (Dark Elf)/ || line =~ /(Forest Gnome)/ || line =~ /(Half\-Elf)/ || line =~ /(Half\-Krolvin)/ || line =~ /Race\: ([a-zA-Z]+)/
				if CharSettings['potential_marks_stats'].include?(i)
					CharSettings['potential_marks_stats'][i][:Race] = $1
				else
					CharSettings['potential_marks_stats'].store(player_name = i, :Race => $1)
				end
			end
			break if line =~ /Gender\:/
		end
	else
		potential_marks_level[i] = CharSettings['potential_marks_stats'][i][:Level]
		CharSettings['potential_marks_stats'][i][:Level] = CharSettings['potential_marks_stats'][i][:Level]
		CharSettings['potential_marks_stats'][i][:Race] = CharSettings['potential_marks_stats'][i][:Race]
		CharSettings['potential_marks_stats'][i][:Profession] = CharSettings['potential_marks_stats'][i][:Profession]
	end
}

potential_marks_level = potential_marks_level.sort_by{|key,value| value}
text = "Potential marks in order of level:\n"
potential_marks_level.each {|key,value|
	text += "#{key}: Level: #{value}, Profession: #{CharSettings['potential_marks_stats'][key][:Profession]}, Race: #{CharSettings['potential_marks_stats'][key][:Race]}\n"
}
respond "#{text}"