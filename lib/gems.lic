
=begin
Sets your active (equipped) gems. Only the gems you specify will be equipped, nothing else.

Example: ;gems 1 4 6 15 20

Can also use with aliases or macro keys to switch between different gem profiles. i.e. ;gems 1 2 3 4 5 or ;gems 6 7 8 9 10

You can also do ";gems none" or ";gems clear" to deactivate all gems without equipping any new ones.

author: Brute
=end

errors = []

input = script.vars[0].to_s.strip.downcase

if input == "help"
  echo "Sets your active (equipped) gems. Only the gems you specify will be equipped, nothing else."
  echo "Example: ;gems 1 4 6 15 20"
  echo "Can also use with aliases or macro keys to switch between different gem profiles. i.e. ;gems 1 2 3 4 5 or ;gems 6 7 8 9 10"
  echo "You can also do \";gems none\" or \";gems clear\" to deactivate all gems without equipping any new ones."
  exit
end

parts = input.split

unless parts.any? && parts.all? { |part| part =~ /\A\d+\z/ } || input =~ /none|clear/
  echo "You must provide at least one gem number to activate (equip), i.e. ;gems 1 4 6 15 20"
  exit
end

new_gems = parts.map(&:to_i)

if input =~ /none|clear/
  echo "Unequipping all active gems... Please wait..."
else
  echo "Changing active gems to #{new_gems.join(', ')}... Please wait..."
end

gem_list_text = Lich::Util.quiet_command_xml("gem list all", /Gemstone/)

equipped_gem_ids = gem_list_text.grep(/Gemstone \d+: .*?\(equipped\)/).map { |line| line[/Gemstone (\d+):/, 1].to_i }

# Skip work on gems already equipped *and* requested.
common_gems     = equipped_gem_ids & new_gems      # gems to leave alone
gems_to_unequip = equipped_gem_ids - common_gems   # only these get unequipped
gems_to_equip   = new_gems       - common_gems     # only these get equipped

# Unequip everything that shouldn’t stay equipped
gems_to_unequip.each do |index|
  res = Lich::Util.quiet_command_xml("gem unequip #{index}", /Focusing briefly, you release your attunement|You don't currently have|That is not a valid Gemstone number|You cannot|You still haven't recovered from using the abilities of your/).join
  errors << "Could not unequip Gem ##{index} - #{res.gsub(/<prompt\b[^>]*>.*?<\/prompt>|<[^>]+>/m, '').strip}" if res =~ /You cannot|That is not a valid Gemstone number|You still haven't recovered from using the abilities of your/
end

# Equip the requested gems that aren’t already equipped
if input !~ /none|clear/
  gems_to_equip.each do |index|
    res = Lich::Util.quiet_command_xml("gem equip #{index}", /Focusing briefly, you prepare your|You cannot|That is not a valid Gemstone number|will apply the lesser binding to it/).join
	errors << "Could not equip Gem ##{index} - #{res.gsub(/<prompt\b[^>]*>.*?<\/prompt>|<[^>]+>/m, '').strip}" if res =~ /You cannot|That is not a valid Gemstone number/
	errors << "Did not equip Gem ##{index} as it would become lesser bound, run this script again within 30 seconds if you really meant to equip it!" if res =~ /will apply the lesser binding to it/
  end
end

fput "gem list all"
errors.each {|error| echo error} if errors.any?
echo "Done!"
