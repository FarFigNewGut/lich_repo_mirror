=begin
See everyone's bounties so the bounty bitch can get them.  Tracks gems, skins, and foraging tasks.

Add it to your autostart / run it after you get a new one.

author: nishima
tags: bounty
version: 0.4

Changelog
  0.4 - suppressed data collection output and update filtering
  0.3 - add option to put in a familiar window, help messaging
  0.2.1 - added missing skin quality
  0.2 - simplify stored details, ignore non-gather tasks
  0.1 - initial release
=end

Vars.bountybitchwindow = "main" if Vars.bountybitchwindow.nil?

unless Script.current.vars[0].nil?
  if Script.current.vars[0] =~ /^set (fam|familiar) (on|off)/
    if Script.current.vars[3] == "on"
      Vars.bountybitchwindow = "familiar"
      respond "Bounty list will display in the familiar window."
      exit
    else
      Vars.bountybitchwindow = "main"
      respond "Bounty list will display in the main window."
      exit
    end
  else
    respond ""
    respond "See everyone's bounties so the bounty bitch can get them."
    respond "Add it to your autostart / run it after you get a new one."
    respond ""
    respond "To display in the familiar window use"
    respond ";#{script.name} set familiar [on|off]"
    respond ""
    exit
  end
end

file_path = "#{DATA_DIR}/bounty-bitch.txt"
prefix = "#{checkname}:"
non_gather_text = "-"

def write_or_replace_line(file_path, prefix, new_line)
  File.write(file_path, "") unless File.exist?(file_path)
  lines = File.readlines(file_path).map(&:chomp) # Read all lines
  updated = false
  updated_lines = lines.map do |line|
    if line.start_with?(prefix)
      updated = true
      new_line
    else
      line
    end
  end
  updated_lines << new_line unless updated
  File.open(file_path, "w") do |file|
    file.puts(updated_lines)
  end
end

lines = Lich::Util.quiet_command_xml("bounty", /your Adventurer's Guild information is as follows/)
bounty = lines.find { |l| l.include?("You have been tasked ")}
if bounty #bounty retrieved
  if bounty =~ /^You have been tasked to (rescue|suppress|recover|hunt)/i # ignore rescue, kill creatures, heirloom
    bounty = non_gather_text
  end

  if match = bounty.match(/multiple customers requesting (a|an|some) (.*?).  You have been tasked to retrieve (\d+)/i) #match gems
    quantity = match[3]
    description = match[2]
    bounty = "#{quantity} #{description}"
  elsif match = bounty.match(/retrieve (.+?) of at least (.*?) quality/i) #match skins
    quantity = match[1]
    quality = match[2]
    bounty = "#{quantity} (#{quality} quality)"
  elsif match = bounty.match(/a concoction that requires <d cmd="forage (.*?)"\>(.*?) found (.*?).  These samples must be in pristine condition.  You have been tasked to retrieve (\d+)/i)   #match herbs
    quantity = match[4]
    description = match [1] + " " + match[3] #match[1] is actual name inside the clickable xml tags
    bounty = "#{quantity} #{description}"
  end
  new_line = "#{prefix} #{bounty}"    # The new line to write
else
  new_line = "#{prefix} #{non_gather_text}"
end

#update file
write_or_replace_line(file_path, prefix, new_line)

#display all
bounty_list =  File.read(file_path)

# #bold names
bounty_list = bounty_list.gsub(/^/, "<pushBold/>")
bounty_list = bounty_list.gsub(":", ":<popBold/>")


if Vars.bountybitchwindow == "familiar"
  puts "<clearStream id=\"familiar\"/><pushStream id=\"familiar\"/><output class=\"mono\"/>" + bounty_list + "<output class=\"\"/><popStream/>"
else
  puts "~"
  puts "<output class=\"mono\"/>" + bounty_list + "<output class=\"\"/>"
  puts "~"
end

