=begin

	Are you a noob? Do you often find yourself putting your ultimate 10x claidhmore of DOOM inside a backpack on the ground instead of in your own backpack?

	Well never fear because ;dont-lose-it has you covered! Just add all items you don't want to lose to the script's database and it will inform you if an item is missing from your inventory, AUTOMATICALLY!!

	Watch it in action at: https://www.youtube.com/watch?v=V7mkaHU2QGI

	Just add all items you never want to lose to the database and leave the script running in the background. Best to add this script to your start up scripts so you never forget.

	While script is running the commands are as follows:

	To add an item to the list of items to track hold item in your right hand and type: item add
	To remove an item from your list of items to track type (as an example): item remove a blue falchion
	To remove ALL items from your list of items to track type: item reset all
	To see which items you are currently tracking type: item list all
	To see this help screen type: item help

	Script also has failsafes:

	If you try to use the PUT verb on a tracked item without using "IN MY <container name>" then the script will cancel your PUT command and remind you to use "IN MY" to stow it.

	If trying to DROP a tracked item the script will cancel the command and won't let you drop the tracked item. If you really want to DROP a tracked item either remove it from the list of items to track or kill the script.

	The DROP and PUT failsafes also works when using DROP/PUT right or DROP/PUT left.

	DISCLAIMER: ALTHOUGH I HAVE TESTED THIS SCRIPT AS MUCH AS I CAN I MAKE NO GUARANTEES IT WILL WORK 100% OF THE TIME. I AM NOT RESPONSIBLE FOR YOU LOSING ITEMS.
	
	Author: Tgo01
	Version 8

=end

CharSettings['list_of_items'] = Array.new unless CharSettings['list_of_items']
current_inventory = Array.new

silence = nil
silence2 = nil
silence3 = nil
last_checked_room = nil
tracked_item_in_hand = nil
item_missing = nil
all_items_missing = Hash.new
hook_proc = nil
temp_list_of_all_items = CharSettings['list_of_items']
tracked_item_in_right_hand = nil
tracked_item_in_left_hand = nil
temp_command = nil

toggle_upstream

silence_me

silence = proc{
	action = proc { |server_string|
		if server_string =~ /Please rephrase that command\./
			DownstreamHook.remove("#{script.name}_silence")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence", action)
}

silence2 = proc{
	action = proc { |server_string|
		if server_string =~ /You glance down to see (.*) in your right hand|You glance down to see nothing in your right hand|You glance down at your empty hands\./
			DownstreamHook.remove("#{script.name}_silence2")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence2", action)
		fput "glance"
		while line = get
			if line =~ /You glance down to see (.*) in your right hand/
				if CharSettings['list_of_items'].include?($1)
					echo "'#{$1}' is already on your list of items to track."
					break
				else
					CharSettings['list_of_items'].push($1)
					temp_list_of_all_items = CharSettings['list_of_items']
					echo "'#{$1}' added to your list of items to track."
					break
				end
			elsif line =~ /You glance down to see nothing in your right hand|You glance down at your empty hands\./
				echo "You must hold something in your right hand for this command to work."
				break
			end
		end
}

silence3 = proc{
	action = proc { |server_string|
		if server_string =~ /You are currently wearing and carrying\:|^(\s{2}|\s{6})(.*)|\(\d+ items? displayed\.\)/
			nil
		elsif server_string =~ /You glance down to see (.*) in your right hand|You glance down to see nothing in your right hand|You glance down at your empty hands\./
			DownstreamHook.remove("#{script.name}_silence3")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence3", action)
		current_inventory = Array.new
		fput "inv full"
		while line = get
			if (line =~ /^\s{6}(.*)/) || (line =~ /^\s{2}(.*)/)
				temp = $1
				if temp =~ /\(registered\) \(marked\)/
					current_inventory.push(temp.chomp(" (registered) (marked)")) unless current_inventory.include?(temp.chomp(" (registered) (marked)"))
				elsif temp =~ /\(marked\) \(registered\)/
					current_inventory.push(temp.chomp(" (marked) (registered)")) unless current_inventory.include?(temp.chomp(" (marked) (registered)"))
				elsif temp =~ /\(marked\)/
					current_inventory.push(temp.chomp(" (marked)")) unless current_inventory.include?(temp.chomp(" (marked)"))
				elsif temp =~ /\(registered\)/
					current_inventory.push(temp.chomp(" (registered)")) unless current_inventory.include?(temp.chomp(" (marked)"))
				else
					current_inventory.push(temp) unless current_inventory.include?(temp)
				end
			elsif line =~ /\(\d+ items? displayed\.\)/
				break
			end
		end
		fput "glance"
		while line = get
			if line =~ /You glance down to see (.*) in your right hand and nothing in your left hand\./
				current_inventory.push($1) unless current_inventory.include?($1)
				break
			elsif line =~ /You glance down to see nothing in your right hand and (.*) in your left hand\./
				current_inventory.push($1) unless current_inventory.include?($1)
				break
			elsif line =~ /You glance down to see (.*) in your right hand and (.*) in your left hand\./
				current_inventory.push($1) unless current_inventory.include?($1)
				current_inventory.push($2) unless current_inventory.include?($2)
				break
			elsif line =~ /You glance down at your empty hands\./
				break
			end
		end
		if (current_inventory)
			CharSettings['list_of_items'].each{ |item|
					if !current_inventory.include?(item)
						if !all_items_missing.include?(item)
							 all_items_missing.store(item, last_checked_room)
						end
					else (current_inventory.include?(item)) && (all_items_missing.include?(item))
						all_items_missing.delete(item)
					end
				}
				if (all_items_missing)
					all_items_missing.each{ |key,value|
						echo "'#{key}' NOT FOUND! LAST ROOM YOU WERE IN WHEN I SAW IT WAS: #{value}"
						echo "If you want me to stop tracking this item type: item remove #{key}"
						item_missing = true
					}
				end
		end		
}

hook_proc = proc { |string|

	if string =~ /put (.*)/i
		temp_command = $1
		if (temp_command =~ /right/) || (temp_command =~ /left/)
			nil
		else
			temp_command2 = temp_command.split(' ')
		end
		if (string !~ /in my/i) && (string !~ /locker|disk/i)
			tracked_item_in_hand = nil
			tracked_item_in_right_hand = nil
			tracked_item_in_left_hand = nil
			if temp_command =~ /right/
				temp_list_of_all_items.each { |item|
					(tracked_item_in_hand = true) if (item =~ /#{GameObj.right_hand.name}/)
				}
			elsif temp_command =~ /left/
				temp_list_of_all_items.each { |item|
					(tracked_item_in_hand = true) if (item =~ /#{GameObj.left_hand.name}/)
				}
			else
				temp_list_of_all_items.each { |item|
					(tracked_item_in_right_hand = GameObj.right_hand.name) if (item =~ /#{GameObj.right_hand.name}/)
					(tracked_item_in_left_hand = GameObj.left_hand.name) if (item =~ /#{GameObj.left_hand.name}/)
				}
				temp_command2.each { |i|
					(tracked_item_in_hand = true) if (tracked_item_in_right_hand =~ /#{i}/) || (tracked_item_in_left_hand =~ /#{i}/)
				}
			end
			if (tracked_item_in_hand)
				3.times { respond "You should use IN MY <container name> when attempting to put something away you are tracking." }
				nil
			else
				string
			end
		else
			string
		end
	elsif string =~ /drop (.*)/
		temp_command = $1
		if (temp_command =~ /right/) || (temp_command =~ /left/)
			nil
		else
			temp_command2 = temp_command.split(' ')
		end
		tracked_item_in_hand = nil	
		tracked_item_in_right_hand = nil
		tracked_item_in_left_hand = nil
		if temp_command =~ /right/
			temp_list_of_all_items.each { |item|
				(tracked_item_in_hand = true) if (item =~ /#{GameObj.right_hand.name}/)
			}
		elsif temp_command =~ /left/
			temp_list_of_all_items.each { |item|
				(tracked_item_in_hand = true) if (item =~ /#{GameObj.left_hand.name}/)
			}
		else
			temp_list_of_all_items.each { |item|
				(tracked_item_in_right_hand = GameObj.right_hand.name) if (item =~ /#{GameObj.right_hand.name}/)
				(tracked_item_in_left_hand = GameObj.left_hand.name) if (item =~ /#{GameObj.left_hand.name}/)
			}
			temp_command2.each { |i|
				(tracked_item_in_hand = true) if (tracked_item_in_right_hand =~ /#{i}/) || (tracked_item_in_left_hand =~ /#{i}/)
			}
		end
		if (tracked_item_in_hand)
			3.times { respond "I won't let you DROP a tracked item." }
			nil
		else
			string
		end
	else
		string
	end
}

#UpstreamHook.add('dont_drop_that', hook_proc)

before_dying { DownstreamHook.remove("#{script.name}_silence");DownstreamHook.remove("#{script.name}_silence2");DownstreamHook.remove("#{script.name}_silence3");UpstreamHook.remove('dont_drop_that');DownstreamHook.remove("#{script.name}_silence_glance") }

Thread.new{
	loop{
		command = upstream_get
		if command =~ /item add/i
			silence.call
			silence2.call
		elsif command =~ /item help/i
			silence.call
			respond "To add an item to the list of items to track hold item in your right hand and type: item add"
			respond "To remove an item from your list of items to track type (as an example): item remove a blue falcion"
			respond "To remove ALL items from your list of items to track type: item reset all"
			respond "To see which items you are currently tracking type: item list all"
		elsif (command =~ /item remove$/i) || (command =~ /item remove $/i)
			silence.call
			echo "Must specify which item to remove with this command. Example: item remove a blue falcion"
		elsif command =~ /item remove (.*)/i
			silence.call
			if CharSettings['list_of_items'].include?($1)
				CharSettings['list_of_items'].delete($1)
				temp_list_of_all_items = CharSettings['list_of_items']
				echo "'#{$1}' has been removed from your list of items to track."
			else
				echo "'#{$1}' not found on your list. Be sure to include the full name of item to remove, including the beginning word of: a, an, some, etc"
			end
		elsif command =~ /item reset all/i
			silence.call
			CharSettings['list_of_items'] = Array.new
			temp_list_of_all_items = Array.new
			echo "Your list of items has been reset."
		elsif command =~ /item list all/i
			silence.call
			respond "Currently tracking the following items:"
			respond "----------------------------------------"
			CharSettings['list_of_items'].each { |i|
				respond "#{i}"
			}
			respond "----------------------------------------"
		end
	}
}

loop{
	waitrt?
	#silence3.call
	(sleep 8) if (item_missing)
	item_missing = nil
	last_checked_room = Room.current.id
	sleep 5
}