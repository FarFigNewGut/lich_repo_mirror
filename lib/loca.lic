class Map
  def self.subgraph(start: nil, boundaries: [])
    raise ArgumentError, "start must be a valid Room number"  unless Room[start]
    boundaries = boundaries.map(&:to_i)
    unless boundaries.is_a?(Array) and not boundaries.empty? and boundaries.all?{|id| Room[id] }
      raise ArgumentError, "boundaries must be an Array(RoomId)" 
    end
    stack = [start]
    subgraph = []
    ttl = Time.now + 10
    while id = stack.pop
      raise Exception, "building subgraph was too slow pending:(#{stack.size}) subgraph:(#{subgraph.size})" if Time.now > ttl
      room = Room[id]
      next if room.nil?
      members_of_subgraph = calculate_edges.map(&:to_i) - boundaries - subgraph
      stack.push(*members_of_subgraph)
      subgraph.push(*members_of_subgraph)
    end
    subgraph
  end

  def location
    return @location.strip if @location.is_a?(String)
    return @location
  end

  def self.calculate_edges()
    (room.instance_variable_get(:@wayto).keys & 
     room.instance_variable_get(:@timeto).keys)
  end

  def real_wayto()
    @wayto
  end

  def real_timeto()
    @timeto
  end

  PRIVATE_PROPERTY = %r[, (outside|inside)]

  def wayto_another_location()
    (real_wayto.keys & real_timeto.keys)
      .reject {|edge| 
        not Room[edge].location.is_a?(String) or 
        Room[edge].location.empty? or
        Room[edge].location.eql?(self.location) or 
        Room[edge].location =~ PRIVATE_PROPERTY
      }
  end
end

class TreeNode
  VERSION = '1.1.0'

  attr_accessor :name, :children

  def initialize(name, children = [])
    @name = name
    @children = children
  end

  def TreeNode.from_h(hash)
    if hash.is_a?(Hash)
      raw_children = hash.has_key?(:children) ? hash[:children] : []
      children = raw_children.map{|ch| TreeNode.from_h(ch)}
      TreeNode.new hash[:name], children
    else
      TreeNode.new hash
    end
  end

  def TreeNode.from_json(json)
    hash = JSON.parse json, symbolize_names: true
    TreeNode.from_h hash
  end

  def to_h
    {
      name: @name,
      children: @children.map{|node| node.to_h}
    }
  end

  def to_json(**kwargs)
    JSON.generate(to_h, **kwargs)
  end

  def render
    lines = [@name]
    @children.each_with_index do |child, index|
      child_lines = child.render
      if index < @children.size - 1
        child_lines.each_with_index do |line, idx|
          prefix = (idx == 0) ? "  ├── " : "  |   "
          lines << "#{prefix}#{line}"
        end
      else
        child_lines.each_with_index do |line, idx|
          prefix = (idx == 0) ? "  └── " : "    "
          lines << "#{prefix}#{line}"
        end
      end
    end
    lines
  end

  def print(prefix: '')
    render.each do |l| _respond(l) end
  end
end

module Location
  def self.print_tree(graph)
    renderable = graph.map {|location| 
      {    name: "<b>" + location[:location] + "</b>", 
       children: location[:boundaries]
        .sort do |a,b| b.last.size <=> a.last.size end
        .map  do |location, rooms| 
          connections = {name: location + " - #{rooms.size}"}
          connections.merge!({children: rooms.map {|boundary| Room[boundary].title.first }}) if rooms.size < 4
          connections
        end
      }
    }

    renderable.each do |location|
      TreeNode.from_h(location).print
    end
  end

  def self.to_png(graph)
    require 'ruby-graphviz'
    gviz = GraphViz.new(:G, :type => :digraph)
    world_viz = gviz.add_graph( "Elanthia" )
    graph.each {|location| world_viz.add_node(location[:location])}
    graph.each {|location| location[:boundaries].keys.each { |boundary| 
      world_viz.add_edges(location[:location], boundary)
    }}
    
    png_name = (Opts.query || "elanthia").downcase
      .gsub(/'/, "")
      .gsub(/(\s|_)/, "-")

    png = File.join($data_dir, "#{png_name}.png")
    gviz.output(png: png)
    Log.out(png, label: :png)
  end

  def self.find_boundaries(loc, rooms)
    edges = rooms.reject { |room| room.wayto_another_location.empty? }

    edges_with_locations = edges.each_with_object({}) {|edge_room, acc|
      edge_room.wayto_another_location.each {|wayto|
        acc[Room[wayto].location] ||= []
        acc[Room[wayto].location] << edge_room.id
      }
    }

    {location: loc, boundaries: edges_with_locations}
  end
end

valid_rooms = Map.list.select {|r| 
  r.location.is_a?(String) and 
  !r.location.empty? and 
  r.location !~ /, (outside|inside)/ # private areas not reachable except in special circumstances
}

valid_rooms.select! {|room| room.location.downcase.include?(Opts.query.downcase) } unless Opts.query.nil?

limit = Opts.to_h.fetch(:limit, 10_000).to_i

locations_with_boundaries = valid_rooms
  .group_by(&:location)
  .map {|loc, rooms| Location.find_boundaries(loc, rooms) }
  .reject {|location| location[:boundaries].empty?}
  .take(limit)


if Opts.png
  Location.to_png locations_with_boundaries
else
  Location.print_tree locations_with_boundaries
end