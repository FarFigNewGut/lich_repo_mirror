=begin

Makes locks for your rogue guild task.
You may or may not have to tweak the lock difficulties based on your skill level.

;rogue-lmas-makelock

=end

right_hand = GameObj.right_hand.id
left_hand = GameObj.left_hand.id

unless right_hand.nil?
    fput "stow right"
end

unless left_hand.nil?
    fput "stow left"
end

LockDifficulty = 5
GoodLockDifficulty = 500
fput "gld"
waitfor "Lock Mastery skill"
result = waitfor "The Training Administrator told you to make", "visit a master footpad", "repetitions remaining"
#The Training Administrator told you to visit a master footpad for a talk
#echo "RESULT: #{result}"

turnin_to_footpad = result =~ /visit a master footpad/
result = waitfor "remaining to complete this task"
result =~ /You have (\d+) repetition/
n = $1.to_i

echo "Making #{n} lock assemblies."
if turnin_to_footpad
    echo "Will turn lock assemblies into footpad after done, then sell to attendant."
else
    echo "Will sell to attendant when done."
    LockDifficulty = GoodLockDifficulty
end

echo "Starting in 3..."
sleep 4

RogueStoreRooms = [17821,17880,16421,17970,17992,17935] #illistim - change if you're somewhere else!
RogueFootpadRooms = [17965, 16540, 17951, 17419, 17864]
RogueWorkshopRooms = [ 17978,16574,17960,17881 ]

def go(dest)
    start_script "go2", [dest]
    wait_while { running? "go2" }
end
def goNearest(destArr)
    go(Room.current.find_nearest(destArr))
end

go("bank")

if LockDifficulty == 5
    fput "withdraw #{1000 * n} silver"
else
    fput "withdraw #{15000 * n} silver"
end


goNearest(RogueWorkshopRooms)
fput "go toolbench"

assemblies = []
n.times {
    fput "lmas lock create #{LockDifficulty}"
    fput "lmas lock create #{LockDifficulty}"
    
    sleep 1
    waitrt?

    wait_until { GameObj.right_hand.name =~ /assembly/ }
    assemblies.push(GameObj.right_hand.id)

    fput "stow ##{GameObj.right_hand.id}"
}

fput "out"

if turnin_to_footpad 
    goNearest(RogueFootpadRooms)
    fput "ask footpad to train lock"
    waitfor "Got some lock assemblies for me"

    assemblies.each { |ass| 
        fput "get ##{ass}"
        fput "give ##{ass} to footpad"
        fput "stow ##{ass}"
    }

    fput "out"
end

goNearest(RogueWorkshopRooms)

assemblies.each { |ass| 
    fput "get ##{ass}"
    2.times { fput "give ##{ass} to attendant" }
}

