=begin
	Another script from Gibreficul!
	This one will buy your documentation papers from Vaalor
	If it doesn't work, I don't care.  Works fine for me.
	author: Gibreficul
	tags: Utility, Ta'Vaalor, document
=end
class Vaalor
	def get_docs
		if GameObj.right_hand.name !~ /Empty/i
			fput "_drag ##{rhand.id} wear" if rhand('forging-hammer')
			stashright
		end
		mymove 'town'
		case my_location
		when /Vaalor/
			msg("I hate Vaalor, ... Gibreficul is checking for your papers.")
			if gfind("vellum document")
				fput "_drag ##{gfind('vellum document').id} right"
				sleep 1
				if rhand("document")
					stashright
					msg("Gibreficul found your papers, and they're valid, moving on.")
					exit
					return
				end
			end
			msg ("Gibreficul will attempt to buy papers from the Citizenship Clerk in Ta'Vaalor.")
			mymove "bank"
			case Char.race
			when /Dark Elf/i
				x = 10000
			else
				x = 5000
			end
			if Char.level > 9
				withdraw(x)
			end
			mymove 10320
			put 'ask clerk about paper'
			wait_until("Gibreficul waiting on papers in the right hand."){rhand}
			stashright
			stashleft
			mymove "bank"
			put "depo all"
			mymove "town"
			msg("Gibreficul just got you some papers, moving on")
		end
	end
	def withdraw(x = 10000)
		fput "depo all"
		fput "with #{x} silver"
		result = matchwait /have that much in the account|hands you|here ye go|The local debt collector|ye be havin'enough/
		if result =~ /have that much|ye be havin' enough/
			mymove 'town'
			msg "SCRIPT HAS DETERMINED THAT YOU ARE PISS FUCKIN BROKE"
			if XMLData.game =~ /gsf/i
				put "yell i'm fucking broke IRL too!"
			else
				msg "I bet you're fucking broke IRL too, aren't ya?"
			end
			exit
		elsif result =~ /debt collector/
			put "depo all"
			if XMLData.game =~ /gsf/i
				put "yell i'm a fucking deadbeat IRL too!"
			else
				msg "You're a fucking deadbeat IRL too, aren't ya?"
			end
			withdraw(x)
		end
	end
end

def msg(text)
	### METHOD PROVIDED BY Casis, thank you.
	stringArray = Array.new
	stringArray = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
	if $fake_stormfront
		#WizFE
		preface_text = "\034GSL\r\n "
		end_text = "\034GSM\r\n "
	else
		preface_text = "<pushBold\/>"
		end_text = "<popBold\/>"
	end
	stringArray.each { |line|
		puts "#{preface_text}#{line.gsub('\n','')}#{end_text}"
	}
end
def gconts(what = nil)
	if what
		newcont = GameObj.inv.find{|stuff| $container.include?(stuff.id.to_s) && stuff.noun =~ /#{what}/i}
	else
		newcont = GameObj.inv.find_all{|stuff| $container.include?(stuff.id.to_s)}
	end
	return(newcont)
end
def rhand(what = nil)
	return nil if GameObj.right_hand.name =~ /Empty/
	if what.to_i != 0
		return nil unless GameObj.right_hand.id.to_i == what.to_i
	elsif what =~ /\s/
		return(nil) unless GameObj.right_hand.name =~ /#{what}/i
	elsif what =~ /\w+/i
		return nil unless GameObj.right_hand.noun =~ /#{what}/i
	end
	return(GameObj.right_hand)
end
def lhand(what = nil)
	return nil if GameObj.left_hand.name =~ /Empty/
	if what.to_i != 0
		return nil unless GameObj.left_hand.id.to_i == what.to_i
	elsif what =~ /\s/
		return(nil) unless GameObj.left_hand.name =~ /#{what}/i
	elsif what =~ /\w+/i
		return nil unless GameObj.left_hand.noun =~ /#{what}/i
	end
	return(GameObj.left_hand)
end
def ginv(what = nil)
	if what.to_i != 0
		return nil unless GameObj.inv.find{|shit| shit.id.to_i == what.to_i}
		return(GameObj.inv.find{|shit| shit.id.to_i == what.to_i}) if GameObj.inv.find{|shit| shit.id.to_i == what.to_i}
	elsif what =~ /\s/
		return(GameObj.inv.find{|shit| shit.name =~ /#{what}/i}) if GameObj.inv.find{|shit| shit.name =~ /#{what}/i}
		return(nil) unless GameObj.inv.find{|shit| shit.name =~ /#{what}/i}
	elsif what =~ /\w+/i
		return(GameObj.inv.find{|shit| shit.noun =~ /#{what}/i}) if GameObj.inv.find{|shit| shit.noun =~ /#{what}/i}
		return nil unless GameObj.inv.find{|shit| shit.noun =~ /#{what}/i}
	end
	return(GameObj.inv)
end
def mystuff(what = nil)
	allstuff = []
	if what.to_i != 0
		gconts.each{|thing| thing.contents.each{|item| allstuff.push(item) if item.id.to_i == what.to_i}}
	elsif what =~ /\s/
		gconts.each{|thing| thing.contents.each{|item| allstuff.push(item) if item.name =~ /#{what}/i}}
	elsif what =~ /\w+/i
		gconts.each{|thing| thing.contents.each{|item| allstuff.push(item) if item.noun =~ /#{what}/i}}
	else
		gconts.each{|thing| thing.contents.each{|item| allstuff.push(item)}}
	end
	allstuff.push(rhand) if rhand
	allstuff.push(lhand) if lhand
	return(allstuff)
end
def gfind(what, cont = nil)
	if cont
		if what.to_i != 0
			x = ginv(cont).contents.find{|thing| thing.id.to_i == what.to_i} || nil
		elsif what =~ /\s/
			x = ginv(cont).contents.find{|thing| thing.name =~ /#{what}/i} || nil
		elsif what =~ /\w+/i
			x = ginv(cont).contents.find{|thing| thing.noun =~ /#{what}/i} || nil
		end
	else
		if what.to_i != 0
			x = mystuff.find{|thing| thing.id.to_i == what.to_i} || ginv.find{|thing| thing.id.to_i == what.to_i} || nil
		elsif what =~ /\s/
			x = mystuff.find{|thing| thing.name =~ /#{what}/i} || ginv.find{|thing| thing.name =~ /#{what}/i} || nil
		elsif what =~ /\w+/i
			x = mystuff.find{|thing| thing.noun =~ /#{what}/i} || ginv.find{|thing| thing.noun =~ /#{what}/i} || nil
		end
	end
	return(x)
end
def stashright
	return unless rhand
	$container.each{|cont|
		fput "_drag ##{rhand.id} ##{cont}"
		matchtimeout(1, "put|fit")
		break unless rhand
	}
	return unless rhand
	msg "YOU ARE HAVING RIGHT HAND ISSUES"
	wait_while("WAITING FOR EMPTY RIGHT HAND."){rhand}
end
def stashleft
	return unless lhand
	$container.each{|cont|
		fput "_drag ##{lhand.id} ##{cont}"
		matchtimeout(1, "put|fit")
		break unless lhand
	}
	return unless lhand
	msg "YOU ARE HAVING LEFT HAND ISSUES"
	wait_while("WAITING FOR EMPTY LEFT HAND."){lhand}
end
def mymove(room = false)
	move "go door" if checkroom =~ /forge\]/i
	if checkroom =~ /workshop\]/i
		move "out"
		return if room =~ /forge/i
	end
	fput "out" if checkroom =~ /table/i && Room.current.id == 4
	return if Room.current.id == room.to_i
	if room
		start_script("go2",[room, '_disable_confirm_'])
		wait_while{running?("go2")}
	end
end

def my_location
	strings = []
	done = false
	location = proc{|server_string|
		case server_string
		when /You carefully survey your surroundings and guess that your current location is (.*?) or somewhere close to it./
			var = $1
			strings.push(var)
			done = true
			nil
		else
			server_string
		end
	}
	waitrt?
	DownstreamHook.add('towncheck', location)
	$_SERVER_.puts "<c>location\n"
	wait_until{done}
	DownstreamHook.remove('towncheck')
	return(nil) if strings.empty?
	return(strings[0])
end

conta = proc{ |newstring|
	if newstring.strip.length == 0
		nil
		next
	end
	case newstring
	when /you see|nothing|closed/
		nil
	else
		newstring
	end
}

$container = [] unless $container[0].to_i > 10000
contruns = 0
until !$container.empty?
	wait_while("ROUNDTIME"){checkrt > 0}
	break if contruns > 9
	done = false
	action = proc{ |grab_this|
		if grab_this.strip.length == 0
			nil
			next
		end
		if grab_this =~ /You are wearing/i
			$container = grab_this.scan(/a exist\=\"([\d]+)[^\.|,]/).flatten
			nil
		elsif grab_this =~ /\<prompt time\=/
			done = true;nil
		else
			grab_this
		end
	}
	DownstreamHook.remove('inv_cont')
	waitrt?
	DownstreamHook.add('inv_cont', action)
	status_tags
	$_SERVER_.puts "inv cont"
	t=Time.now
	wait_until {done or t+3<Time.now}
	DownstreamHook.remove('inv_cont')
	status_tags
	contruns += 1
end
DownstreamHook.add('checkconts', conta)
unless $i_have_run
	$i_have_run = true
	$container.each{|cont|;$_SERVER_.puts "look in ##{cont}";matchtimeout(1, "you see|nothing|closed|empty")}
end
DownstreamHook.remove('checkconts')
waitrt?
sleep 1
vaalor = Vaalor.new
vaalor.get_docs
