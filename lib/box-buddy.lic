=begin

	This script provides information to make your life picking boxes easier. It shows your current lockpicking skill with each type of lock, it gives you a recommendation on the next step you should take in opening a box (checking for traps, disarming trap, picking lock, etc), it color codes lockpick and lockpick+lore values to show which picks can open the current lock (assuming you have a way to find the difficulty of the lock), plus more!
	
	Script works with any kind of picking (ground, holding the box, locksmith's pool, etc), but at the moment it only automatically detects when you start a new box at the locksmith's pool, any other kind of picking requires you to click the "New Box" button when starting a new box.
	
	Note: This does not automate anything at all. It is merely information for those who like to see information, or for those people who don't like to automate things and want to do things by hand...for some strange reason...

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Version 1: Initial release!
	Version 2: Fixed bug with script crashing when finding the exact lock difficulty.
	Version 3: Total disarm skill (base disarm plus highest disarm boost) is now listed.
	
	Author: Dreaven
	Version: 3

=end

require 'gtk3'
require 'yaml'

class BoxBuddyMain
	CONFIG_FILE = 'box_buddy.yml'
	@number_of_trap_checks = 0
	@jaws_trap_cant_be_picked = nil
	
	@tooltips ={
		"Lockpicking Skill" => "Your base lockpicking skill.",
		"Disarm Skill" => "Your base disarm skill.",
		"Total Disarm" => "Your total disarm skill which is your base disarm skill plus your highest disarm boost.",
		"Pick Lore" => "Your lockpicking bonus from Lockpicking Lore (403).",
		"Disarm Lore" => "Your disarm bonus from Disarm Lore (404).",
		"Lmaster Boost" => "Your lockpicking and disarm bonus from Lock Mastery Focus.",
		"Pick Lore Active" => "Shows whether or not you have Lockpicking Lore (403) or Lock Mastery Focus active.",
		"Disarm Lore Active" => "Shows whether or not you have Disarm Lore (404) or Lock Mastery Focus active.",
		"Trap Type" => "Type of trap the current box has.",
		"Trap Difficulty" => "Show the difficulty of the current trap.",
		"Lock Difficulty" => "Show the difficulty of the current lock.",
		"New Box" => "Click this button if you are starting a new box.\n\nThe script will automatically detect when you have started a new box when working on boxes from the locksmith's pool.",
		"Lockpick info" => "First number shows your total lockpicking skill with this pick and no lore active.\n\nSecond number shows your total lockpicking skill with this pick  and with your highest lockpicking lore active.\n\nAfter you have determined the lock difficulty the color of the values will change.\n\nRed indicates you can't pick the lock.\nGreen indicates you should be able to pick the lock even with a roll of 2 (1 is always a fumble.)\nBlack indicates you can pick the lock with a roll between 3 and 100.",
	}

	@lockpick_modifiers = {
		"Copper" => 1,
		"Steel" => 1.1,
		"Gold" => 1.2,
		"Silver" => 1.3,
		"Mithril" => 1.45,
		"Ora" => 1.55,
		"Glaes" => 1.6,
		"Laje" => 1.75,
		"Vultite" => 1.8,
		"Rolaren" => 1.9,
		"Veniom" => 2.2,
		"Invar" => 2.25,
		"Alum" => 2.3,
		"Golvern" => 2.35,
		"Kelyn" => 2.4,
		"Vaalin" => 2.5,
	}
	
	@lock_difficulties = {
		"a primitive lock" => "5-35",
		"a rudimentary lock" => "40-75",
		"an extremely easy lock" => "80-115",
		"a very easy lock" => "120-155",
		"an easy lock" => "160-195",
		"a very basic lock" => "200-235",
		"a fairly easy lock" => "240-275",
		"a simple lock" => "280-315",
		"a fairly simple lock" => "320-355",
		"a fairly plain lock" => "360-395",
		"a moderately well-crafted lock" => "400-435",
		"a well-crafted lock" => "440-475",
		"a tricky lock" => "480-515",
		"a somewhat difficult lock" => "520-555",
		"a moderately difficult lock" => "560-595",
		"a very well-crafted lock" => "600-635",
		"a difficult lock" => "640-675",
		"an extremely well-crafted lock" => "680-715",
		"a very difficult lock" => "720-755",
		"a fairly complicated lock" => "760-795",
		"an intricate lock" => "800-835",
		"an amazingly well-crafted lock" => "840-875",
		"a very complex lock" => "880-915",
		"an impressively complicated lock" => "920-955",
		"an amazingly intricate lock" => "960-995",
		"an extremely difficult lock" => "1000-1035",
		"an extremely complex lock" => "1040-1075",
		"a masterfully well-crafted lock" => "1080-1115",
		"an amazingly complicated lock" => "1120-1155",
		"an astoundingly complex lock" => "1160-1195",
		"an incredibly intricate lock" => "1200-1235",
		"an absurdly well-crafted lock" => "1240-1275",
		"an exceedingly complex lock" => "1280-1315",
		"an absurdly difficult lock" => "1320-1355",
		"an unbelievably complicated lock" => "1360-1395",
		"a masterfully intricate lock" => "1400-1435",
		"an absurdly complex lock" => "1440-1475",
		"an impossibly complex lock" => "1480+",
	}

	def self.update_skills
		@dex_bonus = Stats.enhanced_dex[1]
		put "gld" if $lmaster_focus_boost.nil? && Char.prof =~ /Rogue/
		
		@pick_skill = (Skills.to_bonus(Skills.pickinglocks) + @dex_bonus)
		@disarm_skill = (@dex_bonus + Skills.to_bonus(Skills.disarmingtraps))
		
		if Spell[403].known?
			@pick_lore = [(Stats.level / 2) + (Skills.to_bonus(Skills.pickinglocks) / 10) + (@dex_bonus) + (Spells.minorelemental / 4), Skills.to_bonus(Skills.pickinglocks)].min
		else
			@pick_lore = 0
		end
		
		if Spell[404].known?
			@disarm_lore = [(Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + @dex_bonus + (Spells.minorelemental / 4), Skills.to_bonus(Skills.disarmingtraps)].min
		else
			@disarm_lore = 0
		end
		
		if Char.prof =~ /Rogue/
			wait_until{ $lmaster_focus_boost }
			@skills_labels["Lmaster Boost"].set_text("Lock Mastery Focus Boost:     #{$lmaster_focus_boost}")
		else
			$lmaster_focus_boost = 0
		end
		
		highest_disarm_lore = [@disarm_lore, $lmaster_focus_boost].max

		@skills_labels["Lockpicking Skill"].set_text("Lockpicking Skill:     #{@pick_skill}")
		@skills_labels["Disarm Skill"].set_text("Disarm Skill:     #{@disarm_skill}")
		@skills_labels["Total Disarm"].set_text("Total Disarm:     #{@disarm_skill + highest_disarm_lore}")
		@skills_labels["Pick Lore"].set_text("Lockpicking Lore (403):     #{@pick_lore}")
		@skills_labels["Disarm Lore"].set_text("Disarm Lore (404):     #{@disarm_lore}")
		
		@skills_labels.each{ |name,label|
			@skills_labels[name].set_halign(Gtk::Align::END)
		}
		
		@lockpick_labels.each{ |name,label|
			lockpick_skill = (@lockpick_modifiers[name] * @pick_skill).truncate
			highest_pick_lore = [@pick_lore, $lmaster_focus_boost].max
			skill_with_lore = (@lockpick_modifiers[name] * (@pick_skill + highest_pick_lore)).truncate
			text += "#{name}:     #{lockpick_skill}"
			text += "/#{skill_with_lore}" if highest_pick_lore > 0
			@lockpick_labels[name].set_text(text)
			@lockpick_labels[name].set_tooltip_text(@tooltips["Lockpick info"])
			@lockpick_labels[name].set_halign(Gtk::Align::END)
		}
	end

	def self.create_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.set_title("Box Buddy")
		
		load_position
		
		parent_grid = Gtk::Grid.new
		skills_info_grid = Gtk::Grid.new
		lockpick_grid = Gtk::Grid.new
		hint_grid = Gtk::Grid.new
		new_box_grid = Gtk::Grid.new
		
		parent_grid.attach(skills_info_grid, 0, 0, 1, 1)
		parent_grid.attach(lockpick_grid, 1, 0, 1, 1)
		parent_grid.attach(hint_grid, 0, 1, 1, 1)
		parent_grid.attach(new_box_grid, 0, 2, 1, 1)
		
		lockpick_names = [ "Copper", "Steel", "Gold", "Silver", "Mithril", "Ora", "Glaes", "Laje", "Vultite", "Rolaren", "Veniom", "Invar", "Alum", "Golvern", "Kelyn", "Vaalin" ]
		@lockpick_labels = {}
		row = -1
		lockpick_names.each{ |name|
			@lockpick_labels[name] = Gtk::Label.new(name)
			@lockpick_labels[name].set_tooltip_text(@tooltips[name])
			lockpick_grid.attach(@lockpick_labels[name], 0, row += 1, 1, 1)
		}
		lockpick_grid.attach(Gtk::Label.new("               "), 1, 0, 1, 1)
		
		skill_names = [ "Lockpicking Skill", "Disarm Skill", "Total Disarm" ]
		skill_names.push("Pick Lore") if Spell[403].known?
		skill_names.push("Disarm Lore") if Spell[404].known?
		skill_names.push("Lmaster Boost") if Char.prof =~ /Rogue/
		@skills_labels = {}
		row = -1
		skill_names.each{ |name|
			@skills_labels[name] = Gtk::Label.new
			@skills_labels[name].set_tooltip_text(@tooltips[name])
			skills_info_grid.attach(@skills_labels[name], 0, row += 1, 1, 1)
		}

		skills_info_grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		
		lore_names = [ ]
		lore_names.push("Pick Lore Active") if Spell[403].known? || Char.prof =~ /Rogue/
		lore_names.push("Disarm Lore Active") if Spell[404].known? || Char.prof =~ /Rogue/
		@lores_labels = {}
		lore_names.each{ |name|
			@lores_labels[name] = Gtk::Label.new("#{name}:")
			@lores_labels[name].set_tooltip_text(@tooltips[name])
			skills_info_grid.attach(@lores_labels[name], 0, row += 1, 1, 1)
			@lores_labels[name].set_halign(Gtk::Align::END)
		}
		
		2.times{ skills_info_grid.attach(Gtk::Label.new, 0, row += 1, 1, 1) }
		
		box_names = [ "Trap Type", "Trap Difficulty", "Lock Difficulty" ]
		@box_labels = {}
		box_names.each{ |name|
			@box_labels[name] = Gtk::Label.new("#{name}:")
			@box_labels[name].set_tooltip_text(@tooltips[name])
			skills_info_grid.attach(@box_labels[name], 0, row += 1, 1, 1)
			@box_labels[name].set_halign(Gtk::Align::START)
		}
		
		skills_info_grid.attach(Gtk::Label.new, 0, row += 1, 1, 1)
		
		Thread.new{
			loop{
				name = "Pick Lore Active"
				if Spell[403].active? || Effects::Buffs.active?('Focused')
					@lores_labels[name].set_text("#{name}: YES")
				else
					@lores_labels[name].set_text("#{name}: NO")
				end
				
				name = "Disarm Lore Active"
				if Spell[404].active? || Effects::Buffs.active?('Focused')
					@lores_labels[name].set_text("#{name}: YES")
				else
					@lores_labels[name].set_text("#{name}: NO")
				end
				sleep 1
			}
		}
		
		@hint_label = Gtk::Label.new("Recommended Action: DETECT box to check for traps.")
		@hint_label.set_line_wrap(true)
		row = -1
		2.times{ hint_grid.attach(Gtk::Label.new, 0, row += 1, 1, 1) } 
		hint_grid.attach(@hint_label, 0, row += 1, 1, 1)
		2.times{ hint_grid.attach(Gtk::Label.new, 0, row += 1, 1, 1) }
		
		new_box_button = Gtk::Button.new(:label => "New Box")
		new_box_button.set_tooltip_text(@tooltips["New Box"])
		new_box_button.signal_connect("clicked") do |widget, event|
			start_new_box
		end
		new_box_grid.attach(new_box_button, 0, row += 1, 1, 1)
		
		skills_info_grid.attach(Gtk::Label.new("                              "), 1, 0, 1, 1)
		
		update_skills
		
		@main_window.signal_connect("delete-event") do
			save_position
			false
		end
		
		@main_window.signal_connect("destroy") do
			@main_window.close
			@main_window = nil
			Gtk.main_quit
			kill_script "box-buddy" if running? "box-buddy"
		end
		
		@main_window.add(parent_grid)
		
		@main_window.show_all
	end
	
	def self.update_trap_label(trap_name)
		@current_trap_type = trap_name
		if @current_trap_type == "No trap found"
			@box_labels["Trap Type"].set_text("Trap Type:             #{trap_name}/checked: #{@number_of_trap_checks}")
			@hint_label.set_text("Recommended Action: Check lock difficulty if you are able to. Otherwise pick the lock.")
		else
			@box_labels["Trap Type"].set_text("Trap Type:             #{trap_name}")
			if @jaws_trap_cant_be_picked
				@hint_label.set_text("Jaws trap has been disarmed with 408. It can't be picked with a lockpick. Skip this box or use another means to open the box.")
			else
				if @current_trap_type == "Sphere"
					@hint_label.set_text("Recommended Action: DISARM the trap. Sphere traps require a lockpick in hand before disarming.")
				elsif @current_trap_type == "Scales"
					@hint_label.set_text("Recommended Action: PICK the lock. Scales traps must be picked first then disarmed.")
				else
					@hint_label.set_text("Recommended Action: DISARM the trap.")
				end
			end
		end
		@box_labels["Trap Type"].set_halign(Gtk::Align::START)
		if trap_name == "DISARMED"
			@box_labels["Trap Difficulty"].set_text("Trap Difficulty:")
			@hint_label.set_text("Recommended Action: PICK the lock.")
		end
	end
	
	def self.start_new_box
		@box_labels["Trap Type"].set_text("Trap Type:")
		@box_labels["Trap Difficulty"].set_text("Trap Difficulty:")
		@box_labels["Lock Difficulty"].set_text("Lock Difficulty:")
		@hint_label.set_text("Recommended Action: DETECT box to check for traps.")
		@number_of_trap_checks = 0
		@jaws_trap_cant_be_picked = nil
		
		@lockpick_labels.each{ |name,label|
			lockpick_skill = (@lockpick_modifiers[name] * @pick_skill).truncate
			highest_pick_lore = [@pick_lore, $lmaster_focus_boost].max
			skill_with_lore = (@lockpick_modifiers[name] * (@pick_skill + highest_pick_lore)).truncate
			text += "#{name}:     #{lockpick_skill}"
			text += "/#{skill_with_lore}" if highest_pick_lore > 0
			@lockpick_labels[name].set_text(text)
		}
	end
	
	def self.update_difficulty_trap(difficulty)
		@current_trap_difficulty = difficulty
		@box_labels["Trap Difficulty"].set_text("Trap Difficulty:     #{@current_trap_difficulty}")
	end
	
	def self.update_difficulty_lock(difficulty)
		if difficulty.is_a?(Integer)
			@current_lock_difficulty = difficulty
			highest_difficulty = @current_lock_difficulty
		else
			@current_lock_difficulty = @lock_difficulties[difficulty]
			if @current_lock_difficulty == "1480+"
				highest_difficulty = 1480
			else
				match = @current_lock_difficulty.match(/-(\d+)/)
				highest_difficulty = match[1].to_i
			end
		end
		@box_labels["Lock Difficulty"].set_text("Lock Difficulty:    #{@current_lock_difficulty}")
		@hint_label.set_text("Recommended Action: PICK the lock.")
		
		@lockpick_labels.each{ |name,label|
			lockpick_skill = (@lockpick_modifiers[name] * @pick_skill).truncate
			highest_pick_lore = [@pick_lore, $lmaster_focus_boost].max
			skill_with_lore = (@lockpick_modifiers[name] * (@pick_skill + highest_pick_lore)).truncate
			text = "#{name}: "

			if highest_difficulty > (lockpick_skill + 100)
				color = "red"
			elsif highest_difficulty < (lockpick_skill + 1)
				color = "green"
			else
				color = "black"
			end
			text += "<span foreground='#{color}'>#{lockpick_skill}</span>"
			
			if highest_pick_lore > 0
				if highest_difficulty > (skill_with_lore + 100)
					color = "red"
				elsif highest_difficulty < (skill_with_lore + 1)
					color = "green"
				else
					color = "black"
				end
				text += "/"
				text += "<span foreground='#{color}'>#{skill_with_lore}</span>"
			end
			@lockpick_labels[name].set_markup(text)
		}
	end
	
	def self.watching
		before_dying{
			@main_window.close if @main_window
		}
		
		while line = get
			if line =~ /You are a Master of Lock Mastery\./
				$lmaster_focus_boost = (2 * 63 + (@dex_bonus / 2))
			elsif line =~ /You have (\d+) ranks? in the Lock Mastery skill\./
				$lmaster_focus_boost = (2 * $1.to_i + (@dex_bonus / 2))
			elsif line =~ /Click GLD MENU for additional commands\.|You have no guild affiliation\./
				$lmaster_focus_boost = 0 unless $lmaster_focus_boost
			elsif line =~ /It looks .*? trap \(.*?\-(\d+)\)./
				update_difficulty_trap($1.to_i)
			elsif line =~ /^You struggle with the .*\.  As you do\, you get a sense that the .* has .* \(\-(\d+) thief\-lingo difficulty ranking\)\.  Then\.\.\.CLICK\!  It opens\!|^The .* gives off an audible \*click\* as the tumblers snap open\.|^It does not appear to be locked./
				if @current_trap_type == "Scales"
					@hint_label.set_text("Recommended Action: DISARM trap. This box has a scales trap so it must be disarmed after picking the lock. Disarm trap with a dagger in your hand.")
				else
					@hint_label.set_text("Recommended Action: This box is finished! Start a new box!")
				end
			elsif line =~ /About a \-(\d+) difficulty lock \(in thief\-lingo\)\./ || line =~ /You get a sense that the .* \(\-(\d+) thief\-lingo difficulty ranking\)/
				update_difficulty_lock($1.to_i)
			elsif line =~ /(a primitive lock|a rudimentary lock|an extremely easy lock|a very easy lock|an easy lock|a very basic lock|a fairly easy lock|a simple lock|a fairly simple lock|a fairly plain lock|a moderately well-crafted lock|a well-crafted lock|a tricky lock|a somewhat difficult lock|a moderately difficult lock|a very well-crafted lock|a difficult lock|an extremely well-crafted lock|a very difficult lock|a fairly complicated lock|an intricate lock|an amazingly well-crafted lock|a very complex lock|an impressively complicated lock|an amazingly intricate lock|an extremely difficult lock|an extremely complex lock|a masterfully well-crafted lock|an amazingly complicated lock|an astoundingly complex lock|an incredibly intricate lock|an absurdly well-crafted lock|an exceedingly complex lock|an absurdly difficult lock|an unbelievably complicated lock|a masterfully intricate lock|an absurdly complex lock|an impossibly complex lock)/
				update_difficulty_lock($1)
			elsif line =~ /You carefully nudge the scarab free of its prison without disturbing the lock too much\./
				@hint_label.set_text("Recommended Action: DISARM the scarab on the ground then GET scarab and STOW it.")
			elsif line =~ /^Knowing how delicate magical runes can be/
				@hint_label.set_text("Recommended Action: PICK the lock.")
			elsif line =~ /When you're finished, ASK me to CHECK your work./
				start_new_box
	#####Scarab information#####
			#Manual detection
			elsif line =~ /Peering closely into the lock\, you spy an? [a-zA-Z]+ (.*) scarab wedged into the lock mechanism\./
				update_trap_label("Scarab")
			#Successful manual disarm
			elsif line =~ /You carefully nudge the scarab free of its prison without disturbing the lock too much\.\s+The scarab falls from the lock and onto the ground in front of you\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /The lock appears to be free of all obstructions\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /Looking closely at the lock\, you spy.*scarab wedged into the lock mechanism\.\s+The scarab is surrounded by crimson glow\./
				update_trap_label("DISARMED")
	#####Needle information#####
			#Manual detection
			elsif line =~ /Hmmm\, you can see what appears to be a tiny hole next to the lock plate which doesn\'t seem to belong there\.\s+Looking closer you see a gleaming sliver of metal recessed in the hole\./
				update_trap_label("Needle")
			#Successful manual disarm
			elsif line =~ /Using a bit of putty from your.*\, you manage to block the tiny hole in the lock plate\.|Using a pair of metal grips\, you carefully remove .* from .* and cover the tip with a bit of putty\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /You see a tiny hole next to the lock plate which has been completely plugged\.|You can see what appears to be a tiny hole next to the lock plate which doesn\'t seem to belong there\.  However\, nothing about it seems to indicate cause for alarm\.|You spot a shiny metal needle sticking out of a small hole next to the lockplate with some sort of dark paste on it\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /You can see what appears to be a tiny hole next to the lock plate which doesn\'t belong there\.\s+An occasional glint of red winks at you from within the hole\./
				update_trap_label("DISARMED")
	#####Jaws information#####
			#Manual detection
			elsif line =~ /You notice a discolored oval ring around the outside of the .* which makes you suspicious\.\s+Your suspicions are confirmed when you look inside the keyhole and notice the spring\-loaded jaws pressed flush against the .* walls\./
				update_trap_label("Jaws")
			#Successful manual disarm
			elsif line =~ /Using the pair of metal grips\, you manage to pull out the two pins that hold the upper and lower jaw pieces together\.\s+As the pins are removed\, the jaws suddenly close and warp under the tremendous strain applied by their arming mechanism\.|Using the pair of metal grips\, you manage to pull out the two pins that hold the upper and lower jaw pieces together\.|Using your metal grips\, you carefully remove a pair of small steel jaws from the .* before piecing the apparatus back together\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /You notice a discolored oval ring around the outside of the .* which makes you suspicious\.\s+Your suspicions are confirmed when you look inside the keyhole and notice the spring\-loaded jaws pressed flush against the.*walls\, but the pins that hold the jaws together have been pushed out\.|You notice a discolored oval ring around the outside of the .*\, but further examination gives the impression that some vital part of whatever trap was here has been removed\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /You see a pair of metal jaws clamped tightly before the lockplate on the.*\.|The jaws are surrounded with a reddish glow\./
				@jaws_trap_cant_be_picked = true
				update_trap_label("DISARMED")
			#Trap has already been set off
			elsif line =~ /You see a pair of bloody jaws clamped tightly before the lockplate on the/
				update_trap_label("DISARMED")
	#####Sphere information#####
			#Manual detection
			elsif line =~ /Examining the .*\, you locate.*sphere held in a metal bracket towards the back of the lock mechanism\..*It appears that were the tumblers to be activated\, the gem would be caught amongst them\./
				update_trap_label("Sphere")
			#Successful manual disarm
			elsif line =~ /With utmost care\, you slip your.* into the lock and gently nudge the.*Another moment of prodding\, and you are able to poke the gem free of its metal housing\, whereupon it falls down into the lock mechanism and out of sight\.|With utmost care\, you slip your.* into the lock and gently nudge the.*Tilting the .* forward\, you knock the gem free of its metal housing and poke it out through the back of the lock\, allowing it to gently roll down the inside of the .*\'s front wall\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /A thorough search of the area inside the tumblers reveals what appears to be a metal bracket of some sort\, although it seems to be empty now\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /The sphere is surrounded by a.*crimson glow\./i
				update_trap_label("DISARMED")
	#####Crystal information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy.*crystal which seems imbedded in the locking mechanism\.\s+It looks as if opening the lock without the exact key could shatter it\./
				update_trap_label("Crystal")
			#Successful manual disarm
			elsif line =~ /With a little ingenuity you manage to grind down parts of the lock mechanism with your metal file\, so it won\'t come in contact with the crystal when you try to open it\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy.*crystal which seems imbedded in the locking mechanism\.\s+It looks as if opening the lock without the exact key could shatter it\, but parts of the mechanism have been ground away to avoid unwanted contact with the crystal\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /You can see.*crystal imbedded in the locking mechanism\, with a slight reddish glow about it\./
				update_trap_label("DISARMED")
	#####Scales information#####
			#Manual detection
			elsif line =~ /At first glance\, the.* appears to be covered with hundreds of tiny metal scales\.\s+Closer examination reveals the \"scales\" to be razor sharp at the edges and possessing of a downward\-facing needlelike tip\.\s+However\, you should be able to avoid cutting yourself if you are careful\.|Despite heavy scrutiny\, you can see no way to pry off any of the scales\, nor any particular reason to\.\s+With a modicum of caution\, they should present no danger\.\s+Nothing else about the.* suggests that it is trapped\./
				update_trap_label("Scales")
			#Successful manual disarm
			elsif line =~ /You gently slide your.*into the space under the lid and slice through the cord\.\s+That oughta do it\./
				update_trap_label("DISARMED")
				@hint_label.set_text("Recommended Action: This box is finished! Start a new box!")
			#Already manually disarmed
			elsif line =~ /Peering in through the crack between the lid and the casing\, you see what appears to be a thin cord dangling from the case\.\s+It looks to have been sliced through\./
				update_trap_label("DISARMED")
				@hint_label.set_text("Recommended Action: This box is finished! Start a new box!")
			#Already disarmed with 408
			elsif line =~ /A crimson glow seeps between the lid and the casing of the .*\./
				update_trap_label("DISARMED")
				@hint_label.set_text("Recommended Action: This box is finished! Start a new box!")
	#####Sulphur information#####
			#Manual detection
			elsif line =~ /Feeling around the inside of the lock\, you notice that the casing is coated with a rough\, grainy substance\.\s+You lean forward and peer between the walls of the casing\.\s+Examining the lock closely\, you notice a small bladder filled with a strange liquid wedged between the tumblers\.\s+With your face this close to the lock\, you pick up the faintest scent of sulphur\./
				update_trap_label("Sulphur")
			#Successful manual disarm
			elsif line =~ /You carefully use the tip of a small metal file to scrape away the rough\, grainy substance which lines the walls of the casing\.\s+After a few moments\, you feel comfortable with the small section you have cleaned\.\s+You take out a thin needle and carefully slide it between the walls of the casing\, taking great care not to touch them\.\s+As the tip of the needle punctures the small bladder\, a strange clear gel oozes forth from the hole\.\s+The gel gives off a strong odor of sulphur\.\s+As the air hits the gel\, it begins to harden and turn to dust\, blowing away in the wind as if it never existed\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Feeling around the inside of the lock\, you notice that the casing is coated with a rough\, grainy substance\.\s+A small section of the casing has been scraped clean of the strange substance\.\s+You lean forward and peer between the walls of the casing\.\s+Examining the lock closely\, you notice a deflated bladder wedged between the tumblers\.\s+There is a small hole in the bladder\, most likely from whatever ruptured it\.\s+The lock emanates a strong scent of sulphur\./
				update_trap_label("DISARMED")
			#Trap has already been set off
			elsif line =~ /A thorough and careful search of the lock mechanism indicates that the entire .* is MANGLED\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			#TRAP CANNOT BE DISARMED WITH 408
	#####Cloud information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\./
				update_trap_label("Cloud")
			#Successful manual disarm
			elsif line =~ /Using the metal grips from your.*\, you manage to reach in and grasp the post of the metal hammer\, and bend the weak metal out of striking range of the vial\.|Having rendered the hammer harmless\, you carefully remove a green\-tinted vial filled with thick acrid smoke from the .*\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a tiny hammer device which has been bent back slightly\.|Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which has been bent from striking range of the vial\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of liquid and a tiny hammer device which has a red glow about it\./
				update_trap_label("DISARMED")
	#####Acid vial information#####
			#Manual detection
			elsif line =~ /Peering closely into the lock\, you spy a tiny vial placed just past the tumblers of the lock mechanism\.\s+It would appear that any tampering with the lock mechanism would cause the tumblers to crush the vial and release whatever substance is inside\./
				update_trap_label("Acid Vial")
			#Successful manual disarm
			elsif line =~ /You carefully push a small ball of cotton into the lock mechanism\, surrounding and protecting the small vial from anything that may shatter it\.|Using a pair of metal grips\, you carefully remove the padded clear glass vial from the .*\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Peering closely into the lock\, you spy a tiny vial placed just past the tumblers of the lock mechanism\.\s+A small ball of cotton has been pushed up against the vial\, protecting it from anything that may shatter it\.|Looking closely at the lock\, you spy a small metal housing set just inside the lock mechanism\, but it appears empty\.|Looking closely into the keyhole of the lock\, you spy a small metal housing\, which appears to be empty\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /You notice what appears to be a tiny vial placed just past the tumblers of the lock mechanism\.\s+A crimson glow surrounds the vial\.|Looking closely at the lock\, you spy a tiny vial set just inside the lock mechanism\.\s+The vial is surrounded by crimson glow\./
				update_trap_label("DISARMED")
			#Setting off trap manually
			elsif line =~ /You peer inside the lock and see that the tumblers have all been fused into a lump of useless metal/
				update_trap_label("DISARMED")
			#Trap has already been set off
			elsif line =~ /You peer inside the lock and see that the tumblers have been fused into a lump of useless metal./
				update_trap_label("DISARMED")
	#####Springs information#####
			#Manual detection
			elsif line =~ /After carefully examining the lock\, you move on to the hinges of the .*\.\s+Just as you were to pass the.* off as safe\, you notice what appears to be the ends of springs incorporated with the hinges\.\s+Seems rather odd to have.* designed to spring open when it is unlocked\./
				update_trap_label("Springs")
			#Successful manual disarm
			elsif line =~ /With a little force applied to the springs\, you manage to pop them inside the.*\, from within which comes the tinkle of breaking glass\, followed by a strong acrid smell\.|With a little force applied to the springs\, you manage to pop them inside.*\, where they bounce around for a moment\.\s+You also hear something else rolling around in there\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			#Same messaging as when no traps found.
			#Already disarmed with 408
			elsif line =~ /You spot a reddish glow about the hinges of the.*\./
				update_trap_label("DISARMED")
	#####Fire vial information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a small vial of fire\-red liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\./
				update_trap_label("Fire Vial")
			#Successful manual disarm
			elsif line =~ /Using the metal grips from your.*\, you manage to reach in and grasp the post of the metal hammer\, and bend the weak metal out of striking range of the vial\.|Having rendered the hammer harmless\, you carefully remove a thick glass vial filled with murky red liquid from the.*\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole of the lock\, you spy a tiny hammer device which has been bent back slightly\.|Looking closely into the keyhole of the lock\, you spy a small vial of fire\-red liquid and a tiny hammer device which has been bent from striking range of the vial\./
				update_trap_label("DISARMED")
			#Already disarmed with 408 NEED MESSAGING
			#elsif line =~ //
			#	current_trap_type = "Fire vial trap has already been disarmed with 408."
			#	break
	#####Spores information#####
			#Manual detection
			elsif line =~ /Peering into the.*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+The tube is capped with a thin membrane\, but it seems likely that the tumblers would tear it off while turning\./
				update_trap_label("Spores")
			#Successful manual disarm
			elsif line =~ /Taking a lump of putty from your.*\, you carefully apply it to the end of the small tube\.\s+That should block whatever it\'s meant to deploy\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Peering into the.*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+It appears as though the tube has been plugged with something\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /You see a thin tube extending from the lock mechanism down into the.*\.\s+The end of the tube is surrounded by a crimson glow\.|Peering into the.*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+A crimson glow surrounds the mouth of the tube\./
				update_trap_label("DISARMED")
			#Trap has already been set off
			elsif line =~ /Peering into the .*\'s lock\, you see a small tube towards the bottom of the tumbler mechanism\.\s+It appears as though the tube used to be covered with a thin membrane\, but it has torn mostly away\, and greyish\-green powder covers the area around it\./
				update_trap_label("DISARMED")
	#####Plate information#####
			#Manual detection
			elsif line =~ /There appears to be a plate over the lock\, sealing it and preventing any access to the tumblers\.|Gonna chew through it/
				update_trap_label("Plate")
			#Successful manual disarm
			elsif line =~ /You carefully pour the contents of.*onto the .* where you think the keyhole ought to be\.\s+.*\, the metal plate covering the lock begins to melt away\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /You see a metal plate covering the lock plate\, but it appears to have been melted through\, granting sufficient access to the lock to attempt picking it./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			#Trap can't be disarmed with 408
	#####Glyph information#####
			#Manual detection
			elsif line =~ /You notice some spiderweb\-like scratches on the lock plate which seem\, after some bit of scrutiny\, too organized to be just wear and tear \-\- it might be some type of glyph spell\./
				update_trap_label("Glyph")
			#Successful manual disarm
			elsif line =~ /Knowing how delicate magical glyphs can be\, you scrape some extra lines into the markings hoping to alter their meaning and defeat the spell they may hold\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /You notice some spiderweb\-like scratches on the lock plate which seem\, after some bit of scrutiny\, too organized to be just wear and tear \-\- it might be some type of glyph spell\, but some of the markings have been altered\.\s+This may prevent any magical nature they have from manifesting itself\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			#Trap can't be disarmed with 408
	#####Rods information#####
			#Manual detection
			elsif line =~ /Looking closely into the keyhole\, you notice a pair of small metal rods a hair\'s width from touching each other\.\s+Peering around the inside of the keyhole\, you can see that the lock would push the two rods together should the lock be tampered with\./
				update_trap_label("Rods")
			#Successful manual disarm
			elsif line =~ /With great care you take a pair of metal grips and bend the sensitive metal rods out of alignment\.\s+It looks as though they cannot be pressed together by the lock mechanism any more\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /Looking closely into the keyhole\, you notice a pair of small metal rods that have been bent in opposite directions of each other\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /Near the lock mechanism\, you notice a pair of small metal rods surrounded by a crimson glow\.|Looking closely into the keyhole\, you notice a pair of small metal rods that have a slight reddish glow about them\./
				update_trap_label("DISARMED")
	#####Boomer information#####
			#Manual detection
			elsif line =~ /Carefully\, you feel around the lock and notice the inside chamber is coated with a strange white substance\.\s+From your experience you recognize this as a common.*detonation system for an explosive mixture that was used to treat the .*\./
				update_trap_label("Boomer")
			#Successful manual disarm
			elsif line =~ /Using a bit of putty from your.*\, you cake a thin layer on the lock casing\, hopefully sufficient to prevent sparks when the metal arm strikes it\./
				update_trap_label("DISARMED")
			#Already manually disarmed
			elsif line =~ /A thin layer of mud or putty has been dabbed on the connecting point of the striking arm and the white substance to prevent it from igniting the.* when it is unlocked\./
				update_trap_label("DISARMED")
			#Already disarmed with 408
			elsif line =~ /A deep red glow surrounds the striking arm of the trap mechanism\.\s+You hope it will keep the arm from making contact with the explosive white substance\./
				update_trap_label("DISARMED")
	#####No trap found#####
			elsif line =~ /You discover no traps\./
				@number_of_trap_checks += 1
				update_trap_label("No trap found")
	#####Box is already open#####
			elsif line =~ /Um, but it\'s open|There is no lock on that|You blink in surprise as though just becoming aware of.*presence\.|What were you referring to\?|You want to pick a lock on what/
				update_trap_label("Box open")
			end
		end
	end
	
	private

	def self.load_position
		return unless File.exist?(CONFIG_FILE)

		config = YAML.load_file(CONFIG_FILE)
		if config.is_a?(Array) && config.size == 2
			x = config[0]
			y = config[1]
			@main_window.move(x, y)
		end
	rescue StandardError => e
		puts "Error loading window position: #{e.message}"
	end

	def self.save_position
		position = @main_window.position
		File.write(CONFIG_FILE, position.to_yaml)
	rescue StandardError => e
		puts "Error saving window position: #{e.message}"
	end
end

Gtk.queue {
	BoxBuddyMain.create_window		
	Gtk.main
}

BoxBuddyMain.watching