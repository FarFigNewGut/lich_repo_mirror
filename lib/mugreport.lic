=begin

author: Demandred
version: 0.1

0.1 - fixed hash setup

=end

#hide_me
def message(text)
	string = ''
	if $fake_stormfront then string.concat("\034GSL\r\n ") else string.concat("<pushBold\/>")	end
	if (text.index('\n')) then text.split('\n').each { |line| string.concat("#{line}") } else string.concat(text) end
	if $fake_stormfront then string.concat("\034GSM\r\n ") else string.concat("<popBold\/>") end
	_respond string
end

UserVars.mugreport_debug = false

UserVars.mugged = {} if UserVars.mugged.nil?
UserVars.mugged[:silvers] = ["silvers", 0] if UserVars.mugged[:silvers].nil?
UserVars.mugged[:boxes] = [] if UserVars.mugged[:boxes].nil?
UserVars.mugged[:gems] = [] if UserVars.mugged[:gems].nil?
UserVars.mugged[:items] = [] if UserVars.mugged[:items].nil?
UserVars.mugged[:heirlooms] = [] if UserVars.mugged[:heirlooms].nil?
UserVars.mugged[:attempts] = 0 if UserVars.mugged[:attempts].nil?
UserVars.mugged[:success] = 0 if UserVars.mugged[:success].nil?
mugattempt = 0
mugsuccess = 0
record_info = false
theitem = nil
thegem = nil
thebox = nil
theheirloom = nil
thesilvers = nil
new_item = []
new_gem = []
new_box = []
new_heirloom = []
repeat_item = false
left_just = 5
item_array = []
gem_array = []
box_array = []
heirloom_array = []
silvers_array = ["silvers", 0]

before_dying do
	if (silvers_array[1].to_s.length.to_i + 1) > left_just
		left_just = (silvers_array[1].to_s.length.to_i + 1)
	end
	if !box_array.empty?
		box_array.each do |i|
			if (i[1].to_s.length.to_i + 1) > left_just
				left_just = i[1].to_s.length.to_i + 1
			end
		end
	end
	if !gem_array.empty?
		gem_array.each do |i|
			if (i[1].to_s.length.to_i + 1) > left_just
				left_just = i[1].to_s.length.to_i + 1
			end
		end
	end
	if !item_array.empty?
		item_array.each do |i|
			if (i[1].to_s.length.to_i + 1) > left_just
				left_just = i[1].to_s.length.to_i + 1
			end
		end
	end
	if !heirloom_array.empty?
		heirloom_array.each do |i|
			if (i[1].to_s.length.to_i + 1) > left_just
				left_just = i[1].to_s.length.to_i + 1
			end
		end
	end
	message(sprintf(" Session Mug Report"))
	message(sprintf(" Attempt: #{mugattempt} Success: #{mugsuccess}"))
	if !box_array.empty?
		message(sprintf(" Boxes".rjust(10)))
		box_array.each do |thing|
			respond("#{thing[1].to_s.rjust(left_just)}  -  #{thing[0]}")
		end
	end
	if !gem_array.empty?
		message(sprintf(" Gems".rjust(10)))
		gem_array.each do |thing|
			respond("#{thing[1].to_s.rjust(left_just)}  -  #{thing[0]}")
		end
	end
	if !item_array.empty?
		message(sprintf(" Items".rjust(10)))
		item_array.each do |thing|
			respond("#{thing[1].to_s.rjust(left_just)}  -  #{thing[0]}")
		end
	end
	if !heirloom_array.empty?
		message(sprintf(" Heirlooms".rjust(10)))
		heirloom_array.each do |thing|
			respond("#{thing[1].to_s.rjust(left_just)}  -  #{thing[0]}")
		end
	end
	message(sprintf(" Silvers".rjust(10)))
	respond("#{silvers_array[1].to_s.rjust(left_just)}  -  #{silvers_array[0]}")
end

status_tags
while line = get
		# begin mug
	if line =~ / your attack masking your larcenous intent!/
		message(sprintf("set record_info = true")) if UserVars.mugreport_debug
		mugattempt += 1
		UserVars.mugged[:attempts] += 1
		record_info = true
		# record success
	elsif line =~ /Taking advantage of the scuffle, you roughly pat <pushBold\/>[^<]+<a exist="[^"]+" noun="[^"]+">[^"]+<\/a><popBold\/> down for hidden valuables!/
		mugsuccess += 1
		UserVars.mugged[:success] += 1
		# end mug
	elsif line =~ /Roundtime: \d? sec\./ && record_info == true
		message(sprintf("set record_info = false")) if UserVars.mugreport_debug
		record_info = false
		# gem
	elsif line =~ /<pushBold\/><a exist="[^"]+" noun="[^"]+">.+<\/a><popBold\/> didn't hide (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> well enough!/
		message(sprintf("found gem")) if UserVars.mugreport_debug
		thegem = $1
		new_gem = [thegem, 1]
		message(sprintf("thegem is #{thegem} -- new_gem is #{new_gem}")) if UserVars.mugreport_debug
		gem_array.each do |i|
			if i[0] == thegem
				i[1] += 1
				message(sprintf("Added 1 #{thegem} to the report")) if UserVars.mugreport_debug
				repeat_item = true
				break
			end
		end
		if !repeat_item
			gem_array.push(new_gem)
			message(sprintf("Added 1 #{thegem} to the report")) if UserVars.mugreport_debug
		end
		repeat_item = false
		UserVars.mugged[:gems].each do |i|
			if i[0] == thegem
				i[1] += 1
				repeat_item = true
				break
			end
		end
		if !repeat_item
			UserVars.mugged[:gems].push(new_gem)
		end
		# box
	elsif line =~ /You find (?:a |an )?<a exist="[^"]+" noun="(?:box|chest|coffer|strongbox|trunk|case)">(.+)<\/a> on <pushBold\/><a exist="[^"]+" noun="[^"]+">.+<\/a><popBold\/>!/
		message(sprintf("found box")) if UserVars.mugreport_debug
		thebox = $1
		new_box = [thebox, 1]
		message(sprintf("thebox is #{thebox} -- new_box is #{new_box}")) if UserVars.mugreport_debug
		box_array.each do |i|
			if i[0] == thebox
				i[1] += 1
				message(sprintf("Added 1 #{thebox} to the report")) if UserVars.mugreport_debug
				repeat_item = true
				break
			end
		end
		if !repeat_item
			box_array.push(new_box)
			message(sprintf("Added 1 #{thebox} to the report")) if UserVars.mugreport_debug
		end
		repeat_item = false
		UserVars.mugged[:boxes].each do |i|
			if i[0] == thebox
				i[1] += 1
				repeat_item = true
				break
			end
		end
		if !repeat_item
			UserVars.mugged[:boxes].push(new_box)
		end
		# item 1
	elsif line =~ /<pushBold\/><a exist="[^"]+" noun="[^"]+">[^<]+<\/a><popBold\/> had (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> tucked away!/
		message(sprintf("found item 1")) if UserVars.mugreport_debug
		theitem = $1
		new_item = [theitem, 1]
		message(sprintf("theitem is #{theitem} -- new_item is #{new_item}")) if UserVars.mugreport_debug
		item_array.each do |i|
			if i[0] == theitem
				i[1] += 1
				message(sprintf("Added 1 #{theitem} to the report")) if UserVars.mugreport_debug
				repeat_item = true
				break
			end
		end
		if !repeat_item
			item_array.push(new_item)
			message(sprintf("Added 1 #{theitem} to the report")) if UserVars.mugreport_debug
		end
		repeat_item = false
		UserVars.mugged[:items].each do |i|
			if i[0] == theitem
				i[1] += 1
				repeat_item = true
				break
			end
		end
		if !repeat_item
			UserVars.mugged[:items].push(new_item)
		end
		# item 2
	elsif line =~ /<pushBold\/><a exist="[^"]+" noun="[^"]+">[^<]+<\/a><popBold\/> left (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> behind\./
		message(sprintf("found item 2")) if UserVars.mugreport_debug
		theitem = $1
		new_item = [theitem, 1]
		message(sprintf("theitem is #{theitem} -- new_item is #{new_item}")) if UserVars.mugreport_debug
		item_array.each do |i|
			if i[0] == theitem
				i[1] += 1
				message(sprintf("Added 1 #{theitem} to the report")) if UserVars.mugreport_debug
				repeat_item = true
				break
			end
		end
		if !repeat_item
			item_array.push(new_item)
			message(sprintf("Added 1 #{theitem} to the report")) if UserVars.mugreport_debug
		end
		repeat_item = false
		UserVars.mugged[:items].each do |i|
			if i[0] == theitem
				i[1] += 1
				repeat_item = true
				break
			end
		end
		if !repeat_item
			UserVars.mugged[:items].push(new_item)
		end
		# heirloom
	elsif line =~ /You spy (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a>, which looks like the heirloom that you are searching for!/ && record_info
		message(sprintf("found heirloom")) if UserVars.mugreport_debug
		theheirloom = $1
		new_heirloom = [theheirloom, "heirloom"]
		message(sprintf("theheirloom is #{theheirloom} -- new_heirloom is #{new_heirloom}")) if UserVars.mugreport_debug
		heirloom_array.push(new_heirloom)
		UserVars.mugged[:heirlooms].push(new_heirloom)
		message(sprintf("Added 1 #{theheirloom}, an heirloom, to the report")) if UserVars.mugreport_debug
		# silvers
	elsif line =~ /You rifle <pushBold\/><a exist="[^"]+" noun="[^"]+">[^<]+<\/a><popBold\/> pockets and discover ([,\d]+) silvers?!/
		thesilvers = $1.delete(',').to_i
		message(sprintf("thesilvers is #{thesilvers}")) if UserVars.mugreport_debug
		silvers_array[1] += thesilvers
		UserVars.mugged[:silvers][1] += thesilvers
		message(sprintf("Added #{thesilvers} silvers to the report")) if UserVars.mugreport_debug
	end
end
