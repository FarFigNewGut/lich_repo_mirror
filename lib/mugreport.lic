=begin

	author: Demandred
	version: 2024.10.22.2
	game: Gemstone
	tags: rogue,mug,items,info

	**** IMPORTANT ****
		There is no exporting. If you run into problems with an old yaml not working, or throwing errors, look me up on discord or maybe through game. I can help move it to the new system if you really want to. I can even probably still move the old style of saving the data if you still have that. Though that's been some time ago.
	
	deleted alltimemugging and exportmugstoyaml from repo. You can do what alltime did easily using the below.

	2024.10.22.2 - Cleaned up version history and such. Meh.
	
	2024.10.22 - Added self.current/self.brief/self.all for easier access to realtime stats.
		;e MugReport.all
		;e MugReport.current
		;e MugReport.brief

	2024.08.26 - 	Running into a mild issue. Think I got it...
		Modified the heirlooms a bit so they will track dupes. Breaks the current yaml.
		If you have problems contact me.

  2024.08.21 - 	Some minor changes and cleanup. (been a while, whew...)

=end

require 'yaml'

module MugReport
	UserVars.mugreport_debug = false if UserVars.mugreport_debug.nil?
	@record_info = false
	@theitem = nil
	@thegem = nil
	@thebox = nil
	@theheirloom = nil
	@thesilvers = nil
	@new_item = []
	@new_gem = []
	@new_box = []
	@new_heirloom = []
	@repeat_item = false
	@leftjust = 4
  @silversjust = 6
	@mugreport_savettl = Time.now + 900

	def self.message(text)
		string = ''
		if $fake_stormfront then string.concat("\034GSL\r\n ") else string.concat("<pushBold\/>") end
		if (text.index('\n')) then text.split('\n').each { |line| string.concat("#{line}") } else string.concat(text) end
		if $fake_stormfront then string.concat("\034GSM\r\n ") else string.concat("<popBold\/>") end
		_respond string
	end

	Dir.mkdir("#{$data_dir}#{XMLData.game}") unless File.exist?("#{$data_dir}#{XMLData.game}")
	Dir.mkdir("#{$data_dir}#{XMLData.game}/#{XMLData.name}") unless File.exist?("#{$data_dir}#{XMLData.game}/#{XMLData.name}")
	@mugfilename = "#{$data_dir}#{XMLData.game}/#{XMLData.name}/mugreport.yaml"

	def self.load()
    if !File.exist?("#{@mugfilename}")
      @mugreport = Hash.new
			@mugreport[:silvers] = 0
			@mugreport[:boxes] = []
			@mugreport[:gems] = []
			@mugreport[:items] = []
			@mugreport[:heirlooms] = []
			@mugreport[:attempts] = 0
			@mugreport[:success] = 0
			MugReport.save()
		else
			@mugreport = YAML.load_file(@mugfilename)
			if @mugreport == false
				@mugreport = Hash.new
				@mugreport[:silvers] = 0
				@mugreport[:boxes] = []
				@mugreport[:gems] = []
				@mugreport[:items] = []
				@mugreport[:heirlooms] = []
				@mugreport[:attempts] = 0
				@mugreport[:success] = 0
				MugReport.save()
			end
		end
		@mugsession = Hash.new
		@mugsession[:silvers] = 0
		@mugsession[:boxes] = []
		@mugsession[:gems] = []
		@mugsession[:items] = []
		@mugsession[:heirlooms] = []
		@mugsession[:attempts] = 0
		@mugsession[:success] = 0
		before_dying {
			MugReport.save()
			MugReport.report("current")
		}
	end

	def self.save()
		File.write(@mugfilename,@mugreport.to_yaml)
		Lich::Messaging.msg("info","#{Script.self.to_s}: Data saved to #{@mugfilename}.")
		@mugreport_savettl = Time.now + 900
	end

	def self.report(var)
		totalboxes = 0
		totalgems = 0
		totalitems = 0
		totalheirlooms = 0

		full = true
		if var =~ /^current$/i
			report = @mugsession
			header = " Session Mug Report"
		elsif var =~ /^all$/i
			report = @mugreport
			header = " All Time Mug Report"
		elsif var =~ /^brief$/i
			report = @mugreport
			header = "All Time Totals"
			full = false
		elsif var !~ /^current$|^all$|^brief$/
			MugReport.message("That's not the way this works!")
			return
		end
		if (report[:silvers].to_s.length.to_i + 1) > @silversjust
			@silversjust = (report[:silvers].to_s.length.to_i + 1)
		end
		if !report[:boxes].empty?
			report[:boxes].each do |i|
				if (i[1].to_s.length.to_i + 1) > @leftjust
					@leftjust = i[1].to_s.length.to_i + 1
				end
				totalboxes += i[1]
			end
		end
		if !report[:gems].empty?
			report[:gems].each do |i|
				if (i[1].to_s.length.to_i + 1) > @leftjust
					@leftjust = i[1].to_s.length.to_i + 1
				end
				totalgems += i[1]
			end
		end
		if !report[:items].empty?
			report[:items].each do |i|
				if (i[1].to_s.length.to_i + 1) > @leftjust
					@leftjust = i[1].to_s.length.to_i + 1
				end
				totalitems += i[1]
			end
		end
		if !report[:heirlooms].empty?
			report[:heirlooms].each do |i|
				if (i[1].to_s.length.to_i + 1) > @leftjust
					@leftjust = i[1].to_s.length.to_i + 1
				end
				totalheirlooms += i[1]
			end
		end
		MugReport.message(header)
		MugReport.message(" Attempts: #{report[:attempts]} Successes: #{report[:success]}")
		if !report[:boxes].empty?
			MugReport.message(" Boxes - Total Found: #{totalboxes} / Unique: #{report[:boxes].count}")
			if full
				report[:boxes].each do |thing|
					respond("#{thing[1].to_s.rjust(@leftjust)}  -  #{thing[0]}")
				end
			end
		end
		if !report[:gems].empty?
			MugReport.message(" Gems - Total Found: #{totalgems} / Unique: #{report[:gems].count}")
			if full
				report[:gems].each do |thing|
					respond("#{thing[1].to_s.rjust(@leftjust)}  -  #{thing[0]}")
				end
			end
		end
		if !report[:items].empty?
			MugReport.message(" Items - Total Found: #{totalitems} / Unique: #{report[:items].count}")
			if full
				report[:items].each do |thing|
					respond("#{thing[1].to_s.rjust(@leftjust)}  -  #{thing[0]}")
				end
			end
		end
		if !report[:heirlooms].empty?
			MugReport.message(" Heirlooms - Total Found: #{totalheirlooms} / Unique: #{report[:heirlooms].count}")
			if full
				report[:heirlooms].each do |thing|
					respond("#{thing[1].to_s.rjust(@leftjust)}  -  #{thing[0]}")
				end
			end
		end
		if report[:silvers] != 0
			MugReport.message(" Silvers")
			respond("#{report[:silvers].to_s.rjust(@silversjust)}")
		end
	end

	def self.all
		self.report("all")
	end

	def self.brief
		self.report("brief")
	end

	def self.current
		self.report("current")
	end

	def self.watch()
		status_tags
		while line = get
				# begin mug
			if line =~ / your attack masking your larcenous intent!/
				MugReport.message("set @record_info = true") if UserVars.mugreport_debug
				@mugsession[:attempts] += 1
				@mugreport[:attempts] += 1
				@record_info = true
				# record success
			elsif line =~ /Taking advantage of the scuffle, you roughly pat <pushBold\/>[^<]+<a exist="[^"]+" noun="[^"]+">[^"]+<\/a><popBold\/> down for hidden valuables!/ && @record_info
				@mugsession[:success] += 1
				@mugreport[:success] += 1
				# gem
			elsif line =~ /<pushBold\/><a exist="[^"]+" noun="[^"]+">.+<\/a><popBold\/> didn't hide (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> well enough!/ && @record_info
				@repeat_item = false
				MugReport.message("found gem") if UserVars.mugreport_debug
				@thegem = $1
				@new_gem = [@thegem, 1]
				MugReport.message("@thegem is #{@thegem} -- @new_gem is #{@new_gem}") if UserVars.mugreport_debug
				@mugsession[:gems].each do |i|
					if i[0] == @thegem
						i[1] += 1
						MugReport.message("Added 1 repeat #{@thegem} to the session report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugsession[:gems].push(@new_gem)
					MugReport.message("Added 1 new #{@thegem} to the session report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				@mugreport[:gems].each do |i|
					if i[0] == @thegem
						i[1] += 1
            MugReport.message("Added 1 repeat #{@thegem} to the alltime report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugreport[:gems].push(@new_gem)
          MugReport.message("Added 1 new #{@thegem} to the alltime report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				# box
			elsif line =~ /You find [^<]+<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> on (?:<[^>]+>)?<a exist="[^"]+" noun="[^"]+">[^<]+<\/a>(?:<[^>]+>)+!/ && @record_info
				@repeat_item = false
				MugReport.message("found box") if UserVars.mugreport_debug
				@thebox = $1
				@new_box = [@thebox, 1]
				MugReport.message("@thebox is #{@thebox} -- @new_box is #{@new_box}") if UserVars.mugreport_debug
				@mugsession[:boxes].each do |i|
					if i[0] == @thebox
						i[1] += 1
						MugReport.message("Added 1 repeat #{@thebox} to the session report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugsession[:boxes].push(@new_box)
					MugReport.message("Added 1 new #{@thebox} to the session report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				@mugreport[:boxes].each do |i|
					if i[0] == @thebox
						i[1] += 1
            MugReport.message("Added 1 repeat #{@thebox} to the alltime report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugreport[:boxes].push(@new_box)
          MugReport.message("Added 1 new #{@thebox} to the alltime report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				# item 1
			elsif line =~ /<pushBold\/><a exist="[^"]+" noun="[^"]+">[^<]+<\/a><popBold\/> had (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> tucked away!/ && @record_info
				@repeat_item = false
				MugReport.message("found item 1") if UserVars.mugreport_debug
				@theitem = $1
				@new_item = [@theitem, 1]
				MugReport.message("@theitem is #{@theitem} -- @new_item is #{@new_item}") if UserVars.mugreport_debug
				@mugsession[:items].each do |i|
					if i[0] == @theitem
						i[1] += 1
						MugReport.message("Added 1 repeat #{@theitem} to the session report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugsession[:items].push(@new_item)
					MugReport.message("Added 1 new #{@theitem} to the session report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				@mugreport[:items].each do |i|
					if i[0] == @theitem
						i[1] += 1
            MugReport.message("Added 1 repeat #{@theitem} to the alltime report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugreport[:items].push(@new_item)
          MugReport.message("Added 1 new #{@theitem} to the alltime report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				# item 2
			elsif line =~ /<pushBold\/><a exist="[^"]+" noun="[^"]+">[^<]+<\/a><popBold\/> left (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a> behind\./ && @record_info
				@repeat_item = false
				MugReport.message("found item 2") if UserVars.mugreport_debug
				@theitem = $1
				@new_item = [@theitem, 1]
				MugReport.message("@theitem is #{@theitem} -- @new_item is #{@new_item}") if UserVars.mugreport_debug
				@mugsession[:items].each do |i|
					if i[0] == @theitem
						i[1] += 1
						MugReport.message("Added 1 repeat #{@theitem} to the session report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugsession[:items].push(@new_item)
					MugReport.message("Added 1 new #{@theitem} to the session report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				@mugreport[:items].each do |i|
					if i[0] == @theitem
						i[1] += 1
            MugReport.message("Added 1 repeat #{@theitem} to the alltime report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugreport[:items].push(@new_item)
          MugReport.message("Added 1 new #{@theitem} to the alltime report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				# heirloom
			elsif line =~ /You spy (?:a |an |some )?<a exist="[^"]+" noun="[^"]+">([^<]+)<\/a>, which looks like the heirloom that you are searching for!/ && @record_info
        @repeat_item = false
				MugReport.message("found heirloom") if UserVars.mugreport_debug
				@theheirloom = $1
				@new_heirloom = [@theheirloom, 1]
				MugReport.message("@theheirloom is #{@theheirloom} -- @new_heirloom is #{@new_heirloom}") if UserVars.mugreport_debug
        @mugsession[:heirlooms].each do |i|
          if i[0] == @theheirloom
						i[1] += 1
						MugReport.message("Added 1 repeat #{@theheirloom} to the session report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
        end
        if !@repeat_item
					@mugsession[:heirlooms].push(@new_heirloom)
					MugReport.message("Added 1 new #{@theheirloom} to the session report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				@mugreport[:heirlooms].each do |i|
					if i[0] == @theheirloom
						i[1] += 1
            MugReport.message("Added 1 repeat #{@theheirloom} to the alltime report") if UserVars.mugreport_debug
						@repeat_item = true
						break
					end
				end
				if !@repeat_item
					@mugreport[:heirlooms].push(@new_heirloom)
          MugReport.message("Added 1 new #{@theheirloom} to the alltime report") if UserVars.mugreport_debug
				end
				@repeat_item = false
				# silvers
			elsif line =~ /You rifle <pushBold\/><a exist="[^"]+" noun="[^"]+">[^<]+<\/a><popBold\/> pockets and discover ([,\d]+) silvers?!/ && @record_info
				@thesilvers = $1.delete(',').to_i
				MugReport.message("@thesilvers is #{@thesilvers}") if UserVars.mugreport_debug
				@mugsession[:silvers] += @thesilvers
				@mugreport[:silvers] += @thesilvers
				MugReport.message("Added #{@thesilvers} silvers to the report") if UserVars.mugreport_debug
				# end mug
			elsif line =~ /Roundtime: \d? sec\./ && @record_info == true
				MugReport.message("set @record_info = false and write") if UserVars.mugreport_debug
				if Time.now > @mugreport_savettl
					MugReport.save()
				end
				@record_info = false
				@repeat_item = false
			end
		end
	end
end

MugReport.load()
MugReport.watch()
