module RiftTimer
  LogFile = File.join(DATA_DIR, "rift-entry.log")
  # uid for last movement east
  @fog_id = 4562110
  @log    = File.open(LogFile, "a")

  def self.in_east_fog?
    XMLData.room_id.eql?(@fog_id)
  end

  def self.msg(str)
    _respond "<b>%s</b>" % str
  end

  def self.track()
    start_time = Time.now
    wait_while("[%s] waiting while in u%s" % [Time.now.to_s, @fog_id]) {self.in_east_fog?}
    end_time = Time.now
    diff = end_time - start_time
    entry = "[%s] waited for %s seconds" % [Time.now.to_s, diff.round]
    self.msg(entry)
    @log.write entry + "\n"
    @log.flush
  end

  def self.main()
    self.msg "logging times spent in the Rift queue"
    loop {
      wait_until {self.in_east_fog?}
      respond
      self.track()
      sleep 0.1
    }
  end

  module Stats
    def self.mean(values)
      values.reduce(&:+) / values.size
    end

    def self.variance(values)
      m = self.mean(values)
      sum = 0.0
      values.each {|v| sum += (v-m)**2 }
      sum/values.size
    end

    def self.median(values)
      sorted = values.sort
      len = sorted.length
      (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0
    end

    def self.standard_deviation(values)
      Math.sqrt(self.variance(values))
    end

    def self.print(col, val)
      respond "%s=%s" % [col.to_s.rjust(20), val]
    end

    def self.main()
      wait_times = File.read(LogFile).split("\n").map {|line| line =~ /waited for (\d+) seconds/; $1.to_i}
      _respond "<b>Rift Wait Times Stats</b>"
      self.print :mean, self.mean(wait_times)
      self.print :variance, self.variance(wait_times)
      self.print :standard_deviation, self.standard_deviation(wait_times)
      self.print :median, self.median(wait_times)
      self.print :max, wait_times.max
      self.print :min, wait_times.min
      self.print :observations, wait_times.size
      exit
    end
  end

  Stats.main if Script.current.vars.include?("--stats")

  self.main()
end