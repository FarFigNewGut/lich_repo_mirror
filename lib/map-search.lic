require "benchmark"
module MapSearch
  def self.search(substr)
    Map.list.select do |room| 
      substr.all? { |substr| to_searchable_string(room).include?(substr) }
    end
  end

  def self.to_searchable_string(room)
    (room.title.join("\n") + room.desc.join("\n") + room.tags.join).downcase
  end

  def self.main(substr = Script.current.vars.first)
    params  = substr.downcase.split("+").map(&:strip)
    results = []
    runtime = Benchmark.realtime { results = MapSearch.search(params) }
    results.take(50).each do |room| print_go2_room(room) end
    _respond "<b>found #{results.size} result#{results.size == 1 ? "" : "s"} in #{runtime}ms</b>"
    _respond "<b>only showing 50 of #{results.size}</b>" if results.size > 50
  end

  def self.print_go2_room(room)
    _respond <<~ROOM
      <d cmd=";go2 #{room.id}">#{room.title.first} ... [#{room.location}: Room ##{room.id}]</d>
      #{room.description.first}
      #{room.paths.first}
    ROOM
  end

  main()
end