=begin

	Calculates the cost of a service you want performed.
	
	Currently supports Enchant (925), Ensorcell (735), Sanctify (330), Resist Nature (620)
	
	Simply start the script and input the information the script asks for and it will calculate how much skill bonus is required to perform the cast, how much suffuse the caster will need to use, the total cost, and more!
	
	Information required: the cast you want done, the item difficulty (Resist Nature/620 doesn't require difficulty), the skill bonus of the caster performing the service, and how much the character is charging.
	
	Changelog:
	Version 1: Initial release and stuff and stuff
	Version 2: Now has a GUI menu for all of you GUI lovers!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version 2

=end

@cost_text_to_display = Array.new

def cost_display_text
	longest_string = 0
	@cost_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@cost_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@cost_text_to_display = Array.new
end

ranger_tier_difficulty = [ 0, 100, 200, 300, 400, 500, 250, 350, 450, 550, 650, 400, 500, 600, 700, 800, 550, 650, 750, 850, 950, 700, 800, 900, 1000, 1100 ]

wizard_essence_needed = [ 0, 0, 312, 625, 937, 1250, 1562, 1875, 2187, 2500, 2812, 3125, 3437, 3750, 4062, 4375, 4687, 5000, 5312, 5625, 5937, 6250, 6562, 6875, 7187, 7500, 15000, 22500, 30000, 37500, 45000, 52500, 60000, 67500, 75000, 82500, 90000, 97500, 105000, 112500, 120000, 127500, 135000, 142500, 150000, 157500, 165000, 172500, 180000, 187500, 195000 ]

@cost_text_to_display.push("Commas can be used or omitted in all settings, it doesn't matter either way.")
@cost_text_to_display.push("")
@cost_text_to_display.push("Service:")
@cost_text_to_display.push("wizard OR 925")
@cost_text_to_display.push("sorc   OR 735")
@cost_text_to_display.push("cleric OR 330")
@cost_text_to_display.push("ranger OR 620")
@cost_text_to_display.push("")
@cost_text_to_display.push("Item difficulty: (this doesn't need to be filled out for Ranger/620)")
@cost_text_to_display.push("Enter item difficulty found when using RECALL on item.")
@cost_text_to_display.push("")
@cost_text_to_display.push("Bonus wanted:")
@cost_text_to_display.push("Example for enchant: 35")
@cost_text_to_display.push("Example for Ensorcell and Sanctify: 4")
@cost_text_to_display.push("Examples for Resist Nature:")
@cost_text_to_display.push("If you want a T2 performed on your 1st resistance enter: r1t2")
@cost_text_to_display.push("If you want a T5 performed on your 2nd resistance enter: r2t5")
@cost_text_to_display.push("")
@cost_text_to_display.push("Skill Bonus:")
@cost_text_to_display.push("Enter skill bonus of character performing service.")
@cost_text_to_display.push("For example: 679")
@cost_text_to_display.push("")
@cost_text_to_display.push("Cost:")
@cost_text_to_display.push("For Enchanting enter how much the character is charging per point of essence.")
@cost_text_to_display.push("For example: 70")
@cost_text_to_display.push("All other services enter how much the character is charging per week.")
@cost_text_to_display.push("For example: 2,000,000 or 2000000")
cost_display_text

if Gem.loaded_specs["gtk3"]
	gtk_version = 3
else
	gtk_version = 2
end

Gtk.queue {
	$COST_WINDOW = Gtk::Window.new
	$COST_WINDOW.title = "Cost"
	$COST_WINDOW.set_border_width(10)
	
	#GTK2 and GTK3 nonsense:
	if gtk_version == 2
		$COST_BOX = Gtk::VBox.new(false)
		$COST_BOX.set_border_width(5)
		$COST_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
	else
		$COST_BOX = Gtk::Box.new(:vertical)
		$COST_BOX.set_border_width(5)
		$COST_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
		end
	#####

	$COST_WINDOW.add($COST_BOX)
	$COST_NOTEBOOK = Gtk::Notebook.new
	$COST_NOTEBOOK.set_show_border(true)
	$COST_BOX.add($COST_NOTEBOOK)
	$COST_NOTEBOOK.append_page($COST_VERTICAL_BOX1, Gtk::Label.new('Info'))
	$COST_ENTRY = Hash.new 
	$COST_TABLE_SIZE = Hash.new
}

Gtk.queue {
	$COST_TABLE1 = Gtk::Table.new(6, 3, false)
	$COST_TABLE1.row_spacings=3
	$COST_TABLE1.column_spacings=3
	$COST_VERTICAL_BOX1.pack_start($COST_TABLE1, false, false, 0)
}

def self.add_label_entry(table, label, variable)
	size = $COST_TABLE_SIZE[table] || 0

	label = Gtk::Label.new(label)
	align = Gtk::Alignment.new 1, 0, 0, 0
	align.set_padding(4, 0, 3, 4)
	align.add(label)
	table.attach(align, 0, 1, size, size + 1)

	entry = Gtk::Entry.new
	entry.text = UserVars.cost[variable].to_s
	entry.set_width_request(157)
	table.attach(entry, 1, 2, size, size + 1)

	$COST_ENTRY[variable] = entry
	$COST_TABLE_SIZE[table] += 1
end

Gtk.queue {
	$COST_ENTRY = Hash.new
	add_label_entry($COST_TABLE1, "Service", 'service_being_performed')
	add_label_entry($COST_TABLE1, "Item Difficulty", 'item_difficulty')
	add_label_entry($COST_TABLE1, "Bonus wanted", 'service_bonus_wanted')
	add_label_entry($COST_TABLE1, "Skill Bonus", 'skill_bonus_of_character')
	add_label_entry($COST_TABLE1, "Cost", 'cost_for_service')
}

def self.add_checkbox(table, x_pos, label, variable, default = false)
	size = $COST_TABLE_SIZE[table] || 0
	checkbox = Gtk::CheckButton.new label
	value = UserVars.cost[variable].nil? ? default : UserVars.cost[variable]
	checkbox.set_active(value)
	table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
	$COST_ENTRY[variable] = checkbox
	$COST_TABLE_SIZE[table] += 1 if x_pos == 1
end
        
Gtk.queue {
	$COST_WINDOW.signal_connect("delete_event") {
		$COST_SETUP_COMPLETED = true
	}
}
        
Gtk.queue {

	label = Gtk::Label.new
	label.set_markup("
	<b>The help menu was displayed in game when you started the script.
	This help menu explains how to fill out each setting.
	</b>")
	align = Gtk::Alignment.new(1, 0, 0, 0)
	align.set_padding(50, 0, 0, 40)
	align.add(label)
	$COST_TABLE1.attach(align, 1, 2, 8, 100)

	$COST_WINDOW.show_all
}
       
$COST_SETUP_COMPLETED = false
until($COST_SETUP_COMPLETED)
	sleep 1
end
	
UserVars.cost ||= Hash.new
$COST_ENTRY.keys.each { |key|
	if( $COST_ENTRY[key].class.to_s =~ /CheckButton/ )
		value = $COST_ENTRY[key].active?
		UserVars.cost[key] = $COST_ENTRY[key].active?
	else
		UserVars.cost[key] = $COST_ENTRY[key].text.strip.downcase
	end
}

UserVars.save()
        
Gtk.queue {
	$COST_WINDOW.destroy
}

service_being_performed = UserVars.cost["service_being_performed"]

if service_being_performed !~ /^(wizard|925|sorc|735|cleric|330|ranger|620)$/
	@cost_text_to_display.push("Incorrect input in 'Service' setting.")
	@cost_text_to_display.push("Options are: wizard, 925, sorc, 735, cleric, 330, ranger, 620")
	cost_display_text
	exit
end

if service_being_performed =~ /wizard|925/
	service_being_performed = 925
elsif service_being_performed =~ /sorc|735/
	service_being_performed = 735
elsif service_being_performed =~ /cleric|330/
	service_being_performed = 330
elsif service_being_performed =~ /ranger|620/
	service_being_performed = 620
end

item_difficulty = UserVars.cost["item_difficulty"].delete(",").to_i
if UserVars.cost["item_difficulty"].delete(",") !~ /^\d+$/ && service_being_performed != 620
	@cost_text_to_display.push("Incorrect input in 'Item Difficulty' setting.")
	@cost_text_to_display.push("Enter item difficulty found when using RECALL on item.")
	cost_display_text
end

if service_being_performed == 620
	check_correct_info = UserVars.cost["service_bonus_wanted"].split(/r|t/)
	if UserVars.cost["service_bonus_wanted"] !~ /^r\dt\d$/i
		@cost_text_to_display.push("Incorrect input in 'Bonus wanted' setting.")
		@cost_text_to_display.push("Enter the bonus you want.")
		@cost_text_to_display.push("Example if you want a T2 performed on your 1st resistance enter: r1t2")
		@cost_text_to_display.push("Example if you want a T5 performed on your 2nd resistance enter: r2t5")
		cost_display_text
		exit
	elsif check_correct_info[0].to_i > 5 || check_correct_info[1].to_i > 5
		@cost_text_to_display.push("Highest Resistance is 5 and highest Tier is 5. Try again.")
		cost_display_text
		exit
	else
		if check_correct_info[0].to_i > 5 || check_correct_info[1].to_i > 5
			@cost_text_to_display.push("Highest Resistance is 5 and highest Tier is 5. Try again.")
			cost_display_text
		else
			if check_correct_info[0].to_i == 1
				ranger_tier_wanted = 0
			elsif check_correct_info[0].to_i == 2
				ranger_tier_wanted = 5
			elsif check_correct_info[0].to_i == 3
				ranger_tier_wanted = 10
			elsif check_correct_info[0].to_i == 4
				ranger_tier_wanted = 15
			elsif check_correct_info[0].to_i == 5
				ranger_tier_wanted = 20
			end
			ranger_tier_wanted += check_correct_info[1].to_i
			service_bonus_wanted = check_correct_info[1].to_i
			item_difficulty = ranger_tier_difficulty[ranger_tier_wanted]
			minium_skill_needed = item_difficulty + 100
			service_requested = UserVars.cost["service_bonus_wanted"]
		end
	end
else
	service_bonus_wanted = UserVars.cost["service_bonus_wanted"].to_i
	if UserVars.cost["service_bonus_wanted"].delete(",") !~ /^\d+$/
		@cost_text_to_display.push("Incorrect input in 'Bonus wanted' setting.")
		@cost_text_to_display.push("Enter the bonus you want.")
		@cost_text_to_display.push("Example for enchant: 35")
		@cost_text_to_display.push("Example for Ensorcell and Sanctify: 4")
		cost_display_text
		exit
	elsif service_being_performed == 925 && service_bonus_wanted > 50
		@cost_text_to_display.push("Highest bonus for Enchanting is 50. Try again.")
		cost_display_text
		exit
	elsif service_being_performed == 735 && service_bonus_wanted > 5
		@cost_text_to_display.push("Highest tier for Ensorcell is 5. Try again.")
		cost_display_text
		exit
	elsif service_being_performed == 330 && service_bonus_wanted > 6
		@cost_text_to_display.push("Highest tier for Sanctify is 6. Try again.")
		cost_display_text
		exit
	else
		service_requested = service_bonus_wanted
	end
end

skill_bonus_of_character = UserVars.cost["skill_bonus_of_character"].delete(",").to_i
if UserVars.cost["skill_bonus_of_character"].delete(",") !~ /^\d+$/
	@cost_text_to_display.push("Incorrect input in 'Skill Bonus' setting.")
	@cost_text_to_display.push("Enter skill bonus of character performing service.")
	@cost_text_to_display.push("For example: 679")
	cost_display_text
	exit
end

cost_for_service = UserVars.cost["cost_for_service"].delete(",").to_i
cost_for_service /= 50000 if service_being_performed != 925
if UserVars.cost["cost_for_service"].delete(",") !~ /^\d+$/
	@cost_text_to_display.push("Incorrect input in 'Cost' setting.")
	@cost_text_to_display.push("For Enchanting enter how much the character is charging per point of essence.")
	@cost_text_to_display.push("For example: 70")
	@cost_text_to_display.push("All other services enter how much the character is charging per week.")
	@cost_text_to_display.push("For example: 2,000,000 or 2000000")
	cost_display_text
	exit
end

if service_being_performed == 925
	points_needed_per_point_of_suffusion = 400
	name_of_resource = "Essence"
	minium_skill_needed = item_difficulty + 120
elsif service_being_performed == 735
	points_needed_per_point_of_suffusion = 2000
	name_of_resource = "Necrotic Energy"
	minium_skill_needed = item_difficulty + 150
elsif service_being_performed == 330
	points_needed_per_point_of_suffusion = 2000
	name_of_resource = "Devotion"
	minium_skill_needed = item_difficulty + 120
elsif service_being_performed == 620
	points_needed_per_point_of_suffusion = 1000
	name_of_resource = "Nature's Grace"
end

if service_being_performed == 925
	points_needed_for_cast = wizard_essence_needed[service_bonus_wanted]
else
	if service_bonus_wanted == 1
		points_needed_for_cast = 50000
	elsif service_bonus_wanted == 2
		points_needed_for_cast = 75000
	elsif service_bonus_wanted == 3
		points_needed_for_cast = 100000
	elsif service_bonus_wanted == 4
		points_needed_for_cast = 125000
	elsif service_bonus_wanted == 5
		points_needed_for_cast = 150000
	elsif service_bonus_wanted == 6
		points_needed_for_cast = 200000
	end
end

cost_for_cast_of_service = points_needed_for_cast * cost_for_service

suffuse_points_needed = skill_bonus_of_character - minium_skill_needed

if suffuse_points_needed < 0
	suffuse_points_needed = suffuse_points_needed.abs
else
	suffuse_points_needed = 0
end

cost_for_suffuse_points = (suffuse_points_needed * points_needed_per_point_of_suffusion) * cost_for_service

if service_being_performed == 925
	@cost_text_to_display.push("Information for a +#{service_requested} cast:")
elsif service_being_performed == 735
	@cost_text_to_display.push("Information for a T#{service_requested} cast:")
elsif service_being_performed == 330
	@cost_text_to_display.push("Information for an S#{service_requested} cast:")
elsif service_being_performed == 620
	@cost_text_to_display.push("Information for a #{service_requested.upcase} cast:")
end
@cost_text_to_display.push("Caster's skill: #{skill_bonus_of_character.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
@cost_text_to_display.push("Item difficulty: #{item_difficulty.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
@cost_text_to_display.push("Minimum bonus needed for 100% success (except fumbles): #{minium_skill_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
@cost_text_to_display.push("Suffuse needed: #{suffuse_points_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (requires #{(suffuse_points_needed * points_needed_per_point_of_suffusion).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} points/#{((suffuse_points_needed * points_needed_per_point_of_suffusion) / 50000.to_f).round(2)} weeks of #{name_of_resource})")
@cost_text_to_display.push("Suffuse added cost: #{cost_for_suffuse_points.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
@cost_text_to_display.push("Cost for just the cast: #{cost_for_cast_of_service.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
@cost_text_to_display.push("Total cost (cast + any suffuse cost): #{(cost_for_suffuse_points + cost_for_cast_of_service).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
cost_display_text