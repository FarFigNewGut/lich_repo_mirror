=begin
A class for accessing Twitter through lich.
For now, it just updates you on tweets by @GemStoneIV.

-Gnomad
=end

#TODO: Keep track of last tweets read per follower.

#TODO: Filter by gametype

#TODO: Add lists, follow @lichproject as well?

#TODO: Add Twitter accounts, which will include the features:
#TODO: Add the abilitiy to get tweets from people other that GemstoneIV
#TODO: Add the ability to tweet

i_stand_alone

if $SAFE !=0
	echo "Sorry, Twitter must be trusted in order to run."
	exit(1)
end

require "net/http"
require "rexml/document"

class Tweet

	attr_accessor :id, :text, :game, :time, :user

	def initialize (xml)
		@user = xml.elements["user/screen_name"].text
		@id = xml.elements["id"].text
		@text = xml.elements["text"].text
		@time = Time.parse(xml.elements["created_at"].text)
		@game = case
			when @text =~ /Platinum/; :platinum
			when @text =~ /Shattered/; :shattered
			when @text =~ /Gemstone IV!|Prime/; :prime
			else :unknown
		end
	end
	
	def to_s
		timeDiff = (Time.new - @time)
		case timeDiff
			when (60*60)..(60*60*23) #one to 23 hours ago
				timeOutput = "About #{(timeDiff / (60 * 60)).round} hours ago,"
			when 60..(60*60-1) #1 to 60 mins
				timeOutput =  "About #{(timeDiff / (60)).round} minutes ago,"
			when 0..59
				timeOutput = "About #{timeDiff.round} seconds ago,"
			else timeOutput = @time.strftime("At %I:%M%p on %d %B,") #>23 hours
			
		end
		return "#{timeOutput}" + " " + "#{@user}" + " tweeted:\n\t#{@text}\n"
	end
end

class TwitterRateError < IOError
end	

class Twitter

	attr_accessor :user, :hashtags, :followers, :timeline
	attr_reader :newTweets, :updateRate
	
	@@TWITTER_URI = "http://api.twitter.com"
	@@PATHS = {:status => "/1/statuses/user_timeline.xml", :rate => "/1/account/rate_limit_status.xml"}
	@@STARTING_TWEET_COUNT = 5
		
	#some structs to keep track of twitter users and tweets
	@@Twitterer = Struct.new(:userName, :latestTweetID)	
	
	#initializes with the player's username
	#if no username, give default followers and hashtags
	#TODO: Implement users
	def initialize(user = nil)
		@user = @@Twitterer.new(user)
		@updateRate = (3*60) #Update every 2 minutes.  If you lower this, Twitter might get mad at you.
		if @user.userName == nil
			@following = [@@Twitterer.new(:NFL)]
		end
		@timeline = []
		@hashtags = ["#gemstoneiv", "#lich"]
	end
	
	#Checks to see if we have a twitter user or are just checking on the GS tweets
	def noAccount?
		return user.userName == nil
	end			
	
	#Gets tweets for the people you are following
	def pullTweets()
		@following.each do |friend|
			if friend.latestTweetID.nil?
				params = "?screen_name=#{friend.userName}" + "&count=#{@@STARTING_TWEET_COUNT}"
			else
				params = "?screen_name=#{friend.userName}&since_id=#{friend.latestTweetID}"
			end
			response = connect(params)
			xml = REXML::Document.new(response.body)
			if hasTweets?(xml)
				processTweets(xml)
				friend.latestTweetID = @timeline[0].id
				@newTweets = true
			else
				@newTweets = false
			end
		end
				
		rescue TwitterRateError => e
			echo e.message
			echo "We're going to slow things down a bit."
			@updateRate = (10*60) #10 minute rate
	end
	
	#Opens a connection to Twitter's server
	def connect(params = nil, path = @@PATHS[:status])
		if shouldBotherTwitter?
			Net::HTTP.get_response(URI.parse( "#{@@TWITTER_URI}#{path}#{params}" ))
		else
			raise TwitterRateError, "Over 150 requests/hour have come from your IP address.  Please try again later."
		end
	end
	
	
	#shortcut
	def newTweets?
		return @newTweets
	end
	
	#Parses the XML into the @tweets array 
	def processTweets(xml)
		n = @timeline.length
		root = xml.root
		root.each_element("//status") {|element| @timeline.push(Tweet.new(element))}
		@timeline.sort! {|x, y| y.id.to_i <=> x.id.to_i}
		@newTweets = @timeline.length - n
	end
	
	def hasTweets?(xml)
		return !xml.elements["/statuses/status/truncated"].nil?
	end
	
	def shouldBotherTwitter?
		response = Net::HTTP.get_response( URI.parse( "#{@@TWITTER_URI}#{@@PATHS[:rate]}" ))
		xml = REXML::Document.new(response.body)
		return xml.elements["/hash/remaining-hits"].text.to_i > 1
	end
	
	def displayTweets()
		respond "----- Tweets coming in! ----- \n"
		
		@timeline.each {|tweet| respond "\n#{tweet}\n"}
		
		respond "----- End of Tweets -----"
	end
end

GSIV = Twitter.new()
loop{
GSIV.pullTweets
if GSIV.newTweets? 
	GSIV.displayTweets
end
pause GSIV.updateRate
}
