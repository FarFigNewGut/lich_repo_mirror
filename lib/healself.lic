# HealSelf
# By Someone!
# Use ";healself SETUP"
# Can be configured to run constantly in the background, or just once and end

def Cure(cureLocation, cureMana)	
	CheckHealth()
	
	while checkmana < cureMana
		CheckHealth()		
		pause 5
	end
	
	waitrt?
	waitcastrt?
	fput "cure #{cureLocation}"
	pause 3
end

def CheckHealth
	while percenthealth < 90
		wait_while { checkmana < 1 }
		waitrt?
		waitcastrt?
		fput "cure blood"
		pause 3
	end
end

def CheckWoundsOfLevel(level, manaModifier)
	if Wounds.head == level			then Cure("head", 4+manaModifier) end
	if Wounds.neck == level			then Cure("neck", 4+manaModifier) end
	if Wounds.chest == level		then Cure("chest", 5+manaModifier) end
	if Wounds.abdomen == level		then Cure("abdomen", 5+manaModifier) end
	if Wounds.leftArm == level		then Cure("left arm", 2+manaModifier) end
	if Wounds.rightArm == level		then Cure("right arm", 2+manaModifier) end
	if Wounds.leftLeg == level		then Cure("left leg", 2+manaModifier) end
	if Wounds.rightLeg == level		then Cure("right leg", 2+manaModifier) end
	if Wounds.back == level			then Cure("back", 5+manaModifier) end
	if Wounds.leftHand == level		then Cure("left hand", 2+manaModifier) end
	if Wounds.rightHand == level	        then Cure("right hand", 2+manaModifier) end
	if Wounds.nerves == level		then Cure("nerves", 3+manaModifier) end
	if Wounds.leftEye == level		then Cure("left eye", 5+manaModifier) end
	if Wounds.rightEye == level		then Cure("right eye", 5+manaModifier) end
end

def CheckScarsOfLevel(level, manaModifier)
	if Scars.head == level			then Cure("head", 13+manaModifier) end
	if Scars.nerves == level		then Cure("nerves", 12+manaModifier) end
	if Scars.neck == level			then Cure("neck", 13+manaModifier) end
	if Scars.chest == level			then Cure("chest", 14+manaModifier) end
	if Scars.abdomen == level		then Cure("abdomen", 14+manaModifier) end
	if Scars.leftArm == level		then Cure("left arm", 11+manaModifier) end
	if Scars.rightArm == level		then Cure("right arm", 11+manaModifier) end
	if Scars.leftLeg == level		then Cure("left leg", 11+manaModifier) end
	if Scars.rightLeg == level		then Cure("right leg", 11+manaModifier) end
	if Scars.back == level			then Cure("back", 14+manaModifier) end
	if Scars.leftHand == level		then Cure("left hand", 11+manaModifier) end
	if Scars.rightHand == level		then Cure("right hand", 11+manaModifier) end		
	if Scars.leftEye == level		then Cure("left eye", 14+manaModifier) end
	if Scars.rightEye == level		then Cure("right eye", 14+manaModifier) end
end

############################################################################################################
############################################################################################################
############################################################################################################

	Settings.load
	Settings[Char.name] ||= Hash.new
	wounds_1			= Settings[Char.name]['wounds_1']
	wounds_2			= Settings[Char.name]['wounds_2']
	wounds_3			= Settings[Char.name]['wounds_3']
	scars_1				= Settings[Char.name]['scars_1']
	scars_2				= Settings[Char.name]['scars_2']
	scars_3				= Settings[Char.name]['scars_3']
	loopBool			= Settings[Char.name]['loopBool']
	
if script.vars[1] =~ /^setup$|^options$/i
	window = window_action = nil
	Gtk.queue {
		button = Gtk::Button.new("Save")
				
		wound1Check = Gtk::CheckButton.new("1")
		wound2Check = Gtk::CheckButton.new("2")
		wound3Check = Gtk::CheckButton.new("3")	
		scar1Check = Gtk::CheckButton.new("1")
		scar2Check = Gtk::CheckButton.new("2")
		scar3Check = Gtk::CheckButton.new("3")
		
		wound1Check.active = wounds_1
		wound2Check.active = wounds_2
		wound3Check.active = wounds_3
		scar1Check.active = scars_1
		scar2Check.active = scars_2
		scar3Check.active = scars_3
		
		woundBox = Gtk::HBox.new(true, 0)
		woundBox.pack_start(wound1Check, false, false, 0)
		woundBox.pack_start(wound2Check, false, false, 0)
		woundBox.pack_start(wound3Check, false, false, 0)
		
		scarBox = Gtk::HBox.new(true, 0)
		scarBox.pack_start(scar1Check, false, false, 0)
		scarBox.pack_start(scar2Check, false, false, 0)	
		scarBox.pack_start(scar3Check, false, false, 0)

		loopCheck = Gtk::CheckButton.new("Remain Active & Recheck Wounds")
		loopCheck.active = loopBool
				
		saveButton = Gtk::Button.new("Save")
		
		main_box = Gtk::VBox.new(false, 0)	
		main_box.add(Gtk::HSeparator.new)
		main_box.add(Gtk::Label.new("Wound levels that will be cured down")) 
		main_box.add(woundBox)
		main_box.add(Gtk::HSeparator.new)
		main_box.add(Gtk::Label.new("Scar levels that will be cured down"))
		main_box.add(scarBox)
		main_box.add(Gtk::HSeparator.new)
		main_box.add(loopCheck)
		main_box.add(Gtk::HSeparator.new)
		main_box.add(saveButton)
		
		window = Gtk::Window.new
		window.title = 'Self Heal Setup'
		window.border_width = 5	
		window.add(main_box)

		saveButton.signal_connect('clicked') {
					Gtk.queue {
						wounds_1	= wound1Check.active?
						wounds_2	= wound2Check.active?
						wounds_3	= wound3Check.active?
						scars_1		= scar1Check.active?
						scars_2		= scar2Check.active?
						scars_3		= scar3Check.active?
						loopBool	= loopCheck.active?
	
						puts "-=[ Settings Saved ]=-"
						window_action = :save
					}
			}
		window.signal_connect('delete_event') {window_action = :cancel}
		window.show_all
	}

	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }

	Settings[Char.name]['wounds_1']		= wounds_1		
	Settings[Char.name]['wounds_2']		= wounds_2		
	Settings[Char.name]['wounds_3']		= wounds_3		
	Settings[Char.name]['scars_1']		= scars_1		
	Settings[Char.name]['scars_2']		= scars_2		
	Settings[Char.name]['scars_3']		= scars_3
	Settings[Char.name]['loopBool']		= loopBool
	Settings.save
	
end
	
loop {	
		CheckHealth()
		
		if wounds_3 then CheckWoundsOfLevel(3,5) end
		if wounds_2 then CheckWoundsOfLevel(2,5) end
		if wounds_1 then CheckWoundsOfLevel(1,0) end
		if scars_3 then CheckScarsOfLevel(3,4) end
		if scars_2 then CheckScarsOfLevel(2,4) end
		if scars_1 then CheckScarsOfLevel(1,0) end

		if !loopBool then exit end
		sleep 5
}
