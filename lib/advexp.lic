=begin
	Provides more advanced exp pulse info (similar to loud-exp-pulse).
	Also handles percent_capped output (otherwise percent_capped itself will cause extra spam every pulse when run with this script).
	
	Runs in the background, and silently sends an "exp" command whenever it senses you've absorbed exp.
	Outputs a breakdown of the exp gained, as such:
	
	You absorb 121 experience points. Pulse: 38 Base: 97 Asc: 24 Mult: 3.2x

	Note that this does cause some additional spam to the game (1 command per pulse),
	and will also stop you from idling out any time you're absorbing exp.
	It stops issuing any commands once you're no longer absorbing exp, so you will idle out after that.
=end

def parse_exp_line(line, exp)
    if line =~ /([A-Z][^:]+):\s+([\d,]+)(\s|\/)/
	exp[$1.strip()] = $2.delete(",").to_i
    end
    if line =~ /:.*?\s([A-Z][^:]+):\s+([\d,]+)(\s|\/)?/
	exp[$1.strip()] = $2.delete(",").to_i
    end
end

def get_exp()
    exp = {}

    result = Lich::Util.quiet_command_xml("exp", /Level:/, /\<prompt/, include_end=false)
    for line in result
        parse_exp_line(line, exp)
    end
    return exp
end

def calc_mult(exp1, exp2)
    return (exp2["Total Exp"] - exp1["Total Exp"]) * 1.0 / (exp1["Field Exp"] - exp2["Field Exp"])
end 

def diff_total(exp1, exp2)
    return (exp2["Total Exp"] - exp1["Total Exp"])
end

def diff_field(exp1, exp2)
    return (exp1["Field Exp"] - exp2["Field Exp"])
end

def diff_asc(exp1, exp2)
    return (exp2["Ascension Exp"] - exp1["Ascension Exp"])
end

def percent_capped(exp)
    cap_exp = 7572500
    multiple_list = ["", "double", "triple", "quadruple", "quintuple", "sextuple", "septuple", "octuple", "nonuple", "decuple", "undecuple", "duodecuple", "tredecuple", "quattuordecuple", "quindecuple", "sexdecuple", "septendecuple", "octodecuple", "novemdecuple", "vigintuple"]

    # exclude Asc Exp until you're capped (can uncomment below if you'd like to)
#    xp = exp["Experience"]
#    if xp > cap_exp
#	xp = exp["Total Exp"]
#    end
    xp = exp["Total Exp"]

    pcap = xp.fdiv(cap_exp)
    if pcap.floor() >= multiple_list.length()
	respond "You are insane!"
    else
	multiple = multiple_list[pcap.floor()]
	multiple += " " if pcap.floor() > 0
	respond "You are #{(100*(pcap%1)).round(2)}% to being #{multiple}capped"
    end
end


status_tags
last_exp = get_exp()
last_stats_exp = Stats.exp
while (line = get)
    if line =~ /<progressBar id='nextLvlPB'/
	# Avoid processing further unless Stats.exp has changed, since Stats.exp is free, while get_exp() issues commands to the game
	if Stats.exp != last_stats_exp
	    exp = get_exp()
	    respond "You absorb #{diff_total(last_exp, exp)} experience points. Pulse: #{diff_field(last_exp, exp)} Base: #{diff_total(last_exp, exp) - diff_asc(last_exp, exp)} Asc: #{diff_asc(last_exp, exp)} Mult: #{calc_mult(last_exp, exp).round(1)}x"
	    last_exp = exp
	    last_stats_exp = Stats.exp
	end
    elsif line =~ /Experience:/  # Parses exp command output at any time other than the above
	pcap_exp = {}
	parse_exp_line(line, pcap_exp)
	while (line = get)
	    parse_exp_line(line, pcap_exp)
	    break if line =~ /Exp until lvl:|Exp to next TP:/
	end
	percent_capped(pcap_exp)
    end
end