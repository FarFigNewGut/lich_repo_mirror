=begin

Use this script with three different parameters in order to finish your rogue guild task

Break -> Repair -> Turnin

USAGE
;rogue-lmas-repair break        -breaks all of the steel lockpicks in your lockpick container
;rogue-lmas-repair break <num>  -breaks <num> of your steel lockpicks
;rogue-lmas-repair repair  -repairs all of your steel lockpicks
;rogue-lmas-repair turnin  -turns in all of your steel lockpicks

=end

Kit = UserVars.rogue["lockpick_container"]

# Change these if you want to break something more expensive than steel
# or if the store order number is different
Lockpick = /steel lockpick/
LockpickOrderNum = 4

RogueFootpadRooms = [17965, 16540, 17951, 17419, 17864]
RogueWorkshopRooms = [ 17978,16574,17960,17881 ]
def go(dest)
    start_script "go2", [dest]
    wait_while { running? "go2" }
end
def goNearest(destArr)
    go(Room.current.find_nearest(destArr))
end

if Kit.nil?
    echo "You need a lockpick container."
    echo "You can set it using ;rogue script UI"
    echo "Or, ;vars set lockpick_container=<container>"
    exit
end

Kit = GameObj[Kit]
if Kit.nil?
    echo "Error finding lockpick container: #{UserVars.rogue["lockpick_container"]}"
    exit
end

def break_lockpicks(n)
    n = n.to_i if !n.nil?
    #breaks n steel lockpicks in your kit
    if GameObj.right_hand.type !~ /box/
        echo "Please hold a locked box in your right hand, tough enough to break picks on"
        exit
    end
    fput "look in ##{Kit.id}" if Kit.contents.nil?

    picks = Kit.contents.find_all { |o| o.name =~ Lockpick }
    echo "Found #{picks.length} lockpicks"
    exit if picks.length == 0
    count = 0;
    picks.each { |p| 
        fput "get ##{p.id}"
        loop do
            result = dothistimeout "pick right", 2, /you realize you are using a broken|SNAP|weakened|Roundtime/
            waitrt?
            if result =~ /SNAP/ #successfully broken
                count += 1
                fput "put ##{p.id} in ##{Kit.id}"
                break
            elsif result =~ /you realize you are using a broken/
                fput "put ##{p.id} in ##{Kit.id}"
                break
            end
            waitrt?
        end
        break if !n.nil? && count >= n
    }
end

def repair_lockpicks()
    goNearest(RogueWorkshopRooms)
    fput "go toolbench"
    fput "look in ##{Kit.id}" if Kit.contents.nil?
    picks = Kit.contents.find_all { |o| o.name =~ Lockpick }
    picks.each { |p| 
        fput "get ##{p.id}"
        result = dothistimeout "lmas appraise my lockpick", 1, /It appears to be broken|Roundtime/
        waitrt?
        if result =~ /broken/
            fput "order #{LockpickOrderNum}"
            fput "buy"
            fput "lmas repair ##{p.id}"
            waitrt?
            fput "put ##{p.id} in ##{Kit.id}"
        else
            fput "put ##{p.id} in ##{Kit.id}"
        end
    }
end

def turnin()
    goNearest(RogueFootpadRooms)
    fput "ask footpad to train lock"
    waitfor "If you gots lockpicks"
    picks = Kit.contents.find_all { |o| o.name =~ Lockpick }
    picks.each { |p| 
        fput "get ##{p.id}"
        result = dothistimeout "give ##{p.id} to footpad", 1, /repetition|completed/
        fput "put ##{p.id} in ##{Kit.id}"
        if result =~ /completed/
            fput "out"
            exit
        end
    }
end

if variable[1] =~ /break/
    n = 99
    n = variable[2].to_i unless variable[2].nil?
    break_lockpicks(variable[2])
elsif variable[1] =~ /repair/
    repair_lockpicks()
elsif variable[1] =~ /turnin/
    turnin()
else
    echo "USAGE:
    ;rogue-lmas-repair break
    Breaks all of your steel lockpicks in your lockpick container
    (Hold a difficult box in your RIGHT hand)
    \n
    ;rogue-lmas-repair repair
     Get to a workshop, with a bit of silver.  Run this to repair all your steel lockpicks
    \n
    ;rogue-lmas-repair turnin
    Get to the room with the Footpads. (Don't ask them for training, script will do so)"
end