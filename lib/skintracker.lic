=begin
 	Greminty's skintracker script
This script will go through your skins (of a given type)
and appraise each one, and keep track of the results, so that you
can then get a skin of the desired quality later (or sell a number 
of them for bounty tasks).

	Usage: 
	 ;skin app(raise) <container> <skin noun> [force]
	 ;skin sell <quality> [#]          - Sells # of <quality> skins or better
	 ;skin get  <quality> [r(emove)]   - Optionally, removes the retrieved skin from the list
	 ;skin qua(lity)                   - Lists qualities
	 ;skin listall                     - Lists all skins
	 ;skin list                        - Lists skins by quality

	Updated 7/19/2018 by Greminty
		- Bug fix for new version of ruby
	Updated 8/31/2018 by Greminty
	    - Cleaned up a bunch of items
		- Added [remove] option for get (so you can get each quality level of skin, say, and sort them into containers for later)
		   
=end

$debug = 0
echo "Starting in debug mode: #{$debug}" if $debug >= 1

$skin_quality = %w{crude poor fair fine exceptional outstanding superb magnificent}
$quality_hash = {}
for i in 0..$skin_quality.size
	$quality_hash[$skin_quality[i]] = i
end

def app_skins
	container_regex = '\b' + $container.split(' ').join('.*\b')
	echo container_regex if $debug >= 1

	if cont_obj = GameObj.inv.find { |obj| obj.name =~ /#{container_regex}/ }
	;
	elsif cont_obj = GameObj.right_hand.to_a.find { |obj| obj.name =~ /#{container_regex}/ }
	;
	elsif cont_obj = GameObj.left_hand.to_a.find  { |obj| obj.name =~ /#{container_regex}/ }
	;
	end

	if cont_obj.nil?
		echo "Can't find your container"
		exit
	end
	echo cont_obj.noun
	fput "Look in ##{cont_obj.id}", 1, /^In the/ # .*##{cont_obj.noun}/ # make sure GameObj is loaded
	
	
	skins     = {}
 	old_skins = CharSettings['skin_hash']

	cont_obj.contents.each do |item|
		if item.name =~ /#{$skin_type}/
			echo item.name + " . . . " + item.id.to_s if $debug >= 1
			if old_skins[item.id] and !$force_opt
				skins[item.id] = old_skins[item.id]	
			else
				fput "get ##{item.id} from ##{cont_obj.id}"
				
				while (!($quality_str = dothistimeout "appraise ##{item.id}", 1, /You estimate that/))
					waitrt?
				end
				if ($quality_str =~ /(#{$skin_quality.join("|")}) quality and worth .* (\d+) silver/)
					# TODO: add a past_appraise key, to confirm
					#if old_skins[item.id]
					#	last_app = 
					
					skins[item.id] = { 'obj' => item, 'quality' => $1 , 'value' => $2 }
				end
				CharSettings['skin_hash'] = skins
				CharSettings.save
				waitrt?
				fput "put ##{item.id} in ##{cont_obj.id}"
			end
		end	
	end

	list_skins
end

def list_all_skins
	skins = CharSettings['skin_hash']
	str = "\n"
	skins.keys.each do |id|
		str += " #{id} . . . #{skins[id]['quality']} (#{skins[id]['value']})\n"
	end
	echo str + "\n"
end

def list_skins
	skins = CharSettings['skin_hash']
	hash = {}
	total = 0
	skins.keys.each do |id|
		q = skins[id]['quality']
		if !hash[q]
			hash[q] = { 'num' => 0, 'value' => 0 } 
		end
		hash[q]['num']   += 1
		hash[q]['value'] += skins[id]['value'].to_i
		total            += skins[id]['value'].to_i
	end

	str = "\n"
	$skin_quality.each do |q|
		if hash[q]
			avg_val = hash[q]['value'] / hash[q]['num']
			str += " #{q}: #{hash[q]['num']} (#{avg_val})\n"
		end
	end
	str += "Total value: " + (total/1000).to_i.to_s + "k\n"
	echo str + "\n"
end

def get_skin
	skins = CharSettings['skin_hash']
	best_value   = 0
	best_quality = "magnificent"
	best_id      = nil
	skins.keys.each do |id|
		q = skins[id]['quality']
		v = skins[id]['value'].to_i
		if $quality_hash[q] >= $quality_hash[$quality]
			if $quality_hash[q] < $quality_hash[best_quality]
				best_id      = id
				best_quality = q
				best_value   = v
			elsif $quality_hash[q] == $quality_hash[best_quality] and v > best_value
				best_id      = id
				best_quality = q
				best_value   = v
			end
		end
	end

	if best_id
		echo " Getting a(n) #{best_quality} skin worth #{best_value}"
		fput "get ##{best_id}"
		if $remove_opt
			skins.delete(best_id)
		end
	else
		echo " Can't find any #{$quality} skins"
	end
	return best_id
end

def sell_skins
	skins = CharSettings['skin_hash']
	num = $num_sell.to_i > 0 ? $num_sell.to_i : 100
	for i in 1..num
		id = get_skin
		if id.nil?
			echo " Could only find #{i-1} skins to sell" if $num_sell.to_i > 0
			break
		end
		sell_str = fput "sell ##{id}"
		if sell_str =~ /would like to buy/
			skins.delete(id)
		else
			echo " Can't sell..."
			break
		end
	end

	CharSettings['skin_hash'] = skins
end


## --- Start script ---

if script.vars[1] =~ /^app(raise)?/ and script.vars[2] and script.vars[3]
	$container = script.vars[2]
	$skin_type = script.vars[3]
	$force_opt = script.vars[4]
	app_skins
elsif script.vars[1] =~ /^sell/ and script.vars[2]
	$quality  = script.vars[2]
	$num_sell = script.vars[3] ? script.vars[3] : 0
	sell_skins
elsif script.vars[1] =~ /^get$/ and script.vars[2]
	$quality = script.vars[2]
	$remove_opt = script.vars[3]
	get_skin
elsif script.vars[1] =~ /^qua(lity)?/
	respond $skin_quality.join(" ")
elsif script.vars[1] =~ /^listall$/
	list_all_skins
elsif script.vars[1] =~ /^list$/
	list_skins
else
	respond "Usage: "
	respond " ;skin app(raise) <container> <skin noun> [force]"
	respond " ;skin sell <quality> [#]          - Sells # of <quality> skins or better"
	respond " ;skin get  <quality> [r(emove)]   - Optionally, removes the retrieved skin from the list"
	respond " ;skin qua(lity)                   - Lists qualities"
	respond " ;skin listall                     - Lists all skins"
	respond " ;skin list                        - Lists skins by quality"
end

exit