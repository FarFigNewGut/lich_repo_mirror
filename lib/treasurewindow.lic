=begin

  https://discordapp.com/channels/226045346399256576/1339018254517145681

  This script creates a dedicated window to display treasure objects in real time.

  Features:
  - Continuously updates with treasures found in the room.
  - Automatically removes treasures that disappear.
  - Clickable links to interact with treasure objects.
  - Incorporates killtracker output if killtracker is running.  Killtracker is courtesy of Alastir and Nisugi.
  - Adds click commands to facilitate looting the entire room or executing the eloot lich script.

  Commands:
    *click - Enable or disable LOOT ROOM and ELOOT clickable links in window.
				*twcol - Swap between single and double column layouts.

  Changelog:
		 1.3.1 (2025-06-07)
			     Column button removed.  Command is *twcol to swap between single and double column layouts.
        Dead creatures output removed.
        Layout button added to toggle between a one or two column format.
        Will save state between sessions for all commands.
   1.2.2.(2025-05-6)
        Fix for Moonsedge bounties.
    1.2.1 (2025-05-2)
        Added an upstream hook to allow users to turn the clickable LOOT ROOM and ELOOT commands on or off.  They are off by default now.
    1.2.0 (2025-04-30)
        Added LOOT ROOM command.  Will empty and fill right hand automatically to loot room.
        Added eloot command.
        Dead Creature output added. Can click on dead creature to loot creature.
   1.1.0 (2025-04-26)
       Killtracker output removed from creaturewindow and moved to treasurewindow.
   1.0.0 (2025-02-11)
        Initial release.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, treasures, gems, coins, artifacts, loot, looting

=end

no_kill_all

require 'yaml'

LICH5_PATHS = [
  "C:\\Lich5\\scripts",
  File.expand_path("~/Desktop/Lich5/scripts")
]

WINDOW_SETTINGS_PATH = nil

LICH5_PATHS.each do |path|
  next unless path && Dir.exist?(path)
  WINDOW_SETTINGS_PATH = File.join(path, "lichwraythwindows.yaml")
  break
end

# Fallback if nothing matched
WINDOW_SETTINGS_PATH ||= File.join(Dir.pwd, "lichwraythwindows.yaml")

def load_window_settings
  return {} unless WINDOW_SETTINGS_PATH && File.exist?(WINDOW_SETTINGS_PATH)
  YAML.load_file(WINDOW_SETTINGS_PATH) || {}
end

window_settings = load_window_settings
treasure_window_settings = window_settings["treasurewindow"] || {}
@twsingle_column = treasure_window_settings["single_column"] || false
@show_click_links = treasure_window_settings["show_click_links"] || false

def save_window_settings(settings)
  File.write(WINDOW_SETTINGS_PATH, settings.to_yaml)
rescue => e
  echo "Failed to save window settings: #{e.message}"
end

UPSTREAM_HOOK_ID = "#{Script.current.name}_upstream".freeze
UpstreamHook.remove(UPSTREAM_HOOK_ID) rescue nil

UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
  case command.strip.downcase
  when /\*click/i
    @show_click_links = !@show_click_links
    respond "Click-to-loot links are now #{@show_click_links ? 'ENABLED' : 'DISABLED'}."
    nil
  when /\*twcol/i
    @twsingle_column = !@twsingle_column
    window_settings["treasurewindow"]["single_column"] = @twsingle_column
    save_window_settings(window_settings)
    current_treasures = GameObj.loot.select do |obj|
      obj.type =~ /ammo|armor|box|clothing|collectible|cursed|gem|herb|jewelry|junk|magic|reagent|scarab|scroll|skin|uncommon|valuable|wand|weapon/i
    end
    push_treasures_to_window(current_treasures)
    respond "Column Layout: #{@twsingle_column ? 'Single' : 'Double'}"
    nil
  else
    command
  end
end)

before_dying do
  UpstreamHook.remove("#{Script.current.name}_upstream")
end

puts("<closeDialog id='TreasureWindow'/><openDialog type='dynamic' id='TreasureWindow' title='Treasure' target='TreasureWindow' scroll='manual' location='main' justify='3' height='100' resident='true'><dialogData id='TreasureWindow'></dialogData></openDialog>")

@last_treasures = []

def format_reset_time(seconds_left)
  return "Reset soon!" if seconds_left <= 0
  days = seconds_left / 86400
  hours = (seconds_left % 86400) / 3600
  minutes = (seconds_left % 3600) / 60
  if days > 0
    "Reset: #{days}d #{hours}h #{minutes}m"
  else
    "Reset: #{hours}h #{minutes}m"
  end
end

def killtracker_summary_lines
  return [] unless Script.running?("killtracker") && defined?($killtracker) && $killtracker.is_a?(Hash)

  $killtracker[:jewel_found].size
  $killtracker[:dust_found].size
  weekly_searches = $killtracker[:weekly_ascension_searches] || 0
  gems_this_week = $killtracker[:weekly_gemstone] || 0
  $killtracker[:weekly_dust] || 0
  gems_this_month = $killtracker[:monthly_gemstones] || 0

  # Calculate reset timers here, locally
  weekly_reset_in = ($killtracker[:cached_reset_time] - Time.now.to_i)
  weekly_reset_text = weekly_reset_in > 0 ? format_reset_time(weekly_reset_in) : "Reset soon!"

  now = Time.now
  if now.month == 12
    next_month_time = Time.new(now.year + 1, 1, 1)
  else
    next_month_time = Time.new(now.year, now.month + 1, 1)
  end
  monthly_reset_in = (next_month_time.to_i - now.to_i)
  monthly_reset_text = monthly_reset_in > 0 ? format_reset_time(monthly_reset_in) : "Reset soon!"

  summary_lines = []
  summary_lines << "Killtracker Summary"
  summary_lines << "--------------------------------------"
  if gems_this_month < 3
    summary_lines << "Weekly Gem"
    summary_lines << "Found: #{gems_this_week}"
    summary_lines << "Searches: #{weekly_searches.with_commas}"
    summary_lines << weekly_reset_text
  else
    summary_lines << "All Gems Found for Month!"
  end
  summary_lines << "--------------------------------------"
  summary_lines << "Monthly Gems"
  summary_lines << "Found: #{gems_this_month}"
  summary_lines << "Remaining: #{[0, 3 - gems_this_month].max}"
  summary_lines << monthly_reset_text
  summary_lines << "---------------------------------------"
  summary_lines
end

def push_treasures_to_window(treasures)
  output = "<dialogData id='TreasureWindow' clear='t'>"
  current_top = 0

  # Column layout toggle
#  column_value = @twsingle_column ? 'Layout: Single Column' : 'Layout: Two Columns'
#  column_cmd = "*twcolumns"
#  output += "<link id='column_toggle' value='#{column_value}' cmd='#{column_cmd}' echo='Toggling Column Layout...' justify='bottom' left='0' top='#{current_top}' />"
#current_top += 20
  # Two-column Killtracker layout
  if @twsingle_column
    killtracker_summary_lines.each do |line|
      output += "<label id='kt_line_#{current_top}' value='#{line}' justify='left' left='0' top='#{current_top}' />"
      current_top += 20
    end
  else
    if Script.running?("killtracker") && defined?($killtracker) && $killtracker.is_a?(Hash)
      #    output += "<label id='kt_title' value='Killtracker Summary' justify='left' left='0' top='#{current_top}' />"

      left_lines = [
        "Weekly Gem",
        "Found: #{$killtracker[:weekly_gemstone] || 0}",
        "Searches: #{($killtracker[:weekly_ascension_searches] || 0).with_commas}",
        format_reset_time($killtracker[:cached_reset_time] - Time.now.to_i)
      ]
      right_lines = [
        "Monthly Gems",
        "Found: #{$killtracker[:monthly_gemstones] || 0}",
        "Remaining: #{[0, 3 - ($killtracker[:monthly_gemstones] || 0)].max}",
        format_reset_time((Time.new(*((Time.now.month == 12 ? [Time.now.year + 1, 1] : [Time.now.year, Time.now.month + 1])) + [1]).to_i - Time.now.to_i))
      ]

      row_height = 20
      col_left = 0
      col_right = 180

      max_rows = [left_lines.size, right_lines.size].max
      max_rows.times do |i|
        output += "<label id='kt_left_#{i}' value='#{left_lines[i] || ''}' justify='left' left='#{col_left}' top='#{current_top}' />"
        output += "<label id='kt_right_#{i}' value='#{right_lines[i] || ''}' justify='left' left='#{col_right}' top='#{current_top}' />"
        current_top += row_height
      end

    end
  end


  if ARGV.first == "lootroom"
    empty_hand
    fput "loot room"
    fill_hand
    exit
  elsif ARGV.first == "eloot"
    start_script("eloot") unless Script.running?("eloot")
    exit
  end

  # Click to Loot Room
  if @show_click_links
    output += "<link id='lootroom' value='Click to LOOT ROOM.' cmd=';e empty_hand(); fput(\"loot room\"); fill_hand()' echo='Looting room...' fontSize='32' left='0' top='#{current_top}' />"
    current_top += 20
    output += "<link id='eloot' value='Click to run ELOOT.' cmd=';e start_script(\"eloot\") unless Script.running?(\"eloot\")' echo='Running eloot...' fontSize='32' left='0' top='#{current_top}' />"
    current_top += 20
    output += "<label id='div1' value='--------------------------------------' justify='left' left='0' top='#{current_top}' />"
    current_top += 20
  end

  # Treasure count
  output += "<label id='treasuretotal' value='Treasures: #{treasures.size}' left='0' top='#{current_top}' />"
  current_top += 20

  row_height = 20
  col_left = 0
  col_right = 180

if @twsingle_column
  treasures.each_with_index do |treasure, index|
    stripped_name = treasure.name.sub(/^(an?|some|the)\s+/i, '')
    treasure_name = stripped_name

    output += "<link id='treasure_#{index}' value='#{treasure_name}' cmd='get ##{treasure.id}' echo='get ##{treasure.id}' justify='bottom' left='0' top='#{current_top}' />"
    current_top += row_height
  end
else
  treasures.each_slice(2).with_index do |pair, row|
    pair.each_with_index do |treasure, col|
      stripped_name = treasure.name.sub(/^(an?|some|the)\s+/i, '')
      treasure_name = stripped_name

      left = col == 0 ? col_left : col_right
      top = current_top + row * row_height

      output += "<link id='treasure_#{row}_#{col}' value='#{treasure_name}' cmd='get ##{treasure.id}' echo='get ##{treasure.id}' justify='bottom' left='#{left}' top='#{top}' />"
    end
  end
  current_top += ((treasures.size + 1) / 2) * row_height
end

  output += "</dialogData>"
  puts(output)
end

last_push_time = Time.now

loop do
  current_treasures = GameObj.loot.select do |obj|
    obj.name !~ /message board|cart|disk|door|patchworked saiful sphere|stairs|shop|swirled steel bowl full of sticks|wastebin|wide-mouthed wicker basket|rubbish bin|portal|barrel|arch|establishment|hut|gate|locksmith|firefly|cask|table|cafe|bench|shanty|plant|twisted pile of metal|puppy|flying .*? tome/i &&
    (
 #     obj.type.nil? ||
      obj.type =~ /ammo|armor|box|clothing|collectible|cursed|gem|herb|jewelry|junk|magic|reagent|scarab|scroll|skin|uncommon|valuable|wand|weapon/i
    )
  end
		
  now = Time.now
  if current_treasures != @last_treasures || (now - last_push_time) >= 2
    @last_treasures = current_treasures
    push_treasures_to_window(current_treasures)
    last_push_time = now
  end

  sleep 0.025
end

echo "Dedicated Treasure Window is active."
