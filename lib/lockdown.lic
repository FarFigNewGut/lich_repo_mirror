=begin

    Locker Inventory script:
      ;lockdown <format>
      stores the output of locker manifests in CSV (default) or JSON formats

     author: m444w
      email: m444w@aol.com
       name: lockdown
       tags: lockers
    version: 1.0
    
=end

require 'csv'

towns = [
  "Wehnimer's Landing",
  "Teras Isle",
  "Solhaven",
  "River's Rest",
  "Icemule Trace",
  "Zul Logoth",
  "Ta'Illistim",
  "Ta'Vaalor", 
  "Mist Harbor"
]



class Locker

  attr_accessor :items, :checked, :town

  def initialize(town)
    @town  = town
    @items = Array.new
    self
  end

  def checked?
    @checked
  end


  def contents
    return @items if checked?
    fput "locker manifest #{@town}"
    while line=get
      next  if line=~ /(In|On) (a|an)/
      next  if line=~ /Thinking back, you recall the contents/
      break if line=~ /Obvious items:|There are no items in this locker/
      items.push line.gsub(/\d+/, '').strip
    end
    return self
  end

  def to_json
    @items.map { |item| { 'description' => item, 'town' => @town} }
  end

  def to_csv
    @items.map { |item| [item, @town] }
  end

end

Dir.mkdir( $script_dir + "lockers" ) unless File.directory?( $script_dir + "lockers" )



data = towns.each.map{ |town| Locker.new(town) }.map(&:contents)

if script.vars[0].downcase == 'json'
  File.open $script_dir + "lockers/#{Char.name}.json", 'w' do |file|
    file.puts data.map(&:to_json).flatten.to_json
  end

  respond "saved to " +  $script_dir + "lockers/#{Char.name}.json"
  
else
  CSV.open $script_dir + "lockers/#{Char.name}.csv", 'w' do |file|
    # add headers
    file << [ 'description', 'town' ]

    # add items
    data.map(&:to_csv).each { |items| 
      items.each do |item|
        file << item
      end
    }
  end

  respond "saved to " +  $script_dir + "lockers/#{Char.name}.csv"
end
