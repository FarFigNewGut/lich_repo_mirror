# Boatswain: fix your ship up!
# Author: Licel





def finishScript
  moveToHold()
  fput "put pla in wood"
  targetroom = $shiprooms.select {|x| x.title.include?("Captain")}[0]
  targetroom.pathTo.each { |x| move x }
  echo "*****ALL FIXED! Exiting."

  exit
end

def moveToHold
  roomtitle = fput "look"
  found = $shiprooms.select {|x| x.title == roomtitle}
  myroom = found[0]
  if found.length > 1
    result = fput "peer down"
    if result == "You peer down but see nothing of interest."
      myroom = found.select{|x| !x.exits.include? "d"}
      myroom = myroom[0]
    else
      myroom = found.select{|x| x.exits.include? "d"}
      myroom = myroom[0]
    end
  end

  myroom.pathFrom.each { |x| move x }
  pause 0.5
  waitrt?
end

class ShipRoom
  attr_accessor :damage,:pathTo,:pathFrom, :title, :exits

  def initialize(params = {})
    @pathTo = params.fetch(:pathTo,[""])
    @pathFrom = params.fetch(:pathFrom,[""])
    @exits = params.fetch(:exits,'error')
    @title = params.fetch(:title,'error')
    @damage = params.fetch(:damage,'unfixed')
  end

end
ASSESS_FORMAT = /\[Health of your ship: (\d*)\/(\d*)\]/
SHIP_FORMAT = /\[(.*),.*\]/
DAMAGE_FORMAT = /\s*(.*):\s*It appears to be .* damaged\./
FIXED_FORMAT = /\s*(.*):\s*You cannot seem to find any damage\./
AssessLine = Struct.new(:current, :total)
Shipline = Struct.new(:name)
Damageline = Struct.new(:title)
$shiprooms = []
boatswainBonus = 0
shipdesc = fput "look"
shipname = shipdesc.match(SHIP_FORMAT) { |l| Shipline.new(*l.captures)}

case shipname.name
when "Man O' War"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Man O' War, Cargo Hold]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Man O' War, Crew Quarters]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["e"],:title => "[Man O' War, Mess Hall]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e","e"],:pathFrom => ["w","w"],:exits => ["e"],:title => "[Man O' War, Social Room]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Man O' War, Crow's Nest]")
  $shiprooms.push(sr)
  #sr = ShipRoom.new(:pathTo => ["u","e","e","u"],:pathFrom => ["d","w","w","d"],:exits => ["d"],:title => "[Man O' War, Crow's Nest]")
  #$shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Man O' War, Main Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w","e"],:title => "[Man O' War, Forward Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Man O' War, Mid Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e","e"],:pathFrom => ["w","w","w","d"],:exits => ["w"],:title => "[Man O' War, Bow]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Man O' War, Helm]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Man O' War, Captain's Quarters]")
  $shiprooms.push(sr)
when "Frigate"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Frigate, Cargo Hold]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Frigate, Crew Quarters]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["e"],:title => "[Frigate, Kitchen]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e","e"],:pathFrom => ["w","w"],:exits => ["e"],:title => "[Frigate, Social Room]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Frigate, Crow's Nest]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Frigate, Main Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Frigate, Forward Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w"],:title => "[Frigate, Bow]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Frigate, Helm]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Frigate, Captain's Quarters]")
  $shiprooms.push(sr)
when "Carrack"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Carrack, Cargo Hold]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Carrack, Crow's Nest]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Carrack, Main Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Carrack, Forward Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e","e"],:pathFrom => ["w","w","d"],:exits => ["w"],:title => "[Carrack, Bow]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Carrack, Helm]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Carrack, Captain's Quarters]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["w","e"],:title => "[Carrack, Mess Hall]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["w"],:pathFrom => ["e"],:exits => ["e"],:title => "[Carrack, Crew Quarters]")
  $shiprooms.push(sr)
when "Brigantine"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up","west","east"],:title => "[Brigantine, Cargo Hold]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Brigantine, Crow's Nest]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["d"],:title => "[Brigantine, Main Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","e"],:pathFrom => ["w","d"],:exits => ["w","e"],:title => "[Brigantine, Forward Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Brigantine, Helm]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Brigantine, Captain's Quarters]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["e"],:pathFrom => ["w"],:exits => ["w","e"],:title => "[Brigantine, Kitchen]")
  $shiprooms.push(sr)
when "Sloop"
  sr = ShipRoom.new(:pathTo => [],:pathFrom => [],:exits => ["up"],:title => "[Sloop, Cargo Hold]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u"],:pathFrom => ["d"],:exits => ["up"],:title => "[Sloop, Main Deck]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","u"],:pathFrom => ["d","d"],:exits => ["d"],:title => "[Sloop, Crow's Nest]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w"],:pathFrom => ["e","d"],:exits => ["e"],:title => "[Sloop, Helm]")
  $shiprooms.push(sr)
  sr = ShipRoom.new(:pathTo => ["u","w","go door"],:pathFrom => ["out","e","d"],:exits => ["out"],:title => "[Sloop, Captain's Quarters]")
  $shiprooms.push(sr)
else
  echo "Your ship is not supported. Sucker. Hit up Licel."
  exit

end

loop {
  $shiprooms.select {|x| x.damage == 'unfixed'}.each { |n| echo n.title}
  needsfixed = $shiprooms.select {|x| x.damage == 'unfixed'}

  if needsfixed.length == 0
    finishScript()
  end

  moveToHold()

  targetroom = needsfixed[rand(needsfixed.length)]

  if(GameObj.left_hand.name != 'wooden plank' && GameObj.right_hand.name != 'wooden plank')
    fput "get wood"
  end
  pause 0.5
  waitrt?
  assess_result = 'boatswain'
  targetroom.pathTo.each { |x| move x }
  pause 0.5
  if boatswainBonus <= 0 || needsfixed.length == 1
    assess_result = fput 'assess'
    maindeckCount = 0
    while(true)
      textline = get
      if textline.include? "Main Deck"
        maindeckCount = maindeckCount + 1
      end

      if(textline =~ ASSESS_FORMAT)
        assess_results = textline.match(ASSESS_FORMAT) { |l| AssessLine.new(*l.captures)}
      end

      if(textline =~ DAMAGE_FORMAT)
        boatswainBonus = 3
        damage_results = textline.match(DAMAGE_FORMAT) { |l| Damageline.new(*l.captures)}
        if damage_results.title == 'Main Deck'
          if maindeckCount > 1  && shipname != 'Sloop'
              $shiprooms.find { |x| x.title == '[' + shipname.name + ', ' + damage_results.title + ']' && !x.exits.include?("d")}.damage = 'unfixed'
          else
              $shiprooms.find { |x| x.title == '[' + shipname.name + ', ' + damage_results.title + ']' && x.exits.include?("d")}.damage = 'unfixed'
          end
          $shiprooms.find { |x| x.title == '[' + shipname.name + ', ' + damage_results.title + ']'}.damage = 'unfixed'
        end
      end

      if(textline =~ FIXED_FORMAT)
        boatswainBonus = 3
        damage_results = textline.match(FIXED_FORMAT) { |l| Damageline.new(*l.captures)}
        if damage_results.title == 'Main Deck'
          if maindeckCount > 1 && shipname != 'Sloop'
              $shiprooms.find { |x| x.title == '[' + shipname.name + ', ' + damage_results.title + ']' && !x.exits.include?("d")}.damage = 'fixed'
          else
              $shiprooms.find { |x| x.title == '[' + shipname.name + ', ' + damage_results.title + ']' && x.exits.include?("d")}.damage = 'fixed'
          end
        else
          $shiprooms.find { |x| x.title == '[' + shipname.name + ', ' + damage_results.title + ']'}.damage = 'fixed'
        end

      end

      if(textline =~ /.*Roundtime.*/)
        break;
      end
    end
  else
    boatswainBonus = boatswainBonus -1
  end
  pause 0.5
  waitrt?
  #echo assess_results.current
  #echo assess_results.total
  if assess_results.current == assess_results.total && defined?(assess_results.current)
    finishScript()
  end

  if assess_result.include?("damaged") || assess_result.include?("boatswain")
    fixresult = fput "fix"
    case fixresult
    when "You must be holding a piece of wood from the cargo hold to fix the ship!"
      result = 'unfixed'
    when "This area does not look like it has suffered any damage."
      result = 'fixed'
    when "You spot a leak against the hull and quickly place your wooden plank against it as you begin to repair the damage."
      result = 'unfixed'
    when "You throw your wooden plank against the floor beneath you and begin to repair the damage."
      result = 'unfixed'
    end
    $shiprooms.find { |x| x.title == targetroom.title && x.exits == targetroom.exits}.damage = result
  end
  pause 0.5
  waitrt?


}
