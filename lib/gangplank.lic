=begin
    Attempts to map your maindeck gangplank to the appropriate room.
        Examples.
            Stepping onto a boat without a gangplank mapped to the pier room you just came from.
            Ship docking with a port.  
            Enemy ship grappling with your boat.
    Attempts to remove any gangplank mapping from your maindeck.
        Examples.
            Leaving port.
            Sinking a ship.
			
    ***** This has not been tested with every port room.  Kraken Falls  being the primary culprit.
	
		Update:
		    Gangplank will now attempt to map when first started.
				Finally got a failsafe correct to try and avoid blank mappings.
			  Updated my update to correctly match new enemy ship changes. :(
			  Updated to match new map changes for enemy ships.
			  More little tweaks.
			  Corrected false gangplank mapping coming off an enemy ship.
			  Added in a myboard tag that is applied only when the gangplank is mapped.  ;go2 myboat to return.
			  If look ocean fails due to being indoors, the script will wait until you are outside and then try again.
	
		ToDos:
		  Enemy ship mapping will be tweaked in the future.
		  Figure out how to get that gangplank mapping message when docking pushed down below the look ocean.
		  Fix any port issues reported.
			

          author: Ensayn 
            game: GS
            tags: OSA
        required: Lich >= 4.6.4
         version: 1.2.1.2
  +---------------------------------------------------------------+
;gangplank  ---> enjoy

=end


previous_room = nil
current_room = Room.current
rc = XMLData.room_count
lookocean = false
lookoceanfailed = false
failedroom = 0
notgrappled = true
gangplank_mapped = false
gangplank_removed = false
gangplank_mapped_to = ""
gangplank_removed_from = ""
maindeck_list = []
myshiprange = []
enemy_maindeck_list = []
enemy_maindeck_list = {
	"sloop" => "30787",
	"brigantine" => "30792",
	"carrack" => "30266",
	"galleon" => "30798",
	"frigate" => "30805",
	"man o' war" => "30778"
}
enemy_maindeck = 30266
enemy_ship_pattern = /.*Several ropes with claw-shaped hooks on the end find purchase into the railing of your.*Battle cries sound off as those on the\s(?<name>.*) prepare to board!/
$peronal_maindeck = "99528"
$personal_shiprange = [*99528..99533]
myshiprange.concat($personal_shiprange)
maindeck_list.push($peronal_maindeck)
$sloop_maindeck = "29038"
$sloop_shiprange = [*29038..29042]
myshiprange.concat($sloop_shiprange)
maindeck_list.push($sloop_maindeck)
$brigantine_maindeck = "30142"
$brigantine_shiprange = [*30140..30147]
myshiprange.concat($brigantine_shiprange)
maindeck_list.push($brigantine_maindeck)
$carrack_maindeck = "30119"
$carrack_shiprange = [*30119..30127]
myshiprange.concat($carrack_shiprange)
maindeck_list.push($carrack_maindeck)
$galleon_maindeck = "30176"
$galleon_shiprange = [*30176..30186]
myshiprange.concat($galleon_shiprange)
maindeck_list.push($galleon_maindeck)
$frigate_maindeck = "30166"
$frigate_shiprange = [*30166..30175]
myshiprange.concat($frigate_shiprange)
maindeck_list.push($frigate_maindeck)
$manowar_maindeck = "30130"
$manowar_shiprange = [*30128..30139]
myshiprange.concat($manowar_shiprange)
maindeck_list.push($manowar_maindeck)

#;e (Map.list.find_all { |room| room.title.find { |title| title.include? "Main Deck"}}).each{|room| echo room.title;echo room.id}

myshiprange.concat([*30110..30120])

module Gangplank

	def self.destroygangplank(gd_md,gd_msr,gd_gpr=0)
		if gd_md.nil?
			return
		end
		gd_gangstore_list = []
		gd_gangstore_list = Room[gd_md.to_i].wayto.find_all{|a,b| !gd_msr.include? a.to_i}
		if gd_gangstore_list
			gd_gangstore_list.each{|gd_gangstore|
				if gd_gangstore[0] != gd_gpr.to_s && !(gd_gangstore[0].nil?) && (gd_gangstore[0] != "")
					Room[gd_md].wayto.delete(gd_gangstore[0].to_s)
					Room[gd_md].timeto.delete(gd_gangstore[0].to_s)
					Room[gd_gangstore[0]].wayto.delete(gd_md)
					Room[gd_gangstore[0]].timeto.delete(gd_md)
					_respond("#{monsterbold_start}Gangplank mapped to #{gd_gangstore[0]} removed!#{monsterbold_end}")
					gangplank_removed = true
					gangplank_removed_from = gd_gangstore[0]
					Room[gd_md].tags.delete("myboat") if Room[gd_md].tags.include? "myboat" 
				end
			}
		end
	end

	def self.mapgangplank(mg_md,mg_gangotherside,twoway=true)
		if mg_md.nil?
			return
		end
		if Room[mg_md].wayto[mg_gangotherside.id.to_s].nil?
			Room[mg_md].wayto[mg_gangotherside.id.to_s] = StringProc.new("fput \"push gang\";fput \"go gang\"")
			Room[mg_md].timeto[mg_gangotherside.id.to_s] = 0.2
			if twoway
				Room[mg_gangotherside.id].wayto[mg_md.to_s] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
				Room[mg_gangotherside.id].timeto[mg_md.to_s] = 0.2
			end
			_respond("#{monsterbold_start}Gangplank mapped to #{mg_gangotherside.id}!#{monsterbold_end}")
			gangplank_mapped = true
			gangplank_mapped_to = mg_gangotherside.id
			Room[mg_md].tags.push("myboat")
			
		end
	end
	
	def self.findmaindeck
		if $personal_shiprange.include? Room.current.id
			return  $peronal_maindeck
		elsif $sloop_shiprange.include? Room.current.id
			return  $sloop_maindeck
		elsif $brigantine_shiprange.include? Room.current.id
			return  $brigantine_maindeck
		elsif $carrack_shiprange.include? Room.current.id
			return  $carrack_maindeck
		elsif $carrack_shiprange.include? Room.current.id
			return  $galleon_maindeck
		elsif $frigate_shiprange.include? Room.current.id
			return  $frigate_maindeck
		elsif $manowar_shiprange.include? Room.current.id
			return  $manowar_maindeck
		else
			echo "Nothing found!"
			return nil
		end
	end
end




gangplankwatch = proc {|server_string|
    if server_string =~ /<style id="roomName" \/>\[.*?\]/
		if (XMLData.room_count != rc) and (Room.current != current_room)
			rc = XMLData.room_count 
			previous_room = current_room
			current_room = Room.current
		end
		server_string
	elsif server_string =~ /You make your way across the|You make your way up the/ && (maindeck_list.include? Room.current.id.to_s) && !(myshiprange.include? current_room.id) && (enemy_maindeck.to_s != current_room.id.to_s ) && notgrappled
		gang_port_room = current_room
		maindeck = Gangplank.findmaindeck
		# echo "gang_port_room.id  ---> #{gang_port_room.id}"
		# echo "maindeck  ---> #{maindeck}"
		# echo "Room.current.id ---> #{Room.current.id}"
		
		Gangplank.destroygangplank(maindeck,myshiprange,gang_port_room.id)
		Gangplank.mapgangplank(maindeck,gang_port_room) if ((!gang_port_room.nil?) && (gang_port_room != ""))
		server_string
	elsif server_string =~ /starts to rock as it drifts out into the open sea|rapidly descends beneath the cold, dark waters/
	  maindeck = Gangplank.findmaindeck
		Gangplank.destroygangplank(maindeck,myshiprange)
		notgrappled = true
		server_string
	elsif server_string =~/drifts steadily toward the diverse port|drifts steadily toward the bustling port/
		maindeck = Gangplank.findmaindeck
		Gangplank.destroygangplank(maindeck,myshiprange)
		server_string
		put "look ocean" if !lookocean
		lookocean = true
		server_string
	elsif lookocean && server_string =~/roomDesc/ 
		maindeck = Gangplank.findmaindeck
		gang_store = server_string
		gang_store =  gang_store.gsub('<style id="roomDesc"/>',":").gsub('<style id=""/>',":").split(":")[2].strip!
		gang_port_room = (Map.list.find_all { |room| room.description.find { |desc| desc == gang_store }})[0]
		# echo ((!myshiprange.include? gang_port_room) && (!gang_port_room.nil?))
		# if ((!myshiprange.include? gang_port_room) && (!gang_port_room.nil?) && (gang_port_room != "") && (gang_port_room.id.to_s != ""))
		if ((!myshiprange.include? gang_port_room) && (!gang_port_room.nil?))
			Gangplank.mapgangplank(maindeck,gang_port_room)
			lookocean = false
		end
		server_string
	elsif lookocean && server_string =~/I could not find what you were referring to/
		echo "Go outside!"
		lookoceanfailed = true
		lookocean = false
		server_string
	elsif notgrappled && server_string =~/Several ropes with claw-shaped hooks on the end find purchase/
		ges = enemy_ship_pattern.match(server_string)[:name]
		# echo ges
		# echo enemy_maindeck_list[ges]
		maindeck = Gangplank.findmaindeck
		notgrappled = false
		gang_port_room = Room[enemy_maindeck_list[ges]]
		# echo gang_port_room
		Gangplank.mapgangplank(maindeck,gang_port_room,false)
		server_string
    else
		server_string
	end
}
DownstreamHook.add('gangplankwatch', gangplankwatch)
before_dying{DownstreamHook.remove('gangplankwatch')}

if (myshiprange.include? Room.current.id)
	lookocean= true
	fput "look ocean"
end

while true
	sleep 1
	while lookoceanfailed
	  if Room.current.paths[0].include? "Obvious paths:"
			lookocean= true
			fput "look ocean"
			lookoceanfailed = false
			
		else
			sleep 1
	  end
	end
end
