=begin
    Attempts to map your maindeck gangplank to the appropriate room.
        Examples.
            Stepping onto a boat without a gangplank mapped to the pier room you just came from.
            Ship docking with a port.  
            Enemy ship grappling with your boat.
    Attempts to remove any gangplank mapping from your maindeck.
        Examples.
            Leaving port.
            Sinking a ship.
            Retrieving a ship.
			
    Current UPdates:
      Corrected an issue with gangplank removing a wayto on the enemy ship maindeck after it burned.
      Fixed gangplank mapping when the source was an enemy ship.  This situation should not be encountered normally.

	
    OLD Updates:
      Last update caused issues launching the script while at sea.    Should be fixed.
      Added a catch for moving as you look at the ocean interrupting seeing the port.
      Fixed a bug not clearing the dock side of the gangplank.
      Corrected logic bugs from new additions.
      Argh versioning numbers.  On to 2.0.
      Added Text for docking in Icmule Trace.
      Added in unmapping of existing gangplank if retrieving a boat.
      Added in unmapping of existing gangplank if look ocean returns the Great Sea
      Added text for docking in the Elven Nations.
      Updated to handle people that have room descriptions off.
      Gangplank will now attempt to map when first started.
      Finally got a failsafe correct to try and avoid blank mappings.
      Updated my update to correctly match new enemy ship changes. :(
      Updated to match new map changes for enemy ships.
      More little tweaks.
      Corrected false gangplank mapping coming off an enemy ship.
      Added in a myboard tag that is applied only when the gangplank is mapped.  ;go2 myboat to return.
      If look ocean fails due to being indoors, the script will wait until you are outside and then try again.
	
    ToDos:
      Figure out how to get that gangplank mapping message when docking pushed down below the look ocean.
		  Fix any port issues reported.
			

          author: Ensayn 
            game: GS
            tags: OSA
        required: Lich >= 4.6.4
         version: 2.2.2.0
  +---------------------------------------------------------------+
;gangplank  ---> enjoy

=end

script.silent  = true
@script                     = script;
@script.want_downstream     = false;
@script.want_downstream_xml = true;
@script_name = script.name;
desired_flags = { "roombrief" => "off", "description" => "on"}
previous_room = nil
current_room = Room.current
rc = XMLData.room_count
lookocean = false
lookoceanfailed = false
$viewaltered = false
failedroom = 0
notgrappled = true
gangplank_mapped = false
gangplank_removed = false
gangplank_mapped_to = ""
gangplank_removed_from = ""
maindeck_list = []
myshiprange = []
enemy_maindeck_list = []
enemy_maindeck_list = {
	"sloop" => "30787",
	"brigantine" => "30792",
	"carrack" => "30266",
	"galleon" => "30798",
	"frigate" => "30805",
	"man o' war" => "30778"
}
$enemy_maindeck_room_list = "30787","30792","30266","30798","30805","30778"
enemy_maindeck = 30266
enemy_ship_pattern = /.*Several ropes with claw-shaped hooks on the end find purchase into the railing of your.*Battle cries sound off as those on the\s(?<name>.*) prepare to board!/
# $peronal_maindeck = "99528"
# $personal_shiprange = [*99528..99533]
# myshiprange.concat($personal_shiprange)
# maindeck_list.push($peronal_maindeck)
$sloop_maindeck = "29038"
$sloop_shiprange = [*29038..29042]
myshiprange.concat($sloop_shiprange)
maindeck_list.push($sloop_maindeck)
$brigantine_maindeck = "30142"
$brigantine_shiprange = [*30140..30147]
myshiprange.concat($brigantine_shiprange)
maindeck_list.push($brigantine_maindeck)
$carrack_maindeck = "30119"
$carrack_shiprange = [*30119..30127]
myshiprange.concat($carrack_shiprange)
maindeck_list.push($carrack_maindeck)
$galleon_maindeck = "30176"
$galleon_shiprange = [*30176..30186]
myshiprange.concat($galleon_shiprange)
maindeck_list.push($galleon_maindeck)
$frigate_maindeck = "30166"
$frigate_shiprange = [*30166..30175]
myshiprange.concat($frigate_shiprange)
maindeck_list.push($frigate_maindeck)
$manowar_maindeck = "30130"
$manowar_shiprange = [*30128..30139]
myshiprange.concat($manowar_shiprange)
maindeck_list.push($manowar_maindeck)

#myshiprange.concat([*30110..30120])


module Gangplank

	def self.destroygangplank(gd_md,gd_msr,gd_gpr=0)
		if gd_md.nil?
			return
		end
		gd_gangstore_list = []
		gd_gangstore_list = Room[gd_md.to_i].wayto.find_all{|a,b| !gd_msr.include? a.to_i}
		#echo gd_gangstore_list
		if gd_gangstore_list
			gd_gangstore_list.each{|gd_gangstore|
				#echo gd_gangstore
				if gd_gangstore[0] != gd_gpr.to_s && !(gd_gangstore[0].nil?) && (gd_gangstore[0] != "")
					#echo gd_gangstore[0]
					Room[gd_md].wayto.delete(gd_gangstore[0].to_s)
					Room[gd_md].timeto.delete(gd_gangstore[0].to_s)
					#echo gd_md
					if !($enemy_maindeck_room_list.include? gd_gangstore[0].to_s)
						Room[gd_gangstore[0]].wayto.delete(gd_md.to_s)
						Room[gd_gangstore[0]].timeto.delete(gd_md.to_s)
					end
					_respond("#{monsterbold_start}Gangplank mapped to #{gd_gangstore[0]} removed!#{monsterbold_end}")
					gangplank_removed = true
					gangplank_removed_from = gd_gangstore[0]
					Room[gd_md].tags.delete("myboat") if Room[gd_md].tags.include? "myboat" 
				end
			}
		end
	end

	def self.mapgangplank(mg_md,mg_gangotherside,twoway=true)
		if mg_md.nil?
			return
		end
		if Room[mg_md].wayto[mg_gangotherside.id.to_s].nil?
			Room[mg_md].wayto[mg_gangotherside.id.to_s] = StringProc.new("fput \"push gang\";fput \"go gang\"")
			Room[mg_md].timeto[mg_gangotherside.id.to_s] = 0.2
			if twoway
				Room[mg_gangotherside.id].wayto[mg_md.to_s] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
				Room[mg_gangotherside.id].timeto[mg_md.to_s] = 0.2
			end
			_respond("#{monsterbold_start}Gangplank mapped to #{mg_gangotherside.id}!#{monsterbold_end}")
			gangplank_mapped = true
			gangplank_mapped_to = mg_gangotherside.id
			Room[mg_md].tags.push("myboat")
			
		end
	end
	
	def self.findmaindeck
		if $personal_shiprange.include? Room.current.id
			return  $peronal_maindeck
		elsif $sloop_shiprange.include? Room.current.id
			return  $sloop_maindeck
		elsif $brigantine_shiprange.include? Room.current.id
			return  $brigantine_maindeck
		elsif $carrack_shiprange.include? Room.current.id
			return  $carrack_maindeck
		elsif $carrack_shiprange.include? Room.current.id
			return  $galleon_maindeck
		elsif $frigate_shiprange.include? Room.current.id
			return  $frigate_maindeck
		elsif $manowar_shiprange.include? Room.current.id
			return  $manowar_maindeck
		else
			echo "Nothing found!"
			return nil
		end
	end
	
	def self.lookocean
		put "look ocean"
	end
end

module Flags
	def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
	def self.cleanup; [DownstreamHook, UpstreamHook].each{|provider| provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};  };end;
	def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;


	def self.get_flags;
		flags = {}
		#get existing flags
		flag_start    = /^ +FLAG \{flag_name\} \{ON\|OFF\}|You may also access these flags|Usage|<pushBold\/>You may also access these settings/;
		flag_split    =  /^  (?<name>[\w<].*?) +(?<value>ON|OFF)/;
		command       = "flag";
		start_pattern = flag_start;
		quiet         = true;
		end_pattern   = /^(<popBold\/>)?<prompt/;
		include_end   = true;
		timeout       = 5;
		data          = nil;
		lines         = self.quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
		lines.each { |f|
			if m = flag_split.match(f);
				flags["#{m[:name].gsub(/<[^>]+>/,'').downcase}"] = m[:value].downcase;
			end;
		};
		return flags
	end;


	def self.change_flags(desired_flags,original_flags)
		flags_changed = []
		desired_flags.each { |k,v|
			if original_flags[k] != v and !original_flags[k].nil?
				flags_changed << "flag #{k} #{original_flags[k]}";
				put "flag #{k} #{v}";
			end;
		};
		#return flags_changed
	end


	def self.restore_flags();
		(respond "restoring flags";@flags_changed.each{|c| put c}) if @flags_changed.size>0;;
	end;
end




gangplankwatch = proc {|server_string|
   if server_string =~ /<style id="roomName" \/>\[.*?\]/
		if (XMLData.room_count != rc) and (Room.current != current_room)
			rc = XMLData.room_count 
			previous_room = current_room
			current_room = Room.current
		end
		server_string
	elsif server_string =~ /You make your way across the|You make your way up the/ && (maindeck_list.include? Room.current.id.to_s) && !(myshiprange.include? current_room.id) && !($enemy_maindeck_room_list.include? current_room.id.to_s) && notgrappled
	  echo  previous_room.id
		echo  current_room.id
		gang_port_room = current_room
		maindeck = Gangplank.findmaindeck
		Gangplank.destroygangplank(maindeck,myshiprange,gang_port_room.id)
		Gangplank.mapgangplank(maindeck,gang_port_room) if ((!gang_port_room.nil?) && (gang_port_room != ""))
		server_string
	elsif server_string =~ /starts to rock as it drifts out into the open sea|rapidly descends beneath the cold, dark waters|The dock handler points to the/
	  maindeck = Gangplank.findmaindeck
		Gangplank.destroygangplank(maindeck,myshiprange)
		notgrappled = true
		server_string
	elsif (server_string =~/drifts steadily toward the diverse port|drifts steadily toward the bustling port|drifts steadily toward the lively port|steadily toward the ash-covered port|drifts steadily toward the idle port|drifts steadily toward the industrious  port|drifts steadily toward the ramshackle port|drifts steadily toward the imperial port/) && (!(server_string =~/speech/))
		maindeck = Gangplank.findmaindeck
		Gangplank.destroygangplank(maindeck,myshiprange)
		server_string
		$viewaltered = true
		Flags.change_flags(desired_flags,$original_flags)
		Gangplank.lookocean
		Flags.change_flags($original_flags, desired_flags)
		$viewaltered = false
		lookocean = true
		server_string
	elsif $viewaltered && (server_string =~/look ocean|You will now see full length room descriptions|You will now see brief room descriptions|You will now see room descriptions|You will no longer see room descriptions/)
		_respond("Bzzzt")
	elsif lookocean && server_string =~/roomDesc/ 
		#echo lookocean
		maindeck = Gangplank.findmaindeck
		gang_store = server_string
		gang_store =  gang_store.gsub('<style id="roomDesc"/>',":").gsub('<style id=""/>',":").split(":")[2].strip!
		gang_port_room = (Map.list.find_all { |room| room.description.find { |desc| desc == gang_store }})[0]
		 # echo gang_port_room
		 # if (gang_port_room.nil?)
			# echo gang_store
		 # end
		if ((!myshiprange.include? gang_port_room) && (!gang_port_room.nil?))
			Gangplank.mapgangplank(maindeck,gang_port_room)
			lookocean = false
	  elsif (gang_port_room.nil? && !gang_store.nil?)
			maindeck = (Map.list.find_all { |room| room.tags.include?('myboat')})[0].id
			Gangplank.destroygangplank(maindeck,myshiprange) if !maindeck.nil?
			lookocean = false
		#elsif (((myshiprange.include? gang_port_room) && (!gang_port_room.nil?))) || gang_store.nil? 
		else
			maindeck = (Map.list.find_all { |room| room.tags.include?('myboat')})[0].id
			Gangplank.destroygangplank(maindeck,myshiprange) if !maindeck.nil?
			echo "Slow down!"
			lookoceanfailed = true
		# else
			# maindeck = (Map.list.find_all { |room| room.tags.include?('myboat')})[0].id
			# Gangplank.destroygangplank(maindeck,myshiprange) if !maindeck.nil?
			# lookocean = false
		end
		server_string
	elsif lookocean && server_string =~/I could not find what you were referring to/
		echo "Go outside!"
		lookoceanfailed = true
		lookocean = false
		server_string
	elsif notgrappled && server_string =~/Several ropes with claw-shaped hooks on the end find purchase/
		ges = enemy_ship_pattern.match(server_string)[:name]
		maindeck = Gangplank.findmaindeck
		notgrappled = false
		gang_port_room = Room[enemy_maindeck_list[ges]]
		Gangplank.mapgangplank(maindeck,gang_port_room,false)
		server_string
	elsif server_string =~/Oh, don't forget to STOCK up/
		maindeck = (Map.list.find_all { |room| room.tags.include?('myboat')})[0].id
		Gangplank.destroygangplank(maindeck,myshiprange) if !maindeck.nil?
		server_string
	else
		server_string
	end
}

notgrappled = true
$original_flags = Flags.get_flags
DownstreamHook.add('gangplankwatch', gangplankwatch)
before_dying{DownstreamHook.remove('gangplankwatch')}


if (myshiprange.include? Room.current.id)
	lookocean= true
	$viewaltered = true
	Flags.change_flags(desired_flags,$original_flags)
	fput "look ocean"
	Flags.change_flags($original_flags, desired_flags)
#	_respond("VA False")
	$viewaltered = false
end

while true
	sleep 1
	while lookoceanfailed
	  if Room.current.paths[0].include? "Obvious paths:"
			lookocean= true
			$viewaltered = true
			Flags.change_flags(desired_flags,$original_flags)
			fput "look ocean"
			Flags.change_flags($original_flags, desired_flags)
			#_respond("VA False")
			$viewaltered = false
			lookoceanfailed = false
		else
			sleep 1
	  end
	end
end
