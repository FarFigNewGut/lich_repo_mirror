=begin

	This script is for calculating all the things for all of the services.
	
	Simply start up the script and enter all of the information.
	
	Enter your item's difficulty level, what the next service you want on it is, the skill of the person who is going to do the cast, and enter what the person is charging, and the script will calculate how much resources are required for your base cast, whether the person will need to use suffuse, how much suffuse is required, total resources required, total cost, and more!
	
	So take all of the guesswork out of how much your next project is going to cost and let this script do all the work for you.
	
	Changelog:
	
	Version 2: Fixed total skill required for enchant formula. It was off by just a little before, but now it's 100% accurate. Maybe.
	Version 2: Added Resist Nature support!
	Version 2: Added lots of other features!
	Version 3: Added darkmode option to the windows.
	Version 3: Added Ensorcell, Sanctify, and Warrior Grit Service. That's all of the current services! Well except Monks, but you don't need a script for that one.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 3

=end

require 'gtk3'

def create_services_window
	@services_win = Gtk::Window.new
	@services_win.set_title("Services")
	@services_win.set_border_width(10)
	@services_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	@services_win.set_keep_above(true)
	@services_win.set_position(Gtk::WindowPosition::CENTER)

	vbox = Gtk::Box.new(:vertical, 10)

	hbox = Gtk::Box.new(:horizontal, 10)
	
	@dark_mode_checkbox = Gtk::CheckButton.new("Dark Mode")

	@dark_mode_checkbox.active = load_checkbox_state
	toggle_background_color
	@dark_mode_checkbox.signal_connect("toggled") do
		save_checkbox_state(@dark_mode_checkbox.active?)
		toggle_background_color
	end

	hbox.pack_start(@dark_mode_checkbox, :expand => false, :fill => false, :padding => 0)

	label = Gtk::Label.new("Choose service")
	label.set_halign(Gtk::Align::CENTER)
	label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))
	label.set_margin_start(-120)
	hbox.pack_start(label, :expand => true, :fill => true, :padding => 0)

	vbox.pack_start(hbox, :expand => false, :fill => false, :padding => 0)

	enchant_button = Gtk::Button.new(:label => "Enchant (925)")
	enchant_button.signal_connect("clicked") do
		$service_service_chosen = "Enchant"
		$service_resource_name = "essence"
		$service_cost_per_point_suffuse = 400
		create_difficulty_window
		@services_win.close
	end

	ensorcell_button = Gtk::Button.new(:label => "Ensorcell (735)")
	ensorcell_button.signal_connect("clicked") do
		$service_service_chosen = "Ensorcell"
		$service_resource_name = "Necrotic Energy"
		$service_cost_per_point_suffuse = 2000
		create_difficulty_window
		@services_win.close
	end
  
	resist_nature_button = Gtk::Button.new(:label => "Resist Nature (620)")
	resist_nature_button.signal_connect("clicked") do
		$service_service_chosen = "Resist Nature"
		$service_resource_name = "Nature's Grace"
		$service_cost_per_point_suffuse = 1000
		create_resist_nature_window
		@services_win.close
	end
  
	sanctify_button = Gtk::Button.new(:label => "Sanctify (330)")
		sanctify_button.signal_connect("clicked") do
		$service_service_chosen = "Sanctify"
		$service_resource_name = "Devotion"
		$service_cost_per_point_suffuse = 2000
		create_difficulty_window
		@services_win.close
	end
  
	grit_button = Gtk::Button.new(:label => "Warrior Grit Service")
	grit_button.signal_connect("clicked") do
		$service_service_chosen = "Warrior Service"
		$service_resource_name = "Grit"
		$service_cost_per_point_suffuse = 150
		$service_service_wanted = "Warrior Service"
		$service_base_resources_needed = 25000
		create_difficulty_window
		@services_win.close
	end

	box = Gtk::Box.new(:horizontal, 10)
	box.pack_start(enchant_button, :expand => true, :fill => true, :padding => 0)
	box.pack_start(ensorcell_button, :expand => true, :fill => true, :padding => 0)
	box.pack_start(resist_nature_button, :expand => true, :fill => true, :padding => 0)
	box.pack_start(sanctify_button, :expand => true, :fill => true, :padding => 0)
	box.pack_start(grit_button, :expand => true, :fill => true, :padding => 0)

	vbox.pack_start(box, :expand => false, :fill => false, :padding => 0)

	@services_win.add(vbox)

	@services_win.show_all
end

def toggle_background_color
	if @dark_mode_checkbox.active?
		@service_dark_mode_is_active = true
		@services_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
		@dark_mode_checkbox.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	else
		@service_dark_mode_is_active = nil
		@services_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		@dark_mode_checkbox.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	end
end

def save_checkbox_state(state)
	File.open("service_cost_checkbox_state.txt", "w") { |file| file.write(state) }
end

def load_checkbox_state
	if File.exist?("service_cost_checkbox_state.txt")
		File.open("service_cost_checkbox_state.txt", "r") do |file|
		state = file.read.chomp == "true"
		return state
		end
	end
	false
end

def create_difficulty_window
	difficulty_win = Gtk::Window.new(:toplevel)
	difficulty_win.set_title("Item difficulty")
	difficulty_win.set_border_width(10)
	difficulty_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	difficulty_win.set_keep_above(true)
	difficulty_win.set_position(Gtk::WindowPosition::CENTER)
	
	if @service_dark_mode_is_active
		difficulty_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	else
		difficulty_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	end

	$service_item_difficulty = ""

	title_label = Gtk::Label.new("Enter your item's difficulty.\nThis can be found by using RECALL on your item.")
	title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))

	label = Gtk::Label.new
	label.set_text("Item difficulty: #{$service_item_difficulty}")
	label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))

	buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			$service_item_difficulty += i.to_s
			update_label(label, $service_item_difficulty)
		end
		buttons << button
	end

	delete_button = Gtk::Button.new(:label => "Delete")
	delete_button.signal_connect("clicked") do
		$service_item_difficulty = $service_item_difficulty.chop
		update_label(label, $service_item_difficulty)
	end
	buttons << delete_button
  
	delete_button = Gtk::Button.new(:label => "Reset")
	delete_button.signal_connect("clicked") do
		$service_item_difficulty = ""
		update_label(label, $service_item_difficulty)
	end
	buttons << delete_button

	finished_button = Gtk::Button.new(:label => "Finished")
	finished_button.signal_connect("clicked") do
		difficulty_win.close
		if $service_service_chosen == "Enchant"
			create_enchant_window
		elsif $service_service_chosen == "Ensorcell"
			create_ensorcell_window
		elsif $service_service_chosen == "Sanctify"
			create_sanctify_window
		elsif $service_service_chosen == "Warrior Service"
			create_cost_window
		end
	end
	buttons << finished_button

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 2, 1, 1)
	end

	grid.attach(label, 0, 1, 5, 1)

	difficulty_win.add(grid)
	difficulty_win.show_all
end

def create_resist_nature_window
	resist_win = Gtk::Window.new(:toplevel)
	resist_win.set_title("Next Resist Nature cast")
	resist_win.set_border_width(10)
	resist_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	resist_win.set_keep_above(true)
	resist_win.set_position(Gtk::WindowPosition::CENTER)
	
	if @service_dark_mode_is_active
		resist_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	else
		resist_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	end
  
	title_label = Gtk::Label.new("Click your next Resist Nature cast.\nR refers to how many current resistances your trinket has (add 1 if your next service is T1.)\nT refers to what Tier your current resistance is at.\nExample if you have 3 resistances on your trinket, and your current resistance is T5, click R4T1.\nExample if you have no casts on your trinket, click R1T1.")
	title_label.set_size_request(200, 50)
	title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))
	
	buttons = []
	1.upto(5) do |r|
		1.upto(5) do |t|
			label = "R#{r}T#{t}"
			button = Gtk::Button.new(:label => "R#{r}T#{t}")
			button.signal_connect("clicked") do
				case t
				when 1
					$service_base_resources_needed = 50000
					$service_tier_being_worked_on = 1
				when 2
					$service_base_resources_needed = 75000
					$service_tier_being_worked_on = 2
				when 3
					$service_base_resources_needed = 100000
					$service_tier_being_worked_on = 3
				when 4
					$service_base_resources_needed = 125000
					$service_tier_being_worked_on = 4
				when 5
					$service_base_resources_needed = 150000
					$service_tier_being_worked_on = 5
				end

				case r
				when 1
					$service_item_difficulty = 100 + (t - 1) * 100
				when 2
					$service_item_difficulty = 250 + (t - 1) * 100
				when 3
					$service_item_difficulty = 400 + (t - 1) * 100
				when 4
					$service_item_difficulty = 550 + (t - 1) * 100
				when 5
					$service_item_difficulty = 700 + (t - 1) * 100
				end
				$service_service_wanted = label
				resist_win.close
				create_cost_window
			end
			buttons << button
		end
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end

	resist_win.add(grid)
	resist_win.show_all
end

def create_ensorcell_window
	ensorcell_win = Gtk::Window.new(:toplevel)
	ensorcell_win.set_title("Next Ensorcell cast")
	ensorcell_win.set_border_width(10)
	ensorcell_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	ensorcell_win.set_keep_above(true)
	ensorcell_win.set_position(Gtk::WindowPosition::CENTER)
	
	if @service_dark_mode_is_active
		ensorcell_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	else
		ensorcell_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	end
  
	title_label = Gtk::Label.new("Click your next Ensorcell cast.")
	title_label.set_size_request(200, 50)
	title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))
	
	buttons = []
	1.upto(5) do |t|
		label = "T#{t}"
		button = Gtk::Button.new(:label => "T#{t}")
		button.signal_connect("clicked") do
			case t
			when 1
				$service_base_resources_needed = 50000
				$service_tier_being_worked_on = 1
			when 2
				$service_base_resources_needed = 75000
				$service_tier_being_worked_on = 2
			when 3
				$service_base_resources_needed = 100000
				$service_tier_being_worked_on = 3
			when 4
				$service_base_resources_needed = 125000
				$service_tier_being_worked_on = 4
			when 5
				$service_base_resources_needed = 150000
				$service_tier_being_worked_on = 5
			end
			$service_service_wanted = label
			create_cost_window
			ensorcell_win.close
		end
		buttons << button
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end

	ensorcell_win.add(grid)
	ensorcell_win.show_all
end

def create_sanctify_window
	sanctifyl_win = Gtk::Window.new(:toplevel)
	sanctifyl_win.set_title("Next Sanctify cast")
	sanctifyl_win.set_border_width(10)
	sanctifyl_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	sanctifyl_win.set_keep_above(true)
	sanctifyl_win.set_position(Gtk::WindowPosition::CENTER)
	
	if @service_dark_mode_is_active
		sanctifyl_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	else
		sanctifyl_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	end
  
	title_label = Gtk::Label.new("Click your next Sanctify cast.")
	title_label.set_size_request(200, 50)
	title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))
	
	buttons = []
	1.upto(6) do |t|
		label = "S#{t}"
		button = Gtk::Button.new(:label => "S#{t}")
		button.signal_connect("clicked") do
			case t
			when 1
				$service_base_resources_needed = 50000
				$service_tier_being_worked_on = 1
			when 2
				$service_base_resources_needed = 75000
				$service_tier_being_worked_on = 2
			when 3
				$service_base_resources_needed = 100000
				$service_tier_being_worked_on = 3
			when 4
				$service_base_resources_needed = 125000
				$service_tier_being_worked_on = 4
			when 5
				$service_base_resources_needed = 150000
				$service_tier_being_worked_on = 5
			when 6
				$service_base_resources_needed = 200000
				$service_tier_being_worked_on = 6
			end
			$service_service_wanted = label
			create_cost_window
			sanctifyl_win.close
		end
		buttons << button
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end

	sanctifyl_win.add(grid)
	sanctifyl_win.show_all
end

def update_label(label, text)
	label.set_text("Item difficulty: #{text.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
end

def create_enchant_window
	enchant_win = Gtk::Window.new(:toplevel)
	enchant_win.set_title("Next Enchant")
	enchant_win.set_border_width(10)
	enchant_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	enchant_win.set_keep_above(true)
	enchant_win.set_position(Gtk::WindowPosition::CENTER)
	
	if @service_dark_mode_is_active
		enchant_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	else
		enchant_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	end
  
	title_label = Gtk::Label.new("Click your next enchant.\nExample if your current enchant is +25 then click on +26.")
	title_label.set_size_request(200, 50)
	title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))

	buttons = []
	1.upto(50) do |i|
		button = Gtk::Button.new(:label => "+#{i}")
		button.signal_connect("clicked") do
			$service_service_wanted = "+#{i}"
			$service_enchant_target_value = i
			$service_base_resources_needed = 
			if i <= 24
			  ((i - 1) * 312.5).truncate
			elsif i <= 50
			  (i - 24) * 7500
			end
			enchant_win.close
			create_cost_window
		end
		buttons << button
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end

	enchant_win.add(grid)
	enchant_win.show_all
end

def create_cost_window
	cost_win = Gtk::Window.new(:toplevel)
	cost_win.set_title("Cost of #{$service_resource_name} and skill of caster")
	cost_win.set_border_width(10)
	cost_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	cost_win.set_keep_above(true)
	cost_win.set_position(Gtk::WindowPosition::CENTER)

	$service_weekly_or_per_point_cost = ""
	$service_caster_skill = ""
	$service_resources_from_suffuse_needed = 0
	$service_amount_suffuse_needed = 0

	enter_cost_per_point = Gtk::Label.new
	if $service_service_chosen == "Enchant"
		enter_cost_per_point.markup = "<span foreground='red'>Enter silver cost per point of #{$service_resource_name} below.</span>"
	elsif $service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		enter_cost_per_point.markup = "<span foreground='red'>Enter silver cost per 1 week's of #{$service_resource_name} below.</span>"
	elsif $service_service_chosen = "Warrior Service"
		enter_cost_per_point.markup = "<span foreground='red'>Enter silver cost per 1 Warrior Service below.</span>"
	end
  
	skill_of_caster = Gtk::Label.new
	skill_of_caster.markup = "<span foreground='green'>Enter skill of caster below.</span>"
  
	skill_caster_label = Gtk::Label.new
	skill_caster_label.markup = "<span foreground='green'>Skill bonus of caster: #{$service_caster_skill.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>"
	
	one_percent_failure_label = Gtk::Label.new
	one_percent_failure_label.markup = "<span foreground='red'>There is always at least a 1% chance of failure.</span>"
  
	cost_label = Gtk::Label.new
	if $service_service_chosen == "Enchant"
		cost_label.markup = "<span foreground='red'>Silver cost per point of #{$service_resource_name}: #{$service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>"
	elsif $service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		cost_label.markup = "<span foreground='red'>Silver cost per 1 week's of #{$service_resource_name}: #{$service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>"
	elsif $service_service_chosen = "Warrior Service"
		cost_label.markup = "<span foreground='red'>Silver cost per 1 Warrior Service below.: #{$service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>"
	end
	
	if $service_service_chosen == "Enchant"
		starting_difficulty_modifier = (((($service_enchant_target_value.to_i - 1) - 2) ** 2) / 9.0).round
		ending_difficulty_modifier = ((($service_enchant_target_value.to_i - 2) ** 2) / 9.0).round
		enchant_difficulty_modifier = ending_difficulty_modifier - starting_difficulty_modifier
		$service_skill_needed_for_best_chance = ($service_item_difficulty.to_i + enchant_difficulty_modifier) + 100
	elsif $service_service_chosen == "Resist Nature"
		$service_skill_needed_for_best_chance = $service_item_difficulty.to_i + 100
	elsif $service_service_chosen == "Ensorcell"
		$service_skill_needed_for_best_chance = $service_item_difficulty.to_i + 150
	elsif $service_service_chosen == "Sanctify"
		if $service_tier_being_worked_on == 6
			$service_skill_needed_for_best_chance = $service_item_difficulty.to_i + 150
		else
			$service_skill_needed_for_best_chance = $service_item_difficulty.to_i + 120
		end
	elsif $service_service_chosen == "Warrior Service"
		$service_skill_needed_for_best_chance = $service_item_difficulty.to_i + 101
	end
	skill_needed = Gtk::Label.new("Skill bonus needed for best chance: #{$service_skill_needed_for_best_chance.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")

	casters_success_chance_label = Gtk::Label.new("Caster's success chance without suffuse: N/A")
	cost_suffuse_label = Gtk::Label.new("Each point of suffuse costs #{$service_cost_per_point_suffuse.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} #{$service_resource_name}.")
	items_difficulty = Gtk::Label.new("Item difficulty: #{$service_item_difficulty.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	wanted_service_description = Gtk::Label.new("Service wanted: #{$service_service_wanted} (#{$service_base_resources_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} #{$service_resource_name} (#{($service_base_resources_needed / 50000.0).round(2)} weeks))")
	total_resource_required_label = Gtk::Label.new("Total #{$service_resource_name} required: #{$service_base_resources_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{($service_base_resources_needed / 50000.0).round(2)} weeks)")
	total_cost_label = Gtk::Label.new("Total cost: 0 silvers")
	suffuse_required_label = Gtk::Label.new("Suffuse needed for 100% success: N/A")
	cost_from_suffuse_label = Gtk::Label.new("Suffuse cost: N/A")
	base_cost_label = Gtk::Label.new("Base cost: N/A")
	resist_nature_herbs_needed_message_label = Gtk::Label.new("#{$service_tier_being_worked_on * 5} of the following herbs is required depending on element:")
	cold_herbs_needed_message_label = Gtk::Label.new("Cold: frostflower")
	fire_herbs_needed_message_label = Gtk::Label.new("Fire: drakefern")
	steam_herbs_needed_message_label = Gtk::Label.new("Steam: mistweed")
	nature_herbs_needed_message_label = Gtk::Label.new("Nature: murkweed")
	lightning_herbs_needed_message_label = Gtk::Label.new("Lightning: length of deep purple shockroot")
	blank_line_label = Gtk::Label.new(" " * 160)
	
	if @service_dark_mode_is_active
		cost_win.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		one_percent_failure_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		cost_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		skill_needed.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		casters_success_chance_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		cost_suffuse_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		items_difficulty.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		wanted_service_description.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		total_resource_required_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		total_cost_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		suffuse_required_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		cost_from_suffuse_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		base_cost_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		resist_nature_herbs_needed_message_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		cold_herbs_needed_message_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		fire_herbs_needed_message_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		steam_herbs_needed_message_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		nature_herbs_needed_message_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		lightning_herbs_needed_message_label.override_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
		cost_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(0, 0, 0, 1))
	else
		cost_win.override_background_color(Gtk::StateFlags::NORMAL, Gdk::RGBA.new(1, 1, 1, 1))
	end

	buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			$service_weekly_or_per_point_cost += i.to_s
			update_cost_label(cost_label)
			update_skill_label(skill_caster_label, $service_caster_skill)
			update_required_suffuse_label(suffuse_required_label)
			update_base_cost_label(base_cost_label)
			update_suffuse_cost_label(cost_from_suffuse_label)
			update_resource_total_label(total_resource_required_label)
			update_casters_success_chance_label(casters_success_chance_label)
			update_total_cost(total_cost_label)
		end
		buttons << button
	end

	delete_button = Gtk::Button.new(:label => "Delete")
	delete_button.signal_connect("clicked") do
		$service_weekly_or_per_point_cost = $service_weekly_or_per_point_cost.chop
		update_cost_label(cost_label)
		update_skill_label(skill_caster_label, $service_caster_skill)
		update_required_suffuse_label(suffuse_required_label)
		update_base_cost_label(base_cost_label)
		update_suffuse_cost_label(cost_from_suffuse_label)
		update_resource_total_label(total_resource_required_label)
		update_casters_success_chance_label(casters_success_chance_label)
		update_total_cost(total_cost_label)
	end
	buttons << delete_button
  
	delete_button = Gtk::Button.new(:label => "Reset")
	delete_button.signal_connect("clicked") do
		$service_weekly_or_per_point_cost = ""
		update_cost_label(cost_label)
		update_skill_label(skill_caster_label, $service_caster_skill)
		update_required_suffuse_label(suffuse_required_label)
		update_base_cost_label(base_cost_label)
		update_suffuse_cost_label(cost_from_suffuse_label)
		update_resource_total_label(total_resource_required_label)
		update_casters_success_chance_label(casters_success_chance_label)
		update_total_cost(total_cost_label)
	end
	buttons << delete_button

	second_set_buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			$service_caster_skill += i.to_s 
			update_cost_label(cost_label)
			update_skill_label(skill_caster_label, $service_caster_skill)
			update_required_suffuse_label(suffuse_required_label)
			update_base_cost_label(base_cost_label)
			update_suffuse_cost_label(cost_from_suffuse_label)
			update_resource_total_label(total_resource_required_label)
			update_casters_success_chance_label(casters_success_chance_label)
			update_total_cost(total_cost_label)
		end
		second_set_buttons << button
	end

	delete_button_2 = Gtk::Button.new(:label => "Delete")
	delete_button_2.signal_connect("clicked") do
		$service_caster_skill = $service_caster_skill.chop	
		update_cost_label(cost_label)
		update_skill_label(skill_caster_label, $service_caster_skill)
		update_required_suffuse_label(suffuse_required_label)
		update_base_cost_label(base_cost_label)
		update_suffuse_cost_label(cost_from_suffuse_label)
		update_resource_total_label(total_resource_required_label)
		update_casters_success_chance_label(casters_success_chance_label)
		update_total_cost(total_cost_label)
	end
	second_set_buttons << delete_button_2
  
	delete_button_2 = Gtk::Button.new(:label => "Reset")
	delete_button_2.signal_connect("clicked") do
		$service_caster_skill = ""
		update_cost_label(cost_label)
		update_skill_label(skill_caster_label, $service_caster_skill)
		update_required_suffuse_label(suffuse_required_label)
		update_base_cost_label(base_cost_label)
		update_suffuse_cost_label(cost_from_suffuse_label)
		update_resource_total_label(total_resource_required_label)
		update_casters_success_chance_label(casters_success_chance_label)
		update_total_cost(total_cost_label)
	end
	second_set_buttons << delete_button_2

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
	grid.attach(enter_cost_per_point, 0, 0, 5, 1)
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, (index / 5) + 2, 1, 1)
	end
	grid.attach(skill_of_caster, 0, 5, 5, 1)
	second_set_buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, (index / 5) + 7, 1, 1)
	end
  
	grid.attach(cost_label, 0, 1, 5, 1)
	grid.attach(skill_caster_label, 0, 6, 5, 1)

	grid_position = 10
	grid.attach(one_percent_failure_label, 0, grid_position += 1, 5, 1)
	grid.attach(cost_suffuse_label, 0, grid_position += 1, 5, 1)
	grid.attach(items_difficulty, 0, grid_position += 1, 5, 1)
	grid.attach(skill_needed, 0, grid_position += 1, 5, 1)
	grid.attach(casters_success_chance_label, 0, grid_position += 1, 5, 1)
	grid.attach(wanted_service_description, 0, grid_position += 1, 5, 1)
	grid.attach(suffuse_required_label, 0, grid_position += 1, 5, 1)
	grid.attach(total_resource_required_label, 0, grid_position += 1, 5, 1)
	grid.attach(base_cost_label, 0, grid_position += 1, 5, 1)
	grid.attach(cost_from_suffuse_label, 0, grid_position += 1, 5, 1)
	grid.attach(total_cost_label, 0, grid_position += 1, 5, 1)
	
	if $service_service_chosen == "Resist Nature"
		grid.attach(resist_nature_herbs_needed_message_label, 0, grid_position += 1, 5, 1)
		grid.attach(cold_herbs_needed_message_label, 0, grid_position += 1, 5, 1)
		grid.attach(fire_herbs_needed_message_label, 0, grid_position += 1, 5, 1)
		grid.attach(steam_herbs_needed_message_label, 0, grid_position += 1, 5, 1)
		grid.attach(nature_herbs_needed_message_label, 0, grid_position += 1, 5, 1)
		grid.attach(lightning_herbs_needed_message_label, 0, grid_position += 1, 5, 1)
	end

	grid.attach(blank_line_label, 0, grid_position += 1, 5, 1)

	cost_win.add(grid)
	cost_win.show_all
end

def update_cost_label(label)
	if $service_service_chosen == "Enchant"
		label.set_markup("<span foreground='red'>Silver cost per point of #{$service_resource_name}: #{$service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>")
	elsif $service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		label.set_markup("<span foreground='red'>Silver cost per 1 week's of #{$service_resource_name}: #{$service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>")
	elsif $service_service_chosen = "Warrior Service"
		label.set_markup("<span foreground='red'>Silver cost per 1 Warrior Service: #{$service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>")
	end
end

def update_skill_label(label, text)
	label.set_markup("<span foreground='green'>Skill bonus of caster: #{text.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>")
end

def update_required_suffuse_label(label)
	if $service_caster_skill.length == 0
		label.set_text("Suffuse needed for 100% success: N/A")
		$service_resources_from_suffuse_needed = 0
	else
		$service_amount_suffuse_needed = [($service_skill_needed_for_best_chance - $service_caster_skill.to_i), 0].max
		$service_resources_from_suffuse_needed = $service_amount_suffuse_needed * $service_cost_per_point_suffuse
		label.set_text("Suffuse needed for 100% success: #{$service_amount_suffuse_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (+#{$service_resources_from_suffuse_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} #{$service_resource_name} (#{($service_resources_from_suffuse_needed / 50000.0).round(2)} weeks))")
	end
end

def update_suffuse_cost_label(label)
	if $service_caster_skill.length == 0
		label.set_text("Suffuse cost: N/A")
		$service_resources_from_suffuse_needed = 0
	else
		if $service_service_chosen == "Enchant"
			cost_total = $service_weekly_or_per_point_cost.to_i * $service_resources_from_suffuse_needed
		elsif $service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
			cost_total = ($service_weekly_or_per_point_cost.to_i / 50000.0) * $service_resources_from_suffuse_needed
		elsif $service_service_chosen = "Warrior Service"
			cost_total = ($service_weekly_or_per_point_cost.to_i / 25000.0) * $service_resources_from_suffuse_needed
		end
		label.set_text("Suffuse cost: #{sprintf("%.0f", cost_total).reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
	end
end

def update_base_cost_label(label)
	if $service_service_chosen == "Enchant"
		cost_total = $service_weekly_or_per_point_cost.to_i * $service_base_resources_needed
	elsif $service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		cost_total = ($service_weekly_or_per_point_cost.to_i / 50000.0) * $service_base_resources_needed
	elsif $service_service_chosen = "Warrior Service"
		cost_total = ($service_weekly_or_per_point_cost.to_i / 25000.0) * $service_base_resources_needed
	end
	label.set_text("Base cost: #{sprintf("%.0f", cost_total).reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
end

def update_resource_total_label(label)
	total_resource_needed = $service_resources_from_suffuse_needed.to_i + $service_base_resources_needed.to_i
	label.set_text("Total #{$service_resource_name} required: #{total_resource_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(total_resource_needed / 50000.0).round(2)} weeks)")
end

def update_casters_success_chance_label(label)
	percent_success_chance = $service_skill_needed_for_best_chance.to_i - $service_caster_skill.to_i
	percent_result = 0

	if percent_success_chance >= 100
		percent_result = 0
	elsif percent_success_chance >= 0
	  percent_result = 100 - percent_success_chance
	else
	  percent_result = 100
	end

	label.set_text("Caster's success chance without suffuse: #{percent_result}%")
end

def update_total_cost(label)
	if $service_service_chosen == "Enchant"
		cost_total = $service_weekly_or_per_point_cost.to_i * ($service_base_resources_needed + $service_resources_from_suffuse_needed)
	elsif $service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		cost_total = ($service_weekly_or_per_point_cost.to_i / 50000.0) * ($service_base_resources_needed + $service_resources_from_suffuse_needed)
	elsif $service_service_chosen = "Warrior Service"
		cost_total = ($service_weekly_or_per_point_cost.to_i / 25000.0) * ($service_base_resources_needed + $service_resources_from_suffuse_needed)
	end
	label.set_text("Total cost: #{sprintf("%.0f", cost_total).reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
end

Gtk.queue {
	create_services_window
	Gtk.main
}