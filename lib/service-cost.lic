=begin

	This script figures out the cost of player services.
	
	You just need to enter your item's current difficulty level, what the player is charging for their service in silver, and how many services you want and the script will calculate how much suffuse is required (if any), the cost of the suffuse, and the total cost of all of the services you requested. It will automatically calculate the increased difficulty after each cast and adjust the suffuse and cost accordingly.
	
	If you want multiple of different services done (ensorcell, enchant, sanctify, etc) the script will calculate the costs in order and automatically adjust the difficulty between each cast and each service to give you a grand total cost for all services.
	
	Currently the script works for these player services: Enchant, Ensorcell, Grit, Sanctify
	
	Changelog:
	Version 1: Initial release!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

class ServiceCostMain
	@grids = {}
	@labels = {}
	@adjustments = {}
	@spin_buttons = {}
	@all_notebooks = {}
	@menus = {}
	
	@all_services_in_order = nil
	
	@service_level_costs = {
		"Ensorcell" => {
			1 => 50000,
			2 => 75000,
			3 => 100000,
			4 => 125000,
			5 => 150000,
		},
		
		"Sanctify" => {
			1 => 50000,
			2 => 75000,
			3 => 100000,
			4 => 125000,
			5 => 150000,
			6 => 200000,
		},
	}
	
	@cer_services_pairs = {
		0 => 0,
		1 => 10,
		2 => 20,
		3 => 30,
		4 => 40,
		5 => 50,
		6 => 70,
		7 => 90,
		8 => 110,
		9 => 130,
		10 => 150,
		11 => 180,
		12 => 210,
		13 => 240,
		14 => 270,
		15 => 300,
		16 => 340,
		17 => 380,
		18 => 420,
		19 => 460,
		20 => 500,
		21 => 600,
		22 => 700,
		23 => 800,
		24 => 900,
		25 => 1000,
		26 => 1100,
		27 => 1200,
		28 => 1300,
		29 => 1400,
		30 => 1500,
		31 => 1600,
		32 => 1700,
		33 => 1800,
		34 => 1900,
		35 => 2000,
		36 => 2100,
		37 => 2200,
		38 => 2300,
		39 => 2400,
		40 => 2500,
		41 => 2700,
		42 => 2900,
		43 => 3100,
		44 => 3300,
		45 => 3500,
		46 => 3800,
		47 => 4100,
		48 => 4400,
		49 => 4700,
		50 => 5000,
	}

	
	@tooltips = {}
	
	@tooltips["Item Difficulty"] = "Enter the item's starting difficulty here."
	@tooltips["Current Grit"] = "Enter the total number of services the item currently has.\n\nNOTE: Not the CER level, the total number of services."
	@tooltips["Wanted Grit"] = "Enter the the total number of services you want to bring the item to here.\n\nNOTE: Not the CER level, the total number of services."
	
	tooltip_names = [ "Current Ensorcell", "Current Sanctify", "Current Enchant" ]
	tooltip_names.each{ |name| @tooltips[name] = "Enter the item's current level here." }
	
	tooltip_names = [ "Option 1", "Option 2", "Option 3", "Option 4" ]
	tooltip_names.each{ |name| @tooltips[name] = "Select the order in which you want the script to calculate services. For example: If you choose 'Ensorcell' in box 1, 'Sanctify' in box 2, and 'Enchant' in box 3, then the script will start with the item difficulty you selected above then calculate everything you have set in the 'Ensorcell' tab. It will then calculate the item's new difficulty based on the number of Ensorcell casts you specified in the 'Ensorcell' tab then it will calculate everything in the 'Sanctify' tab, calculate the new difficulty and move on to the 'Enchant' tab. This way you can plan out the item's total cost based on the new difficulty from each cast.\n\nSelecting 'None' in the first box will allow you to calculate each tab separately with each tab using the item's difficulty you selected above." }
	
	tooltip_names = [ "Wanted Ensorcell", "Wanted Sanctify", "Wanted Enchant" ]
	tooltip_names.each{ |name| @tooltips[name] = "Enter which level you want to bring the item to here." }
	
	tooltip_names = [ "Sorcerer Bonus", "Cleric Bonus", "Wizard Bonus", "Warrior Bonus" ]
	tooltip_names.each{ |name| @tooltips[name] = "Enter the caster's service bonus here." }
	
	tooltip_names = [ "Ensorcell Success % Wanted", "Sanctify Success % Wanted", "Enchant Success % Wanted", "Grit Success % Wanted" ]
	tooltip_names.each{ |name| @tooltips[name] = "Enter the success chance you want for the cast here.\n\nLower success chance may be cheaper if the caster has to use fewer suffuse points, but casters typically charge for any failed attempts that don't have a 100% success rate.\n\nNOTE: There is always a small chance of failure no matter the caster's service bonus. '100% chance' just means 100% chance outside of this small failure chance." }

	tooltip_names = [ "Ensorcell Cost", "Sanctify Cost", "Enchant Cost", "Grit Cost" ]
	tooltip_names.each{ |name| @tooltips[name] = "Enter how much the caster is charging for the service here.\n\nThe script will assume any amount over 1000 is the weekly rate the caster is charging, and any amount 1000 or lower is the per point cost the caster is charging." }
	
	tooltip_names = [ "Sorcerer Suffuse Needed Text", "Sorcerer Suffuse Needed Value", "Cleric Suffuse Needed Text", "Cleric Suffuse Needed Value", "Wizard Suffuse Needed Text", "Wizard Suffuse Needed Value", "Warrior Suffuse Needed Text", "Warrior Suffuse Needed Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "This is how much suffuse the caster would need to do all casts. If multiple casts are being done then this amount already factors in the increased difficulty after each cast." }
	
	tooltip_names = [ "Sorcerer Suffuse Cost Text", "Sorcerer Suffuse Cost Value", "Cleric Suffuse Cost Text", "Cleric Suffuse Cost Value", "Wizard Suffuse Cost Text", "Wizard Suffuse Cost Value", "Warrior Suffuse Cost Text", "Warrior Suffuse Cost Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "This is how much just the suffuse would cost based on how much suffuse is needed and how much the caster is charging." }
	
	tooltip_names = [ "Sorcerer Difficulty Added Text", "Sorcerer Difficulty Added Value", "Cleric Difficulty Added Text", "Cleric Difficulty Added Value", "Wizard Difficulty Added Text", "Wizard Difficulty Added Value", "Warrior Difficulty Added Text", "Warrior Difficulty Added Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "How much difficulty will be added to the item after all of these casts are performed." }
	
	tooltip_names = [ "Sorcerer Total Cost Text", "Sorcerer Total Cost Value", "Cleric Total Cost Text", "Cleric Total Cost Value", "Wizard Total Cost Text", "Wizard Total Cost Value", "Warrior Total Cost Text", "Warrior Total Cost Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "This is the total cost to perform all of the casts. This includes the cost of the suffuse and the cost for the casts themselves." }
	
	tooltip_names = [ "Total Difficulty Added Text", "Total Difficulty Added Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "How much difficulty will be added to this item after all casts from all services are performed." }
	
	tooltip_names = [ "Total Suffuse Cost Text", "Total Suffuse Cost Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "The total suffuse cost from all services being performed." }
		
	tooltip_names = [ "Total Cost Text", "Total Cost Value" ]
	tooltip_names.each{ |name| @tooltips[name] = "The total cost of all services being performed." }
	
	def self.create_grid(name)
		@grids[name] = Gtk::Grid.new
	end
	
	def self.add_commas(number)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, "\\1,").reverse
	end
	
	def self.calculate_service_cost(class_name, service_name)
		total_suffuse_needed = 0
		total_suffuse_cost = 0
		total_cost = 0
		difficulty_added_to_item = 0
		
		next_service_level = @spin_buttons["Current #{service_name}"].value.truncate
		
		if @spin_buttons["#{service_name} Cost"].value > 1000
			per_point_cost = (@spin_buttons["#{service_name} Cost"].value / 50000.0)
		else
			per_point_cost = @spin_buttons["#{service_name} Cost"].value
		end

		total_difficulty = @spin_buttons["Item Difficulty"].value
		
		until next_service_level >= @spin_buttons["Wanted #{service_name}"].value.truncate
			next_service_level += 1
			
			if service_name == "Enchant"
				difficulty_added_for_cast = (((next_service_level - 2) ** 2) / 9).truncate - (((next_service_level - 3) ** 2) / 9).truncate
				suffuse_conversion = 400
			elsif service_name == "Ensorcell"
				difficulty_added_for_cast = 50
				suffuse_conversion = 2000
			elsif service_name == "Grit"			
				@cer_services_pairs.each{ |cer_level,services_level|
					if next_service_level < services_level
						current_cer = cer_level - 1
						services_towards_next_cer = next_service_level - @cer_services_pairs[current_cer]
						next_cer_services_minus_current_cer_services = @cer_services_pairs[current_cer + 1] - @cer_services_pairs[current_cer].to_f
						@new_cer_difficulty = ((current_cer + (services_towards_next_cer / next_cer_services_minus_current_cer_services)) ** 2).round
						break
					end
				}
				
				@cer_services_pairs.each{ |cer_level,services_level|
					current_service_level = next_service_level - 1
					if current_service_level < services_level
						current_cer = cer_level - 1
						services_towards_next_cer = current_service_level - @cer_services_pairs[current_cer]
						next_cer_services_minus_current_cer_services = @cer_services_pairs[current_cer + 1] - @cer_services_pairs[current_cer].to_f
						@old_cer_difficulty = ((current_cer + (services_towards_next_cer / next_cer_services_minus_current_cer_services)) ** 2).round
						break
					end
				}
				
				difficulty_added_for_cast = @new_cer_difficulty - @old_cer_difficulty
				suffuse_conversion = 150
			elsif service_name == "Sanctify"
				if next_service_level == 6
					difficulty_added_for_cast = 50
				else
					difficulty_added_for_cast = 20
				end
				suffuse_conversion = 2000
			end

			if service_name =~ /Ensorcell|Sanctify/
				juice_needed_for_cast = @service_level_costs[service_name][next_service_level]
			elsif service_name == "Grit"
				juice_needed_for_cast = 25000
			elsif service_name == "Enchant"
				if next_service_level <= 24
					juice_needed_for_cast = ((next_service_level - 1) * 312.5).truncate
				elsif next_service_level <= 50
					juice_needed_for_cast = (next_service_level - 24) * 7500
				end
			end
			
			if @all_services_in_order
				new_difficulty_added = difficulty_added_for_cast + @all_casts_difficulty_added
			else
				new_difficulty_added = difficulty_added_for_cast.dup
			end
			
			suffuse_needed_for_cast = ((total_difficulty + new_difficulty_added + @spin_buttons["#{service_name} Success % Wanted"].value) - @spin_buttons["#{class_name} Bonus"].value).truncate
			suffuse_needed_for_cast = [suffuse_needed_for_cast, 0].max
			total_suffuse_needed += suffuse_needed_for_cast
			
			suffuse_cost_for_cast = (suffuse_needed_for_cast * (per_point_cost * suffuse_conversion))
			total_suffuse_cost += suffuse_cost_for_cast

			total_cost += (juice_needed_for_cast * per_point_cost)
			
			total_difficulty += difficulty_added_for_cast
			
			difficulty_added_to_item += difficulty_added_for_cast if difficulty_added_for_cast
		end
		
		total_cost += total_suffuse_cost
		
		if @spin_buttons["Current #{service_name}"].value == @spin_buttons["Wanted #{service_name}"].value
			total_suffuse_needed = 0
			total_suffuse_cost = 0
			total_cost = 0
			suffuse_conversion = 0
			difficulty_added_to_item = 0
		end
		
		@all_casts_difficulty_added += difficulty_added_to_item
		@all_casts_suffuse_cost += total_suffuse_cost
		@all_casts_total_cost += total_cost

		if total_suffuse_needed && suffuse_conversion
			@labels["#{class_name} Difficulty Added Value"].text = add_commas(difficulty_added_to_item)
			@labels["#{class_name} Suffuse Needed Value"].text = "#{add_commas(total_suffuse_needed)} (#{add_commas(total_suffuse_needed * suffuse_conversion)} juice)"
			@labels["#{class_name} Suffuse Cost Value"].text = add_commas(total_suffuse_cost.truncate)
			@labels["#{class_name} Total Cost Value"].text = add_commas(total_cost.truncate)
		end
	end
	
	def self.create_spin_button(button_name, grid_name, row)
		if button_name == "Item Difficulty"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 1, 10000, 10, 100, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Current Ensorcell"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 5, 1, 5, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Wanted Ensorcell"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 5, 1, 5, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Current Sanctify"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 6, 1, 6, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Wanted Sanctify"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 6, 1, 6, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Current Enchant"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 50, 1, 50, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Wanted Enchant"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 50, 1, 50, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Current Grit"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 5000, 1, 5000, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name == "Wanted Grit"
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 5000, 1, 5000, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name =~ /Sorcerer Bonus|Cleric Bonus|Wizard Bonus|Warrior Bonus/
			@adjustments[button_name] = Gtk::Adjustment.new(0, 1, 10000, 10, 100, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name =~ /Ensorcell Success % Wanted|Sanctify Success % Wanted|Enchant Success % Wanted|Grit Success % Wanted/
			@adjustments[button_name] = Gtk::Adjustment.new(100, 1, 100, 1, 10, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		elsif button_name =~ /Ensorcell Cost|Sanctify Cost|Enchant Cost|Grit Cost/
			@adjustments[button_name] = Gtk::Adjustment.new(0, 0, 10000000, 25000, 100000, 0)
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name], 1, 0)
		end
			
		@labels[button_name] = Gtk::Label.new("     #{button_name}     ")
		@grids[grid_name].attach(@labels[button_name], 0, row, 1, 1)
		@grids[grid_name].attach(@spin_buttons[button_name], 1, row, 1, 1)
	end
	
	def self.create_tab_info(class_name, service_name)
		@labels["#{class_name} Difficulty Added Text"] = Gtk::Label.new("     Difficulty Added     ")
		@labels["#{class_name} Difficulty Added Value"] = Gtk::Label.new("")
		
		@labels["#{class_name} Suffuse Needed Text"] = Gtk::Label.new("     Suffuse Needed     ")
		@labels["#{class_name} Suffuse Needed Value"] = Gtk::Label.new("")
		
		@labels["#{class_name} Suffuse Cost Text"] = Gtk::Label.new("     Suffuse Cost     ")
		@labels["#{class_name} Suffuse Cost Value"] = Gtk::Label.new("")
		
		@labels["#{class_name} Total Cost Text"] = Gtk::Label.new("     Total Cost     ")
		@labels["#{class_name} Total Cost Value"] = Gtk::Label.new("")
		
		row = -1
		all_spinbuttons = [ "Current #{service_name}", "Wanted #{service_name}", "#{class_name} Bonus", "#{service_name} Success % Wanted", "#{service_name} Cost" ]
		all_spinbuttons.each{ |button_name|
			row += 1
			create_spin_button(button_name, service_name, row)
		}
		
		@grids[service_name].attach(@labels["#{class_name} Difficulty Added Text"], 0, row += 1, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Difficulty Added Value"], 1, row, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Suffuse Needed Text"], 0, row += 1, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Suffuse Needed Value"], 1, row, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Suffuse Cost Text"], 0, row += 1, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Suffuse Cost Value"], 1, row, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Total Cost Text"], 0, row += 1, 1, 1)
		@grids[service_name].attach(@labels["#{class_name} Total Cost Value"], 1, row, 1, 1)
	end
	
	def self.calculate_all_costs
		@all_casts_difficulty_added = 0
		@all_casts_suffuse_cost = 0
		@all_casts_total_cost = 0
				
		profession_service_names = {
			"Ensorcell" => "Sorcerer",
			"Enchant" => "Wizard",
			"Sanctify" => "Cleric",
			"Grit" => "Warrior",
		}
				
		if @menus["Option 1"].active_text == "None"
			@all_services_in_order = nil
			calculate_service_cost("Sorcerer", "Ensorcell")
			calculate_service_cost("Wizard", "Enchant")
			calculate_service_cost("Cleric", "Sanctify")
			calculate_service_cost("Warrior", "Grit")
		else
			@all_services_in_order = true
			service_name = @menus["Option 1"].active_text
			calculate_service_cost(profession_service_names[service_name], service_name)
			
			other_menus = [ "Option 2", "Option 3", "Option 4" ]
			other_menus.each{ |menu_name|
				if @menus[menu_name].active_text != "None"
					service_name = @menus[menu_name].active_text
					calculate_service_cost(profession_service_names[service_name], service_name) if service_name
				end
			}
		end
		@labels["Total Difficulty Added Value"].text = add_commas(@all_casts_difficulty_added.truncate)
		@labels["Total Suffuse Cost Value"].text = add_commas(@all_casts_suffuse_cost.truncate)
		@labels["Total Cost Value"].text = add_commas(@all_casts_total_cost.truncate)
	end
	
	def self.change_menu_options(menu_name)
		if menu_name == "Option 1"
			if @menus[menu_name].active_text == "None"
				all_menus = [ "Option 2", "Option 3", "Option 4" ]
			else
				new_menu = "Option 2"
				options = [ "Enchant", "Ensorcell", "Grit", "Sanctify" ]
				options.delete(@menus["Option 1"].active_text)
			end
		elsif menu_name == "Option 2"
			if @menus[menu_name].active_text == "None"
				all_menus = [ "Option 3", "Option 4" ]
			else
				new_menu = "Option 3"
				options = [ "Enchant", "Ensorcell", "Grit", "Sanctify" ]
				options.delete(@menus["Option 1"].active_text)
				options.delete(@menus["Option 2"].active_text)
			end
		elsif menu_name == "Option 3"
			if @menus[menu_name].active_text == "None"
				all_menus = [ "Option 4" ]
			else
				new_menu = "Option 4"
				options = [ "Enchant", "Ensorcell", "Grit", "Sanctify" ]
				options.delete(@menus["Option 1"].active_text)
				options.delete(@menus["Option 2"].active_text)
				options.delete(@menus["Option 3"].active_text)
			end
		end
		
		if @menus[menu_name].active_text == "None"
			all_menus.each{ |name| @menus[name].remove_all }
		else
			@menus[new_menu].remove_all
			@menus[new_menu].append_text("None")
			options.each{ |option_name| @menus[new_menu].append_text(option_name) }
			@menus[new_menu].set_active(0)
		end
		
		calculate_all_costs
	end
	
	def self.create_main_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.set_title(checkname)
		@main_window.resize(250, 250)
		@main_window.set_position(Gtk::Window::Position::CENTER)
		
		@main_window.signal_connect("destroy"){
			@main_window.close
			@main_window = nil
			Gtk.main_quit
			kill_script "service-cost" if running? "service-cost"
		}
		
		@all_notebooks["Primary"] = Gtk::Notebook.new
		@all_notebooks["Primary"].set_hexpand(true)
		@all_notebooks["Primary"].set_vexpand(true)
		
		grid_names = [ "Main", "Enchant", "Ensorcell", "Grit", "Sanctify" ]
		grid_names.each{ |name| create_grid(name) }

		grid_name = "Main"
		row = -1
		all_spinbuttons = [ "Item Difficulty" ]
		all_spinbuttons.each{ |button_name|
			row += 1
			create_spin_button(button_name, grid_name, row)
		}
		
		@labels["Total Difficulty Added Text"] = Gtk::Label.new("     Difficulty Added     ")
		@labels["Total Difficulty Added Value"] = Gtk::Label.new("")
		
		@labels["Total Suffuse Cost Text"] = Gtk::Label.new("     Suffuse Cost     ")
		@labels["Total Suffuse Cost Value"] = Gtk::Label.new("")
		
		@labels["Total Cost Text"] = Gtk::Label.new("     Total Cost     ")
		@labels["Total Cost Value"] = Gtk::Label.new("")
		
		options_menus = [ "Option 1", "Option 2", "Option 3", "Option 4" ]
		options_menus.each{ |name|
			@menus[name] = Gtk::ComboBoxText.new
			menu = @menus[name]
			menu.signal_connect("changed"){ change_menu_options(name) }
			menu.set_tooltip_text(@tooltips[name])
			@grids[grid_name].attach(menu, 0, row += 1, 1, 1)
		}
		
		options = [ "None", "Enchant", "Ensorcell", "Grit", "Sanctify" ]
		options.each{ |option| @menus["Option 1"].append_text(option) }
		
		@grids[grid_name].attach(@labels["Total Difficulty Added Text"], 0, row += 1, 1, 1)
		@grids[grid_name].attach(@labels["Total Difficulty Added Value"], 1, row, 1, 1)
		@grids[grid_name].attach(@labels["Total Suffuse Cost Text"], 0, row += 1, 1, 1)
		@grids[grid_name].attach(@labels["Total Suffuse Cost Value"], 1, row, 1, 1)
		@grids[grid_name].attach(@labels["Total Cost Text"], 0, row += 1, 1, 1)
		@grids[grid_name].attach(@labels["Total Cost Value"], 1, row, 1, 1)

		create_tab_info("Wizard", "Enchant")
		create_tab_info("Sorcerer", "Ensorcell")
		create_tab_info("Warrior", "Grit")
		create_tab_info("Cleric", "Sanctify")

		@spin_buttons.each{ |button_name,button|
			@spin_buttons[button_name].signal_connect("value-changed"){
				@spin_buttons["Wanted Enchant"].value = @spin_buttons["Current Enchant"].value if @spin_buttons["Wanted Enchant"].value < @spin_buttons["Current Enchant"].value
				
				@spin_buttons["Wanted Ensorcell"].value = @spin_buttons["Current Ensorcell"].value if @spin_buttons["Wanted Ensorcell"].value < @spin_buttons["Current Ensorcell"].value
				
				@spin_buttons["Wanted Grit"].value = @spin_buttons["Current Grit"].value if @spin_buttons["Wanted Grit"].value < @spin_buttons["Current Grit"].value
				
				@spin_buttons["Wanted Sanctify"].value = @spin_buttons["Current Sanctify"].value if @spin_buttons["Wanted Sanctify"].value < @spin_buttons["Current Sanctify"].value
				
				calculate_all_costs
			}
		}
		
		all_notebook_labels = [ "Main", "Enchant", "Ensorcell", "Grit", "Sanctify" ]
		all_notebook_labels.each{ |name|
			@labels[name] = Gtk::Label.new(name)
			@all_notebooks["Primary"].append_page(@grids[name], @labels[name])
		}
		
		[@labels, @spin_buttons].each{ |hash| hash.each{ |widget_name,widget| widget.set_tooltip_text(@tooltips[widget_name]) } }
		
		@menus["Option 1"].set_active(0)
		@main_window.add(@all_notebooks["Primary"])
		@main_window.show_all
	end
	
	before_dying{ @main_window.close if @main_window }
end

Gtk.queue {
	ServiceCostMain.create_main_window
	Gtk.main
}

sleep