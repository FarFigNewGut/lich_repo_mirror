=begin

	As of now this script only works for Enchant (925)

	This script is for calculating all the things for all of the services.
	
	Simply start up the script and enter all of the information.
	
	Enter your item's difficulty level, what the next service you want on it is, the skill of the person who is going to do the cast, and enter what the person is charging, and the script will calculate how much resources are required for your base cast, whether the person will need to use suffuse, how much suffuse is required, total resources required, total cost, and more!
	
	So take all of the guesswork out of how much your next project is going to cost and let this script do all the work for you.
	
	Changelog:

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

require 'gtk3'

def create_services_window
  services_win = Gtk::Window.new
  services_win.set_title("Services")
  services_win.set_border_width(10)
  services_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
  services_win.set_keep_above(true)
  services_win.set_position(Gtk::WindowPosition::CENTER)

  vbox = Gtk::Box.new(:vertical, 10)

  label = Gtk::Label.new("Choose service")
  label.set_halign(Gtk::Align::CENTER)
  label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))
  vbox.pack_start(label, :expand => false, :fill => false, :padding => 0)

  btn1 = Gtk::Button.new(:label => "Enchant (925)")
  btn1.signal_connect("clicked") do
    create_enchant_window
    services_win.close
  end

  btn2 = Gtk::Button.new(:label => "Ensorcell (735)")
  btn3 = Gtk::Button.new(:label => "Resist Nature (620)")
  btn4 = Gtk::Button.new(:label => "Sanctify (330)")
  btn5 = Gtk::Button.new(:label => "Warrior Grit Service")

  btn2.signal_connect("clicked") do
    services_win.close
	echo "Sorry this script only works for Enchant (925) at the moment."
  end
  btn3.signal_connect("clicked") do
    services_win.close
	echo "Sorry this script only works for Enchant (925) at the moment."
  end
  btn4.signal_connect("clicked") do
    services_win.close
	echo "Sorry this script only works for Enchant (925) at the moment."
  end
  btn5.signal_connect("clicked") do
    services_win.close
	echo "Sorry this script only works for Enchant (925) at the moment."
  end

  box = Gtk::Box.new(:horizontal, 10)
  box.pack_start(btn1, :expand => true, :fill => true, :padding => 0)
  box.pack_start(btn2, :expand => true, :fill => true, :padding => 0)
  box.pack_start(btn3, :expand => true, :fill => true, :padding => 0)
  box.pack_start(btn4, :expand => true, :fill => true, :padding => 0)
  box.pack_start(btn5, :expand => true, :fill => true, :padding => 0)

  vbox.pack_start(box, :expand => false, :fill => false, :padding => 0)

  services_win.add(vbox)

  services_win.show_all
end

def create_difficulty_window
  difficulty_win = Gtk::Window.new(:toplevel)
  difficulty_win.set_title("Item difficulty")
  difficulty_win.set_border_width(10)
  difficulty_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
  difficulty_win.set_keep_above(true)
  difficulty_win.set_position(Gtk::WindowPosition::CENTER)

  $service_item_difficulty = ""

  title_label = Gtk::Label.new("Enter your item's difficulty.\nThis can be found by using RECALL on your item.")
  title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))

  label = Gtk::Label.new
  label.set_text("Item difficulty: #{$service_item_difficulty}")
  label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))

  buttons = []
  0.upto(9) do |i|
    button = Gtk::Button.new(:label => "#{i}")
    button.signal_connect("clicked") do
      $service_item_difficulty += i.to_s
      update_label(label, $service_item_difficulty)
    end
    buttons << button
  end

  delete_button = Gtk::Button.new(:label => "Delete")
  delete_button.signal_connect("clicked") do
    $service_item_difficulty = $service_item_difficulty.chop
    update_label(label, $service_item_difficulty)
  end
  buttons << delete_button
  
  delete_button = Gtk::Button.new(:label => "Reset")
  delete_button.signal_connect("clicked") do
    $service_item_difficulty = ""
    update_label(label, $service_item_difficulty)
  end
  buttons << delete_button

  finished_button = Gtk::Button.new(:label => "Finished")
  finished_button.signal_connect("clicked") do
    difficulty_win.close
    create_services_window
  end
  buttons << finished_button

  grid = Gtk::Grid.new
  grid.set_row_spacing(10)
  grid.set_column_spacing(10)
  
  grid.attach(title_label, 0, 0, 10, 1)
  
  buttons.each_with_index do |button, index|
    grid.attach(button, index % 5, index / 5 + 2, 1, 1)
  end

  grid.attach(label, 0, 1, 5, 1)

  difficulty_win.add(grid)
  difficulty_win.show_all
end


def update_label(label, text)
  label.set_text("Item difficulty: #{text.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
end


def create_enchant_window
  $service_base_essence_needed = 0

  enchant_win = Gtk::Window.new(:toplevel)
  enchant_win.set_title("Next Enchant")
  enchant_win.set_border_width(10)
  enchant_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
  enchant_win.set_keep_above(true)
  enchant_win.set_position(Gtk::WindowPosition::CENTER)
  
  title_label = Gtk::Label.new("Click your next enchant.\nExample if your current enchant is +25 then click on +26.")
  title_label.set_size_request(200, 50)
  title_label.override_color(:normal, Gdk::RGBA.new(1.0, 0.0, 0.0, 1.0))

  buttons = []
  1.upto(50) do |i|
    button = Gtk::Button.new(:label => "+#{i}")
    button.signal_connect("clicked") do
      $service_enchant_selection = i
      $service_base_essence_needed = case i
        when 1 then 0
        when 2 then 312
        when 3 then 625
        when 4 then 937
        when 5 then 1250
        when 6 then 1562
        when 7 then 1875
        when 8 then 2187
        when 9 then 2500
        when 10 then 2812
        when 11 then 3125
        when 12 then 3437
        when 13 then 3750
        when 14 then 4062
        when 15 then 4375
        when 16 then 4687
        when 17 then 5000
        when 18 then 5312
        when 19 then 5625
        when 20 then 5937
        when 21 then 6250
        when 22 then 6562
        when 23 then 6875
        when 24 then 7187
        when 25 then 7500
        when 26 then 15000
        when 27 then 22500
        when 28 then 30000
        when 29 then 37500
        when 30 then 45000
        when 31 then 52500
        when 32 then 60000
        when 33 then 67500
        when 34 then 75000
        when 35 then 82500
        when 36 then 90000
        when 37 then 97500
        when 38 then 105000
        when 39 then 112500
        when 40 then 120000
        when 41 then 127500
        when 42 then 135000
        when 43 then 142500
        when 44 then 150000
        when 45 then 157500
        when 46 then 165000
        when 47 then 172500
        when 48 then 180000
        when 49 then 187500
        when 50 then 195000
        end
      enchant_win.close
      create_cost_window
    end
    buttons << button
  end

  grid = Gtk::Grid.new
  grid.set_row_spacing(10)
  grid.set_column_spacing(10)
  
  grid.attach(title_label, 0, 0, 10, 1)
  
  buttons.each_with_index do |button, index|
    grid.attach(button, index % 5, index / 5 + 1, 1, 1)
  end

  enchant_win.add(grid)
  enchant_win.show_all
end

def create_cost_window
  cost_win = Gtk::Window.new(:toplevel)
  cost_win.set_title("Cost per essence and skill of caster")
  cost_win.set_border_width(10)
  cost_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
  cost_win.set_keep_above(true)
  cost_win.set_position(Gtk::WindowPosition::CENTER)

  $service_cost_per_point_essence = ""
  $service_caster_skill = ""
  $service_essence_from_suffuse_needed = 0
  $service_amount_suffuse_needed = 0

  enter_cost_per_point = Gtk::Label.new
  enter_cost_per_point.markup = "<span foreground='red'>Enter cost per point of essence below.</span>"
  
  skill_of_caster = Gtk::Label.new
  skill_of_caster.markup = "<span foreground='green'>Enter skill of caster below.</span>"
  
  skill_caster_label = Gtk::Label.new
  skill_caster_label.markup = "<span foreground='green'>Skill bonus of caster: #{$service_caster_skill.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>"
  
  cost_label = Gtk::Label.new
  cost_label.markup = "<span foreground='red'>Cost per point of essence: #{$service_cost_per_point_essence.to_s.reverse}</span>"
  
  items_difficulty = Gtk::Label.new("Item difficulty: #{$service_item_difficulty.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
  skill_needed = Gtk::Label.new("Skill bonus needed for best chance: #{($service_item_difficulty.to_i + 120).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
  enchant_number_needed = Gtk::Label.new("Enchant wanted: +#{$service_enchant_selection} (#{$service_base_essence_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} essence (#{($service_base_essence_needed / 50000.0).round(2)} weeks))")
  total_essence_required_label = Gtk::Label.new("Total essence required: #{$service_base_essence_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{($service_base_essence_needed / 50000.0).round(2)} weeks)")
  total_cost = Gtk::Label.new("Total cost: #{$service_cost_per_point_essence.to_i * $service_base_essence_needed}")
  suffuse_required_label = Gtk::Label.new("Suffuse required: N/A")
  cost_from_suffuse_label = Gtk::Label.new("Suffuse cost: N/A")
  base_cost_label = Gtk::Label.new("Base cost: N/A")

  buttons = []
  0.upto(9) do |i|
    button = Gtk::Button.new(:label => "#{i}")
    button.signal_connect("clicked") do
      $service_cost_per_point_essence += i.to_s
      $service_product_for_total_cost = $service_cost_per_point_essence.to_i * $service_base_essence_needed
      update_cost_label(cost_label, $service_cost_per_point_essence)
      update_skill_label(skill_caster_label, $service_caster_skill)
      update_required_suffuse_label(suffuse_required_label)
	  update_base_cost_label(base_cost_label)
	  update_suffuse_cost_label(cost_from_suffuse_label)
	  update_essence_total_label(total_essence_required_label)
	  update_total_cost(total_cost, $service_product_for_total_cost)
    end
    buttons << button
  end

  delete_button = Gtk::Button.new(:label => "Delete")
  delete_button.signal_connect("clicked") do
    $service_cost_per_point_essence = $service_cost_per_point_essence.chop
    $service_product_for_total_cost = $service_cost_per_point_essence.to_i * $service_base_essence_needed
    update_cost_label(cost_label, $service_cost_per_point_essence)
    update_skill_label(skill_caster_label, $service_caster_skill)
    update_required_suffuse_label(suffuse_required_label)
	update_base_cost_label(base_cost_label)
	update_suffuse_cost_label(cost_from_suffuse_label)
	update_essence_total_label(total_essence_required_label)
	update_total_cost(total_cost, $service_product_for_total_cost)
  end
  buttons << delete_button
  
  delete_button = Gtk::Button.new(:label => "Reset")
  delete_button.signal_connect("clicked") do
    $service_cost_per_point_essence = ""
    $service_product_for_total_cost = 0	
    update_cost_label(cost_label, $service_cost_per_point_essence)
    update_skill_label(skill_caster_label, $service_caster_skill)
    update_required_suffuse_label(suffuse_required_label)
	update_base_cost_label(base_cost_label)
	update_suffuse_cost_label(cost_from_suffuse_label)
	update_essence_total_label(total_essence_required_label)
	update_total_cost(total_cost, $service_product_for_total_cost)
  end
  buttons << delete_button

  second_set_buttons = []
  0.upto(9) do |i|
    button = Gtk::Button.new(:label => "#{i}")
    button.signal_connect("clicked") do
      $service_caster_skill += i.to_s 
      update_cost_label(cost_label, $service_cost_per_point_essence)
      update_skill_label(skill_caster_label, $service_caster_skill)
      update_required_suffuse_label(suffuse_required_label)
	  update_base_cost_label(base_cost_label)
	  update_suffuse_cost_label(cost_from_suffuse_label)
	  update_essence_total_label(total_essence_required_label)
	  update_total_cost(total_cost, $service_product_for_total_cost)
    end
    second_set_buttons << button
  end

  delete_button_2 = Gtk::Button.new(:label => "Delete")
  delete_button_2.signal_connect("clicked") do
    $service_caster_skill = $service_caster_skill.chop	
    update_cost_label(cost_label, $service_cost_per_point_essence)
    update_skill_label(skill_caster_label, $service_caster_skill)
    update_required_suffuse_label(suffuse_required_label)
	update_base_cost_label(base_cost_label)
	update_suffuse_cost_label(cost_from_suffuse_label)
	update_essence_total_label(total_essence_required_label)
	update_total_cost(total_cost, $service_product_for_total_cost)
  end
  second_set_buttons << delete_button_2
  
  delete_button_2 = Gtk::Button.new(:label => "Reset")
  delete_button_2.signal_connect("clicked") do
    $service_caster_skill = ""
    update_cost_label(cost_label, $service_cost_per_point_essence)
    update_skill_label(skill_caster_label, $service_caster_skill)
    update_required_suffuse_label(suffuse_required_label)
	update_base_cost_label(base_cost_label)
	update_suffuse_cost_label(cost_from_suffuse_label)
	update_essence_total_label(total_essence_required_label)
	update_total_cost(total_cost, $service_product_for_total_cost)
  end
  second_set_buttons << delete_button_2

  grid = Gtk::Grid.new
  grid.set_row_spacing(10)
  grid.set_column_spacing(10)
  grid.attach(enter_cost_per_point, 0, 0, 5, 1)
  buttons.each_with_index do |button, index|
    grid.attach(button, index % 5, (index / 5) + 2, 1, 1)
  end
  grid.attach(skill_of_caster, 0, 5, 5, 1)
  second_set_buttons.each_with_index do |button, index|
    grid.attach(button, index % 5, (index / 5) + 7, 1, 1)
  end
  
  grid.attach(cost_label, 0, 1, 5, 1)
  grid.attach(skill_caster_label, 0, 6, 5, 1)

  grid.attach(items_difficulty, 0, 12, 5, 1)
  grid.attach(skill_needed, 0, 14, 5, 1)
  grid.attach(enchant_number_needed, 0, 16, 5, 1)
  grid.attach(suffuse_required_label, 0, 18, 5, 1)
  grid.attach(total_essence_required_label, 0, 20, 5, 1)
  grid.attach(base_cost_label, 0, 22, 5, 1)
  grid.attach(cost_from_suffuse_label, 0, 24, 5, 1)
  grid.attach(total_cost, 0, 26, 5, 1)

  cost_win.add(grid)
  cost_win.show_all
end

def update_cost_label(label, text)
  label.set_markup("<span foreground='red'>Cost per point of essence: #{text.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>")
end

def update_skill_label(label, text)
  label.set_markup("<span foreground='green'>Skill bonus of caster: #{text.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}</span>")
end

def update_required_suffuse_label(label)
  if $service_caster_skill.length == 0
    label.set_text("Suffuse required: N/A")
	$service_essence_from_suffuse_needed = 0
  else
    $service_amount_suffuse_needed = [(($service_item_difficulty.to_i + 120) - $service_caster_skill.to_i), 0].max
    $service_essence_from_suffuse_needed = $service_amount_suffuse_needed * 400
    label.set_text("Suffuse required: #{$service_amount_suffuse_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (+#{$service_essence_from_suffuse_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} essence (#{($service_essence_from_suffuse_needed / 50000.0).round(2)} weeks))")
  end
end

def update_suffuse_cost_label(label)
  if $service_caster_skill.length == 0
    label.set_text("Suffuse cost: N/A")
	$service_essence_from_suffuse_needed = 0
  else
    suffuse_essence_cost = $service_essence_from_suffuse_needed.to_i * $service_cost_per_point_essence.to_i
    label.set_text("Suffuse cost: #{suffuse_essence_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
  end
end

def update_base_cost_label(label)
  label.set_text("Base cost: #{($service_base_essence_needed.to_i * $service_cost_per_point_essence.to_i).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers")
end

def update_essence_total_label(label)
  total_essence_needed = $service_essence_from_suffuse_needed.to_i + $service_base_essence_needed.to_i
  label.set_text("Total essence required: #{total_essence_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(total_essence_needed / 50000.0).round(2)} weeks)")
end

def update_total_cost(label, text)
  label.set_text("Total cost: #{(( $service_base_essence_needed.to_i * $service_cost_per_point_essence.to_i ) + ( $service_essence_from_suffuse_needed.to_i * $service_cost_per_point_essence.to_i )).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
end

Gtk.queue {
  create_difficulty_window
  Gtk.main
}