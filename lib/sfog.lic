# frozen_string_literal: true

#
#     SFog by SpiffyJr (spiffyjr@gmail.com)
#
#     Provides a "fog of war" type effect by anonymizing people until you introduce yourself to them.
#
#     author: spiffyjr
#     name: SpiffyFog
#     tags: roleplaying players
#
#     changelog:
#       2020.04.02 - initial release
#                    added reset, befriend, and list per Xanlin
#

unless $stormfront
  echo '-- Sorry, this script is best used with StormFront for now.'
  echo "-- I might try to support other FE's in the future."
  exit
end

# Source via https://github.com/peterhellberg/hashids.rb/blob/master/lib/hashids.rb
# Copied here for ease of distribution into Lich
# License available at https://github.com/peterhellberg/hashids.rb/blob/master/LICENSE.txt
# rubocop:disable all
class Hashids
  VERSION = '1.0.5'

  MIN_ALPHABET_LENGTH = 16
  SEP_DIV = 3.5
  GUARD_DIV = 12.0

  DEFAULT_SEPS = 'cfhistuCFHISTU'

  DEFAULT_ALPHABET = 'abcdefghijklmnopqrstuvwxyz' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '1234567890'

  attr_reader :salt, :min_hash_length, :alphabet, :seps, :guards

  def initialize(salt = '', min_hash_length = 0, alphabet = DEFAULT_ALPHABET)
    @salt = salt
    @min_hash_length = min_hash_length
    @alphabet = alphabet

    setup_alphabet
  end

  def encode(*numbers)
    numbers.flatten! if numbers.length == 1

    numbers.map! { |n| Integer(n) } # raises if conversion fails

    return '' if numbers.empty? || numbers.any? { |n| n < 0 }

    internal_encode(numbers)
  end

  def encode_hex(str)
    return '' unless hex_string?(str)

    numbers = str.scan(/[\w\W]{1,12}/).map { |num| "1#{num}".to_i(16) }

    encode(numbers)
  end

  def decode(hash)
    return [] if hash.nil? || hash.empty?

    internal_decode(hash, @alphabet)
  end

  def decode_hex(hash)
    ret = ''
    numbers = decode(hash)

    numbers.length.times { |i| ret += numbers[i].to_s(16)[1..-1] }

    ret.upcase
  end

  protected

  def internal_encode(numbers)
    ret = ''

    alphabet = @alphabet
    length = numbers.length
    hash_int = 0

    length.times { |i| hash_int += (numbers[i] % (i + 100)) }

    lottery = ret = alphabet[hash_int % alphabet.length]

    length.times do |i|
      num = numbers[i]
      buf = lottery + salt + alphabet

      alphabet = consistent_shuffle(alphabet, buf[0, alphabet.length])
      last = hash(num, alphabet)

      ret += last

      if (i + 1) < length
        num %= (last.ord + i)
        ret += seps[num % seps.length]
      end
    end

    if ret.length < min_hash_length
      ret = guards[(hash_int + ret[0].ord) % guards.length] + ret

      ret += guards[(hash_int + ret[2].ord) % guards.length] if ret.length < min_hash_length
    end

    half_length = alphabet.length.div(2)

    while ret.length < min_hash_length
      alphabet = consistent_shuffle(alphabet, alphabet)
      ret = alphabet[half_length..-1] + ret + alphabet[0, half_length]

      excess = ret.length - min_hash_length
      ret = ret[excess / 2, min_hash_length] if excess > 0
    end

    ret
  end

  def internal_decode(hash, alphabet)
    ret = []

    breakdown = hash.tr(@guards, ' ')
    array = breakdown.split(' ')

    i = [3, 2].include?(array.length) ? 1 : 0

    if (breakdown = array[i])
      lottery = breakdown[0]
      breakdown = breakdown[1..-1].tr(@seps, ' ')
      array = breakdown.split(' ')

      array.length.times do |time|
        sub_hash = array[time]
        buffer = lottery + salt + alphabet
        alphabet = consistent_shuffle(alphabet, buffer[0, alphabet.length])

        ret.push unhash(sub_hash, alphabet)
      end

      ret = [] if encode(ret) != hash
    end

    ret
  end

  def consistent_shuffle(alphabet, salt)
    return alphabet if salt.nil? || salt.empty?

    chars = alphabet.each_char.to_a
    salt_ords = salt.codepoints.to_a
    salt_length = salt_ords.length
    idx = ord_total = 0

    (alphabet.length - 1).downto(1) do |i|
      ord_total += n = salt_ords[idx]
      j = (n + idx + ord_total) % i

      chars[i], chars[j] = chars[j], chars[i]

      idx = (idx + 1) % salt_length
    end

    chars.join
  end

  def hash(input, alphabet)
    num = input.to_i
    len = alphabet.length
    res = ''

    begin
      res = "#{alphabet[num % len]}#{res}"
      num = num.div(alphabet.length)
    end while num > 0

    res
  end

  def unhash(input, alphabet)
    num = 0

    input.length.times do |i|
      pos = alphabet.index(input[i])

      raise InputError, 'unable to unhash' unless pos

      num += pos * alphabet.length ** (input.length - i - 1)
    end

    num
  end

  private

  def setup_alphabet
    validate_attributes

    @alphabet = uniq_characters(alphabet)

    validate_alphabet

    setup_seps
    setup_guards
  end

  def setup_seps
    @seps = DEFAULT_SEPS

    seps.length.times do |i|
      if (j = alphabet.index(seps[i]))
        # Seps should only contain characters present in alphabet,
        # and alphabet should not contains seps

        @alphabet = pick_characters(alphabet, j)
      else
        @seps = pick_characters(seps, i)
      end
    end

    alphabet.delete!(' ')
    seps.delete!(' ')

    @seps = consistent_shuffle(seps, salt)

    if seps.empty? || (alphabet.length / seps.length.to_f) > SEP_DIV
      seps_length = (alphabet.length / SEP_DIV).ceil
      seps_length = 2 if seps_length == 1

      if seps_length > seps.length
        diff = seps_length - seps.length

        @seps += alphabet[0, diff]
        @alphabet = alphabet[diff..-1]
      else
        @seps = seps[0, seps_length]
      end
    end

    @alphabet = consistent_shuffle(alphabet, salt)
  end

  def setup_guards
    gc = (alphabet.length / GUARD_DIV).ceil

    if alphabet.length < 3
      @guards = seps[0, gc]
      @seps = seps[gc..-1]
    else
      @guards = alphabet[0, gc]
      @alphabet = alphabet[gc..-1]
    end
  end

  SaltError = Class.new(ArgumentError)
  MinLengthError = Class.new(ArgumentError)
  AlphabetError = Class.new(ArgumentError)
  InputError = Class.new(ArgumentError)

  def validate_attributes
    raise SaltError, 'The salt must be a String' unless salt.is_a?(String)

    raise MinLengthError, 'The min length must be a Integer' unless min_hash_length.is_a?(Integer)

    raise MinLengthError, 'The min length must be 0 or more' unless min_hash_length >= 0

    raise AlphabetError, 'The alphabet must be a String' unless alphabet.is_a?(String)

    raise AlphabetError, 'The alphabet canâ€™t include spaces' if alphabet.include?(' ')
  end

  def validate_alphabet
    unless alphabet.length >= MIN_ALPHABET_LENGTH
      raise AlphabetError, 'Alphabet must contain at least ' + "#{MIN_ALPHABET_LENGTH} unique characters."
    end
  end

  def hex_string?(string)
    string.to_s.match(/\A[0-9a-fA-F]+\Z/)
  end

  def pick_characters(array, index)
    array[0, index] + ' ' + array[index + 1..-1]
  end

  def uniq_characters(string)
    string.split('').uniq.join('')
  end
end

# rubocop:enable all

hasher = Hashids.new(Char.name, 0, 'abcdefhiklmnorstuvwxz')

settings = CharSetting.to_hash
settings[:hash] = settings[:hash].nil? ? true : settings[:hash]
settings[:name] ||= 'stranger'
settings[:introduced] ||= {}

game_settings = GameSetting.to_hash
game_settings[:sfog] ||= {}

# used for the LOOK line to get their gender/race/culture data
last_seen = nil

pc_regex = %r{(<a exist="(-\d{8,})" noun="([^"]+)">([^<]+)<\/a>)}
# rubocop:disable Layout/LineLength
look_regex = /((?:She|He)) appears to be an? ([^\s]+)?\s?(Human|Giantman|Half-Elf|Sylvankind|Dark Elf|Elf|Dwarf|Halfling|Forest Gnome|Burghal Gnome|Half-Krolvin|Erithian|Aelotoi)(.*)\./
# rubocop:enable Layout/LineLength

find_match = proc do |check|
  next false unless check

  GameObj.pcs.find do |pc|
    char = game_settings[:sfog][pc.noun]

    # Settings match?
    next false if char.nil?

    # Description match?
    next true if char[:desc] && (char[:desc] + char[:extra]) =~ /#{check}/i

    # Hash match?
    next true if char[:hash] && char[:hash] =~ /^#{check}/i

    next false
  end
end

load = proc do
  DownstreamHook.add(
    script.name,
    proc do |line|
      if line =~ /^You see.*(#{GameObj.pcs.collect(&:name).join('|')}).*/
        last_seen = GameObj.pcs.find { |pc| pc.name == Regexp.last_match(1) }.noun
        next nil
      elsif last_seen && game_settings[:sfog][last_seen] && line =~ look_regex
        gender = Regexp.last_match(1) == 'She' ? 'female' : 'male'
        culture = Regexp.last_match(2) ? "#{Regexp.last_match(2)} ".capitalize : ''
        race = Regexp.last_match(3).downcase
        extra = Regexp.last_match(4)

        game_settings[:sfog][last_seen][:desc] = "#{gender} #{culture}#{race}"
        game_settings[:sfog][last_seen][:extra] = extra
        last_seen = nil

        # anonymize their name in the look at
        next line
      else
        last_seen = nil
        new_line = ''

        pos = 0
        loop do
          pos = (line =~ pc_regex)
          break unless pos

          xml = Regexp.last_match(1)
          id = Regexp.last_match(2)
          noun = Regexp.last_match(3)
          name = Regexp.last_match(4)

          # get the before_text
          before_text = line.slice!(0, pos)

          # add in the text from our match
          line.slice!(0, xml.length)

          # skip generic he/she/his/her lines
          next new_line += (before_text + xml) if xml =~ />(?:he|she|his|her|#{Char.name})</i

          pc = GameObj.pcs.find { |p| p.id == id }

          if !(game_settings[:sfog][noun]) && pc
            game_settings[:sfog][noun] = { id: id, hash: hasher.encode((-1 * pc.id.to_i) % 10_000) }
          end
          char = game_settings[:sfog][noun]

          # they have been introduced; don't replace anything
          next new_line += before_text + xml if settings[:introduced][noun]

          # wish I knew of a better way to strip titles; this is probably kinda slow?
          if pc
            parts = pc.name.split
            if parts.length > 1
              parts.pop
              before_text.gsub!("#{parts.join(' ')} ", '')
            end
          end

          if char[:desc]
            anon = char[:desc]
          elsif settings[:hash]
            anon = "#{settings[:name]} (#{char[:hash]})"
          else
            anon = settings[:name]
          end

          # handle plurality
          anon = "#{anon}'s" if name =~ /'/

          new_line += before_text + "<a exist=\"#{id}\" noun=\"#{noun}\">#{anon}<\/a>#{char[:extra]}"
        end

        # if we got a parse then add in the remaining leftovers of the original line
        if new_line
          new_line += line
          next new_line
        end
      end

      line
    end
  )

  UpstreamHook.add(
    "#{script.name}_upstream",
    proc do |line|
      if line =~ /^<c>intro/
        parts = line.split
        parts.shift
        text = parts.join(' ')
        if (pc = find_match.call(text)) && game_settings[:sfog][pc.noun]
          settings[:introduced][pc.noun] = true
          respond "[You introduced yourself to #{pc.name}.  They will no longer show as anonymous.]"
        else
          respond "[You could not find #{text} to introduce yourself to.]"
        end

        next nil
      else
        line.scan(/(@[\w+]+[\s\w]+@?)/).each do |_match|
          marker = Regexp.last_match(1).to_s
          marker_text = marker.gsub('@', '')

          if (pc = find_match.call(marker_text))
            line.gsub!(marker, "##{pc.id}")
          end
        end
      end

      line
    end
  )
end

if script.vars[1] =~ /^help$/i
  respond
  respond 'This script works by anonymizing all player text.  Characters that are unknown to you will'
  respond 'show up as stranger (xyz), where xyz is a short hash unique to that character.  If you look'
  respond 'at a stranger, more information such as their gender, race, and culture will be available.'
  respond 'Finally, you can introduce yourself to them using this script and their name will be shown'
  respond 'from that point on.'
  respond
  respond 'To interact with strangers, add @<short hash> or @<description> to your calls. These calls'
  respond 'can include spaces if you include an @ on both sides, e.g., @male paradis halfling@.'
  respond
  respond 'For example, if you see "a stranger (xyz)" you could look at them by typing "look @xyz" or'
  respond 'speak directly to them by typing "say ::@xyz [text]".'
  respond
  respond 'If you decide to introduce yourself to them you can make that permanent using:'
  respond 'INTRODUCE [hash] or [description]'
  respond 'e.g., INTRODUCE xyz or INTRODUCE male paradis halfling'
  respond
  respond "Usage: #{$lich_char}#{script.name}"
  respond
  respond 'Additional commands:'
  respond '   hash - Toggle hashes.  Disabled hashes require Point and Click to look at people.'
  respond ' remove - Remove the anonymizer.'
  respond '   help - Show this help text.'
  respond
  respond 'Commands available via game:'
  respond '  introduce <target> where target is a racial description or short tag'
elsif script.vars[1] =~ /^hash$/i
  settings[:hash] = !settings[:hash]
  echo "Hash is now #{settings[:hash] ? 'enabled' : 'disabled'}"
elsif script.vars[1] =~ /^remove$/i
  DownstreamHook.remove(script.name)
  UpstreamHook.remove("#{script.name}_upstream")
  echo "#{script.name} has been removed."
elsif script.vars[1] =~ /^import$/
  fput 'befriend list'
  reget.each do |line|
    settings[:introduced][Regexp.last_match(1)] = { introduced: true } if line =~ /\d+\.\s+(\w+) .* Elanthia\./
  end

  echo 'List imported.  Enjoy!'
elsif script.vars[1] =~ /^reset$/
  settings[:introduced] = {}
  echo 'Your current data settings have been reset.'
elsif script.vars[1] =~ /^list$/
  echo 'Listing all introduced players'
  settings[:introduced].find_all { |_, d| d[:introduced] }.each do |name, _|
    echo name
  end
elsif script.vars[1]
  echo "Command not recognized: try ;#{script} help"
end

load.call

# catchall for dedupe
exit if script.vars[1]

respond "[All player lines are now anonymized.  Use #{$lich_char}#{script.name} remove to uninstall.]"

before_dying do
  DownstreamHook.remove("#{script.name}_look")
  DownstreamHook.remove(script.name)
  UpstreamHook.remove("#{script.name}_upstream")
end

script.silent = true

# Our Thread for lookups
loop do
  if (pc = GameObj.pcs.find { |obj| !game_settings[:sfog][obj.noun][:desc] })
    DownstreamHook.add("#{script.name}_look", proc do |line|
      DownstreamHook.remove("#{script.name}_look") if line =~ /wearing/i
      nil
    end)
    put("look ##{pc.id}")
  end
  sleep(1)
end
