=begin
  Script: purifyjars
  Description: Down dirty jar purification script.
      Purifies all the gems in all the jars in your lootsack. Separates out orbs above a threshhold and re-jars the rest.
  Author: Cait
  Version: 0.1
=end

if script.vars[1].nil? then
	echo "Usage: ;purifyjars <orbsack> <orb_value_to_keep>"
	exit
end
if script.vars[2].nil? then
	echo "Usage: ;purifyjars <orbsack> <orb_value_to_keep>"
	exit
end
if Room.current.nil?
	echo "Please only run this in a mapped room. Thank you."
	exit
end
if UserVars.herbsack.nil?
	echo "Error: herbsack not set."
	echo ";settings change herbsack <herbsack>"
end
if UserVars.lootsack.nil?
	echo "Error: lootsack not set."
	echo ";settings change lootsack <lootsack>"
end
if UserVars.gemsack.nil?
	echo "Error: gemsack not set."
	echo ";settings change gemsack <gemsack>"
end

fput "stop singing"

def jarnum(jar)
	output=fput "look in my #{jar}"
	if output=~/closed/ then
		fput "open my bottle"
	end
	output=fput "look in my #{jar}"
	if output=~/you see ([0-9]+) portion/ then
		num=$1.to_s.to_i
	else
		num=0
	end
	return num
end

def makeorb(gem)
	loop{
		wait_until{ Spell[1004].affordable?} 
		fput "prep 1004"; 
		fput "cast ##{gem}"; 
		cleared = clear; 
		cleared.each{|clearline|
			if clearline=~/improves somewhat|crack loudly and strain|severely affecting/
				return "done"
			elsif clearline =~/twist and turn|cannot be purified any/
				return "orb"
			elsif clearline =~/shatter into thousands of fragments/
				return "shattered"
			elsif clearline=~/You must RELEASE it if you wish to prepare another/	
				return "shattered"
			elsif clearline=~/What were you referring to/
				return "shattered"
			end
		}
		pause 3
	}
end

def loresing
	wait_while{mana < 5}
	fput "loresing #{GameObj.right_hand.noun}, this I beg of you;sing to me of your value"
	value=matchfind "worth about ? silvers"
	num=value.delete(",");
	echo "gem valued at #{num} silvers"
	return num.to_i
end

def cyclejar(jar, sack, match)
	empty_hands
	fput "get ##{jar.id}"
	num=jarnum(jar.noun)
	gems=Array.new
	num.times{
		fput "shake ##{jar.id}"
		gems.push(GameObj.left_hand.id)
		fput "put ##{GameObj.left_hand.id} in #{UserVars.gemsack}"
	}
	fput "stow ##{jar.id}"
	gems.each{|gem|
		fput "get ##{gem}"
		quality=makeorb(gem)
		if quality=~/orb/ then
			value=loresing
			if value.to_i > match.to_i then
				fput "open #{sack}"
				fput "put ##{gem} in #{sack}"
				fput "close #{sack}"
			else
				fput "put ##{gem} in #{UserVars.gemsack}"
			end
		elsif quality=~/done/
			fput "put ##{gem} in #{UserVars.gemsack}"
		elsif quality=~/shattered/
			stop_script "useherbs"
			start_script "useherbs", ["buy=on"]
			wait_while{running? "useherbs"}
			start_script "useherbs"
			wait_while{running? "useherbs"}
		end
	}
	fput "get ##{jar.id}"
	gems.each{|gem|
		fput "_drag ##{gem} ##{jar.id}"
	}
	fput "stow ##{jar.id}"
end
GameObj.inv.find{|lootsack|
	if lootsack.name=~/#{UserVars.lootsack}/ then
		fput "open ##{lootsack.id}"
		fput "look in ##{lootsack.id}"
		lootsack.contents.each{|jar|
			if jar.type=='jar' then
				cyclejar(jar,script.vars[1], script.vars[2])
			end
		}
	end
}			