require 'find'

no_kill_all

=begin
A passive script for keeping track of inventory items across characters.
Allows you to search for inventory items on any of your characters after you've logged in with them once.

 Now with locker support - due to the way containers are loaded in GS this will cause a delay when closing
 your locker. To enable this option with delay use ;vars set remotelocker=on.  Be advised this script will
 also open containers in your locker to be able to see what's in them.
 

Usage: 
       ;favs add --global invmanager
       ;trust invmanager
       ;invman search searchtext
       ;invman list CharacterName
       
       ;vars set remotelocker=on             Enables locker support - slowest - most info
       ;vars set remotelocker=skip           Skips containers in lockers - little faster but less info
=end


@Supress_IF = false
@Supress_for_locker = false
@Filename = $data_dir + checkname + ".inventory"
@FilenameLocker = $data_dir + checkname + ".locker"
@inventoryList = Array.new()	

action = proc { |client_string|
	if client_string =~ /^(?:<c>)?;(?:(invman$|invman (help|search(.*)|list(.*))))/i
		if scr = (Script.running + Script.hidden).find { |val| val.name == 'invmanager' }
			scr.downstream_buffer.shove("#{$clean_lich_char}#{$1}")
		else
			UpstreamHook.remove('invmanager')
		end
		nil
	elsif client_string =~ /^(?:<c>)?#{$lich_char}((?:invman update))/i
        @Supress_IF = true                    
        "inventory full"  
	elsif (client_string =~ /^(?:<c>)(close lock)/i  && Vars.remotelocker != nil && Vars.remotelocker != 'off')                   
        @Supress_for_locker = true
		if scr = (Script.running + Script.hidden).find { |val| val.name == 'invmanager' }
			scr.downstream_buffer.shove("updateLocker")
        end                            
        nil
    elsif (@Supress_for_locker == true)    
        puts "One moment - still saving data."
        nil
	else
		client_string
	end
}
UpstreamHook.add('invmanager-suppress', action)

#Supress text for inventory full
action = proc { |server_string|
	if (server_string =~ /|(.*)\/>(.*):|/i && @Supress_IF == true)        
        if server_string =~ /(.*) <(.*)>(.*)<\/(.*)>(.*)/           #inventory lines
          article = $1.to_s	
          name =  $3.to_s   
          after = $5.to_s          
          #puts "Writing "+article + " "+ name + after
          @inventoryList << article + " "+ name + after
        elsif server_string =~ /(<(.*)>)*(.*:)/        #container lines
          name =  $3.to_s         
          @inventoryList << name   
          #puts "Writing "+ name         
        elsif server_string =~ /^\(([0-9]+) items displayed.\)/
          @Supress_IF = false
          write(@inventoryList)
          puts "[invmanager: Done updating.]"
        else 
          # do nothing - don't want these lines
        end        
		nil             
    elsif (@Supress_for_locker == true)
     #echo "supressing - " + server_string
     #nil
	else
		server_string
	end
}
DownstreamHook.add('invmanager-update', action)

def updateLocker()
        puts "Updating Locker Records - Please Wait."
        silence_me
        @FilenameLocker = $data_dir + checkname + "-" + Room.current.id.to_s + "-locker" + ".inventory"
        @inventoryList << checkroom
        GameObj.loot.each{|container| exploreLockerItems(container, "")} 
        writeLocker(@inventoryList)
        puts "Done - Updating Locker records."
        @Supress_for_locker = false                
        fput "close locker"
        silence_me
end

def exploreLockerItems(item, spacer)
    @inventoryList << spacer +"     "+item.name
    if (item.noun =~ /locker|pack|bag|wardrobe|chest|trunk|coffer|strongbox|pouch|cloak|satchel|stand|bin|rack|kit|bandolier/)
        if ((Vars.remotelocker != 'skip') || (item.noun =~ /locker|chest|wardrobe|stand|bin|rack/ ))
            fput "open #{item}"
            fput "look in #{item}"
        end
        item.contents.each{|container| exploreLockerItems(container, spacer + "    ")}
    end
end

def write(inv)
	f = File.open(@Filename, "w+")
	for cmpitm in inv
		f.puts cmpitm
	end		
	f.close		
    @inventoryList.clear
end

def writeLocker(inv)
	f = File.open(@FilenameLocker, "w+")
	for cmpitm in inv
		f.puts cmpitm
	end		
	f.close		
    @inventoryList.clear
end

def traverse(invItem)
   itmName = invItem.before_name.to_s + " " + invItem.name.to_s + " " + invItem.after_name.to_s
   if (invItem.contents.size == nil || invItem.contents.size == 0)
     #puts "     " + itmName
     @inventoryList << "     "+invItem.name
   else
     #puts invItem.name + " contains the following: "
     @inventoryList << itmName + " contains the following: "
     invItem.contents.each{|itm| traverse(itm)}
   end
end 

def search(invItem)
  echo "Searching for " + invItem
  files = Find.find($data_dir).select { |p| /.*\.inventory$/ =~ p }
  files.each{|file| fileContainsText(file, invItem)}
  echo "Done searching."
end

def list(charName)
  charName[0] = charName[0].capitalize
  echo "Listing Items for " + charName
  files = Find.find($data_dir).select { |p| /#{Regexp.quote(charName)}(.*).inventory$/ =~ p }
  files.each{|file| fileContainsText(file, "")}
  echo "Done listing."
end

def fileContainsText(file, text)
  @mystack = []
  @whitespacectr = 0  
  File.foreach(file) do |line|  
    if @mystack == nil
      @mystack.push line.strip
    end
    if @whitespacectr < line.index(/[^ ]/)
      @whitespacectr = line.index(/[^ ]/)
      @mystack.push line.strip    
    elsif @whitespacectr > line.index(/[^ ]/)
      @whitespacectr = line.index(/[^ ]/)
      @mystack.pop
      @mystack.pop
      @mystack.push line.strip
    else
      @mystack.pop
      @mystack.push line.strip 
    end
    if line.index(/[^ ]/)    != " "
      @container = line
    end    
    if line =~ /#{Regexp.quote(text)}/
      puts File.basename(file, ".*") + " " + @mystack.to_s
    end
  end
end
    
Thread.new {
    sleep 1		
    @Supress_IF = true
    echo "Updating inventory records."
    silence_me    
    fput "inventory full"   
    silence_me
};	    
    
while line = get
	if line =~ /^#{$lich_char}invman$/ || line =~ /^#{$lich_char}invman help$/
		respond
		respond "A passive script for keeping track of inventory items across characters."
		respond "Allows you to search for inventory items on any of your characters after you've logged in with them once."
		respond		
		respond "For best results: ;favs add --global invmanager."
        respond "                  ;trust invmanager"
		respond "Usage: "
		respond ";invman help                - displays this help"		
		respond ";invman search item - searches all character inventories for the item returns character and container"
        respond ";invman list CharacterName - searches all character inventories for the item returns character and container"
        respond ";invman update              - manually updates stored records"
		respond
	elsif line =~ /^#{$lich_char}invman search (([^"]*))$/	
		srchItem = $2.to_s	   
		search(srchItem)     
	elsif line =~ /^#{$lich_char}invman list (([^"]*))$/	
		charname = $2.to_s	   
		list(charname)             
    elsif line =~ /^#{$lich_char}invman update$/	
    elsif (@Supress_for_locker == true)   # trigger locker search 
        updateLocker()
    end
	
end    