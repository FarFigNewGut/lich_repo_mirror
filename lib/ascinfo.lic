#quiet
=begin

  This script formats experience, focusing on ascension. You can also set 
  ascension point goals via a comma separated list in the variable ascGoals. 
  It'll display the amount of points and experience required to hit the next 
  goal. The starting goals track the amount of points needed to get to transcend
  destiny and each of the transcend destiny ranks.

  Example:
  ;vars set ascGoals=150,160,180

	author: Morvik
	tags: cosmetic, ascension
  version: 0.1
  
  changelog:
    0.1: initial release

=end
if UserVars.ascGoals.nil?
  UserVars.ascGoals = "150,160,180,210,250,300,350,400,450,500,550"
end

require 'time'

def convert_expiration(t)
  expiration = Time.strptime(t, "%m/%d/%Y at %H:%M")
  current_time = Time.now + 3600

  # Get the difference in seconds
  difference_in_seconds = expiration - current_time

  # Convert the difference in seconds to days, hours, minutes, and seconds
  days = (difference_in_seconds / (60 * 60 * 24)).to_i
  hours = (difference_in_seconds / (60 * 60) % 24).to_i
  minutes = (difference_in_seconds / 60 % 60).to_i

  if days > 0
    return "#{days}d#{hours}h#{minutes}m"
  elsif hours > 0
    return "#{hours}h#{minutes}m"
  else
    return "#{minutes}m"
  end
end

def calculate_pulse(exp)
  base = 25 + 2
  logic = (Stats.enhanced_log[1] / 5)
  if exp < 2000
    field = exp / 200
  else
    field = 20
  end
  return base + logic + field
end

def calculate_timeleft(exp)
  e = exp
  m = 0
  while e > Experience.fxp_max
    m += 1
    e -= calculate_pulse(e)
  end
  return m
end


UATP = 0
BOOST = false
RPA = false
LUMNIS = false
PERCENT = 1
EXPIRATION = ''
res = Lich::Util.quiet_command_xml('exp', /Level:/)
res.each do |line|
  matchSting = line.match(%r{ATPs: (.*)})
  UATP = matchSting[1].to_i if matchSting
  matchSting = line.match(%r{ATPs: (.*)})
  matchString = line.match(%r{You currently are enlightened, earning \+(.*)% base experience until (.*) elven time})
  if matchString
    BOOST = true
    PERCENT = (matchString[1].to_f / 100) + 1
    EXPIRATION = matchString[2]
  end

  matchString = line.match(%r{Your recent adventures echo powerfully in your mind.})
  RPA = true if matchString

  matchString = line.match(%r{You feel a strange sense of serenity})
  LUMNIS = true if matchString

end

if Experience.deaths_sting != "None"
  respond "   Death's Sting: #{Experience.deaths_sting}"
end

if Experience.deeds < 10
  respond "           Deeds: #{Experience.deeds}"
end

date = Date.today.strftime("%Y-%m-%d")
UserVars.xpinfo                ||= {}
if UserVars.xpinfo[:date].nil? || UserVars.xpinfo[:date] != date
  UserVars.xpinfo[:total]  = Experience.txp
  UserVars.xpinfo[:date]   = date
end

if Experience.percent_fxp > 100
  output =  "       Field Exp: #{Experience.fxp_current}/#{Experience.fxp_max} (#{calculate_timeleft(Experience.fxp_current)}m)".ljust(40,' ')
else
  output =  "       Field Exp: #{Experience.fxp_current}/#{Experience.fxp_max}".ljust(40,' ')
end

mod = []

mod << "RPA" if RPA
mod << "Lumnis" if LUMNIS
mod << "#{PERCENT}x (#{convert_expiration(EXPIRATION)})" if BOOST

output += "Modifiers: #{mod.join(", ")}\n" if ! mod.empty?



res = Lich::Util.quiet_command_xml('exp', /Level:/)

UATP = 0
NATP = 0
MATP = 0

res.each do |line|
  matchSting = line.match(%r{ATPs: (.*)})
  UATP = matchSting[1].to_i if matchSting
  matchSting = line.match(%r{Exp to next ATP: (.*)})
  NATP = matchSting[1].gsub(',', '').to_i if matchSting
end

output +=  "  Absorbed Today: #{(Experience.txp - Vars.xpinfo[:total].to_i).to_s.ljust(22, " ")} Next ATP: #{NATP}\n"

milestone = Lich::Util.quiet_command_xml('asc milestone', /Ascension Milestones/)
milestone.each do |m|
  if m.match(/Yes/)
    MATP += 1
  end
    TATP = Experience.axp / 50000 + MATP
end

def until_atp(atp)
  return ((atp - TATP) * 50000) - (50000 - NATP)
end

def percent_atp(atp)
  return (Experience.axp.to_f/(Experience.axp + until_atp(atp)).to_f) * 100
end

output += "       Used ATPs: #{(TATP - UATP).to_s.ljust(22, ' ')}"
output +=  "Free ATPs: #{UATP}\n"
UserVars.ascGoals.split(',').each do |g|
  g = g.to_i
  if TATP < g
    output += "       Next Goal: #{((g - TATP).to_s + " ATPs").ljust(10,' ')}             Exp Left: #{until_atp(g)/1000}k\n"
    break
  end
end
output += "\n"

respond output
