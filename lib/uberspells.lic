=begin
  UberSPELLS!!!
  Stormfront Onry - check out UberspellsWiz for a GTK version
  It makes you an UBERSPELLS BAR!
  Shows you all your spells in ;magic and active spells list.

  Updated 9/28/2014 by Tillmen
    - Made compatible with Ruby > 1.8 (to_a no longer works with strings)

  Updated 3/19/2013 by Cait
	- Added checks to prevent crashes with no-duration effects
 	- Tracks Lumnis
	- Yes. Finally got around to fixing spell deprecation. 

  Updated 2/19/2011 by Greminty
	- Now you can choose colors on a per-spell basis (right click the bar)
		(color choices are stored by SF, not Lich)
	- Cleaned up Cooldown/Recovery effects
	- Spells ending in under 90s show seconds left instead of h:mm
		(still only updates every 10s or so, though)
	- Shortened the bars slightly to fit in SF sidebar
	- Fixed a couple other minor bugs
=end

#if $SAFE > 0
#  echo "error: This script needs to be trusted to work. (;trust #{script.name.downcase})"
#  exit
#end

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in Uberspells"
  respond " This version is specific to the Stormfront frontend"
  respond " There is a Wizard (GTK) version on the repository on the repository"
  respond ""
  respond " ;repo download uberspellswiz"
  respond ""
  respond " Closing now"
  respond ""
  exit
end

def newST()
  total = 0
  Spell.active.each do |spell|
    total += spell.timeleft
  end
  return total
end
nextpulse=0;
def checkpulse()
;e average=0; count=0; total=nil; oldtime=Time.now; oldtext=XMLData.next_level_text; loop{if oldtext != XMLData.next_level_text then count = count + 1; total= total + (Time.now-oldtime); average = (total/count)*2;echo "ding: "+(Time.now-oldtime).to_s; echo "average: "+ average.to_s; oldtime=Time.now; oldtext=XMLData.next_level_text; else pause 1; end}
end

no_kill_all
no_pause_all
hide_me
debug = 0

before_dying {
  puts("<closeDialog id='Uberspells'/>")
}
puts("<closeDialog id='Uberspells'/><openDialog type='dynamic' id='Uberspells' title='Uber Spells' target='Uberspells' location='main' height='150' resident='true'><dialogData id='Uberspells'></dialogData></openDialog>")

oldRE = newRE = finalstring = anTop = barVa = barLVa = oldAS = oldCO = oldST = nil
buffy = 1
buffx = 1
sizex = 185
sizey = 15
nowTime = Time.now - 100
fput "spell active"
loop {
  wait_while { oldST >= newST() and oldCO == Spell.active.size and Time.now - nowTime < 10 }
  nowTime = Time.now
  oldST = newST()
  currentXML = XMLData.active_spells.keys
  anTop = "top"
  oldRE = newRE
  newRE = {}
  if oldCO != Spell.active.size or oldAS != XMLData.active_spells.keys.size
    finalstring = "<dialogData id='Uberspells' clear='t'>"
    oldRE = {}
  elsif oldRE.keys.sort.join("|") != Spell.active.map{ |spell| spell.num}.sort.join("|")
    echo oldRE.keys.sort.join("|") + "..." + Spell.active.map{ |spell| spell.num}.sort.join("|") if debug >= 1
    finalstring = "<dialogData id='Uberspells' clear='t'>"
    oldRE = {}    
  else
    finalstring = "<dialogData id='Uberspells'>"
  end
  oldCO = Spell.active.size
  
  Spell.active.sort_by { |spell| spell.num.to_i }.each { |spell|
    timelefthour = ((spell.timeleft + 0.5) / 60).to_i # round up here, so 1:59.5 == 2:00 instead of 1:60
    timeleftmin = (spell.timeleft - (timelefthour * 60) + 0.5).to_i # due to the rounding here
    timeleftallsec = (60 * spell.timeleft + 0.5).to_i # this rounding barely matters
    barVa = (100 - ((240 - spell.timeleft) / 240) * 100).to_i
    if !spell.stacks then
	    unless spell.time_per.nil? or spell.time_per == 0 then
		    barVa = (100 - ((spell.time_per - spell.timeleft) / spell.time_per) * 100).to_i
            end
    end
    if oldRE[spell.num] != barVa or timeleftallsec <= 90
      curSpell = currentXML.find { |spelly| spelly == spell.name }
      if curSpell == nil and spell.num < 1300
		barLVa = sprintf("%i:%02i **                               **", timelefthour, timeleftmin)
      elsif timeleftallsec <= 90 
		barLVa = sprintf(" %02is", timeleftallsec)
	else
		barLVa = sprintf("%i:%02i", timelefthour, timeleftmin)
      end
      finalstring += "<progressBar id='uberspell_bar_#{spell.num}' ' value='#{barVa}' text='#{spell.name.gsub("'", "`")}' anchor_top='#{anTop}' top='#{buffy}' left='#{buffx+30}' width='#{sizex-30}' height='#{sizey}'/>"
      finalstring += "<label id='uberspell_lab_#{spell.num}' value='#{barLVa}' justify='4' anchor_top='#{anTop}' top='#{buffy}' left='#{buffx}' height='#{sizey}' width='#{sizex}'/>"
      newRE[spell.num] = barVa
    else
      newRE[spell.num] = oldRE[spell.num]
    end
    anTop = "uberspell_bar_#{spell.num}"
    currentXML.delete(spell.name.sub("Cooldown","Recovery"))
  }
 unless Time.now > Gift.restarts_on
  if Gift.remaining > 0 then
	if Gift.remaining>10800 then lumnistext="Gift of Lumnis, 3x"; giftleft=Gift.remaining-10800; 
	else
		lumnistext="Gift of Lumnis, 2x"; giftleft=Gift.remaining;
	end
    timelefthour = ((giftleft + 0.5) / 60/60).to_i # round up here, so 1:59.5 == 2:00 instead of 1:60
    timeleftmin = ((giftleft/60%60) + 0.5).to_i # due to the rounding here
    timeleftallsec = (giftleft + 0.5).to_i # this rounding barely matters
    barVa = (100 - ((10800 - giftleft) / 10800) * 100).to_i

	barLVa = sprintf("%i:%02i", timelefthour, timeleftmin)
      finalstring += "<progressBar id='uberspell_bar_lumnis' ' value='#{barVa}' text='#{lumnistext}' anchor_top='#{anTop}' top='#{buffy}' left='#{buffx+30}' width='#{sizex-30}' height='#{sizey}'/>"
      finalstring += "<label id='uberspell_lab_lumnis' value='#{barLVa}' justify='4' anchor_top='#{anTop}' top='#{buffy}' left='#{buffx}' height='#{sizey}' width='#{sizex}'/>"
  anTop = "uberspell_bar_lumnis"
  end
  
 end
  currentXML.each { |spell|
    curSpell = Spell.list.find { |spelllist| spelllist.name == spell }
    next if spell == "No spells found."
    echo spell if debug >= 1
    if curSpell != nil
      curSpellname = curSpell.name
      curSpellnum = curSpell.num
    else
      curSpellname = spell + "?"
      curSpellnum  = 0000
    end
    
    barVa = 0
    id    = "uberspell_bar2_#{curSpellnum}"
    finalstring += "<progressBar id='#{id}' value='#{barVa}' text='#{curSpellname}' justify='4' anchor_top='#{anTop}' top='#{buffy}' left='#{buffx+30}' width='#{sizex-30}' height='#{sizey}'/>"
    anTop = id    
  }

  finalstring += "</dialogData>"
  respond finalstring+"\n\n" if debug >= 2 
  puts(finalstring) if finalstring != "<dialogData id='Uberspells'></dialogData>"
}
