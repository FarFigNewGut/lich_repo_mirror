=begin

  Invoker Hours

  Here's the Time schedule for the Invoker.

    originally by Luxelle <3
    author: Xanlin
    game: Gemstone
    tags: spell-ups, spellups, invoker, spells, small park, free
    version: 1.2

    Usage: ;invokerhours
=end
module InvokerHours
  require 'date'
  require 'time'
  silence_me
  Script.current.want_downstream_xml = true;
  Script.current.want_downstream = false

  def self.anon_hook(prefix = '');now = Time.now;"invokerhours::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
  def self.cleanup; [DownstreamHook, UpstreamHook].each{|provider| provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};  };end;
  def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;
  def self.xml_encode(msg);return msg.encode(:xml => :text);end;
  def self.format_monsterbold(msg);
    return "#{monsterbold_start}#{self.xml_encode(msg)}#{monsterbold_end}" if $frontend =~ /stormfront|profanity/;
    return "#{monsterbold_start}#{msg}#{monsterbold_end}\r\n";
  end;
  def self.format_preset(msg,preset="speech");echo "preset #{preset} not found" if !["link", "speech","thought","whisper","watching","command", "selectedLink", "watching", "roomName"].include?(preset);return "<preset id=\"#{preset}\">#{self.xml_encode(msg)}</preset>";end;

  def self.server_time_get()
    Script.current.want_downstream_xml = true;
    Script.current.want_downstream = false
    months  = { 'Lormesta' => '01', 'Fashanos' => '02', 'Charlatos'=> '03', 'Olaesta' => '04', 'Ivastaen' => '05', 'Lumnea' => '06', 'Koaratos' => '07', 'Phoenatos'=> '08', 'Imaerasta'=> '09', 'Jastatos' => '10', 'Eoantos' => '11', 'Eorgaen' => '12', };
    pattern = /Today is .*?, day (?<day>\d+) of the month (?<month>\w+) in the year (?<year>\d+).  It is (?<time>\d+:\d+)/;
    q = self.quiet_command('time',pattern).first;
    m = pattern.match(q);
    time_result_string = "#{m[:year].to_i-3100}-#{m[:month].gsub(/#{months.keys.join("|")}/,months)}-#{m[:day].to_i < 10 ? "0" : ""}#{m[:day]} #{m[:time]}";
    time_result = Time.parse(time_result_string);
    return time_result
  end

  def self.in_dst(this_date = Date.today);
    in_dst = false;
    from = Date.civil(this_date.year,3,14) - Date.civil(this_date.year,3,14).wday;
    thru = Date.civil(this_date.year,11,7) - Date.civil(this_date.year,11,7).wday;
    in_dst = true if this_date >= from and this_date <= thru;
    return in_dst;
  end;

  def self.arrival_windows(time_result = self.server_time, local_time = Time.now)
    time_diff = (((time_result.to_i - local_time.to_i)+60)/3600.0).round(0)*3600
    arrivals=[]
    windows = [];
    if self.in_dst == false;
      arrivals = ["00:00:00","02:00:00","04:00:00","08:00:00","12:00:00","16:00:00","18:00:00","20:00:00","22:00:00"];
    elsif self.in_dst == true;
      arrivals = ["00:00:00","02:00:00","04:00:00","06:00:00","10:00:00","14:00:00","18:00:00","20:00:00","22:00:00"];
    end;
    arrivals.map!{|a| a = Time.parse(a) - time_diff};
    minutes_invoker_stays = 15;
    arrivals.each {|a|
      if (a + (minutes_invoker_stays*60)) < local_time;
        windows << [a + 86400, (a + (minutes_invoker_stays*60)) + 86400];
      else;
        windows << [a, a + (minutes_invoker_stays*60)];
      end;
    };
    return windows
  end

  def self.print_preamble(in_dst = self.in_dst)
    output = [];
    output << "The Invoker provides a free spell up to anyone who asks her in the Small Park of the Landing (#288). She is there for 15 minutes on the following schedule (Eastern):";
    output << "";
    if in_dst == false;
      output <<  "at Midnight, 2am, 4am, 8am, ";
      output <<  "and 12pm, 4pm, 6pm, 8pm, and 10pm";
    elsif in_dst == true;
      output <<  "at Midnight, 2am, 4am, 6am, 10am";
      output <<  "and 2pm, 6pm, 8pm, and 10pm";
    end;
    output <<  " ";
    return output
  end
  
  def self.print_schedule(in_dst = self.in_dst, time_result = self.server_time_get, local_time = Time.now, windows = self.arrival_windows, server_offset = XMLData.server_time_offset)
    output = []
    #output << "technical notes: server time: #{time_result.inspect}, daylight savings: #{in_dst.inspect}, current server time offset: #{server_offset.inspect}"
    output << "local time:  #{local_time.strftime("%I:%M %p").downcase}, server time:  #{time_result.strftime("%I:%M %p").downcase}";
    output << "Invoker schedule in local time:";
    output = output + self.print_windows(in_dst, time_result, local_time, windows, server_offset)
    return output
  end

  def self.print_windows(in_dst = self.in_dst, time_result = self.server_time_get, local_time = Time.now, windows = self.arrival_windows, server_offset = XMLData.server_time_offset)
    output = []
    windows.sort.each { |w|
      from = w[0];
      thru = w[1];
      str = "  #{from.strftime("%I:%M %p")} - #{thru.strftime("%I:%M %p")}".downcase;
      if local_time > from and local_time < thru;
        minutes_left = (thru - local_time) / 60;
        seconds_left = ((thru - local_time)+server_offset);
        str = "#{str} <--      %02d:%02d left"  % [ minutes_left % 60, seconds_left % 60];
        str = ($frontend =~ /stormfront|profanity/ ? self.format_preset(str,'roomName') : self.format_monsterbold(str));
      elsif local_time < from and from == windows.sort.find_all{ |i| i[0] > local_time }[0][0];
        hours_until   = ((from - local_time)+server_offset) / 3600;
        minutes_until = ((from - local_time)+server_offset) / 60;
        seconds_until = ((from - local_time)+server_offset);
        str = "#{str} <-- %02d:%02d:%02d until next"  % [ hours_until, minutes_until % 60, seconds_until % 60];
        str = ($frontend =~ /stormfront|profanity/ ? self.format_preset(str,'whisper') : self.format_monsterbold(str));
      elsif local_time > from;
        str = ($frontend =~ /stormfront|profanity/ ? self.format_preset(str,'watching') : str);
      end;
      output << str;
    }
    return output
  end
  
  testing = false;
  if testing == true
    ###testing
    in_dst      = self.in_dst(Date.parse("2023-03-12"));
    time_result = Time.parse('2023-03-13 02:54');
    local_time  = Time.parse('2023-03-12 23:54');
    windows = self.arrival_windows(time_result, local_time)
    server_offset = XMLData.server_time_offset
    #_respond self.print_preamble(in_dst)
    _respond self.print_schedule(in_dst, time_result, local_time, windows, server_offset);
    #_respond self.print_windows(in_dst, time_result, local_time, windows, server_offset);
    exit
  end
  
  in_dst = self.in_dst;
  time_result = self.server_time_get;
  local_time = Time.now
  windows = self.arrival_windows(time_result, local_time)
  server_offset = XMLData.server_time_offset
  _respond self.print_preamble(in_dst)
  _respond self.print_schedule(in_dst, time_result, local_time, windows, server_offset);
  
end # end module