=begin
  Squelch the Locksmith Pool!
  - created by Wolenthor

  Squelch common unnecessary (global, not just your own) messages at the locksmithpool. You can add any additional messages to the array below or simply message Wolenthor on discord with any messaging you think would be beneficial to remove in future updates.

  Hides all messages that are explicitly set in the script:
  -- Usage: ;sq_lockpool

  If you ever want to see what is being squelched, you can use the following command instead:
  -- Usage: ;sq_lockpool showme

  Just end the script to stop the squelching. 

  v. 1.0.0 - Initial release
=end

@squelch_hook_name ||= :squelch_pool_hook

begin
  DownstreamHook.remove(@squelch_hook_name)
rescue
end

# Lines that should be squelched (Ruby Regexp)
# easier to manage: put each pattern/string in an array and build a single regexp
SQUELCH_PATTERNS = [
  'speaks briefly with the worker',
  'speaks briefly with',
  'professional calipers a bit',
  # 'begins to meticulously examine',
  # 'settles into the difficult task',
  # 'before settling into the difficult task of picking the lock',
  'carefully bends the tip of his',
  'removes a pair of',
  # 'Then...CLICK!  It opens!',
  'removes a pair of metal grips',
  'Please rephrase that command',
  /tries to empty the contents of/i,
  # /takes some coins from inside.*?(?:his|her)\b.*?\b(box|strongbox|chest|trunk|coffer)/i,
  /takes.*?some.*?coins/i,
  /removes.*?calipers/i,
  /moths takes.*?calipers/i,
  /dropping.*?calipers.*?in.*?hand/i,
  /refines (?:his|her) professional calipers a bit/i,
  # /calipers from (?:her|his), disappearing inside (?:her|his) cloak/i,
  /attaches an?\b.*?keyring/i,
  /(?:removes|grabs?|puts?)\s+an?\b.*?\b(box|strongbox|chest|trunk|coffer)s?/i,
  /(?:removes|grabs?|puts?)\s+an?\b.*?\b(caliper|calipers)s?/i,
  /just opened\s+an?\b.*?\b(caliper|calipers|box|strongbox|chest|trunk|coffer)s?/i,
  # /begins to attempt to disarm it/i,
  # /Taking a gentle turn,/i,
  /to carefully measure the lock.../i,
  # /catching it between thumb and forefinger before applying it/i,
  /glass vial/i,
  /detaches a.*?keyring/i,
  /no longer appears focused/i,
  /searches through a/i,
  /appears extremely focused/i,
  /briefly outlined by the woven yarn as/i,
  /and removes one item of note/i,
  /and carefully works it back and forth until it is firmly seated/i,
  /, which takes off in search of silvers inside/i,
]


MASTER_SQUELCH = Regexp.union(
  SQUELCH_PATTERNS.map { |p| p.is_a?(Regexp) ? p : Regexp.new(Regexp.escape(p)) }
  )
  
begin
  params = Script.current.vars rescue []
  _respond "#{monsterbold_start}Params: #{params} #{monsterbold_end}\n"
end

squelch_action = proc { |server_string|
  if server_string =~ MASTER_SQUELCH
    # optional notification to your UI (comment out to be completely silent)
    begin
      if params[0].downcase == 'showme'
        _respond "#{monsterbold_start}Squelched: #{server_string.strip}#{monsterbold_end}\n"
      end
    rescue
      # ignore if _respond unavailable
    end
    nil    # returning nil squelches the line (prevents it reaching `get`)
  else
    server_string
  end
}

DownstreamHook.add(@squelch_hook_name, squelch_action)
at_exit { DownstreamHook.remove(@squelch_hook_name) rescue nil }
[:INT, :TERM].each do |sig|
  trap(sig) { DownstreamHook.remove(@squelch_hook_name) rescue nil; exit }
end

cleanup = proc {
  begin
    DownstreamHook.remove(@squelch_hook_name)
  rescue => _
    nil
  end
}

begin
  while line = get        
    if line =~ MASTER_SQUELCH
      next
    end
  end
ensure
  cleanup.call
end
