#!/usr/bin/env ruby
# This is a script I tossed together for a friend to MA with; since one character's Lich scripts share global variables, that's no trouble at all... but multiple instances of Lich for logging in with multiple characters simultaneously are extremely limited. All this does is set up the first character to run the script as the 'server' or 'operator' for all characters who subsequently connect using this script. It automatically senses which it's supposed to be, etc., etc.
# USAGE: All you have to do is run the script on each character you want to be able to communicate with/to/from and it'll do the rest.  Once you've got your characters linked together and all running this script, you can send commands to & receive them from any of the characters -- it doesn't need to be a specific one of them.
# Syntax for usage:   ;send to crosscharc (target_character) (command to perform).  So for example, if I wanted to have Shaelun send 'incant 414' to the game, from any of the chars I had linked up with this script I would type:   ;send to crossc shaelun incant 414
# Note: If you want *all* your characters to perform a certain action, enter the target character's name as 'wall' and the command will be sent to every character linked.  For example, to have all the chars linked with this script go 'out', you would type:  ;send to crossc wall out
# Note 2: If you want a more convenient way to talk to your other chars with this script, just alias ';send to crosscharcom' to be whatever you want.
# If you really want advanced functionality, you can customize it for your needs by filling in the actions in the 'def lookup_crosscharcom_action(message)' block of code.  It'll work just as well to make aliases for complicated stuff, but either method will get the job done.  Just add your own if/elsif statements that perform whatever action you want to trigger with a 'keyword', and you're set :)

#Fixed by Arrot (NOT TGO/Dreaven) Should fix the extra space being added to fput commands. 

def lookup_crosscharcom_action(message)
	if message =~ /^   BAD   $/i
		echo("Server says the last msg was incorrectly formatted!")
	elsif message =~ /^echo /i
		echo message.sub(/echo /i,'')
	elsif message =~ /^exec\s*/i
		code = message.sub(/^exec\s*/i,'')
		begin
			eval(code)
		rescue SyntaxError
			echo $!
		rescue
			echo $!
		end
	else
		return false
	end
	return true
end


if script.vars[1]
	remote_address = script.vars[1]
	force_client = true
	puts "NOTICE: you have started the script with a command line argument, and it's being interpreted as the IP address of the remote computer to be connected to.  " +
		"If your intention is to connect to %s, then simply let the script keep running.  " % remote_address +
		"If this is NOT your intention, kill this script (by typing `;kill' or `;k') within 5 seconds."
	sleep 5
else
	remote_address = "localhost"
	force_client = false
end


unless $character_name = Char.name
	echo("your character name is unknown... autoscanning")
	fput 'info'
	$character_name = matchfindword("Name: ?")
end


echo("Script only responds if errors are encountered (reduces clutter). No echo? No error")
toggle_echo; toggle_unique; toggle_echo
begin
	$crosscharcom_server = TCPServer.new(nil, 10153)
	$crosscharcom_server.setsockopt(Socket::SOL_SOCKET, Socket::SO_REUSEADDR, true)
	echo("Successful socket bind, this script is running as server ('hub' for all characters)")
	server = true
rescue
	unless $crosscharcom_server.nil?
		unless $crosscharcom_server.closed?
			$crosscharcom_server.close
			retry
		end
		sleep 1
		retry
	end
	echo("Assuming this script is a client, and the server is functioning properly")
	server = false
end

before_dying { $crosscharcom_server.close unless ($crosscharcom_server.nil? || $crosscharcom_server.closed?) }

errtimeout = 0
client = { "#{checkname.downcase.strip}" => nil }

if server and not force_client
  server_thread = Thread.new {
    while true
	new = $crosscharcom_server.accept
	newname = new.gets.downcase.chomp.strip
	if newname.split.length > 1
		respond("\r\n*** WARNING: Something has connected to the script, and failed to properly identify itself!\r\n*** Socket info: #{new.peeraddr.join(', ').inspect}\r\n*** Should say: \"AF_INET, (variable), localhost, 127.0.0.1\".\r\n*** It said its char name is:\r\n")
	end
	client["#{newname}"] = new
	new.puts("server")
	listener_thread = Thread.new {
		port = new
		char = newname
		while msg = port.gets
			tgt = msg.split.first.downcase.chomp.strip
			if checkname.strip.downcase =~ /#{tgt}/
				action = lookup_crosscharcom_action(msg.sub("#{tgt} ", ""))
				if action == false
					toggle_echo; toggle_unique; toggle_echo
					fput msg.sub("#{tgt} ","").chomp	# Unrecognized action. Treat it as a command typed directly to this char's front-end.
					toggle_echo; toggle_unique; toggle_echo
				elsif action == true
					nil	# Do nothing... action was already performed in the 'def' block seen above.
				end
			elsif tgt == "wall"
				client.values.each { |csock|
			  begin
				csock.puts(msg.sub("#{tgt} ",""))
			  rescue
			  	echo("error sending to #{tgt}... msg: #{$!}")
				csock.close unless csock.closed?
			  end
				}
				action = lookup_crosscharcom_action(msg.sub("#{tgt} ",""))
				if action == false
					toggle_echo; toggle_unique; toggle_echo
					fput msg.sub("#{tgt} ","").chomp
					toggle_echo; toggle_unique; toggle_echo
				elsif action == true
					nil
				end
			else
			  begin
			  	if client["#{tgt}"].nil?
						echo("received an improperly formatted string!")
						port.puts("   BAD   ")
						next
				end
				client["#{tgt}"].puts(msg.sub("#{msg.split.first} ", ""))
			  rescue
			  	echo("Error sending to #{tgt}... msg: #{$!}")
				client["#{tgt}"].close unless client["#{tgt}"].closed?
			  end
			end
		end
	}
	echo("#{newname} linked")
    end
  }
else
  client_thread = Thread.new {
    begin
	 	before_dying {
			if client['server'] and !client['server'].closed?
				begin
					client['server'].close
				rescue
				end
			end
		}
    	client["server"] = TCPSocket.open(remote_address, 10153)
    rescue
	sleep 1
	errtimeout += 1
	if errtimeout >= 5
		echo("fatal error connecting (controller char crash out of the game? firewall settings too strict?): #{$!}")
		exit
	end
	retry
    end
	client["server"].puts(checkname)
	if client["server"].gets.chomp != "server"
		respond("\r\n*** Warning: we've connected to something that failed to properly identify itself.\r\n*** Socket info: #{client["server"].peeraddr.join(', ').inspect}\r\n*** Should say \"AF_INET, 10153, localhost, 127.0.0.1\".\r\n")
	else
		echo("Connected properly with the server character")
	end
	while msg = client['server'].gets
		msg.chomp!
		action = lookup_crosscharcom_action(msg)
		if action == false
			toggle_echo; toggle_unique; toggle_echo
			fput msg
			toggle_echo; toggle_unique; toggle_echo
		else
			nil
		end
	end
  }
end

talker_thread = Thread.new {
    while true
	msg = unique_get
	target = msg.split.first.downcase.chomp.strip
	if server == true
		if client["#{target}"].nil?
			if full_target = client.keys.find { |val| val =~ /^#{target}/i }
				client["#{full_target}"].puts(msg.sub(/#{full_target} /i,""))
			else
				if checkname =~ /^#{target}/i
					toggle_echo; toggle_unique; toggle_echo
					unless lookup_crosscharcom_action(msg.sub!(/^#{target}/i,'').strip) then fput(msg) end
					toggle_echo; toggle_unique; toggle_echo
				elsif target == "wall"
					client.values.each { |ckey| ckey.puts(msg.sub("#{target} ",'')) }
					toggle_echo; toggle_unique; toggle_echo
					unless lookup_crosscharcom_action(msg.sub!(/^#{target}/i, '').strip) then (msg.slice!(0);fput(msg)) end
					toggle_echo; toggle_unique; toggle_echo
				else
					echo("'#{target}' doesn't appear to be linked up!")
				end
			end
		else
			client["#{target}"].puts(msg.sub("#{target} ",''))
		end
	else
		client["server"].puts(msg)
	end
    end
}

talker_thread.join
