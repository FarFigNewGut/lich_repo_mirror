=begin
	Utils by Nesmeor

  Various helper functions I have written that I re-use across scripts.

	 author: Nesmeor
	   name: Utils
	   tags: exp,stats
	version: 0.0.3
  updated: 7/4/2021

  Changelog
  0.0.3 - fixed last_stat issues
  0.0.2 - fixed race conditions for stat scraping, display issues
  0.0.1 - initial release
=end
module Utils
  def self.msg(text, type = 'info')
    if type == 'debug'
      calling_method = ""
      method_call_data = caller[0]
      if method_call_data =~ /([A-Za-z\_]+)\'/
        calling_method = $1
      end
      echo ">> #{text} - #{calling_method}" if CharSettings['debug'] == true
    elsif ($frontend == 'stormfront') && (type != 'debug')
      if type == 'error'
        puts "\<preset id=\"thought\"\>ERROR: #{text}\<\/preset\>"
      elsif type == 'warn'
        puts "\<pushBold\/\>WARNING: #{text}\<popBold\/\>"
      elsif type == 'info'
        puts "\<preset id=\"whisper\"\>#{text}\<\/preset\>"
      else
        echo text
      end
    elsif type == 'error'
      echo "** #{text}"
    elsif type == 'warn'
      echo "!! #{text}"
    elsif type == 'info'
      echo "-- #{text}"
    else
      echo text
    end
  end

  def self.show_help
    # TODO: Make a wiki page
    output = "\n"
    output.concat "Settings:\n"
    output.concat "\n"
    output.concat "   debug               Toggles debug mode\n"
    output.concat "   hud                 Toggles GTK3 heads up display (Coming soon!)\n"
    output.concat "   display_status      Toggles periodic status update output\n"
    output.concat "   frequency <seconds> Sets how frequently status updates are displayed (in seconds)\n"
    output.concat "   swap <script>       Sets bounty swap script to run to change bounties\n"
    output.concat "   max <minutes>       Sets max bounty time (in minutes)\n"
    output.concat "\n"
    output.concat "   bounty <setting>    See below. For example: ;#{Script.name} bounty script bigshot\n"
    output.concat "     script <script>   Sets bounty script to run as default action\n"
    output.concat "     skip <bounty_type>     Skips bounty type\n"
    output.concat "     unskip <bounty_type>     Unskips bounty type\n"
    #TODO: Add avoids
    output.concat "\n"
    output.concat "   Valid types are: child, forage, skin, kill, boss,\n"
    output.concat "                    gem, loot, search, escort, bandit\n"
    output.concat "\n"
    respond output
  end

  def self.show_current_settings
    output = "\n"
    output.concat "Current Settings:\n"
    output.concat "\n"
    output.concat "       Debug Enabled: #{CharSettings['debug']}\n"
    output.concat "         Hud Enabled: #{CharSettings['hud']}\n"
    output.concat "       Status Enable: #{CharSettings['display_status']}\n"
    output.concat "    Display Interval: #{CharSettings['display_interval']}\n"
    output.concat "       Bounty Script: #{CharSettings['bounty_script']}\n"
    output.concat "         Swap Script: #{CharSettings['swap_script']}\n"
    output.concat "     Max Bounty Time: #{CharSettings['max_bounty_time']}\n"
    output.concat "    Skipped Bounties: #{CharSettings['bounties_to_skip']}\n"
    output.concat "\n"
    output.concat "       ------ Creatures to avoid ------\n"
    CharSettings['creature_classifications_to_avoid'].each do | creature_type, avoid |
      output.concat "#{creature_type.capitalize.rjust(22)} = #{avoid}\n"
    end
    output.concat "\n"
    respond output
  end

  def self.toggle_setting(setting)
    if CharSettings[setting]
      CharSettings[setting] = false
      Utils.msg("#{setting} disabled","info")
    else
      CharSettings[setting] = true
      Utils.msg("#{setting} enabled","info")
    end
  end

  def self.change_setting(setting, value)
    if value
      CharSettings[setting] = value
      Utils.msg("#{setting} set to #{value}","debug")
    else
      Utils.msg("No value specified!","error")
    end
  end

  def self.add_value_to_setting(setting, value)
    if CharSettings[setting].include? value
      Utils.msg("#{pretty_name(setting)} already contains #{value}", "warn")
    else
      CharSettings[setting].append(value)
      Utils.msg("#{pretty_name(value)} added to #{pretty_name(setting)}", "info")
    end       
  end

  def self.remove_value_from_setting(setting, value)
    if CharSettings[setting].include? value
      CharSettings[setting].delete(value)
      Utils.msg("#{value} removed from #{setting}", "info")
    else
      Utils.msg("Setting #{setting} does not contain #{value}", "warn")
    end 
  end

  def self.go2(location)
    return if (Room.current.id == location.to_i) || Room.current.tags.include?(location)
  
    fput 'unhide' if hidden? || invisible?
    waitrt?
    waitcastrt?
    Script.run('go2', "#{location} --disable-confirm", flags = { quiet: true })
    sleep 0.2
  end

  def self.go2_table
    go2(Vars['table'])
  end

  def self.stop_script(script)
    if Script.running?(script)
      kill_script script
    end
  end

  def self.start_script(script,args="")
    unless Script.running?(script)
      Script.start(script,args)
    end
  end

  def self.run_script(script,args="")
    unless Script.running?(script)
      Script.run(script,args)
    end
  end

  def self.start_scripts(scripts)
    scripts.each do | current_script |
      split = current_script.split(" ")
      split_script = split[0]
      split_args = (split[1..-1]).join(" ")
      start_script(split_script, split_args)
      pause 1
    end
  end

  def self.run_scripts(scripts)
    scripts.each do | current_script |
      split = current_script.split(" ")
      split_script = split[0]
      split_args = (split[1..-1]).join(" ")
      run_script(split_script, split_args)
      pause 1
    end
  end

  def self.loop_wait(reason="no reason")
    loop do
      Utils.msg("Loop wait: #{reason}. Type yes to continue or shake to exit", "warn")
      result = matchtimeout 30, /A good positive attitude never hurts\.|Shake what\?/
      if result =~ /A good positive attitude never hurts\./
        return true
      elsif result =~ /Shake what\?/
        exit
      end
    end
  end

  def self.load_dependencies(scripts)
    run_scripts(scripts)
  end
  
  def pretty_name(string)
    pretty_name = string.gsub(/_/ ," ").capitalize
    return pretty_name
  end
end