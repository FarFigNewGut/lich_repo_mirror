=begin
	This script tracks item boosts by inspecting and recalling items in the game. It captures boosts such as stat increases or skill enhancements from loresung items and stores them in a YAML file specific to the logged-in character. The script displays the current item boosts when it starts, making it easy to see which boosts have been recorded for your equipment. Additionally, it supports commands to delete specific boosts, relist the current stored boosts, and export the data to a CSV file for easier management and analysis.

	Instructions:
	1. Ensure your items are loresung.
	2. Start the script with ;recallrecord.
	3. Execute the following command: ;foreach in worn; inspect item; sleep 1; recall item; sleep 1;
	4. Allow the ;foreach command to complete. You'll see ;recallrecord logging items as it executes.
	5. Make sure to include sleep commands in ;foreach to slow down the process for accuracy (already included in the command above.)
	6. To delete a specific item boost, use the command ;send delete ID (replace ID with the correct item ID from the list).
	7. To list all stored boosts, use the command ;send list.
	8. Stop the script with ;kill recallrecord when finished.
	9. Restart ;recallrecord to see a summary of recorded boosts. The boosts are saved in a YAML file in your Lich5 main directory under the character-specific folder.
	10. The script also saves the data to a CSV file, providing a structured view of item boosts with columns for each skill or stat, sorted alphabetically.

	The output includes a list of your current item boosts, showing boosts like stat increases and skill enhancements. This data helps players keep track of their equipment's enhancements, ensuring they are making the most of their gear's potential.

	Example of Output:

	Current Item Boosts:
	fireleaf badge:
	  - 5 to Wisdom Bonus.
	  - 10 to Mental Lore - Telepathy Bonus.
	  - 5 to Constitution Bonus.

	CSV Output Example:

	Item Name,Item ID,Agility Base,Armor Use Bonus,Constitution Bonus,Dexterity Base,First Aid Bonus
	fireleaf badge,-123456789,,,,,10,5,5
	gold ring,987654321,2,4,,,,7

	Script created with Chat GPT.

	Changelog:
	1.0.0 (2024-08-28)
		- Initial release of the recallrecord script.
		- Added support for capturing item boosts from loresung items.
		- Displays current item boosts on startup.
		- Automatically saves item boosts between sessions.

	1.1.0 (2024-08-28)
		- Implemented character-specific storage of item boosts in YAML files.
		- Handled items with the same name but different boosts using a combination of item name and boosts as a unique ID.

	1.2.0 (2024-08-29)
		- Added support for deleting specific item boosts using ;send delete ID command.
		- Added the ability to relist stored boosts with the ;send list command.
		- Improved handling of negative IDs to ensure accurate boost management.
		- Enhanced debugging output for better tracking of actions and changes.
		- Removed "boost" of from yaml output.

	1.3.0 (2024-08-30)
		- Added functionality to export item boosts data to a CSV file.
		- CSV output includes columns for each skill or stat, sorted alphabetically.
		- Corrected the formatting to exclude trailing periods from skill/stat names.
		- Ensured that CSV accurately records the numeric boost values for each item.
		- Improved data presentation for better readability and analysis of item boosts.
=end

require 'yaml'
require 'thread'
require 'csv'

# Constants for file paths
data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
ITEM_BOOSTS_FILE_PATH = "#{data_dir}item_boosts.yaml"
ITEM_BOOSTS_CSV_PATH = "#{data_dir}item_boosts.csv"

# Create directories if they do not exist
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(data_dir) unless Dir.exist?(data_dir)

# Load existing item boosts data from a YAML file
def load_existing_data(file_path)
  File.exist?(file_path) ? YAML.load_file(file_path) : {}
end

# Save item boosts data to a YAML file
def save_to_yaml(data, file_path)
  File.open(file_path, 'w') { |file| file.write(data.to_yaml) }
end

# Save item boosts data to a CSV file
def save_to_csv(data, file_path)
  # Extract just the skill/stat names without numbers, sorted alphabetically, and remove any trailing periods
  all_boosts = data.values.flatten.map { |boost| boost.split(' to ').last.gsub('.', '') }.uniq.sort

  headers = ["Item Name", "Item ID"] + all_boosts

  CSV.open(file_path, 'w', write_headers: true, headers: headers) do |csv|
    data.each do |item_key, boosts|
      item_name, item_id = item_key.split('|')
      row = [item_name, item_id]

      # Create a hash to map boost names to their numeric values
      boost_values = boosts.map do |boost|
        # Capture numeric values and skill/stat names, remove trailing periods
        if boost.match(/(\d+) to (.+)/)
          value, stat = boost.match(/(\d+) to (.+)/).captures
          [stat.gsub('.', ''), value] # Map stat name (without periods) to its numeric value
        end
      end.compact.to_h # Remove nil values and convert to a hash

      # Populate the row with the numeric values of the boosts, leaving cells empty if the boost isn't present
      all_boosts.each do |boost|
        row << (boost_values[boost] || "") # Fetch the numeric value for the stat, if available
      end
      csv << row
    end
  end
  puts "Saved boosts to CSV: #{file_path}"
end



# Display the contents of the YAML file in a readable format
def display_yaml_contents(data)
  puts "Current Item Boosts:"
  if data.empty?
    puts "No boosts recorded."
  else
    data.each do |item_key, boosts|
      item_name, item_id = item_key.split('|')
      puts "#{item_name} (ID: #{item_id}):"
      boosts.each do |boost|
        puts "   #{boost}"
      end
    end
  end
end

# Initialize a hash to store boosts
@item_boosts = load_existing_data(ITEM_BOOSTS_FILE_PATH)
@current_item_name = nil # Variable to store the current item name being processed
@current_boosts = [] # To accumulate boosts for the current item

# Display the contents of the YAML file on startup
display_yaml_contents(@item_boosts)

# Method to generate a unique key for each item using item name and its boosts
def generate_item_key(item_name, boosts)
  # Create a unique identifier for the item by hashing the boosts
  item_id = boosts.sort.join('-').hash.to_s
  "#{item_name}|#{item_id}"
end

# Method to process lines related to item inspection to extract the item name
def extract_item_name(line)
  if line =~ /You carefully inspect your (.+)\./
    @current_item_name = line.match(/You carefully inspect your (.+)\./)[1].strip
    puts "Captured item name: #{@current_item_name}"
    @current_boosts.clear # Clear the boosts to start fresh for this item
  end
end

# Method to accumulate boosts from recall lines
def process_recall_line(line)
  if line =~ /(boost of \d+ to .+?\.)/ && @current_item_name
    boost = line.match(/(\d+ to .+?\.)/)[1].strip
    @current_boosts << boost unless @current_boosts.include?(boost) # Avoid duplicates
    puts "Accumulated boost: #{boost}"
  end
end

# Method to finalize and save boosts when done processing recall data
def finalize_boosts
  if @current_item_name && !@current_boosts.empty?
    # Generate a unique key for the item
    item_key = generate_item_key(@current_item_name, @current_boosts)

    # Save the boosts under the unique item key
    @item_boosts[item_key] ||= []
    new_boosts = @current_boosts - @item_boosts[item_key]
    if new_boosts.any?
      @item_boosts[item_key].concat(new_boosts)
      save_to_yaml(@item_boosts, ITEM_BOOSTS_FILE_PATH)
      save_to_csv(@item_boosts, ITEM_BOOSTS_CSV_PATH) # Save to CSV after updates
      puts "Recorded boosts for #{@current_item_name} (ID: #{item_key.split('|').last}): #{new_boosts.join(', ')}"
    else
      puts "No new boosts to record for #{@current_item_name}."
    end
  else
    puts "No item name or boosts to save." if @current_item_name.nil? || @current_boosts.empty?
  end

  # Reset state
  @current_item_name = nil
  @current_boosts.clear
end

# Method to delete an item entry from the YAML file using the unique ID
def delete_item_boost_by_id(item_id)
  # Check if any item exists with the given ID
  matching_key = @item_boosts.keys.find { |key| key.split('|').last == item_id }
  if matching_key
    puts "Found item to delete: #{matching_key}" # Debugging output
    @item_boosts.delete(matching_key)
    save_to_yaml(@item_boosts, ITEM_BOOSTS_FILE_PATH)
    save_to_csv(@item_boosts, ITEM_BOOSTS_CSV_PATH) # Update CSV after deletion
    puts "Deleted boosts for #{matching_key.split('|').first} (ID: #{item_id})."
  else
    puts "Item with ID #{item_id} not found. Available IDs: #{list_item_ids}"
  end
end

# Method to list all item IDs in the data
def list_item_ids
  @item_boosts.keys.map { |key| key.split('|').last }.join(', ')
end

# Method to handle the boost list command
def handle_boost_list_command
  display_yaml_contents(@item_boosts)
end

# Thread to monitor game lines for recall information and commands
Thread.new do
  loop do
    line = get # Capture the game line

    # Check for item inspection lines to capture the item name
    extract_item_name(line) if line.include?("You carefully inspect your")

    # Process only lines related to item boosts
    process_recall_line(line) if line.include?("boost of")

    # Listen for the delete command: ;send delete ID
    if line =~ /^delete (-?\d+)$/
      item_id = line.match(/^delete (-?\d+)$/)[1]
      delete_item_boost_by_id(item_id)
    end

    # Listen for the boost list command: ;send list
    if line =~ /^list$/
      handle_boost_list_command
    end

    # Finalize boosts at the end of recall processing (adjust the condition as needed)
    finalize_boosts if line.include?("It has a permanently unlocked") || line.strip.empty?

    sleep 0.1 # Prevent high CPU usage
  end
end

# Main loop to keep the script running
loop do
  # Add any additional logic here if needed
  sleep 1 # Keep the script alive
end





