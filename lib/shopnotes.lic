require "fileutils"
no_kill_all
no_pause_all
#hide_me

=begin
Disclaimer: This is a really rough draft of a shop inventory script.  Several things don't work yet.  As I get time I'll expand it.

read the help before bugging me:  ;shop help

A passive script for tracking shop sales, it makes a note anytime you use a shop verb
Add to favorites so that it's always running - ;fav add global shopnotes.
Usage: ;shop
by: Dgry (suggestions/bugs) dgry@hotmail.com
known bugs: 

suspected bugs:
-changing your shop description may break the tracking
-extending your shop rooms or changing exits may break the tracking
-having duplicate rooms may break the tracking - for example if you have a 3 room shop with a rack and table
-having more than two people on same computer using this script - will need to do character check
-breathing wrong may break the tracking. See disclaimer

todo
-add shop sell/pull/etc to monitor

=end

action = proc { |client_string|
	if client_string =~ /^(?:<c>)?#{$lich_char}((?:shop).*)/i
		if scr = (Script.running + Script.hidden).find { |val| val.name == 'shopnotes' }
			scr.downstream_buffer.shove("#{$clean_lich_char}#{$1}")
		else
			UpstreamHook.remove('shopnotes')
		end
		nil
	else
		client_string
	end
}
UpstreamHook.add('shopnotes', action)

class LogFile
	
	def initialize(title = nil)
		@Filename = $script_dir + "shopnotes.csv"
	end
	
	def write(shopList)
		f = File.open(@Filename, "w")
		for cmpitm in shopList
			f.puts cmpitm
		end		
		f.close		
	end
		
	def read()
		begin
			file = File.open(@Filename, "r")
			x = Array.new()
			while (line = file.gets)
				#store into an array
				x << line			
			end
			file.close	
			return x
		rescue
			echo 'bombed'
		end
	end
end

class SalesLogFile
	
	def initialize(title = nil)
		@Filename = $script_dir + "shopnotessalestest.csv"
	end
	
	def write(salesLogList)
		f = File.new(@Filename, "w+")
		for cmpitm in salesLogList
			f.write(Time.now.to_s+ ", "+cmpitm)
		end		
		f.close
		#salesLogList.clear
	end
		
	def read()
		begin
			file = File.open(@Filename, "r")
			x = Array.new()
			while (line = file.gets)
				#store into an array
				x << line			
			end
			file.close
			return x
		rescue
			echo 'bombed'
		end
	end
end

class ShopList

	def initialize()
		@shopFile = LogFile.new()
		@salesFile = SalesLogFile.new()
		@shopList = Array.new
		@logList  = Array.new
		@salesLogList = Array.new
	end

	# takes new list and replaces current items in @shopList
	def update(x)
		#update @logList
		@logList = @shopFile.read()
		#replace @shopList with x
		@shopList = x		
		#merge lists
		newList = mergeLists(@shopList, @logList)
		#write result to file
		@shopFile.write(newList)
	end
	
	#assume lists are either in order or reverse order
	def mergeLists(shop, log)
				
		shopSales = Array.new
		newInventoryItem = Array.new
				
		#ignore all items from the log that are not from the current shop
		currentShop = shop[0].split(",")[2]
								
		#identify the new items
		for item in shop
			found = false			
						
			for line in log
			
				if compareItems(line.delete("\n"), (item)) == true
					found = true	
					#log.delete(line)	
				end				
			end
						
			if found == false
				newInventoryItem << item
			end		
		end
		
		#identify the sales items
		for item in log
			found = false			
						
			for line in shop
			
				#need to compare key with lines
														
				if compareItems(item.delete("\n"),line)
					found = true	
					#shop.delete(line)			
				end				
			end

			# if the log has an item that is not in the shop and the shop matches the log line
			# mark it as a sold item
			#build key
			
			#echo currentShop
			if (currentShop == nil)
				if checkroom =~ /\[(.*)'s (.*)\]/
					currentShop = $1.to_s 
				end			
			end
			
			currentShopKey = checkname.to_s + currentShop + checkpaths.join("")
			roomkey = item.split(",")[2].to_s
			
			if (item != nil && currentShop != nil && found == false && roomkey == currentShop) 
            #echo 'adding item'
            #echo item
				shopSales << item
			end		
		end
		
		
		#at this point we have 4 lists
		  #shop - current shop inventory list - contains relevant information to current room
		  #log - current log list - contains entries for other shops/rooms
		  #newInventoryItem - potential new sales items
		  #shopSales - potential sold items
		  
		
		#at this point we are down to specific differences		  
		  #these include shop balances
		  #these also include missing items and new items
		  #missing items will be in the log - these should be marked as sales
		  #new items will be in the shop but not the log, these should be added to the list without question
		  #items that match
			#items that mostly match will have everything except the quantity matching
			   #if it's in the log number is higher reduce number and mark as a sale
			   #if the log number is lower, increase number and mark as new
		
		
		#the current shop view will *ALWAYS* be the baseline for building the new log
				
		#add the log to the sales list at this point

		if shopSales.size > 0
			respond
			respond '--------New Sales Items Found------------'
			esttotal = 0
			for item in shopSales
				respond displayItem(item)
                esttotal = esttotal + item.split(",")[5].to_i
			end
			respond "Estimated total: #{esttotal}"
			respond '--------end New Sales Items------------'
			respond
		end
		if newInventoryItem.size > 0
			respond
			respond '--------new Items Found------------'
			for item in newInventoryItem
				respond displayItem(item)
			end			
			respond '--------end new Items------------'
			respond
		end
			
		#for now just replace all items in the log that deal with this room with the shop list
		newList = Array.new
		
		#delete old shop items
		for item in log
			csvShopName, csvShopRoomDesc, csvShopRoomName, csvContainer, csvName, csvPrice, csvVolume, csvStatus = item.split(",")
			if (csvShopRoomName.strip != currentShop)			
				newList << item
			end					
		end
		
		#append new items to the log
		for item in shop
			newList << item
		end
		
		#append sales item to the sales log
		for item in shopSales
         #echo 'adding item to list'
			@salesLogList << item       #add to the log file
		end
		
		@salesFile.write(shopSales)
					
		# better handling
		#newList = Array.new
						
		#determine order of log by calculating missing elements
		#current will always have less
		#missing items will be moved to a ledger file
			#add timestamps to sales
		#traverse log of active items and map @shopList to log items
		#return newly created list 
        shopSales.clear #clean out the old array        
        newInventoryItem.clear #clean out the old array               
		return newList
	end
	
	def compareItems(firstItem, secondItem)
		csvShopName, csvShopRoomDesc, csvShopRoomName, csvContainer, csvName, csvPrice, csvVolume, csvStatus = firstItem.split(",")
		csvShopNam2e, csvShopRoomDesc2, csvShopRoomName2, csvContainer2, csvName2, csvPrice2, csvVolume2, csvStatus2 = secondItem.split(",")
								
		if (csvShopRoomName.eql?(csvShopRoomName2) && csvContainer.eql?(csvContainer2) && csvName.eql?(csvName2) && csvPrice.eql?(csvPrice2) && csvVolume.eql?(csvVolume2))		
			return true			
		else
			return false
		end
	
	end
	
	def add()
		#intercept player command
		#update @logList based on existing @shopList - obtained via shop inventory
		#reroute player command
		#update @logList adding new item to the bottom of active items
		#write result to file
	end
	
	def remove()
		#intercept player command
		#update @logList based on existing @shopList - obtained via shop inventory
		#reroute player command
		#update @logList removing item from @logList
		#write result to file	
	end
	
	def priceChange()
		#intercept player command
		#update @logList based on existing @shopList - obtained via shop inventory
		#reroute player command
		#update @logList changing item price
		#write result to file	
	end
	
	#returns current list of items based on last refresh
	def inventory()
		@logList = @shopFile.read()
		for item in @logList
			csvShopName, csvShopRoomDesc, csvShopRoomName, csvContainer, csvName, csvPrice, csvVolume, csvStatus = item.split(",")
			if (csvShopRoomDesc != nil && csvShopRoomName.include?(checkname))
				respond csvShopRoomDesc + " | " +displayItem(item)
			end
		end
	end

	#returns current list of items based on last refresh - for all shops/characters
	def inventoryAll()
		@logList = @shopFile.read()
		for item in @logList
			csvShopName, csvShopRoomDesc, csvShopRoomName, csvContainer, csvName, csvPrice, csvVolume, csvStatus = item.split(",")
			if (csvShopRoomDesc != nil)
				respond csvShopRoomDesc + " | " +displayItem(item)
			end
		end
	end
	
	
	#last ten items to sell
	def last10sales()
		@salesLogList = @salesFile.read()

		count = 1
		esttotal = 0
		for item in @salesLogList.reverse
									
			if (item.split(",")[2].include?(checkname))			
				respond displaySalesItem(item)
				count = count +1
				esttotal = esttotal + item.split(",")[6].to_i
				if (count >= 10)
					break
				end
			end
		end
		respond "Estimated Total: #{esttotal}"		
	end
	
	def recentSales()
		esttotal = 0
		for item in @salesLogList
			if (item.split(",")[2].include?(checkname))			
				respond displaySalesItem(item)
				esttotal = esttotal + item.split(",")[6].to_i
			end
		end	
		respond "Estimated Total: #{esttotal}"		
	end
	
	#returns full history of shop sales/current items
	def history()
		@salesLogList = @salesFile.read()
		#display list of all items and statuses
		esttotal = 0
		for item in @salesLogList
			if (item.split(",")[2].include?(checkname))			
				respond displaySalesItem(item)
				esttotal = esttotal + item.split(",")[6].to_i
			end
		end		
		respond "Estimated Total: #{esttotal}"
	end

	def displayItem(item)
		csvShopName, csvShopRoomDesc, csvShopRoomName, csvContainer, csvName, csvPrice, csvVolume, csvStatus = item.split(",")
		
		if (csvName != nil && csvPrice != nil && csvVolume != nil)
			#returnString = csvName + " |  Price: " + csvPrice.strip + " |  Quantity: " + csvVolume.strip	
			returnString = "#{csvName}  |  Price: #{csvPrice}  |  Quantity: #{csvVolume}"
		end
		return returnString
	end


	def displaySalesItem(item)
		csvTime, csvShopName, csvShopRoomDesc, csvShopRoomName, csvContainer, csvName, csvPrice, csvVolume, csvStatus = item.split(",")
		
		if (csvName != nil && csvPrice != nil && csvVolume != nil)
			returnString = "#{csvTime} | #{csvShopName} | #{csvName} |  Price: #{csvPrice}  |  Quantity: #{csvVolume}"
		end
		return returnString
	end

	
end


s = ShopList.new()

while line = get

	if line =~ /^#{$lich_char}shop help$/ || line =~ /^#{$lich_char}shop$/
		respond
		respond "A passive script for tracking shop sales."
		respond
		respond "Use by going to your shop and type SHOP INVENTORY in each room"
		respond "The script will update with new items.  Future SHOP INVENTORY commands"
		respond "will make notes of any changes in the shop and mark missing and changed items as sales."
		respond	"Currently pulling items and changing prices will be listed as sales - this will be updated in the future"	
		respond		
		respond "Add to favorites so that it's always running - ;fav add global shopnotes."
		respond "If an item is removed from your shop between ;shop inventories, it will be assumed to be sold"
		respond "Usage: "
		respond ";shop help        - displays this help"		
		respond ";shop inventory   - current list of shop items (as of the last time you updated)"
		respond ";shop sales       - displays last 10 sales and estimates the profit"
		respond ";shop totals      - displays all of your sales and estimates"
		respond ";shop exit        - exits program"
		respond

	elsif line =~ /^#{$lich_char}shop inventory$/	
		s.inventory()

	elsif line =~ /^#{$lich_char}shop totals$/	
		s.history()		

	elsif line =~ /^#{$lich_char}shop recent$/	
		s.recentSales()
		
	elsif line =~ /^#{$lich_char}shop sales$/	
		s.last10sales()		

	elsif line =~ /item: price \(quantity\)/	
		x = Array.new()				
		if checkroom =~ /\[(.*)'s (.*)\]/
			shopName = $1.to_s 
		end
		roomID = checkname.to_s + shopName + checkpaths.join("")
		roomName = checkroom.to_s
        Thread.new {
                sleep 1		
				fput "shop with"				
        };		
		while !(line =~ /bank account is currently/) 
			line = get						
			if line =~/(On|In)(.*).../
				containerName = $2.to_s
			elsif line =~ / (.*): (.*)\((.*)\)/
				#echo line
				itemName = $1.to_s
				price = $2.to_s
				quant = $3.to_s
				x << shopName+","+roomName+","+roomID+","+containerName+","+itemName +", "+price+", "+quant
			else
				#echo line
			end		
		end
		
		#if line =~ /Your shop's bank account is currently (.*) silvers./
		#	x << shopName+", balance: "+$1.to_s
		#end		
		s.update(x)
		
#	elsif line =~ /SHOP INVENTORY/	
#		x = Array.new()
#		while !(line =~ /current balance is/) 
#			line = get		
#			#parse this line for relevant information
#			  #pull out room ID
#			  #pull out container information
#			if line =~ /Inventory for (.*)'s/  
#				roomName = $1.to_s
#			elsif line =~/(On|In)(.*).../
#				containerName = $2.to_s
#			elsif line =~ / (.*): (.*)\((.*)\)/
#				echo line
#				itemName = $1.to_s
#				price = $2.to_s
#				quant = $3.to_s
#				x << roomName+","+containerName+","+itemName +", "+price+", "+quant
#			end
#								 
#		end
#		
#		if line =~ /Your current balance is (.*)./
#			x << shopName+", balance: "+$1.to_s
#		end		
#		s.update(x)
	
	elsif line =~ /^#{$lich_char}shop exit$/				
		UpstreamHook.remove('shopnotes')
		exit
		
    elsif line =~ /^#{$lich_char}shop sales$/	
		@shopList = s.read()
		printList(@shopList)
	end
		
end

