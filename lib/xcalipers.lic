=begin
  PREVIEW RELEASE.  Shows lock difficulties and lockpick suggestions when measuring or loresinging a box.
  Also works for detections on plinites.

  Usage:
    ;xcalipers        (Watches in background for all measurements)
    ;xcalipers -400   (Suggests lockpicks for this lock difficulty.  The - is optional.)
    ;xcalipers easy   (Suggests lockpicks for all difficulty names that contain "easy" in the title)

  This is intended to ultimately replace ;calipers, but all functionality other than measuring a lock is currently
  unimplemented.  You should run both scripts for the time being.

  Lockpick suggestions, as currently implemented, show multiple lockpicks with and without lore.  First the theoretical
  required roll is determined, and then:
    * If the required roll is less than 30 ("min_margin"), it is discarded (unless it's a copper lockpick without lore)
    * If the required roll is more than 100, it is discarded (unless it's a vaalin lockpick with lore)
  The surviving 'candidates' are then sorted and presented.  Of the candidates shown, the one that is closest to
  requiring a roll of 60 ("margin") is highlighted for being the best compromise between XP gain, picking speed, and
  lockpick safety.

  Multiple suggestions means you can go up or down a row or two in the table if you're not entirely happy with the
  "recommended" lockpick, i.e. because it's alum, or you're down to your last 2 mana and it wants lore.

  Lore is always considered an option, since risking a cheap lockpick is often better than risking an expensive one.
  Self-cast lore bonuses are correctly calculated using the true formula revealed by GM Naijin on 2020-03-09.
  If you do not know 403, lore bonuses are halved and may be inaccurate.

  Inspired by, but a complete rewrite from, ;calipers

  Future plans include:
    - Lockpick appraisal details.
    - Trap information and disarm chances
    - The ability to ignore or otherwise unfavor specific lockpicks from ever being suggested.
    - The ability to customize the number of lockpick suggestions made and the "margin" and "min_margin" values.

  Note lockpick suggestions are not reliable for people with less than 50 ranks of lockpicking skill, as they cannot
  use Vaalin effectively.

  author: LostRanger (thisgenericname@gmail.com)
  game: gs
  tags: utility
  required: Lich >= 4.6.0.

  version: 0.4.1 (2022-07-29)

  changelog:
    version 0.4.1
      * Grandmasters are a thing too.  Calculate LM FOCUS ranks correctly for grandmasters.

      version 0.4
      * Support LMASTER FOCUS in addition to lore.
        - Will query your guild skills on first launch each sesson to determine LM ranks.
        - Will automatically update LM ranks if you or another script does GLD and the ranks are displayed.
        - Rank increases through guild promotions/etc are NOT automatically detected.
        
    version 0.3.2 (2020-04-17)
      * ... for real this time

    version 0.3.1 (2020-04-17)
      * Speculative fix to suggesting lore+vaalin when ANY lockpick can open the box with a roll of 2+.

    version 0.3 (2020-04-13)
      * Fix an edge case where the only displayed lockpick may require a 90+ roll.

    version 0.2-PREVIEW (2020-03-17)
      * Speculative fix for enhanced_dex issue on older versions of Lich.

    version 0.1-PREVIEW (2020-03-11)
      * Initial preview release.
=end

module XCalipers
    def self._reverse_array(array)
        hash = {}
        array.each_with_index{|k, v| hash[k] = v}
        return hash
    end

    @lockpick_strengths = ["flimsy", "very weak", "weak", "below average", "average", "above average", "strong", "very strong", "excellent", "incredibly strong", "astonishingly strong", "unsurpassed"].freeze
    @strength_map = _reverse_array(@lockpick_strengths).freeze

    @lockpick_conditions = ["broken", "miserable", "poor", "damaged", "neglected", "good", "excellent"].freeze
    @condition_map = _reverse_array(@lockpick_conditions).freeze

    @lockpick_precision = {
        "detrimental" => {:multiplier => 0.8, :lockpick => "< Copper 0.2"},
        "ineffectual" => {:multiplier => 0.9, :lockpick => "< Copper 0.1"},
        "very inaccurate" => {:multiplier => 1.0, :lockpick => "Copper/Brass"},
        "inaccurate" => {:multiplier => 1.1, :lockpick => "Steel"},
        "somewhat inaccurate" => {:multiplier => 1.2, :lockpick => "Gold/Ivory"},
        "inefficient" => {:multiplier => 1.3, :lockpick => "Silver"},
        "unreliable" => {:multiplier => 1.45, :lockpick => "Mithril"},
        "below average" => {:multiplier => 1.55, :lockpick => "Ora"},
        "average" => {:multiplier => 1.6, :lockpick => "Glaes"},
        "above average" => {:multiplier => 1.75, :lockpick => "Laje"},
        "somewhat accurate" => {:multiplier => 1.8, :lockpick => "Vultite"},
        "favorable" => {:multiplier => 1.9, :lockpick => "Rolaren"},
        "advantageous" => {:multiplier => 2.0, :lockpick => "Between Rolaren and Veniom"},
        "accurate" => {:multiplier => 2.2, :lockpick => "Between Rolaren and Veniom"},
        "highly accurate" => {:multiplier => 2.2, :lockpick => "Invar/Veniom"},
        "excellent" => {:multiplier => 2.3, :lockpick => "Golvern/Alum"},
        "incredible" => {:multiplier => 2.4, :lockpick => "Kelyn"},
        "unsurpassed" => {:multiplier => 2.5, :lockpick => "Vaalin"},
    }.freeze

    @lockpicks_ots = [
        {
            :name => "copper",
            :multiplier => 1.00, :strength => 2, :ranks => 0, :price => 100,
            :precision => "very inaccurate",
        },
        {
            :name => "brass",
            :multiplier => 1.00, :strength => 2, :ranks => 0, :price => 250,
            :precision => "poor",
        },
        {
            :name => "steel",
            :multiplier => 1.10, :strength => 4, :ranks => 1, :price => 500,
            :precision => "inaccurate",
        },
        {
            :name => "gold",
            :multiplier => 1.20, :strength => 3, :ranks => 3, :price => 2700,
            :precision => "somewhat inaccurate",
        },
        {
            :name => "ivory",
            :multiplier => 1.20, :strength => 5, :ranks => 1, :price => 750,
            :precision => "somewhat inaccurate",
        },
        {
            :name => "silver",
            :multiplier => 1.30, :strength => 4, :ranks => 3, :price => 2500,
            :precision => "inefficient",
        },
        {
            :name => "mithril",
            :multiplier => 1.45, :strength => 8, :ranks => 5, :price => 6000,
            :precision => "unreliable",
        },
        {
            :name => "ora",
            :multiplier => 1.55, :strength => 6, :ranks => 5, :price => 5000,
            :precision => "below average",
        },
        {
            :name => "glaes",
            :multiplier => 1.60, :strength => 10, :ranks => 8, :price => 9500,
            :precision => "average",
        },
        {
            :name => "laje",
            :multiplier => 1.75, :strength => 4, :ranks => 12, :price => 17000,
            :precision => "above average",
        },
        {
            :name => "vultite",
            :multiplier => 1.80, :strength => 4, :ranks => 20, :price => 30000,
            :precision => "somewhat accurate",
        },
        {
            :name => "rolaren",
            :multiplier => 1.90, :strength => 8, :ranks => 20, :price => 36000,
            :precision => "favorable",
        },
        {
            :name => "veniom",
            :multiplier => 2.15, :strength => 9, :ranks => 25, :price => 50000,
            :precision => "highly accurate",
        },
        {
            :name => "invar",
            :multiplier => 2.25, :strength => 10, :ranks => 35, :price => 75000,
            :precision => "highly accurate",
        },
        {
            :name => "alum",
            :multiplier => 2.30, :strength => 3, :ranks => 16, :price => 23000,
            :precision => "excellent",
        },
        {
            :name => "golvern",
            :multiplier => 2.35, :strength => 11, :ranks => 40, :price => 95000,
            :precision => "excellent",
        },
        {
            :name => "kelyn",
            :multiplier => 2.40, :strength => 8, :ranks => 25, :price => 62000,
            :precision => "incredible",
        },
        {
            :name => "vaalin",
            :multiplier => 2.50, :strength => 10, :ranks => 50, :price => 125000,
            :precision => "unsurpassed",
            :best => true,
        },
    ]

    @lockpicks = [["copper/brass", 1.00], ["steel", 1.10], ["gold/ivory", 1.20], ["silver", 1.30], ["mithril", 1.45], ["ora", 1.55], ["glaes", 1.60], ["laje", 1.75], ["vultite", 1.80], ["rolaren", 1.90], ["veniom", 2.15], ["invar", 2.25], ["alum", 2.30], ["golvern", 2.35], ["kelyn", 2.40], ["vaalin", 2.5]]

    @lock_difficulties = {}
    [
        'primitive', 'rudimentary', 'extremely easy', 'very easy', 'easy', 'very basic', 'fairly easy', 'simple',
        'fairly simple', 'fairly plain', 'moderately well-crafted', 'well-crafted', 'tricky', 'somewhat difficult',
        'moderately difficult', 'very well-crafted', 'difficult', 'extremely well-crafted', 'very difficult',
        'fairly complicated', 'intricate', 'amazingly well-crafted', 'very complex', 'impressively complicated',
        'amazingly intricate', 'extremely difficult', 'extremely complex', 'masterfully well-crafted',
        'amazingly complicated', 'astoundingly complex', 'incredibly intricate', 'absurdly well-crafted',
        'exceedingly complex', 'absurdly difficult', 'masterfully intricate', 'unbelievably complicated',
        'masterfully intricate', 'absurdly complex', 'impossibly complex'
    ].each_with_index{|k, v|
        min = v * 40
        max = min + 35
        min = 5 if min == 0
        @lock_difficulties[k] = {:name => k, :max => max, :min => min}
    }


    # $1 == difficulty name or $2 == exact difficulty
    INPUT_PATTERN = /^(?:(?:Measuring carefully, it looks to be|From the pitch of the vibration you determine that the purpose .*  It has) an? (.+?) lock(?: on it)?)|(?:It looks like it would be a?n .+ extraction \(-(\d+)\))\.|(?:You are a (Master) of Lock Mastery\.)|(?:You have (\d+) ranks in the Lock Mastery skill\.)$/

    module Calc
        class << self
            _lmas_ranks = nil

            def lock_skill; Skills.to_bonus(Skills.pickinglocks); end


            def trap_skill; Skills.to_bonus(Skills.disarmingtraps); end


            def dex_bonus
                if defined?(Stats.enhanced_dex) and Stats.enhanced_dex[0] > 0
                    return Stats.enhanced_dex[1]
                end
                return Stats.dex[1]
            end

            def _lore_bonus(spell, skill, selfcast=nil)
                selfcast = Spell[spell].known? if selfcast.nil?
                bonus = (Char.level/2).floor + (skill*0.1).floor + dex_bonus + (Spells.minorelemental/4).floor
                bonus = skill if bonus > skill
                bonus = (bonus/2).floor unless selfcast
                return bonus
            end


            def locklore_bonus(selfcast=nil)
                return _lore_bonus(403, Calc.lock_skill, selfcast)
            end


            def traplore_bonus(selfcast=nil)
                return _lore_bonus(404, Calc.trap_skill, selfcast)
            end
        end
    end


    class << self
        @lmas_ranks = nil

        def get_suggestions(
            difficulty,
            margin=60,
            min_margin=30,
            count=nil
        )
            base_bonus = Calc.dex_bonus + Calc.lock_skill
            bonuses = {
                "" => base_bonus,
                "lore" => base_bonus + Calc.locklore_bonus
            }
            best_bonus = "lore"

            if @lmas_ranks > 0
                bonuses["focus"] = base_bonus + ((Calc.dex_bonus / 2).floor + (2 * @lmas_ranks))
                best_bonus = "focus" if bonuses["focus"] > bonuses["lore"]
            end

            candidates = []
            fallback_candidate = nil
            easy_roll = 9999

            bonuses.each do |bonus_type, bonus|
                @lockpicks.each do |name, multiplier|
                    max = (bonus * multiplier).floor - 1
                    roll = 100 - (max - difficulty)
                    roll = 2 if roll < 2

                    next if roll > 100 unless (bonus_type == best_bonus and multiplier == 2.5)
                    if roll < min_margin
                        next if fallback_candidate and fallback_candidate[1] >= roll
                        fallback_candidate = [max, roll, bonus_type, name, false]
                    else
                        candidates << [max, roll, bonus_type, name, false]
                        easy_roll = roll if easy_roll.nil? or roll < easy_roll
                    end

                end
            end

            candidates << fallback_candidate if fallback_candidate and easy_roll > 50

            # sort by closest to margin
            candidates.sort_by!{|x| (x[1] - margin).abs}
            # flag best candidate
            candidates[0][4] = true
            # re-sort by max/roll
            candidates.sort_by!{|x| -x[0]}


            return candidates
        end

        def bold(what)
        end

        def suggest_lockpick(difficulty=nil, name: nil)
            entry = nil
            if difficulty
                difficulty = difficulty.abs
                @lock_difficulties.each do |k, v|
                    break if difficulty < v[:min]
                    entry = v
                end
            elsif name
                entry = @lock_difficulties[name]
                difficulty = entry[:max]
            end
            unless entry
                echo "Unknown lock difficulty!"
                return false
            end

            msg = []
            msg << "<output class='mono' />" if $frontend == 'stormfront'
            msg <<  "      Difficulty: -#{entry[:min]} to -#{entry[:max]}  (#{entry[:name]})"
            suggestions = get_suggestions(difficulty)
            if suggestions.length == 1 and suggestions[0][1] > 100
                msg << "      This lockpick exceeds your maximum skill.  Your best chance is:"
                prefix = "                  "
            else
                prefix = "  Suggested pick: "
            end

            padding = 4

            suggestions.each do |max, roll, bonus_type, pick, best|
                bonus_type += " + " if bonus_type != ""
                bonus_type = bonus_type.rjust(8)
                # pick = "lore + #{pick}" if lore
                # pick += " + lore" if lore
                pick = pick.ljust(12)
                t = "#{prefix}#{bonus_type}#{pick} (roll: #{roll.to_s.rjust(3)}+; max: #{max.to_s.rjust(4)})"
                if best
                    if $fake_stormfront
                        msg << "#{monsterbold_start}#{t}#{monsterbold_end}"
                    else
                        msg << "<preset id='#{CharSettings[:suggestion_preset] or 'speech'}'>#{t}</preset>"
                    end
                else
                    msg << t
                end
                prefix = "              or: "
            end
            msg << "\r\n<output class='' />\r\n" if $frontend == 'stormfront'
            _respond msg.join("\r\n")
        end

        def parse(line)
            return unless line =~ INPUT_PATTERN

            if ($3 or $4)
                new_ranks = ($4 or 63)
                if new_ranks != @lmas_ranks
                    echo "Updated Lock Mastery ranks from #{@lmas_ranks} to #{new_ranks}"
                    @lmas_ranks = new_ranks
                end
            elsif $1
                suggest_lockpick(name: $1)
            else
                suggest_lockpick($2.to_i)
            end
        end

        def run(script)
            @script = script

            @lmas_ranks = nil

            if @lmas_ranks.nil?
                @lmas_ranks = 0
                gld_output = Lich::Util.quiet_command_xml(
                    "gld", 
                    /^(?:(?:You are a (?:member|Guild Master|Grandmaster) of the .* Guild\.)|(?:You have no guild affiliation\.))\s*$/,
                    /^<output class=""\/>$/,
                    true
                )
                _respond('<output class=""/>')  # For safety.
                gld_output.each{|line| parse(line)}
            end

            if script.vars[0]
                if script.vars[0] =~ /^-?(\d+)$/
                    suggest_lockpick($1.to_i)
                else
                    pattern = /#{script.vars[0].downcase.strip}/
                    found = false
                    @lock_difficulties.each do |k, v|
                        if pattern =~ k
                            suggest_lockpick(name: k)
                            found = true
                        end
                    end
                    unless found
                        echo "Unknown lockpick difficulty '#{script.vars[0]}'"
                    end
                end
                exit
            end

            while true
                parse(get)
            end
        end
    end
    #
    # echo @lockpick_conditions.inspect
    # echo @condition_map.inspect
    # echo @lockpick_strengths.inspect
    # echo @strength_map.inspect
    # echo @lock_difficulties.inspect

end

XCalipers.run(script)