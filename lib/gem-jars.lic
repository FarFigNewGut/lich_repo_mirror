=begin

	Gem-Jars will attempt to put all gems into jars, if available.

	Author: Nisch
	Created: 2018-04-10
	Version: 1.0.3
	
	Changelog:
	
		1.0.3 (2018-04-19)
			- Clean up
			- Try to force inventory to update properly
	
		1.0.2 (2018-04-12)
			- Added a 2nd jarsack option
			
		1.0.1 (2018-04-10)
			- Created a function to allow multiple loops of sorting
			- Made sure to only create a list of gems from  the gem container
	
=end

if script.vars.empty?
	# Continue
elsif script.vars[1].downcase == 'list'
	respond
	respond "List: "
	respond
	respond "   - Item 1 "
	respond "   - Item 2 "
	respond "   - Etc..  "
	respond
elsif script.vars[1].downcase == 'setup'
	respond
	respond 'Usage:'
	respond
	respond "   1. Make sure your STOW container is setup. Type: Type: stow set [container name] "
	respond "   2. Make sure your LOOTSACK container is setup. Type: ;var set lootsack=[container name] " 
	respond "   3. Make sure your JARSACK container is setup. Type: ;var set jarsack=[container name] " 
	respond "   4. Make sure you have EMPTY JARS in your JARSACK. You can buy more at the Alchemist Shop "
	respond "   5. You can set a 2nd JARSACK container as well. Type: ;var set jarsack2=[container name] "
	respond
	respond "   #{$clean_lich_char}#{script.name} help                 show this message"
	respond "   #{$clean_lich_char}#{script.name} setup                show this message"
	respond
	respond "   #{$clean_lich_char}#{script.name}                      start organizing gems into jars automatically"
	respond
	exit
elsif script.vars[1].downcase == 'help'
	respond
	respond 'Usage:'
	respond
	respond "   1. Make sure your STOW container is setup. Type: Type: stow set [container name] "
	respond "   2. Make sure your LOOTSACK container is setup. Type: ;var set lootsack=[container name] " 
	respond "   3. Make sure your JARSACK container is setup. Type: ;var set jarsack=[container name] " 
	respond "   4. Make sure you have EMPTY JARS in your JARSACK. You can buy more at the Alchemist Shop "
	respond "   5. You can set a 2nd JARSACK container as well. Type: ;var set jarsack2=[container name] "	
	respond
	respond "   #{$clean_lich_char}#{script.name} help                 show this message"
	respond "   #{$clean_lich_char}#{script.name}                      start organizing gems into jars automatically"
	respond
	exit
end

unless $stowContainer = GameObj.inv.find{|bag| bag.id == XMLData.stow_container_id}
	echo 'Exiting: Stow Container not found. Type: stow set [container name].'
	exit
end

unless $lootContainer = GameObj.inv.find { |bag| bag.name =~ /#{Vars.lootsack}/i }
	echo 'Exiting: LootSack not found. Type: ;var set lootsack=[container name]'
	exit
end

unless $jarContainer = GameObj.inv.find { |bag| bag.name =~ /#{Vars.jarsack}/i }
	echo 'Exiting: JarSack not found. Type: ;var set jarsack=[container name]'
	#fput ";var set jarsack=pouch"
	exit
end

unless $jarContainer2 = GameObj.inv.find { |bag| bag.name =~ /#{Vars.jarsack2}/i }
	echo 'Exiting: JarSack2 not found. Type: ;var set jarsack2=[container name]'
	fput ";var set jarsack2=pouch"
	exit
end

$randomItemList = Array.new
$gemList = Array.new
$emptyJarList = Array.new
$jarList = Array.new
$jarExists = false

$randomItemList2 = Array.new

$emptyJarList2 = Array.new
$jarList2 = Array.new
$jarExists2 = false

$maxLoops = 5
$numLoops = 0

CheckContainers = proc {

	$randomItemList = Array.new
	$gemList = Array.new
	$emptyJarList = Array.new
	$jarList = Array.new
	$jarExists = false
	
	$randomItemList2 = Array.new

	$emptyJarList2 = Array.new
	$jarList2 = Array.new
	$jarExists2 = false	

	GameObj.containers.each{|id,container|
		
		if id == $lootContainer.id then
		
			container.each{|item|
				
				if item.type == "gem" then
				

					thisGem = {}
					thisGem[:id] = item.id
					thisGem[:type] = item.type
					thisGem[:noun] = item.noun
					thisGem[:name] = item.name
					
					$gemList.push(thisGem)
				
				else
				
					thisItem = {}
					thisItem[:id] = item.id
					thisItem[:type] = item.type
					thisItem[:noun] = item.noun
					thisItem[:name] = item.name
					
					$randomItemList.push(thisItem)
					
				end
		
			}
		
		end		
		
		
		if id == $jarContainer.id then
		
			container.each{|item|

				if item.noun == "jar" && item.after_name == nil then
				
					#emptyJarList.push([item.id,item.type,item.noun,item.name])
					thisJar = {}
					thisJar[:id] = item.id
					thisJar[:type] = item.type
					thisJar[:noun] = item.noun
					thisJar[:name] = item.name
					thisJar[:after_name] = item.after_name
					
					$emptyJarList.push(thisJar)
					
				elsif item.noun == "jar" && item.after_name != nil then
	
					thisJar = {}
					thisJar[:id] = item.id
					thisJar[:type] = item.type
					thisJar[:noun] = item.noun
					thisJar[:name] = item.name
					thisJar[:after_name] = item.after_name
					
					$jarList.push(thisJar)
					
				end
		
			}
		
		end				
		
		if $jarContainer2 != nil then
		
			if id == $jarContainer2.id then
			
				container.each{|item|
					
					if item.noun == "jar" && item.after_name == nil then
					
						thisJar = {}
						thisJar[:id] = item.id
						thisJar[:type] = item.type
						thisJar[:noun] = item.noun
						thisJar[:name] = item.name
						thisJar[:after_name] = item.after_name
						
						$emptyJarList2.push(thisJar)
						
					elsif item.noun == "jar" && item.after_name != nil then
						
						thisJar = {}
						thisJar[:id] = item.id
						thisJar[:type] = item.type
						thisJar[:noun] = item.noun
						thisJar[:name] = item.name
						thisJar[:after_name] = item.after_name
						
						$jarList2.push(thisJar)
						
					end
			
				}
			
			end			
		
		end
		
		
	}

}




###############################
# Let's begin...
###############################


fput "open #" + $lootContainer.id.to_s
fput "open #" + $jarContainer.id.to_s
fput "open #" + $jarContainer2.id.to_s

fput "stow all"


# Forces inventory data to be updated
fput 'inv containers'
xml = waitfor 'You are wearing'
# pattern = /<a exist="(\d+)"/g

xml.scan(/(?:<a exist="(\d+)")+/).each{|match|
  exist = match[0]
  fput "open ##{exist}"
  fput "look in ##{exist}"
  fput "close ##{exist}"
  waitfor '<prompt'
}


CheckContainers.call

echo "EmptyJars1: " + $emptyJarList.size.to_s
echo "EmptyJars2: " + $emptyJarList2.size.to_s

if $gemList.size < 1 then

	echo "No gems found."

	fput "close #" + $lootContainer.id.to_s
	fput "close #" + $jarContainer.id.to_s

	fput "close #" + $jarContainer2.id.to_s	
	
	exit
end

$jarExists = false
$jarExists2 = false


SortGems = proc{

	if $gemList.size < 1 then
		echo "No gems found."
		
		fput "close #" + $lootContainer.id.to_s
		fput "close #" + $jarContainer.id.to_s

		fput "close #" + $jarContainer2.id.to_s		
		
		exit
	else
		#echo "GEMS: " + $gemList.to_s
	end

	$gemList.each{|gem|
	
		if $jarList.size > 0 then
		
			$jarList.each{|jar|
				
				tmpGemName = gem[:name]

				tmpJarAfterName = jar[:after_name]
				
				if tmpGemName != nil && tmpJarAfterName != nil then

					if tmpJarAfterName.include? tmpGemName		
					
						$jarExists = true
						
						multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
						"get #" + jar[:id].to_s, 
						"put #" + gem[:id].to_s + " in #" + jar[:id].to_s, 
						"put #" + jar[:id].to_s + " in #" + $jarContainer.id.to_s
						
						$gemList.delete_if {|obj| obj[:id] == gem[:id]}
						
						sleep 1
						
					end
				
				end
			}
			
		else
			$jarExists = false
		end
		
		if $jarExists == false then
		
			#echo "Need an empty jar"
			
			emptyJar = nil
			
			if $emptyJarList.size < 1 then
				
				# Continue

			else
				
				emptyJar = $emptyJarList.first		
				
			end
			
			if emptyJar == nil then
			
				# Continue
				
			else
				
				multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
				"get #" + emptyJar[:id].to_s, 
				"put #" + gem[:id].to_s + " in #" + emptyJar[:id].to_s, 
				"put #" + emptyJar[:id].to_s + " in #" + $jarContainer.id.to_s
				
				$gemList.delete_if {|obj| obj[:id] == gem[:id]}
				$emptyJarList.delete_if {|obj| obj[:id] == emptyJar[:id]}		
				$jarList.push(emptyJar)
				
				CheckContainers.call
				
				SortGems.call
				
				sleep 1
				
				break
			
			end
			
		end
		
		$jarExists = false
		
		###########################################
		# jarsack2
		###########################################
		
		echo "check jarsack2"
		
		if $jarList2.size > 0 then
		
			$jarList2.each{|jar|
				
				tmpGemName = gem[:name]
				
				tmpJarAfterName = jar[:after_name]
				
				if tmpGemName != nil && tmpJarAfterName != nil then
				
					if tmpJarAfterName.include? tmpGemName			
					
						$jarExists2 = true
						
						multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
						"get #" + jar[:id].to_s, 
						"put #" + gem[:id].to_s + " in #" + jar[:id].to_s, 
						"put #" + jar[:id].to_s + " in #" + $jarContainer2.id.to_s
						
						$gemList.delete_if {|obj| obj[:id] == gem[:id]}
						
						sleep 1
						
					end
				
				end
			}
			
		else
			$jarExists2 = false
		end
		
		if $jarExists2 == false then
		
			#echo "Need an empty jar for jarsack2"
			
			if $emptyJarList2.size < 1 then
				echo 'Exiting: Run the script again or put more empty jars in jarsack2. You can buy more at the Alchemist Shop.'
				
				fput "close #" + $lootContainer.id.to_s
				fput "close #" + $jarContainer.id.to_s

				#fput "close #" + $lootContainer2.id.to_s
				fput "close #" + $jarContainer2.id.to_s				
				
				exit			
			end
			
			emptyJar = $emptyJarList2.first

			#echo emptyJar.to_s
			
			if emptyJar == nil then
				echo 'Exiting: Run the script again or put more empty jars in jarsack2.  You can buy more at the Alchemist Shop.'
				
				fput "close #" + $lootContainer.id.to_s
				fput "close #" + $jarContainer.id.to_s

				fput "close #" + $jarContainer2.id.to_s				
				
				exit		
			end
			
			multifput "get #" + gem[:id].to_s + " from #" + $lootContainer.id.to_s, 
			"get #" + emptyJar[:id].to_s, 
			"put #" + gem[:id].to_s + " in #" + emptyJar[:id].to_s, 
			"put #" + emptyJar[:id].to_s + " in #" + $jarContainer2.id.to_s
			
			$gemList.delete_if {|obj| obj[:id] == gem[:id]}
			$emptyJarList2.delete_if {|obj| obj[:id] == emptyJar[:id]}		
			$jarList2.push(emptyJar)
			
			CheckContainers.call
			
			SortGems.call
			
			sleep 1
			
			break
		end
		
		$jarExists2 = false		
		
	}
}

def keep_sorting
	if $numLoops <= $maxLoops then
		#echo "keep sorting"
		CheckContainers.call
		SortGems.call
		sleep 1
	else
		#echo "Stop sorting: Max loops reached"
	end
end

SortGems.call

$numLoops = 1

if $gemList.size > 0 then

	echo $gemList.size.to_s + " GEMS LEFT"
	#echo "LIST OF GEMS LEFT: " + gemList.to_s

	keep_sorting
	
	if $gemList.size > 0 then
	
		echo $gemList.size.to_s + " GEMS LEFT"
		#echo "LIST OF GEMS LEFT: " + $gemList.to_s		
	
	else
	
		echo "All gems should be in jars this time (if you had enough)!"
		
	end
	
else

	echo "All gems should be in jars (if you had enough)!"

end


sleep 1

fput "close #" + $lootContainer.id.to_s
fput "close #" + $jarContainer.id.to_s

#fput "close #" + $lootContainer2.id.to_s
fput "close #" + $jarContainer2.id.to_s

echo "Should be all set, but if not then try running it again."