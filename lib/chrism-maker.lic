=begin

Chrism Maker!
for automating chrism making
Author: Timbalt (credits to Aethor for original)

tracks successful casts
tracks failed casts
tracks mana cost
tracks total time it took
You need to have a orbsack set.  This is where your gems should be.  ;vars set orbsack = <container>
You need to have a chrismsack set.  This is where your chrism'd gems will be kept.  ;vars set chrismsack = <container>
You need to have a lootsack set. This is where your gems will be put if it fails because its not an orb. ;vars set lootsack = <container>
If you run it in chrismarium mode you need to have a chrismariumsack set. This is where your chrismarium will be put on script exit/completion. ;vars set chrismariumsack = <container>

;chrism-maker chrismarium to have the script put successful chrisms made into a chrismarium instead of a container


=end

VERSION = "3.0.0"
AUTHOR = "Timbalt"


#############################################################################################################################################


if script.vars[1] =~ /help/
message("~ You need to have an orbsack set. This is where your orb gems should be. ;vars set orbsack = <container>")
message("~ You need to have a chrismsack set. This is where your chrism'd gems will be kept. ;vars set chrismsack = <container>")
message("~ You need to have a lootsack set. This is where your failed gems(if any) will be put. ;vars set lootsack = <container>")
message("~ if you want to run chrismarium mode, you need to have a chrismariumsack set. This is where your chrismarium will be put on script exit/completion. ;vars set chrismariumsack = <container>")
message("~ ;chrism-maker chrismarium to have the script put successful chrisms made into a chrismarium instead of a container")
exit
end

if Vars.orbsack.nil? || Vars.chrismsack.nil? || Vars.lootsack.nil? #|| Vars.chrismariumsack.nil?
	respond "\n
First time running the script? Here's how to set it up!

  You need to have an orbsack set. This is where your orb gems should be. ;vars set orbsack = <container>
  
  You need to have a chrismsack set. This is where your chrism'd gems will be kept. ;vars set chrismsack = <container>
  
  You need to have a lootsack set. This is where your failed gems(if any) will be put. ;vars set lootsack = <container>
  
  If you want to run chrismarium mode, you need to have a chrismariumsack set. This is where your chrismarium will be put on script exit/completion. ;vars set chrismariumsack = <container>
  
  ;chrism-maker chrismarium to have the script put successful chrisms made into a chrismarium instead of a container
	"
	exit
end

###########################################################################################################################
use_chrismarium = script.vars[1] =~ /chrismarium/

before_dying {
if use_chrismarium
fput "put my chrismarium in my #{Vars.chrismariumsack}" if checkleft == "chrismarium" or checkright == "chrismarium"
else
empty_hands
end
}
###########################################################################################################################

def message(text)
    string = ''
    if $fake_stormfront then string.concat("\034GSL\r\n ") else string.concat("<pushBold/>") end
    if text.include?("\n")
        text.split("\n").each { |line| string.concat("#{line}") }
    else
        string.concat(text)
    end
    if $fake_stormfront then string.concat("\034GSM\r\n ") else string.concat("<popBold/>") end
    puts string
end


#######################################################################################################
 if use_chrismarium
			message("~ Chrism Maker: Chrismarium mode enabled")
			fput "get my chrismarium from my #{Vars.chrismariumsack}" if checkleft != /chrismarium/
            fput "swap" if checkleft != /chrismarium/
			else
        end
#######################################################################################################

if Vars.orbsack.nil?
    message("~ You need to have an orbsack set. This is where your orb gems should be. ;vars set orbsack = <container>")
    exit
end
if Vars.chrismsack.nil?
    message("~ You need to have a chrismsack set. This is where your chrism'd gems will be kept. ;vars set chrismsack = <container>")
    exit
end
if Vars.lootsack.nil?
    message("~ You need to have a lootsack set. This is where your failed gems(if any) will be put. ;vars set lootsack = <container>")
    exit
end

if use_chrismarium
    if Vars.chrismariumsack.nil?
        message("~ if you want to run chrismarium mode, you need to have a chrismariumsack set. This is where your chrismarium will be put on script exit/completion. ;vars set chrismariumsack = <container>")
        exit
    end
end

unless Char.prof == 'Cleric'
    message("~ You're not a Cleric, so this script does not apply to you.")
    exit
end

#Refresh Orb Gem List From Orbsack
message("~ Refreshing list of orb gems")


sleep 0.5

unless container = GameObj.inv.find { |obj| obj.noun.downcase == Vars.orbsack.downcase }
    unless container = GameObj.inv.find { |obj| obj.name =~ /#{Vars.orbsack.join(' ')}$/ }
        unless container = GameObj.inv.find { |obj| obj.name =~ /#{Vars.orbsack.join('.*?')}/ }
            message("~ Error: Can't find container \"#{Vars.orbsack.join(' ')}\"")
            exit
        end
    end
end

start_time = Time.now  # Start timing
successful_count = 0   # Counter for successfully processed gems
failure_count = 0      # Counter for failed attempts
total_mana_used = 0    # Track actual mana consumption dynamically

gem_counts = Hash.new(0)

#unless container.contents.nil?
#    open_result = dothistimeout "open ##{container.id}", 5, /^You open|^That is already open\.$/
#    unless open_result =~ /^You open/
        dothistimeout "look in ##{container.id}", 5, /In the .*?/
        if container.contents.nil?
            message("~ Error: Failed to find contents of container \"#{container.noun}\"")
            exit
        end
#    end
#end

gem_list = container.contents.find_all { |obj| obj.type =~ /gem/ }

if gem_list.empty?
    message("~ Error: No orb gems found in container \"#{container.noun}\"")
    exit
end

# Count gems and display the count before processing
gem_list.each { |gem| gem_counts[gem.name] += 1 }

message("~ Orb gem count in #{container.noun}:")
gem_counts.each { |gem, count| message("~ #{gem.capitalize}: #{count}") }

total_gems = gem_counts.values.sum
message("~ Total Orbs: #{total_gems}")

# Set the base mana cost for each cast here (adjust if you have enhancives or society reductions)
#BASE_MANA_COST = 50

# Process gems
gem_list.each do |gem|
    # Wait for mana before casting
    if checkmana < 150
        message("~ Waiting for mana...")
        wait_until { checkmana >= 150 }
    end

    # Use checkmana directly before cast
    initial_mana = checkmana

    waitrt?
    waitcastrt?
    dothistimeout "get ##{gem.id}", 5, /^You remove/
    fput "prep 325"
    result = dothistimeout "cast my #{gem}", 5, /spiritual bond|shudders in your hand but does little else|and blows away in the form of a fine powder/
    waitcastrt?

    if result =~ /spiritual bond/
        check = dothistimeout "bless deity common 4", 3, /cobalt liquid/
        waitrt?
        waitcastrt?
        # Use checkmana after bless
        post_cast_mana = checkmana
        mana_used = [initial_mana - post_cast_mana, 0].max
        total_mana_used += mana_used

        if check =~ /cobalt liquid/
            successful_count += 1
            sleep 2
            if use_chrismarium
                fput "push my chrismarium"
                message("~ Chrismed #{successful_count} out of #{total_gems} so far")
                message("~ Mana used so far: #{total_mana_used}")
            else 
                fput "put #{gem} in my #{Vars.chrismsack}"
                message("~ Chrismed #{successful_count} out of #{total_gems} so far")
                message("~ Mana used so far: #{total_mana_used}")
                sleep 3
            end
        end
    else
        # Use checkmana after failed cast
        post_cast_mana = checkmana
        mana_used = [initial_mana - post_cast_mana, 0].max
        total_mana_used += mana_used

        fput "put #{gem} in my #{Vars.lootsack}"
        failure_count += 1
        message("~ Failed #{failure_count} out of #{total_gems} so far") if failure_count > 0
        message("~ Mana used so far: #{total_mana_used}")
    end
end
#########################################################################################################################

end_time = Time.now  # End timing
total_time = end_time - start_time
minutes = (total_time / 60).to_i
seconds = (total_time % 60).round(2)

message("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
message("~ Chrism Maker")
message("~ Successful attempts: #{successful_count} out of #{total_gems}")
message("~ Failed attempts: #{failure_count} out of #{total_gems}") if failure_count > 0  # Only display failure count if there were failures
message("~ Total mana used: #{total_mana_used}")
message("~ Total time: #{minutes} minutes and #{seconds} seconds")
message("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
sleep 1
if use_chrismarium
fput "put my chrismarium in my #{Vars.chrismariumsack}" #if checkleft == "chrismarium" or checkright == "chrismarium"
end