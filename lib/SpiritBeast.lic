=begin

  SpiritBeast.lic: A script to capture, display information about, track, and eventually fight spirit beasts

        author: Deathravin
          game: Gemstone
          tags: spiritbeasts
       version: 0.8

  v0.80 - 2023-04-24
    - initial release
  v0.85 - 2023-04-25
    - Output of Beast Info hidden - that was a lot of scroll
    - Stopped selecting the beast to get info
    - Changed echo display a bit, added a fifth quality, and a wider room #
    - Re-ordered to the best beasts to the bottom
    
  Still quite beta
    
  Usage:
    ;SpiritBeast reset              - Clears all gathered beast information
    ;SpiritBeast info               - Gathers information about all captured beasts
    ;SpiritBeast echo               - Displays information about all captured beasts
    ;SpiritBeast train <x>          - Requires SpiritBeastTrack - will attempt to run to train at the arena 'x' times.
      train is definitely incomplete. The logic isn't nearly good enough yet.
      Automatically selects the highest level perfect beast that isn't level 20 yet
      When complete, selects the lowest level, least quality beast - just so you don't accidentally expel the good one

    ;SpiritBeast capture
      Will capture a beast in your current room
      Will wait for a Legendary if in a room that is known to contain a Legendary

    ;SpiritBeast capture <location>
      <location> is the general city. Can be WL, SH, TE, RR, IL
      Will go capture a Legendary beast in your level, swimming, climbing skill range
      Will capture a Legendary beast in the selected area you don't own first
      Will capture the least quality (less than Perfect) Legendary beast in the selected area next

  Future Features:
    - Save beast database via Saved Logfile
    - Fix Train logic - massive updates needed
    - Add Syringe and Loytalty stuff
    - Add in stat bonuses?
    - Add in displaying Armaments?

=end

def sb_waitrt()
  pause("0.25s")
  if checkrt > 0
    wait_while { checkrt > 0 }
    pause("0.75s")
  end
end

def sb_spirit_beast_reset()
  @sb_spirit_beasts = {
  # Hinterwilds
    "Battleborn Berserker" => { :Own => false , :Location => "HW" , :Room => "NOTKNOWN"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
  # Icemule
    "Ancient Jeweler"      => { :Own => false , :Location => "IM" , :Room => "u4130016"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Frostwyrm"            => { :Own => false , :Location => "IM" , :Room => "u4044008"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Harried Apprentice"   => { :Own => false , :Location => "IM" , :Room => "u7530030"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Librarian"            => { :Own => false , :Location => "IM" , :Room => "NOTKNOWN"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Mother Superior"      => { :Own => false , :Location => "IM" , :Room => "NOTKNOWN"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Rotting Seductress"   => { :Own => false , :Location => "IM" , :Room => "u4128071"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Stunted Firemage"     => { :Own => false , :Location => "IM" , :Room => "NOTKNOWN"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Titanic Shaman"       => { :Own => false , :Location => "IM" , :Room => "u4044138"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Two-headed Snake"     => { :Own => false , :Location => "IM" , :Room => "u4127045"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
  # River's Rest
    "Dread Stallion"       => { :Own => false , :Location => "RR" , :Room => "u2103003"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Hanged Man"           => { :Own => false , :Location => "RR" , :Room => "u5003010"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Master Arcanist"      => { :Own => false , :Location => "RR" , :Room => "u377327"   , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Vengeful Archer"      => { :Own => false , :Location => "RR" , :Room => "NOTKNOWN"  , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
  # Solhaven
    "Deathless Knight"     => { :Own => false , :Location => "SH" , :Room => "u4900308"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Dark Cavern"                   },
    "Demonic Echo"         => { :Own => false , :Location => "SH" , :Room => "u319140"   , :CapLevel =>  65 , :Swim =>   0 , :Climb =>  40 , :Area => "Bonespear Tower"               },
    "Dwarven Zealot"       => { :Own => false , :Location => "SH" , :Room => "u2130205"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Cascade of Tears"              },
    "Fledgling Kraken"     => { :Own => false , :Location => "SH" , :Room => "u4202110"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Vornavian Coast, Beach"        },
    "Jantalarian Piper"    => { :Own => false , :Location => "SH" , :Room => "u4215007"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Vornavis, Outlands Road"       },
    "Mysterious Huntsman"  => { :Own => false , :Location => "SH" , :Room => "u4215717"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Outlands, Rockspawn Willow"    },
    "Nascent Duskborn"     => { :Own => false , :Location => "SH" , :Room => "u4202174"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Vornavian Coast, Caverns"      },
    "Oceanic Oracle"       => { :Own => false , :Location => "SH" , :Room => "u4902101"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Solhaven, Beacon Circle"       },
    "Pale Woman"           => { :Own => false , :Location => "SH" , :Room => "u4900076"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Garden of Suffering"           },
    "Questionable Warcat"  => { :Own => false , :Location => "SH" , :Room => "u4900610"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Hall of the Claw"              },
    "Sunderer's Titan"     => { :Own => false , :Location => "SH" , :Room => "u4209096"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Solhaven, Charl's Quay"        },
    "Tortured Paladin"     => { :Own => false , :Location => "SH" , :Room => "u4215170"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Outlands Manor"                },
    "Woeful Magister"      => { :Own => false , :Location => "SH" , :Room => "u4900072"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Garden of Forbidden Knowledge" },
  # Teras  
    "Drowned Lover"        => { :Own => false , :Location => "TE" , :Room => "u3011007"  , :CapLevel =>   0 , :Swim =>  50 , :Climb =>   0 , :Area => "Swimming Hole"                 },
    "Glaesine Horror"      => { :Own => false , :Location => "TE" , :Room => "u3051026"  , :CapLevel =>  80 , :Swim =>   0 , :Climb =>  50 , :Area => "Eye of T'Vrull"                },
    "Mistwood Treant"      => { :Own => false , :Location => "TE" , :Room => "u3021001"  , :CapLevel =>  40 , :Swim =>   0 , :Climb =>   0 , :Area => "Basalt Flats"                  },
    "Phoenix Hatchling"    => { :Own => false , :Location => "TE" , :Room => "u3023107"  , :CapLevel => 100 , :Swim =>   0 , :Climb =>  80 , :Area => "The F'Eyrie"                   },
    "Saltsinger"           => { :Own => false , :Location => "TE" , :Room => "u3031107"  , :CapLevel => 100 , :Swim => 100 , :Climb =>   0 , :Area => "Nelemar"                       },
  # Illistim
    "Great Machinist"      => { :Own => false , :Location => "IL" , :Room => "u13021038" , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Lady of Skulls"       => { :Own => false , :Location => "IL" , :Room => "u13300080" , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
    "Starseer"             => { :Own => false , :Location => "IL" , :Room => "u13025021" , :CapLevel => 101 , :Swim =>   0 , :Climb =>   0 },
  # Landing  
    "Featherdancer"        => { :Own => false , :Location => "WL" , :Room => "u2123030"  , :CapLevel =>  35 , :Swim =>   0 , :Climb =>   0 , :Area => "Elven Village"                 },
    "Frost Lich"           => { :Own => false , :Location => "WL" , :Room => "u18209"    , :CapLevel =>  20 , :Swim =>   0 , :Climb =>   0 , :Area => "Graveyard"                     },
    "Ghostfin"             => { :Own => false , :Location => "WL" , :Room => "u386022"   , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Coastal Cliffs"                },
    "Golden Champion"      => { :Own => false , :Location => "WL" , :Room => "u386033"   , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Shrines"                       },
    "Hulking Blademaster"  => { :Own => false , :Location => "WL" , :Room => "u46027"    , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Catacombs"                     },
    "Hungering Serpent"    => { :Own => false , :Location => "WL" , :Room => "u68033"    , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Shrines"                       },
    "Kobold High Shaman"   => { :Own => false , :Location => "WL" , :Room => "u373016"   , :CapLevel =>  10 , :Swim =>   0 , :Climb =>   0 , :Area => "Kobold Village"                },
    "Moon Serpent"         => { :Own => false , :Location => "WL" , :Room => "u52017"    , :CapLevel =>   0 , :Swim =>   0 , :Climb => 300 , :Area => "Melgorehn's Reach"             },
    "Nightchild"           => { :Own => false , :Location => "WL" , :Room => "u45134"    , :CapLevel => 101 , :Swim =>   0 , :Climb =>  30 , :Area => "Darkstone Keep"                }, # Level 70 - but a PTIA
    "Prim Navigator"       => { :Own => false , :Location => "WL" , :Room => "u14022"    , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Danjirland"                    },
    "Pyrelord"             => { :Own => false , :Location => "WL" , :Room => "u35025"    , :CapLevel =>  30 , :Swim =>   0 , :Climb =>   0 , :Area => "Glatoph"                       },
    "Rose Lord"            => { :Own => false , :Location => "WL" , :Room => "u4121003"  , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Upper Dragonsclaw"             },
    "Stone Guardian"       => { :Own => false , :Location => "WL" , :Room => "u374017"   , :CapLevel =>   0 , :Swim =>   0 , :Climb => 300 , :Area => "Colossus"                      },
    "Weary Rider"          => { :Own => false , :Location => "WL" , :Room => "u386003"   , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Shrines"                       },
    "Wellwisher"           => { :Own => false , :Location => "WL" , :Room => "u46018"    , :CapLevel =>  10 , :Swim =>   0 , :Climb =>   0 , :Area => "Catacombs"                     },
    "Whiskey Spirit"       => { :Own => false , :Location => "WL" , :Room => "u338001"   , :CapLevel =>   0 , :Swim =>   0 , :Climb =>   0 , :Area => "Wehnimer's Landing"            }
  }
end

def sb_spirit_beast_inventory()
  beastList = []
  count = 0
  counttot = 0
  startrec = false
  put "beast list all"
  loop {
    line = get
    counttot += 1
    if line =~ /You have bound the following Common Spirit Beasts:/
      startrec = true
    elsif line =~ /You have bound the following Uncommon Spirit Beasts:/
    elsif line =~ /You have bound the following Legendary Spirit Beasts:/
    elsif line =~ /You have bound a total of/
      break
    elsif startrec and line =~ /^(.+)$/
      mob = $1
      count += 1
      if mob.length > 1
        beastList.push mob
      end
    end
    
    break if line =~ /You have bound a total of/
    break if counttot > 200
    break if count > 150
  }
  return beastList
end

def sb_spirit_beast_select(sbname)
  sb_waitrt() if checkrt > 0
  good = false
  10.times {
    fput "Beast select #{sbname}"
    result = matchtimeout 5, "Focusing intently inward", "That is not", "is already equipped for use in Spirit Battles."
    if result =~ /Focusing intently inward, you select your (.+) for use in Spirit Battles\./
      selected = $1
      good = true if sbname == selected
    elsif result =~ /Your (.+) is already equipped for use in Spirit Battles\./
      selected = $1
      good = true if sbname == selected
    end
    break if good
    pause("1s")
  }
  return good
end

def sb_spirit_beast_sense()
  legendaryRooms = [ "u4130016", "u4044008", "u7530030", "u4128071", "u4044138", "u4127045", "u2103003", "u5003010", "u377327", "u4900308", "u319140", "u2130205", "u4202110", "u4215007", "u4215717", "u4202174", "u4902101", "u4900076", "u4900610", "u4209096", "u4215170", "u4900072", "u3011007", "u3051026", "u3021001", "u3023107", "u3031107", "u13021038", "u13300080", "u13025021", "u2123030", "u18209", "u386022", "u386033", "u46027", "u68033", "u373016", "u52017", "u45134", "u14022", "u35025", "u4121003", "u374017", "u386003", "u46018", "u338001" ]
  findLine = []
  count = 0
  counttot = 0
  startrec = false
  fput "beast sense"
  loop {
    line = get
    counttot += 1
    if line =~ /The surroundings feel too civilized to hold any spiritual energy\./
      return "Error"
    elsif line =~ /You will need to wait another/
      return "Error"
    elsif line =~ /You focus your thoughts/
      startrec = true
    elsif line =~ /Roundtime/
      break
    elsif startrec and !legendaryRooms.include?("u#{XMLData.room_id}") and line =~ /^You detect the presence of (a|an) (common|uncommon) (.+) spirit(\.|!)$/
      rarity = $2
      mob = $3
      count += 1
      if mob.length > 1
        findLine.push mob
      end
    elsif startrec and line =~ /^You detect the presence of a tremendously powerful legendary spirit: the (.+)!$/
      mob = $1
      count += 1
      if mob.length > 1
        findLine.push mob
      end
    end
    
    break if line =~ /Roundtime/
    break if counttot > 50
    break if count > 25
  }
  return findLine
end

def sb_spirit_beast_info(spirit)
  count = 0
  counttot = 0
  startrec = false
  mobName = "na"
  debug = false
  result=Lich::Util.quiet_command_xml("beast info #{spirit}", /^The Spirit Beast/, /<\/prompt>/, true, 5, false)
  result.each { |line|
    if line =~ /The Spirit Beast is (a|an) (common|uncommon|legendary) (.+) of ([0-9]+) training(s|) with the following traits:/
      mobName = $3
      mobLevel = $4
      @sb_spirit_beasts[mobName] = {} if !@sb_spirit_beasts[mobName]
      @sb_spirit_beasts[mobName][:Level] = mobLevel
      @sb_spirit_beasts[mobName][:Own] = true
    elsif line =~ /Exp\. to Next:[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:ExpToNext] = $1.to_i
      echo "#{mobName} - ExpToNext: #{@sb_spirit_beasts[mobName][:ExpToNext]}" if debug
    elsif line =~ /Class:[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Class] = $1
      echo "#{mobName} - Class: #{@sb_spirit_beasts[mobName][:Class]}" if debug
    elsif line =~ /Element:[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Element] = $1
      echo "#{mobName} - Element: #{@sb_spirit_beasts[mobName][:Element]}" if debug
    elsif line =~ /Rarity:[ ]+([^ ]+)/
      result = $1
      @sb_spirit_beasts[mobName][:Rarity] = result
      @sb_spirit_beasts[mobName][:RarityN] = 0
      @sb_spirit_beasts[mobName][:RarityN] = 1 if result == "Common"
      @sb_spirit_beasts[mobName][:RarityN] = 2 if result == "Uncommon"
      @sb_spirit_beasts[mobName][:RarityN] = 3 if result == "Legendary"
      echo "#{mobName} - Rarity: #{@sb_spirit_beasts[mobName][:Rarity]}" if debug
    elsif line =~ /Loyalty:[ ]+([^ ]+)/
      result = $1
      @sb_spirit_beasts[mobName][:Loyalty] = result
      @sb_spirit_beasts[mobName][:LoyaltyN] = 0
      @sb_spirit_beasts[mobName][:LoyaltyN] = 1 if result == "Disinterested"
      @sb_spirit_beasts[mobName][:LoyaltyN] = 2 if result == "Average"
      @sb_spirit_beasts[mobName][:LoyaltyN] = 3 if result == "High"
      @sb_spirit_beasts[mobName][:LoyaltyN] = 4 if result == "Exceptional"
      echo "#{mobName} - Loyalty: #{@sb_spirit_beasts[mobName][:Loyalty]}" if debug
    elsif line =~ /Quality:[ ]+([^ ]+)/
      result = $1
      @sb_spirit_beasts[mobName][:Quality] = result
      @sb_spirit_beasts[mobName][:QualityN] = 0
      @sb_spirit_beasts[mobName][:QualityN] = 1 if result == "Unimpressive"
      @sb_spirit_beasts[mobName][:QualityN] = 2 if result == "Average"
      @sb_spirit_beasts[mobName][:QualityN] = 3 if result == "Robust"
      @sb_spirit_beasts[mobName][:QualityN] = 4 if result == "Perfect"
      @sb_spirit_beasts[mobName][:QualityN] = 5 if result == "Extraordinary"
      echo "#{mobName} - Quality: #{@sb_spirit_beasts[mobName][:Quality]}" if debug
    elsif line =~ /Power:[ ]+[^ ]+[ ]+[^ ]+[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Power] = $1.to_i
      echo "#{mobName} - Power: #{@sb_spirit_beasts[mobName][:Power]}" if debug
    elsif line =~ /Defense:[ ]+[^ ]+[ ]+[^ ]+[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Defense] = $1.to_i
      echo "#{mobName} - Defense: #{@sb_spirit_beasts[mobName][:Defense]}" if debug
    elsif line =~ /Insight:[ ]+[^ ]+[ ]+[^ ]+[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Insight] = $1.to_i
      echo "#{mobName} - Insight: #{@sb_spirit_beasts[mobName][:Insight]}" if debug
    elsif line =~ /Accuracy:[ ]+[^ ]+[ ]+[^ ]+[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Accuracy] = $1.to_i
      echo "#{mobName} - Accuracy: #{@sb_spirit_beasts[mobName][:Accuracy]}" if debug
    elsif line =~ /Speed:[ ]+[^ ]+[ ]+[^ ]+[ ]+([^ ]+)/
      @sb_spirit_beasts[mobName][:Speed] = $1.to_i
      echo "#{mobName} - Speed: #{@sb_spirit_beasts[mobName][:Speed]}" if debug
    elsif line =~ /^Appearance and Attacks$/
      break
    end
  }
end

def sb_spirit_beast_echo()
  startcount = 20
  @sb_spirit_beasts.find_all { |k,v| v[:Own] }.sort_by { |k,v| [ v[:Level].to_i, v[:QualityN], v[:RarityN], k ] }.each { |beast,value|
    if startcount >= 20
      respond '|=====================================================================================================================|'
      respond sprintf '| %20s | %2s %-9s | %2s %4s | %10s | %9s |%3s|%5s|%4s| %3s | %3s | %3s | %3s | %3s |', "Name", "CT", "Room", "Lv", "TNL", "Class", "Element", "Rar", "Qulty", "Loyl", "Pow", "Def", "Ins", "Acc", "Spd"
      respond '|=====================================================================================================================|'
      startcount = 0
    end
    respond sprintf '| %20s | %2s %-9s | %2s %4s | %10s | %9s |%3s|%5s|%4s| %3s | %3s | %3s | %3s | %3s |', beast, value[:Location], value[:Room], value[:Level], value[:ExpToNext], value[:Class], value[:Element], ['@'].cycle(value[:RarityN]).to_a.join(""), ['@'].cycle(value[:QualityN]).to_a.join(""), ['@'].cycle(value[:LoyaltyN]).to_a.join(""), value[:Power], value[:Defense], value[:Insight], value[:Accuracy], value[:Speed]
    startcount += 1
  }
  respond '|=====================================================================================================================|'
  respond ' '
  respond " Next Capture Time: #{([0, 900 - (Time.now - @sb_spirit_beast_Time)].max).to_i} seconds"
  respond ' '
end

sb_spirit_beast_reset() if !defined?(@sb_spirit_beasts)
@sb_spirit_beast_listed = false if !defined?(@sb_spirit_beast_listed)
@sb_spirit_beast_Time = Time.now - (60 * 16) if !defined?(@sb_spirit_beast_Time)

if variable[1] =~ /^(hel|set)/i
  respond ""
  respond "Spirit Beasts"
  respond "  by Deathravin"
  respond " "
  respond "Usage:"
  respond "  ;SpiritBeast reset              - Clears all gathered beast information"
  respond "  ;SpiritBeast info               - Gathers information about all captured beasts"
  respond "  ;SpiritBeast echo               - Displays information about all captured beasts"
  respond "  ;SpiritBeast train <x>          - Requires SpiritBeastTrack - will attempt to run to train at the arena 'x' times."
  respond "    train is definiately incomplete. The logic isn't nearly good enough yet."
  respond " "
  respond "  ;SpiritBeast capture"
  respond "    Will capture a beast in your current room"
  respond "    Will wait for a Legendary if in a room that is known to contain a Legendary"
  respond " "
  respond "  ;SpiritBeast capture <location>"
  respond "    <location> is the general city. Can be WL, SH, TE, RR, IL"
  respond "    Will go capture a legendary beast in your level, swimming, climbing skill range"
  respond "    Will capture a legendary beast in the selected area you don't own first"
  respond "    Will capture the least quality (less than Perfect) legendary beast in the selected area next"
  respond " "

elsif variable[1] =~ /^(list|info)/i or !$sb_spirit_beast_listed
  sb_spirit_beast_reset()
  ownedSpirits = sb_spirit_beast_inventory()
  ownedSpirits.each { |spirit|
    sb_spirit_beast_info(spirit)
    pause("0.25s")
  }
  $sb_spirit_beast_listed = true
  sb_spirit_beast_echo()
elsif variable[1] =~ /^echo/i
  sb_spirit_beast_echo()
elsif variable[1] =~ /^cap/i
  startRoom = Room.current.id
  if @sb_spirit_beast_Time + 900 > Time.now
    echo " "
    echo " Too soon since last spirit beast capture"
    echo " Next Capture Time: #{([0, 900 - (Time.now - @sb_spirit_beast_Time)].max).to_i} seconds"
    echo " "
    exit
  end
  if variable[2] =~ /^(WL|SH|IL|TE|IM|RR)$/i
    foundBeast     = @sb_spirit_beasts.find { |k,v| !v[:Own] and v[:Location] == variable[2] and Skills.climbing >= v[:Climb] and Skills.swimming >= v[:Swim] and Char.level >= v[:CapLevel] and v[:Room] =~ /^u[0-9]+$/ }
    if !foundBeast
      ["Unimpressive", "Average", "Robust"].each { |qual|
        foundBeast = @sb_spirit_beasts.find { |k,v|  v[:Own] and v[:Location] == variable[2] and Skills.climbing >= v[:Climb] and Skills.swimming >= v[:Swim] and Char.level >= v[:CapLevel] and v[:Room] =~ /^u[0-9]+$/ and v[:Quality] == qual }
        break if foundBeast
      }
    end
    if foundBeast
      echo "Going to capture [#{foundBeast[0]}] in [#{foundBeast[1][:Area]}] at [#{foundBeast[1][:Room]}]"
      fput "gird"
      start_script "go2", ["#{foundBeast[1][:Room]}", "_disable_confirm_"]
      wait_while { running?("^go2$") }
    else
      echo "Unable to find unperfect uncaptured beast in selected area"
      exit
    end
  elsif variable[2] != nil
    fput "gird"
    start_script "go2", [variable[2], "_disable_confirm_"]
    wait_while { running?("^go2$") }
  end
  fput "hide" if !hidden and Skills.stalkingandhiding >= 50
  sb_waitrt()
  finished = false
  foundSpirits = []
  count = 0
  until foundSpirits.count > 0 or count > 20 or foundSpirits == "Error"
    sb_waitrt()
    foundSpirits = sb_spirit_beast_sense()
    exit if foundSpirits == "Error"
    count += 1
  end
  foundSpirits.reverse.each { |spirit|
    if !@sb_spirit_beasts[spirit][:Own]
      echo "Grabbing that [#{spirit}] because I don't have one yet"
      sb_waitrt()
      fput "beast attune #{spirit}"
      sb_waitrt()
      fput "beast capture"
      pause("0.25s")
      sb_spirit_beast_info(spirit)
      finished = true
      break
    end
  }
  if !finished
    ["Unimpressive", "Average", "Robust"].each { |qual|
      foundSpirits.reverse.each { |spirit|
        if @sb_spirit_beasts[spirit][:Quality] == qual
          echo "Grabbing that [#{spirit}] because my current one has a quality of: [#{@sb_spirit_beasts[spirit][:Quality]}]"
          sb_waitrt()
          pause("1s")
          if sb_spirit_beast_select(spirit)
            fput "beast expel"
            fput "beast expel"
            sb_waitrt()
            fput "beast attune #{spirit}"
            sb_waitrt()
            fput "beast capture"
            pause("0.5s")
            sb_spirit_beast_info(spirit)
          else
            echo "couldn't verify select - moving on"
          end
          finished = true
          break
        end
      }
      break if finished
    }
  end
  if finished
    @sb_spirit_beast_Time = Time.now
  end
  pause("1s")
  start_script "go2", [startRoom, "_disable_confirm_"] if Room.current.id != startRoom
  wait_while { running?("^go2$") }
  fput "store all"
elsif variable[1] =~ /^(blood|vial|syr|draw)/i
  fput "get syringe from my pouch"
  fput "kneel"
  GameObj.npcs.find_all { |npc| npc.status == "dead" }.each { |npc|
    fput "draw ##{npc.id} with syringe"
    sb_waitrt()
    fput "loot ##{npc.id}"
  }
  fput "put my syringe in my pouch"
  fput "stand"
elsif variable[1] =~ /^reset/i
  sb_spirit_beast_reset()
elsif variable[1] =~ /^train/i
  startRoom = Room.current.id
  start_script "go2", ["u4903602", "_disable_confirm_"]
  wait_while { running?("^go2$") }

  count = 1
  count = variable[2] if variable[2] != nil
  count = count.to_i
  total = 0
  beast = @sb_spirit_beasts.find_all { |k,v| v[:Own] and v[:QualityN] == 4 and v[:Level].to_i < 20 }.sort_by { |k,v| [ v[:Level].to_i * -1, k ] }[0]
  exit if beast == nil
  sb_spirit_beast_select(beast[0])

  count.times {
    total += 1
    wait_while { XMLData.room_id != 4903602 or running?("^SpiritBeastTrack$") }
    start_script "SpiritBeastTrack" if !running?("^SpiritBeastTrack$")
    pause("1s")
    sb_EchoDebug("Starting Run :-: #{total} of #{count}")
    fput "inquire training"
    fput "go grate"
    result = matchtimeout 120, "challenges you to a Spirit Battle"
    if result !~ /challenges you to a Spirit Battle/
      stop_script "SpiritBeastTrack" if running?("^SpiritBeastTrack$")
      exit
    end
    fput "beast challenge accept"
    fput "beast command lash"
    @sb_Status[:Mine][:CommandNext] = "lash"
    @sb_Status[:Mine][:Command] = "lash"
    while running?("^SpiritBeastTrack$")
      if    @sb_Status[:Mine][:Command] == "attack" and @sb_Status[:Mine][:CommandNext] != "none"
        fput "beast command #{@sb_Status[:Mine][:CommandNext]}"
        @sb_Status[:Mine][:Command] = @sb_Status[:Mine][:CommandNext]
        @sb_Status[:Mine][:CommandNext] = "none"
        
      elsif @sb_Status[:Mine][:Command] == "attack" and @sb_Status[:Mine][:CommandNext] == "none" and  @sb_Status[:Them][:Defending] and @sb_Status[:Mine][:AP] >= 1 and @sb_Status[:Mine][:SAC] <  3
        fput "beast command lash"
        
      elsif @sb_Status[:Mine][:Command] == "attack" and @sb_Status[:Mine][:CommandNext] == "none"                                                                    and @sb_Status[:Mine][:SAC] >= 4 and @sb_Status[:Them][:Condition] =~ /^(on the verge of defeat)$/
        fput "beast command special"
        
      elsif @sb_Status[:Mine][:Command] == "attack" and @sb_Status[:Mine][:CommandNext] == "none" and !@sb_Status[:Them][:Defending]                                 and @sb_Status[:Mine][:SAC] >= 4
        fput "beast command detect"
        @sb_Status[:Mine][:Command] = "detect"
        @sb_Status[:Mine][:CommandNext] = "special"
        
      elsif @sb_Status[:Mine][:Command] == "attack" and @sb_Status[:Mine][:CommandNext] == "none"                                    and @sb_Status[:Mine][:AP]  > 0                                  and @sb_Status[:Mine][:Condition] =~ /^(on the verge of defeat)$/
        fput "beast command fortify"
        @sb_Status[:Mine][:Command] = "fortify"
        @sb_Status[:Mine][:CommandNext] = "heal"
        
      elsif @sb_Status[:Mine][:Command] == "attack" and @sb_Status[:Mine][:CommandNext] == "none" and  @sb_Status[:Them][:Defending] and @sb_Status[:Mine][:AP] >= 3                                  and @sb_Status[:Mine][:Condition] =~ /^(is critically wounded)$/
        fput "beast command heal"
        
      end
      
      sb_waitrt()
    end
    sb_spirit_beast_info(beast[0])
  }
  wait_while { XMLData.room_id != 4903602 }
  beast = @sb_spirit_beasts.find_all { |k,v| v[:Own] }.sort_by { |k,v| [ v[:QualityN], v[:Level].to_i, k ] }[0]
  sb_spirit_beast_select(beast[0]) if beast
  pause("1s")
  start_script "go2", [startRoom, "_disable_confirm_"] if Room.current.id != startRoom
  wait_while { running?("^go2$") }
  
end