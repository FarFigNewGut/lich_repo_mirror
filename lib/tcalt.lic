=begin
  tcalt.lic

  This script manages a list of main characters and their alts.

  Usage:
    ;tcalt list                     - Lists all main characters and their alts.
    ;tcalt add <main> <alt> [<alt> ...] - Adds the specified alt(s) to the specified main character.
    ;tcalt add <main>               - Adds a main character without any alts.
    ;tcalt remove <main> <alt>      - Removes the specified alt name from the specified main character.
    ;tcalt removemain <main>        - Removes the specified main character and all their alts.
    ;tcalt note <name> <note>       - Adds notes to the specified name.
    ;tcalt notes <name> <note>      - Adds notes to the specified name (alternative command).
    ;tcalt <name>                   - Displays the entry for the specified name, including notes.
    ;tcalt find <name>              - Finds the specified main or alt name and executes a find command for the main and all alts.
    ;tcalt find all                 - Executes a find command for every name saved in the list.
    ;tcalt help                     - Displays this help message.
    ;tcalt reset                    - Resets all main and alt information.

  Example:
    ;tcalt add John Bob Alice
    ;tcalt list
    ;tcalt remove John Bob
    ;tcalt removemain John
    ;tcalt note John This is a note for John.
    ;tcalt find John
    ;tcalt find all
    ;tcalt John

  Note:
    This script keeps track of main characters and their alts, including notes.
=end

# Initialize the storage for main characters and their alts
CharSettings['main_alts'] ||= {}
CharSettings['notes']   ||= {}

# Function to format names properly
def format_name(name)
  name.split.map(&:capitalize).join(' ')
end

# Function to list all main characters and their alts
def list_alts
  if CharSettings['main_alts'].empty?
    echo "No alts have been added yet."
  else
    CharSettings['main_alts'].each do |main, alts|
      echo "Main: #{main} - Alts: #{alts.join(', ')}"
      echo "Notes: #{CharSettings['notes'][main]}" if CharSettings['notes'][main]
    end
  end
end

# Function to add an alt to a main character
def add_alt(main_name, alt_name=nil)
  main_name = format_name(main_name)
  alt_name  = format_name(alt_name) if alt_name

  CharSettings['main_alts'][main_name] ||= []

  if alt_name
    if CharSettings['main_alts'][main_name].include?(alt_name)
      echo "#{alt_name} is already an alt of #{main_name}."
    else
      CharSettings['main_alts'][main_name] << alt_name
      echo "Added #{alt_name} as an alt of #{main_name}."
    end
  else
    # If no alt_name provided, ensure the main exists in the hash
    CharSettings['main_alts'][main_name] ||= []
    echo "Added #{main_name} as a main character."
  end
end

# Function to remove an alt from a main character
def remove_alt(main_name, alt_name)
  main_name = format_name(main_name)
  alt_name  = format_name(alt_name)

  if CharSettings['main_alts'][main_name] && CharSettings['main_alts'][main_name].include?(alt_name)
    CharSettings['main_alts'][main_name].delete(alt_name)
    echo "Removed #{alt_name} from the alts of #{main_name}."
  else
    echo "#{alt_name} is not an alt of #{main_name}."
  end
end

# Function to remove a main character and all their alts
def remove_main(main_name)
  main_name = format_name(main_name)

  if CharSettings['main_alts'].key?(main_name)
    CharSettings['main_alts'].delete(main_name)
    CharSettings['notes'].delete(main_name)
    echo "Removed #{main_name} and all their alts."
  else
    echo "#{main_name} does not exist."
  end
end

# Function to reset all main and alt information
def reset_alts
  CharSettings['main_alts'] = {}
  CharSettings['notes']     = {}
  echo "Reset all main and alt information."
end

# Function to add a note to a name
def add_note(name, note)
  name = format_name(name)
  CharSettings['notes'][name] = note
  echo "Added note to #{name}: #{note}"
end

# Function to display a specific entry
def display_entry(name)
  name = format_name(name)

  if CharSettings['main_alts'].key?(name)
    echo "Main: #{name} - Alts: #{CharSettings['main_alts'][name].join(', ')}"
    echo "Notes: #{CharSettings['notes'][name]}" if CharSettings['notes'][name]
  else
    found = false
    CharSettings['main_alts'].each do |main, alts|
      if alts.include?(name)
        echo "Main: #{main} - Alts: #{alts.join(', ')}"
        echo "Notes: #{CharSettings['notes'][main]}" if CharSettings['notes'][main]
        found = true
        break
      end
    end
    echo "#{name} does not exist." unless found
  end
end

# Function to find a character and their alts and execute the "find" command
def find_character(name)
  name = format_name(name)

  if CharSettings['main_alts'].key?(name)
    names_to_find = [name] + CharSettings['main_alts'][name]
    fput "find #{names_to_find.join(' ')}"
  else
    found = false
    CharSettings['main_alts'].each do |main, alts|
      if alts.include?(name)
        names_to_find = [main] + alts
        fput "find #{names_to_find.join(' ')}"
        found = true
        break
      end
    end
    echo "#{name} does not exist." unless found
  end
end

# Function to find all characters and their alts
def find_all_characters
  all_names       = CharSettings['main_alts'].map { |main, alts| [main] + alts }.flatten.uniq
  found_adventurers = []

  all_names.each_slice(9) do |group|
    results = Lich::Util.issue_command("find #{group.join(' ')}", /Brave Adventurer|There are no adventurers/, quiet: true, silent: true, include_end: false)

    results.each do |line|
      if line =~ /^[A-Za-z]+$/
        name      = line.strip
        main_name = nil

        CharSettings['main_alts'].each do |main, alts|
          if alts.include?(name)
            main_name = main
            break
          end
        end

        if main_name
          found_adventurers << "#{name} (#{main_name})"
        else
          found_adventurers << name
        end
      end
    end

    sleep 0.5
  end

  if found_adventurers.empty?
    echo "No adventurers questing from your list."
  else
    echo "Brave Adventurers Questing: #{found_adventurers.uniq.join(', ')}"
  end
end

# Parse script arguments
args = Script.current.vars

case args[1]
when 'list'
  list_alts

when 'add'
  if args[2]
    main = args[2]
    if args.length > 3
      args[3..-1].each { |alt| add_alt(main, alt) }
    else
      add_alt(main)
    end
  else
    echo "Usage: ;tcalt add <main> [<alt> ...]"
  end

when 'remove'
  if args[2] && args[3]
    remove_alt(args[2], args[3])
  else
    echo "Usage: ;tcalt remove <main> <alt>"
  end

when 'removemain'
  if args[2]
    remove_main(args[2])
  else
    echo "Usage: ;tcalt removemain <main>"
  end

when 'note', 'notes'
  if args[2] && args[3]
    add_note(args[2], args[3..-1].join(' '))
  else
    echo "Usage: ;tcalt note <name> <note>"
  end

when 'reset'
  reset_alts

when 'find'
  if args[2] == 'all'
    find_all_characters
  elsif args[2]
    find_character(args[2])
  else
    echo "Usage: ;tcalt find <name> | find all"
  end

when nil
  echo "Usage: ;tcalt list | add <main> [<alt> ...] | remove <main> <alt> | removemain <main> | note <name> <note> | find <name> | find all | help | reset"

else
  display_entry(args[1])
end
