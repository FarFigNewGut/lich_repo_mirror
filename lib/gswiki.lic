#quiet
require "net/http"
require "net/https"
=begin
	Browse gswiki! What else could you want?
	
	~ SpiffyJr, Tillmen, Donquix
	
     author: spiffyjr and friends!
       name: gswiki
       tags: information
    version: 2.0.1
=end
#######################################################################################
# gswiki by SpiffyJr (Noldo, the Forest Gnome Wanger) with help from Tillmen, edited to
# 	 work with gswiki by Donquix
# Date: Sunday March, 22 2015
# Version: 1.2
#
# Usage
#
# Features
# * Browse gswiki! What else could you want?
#
# Changelog
# * 07/15/2009 - v1.1.0
#	First release of new version (thanks to Tillmen for a little reorganization and tables!)
# * 07/15/2009 - v1.1.1
# 	Added support for spaces in names (forest gnome = forest_gnome)
# * 07/15/2009 - v1.2.0
# 	Clicking links will follow them inside a new gswiki script. (Tillmen YTMND!)
# * 03/22/2015 - v2.0.0
#       Updated to work with gswiki.play.net as krakii is deprecated
#       Uses net/http now instead of a pure socket connection (HTTPS enforced)
# * 01/22/2017 - v2.0.1
#	Updated to account for changes to GSWiki URL schemes
#######################################################################################
silence_me

def fatalError(msg)
	if $fake_stormfront then _respond("\034GSL\r\n") else _respond("<pushBold\/>") end
	_respond("===========================================");
	_respond("| GSWIKI - A FATAL ERROR HAS OCCURED");
	_respond("| " + msg);
	_respond("|");
	_respond("| gswiki will now exit!");
	_respond("===========================================");
	if $fake_stormfront then _respond("\034GSM\r\n") else _respond("<popBold\/>") end
	exit();
end

def message(message)
	if $fake_stormfront then _respond("\034GSL\r\n") else _respond("<pushBold\/>") end
	_respond("===========================================");
	_respond("| " + message);
	_respond("===========================================");
	if $fake_stormfront then _respond("\034GSM\r\n") else _respond("<popBold\/>") end
end

search = nil

if script.vars.empty?
	_respond("Usage:");
	_respond("    #{$clean_lich_char}gswiki <page> - looks up the corresponding gswiki page");
	_respond("    #{$clean_lich_char}gswiki search <phrase> - does a search on <phrase>");
	exit
end

# Upstream hook
if not $fake_stormfront
	action = proc { |client_string|
		if client_string =~ /^(?:<c>)?_gswiki_(.*)/i
			start_script 'gswiki', [ $1 ]
			nil
		else
			client_string
		end
	}
	UpstreamHook.add('gswiki', action)
end
# https://gswiki.play.net/mediawiki/index.php?search=
if variable[1] == "search" 
        page = "https://gswiki.play.net/index.php?title=Special%3ASearch&profile=all&search=#{script.vars[2]}&fulltext=Search"
else
	page = "https://gswiki.play.net/index.php?title=#{script.vars[0]}&printable=yes"
	page.gsub!(" ", "_");
end

toggle_echo
i_stand_alone

before_dying { site.close rescue() }
uri = URI.parse(page)
http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE
request = Net::HTTP::Get.new(uri.request_uri)
response = http.request(request)
content = response.body.slice(/<p[^>]*>.*?Retrieved from/m)

unless content
	message("Failed to retrieve page. Searching...");
	
page = "https://gswiki.play.net/index.php?title=Special%3ASearch&profile=all&search=#{script.vars[0]}&fulltext=Search"
page.gsub!(" ", "_")
uri = URI.parse(page)
http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE
request = Net::HTTP::Get.new(uri.request_uri)
response = http.request(request)
content = response.body.slice(/<p[^>]*>.*?<!\-\-\s+\/content\s+\-\->/m)
end

if $fake_stormfront then _respond("\034GSL\r\n") else _respond("<pushBold\/>") end
_respond("====================================================================================");
_respond("| GSWIKI - " + script.vars[0]);
_respond("====================================================================================");
if $fake_stormfront then _respond("\034GSM\r\n") else _respond("<popBold\/>") end
_respond("Fetched article from " + page + "\n\n");

# remove scripts
content.gsub!(/<script .*? <\/script>/m, '');

# remove line returns
content.gsub!("\n", '')

# reduce whitespace to one space
content.gsub!(/[\t\s]+/, ' ')

# insert escaped spaces
content.gsub!('&nbsp;', ' ')

# paragraphs
content.gsub!(/<p[^>]*>(.*?)<\/p[^>]*>/m) { "#{$1}\n\n" }

# headers
if $fake_stormfront
	content.gsub!(/<h2[^>]*>(.*?)<\/h[^>]*>/m) { "\n\034GSL\r\n--== #{$1}  ==--\034GSM\r\n\n" }
	content.gsub!(/<h3[^>]*>(.*?)<\/h[^>]*>/m) { "\n\034GSL\r\n#{$1}\034GSM\r\n\n" }
else
	content.gsub!(/<h2[^>]*>(.*?)<\/h[^>]*>/m) { "\n<pushBold/>--== #{$1}  ==--<popBold\/>\n" }
	content.gsub!(/<h3[^>]*>(.*?)<\/h[^>]*>/m) { "\n<pushBold/>#{$1}<popBold\/>\n" }
end

# lists
content.gsub!(/<li[^>]*>(.*?)<\/li[^>]*>/m) { "   * #{$1}\n" }
content.gsub!(/<dt[^>]*>(.*?)<\/dt[^>]*>/m) { "#{$1}\n" }
content.gsub!(/<dd[^>]*>(.*?)<\/dd[^>]*>/m) { "     #{$1}\n" }

# tables
while content =~ /<table[^>]*>(.*?)<\/table[^>]*>/m
	table = Array.new
	table_contents = $1
	for row in table_contents.scan(/<tr[^>]*>.*?<\/tr[^>]*>/m)
		table.push Array.new
		for item in row.scan(/<t[dh][^>]*>.*?<\/t[dh][^>]*>/m)
			table[-1].push(item.gsub(/<[^>]*>/, ''))
		end
	end
	column_width = Array.new
	table.each { |row|
		row.each_index { |col|
			width = row[col].length
			if column_width[col].nil? or column_width[col] < width
				column_width[col] = width
			end
		}
	}
	table_string = String.new
	table.each { |row|
		row.each_index { |col|
			table_string += sprintf("%#{column_width[col]+3}s", row[col])
		}
		table_string += "\n\n"
	}
	content.sub!(/<table[^>]*>.*?<\/table[^>]*>/m, "<output class=\"mono\"/>#{table_string}<output class=\"\"/>")
end

# remove remaining tags
if $fake_stormfront
	content.gsub!(/<[^>]*>/, '')
else
	content.gsub!(/<(?!pushBold|popBold|a|\/a|output)[^>]*>/, '')
	content.gsub!(/<a[^>]*?href="(?:http:\/\/gswiki.play.net)?\/wiki\/([^"]+)"[^>]*>(.*?)<\/a[^>]*>/m) { "<d cmd=\"_gswiki_#{$1}\">#{$2}</d>" }
	content.gsub!(/<a[^>]*?href="\/w\/[^"]+"[^>]*>(.*?)<\/a[^>]*>/m) { $1 }
end

# format links (replace ascii with hex values)
content.gsub!("%28","(");
content.gsub!("%29",")");

# format indentions

# Some extra junk
content.gsub!("&amp;", "&");

_respond content
exit
