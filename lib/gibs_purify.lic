=begin
Purify script, not compatible with Lich versions 3.57 and lower.
re-written by Gibreficul, original concept by Shaelun.
start the script with help as the script variable for usage information.
NOTE: Containers MUST be worn.  I haven't accounted for purifying from a held container.
UPDATE!  Fixed potential "divide by 0" error.
=end
silence_me
$gemnouns = ["aetherstone", "agate", "amber", "ambergris", "amethyst", "azurite", "beryl", "blazestar", "bloodjewel", "bloodstone", "bluerock", "caederine", "carbuncle", "chalcedony", "coral", "cordierite", "deathstone", "despanal", "diamond", "diopside", "doomstone", "dreamstone", "^egg$", "emerald", "eostone", "faenor", "faenor\-bloom", "^fang$", "feystone", "firestone", "galena", "garnet", "^gem$", "geode", "glimaerstone", "heliodor", "hyacinth", "jacinth", "jade", "jasper", "lapis", "lazuli", "moonstone", "obsidian", "onyx", "opal", "pearl", "peridot", "pyrite", "quartz", "rhimar", "riftshard", "riftstone", "rosepar", "ruby", "sapphire", "spherine", "spinel", "starstone", "^stone$", "sunstone", "thunderstone", "topaz", "tourmaline", "turquoise", "wyrdshard", "zircon"]
$gemnames = ["shimmertine shard","tigerfang crystal", "petrified tiger tooth", "quartz crystal", "platinum fang", "gold dust","platinum dust", "glaes dust", "gold fang", "rock crystal"]
loresongs = [" I hold of perfect hue;sing to me your value", " so bright and nice;sing to me your selling price", " I know I think I see;the worth that it has to me?", " with a bright luster;what value will you muster?", " oh so bold;will show a price that is now told"]
othersongs = [" I hold with magic skill;what is the purpose of your will"," with power and luster;what ability can you muster?", " I hold of perfect hue;sing to me your purpose true", " I with polished shine;sing your purpose or mine"]
mro = []
tick = nil
tock = nil
time_total = 0
mytime = Time.now.to_f
mygems = []
purified = 0
orbs = 0
shattered = 0
if script.vars[1] =~ /transfer/
	GameObj.inv.find{|cont| cont.noun =~ /#{script.vars[2]}/}.contents.each{|gem|
		if gem.noun =~ /#{$gemnouns.join('|')}/ || gem.name =~ /#{$gemnames.join('|')}/
			put "_drag ##{gem.id} ##{GameObj.inv.find{|targ| targ.noun =~ /#{script.vars[3]}/}.id}" unless gem.name =~ /smooth stone/
			wait
		end
	}
	exit
end
if script.vars.find { |val| val =~ /\bhelp\b/i } || Char.prof !~ /bard/i || script.vars.empty?
	respond("Syntax:   ;gibs_purify (container) (done_container) (orb_container) (orb_min_value)")
	respond "TWO containers must be specified, if a 3rd is specified, it will loresing and sort all orbs."
	respond "If a 4th (a gem value) is specified, it will loresing for value, and only sort the orb GREATER in value than what you entered."
	respond("If you don't specify a container for orb gems, they won't be separated.")
	respond("You can also enter:  #{$clean_lich_char}pure transfer (from) (to)  to transfer any gems from (from) container to (to) container.")
	respond "If you aren't a bard, the only feature here you may find useful is the transfer"
	exit
end
def wait_rt
	wait_while { checkrt > 0 or checkcastrt > 0 }
	sleep 0.7
end
sortorbs = true
if script.vars[3]
	script.vars.shift
	from_cont = script.vars.shift
	to_cont = script.vars.shift
	orb_cont = script.vars.shift
	orb_val = script.vars.shift
	sortorbs = false if orb_val == nil
	orb_val = orb_val.to_i if orb_val
elsif script.vars[2]
	script.vars.shift
	from_cont = script.vars.shift
	to_cont = script.vars.shift
	orb_cont = script.vars.shift
	orb_val = script.vars.shift
	sortorbs = false if orb_val == nil
else
	echo "you fucked up, better lern 2 reed"
	exit
end
unless GameObj.right_hand.name =~ /empty/i
	echo "RIGHT HAND IS FULL, EMPTY IT AND RESTART, EXITING"
	exit
end
fput "look in ##{GameObj.inv.find{|cont| cont.noun =~ /#{from_cont}/}.id}" if GameObj.inv.find{|cont| cont.noun =~ /#{from_cont}/}.contents.empty?
GameObj.inv.find{|cont| cont.noun =~ /#{from_cont}/}.contents.each{|gem| mygems.push(gem.id.to_i) if (gem.noun =~ /#{$gemnouns.join('|')}/ || gem.name =~ /#{$gemnames.join('|')}/) && gem.name !~ /smooth stone/}
howmany = mygems.length
mygems.each{|gem|
	if purified + shattered + orbs == 0
		respond "***************************************************************************************** "
		respond "*** Script detected #{mygems.length} gems in your #{GameObj.inv.find{|cont| cont.noun =~ /#{from_cont}/}.name}."
		respond "*** Purified gems will be placed in your #{GameObj.inv.find{|cont| cont.noun =~ /#{to_cont}/}.name}."
		if sortorbs
			respond "*** You will sort out orbs valued over #{orb_val} to your #{GameObj.inv.find{|cont| cont.noun =~ /#{orb_cont}/}.name}."
		elsif orb_cont
			respond "*** You will sort all orbs, regardless of value to your #{GameObj.inv.find{|cont| cont.noun =~ /#{orb_cont}/}.name}."
		end
		respond "***************************************************************************************** "
		start_time = Time.now.to_i
	else
		runtime = Time.now.to_f - mytime
		remaining = howmany - (purified + shattered + orbs)
		avgtime = runtime.round / (purified + shattered + orbs)
		respond "********************************************************************************** "
		respond "*** Script has purified #{purified} gems, sorted #{orbs} orbs, and shattered #{shattered} gems."
		respond "*** #{remaining} gems remaining."
		respond "*** Script run time:  #{ "%02d" %((runtime)/60)}:#{ "%02d" % ((runtime)%60)}"
		respond "*** Average time per gem has been #{avgtime} seconds."
		respond "*** Estimated time left is #{ "%02d" %((remaining * avgtime)/60)}:#{ "%02d" % ((remaining * avgtime)%60)}"
		respond "********************************************************************************** "
	end
	wait_rt
	loresing = false
	orbed = false
	unless Wounds.rhand == 3
		put "_drag ##{gem} right"
	else
		wait_while("Right hand blown off") {Wounds.rhand == 3}
		put "_drag ##{gem} right"
	end
		result = false
	until result =~ /what were you|cannot|must be holding|shatter|song misfires/i

		wait_until('Waiting on mana...') { mana(8) }
		wait_while{muckled?}
		wait_while('Get yourself healed') {[Wounds.head, Scars.head, Wounds.nerves, Scars.nerves].max >= 2 || ([Wounds.rightHand, Wounds.rightArm, Scars.rightHand, Scars.rightArm].max >= 2 && [Wounds.leftHand, Wounds.leftArm, Scars.leftHand, Scars.leftArm].max >= 2) || ([Wounds.rightHand, Wounds.rightArm, Scars.rightHand, Scars.rightArm].max >= 2 && [Wounds.leftHand, Wounds.leftArm, Scars.leftHand, Scars.leftArm].max >= 2) || [Wounds.rightArm, Wounds.leftArm, Wounds.rightHand, Wounds.leftHand, Scars.rightArm, Scars.leftArm, Scars.rightHand, Scars.leftHand].max == 3}
		wait_rt
		multifput("prep 1004","sing ##{gem}")
		result = matchwait("turn as the very essence","gem becomes more perfect","shatter","crack","must be holding","what were you","appearing smoother and more pure", "improves somewhat","cannot be", "Sing Roundtime",'Spell Hindrance',"song misfires")
		if result =~ /more perfect|what were you|improves somewhat|crack|shatter|cannot be|must be holding|smoother and more pure in color/
			nextline = get
			(loresing = true;orbed = true;break) if nextline =~ /very essence/
			if result =~ /crack|somewhat|What were|cannot|must be holding|song misfires|shatter/
				shattered += 1 if result =~ /shatter/
				wait_while{muckled?}
				loresing = true if result =~ /cannot be/
				break
			end
		end
	end
	if loresing && sortorbs
		saveorb = false

		wait_until('Waiting on mana...') { mana(8) }
		gemvalue = false
		until gemvalue
			wait_rt
			fput "loresing #{GameObj.right_hand.name} #{loresongs[rand(loresongs.length).floor]}"
			gemvalue = matchtimeout(3, "worth about .* silvers")
		end
		newgem = gemvalue.split
		newgemvalue = newgem[15]
		newgemvalue = (newgemvalue.delete(",")).to_i
		wait_rt
		sleep 1
		saveorb = true if newgemvalue > orb_val
	end
	if loresing && saveorb && orbed
		fput "_drag ##{gem} ##{GameObj.inv.find{|here| here.noun =~ /#{orb_cont}/}.id}"
		orbs += 1
	elsif loresing && (saveorb || (orb_cont && !sortorbs))
		song = false
		until song =~ /pulse|draw power|gem of some kind/

			wait_until('Waiting on mana...') { mana(8) }
			fput "loresing #{GameObj.right_hand.name} #{othersongs[rand(othersongs.length).floor]}"
			song = waitfor("pulse", "pulses", "draw power", "gem of some kind", "nothing new")
			wait_rt
		end
		fput "mark ##{gem}" if song =~ /pulse/
		if song =~ /pulse|draw power/
			respond "*** Saving #{GameObj.right_hand.name} worth #{newgemvalue}" if saveorb
			fput "_drag ##{gem} ##{GameObj.inv.find{|here| here.noun =~ /#{orb_cont}/}.id}"
			orbs += 1
		end
	end
	unless GameObj.right_hand.name =~ /empty/i
		fput "_drag ##{gem} ##{GameObj.inv.find{|cont| cont.noun =~ /#{to_cont}/}.id}"
		purified += 1
	end
	gems = howmany - (purified + shattered + orbs)
	wait_while{muckled?}
}
runtime = Time.now.to_f - mytime
remaining = howmany - (purified + shattered + orbs)
unless (purified + shattered + orbs) == 0
	avgtime = runtime.round / (purified + shattered + orbs)
end
respond "********************************************************************************** "
respond "*** Script has purified #{purified} gems, sorted #{orbs} orbs, and shattered #{shattered} gems."
respond "*** #{remaining} gems remaining."
respond "*** Script run time:  #{ "%02d" %((runtime)/60)}:#{ "%02d" % ((runtime)%60)}"
respond "*** Average time per gem has been #{avgtime} seconds."
respond "*** SCRIPT EXITING"
respond "********************************************************************************** "
