=begin

	Master COL in Solhaven!
	
	This script will ask if you want to join COL if you are not already a member of a society. If you wish to join COL then the script will join COL for you.
	
	If you are already a member of the Guardians of Sunfist or the Order of Voln and wish to join COL you have to first leave your current society then run this script.
	
	Script will seek out the Matron in Solhaven, join COL, and get busy mastering COL for you. All automagically!
	
	The script will handle everything all on its own! Amazing!
	
	There is an option for the script to automatically gather skins and flowing white robes, be sure to do ;colmaster setup and fill out the settings.
	If you would prefer to gather skins and flowing white robes on your own then the script will tell you which critters you need to skin to fulfill your skinning task and will also list the boundary rooms of the necessary hunting area so you can set your hunting script to hunt in the required rooms. Once the skins/flowing white robes are gathered then simply run the script again and it will hand in the items and continue on.
	
	NOTE: While all answers to the Inquisitor's questions appear to be in the script, in some cases the script doesn't have the exact wording of the question right so it might hang up sometimes in the Inquisitor's room. If this happens you can try to find the correct answer within this script by searching for keywords of the question. Also please send the exact question to Tgo01 on the PC forums or message them to Dreaven in game so I can correct the problem in the script.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 30

=end

if Gem.loaded_specs["gtk3"]
	gtk_version = 3
else
	gtk_version = 2
end

setup = proc{
	Gtk.queue {
		$COLMASTER_WINDOW = Gtk::Window.new
		$COLMASTER_WINDOW.title = "colmaster"
		$COLMASTER_WINDOW.set_border_width(10)
		
		#GTK2 and GTK3 nonsense:
		if gtk_version == 2
			$COLMASTER_BOX = Gtk::VBox.new(false)
			$COLMASTER_BOX.set_border_width(5)

			$COLMASTER_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
		else
			$COLMASTER_BOX = Gtk::Box.new(:vertical)
			$COLMASTER_BOX.set_border_width(5)

			$COLMASTER_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
		end
		#####

		$COLMASTER_WINDOW.add($COLMASTER_BOX)
		$COLMASTER_NOTEBOOK = Gtk::Notebook.new
		$COLMASTER_NOTEBOOK.set_show_border(true)
		$COLMASTER_BOX.add($COLMASTER_NOTEBOOK)
		$COLMASTER_NOTEBOOK.append_page($COLMASTER_VERTICAL_BOX1, Gtk::Label.new('Hunting'))
		$COLMASTER_ENTRY = Hash.new 
		$COLMASTER_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$COLMASTER_TABLE1 = Gtk::Table.new(6, 3, false)
		$COLMASTER_TABLE1.row_spacings=3
		$COLMASTER_TABLE1.column_spacings=3
		$COLMASTER_VERTICAL_BOX1.pack_start($COLMASTER_TABLE1, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $COLMASTER_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.colmaster[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$COLMASTER_ENTRY[variable] = entry
		$COLMASTER_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$COLMASTER_ENTRY = Hash.new
		add_label_entry($COLMASTER_TABLE1, "Main Hand", 'main_hand')
		add_label_entry($COLMASTER_TABLE1, "Off Hand", 'off_hand')
		add_label_entry($COLMASTER_TABLE1, "Skinning Weapon", 'skinning_weapon')
		add_label_entry($COLMASTER_TABLE1, "Max Level", 'max_level')
		add_label_entry($COLMASTER_TABLE1, "Kill All", 'kill_all')
		add_label_entry($COLMASTER_TABLE1, "Loot All", 'loot_all')
		add_label_entry($COLMASTER_TABLE1, "Minimum Mana", 'minimum_mana')
		add_label_entry($COLMASTER_TABLE1, "Spells to keep on", 'spells_to_keep_on')
		add_label_entry($COLMASTER_TABLE1, "Attack Routine", 'attack_sequence')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $COLMASTER_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.colmaster[variable].nil? ? default : UserVars.colmaster[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$COLMASTER_ENTRY[variable] = checkbox
		$COLMASTER_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$COLMASTER_WINDOW.signal_connect("delete_event") {
			$COLMASTER_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {

		label = Gtk::Label.new
		label.set_markup("
		<b>The script will bring you back to town if you have less than 60% health or you have a rank 2 wound anywhere. The script will exit once you are back to town and it won't heal you.</b>
		<b>If you don't want the script to gather skins then leave the setting Attack Routine blank.</b>
		<b>Main Hand:</b> Enter JUST the noun of your main hand item, for example: sword. Leave blank for no main hand.
		<b>Off Hand:</b> Enter JUST the noun of your off hand item, for example: sword. Leave blank for no off hand.
		<b>Skinning Weapon:</b> Enter JUST the noun of your skinning weapon, for example: dagger
		<b>Max Level:</b> Enter the highest level critters you want the script to automatically hunt. For example if you enter 10 then the script will hunt everything level 10 and below. Enter 100 to hunt everything.
		<b>Kill All:</b> Enter <b>yes</b> to kill all critters you come across while hunting, leave blank to only kill the critters you need.
		<b>Loot All:</b> Enter <b>yes</b> to loot everything after you finish clearing a room, leave blank to only loot the items you need.	<b>Keep in mind the script doesn't check if your STOW container is full and doesn't check your encumbrance.</b>
		<b>Minimum Mana:</b> If your mana falls below this number while hunting you will head back to town and wait until your mana is full. For example if you enter 10 then you will rest if your mana falls below 10. Leave blank or enter 0 to ignore mana.
		<b>Spells to keep on:</b> Enter the numbers of any spells you want to keep on and separate each by a comma. Example: 401, 406, 414. Leave blank for no spells.
		<b>Attack Routine:</b> Enter your attack sequence and separate each action by a comma. Examples:
		stance off, attack -- This would put you into stance offensive and then attack.
		stance off, inc 908 channel -- This would put you into stance offensive and then do 'inc 908 channel'.
		This sequence will be repeated every time you attack.
		")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$COLMASTER_TABLE1.attach(align, 1, 2, 8, 100)

		$COLMASTER_WINDOW.show_all
	}
        
	$COLMASTER_SETUP_COMPLETED = false
	until($COLMASTER_SETUP_COMPLETED)
		sleep 1
	end
	
	UserVars.colmaster ||= Hash.new
	$COLMASTER_ENTRY.keys.each { |key|
		if( $COLMASTER_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $COLMASTER_ENTRY[key].active?
			UserVars.colmaster[key] = $COLMASTER_ENTRY[key].active?
		else
			UserVars.colmaster[key] = $COLMASTER_ENTRY[key].text.strip.downcase
		end
	}

	UserVars.save()
        
	Gtk.queue {
		$COLMASTER_WINDOW.destroy
	}
}

main_hand = nil
off_hand = nil
skinning_weapon = nil
max_level = 100
kill_all = nil
loot_all = nil
minimum_mana = 0
spells_to_keep_on = nil
attack_sequence = nil

main_hand_id = nil
off_hand_id = nil
skinning_weapon_id = nil

main_hand = UserVars.colmaster["main_hand"] if UserVars.colmaster["main_hand"].length > 0
off_hand = UserVars.colmaster["off_hand"] if UserVars.colmaster["off_hand"].length > 0
skinning_weapon = UserVars.colmaster["skinning_weapon"] if UserVars.colmaster["skinning_weapon"].length > 0
max_level = UserVars.colmaster["max_level"].to_i if UserVars.colmaster["max_level"].length > 0
kill_all = UserVars.colmaster["kill_all"] if UserVars.colmaster["kill_all"].length > 0
loot_all = UserVars.colmaster["loot_all"] if UserVars.colmaster["loot_all"].length > 0
minimum_mana = UserVars.colmaster["minimum_mana"].to_i if UserVars.colmaster["minimum_mana"].length > 0
spells_to_keep_on = UserVars.colmaster["spells_to_keep_on"].split(",") if UserVars.colmaster["spells_to_keep_on"].length > 0
attack_sequence = UserVars.colmaster["attack_sequence"].split(",") if UserVars.colmaster["attack_sequence"].length > 0

current_task = nil
target_room = nil
total_item_cost = nil
number_of_items = nil
item_name = nil
item_cost = nil
item_order_number = nil
message_to_say = nil
wander = nil
new_room_stuff_to_do = nil
hunting_room_numbers = nil
needed_critter = nil
needed_item = nil
required_number_of_items = nil
number_of_items_gathered = nil
hunting_stuff = nil
my_room = nil
new_attack_sequence = nil
main_hand_id = nil
off_hand_id = nil
wander_rooms = Array.new
item_ids_to_ignore = Array.new

answers = {
	'In what year was the Glaise Cnoc cemetery established' 																											=> { :a => "4879" },
	'In what year was ranger Elrohan buried'																															=> { :a => "4881" },
	'In what year was Nadia Tinilia buried'																																=> { :a => "4924" },
	'On what wey or var is (Ta\'Vaalor\'s healer|the triage station) located'																							=> { :a => "Aethenireas" },
 	'On what wey or var\, in Ta\'Vaalor\, is the statue and fountain honoring Phoen located|What gate is located in the northwest of Ta\'Vaalor'						=> { :a => "Amaranth" },
	'Who owns the music shop in Ta\'Vaalor'																																=> { :a => "Ambra" },
	'What city gate is located in the southeast section of Ta\'Vaalor'																									=> { :a => "Annatto" },
	'\"On what wey or var is the Golden Hawk located\"'																													=> { :a => "Annatto" },
	'What is the first name of the founder of Ta\'Vaalor'																												=> { :a => "Aradhul" },
	'Two hides of what arctic creature adorn the floor in Ta\'Vaalor\'s furs and pelts shop'																			=> { :a => "Arctic bears " },
	'Who is the owner of the gem shop in the northwest area of Ta\'Vaalor'																								=> { :a => "Areacne" },
	'What is missing from the skeleton in the upper fields'																												=> { :a => "Arm" },
	'What skeletal appendage can be found under a pile of clay and stone around Barefoot Hill'																			=> { :a => "Arm" },
	'What twin creatures adorn a statue of a spear that stands in the cemetery'																							=> { :a => "Asp" },
	'What are the bricks made of on the path thorough the wildflowers'																									=> { :a => "Baked" },
	'\"What sort of bricks pave the path through the field of wildflowers\"'																							=> { :a => "Baked" },
	'From the looks of it\, what larger creature might the plumed cockatrices of the Neartofar Forest be related to'													=> { :a => "Basilisk" },
	'The skeleton of what sort of animal can be found in the abandoned vineyard'																						=> { :a => "Bear" },
	'What sort of tree\'s bark peels away into curls that resemble scrolls'																								=> { :a => "Birch" },
	'What colou?r is the boulder in the center of the apple orchard'																									=> { :a => "Black" },
	'The dais found in the catacombs of Ta\'Vaalor is covered in what material or substance'																			=> { :a => "Blood" },
	'Vaalorn\, a metal prized by the Vaalor elves\, is naturally found in veins of sparkling white or what other colou?r'												=> { :a => "Blue" },
	'What grey object rests atop a pillar midway along Virktoth\'s path'																								=> { :a => "Brick" },
	'What material is the base of Yander\'s well made of'																												=> { :a => "Brick" },
	'What material is the sign at the entrance to the Glaise Cnoc cemetery made of'																						=> { :a => "Bronze" },
	'What type of trout live in the river near Neartofar Forest'																										=> { :a => "Brown" },
	'What material is the hammocks in the barracks in NeartoFar made of'																								=> { :a => "Burlap" },
	'What material are the hammocks in the barracks in the Neartofar Forest made of'																					=> { :a => "Burlap" },
	'What is the family name of the four people buried together on the western stretch of the cemetery'																	=> { :a => "Calambor" },
	'What type of wood is Yander\'s barn made of'																														=> { :a => "Cedar" },
	'What type of wood is Yander\'s barn made out of'																													=> { :a => "Cedar" },
	'What has been built in the cemetery in honor of Tinuldor Nondel'																									=> { :a => "Cenotaph" },
	'To what family of animals do the striped relnaks that populate the meadows belong'																					=> { :a => "Chameleon" },
	'What sort of vines have overgrown the arbor in the cemetery'																										=> { :a => "Clematis" },
	'Who runs the clerical supply shop in Ta\'Vaalor'																													=> { :a => "Clentaran" },
	'What type of feathers are the pillows in the barracks made of'																										=> { :a => "Cockatrice" },
	'What is the name of the lady that provides food and drink in The Legendary Rest\'s courtyard'																		=> { :a => "Coleesta" },
	'What garden is located behind the Hall of the Arkati in Ta\'Vaalor'																								=> { :a => "Contemplation" },
	'What hammered metal is left abandoned in the Neartofar Forest'																										=> { :a => "Copper" },
	'What sort of mash was used to brew moonshine in the still in the Neartofar Forest'																					=> { :a => "Corn" },
	'A replica of an antique forge is located in armory. What material is this forge made of'																			=> { :a => "Crystal" },
	'In the cemetery\, a blue rose lies at the foot of a statue of what sort of beast'																					=> { :a => "Drake" },
	'The statue with ruby eyes in the Plains of Bone is of what'																										=> { :a => "Drake" },
	'What creature does the large statue inside the Ta\'Vaalor clerical supply shop depict'																				=> { :a => "Drake" },
	'What large creatures are depicted in statuary that accents the bridge to the southeast of Ta\'Vaalor'																=> { :a => "Drakes" },
	'Complete this epitaph\, as engraved on a headstone in the cemetery. \"Step softly\, a .* lies buried here.\"'												=> { :a => "Dream" },
	'What type or rare white silk curtains adorn the windows of the gem shop in the northwest section of Ta\'Vaalor'													=> { :a => "Dupioni" },
	'What sort of brass bird adorns the wall in The Legendary Rest\'s Lofty Peaks Room'																					=> { :a => "Eagle" },
	'What metal\, prized by the elves\, do the citizens of Ta\'Vaalor typically prefer to keep its natural crimson hue'													=> { :a => "Eahnor" },
	'What material is the sign above the Mess Hall entrance made from'																									=> { :a => "Ebonwood" },
	'What sort of delicately scented\, white-flowered shrubs manage to thrive in the briar thicket'																		=> { :a => "Elderberry" },
	'What sort of creature is the paper target tacked to the barracks in the Neartofar Forest most likely intended to resemble'											=> { :a => "Elf" },
	'A grove of what sort of tree stands in the center of the Neartofar Forest'																							=> { :a => "Elm" },
	'What sort of skeleton can be found\, half overgrown in the upper fields'																							=> { :a => "Elven" },
	'What wey or var is Ta\'Vaalor\'s bakery located on'																												=> { :a => "Emaereld" },
	'Which creatures form part of the decorative carvings on the exterior of the chocolate shop'																		=> { :a => "Faeries" },
	'The name of the lake that lies north of Ta`Vaalor is lake .*'																									=> { :a => "Fear" },
	'The name of the lake that lies north of Ta\'Vaalor is the Lake of .*'																						=> { :a => "Fear" },
	'What sort of animal skull can be found in the barley field'																										=> { :a => "Feline" },
	'What plant\, growing in the lower fields\, emits an aromatic scent from its tiny yellow flowers'																	=> { :a => "Fennel" },
	'Where does the sign say that the proprietor of the tavern on Shimeraern Var has gone'																				=> { :a => "Fishing" },
	'How many heads are mounted on the walls of Ta\'Vaalor\'s furs and pelts shop'																						=> { :a => "Four" },
	'The spotted leapers that populate the meadows appear to be a cross of a wolf and what other creature'																=> { :a => "Frog" },
	'What scent fills Ta\'Vaalor\'s salon'																																=> { :a => "Gardenia" },
	'What sort of creatures adorn the outside of ta\'vaalor\'s theatre\, in imitation of the illistim style of architecture'											=> { :a => "Gargoyle" },
	'What substance bloats the dark vysans that live in the cemetery'																									=> { :a => "Gas" },
	'Who man\’s the Armory in TaVaalor'																																	=> { :a => "Gearchel" },
	'Who owns the furs and pelts shop in Ta\'Vaalor'																													=> { :a => "Ghaerdish" },
	'Who owns the tannery in Ta\'Vaalor'																																=> { :a => "Ghaerdish" },
	'What creature does the boulder in the center of the apple orchard resemble'																						=> { :a => "Giant" },
	'What is the name of the moving company in Ta\'Vaalor'																												=> { :a => "Glimaerseen" },
	'What colou?r fabric are the chairs in the entryway of Wyvern Keep upholstered in'																					=> { :a => "Gold" },
	'What metal veins the shard in the center of the Marble Springs neighborhood in Ta\'Vaalor'																			=> { :a => "Gold" },
	'What colou?r is the tame ferret that lives in Ta\'Vaalor'																											=> { :a => "Golden" },
	'What is the obelisk in the graveyard made from'																													=> { :a => "Granite" },
	'What material is the monolith that towers above the Neartofar Forest composed of'																					=> { :a => "Granite" },
	'What sort of vines grow to the west of the wall that borders the wildflower fields'																				=> { :a => "Grape" },
	'What is the marble statue of an elven woman in the Marble Springs neighborhood of Ta\'Vaalor carrying in her hands'												=> { :a => "Greatsword" },
	'What colou?r is the doorstep of Ta\'Vaalor\'s furs and pelts shop'																									=> { :a => "Green" },
	'What colou?r are the doors to the Triage Station'																													=> { :a => "Green" },
	'What colou?r are the snakes in the lower fields'																													=> { :a => "Green" },
	'What colou?r are the grass snakes that populate the lower fields'																									=> { :a => "Green" },
	'The official colou?rs of Ta\'Vaalor\, as seen on the town\'s pennants\, are ruby and what'																			=> { :a => "Gold" },
	'What colou?r crystal is available for purchase in the Ta\'Vaalor clerical supply shop'																				=> { :a => "Grey" },
	'What silvery-blue wood is the altar in the Hall of the Arkati in Ta\'Vaalor fashioned of'																			=> { :a => "Haon" },
	'What wood is Ta\'Vaalor\'s furs and pelts shop\'s sign made of'																									=> { :a => "Haon" },
	'What material are the shelves in the triage station made from'																										=> { :a => "Haon" },
	'What type of armor is the statue of an elven man\, in the Marble Springs area of Ta\'Vaalor\, depicted as wearing'													=> { :a => "Hauberk" },
	'What sort of briar is the briar thicket composed of'																												=> { :a => "Hawthorn" },
	'What sort of beaked shrubs grow beneath the oaks in the Neartofar Forest'																							=> { :a => "Hazelnut" },
	'Complete this epitaph as it is written in the cemetery\, \"Grace was in all her steps\, the .* in her eyes\, in every gesture dignity and beauty in her smile.\"'	=> { :a => "Heavens" },
	'Who owns the tavern on Shimeraern Var'																																=> { :a => "Helgreth" },
	'What sort of skeleton can be found impaled on a sharpened pine in the Neartofar Forest'																			=> { :a => "Humanoid" },
	'What type of skulls act as sentinels on the walls on the Plains of Bone'																							=> { :a => "Humanoid" },
	'What types of skulls act as sentinels on the walls of the Plains of Bone'																							=> { :a => "Humanoid" },
	'What material composes the remains of the boundary marker at the edge of Fethayl Bog'																				=> { :a => "Iron" },
	'The front doors of \"The Legendary Rest\" are made of what material'																								=> { :a => "Ironwood" },
	'What tall white vines climb the walls surrounding ta\'vallor\'s garden of ancients'																				=> { :a => "Jasmine" },
	'What is the marble statue in the center of the building in the wildflower field depicted as holding in her hands'													=> { :a => "Jug" },
	'A granite bench that serves a dual purpose as a grave marker sits between a pair of what sort of plants'															=> { :a => "Junipers" },
	'Which of the Arkati is portrayed in a marble statue\, which is part of the fountain at the center of Ta\'Vaalor\'s Tyrnian Court'									=> { :a => "Kai" },
	'Which of the Arkati is honored the most in the Ta\'vaalor\'s hall of the Arkati'																					=> { :a => "Koar" },
	'What colou?r are the eyes of the healer in Ta\'Vaalor'																												=> { :a => "Lavender" },
	'What has split the oak tree at the southern end of the wildflower field'																							=> { :a => "Lightning" },
	'What type of golden flowers surround the statue of the enthroned man in the cemetery'																				=> { :a => "Lilies" },
	'What material is Ta\'Vaalor\'s City Hall made of'																													=> { :a => "Limestone" },
	'What material is the sarcophagus in the cemetery made of'																											=> { :a => "Limestone" },
	'What material is the triage station made from'																														=> { :a => "Limestone" },
	'What is the Oak Statue of an elven woman\, in the Marble Springs Area of Ta\'Vaalor\, holding in her hands'														=> { :a => "Longbow" },
	'What does the elven statue in Marble Springs hold is its right hand'																								=> { :a => "Longsword" },
	'Complete this sentence: A rare strain of plant thrives in The Legendary Rest\, called a .*_ fly trap'														=> { :a => "Lornon" },
	'What is the name of the inkeeper at the inn just east of tavallor\'s victory gate'																					=> { :a => "Malwith" },
	'What black object sticks out of a caved-in tunnel around Barefoot Hill'																							=> { :a => "Mandible" },
	'What image is carved into the headstone that marks Alianna Elowen\'s grave'																						=> { :a => "Mandolin" },
	'What type of papers are found in the stockade in the Neartofar Forests'																							=> { :a => "Map" },
	'What is the name of the store clerk in the herb shop in Ta\'Vaalor'																								=> { :a => "Maraene" },
	'What material is the multi-level fountain in The Legendary Rest\'s courtyard made of'																				=> { :a => "Marble" },
	'The arched entrance to the Marble Springs neighborhood\, in the northeast part of Ta\'Vaalor is made of what material'												=> { :a => "Marble" },
	'Where in the cemetery can a sarcophagus be found'																													=> { :a => "Mausoleum" },
	'What is the plaque set on the statue in Amaranth Court made from'																									=> { :a => "Metal" },
	'What creature\'s skull adorns the wall in The Legendary Rest\'s Desert Evening Room'																				=> { :a => "Minotaur" },
	'What is the name of the river that lies to the south of Ta\'Vaalor'																								=> { :a => "Mistydeep" },
	'What material is the sign that welcomes visitors to the Marble Springs neighborhood of Ta\'Vaalor made of'															=> { :a => "Mithril" },
	'What material are the the gates leading to the barracks made from'																									=> { :a => "Mithril" },
	'Deep in the catacombs of Ta\'Vaalor there is a statue of bones. According to the plaque beneath it\, whose shape does it represent'								=> { :a => "Mumsy" },
	'In the catacombs beneath Ta\'Vaalor\, what vegetative life thrives'																								=> { :a => "Mushroom" },
	'Complete this epitaph\, as engraved on a headstone in the cemetery. \".*\, when soft voices die\, vibrates in the memory...\"'							=> { :a => "Music" },
	'Who is bustling around the infirmary at the triage station'																										=> { :a => "Nurse" },
	'What sort of leaf is portrayed on the mat at the shrine in the Marble Springs neighborhood of Ta\'Vaalor'															=> { :a => "Oak" },
	'What sort of trees help mark the southern boundary of Barefoot Hill'																								=> { :a => "Oak" },
	'What tall\, carved object decorates the center of Ta\'Vaalor\'s Amaranth Court'																					=> { :a => "Obelisk" },
	'What force inhabits the barracks and stockade in the Neartofar Forest'																								=> { :a => "Ogre" },
	'What sort of birds can often be found in a parliament\, perched in the branches of a red maple towards the north of the Neartofar Forest'							=> { :a => "Owls" },
	'Complete this phrase as it reads in the cemetery\, \"Sleep undisturbed within the peaceful shrine\, safe in the hallowed quiets of the.*\"'					=> { :a => "Past" },
	'What adorns the outside of the Golden Hawk'																														=> { :a => "Pennants" },
	'What multicolou?red flowers line the walkway of Ta\'Vaalor\'s Amaranth Court'																						=> { :a => "Peonies" },
	'A rare strain of plant thrives in The Legendary Rest\, called a mammoth-ear .*_.'																			=> { :a => "Philodendron" },
	'Whos owns the sundries shop in Ta\'Vaalor'																															=> { :a => "Phisk" },
	'Who owns the General Exchange in Ta\'Vaalor'																														=> { :a => "Phisk" },
	'Which of the Arkati does the small fountain in the northeast part of Ta\'Vaalor honor'																				=> { :a => "Phoen" },
	'What type of golden tree grows in the center of the Wyvern Keep Lobby'																								=> { :a => "Pine" },
	'What sort of boar trap has been laid in the Neartofar Forest'																										=> { :a => "Pit" },
	'What allows you to traverse the pit of snakes and bones north of the cemetery'																						=> { :a => "Plank" },
	'What material is the massive shard in the center of the Marble Springs neighborhood in Ta\'Vaalor made of'															=> { :a => "Quartz" },
	'What material is the massive shard in the center of the marble springs neighborhood'																				=> { :a => "Quartz" },
	'What is the missing word in the following epitaph \"Here lies .* Elrohan\, who shot an arrow into the air. Where it landed he did not care\, .*'					=> { :a => "Ranger" },
	'Deep in the catacombs of Ta\'Vaalor there is a statue of bones crafted into the shape of what sort of creature'													=> { :a => "Rat" },
	'What kind of bird feathers adorn the totem pole that stands on the hill above the meadows'																			=> { :a => "Raven" },
	'The official colou?rs of Ta\'Vaalor\, as seen on the town\'s pennants\, are gold and what'																			=> { :a => "Ruby" },
	'What colou?r are the stripes on the grey skin of a striped relnak'																									=> { :a => "Red" },
	'What colou?r berries grow on the brambles that are growing into the abandoned vineyard'																			=> { :a => "Red" },
	'What colou?r is Ta\'Vaalor\'s bakery door painted'																													=> { :a => "Red" },
	'What colou?r is the dirt that composes the mound in the Barefoot Hill area'																						=> { :a => "Red" },
	'What colou?r is the marble flooring in the entryway of Wyvern Keep'																								=> { :a => "Red" },
	'What colou?r roses climb the outside of Ta\'Vaalor\'s sundries shop'																								=> { :a => "Red" },
	'What river plant are the wind chimes in the Marble Springs neighborhood of Ta\'Vaalor made of'																		=> { :a => "Reed" },
	'What type of fanged creature infests the catacombs beneath Ta\'Vaalor'																								=> { :a => "Rodent" },
	'What means of travel has been nearly swallowed by the thorny brambles growing on the Plains of Bone'																=> { :a => "Rowboat" },
	'Who is the owner of Ta\'Vaalor\'s salon'																															=> { :a => "Samyrle" },
	'What material is the Crimson Raven constructed from'																												=> { :a => "Sandstone" },
	'What spicy-scented bush grows along the trail through Fearling Pass'																								=> { :a => "Sarsaparilla" },
	'Who runs Ta\'Vaalor\'s delivery service'																															=> { :a => "Sassion" },
	'What shell are the sconces outside of the Salon shaped like'																										=> { :a => "Scallop" },
	'On what var or wey is the crimson raven located'																													=> { :a => "Shimeraern" },
	'Who owns the locksmith shop in Ta\'vaalor'																															=> { :a => "Shind" },
	'A veil of what material is intended to protect bodies in the Reposing Room in the cemetery'																		=> { :a => "Silk" },
	'Ambra sells finger cymbals made of what material'																													=> { :a => "Silver" },
	'What material is the sign bearing the name \"The Legendary Rest\" made of'																							=> { :a => "Silver" },
	'How many corners are there in the building that stands in the wildflower field'																					=> { :a => "Six" },
	'What grizzly trophies are displayed on a rock table and several niches in the western part of the catacombs'														=> { :a => "Skull" },
	'What is centered in the bone gate that connects the Plains of Bones and the Boneyard'																				=> { :a => "Skull" },
	'The brass sconces in Ta\'Vaalor\'s bakery are formed into what fanciful shape'																						=> { :a => "Songbird" },
	'What image adorns the gates standing to the east of the lower fields'																								=> { :a => "Songbird" },
	'What odd material coats the inside of a fruit-harvesting bucket that has been half-buried in the meadows'															=> { :a => "Soot" },
	'What sort of branches rest atop the monolith in the Neartofar Forest'																								=> { :a => "Spruce" },
	'What type of pink lily flourishes in Ta\'Vaalor\'s Garden of the Ancients'																							=> { :a => "Stargazer" },
	'What wooden structure can be found at the top of the hill in Neartofar Forest'																						=> { :a => "Stockade" },
	'Pause\, .* \, when you pass me by\, for as you are\, so once was I. As I am now\, so will you be. Then prepare unto death\, and follow me.'					=> { :a => "Stranger" },
	'What forms the northern border of the barley field'																												=> { :a => "Stream" },
	'What is the northern border at the barley field'																													=> { :a => "Stream" },
	'What sort of bushes thrive in the cool air along the ridge in the Neartofar Forest'																				=> { :a => "Summerberry" },
	'Who owns Ta\'Vaalor\'s bakery'																																		=> { :a => "Sweethen" },
	'What type of trees grow to the north of the cemetery'																												=> { :a => "Tanik" },
	'What represents the noble houses in the cemetery\'s crypt'																											=> { :a => "Tapestries" },
	'What material is the door to the caretaker\'s room in the cemetery made of'																						=> { :a => "Thanot" },
	'How many windows are set on the outside of the General Exchange'																									=> { :a => "Three" },
	'What type of roof does the triage station have'																													=> { :a => "Tiled" },
	'What road can be seen from the lookout in the Neartofar Forest'																									=> { :a => "Timmorain" },
	'What pink and purple blooming weeds thrive at the edge of the abandoned vineyard'																					=> { :a => "Thistle" },
	'What nasty-looking bushes grow on the side of the stone wall that runs along the eastern edge of the wildflower field'												=> { :a => "Thorn" },
	'What is the name of the owner of the jewelry store that is located in the southeast section of Ta\'Vaalor'															=> { :a => "Tmareantha" },
	'What sort of plant growing in the Neartofar Forest emits a silvery-white light'																					=> { :a => "Toadstool" },
	'The ruins of what sort of structure are atop the Plains of Bone'																									=> { :a => "Tower" },
	'What plants surround the Crimson Raven'																															=> { :a => "Trees" },
	'Some boxes have been stashed in a back passage between the catacombs and the wilds outside the city walls. What word is scratched onto the side of them'			=> { :a => "Trezzures" },
	'What is the missing word in the following epitaph \"Now .*_ lets her curtain down and pins it with a star.\"'												=> { :a => "Twilight" },
	'Who funds the free passage across the lake to the north of Ta\'Vaalor'																								=> { :a => "Qalinor" },
	'What metal is named after the Vaalor elves that discovered it'																										=> { :a => "Vaalorn" },
	'What type of fabric are the chairs in the entryway of Wyvern Keep upholstered in'																					=> { :a => "Velvet" },
	'What abandoned conveyance lies in the mud at the edge of Fethayl Bog'																								=> { :a => "Wagon" },
	'What wood is the furniture in the entryway of Wyvern Keep made of'																									=> { :a => "Walnut" },
	'The basin in the shrine located in the Marble Springs neighborhood of Ta\'Vaalor contains a mixture of flower petals\, oil and what other main ingredient'			=> { :a => "Water" },
	'The shard in the center of marble springs neighborhood of Ta\'vaalor points up and in what direction'																=> { :a => "West" },
	'A mound of what sort of chaff exists to the northeast of Yander\'s barn'																							=> { :a => "Wheat" },
	'The tall stalks of what sort of plant grow to the southwest of Barefoot Hill'																						=> { :a => "Wheat" },
	'What part of a ship decorates the wall of the Sea N\' Shore in the Legendary Rest'																					=> { :a => "Wheel" },
	'What colou?r is the building in the midst of the wildflower field'																									=> { :a => "White" },
	'What type of rose adorns the plaque in memory of Tinuldor Nondel in the cemetery'																					=> { :a => "Wild" },
	'What sort of tree grows just past the gates of the cemetery'																										=> { :a => "Willow" },
	'What creature is Ta\'Vaalor\'s City Hall named after'																												=> { :a => "Wyvern" },
	'The coral berry shrubs at the edge of the briar patch have what colou?r flowers'																					=> { :a => "Yellow" },
	'What type of trees grow in the orchard'																															=> { :a => "Apple" },
	'What fruit grows in the orchard'																																	=> { :a => "Apples" },
	'Where can one buy a blackjack'																																		=> { :a => "Armory" },
	'What colou?r hair does Holly have'																																	=> { :a => "Auburn" },
	'Where can you find Rolly Siphter'																																	=> { :a => "Bakery" },
	'Girvahk\'s shop widely known for his'																																=> { :a => "Bar" },
	'What do the ants encase near the lake'																																=> { :a => "Basket" },
	'What can be found lying around empty carts in the orchard'																											=> { :a => "Baskets" },
	'What does Ayniya carefully dab'																																	=> { :a => "Beeswax" },
	'What colou?r is the boulder in the apple tree orchard'																												=> { :a => "Black" },
	'What colou?r is Ronan\'s gate'																																		=> { :a => "Black" },
	'What colou?r eyes does Rolly have'																																	=> { :a => "Blue" },
	'What colou?r is the North Wall'																																	=> { :a => "Blue" },
	'What colou?r is the sphere'																																		=> { :a => "Blue" },
	'What is Kelph displaying'																																			=> { :a => "Bluebird" },
	'What can you find at the mouth of the pit'																															=> { :a => "Bones" },
	'What can you find littering the field on the West Road'																											=> { :a => "Boulders" },
	'What hangs above the armory'																																		=> { :a => "Breastplate" },
	'What colou?r is Kelph\'s hair'																																		=> { :a => "Brown" },
	'What is the curtain made of in the Ancient Shrine'																													=> { :a => "Burlap" },
	'What colou?r is Ayniya\'s hair'																																	=> { :a => "Chestnut" },
	'What do the parents tend as depicted by the panels'																												=> { :a => "Children" },
	'What can you find Holly selling'																																	=> { :a => "Chocolate" },
	'To what type of road does the tower lead'																															=> { :a => "Cobblestone" },
	'What can you find littering the dunes in the pine forest'																											=> { :a => "Cones" },
	'Walsor\'s store is a .* store.'																																=> { :a => "Corner" },
	'What is the woodcrafter\'s last name'																																=> { :a => "Crafyien" },
	'What colou?r is Kai\'s gate'																																		=> { :a => "Crimson" },
	'What colou?r is the gate outside of Kai\'s temple'																													=> { :a => "Crimson" },
	'What creature is commonly seen in the orchard'																														=> { :a => "Daggerbeak" },
	'Where can you buy a narrow gold ring'																																=> { :a => "Darbo" },
	'What is the name of the armorer'																																	=> { :a => "Dargeur" },
	'From whose shop can you purchase a visored helm'																													=> { :a => "Dargeur" },
	'In what state of condition is the house by the lake'																												=> { :a => "Disrepair" },
	'What covers Tyalosa'																																				=> { :a => "Dust" },
	'Marsaena is a member of the .* race.'																														=> { :a => "Dwarven" },
	'What colou?r is the gate to Vornavis'																																=> { :a => "Ebony" },
	'Dargeur is a member of the .* race.'																														=> { :a => "Elven" },
	'To what race does the lone fisherman belong'																														=> { :a => "Elven" },
	'The night comes softly with her velvety cloak\, wrapping me in warm .*'																						=> { :a => "Embrace" },
	'What surrounds the local school'																																	=> { :a => "Fence" },
	'What plant\, growing in the lower fields\, emits an aromatic scent from its tiny yellow flowers'																	=> { :a => "Fennel" },
	'What can you find opposite the bar in Girvahk\'s'																													=> { :a => "Fireplace" },
	'Along the forest road there is a boulder\, what shape does it resemble'																							=> { :a => "Fist" },
	'What does the merchant Beltheine sell'																																=> { :a => "Flowers" },
	'How many different cakes can you buy from the baker'																												=> { :a => "Four" },
	'Red is a member of the .*_ race.'																																=> { :a => "Giantman" },
	'What does Nerm have on his chin'																																	=> { :a => "Goatee" },
	'What colou?r is the thatch on the cottage near the orchard'																										=> { :a => "Golden" },
	'Where can you buy thrak hide boots'																																=> { :a => "Gornissa" },
	'Who is the cobbler of Solhaven'																																	=> { :a => "Gornissa" },
	'What does Kahlyr wear'																																				=> { :a => "Gown" },
	'What colou?r gown does Ayniya wear'																																=> { :a => "Green" },
	'What colou?r vest does Turask have on'																																=> { :a => "Green" },
	'Along the coast, near the foggy valley\, what sort of colou?r tint do the trees appear'																			=> { :a => "Grey" },
	'What colou?r are Walsor\'s suspenders'																																=> { :a => "Grey" },
	'What colou?r is Jyhm\'s hair'																																		=> { :a => "Grey" },
	'The pawnbroker\'s last name is .*'																																	=> { :a => "Gryhm" },
	'What kind of captain wanders the town|What sort of Captain wanders through town'																					=> { :a => "Guild" },
	'What race does Rolly belong to'																																	=> { :a => "Halfling" },
	'What kind of bushes can you find on the west road'																													=> { :a => "Holly" },
	'What structure stands near the lake'																																=> { :a => "Amaranth" },
	'What colou?r is Vlodimm\'s voice'																																	=> { :a => "Ivory" },
	'What is the name of the locksmith'																																	=> { :a => "Jyhm" },
	'The name of the jeweler is .*'																																	=> { :a => "Kahlyr" },
	'From whose shop can basal moss be purchased'																														=> { :a => "Kelph" },
	'What are the swans doing in front of the temple'																													=> { :a => "Kissing" },
	'What type of pond can you find in Ronan\'s courtyard'																												=> { :a => "Koi" },
	'What sort of skin does Will Oakum have'																															=> { :a => "Leathery" },
	'From whom can you buy a flask of absinthe'																															=> { :a => "Lem" },
	'What tree can be found budding'																																	=> { :a => "Linden" },
	'What type of tree is budding'																																		=> { :a => "Linden" },
	'Depicted in the panels\, what did the woodsman chop'																												=> { :a => "Lumber" },
	'What does the woodsman cut as depicted by the panels'																												=> { :a => "Lumber" },
	'What is the old woman\'s name'																																		=> { :a => "Mabel" },
	'What type of weapon is displayed in the case in Girvahk\'s'																										=> { :a => "Mace" },
	'Turask\'s last name is .*'																																=> { :a => "Maldib" },
	'Who is the weaponsmith'																																			=> { :a => "Marsaena" },
	'The poor section of town is called .*_'																														=> { :a => "MarshTown" },
	'From what metal is the anvil at the museum made of'																												=> { :a => "Mithril" },
	'What is on the ceiling of the basement in the museum'																												=> { :a => "Moss" },
	'What is Gornissa\'s gown made from'																																=> { :a => "Muslin" },
	'Who is the apprentice Locksmith'																																	=> { :a => "Nerm" },
	'What do the fishermen pull as depicted by the panels'																												=> { :a => "Nets" },
	'What colou?r is Dargeur\'s apron'																																	=> { :a => "Off-grey" },
	'What temple do the kissing swans lead to'																															=> { :a => "Oleani" },
	'What is the white swan sitting on some copper gates\, made from'																									=> { :a => "Ora" },
	'What colou?r are Turask\'s boots'																																	=> { :a => "Orange" },
	'What is wrong with the cat'																																		=> { :a => "Peglegged" },
	'What spans the canal beneath the trees'																															=> { :a => "Planks" },
	'What is outside of Saragassa\'s cottage'																															=> { :a => "Plaque" },
	'What critter can be found in Dargeur\'s shop'																														=> { :a => "Rat" },
	'Ouslanders garb is owned by .*.'																															=> { :a => "Red McKrieg" },
	'Tyalosa\'s last name is .*_'																																	=> { :a => "Rhus" },
	'What is the bell doing on the South Beach'																															=> { :a => "Ringing" },
	'What colou?r are the windows and awnings on Triton road'																											=> { :a => "Rose" },
	'What colou?r is Gertie\'s apron'																																	=> { :a => "Saffron" },
	'Who used to live in the house by the lake'																															=> { :a => "Sailor" },
	'The water in the Caverns contains what'																															=> { :a => "Salt" },
	'What can be seen surrounding a tower'																																=> { :a => "Scaffold" },
	'Lem\'s Clothes hang on him like a .* '																														=> { :a => "Scarecrow" },
	'What can you find standing near the surf on the South Beach'																										=> { :a => "Seagulls" },
	'What does Walsor jingle'																																			=> { :a => "Silver pieces" },
	'What is Lem\'s last name'																																			=> { :a => "Skinker" },
	'What does Tynira sell'																																				=> { :a => "Slippers" },
	'What do the farmers till as depicted by the panels'																												=> { :a => "Soil" },
	'What has Kelph captured and displays for all to see'																												=> { :a => "Songbird" },
	'What does Walsor have protruding'																																	=> { :a => "Stomach" },
	'What is Darbo\'s cottage made of'																																	=> { :a => "Stone" },
	'A ring of .* can be found on Jag Point.'																														=> { :a => "Stones" },
	'How many spheres can you find above the door at Walsors'																											=> { :a => "Three" },
	'Precise stitches are Tynira\'s .*'																																=> { :a => "Trademark" },
	'What is behind the altar in Charl\'s Quay'																															=> { :a => "Trident" },
	'What does Turask have on his head'																																	=> { :a => "Turban" },
	'From whom can a pair of saffron slippers be purchased'																												=> { :a => "Tynira" },
	'What is the famed Banaltra\'s cage made out of'																													=> { :a => "Vultite" },
	'What could the Broken tower once have been'																														=> { :a => "Watchtower" },
	'What can be found dripping to the floor in the Caverns'																											=> { :a => "Wax" },
	'What is mounted on the walls of Girvahk\'s shop'																													=> { :a => "Weapons" },
	'What can you find lying off the path to the north on the forest road'																								=> { :a => "Wheel" },
	'What colou?r is the dais in Lorminstra\'s temple'																													=> { :a => "White" },
	'What colou?r is the library'																																		=> { :a => "White" },
	'What surrounds the school'																																			=> { :a => "Yard" },
	'How long has Gornissa owned her shop'																																=> { :a => "Years" },
	'What colou?r ribbon does Kelph use to tie her hair'																												=> { :a => "Yellow" },
}

critter_info = {
	
	'troll skin' => { 
	:critter_name => "cave troll",
	:level => 16,
	:room_numbers => [ "5147", "5146", "5144", "5131", "5129", "5130", "5132", "5133", "5134", "5135", "5143", "5136", "5137", "5142", "5141", "5140", "5139", "5138" ],
	:boundary_rooms => [ 5128, 5148 ] },
	
	'spider leg' => { 
	:critter_name => "greater spider",
	:level => 8,
	:room_numbers => [ "5247", "5248", "5249", "5250", "5252", "5254", "5255", "5257", "5674", "5253", "5256", "5258", "5259", "5260", "5261", "5262", "5676", "5264", "5263" ],
	:boundary_rooms => [ 5228, 5223, 5251 ] },
	
	'ogre tusk' => { 
	:critter_name => "forest ogre",
	:level => 17,
	:room_numbers => [ "5247", "5248", "5249", "5250", "5252", "5254", "5255", "5257", "5674", "5253", "5256", "5258", "5259", "5260", "5261", "5262", "5676", "5264", "5263" ],
	:boundary_rooms => [ 5228, 5223, 5251 ] },
	
	'daggerbeak wing' => { 
	:critter_name => "black-winged daggerbeak",
	:level => 1,
	:room_numbers => [ "5444", "5447", "5448", "5450", "5445", "5443", "5453", "5452", "5455", "5451", "5458", "5459", "5456", "5454", "5464", "5462", "5461", "5463", "5460", "5446", "5449", "5442" ],
	:boundary_rooms => [ 4616, 5465 ] },
	
	'ghoul scraping' => { 
	:critter_name => "greater ghoul",
	:level => 3, 
	:room_numbers => [ "7263", "7253", "7252", "7272", "7262", "7251", "7254", "7255", "7256", "7257", "7258", "7259", "7265", "7268", "7267", "7266", "7270", "7264", "7271", "7261" ],
	:boundary_rooms => [ 7198, 7203, 7260 ] },
	
	'troll hide' => { 
	:critter_name => "forest troll",
	:level => 14,
	:room_numbers => [ "1272", "12998", "12999", "13000", "13001", "13002", "13003", "13004", "12996", "1271", "153", "12993", "5266", "5265", "5213" ],
	:boundary_rooms => [ 5211, 5267 ] },
	
	'cobra skin' => { 
	:critter_name => "cobra", 
	:level => 4,
	:room_numbers => [ "7263", "7253", "7252", "7272", "7262", "7251", "7254", "7255", "7256", "7257", "7258", "7259", "7265", "7268", "7267", "7266", "7270", "7264", "7271", "7261" ],
	:boundary_rooms => [ 7198, 7203, 7260 ] },
	
	'salamander skin' => { 
	:critter_name => "fire salamander",
	:level => 3,
	:room_numbers => [ "5169", "5170", "5171", "5172", "5173", "5174", "5175", "5176", "5177", "5179", "5181", "5182", "5183", "5184", "5185", "5188", "5187", "5186", "5167" ],
	:boundary_rooms => [ 5166, 5178, 5180 ] },
	
	'urgh hide' => { 
	:critter_name => "urgh",
	:level => 4,
	:room_numbers => [ "5056", "5057", "5058", "5059", "5060", "5061", "5062", "5063", "5064", "5065", "5066", "5067", "5070", "5071", "5072", "5073", "5074", "5075", "5076", "5077", "5078", "5080", "5081", "5082", "5083", "5055", "5084", "5085", "5086", "5087", "5088", "5089", "5090", "5091", "5092", "5093", "5094", "5095", "5096", "5097", "5098", "5099", "5100", "5101", "5102", "5103", "5104", "5105", "5106", "5107", "5108", "5109", "5110", "5111", "5112", "5113", "5114", "5115", "5116" ],
	:boundary_rooms => [ 5054, 9033, 5069, 5079, 5117 ] },
	
	'mangy kobold scalp' => { 
	:critter_name => "mongrel kobold",
	:level => 4, 
	:room_numbers => [ "5056", "5057", "5058", "5059", "5060", "5061", "5062", "5063", "5064", "5065", "5066", "5067", "5070", "5071", "5072", "5073", "5074", "5075", "5076", "5077", "5078", "5080", "5081", "5082", "5083", "5055", "5084", "5085", "5086", "5087", "5088", "5089", "5090", "5091", "5092", "5093", "5094", "5095", "5096", "5097", "5098", "5099", "5100", "5101", "5102", "5103", "5104", "5105", "5106", "5107", "5108", "5109", "5110", "5111", "5112", "5113", "5114", "5115", "5116" ],
	:boundary_rooms => [ 5054, 9033, 5069, 5079, 5117 ] },
	
	'coyote tail' => {
	:critter_name => "coyote",
	:level => 5,
	:room_numbers => [ "5056", "5057", "5058", "5059", "5060", "5061", "5062", "5063", "5064", "5065", "5066", "5067", "5070", "5071", "5072", "5073", "5074", "5075", "5076", "5077", "5078", "5080", "5081", "5082", "5083", "5055", "5084", "5085", "5086", "5087", "5088", "5089", "5090", "5091", "5092", "5093", "5094", "5095", "5096", "5097", "5098", "5099", "5100", "5101", "5102", "5103", "5104", "5105", "5106", "5107", "5108", "5109", "5110", "5111", "5112", "5113", "5114", "5115", "5116" ],
	:boundary_rooms => [ 5054, 9033, 5069, 5079, 5117 ] },
	
	'orc scalp' => { 
	:critter_name => "greater orc",
	:level => 8,
	:room_numbers => [ "1272", "12998", "12999", "13000", "13001", "13002", "13003", "13004", "12996", "1271", "153", "12993", "5266", "5265", "5213" ],
	:boundary_rooms => [ 5211, 5267 ] },
	
	'panther pelt' => { 
	:critter_name => "panther",
	:level => 15,
	:room_numbers => [ "5069", "5380", "5613", "5614", "5615", "5616", "5617", "5618", "5619", "5620", "5621", "5622", "5623", "5624", "5625", "5626", "5634", "5633", "5632", "5631", "5630", "5629", "5628", "5627" ],
	:boundary_rooms => [ 5068 ] },
	
	'crocodile snout' => { 
	:critter_name => "crocodile",
	:level => 9,
	:room_numbers => [ "5069", "5380", "5613", "5614", "5615", "5616", "5617", "5618", "5619", "5620", "5621", "5622", "5623", "5624", "5625", "5626", "5634", "5633", "5632", "5631", "5630", "5629", "5628", "5627" ],
	:boundary_rooms => [ 5068 ] },
	
	'shelfae scale' => { 
	:critter_name => "shelfae soldier",
	:level => 7,
	:room_numbers => [ "5069", "5380", "5613", "5614", "5615", "5616", "5617", "5618", "5619", "5620", "5621", "5622", "5623", "5624", "5625", "5626", "5634", "5633", "5632", "5631", "5630", "5629", "5628", "5627" ],
	:boundary_rooms => [ 5068 ] },
	
	'shelfae crest' => { 
	:critter_name => "shelfae chieftain",
	:level => 11,
	:room_numbers => [ "5069", "5380", "5613", "5614", "5615", "5616", "5617", "5618", "5619", "5620", "5621", "5622", "5623", "5624", "5625", "5626", "5634", "5633", "5632", "5631", "5630", "5629", "5628", "5627" ],
	:boundary_rooms => [ 5068 ] },
	
	'thrak hide' => { 
	:critter_name => "thrak",
	:level => 8,
	:room_numbers => [ "5149", "5150", "5151", "5152", "5153", "5155", "5154", "5156", "5157", "5158", "5159", "5160", "5162", "5163", "5164", "5165", "5166", "5161", "5148" ],
	:boundary_rooms => [ 5147, 5167 ] },
	
	'puma hide' => { 
	:critter_name => "puma",
	:level => 15,
	:room_numbers => [ "5149", "5150", "5151", "5152", "5153", "5155", "5154", "5156", "5157", "5158", "5159", "5160", "5162", "5163", "5164", "5165", "5166", "5161", "5148" ],
	:boundary_rooms => [ 5147, 5167 ] },
	
	'boar tusk'	=> { 
	:critter_name => "great boar",
	:level => 10,
	:room_numbers => [ "5149", "5150", "5151", "5152", "5153", "5155", "5154", "5156", "5157", "5158", "5159", "5160", "5162", "5163", "5164", "5165", "5166", "5161", "5148" ],
	:boundary_rooms => [ 5147, 5167 ] },
	
	'manticore tail' => {
	:critter_name => "manticore",
	:level => 9,
	:room_numbers => [ "5149", "5150", "5151", "5152", "5153", "5155", "5154", "5156", "5157", "5158", "5159", "5160", "5162", "5163", "5164", "5165", "5166", "5161", "5148" ],
	:boundary_rooms => [ 5147, 5167 ] },
	
	'whiptail stinger'	=> { 
	:critter_name => "whiptail",
	:level => 4,
	:room_numbers => [ "5127", "5125", "5126", "5204", "5206", "5208", "5210", "5211", "5212", "5214", "5215", "5216", "5217", "5218", "5219", "5220", "5221", "5222", "5223", "5224", "5226", "5227", "5228", "5229", "5230", "5231" ],
	:boundary_rooms => [ 5124, 5128, 5207, 5213, 5225, 5264 ] },
	
	'pale crab pincer' => {
	:critter_name => "pale crab",
	:level => 2,
	:room_numbers => [ "5127", "5125", "5126", "5204", "5206", "5208", "5210", "5211", "5212", "5214", "5215", "5216", "5217", "5218", "5219", "5220", "5221", "5222", "5223", "5224", "5226", "5227", "5228", "5229", "5230", "5231" ],
	:boundary_rooms => [ 5124, 5128, 5207, 5213, 5225, 5264 ] },
	
	'flowing white robe' => { 
	:critter_name => "sea nymph", 				
	:level => 2, 
	:room_numbers => [ "5127", "5125", "5126", "5204", "5206", "5208", "5210", "5211", "5212", "5214", "5215", "5216", "5217", "5218", "5219", "5220", "5221", "5222", "5223", "5224", "5226", "5227", "5228", "5229", "5230", "5231" ],
	:boundary_rooms => [ 5124, 5128, 5207, 5213, 5225, 5264 ] },
	
	'orc ear' => { 
	:critter_name => "dark orc",
	:level => 12,
	:room_numbers => [ "6909", "6914", "6911", "6910", "6926", "6913", "6912", "6915", "6925", "6924", "6916", "17095", "6917", "6918", "6920", "6919", "6921", "6922", "6923", "6927" ],
	:boundary_rooms => [ 6888 ] },
	
	'troll scalp' => { 
	:critter_name => "thunder troll", 				
	:level => 18, 
	:room_numbers => [ "5269", "5270", "5271", "5272", "5273", "5274", "5275", "5276", "5277", "5278", "5279", "5280", "5281", "5282", "5283", "5284", "5285", "5286", "5267" ],
	:boundary_rooms => [ 5287, 5266 ] },
	
}

item_info = {
	'arm greave'			=> { :item_cost => 40, 		:item_order_number => 19, 	:item_shop_room_number => 12813 },
	'chain hauberk'			=> { :item_cost => 1190, 	:item_order_number => 14, 	:item_shop_room_number => 12813 },
	'leather breastplate'	=> { :item_cost => 380,		:item_order_number => 7, 	:item_shop_room_number => 12813 },
	'metal aventail'		=> { :item_cost => 30, 		:item_order_number => 25, 	:item_shop_room_number => 12813 },
	'reinforced shield'		=> { :item_cost => 90, 		:item_order_number => 22, 	:item_shop_room_number => 12813 },
	'small chest'			=> { :item_cost => 100, 	:item_order_number => 8, 	:item_shop_room_number => 8664 },
	'heavy backpack'		=> { :item_cost => 90,	 	:item_order_number => 9, 	:item_shop_room_number => 8664},
	'gold lockpick'			=> { :item_cost => 2310, 	:item_order_number => 13, 	:item_shop_room_number => 5612 },
	'crystal amulet'		=> { :item_cost => 1560, 	:item_order_number => 2, 	:item_shop_room_number => 9278 },
	'silver wand'			=> { :item_cost => 1580, 	:item_order_number => 7, 	:item_shop_room_number => 9278 },
	'war hammer'			=> { :item_cost => 190, 	:item_order_number => 30, 	:item_shop_room_number => 12815 },
}

sol_rooms = [ 1432, 1427, 1426, 1425, 1431, 150, 1434, 1435, 1440, 13516, 1441, 9008, 9009, 9015, 9020, 9022, 9021, 9013, 9014, 9012, 9011, 9010, 1442, 1436, 594, 1444, 1445, 1446, 149, 1447, 1449, 1437, 1607, 1608, 3907, 3906, 3905, 1448, 1443, 13489, 1456, 1457, 1455, 1454, 1453, 1474, 1604, 1605, 1606, 1438, 1458, 1463, 1462, 1459, 1461, 1472, 1473, 1476, 1477, 1483, 5949, 1484, 1478, 1479, 1471, 1465, 1467, 1464, 1468, 1469, 1507, 1506, 1505, 1470, 1599, 1601, 1602, 1481, 1482, 1485, 1487, 1488, 1486, 1489, 1490, 1492, 1539, 1598, 1594, 1595, 1596, 1597, 1501, 1502, 1503, 1504, 1600, 1603, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1538, 1494, 1495, 1496, 1536, 1542, 1541, 1547, 1548, 1540, 1546, 1550, 1549, 1577, 1580, 1578, 1579, 1551, 1552, 1553, 1554, 1556, 1557, 1559, 1560, 1561, 1565, 1566, 1567, 1532, 1524, 1520, 1500, 1515, 1518, 1517, 1519, 1522, 1523, 1527, 1526, 1528, 1530, 1529, 1525, 1531, 1533, 1568, 1569, 1534, 14234, 1562, 1563, 1564, 1576, 1572, 1574, 1573, 1571, 1575, 1582, 1581, 1585, 1586, 1587 ]

Thread.new{
	wait_until { dead? }
	exit
}

stow_both = proc{
	fput "stow right" if checkright
	fput "stow left" if checkleft
}

go_to_room = proc{
	if Room.current.id != target_room
		move 'out' if checkpaths 'out'
		kill_script "go2" if running? "go2"
		wait_until { !running? "go2" }
		start_script 'go2', [ target_room ]
		wait_while{ running?('go2') }
	end
}

wander = proc {
	if !hunting_room_numbers.include?(Room.current.id.to_s)
		target_room = hunting_room_numbers.first
		go_to_room.call
		wander.call
	else
		room = Room.current
		acceptable_adjacent_rooms = room.wayto.keys & hunting_room_numbers
		not_visited_rooms = acceptable_adjacent_rooms.find_all { |r| not wander_rooms.include?(r) }
		if not_visited_rooms.empty?
			next_room = wander_rooms.find { |r| acceptable_adjacent_rooms.include?(r) }
		else
			next_room = not_visited_rooms[rand(not_visited_rooms.length)]
		end
		if next_room
			wander_rooms.delete(next_room)
			wander_rooms.push(next_room)
			way = room.wayto[next_room]
			if way.class == String
				move(way)
				new_room_stuff_to_do.call		
			else
				way.call
				new_room_stuff_to_do.call	
			end
		else
			target_room = Room.current.find_nearest(hunting_room_numbers.collect { |id| id.to_i }).to_s
			go_to_room.call
			new_room_stuff_to_do.call
		end
	end
}

new_room_stuff_to_do = proc{
	my_room = nil
	person_here = nil
	new_attack_sequence = Array.new
	attack_sequence.each{ |i| new_attack_sequence.push(i) }
	sleep 1
	person_here = checkpcs

	unless person_here
		if GameObj.loot.find{ |i| i.noun =~ /disk|coffin/ && i.name !~ /#{checkname}/ }
			person_here = true
		end
	end

	if person_here
		wander.call
	else
		my_room = Room.current.id
	end
}

check_hands = proc{
	if main_hand_id && GameObj.right_hand.id != main_hand_id
		until checkright.nil?
			waitrt?
			fput "stow #{checkright}"
			sleep 0.1
		end
		fput "get ##{main_hand_id}"
	elsif main_hand_id.nil? && checkright
		until checkright.nil?
			waitrt?
			fput "stow #{checkright}"
			sleep 0.1
		end
	end
	
	if off_hand_id && GameObj.left_hand.id != off_hand_id
		until checkleft.nil?
			waitrt?
			fput "stow #{checkleft}"
			sleep 0.1
		end
		fput "get ##{off_hand_id}"
		10.times{
			break if GameObj.left_hand.id == off_hand_id
			fput "remove #{off_hand_id}" if GameObj.left_hand.id != off_hand_id
			sleep 0.1
		}
	elsif off_hand_id.nil? && checkleft
		until checkleft.nil?
			waitrt?
			fput "stow #{checkleft}"
			sleep 0.1
		end
	end
}

skin_and_loot = proc{
	start_looting = nil
	start_looting = true if GameObj.npcs.find { |npc| (npc.status == 'dead') }
	if start_looting
		loop{
			if GameObj.npcs.find { |i| (i.status == 'dead') }
				waitrt?
				GameObj.npcs.each{ |i|
					if i.status =~ /dead/
						waitrt?
						if GameObj.left_hand.id != skinning_weapon_id && GameObj.right_hand.id != skinning_weapon_id
							until checkleft.nil?
								waitrt?
								fput "stow #{checkleft}"
								sleep 0.1
							end
							until GameObj.left_hand.id == skinning_weapon_id || GameObj.right_hand.id == skinning_weapon_id
								waitrt?
								fput "get ##{skinning_weapon_id}"
								sleep 0.1
							end
						end
						waitrt?
						result = dothistimeout "skin ##{i.id} with ##{skinning_weapon_id}", 2, /^You skinned|^You can only skin creatures\!|has already been skinned|You botched the job|^You cannot skin|You are unable to break through .* with .*/
						if result =~ /^You skinned|^You can only skin creatures\!|has already been skinned|You botched the job|^You cannot skin|You are unable to break through .* with .*/
							nil
						end
						until !GameObj.npcs.find{ |t| t.id == i.id}
							waitrt?
							fput "loot ##{i.id}"
							sleep 0.1
						end
					end
				}
			else
				break
			end
		}
	end
	check_hands.call
}

loot_room = proc{
	until checkleft.nil?
		waitrt?
		fput "stow #{checkleft}"
		sleep 0.1
	end
	if loot_all =~ /yes/i
		fput "loot room"
		while line = get
			if line =~ /#{needed_item}/
				number_of_items_gathered += 1
			elsif line =~ /Looted .* item|There is no loot/
				break
			end
		end
		if needed_item =~ /flowing white robe/
			GameObj.loot.each{ |i|
				if i.name =~ /#{needed_item}/
					fput "get ##{i.id}"
					fput "stow ##{i.id}"
				end
			}
		end
	else
		GameObj.loot.each{ |i|
			if i.name =~ /#{needed_item}/
				fput "get ##{i.id}"
				fput "stow ##{i.id}"
				number_of_items_gathered += 1
			end
		}
	end
	check_hands.call
}

stand_up = proc{
	until standing?
		waitrt?
		fput "stand"
		sleep 0.1
	end
}

recast_spells = proc{
	spells_to_keep_on.each{ |i| 
		i.strip!
		i.rstrip!
		Spell[i].cast(checkname) if Spell[i].known? && Spell[i].affordable? && !Spell[i].active?
	}
}

wound_check = proc{
	all_wounds = Wounds.head, Wounds.neck, Wounds.abs, Wounds.lhand, Wounds.rhand, Wounds.larm, Wounds.rarm, Wounds.chest, Wounds.back, Wounds.rleg, Wounds.lleg, Wounds.nerves, Wounds.leye, Wounds.reye, Scars.head, Scars.neck, Scars.abs, Scars.lhand, Scars.rhand, Scars.larm, Scars.rarm, Scars.chest, Scars.back, Scars.rleg, Scars.lleg, Scars.nerves, Scars.leye, Scars.reye
	if all_wounds.any?{ |i| i > 1 } || percenthealth < 60
		message_to_say = "You are wounded. Heading back to town then exiting. Once you have fixed yourself up run the script again."
		display_message.call
		waitrt?
		fput "stance defensive" if checkstance != "defensive"
		check_hands.call
		target_room = 1438
		go_to_room.call
		message_to_say = "You are wounded. I have brought you back to town. Once you have fixed yourself up run the script again."
		display_message.call
		exit
	end
}

mana_check = proc{
	if checkmana < minimum_mana
		message_to_say = "Your mana is lower than the minimum mana value you set in the setup menu. Heading back to town until to get mana."
		display_message.call
		target_room = 1438
		go_to_room.call
		message_to_say = "Waiting until you have 90% of your maximum mana."
		display_message.call
		wait_until{ percentmana <= 90 }
		my_room = nil
		target_room = hunting_room_numbers.first
		go_to_room.call
		new_attack_sequence = Array.new
		attack_sequence.each{ |i| new_attack_sequence.push(i) }
	end
}

attack_routine = proc{
	if my_room == Room.current.id
		waitrt?
		waitcastrt?
		if new_attack_sequence.count == 0
			new_attack_sequence = Array.new
			attack_sequence.each{ |i| new_attack_sequence.push(i) }
		end
		sleep 0.1
		waitrt?
		waitcastrt?
		wait_until { !stunned? }
		wait_until { !webbed? }
		fput "#{new_attack_sequence.first}"
		new_attack_sequence.shift
	end
	waitrt?
}

hunting_stuff = proc{
	check_hands.call
	target_room = hunting_room_numbers.first
	go_to_room.call
	my_room = nil
	target = nil
	new_attack_sequence = Array.new
	attack_sequence.each{ |i| new_attack_sequence.push(i) }
	loop{
		skin_and_loot.call if my_room == Room.current.id
		break if number_of_items_gathered >= required_number_of_items
		check_hands.call
		wound_check.call
		target = nil if target.status =~ /dead|gone/
		if target.nil?
			target = GameObj.npcs.find{ |i| i.name =~ /#{needed_critter}/ }
			fput "target ##{target.id}" if target
		end
		need_to_wander = nil
		need_to_wander = true if GameObj.loot.find{ |i| i.noun =~ /cloud/i }
		need_to_wander = true if my_room != Room.current.id
		need_to_wander = true if GameObj.targets.count == 0
		need_to_wander = true if target.nil? && kill_all !~ /yes/i
		recast_spells.call
		if need_to_wander
			fput "stance defensive" if checkstance != "defensive"
			loot_room.call if my_room == Room.current.id
			wander.call
		elsif !hunting_room_numbers.include?(Room.current.id.to_s)
			fput "stance defensive" if checkstance != "defensive"
			loot_room.call if my_room == Room.current.id
			grouphunt_go_2_that_room(hunting_room_numbers.first)
		else
			stand_up.call
			check_hands.call
			mana_check.call
			wound_check.call
			recast_spells.call
			attack_routine.call
		end
		sleep 0.1
	}
}

display_message = proc{
	_respond "##############################"
	_respond "##############################"
	_respond "##############################"
	_respond "##############################"
	_respond "##############################"
	_respond "#{message_to_say}"
	_respond "##############################"
	_respond "##############################"
	_respond "##############################"
	_respond "##############################"
	_respond "##############################"
}

turn_in_items = proc{
	stow_both.call
	item_name = item_name.chop if item_name[-1] == "s"
	number_of_items.times{
		break if current_task == "Finished."
		stow_both.call
		container = GameObj.inv.find{ |i| i.name =~ /#{UserVars.lootsack}/i }
		if container.nil?
			message_to_say = "Could not find your lootsack. You must set your lootsack in order to use this script. To set it do:\n;vars set lootsack=LOOTSACK_NAME\nFor example: ;vars set lootsack=cloak\nKeep in mind the script will look for needed skins and items in this container.\nNOTE: YOU SHOULD MAKE YOUR LOOTSACK AND STOW CONTAINER THE SAME CONTAINER.\nTo set your STOW container do: stow set NAME\nFor example: stow set cloak\nAfter you have finished doing this then run the script again."
			display_message.call
			exit
		end
		waitrt?
		item_found = nil
		until item_found
			item = container.contents.find{ |i| i.name =~ /#{item_name}/ && !item_ids_to_ignore.include?(i.id) }
			if item
				fput "get ##{item.id}"
				wait_until { checkright || checkleft }
				fput "swap" if checkleft
				wait_until{ checkright }
				fput "mark my #{checkright} status"
				while line = get
					if line =~ /^Your .* has been permanently marked as unsellable|^Your .* has been marked as unsellable/
						if checkright
							item_ids_to_ignore.push(GameObj.right_hand.id)
						elsif checkleft
							item_ids_to_ignore.push(GameObj.left_hand.id)
						end
						stow_both.call
						break
					elsif line =~ /^Your .* is not marked as unsellable/
						item_found = true
						break
					end
				end
			else
				break
			end
		end
		if checkright.nil? && checkleft.nil?
			break
		else
			fput "swap" if checkleft
			wait_until{ checkright }
			if current_task == "skins"
				fput "offer my #{checkright}"
			else
				new_name = checkright
				fput "put my #{new_name} on altar"
				fput "offer #{new_name} on altar"
			end
			while line = get
				if line =~ /\"only (\d+) more to go to complete your/
					number_of_items = $1.to_i
					break
				elsif line =~ /You have completed your (gift|service)/
					current_task = "Finished."
					break
				end
			end
		end				
	}
}

visit_poobah = proc{
	target_room = 4595
	go_to_room.call
	target_room = 4593
	go_to_room.call
	while line = get
		if line =~ /The powers you have been granted are but a merest fraction of what is available to the truly worthy\!|Therefore\, if at any time you feel that you cannot continue|you are not the first to travel down this dangerous road/
			break
		elsif line =~ /Your blood runs cold as the Poohbah laughs at you\!/
			message_to_say = "Congratulations! You are now a master in COL!"
			display_message.call
			exit
		end
	end
}

check_task = proc{
	fput "society task"
	while line = get
		if line =~ /Report to the High Taskmaster for your initial instructions\.|You have completed your task from the Grand Inquisitor\.  Report to the High Taskmaster for your next promotion\./
			target_room = 4594
			go_to_room.call
			target_room = 4595
			go_to_room.call
			while line = get
				if line =~ /This secret sign will allow you to discreetly identify yourself to other members of the lodge\./
					target_room = 4596
					go_to_room.call
					waitfor "As this is your first service, we shall make it a simple one"
					break
				elsif line =~ /Congratulations\, #{Char.name}\!  By the power invested in me by the Grand Poohbah/
					current_task = "Poobah" if line =~ /I declare you to be a Master of rank 20\!/
					break
				elsif line =~ /The High Taskmaster looks at you\, consults her notes\, and then announces in a loud voice\: \"The Poohbah would like to have a word with you/
					current_task = "Poobah"
					break
				elsif line =~ /I know you have completed the requirements for advancement in rank/
					move 'south'
					message_to_say = "You must wait before you can advance in your rank. You can either stop the script now and restart it after enough time has passed, or you can leave it running and after enough time has passed it will continue on."
					display_message.call
					wait_until { !Spell[9011].active?}
					check_task.call
				end
			end
			visit_poobah.call if current_task == "Poobah"
			current_task = nil
			check_task.call
		elsif line =~ /Report to the Master of Services for your next task\./
			target_room = 4595
			go_to_room.call
			target_room = 4596
			go_to_room.call
			waitfor "it seems you need to be assigned a service"
			check_task.call
		elsif line =~ /You have been tasked to present the Master of Services with (\d+) more (.*)\./
			current_task = "skins"
			number_of_items = $1.to_i
			item_name = $2
			message_to_say = "Checking to see if you have the necessary skins."
			display_message.call
			target_room = 4596
			go_to_room.call
			turn_in_items.call
			if current_task == "Finished."
				check_task.call
			else
				hunting_room_numbers = nil
				item_name = item_name.chop if item_name[-1] == "s"
				if critter_info.include?(item_name)
					hunting_room_numbers = critter_info[item_name][:room_numbers]
					needed_critter = critter_info[item_name][:critter_name]
					needed_item = item_name
					required_number_of_items = number_of_items
					number_of_items_gathered = 0
					if attack_sequence
						if critter_info[item_name][:level] > max_level
							message_to_say = "The required skins come from #{critter_info[item_name][:critter_name]}s which are level #{critter_info[item_name][:level]} and in the setup menu you have listed #{max_level} as the highest level critter you want this script to automatically hunt. You can either adjust the settings and run the script again, or gather the skins by other means then run the script again.\nYou need to obtain #{number_of_items} #{item_name}s, which can be skinned from #{critter_info[item_name][:critter_name]}s (level #{critter_info[item_name][:level]}).\nThe boundary rooms for this hunting area are: #{critter_info[item_name][:boundary_rooms].join(', ')}."
							display_message.call
							exit
						else
							message_to_say = "Going to gather #{number_of_items} #{item_name}s from #{critter_info[item_name][:critter_name]}s."
							display_message.call
							hunting_stuff.call
							check_task.call
						end
					else
						message_to_say = "You need to obtain #{number_of_items} #{item_name}s, which can be skinned from #{critter_info[item_name][:critter_name]}s (level #{critter_info[item_name][:level]}).\nThe boundary rooms for this hunting area are: #{critter_info[item_name][:boundary_rooms].join(', ')}.\n\nOnce you have obtained the necessary skins run this script again and I will turn them in and continue on.\nIf you want the script to automatically gather skins and flowing white robes (which would require you to hunt things) then do ;colmaster setup and fill out the required information in the setup window. Keep in mind the hunting code contained within this script is rudimentary but can get the job done."
						display_message.call
						exit
					end
				else
					message_to_say = "You need to obtain #{number_of_items} #{item_name}s. Unfortunately the critter info for this skin is not in this script's database. If you wish to help complete this script find the necessary info (critter name, critter level, lich room numbers where critter can be found) and give the information to Tgo01/Dreaven. Once you have obtained the necessary skins run this script again and I will turn them in and continue on."
					display_message.call
					exit
				end
			end
		elsif line =~ /You have completed your task from the Master of Services\.  Report to the Master of Gifts for your next task\./
			target_room = 4595
			go_to_room.call
			target_room = 4598
			go_to_room.call
			while line = get
				break if line =~ /\"As this is your first gift\, we shall make it an easy one\,\"|it seems you need to be assigned a gift/
			end
			check_task.call
		elsif line =~ /You have completed your task from the Master of Gifts\.  Report to the Grand Inquisitor for your next task\.|You have been tasked to answer the following question to the Grand Inquisitor\'s satisfaction/
			target_room = 4595
			go_to_room.call
			target_room = 4597
			go_to_room.call
			got_the_answer = nil
			while line = get
				answers.each{ |key,value|
					if line =~ /#{key}/i
						fput "answer #{answers[key][:a]}"
						got_the_answer = true
						break
					end
				}
				if line =~ /I thought I had a question ready for you\, but I don\'t seem to have found it/
					sleep 2
					target_room = 4595
					go_to_room.call
					target_room = 4597
					go_to_room.call
				end
				break if got_the_answer
			end
			check_task.call
		elsif line =~ /You have been tasked to present the Master of Gifts with (\d+) more offerings of (an?|some) (.*)\./
			current_task = "gifts"
			item_cost = nil
			number_of_items = $1.to_i
			item_name = $3
			item_name = item_name.chop if item_name[-1] == "s"
			if item_info.include?(item_name)
				item_cost = item_info[item_name][:item_cost]
				item_order_number = item_info[item_name][:item_order_number]
				item_shop_room_number = item_info[item_name][:item_shop_room_number]
				total_item_cost = ((number_of_items * item_cost) * 1.5).floor
			end
			message_to_say = "Checking to see if you have the necessary items."
			display_message.call
			target_room = 4598
			go_to_room.call
			turn_in_items.call
			if current_task == "Finished."
				check_task.call
			elsif item_name =~ /flowing white robe/
				hunting_room_numbers = critter_info[item_name][:room_numbers]
				needed_critter = critter_info[item_name][:critter_name]
				needed_item = item_name
				required_number_of_items = number_of_items
				number_of_items_gathered = 0
				if attack_sequence
					if 2 > max_level
						message_to_say = "#{item_name}s come from #{critter_info[item_name][:critter_name]}s which are level #{critter_info[item_name][:level]} and in the setup menu you have listed #{max_level} as the highest level critter you want this script to automatically hunt. You can either adjust the settings and run the script again, or gather the items by other means then run the script again.\nYou need to obtain #{number_of_items} #{item_name}s, which can be looted from #{critter_info[item_name][:critter_name]}s (level #{critter_info[item_name][:level]}).\nThe boundary rooms for this hunting area are: #{critter_info[item_name][:boundary_rooms].join(', ')}."
						display_message.call
						exit
					else
						message_to_say = "Going to gather #{number_of_items} #{item_name}s from #{critter_info[item_name][:critter_name]}s."
						display_message.call
						hunting_stuff.call
						check_task.call
					end
				else
					message_to_say = "You need to obtain #{number_of_items} #{item_name}s, which can be looted from #{critter_info[item_name][:critter_name]}s (level #{critter_info[item_name][:level]}).\nThe boundary rooms for this hunting area are: #{critter_info[item_name][:boundary_rooms].join(', ')}.\n\nOnce you have obtained the necessary items run this script again and I will turn them in and continue on.\nIf you want the script to automatically gather skins and flowing white robes (which would require you to hunt things) then do ;colmaster setup and fill out the required information in the setup window. Keep in mind the hunting code contained within this script is rudimentary but can get the job done."
					display_message.call
					exit
				end
			elsif item_cost == nil
				message_to_say = "You need #{number_of_items} #{item_name}s. Unfortunately this item isn't in this script's database. Once you have obtained the necessary number of the required items run this script again and I will turn in the items and continue on."
				display_message.call
				exit
			else
				message_to_say = "Buying necessary items."
				display_message.call
				move 'out' if checkpaths 'out'
				kill_script "go2" if running? "go2"
				wait_until { !running? "go2" }
				start_script 'go2', [ 'bank', '--disable-confirm' ]
				wait_while{ running?('go2') }
				fput "depo all"
				result = dothistimeout "withdraw #{total_item_cost} silvers", 3, /and then hands you .* silvers?\.|you don\'t seem to have that much in the account\./
				if result =~ /and then hands you .* silvers?\./
					nil
				elsif result =~ /you don\'t seem to have that much in the account/
					message_to_say = "You don't have enough silvers to finish this task. You need at least #{total_item_cost} silvers to finish. This script uses the Solhaven bank exclusively so keep your bank account there stocked with silvers to finish mastering COL."
					display_message.call
					exit
				end
				target_room = item_shop_room_number
				go_to_room.call
				stow_both.call
				number_of_items.times{
					fput "order #{item_order_number}"
					fput "buy"
					fput "stow right"
				}
				target_room = 4598
				go_to_room.call
				turn_in_items.call
				check_task.call
			end
		end
	end
}

if Char.level < 3
	message_to_say = "You must be at least level 3 to join a society."
	display_message.call
	exit
end

if script.vars[1] =~ /setup/i
	setup.call
	exit
end

stow_both.call

if skinning_weapon
	until checkright
		fput "get my #{skinning_weapon}"
		sleep 0.1
	end
	skinning_weapon_id = GameObj.right_hand.id
end

until checkright.nil?
	fput "stow #{checkright}"
	sleep 0.1
end

if main_hand
	until checkright
		fput "get my #{main_hand}"
		sleep 0.1
	end
	main_hand_id = GameObj.right_hand.id
end

if off_hand
	until checkleft
		if main_hand == off_hand
			fput "get my other #{off_hand}"
		else
			fput "get my #{off_hand}"
		end
		sleep 0.1
	end
	off_hand_id = GameObj.left_hand.id
end

check_hands.call	

if UserVars.lootsack.nil?
	message_to_say = "You must set your lootsack in order to use this script. To set it do:\n;vars set lootsack=LOOTSACK_NAME\nFor example: ;vars set lootsack=cloak\nKeep in mind the script will look for needed skins and items in this container.\nNOTE: YOU SHOULD MAKE YOUR LOOTSACK AND STOW CONTAINER THE SAME CONTAINER.\nTo set your STOW container do: stow set NAME\nFor example: stow set cloak\nAfter you have finished doing this then run the script again."
	display_message.call
	exit
end

fput "society"
while line = get
	if line =~ /(Guardians of Sunfist|Order of Voln)/i
		sleep 1
		message_to_say = "You are currently a member of #$1. You need to leave your current society if you wish for this script to join and master COL for you."
		display_message.call
		exit
	elsif line =~ /You are a member in the Council of Light at rank 20\./
		current_task = "Poobah"
		break
	elsif line =~ /You are a Master in the Council of Light\./
		sleep 1
		message_to_say = "You are already a master in COL, this script can do nothing for you."
		display_message.call
		exit
	elsif line =~ /Council of Light/
		current_task = "Check task."
		break
	elsif line =~ /You are not a member of any society at this time\./
		sleep 1
		current_task = "Join COL."
		break
	end
end
if current_task == "Check task."
	check_task.call
elsif current_task == "Poobah"
	visit_poobah.call
elsif current_task == "Join COL."
	message_to_say = "You are not currently a member of COL. If you wish for this script to join COL in Solhaven then simply NOD. Otherwise exit this script by typing ;kill colmaster"
	display_message.call
	waitfor "You nod."
	message_to_say = "Your lootsack and STOW container should be the same container.\nTo set your loot sack do:\n;vars set lootsack=LOOTSACK_NAME\nFor example: ;vars set lootsack=cloak\nTo set your STOW container do: stow set NAME\nFor example: stow set cloak\nOnce you have done this NOD to move on. Otherwise exit this script by typing ;kill colmaster"
	display_message.call
	waitfor "You nod."
	message_to_say = "Do you currently have the invitation from the haggard matron?\nIf yes then enter NOD and we'll go to the Poobah to join COL.\nIf no then enter SHAKE and I will find the haggard matron and get the invitation then I'll go to the Poobah to join COL."
	display_message.call
	while line = get
		if line =~ /You nod\./
			current_task = "Find Poobah"
			break
		elsif line =~ /Shake what\?/
			current_task = "Find matron"
			break
		end
	end
	if current_task == "Find matron"	
		temp_rooms = Array.new
		sol_rooms.each{ |i| temp_rooms.push(i) }
		until GameObj.npcs.find {|i| i.name =~ /matron/ }
			if temp_rooms.count == 0
				temp_rooms = Array.new
				sol_rooms.each{ |i| temp_rooms.push(i) }
			end
			target_room = Room.current.find_nearest(temp_rooms)
			move 'out' if checkpaths 'out'
			kill_script "go2" if running? "go2"
			wait_until { !running? "go2" }
			start_script 'go2', [ target_room.to_s ]
			wait_while{ running?('go2') }
			temp_rooms.delete(target_room)
		end
		message_to_say = "Found the matron! Now we just need to wait until she invites us to join COL."
		display_message.call
		while line = get
			if line =~ /(^YOU RESOLVE TO REVEAL WHAT YOU HAVE LEARNED TO NO ONE ELSE\!|^\"You are one of the special ones\,\" whispers the haggard matron\.|^\"Take a good close look at the goblin\,\" whispers the haggard matron)/
				message_to_say = "Got the invitation. Going to the Poobah to join COL."
				display_message.call
				break
			elsif line =~ /A haggard matron totters (.*)\, staring down at her feet as she shuffles along\./
				move "#{$1}"
			end
		end
	end
	target_room = 4593
	go_to_room.call
	while line = get
		if line =~ /\"I will never betray the council\"/
			fput "say I will never betray the council"
			break
		end
	end
	check_task.call
end