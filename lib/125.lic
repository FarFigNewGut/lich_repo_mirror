=begin
    Script that pops boxes with 125.
   
    Uses phase (704) first to see if box has glyph or not

    Author: Dantax
 
=end
 
# Config
#popping_room = "479"
#supernode_room = "228"
 
popping_room = "1993"
supernode_room = "supernode"
 
 
# Initialize Variables
boxes = []
nonMagicalBoxes = 0
magicalBoxes = 0
 
get_boxes = proc {
    GameObj.containers.to_a.each { |container|
        boxes += container[1].find_all { |item| item.type.include?('box') }        
    }
 
    nonMagicalBoxes = boxes.find_all { |item| !(item.name =~ /mithril|enruned/)}.length
    magicalBoxes = boxes.find_all { |item| item.name =~ /mithril|enruned/}.length
}
 
run_to_supernode = proc {
    start_script "go2", ["#{supernode_room}"]
    wait_while { running? "go2" }
}
 
call_sloot = proc { |sell|
    if sell
        start_script "sloot", ["sell", "lock"]
    else
        start_script "sloot"
    end
   
    wait_while { running? "sloot" }
}
 
run_to_popping_room = proc { |tries|
    start_script "go2", ["#{popping_room}"]
    wait_while { running? "go2" }
 
    # Make sure no one is here
    if GameObj.pcs.nil?
        fput "justice status"
        while string = get
            if string =~ /You sense that your surroundings are calm/
                run_to_supernode.call
                echo "Popping room under justice laws, exiting..."
                exit
            elsif string =~ /There is no justice other than your own out here/
                break
            end
        end
    elsif tries < 3
        sleep(5)
        run_to_popping_room.call(tries + 1)
    else
        run_to_supernode.call
        echo "Popping room occupied, exiting..."
        exit   
    end
}
 
sell_silver_slabs = proc {
    start_script "go2", ["gemshop"]
    wait_while { running? "go2" }  
   
    slabs = []
    GameObj.containers.to_a.each { |container|
        slabs += container[1].find_all { |item| item.name == 'rough slab of silver' }          
    }  
   
    slabs.each { |slab|
        fput "get ##{slab.id}"
        fput "sell ##{slab.id}"
       
        sleep(0.2)
    }
}
 
pop_boxes = proc {
    fput "stow all"
   
    # Drop each box
    boxes.each { |box|
        current_box = nil;
       
        if !(box.name =~ /mithril|enruned/)
            current_box = box;
            fput "get ##{box.id}"
            sleep(0.2)
                       
            # Check to see if box is phased or glyphed
            ## if box is not shifting, then try to phase it
            if box.name !~ /shifting/
                match_result = ""
                while match_result == "" || match_result =~ /Spell Hindrance for/
           
                    wait_while { checkmana < 4 }
                   
                    waitcastrt?
                    fput "prep 704"
                    fput "cast ##{box.id}"
                   
                    # match resists, also check for spell hindrance
                    while string = get
                        if string =~ /becomes momentarily insubstantial|resists the effects of your magic|Spell Hindrance for/
                            match_result = string
                            break
                        end
                    end
                end
               
                if match_result =~ /resists the effects of your magic/
                    fput "stow ##{box.id}"
                    nonMagicalBoxes = nonMagicalBoxes - 1
                    magicalBoxes = magicalBoxes + 1
                    next
                end
            end
           
            # The box could have been phased, so reassign current_box here and try to drop it
            # If a box was previously phased, we need to get the new id from right_hand and drop it again
            #   Phase messes up the variable, so check the name and the type (since type can be nil)
            while !GameObj.right_hand.id.nil? && (GameObj.right_hand.type.include?('box') || GameObj.right_hand.name =~ /box|trunk|coffer|chest/)
                current_box = GameObj.right_hand
                fput "drop ##{current_box.id}"
            end
           
            sleep(1)
           
            while checkmana < 25 do
               sleep(10)
               
               fput "mana pulse"
               waitcastrt?
               sleep(0.2)
            end
                                   
            # check mana to see if we can cast 125
            if Spell[125].affordable?
                waitcastrt?
                fput "prep 125"
                fput "cast ##{current_box.id}"
            end
        end
    }
   
    # Check to see if only glyphed boxes
    if magicalBoxes > 0 && nonMagicalBoxes == 0
        next
    end
   
    echo "Waiting for boxes to be popped"
   
    # Loot all the content
    wait_until { GameObj.loot.find_all { |item| item.type.include?('box') }.length == 0 }
   
    call_sloot.call(false)
}
 
fput "sheathe"
fput "sheathe"
 
get_boxes.call
 
if nonMagicalBoxes === 0
    echo "No nonMagical boxes - no need to pop"
    echo "Magical boxes still on person: #{magicalBoxes}"  
   
    if magicalBoxes > 0
        call_sloot.call(true)
    end
   
    # Pull out logic enhancives
    fput "get silv knife from harn"
    fput "get silv knife from harn"
   
    exit
end
 
run_to_popping_room.call(0)
 
 
if Room.current.id == popping_room.to_i
    sleep(0.5)
 
    echo "Starting popping routine"
    pop_boxes.call
   
    echo "Selling slabs"
 
    # Go to gemshop and sell slabs of silver
    sell_silver_slabs.call
   
    echo "Running sloot to sell everything else"
 
    # sell everything else
    call_sloot.call(true)
   
    echo "All done, running back to supernode"
   
    run_to_supernode.call
   
    # Pull out logic enhancives
    fput "get silv knife from harn"
    fput "get silv knife from harn"
else
    run_to_supernode.call
   
    echo "Not in correct room, running to node and exiting"
end
