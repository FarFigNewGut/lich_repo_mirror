def get_lines(command, regex)
  lines = []
  regex = Regexp.union(regex, /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./)

  loop {
    lines = Lich::Util.quiet_command_xml(command, regex)
    if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
      waitrt?
      next
    else
      break
    end
  }

  return lines
end

def parse_line(line)
  patterns = {
    %r{You currently have ([\d,]+) unspent bounty points.} => "Available Points: %s",
    %r{You have ([\d,]+) expedited task reassignment vouchers remaining.} => "        Vouchers: %s",
    %r{You are not currently assigned a task.  You are eligible for new task assignment.} => "     Next Bounty: Available",
    %r{You are not currently assigned a task.  You will be eligible for new task assignment in (.*).} => "     Next Bounty: %s",
    %r{Go report to the sentry} => "  Current Bounty: Talk to guard",
    %r{The local healer} => "  Current Bounty: Talk to healer",
    %r{The local alchemist} => "  Current Bounty: Talk to alchemist",
    %r{The local gem dealer} => "  Current Bounty: Talk to gem dealer",
    %r{The local furrier} => "  Current Bounty: Talk to furrier",
    %r{You have been tasked to suppress (.*) activity in (.*).  You need to kill (\d+) .* them to complete your task.} => "  Current Bounty: kill creatures\n\n         Creature: %s\n         Location: %s\n           Amount: %s",
    %r{You have been tasked to recover (.*) that an unfortunate citizen lost after being attacked by (.*) in (.*).  The} => "  Current Bounty: retrieve heirloom\n\n        Heirloom: %s\n        Creature: %s\n        Location: %s",
    %r{You have been tasked to retrieve (\d+) (.*) of at least} => "  Current Bounty: procure skins\n\n            Amount: %s\n             Skins: %s",
    %r{The gem dealer in (.*), .*, has received orders from multiple customers requesting (.*).  You have been tasked to retrieve (\d+) of them.} => "  Current Bounty: procure gems\n\n          Location: %s\n           Gems: %s\n          Amount: %s",
    %r{is working on a concoction that requires .*>\w+ (.*)</d> found in the (.*).  These samples must be in pristine condition.  You have been tasked to retrieve (\d+) samples.} => "  Current Bounty: procure herbs\n\n            Herb: %s\n        Location: %s\n          Amount: %s",
      %r{You have been tasked to hunt down and kill a particularly dangerous (.*) that has established a territory in (.*).  You can} => "  Current Bounty: kill dangerous creature\n\n         Creature: %s\n       Location: %s",
    %r{A local divinist has had visions of the child fleeing from (.*) in the (.*). Find} => "  Current Bounty: rescue child\n\n        Creature: %s\n        Location: %s",
    %r{A local divinist has had visions of the child fleeing from (.*) in the (.*). Find} => "  Current Bounty: rescue child\n\n        Creature: %s\n        Location: %s",
    %r{upcoming journey.  Go to (.*) and WAIT for .* to meet you there.  You must guarantee .* safety to (.*) as soon} => "  Current Bounty: escort\n\nStarting Location: %s\n  Ending Location: %s"
  }

  patterns.each do |pattern, response_template|
    match = pattern.match(line)
    return response_template % match[1] if match.length <= 2
    return response_template % [match[1], match[2]] if match.length == 3
    return response_template % [match[1], match[2], match[3]] if match.length == 4
  end

  nil
end

lines = get_lines("bounty", /<a exist=".*?your Adventurer's Guild information is as follows/i)


lines.each do |line|
  response = parse_line(line)
  respond(response) if response
end
