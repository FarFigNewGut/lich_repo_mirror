# Box pool script
#
# ***Contributors***
# Tykus
# Licel
# Selfane
# Lieo 
#
# This script will, if you have boxes to drop off, go to the locksmith pool, deposit boxes into the pool, then loot any you have waiting for you
# Otherwise it exits
#
# I have the script set to withdraw 10k from the bank before hitting the pool...Hopefully this isn't too much
#
#
# author: Glaves
# tags: locksmith, picker, pool, locksmith pool, picking, boxes, loot, locksmith, locksmithing, rogue
# version: 1.33
#
# **Change Log**
# 1.00 - intial release
# 1.01 - Added RR waste bin
# 1.02 - added Icemule (Boss) NPC
# 1.03 - Added plinite support
# 1.04 - Added very basic disk logic (you still need a box in your inventory to trigger the intial deposit, but it will check your disk while at the pool)
# 1.05 - Removed the need for Foreach, added better disk logic, fixed wastebins
# 1.06 - Added Solhaven NPC
# 1.07 - Fixed wastebin in Solhaven, added plucking for plinites
# 1.08 - Updated Plinite handling logic 
# 1.09 - Should have the RT issue fixed - Thank you Lostranger
# 1.10 - Updated the disk logic - Reverted change to RT back to a dumber hard pause
# 1.11 - Added the ability to only run the looting portion of the script ;PoolParty loot
# 1.12 - Props to Licel - Added a help menu, you can now set your tip ;poolparty tip ## - LICEL!
# 1.13 - Fixed syntax with new Tip setting feature
# 1.14 - Added a check to make sure you have your lootsack set
# 1.15 - Added the ability to toggle waiting for a disk ;Poolparty skipdiskwait to toggle- Licel
# 1.16 - Fixed plinites being put in the wastebin - Thank you Sentral!
# 1.17 - Added Zul Logoth
# 1.18 - Added Canister to trashbins - Sped up looting a bit
# 1.19 - Fixed issue with the flipable coins
# 1.20 - Shout to Selfane - Added ability to toggle between percentage or flat tip - Selfane
# 1.21 - Added SETTINGS - Check your current settings ;poolparty settings
# 1.22 - Fixed a Typo!, oops.
# 1.23 - Chaged Vars to regex for case insensitive
# 1.24 - Will now open lootsack before running logic - Shout out to Gidion for the suggestion!
# 1.25 - Apparently using regex for the vars was bad.  i fixed it
# 1.26 - Had to move where/when the script opens your lootsack so it wasn't annoying while changing settings
# 1.27 - Added logic for items left in boxes before trashing 
# 1.28 - fixed not defaulting to percentage based tip
# 1.29 - Fixed an issue with the flat/silver thing not working right - Selfane
# 1.30 - Ooops - But i fixed it
# 1.31 - Added a check for a full lootsack
# 1.32 - Fixed wandering gnome npc issue on FWI - Shout to Lieo for catching the bug!
# 1.32 - Added check another check for loot still in boxes
# 1.33 - FIXED!!!!  The stupid shit with peoples disks/names matching inside the regex and then trying to use it as a wastebin
#
# HUGE Shout out to Tykus for helping me debug a bunch of stuff and showing me a couple tricks with this one
# It would've taken me forever without him helping me out.
#
# If you find any bugs please report them to Glaves#8902 on discord


loot_sack = UserVars.lootsack
unless loot_sack
	puts "#{monsterbold_start} ******WARNING UserVars.lootsack NOT DEFINED ****** #{monsterbold_end}"
	echo " "
    echo    "Please set your loot sack with a",
            "command like:",
            "    ;vars set lootsack=backpack",
            "",
            "Use only the noun (no \"my\" or adjectives).",
            "",
            "This will only work with containers you are",
            "wearing or holding."

    exit
end

if script.vars[1].nil? and CharSettings['tip'].nil?
	echo "Defaulting to a 25% tip amount. Please see #{$clean_lich_char}#{script.name} help"
	CharSettings['tip']=25
end

if script.vars[1].nil? and CharSettings['tiptype'].nil?
	echo "Defaulting to a percentage tip amount. Please see #{$clean_lich_char}#{script.name} help"
	CharSettings['tiptype']='percent'
end


if script.vars[1] == "skipdiskwait"
	mySetting = CharSettings['skipdiskwait']
	if mySetting.nil? or mySetting == 'no'
		CharSettings['skipdiskwait'] = 'yes'
	else
		CharSettings['skipdiskwait'] = 'no'
	end

	if CharSettings['skipdiskwait'] == 'yes'
		echo "Script will no longer wait for a disk to show up."
	else
		echo "Script will wait for a disk to show up."
	end
	exit
end

if script.vars[1] == "help"
	echo "Thank you for your interest in #{$clean_lich_char}#{script.name}" 
	echo "                                                                                                   " 
	echo "Usage:                                                                                             " 
	echo "#{$clean_lich_char}#{script.name} with no arguments to run.                                                               "
	echo "                                                                                                   " 
	echo "#{$clean_lich_char}#{script.name} help to get this menu.                                                                  "
	echo "                                                                                                   " 
  echo "#{$clean_lich_char}#{script.name} TIP 25 to set tip to 25.                                                                "
  echo "                                                                                                   "
  echo "#{$clean_lich_char}#{script.name} TIPTYPE <Percent/flat> Toggle between percentage/flat based tip                         "
  echo "                                                                                                   " 
	echo "#{$clean_lich_char}#{script.name} LOOT to check for boxes in the pool.                                                    "
	echo "                                                                                                   "
	echo "#{$clean_lich_char}#{script.name} SKIPDISKWAIT to toggle whether or not this script waits for a floating disk to catch up."
	echo "                                                                                                   "
	echo "#{$clean_lich_char}#{script.name} SETTINGS Shows current settings for tip/tiptype/diskwait                                "
	exit
elsif script.vars[1] == "tip"
	if /\A\d+\z/.match(script.vars[2])#is an integer
		echo "Setting the tip amount to #{script.vars[2]} #{CharSettings['tiptype']}."
		CharSettings['tip']=script.vars[2].to_i;
	else
		echo "Must set tip to integer"
	end
elsif script.vars[1] == "tiptype"
	if script.vars[2] == "percent" or mySetting.nil
		CharSettings['tiptype']='percent'
		echo "set tip to be a percent"
	elsif script.vars[2] == "flat"
		CharSettings['tiptype']='silver'
		echo "set tip to be a flat amount"
	else
		echo "Must set TIPTYPE to PERCENT or FLAT"
	end
elsif script.vars[1] == "settings"
echo "Skip Disk Waiting = #{CharSettings['skipdiskwait']}"
echo "Tip Type          = #{CharSettings['tiptype']}" 
echo "Tip Amount        = #{CharSettings['tip']}"
end




if( script.vars[1].nil? )
fput "open my #{UserVars.lootsack}"
fput "look in my #{UserVars.lootsack}"
start_room = Room.current
box_inventory = Array.new
GameObj.inv.each {|c|
  boxes = c.contents.find_all{ |b| b.type == "box" || b.noun == "plinite"}
  if boxes.length > 0
    box_inventory.concat(boxes)
  end
}

disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
unless disk
		if !(CharSettings['skipdiskwait'] == 'yes')
			respond "** Waiting to see if you have a disk **"
    	pause 10
		end
    disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
end

fput "look in #{Char.name} disk" if disk
disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
disk_contents = GameObj[disk.id].contents.find_all { |b| b.type == "box" || b.noun == "plinite"}
if box_inventory.length > 0 || disk_contents.length > 0
  fput "stow all"
  Script.run('go2','bank')
  sleep 1
  fput "withdraw 10000 silver"
  Script.run('go2','locksmith pool')

  npc = GameObj.npcs.find { |npc| npc.noun =~ /(G|g)nome|(W|w)oman|(A|a)ttendant|(M|m)erchant|(W|w)orker|(B|b)oss|(J|j)ahck|(D|d)warf/ }
  box_inventory.each {|b|
	if Room.current.id == 17589
		multifput("get ##{b.id}", "give attendant #{CharSettings['tip']} #{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}", "give attendant #{CharSettings['tip']}#{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}")
	elsif
		multifput("get ##{b.id}", "give #{npc} #{CharSettings['tip']} #{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}", "give #{npc} #{CharSettings['tip']}#{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}")
	end
	}
	
	
disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
unless disk
		if !(CharSettings['skipdiskwait'] == 'yes')
			respond "** Waiting to see if you have a disk **"
	    pause 5
		end
    disk = GameObj.loot.find{|d| d.name =~ /#{Char.name} disk/}
end

fput "look in #{Char.name} disk" if disk
    disk_contents.each {|b|
	if Room.current.id == 17589
		multifput("get ##{b.id}", "give attendant #{CharSettings['tip']} #{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}", "give attendant #{CharSettings['tip']}#{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}")
	elsif
		multifput("get ##{b.id}", "give #{npc} #{CharSettings['tip']} #{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}", "give #{npc} #{CharSettings['tip']}#{CharSettings['tiptype'] == 'percent' ? ' percent' : ''}")
	end
	}
else
  respond "No boxes in inventory ...... exiting"
  exit
 end

bin = nil
trash_list = ["barrel","bin","wastebasket","trashcan","bucket","wooden crate","iron barrel","canister"]
trash_list.each {|x|
  if Room.current.description.to_s =~ /#{x}/
    bin = x
    break
  end
}
  if bin == nil
    bin_obj = GameObj.loot.find{|t| t.name =~ /\bbarrel|\bbin|\bwastebasket|\btrashcan|\bbucket|\bcanister/}
    bin = bin_obj.noun
  end

loop{
line = get
  fput "ask #{npc} about return"

  sleep 1

  if GameObj.right_hand.type == "box" || GameObj.right_hand.noun == "plinite"
    box = GameObj.right_hand.id
    fput "open ##{box}" unless GameObj.right_hand.noun == "plinite"
		if GameObj.right_hand.noun == "plinite"
			fput "pluck ##{box}"
		end
	waitrt?
    fput "get coins from ##{box}" unless GameObj.right_hand.noun == "core"
	pause 3
    waitrt?
    fput "empty ##{box} in my #{UserVars.lootsack}" unless GameObj.right_hand.noun == "core"
		if line =~ /\, but nothing will fit\.|but you can't quite get/
				echo "***SOMETHING WENT WRONG***"
				echo "***YOUR #{UserVars.lootsack} IS FULL***"
				echo "***FIX IT AND ;unpause poolparty"
				Script.pause("poolparty")
		end
    pause 3
	waitrt?
		if GameObj.right_hand.noun == "core" || GameObj.right_hand.noun == "plinite"
			fput "put #{GameObj.right_hand} in my #{UserVars.lootsack}"
		elsif GameObj.left_hand.noun == "core" || GameObj.left_hand.noun == "plinite"
			fput "put #{GameObj.left_hand} in my #{UserVars.lootsack}"
		end
    fput "put ##{box} in #{bin}" unless GameObj.right_hand.noun == "core"
		if line =~ /There appears to be an item or items attached to the container/
			echo "***SOMETHING WENT WRONG***"
			echo "***CHECK THE BOX FOR LOOT***"
			Script.pause("poolparty")
		end
  elsif  GameObj.right_hand.type != "box" && GameObj.right_hand.noun != "core" && GameObj.right_hand.noun != "plinite"
    Script.run('go2', start_room.id.to_s)
    break
  end
  }



#Loot only

 elsif( script.vars[1] == "loot" )
 fput "open my #{UserVars.lootsack}"
	start_room = Room.current

  Script.run('go2','locksmith pool')

  npc = GameObj.npcs.find { |npc| npc.noun =~ /(G|g)nome|(W|w)oman|(A|a)ttendant|(M|m)erchant|(W|w)orker|(B|b)oss|(J|j)ahck|(D|d)warf/}


bin = nil
trash_list = ["barrel","bin","wastebasket","trashcan","bucket","wooden crate","iron barrel","canister"]
trash_list.each {|x|
  if Room.current.description.to_s =~ /#{x}/
    bin = x
    break
  end
}
  if bin == nil
    bin_obj = GameObj.loot.find{|t| t.name =~ /\bbarrel|\bbin|\bwastebasket|\btrashcan|\bbucket|\bcanister/}
    bin = bin_obj.noun
  end

loop{
line = get
  fput "ask #{npc} about return"

  sleep 1

  if GameObj.right_hand.type == "box" || GameObj.right_hand.noun == "plinite"
    box = GameObj.right_hand.id
    fput "open ##{box}" unless GameObj.right_hand.noun == "plinite"
		if GameObj.right_hand.noun == "plinite"
			fput "pluck ##{box}"
		end
	waitrt?
    fput "get coins from ##{box}" unless GameObj.right_hand.noun == "core"
	pause 3
    waitrt?
    fput "empty ##{box} in my #{UserVars.lootsack}" unless GameObj.right_hand.noun == "core"
		if line =~ /\, but nothing will fit\.|but you can't quite get/
				echo "***SOMETHING WENT WRONG***"
				echo "***YOUR #{UserVars.lootsack} IS FULL***"
				echo "***FIX IT AND ;unpause poolparty"
				Script.pause("poolparty")
		end
    pause 3
	waitrt?
		if GameObj.right_hand.noun == "core" || GameObj.right_hand.noun == "plinite"
			fput "put #{GameObj.right_hand} in my #{UserVars.lootsack}"
		elsif GameObj.left_hand.noun == "core" || GameObj.left_hand.noun == "plinite"
			fput "put #{GameObj.left_hand} in my #{UserVars.lootsack}"
		end
    fput "put ##{box} in #{bin}" unless GameObj.right_hand.noun == "core"
		if line =~ /There appears to be an item or items attached to the container/
			echo "***SOMETHING WENT WRONG***"
			echo "***CHECK THE BOX FOR LOOT***"
			Script.pause("poolparty")
		end
  elsif  GameObj.right_hand.type != "box" && GameObj.right_hand.noun != "core" && GameObj.right_hand.noun != "plinite"
    Script.run('go2', start_room.id.to_s)
    break
  end
  }
  end
