# Vim ruby syntax highlighting, plz
=begin
This is a simple foraging script that is not very intelligent.  Nonetheless, it has remained popular over the years.

It forages for a specified number of items in the current room.  If the room gets emptied and you asked for more, it will pause.

Credits go mostly to Rontuu; see the script comments for the Changelog.

For usage, see ;forage help

    author: Kaldonis
    name: forage
    tags: bounty, foraging
    version: 1.0
=end

=begin
Changelog archives:

Only putting it up as I don't see another on the Repo.
Your foragesack must be set.  You can do this through ;settings change foragesack (item)
Usage is ;forage (Full Herb Name) (Herb Base Noun) (Quantity)
I.E. ;forage "blue trafel mushroom" mushroom 6
It will forage until you find the amount requested or it tells you to change rooms.
Because it uses a variable to compare to the sort verb, it has a small quirk.  If you already have 2 calamia fruits, as an example, but need 8...  You have to put the number wanted as 8 rather than 6.  I.E. ;forage "calamia fruit" fruit 8

5/7/2010 - Fixed a small bug.  It previously used sort cluster to determine the number of items it had found.  This utilized the root noun only.  Hence if you asked for ten tkaro root but already had two pepperthorn root in your cloak.  It'd only get 8 tkaro root.  Changed it to sort utilizing script variable one.  Hopefully should fix it.  The only issue seems that some herbs have adjectives that even the sort verb can't use.  I've put in a hook to have it utilize the sort cluster verb like previously if it gets this response from the game.  For the majority of herbs it'll never be seen.  If you see it though it will say "Please rephrase the command."  Just ignore it or squelch it.  An annoying phrase I know.
6/22/2010 - Added in haste and presence to the script.  Haven't done much testing.  Please let me know any errors.
6/23/10 - Fixed that stupid "Please rephrase that command." message.
6/24/10 - Fixed a small bug with the sorting when it would return "What were you referring to?"
---Rontuu---

2018.12.11 - Updates to work with weather cloaks and auto-bundling pelt satchels.
2019.1.26 - Pauses when the room is empty, so you can unpause instead of restarting the script.  Help, auto 114, 603, & 506.  Header fixing for standard repo stuff.  Extra clean up, a few more checks.  Indigo mushroom internal testing.

~Kaldonis

=end

show_help = proc {
	output = "\n"
	output.concat "   Usage: #{$lich_char}#{script.name} \"name\" <noun> <number>\n\n"
	output.concat "     All options are required!\n\n"
	output.concat "       name: Herb name to forage for, including adjective.  Must be in double-quotes.\n\n"
	output.concat "       noun: Resulting noun of foraged item (e.g., might differ from name with ayana leaf)\n\n"
	output.concat "       number: How many to forage, as a numeral.\n\n"
	output.concat "     Example: #{$lich_char}#{script.name} \"acantha leaf\" leaf 7\n\n"
	output.concat "     You must have a foragesack set in lich, for example:\n\n"
	output.concat "       ;vars set foragesack=satchel\n\n"
	respond output
}

if script.vars.empty? or script.vars[0].strip =~ /^help$|^setup$/i
	show_help.call
	exit
elsif script.vars[3] =~ /\D/ 
	echo "Error: #{script.vars[3]} must be an integer"
	show_help.call
	exit
end

silence_me

# might annoy people in areas that 213 doesn't work ...
#if Spell[213].known? && Spell[213].affordable?
#  fput "meditate"
#  line = get until line =~ /^You are not able to enter a meditative trance.  Perhaps you should seek another place to meditate\.$|^You are too injured to meditate.$|^You kneel down and begin to meditate on your lot in life\./
#  if line =~ /^You are not able to enter a meditative trance.  Perhaps you should seek another place to meditate\.$|^You are too injured to meditate.$/
#    fput "incant 213"
#    empty_hands
#    fput "kneel"
#  end
#end

start:
	waitrt?
	if (checkpoison) && (Spell[114].known?) && (Spell[114].affordable?)
		echo "Trying to cure my poison."
		until !checkpoison
		  	Spell[114].cast
		  	sleep 1
		end
	end
	
	if Spell[603].known?
		if (Spell[603].affordable? && !Spell[603].active?)
			waitcastrt?
			fput "incant 603"
		end
	end
	
	if Spell[506].known?
		if (Spell[506].affordable? && !Spell[506].active?)
			waitcastrt?
			fput "incant 506"
		end
	end
	
	clear
	put "forage for #{script.vars[1]}"
	match "fullhands", "In order to forage, you must be able to use at least one of your hands"
	match "start", "...wait"
	match "mushroom", "You forage briefly and manage to find a luminescent indigo mushroom"
	match "good", "manage to find"
	match "bad", "you notice that someone"
	match "retry", "find nothing"
	match "retry", "suddenly you feel"
	match "retry", "you suddenly feel"
	match "retry", "fumble about"
	match "retry", "stumble about"
	match "retry", "when your hand comes"
	match "nothere", "no hint of what"
	match "nothere", "no evidence of what"
	match "nothere", "no trace of"
matchwait

mushroom:
	echo 
	respond ("**********************************")
	respond ("****Badger-Badger-Badger-Badger****")
	respond ("****Badger-Badger-Badger-Badger****")
	respond ("****Badger-Badger-Badger-Badger****")
	respond ("******** MUSHROOM MUSHROOM! *******")
	respond ("***********************************")
	waitrt?
	clear
	put "put mushroom in my #{Vars.foragesack}"
	match "start", "You [put|tuck|absent]"
	match "mushroom", "...wait"
matchwait


fullhands:
	echo 
	respond ("**************************")
	respond ("***Put something away!****")
	respond ("***   and ;unpause   *****")
	respond ("**************************")
	pause_script
goto "start" 

nothere:
	echo 
	respond ("**************************")
	respond ("***Herb Not Found Here!***")
	respond ("**************************")
exit

good:
	waitrt?
	clear
	put "put #{script.vars[2]} in my #{Vars.foragesack}"
	match "continue", "You [put|tuck|absent]"
	match "good", "...wait"
matchwait

good2:
	waitrt?
	clear
	put "put #{script.vars[2]} in my #{Vars.foragesack}"
	match "alternate", "You [put|tuck|absent]"
	match "good2", "...wait"
matchwait

continue:
	waitrt?
	clear
	put "sort #{script.vars[1]} in my #{Vars.foragesack}"
	match "finished", "#{script.vars[3]} items in"
	match "finished", "#{script.vars[3]} item"
	match "start", "top of the"
	match "continue", "...wait"
	match "alternate", "What were you referring"
	match "alternate", "Please rephrase that command."
matchwait

alternate:
	waitrt?
	clear
	put "sort cluster #{script.vars[2]} in my #{Vars.foragesack}"
	match "finished", "#{script.vars[3]} items in"
	match "finished", "#{script.vars[3]} item"
	match "start2", "top of the"
	match "alternate", "...wait"
matchwait


finished:
	echo 
	respond ("*********************************************")
	respond ("***#{script.vars[3]} #{script.vars[1]} have been found!***")
	respond ("*********************************************")
	unless standing?
		waitrt?
		fput "stand"
	end
exit

bad:
	echo 
	respond ("********************************")
	respond ("***Foraged Out - Change Rooms***")
	respond ("***  ;unpause in a new room  ***")
	respond ("********************************")
	unless standing?
		waitrt?
		fput "stand"
	end
	pause_script
goto "start"

retry:
goto "start"

retry2:
goto "start2"

start2:
#echo "Debug"
waitrt?
clear

#if (Spells.majorelemental >= 6) and not checkspell(506) and checkmana(6)
#fput 'incant 506'
#elsif (Spells.minorelemental >= 2) and not checkspell(402) and checkmana(2)
#fput 'incant 402'
#end

waitrt?
clear
put "forage for #{script.vars[1]}"
match "start2", "...wait"
match "good2", "manage to find"
match "bad", "you notice that someone"
match "retry2", "find nothing"
match "retry2", "suddenly you feel"
match "retry2", "you suddenly feel"
match "retry2", "fumble about"
match "retry2", "stumble about"
match "retry2", "when your hand comes"
match "nothere", "no hint of what"
match "nothere", "no evidence of what"
match "nothere", "no trace of"
matchwait
