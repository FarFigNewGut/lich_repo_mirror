=begin
  Thanks to LostRanger for quiet command, and reverb for reminding me I want something that does this.
  
  This is a beta, POC.  It tries to keep you from doing things to the wrong target, or without a target.  It's got extra output, because it's in beta... and I'm still poking at it. 
  
  New: Testing speech validation.  (  No support for crazy emoji tones. )
    
  Helps confirm target/check style on: give, kiss, nod, nuzzle, whisper

  e.g. >whisper xan heya
    rejected command whisper xan heya:
      'xan' matches: xanlin, xanthium
  
  -- Any command you send twice, it will send the second time. 
  -- So if it tries to block a command you're sure about, just send it again.
  (for example, doesn't currently check objects on you, or on a bench)
  
  options:
    ;e echo UserVars.resay[:debug] = true 
  
  script variables:
    ;resay reset    #forces refresh of tones/verbs/etc
 
    author: Xanlin
      game: Gemstone
      tags: utility, verb, verbs, autocorrect, roleplay, speech
      date: 2019-12-07
=end
=begin 
 
 TODO:  use dlinks for click corrections

=end
#------------------------------------------------------------------------------#
# resay settings in UserVars
#------------------------------------------------------------------------------#
UserVars.resay ||= {};
UserVars.resay[:debug] = false if UserVars.resay[:debug].nil?

#------------------------------------------------------------------------------#
# startup delay so that it isn't fighting with friendlist / invdb
#------------------------------------------------------------------------------#
startup_delay = ((Time.now - $login_time) < 20 ? 20 : 0);
sleep startup_delay;


#------------------------------------------------------------------------------#
# quiet_command by LostRanger, modded by tiny bit by Xanlin
#------------------------------------------------------------------------------#
@script_name = script.name;

def self.anon_hook(prefix = '');
  now = Time.now;
  "#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";
end;

def self.cleanup;
  [DownstreamHook, UpstreamHook].each{|provider|
    provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};
  };
end;

script.want_downstream     = false;
script.want_downstream_xml = true;

def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5);
  result = [];
  name = self.anon_hook;
  filter = false;
  begin;
    Timeout::timeout(timeout, Interrupt) {
      DownstreamHook.add(name, proc {|xml|
        if filter;
          if xml =~ end_pattern;
            DownstreamHook.remove(name);
            filter = false;
          else;
            next(nil) if quiet;
            xml if !quiet;
          end;
        elsif xml =~ start_pattern;
          filter = true;
          next(nil) if quiet;
          xml if !quiet;
        else;
          next(nil) if xml.strip.length == 0; #stop blank lines because.
          xml;
        end;
      });
      fput command;
      until (xml = get) =~ start_pattern; end;
      result << xml.rstrip;
      until (xml = get) =~ end_pattern;
        result << xml.rstrip;
      end;
      if include_end;
        result << xml.rstrip;
      end;
    };
  rescue Interrupt
    DownstreamHook.remove(name);
    nil;
  end;
  return result;
end;
#------------------------------------------------------------------------------#
# variables
#------------------------------------------------------------------------------#
$resay = nil if script.vars[0] =~ /\breset\b/
$resay = Hash.new if $resay.nil?;
$resay['syntax'] = Hash.new if $resay['syntax'].nil?;
#$resay['syntax']['say'] = "::[target] :tone =verb ~language ]mimic"
#$resay['syntax']["'"]
@tones = $resay['tones'] || [];
@verbs = $resay['verbs'] || [];
#@nod   = []
#------------------------------------------------------------------------------#
# scrape speech verb list
#------------------------------------------------------------------------------#
speech_verb_list_scrape = proc {
  respond "$resay['verbs'].nil? : #{$resay['verbs'].nil?}" if UserVars.resay[:debug];
  command         = "speech verb list";
  start_pattern   = /^You may select among these verbs:/i;
  quiet           = true;
  end_pattern     = /^<output class=""\/>|^(?:<popBold\/>)?<prompt/;
  include_end     = false;
  timeout         = 5;
  silence_me;
  speech_verb_list_result = quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout)
  silence_me;
  speech_verb_list_result.each { |l|;
    if l =~ /^  +/;
      @verbs |= (l.sub(/^ +/,'').gsub(/<[^.]+>/,'').gsub(/(\w+)\s(?:[\*\w]+)?\s+/,'\1;').split(';'));
    end;
  };
  $resay['verbs'] = @verbs;
};
speech_verb_list_scrape.call if $resay['verbs'].nil?;
#------------------------------------------------------------------------------#
# scrape tone list
#------------------------------------------------------------------------------#
tone_list_scrape = proc {
  respond "$resay['tones'].nil? : #{$resay['tones'].nil?}" if UserVars.resay[:debug];
  command         = "tone list";
  start_pattern   = /^Tones available for use:/i;
  quiet           = true;
  #end_pattern     = /^Tones marked with an asterisk may be used with TONE SET.|^(?:<popBold\/>)?<prompt/;
  end_pattern     = /^(?:<popBold\/>)?<prompt/;
  include_end     = false;
  timeout         = 5;
  silence_me;
  tone_list_result = quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  silence_me;
  tone_list_result.each { |l|
    if l =~ /^  +/;
      @tones |= (l.sub(/^ +/,'').gsub(/<[^>]+>/,'').gsub(/\s*[\*]?\s+/,';').split(';'));
      #@tones |= (l.sub(/^ +/,'').gsub(/(\w+)\s(?:[\*\w]+)?\s+/,'\1;').split(';'));
      #@tones |= (l.sub(/^ +/,'').gsub(/(?:<[^.]+>|/,'').gsub(/(\w+)\s(?:[\*\w]+)?\s+/,'\1;').split(';'));
    end;
  };
  $resay['tones'] = @tones;
};
tone_list_scrape.call if $resay['tones'].nil?;
#------------------------------------------------------------------------------#
# help nod notes
#------------------------------------------------------------------------------#
=begin
  Usage:
      NOD [style] [target]

  Where [style] is one of the following:
      CURT    SLOW     GREET    SLIGHT     EMPHATIC    ENCOURAGE    
      FIRM    AGREE    QUICK    SOMBER     GRACIOUS    AGGRESSIVE    
      GLUM    BRIEF    SLEEP    APPROVE    GRATEFUL    THOUGHTFUL    
      GRIM    BRISK    TERSE    FERVENT    REASSURE    PERFUNCTORY    
      MEEK    EAGER    VAGUE    KNOWING    SYMPATHY    APPRECIATIVE    
      ONCE    FAINT    ABSENT   PATIENT    VIGOROUS    ENTHUSIASTIC     
      SAGE    GRAVE    POLITE   RESPECT    IMPATIENT   SATISFACTION    
                       RHYTHM   CHEERFUL   RELUCTANT   UNDERSTANDING
=end
#------------------------------------------------------------------------------#
# help nod
#------------------------------------------------------------------------------#
nod_scrape = proc {
  respond "$resay['nod'].nil? : #{$resay['nod'].nil?} || $resay['syntax']['nod'].nil? : #{$resay['syntax']['nod'].nil?}" if UserVars.resay[:debug];
  help_verb       = "nod".upcase;
  command         = "help #{help_verb.downcase}";
  start_pattern   = /^Usage:/i;
  quiet           = true;
  end_pattern     = /^(?:<popBold\/>)?<prompt/;
  include_end     = false;
  timeout         = 5;
  silence_me;
  help_nod_result = quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  silence_me;
  @nod = [];
  help_nod_result.each { |l|;
    if l =~ /^  +/ && l !~ /\[style\] \[target\]/;
      @nod |= (l.sub(/^ +/,'').gsub(/<[^>]+>/,'').gsub(/\s[\*]?\s+/,';').downcase.split(';'));
    elsif l =~ /#{help_verb} *\[style\] \[target\]/;
      # NOD [style] [target]
    end;
  };
  $resay['nod'] = @nod;
  $resay['syntax']['nod'] = 'NOD [style] [target]';
};
nod_scrape.call if $resay['nod'].nil? || $resay['syntax']['nod'].nil?;
#------------------------------------------------------------------------------#
# help nuzzle
#------------------------------------------------------------------------------#
nuzzle_scrape = proc {
  respond "$resay['nuzzle'].nil? : #{$resay['nuzzle'].nil?} || $resay['syntax']['nuzzle'].nil? : #{$resay['syntax']['nuzzle'].nil?}" if UserVars.resay[:debug];
  help_verb       = "nuzzle".upcase;
  command         = "help #{help_verb.downcase}";
  start_pattern   = /^Usage:/i;
  quiet           = true;
  end_pattern     = /^(?:<popBold\/>)?<prompt/;
  include_end     = false;
  timeout         = 5;
  silence_me;
  help_nuzzle_result = quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  silence_me;
  @nuzzle = [];
  usage = false;
  style = false;
  help_nuzzle_result.each { |l|;
    if l=~ /Usage:/;
      usage = true;
    elsif l=~ /\[style\].*?:/;
      usage = false;style = true;
    elsif l =~ /^  +/ && l !~ /\[style\] \[target\]/ && style;
      @nuzzle |= (l.sub(/^ +/,'').gsub(/<[^>]+>/,'').gsub(/\s[\*]?\s+/,';').downcase.split(';'));
    elsif l =~ /#{help_verb} *\[style\] \{player target\}/;
      # nuzzle [style] [target]
    end;
  };
  $resay['nuzzle'] = @nuzzle;
  $resay['syntax']['nuzzle'] = 'nuzzle [style] [target]';
};
nuzzle_scrape.call if $resay['nuzzle'].nil? || $resay['syntax']['nuzzle'].nil?;
#------------------------------------------------------------------------------#
# help kiss
#------------------------------------------------------------------------------#
kiss_scrape = proc {
  respond "$resay['kiss'].nil? : #{$resay['kiss'].nil?} || $resay['syntax']['kiss'].nil? : #{$resay['syntax']['kiss'].nil?}" if UserVars.resay[:debug];
  help_verb       = "kiss".upcase;
  command         = "help #{help_verb.downcase}";
  start_pattern   = /^Usage:/i;
  quiet           = true;
  end_pattern     = /^(?:<popBold\/>)?<prompt/;
  include_end     = false;
  timeout         = 5;
  silence_me;
  help_kiss_result = quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  silence_me;
  @kiss = [];
  usage = false;
  style = false;
  help_kiss_result.each { |l|
    if l=~ /Usage:/;
      usage = true;
    elsif l=~ /[\[\(](?:style|location)[\]\)].*?:/ ;
      usage = false;style = true;
    elsif l =~ /^  +/ && l !~ /\[(?:style|location)\] \[target\]/ && style;
      @kiss |= (l.sub(/^ +/,'').gsub(/<[^>]+>/,'').gsub(/\s[\*]?\s+/,';').downcase.split(';'));
    elsif l =~ /#{help_verb} *[\[\(](?:style|location)[\]\)] \{player target\}/ && usage;
      # kiss [target] [location]
    end;
  };
  $resay['kiss'] = @kiss;
  $resay['syntax']['kiss'] = 'kiss [target] [style]';
};
kiss_scrape.call if $resay['kiss'].nil? || $resay['syntax']['kiss'].nil?;
#------------------------------------------------------------------------------#
# just syntax
#------------------------------------------------------------------------------#
$resay['syntax']['whisper']         = 'whisper [target]';
$resay['syntax']['whisper ooc']     = 'whisper ooc [target]';
$resay['syntax']['whisper visible'] = 'whisper visible [target]';
$resay['syntax']['give']            = 'give [target]';
$resay['syntax']['sing']            = 'sing :tone ::target';
$resay['syntax']['loresing']        = 'loresing :tone ::target';
$resay['syntax']['recite']          = 'recite :tone ::target';
$resay['syntax']["'"]               = 'speech syntax'; #variable syntax for targets/throw targets
$resay['syntax']["say"]             = 'speech syntax'; #variable syntax for targets/throw targets
#$resay['syntax']["imitate speech"] = 'imitate speech target ]throw :tone =verb' #variable syntax for throw target
#imitate speech xanlin ]column :flirt =beckon Over here.

# it would be nice to just write it to interpret a syntax and know what to reference/check


#------------------------------------------------------------------------------#
# Post scraping fix for results that format mono before usage
#------------------------------------------------------------------------------#
#XMLData.reset
puts "<output class=\"\"/>"
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# issues I'm trying to fix
#------------------------------------------------------------------------------#
#>':shael :tenat =agree yes  #two tones instead of target and tone
#>':: shael : tenat = agree yes  #unexpected spaces 
#>'yes =agree  #misplaced target/tone/verb
#>'::sheal 
#>nod sheal  # NOD [style] [target]
#>  ]{object} or [{object}]
#>  ~language
#>'::xan  #with more than one xan in the room
#>'@xan   #with more than one xan in the room
=begin 
  Usage:
      SAY [modifiers] {message} - Speak a message aloud
  Where [modifiers] is zero or more of the following:
      :{tone}                               - Speak the message in a particular tone (see TONE LIST for a list of tones)
      ::{object} or @{object} or {{object}} - Direct the message at someone or something (eg, ::door or {heavy door})
      ]{object} or [{object}]               - Attempt to throw your voice behind someone or something (eg, ]door or [heavy door])
      ~{language}                           - Speak the message in a particular language (see SPEAK for a list of languages)
      ={verb}                               - Choose a verb to indicate the speech style (see SPEECH VERBIAGE LIST for a list of verbs)
=end
# Perhaps sometime in the future, work for ;name:lnet message and ;chat \w\w name and ;chat ::name
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
@monsterbold_start = $fake_stormfront ? "\034GSL\r\n " : "<pushBold\/>";
@monsterbold_end   = $fake_stormfront ? "\034GSM\r\n " : "<popBold\/>";
  
def self.format_monsterbold(msg); "#{@monsterbold_start}#{msg.encode(:xml => :text)}#{@monsterbold_end}"; end;
def self.format_whisper(msg); "<preset id=\"whisper\">#{msg.encode(:xml => :text)}</preset>"; end;
def self._respondm(msg); _respond "#{@monsterbold_start}#{msg.encode(:xml => :text)}#{@monsterbold_end}"; end;
def self._respondb(msg); _respond "#{@monsterbold_start}#{msg.encode(:xml => :text)}#{@monsterbold_end}"; end;
def self._respondw(msg); _respond "<preset id=\"whisper\">#{msg.encode(:xml => :text)}</preset>"; end;
def self._responds(msg); _respond "<preset id=\"speech\">#{msg.encode(:xml => :text)}</preset>"; end;
def self.sendto_familiar(msg) "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>#{msg.encode(:xml => :text)}  [#{Time.now.strftime('%l:%M %P')}]\n<popStream/>\n" end
def self.sendto_thought(msg) "<pushStream id=\"thoughts\" ifClosedStyle=\"watching\"/>#{msg.encode(:xml => :text)}  [#{Time.now.strftime('%l:%M %P')}]\n<popStream/>\n" end
#Need to do this better, collect all nouns and sources for single word target vs. multi word target (say)
#e.g. catch Tourist vs. bumbling aelotoi tourist GIVE issue

#------------------------------------------------------------------------------#
# Lost Ranger's method of handling upstream replacements 
# (like in reverb), but more messy because my code is messier.
#------------------------------------------------------------------------------#

#         TODO:           fix    kiss    my     locket 

# This is really ugly and messy and should be refactored to be pretty like reverb,
# but until I have a good understanding of how I can break down verb groups and
# syntax reformatting, I'm going to leave it messy.

#------------------------------------------------------------------------------#
# junk for fumbling with speech
#------------------------------------------------------------------------------#
@languages = ["common","aelotian","darkelf","dhe'narsi","dhenarsi","dwarven","elven","erithian","faendryl","giantman","gnomish","krolvin","sylvankind","tehir","halfling", "#{Char.prof.downcase}"];
@symbols = Hash.new;
@symbols["::"] = "target";
@symbols["@"]  = "target";
@symbols["{"]  = "target";
@symbols[":"]  = "tone";
@symbols["="]  = "verb";
@symbols["~"]  = "language";
@symbols["["]  = "throw";
@symbols["]"]  = "throw";
@parameter_pattern        = /^(?<symbol>::|@|\{|:|=|~|\[|\])(?<parameter>[^ ]+ [^ ]+(?:\}|\])|[^ ]+)(?<rest>.+)?/;
@delimiters_pattern       = /(::|@|\{|:|=|~) */i; #want to split on these but preserve them
@throw_delimiter_pattern  = /(\[|\])/i; #only want the first instance, so this will be a sub instead of gsub
@unit_separator           = ['1f'].pack('H*'); # unit separator #Going to want a delimiter that doesn't occur in speech
# don't need to split /^'|^say/ here because it's done before it gets this far
# we will start by expecting the parameters to appear before the content
# !!!  symbols of { and [  require adding closing tag
#------------------------------------------------------------------------------#
# validate_list - check an input against a list for one match only
#------------------------------------------------------------------------------#
def self.validate_list(input,list,list_name);
  return nil,false,"no input" if input.nil?;
  return nil,false,"no list " if list.nil?;
  matches = [];
  match = nil;
  valid = true;
  message = "";
  match   = list.find { |k| k =~ /^#{Regexp::escape(input)}$/i }
  if match.nil?
    list.each { |key| if /^#{Regexp::escape(input)}/i =~ key; matches << key; end;};
    if matches.length == 1;
      match = matches[0];
      valid  = true;
      message = "#{list_name}: '#{input}' matches: #{matches[0]}.";
    elsif matches.length == 0;
      match = nil;
      valid  = false;
      message = "#{list_name}: '#{input}' not found.";
    else
      match = nil;
      valid = false;
      message = "#{list_name}: '#{input}' matches: #{matches.join(', ')}.";
    end;
  end
  return match,valid,message;
end;
#------------------------------------------------------------------------------#
# validate_target_noun - check GameObj for a single noun match
#------------------------------------------------------------------------------#
def self.validate_target_noun(input,input_name);
  return nil,false,"no input" if input.nil?;
  targets = [];
  matches = [];       
  targets.concat(GameObj.room_desc.collect{|t| t.noun.downcase}.uniq) if !GameObj.room_desc.nil?;
  targets.concat(GameObj.pcs.collect{ |t| t.noun.downcase}) if !GameObj.pcs.nil?;
  targets << "#{XMLData.name.downcase}";
  targets.concat(GameObj.npcs.collect{|t| t.noun.downcase}.uniq) if !GameObj.npcs.nil?;
  targets.concat(GameObj.loot.collect{|t| t.noun.downcase}.uniq) if !GameObj.loot.nil?;
  targets << GameObj.left_hand.noun
  targets << GameObj.right_hand.noun
  targets.each{ |t| if /^#{Regexp::escape(input)}/ =~ t; matches << t; end};

  if matches.length == 1;
    target = matches[0];
    valid  = true;
    message = "#{input_name}: '#{input}' matches: #{matches[0]}";
  elsif matches.length == 0;
    target = nil;
    valid  = false;
    message = "#{input_name}: '#{input}' not found";
  else
    target = nil;
    valid = false;
    message = "#{input_name}: '#{input}' matches: #{matches.join(', ')}";
  end;
  return target,valid,message;
end;
#------------------------------------------------------------------------------#
# validate_target_name- check GameObj for a single name match
#------------------------------------------------------------------------------#
def self.validate_target_name(input,input_name);
  return nil,false,"no input" if input.nil?;
  
  targets = Hash.new;
  matches = Hash.new ; 
  GameObj.room_desc.each{|t| targets[t.name.downcase] = t.id};
  #GameObj.pcs.each{|t| targets[t.name.downcase] = t.id}
  #targets << "#{XMLData.name.downcase}"
  GameObj.npcs.each{|t| targets[t.name.downcase] = t.id} if !GameObj.npcs.nil?;
  GameObj.loot.each{|t| targets[t.name.downcase] = t.id} if !GameObj.loot.nil?;
  #temp_pattern = Regexp::escape(input.sub(/(\]\})$/,'')).strip.split(' ').join(".*?")
  #echo temp_pattern
  #targets.keys.each{ |t| if /#{Regexp::escape(input.sub(/(\]\})$/,'')).strip.split(' ').join(".*?")}/ =~ t; matches[t] = targets[t]; end};
  targets[GameObj.left_hand.name] = GameObj.left_hand.id
  targets[GameObj.right_hand.name] = GameObj.right_hand.id
  targets.keys.each{ |t| if /#{Regexp::escape(input)}/ =~ t; matches[t] = targets[t]; end};

  if matches.length == 1;
    target = "##{matches.values[0]}";
    valid  = true;
    message = "#{input_name}: '#{input}' matches: #{matches.values[0]}";
  elsif matches.length == 0;
    target = nil;
    valid  = false;
    message = "#{input_name}: '#{input}' not found in: #{targets.keys}";
  else
    target = nil;
    valid = false;
    message = "#{input_name}: '#{input}' matches: #{matches.keys.join(', ')}"
  end;
  return target,valid,message;
end;
#------------------------------------------------------------------------------#
# speech_parameter_validate - runs validation for speech parts
#------------------------------------------------------------------------------#
def self.speech_parameter_validate(symbol,parameter);
  parameter = parameter.sub(/[\]\}]$/,'').downcase
  modifier = @symbols[symbol];
  valid   = false;
  message = nil;
  
  if modifier == "target";
    if symbol == "{" and parameter =~ /\b\s+\b/;
      parameter,valid,message = validate_target_name(parameter,'target name');
    else;
      parameter,valid,message = validate_target_noun(parameter,'target noun');
    end;
  elsif modifier == "tone";
    parameter,valid,message = validate_list(parameter,@tones,'tone');
  elsif modifier == "verb";
    parameter,valid,message = validate_list(parameter,@verbs,'speech verb');
  elsif modifier == "throw"  ;
    if symbol == "{" and parameter =~ /\b\s+\b/;
      parameter,valid,message = validate_target_name(parameter,'throw name');
    else;
      parameter,valid,message = validate_target_noun(parameter,'throw noun');
    end;
  elsif modifier == "language";
    parameter,valid,message = validate_list(parameter,@languages,'language');
  else;
    message = "unknown symbol: #{symbol}";
  end;
  return symbol,parameter,valid,message;
end;
#------------------------------------------------------------------------------#
# speech_parameter_wrap - just adds ending tag for {} and []
#------------------------------------------------------------------------------#
def self.speech_parameter_wrap (symbol,parameter);
  return "#{symbol}#{parameter}" unless [ "{", "[" ].include?(symbol);
  if symbol == "{";
    return "#{symbol}#{parameter}}";
  elsif symbol == "[";
    return "#{symbol}#{parameter}]";
  end;
end;
#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#
=begin
prefix = <c>
verb   = ' or say
rest   = user input
  > content = splitting rest into pieces to find parameters/modifiers vs content
    > parameters = the modifiers input parsed prior to confirmation
      > parameters list: target, tone, verb, language, throw
      > modifiers = parameters after autocomplete and confirmation
    > speech    = the content of what was to be said, not including modifiers
    
  I could use a hash for the modifiers/parameters, and maybe will, but not yet
  
  It would be nice to have a hash/array of the patterns to loop through to keep the code cleaner
 
 
  split the content
  for each content
    match to parameter
      if parameter already exists, error
        if parameter is invalid, error
          else wrap parameter for modifiers
=end
#------------------------------------------------------------------------------#
# resay_speech - hot mess
#------------------------------------------------------------------------------#
def self.resay_speech(prefix,verb,rest);
  reject         = false;
  parameters     = Hash.new;
  last_parameter = nil;
  last_remainder = "";
  content        = [];
  modifiers      = [];
  resay_errors   = [];
  content        = rest.gsub(@delimiters_pattern,"#{@unit_separator}\\1").sub(@throw_delimiter_pattern,"#{@unit_separator}\\1").split(@unit_separator);
  if content.nil?;
      resay_errors << "no content";
    elsif content.length == 1;
      speech = content[0];
    else;
    content.each_with_index { |c,i|
    if matched = @parameter_pattern.match(c);
        if parameters.keys.include?(@symbols[matched[:symbol]]);
            resay_errors << "more than one #{@symbols[matched[:symbol]]} parameter found";
            reject = true;
        else;
          parameters[@symbols[matched[:symbol]]] = { :symbol => matched[:symbol], :parameter => matched[:parameter] };
          last_parameter = "#{matched[:symbol]}#{matched[:parameter]}";
          if last_remainder.strip.length > 3;
            resay_errors << "content between parameters #{last_remainder}";
            reject = true;
            last_remainder = matched[:rest];
          end;
          last_remainder = matched[:rest];
        end;
    else;
        _respondb "#{i}:no match:#{c}" if c.length > 0;
    end;
    };
  end;
  parameters.each { |k,v| 
    symbol = v[:symbol];
    parameter = v[:parameter];
    valid = nil;
    symbol,parameter,valid,message = speech_parameter_validate(symbol,parameter);
    if !valid
      resay_errors << message ;
      reject = true;
    end;
    modifiers << speech_parameter_wrap(symbol,parameter) if valid;
  }
  resay_error = resay_errors.join("\nresay: ");
  if parameters.length > 0 ;
    speech = content[-1].sub(/^#{Regexp::escape(last_parameter)} ?/,'');
  else;
    speech = rest;
  end;
  resay = "#{prefix}#{verb} #{modifiers.join(' ')} #{speech}";
  if reject == true;
    _respondb "resay: validation failed on:>#{verb}#{rest}";
    _respondb "resay: #{resay_error}";
    return nil;
  end;
  puts sendto_familiar "resay sent: #{verb}#{modifiers.join(' ')} #{speech}" if UserVars.resay[:debug];
  return resay ;
end;

#------------------------------------------------------------------------------#
# @reg = for rejecting input, and giving a reason (from hash)
#------------------------------------------------------------------------------#
@reject = Hash.new;
@reject["repo"] = "Pick ;repos or report";


#------------------------------------------------------------------------------#
# handle_upstream - steaming mess
#------------------------------------------------------------------------------#
@trap_pattern = /^(<c>)?('|repo|give?|kiss?|nod|nuzz?l?e?|say|whisp?e?r? ?[ov]?[oi]?[cs]?i?b?l?e?\b)(.*?)$/i;

def self.handle_upstream(xml);
  debug = false;
  #(respond "didn't match #{@trap_pattern}";return xml) unless xml =~ @trap_pattern && xml != $resay['last_match'];
  (respond "resubmitted " if debug && xml == $resay['last_match'];return xml) unless xml =~ @trap_pattern && xml != $resay['last_match'];
  return xml unless xml =~ @trap_pattern && xml != $resay['last_match'];
  prefix = $1;
  verb   = $2.strip;
  rest   = $3.strip;
  return xml if rest =~ /^my\b/ && verb != 'give';
  $resay['last_match'] = xml;
  
  verbs  = $resay['syntax'].keys.sort;
  respond "verbs: #{verbs.join(', ')}" if debug;
  verb   = verbs.detect{ |v| v =~ /^#{verb}/};
  command = "#{verb} #{rest}";
  respond "prefix, verb, rest: #{[prefix, verb, rest].join(',')}" if debug;
  respond "$resay['last_match'] = #{xml}" if debug;
  reject = false;
  
  if verb =~ /^(?:'|say)/;
    #puts sendto_familiar('calling resay_speech') if UserVars.resay[:debug] 
    return resay_speech(prefix,verb,rest);
  elsif @reject[verb];
    reject = true;
    _respondm "rejected command #{command}:";
    respond  "  #{@reject[verb]}";
  elsif verb =~ /whisper ?o?o?c?/ && rest =~ /^group/;
    return xml;
  #elsif verb =~ /^sing|loresing|recite/
  else;
    syntax = $resay['syntax'][verb];  #this may need to change to handle multiple usage syntax
    syntax_parameters = syntax.gsub(/(#{verb} |\[|\])/i,'').strip.downcase.split(/ +/);
    respond "syntax_parameters.length: #{syntax_parameters.length}, #{syntax_parameters.join(',')}" if debug;
    if verb =~ /^(?:whisper|say|sing|imitate|act|')/
      user_input = rest.strip.gsub(/ ( +)?/,'|\1').split('|')
    else
      user_input = rest.strip.split(/ /); #this will need to be better for spaces in speech for say
    end
    respond "user_input: #{user_input}" if debug;
    #respond "#{user_input.length} <= #{syntax_parameters.length}"
    match_keys = [];
    targets = [];
    styles = [];
    if user_input.length == 0;
      respond "no extra input" if debug;
    elsif syntax_parameters.length > 0;  #1=1#user_input.length <= syntax_parameters.length
      #less parameters than syntax, parameter should match at least one, not both
      #test nod br  (brisk, brief,bris (bristenn))
      #respond "user_input.length (#{user_input.length}) <= syntax_parameters.length(#{syntax_parameters.length})" if debug
      if syntax_parameters.include?("target");
        targets.concat(GameObj.room_desc.collect{|t| t.noun.downcase}.uniq) if !GameObj.room_desc.nil?;
        targets.concat(GameObj.pcs.collect{ |t| t.noun.downcase}) if !GameObj.pcs.nil?;
        targets << "#{XMLData.name.downcase}";
        targets.concat(GameObj.npcs.collect{|t| t.noun.downcase}.uniq) if !GameObj.npcs.nil?;
        targets.concat(GameObj.loot.collect{|t| t.noun.downcase}.uniq) if !GameObj.loot.nil?;
        targets << GameObj.left_hand.noun
        targets << GameObj.right_hand.noun
        match_keys.concat(targets);
      end;
      
      if $resay[verb];
        styles = $resay[verb]; #syntax_parameters.include?("style")
        match_keys.concat($resay[verb]);
      end;
      #check input 
      update_input = false;
      new_user_input = user_input.dup;
      validated_parameters = [];
      user_input.each_with_index { |input,index|
        break if index > (syntax_parameters.length - 1);
        respond "user_input[#{index}] = #{input}" if debug;
        match = nil
        matches = [];
        match = match_keys.find { |t| /^#{input}$/i =~ t }
        matches << match if !match.nil?
        match_keys.each{ |t| if /^#{input}/i =~ t; matches << t; end} if matches.length == 0;
        
        if matches.length == 1;
          #input = matches[0]
          if user_input.length == 1 || syntax_parameters.length == 1;
            _respondw "1 input match accepted: #{input} matches 1 key, #{matches[0]}" ;
            new_user_input[index] = matches[0];
            update_input = true;
          elsif syntax_parameters.length > 1;
            sindex = syntax_parameters.find_index('style');
            tindex = syntax_parameters.find_index('target');
            tindex = syntax_parameters.find_index('object') if !tindex;
            #make sure they're in the right order
            if syntax_parameters[index] == 'style' && styles.include?(matches[0]);
              _respondw "style accepted: #{input} matches 1 key, #{matches[0]}";
              new_user_input[index] = matches[0];
              validated_parameters.push('style');
            elsif syntax_parameters[index] =~ /target|object/ && targets.include?(matches[0]);
              _respondw "target accepted: #{input} matches 1 key, #{matches[0]}";
              new_user_input[index] = matches[0];
              validated_parameters.push('target');
            elsif syntax_parameters[index] == 'style' && targets.include?(matches[0]);
              if !validated_parameters.include?('target');
                _respondb "style switched: #{input} matches 1 target key, #{matches[0]}";
                new_user_input[tindex] = matches[0];
                update_input = true;
                validated_parameters.push('target');
              else reject = true;
                _respondb "two targets found";
              end;
            elsif syntax_parameters[index] =~ /target|object/ && styles.include?(matches[0]);
              if !validated_parameters.include?('style');
                _respondb "target switched: #{input} matches 1 style key, #{matches[0]}";
                new_user_input[sindex] = matches[0];
                update_input = true;
                validated_parameters.push('style');
              else ;
                reject = true;
                _respondb "two styles found";
              end;
            end;
            
          ######
          #### still fails on two styles or two targets
          #### need to rework to only switch a style or target once, and if you find another fail
          #else
          #  _respondw "accepted: #{input} matches 1 key, #{matches[0]}" 
          #  user_input[index] = matches[0]
          end;
          
          xml = "#{prefix}#{verb} #{new_user_input.join(' ')}";
          #respond "match_keys: #{match_keys.join(',')}"
        elsif matches.length == 0;
          _respondm "rejected command #{command}: #{input} not found";
          respond "match_keys: #{match_keys.join(',')}";
          reject = true;
        elsif matches.length > 1;
          _respondm "rejected command #{command}:";
          respond  "  '#{input}' matches: #{matches.join(', ')}";
          reject = true;
        end;
      };
    else;
      respond "user_input.length (#{user_input.length}) >syntax_parameters.length(#{syntax_parameters.length})" if debug;
    end;
  end;
  if reject == true;
    return nil;
  else;
    if update_input;
      xml = "#{prefix}#{verb} #{new_user_input.join(' ')}";
      #_responds "corrected to: #{verb} #{new_user_input.join(' ')}";
      puts sendto_familiar "resay sent: #{verb} #{new_user_input.join(' ')}" if UserVars.resay[:debug];
    end;
    return xml;
  end;
end;
#------------------------------------------------------------------------------#
# add hook, sit in a loop
#------------------------------------------------------------------------------#
before_dying { UpstreamHook.remove("resay::upstream");$resay['last_match']=nil };
UpstreamHook.add("resay::upstream", proc{|xml| self.handle_upstream(xml)});
loop { sleep 600; };
