$osacombat_auto_stow = nil
$osacombat_my_mstrike_focus = nil        #These are variables for Mstrike.  Not needed in GUI as they are autoset in mstrike def below.  Can remove or try to autoset this in osacrew.vars so settings are saved.  But this will check settings on open each time.
$osacombat_my_mstrike_open = nil
$osacombat_uac_current_attack = 0
$osacombat_retaliate = 0



####### Miscelleanous Combat Actions TODO Add in Loot Script Function
	
def creature_type
	if GameObj.npcs.count { |npc| npc.type =~ /undead/ } >= 1
		@creature_type = "undead"
	else
		@creature_type = "living"
	end
	if @creature_type == "living"
		@spell_type = "#{UserVars.osacrew["spelltype"]}"
		@spell_open = "#{UserVars.osacrew["spellopen"]}"
		@attack_type = "#{UserVars.osacrew["attacktype"]}"
		if UserVars.osacrew["spellevoke"] == true && UserVars.osacrew["spellchan"] = false
			@cast_type = "evoke"
		elsif UserVars.osacrew["spellchan"] == true && UserVars.osacrew["spellevoke"] == false
			@cast_type = "channel"
		elsif UserVars.osacrew["spellchan"] == true && UserVars.osacrew["spellevoke"] == true
			@cast_type = "channel evoke"
		else
			@cast_type = ""
		end
	elsif @creature_type == "undead"
		@spell_type = "#{UserVars.osacrew["undeadspelltype"]}"
		@spell_open = "#{UserVars.osacrew["undeadspellopen"]}"
		@attack_type = "#{UserVars.osacrew["undeadattacktype"]}"
		if UserVars.osacrew["undeadspellevoke"] == true && UserVars.osacrew["undeadspellchan"] = false
			@cast_type = "evoke"
		elsif UserVars.osacrew["undeadspellchan"] == true && UserVars.osacrew["undeadspellevoke"] == false
			@cast_type = "channel"
		elsif UserVars.osacrew["undeadspellchan"] == true && UserVars.osacrew["undeadspellevoke"] == true
			@cast_type = "channel evoke"
		else
			@cast_type = ""
		end
	end
end

	def prep_reset
	
		if checkprep == "None"
			nil
		else
			fput "release"
		end
	
	end
	
		def stow_weapon
		
		if checkleft == nil && checkright == nil
			nil
		else
			if $osacombat_auto_stow == 1
				#respond "Debug Output - Auto Stowing"
				if $huntpro_style_3_dual_wield == 1    ####Need to Define Duel Weild Variable for Style
					fput "sheath"
					fput "sheath"
				else
					if Char.name == "Gherraltis"
						fput "tap my ono"
					end
					fput "stow all"
				end
			end
		end
	
	end
		
	def script_kill
	
		stow_weapon
		Script.kill "OSACombat2"
	end

	
def stance_offensive
	if checkstance != "offensive"
		fput "stance offensive"
	else
		nil
	end
end

def stance_defensive
	if checkstance != "defensive"
		fput "stance defensive"
	else
		nil
	end
end
	
def stance_guarded
	if checkstance != "guarded"
		fput "stance guarded"
	else
		nil
	end
end
	
	def stand_check
		if !checkstanding
			wait_rt
			fput "stand"
			pause 0.25
			waitrt?
		end
	end
	
	def kneel_check
		if !checkkneeling
			fput "kneel"
			pause 0.25
			waitrt?
		end
	end
	
	
###### Basic Attack Function
			
	def chicken_attack
	if GameObj.targets.count {|npc| npc.status !~ /dead|gone/ && npc.name !~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
	fput "attack"
	wait_rt
	end
	end
	
	def chicken_ambush
	if GameObj.targets.count {|npc| npc.status !~ /dead|gone/ && npc.name !~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
	fput "ambush"
	wait_rt
	end
	end

	
	def chicken_fire
	if GameObj.targets.count {|npc| npc.status !~ /dead|gone/ && npc.name !~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
	fput "fire"
	wait_rt
	end
	end

####### Mstrike Setup
	
		def mstrike_setup
	
		#Mstrike Detection

		if UserVars.osacrew["attacktype"] == "1"
			fput "mstrike set recovery off"
			fput "mstrike set default jab"
		elsif UserVars.osacrew["attacktype"] == "2"
			fput "mstrike set recovery off"	
			fput "mstrike set default grapple"
		elsif UserVars.osacrew["attacktype"] == "3"
			fput "mstrike set recovery off"
			fput "mstrike set default attack"
		elsif UserVars.osacrew["attacktype"] == "4"
			fput "mstrike set recovery off"
			fput "mstrike set default attack"
		elsif UserVars.osacrew["attacktype"] == "5"
			fput "mstrike set recovery off"
			fput "mstrike set default fire"
		elsif UserVars.osacrew["attacktype"] == "6"
			fput "mstrike set recovery off"
			fput "mstrike set default fire"
		elsif UserVars.osacrew["attacktype"] == "7"
			fput "mstrike set recovery off"
			fput "mstrike set default fire"
		elsif UserVars.osacrew["attacktype"] == "8"
			fput "mstrike set recovery off"
			fput "mstrike set default fire"
		elsif UserVars.osacrew["attacktype"] == "11"
			fput "mstrike set recovery off"
			fput "mstrike set default fire"
		elsif UserVars.osacrew["attacktype"] == "12"
			fput "mstrike set recovery off"
			fput "mstrike set default attack"
		# elsif UserVars.osacrew["attacktype"] == 9
			# nil
		else
			nil
		end
		
		if Skills.multiopponentcombat >= 190
			$osacombat_my_mstrike_focus = 6
			$osacombat_my_mstrike_open = 7
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 155
			$osacombat_my_mstrike_focus = 5
			$osacombat_my_mstrike_open = 7
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 135
			$osacombat_my_mstrike_focus = 5
			$osacombat_my_mstrike_open = 6
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 100
			$osacombat_my_mstrike_focus = 4
			$osacombat_my_mstrike_open = 6
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 90
			$osacombat_my_mstrike_focus = 4
			$osacombat_my_mstrike_open = 5
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 60
			$osacombat_my_mstrike_focus = 3
			$osacombat_my_mstrike_open = 5
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 55
			$osacombat_my_mstrike_focus = 3
			$osacombat_my_mstrike_open = 4	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 35
			$osacombat_my_mstrike_focus = 2
			$osacombat_my_mstrike_open = 4	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 30
			$osacombat_my_mstrike_focus = 2
			$osacombat_my_mstrike_open = 3	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 15
			$osacombat_my_mstrike_focus = 0
			$osacombat_my_mstrike_open = 3	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 5
			$osacombat_my_mstrike_focus = 0
			$osacombat_my_mstrike_open = 2
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"			
		end	
	
	end

####### Warder Spell Cast Routine
		
def spell_cast_warder
	waitrt?
	can_cast
end
	
######### Primary Spell Cast Routine	
def spell_cast_bolter			
	waitrt?
	stance_offensive
	can_cast
end
			
		def prep_reset
	
		if checkprep == "None"
			nil
		else
			fput "release"
		end
	
	end
	
		def endcombat_actionreset

		wait_rt
		stance_guarded
		
		end
		
		def uac_round
	
		#respond "Debug Output - Starting UAC Round"
		if GameObj.targets.count >= 1
	
			if $osacombat_uac_current_attack == 0
				$osacombat_uac_current_attack = "jab"
			elsif $osacombat_uac_current_attack == nil
				$osacombat_uac_current_attack = "jab"
			end
			
			stance_offensive
			
			result = dothistimeout "#{$osacombat_uac_current_attack}", 2, /excellent positioning|followup jab|followup punch|followup grapple|followup kick|Roundtime/
			if result =~ /excellent positioning/
				$osacombat_uac_current_attack = "kick"
							
			elsif result =~ /followup jab/
				$osacombat_uac_current_attack = "jab"
				
			elsif result =~ /followup punch/
				$osacombat_uac_current_attack = "punch"
				
			elsif result =~ /followup grapple/
				$osacombat_uac_current_attack = "grapple"
				
			elsif result =~ /followup kick/
				$osacombat_uac_current_attack = "kick"
				
			elsif result =~ /Roundtime/
				$osacombat_uac_current_attack = "jab"
			end
		else
			nil
		end
	
		#respond "Debug Output - Ending UAC Round"
	
	end
	
		def hide_time
	
		if GameObj.targets.count >= 1
			if checkhidden
					nil
				else
					result = dothistimeout "hide", 2, /fail to slip|that no one has noticed|but can't see anywhere/
					if result =~ /fail to slip/
						waitrt?
						fput "hide"
					elsif result =~ /that no one has noticed/
						nil
					elsif result =~ /but can't see anywhere/
						nil
					end
			end
		else
			nil
		end
	
	end

	
	def wait_rt
		waitrt?
		waitcastrt?
	end

################ Spell Checks to Cast
def infuse_weapon
if !UserVars.osacrew["infusespell"].empty?
	if Spell[UserVars.osacrew["infusespell"]].affordable?
		fput "prep #{UserVars.osacrew["infusespell"]}"
		fput "infuse my #{checkright}"
		pause 5
	else
		echo "------==== Out Of Mana ==== ------"
	end
else
	echo "------==== No Insufion Spell Designated ==== ------"
end
end

def can_cast
	if !@spell_type.empty?
		if !Spell[@spell_type].known?
			echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat2 ==== ------"
			exit
		end
		if Spell[@spell_type].affordable?
			waitrt?
			waitcastrt?
			fput "incant #{@spell_type} #{@cast_type}"
			waitrt?
			stance_defensive
		else
			stance_defensive
			wait_until {Spell[@spell_open].affordable?}
			fput "incant #{@spell_type} #{@cast_type}"
		end
	else
		echo "------==== No Spell Designated. Select An Attack Spell And Restart OSACombat2 ==== ------"
		exit
	end
end

def can_cast_opener
	if !@spell_open.empty?
		if !Spell[@spell_open].known?
		end
		if GameObj.loot.find { |loot| loot.name =~ /vine|grapevine|creepers/ }
			return
		end
		if Spell[@spell_open].affordable?
			fput "incant #{@spell_open}"
			stance_defensive
		else
			stance_defensive
			return
		end
	else
		return
	end
end

############# Bard Spell Caster

def bard_1030
	if checkmana >= 110
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
		end
	if GameObj.targets.count >= 2
		fput "incant 1030 open"
		stance_guarded
		wait_rt
		end
	end
end


def bard_1008
				if checkmana >= 75
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if GameObj.targets.count == 1
					fput "incant 1008 target"
					stance_guarded
					wait_rt	
				end
			end
		end

def bard_1035
			if Spell.active? "1035"
				nil
			else
				if checkmana >= 110
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				fput "incant 1035"
				stance_guarded
				wait_rt	
			end
		end
	end
	
	
def bard_1002
				if checkmana >= 75
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
					fput "incant 1002 target"
					stance_guarded
					wait_rt	
				end
			end
			




############# Attack Openers for Single Target
		
	def flurry
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
	end
	if checkstamina > 15
	fput "weapon flurry"
	wait_rt
	elsif
	echo "not enough stamina"
	end
end

		
	def cripples
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
	end
	if checkstamina > 7
	fput "weapon cripple"
	wait_rt
	elsif
	echo "not enough stamina"
	end
end

	
	def voln_sleep
	if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
		end
	if GameObj.targets.count >= 2
		fput "Symbol of Sleep"
		wait_rt
	end
end

	
	
	def att_openers
	if UserVars.osacrew["attackopen"] == 0
	nil
	elsif UserVars.osacrew["attackopen"] == 1
	shieldstrike
	elsif UserVars.osacrew["attackopen"] == 2
	flurry
	elsif UserVars.osacrew["attackopen"] == 3
	cripples
	waitrt
	elsif UserVars.osacrew["attackopen"] == 4
	shieldcharge
	elsif UserVars.osacrew["attackopen"] == 5
	voln_sleep
	end
	end
	
################### AOE WEAPON Attacks	
	def whirlwind
			if Spell.active? "9005"
				nil
			else
				if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "weapon whirlwind"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
					fput "weapon whirlwind"
					wait_rt
					end
				if GameObj.targets.count == 1
				att_openers	
				end
				end
			end
	
	def volleyfire
			if Spell.active? "9005"
				nil
			else
				if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "weapon volley"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
					fput "weapon volley"
					wait_rt
				end
				if GameObj.targets.count == 1
				att_openers	
				end
			end
		end	
	
	def wbladeatt
			if Spell.active? "9005"
				nil
			else
				if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "weapon wblade"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
					fput "weapon wblade"
					wait_rt
				end
				if GameObj.targets.count == 1
				att_openers	
				end
			end
		end
	
	def pulverizer
			if Spell.active? "9005"
				nil
			else
			if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "weapon pulverize"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
					fput "weapon pulverize"
					wait_rt
				end
				if GameObj.targets.count == 1
				att_openers	
				end
			end
		end	
	
	def cyclones
			if Spell.active? "9005"
				nil
			else
			if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "weapon cyclone"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
				fput "weapon cyclone"
				wait_rt
				end
			if GameObj.targets.count == 1
				att_openers
				end
			end
		end

	
	def clashs
			if Spell.active? "9005"
				nil
			else
			if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
			if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "weapon clash"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
				fput "weapon clash"
				wait_rt
				end
			if GameObj.targets.count == 1
				att_openers
			end
		end
	end	


	
	def aoe_att
	if UserVars.osacrew["aoe"] == 0
	nil
	elsif UserVars.osacrew["aoe"] == 1
	whirlwind
	elsif UserVars.osacrew["aoe"] == 2
	cyclones
	elsif UserVars.osacrew["aoe"] == 3
	pulverizer
	elsif UserVars.osacrew["aoe"] == 4
	wbladeatt
	elsif UserVars.osacrew["aoe"] == 5
	volleyfire
	elsif UserVars.osacrew["aoe"] == 6
	clashs
	elsif UserVars.osacrew["aoe"] == 7
	shieldthrow
	end
	end
	
	
	
############## Shield Manuevers		
	def shieldcharge
				if checkstamina > 14
				if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				fput "shield charge"
				wait_rt
				end	
			end
	
	def shieldstrike
				if checkstamina > 15
				if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end 
					fput "shield strike"
					wait_rt
				end
			end
	
	def shieldthrow
			if Spell.active? "9005"
				nil
			else
				if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
				if UserVars.osacrew["attackopen"] == "5" && checkstamina > 20
				voln_sleep
				put "shield throw"
			    wait_rt
				end
				if checkstamina > 20 && GameObj.targets.count >= 2
				fput "shield throw"
				wait_rt
				end
			if GameObj.targets.count == 1
				att_openers
			end
		end
	end
	

################# Mstrike Routine	
	def mstrike_routine
	
		#respond "Debug Output - Starting Mstrike Round"

		if Skills.multiopponentcombat >= 5
			if Spell.active? "9005"
				nil
			else
				if percentstamina >= 50
						if GameObj.targets.count {|npc| npc.status =~ /dead|gone/ && npc.name =~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0
					end
					if GameObj.targets.count >= 2 && $osacombat_my_mstrike_focus == 0 && $osacombat_my_mstrike_open >= 1
						stance_offensive
						#respond "Debug Output - Open Mstrike"
						fput "mstrike" if percentstamina >= 50
					elsif GameObj.targets.count == 1 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1
						stance_offensive
						#respond "Debug Output - Focus Mstrike"
						fput "mstrike target" if percentstamina >= 50
					elsif GameObj.targets.count >= 2 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1
						stance_offensive
						#respond "Debug Output - Open Mstrike, many in room but I know focus."
						fput "mstrike" if percentstamina >= 50
					end
				end
			end
		else
			nil
		end
		#respond "Debug Output - Ending Mstrike Round"
		waitrt?
	
	end
	
def GameObjNpcCheck()
    npcs = GameObj.npcs.find_all { |i| i.status !~ /dead|gone/ }
    npcs.delete_if { |npc| CharSettings['untargetable'].include?(npc.name) }
    npcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate/i && npc.name !~ /ethereal|celestial|unworldly/i }
    return npcs.size.to_i
 end
	
	def looter ()
    echo "loot" if $osacrew_debug
    waitrt?
    if checkroom("Duskruin Arena, Dueling Sands").nil?
      dead_npcs = GameObj.npcs.find_all { |i| i.status == 'dead' && i.type !~ /escort/i }
        if dead_npcs.each { |i| 
            if !UserVars.osacrew["lootscript"].empty?
              start_script "#{UserVars.osacrew["lootscript"]}"
			  wait_while { running?("#{UserVars.osacrew["lootscript"]}") }
              break
            else
			  fput "loot ##{i.id}"
              fput "loot room"
        end	
          }
		end
	end
end

	
def wait_loot
	if !UserVars.osacrew["societyscript"].empty?
		if running? "#{UserVars.osacrew["societyscript"]}"
			stop_script "#{UserVars.osacrew["societyscript"]}"
		end
	end	
end

	
################# Combat Styles	
	def combat	
		wait_loot
		stand_check
		if @attack_type.to_i == 0
		nil
		elsif @attack_type.to_i == 1
			wait_rt
			stance_offensive
			aoe_att 
			wait_rt
			mstrike_routine
			wait_rt
			uac_round
			wait_rt
			looter
			endcombat_actionreset
	
		elsif @attack_type.to_i == 2
			wait_rt
			stance_offensive			
			mstrike_routine
			hide_time
			uac_round
			looter
			endcombat_actionreset
	
		elsif @attack_type.to_i == 3			
			wait_rt
			stance_offensive
			aoe_att
			wait_rt
			mstrike_routine
			wait_rt
			chicken_attack
			wait_rt
			looter
			endcombat_actionreset
			
	
		elsif @attack_type.to_i == 4
			wait_rt
			stance_offensive
			mstrike_routine
			wait_rt
			hide_time
			chicken_ambush
			wait_rt
			looter
			endcombat_actionreset
			
		elsif @attack_type.to_i == 5
		    wait_rt
			stance_offensive
			aoe_att
			wait_rt
			mstrike_routine
			wait_rt
			chicken_fire
			wait_rt
			looter
			endcombat_actionreset
				
		elsif @attack_type.to_i == 6
			wait_rt
			stance_offensive
			mstrike_routine
			wait_rt
			hide_time
			chicken_fire
			wait_rt
			looter
			endcombat_actionreset
	
		elsif @attack_type.to_i == 7		
			kneel_check
			wait_rt
			stance_offensive
			aoe_att
			wait_rt
			mstrike_routine
			wait_rt
			chicken_fire
			wait_rt
			looter
			endcombat_actionreset
			
		
		elsif @attack_type.to_i == 8	
			kneel_check
			wait_rt
			stance_offensive
			mstrike_routine
			wait_rt
			hide_time
			chicken_fire
			wait_rt
			looter
			endcombat_actionreset
			
		elsif @attack_type.to_i == 9
			prep_reset
			can_cast_opener
			spell_cast_bolter
			looter
			endcombat_actionreset
		elsif @attack_type.to_i == 10
			prep_reset
			can_cast_opener
			spell_cast_warder
			looter
			endcombat_actionreset
		elsif @attack_type.to_i == 11
			prep_reset
			wait_rt
			stance_offensive
			can_cast_opener
			wait_rt
			aoe_att
			wait_rt
			mstrike_routine
			wait_rt
			chicken_fire
			wait_rt
			looter
			endcombat_actionreset
			
		elsif @attack_type.to_i == 12
			prep_reset
			wait_rt
			stance_offensive
			can_cast_opener
			wait_rt
			aoe_att
			wait_rt
			mstrike_routine
			wait_rt
			chicken_attack
			wait_rt			
			looter
			endcombat_actionreset
			
		elsif @attack_type.to_i == 13
			prep_reset
			bard_1035
			bard_1002
			looter
			endcombat_actionreset
			
		elsif @attack_type.to_i == 14
			prep_reset
			bard_1030
			wait_rt
			bard_1008
			wait_rt
			looter
			endcombat_actionreset			
			end			
		end
	
############Combat Checking Start
	
before_dying {
if checkname == "Carolanne"
	stop_script "bravery"
end
if (Spell[1625].known?) and (Stats.level >= 29)
	infuse_weapon
end
if Spell[630].known?
	fput "tell comp behave defensive"
end
fput "store both"
if running? "reactive"
	stop_script "reactive"
end
if !UserVars.osacrew["societyscript"].empty?
	if running? "#{UserVars.osacrew["societyscript"]}"
		stop_script "#{UserVars.osacrew["societyscript"]}"
	end
end
}

do_client "gird"
mstrike_setup
if checkname == "Carolanne"
	start_script "bravery"
end
if (Skills.polearmweapons.to_i >= 75) or (Skills.edgedweapons.to_i >= 25) or (Skills.twohandedweapons.to_i >= 10) or (Skills.bluntweapons.to_i >= 25) or (Skills.brawling.to_i >= 75) or (Skills.rangedweapons.to_i >= 10)
	start_script "reactive"
end
if !UserVars.osacrew["societyscript"].empty?
	start_script "#{UserVars.osacrew["societyscript"]}"
else
	echo "------==== No Society Script Designated ==== ------"
end
if (Spell[1625].known?) and (Stats.level >= 29)
	pause 1
	fput "beseech #{checkright} conserve"
end
if Spell[630].known?
	fput "tell comp behave offensive"
end
if UserVars.osacrew["spellopen"].empty? == true
	echo "
	------==== No Opener Spell Designated ==== ------
	"
end
if UserVars.osacrew["undeadspellopen"].empty? == true
	echo "
	------==== No Undead Opener Spell Designated ==== ------
	"
end
loop {
	wait_until {GameObj.targets.count {|npc| npc.status !~ /dead|gone/ && npc.name !~ /animated|ghostly| arm|arms|pincer|pincers/ } > 0}
	creature_type
	combat
	sleep 0.1
}