# Autosort.lic by Azanoth: Intended to mimic psinet functionality
before_dying { DownstreamHook.remove('autosort_hook'); }
no_kill_all
no_pause_all
i_stand_alone
hide_me

################ Load loot database
$autosort_lists = Hash.new

#[ "alchemy", "ammo", "box", "container", "gem", "herb", "instrument", "jewelry", "note", "scroll", "skin", "storage", "tickets", "wand" ].each { |category| $autosort_lists[category] = Array.new }

$autosort_lists["[Simucoin Items]"]			= [ "squat pale grey crystal bottle", "Adventurer's Guild voucher pack", "twisting blue-green potion", "potent blue-green potion", "swirling yellow-green potion", "potent yellow-green potion", "squat jar of pallid grey salve", "Adventurer's Guild task waiver" ]
$autosort_lists["[Containers]"] 			= [ "satchel", "case", "basket" ]
$autosort_lists["[Clothing - Back]"] 		= [ "backpack", "carryall" ]
$autosort_lists["[Clothing - Head]"]		= [ "hat", "hood", "mask" ]
$autosort_lists["[Clothing - Shoulder]"]	= [ "cape", "mantle" ]
$autosort_lists["[Clothing - Cloak]"] 		= [ "cloak", "coat", "jacket", "parka", "raincoat" ]
$autosort_lists["[Clothing - Front]"] 		= [ "sweater", "vest", "waistcoat" ]
$autosort_lists["[Clothing - Chest]"] 		= [ "shirt", "undershirt" ]
$autosort_lists["[Clothing - Hands]"] 		= [ "gauntlet", "gauntlets", "gloves", "handwraps" ]
$autosort_lists["[Clothing - Fingers]"] 	= [ "band", "finger-armor", "ring", "rings" ]
$autosort_lists["[Clothing - Waist]"] 		= [ "belt" ]
$autosort_lists["[Clothing - Belt]"] 		= [ "bag", "kit", "pouch", "sack" ]
$autosort_lists["[Clothing - Legs]"] 		= [ "breeches", "pants", "trousers", "leggings" ]
$autosort_lists["[Clothing - Feet]"] 		= [ "boots", "sandals", "shoes", "snowshoes" ]
$autosort_lists["[Jewelry - Head]"] 		= [ "circlet", "crown", "headband", "tiara" ]
$autosort_lists["[Jewelry - Ear]"] 			= [ "earring", "earcuff" ]
$autosort_lists["[Jewelry - Neck]"] 		= [ "talisman", "medallion", "neckchain", "necklace", "pendant", "torc" ]
$autosort_lists["[Jewelry - Wrist]"] 		= [ "armband", "bracelet", "bracer", "wristlet" ]
$autosort_lists["[Jewelry - Finger]"] 		= [ "ring", "band" ]
$autosort_lists["[Jewelry - Ankle]"] 		= [ "anklet" ]
$autosort_lists["[Jewelry - Pin]"] 			= [ "bowtie", "brooch", "barrette", "clasp", "pin", "stickpin", "buckle", "wings", "tail" ]
$autosort_lists["[Scroll(s)]"] 				= [ "paper", "vellum", "scroll", "tome", "parchment", "palimpsest", "papyrus" ]
$autosort_lists["[Self-Chargers]"] 			= [ "ethereal blue-white flame", "unicursal shadowglass hexagram", "writhing mote of shadow", "heroic knight clasp", "pearl-edged white ora cube", "radiant golden rod" ]
$autosort_lists["[Gem(s)]"]					= [ "agate", "amber", "amethyst", "beryl", "blazestar", "bloodstone", "carbuncle", "chalcedony", "coral", "cordierite", "crystal", "despanal", "diamond", "diopside", "emerald", "faenor-bloom", "feystone", "garnet", "gem", "glimaerstone", "haon", "heliodor", "hyacinth", "jacinth", "jade", "jasper", "lapis lazuli", "maoral", "marble", "moonstone", "obsidian", "onyx", "opal", "pearl", "quartz", "rosespar", "ruby", "sapphire", "sard", "shard", "spinel", "stone", "thanot", "topaz", "tourmaline", "turquoise", "zircon", "scarab" ]
$autosort_lists["[Plinite(s)]"] 			= [ "plinite" ]
$autosort_lists["[Rank 1 Herb(s)]"] 		= [ "some acantha leaf", "tincture of acantha", "some ambrominas leaf", "tincture of ambrominas", "some cactacae spine", "tincture of cactacae", "some wolifrew lichen", "tincture of wolifrew", "some torban leaf", "rose-marrow", "rose-marrow potion", "rose-marrow elixir", "some haphip root", "root", "basal moss", "ball of basal moss", "sticky ball of basal moss", "tincture of basal", "tincture of talneo", "talneo elixir"]
$autosort_lists["[Rank 2 Herb(s)]"] 		= [ "some ephlox moss", "ball of ephlox moss", "tincture of ephlox", "some sovyn clove", "tincture of sovyn", "tincture of bolmara", "some woth flower", "tincture of woth", "some withered aloeas stem", "brostheras elixir", "tincture of brostheras", "some pothinir grass", "wingstem elixir", "tincture of bur-clover", "bur-clover elixir", "stem", "some calamia fruit", "tincture of calamia" ]
$autosort_lists["[Magical]"] 				= [ "shard of dark crimson rock candy", "gold-framed clear crystal lens", "ruby amulet", "small statue" ]
=begin
$autosort_lists["[Storage]"] 				= [ "sarcophagus", "armoire" ]
$autosort_lists["[Ticket(s)]"] 				= [ "tickets" ]
$autosort_lists["[Note(s)]"] 				= [ "chit", "note" ]
$autosort_lists["[Core(s)]"] 				= [ "core" ]
$autosort_lists["[Alchemy]"] 				= [ "seed", "air", "earth", "fire", "water", "cauldron", "water", "mortar", "berry", "ayana", "vial", "jar", "bottle", "humor", "hair"]
$autosort_lists["[Dust]"] 					= [ "dust" ]
$autosort_lists["[Essence]"] 				= [ "essence" ]
$autosort_lists["[Potion(s)]"] 				= [ "potion" ]
$autosort_lists["[Box(es)]"] 				= [ "strongbox", "box", "coffer", "trunk" ]
$autosort_lists["[Chest(s)]"] 				= [ "chest" ]
$autosort_lists["[Crate(s)]"] 				= [ "crate" ]
$autosort_lists["[Ammo]"] 					= [ "arrow", "arrows", "bolt", "bolts", "fletchings", "glue", "shafts" ]
$autosort_lists["[Junk]"] 					= [ "branch", "muck", "barnacles", "sand", "sandstone", "carapace", "debris", "rose", "slime", "excrement", "dirt", "flesh", "charcoal", "rock", "spring", "bark" ]
$autosort_lists["[Duskruin]"]				= [ "falcon","portrait", "vase", "mandolin", "pipe", "ferroniere", "manuscript", "painting", "slippers", "egg" ]
$autosort_lists["[Herb(s) - Head/Neck]"] 	= [ "rose marrow potion", "aloeas stem", "haphip root", "brostheras elixir" ]
$autosort_lists["[Herb(s) - Torso/Eyes]"] 	= [ "basal moss", "pothinir grass", "talneo potion", "wingstem potion" ]
$autosort_lists["[Herb(s) - Arms/Legs]"] 	= [ "ambrominas leaf", "ephlox moss", "cactacae spine", "calamia fruit", "sovyn clove" ]
$autosort_lists["[Herb(s) - Nerves/HP]"] 	= [ "wolifrew lichen", "bolmara potion", "torban leaf", "woth flower", "acantha leaf" ]
=end

################ Add downstream hook
action = proc { |server_string|
    if server_string =~ /^(?:<container.*inv>|<exposeContainer.*inv>)?([IO]n the .*? you see )(.*?)\./
		$autosort_container = $1.strip
		$autosort_display_pending = $2.strip
		nil
    else
		server_string
    end
}
$autosort_display_pending = nil
DownstreamHook.add('autosort_hook', action)

################ Create list function
# if category is nil, then display $autosort_container
def create_list(items, category = nil)
    string = ""
    list_size = 0
    
    ## create heading
    if(category == nil)
        string.concat($autosort_container)
    else
        string.concat("#{category[0, 1].upcase}#{category[1..-1]}:")
    end
    
    ## add items
    items.each { |item|
        count = $item_count[$item_name[item]]
	if(items.index(item) == 0)
	    string.concat(" #{item.sub('and', '')}")
	elsif(items.index(item) == items.size - 1 && !category.nil?)
	    string.concat(" and #{item}")
	elsif(items.index(item) == items.size - 1 && category.nil?)
            if($item_name[item] == "some silver coins")
                string.concat(", #{item}")
            else
                string.concat(", #{item.sub('and', '')}")
            end
	else
	    string.concat(", #{item}")
	end
	string.concat(" (#{count})") if count > 1
	list_size += count
    }

    string.concat(".") unless category.nil? && $autosort_categorized_flag
    return "\n#{list_size} #{string}" if !category.nil?
    return "#{string}" if category.nil?
end

################ Loop

## Make shallow copy of @lists hash, add 'uncategorized' category
hash_copy = Hash.new
$autosort_lists.keys.each { |key| hash_copy[key] = Array.new }
hash_copy["uncategorized"] = Array.new

$item_name = Hash.new
$item_count = Hash.new
loop {
    sleep(0.01.to_f) unless $autosort_display_pending
    if($autosort_display_pending)
        output = ""
        
        ## Get contents, number and categorize items
        contents = $autosort_display_pending.scan(/(?:a|an|some|and)? ?<a.*?<\/a>/)
        
        contents.each { |string|
            # get name, check count
            noun, name = /^(?:.*)<a.* noun="(.+)">(.*?)<\/a>/.match(string).captures
            $item_name[string] = name
			#respond "#{name}"
            $item_count[name] += 1
            next if $item_count[name] > 1 # skip if count is above 1
            
            # find category
            item_category = "uncategorized"
            $autosort_lists.keys.each { |category|
                if($autosort_lists[category].index(name))
                    item_category = category
                    $autosort_categorized_flag = true
				elsif($autosort_lists[category].index(noun))
					item_category = category
					$autosort_categorized_flag = true
                end
            }
            
            ## add to hash_copy
            hash_copy[item_category].push(string)
        }
        
        ## create lists
        output.concat(create_list(hash_copy["uncategorized"]))
        if($autosort_categorized_flag && hash_copy["uncategorized"].size > 0)
			output.concat(" and the following:")
        elsif($autosort_categorized_flag)
			output.concat(" the following:")
        end
        
        hash_copy.keys.each { |category|
            next if category == "uncategorized"
            category_size = hash_copy[category].size
            output.concat(create_list(hash_copy[category], category)) if category_size > 0
        }
        
        ## Display
        if(contents.size > 8)
	    output.concat("\n(#{contents.size} Total)\n>")
        else
	    output.concat("\n>")
        end
        
        if($fake_stormfront)
	    #output = output.gsub(/<\w.*?>/, "\034GSL\r\n")
	    #output = output.gsub(/<\/.*?>/, "\034GSM\r\n")
            puts output.gsub(/<.*?>/, '')
        else
            puts output
        end
        
        ## clear variables
        hash_copy.keys.each { |key| hash_copy[key].clear }
        $item_count.clear
        $item_name.clear
        $autosort_categorized_flag = false
        $autosort_display_pending = nil
    end
}
