# frozen_string_literal: true


lich_gem_requires = '5.7.0'
if Gem::Version.new(LICH_VERSION) < Gem::Version.new(lich_gem_requires)
  requirement_failed = true
  if $frontend == 'stormfront' || $frontend == 'profanity'
    _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "Script: #{Script.current.name} now requires a newer version of Lich (#{lich_gem_requires}+) to run." + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "Please update to a newer version." + "\<\/preset\>"
    _respond ""
    _respond "\<preset id=\"thought\"\>" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION)}" + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation" + "\<\/preset\>"
    _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
  else
    _respond "##" + "########################################"
    _respond ">" + "Script: #{Script.current.name} now requires a newer version of Lich (#{lich_gem_requires}+) to run."
    _respond ">" + "Please update to a newer version."
    _respond ">" + ""
    _respond ">" + "Currently running Lich Version: #{Gem::Version.new(LICH_VERSION)}"
    _respond ">" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation"
    _respond "##" + "########################################"
  end
end

BOOSTS = Struct.new(:type, :area, :value)
ENHANCIVE = Struct.new(:id, :name, :location, :boosts)

LOCATIONS = {
  'ankle': 'Attached to your ankle',
  'arms': 'Attached to your arms',
  'around your legs': 'Attached to your legs',
  'attached to the belt': 'Attached to your belt',
  'back': 'On your back',
  'chest': 'Over your chest',
  'chest, beneath': 'Slipped into, on your chest',
  'ear\.': 'Hung from a single ear',
  'ears\.': 'Hung from both ears',
  'feet, beneath': 'Slipped on your feet',
  'finger': 'On your fingers',
  'front': 'Put over your front',
  'hair': 'Placed in your hair',
  'hands': 'Slipped over your hands',
  'hanging it from': 'Draped over your shoulders',
  'head': 'On your head',
  'neck\.': 'Hung around your neck',
  'on your feet': 'On your feet',
  'on your legs': 'Slipped into, on your legs',
  'over your legs': 'Pulled over your legs',
  'anywhere on your body': 'As a pin',
  'slinging it across your shoulders': 'Slung over your shoulder',
  'waist\.': 'Around your waist',
  'wrist': 'Attached to your wrist'
}.freeze

STAT = %w[
  Agility
  Aura
  Constitution
  Dexterity
  Discipline
  Influence
  Intuition
  Logic
  Strength
  Wisdom
].freeze

def get_location(id)
  res = Lich::Util.issue_command("inspect ##{id}", /You carefully|sound idea/)

  res.map do |line|
    next unless line =~ /You determine/

    LOCATIONS.each do |k, v|
      return v if line.match(k.to_s)
    end
  end
  nil
end

def get_boosts(id)
  res = Lich::Util.issue_command("recall ##{id} quick", /As you recall/, /unlocked loresong/)
  tmp_boosts = []
  res.map do |line|
    next unless line =~ /boost/

    boost_value = line.gsub(/.*a boost of (\d+).*/, '\1')
    boost_type = line.gsub(/.*a boost of \d+ to (.*|.) (Bonus|Base|Rank|Ranks)\./, '\2')
    if boost_type !~ /Bonus|Base|Rank/
      boost_type = nil
      boost_area = line.gsub(/.*a boost of \d+ to (.*|.)./, '\1')
    else
      boost_area = line.gsub(/.*a boost of \d+ to (.*|.) (Bonus|Base|Rank|Ranks)\./, '\1')
    end
    tmp_boosts.append(BOOSTS.new(boost_type, boost_area, boost_value))
  end
  tmp_boosts
end

# Main
res = Lich::Util.issue_command('inv enh list', /wearing the following enhancive items/, /Items:/, usexml: true)

enhancive_list = []

res[1..-3].map do |line|
  item_long = line.gsub(%r{\ \(.*|</a>|<a.*">}, '').strip
  item_id = line.gsub(/.*exist="(\d+)".*/, '\1')

  item_location = get_location(item_id)

  next unless item_location

  boosts = get_boosts(item_id)

  enhancive_list.append(ENHANCIVE.new(item_id, item_long, item_location, boosts))
end

enhancive_list.each do |e|
  echo "#{e.name} - #{e.location}"
end

total = {}
enhitems = {}
enhancive_list.sort { |a, b| a[:location] <=> b[:location] }
prev_location = ''
enhancive_list.each do |e|
  if e.location != prev_location
    prev_location = e.location
    respond "\n#{e.location}:\n\n"
  end
  e.boosts.each do |b|
    enhitems[e.name] = [] unless enhitems[e.name]
    if b.type
      respond "#{b.value} #{b.area} #{b.type} (#{e.name})\n"
      enhitems[e.name] << "- #{b.value} #{b.area} #{b.type}"
    else
      respond "#{b.value} #{b.area} (#{e.name})\n"
      enhitems[e.name] << "- #{b.value} #{b.area}"
    end

    b.value = b.value.to_i * 2 if (STAT.include? b.area) && (b.type == 'Bonus')

    total[b.area] += b.value.to_i
  end
end

sorted = enhitems.sort_by {|k, v| k}
respond "\n=== By Item ===\n"
sorted.each do |k, v|
  respond "#{k} #{v.join(' ')}"
end

sorted = total.sort_by {|k, v| -v}
respond "\n=== Totals ===\n"
sorted.each do |k, v|
  respond "+#{v} #{k}"
end
