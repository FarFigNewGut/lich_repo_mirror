#QUIET
silence_me

question_timeout = $hat_question_timeout
$hat_question_queue = Queue.new # Thread-safe queue
one_minute_warning = false
$hat_player_questions = {} # Tracks active questions for players
player_names = Regexp.union($hat_players.keys)

fput("recite The floor is open. You may WHISPER ME about your MATES' SYMBOL, but remember: you must pass the Kraken's test before I answer.")

# Thread to add questions to the queue
Lich::Messaging.msg("info", "Add question thread started.")
while (Time.now.to_f < question_timeout.to_f)
  line = get?
  if line =~ /(?:\(OOC\) )?(\w+)(?:'s player)? whispers,\s["']?.*?(?:\b(#{player_names}).*?\b(symbol)\b|.*?\b(symbol)\b.*?\b(#{player_names})).*?["']?/i
    asker = $1.downcase
    target = $2 || $5
    target = target.downcase

    if asker == target
      fput("whisper #{asker} Sneaky, eh? Try asking about someone else!")
      next
    end

    if !$hat_players.key?(asker) || !$hat_players.key?(target)
      fput("whisper #{asker} Invalid target or asker.")
      next
    end

    if $hat_player_questions[asker]
      fput("whisper #{asker} You already have a pending question. Wait for your turn.")
      next
    end

    $hat_question_queue << { asker: asker, target: target }
    $hat_player_questions[asker] = true # Track question submission
    Lich::Messaging.msg("warn", "Question added: #{asker} asks about #{target}.")
    fput("whisper #{asker} Your question has been received. Please stand by for your turn.")
  end

  if (question_timeout - Time.now) < 61 && !one_minute_warning
    fput("recite The Kraken grows hungry! #{(question_timeout - Time.now).to_i} seconds left!")
    one_minute_warning = true
  end
  break if $hat_halt
end

wait_while { $hat_processing_questions }
converse_timeout = Time.now + $hat_converse_time
fput("recite Time's up for questioning the Purloiner! Spend the next #{(converse_timeout - Time.now).to_i} seconds trying to find out your symbol from your fellow players.")
Lich::Messaging.msg("info", "Add question thread ended.")

while Time.now.to_f < converse_timeout.to_f
  wait_until { (converse_timeout - Time.now) < 91}
  case (converse_timeout - Time.now)
  when 85..90
    fput "say 90 seconds"
    wait_until { (converse_timeout - Time.now) < 61}
  when 55..60
    fput "say 60 seconds"
    wait_until { (converse_timeout - Time.now) < 46}
  when 40..45
    fput "say 45 seconds"
    wait_until { (converse_timeout - Time.now) < 31}
  when 25..30
    fput "say 30 seconds"
    wait_until { (converse_timeout - Time.now) < 16}
  when 10..15
    fput "say 15 seconds"
    wait_until { (converse_timeout - Time.now) < 6}
  when 1..5
    fput "say 5 seconds"
    break
  end
  sleep(0.1)
end