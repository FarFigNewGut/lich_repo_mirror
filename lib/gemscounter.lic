=begin

	gemscounter

	Author: Nisch
	Created: 2018-04-29
	Version: 1.0.0
	Description: Counts gems in jars in your locker, worn containers, and loose gems.
	
	Changelog:
			
		1.0.0 (2018-04-29)
			- Initial version
	
=end

if defined?(GameObj.type_data)
	GameObj.load_data if GameObj.type_data.empty? or GameObj.type_data.nil?
	if GameObj.type_data.nil?
		wait_while { running?('updater') }
		wait_while { running?('repository') }
		start_script 'repository', [ 'download', 'gameobj-data.xml' ]
		wait_while { running?('repository') }
		wait_while { running?('updater') }
		start_script 'updater', [ 'add', 'gameobj-data.xml' ]
		wait_while { running?('updater') }
		GameObj.load_data
		exit if GameObj.type_data.nil?
	end
end

silence_me

silence = nil
to_do = nil
silence_done = nil

if CharSettings[:gem_keeper_jars].nil?
	CharSettings[:gem_keeper_jars] = Array.new
	CharSettings[:gem_keeper_empty_jar_count] = 0
else
	CharSettings[:gem_keeper_jars] = Array.new
	CharSettings[:gem_keeper_empty_jar_count] = 0
end

if CharSettings[:gem_keeper_inv_jars].nil?
	CharSettings[:gem_keeper_inv_jars] = Array.new
	CharSettings[:gem_keeper_empty_inv_jar_count] = 0
else
	CharSettings[:gem_keeper_inv_jars] = Array.new
	CharSettings[:gem_keeper_empty_inv_jar_count] = 0
end

if CharSettings[:gem_keeper_gems].nil?
	CharSettings[:gem_keeper_gems] = Array.new
	CharSettings[:gem_keeper_gems_need_jar_count] = 0
else
	CharSettings[:gem_keeper_gems] = Array.new
	CharSettings[:gem_keeper_gems_need_jarcount] = 0
end

silenceOver = true

silence = proc{

	started = false
	
	hook_proc = proc { |s|
	
		if silenceOver then
			DownstreamHook.remove('silence')
			silence_done = true
			s
		else
			nil
		end
	
	}
	
	DownstreamHook.add('silence', hook_proc)
	
	if to_do == "check locker"
	
		dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
		status_tags
		open_result = dothistimeout 'open locker', 1, /exist=".*?" noun="(?:locker|bin)"/
		status_tags

		if open_result =~ /exist="(\d+)" noun="(locker|chest)"/

			locker_id = $1
			
			locker_contents = GameObj.containers[locker_id]
			
			unless locker_contents
				dothistimeout "look in ##{locker_id}", 1, /^In the/
				locker_contents = GameObj.containers[locker_id]
			end
			
			if locker_contents
				
				echo "COUNTING GEMS, IN JARS, IN LOCKER. PLEASE WAIT... "
				
				run=true
				
				while run==true do		
				
					locker_contents.each{|item|
						
						if item.noun =~ /^(?:jar|bottle|beaker)$/ then
						
							if item.after_name != nil then
								
								look_result = dothistimeout "look in ##{item.id} from ##{locker_id}", 1, /^Inside .*? you see [0-9]+ portion|I could not find what you were referring to/
								
								if look_result=~/I could not find what you were referring to/ then
								
									echo "ERROR: Leave the locker and try again."
									
									DownstreamHook.remove('silence')
									silence_done = nil
									
									run=false
									
									#break
									exit
									
								end
								if look_result =~ /^Inside .*? you see ([0-9]+) portion/
								
									count = $1.to_i
									
									gem = item.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
									
									full = look_result.include?('It is full')

									CharSettings[:gem_keeper_jars].push(h={ :gem => gem, :count => count, :full => full, :location => "locker"})
									
								end
								
							else

								#echo "EMPTY JAR: " + item.name
							
							end
							
						else

							if item.type =~ /gem/
							
								#echo "LOOSE GEM: " + item.name
							
							end
							
							
						end
						
					}

					totalGems = 0
					
					output = "         gem in container in locker count  full  location\n"
			   output.concat "         -------------------------- -----  ----  ------------\n"
					for jar in CharSettings[:gem_keeper_jars].sort { |a,b| b[:count] <=> a[:count] }
						if jar[:full] =~ /full/
							jar[:full] = full
						end
						if jar[:full] =~ /false/
							jar[:full]= false
						end
						totalGems = totalGems + jar[:count]
						output.concat "#{jar[:gem].rjust(35)} #{jar[:count].to_s.rjust(2)} #{jar[:full].to_s.rjust(8)}   #{jar[:location].to_s.ljust(30)}\n"
					end
					output.concat "TOTAL JARS: " + CharSettings[:gem_keeper_jars].count.to_s
					output.concat "\n"
					output.concat "TOTAL GEMS: " + totalGems.to_s	
					
					respond "\n"
					respond output						
					
					run = false
					
				end
				
			else

				echo "INFO: NOTHING FOUND IN LOCKER."
				silenceOver = true
				#exit
					
			end
			
			dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
			
		else
		
			echo "INFO: NO LOCKER FOUND."
			silenceOver = true
			#exit
		
		end
	
	elsif to_do == "check inventory"
		
		GameObj.containers.each{|id,container|
		
			thisContainer = GameObj.inv.find{|obj| obj.id == id}	
			thisContainerName = nil
			isLocker = false
			
			if thisContainer == nil or thisContainer.name == nil then
				thisContainerName = "locker (#" + id.to_s + ")"
				isLocker = true
			else
				thisContainer = thisContainer.full_name
			end		
		
			if isLocker == false then
		
				container.each{|item|
				
					if item.noun =~ /^(?:jar|bottle|beaker)$/ then
					
						if item.after_name != nil then
							
							look_result = dothistimeout "look in ##{item.id} in #" + id.to_s, 1, /^Inside .*? you see [0-9]+ portion|I could not find what you were referring to/
							
							if look_result=~/I could not find what you were referring to/ then
							
								echo "ERROR: Leave the locker and try again."
								
								DownstreamHook.remove('silence')
								silence_done = nil
								
								run=false
								
								#break
								exit
								
							end
							if look_result =~ /^Inside .*? you see ([0-9]+) portion/
							
								count = $1.to_i
								
								gem = item.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
								
								full = look_result.include?('It is full')

								CharSettings[:gem_keeper_inv_jars].push(h={ :gem => gem, :count => count, :full => full, :location => thisContainer})
								
							end
							
						else

							#echo "EMPTY JAR: " + item.name
						
						end
						
					else

						if item.type =~ /gem/
						
							#echo "LOOSE GEM: " + item.name
						
						end
						
						
					end

				}
				
			end
		}
		
		silenceOver = true
		
		totalGems = 0
		
		output = "      gem in container in inventory count  full  location\n"
   output.concat "      ----------------------------- -----  ----  ---------------------------\n"
		for jar in CharSettings[:gem_keeper_inv_jars].sort { |a,b| b[:count] <=> a[:count] }
			if jar[:full] =~ /full/
				jar[:full] = full
			end
			if jar[:full] =~ /false/
				jar[:full]= false
			end
			totalGems = totalGems + jar[:count]
			output.concat "#{jar[:gem].rjust(35)} #{jar[:count].to_s.rjust(2)} #{jar[:full].to_s.rjust(8)}   #{jar[:location].to_s.ljust(30)}\n"
		end
		output.concat "TOTAL JARS: " + CharSettings[:gem_keeper_inv_jars].count.to_s
		output.concat "\n"
		output.concat "TOTAL GEMS: " + totalGems.to_s	

		respond "\n"
		respond output						
	
	elsif to_do == "find loose gems"
		
		GameObj.containers.each{|id,container|
		
			container.each{|item|
				
				if item.type == "gem" then
				
					thisContainer = GameObj.inv.find{|obj| obj.id == id}	
					#echo "container: " + thisContainer.to_s
					
					if thisContainer == nil then
						thisContainer = "locker (#" + id.to_s + ")"
					else
						thisContainer = thisContainer.full_name
					end
				
					thisGem = {}
					thisGem[:id] = item.id
					thisGem[:type] = item.type
					thisGem[:noun] = item.noun
					thisGem[:name] = item.name.to_s
					thisGem[:uncut] = false
					thisGem[:count] = 1
					thisGem[:container] = thisContainer
					
					CharSettings[:gem_keeper_gems].push(thisGem)
				end
				
			}
		}
		
		output = "                          loose gem count  container                   \n"
		output.concat "                          --------- -----  ----------------------------\n"
		for gem in CharSettings[:gem_keeper_gems].sort { |a,b| b[:count] <=> a[:count] }
			totalGems = totalGems + gem[:count]
			output.concat "#{gem[:name].rjust(35)} #{gem[:count].to_s.rjust(2)}     #{gem[:container].to_s.ljust(30)}\n"
		end
		output.concat "TOTAL LOOSE GEMS: " + CharSettings[:gem_keeper_gems].count.to_s
		output.concat "\n"
		
		respond "\n"
		respond output
		respond "\n"		
	
	end
	
	silenceOver = true
	
}

before_dying { DownstreamHook.remove("#{script.name}_silence") }

silenceOver = false
silence_done = nil

to_do = "check locker"
silence.call

silenceOver = false
silence_done = nil

to_do = "check inventory"
silence.call

silenceOver = false
silence_done = nil

to_do = "find loose gems"
silence.call

silenceOver = true
silence_done = nil