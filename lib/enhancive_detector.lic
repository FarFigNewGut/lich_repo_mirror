=begin
	Tries to figure out stats/skills from jewelry, helmets, greaves
	
	Use pawn argument to have it pause after each item (meant to be used at a pawn shop - store or sell the item)
	
	Spits output in the familiar window for easy copy/paste, so make sure you have that open
	
	Author:  Dantax
	Version:  1

=end

# Clear out the familiar window
_respond '<clearStream id="familiar"/>'

fam_window_begin = "\034GSe\r\n"
fam_window_end   = "\034GSf\r\n"
if $frontend =~ /stormfront|profanity/
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
end

pawn_mode = script.vars.length > 0 and script.vars[1] =~ /pawn/i

get_items = proc {
	items = []
	
	GameObj.containers.to_a.each { |container| 
		items += container[1].find_all { |item| item.type.include?('jewelry') or item.noun =~ /armband|greave|helm/ }			
	}
	
	items
}

populateStats = proc {
    res = dothistimeout "info", 5, /Normal \(Bonus\)/
    if !res.nil?
		info = Hash.new
        while (line = get)
            if line =~ /(\w+).*:\s+(\d+)\s\((\d+)\)\s+\.+\s+(\d+)\s\((\d+)\)$/
				
                stat = Struct.new(:base, :bonus).new
				#stat.base = $2.to_i
				#stat.bonus = $3.to_i
				stat.base = $4.to_i
				stat.bonus = $5.to_i
				
				info[$1] = stat
            else
                break
            end
		end
	end

	info
}

populateSkills = proc {
    res = dothistimeout "skills", 5, /\|   Bonus   Ranks/
    if !res.nil?
		info = Hash.new
        while (line = get)
            if line =~ /\s+([\w\s-]+)\.+\|\s+(\d+)\s+(\d+)$/
				
                skill = Struct.new(:base, :bonus).new
				skill.base = $2.to_i
				skill.bonus = $3.to_i
				
				info[$1] = skill
            else
                break
            end
		end
	end

	info
}

populateHealth = proc {
    res = dothistimeout "health", 5, /You seem to be in one piece|You have the following|You have some/
    if !res.nil?
		info = Hash.new
        while (line = get)
            if line =~ /\s+Maximum\s(\w+).*\s(\d+)$/
				
                health = Struct.new(:base, :bonus).new
				health.base = $2.to_i
				health.bonus = $2.to_i
				
				info[$1] = health
            elsif line =~ /Remaining Stamina Points/
                break
            end
		end
	end

	info
}

populateMana = proc {
    res = dothistimeout "mana", 5, /Normal\s+Enhanced/
    if !res.nil?
		info = Hash.new
        while (line = get)
            if line =~ /Maximum Mana Points:\s+(\d+)\s+(\d+)$/
                mana = Struct.new(:base, :bonus).new
				mana.base = $2.to_i
				mana.bonus = $2.to_i
				
				info["Max Mana"] = mana
            elsif line =~ /Mana gained off.*:\s+(\d+)\s+(\d+)$/		
                mana = Struct.new(:base, :bonus).new
				mana.base = $2.to_i
				mana.bonus = $2.to_i
				
				info["Mana Recovery"] = mana
            elsif line =~ /You have used the MANA SPELLUP ability/
                break
            end
		end
	end

	info
}

populateStamina = proc {
    res = dothistimeout "stamina", 5, /Maximum Stamina/
    if !res.nil?
		info = Hash.new
        while (line = get)
            if line =~ /Stamina gained per pulse: (\d+)$/
				
                stamina = Struct.new(:base, :bonus).new
				stamina.base = $2.to_i
				stamina.bonus = $2.to_i
				
				info["Stamina Recovery"] = stamina
            elsif line =~ /Stamina abilities/
                break
            end
		end
	end

	info
}

items = get_items.call

before_stats = populateStats.call
before_skills = populateSkills.call
before_health = populateHealth.call
before_stamina = populateStamina.call
before_mana = populateMana.call

before = before_stats.merge(before_skills).merge(before_health).merge(before_mana).merge(before_stamina)

items.each{|item|
	fput "get ##{item.id}"
	fput "wear ##{item.id}"
	
	after_stats = populateStats.call
	after_skills = populateSkills.call
	after_health = populateHealth.call
	after_stamina = populateStamina.call
	after_mana = populateMana.call
	
	after = after_stats.merge(after_skills).merge(after_health).merge(after_stamina).merge(after_mana).merge(after_stamina)
	
	fput "rem ##{item.id}"
	fput "stow ##{item.id}" if not pawn_mode
	
	final = Hash.new
	# Compare enhanced after_stats vs before_stat
	after.each{|name, value|
		diff = Struct.new(:base, :bonus).new
		begin
			diff.base = value.base - before[name].base
			diff.bonus = value.bonus - before[name].bonus
		rescue
			diff.base = value.base
			diff.bonus = value.bonus
		end
		
		final[name] = diff
	}

	# Print the difference
	_respond "#{fam_window_begin}\n#{item.name}"
	_respond "------------------"
	final.each{|name, value|
		if value.base > 0
			_respond "  #{name} => +#{value.base} (+#{value.bonus})"
		end
	}
	_respond "==============================\n#{fam_window_end}"
	
	if pawn_mode
		wait_until { (checkright.nil? and checkleft.nil?) or checkleft =~ /note|scrip/ }
		fput "stow left" if checkleft =~ /note|scrip/
		_respond '<clearStream id="familiar"/>'
	end
}
