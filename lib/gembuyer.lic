
$shop_array = Array.new
class ShopObject
  def print
    echo ("#{@shopname} ----> #{@shoptown} ----> #{@shopid}")
    end
  def shopname
    @shopname
  end
  def shopid
    @shopid
  end
  def shoptown
    @shoptown
  end
  def initialize(iwl_shop_name,iwl_shop_id,iwl_shop_town)
    @shopname = iwl_shop_name
    @shopid = iwl_shop_id
    @shoptown = iwl_shop_town
    $shop_array  << (self)
  end
end

def anon_hook(prefix = '')
  now = Time.now
  "Foreach::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}"
end

def mask_output(start_pattern, end_pattern = /<prompt/, include_end = true)
  filter = false
  name = anon_hook
  DownstreamHook.add(name, proc {|xml|
    if filter
      if xml =~ end_pattern
        DownstreamHook.remove(name)
        filter = false
        next(include_end ? nil : xml)
      else
        next(nil)
      end
    elsif xml =~ start_pattern
      filter = true
      next(nil)
    else
      xml
    end
  })
  return name
end

def quiet_command(command, start_pattern, end_pattern = /<prompt/, include_end = true, timeout=5)
  hook = mask_output(start_pattern, end_pattern, include_end)
  silence_me
  xml = dothistimeout(command, timeout, start_pattern)
  silence_me
  unless xml
    DownstreamHook.remove(hook)
    return nil
  end

  result = [xml]
  while true
    xml = get
    if xml =~ end_pattern
      result << xml if include_end
      return result
    end
    result << xml
  end
end

def pluralit(pi_name)
	pi_result = ""
	if pi_name.include?("piece of") 
		pi_result = pi_name.gsub("piece of","pieces of")
	elsif pi_name.end_with?("y")
		pi_result = pi_name.gsub("y","ies")
	elsif pi_name.include?("coral") 
		pi_result = pi_name
	else
		pi_result = pi_name + "s"
	end
	return pi_result
end

def checkhands
  if (checkright != nil)
    fput "stow right"
  end
  if (checkleft != nil)
    fput "stow left"
  end
  if (checkright != nil) || (checkleft != nil)
	echo "CLEAR THOSE HANDS!!!!"
  end
end


def get_shop_list(town)

    status_tags
    gsl_data = quiet_command(
                  ("shop directory #{town}"),
                  /~*~/,
              )
    gsl_data.each{|gsl_data_line|
      gsl_count=0
      gsl_string = "</d>"
      if gsl_data_line.include? gsl_string
        gsl_array_length = (gsl_data_line.split(gsl_string).count)-1
        while gsl_count < gsl_array_length
          gsl_shop_number = gsl_data_line.split(gsl_string)[gsl_count].split(")")[0].lstrip
          gsl_shop_name = gsl_data_line.split(gsl_string)[gsl_count].split(")")[1].split(">")[1].lstrip
          gsl_count = gsl_count + 1
          ShopObject.new(gsl_shop_name,gsl_shop_number,town)
        end
      end
    } 
  status_tags
  
end

def depearl(dp_str)
	#echo dp_str
  dp_str_pattern =/^\s*[A-Za-z]+\s(?<name>.*)?/i
  dp_str_polished_pattern = /polished (?<name>.*)?/i
  dp_pearl_pattern = /small|tiny|medium|large/
  dp_piece_pattern = /piece of (?<name>.*)?/
  dp_pieces_pattern = /pieces of (?<name>.*)?/
  gp_all_parrent = /\S+(?:\s+\S+){0,1}$/
  dp_gemname = nil
  if (dp_str.include?("pearl")) && (dp_pearl_pattern.match(dp_str))
    dp_gemname  = (dp_str_pattern.match(dp_str))[:name]
  elsif dp_str.include?("polished")
    dp_gemname  = (dp_str_polished_pattern.match(dp_str))[:name]
  elsif dp_str.include?("some") 
    dp_gemname  = (dp_str_pattern.match(dp_str))[:name]
  elsif dp_str.include?("piece of") 
    dp_gemname  = (dp_piece_pattern.match(dp_str))[:name]
  elsif dp_str.include?("pieces of") 
    dp_gemname  = (dp_pieces_pattern.match(dp_str))[:name]
  else
    dp_gemname = gp_all_parrent.match(dp_str)
  end
  return dp_gemname
end



command =   script.vars[0]
checkhands
gembountypattern = /^.* customers requesting.(an|a|some).(?<gem>.*?)\..* You have been tasked to retrieve.(?<qty>.*?).of them\./
if command.downcase.include?("test")
	#teststring = "The gem dealer in Wehnimer's Landing, Murdos Burdos, has received orders from multiple customers requesting a green garnet. You have been tasked to retrieve 6 of them.  You can SELL them to the gem dealer as you find them."
	teststring = "The gem dealer in Wehnimer's Landing, Murdos Burdos, has received orders from multiple customers requesting some polished pink coral.  You have been tasked to retrieve 7 of them.  You can SELL them to the gem dealer as you find them."
	teststring = "The gem dealer in Wehnimer's Landing, Murdos Burdos, has received orders from multiple customers requesting a piece of rose quartz.  You have been tasked to retrieve 5 of them.  You can SELL them to the gem dealer as you find them."
	teststring = "The gem dealer in Wehnimer's Landing, Murdos Burdos, has received orders from multiple customers requesting a bright chrysoberyl gem.  You have been tasked to retrieve 7 more of them.  You can SELL them to the gem dealer as you find them."
	result = (teststring).gsub(" more","").match(gembountypattern)
	echo "test"
	echo "result"
	echo result
	echo result[:gem]
	echo depearl(result[:gem])
	echo result[:qty]
	exit
else
	result = (XMLData.bounty_task).match(gembountypattern)
end
#gembountypattern = /^.*in purchasing (an|a).(?<gem>.*?)\..*go round up.(?<qty>.*?).of them for me\./
#gembountypattern = /^.* customers requesting.(an|a).(?<gem>.*?)\..* You have been tasked to retrieve.(?<qty>.*?).of them\./
#teststring = 'The dealer says, "Ah, so you\'re from the Adventurer\'s Guild?  Yes, I do have a task for you. I\'ve recently received several orders from customers interested in purchasing a white opal.  Unfortunately, I do not have quite enough inventory on hand to meet this demand.  I\'d like for you to go round up 9 of them for me.  You can SELL them to me as you find them."'
#teststring = "The gem dealer in Wehnimer's Landing, Murdos Burdos, has received orders from multiple customers requesting a turquoise stone. You have been tasked to retrieve 6 of them.  You can SELL them to the gem dealer as you find them."
#result = (XMLData.bounty_task).match(gembountypattern)
#result = (teststring).match(gembountypattern)


get_shop_list("landing")

$shop_array.each{|shop_array_item|
  $main_shop_id =  shop_array_item.shopid if shop_array_item.shopname == "Gemaneen's General Store"
}


if !result.nil?
	gb_gemname = depearl(result[:gem])
	matchvar = "containing " + pluralit(result[:gem])
	piffg_data = quiet_command(
					("shop browse landing #{$main_shop_id}"),
					/^.*is currently open for business\./,
					/You may also click the stock numbers/,
					true,
					5
				)
	jarraw = nil
	tmproom = nil
	room = nil
	piffg_data.each{|a|
		tmproom = a if a.include? "Gemaneen's General Store"
		if a.include? matchvar
			jarraw = a
			room = tmproom.lstrip
		end	
	} 
	shop_line_pattern = /^\s*(?<id>.*?)\).*containing.(?<gem>.*?)\s*for\s*(?<cost>.*?).silver/

	jardata = jarraw.gsub(",","").match(shop_line_pattern)

	case 
		when room == "Gemaneen's General Store (entry)"
			roomid = "27897"
		when room == "Gemaneen's General Store (east)"
			roomid = "27899"
		when room == "Gemaneen's General Store (north)"
			roomid = "27900"
	end

	case
		when command.downcase.include?("debug")
			echo result[:gem]
			echo jardata[:id]
			echo jardata[:gem]
			echo jardata[:cost]
			echo room
			echo roomid
		when command.downcase.include?("help")
			echo "Very early release.  Reach out to Gemaneen on LNET to find an alt for bugs or assistance"
			echo ";gembuyer will identify the gems from the bounty, relocate to the room with the jar, and pause the script"
			echo ";gembuyer debug to only see information"
			echo ";gembuyer auto to buy the jar and turn in the bounty"
		else
			if jardata[:id].nil? || jardata[:gem].nil? || jardata[:cost].nil? 
				echo "Gem not found in shop."
				echo "If you believe this is in error please rerun ;gembuyer debug."
				echo "Message Gemaneen directly or reach out on LNET to find an alt."
				# echo result[:gem]
				# echo jardata[:id]
				# echo jardata[:gem]
				# echo jardata[:cost]
				# echo room
				# echo roomid
				exit
			end
			while Room.current.id != 400
				Script.run("go2", "400")
				if Room.current.id != 400
					pause 5
				end
			end
			
			fput "withdraw #{jardata[:cost]}"
			Script.run("go2", roomid)
			if !command.downcase.include?("auto")
				fput "tap ##{jardata[:id]}"
				echo "The tapped jar will be bought for #{jardata[:cost]} silvers"
				echo "If you do not wish to continue then ;k gembuyer"
				echo "If you want to continue then ;u"
				echo ";gembuyer auto to buy the jar and turn in the bounty"
				pause_script 
			end
			fput "buy ##{jardata[:id]}"
			while Room.current.id != 1776
				Script.run("go2", "1776")
				if Room.current.id != 1776
					pause 5
				end
			end
			(1..result[:qty].to_i).each{|a| 
				dothis "shake my jar",/^You give your/
				fput "sell #{gb_gemname}"
			}

			(1..(10-result[:qty].to_i)).each{|a| fput "shake jar";fput "stow #{gb_gemname}"}
			dothis "stow my jar",/^You put/
			while Room.current.id != 3785
				Script.run("go2", "3785")
				if Room.current.id != 3785
					pause 5
				end
			end
			fput "ask task about task"
	end
	else
		echo "No bounty found!"
		if command.downcase.include?("help")
			echo "Very early release.  Reach out to Gemaneen on LNET to find an alt for bugs or assistance"
			echo ";gembuyer will identify the gems from the bounty, relocate to the room with the jar, and pause the script"
			echo ";gembuyer debug to only see information"
			echo ";gembuyer auto to buy the jar and turn in the bounty"
		end
end

