#ruby
=begin
  Customized locksmith pool picking script.  The basic idea is:
    1) You do disarming and (most of) picking
    2) The script takes care of the boring stuff

  When you disarm the box successfully, it automatically continues.

  The script assumes you cannot use calipers and breaks copper lockpicks.
  If it breaks a copper lockpick and you know 403, it will try to break another. 
  It buys 10 more copper lockpicks when you run out.

  It also runs a bounty spooling script to ask for gems every 15 minutes
    Only if your name is 'Kaldonis' though ... no one else uses ;rrbountyspool

  A few more features to come in the future.

  author: Kaldonis
  name: deadpool
  tags: lock picking, utility 
  version: 1.2
=end

if Spell[403].known?
  use_lore_for_second_attempt=true
else
  use_lore_for_second_attempt=false
end

disarmed_trap_msg = /^You carefully push a small ball of cotton into the lock mechanism, surrounding and protecting the small vial from anything that may shatter it\.$|^Knowing how delicate magical glyphs can be, you scrape some extra lines into the markings hoping to alter their meaning and defeat the spell they may hold\.$|^Using a bit of putty from your (slender leather toolkit|brown leather case), you manage to block the tiny hole in the lock plate\.$|^Using a bit of putty from your brown leather case, you cake a thin layer on the lock casing, hopefully sufficient to prevent sparks when the metal arm strikes it\.$|^Taking a lump of putty from your (slender leather toolkit|brown leather case), you carefully apply it to the end of the small tube\.  That should block whatever it's meant to deploy\.$|^Using the metal grips from your (slender leather toolkit|brown leather case), you manage to reach in and grasp the post of the metal hammer, and bend the weak metal out of striking range of the vial\.|With a little force applied to the springs, you manage to pop them inside the (box|chest|coffer|strongbox|trunk), from within which comes the tinkle of breaking glass, followed by a strong acrid smell\.$|^Using the pair of metal grips, you manage to pull out the two pins that hold the upper and lower jaw pieces together\.  As the pins are removed, the jaws suddenly close and warp under the tremendous strain applied by their arming mechanism\.$|^With a little ingenuity you manage to grind down parts of the lock mechanism with your metal file, so it won't come in contact with the crystal when you try to open it\.$|^With great care you take a pair of metal grips and bend the sensitive metal rods out of alignment.  It looks as though they cannot be pressed together by the lock mechanism any more.$|As the air hits the gel, it begins to harden and turn to dust, blowing away in the wind as if it never existed\.$/
disarmed_sphere_msg = /Another moment of prodding, and you are able to poke the gem free of its metal housing, whereupon it falls down into the lock mechanism and out of sight\.$/
disarmed_scales_msg = /^You gently slide your (dagger|knife|spike) into the space under the lid and slice through the cord\.  That oughta do it\.$/
dropped_scarab_msg =/^You carefully nudge the scarab free of its prison without disturbing the lock too much\.  The scarab falls from the lock and onto the ground in front of you\.$/
safe_scarab_msg =/^\*scritch scritch\*  If that had been any easier, you could have done it blindfolded\.$/
unsafe_scarab_msg =/^Deciphering the runes is relatively simple, and you're pretty sure you were successful\.$|^You feel like you probably rendered the .* scarab harmless, but can\'t be sure\./

if UserVars.lockpicksack.nil? or UserVars.lockpicksack.empty?
  echo 'lockpicksack is not set (;vars set lockpicksack= <container name>)'
  exit 
end  


check_bounty = proc {
  if Spell[9003].timeleft < 0.5 && Char.name == 'Kaldonis'
    start_spot = Room.current.id
    Script.run('rrbountyspool')    
    if Room.current.id != start_spot
      pause_script
      Script.run("go2","locksmith pool");
    end
  end
}

buy_copper_lockpicks = proc {
  Script.run('go2','bank')
  fput "deposit silver"
  fput "withdraw 1000 silvers"
  Script.run('go2','locksmith')
  multifput "order 10 of 1","buy","open my package","empty package in my #{UserVars.lockpicksack}"
  sleep 0.2
  waitrt?
  fput "drop package"
  Script.run('go2','locksmith pool')
  fput "get my copper lockpick from #{UserVars.lockpicksack}"
}


if !Room.current.tags.include?("locksmith pool")
  Script.run("go2","locksmith pool");
end
# this bit robbed from ;poolparty
npc = GameObj.npcs.find { |npc| npc.noun =~ /(G|g)nome|(W|w)oman|(A|a)ttendant|(M|m)erchant|(W|w)orker|(B|b)oss|(J|j)ahck|(D|d)warf/}
bin = nil
trash_list = ["barrel","bin","wastebasket","trashcan","bucket","wooden crate","iron barrel","canister"]
trash_list.each {|x|
  if Room.current.description.to_s =~ /#{x}/
    bin = x
    break
  end
}
if bin == nil
  bin_obj = GameObj.loot.find{|t| t.name =~ /\bbarrel|\bbin|\bwastebasket|\btrashcan|\bbucket|\bcanister/}
  bin = bin_obj.noun
end

check_bounty.call

loop{ 
  check_bounty.call
  empty_hands
  mybox=""
  if Spell[403].active?
    fput "stop 403"
  end
  if Spell[404].active?
    fput "stop 404"
  end
  fput "ask #{npc} for job"
  cooldown_msg=/We don\'t have any jobs for you at the moment|done enough boxes for now|You\'ve done enough for a while|You haven\'t quite reflected on your past failure/
  newbox_msg=/The (case|trunk|chest|box|strongbox|coffer) is set up on the table for you/
  line=""
  line = get until line =~ /#{cooldown_msg}|#{newbox_msg}/
  if line =~ /#{cooldown_msg}/
    echo "***Try again later***"
    exit
  elsif line =~ /#{newbox_msg}/
    mybox = $1
  end
  fput "detect #{Char.name} #{mybox}"
  plated=false
  scales=false
  trapped=true # assume as default
  locked=true
  notrap_msg  = /You discover no traps|The lock appears to be free of all obstructions|A small ball of cotton has been pushed up against the vial|Looking closely into the keyhole, you notice a pair of small metal rods that have been bent in opposite directions of each other|You see a tiny hole next to the lock plate which has been completely plugged/
  plated_msg = /There appears to be a plate over the lock, sealing it and preventing any access to the tumblers/
  scales_msg = /However, you should be able to avoid cutting yourself if you are careful/
  line = get until line =~ /#{notrap_msg}|#{plated_msg}|#{scales_msg}|Roundtime:/
  if line =~ /#{notrap_msg}/
    echo "Not trapped"
    trapped=false
  elsif line =~ /#{plated_msg}/
    echo "Plated"
    plated=true
    trapped=false
  elsif line =~ /#{scales_msg}/
    echo "Scales"
    scales=true
  end
  if plated
    waitrt?
    unless Script.exists?('kpop.lic')
      echo "#{$lich_char}#{script.name} needs the script kpop.lic"
      echo "Going to download that..."
      Script.run('repository', 'download kpop.lic')
      wait_while { running?('repository') }
    end
    Script.run('kpop','pool')    
    locked=false
  end
  if trapped && !scales
    echo "*** #{mybox} ***"
    line = get until line =~ /#{disarmed_trap_msg}|#{dropped_scarab_msg}|#{disarmed_sphere_msg}/
    if line =~ /#{dropped_scarab_msg}/
      if checkpcs
        sleep 2.0
        fput "say Bug"
      end
      waitrt?
      scarab_result = dothistimeout "disarm scarab", 5, /#{safe_scarab_msg}|#{unsafe_scarab_msg}/
      if scarab_result =~ /#{safe_scarab_msg}/
        multifput "get scarab","stow scarab"
      else
        # unsafe_scarab_msg
        echo "Disarm the scarab and collect it"
        pause_script
      end
    elsif line =~ /#{disarmed_sphere_msg}/
      waitrt?
      fput "put my lockpick in my #{UserVars.lockpicksack}"
    end
  end
  waitrt?
  if locked
    if righthand !~ /lockpick/
      fput "get my copper lockpick from #{UserVars.lockpicksack}"
      sleep 0.2 # avoid fput / reget race condition
    end
    if reget 10, "^Get what\?"
      buy_copper_lockpicks.call 
    end
    fput "pick #{Char.name} #{mybox} with my copper lockpick"
    sleep 0.2 # avoid fput / reget race condition
    if reget 10, "You broke your lockpick in the attempt"
      waitrt? 
      fput "put my lockpick in #{bin}"
      # try to make loop on this block on repeated code from above
      if (use_lore_for_second_attempt)
        wait_until {Spell[403].affordable?}; waitcastrt?; fput "incant 403"
        if righthand !~ /lockpick/
          fput "get my copper lockpick from #{UserVars.lockpicksack}"
          sleep 0.2 # avoid fput / reget race condition
        end
        sleep 0.2
        if reget 10, "^Get what\?"
          buy_copper_lockpicks.call 
        end
	waitrt?
        fput "pick #{Char.name} #{mybox} with my copper lockpick"
        sleep 0.2 # avoid fput / reget race condition
        if reget 10, "You broke your lockpick in the attempt"
          sleep 0.2 # avoid fput / reget race condition
          waitrt? 
          fput "put my lockpick in #{bin}"
        end
      end
    end
    echo "*** #{mybox} ***"
    line = get until line =~ /^You.*Then\.\.\.CLICK!.*$|That\'s some quality work/
    waitrt?
    if righthand =~ /lockpick/
      fput "put my lockpick in my #{UserVars.lockpicksack}"
    end
    if scales
      echo "***#{mybox} has scales -- get your dagger and disarm***"
      line = get until line =~ /#{disarmed_scales_msg}/
      waitrt?
      fput "put my #{righthand} in my  #{UserVars.lockpicksack}"
    end
  end
  fput "ask #{npc} for check"
}
fill_hands

# not used
traps =/Peering closely into the lock, you spy a (tiny onyx|miniature blood red|miniature sky-blue glaes|miniature sea-green glaes|glimmering opalescent|tiny translucent) scarab wedged into the lock mechanism\.|You notice what appears to be a sharp sliver of metal nestled in a hole next to the lock plate\.|You notice a discolored oval ring around the outside of the #{mybox} which makes you suspicious\.  Your suspicions are confirmed when you look inside the keyhole and notice the spring-loaded jaws pressed flush against the #{mybox} walls\.|You see a tiny sphere imbedded in the lock mechanism\.|You can see a small crystal imbedded in the locking mechanism\.|You see a cord stretched between the lid and case\.|Peering through the [A-Za-z\-\ ]+ #{mybox}, you notice that the lock casing is coated with a rough, grainy substance, and a small bladder is wedged between the tumblers of the lock\.|Looking closely into the keyhole of the lock, you spy a small vial of liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\.|You notice what appears to be a tiny vial placed just past the tumblers of the lock mechanism\.  It appears that any tampering with the lock mechanism will cause the tumblers to crush the vial\.|Peering through the [A-Za-z\-\ ]+ #{mybox}, you notice that the hinges have some springs incorporated into the design in an unusual fashion\.|Looking closely into the keyhole of the lock, you spy a small vial of fire-red liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\.|You see a thin tube extending from the lock mechanism down into the #{mybox}\.  The tube appears to be filled with a greenish powder\.|There appears to be a plate over the lock, sealing it and preventing any access to the tumblers\.|Near the lock mechanism, you notice a pair of small metal rods a hair's width from rubbing together\.|The inside chamber is lined with some unidentifiable substance\./
