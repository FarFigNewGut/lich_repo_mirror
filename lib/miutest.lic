# MIUTWO
#
# Version 1.0
#
# Author: Alastir
#
# 

hide_me
no_pause_all

	settings = CharSettings.to_hash																										#### CHANGED: Replaced Settings[Char.name] with CharSettings hash

if script.vars.empty?																													#Runs script based on settings
	target_list = [ Char.name ]
elsif script.vars[1].downcase == 'help'																									#Displays help for script in Story window if ";iSigns help" is entered at command line
	respond
	respond 'Usage:'
	respond "   #{$clean_lich_char}#{script.name} help                     show this message"
	respond "   #{$clean_lich_char}#{script.name} setup                    show setup window"
	respond
	exit
elsif script.vars[1] =~ /^setup$|^options$/i																							#Pulls up GUI if user enters ";iSigns setup" or ";iSigns options"
	window = window_action = nil
	
	Gtk.queue {																															#Beginning of GUI Setup
		gtk_checks = Hash.new 																											#### CHANGED: Added new gtk_checks hash to store all checkbuttons in so we can loop through it later
		
		saveButton = Gtk::Button.new("_Save and Close")
	
		window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
		window.set_title  "MIUTWO 1.0 - UseImbeds Manipulation Script  -  by Alastir"													#Sets window title
		window.border_width = 20																										#Sets border width of window

		vbox = Gtk::VBox.new(false, 0)
		
		swarding1 = Gtk::CheckButton.new("Spirit Warding I")
		swarding1.active = settings['101']
		gtk_checks['101'] = swarding1 																									#### CHANGED: Added to gtk_checks
		
		sdefense = Gtk::CheckButton.new("Spirit Defense")
		sdefense.active = settings['103']
		gtk_checks['103'] = sdefense 																									#### CHANGED: Added to gtk_checks
		
		swarding2 = Gtk::CheckButton.new("Spirit Warding II")
		swarding2.active = settings['107']
		gtk_checks['107'] = swarding2 																									#### CHANGED: Added to gtk_checks
		
		lshroud = Gtk::CheckButton.new("Lesser Shroud")
		lshroud.active = settings['120']
		gtk_checks['120'] = lshroud 																									#### CHANGED: Added to gtk_checks
		
		edefense1 = Gtk::CheckButton.new("Elemental Defense I")																			#Adds Check Button with lable
		edefense1.active = settings['401']																								#Sets iSignWarding to CHECKED when the box is checked
		gtk_checks['401'] = edefense1 																									#### CHANGED: Added to gtk_checks
	
		edefense2 = Gtk::CheckButton.new("Elemental Defense II")
		edefense2.active = settings['406']
		gtk_checks['406'] = edefense2 																									#### CHANGED: Added to gtk_checks
		
		edefense3 = Gtk::CheckButton.new("Elemental Defense III")
		edefense3.active = settings['414'] 
		gtk_checks['414'] = edefense3 																									#### CHANGED: Added to gtk_checks

		tward = Gtk::CheckButton.new("Thurfel's Ward")
		tward.active = settings['503']
		gtk_checks['503'] = tward 																										#### CHANGED: Added to gtk_checks
		
		edeflection = Gtk::CheckButton.new("Elemental Deflection")
		edeflection.active = settings['507']
		gtk_checks['507'] = edeflection 																								#### CHANGED: Added to gtk_checks
		
		ebias = Gtk::CheckButton.new("Elemental Bias")
		ebias.active = settings['508']
		gtk_checks['508'] = ebias 																										#### CHANGED: Added to gtk_checks
		
		strength = Gtk::CheckButton.new("Strength")
		strength.active = settings['509']
		gtk_checks['509'] = strength 																									#### CHANGED: Added to gtk_checks
		
		tooltips = Gtk::Tooltips.new																									#Tool Tips!
		tooltips.set_tip(edefense1, "Elemental Defense I", "")																			#Displays mana cost of sigil when mouse hovers over indicated CheckButton
		tooltips.set_tip(edefense2, "Elemental Defense II", "")
		tooltips.set_tip(edefense3, "Elemental Defense III", "")
		tooltips.set_tip(swarding1, "Spirit Warding I", "")
		tooltips.set_tip(sdefense, "Spiritual Defense", "")
		tooltips.set_tip(swarding2, "Spirit Warding II", "")
		tooltips.set_tip(lshroud, "Lesser Shroud", "")
		tooltips.set_tip(tward, "Thurfel's Ward", "")
		tooltips.set_tip(edeflection, "Elemental Deflection", "")
		tooltips.set_tip(ebias, "Elemental Bias", "")
		tooltips.set_tip(strength, "Strength", "")

		vbox.pack_start(edefense1, false, true, 0)																						#Now that you have defined everything in the GUI, this actually puts it together
		vbox.pack_start(edefense2, false, true, 0)
		vbox.pack_start(edefense3, false, true, 0)
		vbox.pack_start(swarding1, false, true, 0)
		vbox.pack_start(sdefense, false, true, 0)
		vbox.pack_start(swarding2, false, true, 0)
		vbox.pack_start(lshroud, false, true, 0)
		vbox.pack_start(tward, false, true, 0)
		vbox.pack_start(edeflection, false, true, 0)
		vbox.pack_start(ebias, false, true, 0)
		vbox.pack_start(strength, false, true, 0)
		vbox.pack_start(saveButton)																										#Puts the Save & Close button at the bottom of the list
		
		window.add(vbox)
		saveButton.signal_connect('clicked') {																							#Tells the program what to do with the CheckButton data once Save & Close is clicked 
			Gtk.queue {
																																		#### CHANGED: only one loop is required now to change the settings
																																		#### Remember from earlier that settings = CharSettings
				gtk_checks.each_pair { 
					|number,check| settings[number] = check.active? 
				}
			
				window_action = :save																									#Saves all of the above to your settings
			}
		}
			
		window.signal_connect('delete_event') {window_action = :cancel}																	#Deals with you hitting the X to close the window, no changes to settings made (I think)
		window.show_all																													#Displays the GUI
		window.resizable = false																										#Disables the Maximize button and Resize options
	}

	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }

																																		#### CHANGED: no longer need the setting saving that was here because it was done above in signal_connect
	Script.self.kill																													#Very important part.  This allows you to change the settings, but does not execute the Loop
end																																		# when you hit Save & Close.

loop{																																	#Begins sign upkeep during running of the script when you just type ;iSigns
	exit if checkdead
																																		#### CHANGED: competely removed everything below by being able to use
																																		#### a loop instead
	settings.each_pair { |num,active|
		if active and not Spell[num].active?
			Script.run("useimbed", num) unless Spell[num].active? }																																	#### CHANGED: Should probably wait for castrt? and rt? too
			waitrt?
			waitcastrt?
		end
	}	
	
	sleep 1																																#Runs through the list and checks status of signs once per second.  Might be a bit overkill to do that often.
}
