=begin
    Ebon Gate Digging Script

      Start script while on EG grounds. Will automatically pause between shovel runs.
      Default to buy 3 shovels, view ;TDIG HELP to change

      Will attempt to pause on T5/jackpot wins.
      Will automatically open breakables.
      Will attempt to squelch other player digging spam (except T5/jackpot wins).
      Can be set to use a seashell bucket.

      Does NOT automatically sell, as I'm not taking on that responsibility of choosing for you.
      So you will have to empty your containers via selling/lockering stuff away.

      Requires your lootsack to be set for bundling seashells and storing loot
      ;vars set lootsack=cloak

      ;TDIG HELP - Show additional help.
      ;TDIG STATS - for statistics 
      ;TDIG HIGHLIGHTS - for quick output to show highlights you should have
      ;TDIG RESET - resets stats manually to zero

       todo: none
     author: Tysong (horibu on PC)
       name: tdig
       tags: EG, digging, Ebon Gate, dig
    version: 1.14
    website: https://github.com/elanthia-online/scripts/

    changelog:
        1.14 (2020-10-18)
            Added option to announce T5/jackpots to an ESP channel. Off by default.
        1.13 (2020-10-17)                                                              
            Fixed empty container logic to not match on someone else's EMPTY messaging.
        1.12 (2020-10-16)
            Fixed empty logic for full container, deposit coins if encumbered, & stopping if out of coins for withdrawing
        1.11 (2018-10-13)
            Added reset option
        1.10 (2018-10-13)
            Added support for new error msg when not in digging area.
        1.9 (2018-10-10)
            Support for Ghule containers
        1.8 (2018-10-10)
            Added functionality to reset stats on a new year
        1.7 (2018-10-10)
            Added tracking of coins found for ;tdig stats
        1.6 (2018-10-10)
            Added tracking of seashells for ;tdig stats, recommend clearing total digs if ran before to not skew stats
            ;e echo UserVars.tdig[:dig_total] = 0
        1.5 (2018-10-05)
            Fix for room 26579 having a crevice instead of a hole
        1.4 (2017-10-10)
            Moved squelching to ;tsquelch. Please download ;REPO DOWNLOAD TSQUELCH to continue squelching
        1.3 (2017-10-10)
            Added option to trash crystalline globes via UserVars, see ;TDIG HELP
        1.2 (2017-10-09)
            Fixed a few issues with it getting stuck if in RT.
            Added option to close client connection in UserVars.tdig
        1.1 (2017-10-08)
            Added script kill if at item cap
            Fixed UserVars not getting created, causing bank/shovel purchasing loop
        1.0 (2017-10-08)
            Initial Release, based on Taleph's 3.3.3 script.

    credit & thanks:
        Taleph's 3.3.3 ;egdig script
=end
=begin
;e Room.list.each{|room| room.image = "fest-ebon_gate-caligos_isle-1539222190.png" if room.image == "fest-ebon_gate-caligos_isle-1508040531.png"}

;e Room.list.each{|room| room.image = "fest-duskruin-1503606262.png" if room.image == "fest-duskruin-1503606261.png"}

=end

silence_me

EG_Dig_Rooms     = Array[26583,26585,26584,26583,26579,26577,26576,26575,26574,26573,26572,26439,26578,26580,26581,26581,26586,2658726588]
Uncollectables   = Array["harpoon","net","bellows","incense","candle","skull","species"]
Breakable_Items  = Array["excrement","flesh","sandstone","sand","dirt","charcoal","rose","debris","rock","muck","slime","barnacles","root","carapace","jar"]

UserVars.tdig ||= {}
UserVars.tdig[:shovels_purchase] = 3        		if UserVars.tdig[:shovels_purchase].nil?
UserVars.tdig[:pause_me]         = true     		if UserVars.tdig[:pause_me].nil?
UserVars.tdig[:favorite_room]    = nil      		if UserVars.tdig[:favorite_room].nil?
UserVars.tdig[:bucket_rummage]   = false    		if UserVars.tdig[:bucket_rummage].nil?
UserVars.tdig[:bucket_noun]      = "bucket" 		if UserVars.tdig[:bucket_noun].nil?
UserVars.tdig[:familiar_debug]   = false    		if UserVars.tdig[:familiar_debug].nil?
UserVars.tdig[:dig_total]        = 0        		if UserVars.tdig[:dig_total].nil?
UserVars.tdig[:total_seashells]	 = 0				if UserVars.tdig[:total_seashells].nil?
UserVars.tdig[:total_coins]	 	 = 0				if UserVars.tdig[:total_coins].nil?
UserVars.tdig[:dig_t5jackpot]    = 0        		if UserVars.tdig[:dig_t5jackpot].nil?
UserVars.tdig[:client_kill]      = false    		if UserVars.tdig[:client_kill].nil?
UserVars.tdig[:trash_globes]     = false    		if UserVars.tdig[:trash_globes].nil?
UserVars.tdig[:squelch_script]   = true     		if UserVars.tdig[:squelch_script].nil?
UserVars.tdig[:esp_jackpots]     = false			if UserVars.tdig[:esp_jackpots].nil?
UserVars.tdig[:esp_channel]      = "ooc"			if UserVars.tdig[:esp_channel].nil?
UserVars.tdig[:year]			 = Date.today.year	if UserVars.tdig[:year].nil?

squelch_script_running = false

if $frontend == 'stormfront' || $frontend == 'profanity'
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

if UserVars.tdig[:year] != Date.today.year
	respond "
	It appears to be your first time running this for a new year.
	Time to reset the stats to track anew.
	Please find your previous stats below.
	
	====;tdig #{UserVars.tdig[:year]} Stats====
	#{UserVars.tdig[:dig_total].to_s.rjust(8)} - Total Digs
	#{UserVars.tdig[:dig_t5jackpot].to_s.rjust(8)} - Total T5+ Found
	#{(UserVars.tdig[:total_seashells]/UserVars.tdig[:dig_total]).to_s.rjust(8)} - Avg Seashells Found
	#{UserVars.tdig[:total_seashells].to_s.rjust(8)} - Total Seashells Found
	#{((UserVars.tdig[:dig_total] * 2000) / UserVars.tdig[:total_seashells]).to_s.rjust(8)} - Avg Cost Silver Per Seashell
	#{((UserVars.tdig[:dig_total] * 2000 - UserVars.tdig[:total_coins]) / UserVars.tdig[:total_seashells]).to_s.rjust(8)} - Avg Cost Silver Per Seashell (Minus Coins Found)
	#{UserVars.tdig[:total_coins].to_s.rjust(8)} - Total Coins Found
	
	;unpuase tdig
	to continue with resetting stats to 0 and continue running.
	"
	pause_script
	
	UserVars.tdig[:dig_total] 		= 0
	UserVars.tdig[:dig_t5jackpot]	= 0
	UserVars.tdig[:total_seashells]	= 0
	UserVars.tdig[:total_coins]		= 0
	UserVars.tdig[:year]			= Date.today.year
end

def dig
	loop {
		clear
		waitrt?
		fput "dig"
		test = matchtimeout 11, "You continue", "You hit", "You begin", "You can't dig here.", "You have too many items on you to dig.", "Your games pass has expired, you'll need to buy a new one to dig here.", "It doesn't appear your shovel will work here", "You need your left hand free to help grasp the shovel!"
		if test =~ /^You can't dig here\.$|It doesn't appear your shovel will work here/
			if UserVars.tdig[:favorite_room]
				start_script "go2", [ UserVars.tdig[:favorite_room] ]
			else
				start_script "go2", [ EG_Dig_Rooms.sample ]
			end
			wait_while { running? "go2" }
		elsif test =~ /Your games pass has expired, you'll need to buy a new one to dig here\./
			respond "Your digging pass has expired. Go buy a new one to continue!"
			exit
		elsif test =~ /You have too many items on you to dig\./
			respond "You're at item cap. Go unload!"
			exit
		elsif test =~ /You need your left hand free to help grasp the shovel/
			respond "Something is in your left hand! Empty and unpause to continue!"
			pause_script
		end
		words = test.split(' ')
		if words[1] == "hit"
			UserVars.tdig[:dig_total] += 1
			waitrt?
			pause 0.5
			loop {
				if "#{GameObj.right_hand}" == "shovel"
					fput "stow shovel"
				else
					break
				end
			}
			break
		end
		waitrt?
	}
end

def OpenIt(item_found)

	if $frontend == 'stormfront' || $frontend == 'profanity'
		fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
		fam_window_end   = "<popStream/>\r\n"
	else
		fam_window_begin = "\034GSe\r\n"
		fam_window_end   = "\034GSf\r\n"
	end

	box_contents_name = Array[]
	box_contents_noun = Array[]
	found_seashells = 0
	
	until GameObj.left_hand.contents
		fput "look in ##{item_found.id}"
		pause 0.5
	end
	
	GameObj.left_hand.contents.each{ |item| 
		box_contents_name.push(item.name)
		box_contents_noun.push(item.noun)
	}
	#_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{UserVars.tdig[:dig_total]} - Box: #{box_contents_name.join(", ")} \r\n#{fam_window_end}") if UserVars.tdig[:familiar_debug]
	if box_contents_noun.include? "coins"
		result = dothistimeout "get coins from ##{item_found.id}", 5, /You gather the remaining (.*) coin/
		if result =~ /You gather the remaining (.*) coin/
			UserVars.tdig[:total_coins] += $1.to_i
		else
			echo "Getting coins failed, odd"
		end
	end
	pause 0.5
	waitrt?
	pause 0.5
	#fput "get coins from ##{item_found.id}" if box_contents_noun.include? "coins"
	#if UserVars.tdig[:bucket_rummage]
	#	fput "rummage my #{UserVars.tdig[:bucket_noun]}" if box_contents_noun.include? "seashells"
	#else
	#	fput "get seashell from ##{item_found.id}" if box_contents_noun.include? "seashells"
	#end
	if box_contents_noun.include? "seashells"
		if UserVars.tdig[:bucket_rummage]
			result = dothistimeout "rummage my bucket", 5, Regexp.union(
				/You rummage through your inventory, looking for seashells.  You find (.*) new (?:seashells|seashell) and tuck your findings into your seashell bucket, bringing the total to|You rummage through your inventory, looking for seashells.  You find (.*) seashells and tuck your findings into your seashell bucket/
			)
			if result =~ /You rummage through your inventory, looking for seashells.  You find (.*) new (?:seashells|seashell) and tuck your findings into your seashell bucket, bringing the total to/
				found_seashells = $1.to_i
			elsif result =~ /You rummage through your inventory, looking for seashells.  You find (.*) seashells and tuck your findings into your seashell bucket/
				found_seashells = $1.to_i
			else
				respond "You're not wearing a bucket, yet you have it set to use one, ;tdig help"
				pause_script
			end
		else
			result = dothistimeout "look seashell in ##{item_found.id}", 5, Regexp.union(
				/It is worth (.*) seashells/
			)
			if result =~ /It is worth (.*) seashells./
				found_seashells = $1.to_i
				fput "get seashell from ##{item_found.id}"
				fput "redeem my seashell"
				sleep 0.1
			else
				respond "Something went wrong with seashell getting, tell Tysong"
			end
		end
	end
	UserVars.tdig[:total_seashells] += found_seashells
	_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{UserVars.tdig[:dig_total]} - #{found_seashells}/#{UserVars.tdig[:total_seashells]} - Box: #{box_contents_name.join(", ")} \r\n#{fam_window_end}") if UserVars.tdig[:familiar_debug]
	#test = matchwait "You grab", "Get what", "You remove"
	#Uncollectables.each { |item|
	#	multifput "get #{item} from ##{item_found.id}", "put #{item} in my #{Vars.lootsack}" if box_contents_noun.include? item
	#}
	box_contents_noun.each { |item|
		multifput "get #{item} from ##{item_found.id}", "put #{item} in my #{Vars.lootsack}" if Uncollectables.include? item
	}
	
	loop {
		container_content = dothistimeout "empty ##{item_found.id} in my #{Vars.lootsack}", 2, /You try to empty the contents of your [\w]+ into your [\w]+, (?:but nothing will fit|but nothing comes out|and everything falls in quite nicely)\.|leaving the rest/
		if container_content =~ /but nothing will fit\./
			echo "Lootsack full! Time to unload!"
			exit
		elsif container_content =~ /but nothing comes out\.|and everything falls in quite nicely\./
			break
		end
	}
	
	waitrt?
	sleep 1
	if "#{GameObj.left_hand}" == "#{item_found}"
		if Room.current.id == 26579
			fput "put ##{item_found.id} in sand-filled crevice"
		else
			fput "put ##{item_found.id} in sand-filled hole"
		end
		test4 = matchwait "There appears to be", "you feel pleased"
		words4 = test4.split(' ')
		if words4[1] =="appears"
			echo "there's a valuable that's not coming out of the #{item_found.name}. ABORT SCRIPT!"
			echo box_contents_noun.join(", ")
			pause_script
			#exit
		end
	end
	if GameObj.right_hand.noun =~ /seashell/
		fput "redeem my seashell"
	end
	if UserVars.tdig[:trash_globes] && (box_contents_name.include? "crystalline globe")
		waitrt?
		fput "get my crystalline globe from my #{Vars.lootsack}"
		if Room.current.id == 26579
			fput "put my crystalline globe in sand-filled crevice"
		else
			fput "put my crystalline globe in sand-filled hole"
		end
		waitrt?
	end
	Breakable_Items.each { |item|
		if box_contents_noun.include? item
			multifput "get #{item} from #{Vars.lootsack}", "rub #{item}"
			test = matchtimeout 2, "on the floor and pick it up.", "Glancing around, you notice some silver coins scattered across the"
			pause 0.5
			waitrt?
			pause 0.5
			fput "stow all" if GameObj.left_hand.name !~ /Empty/ || GameObj.right_hand.name !~ /Empty/
			#fput "get coin" if test =~ /you notice some silver coins scattered across the/
			if test =~ /you notice some silver coins scattered across the/
				intPreBank = nil
				loop {
					result = dothistimeout "get coins", 5, /You gather the remaining (.*) coin|You cannot hold any more silvers\./
					if result =~ /You gather the remaining (.*) coin/
						UserVars.tdig[:total_coins] += $1.gsub(',','').to_i
						break
					elsif result =~ /You cannot hold any more silvers\./ && intPreBank.nil?
						intPreBank = Room.current.id
						Script.run("go2", "bank")
						fput "deposit all"
						Script.run("go2", "#{intPreBank}")
					else
						echo "Getting coins failed, odd"
						exit
					end
				}
			end
			pause 0.5
			waitrt?
			pause 0.5
		end
	}
end

if variable[1].downcase == "help"
	respond "\n    SYNTAX - ;tdig
      Start script while on EG grounds. Will automatically pause between shovel runs.
      Default to buy 3 shovels, view ;TDIG HELP to change
      Will attempt to pause on T5/jackpot wins.
      Will automatically open breakables.
      Will attempt to squelch other player digging spam (except T5/jackpot wins).

      Does NOT automatically sell, as I'm not taking on that responsibility of choosing for you.
      So you will have to empty your containers via selling/lockering stuff away.
	  
         ;tdig            - Runs diging
         ;tdig help       - Gives this help information you're reading now
         ;tdig stats      - Shows cool stats about your digging
         ;tdig highlights - Shows known T5+ messaging for easy highlights!
         ;tdig reset      - resets stats manually to zero

      Requires your lootsack to be set for bundling seashells and storing loot
      ;vars set lootsack=cloak

      Change Ammount of Shovels To Purchase. Default is set to 3
      ;e echo UserVars.tdig[:shovels_purchase] = 2

      Pauses Between Runs - Default is set to TRUE
      ;e echo UserVars.tdig[:pause_me] = false

      To pick specific diggin room instead of random modify. Default is set to nil
      ;e echo UserVars.tdig[:favorite_room] = ROOMNUMBERHERE
      ;e echo UserVars.tdig[:favorite_room] = nil    (to randomize)

      To use a seashell bucket, set the following to what you need.	Default is set to FALSE 
      ;e echo UserVars.tdig[:bucket_rummage] = true

      To change the bucket description in case you altered it. Default is set to \"bucket\"
      ;e echo UserVars.tdig[:bucket_noun] = \"bucket\"

      Send contents of box/breakable to Familiar Window. Default is set to FALSE 
      ;e echo UserVars.tdig[:familiar_debug] = true

      Send contents of T5/jackpot finds to ESP channel. Default is set to FALSE
      ;e echo UserVars.tdig[:esp_jackpots] = true

      Set the channel to use for ESP T5/jackpot accounements. Default is set to OOC
      ;e echo UserVars.tdig[:esp_channel] = \"ooc\"

      Automatically close game connection on T5/Jackpot win. Default is set to FALSE
      ;e echo UserVars.tdig[:client_kill] = true

      Automatically trash crystalline globes. Default is set to FALSE
      ;e echo UserVars.tdig[:trash_globes] = true

      Automatically squelches other digging via optional tsquelch script. Default set to TRUE
      ;e echo UserVars.tdig[:squelch_script] = FALSE"
	exit
elsif variable[1].downcase == "stats"
	respond "
	#{UserVars.tdig[:dig_total].to_s.rjust(8)} - Total Digs
	#{UserVars.tdig[:dig_t5jackpot].to_s.rjust(8)} - Total T5+ Found
	#{(UserVars.tdig[:total_seashells]/UserVars.tdig[:dig_total]).to_s.rjust(8)} - Avg Seashells Found
	#{UserVars.tdig[:total_seashells].to_s.rjust(8)} - Total Seashells Found
	#{((UserVars.tdig[:dig_total] * 2000) / UserVars.tdig[:total_seashells]).to_s.rjust(8)} - Avg Cost Silver Per Seashell
	#{((UserVars.tdig[:dig_total] * 2000 - UserVars.tdig[:total_coins]) / UserVars.tdig[:total_seashells]).to_s.rjust(8)} - Avg Cost Silver Per Seashell (Minus Coins Found)
	#{UserVars.tdig[:total_coins].to_s.rjust(8)} - Total Coins Found
	"
	exit

elsif variable[1].downcase =~ /reset/
	respond "You're about to reset your stats manually."
	respond "If you are sure you wish to do this, please"
	respond ";unpause tdig"
	respond "to continue."
	respond ""
	respond "Otherwise, please ;k tdig"
	respond "So stats are NOT reset"
	pause_script
	
	UserVars.tdig[:dig_total] = 0
	UserVars.tdig[:dig_t5jackpot] = 0
	UserVars.tdig[:total_seashells] = 0
	UserVars.tdig[:total_coins] = 0
	
	exit
	
elsif variable[1].downcase =~ /highlights/i
	respond "
	Tier 5 Win Messaging for your highlight pleasure:
	
Box Opening Message 1 - Tier5:
locking the hinges in place to prop the lid up safely.

Box Opening Message 2 - Jackpot:
which begins to glow.
	"
	exit
end

before_dying { 
	if !squelch_script_running
		kill_script ("tsquelch") if Script.running?("tsquelch") 
	end
}

if UserVars.tdig[:squelch_script] && !Script.exists?("tsquelch.lic")
	echo "    You need to have ;TSQUELCH downloaded to squelch.

    Either disable squelching variable as shown below, or ;repo download tsquelch
    ;e echo UserVars.tdig[:squelch_script] = FALSE"
	exit
elsif UserVars.tdig[:squelch_script]
	squelch_script_running = true if Script.running?("tsquelch")
	if !squelch_script_running
		Script.start("tsquelch")
	end
end

loop	{
	fput "get my shovel"
	test = matchwait "You remove", "You already", "You focus", "Get what", "Hey, that", "You grab", "That's almost certainly a bad idea", "...wait "
	words = test.split(' ')
	if test =~ /Get what\?/
		if UserVars.tdig[:pause_me]
			echo "PAUSING SCRIPT - OUT OF SHOVELS!"
			echo "PAUSING SCRIPT - OUT OF SHOVELS!"
			echo "PAUSING SCRIPT - OUT OF SHOVELS!"
			echo ";unpause tdig"
			echo "TO CONTINUE TO BUY #{UserVars.tdig[:shovels_purchase]} SHOVELS."
			pause_script
		end
		#exit
		start_script "go2", [ "bank" ]
		wait_while { running? "go2" }
		fput "deposit all"
		result = dothistimeout "withdraw #{UserVars.tdig[:shovels_purchase] * 40000} silver", 5, Regexp.union(
			/The teller (?:scribbles|carefully records) the (?:transaction|transaction,)/,
			/The teller looks a bit annoyed as he flips through his books and nods saying/,
			/You don't have that much in your account/
		)
		if result =~ /You don't have that much in your account/
			respond "You're out of funds! Time to find more!"
			exit
		elsif result =~ Regexp.union(
			/The teller (?:scribbles|carefully records) the (?:transaction|transaction,)/,
			/The teller looks a bit annoyed as he flips through his books and nods saying/,
		)
			sleep 0.5
		else
			respond "Something went wrong on bank routine, tell Tysong"
			exit
		end
		start_script "go2", [ "shovel" ]
		wait_while { running? "go2" }
		UserVars.tdig[:shovels_purchase].times {
			put "give tourist 40000"
			pause 1
			fput "stow shovel"
		}
		if UserVars.tdig[:favorite_room]
			start_script "go2", [ UserVars.tdig[:favorite_room] ]
		else
			start_script "go2", [ EG_Dig_Rooms.sample ]
		end
		wait_while { running? "go2" }
	elsif test =~ /That\'s almost certainly a bad idea/
		start_script "go2", [ EG_Dig_Rooms.sample.to_i ]
		wait_while { running? "go2" }
	elsif test =~ /\.\.\.wait /
		waitrt?
	elsif words[0] != "You"
		exit
	else
		dig
		item_found = GameObj.left_hand
		if item_found.noun =~ /box|trunk|chest|coffer|strongbox|crate/
			waitrt?
			pause 0.2
			fput "open ##{item_found.id}"
			test = matchtimeout 2, "and set it aside.", "its hinges creaking noisily.", "locking the hinges in place to prop the lid up safely.", "which begins to glow."
			if test =~ /locking the hinges in place to prop the lid up safely\.|which begins to glow\./
				UserVars.tdig[:dig_t5jackpot] += 1
				box_contents_name = Array[]
				box_contents_noun = Array[]
				until GameObj.left_hand.contents
					fput "look in ##{item_found.id}"
					pause 0.5
				end
				GameObj.left_hand.contents.each{ |item| 
					box_contents_name.push(item.name)
					box_contents_noun.push(item.noun)
				}
				5.times { echo "Found Tier 5/Jackpot" }
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{UserVars.tdig[:dig_t5jackpot]}/#{UserVars.tdig[:dig_total]} - T5/Jackpot Item: #{item_found.name} - #{box_contents_name.join(", ")} \r\n#{fam_window_end}") if UserVars.tdig[:familiar_debug]
				fput "think on #{UserVars.tdig[:esp_channel]} Digging Jackpot Found! - #{UserVars.tdig[:dig_t5jackpot]}/#{UserVars.tdig[:dig_total]} - T5/Jackpot Item: #{item_found.name} - #{box_contents_name.join(", ")}" if UserVars.tdig[:esp_jackpots]
				fput "exit" if UserVars.tdig[:client_kill]
				pause_script
			end
			OpenIt(item_found)
		elsif item_found.noun =~ /coffin|casket|sarcophagus/
			loop	{					#just making sure the lid comes off
				fput "pry ##{item_found.id}"
				test = matchtimeout 5, "With the lid loosened, you", "You begin"
				waitrt?
				words = test.split(' ')
				if words[2] == "lid"
					break
				end
			}
			OpenIt(item_found)
		else
			waitrt?
			fput "rub #{item_found.noun}"
			test = matchtimeout 2, "on the floor and pick it up.", "Glancing around, you notice some silver coins scattered across the"
			pause 0.5
			waitrt?
			pause 0.5
			if GameObj.left_hand.name !~ /Empty/ || GameObj.right_hand.name !~ /Empty/
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{UserVars.tdig[:dig_total]} - 0/#{UserVars.tdig[:total_seashells]} - Dig: #{item_found.name}, #{GameObj.left_hand.name}, #{GameObj.right_hand.name} \r\n#{fam_window_end}") if UserVars.tdig[:familiar_debug]
				fput "put #{checkleft} in my #{Vars.lootsack}" if GameObj.left_hand.name !~ /Empty/
				fput "put #{checkright} in my #{Vars.lootsack}" if GameObj.right_hand.name !~ /Empty/
			end
			if test =~ /you notice some silver coins scattered across the/
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{UserVars.tdig[:dig_total]} - 0/#{UserVars.tdig[:total_seashells]} - Dig: #{item_found.name}, coins \r\n#{fam_window_end}") if UserVars.tdig[:familiar_debug]
				result = dothistimeout "get coins", 5, /You gather the remaining (.*) coin/
				if result =~ /You gather the remaining (.*) coin/
					UserVars.tdig[:total_coins] += $1.gsub(',','').to_i
				else
					echo "Getting coins failed, odd"
				end
				pause 0.5
				waitrt?
				pause 0.5
			end
			pause 0.5
			waitrt?
		end
	end
}
