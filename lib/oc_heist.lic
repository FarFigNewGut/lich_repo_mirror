=begin

Author:  Alastir
Version:  1.0

This script will complete the Ophidian Cabal Bank Heist.
Download the companion script ;repo download oc_timer to see your Heist time!

Variables used:
Vars.bookletsack = Where your booklets are stored
Vars.lootsack = Where loot will be placed.

	Uses ;BIGSHOT QUICK for hunting logic. So make sure your bigshot is setup correctly.
        Hunting Tab:
		valid targets = (?:.*)
		quickhunt targets = (?:.*)
		active hunting scripts = isigns, etc.
		society abilities/spells/cmans = etc.
		This script DOES use the loot script field, input something like = sloot
		
        Commands Tab:
		Fill these boxes with how you want it to attack
		hunting commands(a): = 917 target(m17), attack target(x20), etc.
		quick hunting commands: 917 target(m17), attack target(x20), etc.
        Set everything else up with how you want it.
		
		Start the script with your combat gear in your hands, or with empty hands and it will use GIRD.
		
		It is recommended that you have hiding skill or be able to cast invisibility and at least 1x perception.

=end

Script.run('repository', "set-updatable oc_heist.lic")
#Script.run('autostart', "add --global repository download-updates")

respond 'This script provided by Alastir'
respond 'Feedback about scripts can be left here -- http://forum.gsplayers.com/showthread.php?116895-My-Scripts-Feedback-Suggestions-Bug-Reports --'
respond ''
respond ';repo info oc_heist for details about setting up the attack portion'
respond ''
respond 'This script makes use of GIRD to put your weapon/shield/runestaff in your hand'
respond 'Ready weapon <weaponname>'
respond 'Example: Ready weapon runestaff'
respond 'or'
respond 'Ready weapon axe'
respond 'Ready shield shield'
respond ''
respond 'Variables used:'
respond 'Vars.bookletsack = Where voucher booklets are stored (Best to use a non-scripted container)'
respond "Vars.bookletsack is set to #{Vars.bookletsack}"
respond 'You can change this by typing -- ;vars set bookletsack=container'
respond ''
respond 'Vars.lootsack = Where treasure is stored'
respond "Vars.lootsack is set to #{Vars.lootsack}"
respond 'You can change this by typing -- ;vars set lootsack=container'
respond ''
respond 'Bloodscrip will be automatically redeemed'
respond ''
respond 'This script should be started at Room # 27160'
respond ';unpause oc_heist if you are satisfied with this setup.'
pause_script
start_script ("oc_timer")


def stand()
	return if dead?
	fput 'stand' until standing?
end

#PRONE = /sleeping|webbed|stunned|kneeling|sitting|^lying|prone/

def lounge()
	fput "open my pouch"
	if checkright == "pouch"
		fput "look in my pouch"
		GameObj.right_hand.contents.each{ |item| 
			fput "get ##{item.id}"
			fput "put ##{item.id} in my #{Vars.lootsack}"
			fput "drop pouch"
			}
	elsif checkleft == "pouch"
		fput "look in my pouch"
		GameObj.left_hand.contents.each { |item|
			fput "get ##{item.id}"
			fput "put ##{item.id} in my #{Vars.lootsack}"
			fput "drop pouch"
			}
	end
	sleep 0.3
	while (percentencumbrance > 10) do
		echo "You're too fat to hunt, lighten up!"
		kill_script ("oc_heist")
	end
	if Room.current.id == 27161
		start_script "go2", ['27160']
		wait_while { running? 'go2' }
		empty_hands
		fput "get booklet from my #{Vars.bookletsack}"
		fput "go bandit"
		fput "put booklet in my #{Vars.bookletsack}"
		fill_hands
		fput "gird"
	end
end

activespells = Array['9903','9904','9907','9908','9912','9913','909','506']

def spellcheck(thesespells)
	thesespells.each { |nextspell|
		waitrt?
		waitcastrt?
		if nextspell == "909"
			fput("incant #{nextspell}") if !Spell[nextspell.to_i].active? && Spell[nextspell.to_i].affordable? && Spell[nextspell.to_i].known?
		elsif nextspell == "506"
			fput("incant #{nextspell}") if !Spell[nextspell.to_i].active? && Spell[nextspell.to_i].affordable? && Spell[nextspell.to_i].known?
		else
			Spell[nextspell.to_i].cast if !Spell[nextspell.to_i].active? && Spell[nextspell.to_i].affordable? && Spell[nextspell.to_i].known?
		end
	}
end

def symbol()
	Spell[9903].cast if !Spell[9903].active? && Spell[9903].affordable? && Spell[9903].known?
	Spell[9904].cast if !Spell[9904].active? && Spell[9904].affordable? && Spell[9904].known?
	Spell[9907].cast if !Spell[9907].active? && Spell[9907].affordable? && Spell[9907].known?
	Spell[9908].cast if !Spell[9908].active? && Spell[9908].affordable? && Spell[9908].known?
	Spell[9912].cast if !Spell[9912].active? && Spell[9912].affordable? && Spell[9912].known?
	Spell[9913].cast if !Spell[9913].active? && Spell[9913].affordable? && Spell[9913].known?
	fput("incant 909") if !Spell[909].active? && Spell[909].affordable? && Spell[909].known?
	fput("incant 506") if !Spell[506].active? && Spell[506].affordable? && Spell[506].known?	
end

if Room.current.id == 27160
	empty_hands
	result = dothistimeout("get my booklet", 5, /You remove|Get what\?/)
	if result =~ /You remove/
		fput "go bandit"
		fput "put my booklet in my #{Vars.bookletsack}"
	elsif result =~ /Get what\?/
		respond 'Out of booklets!'
		kill_script ("oc_heist")
	end
	fill_hands
	fput "gird"
else
	lounge()
end
loop {
	5.times{
		spellcheck(activespells)
		waitrt?
		waitcastrt?
		fput "gird"
		if Spell[916].known?
			Spell[916].cast if !Spell[916].active? && Spell[916].affordable? && Spell[916].known?
		else
			fput "hide" until hiding?
		end
		waitrt?
		waitcastrt?
		result = dothistimeout("observe", 5, /The maruaders are hot on your trail\, perhaps pace around to make some extra footprints\!|strides in|stride in/)
		if result =~ /The maruaders are hot on your trail\, perhaps pace around to make some extra footprints\!/
			waitrt?
			fput "pace"
			waitrt?
			empty_hands
			fput "steal"
			sleep 3.0
			waitrt?
			if checkright == "bloodscrip"
				fput "redeem bloodscrip"
			end
			fill_hands
			sleep 3.0
			break
		elsif result =~ /strides in|stride in/
		end
		sleep 0.1
		waitrt?
		waitcastrt?
		wait_while{ stunned? }
#		wait_until { count_npcs > 0 }
		target = GameObj.npcs.find{ |npc| npc.name =~ // }
		while GameObj.npcs.any? { |npc| (npc.status !~ /dead/) }
		#while GameObj.npcs.size > 0
			target = GameObj.npcs.find{ |npc| npc.name =~ // if npc.status !~ /dead|gone/ }
			waitrt? if !(target.status =~ /dead|gone/)
			waitcastrt? if !(target.status =~ /dead|gone/)
			while target.status !~ /dead|gone/
				if !(target.status =~ /dead|gone/)
					start_script "bigshot", [ "quick" ]
					wait_while {running?("bigshot")}
				end
			end
#				if target.status !~ /dead|gone/
#					spellcheck(activespells)
#					waitrt? if !(target.status =~ /dead|gone/)
#					waitcastrt? if !(target.status =~ /dead|gone/)
#					stand()
#					if Spell[909].known? && Spell[909].affordable? && Spell[909].active?
#						fput "stomp" if mana.to_i > 10 && target.status !~ PRONE
#					end
#					waitrt? if !(target.status =~ /dead|gone/)
#					waitcastrt? if !(target.status =~ /dead|gone/)
#					fput "stance offensive" if checkstance != "offensive"
#					fput("attack ##{target.id}") if !(target.status =~ /dead|gone/) 
#					pause 0.25 if target.status !~ /dead|gone/
#				else
#					break
#				end
#			end
#			waitrt?
#			fput ("loot") if target.status =~/dead|gone/
#			sleep 0.5
#			if mana.to_i < 5
#				break
#			end
		end
		waitrt?
		waitcastrt?
		fput "stance defensive"
		if !Room.current.id == 23733
			empty_hands
			fput "steal"
			sleep 3.0
			waitrt?
			fill_hands
		else
			empty_hands
			fput "steal"
			sleep 3.0
			waitrt?
			if checkright
				fput "put ##{GameObj.right_hand.id} in my #{Vars.lootsack}"
			elsif checkleft
				fput "put ##{GameObj.left_hand.id} in my #{Vars.lootsack}"
			end
			break
		end
		sleep 2.0
	}
	sleep 10.0
    lounge()
    sleep 1.0

}