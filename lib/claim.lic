require 'oga'

module Claim
  Lock            = Mutex.new
  @queue          = Queue.new
  @claimed_room ||= nil
  @mine         ||= false
  @buffer         = []
  @others         = []
  @timestamp      = Time.now

  def self.claim_room(id)
    @claimed_room = id.to_i
    @timestamp    = Time.now
    Log.out("claimed #{@claimed_room}", label: %i(claim room))
    Lock.unlock
  end

  def self.claimed_room
    @claimed_room
  end

  def self.current?
    Lock.synchronize { @mine.eql?(true) }
  end

  def self.mine?
    self.current?
  end

  def self.others
    @others
  end

  def self.members
    if Group.checked?
      Group.members.map(&:noun)
    else
      []
    end
  end

  def self.handle_room
    begin
      Lock.lock unless Lock.owned?
      lines = @buffer.dup
      @buffer = []
      room_xml = lines.join("\n").gsub("room players", "room-players")
      #Log.out(room_xml, label: %i(room))
      room_info = Oga.parse_xml("<move>%s</move>" % room_xml)
      room_pcs = room_info.css("#room-players a").map {|ele| ele.attr("noun").value }
      room_pcs << :hidden if room_xml =~ /obvious signs of someone hiding/
      @others = room_pcs - Cluster.connected - self.members
      unless @others.empty?
        @mine = false
        return Log.out("prevented -> %s" % @others.join(", "), label: %i(claim others)) 
      end
      nav = room_info.css("nav").first
      @mine = true
      self.claim_room nav.attr("rm").value unless nav.nil?
    ensure
      Lock.unlock if Lock.owned?
    end
  end

  def self.ingest(line)
    @buffer << line if line =~ /<nav rm='(\d+)'/ 
    Lock.lock if not Lock.owned? and @buffer.size > 0
    @buffer << line if @buffer.size > 0
    self.handle_room if line =~ /<compass>/ and @buffer.size > 0
  end

  def self.hook()
    DownstreamHook.add("claim/room", -> line {
      begin
        self.ingest(line)
      rescue => exception
        Log.out(exception, label: %i(room claim err))
      ensure
        return line
      end
    })
  end

  def self.watch!
    self.hook()
  end

  self.watch!
end