=begin
  This script will create a new window and load images built for the Visualizer script for different locations across Gemstone IV.

  Add to your autostart with the following command:

  ;autostart add visualizer

  or Global with

  ;autostart add --global visualizer

         author: Selfane
   contributors: Tysong
            art: Alosaka, Oro
        version: 0.09.2

  Notes:

  0.09.2  - Rubocop cleanup, File.join usage, failsafe upon no Visualizer folder created
  0.09.1  - Proper Art credit
  0.09    - Initial Script Upload.
=end

unless File.exist?(File.join(SCRIPT_DIR, 'Visualizer'))
  respond ""
  respond "Visualizer images not found."
  respond "Please download the image library from:"
  respond "https://drive.google.com/drive/folders/1j40END1Xe1EHVN1KCq9Sza2fWymZDkuG?usp=drive_link"
  respond ""
  respond "Then unzip the images into the #{File.join(SCRIPT_DIR, 'Visualizer')} folder"
  respond ""
  exit
end

Settings.load

window = nil
window_position = Settings['window_position'] || [500, 500]
visualizer_exit = false

current_image = File.join(SCRIPT_DIR, 'Visualizer', "u#{Room.current.uid.max}.png")
unless File.exist?(current_image)
  current_image = File.join(SCRIPT_DIR, 'Visualizer', "#{Room.current.location}.png")
end
lastRoom = Room.current.uid.max
# last_image = "" # useless assignment to variable at this location

current_format = nil
current_width = nil
current_height = nil
# window_resized = false # unused variable
image = nil
scroller = nil
layout = nil
visualizer_window_height = Settings['window_height'] || 500
visualizer_window_width = Settings['window_width'] || 500
currentImageExists = true

loadCurrentRoomImage = proc {
  if (!File.file?(current_image))
    if (image != nil)
      layout.remove(image)
    end
    window.show_all
    currentImageExists = false
  end

  if (window != nil)
    begin
      current_format, current_width, current_height = GdkPixbuf::Pixbuf.get_file_info(current_image)
      Gtk.queue { window.title = "Visualizer - " + Room.current.title.to_s + " - u" + Room.current.uid[0].to_s }
      scale = visualizer_window_width * 1.0 / current_width
      scale = [scale, 1].min
      layout.set_size(current_width * scale, current_height)
      if (image != nil)
        layout.remove(image)
      end
      image = Gtk::Image.new
      image.set_pixbuf(GdkPixbuf::Pixbuf.new(:file => current_image).scale(current_width * scale, current_height * scale))
      layout.put(image, 0, 0)
      layout.move(image, 0, 0)
    rescue
      if (image != nil)
        layout.remove(image)
      end
    end
    window.show_all
  end
}

loadCurrentRoomImage.call

Gtk.queue {
  window = Gtk::Window.new
  window.title = "Visualizer - " + Room.current.title.to_s + " - u" + Room.current.uid[0].to_s
  window.set_icon(@default_icon)
  window.signal_connect('delete_event') { visualizer_exit = true }

  window.move(window_position[0], window_position[1])

  scroller = Gtk::ScrolledWindow.new
  scroller.border_width = 0
  scroller.set_policy(:automatic, :always)
  window.add(scroller)
  window.keep_above = true

  layout = Gtk::Layout.new
  scroller.add(layout)

  if (currentImageExists)
    current_format, current_width, current_height = GdkPixbuf::Pixbuf.get_file_info(current_image)

    scale = visualizer_window_width * 1.0 / [current_width, 1].max
    scale = [scale, 1].min

    image = Gtk::Image.new
    image.set_pixbuf(GdkPixbuf::Pixbuf.new(:file => current_image).scale(current_width * scale, current_height * scale))
    layout.put(image, 0, 0)
  end
  window.show_all

  visualizer_window_height = [visualizer_window_height, 100].max
  visualizer_window_width = [visualizer_window_width, 100].max
  window.resize(visualizer_window_width, visualizer_window_height)

  window_position[0] = [[0, window_position[0].to_i].max, (Gdk::Screen.default.width - visualizer_window_width)].min
  window_position[1] = [[0, window_position[1].to_i].max, (Gdk::Screen.default.height)].min
  window.move(window_position[0], window_position[1])
}

before_dying {
  window_position = visualizer_window_width = visualizer_window_height = nil
  Gtk.queue {
    window_position = window.position
    visualizer_window_width = window.allocation.width
    visualizer_window_height = window.allocation.height
  }
  sleep 0.01 while visualizer_window_height.nil?
  Gtk.queue { window.destroy }
  Settings['window_position'] = window_position if (window_position.class == Array) and (window_position[0].to_i > 0) and (window_position[1].to_i > 0)
  Settings['window_width'] = visualizer_window_width if (visualizer_window_width.class == Integer) and (visualizer_window_width > 100)
  Settings['window_height'] = visualizer_window_height if (visualizer_window_height.class == Integer) and (visualizer_window_height > 100)
  Settings.save
  echo "settings saved"
}

until visualizer_exit
  if ((window.allocation.height != visualizer_window_height || visualizer_window_width != window.allocation.width) && window.allocation.height != nil && window.allocation.width != nil && current_width != nil && current_height != nil)
    visualizer_window_width = window.allocation.width
    visualizer_window_height = window.allocation.height
    Settings['window_height'] = visualizer_window_height
    Settings['window_width'] = visualizer_window_width
    scale = visualizer_window_width * 1.0 / current_width
    scale = [scale, 1].min
    layout.set_size(current_width * scale, current_height)
    if (currentImageExists)
      layout.remove(image)
      image = Gtk::Image.new
      image.set_pixbuf(GdkPixbuf::Pixbuf.new(:file => current_image).scale(current_width * scale, current_height * scale))
      layout.put(image, 0, 0)
      layout.move(image, 0, 0)
    end
    window.show_all
  end
  sleep 0.5
  if (Room.current.uid.max != lastRoom)
    last_image = current_image

    if !running?('go2')
      current_image = File.join(SCRIPT_DIR, 'Visualizer', "u#{Room.current.uid.max}.png")
    end

    if (!File.file?(current_image) || running?('go2'))
      current_image = File.join(SCRIPT_DIR, 'Visualizer', "#{Room.current.location}.png")
    end

    if (!File.file?(current_image))
      current_image = File.join(SCRIPT_DIR, 'Visualizer', "null.png")
    end

    if (last_image != current_image)
      lastRoom = Room.current.uid.max
      loadCurrentRoomImage.call
    end
  end
end
