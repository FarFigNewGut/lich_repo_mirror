=begin
Thank you to all the patrons
My patrons rock... they'll help me!  This is for them for now!
Telegan helped me with some specifics on regex, using Tysong's infrastructure from Elanthia Online

This is version 1.0, with just the services part built out... more to come!


Contact Whirlin on Discord, Lnet, etc with any questions/problems
=end


if variable[0].nil?
	respond "Please make sure you replace your infomon with the infomoncommageddon to ensure that you get the proper stat information"
	respond "You need to give an option. See below:"
	respond ""
	respond "   ;askwhirlin service  - Shows your your power for Enchanting / Ensorcelling / Recall Unlocking / Mystic Tattooing"
	respond "   ;askwhirlin redux  - Calculates your Redux"
	respond

elsif script.vars[0] =~ /service/
	if Char.prof =~ /Wizard|Sorcerer|Bard|Monk/

		pf = 0
		as = 0
		miu = 0
		emc = 0
		smc = 0
		mmc = 0
		wizard = 0
		sorcerer = 0
		bard = 0
		mnm = 0
		mns = 0
		mlte = 0
		mlteb = 0
		mltr =0
		mltrb = 0
		fa = 0
		
		level = 0
		dex = 0
		dis = 0
		aur = 0
		log = 0
		int = 0
		wis = 0
		inf = 0
		
		put "skills"
		loop {
			line = get
			if line =~ /^  Physical Fitness\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				pf = $1.to_i
			elsif line =~ /^  Arcane Symbols\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				as = $1.to_i
			elsif line =~ /^  Magic Item Use\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				miu = $1.to_i
			elsif line =~ /^  Elemental Mana Control\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				emc = $1.to_i
			elsif line =~ /^  Mental Mana Control\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				mmc = $1.to_i
			elsif line =~ /^  Spirit Mana Control\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				smc = $1.to_i
			elsif line =~ /^  Mental Lore - Telepathy\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)(?:\s+)(\d+)$/
				mlteb = $1.to_i
				mlte = $2.to_i
			elsif line =~ /^  Mental Lore - Transformation\.\.\.\.\.\.\.\|(?:\s+)(\d+)(?:\s+)(\d+)$/
				mltrb = $1.to_i
				mltr = $2.to_i
			elsif line =~ /^  First Aid\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
				fa = $1.to_i			
			elsif line =~ /^  Wizard\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)$/
				wizard = $1.to_i
			elsif line =~ /^  Sorcerer\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)$/
				sorcerer = $1.to_i
			elsif line =~ /^  Bard\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)$/
				bard = $1.to_i	
			elsif line =~ /^  Minor Mental\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)$/
				mnm = $1.to_i		
			elsif line =~ /^  Minor Spiritual\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)$/
				mns = $1.to_i		
			elsif line =~ /\(Use SKILLS BASE to display unmodified ranks and goals\)/
				break
			end
			}
		put "info"
		loop {
			line = get
			if line =~ /^Gender: (?:\w+)(?:\s+)Age: (?:[\d,]+)(?:\s+)Expr: (?:[\d,]+)(?:\s+)Level:(?:\s+)(\d+)$/
				level = $1.to_i
			elsif line =~ /^   Dexterity \(DEX\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				dex = $1.to_i
			elsif line =~ /^  Discipline \(DIS\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				dis = $1.to_i
			elsif line =~ /^        Aura \(AUR\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				aur = $1.to_i
			elsif line =~ /^       Logic \(LOG\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				log = $1.to_i
			elsif line =~ /^   Intuition \(INT\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				int = $1.to_i	
			elsif line =~ /^      Wisdom \(WIS\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				wis = $1.to_i
			elsif line =~ /^   Influence \(INF\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
				inf = $1.to_i
				break
			end
		}
	end



	if Char.prof == "Wizard" 
		respond "Enchanting Success Formula"
		respond "---------------------------"
		respond "  #{(level).to_s.rjust(3)} : Level"
		respond "+ #{log.to_s.rjust(3)} : LOG Bonus"
		respond "+ #{int.to_s.rjust(3)} : INT Bonus"
		respond "+ #{((wizard > (level + 1) ? (level + 1)*2 + (wizard - (level + 1)) : wizard * 2)).to_s.rjust(3)} : Wizard Spells"
		respond "+ #{((emc/2).truncate).to_s.rjust(3)} : trunc(EMC ranks/2)"
		respond "+ #{((miu/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
		respond "+ #{((as/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
		respond "+  25 : Familiar Bonus"
		respond "+  50 : Workshop Bonus"
		respond "==========================="
		respond "Total of #{level + log + int + (miu/10).truncate + (as/10).truncate + (emc/2).truncate + (wizard > (level + 1) ? (level + 1)*2 + (wizard - (level + 1)) : wizard * 2) + 25 + 50}"
		respond "Items with a Bardsong difficulty of #{level + log + int + (miu/10).truncate + (as/10).truncate + (emc/2).truncate + (wizard > (level + 1) ? (level + 1)*2 + (wizard - (level + 1)) : wizard * 2) + 25 + 50-121} to #{level + log + int + (miu/10).truncate + (as/10).truncate + (emc/2).truncate + (wizard > (level + 1) ? (level + 1)*2 + (wizard - (level + 1)) : wizard * 2) + 25 + 50-100} can be completed with 100% chance of success."
		respond "The lower end of the range is for applying higher enchants, to account ."
		exit
	
	elsif Char.prof == "Sorcerer"
		respond "Ensorcell Success Formula"
		respond "---------------------------"
		respond "  #{(level).to_s.rjust(3)} : Level"
		respond "+ #{wis.to_s.rjust(3)} : WIS Bonus"
		respond "+ #{int.to_s.rjust(3)} : INT Bonus"
		respond "+ #{((sorcerer > (level + 1) ? (level + 1)*2 + (sorcerer - (level + 1)) : sorcerer * 2)).to_s.rjust(3)} : Sorcerer Spell Ranks"
			if emc >= smc
				respond "+ #{((emc/2).truncate).to_s.rjust(3)} : Primary: (EMC ranks/2)"
				respond "+ #{((smc/4).truncate).to_s.rjust(3)} : Secondary: (SMC ranks/4)"
				respond "+ #{((miu/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
				respond "+ #{((as/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
				respond "+  20 : Workshop Bonus"
				respond "==========================="	
				respond "Total of #{(level) + ((sorcerer > (level + 1) ? (level + 1)*2 + (sorcerer - (level + 1)) : sorcerer * 2)) + wis + int + ((miu/10).truncate) + ((as/10).truncate) + ((emc/2).truncate) + ((smc/4).truncate) + 20 } "
				respond "You can ensorcell with 100% accuracy items up a Bard difficulty of #{(level) + ((sorcerer > (level + 1) ? (level + 1)*2 + (sorcerer - (level + 1)) : sorcerer * 2)) + wis + int + ((miu/10).truncate) + ((as/10).truncate) + ((emc/2).truncate) + ((smc/4).truncate) + 20 -150} "
				respond "This takes into account the 50 additional marginal difficulty of adding a layer of ensorcell."
			else
				respond "+ #{((smc/2).truncate).to_s.rjust(3)} : Primary: (SMC ranks/2)"
				respond "+ #{((emc/4).truncate).to_s.rjust(3)} : Secondary: (EMC ranks/4)"
				respond "+ #{((miu/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
				respond "+ #{((as/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
				respond "+  20 : Workshop Bonus"
				respond "==========================="
				respond "Total of #{(level) + ((sorcerer > (level + 1) ? (level + 1)*2 + (sorcerer - (level + 1)) : sorcerer * 2)) + wis + int + ((miu/10).truncate) + ((as/10).truncate) + ((emc/4).truncate) + ((smc/2).truncate) + 20 } "
				respond "You can ensorcell with 100% accuracy items up a Bard difficulty of #{(level) + ((sorcerer > (level + 1) ? (level + 1)*2 + (sorcerer - (level + 1)) : sorcerer * 2)) + wis + int + ((miu/10).truncate) + ((as/10).truncate) + ((emc/4).truncate) + ((smc/2).truncate) + 20 -150}"
				respond "This takes into account the 50 additional marginal difficulty of adding a layer of ensorcell."
			end
		exit
	elsif Char.prof == "Bard"
		respond "Recall Unlocking Success Formula"
		respond "---------------------------"
		respond "  #{level.to_s.rjust(3)} : Level"
		respond "+ #{aur.to_s.rjust(3)} : AUR Bonus"
		respond "+ #{inf.to_s.rjust(3)} : INF Bonus"
		respond "+ #{((bard > (level + 1) ? (level + 1)*2 + (bard - (level + 1)) : bard * 2)).to_s.rjust(3)} : Bard Spellsongs Ranks"
		respond "+ #{(mlte).to_s.rjust(3)} : Telepathy Ranks"
		respond "+ #{((miu/2).truncate).to_s.rjust(3)} : trunc(MIU ranks / 2)"
		respond "+ #{((emc/2).truncate).to_s.rjust(3)} : trunc(EMC Ranks / 2)"
		respond "+ #{((mmc/2).truncate).to_s.rjust(3)} : trunc(MMC Ranks / 2)"
		respond "==========================="
		respond "Total of #{(level) + ((bard > (level + 1) ? (level + 1)*2 + (bard - (level + 1)) : bard * 2)) + aur + inf + ((miu/2).truncate) + ((emc/2).truncate) + ((mmc/2).truncate) + mlte}"
		exit
	elsif Char.prof == "Monk"
		respond "Tattooing Success Formula"
		respond "---------------------------"
		respond "  #{level.to_s.rjust(3)} : Level"
		respond "+ #{(dex * 2).to_s.rjust(3)} : DEX Bonus * 2"
		respond "+ #{(dis * 2).to_s.rjust(3)} : DIS Bonus * 2"
		respond "+ #{((mnm+mns) * 2).to_s.rjust(3)} : Spell Ranks * 2"
		respond "+ #{as.to_s.rjust(3)} : Arcane Symbols"
		respond "+ #{mmc.to_s.rjust(3)} : mmc"
		respond "+ #{smc.to_s.rjust(3)} : smc"
		respond "+ #{(((pf*3)/4).truncate).to_s.rjust(3)} : Physical Fitness * 3/4"
		respond "+ #{((fa/2).truncate).to_s.rjust(3)} : First Aid / 2"
		respond "+ #{mltrb.to_s.rjust(3)} : Mental Lore Tranformation for Tattooing Yourself"
		respond "+ #{mlteb.to_s.rjust(3)} : Mental Lore Telepathy for Tattooing Others"
		respond "==========================="
		respond "For Tattooing Yourself: Total of #{(level) + ((mnm + mns) * 2) + (dex * 2) + (dis * 2) + (((pf*3)/4).truncate) + ((fa/2).truncate) + as + mmc + smc + mltrb}"
		respond "==========================="
		respond "For Tattooing Others: Total of #{(level) + ((mnm + mns) * 2) + (dex * 2) + (dis * 2) + (((pf*3)/4).truncate) + ((fa/2).truncate) + as + mmc + smc + mlteb}"
		exit
	end	
elsif script.vars[0] =~ /redux/

reduxmin = ["1500","1500","1500","1500","1500","1500","1500","1500","1500","1500","1500","1500","1500","1216","1204","1196","1188","1180","1172","1168","1164","1160","1152","1148","1148","1144","1140","1136","1132","1132","1128","1128","1124","1124","1120","1120","1116","1116","1116","1112","1112","1112","1108","1108","1108","1104","1104","1104","1104","1104","1100","1100","1100","1100","1100","1096","1096","1096","1096","1096","1096","1092","1092","1092","1092","1092","1092","1092","1088","1088","1088","1088","1088","1088","1088","1088","1088","1088","1084","1084","1084","1084","1084","1084","1084","1084","1084","1084","1084","1084","1084","1080","1080","1080","1080","1080","1080","1080","1080","1080","1080"]
	respond "Stay tuned, this is a work in progress"



end

