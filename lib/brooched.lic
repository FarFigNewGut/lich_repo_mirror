=begin
    brooched.lic: Lumnis brooch manager

	Cycles and rubs brooch intelligently. Tracks charges,
	safeguards against accidental use. See the help output
	for details.

     author: Archeth
       game: Gemstone
       tags: loot, magic, rings, brooch
    version: 1.0

    changelog:
	    1.0 Initial version.
=end

require 'tzinfo'

silence_me

$brooched_debug_mode = false
$script_name = script.name
$planar_buff = "Lumnis' Enlightenment"
$elemental_buff = "Lumnis' Fortitude"
$order_buff = "Lumnis' Repose"

$redir_lines = []

$squelch_all_proc = proc { |server_string|
	$redir_lines << server_string
	nil
}

def seconds_to_hms(sec)
  "%02d hours, %02d minutes, and %02d seconds" % [sec / 3600, sec / 60 % 60, sec % 60]
end

def run_cmd_with_output(command)
	begin
		$redir_lines = []
		DownstreamHook.add($script_name, $squelch_all_proc)
		fput command
	ensure
		DownstreamHook.remove($script_name)
	end
	
	$redir_lines
end

def get_cur_ts()
	tz = TZInfo::Timezone.get('America/New_York')
	t = tz.to_local(Time.now)
	return t.to_i()
end

def get_next_reset_ts()
	tz = TZInfo::Timezone.get('America/New_York')
	t = tz.to_local(Time.now)
	t = t + (24*60*60)
	t2 = tz.local_time(t.year, t.month, t.day, 0, 0, 0)
	return t2.to_i()
end

def check_reset_time()
	cts = get_cur_ts()

	echo "cts is #{cts}, reset_ts is #{CharSettings['data']['reset_ts']}" if $brooched_debug_mode
	
	if CharSettings['data']['reset_ts'] < cts
		echo "Brooch has been reset!"
		CharSettings['data']['planar'][0] = 0
		CharSettings['data']['spiritual'][0] = 0
		CharSettings['data']['elemental'][0] = 0
		CharSettings['data']['chaos'][0] = 0
		CharSettings['data']['order'][0] = 0
		CharSettings['data']['reset_ts'] = get_next_reset_ts()
	end

	echo "Next charges reset in #{CharSettings['data']['reset_ts'] - cts} seconds." if $brooched_debug_mode
end

def check_setup()
	if not CharSettings['data']
		echo "Please run setup first."
		exit
	end
end

def setup()
	echo "Setting up brooch, hold tight..."
    CharSettings['data'] = Hash.new
	CharSettings['data']['reset_ts'] = get_next_reset_ts()

	lines = run_cmd_with_output("analyze brooch")
	lines.each { |l|
		if l =~ /(\w+): (\d+) out of (\d+)/
			CharSettings['data'][$1.downcase] = [$2.to_i(), $3.to_i()]
		elsif l =~ /currently set to (\w+)[\.|,]/
			CharSettings['data']['current'] = $1.downcase
		end
    }

	echo "Done setting up brooch!"
	
	info() if $brooched_debug_mode
end

def turn_brooch(buff)
	if CharSettings['data']['current'] == buff
		echo "Brooch is already set to #{buff}." if $brooched_debug_mode
	else
		buff2 = buff
		buff2 = 'spirit' if buff == 'spiritual'
		buff2 = 'element' if buff == 'elemental'
		res = dothistimeout "whisper my brooch #{buff2}", 5, /You discreetly whisper/
		if res !~ /You discreetly whisper/
			echo "Unknown response turning brooch!"
			exit
		end
		CharSettings['data']['current'] = buff
		echo "Successfully turned brooch to #{buff}!" if $brooched_debug_mode
	end
end

def buff_active?(buff)
	if buff =~ /planar/
		buff_name = $planar_buff
	elsif buff =~ /elemental/
		buff_name = $elemental_buff
	elsif buff =~ /order/
		buff_name = $order_buff
	else
		echo "Wrong buff name!"
		exit
	end
	
	Effects::Buffs.active?(buff_name)
end

def info()
	data = CharSettings['data']
	echo "Brooch is currently set to #{data['current'].capitalize}."
	echo
	if buff_active?('planar')
		echo "Planar buff is currently active."
	else
		echo "Planar buff is NOT currently active."
	end
	if buff_active?('elemental')
		echo "Elemental buff is currently active."
	else
		echo "Elemental buff is NOT currently active."
	end
	if buff_active?('order')
		echo "Order buff is currently active."
	else
		echo "Order buff is NOT currently active."
	end
	echo
	echo "Planar: #{data['planar'][0]} out of #{data['planar'][1]} charges used."
	echo "Spiritual: #{data['spiritual'][0]} out of #{data['spiritual'][1]} charges used."
	echo "Elemental: #{data['elemental'][0]} out of #{data['elemental'][1]} charges used."
	echo "Chaos: #{data['chaos'][0]} out of #{data['chaos'][1]} charges used."
	echo "Order: #{data['order'][0]} out of #{data['order'][1]} charges used."
	echo
	
	time_diff = data['reset_ts'] - Time.now.to_i
	echo "Brooch will reset in #{seconds_to_hms(time_diff)}."
end

def rub_it(buff)
	data = CharSettings['data']
	if data[buff][0] >= data[buff][1]
		echo "Out of #{buff} charges!"
		exit
	end
	turn_brooch(buff)
	res = dothistimeout "rub brooch", 5, /You trace the central|ebbs weakly|any experience/
	if res =~ /ebbs weakly/
		echo "Out of charges, but we shouldn't be...?"
		exit
	elsif res =~ /You trace the central|any experience/
		# fine
	else
		echo "Unrecognized response!"
		exit
	end

	data[buff][0] = data[buff][0] + 1
	echo "Successfully rubbed brooch for #{buff}, charges now #{data[buff][0]} of #{data[buff][1]}." if $brooched_debug_mode
end

def rub_planar()	
	if buff_active?('planar')
		echo "Planar buff is already active." if $brooched_debug_mode
		exit
	end

	rub_it('planar')
end

def rub_spiritual(force=false)
	if (CharSettings['data']['planar'][0] < CharSettings['data']['planar'][1]) and not buff_active?('planar')
		if force
			echo "Forcing spiritual rub despite planar being available and not active..."
		else
			echo "Not rubbing spiritual because there are unused planar charges!"
			exit
		end
	end
	
	if (checkmind !~ /saturated/) && (percentmind() < 100)
		if force
			echo "Forcing spiritual rub despite mind not being fried..."
		else
			echo "Not rubbing spiritual because mind is not fried!"
			exit
		end
	end

	rub_it('spiritual')
end

def rub_elemental()
	if buff_active?('elemental')
		echo "Elemental buff is already active."
		exit
	end

	rub_it('elemental')
end

def rub_chaos()
	rub_it('chaos')
end

def rub_order()
	if buff_active?('order')
		echo "Order buff is already active."
		exit
	end

	rub_it('order')
end

if script.vars[1].downcase == 'setup'
	setup()
elsif script.vars[1].downcase == 'info'
	check_setup()
	check_reset_time()
	info()
elsif script.vars[1].downcase == 'planar'
	check_setup()
	check_reset_time()
	rub_planar()
elsif script.vars[1].downcase == 'spiritual'
	check_setup()
	check_reset_time()
	rub_spiritual()
elsif script.vars[1].downcase == 'spiritual_force'
	check_setup()
	check_reset_time()
	rub_spiritual(true)
elsif script.vars[1].downcase == 'elemental'
	check_setup()
	check_reset_time()
	rub_elemental()
elsif script.vars[1].downcase == 'chaos'
	check_setup()
	check_reset_time()
	rub_chaos()
elsif script.vars[1].downcase == 'order'
	check_setup()
	check_reset_time()
	rub_order()
else
	output = "#{$script_name}.lic\n\n"
	output.concat "This script helps with rubbing your Lumnis brooch. It tracks charges for each buff in the brooch.\n"
	output.concat "Before using, please run the 'setup' command. If you use the brooch outside of this script, you\n"
	output.concat "should rerun setup or it will get confused.\n\n"
	output.concat "The script has built-in safeguards. It will not rub spiritual, elemental, or order if the\n"
	output.concat "corresponding buff is already active. Spiritual also won't be rubbed if there are available\n"
	output.concat "planar charges and the planar buff isn't active, or if your mind isn't full. (This check can\n"
	output.concat "be overridden by spiritual_force.) Chaos isn't safeguarded because we don't know what we\n"
	output.concat "will get.\n\n"
	output.concat "commands:\n"
	output.concat "   #{$clean_lich_char}#{$script_name} help                        Show this help.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} setup                       Do one-time setup.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} info                        Prints info about charges and buffs.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} planar                      Rub planar.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} spiritual                   Rub spiritual.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} spiritual_force             Rub spiritual, ignoring safeguards.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} elemental                   Rub elemental.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} chaos                       Rub chaos.\n"
	output.concat "   #{$clean_lich_char}#{$script_name} order                       Rub order.\n"

	respond output 
end
