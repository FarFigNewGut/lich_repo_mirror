=begin

	I wrote an alternative to crosscharcom called Borg.  Borg will 
	assimilate all of your characters and allow you to control them 
	as long as they're all being played on the same PC. 

	This is a set of three scripts:
	Borg: Hive mind. (see note 2)
	Queen: Issues commands to hive mind.
	Drone: Processes commands on each character.

	Process:
	1) Start Borg in the manner you prefer. (see note 2)
	2) Start drone on each character you want to command.  
	   You'll want to give Borg a few seconds to get situated before 
	   you try to connect to it.
	2) Issue commands with queen.

	Syntax:
	;queen selema jump <-- Tells Selema to jump
	;queen selema ;go2 bank <-- Tells Selema to go to the bank
	;queen wall jump <-- Tells all connected characters to jump

	A few things you need to know:
	1) Borg works by using an array hosted on port 9999 via druby.  
	   You might get a firewall notification the first time you run it.  
	   I promise I am not trying to haxor you.
	2) Borg is provided as borg.lic.  I highly recommend that you rename 
	   it to borg.rb so that you can run it from from a command prompt 
	   OUTSIDE of the game so that all of your characters log in to find the 
	   hive mind awaiting them.  If you wish to run the borg hive from within 
	   the game, you can do that with borg.lic
	3) I currently do not have "pretty" messaging for if you try to run drone 
	   without borg already running.  If you get a connection refused type error, 
	   you probably don't have borg running (or you can't see it for some weird reason.)
	4) Borg uses do_client so that you can tell your characters to use scripts. 
	5) Borg has a TTL feature that may need some tweaking if you run a ridiculous number of 
	   characters.

	Thanks:
	My thanks to Xanlin for his continuing consultations and support.
	Also thanks to Luxelle, Ensayn, pREDDY, Venzo, and Kendawg for their testing and feedback.

	Contact sellies#1149 on Discord with questions and bugs.


=end
=begin
	author: Selema
	game: Any
	tags: remote, utility
	version: 0.99.2

	Changelog:
	0.99.2 Donecommands and donewalls arrays changed from .pop to .shift
	0.99.1 Text block cleanup
	0.99 Initial public release
	

=end       
require 'drb/drb'

unless Script.exists?('queen')
  echo "You do not have the queen script.  queen.lic is required for the borg hive to function."
  echo "Downloading now"
  echo "You should really read the readme with ;repo info drone.lic"
  do_client(";repository download queen.lic")
  wait_while { running?('repository') }
end

unless Script.exists?('borg.lic') || Script.exists?('borg.rb')
  echo "You do not have the Borg script.  drone.lic is required for the borg hive to function."
  echo "Downloading now"
   echo "You should really read the readme with ;repo info drone.lic"
  do_client(";repository download borg.lic")
  wait_while { running?('repository') }
end



DRb.start_service
$commands = DRbObject.new_with_uri('druby://localhost:9999')
respond "We are the borg.  Resistance is futile.  Lower your shields and surrender your ships."

me = Char.name
lme = me.downcase
donewalls = []
donecommands = []
debug = false
id = nil
ttl = nil
command = nil



loop do
  #Find any commands for us
  $commands.each{|cmd| 
  #pull TTL off of array
  ttl = cmd.split[0]
  #pull ID out of array
  id = cmd.split[1]
  
  #Who are we for?
  character = cmd.split[2]
  #make a copy
  command = cmd
  #make it into an array
  commandarray = cmd.split
  #Remove extra data
  3.times{commandarray.shift}
  #Turn it back into a string
  command = commandarray.join(' ')

  if character == me || character == lme
  #if command is for me, do it and remove it from the queue.
	  $commands.delete(cmd)
	  respond id if debug
	  if !donecommands.include?(id)
		respond "Duplicate not detected" if debug
		respond donecommands if debug
		respond id if debug
		#this is a check to prevent us from executing commands twice if removing a command from the command
		#queue takes too long
		donecommands.push(id)
		do_client "#{command}"
		pause 0.2
		if donecommands.length > 15
			#array cleanup
			donecommands.shift
		end
	elsif donecommands.include?(id)
		respond "Duplicate command detected" if debug
		echo donecommands if debug
	  end
  elsif character == "wall"
  #if command is for everyone...
      #if the id has been processed already...
      if donewalls.include?(id)
      ttl = ttl.to_i
	    if ttl < 1
			#if command is stale
			$commands.delete(cmd)
		else
			respond "cmd: #{cmd}" if debug
			$commands.delete(cmd)
			ttl = ttl - 1
			#strip out old ttl
			cmdarray = cmd.split(' ')
			cmdarray.shift
			cmdarray.unshift(ttl.to_s + " ")
			newcmd = cmdarray.join(' ')
			respond "newcmd: #{newcmd}" if debug
			$commands.push(newcmd)	
		end
	  else
	  respond "Command: #{command}" if debug
	  respond "Donewalls: #{donewalls}" if debug
	  respond "We did not process this" if debug
		do_client "#{command}"
		respond donewalls if debug
		donewalls.push(id)
		respond donewalls if debug 
		donewalls.shift if donewalls.length > 15
		respond donewalls if debug
	    ttl = ttl.to_i
		
		if ttl < 1
			$commands.delete(cmd)
		else
			respond "cmd: #{cmd}" if debug
			$commands.delete(cmd)
			ttl = ttl - 1
			#strip out old ttl
			cmdarray = cmd.split(' ')
			cmdarray.shift
			cmdarray.unshift(ttl.to_s + " ")
			newcmd = cmdarray.join(' ')
			respond "newcmd: #{newcmd}" if debug
			$commands.push(newcmd)
		end
		
	end
  else
      ttl = ttl.to_i
    if ttl < 1
      $commands.delete(cmd)
    else
	  ttl = ttl - 1
	  $commands.delete(cmd)
	  cmdarray = cmd.split(' ')
	  cmdarray.shift
	  cmdarray.unshift(ttl.to_s + " ")
	  newcmd = cmdarray.join(' ')
	  respond newcmd if debug
	  $commands.push(newcmd)
    end

  end
}

pause 0.2  
end

