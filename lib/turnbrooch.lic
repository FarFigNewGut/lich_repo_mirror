# Turn to color and (optionally) rub n times.
#
# If n is passed and color is used up for the day, no turn will not occur.
# This makes it easier to work into other scripts without causing unnecessary
# game actions.

#
# Version 0.1
# Tags: XP, EXP, LUMNIS, ROL, RINGS, BROOCH
# Author: Azanoth

target = script.vars[1].downcase.strip
rubs = script.vars[2].strip.to_i

if target == ''
  fput 'analyze my q bro'
  echo 'No args passed'
  exit
end
if target == 'help' || target == 'setup'
  help =
    '' \
      '----------------------------------------

USAGE: ;turnbrooch <sphere> [number of rubs]

<sphere> can be either a color or an orb name.

Number of rubs is optional. If none are specified,
only turn will occur.

Example: ;turnbrooch blue
Example: ;turnbrooch spiritual
Example: ;turnbrooch red 3
Example: ;turnbrooch chaos 1

-----------------------------------------------------
' \
      ''
  echo help
  exit
end

color_map = {
  'planar' => 'red',
  'spiritual' => 'blue',
  'elemental' => 'green',
  'chaos' => 'black',
  'order' => 'white'
}
reversed_color_map = color_map.invert

if !color_map[target] && !reversed_color_map[target]
  raise 'Unrecognized target. Choose something like spiritual or blue.'
end

target_color = color_map[target] || target

analyze =
  dothistimeout 'analyze my q bro',
                5,
                /^These bonuses are only active.*It is currently set to \w+[\.,]/
raise 'Failed to analyze' if analyze !~ /currently set to (\w+)/

current_color = color_map[$1.downcase]
raise 'Failed to analyze color' if !current_color

if rubs > 0
  target_sphere = reversed_color_map[target_color]

  # do not turn if no rubs are available
  rubs_available = nil
  while line = get
    if line =~ /#{target_sphere.capitalize}: (\d+) out of (\d+)$/
      rubs_available = $2.to_i - $1.to_i
      break
    end
  end
  raise 'FAILED TO FIND RUBS AVAILABLE' if rubs_available.nil?
  if rubs_available == 0
    echo 'Brooch turned, but no more rubs are available.'
    exit
  elsif rubs > rubs_available
    rubs = rubs_available
  end
end

if current_color == target_color
  echo 'Already on that color'
else
  loop do
    result =
      dothistimeout 'turn my q bro',
                    5,
                    /Touching the gear within your quintuple orb brooch.*is replaced by a \w+ orb\.$/
    if result =~ /is replaced by a (\w+) orb\.$/
      break if $1 == target_color
    else
      echo 'Failed to recognize turn result'
    end
  end
end

rubs.times { fput 'rub my q bro' } if rubs > 0
