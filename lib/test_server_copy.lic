=begin
  
  ! This script does things with files, so it requires ;trust !
  
  Updates one line of infomon.lic to not autoquit on the testserver (line 57)
  Copies your latest mapdb over to the test directory.
  Copies your lich settings to the profile for your character on the test server
  Defaults to copying the current character, but input can specify otherwise
  
  ;test_server_copy
    or 
  ;test_server_copy from:Mymain to:Somealt
  
  add go2 to the parameters to overwrite test sever go2 targets, 
  will insert go2 settings if they don't exist for the test server scope.
  
  ;test_sever_copy go2
  
  recommended: use LostRanger's ;tlogin to login to the test server
  
          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: lich, utility, testserver, test, lichdb, gst
  requires_trust: true
        required: Lich >= 4.6.4
         version: 2
    
=end
#------------------------------------------------------------------------------#
# requires ;trust
#------------------------------------------------------------------------------#
if $SAFE != 0;
  _respond "\n     #{$clean_lich_char}#{script.name} requires trust to edit the lich database.\n
     <d cmd=\"#{$clean_lich_char}trust #{script.name}\">#{$clean_lich_char}trust #{script.name}</d>\n\n";
  exit;
end;
#------------------------------------------------------------------------------#
# fix infomon.lic
#------------------------------------------------------------------------------#
respond "-"*64
respond "checking infomon.lic..."

find     = "unless XMLData.game =~ /^(?:GSF|GSIV|GSPlat|GSTest)$/";
replace  = "unless XMLData.game =~ /^(?:GSF|GSIV|GSPlat|GSTest|GST)$/";
filename = "#{$lich_dir}/scripts/infomon.lic";
infomon  = File.read(filename)
line57   = infomon.split("\n")[56]

if line57 == find
  respond "updating infomon.lic, line 57"
  outdata  = File.read(filename).sub(find, "#{replace}");
  File.open(filename, 'w') do |out|;
    out << infomon.sub(find,replace);
  end;
end
#------------------------------------------------------------------------------#
# copy mapdb
#------------------------------------------------------------------------------#
@game_source ='GSIV';
@game_target ='GST';

gst_dir = "#{DATA_DIR}/#{@game_target}"
made_gst = false;
if !Dir.exist?(gst_dir)
  respond "making directory for GST: #{gst_dir}"
  Dir.mkdir(gst_dir) unless !Dir.exist?(gst_dir)
end

respond 'checking mapdb...'

source_mapdb = Dir.entries("#{DATA_DIR}/#{@game_source}").find_all { |filename| filename =~ /^map\-[0-9]+\.dat$/ }.collect { |filename| "#{filename}" }.sort.reverse.shift
target_mapdb = Dir.entries("#{DATA_DIR}/#{@game_target}").find_all { |filename| filename =~ /^map\-[0-9]+\.dat$/ }.collect { |filename| "#{filename}" }.sort.reverse.shift

if !source_mapdb.nil? and (target_mapdb.nil? or source_mapdb != target_mapdb)
  require "fileutils"
  respond "copying mapdb #{source_mapdb} to #{DATA_DIR}/#{@game_target}"
  FileUtils.copy("#{DATA_DIR}/#{@game_source}/#{source_mapdb}","#{DATA_DIR}/#{@game_target}/#{source_mapdb}")
end

#------------------------------------------------------------------------------#
# Settings
#------------------------------------------------------------------------------#
CharSettings['script_settings_setup'] = nil if script.vars[0] =~ /script_reset/

@settings_source = nil;
@settings_target = nil;

if script.vars[0] =~ /\-?\-?from(?:[=: ])(\w+)/i;
  @settings_source = $1.downcase.capitalize;
else;
  @settings_source = XMLData.name;
end;

if script.vars[0] =~ /\-?\-?to(?:[=: ])(\w+)/i;
  @settings_target = $1.downcase.capitalize;
else;
  @settings_target = XMLData.name;
end;

@copy_go2 = false;
@copy_go2 = true if script.vars[0] =~ /go2/;


@delete_existing = false;
@delete_uservars = false;
if script.vars[0] =~ /delete/i or @game_target=='GST';
  @delete_existing = true;
  @delete_uservars = true;
end;

@scope_source = "#{@game_source}:#{@settings_source}";
@scope_target = "#{@game_target}:#{@settings_target}";

respond "-"*64
respond "copy from: #{@scope_source}";
respond "copy to:   #{@scope_target}";
respond "delete #{@scope_target} script settings: #{@delete_existing}";
respond "delete #{@scope_target} uservars       : #{@delete_uservars}";
respond "delete #{@game_target} go2 settings to overwrite with #{@game_source} data: #{@copy_go2}";
respond "!!! pausing script.  Unpause if input shown above is correct. ";
respond "-"*64
pause_script

#------------------------------------------------------------------------------#
# open the lich.db3
#------------------------------------------------------------------------------#
def self.lich_db_open;
  require 'sqlite3';
  SQLite3::Database.open "#{$lich_dir}data/lich.db3";
end;

db = lich_db_open;
#------------------------------------------------------------------------------#
# Delete script settings
#------------------------------------------------------------------------------#
if @delete_existing;
  sql = "delete from script_auto_settings where scope='#{@scope_target}'";
  begin;
    db.execute(sql);
  rescue SQLite3::BusyException;
    sleep 0.1;
    retry;
  end;
  respond "#{@scope_target} script settings deleted";
end;
#------------------------------------------------------------------------------#
# overwrite uservars
#------------------------------------------------------------------------------#
if @delete_uservars;
  sql = "delete from uservars where scope='#{@scope_target}'";
  begin;
    db.execute(sql);
  rescue SQLite3::BusyException;
    sleep 0.1;
    retry;
  end;
  respond "#{@scope_target} uservars deleted";
  sql = "
    insert into uservars (hash, scope)
    select hash, '#{@scope_target}' from uservars 
    where scope='#{@scope_source}'
  ";
  begin;
    db.execute(sql);
  rescue SQLite3::BusyException;
    sleep 0.1;
    retry;
  end;
  respond "#{@scope_source} uservars copied to #{@scope_target}";
  #db.close
end;
#------------------------------------------------------------------------------#
# copy script settings
#------------------------------------------------------------------------------#
sql = "
  insert into script_auto_settings (script,scope,hash)
  select script, '#{@scope_target}', hash
  from script_auto_settings as sas
  where scope='#{@scope_source}' 
    and not exists (
      select 1
      from script_auto_settings i
      where i.script = sas.script
        and i.scope  ='#{@scope_target}'
    )
";
begin;
  db.execute(sql);
rescue SQLite3::BusyException;
  sleep 0.1;
  retry;
end;
respond "#{@scope_source} script settings copied to #{@scope_target}";
#------------------------------------------------------------------------------#
# overwrite global go2
#------------------------------------------------------------------------------#
if @copy_go2;
  sql = "delete from script_auto_settings where script='go2' and scope in ('#{@game_target}:','#{@game_target}')";
  begin;
    db.execute(sql);
  rescue SQLite3::BusyException;
    sleep 0.1;
    retry;
  end;
  respond "#{@game_target} go2 settings deleted";
end;
#------------------------------------------------------------------------------#
# insert source go2 if test go2 doesn't exist
#------------------------------------------------------------------------------#
begin
  sql = "select 1 
        from script_auto_settings 
        where scope='#{@game_target}' and script='go2'
        "
  test_go2_settings_exist = 0;
  test_go2_settings_exist = db.get_first_value(sql); #null = nil
  if test_go2_settings_exist.nil?;
    sql = "
      insert into script_auto_settings (script, hash, scope)
      select 'go2', hash, '#{@game_target}:' from script_auto_settings 
      where scope='#{@game_source}:' and script='go2'
        and not exists (
          select 1 
          from script_auto_settings 
          where scope='#{@game_target}:' and script='go2'
          )
    ";
    begin;
      db.execute(sql);
    rescue SQLite3::BusyException;
      sleep 0.1;
      retry;
    end;
      sql = "
      insert into script_auto_settings (script, hash, scope)
      select 'go2', hash, '#{@game_target}' from script_auto_settings 
      where scope='#{@game_source}' and script='go2'
        and not exists (
          select 1 
          from script_auto_settings 
          where scope='#{@game_target}' and script='go2'
          )
    ";
    begin;
      db.execute(sql);
    rescue SQLite3::BusyException;
      sleep 0.1;
      retry;
    end;
    respond "#{@game_source} go2 settings copied to #{@game_target}";
  end;
end;
#------------------------------------------------------------------------------#
# done
#------------------------------------------------------------------------------#
db.close;

