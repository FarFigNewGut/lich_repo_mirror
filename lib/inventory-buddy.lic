=begin

	This script tracks the inventory and locker contents of all of your characters. You can then bring up the window and look through the containers on different characters to see what is in each container, you can also see what is in their lockers.
	
	There is also a search feature where you can search through the inventory and lockers of all of your characters to find what you are looking for.
	
	Leave the script running in the background to keep the database up to date.
	To bring up the ;inventory-buddy window: while script is running enter ;send inv
	The database will update your character's inventory whenever you enter INV FULL.
	The database will update your character's locker contents whenever you LOOK in your locker.
	The database will also update your character's locker contents whenever you look at your locker manifest.
	
	Future planned updates:
	;send scan will LOOK in every item in your locker to track the contents of any containers in your locker. Right now the script just tracks what is in your locker.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Version 1: Initial release!
	Version 2: Script now updates the database whenever you look at your locker manifest.
	Version 2: Script should no longer show (marked) or (registered) on items in a locker.
	Version 3: Script should now wait until the database file is no longer in use before saving/loading to the file. This should avoid issues where 2+ characters are trying to save/load from the file at the same time.
	Version 3: Script was only tracking the locker contents of one town when using the locker manifest. The script should now track the locker contents of all towns when using a locker manifest.
	Version 3: The "Delete Character" feature is working again.
	Version 3: You can now search through the items of all characters or search through the items of just one character.
	Version 3: There is now an option to track or not track the (marked) and (registered) status of items.
	Version 3: Script now tracks each character's bank information, resource information, tickets information, and experience.
	Version 3: New command: ;send update. Using this command will update all information except for locker information.
	Version 4: Fixed bug with script saving non-locker items to the log when using a locker manifest.
	Version 4: Fixed another locker manifest bug. The script should track locker contents in different towns separately now. For reals this time!
	
	Author: Dreaven
	Version: 4

=end

require 'gtk3'
require 'json'

class InventoryBuddyMain
	@save_all_data = true
	@file_name = "inventory-buddy.json"
	@scanning_inventory = nil
	@person_deleted = nil
	@all_data = {}
	@character_menu = nil
	@main_window = nil
	@search_item_entry = nil
	@search_character_entry = nil
	@all_check_names = [ "Marked", "Save Option" ]
	@all_stat_names = /^(Experience|Banks|Resources|Tickets)/
	@lock_file = File.open("#{@file_name}.lock", File::RDWR | File::CREAT)
	
	def self.start_container_hash
		if @all_data[checkname].nil?
			@all_data[checkname] = {}
		else
			@all_data[checkname] = @all_data[checkname].select { |key, _| (key =~ @all_stat_names) || (key =~ /^(Locker)/) }
		end
		@all_data["Script Settings"] = {} unless @all_data["Script Settings"]
		@all_check_names.each{ |name| 
			@all_data["Script Settings"][name] = "No" if @all_data["Script Settings"][name] != "Yes"
		}
		@all_data[checkname]["All Inventory"] = []
		@all_data[checkname]["Worn"] = []
		@scanning_inventory = true
	end
	
	def self.save_data(name, file_path)
		if @save_all_data
			begin
				@lock_file.flock(File::LOCK_EX)

				@character_data = @all_data[checkname]
				@script_data = @all_data["Script Settings"]
				load_all_info(@file_name)
				@all_data[checkname] = @character_data
				@all_data["Script Settings"] = @script_data
				@all_data.delete(name) if @person_deleted
				
				if @character_menu
					@character_menu.remove_all
					@character_menu.append_text("All")
					@all_data.each{ |name, containers| @character_menu.append_text(name) if name != "Script Settings" }
					
					if @person_deleted
						@character_menu.active = -1
					else
						current_menu_option = @character_menu.active
						@character_menu.active = -1
						@character_menu.active = current_menu_option
					end
				end
				
				@search_item_entry.text = "" if @search_item_entry
				@search_character_entry.text = "" if @search_character_entry
				
				@person_deleted = nil

				data = JSON.dump(@all_data)

				File.open(file_path, 'w') do |file|
					file.puts(data)
				end

				check_in_list
			ensure
				@lock_file.flock(File::LOCK_UN)
			end
			respond ";inventory-buddy: Data saved."
		end
	end

	def self.load_all_info(file_path)
		if @save_all_data
			begin
				@lock_file.flock(File::LOCK_SH)

				return unless File.exist?(file_path)

				serialized_data = File.read(file_path)
				@all_data = JSON.parse(serialized_data)
			ensure
				@lock_file.flock(File::LOCK_UN)
			end
		end
	end
	
	load_all_info(@file_name)
	start_container_hash
	@scanning_inventory = nil
	
	@tooltips ={
		"Character Menu" => "Select character from this menu.",
		"Container Menu" => "Select container to see what its contents are. \"All Inventory\" shows all items on this character, it does not show the contents of their locker.",
		"Item Search" => "Enter the name of the item you want to find.",
		"Character Search" => "Enter the name of the character whose items you want to search through.\n\nLeave this blank to search through all character's items.",
		"Delete Character" => "If you wish to remove a character and all of their saved data from the database, then enter their name in the box and click the \"Delete\" button.",
		"Marked" => "Tick this box if you want (marked) and (registered) tags to be saved for items.",
		"Save Option" => "Tick this box if you want the database to be updated and saved to your computer every time a relevant command is sent (inv full, experience, resource, ticket balance, bank accounts). Your locker information is always updated and saved when looking in your locker or your locker manifest.\n\nUntick this to only update the database and save it to your computer whenever the ;send update command is sent.\n\nThe database is always updated and saved to your computer when the script is first started.",
	}
	
	def self.create_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.set_title("Inventory Buddy")

		@check_boxes = {}
		@all_check_names.each{ |name|
			@check_boxes[name] = Gtk::CheckButton.new(name)
			@check_boxes[name].set_tooltip_text(@tooltips[name])
		}
		
		@check_boxes.each{ |name,checkbox|
			if @all_data["Script Settings"][name] == "Yes"
				checkbox.active = true
			else
				@all_data["Script Settings"][name] = "No"
			end
			checkbox.signal_connect("clicked"){
				if checkbox.active?
					@all_data["Script Settings"][name] = "Yes"
				else
					@all_data["Script Settings"][name] = "No"
				end
				save_data(checkname, @file_name)
			}
		}
		
		@parent_grid = Gtk::Grid.new
		@drop_down_grid = Gtk::Grid.new
		@inv_grid = Gtk::Grid.new
		@search_grid = Gtk::Grid.new
		
		@scroll_window = Gtk::ScrolledWindow.new
		@scroll_window.set_policy(Gtk::PolicyType::AUTOMATIC, Gtk::PolicyType::AUTOMATIC)
		
		@parent_grid.attach(@drop_down_grid, 0, 0, 1, 1)
		@parent_grid.attach(@search_grid, 0, 1, 1, 1)
		@parent_grid.attach(@inv_grid, 0, 2, 1, 1)
		
		@search_item_entry = Gtk::Entry.new
		@search_character_entry = Gtk::Entry.new
		@delete_button = Gtk::Button.new(:label => "Delete")
		@delete_entry = Gtk::Entry.new
		@search_grid.attach(Gtk::Label.new("Item Search:"), 0, 0, 1, 1)
		@search_grid.attach(Gtk::Label.new("Character Search:"), 1, 0, 1, 1)
		@search_grid.attach(Gtk::Label.new("Delete Character Info:"), 2, 0, 1, 1)
		@search_grid.attach(@search_item_entry, 0, 1, 1, 1)
		@search_grid.attach(@search_character_entry, 1, 1, 1, 1)
		@search_grid.attach(@delete_entry, 2, 1, 1, 1)
		@search_grid.attach(@delete_button, 3, 1, 1, 1)
		
		@search_item_entry.set_tooltip_text(@tooltips["Item Search"])
		@search_character_entry.set_tooltip_text(@tooltips["Character Search"])
		@delete_button.set_tooltip_text(@tooltips["Delete Character"])
		@delete_entry.set_tooltip_text(@tooltips["Delete Character"])
		
		@main_window.signal_connect("destroy") do
			@main_window.close
			@main_window = nil
			@character_menu = nil
			@search_item_entry = nil
			@search_character_entry = nil
			Gtk.main_quit
		end
		
		@character_menu = Gtk::ComboBoxText.new
		@container_menu = Gtk::ComboBoxText.new
		@character_menu.set_tooltip_text(@tooltips["Character Menu"])
		@container_menu.set_tooltip_text(@tooltips["Container Menu"])
		@character_menu.append_text("All")
		@all_data.each{ |name, containers| @character_menu.append_text(name) if name != "Script Settings" }
		
		@drop_down_grid.attach(@character_menu, 0, 0, 1, 1)
		@drop_down_grid.attach(@container_menu, 1, 0, 1, 1)
		@drop_down_grid.attach(@check_boxes["Marked"], 2, 0, 1, 1)
		@drop_down_grid.attach(@check_boxes["Save Option"], 2, 1, 1, 1)
		
		@inv_label = Gtk::Label.new
		@inv_grid.attach(@scroll_window, 0, 0, 1, 1)
		@scroll_window.add(@inv_label)
		@inv_label.set_xalign(0)
		@inv_label.set_yalign(0)
		
		@search_item_entry.signal_connect('changed') { search_items if @search_item_entry.text.length > 0 }
		@search_character_entry.signal_connect('changed') { search_items if @search_item_entry.text.length > 0 }
		@delete_button.signal_connect('clicked') { delete_character }
		
		@character_menu.signal_connect("changed") do
			name = @character_menu.active_text
			@search_item_entry.text = ""
			@search_character_entry.text = ""
			@container_menu.remove_all
			if name == "All"
				@container_menu.append_text("Banks")
				@container_menu.append_text("Experience")
				@container_menu.append_text("Resources")
				@container_menu.append_text("Tickets")
			else
				@container_menu.append_text("All Inventory")
				@container_menu.append_text("Stats")
				@all_data[name].each{ |container,contents| @container_menu.append_text(container) if container =~ /^Locker/}
				@all_data[name].each{ |container,contents| @container_menu.append_text(container) if (container !~ /^(All Inventory|Locker)/) && (container !~ @all_stat_names) }
			end
			@container_menu.active = 0
		end
		
		@container_menu.signal_connect("changed") do
			name = @character_menu.active_text
			container = @container_menu.active_text
			@search_item_entry.text = ""
			@search_character_entry.text = ""
			text = ""
			if container == "Stats"
				@all_data[name].each{ |data|
					if data[0] =~ @all_stat_names
						if data[0] == "Banks"
							text += "Bank information:\n"
							data[1].each{ |bank_name,bank_value| 
								number = add_commas(bank_value)
								text += "#{bank_name}: #{number}\n"
							}
						elsif data[0] == "Experience"
							data[1] = add_commas(data[1])
							text += "Experience: #{data[1]}\n"
						elsif data[0] == "Resources"
							text += "Resource information:\n"
							data[1].each{ |reso_name,reso_value| 
								number = add_commas(reso_value)
								text += "#{reso_name}: #{number}\n"
							}
						elsif data[0] == "Tickets"
							text += "Ticket information:\n"
							data[1].each{ |event_name,value|
								number = add_commas(data[1][event_name]["Ticket Value"])
								text += "#{event_name}: #{number} #{data[1]["Ticket Name"]}\n"
							}
						end
						text += "\n"
					end
				}
			elsif container == "Banks"
				totals = {}
				totals["Total"] = 0
				text = ""
				@all_data.each{ |name,value|
					if @all_data[name]["Banks"]
						text += "#{name}:\n"
						@all_data[name]["Banks"].each{ |bank_name,bank_value|
							totals[bank_name] = 0 if totals[bank_name].nil?
							number = add_commas(bank_value)
							text += "#{bank_name}: #{number}\n"
							totals[bank_name] += bank_value.to_i if bank_name != "Total"
						}
						text += "\n"
					end
				}
				text += "Totals:\n"
				totals.each{ |bank_name,total_value|
					if bank_name != "Total"
						totals["Total"] += total_value.to_i
						number = add_commas(total_value)
						text += "#{bank_name}: #{number}\n"
					end
				}
				number = add_commas(totals["Total"])
				text += "Total: #{number}\n"
			elsif container == "Tickets"
				totals = {}
				text = ""
				@all_data.each{ |name,value|
					if @all_data[name]["Tickets"]
						text += "#{name}:\n"
						@all_data[name]["Tickets"].each{ |ticket_event,value|
							if totals[ticket_event].nil?
								totals[ticket_event] = {}
								totals[ticket_event]["Ticket Value"] = 0
								totals[ticket_event]["Ticket Name"] = value["Ticket Name"]
							end
							number = add_commas(value["Ticket Value"])
							text += "#{ticket_event}: #{number} #{value["Ticket Name"]}\n"
							totals[ticket_event]["Ticket Value"] += value["Ticket Value"].to_i
						}
						text += "\n"
					end
				}
				text += "Totals:\n"
				totals.each{ |ticket_event,_|
					number = add_commas(totals[ticket_event]["Ticket Value"])
					text += "#{ticket_event}: #{number} #{totals[ticket_event]["Ticket Name"]}\n"
				}
			elsif container == "Resources"
				text = ""
				@all_data.each{ |name,value|
					if @all_data[name]["Resources"]
						text += "#{name}:\n"
						@all_data[name]["Resources"].each{ |key,value|
							number = add_commas(value)
							text += "#{key}: #{number}\n"
						}
						text += "\n"
					end
				}
			elsif container == "Experience"
				text = ""
				@all_data.each{ |name,value|
					if @all_data[name]["Experience"]
						text += "#{name}:\n"
						number = add_commas(@all_data[name]["Experience"])
						text += "Experience: #{number}\n"
						text += "\n"
					end
				}
			else
				@all_data[name][container].each{ |item|
					if @all_data[name].keys.any?{ |i| i == item.strip } && container == "All Inventory"
						text += "<span foreground='green'>#{item}</span>\n"
					else
						text += "#{item}\n"
					end
				}
			end
			@inv_label.set_markup(text)
		end
		
		@scroll_window.set_size_request(500, 500)
		@main_window.resize(600, 600)
		
		@main_window.add(@parent_grid)
		@main_window.show_all
	end
	
	def self.add_commas(number)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
	end
	
	def self.delete_character
		name = @delete_entry.text.strip.capitalize

		if !name.empty? && @all_data.key?(name)
			@person_deleted = true
			save_data(name, @file_name)
			@character_menu.remove_all
			@character_menu.append_text("All")
			@all_data.each{ |name, containers| @character_menu.append_text(name) if name != "Script Settings" }
			respond "#{name} has been deleted."
		elsif name.empty?
			respond "Enter the name of the character you want to delete."
		else
			respond "#{name} not found."
		end
		@delete_entry.text = ""
	end
	
	def self.search_items
		query = @search_item_entry.text.downcase
		name_search = @search_character_entry.text.capitalize
		results = []

		if name_search.length > 0
			if @all_data.key?(name_search)
				search_inv_hash({ name_search => @all_data[name_search] }, query, results)
			else
				@inv_label.set_markup("Character \"#{name_search}\" not found.")
				return
			end
		else
			search_inv_hash(@all_data, query, results)
		end
		
		text = ""
		number = 0
		results.each{ |item|
			if item !~ /On a weapon rack\:|On an armor stand\:|In a clothing wardrobe\:|In a magical item bin\:|In a deep chest\:/ && item.length > 0
				text += "#{item.strip}\n"
				number += 1
			end
		}
		text += "#{number} items found\n"
		@inv_label.set_markup(text)
	end
	
	def self.search_inv_hash(data, query, results, person = nil, container = nil)
		data.each do |item, value|
			if value.is_a?(Hash)
				search_inv_hash(value, query, results, item, container)
			elsif value.is_a?(Array)
				search_inv_array(value, query, results, person, item)
			elsif value.to_s.downcase.include?(query)
				results << "#{item} - #{person} (#{container})" if person && container && container != "All Inventory"
			end
		end
	end
	
	def self.search_inv_array(array, query, results, person, container)
		array.each do |item|
			if item.is_a?(Hash)
				search_in_hash(item, query, results, person, container)
			elsif item.to_s.downcase.include?(query)
				results << "#{item} - #{person} (#{container})" if person && container && container != "All Inventory"
			end
		end
	end
	
	def self.check_in_list
		model = @character_menu.model
		name_found = nil
		if model
			model.each do |model, path, iter|
				item_text = iter[0]
				if item_text == checkname
					name_found = true
					break
				end
			end
		end
		@character_menu.append_text(checkname) if name_found.nil?
	end
	
	def self.update_everything
		@save_all_data = nil
		Thread.new{
			3.times{ respond "############################################################################################################" }
			respond "Message from ;inventory-buddy"
			respond "The script can't fully update while your character is in roundtime, so try not to induce any roundtime or send any script commands until the update is complete."
			3.times{ respond "############################################################################################################" }
			wait_until { checkrt == 0 }
			put "inv full"
			sleep 1
			put "bank account"
			sleep 1
			put "resource"
			sleep 1
			put "experience"
			sleep 1
			put "ticket balance"
			sleep 1
			3.times{ respond "############################################################################################################" }
			respond "Message from ;inventory-buddy"
			respond "The update is complete."
			3.times{ respond "############################################################################################################" }
			@save_all_data = true
			save_data(checkname, @file_name)
		}
	end
	
	def self.watching
		before_dying{
			@main_window.close if @main_window
		}
		
		update_everything

		while line = get
			#Inventory management
			if line =~ /^You are currently wearing\:/
				start_container_hash
			elsif line =~ /^(\s{2})([a-zA-Z]+ .*)/ && @scanning_inventory
				blank_spaces = $1
				item_name = $2
				if @all_data["Script Settings"]["Marked"] == "Yes"
					@all_data[checkname]["All Inventory"].push(blank_spaces + item_name)
				else
					@all_data[checkname]["All Inventory"].push(blank_spaces + item_name.gsub(/ \((marked|registered)\)/, ""))
					item_name.gsub!(" (marked)", "")
					item_name.gsub!(" (registered)", "")
				end
				@all_data[checkname]["Worn"].push(item_name)
				containers = []
				last_container_index = 0
			elsif line =~ /^(\s{6,})([a-zA-Z]+ .*)/ && @scanning_inventory
				spaces = $1.length
				blank_spaces = $1
				item_name = $2
				if @all_data["Script Settings"]["Marked"] == "Yes"
					@all_data[checkname]["All Inventory"].push(blank_spaces + item_name)
				else
					@all_data[checkname]["All Inventory"].push(blank_spaces + item_name.gsub(/ \((marked|registered)\)/, ""))
					item_name.gsub!(" (marked)", "")
					item_name.gsub!(" (registered)", "")
				end
				container_index = (spaces - 6) / 4
				if last_container_index != container_index
					(last_container_index - container_index).times{ containers.pop } if (last_container_index - container_index) > 0
					last_container_index = container_index
				end

				if containers[container_index].nil?
					if container_index == 0
						containers[container_index] = @all_data[checkname]["Worn"].last
					else
						containers[container_index] = @all_data[checkname][containers[container_index - 1]].last
					end
					container_count = @all_data[checkname].keys.find_all{ |i| i =~ /#{containers[container_index]}/ }
					containers[container_index] = "#{containers[container_index]} #{(container_count.count + 1).to_s}" if container_count.count > 0
				end
				
				container = containers[container_index]
				unless @all_data[checkname][container].count > 0
					@all_data[checkname][container] = []
					@all_data[checkname][container].push("This container is inside of #{containers[container_index - 1]}") unless container_index - 1 < 0
				end
				@all_data[checkname][container].push(item_name)
			elsif line =~ /^\(Items\: .*\)/ && @scanning_inventory
				put "glance"
			elsif line =~ /^You are carrying nothing at this time./
				start_container_hash
				@all_data[checkname]["Worn"].push("NOTHING")
				put "glance"
			elsif line =~ /You glance down to see (.*) in your right hand and (.*) in your left hand./ && @scanning_inventory
				@all_data[checkname]["Held"] = []
				right_hand = $1
				left_hand = $2
				if right_hand != "nothing"
					@all_data[checkname]["Held"].push(right_hand)
					@all_data[checkname]["All Inventory"].push("#{right_hand} (Held)")
				end
				if left_hand != "nothing"
					@all_data[checkname]["Held"].push(left_hand)
					@all_data[checkname]["All Inventory"].push("#{left_hand} (Held)")
				end
				@scanning_inventory = nil
				save_data(checkname, @file_name) if @all_data["Script Settings"]["Save Option"] == "Yes"
				@finished_with_scan = true
			elsif line =~ /You glance down at your empty hands./ && @scanning_inventory
				save_data(checkname, @file_name) if @all_data["Script Settings"]["Save Option"] == "Yes"
				@scanning_inventory = nil
				@finished_with_scan = true
			#Locker management
			elsif line =~ /^In the locker\:/
				@all_data[checkname] = {} if @all_data[checkname].nil?
				@all_data[checkname]["Locker"] = []
				while line = get
					if line =~ /.* \[\d+\]\: /
						items = line.split(/.* \[\d+\]\: |, /)
						items.each{ |i|
							if i.length > 0
								matches = i.scan(/\((\d+)\)/)
								if matches.any?
									number = matches[0][0].to_i
									i = i.split(/ \(\d+\)/)
									if @all_data["Script Settings"]["Marked"] == "Yes"
										number.times{ @all_data[checkname]["Locker"].push(i.join(", ")) }
									else
										number.times{ @all_data[checkname]["Locker"].push(i.join(", ").gsub(/ \((marked|registered)\)/, "")) }
									end
								else
									if @all_data["Script Settings"]["Marked"] == "Yes"
										@all_data[checkname]["Locker"].push(i)
									else
										@all_data[checkname]["Locker"].push(i.gsub(/ \((marked|registered)\)/, ""))
									end
								end
							end
						}
					elsif line =~ /Total items:/
						save_data(checkname, @file_name)
						break
					end
				end
			elsif line =~ /^In the locker you see /
				@all_data[checkname] = {} if @all_data[checkname].nil?
				@all_data[checkname]["Locker"] = []
				line.chop!
				items = line.split(/In the locker you see |, | and /)
				if @all_data["Script Settings"]["Marked"] == "Yes"
					items.each{ |i| @all_data[checkname]["Locker"].push(i) if i.length > 0 }
				else
					items.each{ |i| @all_data[checkname]["Locker"].push(i.gsub(/ \((marked|registered)\)/, "")) if i.length > 0 }
				end
				save_data(checkname, @file_name)
			elsif line =~ /^Looking in front of you, you see the contents of your locker in (.*?)\:/ || line =~ /^Thinking back, you recall the contents of your locker in (.*?)\:/
				town = $1
				@all_data[checkname] = {} if @all_data[checkname].nil?
				@all_data[checkname]["Locker in #{town}"] = []
				status_tags
				while line = get
					if line !~ /Obvious items\:/
						if @all_data["Script Settings"]["Marked"] == "Yes"
							@all_data[checkname]["Locker in #{town}"].push(line)
						else
							@all_data[checkname]["Locker in #{town}"].push(line.gsub(/ \((marked|registered)\)/, ""))
						end
					elsif line =~ /^\<prompt/
						save_data(checkname, @file_name)
						break
					end
				end
				status_tags
			#Experience Management
			elsif line =~ /Total Exp\: (.*?)\s+Death\'s Sting\:/
				experience = $1.delete(",")
				@all_data[checkname]["Experience"] = experience
				save_data(checkname, @file_name) if @all_data["Script Settings"]["Save Option"] == "Yes"
			#Bank Management
			elsif line =~ /^You currently have the following amounts on deposit\:/
				@all_data[checkname]["Banks"] = {}
				while line = get
					if line =~ /(.*)\: (.*)/
						name = $1.strip
						amount = $2.delete(",")
						@all_data[checkname]["Banks"][name] = amount
						break if line =~ /Total\:/
					end
				end
				save_data(checkname, @file_name) if @all_data["Script Settings"]["Save Option"] == "Yes"
			#Resource Management
			elsif line =~ /.*?\: (.*?)\/50,000 \(Weekly\)\s+(.*?)\/200,000 \(Total\)/
				weekly = $1.delete(",")
				total = $2.delete(",")
				@all_data[checkname]["Resources"] = {}
				@all_data[checkname]["Resources"]["Weekly"] = weekly
				@all_data[checkname]["Resources"]["Total"] = total
				save_data(checkname, @file_name) if @all_data["Script Settings"]["Save Option"] == "Yes"
			#Ticket Management
			elsif line =~ /You take a moment to recall the alternative currencies you've collected\.\.\./
				@all_data[checkname]["Tickets"] = {}
				status_tags
				while line = get
					if strip_xml(line) =~ /(.*?) \- (.*) (.*)./
						event_name = $1.strip
						ticket_value = $2.delete(",")
						ticket_name = $3
						@all_data[checkname]["Tickets"][event_name] = {}
						@all_data[checkname]["Tickets"][event_name]["Ticket Value"] = ticket_value
						@all_data[checkname]["Tickets"][event_name]["Ticket Name"] = ticket_name
					elsif line =~ /^\<prompt/ || line =~ /You haven't collected any alternative currencies/
						break
					end
				end
				status_tags
				save_data(checkname, @file_name) if @all_data["Script Settings"]["Save Option"] == "Yes"
			#Commands
			elsif line == "inv"
				if @main_window.nil?
					Gtk.queue {
						InventoryBuddyMain.create_window
						Gtk.main
					}
				end
			elsif line == "update"
				update_everything
			end
		end		
	end
end

3.times{ respond "############################################################################################################" }
respond "Message from ;inventory-buddy"
respond "Leave the script running in the background to keep the database up to date."
respond "To bring up the ;inventory-buddy window: while script is running enter ;send inv"
respond "To update all information enter ;send update"
respond "The database will update your character's locker contents whenever you LOOK in your locker or use a locker manifest."
3.times{ respond "############################################################################################################" }

InventoryBuddyMain.watching