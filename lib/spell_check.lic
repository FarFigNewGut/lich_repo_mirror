=begin

  Checks spells that you don't have on and lets you know what you might want to add.
  
  Kinda like ;magic, but backwards.
  
  To check all spells, just run 
    ;spell_check
  
  To check spells that add AS:
    ;spell_check AS   
  
  To check for AS and DS: 
    ;spell_check AS DS

  Ignore certain spells with
    ;spell_check -1216 -1609
    
  Currently hardcoded to ignore 1216 and 1609 as they are listed as group,
  but you have to remain in that group.
  
          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: magic, spells, utility
        required: Lich >= 4.6.4
         version: 0
  +---------------------------------------------------------------+
  ;inv help      > help text 
  ;inv menu      > basic starter menu
  ;inv examples  > examples 
  ;inv changelog > changelog
=end
#------------------------------------------------------------------------------#
# user input
#------------------------------------------------------------------------------#
input = script.vars[1..-1];
input = [] if input.nil?;

#------------------------------------------------------------------------------#
# reference values
#------------------------------------------------------------------------------#

@spell_bonus_abbreviations = {
  "bolt_as"     => "bAS",
  "physical_as" => "pAS",
  "bolt_ds"     => "bDS",
  "physical_ds" => "pDS",
  "elemental_cs"=> "eCS",
  "spirit_cs"   => "spCS",
  "sorcerer_cs" => "soCS",
  "elemental_td"=> "eTD",
  "spirit_td"   => "spTD",
  "sorcerer_td" => "soTD",
  "strength"    => "str",
  "dodging"     => "dodge" 
  };

@bonus_types = {
  "bolt_as"     => "offense",
  "physical_as" => "offense",
  "bolt_ds"     => "defense",
  "physical_ds" => "defense",
  "elemental_cs"=> "offense",
  "spirit_cs"   => "offense",
  "sorcerer_cs" => "offense",
  "elemental_td"=> "defense",
  "spirit_td"   => "defense",
  "sorcerer_td" => "defense",
  "strength"    => "stat",
  "dodging"     => "skill" 
}  
#------------------------------------------------------------------------------#
# helpers -- this would be easier if Spell exposed @@bonus_list
#------------------------------------------------------------------------------#
  
def self.spell_bonus_hash(spell,abbr_filter = []);
  spell = Spell[spell];
  bonuses = {};
  bonuses["bolt_as"]     = {:abbr => "bAS",   :type => "offense", :value => spell.bolt_as       } if spell.bolt_as > 0;       
  bonuses["physical_as"] = {:abbr => "pAS",   :type => "offense", :value => spell.physical_as   } if spell.physical_as > 0;   
  bonuses["bolt_ds"]     = {:abbr => "bDS",   :type => "defense", :value => spell.bolt_ds       } if spell.bolt_ds > 0;       
  bonuses["physical_ds"] = {:abbr => "pDS",   :type => "defense", :value => spell.physical_ds   } if spell.physical_ds > 0;   
  bonuses["elemental_cs"]= {:abbr => "eCS",   :type => "offense", :value => spell.elemental_cs  } if spell.elemental_cs > 0;  
  bonuses["spirit_cs"]   = {:abbr => "spCS",  :type => "offense", :value => spell.spirit_cs     } if spell.spirit_cs > 0;     
  bonuses["sorcerer_cs"] = {:abbr => "soCS",  :type => "offense", :value => spell.sorcerer_cs   } if spell.sorcerer_cs > 0;   
  bonuses["elemental_td"]= {:abbr => "eTD",   :type => "defense", :value => spell.elemental_td  } if spell.elemental_td > 0;  
  bonuses["spirit_td"]   = {:abbr => "spTD",  :type => "defense", :value => spell.spirit_td     } if spell.spirit_td > 0;     
  bonuses["sorcerer_td"] = {:abbr => "soTD",  :type => "defense", :value => spell.sorcerer_td   } if spell.sorcerer_td > 0;   
  bonuses["strength"]    = {:abbr => "str",   :type => "stat"   , :value => spell.strength.to_i } if spell.strength.to_i > 0; 
  bonuses["dodging"]     = {:abbr => "dodge", :type => "skill"  , :value => spell.dodging.to_i  } if spell.dodging.to_i > 0;  
  return bonuses.select { |k,v| abbr_filter.empty? or abbr_filter.include?(v[:abbr]) };
end;

def self.spell_bonus_string(spell, abbr_filter = []);
  return spell_bonus_hash(spell,abbr_filter).each_with_object([]) {|(k,v),a|
      a << "#{v[:abbr]}: #{v[:value]}" if abbr_filter.empty? or abbr_filter.include?(v[:abbr])
  }.join(', ')
end;
#------------------------------------------------------------------------------#
# set abbr_filter from user input
#------------------------------------------------------------------------------#

abbr_filter = []
spell_ignore = [1609, 1216]
options = @spell_bonus_abbreviations.values
input.each { |i|
  if i =~ /-?(\d+)/
    spell_ignore << $1.to_i
  else 
    @spell_bonus_abbreviations.values.each { |v| 
      abbr_filter << v if !abbr_filter.include?(v) and v =~ /#{i}/i;
    }
  end
}

#------------------------------------------------------------------------------#
# check spells and generate output
#------------------------------------------------------------------------------#

output = [];
bonus_total = Hash.new;
circlename = ""
Spell.list.each { |k| 
  
  bonuses = spell_bonus_hash(k.num,abbr_filter)
  if (k.known? or (!k.known? and (k.num.to_s =~ /17\d\d/ or (k.availability=~/all|group/ and k.mana_cost > 0))))  and !spell_ignore.include?(k.num)  and !bonuses.empty? and !k.active? and (eval k.time_per_formula({:caster => "target"})).to_i > 2
    bonuses.each { |k,v| 
      t = @bonus_types[k]
      a = v[:abbr]
      bonus_total[t] = {} if bonus_total[t].nil?;
      bonus_total[t][a] = 0 if bonus_total[t][a].nil?
      bonus_total[t][a] += v[:value]
      }
    output << "#{k.circlename}:" if circlename != k.circlename;circlename = k.circlename
    output << "  #{k.num}, #{k.name}: #{spell_bonus_string(k.num,abbr_filter)}" 
  end
  }

respond
respond output.join("\n")
respond
respond "totals: "
bonus_total.each { |k,v| 
  respond "  #{k}: #{v.map {|abbr,value| "#{abbr}: #{value}"}.join(', ')}";
  }
#respond bonus_total.inspect
respond
respond "input: #{input}"
respond "abbr_filter: #{abbr_filter}"
respond "spell_ignore: #{spell_ignore}"