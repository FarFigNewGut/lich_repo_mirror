=begin

  ;step2 with a special use case
  
  Peers ahead and doesn't move if there are people in the next room.
  Otherwise, moves one room towards your destination.
  
	 forked and modded step2 from: Tillmen (tillmen@lichproject.org)
   author: Xanlin
	   game: GS
	   tags: movement, bandits
	version: 2
  
  v2: added obvious hiding detection
=end

unless script.vars[1] =~ /^[0-9]+$/
	echo "usage: #{$lich_char}#{script.name} <room number>"
	exit
end

unless start_room = Room.current
	echo 'current room was not found in the map database'
	exit
end

unless destination_room = Room[script.vars[1]]
	echo 'destination room was not found in the map database'
	exit
end

if start_room == destination_room
	echo 'start room and destination room are the same'
	exit
end

unless $step2_path and (s = $step2_path.index(start_room.id)) and (d = $step2_path.index(destination_room.id)) and (s < d)
	previous, shortest_distances = Map.dijkstra(Room.current.id, variable[1].to_i)
	unless previous[destination_room.id]
		echo "error: failed to find a path between your current room (#{start_room.id}) and destination room (#{destination_room.id})"
		exit
	end
	$step2_path = [ destination_room.id ]
	$step2_path.push(previous[$step2_path[-1]]) until previous[$step2_path[-1]].nil?
	$step2_path.reverse!
	previous = shortest_distances = nil
end

way = start_room.wayto[$step2_path[$step2_path.index(start_room.id)+1].to_s]

#------------------------------------------------------------------------------#
# script settings
#------------------------------------------------------------------------------#
@script                     = script;
@script.want_downstream     = false;
@script.want_downstream_xml = true;
#------------------------------------------------------------------------------#
# quiet_command by LostRanger, modded a bit by Xanlin
#------------------------------------------------------------------------------#
@script_name = script.name;
def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
def self.cleanup; [DownstreamHook, UpstreamHook].each{|provider| provider.list.find_all{|name| name.start_with?("#{@script_name}::")}.each{|name| provider.remove(name)};  };end;
def self.quiet_command(command, start_pattern, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = true, timeout=5)result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;
@debug = true;
@quiet = true;
#------------------------------------------------------------------------------#
# method to use quiet_command to peer a direction and return the Also here line.
#------------------------------------------------------------------------------#
def self.peer_alsohere(way)
  also_here_pattern  = /^Also here: .*?$/
  command       = "peer #{way.gsub(/^(?:climb|swim|row|paddle|crawl) /,'')}";
  start_pattern = /^You peer|^You are unable to determine/;
  quiet         = @quiet;
  end_pattern   = /<prompt/;
  include_end   = true;
  timeout       = 5;
  silence_me if @quiet;
  data          = self.quiet_command(command, start_pattern, quiet, end_pattern, include_end, timeout);
  silence_me if @quiet;
  return -1 if data.nil?
  
  also_here      = data.find{|d| also_here_pattern.match(d)};
  
  hiding_pattern = /obvious signs of someone hiding/
  hiding         = 'obvious signs of someone hiding' if data.find{|d| hiding_pattern.match(d)};
  ret = [also_here, hiding].compact.join(', and ')
  ret = nil if ret.length < 9;
  
  return ret, command
end
#------------------------------------------------------------------------------#

if way.class == String
  also_here, peered = self.peer_alsohere(way);
  echo "peer failed" if also_here == -1;
  _respond "Peering #{peered} you see #{also_here.gsub(/^Also here: */i,'')}." if !also_here.nil?;
  move(way,giveup_seconds=5,giveup_lines=20) if also_here.nil?;
elsif way.class == Proc
	way.call
else
	echo 'error in the map database'
end
