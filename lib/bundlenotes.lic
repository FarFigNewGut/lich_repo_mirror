=begin
A script to manage all the L/D notes from Rings of Lumnis, etc

;bundlenotes - Will look in your lootsack and on the ground for notes, bundle them all, and leave them all in your lootsack.
;bundlenotes <container> - Will look in your lootsack, the ground, and this container (that is on the ground or that you are wearing).
                           Bundle them all, and leave the bundles in this container.

** You need a lootsack, ;vars set lootsack=<sack>" **
** I strongly recommend being at a private table if you are leaving notes or containers on the ground. **


=end

#

class BundleNotes
    class << self

        def searchContainers()
            @containers.each { |c|
                fn = @finished_notes.join('|')
                note = c.find { |i| i.noun =~ /note/ && (fn.length == 0 || i.name !~ /#{fn}/) }
                next if note.nil? #this container has no notes

                name = note.name
                if name =~ /stack/
                    name.delete_prefix!("stack of ")
                    name.delete_suffix!('s')
                end

                next if @finished_notes.include?(name)

                other_notes_exist = @containers.any? { |c2| c2.any? { |i2| i2.name =~ /#{name}/ && i2.id != note.id } }


                if other_notes_exist
                    echo "found notes to bundle: #{name}"
                    fput "get ##{note.id}"
                    @containers.each { |c2|
                        c2.each { |i2| 
                            next if i2.id == note.id
                            if i2.name =~ /#{name}/
                                put "get ##{i2.id}"
                                fput "bundle"
                                sleep 0.2
                            end
                        }
                    }
                    fput "put ##{GameObj.right_hand.id} in ##{@destination.id}" unless checkright.nil?
                    fput "put ##{GameObj.left_hand.id} in ##{@destination.id}" unless checkleft.nil?
                    @finished_notes.push(name)
                    echo "finished notes: #{@finished_notes}"
                    return
                else
                    if !@destination.contents.any? { |l| l.id == note.id }
                        #this was not in our destination container, we should sort it
                        put "get ##{note.id}"
                        fput "put ##{note.id} in ##{@destination.id}"
                    end
                    @finished_notes.push(name)
                    return
                end
            }

            if GameObj.loot.any? { |l| l.id == @destination.id }
                fput "get ##{@destination.id}"
            end
            echo "We are done."
            @done = true
        end
        def run()
            
            lootsack = UserVars.lootsack
            if lootsack.nil?
                echo "Your lootsack isn't set.  ;vars set lootsack=<lootsack>"
                exit
            end
            
            if GameObj[UserVars.lootsack].contents.nil? 
                fput "look in ##{GameObj[UserVars.lootsack].id}"
            end

            fput "stow right" unless checkright.nil?
            fput "stow left" unless checkleft.nil?

            @containers = [GameObj.loot,GameObj[UserVars.lootsack].contents]
            
            extrasack = nil
            unless variable[0].nil?
                v = variable[0];
                if GameObj.loot.any? { |i| i.name =~ /#{v}/ }
                    extrasack = GameObj.loot.find { |i| i.name =~ /#{v}/ }
                    echo "Found #{extrasack.name} on the ground... will store notes in here."
                elsif !GameObj[v].nil?
                    extrasack = GameObj[v]
                    echo "Found #{extrasack.name} on your body... will store notes in here."
                else
                    echo "Could not find any container whose name includes \"#{v}\" on the ground or on your body."
                    exit
                end

                if extrasack.contents.nil?
                    fput "look in ##{extrasack.id}"
                end
                @containers.push(extrasack.contents) unless extrasack.contents.nil?
            end
            
            @done = false
            @finished_notes = []

            @destination = extrasack
            @destination = GameObj[UserVars.lootsack] if @destination.nil?

            while !@done
                searchContainers()
            end
        end
    end
end

BundleNotes.run()