=begin

	Ever had your familiar/eye stranded somewhere?
	
	This script tells your familiar to walk to a room#.
	It's not fool-proof since they sometimes cannot enter certain areas.
	
	Note:
	The script will pause if there's a special procedure for the area. 
	It's up to you to figure out what to tell you pet from then on. 
	Unpause the script when you resolve the special procedures.
	
	--Drafix
	
=end

Map.load if Map.list.empty?
seeking = $go2_use_seeking
$go2_use_seeking = false
before_dying{ $go2_use_seeking = seeking }
$step2_path = []
fam = 'familiar' if Char.prof == 'Wizard'
fam = 'eye' if Char.prof == 'Sorcerer'
fput "tell #{fam} to look"
fput "look #{Char.name}"
line = get until line == 'At yourself?'


famexits = /#{XMLData.familiar_room_exits.join(', ')}/
room = Map.list.find { |room| room.title.include?(XMLData.familiar_room_title.strip) and room.desc.include?(XMLData.familiar_room_description.strip) and room.paths.find { |paths| paths =~ famexits } }
unless room
	desc_regex = /#{Regexp.escape(XMLData.familiar_room_description.strip).gsub(/\\\.(?:\\\.\\\.)?/, '|')}/
	Map.list.find { |room| room.title.include?(XMLData.familiar_room_title.strip) and room.paths.find { |paths| paths =~ famexits } and room.desc.find { |desc| desc =~ desc_regex } }
end
unless room
	echo "familiar's room is unknown"
	exit
end

start_room = room

unless destination_room = Room[script.vars[1]]
	echo 'destination room was not found in the map database'
	exit
end

if start_room == destination_room
	echo 'start room and destination room are the same'
	exit
end

unless $step2_path and (s = $step2_path.index(start_room.id)) and (d = $step2_path.index(destination_room.id)) and (s < d)
	previous, shortest_distances = Map.dijkstra(start_room.id, variable[1].to_i)
	unless previous[destination_room.id]
		echo "error: failed to find a path between your current room (#{start_room.id}) and destination room (#{destination_room.id})"
		exit
	end
	$step2_path = [ destination_room.id ]
	$step2_path.push(previous[$step2_path[-1]]) until previous[$step2_path[-1]].nil?
	$step2_path.reverse!
	previous = shortest_distances = nil
end

while room = Room[$step2_path[$step2_path.index(start_room.id)+1].to_s]
	way = start_room.wayto[$step2_path[$step2_path.index(start_room.id)+1].to_s]

	if start_room == destination_room
		echo 'Finished'
		exit
	elsif way.class == String
		#echo way
		if way =~ /([a-z]+) (.*)/
			if $1 == 'go'
				fput "tell #{fam} to go #{$2}"
			elsif $1 == 'climb'
				fput "tell #{fam} to go #{$2}"
			end
		else
			fput "tell #{fam} to go #{way}"
		end
		sleep 0.01
		start_room = room
	elsif way.class == Proc
		#echo "** Found a Procedure **"
		#echo way.inspect
		#respond start_room.id.to_s + ': ' + start_room.title[0]	+' - ' + '['+way.inspect+']' + ' -> ' + room.id.to_s
		#pause_script
		if way.inspect =~ /(?:go|climb) (.+?)'/
			fput "tell #{fam} to go #{$1}"
		elsif way.inspect =~ /(northeast|northwest|southeast|southwest|north|east|south|west|up|down|out)/
			fput "tell #{fam} to go #{$1}"
		end
		start_room = room
	else
		echo 'error in the map database'
		exit
	end
end
