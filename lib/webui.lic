require "erb"
require "webrick"

module WebUI
  DEFAULT_PORT = 3000
  DEFAULT_HOST = "localhost"

  def self.start(name, *subapps)
    opts = Opts.parse

    port = opts.port || ::Settings["webui"]["port"] || DEFAULT_PORT
    host = opts.host || ::Settings["webui"]["host"] || DEFAULT_HOST

    server = WEBrick::HTTPServer.new(
      :Port => port,
      :BindAddress => host,
    )

    server.mount "/", WebUI::Servlet, name, Thread.current.group, subapps

    before_dying do
      server.shutdown
    end

    server.start
  end

  ##
  ## minimal options parser
  ##
  module Opts
    FLAG_PREFIX    = "--"

    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end

  class Servlet < WEBrick::HTTPServlet::AbstractServlet
    attr_reader :name, :subapps, :thread_group

    def initialize(server, name, thread_group, apps=[])
      super server
      @name = name
      @subapps = apps
      thread_group.add Thread.current
    end

    def do_GET(request, response)
      dispatch(request, response)
      response.status = 200
    end

    def do_POST(request, response)
      app = dispatch(request, response)
      response.set_redirect WEBrick::HTTPStatus::Found, app.default_route
    end

    def dispatch(request, response)
      if request.path == "/"
        subapps.first.tap do |app|
          app.action_for(app.default_route).new(app, request, response, self).call
        end
      elsif app = find_app_for(request)
        app.tap do |app|
          app.action_for(request.path).new(app, request, response, self).call
        end
      else
        raise WEBrick::HTTPStatus::NotFound
      end
    end

    def find_app_for(request)
      subapps.find { |app| app.has_route?(request) }
    end

    def layout
      @layout ||= ERB.new <<~HTMLDOC
        <!doctype html>
        <html lang="en">
          <head>
            <!-- Required meta tags -->
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
            <!-- Bootstrap CSS -->
            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
            <title><%= servlet.name %>: <%= Char.name %></title>
          </head>
          <body class="bg-light">
            <nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">
              <a class="navbar-brand" href="/"><%= servlet.name %></a>
              <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
              </button>
              <div class="collapse navbar-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav mr-auto">
                  <% servlet.subapps.each do |subapp| %>
                    <li class="nav-item <%= "active" if subapp.name == app.name %>">
                      <a class="nav-link" href="<%= subapp.default_route %>"><%= subapp.name %></a>
                    </li>
                  <% end %>
                </ul>
              </div>
            </nav>
            <div class="pt-5">
              <main role="main" class="container pt-2">
                <%= yield %>
              </main><!-- /.container -->
            </div>

            <!-- Bootstrap core JavaScript
            ================================================== -->
            <!-- Placed at the end of the document so the pages load faster -->
            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
          </body>
        </html>
      HTMLDOC
    end
  end

  class App
    class << self
      attr_accessor :default_route

      def has_route?(request)
        routes.keys.include? request.path.downcase
      end

      def action_for(path)
        routes.fetch(path.downcase)
      end

      def routes
        @routes ||= {}
      end

      def route(path, action, opts={})
        self.default_route = path if opts[:default]
        routes[path] = action
      end

      def name
        super.
          sub(/^Scripting::/, '').
          sub(/^WebUI::/, '')
      end
    end
  end

  class Action
    attr_reader :app, :request, :response, :servlet

    def initialize(app, request, response, servlet)
      @app = app
      @request = request
      @response = response
      @servlet = servlet
    end

    def params
      request.query
    end

    def call
      raise NotImplemented
    end

    def render_with_layout(template)
      render_layout do
        template.result(binding)
      end
    end
    alias :render :render_with_layout

    def render_layout
      servlet.layout.result(binding)
    end

  end
end


class WebUI::Vars < WebUI::App
  #self.name = "Vars"

  class Update < WebUI::Action
    def call
      params.each do |name, value|
        ::Vars[name.to_s] = value.to_s
        echo "Updating Vars.#{name} = #{Vars[name]}"
      end
    end
  end

  class Create < WebUI::Action
    def call
      name = params.fetch("name").to_s
      value = params.fetch("value").to_s
      ::Vars[name] = value
      echo "Adding Vars.#{name} = #{Vars[name]}"
    end
  end

  class Delete < WebUI::Action
    def call
      params.each do |name, value|
        echo "Deleting Vars.#{name}"
        ::Vars[name.to_s] = nil
      end
    end
  end

  class Show < WebUI::Action
    def call
      response.body = render template
    end

    def template
      @template ||= ERB.new <<~HTMLDOC
        <div class="py-3 text-center">
          <h2>Lich Variables for <%= Char.name %></h2>
        </div>

        <% ::Vars.list.each do |name, value| %>
          <div class="row">
            <div class="col-10 pr-2">
              <form action="/vars/update" method="post">
                <div class="form-row">
                  <label for="<%= ERB::Util.html_escape(name) %>" class="col-4 col-form-label">
                    <%= ERB::Util.html_escape(name) %>
                  </label>
                  <div class="col-6">
                    <input type="text" class="form-control" id="update_<%= ERB::Util.html_escape(name) %>" name="<%= ERB::Util.html_escape(name) %>" value="<%= ERB::Util.html_escape(value) %>">
                  </div>
                  <div class="col-2">
                    <button class="btn btn-primary mb-1 w-100" type="submit">Save</button>
                  </div>
                </div>
              </form>
            </div>
            <div class="col-2 pl-2">
              <form action="/vars/delete" method="post">
                <div class="form-row">
                  <input type="hidden" id="delete_<%= ERB::Util.html_escape(name) %>" name="<%= ERB::Util.html_escape(name) %>">
                  <button class="btn btn-danger mb-2 w-100" type="submit">Delete</button>
                </div>
              </form>
            </div>
          </div>
        <% end %>
        <div class="row">
          <div class="col-10 pr-2">
            <form action="/vars/add" method="post">
              <div class="form-row">
                <div class="col-4">
                  <input type="text" class="form-control" id="add_name" name="name" value="" placeholder="name" required>
                </div>
                <div class="col-6">
                  <input type="text" class="form-control" id="add_value" name="value" value="" placeholder="value" required>
                </div>
                <div class="col-2">
                  <button class="btn btn-outline-primary mb-2 w-100" type="submit">Add</button>
                </div>
              </div>
            </form>
          </div>
          <div class="col-2 pl-2">
            <form action="/vars" method="get">
              <div class="form-row">
                <button class="btn btn-outline-danger mb-2 w-100" type="submit">Clear</button>
              </div>
            </form>
          </div>
        </div>
      HTMLDOC
    end
  end

  route "/vars/add", Create
  route "/vars/update", Update
  route "/vars/delete", Delete
  route "/vars", Show, default: true
end

class WebUI::Settings < WebUI::App
  class Update < WebUI::Action
    def call
      params.each do |name, value|
        echo "Updating Settings[#{name}] = #{value}"
        ::Settings["webui"][name.to_s] = value.to_s
      end
    end
  end

  class Show < WebUI::Action
    def call
      response.body = render template
    end

    def template
      @template ||= ERB.new <<~HTMLDOC
        <div class="py-3 text-center">
          <h2><%= servlet.name %> WebUI Settings</h2>
        </div>

        <% ::Settings["webui"].each do |name, value| %>
          <div class="row">
            <div class="col-6">
              <form action="/settings/update" method="post">
                <div class="form-row">
                  <label for="<%= ERB::Util.html_escape(name) %>" class="col-4 col-form-label">
                    <%= ERB::Util.html_escape(name) %>
                  </label>
                  <div class="col-6">
                    <input type="text" class="form-control" id="update_<%= ERB::Util.html_escape(name) %>" name="<%= ERB::Util.html_escape(name) %>" value="<%= ERB::Util.html_escape(value) %>">
                  </div>
                  <div class="col-2">
                    <button class="btn btn-primary mb-1 w-100" type="submit">Save</button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        <% end %>
      HTMLDOC
    end
  end

  route "/settings/update", Update
  route "/settings", Show, default: true
end

Settings ||= {
  "port"  => nil,
  "host"  => nil,
}

WebUI.start('Lich',
  WebUI::Vars,
  WebUI::Settings,
)
