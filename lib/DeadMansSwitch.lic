=begin

	You didn't MEAN to afk script that one time, right? You just meant to get up for a minute and next thing you know you're gone for an hour but your scripts were still running. Whoops!
	
	Never fear! This script helps to keep you honest. Just click 'Start' to start the timer and 'Reset' to reset the timer. If you let the timer reach 0 without clicking the 'Reset' button then the script stops all of your running scripts. Just like magic! You no longer have to worry about accidentally afk scripting...well not for too long anyways.
	
	Once the timer reaches 60 seconds then every 5 seconds the script will warn you in the game window that the timer is low and that you should click the 'Reset' button.
	
	You can choose how long to set the timer for, you can choose which scripts to not stop once the timer reaches 0, and you can even tell the script which script to start once it has stopped all of the scripts. Go ahead and create a script that uses ;go2 to get you back to a table and once there the script will do GO TABLE, and just like that if the timer reaches 0 this script will stop all scripts and run you to the safety of a table. It's not magic! It's science!

	Version 1: Initial release!

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: dreaven.
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

require 'gtk3'

class DeadMansSwitchMain
	@save_file = "Dead Man's Switch Settings.json"
	@lock_file = "Lock File.lock"
	@load_data = nil
	@reset_button_clicked = nil
	@needed_values = {}
	@windows = {}
	@buttons = {}
	@grids = {}
	@spin_buttons = {}
	@adjustments = {}
	@entries = {}
	@labels = {}
	@check_boxes = {}
	
	@defaults = {
		"Timer" => 10,
		"Horizontal Position" => 0,
		"Vertical Position" => 0,
		"Window Red" => 255,
		"Window Green" => 255,
		"Window Blue" => 255,
		"Timer Normal Red" => 0,
		"Timer Normal Green" => 0,
		"Timer Normal Blue" => 0,
		"Timer Alert Red" => 255,
		"Timer Alert Green" => 0,
		"Timer Alert Blue" => 0,
		"Timer Font Size" => 12,
		"Don't Stop Scripts" => "",
		"Start Script" => "",
		"Show Tooltips" => "Yes",
		"Show Title" => "Yes",
		"Show Settings" => "Yes",
	}
	
	position_info = "\n\nNOTE: You MUST use Horizontal Position and Vertical Position to set where you want your window to be, clicking and dragging the window won't save the position."
	window_info = "Enter the Red, Green, and Blue color values you want for the Main window."
	normal_text_info = "This is the color of the timer when there are 60 seconds or more left on the timer.\n\nEnter the Red, Green, and Blue color values you want for the timer."
	alert_text_info = "This is the color of the timer when there are fewer than 60 seconds left on the timer.\n\nEnter the Red, Green, and Blue color values you want for the timer."
	
	@tooltips = {
		"Timer" => "Enter how many minutes you want the timer to start at.",
		"Horizontal Position" => "Enter where you want the window to be placed horizontally on your screen.#{position_info}",
		"Vertical Position" => "Enter where you want the window to be placed vertically on your screen.#{position_info}",
		"Window Red" => window_info,
		"Window Green" => window_info,
		"Window Blue" => window_info,
		"Timer Normal Red" => normal_text_info,
		"Timer Normal Green" => normal_text_info,
		"Timer Normal Blue" => normal_text_info,
		"Timer Alert Red" => alert_text_info,
		"Timer Alert Green" => alert_text_info,
		"Timer Alert Blue" => alert_text_info,
		"Timer Font Size" => "Enter how big you want the timer font to be.",
		"Don't Stop Scripts" => "Enter the name of all scripts you don't want the script to stop when the timer reaches 0.\nThe script won't stop itself or any listed script.\n\nSeparate each script name with a comma.\n\nExample: test1, test2, test3",
		"Start Script" => "Enter the name of the script you want to run when the timer reaches 0.\n\nYou can only enter the name of one script, but you can setup that script to run other scripts and commands.\n\nLeave blank if you don't want to run a script.",
		"Show Tooltips" => "Check this box if you want to see tooltips when you hover the mouse over items.\n\nUncheck this box to not see tooltips.",
		"Show Title" => "Check this box if you want to show the main window's title (the bar at top showing the window name and the minimize/maximize/close buttons.)\n\nUncheck this box to hide the window's title.\n\nNOTE: This setting won't take effect until you restart the script.\n\nAlso note: With the title hidden the only way to close the window would be to do ;k DeadMansSwitch or ;k dead",
		"Show Settings" => "Check this box to show the 'Settings' button on the main window.\n\nUncheck this box to hide the 'Settings' button on the main window.\n\nIMPORTANT: If the settings button is hidden, the only way to access the settings page would be to start script as ;dead setting\n\nThis will show the 'Settings' button when script is started but won't change this setting.",
		"Save" => "Click this button to save the current settings.\n\nNOTE: Most settings won't take effect until after you restart the script, so once you have the settings where you want them click this button then close out the windows and restart the script.",
		"Start" => "Click this button to start the timer. Once the timer is started this button will be renamed to 'Stop' and clicking it will stop the timer, you would then need to click 'Start' to restart the timer.",
		"Reset" => "Click this button to reset the timer back to the original start time. This is the button you need to click to tell the script you are still paying attention to the game and to prevent the timer from reaching 0.",
		"Settings" => "Click this button to open up the settings window.",
	}
	
	def self.load_the_data
		begin
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file|
				lock_file.flock(File::LOCK_EX)
				
				return unless File.exist?(@save_file)
				
				@load_data = JSON.parse(File.read(@save_file))
			}

			@load_data = @load_data[checkname]
		rescue StandardError => e
			respond "Error message from ;DeadMansSwitch: #{e.message}"
		ensure
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file| lock_file.flock(File::LOCK_UN) }
		end
	end
	
	load_the_data

	@defaults.each{ |setting_name,value|
		if value.is_a?(Integer)
			@needed_values[setting_name] = @load_data[setting_name] ? @load_data[setting_name].to_i : @defaults[setting_name]
		elsif value.is_a?(Float)
			@needed_values[setting_name] = @load_data[setting_name] ? @load_data[setting_name].to_f : @defaults[setting_name]
		else
			@needed_values[setting_name] = @load_data[setting_name] ? @load_data[setting_name] : @defaults[setting_name]
		end
	}
	
	def self.save_settings
		File.open(@lock_file, File::RDWR | File::CREAT){ |lock|
			lock.flock(File::LOCK_EX)
			
			if File.exist?(@save_file)
				save_data = JSON.parse(File.read(@save_file))
			else
				save_data = {}
			end
			
			save_data[checkname] ||= {}
			
			@spin_buttons.each{ |name,button| save_data[checkname][name] = button.value.round(1) }
			@entries.each{ |name,entry| save_data[checkname][name] = entry.text }
			
			@check_boxes.each{ |name,box|
				if box.active?
					save_data[checkname][name] = "Yes"
				else
					save_data[checkname][name] = "No"
				end
			}
				
			File.open(@save_file, 'w'){ |file| file.write(JSON.pretty_generate(save_data)) }
			respond ";DeadMansSwitch: Data saved."
		}
	end
	
	def self.add_tooltip(widget, name)
		widget.set_tooltip_text(@tooltips[name]) if @needed_values["Show Tooltips"] == "Yes"
	end
	
	def self.create_settings_page
		@grids["Parent Grid"] = Gtk::Grid.new
		all_grids = [ "First Grid", "Second Grid", "Third Grid" ]
		row = -1
		all_grids.each{ |grid_name|
			@grids[grid_name] = Gtk::Grid.new
			@grids["Parent Grid"].attach(@grids[grid_name], 0, row += 1, 1, 1)
		}

		all_entries = [ "Don't Stop Scripts", "Start Script" ]
		row = -1
		all_entries.each{ |entry_name|
			@entries[entry_name] = Gtk::Entry.new
			@labels[entry_name] = Gtk::Label.new("#{entry_name}     ")
			@grids["First Grid"].attach(@labels[entry_name], 0, row += 1, 1, 1)
			@grids["First Grid"].attach(@entries[entry_name], 1, row, 1, 1)
			@entries[entry_name].text = @needed_values[entry_name]
		}
			
		all_spinbuttons = [ "Timer", "Horizontal Position", "Vertical Position", "Window Red", "Window Green", "Window Blue", "Timer Normal Red", "Timer Normal Green", "Timer Normal Blue", "Timer Alert Red", "Timer Alert Green", "Timer Alert Blue", "Timer Font Size" ]
		all_spinbuttons.each{ |button_name|
			if button_name == "Timer"
				@adjustments[button_name] = Gtk::Adjustment.new(@needed_values[button_name], 1, 120, 1, 5, 0)
			elsif button_name =~ /Position/
				@adjustments[button_name] = Gtk::Adjustment.new(@needed_values[button_name], -2000, 5000, 1, 10, 0)
			elsif button_name =~ /Red|Green|Blue/
				@adjustments[button_name] = Gtk::Adjustment.new(@needed_values[button_name], 0, 255, 1, 10, 0)
			elsif button_name == "Timer Font Size"
				@adjustments[button_name] = Gtk::Adjustment.new(@needed_values[button_name], 5, 50, 1, 10, 0)
			end
			@spin_buttons[button_name] = Gtk::SpinButton.new(@adjustments[button_name])
			@labels[button_name] = Gtk::Label.new("#{button_name}     ")
			@grids["First Grid"].attach(@labels[button_name], 0, row += 1, 1, 1)
			@grids["First Grid"].attach(@spin_buttons[button_name], 1, row, 1, 1)
			
			if button_name =~ /Position/
				@spin_buttons[button_name].signal_connect("value-changed"){ @windows["Main"].move(@spin_buttons["Horizontal Position"].value.to_i, @spin_buttons["Vertical Position"].value.to_i) }
			elsif button_name =~ /Window/
				@spin_buttons[button_name].signal_connect("value-changed"){
					@needed_values["Window Red"] = @spin_buttons["Window Red"].value.to_i
					@needed_values["Window Green"] = @spin_buttons["Window Green"].value.to_i
					@needed_values["Window Blue"] = @spin_buttons["Window Blue"].value.to_i
					@windows["Main"].override_background_color(:normal, Gdk::RGBA.new((@needed_values["Window Red"] / 255.0), (@needed_values["Window Green"] / 255.0), (@needed_values["Window Blue"] / 255.0), 1.0))
				}
			elsif button_name =~ /Timer Normal/
				@spin_buttons[button_name].signal_connect("value-changed"){
					@needed_values["Timer Normal Red"] = @spin_buttons["Timer Normal Red"].value.to_i
					@needed_values["Timer Normal Green"] = @spin_buttons["Timer Normal Green"].value.to_i
					@needed_values["Timer Normal Blue"] = @spin_buttons["Timer Normal Blue"].value.to_i
					@timer_label.override_color(:normal, Gdk::RGBA.new((@needed_values["Timer Normal Red"] / 255.0), (@needed_values["Timer Normal Green"] / 255.0), (@needed_values["Timer Normal Blue"] / 255.0), 1.0))
				}
			elsif button_name == "Timer Font Size"
				@spin_buttons[button_name].signal_connect("value-changed"){
					@needed_values["Timer Font Size"] = @spin_buttons["Timer Font Size"].value.to_i
					@timer_label.override_font(Pango::FontDescription.new("#{@needed_values["Timer Font Size"]}"))
				}
			end
		}
		
		checkboxes = [ "Show Tooltips", "Show Title", "Show Settings" ]
		column = -1
		row = 0
		checkboxes.each{ |box_name|
			@check_boxes[box_name] = Gtk::CheckButton.new(box_name)
			checkbox = @check_boxes[box_name]
			if @needed_values[box_name] == "Yes"
				checkbox.active = true
			else
				checkbox.active = false
			end
			@grids["Second Grid"].attach(checkbox, column += 1, row, 1, 1)
			if column >= 3
				column = -1
				row += 1
			end
			
			checkbox.signal_connect("toggled"){ |box|
				if box.active?
					@needed_values[box_name] = "Yes"
				else
					@needed_values[box_name] = "No"
				end
			}
		}
			
		@buttons["Save"] = Gtk::Button.new("Save")
		@grids["Third Grid"].attach(@buttons["Save"], 0, 0, 1, 1)
			
		@buttons["Save"].signal_connect("clicked"){ save_settings }
		
		add_all_tooltips
	end
	
	def self.create_settings_window
		@windows["Settings"] = Gtk::Window.new(:toplevel)
		window = @windows["Settings"]
		window.set_keep_above(true)
		window.set_title("Settings")
		
		window.signal_connect("destroy"){
			@windows["Settings"].close
			@windows["Settings"].children.each{ |child| window.remove(child) }
			@windows["Settings"] = nil
		}

		window.add(@grids["Parent Grid"])
		window.show_all
	end
	
	def self.start_the_timer
		if (@buttons["Start"].label == "Start") || (@reset_button_clicked)
			@buttons["Start"].label = "Stop" if @reset_button_clicked.nil?
			@reset_button_clicked = nil
			total_seconds_remaining = @needed_values["Timer"] * 60
			@timer_thread.kill if @timer_thread&.alive?
			@timer_thread = Thread.new{
				loop{
					hours = total_seconds_remaining / 3600
					current_seconds_remaining = total_seconds_remaining % 3600
					minutes = current_seconds_remaining / 60
					seconds = current_seconds_remaining % 60
					@timer_label.text = "Timer: #{format("%02d:%02d:%02d", hours, minutes, seconds)}"
					if total_seconds_remaining < 1
						scripts_not_to_stop = @needed_values["Don't Stop Scripts"].split(",")
						scripts_not_to_stop.map! { |text| text.gsub(/\s+/, "") }
						Script.running.each{ |script| script.kill unless (script.name == "DeadMansSwitch") || (scripts_not_to_stop.include?(script.name)) }
						Script.start(@needed_values["Start Script"]) if @needed_values["Start Script"].length > 0
						@buttons["Start"].label = "Start"
						break
					end
					if total_seconds_remaining < 60
						@timer_label.override_color(:normal, Gdk::RGBA.new((@needed_values["Timer Alert Red"] / 255.0), (@needed_values["Timer Alert Green"] / 255.0), (@needed_values["Timer Alert Blue"] / 255.0), 1.0))
					else
						@timer_label.override_color(:normal, Gdk::RGBA.new((@needed_values["Timer Normal Red"] / 255.0), (@needed_values["Timer Normal Green"] / 255.0), (@needed_values["Timer Normal Blue"] / 255.0), 1.0))
					end
					if (total_seconds_remaining < 60) && (total_seconds_remaining % 5 == 0)
						50.times{ respond "ONLY #{total_seconds_remaining} SECONDS REMAINING ON TIMER! CLICK THE 'RESET' BUTTON NOW TO RESET THE TIMER!" }
					end
					total_seconds_remaining -= 1
					sleep 1
				}
			}
		elsif @buttons["Start"].label == "Stop"
			@buttons["Start"].label = "Start"
			@timer_label.text = "Timer:"
			@timer_thread.kill if @timer_thread&.alive?
		end
	end
	
	def self.variable=(value)
		if value
			@show_settings = true
		else
			@show_settings = nil
		end
		if @needed_values["Show Settings"] == "No"
			respond "###############################################################################################################"
			respond "Message from ;DeadMansSwitch:"
			respond "You have the 'Settings' button hidden. The only way to access the Settings page is to start script like this:"
			respond ";dead setting"
			respond "###############################################################################################################"
		end
	end
	
	def self.add_all_tooltips
		@entries.each{ |name,widget| add_tooltip(widget, name) }
		@labels.each{ |name,widget| add_tooltip(widget, name) }
		@check_boxes.each{ |name,widget| add_tooltip(widget, name) }
		@spin_buttons.each{ |name,widget| add_tooltip(widget, name) }
		@buttons.each{ |name,widget| add_tooltip(widget, name) }
	end
	
	def self.create_main_window
		@windows["Main"] = Gtk::Window.new(:toplevel)
		window = @windows["Main"]
		window.set_keep_above(true)
		window.set_title("Dead Man's Switch - #{checkname}")
		if @needed_values["Show Title"] == "Yes"
			window.set_decorated(true)
		else
			window.set_decorated(false)
		end
		window.move(@needed_values["Horizontal Position"], @needed_values["Vertical Position"])
		window.override_background_color(:normal, Gdk::RGBA.new((@needed_values["Window Red"] / 255.0), (@needed_values["Window Green"] / 255.0), (@needed_values["Window Blue"] / 255.0), 1.0))
		
		parent_grid = Gtk::Grid.new
		timer_grid = Gtk::Grid.new
		button_grid = Gtk::Grid.new
		parent_grid.attach(timer_grid, 0, 0, 1, 1)
		parent_grid.attach(button_grid, 0, 1, 1, 1)
		
		@timer_label = Gtk::Label.new("Timer:")
		@timer_label.override_font(Pango::FontDescription.new("#{@needed_values["Timer Font Size"]}"))
		timer_grid.attach(@timer_label, 0, 0, 1, 1)
		
		button_names = [ "Start", "Reset", "Settings" ]
		button_names.each{ |button_name| @buttons[button_name] = Gtk::Button.new(button_name) }

		column = -1
		@buttons.each{ |button_name,button| button_grid.attach(button, column += 1, 0, 1, 1) unless button_name == "Settings" }
		button_grid.attach(@buttons["Settings"], column += 1, 0, 1, 1) if (@needed_values["Show Settings"] == "Yes") || (@show_settings)
		
		@buttons["Settings"].signal_connect("clicked"){ create_settings_window }
		@buttons["Start"].signal_connect("clicked"){ start_the_timer }
		@buttons["Reset"].signal_connect("clicked"){
			if @timer_thread&.alive?
				@reset_button_clicked = true
				start_the_timer
			end
		}
		
		window.signal_connect("destroy"){
			@windows.each{ |name,win|
				@windows[name].close
				@windows[name] = nil
			}
			@timer_thread.kill if @timer_thread&.alive?
			Gtk.main_quit
			kill_script "DeadMansSwitch" if running? "DeadMansSwitch"
		}
		
		add_all_tooltips
		
		window.add(parent_grid)
		window.show_all
	end
	
	before_dying{ @windows["Main"].close if @windows["Main"] }
	
	create_settings_page
	
	save_settings if @load_data.nil?
end

Gtk.queue {
	DeadMansSwitchMain.variable = script.vars[1]
	DeadMansSwitchMain.create_main_window
	Gtk.main
}

sleep