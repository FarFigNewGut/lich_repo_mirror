#
#  name:        phaser
#  author:      Fizzleband
#  tags:        sorcerer, phase
#  version:     1.1
#    
#  description: This script will manage phasing/unphasing collected boxes.  
#               It will remember boxes that do not phase, and it will not re-attempt to phase them.
#
#  USAGE:
# 
#  ;phaser
#    This will "phase" the boxes in your phasing container(s).
#
#  ;phaser unphase
#    This will unphase the boxes in your phasing container(s).
#
#  ;phaser set containers=backpack,greatcloak
#    This will set your phasing containers.  Each container should be separated with a comma.
#    If no containers are set, ;phaser will attempt to use your lootsack (e.g. ;vars set lootsack=backpack).
#

mode = "phase"

before_dying {

}

show_help = proc {
    output = ";phaser handles phasing and unphasing boxes in your inventory.\n\n"
    output.concat "   USAGE: \n\n"
    output.concat "   ;phaser \n"
    output.concat "     This will \"phase\" the boxes in your phasing container(s).\n\n"
    output.concat "   ;phaser unphase\n"
    output.concat "     This will unphase the boxes in your phasing container(s).\n\n"
    output.concat "   ;phaser set containers=backpack,greatcloak\n"
    output.concat "     This will set your phasing containers.  Each container should be separated with a comma.\n"
    output.concat "     If no containers are set, ;phaser will attempt to use your lootsack (e.g. ;vars set lootsack=backpack). \n\n"
    respond output
}

def show_setup_error 
    puts "\n#{monsterbold_start} ******ERROR****** #{monsterbold_end}\n\n"

    output = " ;phaser requires one of the following to be set:\n\n"
    output.concat("    -loot sack\n")
    output.concat("      example command: ;vars set lootsack=backpack\n")
    output.concat("\n")
    output.concat("    -containers\n")
    output.concat("      example command: ;phaser set containers=backpack,greatcloak,satchel\n")
    respond output

    puts "\n#{monsterbold_start} ******ERROR****** #{monsterbold_end}\n\n"
end

def get_containers 
    values = Hash.new
    containers = Hash.new
    container_string = CharSettings["containers"]
    loot_sack = UserVars.lootsack
    
    if (container_string.to_s.strip.empty? && loot_sack.to_s.strip.empty?)
        show_setup_error.call
        exit
    elsif (!container_string.to_s.strip.empty?)
        split = container_string.split(",")
        split.each {|value|
            values[value] = value;
        }
    else
        value[loot_sack] = [loot_sack]
    end

    GameObj.inv.each {|item|

        if (!values[item.noun].nil?)
           containers[item.noun] = item

           # If container hasn't been looked in, 
           # look in it to populate the inventory object
           if (item.contents.nil?)
              fput "look in ##{item.id}"
           end
        end
    }

    return containers
end

def get_unphaseable_list() 

    unphaseable_list = CharSettings["unphaseable_list"]

    if unphaseable_list.nil?
        unphaseable_list = Hash.new
    end

    return unphaseable_list

end

def save_unphasable_list(containers, unphaseable_list)
    
    pruned_list = Hash.new

    containers.each { |key, container|  
        container.contents.each { |item|
            if (unphaseable_list[item.id]) 
                pruned_list[item.id] = item.id
            end
        }
    }

    CharSettings["unphaseable_list"] = pruned_list
end

def is_shifting(item) 
    return item.name.downcase.include?('shifting')
end

def is_phasable_box(item, unphaseable_list)
    return item.type == "box" &&
    !is_shifting(item) &&
    !item.name.downcase.include?('enruned') && 
    !item.name.downcase.include?('mithril') &&
    unphaseable_list[item.id].nil?
end

def is_phased_box(item) 
    return item.type == "box" && 
    is_shifting(item)
end

def handlePhaseResult(item, unphaseable_list) 
    while(line = get)
        if (line.include?('resists the effects of your magic!'))
            unphaseable_list[item.id] = item.id
            break
        elsif (line.include?('becomes momentarily insubstantial but quickly returns to normal.'))
            unphaseable_list[item.id] = item.id
            break
        elsif (line.include?('becomes momentarily insubstantial and appears lighter.'))
            break
        end
    end
end

def phase_boxes (containers, unphaseable_list)

    containers.each { |key, container|  

        container.contents.each { |item|

            if (is_phasable_box(item, unphaseable_list))
                echo "found phasable box: #{item.name}(#{item.id})"
                wait_until {Spell[704].affordable?}
                waitcastrt?
                multifput "prep 704", "cast at ##{item.id}"
                handlePhaseResult(item, unphaseable_list)
            end
        }
     }
end

def unphase_boxes (containers)

    containers.each { |key, container|  
        
        container.contents.each { |item|
            
            if (is_phased_box(item))
                multifput "get ##{item.id} from ##{container.id}", "drop ##{item.id}", "put my #{item.noun} in ##{container.id}"
                pause 
            end
        }
    }
end


if (script.vars[1]=='help')
    show_help.call
    exit
elsif (script.vars[1]=='set') and (script.vars[0] =~ /^set containers=\s*(.+)/)
    value=$1.strip
    CharSettings["containers"]=value
    echo "containers set to: #{value}"
    exit
elsif (script.vars[1]=='clear')
    CharSettings["containers"]=nil
    exit
elsif (script.vars[1]=='unphase')
    mode = "unphase"
end

containers = get_containers()
unphaseable_list = get_unphaseable_list()

if (mode == "phase")
    phase_boxes(containers, unphaseable_list)
elsif (mode == "unphase")
    unphase_boxes(containers)
end

save_unphasable_list(containers, unphaseable_list)
exit
