=begin

	Welcome to whatsold! This script will allow you to save your shop contents remotely and then check to see if they've changed, 
	which is to mean an item was sold or pulled. 
	
	Author: Licel

=end

ItemLine = Struct.new(:Itemname, :price, :quantity, :new)

ITEM_LINE_FORMAT = /\d*\)\s(.*)for\s*(.*)\ssilver(\s*|\s\*\sNew!)\z/
ITEM_LINE_FORMAT_WITH_QUANTITY = /\d*\)\s(.*)for\s*(.*)\ssilver\s\((\d*)\savailable\)(\s*|\s\*\sNew!)/

def parse_itemline(line)
	line.match(ITEM_LINE_FORMAT) { |l| ItemLine.new(*l.captures)}
end

def parse_itemline_quantity(line)
	line.match(ITEM_LINE_FORMAT_WITH_QUANTITY) { |l| ItemLine.new(*l.captures)}
end

def Separate_Items(itemline)
	itemArray = itemline.split(/\|/)
	itemArray.shift()
	temp = []
	for item in itemArray
		temp.push(item.match(/(.*),(.*),(.*)/) { |l| ItemLine.new(*l.captures)})
	end
	

	returnArray = []
	for item in temp
		found = temp.select {|i| i.Itemname == item.Itemname and i.price == item.price}
		alreadythere = returnArray.select {|i| i.price == item.price and i.Itemname == item.Itemname}
		if alreadythere.length == 0
			runningCount = 0 
			for item in found
				runningCount += item.quantity.to_i
			end
			returnArray.push(ItemLine.new(item.Itemname,item.price,runningCount))
		end
	end
	return returnArray 
end

def Print_Items(items)
	for i in items
		echo i.Itemname + " FOR " + i.price + " (" + i.quantity.to_s + ")"
	end
end

if(script.vars[1] =~ /^help$/)
	echo "Welcome to #{script.name}!"
	echo "This script has some setup: "
	echo "Try: ;#{script.name} town solhaven"
	echo "Try: ;#{script.name} shopname Licel"
	echo "Once that is setup, just run ;#{script.name} snapshot"
	echo "To view your snapshot item list, ;#{script.name} viewsnapshot"
	echo "To compare current inventory to snapshot to see what sold, simply ;#{script.name}"
	exit
end
if(script.vars[1] =~ /^debug$/)
	echo CharSettings['shopitems']
	exit
end
if(script.vars[1] =~ /^viewsnapshot$/)
	Print_Items(Separate_Items(CharSettings['shopitems']))
	exit
end
if(script.vars[1] =~ /^reset$/)
	CharSettings['shopitems'] = nil
	CharSettings['shoptown'] = nil
	CharSettings['shopname'] = nil
	echo "Settings reset!"
	exit
end

if(script.vars[1] =~ /^town$/)
	CharSettings['shoptown'] = script.vars[2]
	echo "Town saved!"
	exit
end

if(CharSettings['shoptown'].nil?)
	echo "You must set your town to use this script!" 
	echo "Try: ;#{script.name} town solhaven"
	echo "Acceptable town names: landing, teras, solhaven, river, icemule, zul, illistim, ta'vaalor, mist"
	exit
end

if(script.vars[1] =~ /^shopname$/)
	CharSettings['shopname'] = script.vars[2]
	echo "Shop name saved!"
	exit
end

if(CharSettings['shopname'].nil?)
	echo "You must set your shop name to use this script!" 
	echo "Try: ;#{script.name} shopname Licel"
	echo "Try: ;#{script.name} shopname Licel's magic shoppe"
	echo "Try: ;#{script.name} shopname Enchantment Emporium"
	exit
end

fput "shop directory " + CharSettings['shoptown']

while(true)  
	test = get.downcase
	if(test =~ /(\d*)\)\s*#{CharSettings['shopname'].downcase}/) 
		shopnum = $1
		break;
	end
	
	if(test =~ /you can use the shop browse/)
		echo "Hmmm. That shop name was bad. Please try again with another shopname."
		echo "Try: ;#{script.name} shopname Licel"
		exit
	end
	if(test =~ /unknown town specified./)
		CharSettings['shoptown'] = nil
		echo "Hmmm. That town name was bad. Please try saving with a name that works with SHOP DIRECTORY."
		echo "Try: ;#{script.name} town solhaven"
		exit
	end
end

fput "shop browse "+ CharSettings['shoptown'] + " " + shopnum

shopitems = ""
while(true)
	textline = get
	if(textline =~ ITEM_LINE_FORMAT) 
		item = parse_itemline(textline)
		shopitems += "|" + item.Itemname + ","+ item.price.gsub(/[\s|\,]/ ,"") + ",1"
	end
	
	if(textline =~ ITEM_LINE_FORMAT_WITH_QUANTITY) 
		item = parse_itemline_quantity(textline)
		shopitems += "|" + item.Itemname + ","+ item.price.gsub(/[\s|\,]/ ,"") + "," + item.quantity
	end
	
	if(textline =~ /get details about a particular shop item/)
		break;
	end
	if(textline =~ /That is not a valid shop number for that town./)
		abort!
	end
end

if(script.vars[1] =~ /^snapshot$/ || !CharSettings['shopitems'] || script.vars[1] =~ /^save$/)
	CharSettings['shopitems'] = shopitems
	echo "Your shop contents have been saved! "
	echo "Next time you run the script, I'll compare with these contents and tell you what has sold or been pulled."
	echo "You can reset the snapshot with ;#{script.name} snapshot." 
	exit
end

shoparray = Separate_Items(shopitems)
savedarray = Separate_Items(CharSettings['shopitems'])
inventoryItemsChanged = []

for saved in savedarray
	found = false
	for shop in shoparray
		if(saved.Itemname == shop.Itemname and saved.price == shop.price and saved.quantity != shop.quantity)
			inventoryItemsChanged.push(ItemLine.new(saved.Itemname,saved.price,saved.quantity.to_i - shop.quantity.to_i))
			found = true
		end
		if(saved.Itemname == shop.Itemname and saved.price == shop.price and saved.quantity == shop.quantity)
			found = true;
		end 
	end
	if found == false
		inventoryItemsChanged.push(ItemLine.new(saved.Itemname,saved.price,saved.quantity))
	end
end

pause 0.1 
solditems = inventoryItemsChanged.select {|i| i.quantity.to_i > 0}
addedItems = inventoryItemsChanged.select {|i| i.quantity.to_i < 0}

if(solditems.length > 0) 
	echo "Congratulations! The following items have sold since your last snapshot:"
	Print_Items(solditems)
	totalValueSold = 0 
	for item in solditems
		totalValueSold += item.quantity.to_i * item.price.to_i
	end
	echo "TOTAL VALUE: " + totalValueSold.to_s + "!"
	echo "AFTER TAX  : " + (totalValueSold * 0.97).to_i.to_s + "!"
else
	echo "No new items sold since last snapshot."
end
if(addedItems.length > 0) 
	echo "The following items have been added to the shop since your last snapshot:"
	addedItems = addedItems.each {|i| i.quantity = i.quantity * -1}
	Print_Items(addedItems)
else
	echo "No additions to inventory since last snapshot."
end