module HAT
  silence_me
  CMD_QUEUE = Queue.new
  UPSTREAM_HOOK_ID = "#{Script.current.name}_upstream_hook"

  def self.initialize
    # Globals ... bleh
    $hat_players ||= {}
    $hat_player_questions = {}
    $hat_question_queue = Queue.new
    $hat_processing_questions = false
    $hat_question_timeout = 0
    $hat_converse_time = 120
    $hat_halt = false
    @debug = true

    @enrollment_time = 60
    @question_time = 300
    @answer_time = 20

    @entry_fee = 100000
    @pot = 1000000
    @pot_increase = 100000
    @bank = Char.name

    @base_lie_chance = 0.5
    @lie_increase_per_stack = 0.2
    @eliminated_players = []
    @round = 1

    @@symbols = ["Deadman's Plank", "Frigate", "Jolly Roger", "Treasure Chest"]

    @@roshambo_results = Regexp.union( /\.\.\.(\w+) wins!/, /\.\.\.You win!/, /\.\.\.It's a tie!/ )
    @@roshambo_choice = ["rock", "paper", "scissors"]
    @@roshambo_quips = [
      "Yuh prefer a hand game ova a roll? Wha's next, knittin' wid seaweed?",
      "Aye, yuh think a slap 'n a stomp be more daring than di toss of di dice? Yuh as daft as a two-headed coin!",
      "Yuh call dat a gamble? I seen sea urchins wid more spine than yuh feeble roshambo!",
      "Choosin' roshambo, are yuh? Might as well be playin' hopscotch wid a mermaid!",
      "Yuh got di courage of a jellyfish, settlin' fi a hand game instead of rollin' di bones!",
      "Arrr, yuh rather play patty-cake dan tempt fate? Yuh makin' me bilge water boil!"
    ]
    @@dice_quips = [
      "Aye, yuh got di spirit of a true sailor-tekkin' chances like a captain pon di open sea!",
      "Rollin' di dice, eh? Yuh got more guts dan a kraken inna tavern brawl!",
      "Smart choice, bredren! A roll of di bones show yuh know how fi dance wid fate!",
      "Yuh got di heart of a treasure hunter, always chasin' fortune an' glory!",
      "Aye, I see yuh favor di thrill of chance! Yuh bold like a ship inna storm!",
      "Rollin' dem dice be a true sign of a sea dog! Yuh know how fi tempt di tides of fate!"
    ]
    @@rules = [
      "At the beginning of each round, the Purloiner (that's ME) assigns each player one of 4 symbols;- Treasure Chest, Frigate, Jolly Roger, Deadman's Plank. My job as the Purloiner is to fairly and;unfairly run the game. I assign your symbols, but you're not told what that symbol is.",
      "A player cannot ask me what their own symbol is. Players must use their wit to discover it on their own.;A player can ask me about another player's symbol. Before I answer, you must play me in a game of chance.;If you win, you have passed the Krakens test, and I am obligated to provide a truthful answer.;If you lose, then you have activated the kraken, and there is no guarantee the answer I provide is truthful.;Afterall, there is no Honor Among Thieves.",
      "I will whisper the answer to the asking player. Players will take turns asking me about another player's symbol.;You may only ask about 1 player at a time but can ask about multiple players in the same round.;Each question asked requires you to play the game of chance and pass the test of the Kraken.",
      "Since you don't know your symbol, you can ask another player. Maybe your friend tells you the truth,;or maybe your friend lies right to your face. Hopefully, at the end of the round you have an idea of what;your symbol is. When asked, you tell me your symbol, and I tell you whether you are right or wrong.;If you correctly identify your own symbol, you move onto the next round. If not, you are eliminated.",
      "For each round that a player is not eliminated the community prize does not increase. Subsequently,;each time a player is eliminated the community prize pot increases. A standard round time is 8 minutes.;However, this may randomly change throughout the game. The game is played for 60 minutes.;There can be only ONE winner. If all players are eliminated before the 60-minute period is up,;or the 60-minute period ends with more than one player remaining, the pot rolls over to the;next time the game is played."
    ]
    @@recap =
      "I assign you a symbol but don't tell you.;I announce the round starts, the 5-minute countdown begins.;You ask the purloiner about other players and play the game of chance.;At the end of the round, I'll ask you to state your symbol. If you get it right, you move on. If you guess your symbol wrong, you are eliminated.;After everyone attempts to guess their symbol, the next round starts.;If someone is eliminated, then the community prize pot goes up. If no one is eliminated the pot does not grow in value."
    @@welcome = [
      "Welcome one and all to the second annual game of, \"Honor Among Thieves\" brought to you be the fine folks of Krakens Fall and the Kraken Collective.; ;When it comes to pirate's treasure, can you trust your closest ally? \"Honor Among Thieves\" is a game of luck, trust, and deception that pits ally against ally and encourages the untrusted to be trusted.",
      "The premise: At the beginning of each round, the Purloiner assigns each player one of 4 symbols - Treasure Chest, Frigate, Jolly Roger, Deadman's Plank. The player is not told what that symbol is. At the end of the round, the player must declare to the Purloiner what their symbol is. If the player correctly identifies their own symbol, they move onto the next round. If not, they are eliminated.",
      "A player is not allowed to ask the Purloiner what their own symbol is but can ask to know the symbol of another player. Players remaining at the end of the game are winners and split the community prize pot. With a little luck, you might find \"Honor Among Thieves\".; ;Let me break down the rules of the game in more detail"
    ]
    @@round_end_quip = [
      "Jah crew be as loyal as di landlubber in di storm!",
      "I've seen mir trust in di pack'a scallywags in di treasure unt!",
      "Dese swabs be sellin dir own modah fir a barrel o'rum!",
      "Mi sooner trust a rattlesnake in mi ammock!",
      "Dems words be as empty as a shipwrecked hull!",
      "Better to sail wit a ghost den ta trust dese ere bilge rats!",
      "Dis crew be as loyal as a lost one in di desert, mon!",
      "I seen more trust in a ganja leaf blowin'in di wind, y'know?",
      "These vibes be so shady, they'd sell out their own mama for a spliff!",
      "I'd sooner trust a snake inna mi garden, mon!",
      "Their words be as empty as a dry river, mi friend!",
      "Better to sail solo with Jah than trust these wicked souls!"
    ]

  end

  def self.with_commas(str)
    str.to_s.reverse
       .gsub(/(\d{3})(?=\d)/, '\\1,')
       .reverse
  end

  def self.format_player_list(players)
    case players.size
    when 0
      ""
    when 1
      players[0]
    else
      players[0..-2].join(", ") + " and " + players[-1]
    end
  end

  def self.recite_rules(pause)
    @@rules.each { |rule|
      fput "recite #{rule}"
      sleep(pause)
    }
    Lich::Messaging.msg("info", "rules complete")
  end

  def self.recite_welcome(pause)
    @@welcome.each { |line|
      fput "recite #{line}"
      sleep(pause)
    }
    Lich::Messaging.msg("info", "welcome complete")
  end

  def self.report_pot
    fput("recite The pot is up to #{with_commas(@pot)} silvers!")
  end

  def self.help
    help = [
      "welcome <#>           : recite the opening spiel. (# is pause duration between lines in seconds)",
      "rules <#>             : recite the rules. (# is pause duration between lines in seconds)",
      "recap                 : recite a quick rule recap",
      "enroll                : enroll players (starts the game, resets all players)",
      "assign symbols        : assign symbols to players (announces symbols have been assigned)",
      "assign symbols silent : reassign symbols to players without announcement (if you feel symbol distribution is bad)",
      "report symbols        : game report for purloiner eyes only",
      "start questions       : allow players to ask you what other players symbols are",
      "stop questions        : stop the question phase early.",
      "ask symbols           : ask each player what their symbol is",
      "end round             : eliminate players, announce pount, prepare for next round. (assign symbols to start next round)",
      "report pot            : announce the current pot amount.",
      "set bank <person>     : currently set to #{@bank}. (whom holds the money. Only used to tell them who to pay entry fee to)",
      "set entry fee <#>     : currently set to #{with_commas(@entry_fee)}. (amount to pay to play. ENTRY FEE NOT TRACKED BY SCRIPT)",
      "set pot <#>           : currently set to #{with_commas(@pot)}. (starting pot)",
      "set pot increase <#>  : currently set to #{with_commas(@pot)}. (amount pot increases per elimination)",
      "set enroll time <#>   : currently set to #{@enrollment_time} seconds. (time enrollment phase lasts)",
      "set question time <#> : currently set to #{@question_time} seconds. (time question phase lasts)",
      "set converse time <#> : currently set to #{@converse_time} seconds. (time after question for players to ask each other)",
      "set answer time <#>   : currently set to #{@answer_time} seconds. (time player has to respond to purloiner)"
      ]
      help.each { |line| respond(line) }
  end

  def self.enroll
    $hat_players = {}
    fput("recite With the pleasantries out of the way, let's begin playing, Honor Among Thieves. Those wishing to play must pay the 100k entry fee. Please RAISE your HAND and give your #{HAT.with_commas(@entry_fee)} silver to #{@bank}. You will have #{@enrollment_time} seconds to join the game. Which amongst us has the courage and wits to be the most dis... I mean honorable of thieves?")

    timeout = Time.now + @enrollment_time
    players = []
    while Time.now < timeout
      line = get?
      if line =~ /(\w+) raises (?:his|her|their) hand./
        player = $1.downcase
        unless $hat_players.key?(player)
          $hat_players[player] = { symbol: "none", truth: false, kraken: 0}
          Lich::Messaging.msg("info", "#{$1} added to players.")
          players.append(player.capitalize)
        end
      end
    end

    @pot += @entry_fee * players.count

    fput("recite Registration has closed! No more entries are allowed for this session of, Honor Among Thieves. Good luck!")
    sleep(3)
    if $hat_players.empty?
      Lich::Messaging.msg("warn", "No players enrolled. Try again.")
    else
      fput("recite #{format_player_list(players)} have registered to play. Who among them will have honor and who will be deceitful. Our starting pot is now at #{@pot}.")
      Lich::Messaging.msg("info", "Enter assign symbols to assign the players symbols.")
    end
  end

  def self.assign_symbols(silent = false)
    $hat_players.each do |player, data|
      data[:symbol] = @@symbols.sample
      data[:truth] = false
      data[:kraken] = 0
      data[:questions] = 0
    end
    fput("recite The kraken knows your fate! Will the kraken honor you with truth? Look amongst you to these fellow thieves. Can your mates be trusted, do they have honor?  Let's find out! The symbols have been assigned!") unless silent
    report_symbols
    Lich::Messaging.msg("info", "Enter start questions to begin the question phase.")
  end

  def self.report_symbols
    if $hat_players.empty?
      Lich::Messaging.msg("info", "No players found. Please enroll again to play.")
      return
    end
    longest_player_name = [$hat_players.keys.map(&:length).max + 3, 'Player'.length + 3].max
    rows = []
    $hat_players.each do |player,data|
      rows << [
        player.capitalize.ljust(longest_player_name), 
        data[:symbol].ljust(16),
        data[:truth],
        data[:kraken],
      ]
    end
    table = Terminal::Table.new :headings => ['Player', 'Symbol', 'Truth', 'Kraken'], :rows => rows
    Lich::Messaging.mono(table.to_s)
    Lich::Messaging.msg("warn", "Current Round: #{@round}, Pot Size: #{@pot}")
  end

  def self.process_questions
    Lich::Messaging.msg("warn", "Process question thread started.") if @debug
    $hat_processing_questions = true
    while !$hat_question_queue.empty? || Time.now < $hat_question_timeout
      if !$hat_question_queue.empty?
        question = $hat_question_queue.pop
        Lich::Messaging.msg("warn", "Processing question: #{question[:asker]} asks about #{question[:target]}.") if @debug
        $hat_player_questions.delete(question[:asker]) # Allow new questions from this player
        HAT.initiate_game(question[:asker], question[:target])
      else
        sleep(0.5) # Wait for more questions
      end
      break if $hat_halt
    end
    $hat_processing_questions = false
    #fput("recite All questions have been answered. Let's see who has honor among thieves!")
    Lich::Messaging.msg("info", "Process question thread ended.") if @debug
  end  

  def self.initiate_game(asker, target)
    result = Lich::Util.issue_command("whisper #{asker} Would you like to play dice or roshambo?", /You.*?whisper to #{asker}/i, /#{asker.capitalize} whispers\, \".*?(dice|roshambo).*?\"/i, include_end: true, timeout: @answer_time, silent: false, usexml: false, quiet: false)
    matched_whisper = result.find { |line| line =~ /#{asker.capitalize} whispers\, \".*?(dice|roshambo).*?\"/i }

    if matched_whisper =~ /dice/i
      game = "dice"
    elsif matched_whisper =~ /roshambo/i
      game = "roshambo"
    elsif matched_whisper
      Lich::Messaging.msg("warn", "Unexpected game choice from #{asker}: #{full_response}")
      return
    else
      Lich::Messaging.msg("warn", "#{asker.capitalize} did not give a proper response.")
      return
    end

    case game
    when /roshambo/i
      fput("say ::#{asker} #{@@roshambo_quips.sample}")
      sleep(rand(2))
      HAT.initiate_roshambo(asker, target)
    when /dice/i
      fput("say ::#{asker} #{@@dice_quips.sample}")
      sleep(rand(2))
      HAT.initiate_dice(asker, target)
    end
    return
  end

  def self.initiate_dice(asker, target)
    purloiner_roll = 0
    asker_roll = 0

    result = Lich::Util.issue_command("roll dice", /You scoop up the dice/, /The dice bounce a few times and come to rest on \d and \d./, include_end: true, timeout: 3, silent: false, usexml: false, quiet: false)
    matched_result = result.find { |line| line =~ /The dice bounce a few times and come to rest on (\d) and (\d)\./ }

    if matched_result =~ /The dice bounce a few times and come to rest on (\d) and (\d)\./
      purloiner_roll = $1.to_i + $2.to_i
    else
      Lich::Messaging.msg("warn", "roll result unknown:: #{result.join("\n")}")
      return
    end
    fput("say ::#{asker} You hafta beat #{purloiner_roll} mon. The dice bi on the ground, jah nah ave ta pick dem up, just roll dem mon.")

    timeout = Time.now + @answer_time
    roll_action_found = false
    while Time.now < timeout
      line = get

      if !roll_action_found && line =~ /#{asker.capitalize} scoops up the dice, gives them a good shake, and rolls them on the floor./i
        roll_action_found = true
        next
      end

      if roll_action_found && line =~ /The dice bounce a few times and come to rest on (\d+) and (\d+)./
        asker_roll = $1.to_i + $2.to_i
        break
      end
    end

    unless roll_action_found && asker_roll > 0
      Lich::Messaging.msg("warn", "error matching asker roll. :: #{asker}")
      return
    end
    
    if purloiner_roll >= asker_roll
      $hat_players[asker][:kraken] += 1
      fput("say ::#{asker} The Kraken gets its due! You lose this round.")
    elsif asker_roll > purloiner_roll
      $hat_players[asker][:truth] = true
      fput("say ::#{asker} Luck is on your side, mon! You win this round.")
    else
      Lich::Messaging.msg("warn", "error, no match:: purloiner #{purloiner_roll} vs asker #{asker_roll}")
    end
    HAT.reveal_symbol(asker, target)
    return
  end

  def self.initiate_roshambo(asker, target)
    result = Lich::Util.issue_command("roshambo #{asker} #{@@roshambo_choice.sample}", /You hold your hand out towards #{asker.capitalize}/, @@roshambo_results, include_end: true, timeout: 45, silent: false, usexml: false, quiet: false)
    matched_result = result.find { |line| line =~ @@roshambo_results }
    if matched_result =~ /\.\.\.#{asker.capitalize} wins!/
      $hat_players[asker][:truth] = true
    elsif matched_result =~ /\.\.\.You win!/
      $hat_players[asker][:kraken] += 1
      Lich::Messaging.msg("bold", "Kraken engaged for #{asker.capitalize} with a stack of #{$hat_players[asker][:kraken]}.") if @debug
    elsif matched_result =~ /\.\.\.It's a tie!/
      $hat_players[asker][:kraken] += 1
      Lich::Messaging.msg("bold", "Kraken engaged for #{asker.capitalize} with a stack of #{$hat_players[asker][:kraken]}.") if @debug
    else
      Lich::Messaging.msg("bold", "#{asker.capitalize} did no respond to your request for Roshambo.")
    end
    HAT.reveal_symbol(asker, target)
    return
  end

  def self.reveal_symbol(asker, target)
    if $hat_players[asker][:truth]
      $hat_players[asker][:truth] = false
      fput("whisper #{asker} #{target.capitalize}'s symbol is #{$hat_players[target][:symbol]}.")
    else
      lie_chance = [ ( @base_lie_chance + @lie_increase_per_stack * $hat_players[asker][:kraken].to_i ), 1 ].min
      correct_symbol = $hat_players[target][:symbol]
      wrong_symbols = @@symbols - [correct_symbol]
      if rand < lie_chance
        chosen_symbol = wrong_symbols.sample
      else
        chosen_symbol = correct_symbol
      end
      fput("whisper #{asker} #{target.capitalize}'s symbol is #{chosen_symbol}.")
    end
    return
  end

  def self.ask_player_for_symbol(player)
    @@wrong_answer = [
      "I and I see, your friend led yuh down di wrong path, man! Di real treasure be #{$hat_players[player][:symbol]}...",
      "Rasta, hear dis! Your bredren just pulled a fast one, givin' yuh di wrong info! Di truth is #{$hat_players[player][:symbol]}...",
      "I and I feel it in di vibes! Your friend just played yuh like a fool, seen? Di right answer is #{$hat_players[player][:symbol]}...",
      "No worries, my friend! Looks like yuh got bamboozled by your mate! Di real answer #{$hat_players[player][:symbol]}... let's keep it movin'!",
      "Whoa, brother! Your friend just took yuh for a ride! Di truth be #{$hat_players[player][:symbol]}... let's find di real deal!",
      "By Jah, your friend just earned di title of Captain Confusion! Di right answer is #{$hat_players[player][:symbol]}... let's spread di truth, my man!",
    ]
    @@right_answer = [
      "Jah bless! You hit di jackpot, my friend! Di answer be right on point!",
      "And di crown for Symbol Champion goes to... yuh! Yuh got it right, seen?",
      "Listen up, I have a correct answer in di deck! Di answer be correct—big up yourself!",
      "Irie, raise di ganja flag high! Yuh nailed it, my bredren! Right answer all di way!",
      "Bing, bing, bing! We have a correct answer, bless up! Yuh just leveled up in di game!",
      "I and I say, respect! Yuh got it right, seen? Jah is shining on your knowledge today!"
    ]

    correct_symbol = $hat_players[player][:symbol].downcase.gsub(/'s\b/, '').strip
    correct_keywords = correct_symbol.split(/[^a-zA-Z0-9]+/)
    incorrect_keywords = @@symbols.reject { |symbol| symbol.casecmp?(correct_symbol) }
                                  .map { |symbol| symbol.downcase.gsub(/'s\b/, '') }
                                  .flat_map { |symbol| symbol.split(/[^a-zA-Z0-9]+/) }

    fput("say ::#{player} Tell me #{player.capitalize} what is your symbol?")

    timeout = Time.now + @answer_time
    answer = nil
    while Time.now < timeout
      line = get?
      if line =~ /^(?:Speaking(?: \w+ )? to you, )?#{player.capitalize}[^"]+\"([^"]+).\"/
        answer = $1.downcase.gsub(/'s\b/, '').strip
        answer_keywords = answer.split(/[^a-zA-Z0-9]+/)

        if incorrect_keywords.any? { |word| answer_keywords.any? { |ans| ans.include?(word) } }
          @eliminated_players.append(player.downcase)
          fput("say ::#{player} #{@@wrong_answer.sample}")
          return
        end
        
        if correct_keywords.any? { |word| answer_keywords.any? { |ans| ans.include?(word) } }
          fput("say ::#{player} #{@@right_answer.sample}")
          return
        end

        puts "DEBUG: No clear match found for answer: '#{answer}'" # Debugging
      end

    end
    
    if answer.nil?
      Lich::Messaging.msg("bold", "#{player.capitalize} did not respond to your request.")
    else
      Lich::Messaging.msg("bold", "#{player.capitalize}'s response '#{answer}' did not match any expected symbols.")
    end
    @eliminated_players.append(player.downcase)
    fput("say ::#{player} #{@@wrong_answer.sample}")
  end

  def self.ask_symbols
    $hat_players.each do |player, _data|
      HAT.ask_player_for_symbol(player)
      sleep(3)
    end
    Lich::Messaging.msg("info", "Enter end round to continue.")
  end

  def self.end_round
    if @eliminated_players.any?
      eliminated_names = @eliminated_players.map(&:capitalize).join(", ")
      fput("recite The following players have been eliminated: #{eliminated_names}")
      sleep(2)
      @pot += @pot_increase * @eliminated_players.size
      fput("recite The pot grows richer with their sacrifice! Grand prize is now #{HAT.with_commas(@pot)} silver!")

      @eliminated_players.each do |player|
        $hat_players.delete(player)
      end
      @eliminated_players.clear
    else
      fput("recite No one was eliminated this round. The pot remains at #{HAT.with_commas(@pot)} silver!")
    end

    $hat_players.each do |player, data|
      data[:kraken] = 0
    end

    if $hat_players.size == 1
      winner = $hat_players.keys.first.capitalize
      fput("recite The game is over! Congratulations to #{winner}, the last one standing!;#{winner} claims the grand prize of #{HAT.with_commas(@pot)} silver! Well done!;Thank you all for playing. Until next time!")
      return # Exit the method to avoid proceeding further
    end

    if $hat_players.empty?
      fput("recite All players have been eliminated! The Kraken claims victory!")
      sleep(2)
      fput("recite The pot of #{HAT.with_commas(@pot)} silver rolls over to the next game.")
    end
    sleep(4)
    fput("recite This brings the round to an end. Those moving on, you may not be so lucky next time. Those who were eliminated, #{@@round_end_quip.sample}")

    @round += 1
    Lich::Messaging.msg("info", "Enter assign symbols to start next round.")
  end

  def self.execute(cmd)
    case cmd
    when "enroll"
      HAT.enroll
    when "assign symbols"
      HAT.assign_symbols
    when "assign symbols silent"
      HAT.assign_symbols(true)
    when "report symbols"
      HAT.report_symbols
    when "start questions"
      $hat_halt = false
      $hat_question_timeout = Time.now + @question_time
      Script.start("hat_queue")
      Thread.new do
        HAT.process_questions
      end
    when "stop questions"
      $hat_halt = true
    when "ask symbols"
      Thread.new do
        HAT.ask_symbols
      end
    when "end round"
      HAT.end_round

    # rules
    when "help"
      HAT.help
    when /welcome (\d+)/
      HAT.recite_welcome($1.to_i)
    when /rules (\d+)/
      HAT.recite_rules($1.to_i)
    when "recap"
      fput "recite #{@@recap}"
    when /report pot/
      fput("recite The pot is up to #{with_commas(@pot)} silvers!")
    # settings
    when /set bank (\w+)/
      @bank = $1.capitalize if checkpcs.include?($1)
      Lich::Messaging.msg("info", "#{@bank} is now the bank.")
    when /set entry fee (\d+)/
      @entry_fee = $1.to_i
      Lich::Messaging.msg("info", "Entry fee is now #{with_commas(@entry_fee.to_s)}.")
    when /set pot (\d+)/
      @pot = $1.to_i
      Lich::Messaging.msg("info", "Pot now starting at #{with_commas(@pot.to_s)}")
    when /set pot increase (\d+)/
      @pot_increase = $1.to_i
      Lich::Messaging.msg("info", "Pot will increase by #{with_commas(@pot_increase.to_s)}")
    when /set enroll time (\d+)/
      @enroll_time = $1.to_i
      Lich::Messaging.msg("info", "Enrollment period will last for #{@enroll_time} seconds." )
    when /set question time (\d+)/
      @question_time = $1.to_i
      Lich::Messaging.msg("info", "Question period will last for #{@question_time} seconds.")
    when /set answer time (\d+)/
      @answer_time = $1.to_i
      Lich::Messaging.msg("info", "Player response time will timeout after #{@answer_time} seconds.")
    when /set converse time (\d+)/
      $hat_converse_time = $1.to_i
      Lich::Messaging.msg("info", "Players will have #{$hat_converse_time} seconds to ask each other their symbols.")
    end
  end

  initialize
  before_dying { kill_script("hat_queue") if running?("hat_queue")}

  UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
    if command =~ /<c>enroll/
      CMD_QUEUE.push("enroll")
      nil
    elsif command =~ /<c>assign symbols?/
      CMD_QUEUE.push("assign symbols")
      nil
    elsif command =~ /<c>assign symbols silent/
      CMD_QUEUE.push("assign symbols silent")
      nil
    elsif command =~ /<c>report symbols?/
      CMD_QUEUE.push("report symbols")
      nil
    elsif command =~ /<c>start questions?/
      CMD_QUEUE.push("start questions")
      nil
    elsif command =~ /<c>stop questions?/
      CMD_QUEUE.push("stop questions")
      nil
    elsif command =~ /<c>ask symbols/
      CMD_QUEUE.push("ask symbols")
      nil
    elsif command =~ /<c>end round/
      CMD_QUEUE.push("end round")
      nil
    # rules
    elsif command =~ /<c>help hat/
      CMD_QUEUE.push("help")
      nil
    elsif command =~ /<c>welcome (\d+)/
      CMD_QUEUE.push("welcome #{$1}")
      nil
    elsif command =~ /<c>rules (\d+)/
      CMD_QUEUE.push("rules #{$1}")
      nil
    elsif command =~ /<c>recap/
      CMD_QUEUE.push("recap")
      nil
    # settings
    elsif command =~ /<c>set bank (\w+)/
      CMD_QUEUE.push("set bank #{$1}")
      nil
    elsif command =~ /<c>set entry fee (\d+)/
      CMD_QUEUE.push("set entry fee #{$1}")
      nil
    elsif command =~ /<c>set pot (\d+)/
      CMD_QUEUE.push("set pot #{$1}")
      nil
    elsif command =~ /<c>set pot increase (\d+)/
      CMD_QUEUE.push("set pot increase #{$1}")
      nil
    elsif command =~ /<c>set enroll time (\d+)/
      CMD_QUEUE.push("set enroll time #{$1}")
      nil
    elsif command =~ /<c>set question time (\d+)/
      CMD_QUEUE.push("set question time #{$1}")
      nil
    elsif command =~ /<c>set converse time (\d+)/
      CMD_QUEUE.push("set converse time #{$1}")
      nil
    elsif command =~ /<c>set answer time (\d+)/
      CMD_QUEUE.push("set answer time #{$1}")
      nil
    elsif command =~ /<c>report pot/
      CMD_QUEUE.push("report pot")
      nil
    else
      command
    end
  end)

  # a little loopy loop to keep us moving
  loop do
    unless CMD_QUEUE.empty?
      cmd = CMD_QUEUE.pop
      CMD_QUEUE.clear
      HAT.execute(cmd)
    end
    sleep 0.5
  end
end


# don't accept I'll give up as an answer for their symbol.
# I think removing the break fixed this.

# Erienne says, "I see where it goes back and forth between Honor Among Thieves and Honor Amongst Thieves."
# should be fixed, 2 players I think amongst fit, as it's not the game name.

# Wyrmheart raspily says, "For example.....You hafta beat 7 mon. The dice bi on the ground, jah nah ave ta pick dem up, just roll dem mon."
# done

# add entry fee's to pot
# done

# Wyrmheart raspily says, "In that last recite, before the sentence "Players remaining...." - Let's add a sentence that says something like "you can ask other players to tell you what your symbold is."
# tell them to converse for 2 minutes after question time finishes.

# need to fix syntax issues on questions
# done hopefully

# report pot
# done

# stop questions early..
# done




# added ability to stop question phase early.. stop questions .. you will want to .. set converse time <#> .. to the approriate time or you will stop the questions early but still have 2 minutes to converse.

# set converse time <#>   - time players have to ask each other, after asking purloiner phase ends.
# report pot  .. to report the pot!