=begin
  Recount.lic is a ttk tracker, to be expanded later.
  Tracks when you see and target something, it's death, and any cast/round time you're under.
  Compares cast/round time to death time and considers death time to be when you get out of cast/round time.
  If you do not target first, it will use the see time to determine when the engagement started. Denoted by estimate.

  ;eq Recount.generate_ttk_report         report of ttk for last 15 minutes.
  ;eq Recount.generate_ttk_report(60)     report of ttk for last hour. Any number in minutes available.
  
    author: Nisugi
		  game: Gemstone
		  tags: hunting, data collection
	   version: 0.0.1
	   
  v0.0.1 alpha
    tracks ttk

=end


module Recount
  class Pattern
    # Hooks
    UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"
    DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
    
    NPC = %r{<pushBold/>(?:a|an|the) <a exist="(?<id>\d+)" noun="(?<noun>\w+)">(?<name>[^<]+)</a><popBold/>}
    TARGET = %r{You are now targeting <pushBold/>(?:a|an|the) <a exist="(?<id>\d+)" noun="(?<noun>\w+)">(?<name>[^<]+)</a><popBold/>.}
    ROUNDTIME = %r{<roundTime value='(\d+)'/>}
    CASTTIME = %r{<castTime value='(\d+)'/>}

    DEATH_CRY = Regexp.union(
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a final scream and goes still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> falls back into a heap and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> screams up at the heavens, then collapses and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> screams one last time and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> screeches one last time and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> crumples to the ground and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> falls to the ground and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> falls to the ground motionless},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> rolls over and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> rolls over on the floor and goes still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a final scream and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a final agonized squeal and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a final agonized squeal and goes still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> tenses in agony as .+? begins to dissolve from the bottom up},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> tail twitches feebly as .+? dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses, gurgling once with a wrathful look on .+? face before expiring},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses, gurgling once with a wrathful look on .+? face},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> gurgles once and goes still, a wrathful look on .+? face},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> face begins to hideously contort as ribbons of essence begin to wend away from .+? and into nothingness},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> tenses in agony as .+? begins to dissolve from the bottom up},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> struggles to utter a final prayer, then goes still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses to the ground, emits a final squeal, and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> tail twitches feebly as she dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a blood-curdling roar and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses heavily into a heap on the ground and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses to the ground, emits a final sigh, and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a final agonized sigh and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses, gurgling once with a wrathful look on his face before expiring},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> rolls over on its back, emits a final hiss and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> kicks a leg one last time and lies still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses into a pile of hair and bones and goes still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> drops to the ground and shudders a final time},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses to the floor, dead as a pickled herring},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> collapses heavily into a heap on the ground and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> emits a final hiss and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> arches its back in a tortured spasm and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> cries out in cold agony one last time and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> shudders a final time and goes still},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> lets out a final caterwaul and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> gasps a final prayer, then falls to the ground dead},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> clacks its pincers a final agonizing time and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> growls one last time in defiance, then slumps to the ground},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> stumbles and falls to the ground, twitches and dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> horn dims, and .+? falls to the ground dead},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> body goes stiff and cold as .+? dies.},
      %r{<pushBold/><a exist="(?<id>\d+)" noun="\w+">[^<]+</a><popBold/> goes limp and .+? falls over as the fire slowly fades from .+? eyes}
    )
  end

  $recount ||= {}
  $recount['casttime'] = 0
  $recount['roundtime'] = 0

  downstream_proc = proc do |server_string|
    if server_string =~ Pattern::NPC
      server_string.scan(Pattern::NPC) do |id, noun, name|
        saw = Time.now.to_i
        unless $recount.key?(id)
          $recount[id]        ||= {}
          $recount[id][:noun] ||= noun
          $recount[id][:name] ||= name
          $recount[id][:saw]  ||= saw
        end
      end
    end
  
    case server_string
    when Pattern::ROUNDTIME
      $recount['roundtime'] = $1.to_i
    when Pattern::CASTTIME
      $recount['casttime'] = $1.to_i
    when Pattern::TARGET
      match = server_string.match(Pattern::TARGET)
      $recount[match[:id]][:targetted] ||= Time.now.to_i
    
      # put death_cry at bottom?
    when Pattern::DEATH_CRY
      match = server_string.match(Pattern::DEATH_CRY)
      $recount[match[:id]][:death]      ||= Time.now.to_i
      $recount[match[:id]][:roundtime]  ||= $recount['roundtime']
      $recount[match[:id]][:casttime]   ||= $recount['casttime']
    end

    server_string
  end

  # create our hook
  DownstreamHook.add(Pattern::DOWNSTREAM_HOOK_ID, downstream_proc)
  before_dying { DownstreamHook.remove(Pattern::DOWNSTREAM_HOOK_ID) }


  def self.generate_ttk_report(time_range = 15)
    current_time = Time.now.to_i
    min_time = current_time - (time_range * 60) # Convert minutes to seconds
  
    report_data = []
  
    $recount.each do |id, data|
      next unless data.is_a?(Hash) && data[:death] && data[:death] >= min_time
  
      # Correctly determine death time
      death_time = data[:death]
      death_time = data[:roundtime] if data[:roundtime] && data[:roundtime] > death_time
      death_time = data[:casttime] if data[:casttime] && data[:casttime] > death_time
  
      # Determine start time (prefer :targetted, fallback to :saw)
      start_time = data[:targetted] || data[:saw]
      ttk = death_time - start_time
  
      # Only add "estimate" if :targetted is missing (nil)
      ttk_str = data[:targetted].nil? ? "#{ttk} (estimate)" : ttk.to_s
  
      # Collect formatted data for the report
      report_data << [id, data[:name] || "Unknown", ttk_str]
    end
  
    # Output the report
    if report_data.empty?
      puts "No kills recorded in the last #{time_range} minutes."
      return
    end
  
    puts "\nTime to Kill Report (Last #{time_range} minutes):"
    puts "--------------------------------------------------"
    puts format("%-10s %-30s %s", "ID", "Name", "TTK (sec)")
    puts "--------------------------------------------------"
    report_data.each { |row| puts format("%-10s %-30s %s", *row) }
    puts "--------------------------------------------------\n"
  end
  
  
  # keeps script alive.
  loop do
    sleep(60)
  end
end