# vim: set ft=ruby:
=begin

    SpiffyHeal by SpiffyJr (spiffyjr@gmail.com)
    
    There are no checks for lower level empaths. I'd suggest being level 14 or higher
    before using it.
    
    ;sheal help for details
    
     author: spiffyjr
      email: theman@spiffyjr.me
       name: SpiffyHeal
       tags: empath
    version: 1.0

=end

unless Char.prof == 'Empath'
    echo "-- This script is only for empaths!"
    exit
end

unless Char.maxhealth >= 80
    echo "-- I will not run with less than 80 health"
    echo "-- You can remove this check but do so at your own risk!"
    exit
end

settings = CharSettings.to_hash
settings['leave-wounds']     ||= 0
settings['leave-scars']      ||= 1
settings['heal-blood']       ||= true
settings['healdown-xp']      ||= true
settings['healdown-always']  ||= false
settings['healdown-herbs']   ||= false
settings['use-trolls-blood'] ||= true
settings['heal-voluntarily'] ||= true
settings['imprint']          ||= true

$sheal_imprints ||= []
$sheal_imprint_timers ||= {}

# cleanup expired folks
$sheal_imprints.delete_if { |name| !$sheal_imprint_timers[name] or Time.now.to_i > $sheal_imprint_timers[name] }
$sheal_imprint_timers.delete_if { |name, time| Time.now.to_i > time }

hook = proc { |server_string|
    set_timer = proc { |name, minutes = 60|
        $sheal_imprint_timers[name.downcase.strip] = Time.now.to_i + (minutes * 60)
    }

    add_imprint = proc { |name|
        name = name.downcase.strip 
        
        if not $sheal_imprints.include?(name)
            $sheal_imprints.push(name)
        end

        if not $sheal_imprint_timers[name]
            set_timer.call(name)
        end
    }

    if server_string =~ /You do not have any active imprints at the moment\./
        $sheal_imprints = []
    elsif server_string =~ /You close your eyes and reach out with your mind, searching for your spiritual presence throughout the land.../
        $sheal_imprints = []
    elsif server_string =~ /With focused effort, you split off a portion of your spirit and reach out to (\w+)/
        add_imprint.call($1.to_s)
    elsif server_string =~ /Though you have recently imprinted (\w+) with your spirit, you cannot sense them/
        add_imprint.call($1.to_s)
    elsif server_string =~ /Through your spiritual connection you sense (\w+).../
        add_imprint.call($1.to_s)
    elsif server_string =~ /Your connection to (\w+) is too weak to sense their current state\./
        add_imprint.call($1.to_s)
    elsif server_string =~ /Through the lingering resonance of your healing bond with <a exist="[^"]+" noun="(\w+)">[^<]+<\/a>, you (?:attempt to )?imprint/
        name = $1.to_s
        if server_string =~ /attempt/
            set_timer.call(name)
        else
            add_imprint.call(name)
        end
    elsif server_string =~ /An unknown force prevents you from sensing the current state of (\w+)\./
        add_imprint.call($1.to_s)
    elsif server_string =~ /A nebulous wisp of your own spirit separates from your body and darts away, seeking <a exist="[^"]+" noun="(\w+)">[^<]+<\/a>.  Almost immediately,/
        add_imprint.call($1.to_s)
    elsif server_string =~ /<a exist="[^"]+" noun="(\w+)">[^<]+<\/a>, but the connection fails to establish properly\./i
        set_timer.call($1.to_s)
    elsif server_string =~ /You must wait about (\d+) more minutes? before attempting to imprint <a exist="[^"]+" noun="(\w+)">[^<]+<\/a> again./i
        set_timer.call($2.to_s, $1.to_i)
    elsif server_string =~ /You recall your spiritual presence from (\w+)\./
        $sheal_imprints.delete($1.to_s.downcase.strip)
    end

    server_string
}

DownstreamHook.add('SHeal', hook)

cast_trolls_blood = proc { 
    next if not settings['use-trolls-blood'] or not Spell[1125].known? or Spell[1125].active?
    
    if Spell[1125].affordable?
        Spell[1125].cast(nil)
    else
        echo "-- insufficient mana for Troll's blood, skipping"
    end
}

get_target_injuries = proc { |target, imprint = false|
    target = target.downcase.strip
    injuries = []
    
    if imprint
        res = dothistimeout "imprint check #{target}", 1, /Your connection to #{target} is too weak|Through your spiritual connection you sense #{target}[^.]*.../i

        if res =~ /too weak/
            echo '** connection is to weak to heal target'
            exit
        end

        if res.nil?
            echo '** you are not imprinting that target'
            exit
        end

        injuries = res.scan(/\s+((?:left |right )?\w+) (?:scar|injury)/).flatten()
    else
        script.want_downstream_xml = true
        script.want_downstream = false
        script.downstream_buffer.clear

        waitrt?
        put "appraise #{target}"

        lines = []

        start = Time.now.to_f

        while true
            line = get?

            if line =~ /Appraise what?/
                echo '** failed to appraise target, did they leave?'
                exit
            elsif line =~ /You take a quick apparaisal/
                lines.push(line)
            elsif Skills.mltransference >= 50 and line =~ /<\/a> has/
                lines.push(line)
            elsif Time.now.to_f - start >= 3.00
                break
            elsif lines.length > 0 and line =~ /<prompt/
                break
            end

            sleep 0.25
        end

        script.want_downstream_xml = false
        script.want_downstream = true

        injuries = []

        lines.each { |line| 
            injuries = injuries + line.scan(/((?:right |left )?(?:hand|arm|face|leg|chest|abdominal|eye|back|neck|head|convulsions|twitching|developed slurred speech))(?: area| trauma and bleeding from the ears)?(?:,| and|\.$)/).flatten()
        }
    end

    if injuries.length == 0
        echo '** target is in perfect health'
        exit
    end

    injuries.map { |injury| 
        if injury =~ /convulsions|twitching|developed slurred speech/
            'nerves'
        elsif injury =~ /abdominal/
            'abdomen'
        elsif injury =~ /face/
            'head'
        else
            injury
        end
    }.uniq
}

get_cure_spell = proc { |area, type|
    unless [:wound,:scar].include?(type)
        echo "** invalid type (#{type}), expected :wound or :scar"
        exit
    end
    
    if area =~ /arm|hand|leg/
        type == :wound ? 1102 : 1111
    elsif area =~ /nsys/
        type == :wound ? 1103 : 1112
    elsif area =~ /head|neck/
        type == :wound ? 1104 : 1113
    elsif area =~ /abdomen|back|chest|eye/
        type == :wound ? 1105 : 1114
    end
}

heal_blood = proc {
    cast_trolls_blood.call()
    
    while health? <= 80 or percenthealth < 51
		if mana?((maxhealth - health?) / 10)
			fput "cure"
			
			waitcastrt?
			waitrt?
		elsif checkmana(1)
		    fput "cure blood"
        else
            echo "-- waiting on mana for blood before continuing"
            wait_until { checkmana(1) }
        end
	end
}

heal_down = proc {
    cast_trolls_blood.call()
    
    if settings['healdown-herbs']    
        start_script('useherbs', nil, { :quiet => true });
        wait_while { running?('useherbs'); }
        
        next
    end
    
    heal_injuries = proc { |injuries, type|
        injuries.each { |area, data|
            if area =~ /(left|right)(\w+)/
                area = "#{$1} #{$2.downcase}"
            end
            
            spell = Spell[get_cure_spell.call(area, type)]
            
            if not spell.affordable?
                echo "-- need mana, waiting..."
                wait_until { spell.affordable? }
            end
            
            spell.cast()
            waitcastrt?
            waitrt?
        }
    }

    while not (wounds = XMLData.injuries.dup.delete_if { |k, v| v['wound'] == 0 or ((v['wound'] <= settings['leave-wounds'] and Scars.send(k) <= settings['leave-scars']) and (not settings['healdown-xp'] or not ['head', 'nsys'].include?(k) or (v['wound'] <= 1 and Scars.send(k) <= 1))) }.sort_by { |k, v| v['wound'] }.reverse).empty?
        heal_blood.call()
        heal_injuries.call(wounds, :wound)
    end
    
    while not (scars = XMLData.injuries.dup.delete_if { |k,v| v['scar'] == 0 or (v['scar'] <= settings['leave-scars'] and (not settings['healdown-xp'] or not ['head', 'nsys'].include?(k) or v['scar'] <= 1)) }.sort_by { |k, v| v['scar'] }.reverse).empty?
        heal_injuries.call(scars, :scar)
    end
    
    heal_blood.call()
}

heal_target = proc { |target, imprint = false|
    target = target.downcase.strip

    cast_trolls_blood.call()
    get_target_injuries.call(target, imprint).each { |injury|
        res = dothistimeout "transfer #{target} #{injury}", 1, /reaching out to him|As you probe the wound|gradually fades|You close your eyes/

        if res =~ /As you probe the wound/ and settings['heal-voluntarily']
            dothistimeout "transfer #{target} #{injury}", 1, /reaching out to him/
        end
    }
    
    if not imprint and settings['heal-blood']
        res = nil
        while res !~ /Nothing|You take all|from whom?/
            heal_blood.call()
            res = dothistimeout "transfer #{target}", 1, /Nothing happens|You take (?:some|all)|from whom?/
        end
    end
}

imprint_target = proc { |target|
    target = target.downcase.strip

    if $sheal_imprints.include?(target)
        echo 'target already imprinted'
    elsif $sheal_imprint_timers[target]
        echo 'target is still in cooldown'
    else
        fput "imprint #{target}"
    end
}

if script.vars[1] =~ /^--/
    if script.vars[1] =~ /^--(leave-wounds|leave-scars)=(0|1|2|3)$/i
        settings[$1] = $2.to_i
    elsif script.vars[1] =~ /^--(heal-voluntarily|imprint|heal-blood|healdown-xp|healdown-always|healdown-herbs|use-trolls-blood|use-trolls-blood)=(on|off)$/i
        settings[$1] = $2 == 'on' ? true : false
    else
        echo "-- you're doing it wrong!"
        exit
    end
    
    echo "-- setting #{$1} set to #{$2}"
elsif script.vars[1] =~ /^list$/i
    settings.each { |key, value| echo "#{key}: #{value.to_s}" }
elsif script.vars[1] =~ /^help$/i
    respond
    respond
    respond 'SpiffyHeal by SpiffyJr (theman@spiffyjr.me)'
    respond
    respond "  To heal yourself: ;#{script.name}"
    respond "  To heal a target: ;#{script.name} <target>"
    respond "  To heal an imprinted target when heal doesn't work: ;#{script.name} imprint <target>"
    respond "  To see current settings: ;#{script.name} list"
    respond "  To see imprint status: ;#{script.name} imprint check"
    respond 
    respond "Other options:"
    respond "  ;#{script.name} --leave-wounds=<0-3>          the rank to heal wounds down to (default: 0)"
    respond "  ;#{script.name} --leave-scars=<0-3>           the rank to heal scars down to (default: 1)"
    respond "  ;#{script.name} --heal-blood=<on/off>         if turned on will heal the targets blood (default: on)"
    respond "  ;#{script.name} --heal-voluntarily=<on/off>   if turned on will heal targets even if the wound was voluntarily inflicted (default: on)"
    respond "  ;#{script.name} --healdown-xp=<on/off>        if turned on always heals down head/nerves for xp (default: on)"
    respond "  ;#{script.name} --healdown-herbs=<on/off>     will healdown using the ;useherbs script (default: off)"
    respond "  ;#{script.name} --healdown-always=<on/off>    healdown wounds after healing a target (default: off)"
    respond "  ;#{script.name} --use-trolls-blood=<on/off>   if turned on this script will try to keep troll's blood active (default: on)"
    respond "  ;#{script.name} --imprint=<on/off>            if turned on you will attempt to imprint the target after healing them (default: on)"
    respond
    respond
elsif script.vars[1] == 'imprint' or script.vars[1] == 'i'
    if script.vars[2] == 'check' or script.vars[2] == 'c'
        if $sheal_imprints.length > 0 
            echo "You are currently imprinting the following people:"
            $sheal_imprints.each { |person|
                echo " * #{person}"
            }
        else
            echo "You are not currently imprinting anyone."
        end

        respond

        if $sheal_imprint_timers.keys.length > 0 
            echo "You have imprint cooldowns for the following people:"
            $sheal_imprint_timers.each { |name, time|
                left = (time - Time.now.to_i) / 60
                echo " * #{name}, #{left} mins"
            }
        else
            echo "You have no imprint cooldowns remaining."
        end
    else
        heal_target.call(script.vars[2], true)
        heal_down.call() if settings['healdown-always']
    end
elsif script.vars[1]
    target = nil
    imprinted = false

    if t = GameObj.pcs.find { |pc| pc.name =~ /#{script.vars[1]}/i }
        target = t.noun
    elsif t = $sheal_imprints.find { |t| t =~ /#{script.vars[1]}/i }
        target = t
        imprinted = true
    else
        echo "** target (#{script.vars[1]}) could not be found"
        exit
    end
    
    heal_target.call(target, imprinted)

    if settings['imprint']
        imprint_target.call(target) 
    end

    heal_down.call() if settings['healdown-always']
else
    heal_down.call()
end
