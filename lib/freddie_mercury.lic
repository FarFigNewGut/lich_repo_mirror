=begin
Will sing to an item and record it's abilities in CSV format to your lich folder. Be sure to hold the item in your RIGHT hand and ;freddie.

You can also use foreach to loop through a whole container - ;for any in chest;get item; ;freddie; move item to kit
=end

require 'csv'
require 'timeout'

class LoreSinger
  TIMEOUT = 30
  FILENAME = 'loresinger_results.csv'
  HEADERS = ['Item Description', 'Item Name', 'Wear Location', 'Enhancive Persistence', 'Magic Persistence', 'Imbedable', 'Charges', 'Magical Effects']
  
  LORESONG_REGEX = /As you sing|Your music surrounds/
  ROUNDTIME_REGEX = /Roundtime:/
  FAILED_RESONANCE_REGEX = /As you sing, you feel a faint stirring .+ that fades, as if your song had somehow failed to resonate with it properly\./
  ALREADY_LORESANG_REGEX = /Your music surrounds .+, but it simply resonates with what you previously learned\./
  
  ITEM_DESCRIPTION_REGEX = /You sense that the (\w+\s\w+)/
  ENHANCIVE_PERSISTENCE_REGEX = /You sense that the .+ will (crumble|persist) .+ enhancive charge/
  MAGIC_PERSISTENCE_REGEX = /You sense that the .+ will (crumble|persist) .+ magical charge/
  MAGICAL_EFFECT_REGEX = /It provides a boost of (\d+) to (.+)\./
  WEAR_LOCATION_REGEX = /worn (on|around) the (.+)\.$/
  IMBEDABLE_REGEX = /The magical strength of this item is strong\.  It could probably handle the imbedding of an entirely new spell/
  CHARGES_REGEX = /looks to have (.+) charges remaining/
  
  HELD_ITEMS_REGEX = /\b(shield|staff|sword|dagger|mace|axe|hammer)\b/i

  def initialize
    @item_attributes = {
      description: '',
      name: '',
      wear_location: '',
      enhancive_persistence: '',
      magic_persistence: '',
      imbedable: 'No',
      charges: '',
      magical_effects: []
    }
  end

  def start
    pause 1
    @item_attributes[:name] = checkright
    fput "speak bard"
    result = dothistimeout "loresing #{@item_attributes[:name]} it will be helpful for me to know,;What ability within will you now show?", 5, LORESONG_REGEX
    
    if result =~ ALREADY_LORESANG_REGEX
      echo "Item already loresang. Using RECALL instead."
      fput "recall #{@item_attributes[:name]}"
    end
    
    wait_for_response
    process_response
    save_to_csv
    
    fput "speak common"
  end

  def wait_for_response
    @response = []
    Timeout.timeout(TIMEOUT) do
      loop do
        line = get
        @response << line
        
        case line
        when ROUNDTIME_REGEX
          return
        when FAILED_RESONANCE_REGEX
          echo "Loresong failed to resonate with the item."
          return
        when ALREADY_LORESANG_REGEX
          echo "Item already loresang. No new information."
          return
        end
      end
    end
  rescue Timeout::Error
    echo "Loresong timed out after #{TIMEOUT} seconds."
  end

  def process_response
    return if @response.empty?

    regex_actions = {
      ITEM_DESCRIPTION_REGEX => ->(match) { @item_attributes[:description] = match[1] },
      ENHANCIVE_PERSISTENCE_REGEX => ->(match) { @item_attributes[:enhancive_persistence] = match[1] },
      MAGIC_PERSISTENCE_REGEX => ->(match) { @item_attributes[:magic_persistence] = match[1] },
      MAGICAL_EFFECT_REGEX => ->(match) { @item_attributes[:magical_effects] << "#{match[2]}: +#{match[1]}" },
      WEAR_LOCATION_REGEX => ->(match) { @item_attributes[:wear_location] = "#{match[1]} #{match[2]}" },
      IMBEDABLE_REGEX => ->(_) { @item_attributes[:imbedable] = 'Yes' },
      CHARGES_REGEX => ->(match) { @item_attributes[:charges] = match[1] }
    }

    @response.each do |line|
      regex_actions.each do |regex, action|
        match = regex.match(line)
        action.call(match) if match
      end
    end

    determine_wear_location if @item_attributes[:wear_location].empty?
    
    if @item_attributes[:magical_effects].empty? && @item_attributes[:enhancive_persistence].empty? && @item_attributes[:magic_persistence].empty?
      echo "No useful information found for this item."
    end
  end

  def determine_wear_location
    @item_attributes[:wear_location] = @item_attributes[:name] =~ HELD_ITEMS_REGEX ? 'held' : 'worn'
  end

  def save_to_csv
    return if @item_attributes.values.all?(&:empty?)

    file_exists = File.exist?(FILENAME)
    CSV.open(FILENAME, "a") do |csv|
      csv << HEADERS unless file_exists
      csv << @item_attributes.values_at(:description, :name, :wear_location, :enhancive_persistence, :magic_persistence, :imbedable, :charges, :magical_effects).map { |v| v.is_a?(Array) ? v.join("; ") : v }
    end

    echo "Results appended to #{FILENAME}"
  end
end

sing = LoreSinger.new
sing.start