=begin
Version: 0.6.0

Description
This script automates the process of loresinging items in GemStone IV.
It captures detailed information about enhancive items, weapons, and saves the results to a CSV file.

Current Status
This version (0.6.0) includes improved handling for weapons and attempts to recall before loresinging.
It handles basic loresinging for most enhancive items and weapons, but may not cover all edge cases.
Bug fixes and feature additions are ongoing.

Usage
- Make sure you have the item you want to loresing in your right hand.
- Make sure the CSV file is closed.
- Run the script with: ;freddie_mercury
- Use ;foreach to loop through an entire container
EXAMPLE ;foreach any in backpack; get item; ;freddie; put item in backpack

The script will
1. Get the item's details using the 'glance' command
2. Inspect the item to determine its wear location or weapon type
3. Attempt to recall the item's information
4. If recall fails, perform a loresong
5. Save the results to a CSV file named 'loresinger_results.csv'

Planned Features:
- Improved handling for armor
- Bug fixes for various edge cases

Changelog
10/05/2024 - 0.5.0 - Initial release with basic loresinging functionality
10/06/2024 - 0.6.0 - Added weapon handling and recall attempt before loresinging
=end

require 'csv'
require 'timeout'

class LoreSinger
  TIMEOUT = 1
  FILENAME = 'loresinger_results.csv'
  HEADERS = ['Item Name', 'Wear Location', 'Weapon Type', 'Weapon Bonus', 'Weight', 'Value', 'Material', 'Modification Difficulty', 'Enhancive Persistence', 'Magic Persistence', 'Imbedable', 'Charges', 'Magical Effects', 'Spells', 'Magic Resistance', 'Loresong']
  
  REGEX = {
    loresong: /As you sing|Your music surrounds|you feel a faint resonating vibration/,
    roundtime: /Roundtime:/,
    failed_resonance: /As you sing, you feel a faint stirring .+ that fades, as if your song had somehow failed to resonate with it properly\./,
    already_loresang: /Your music surrounds .+, but it simply resonates with what you previously learned\./,
    item_description: /You sense that the (.+?) (?:will|contains|resonates|looks)/,
    enhancive_persistence: /(?:You sense that the|It) .+ will (crumble|persist) .+ (?:enhancive|last) charge/,
    magic_persistence: /(?:You sense that the|It) .+ will (crumble|persist) .+ (?:magical|last) charge/,
    magical_effect: /It provides a boost of (\d+) to (.+?)(?: (?:Base|Ranks|Bonus))?\.(?:\s+This enhancement may not be used by adventurers who have not trained (\d+) times\.)?/,
    imbedable: /The magical strength of this item is strong\.  It could probably handle the imbedding of an entirely new spell/,
    charges: /(?:looks to have|seems to have|has) (.+?) (?:charges|enhancive charges) remaining/,
    spell_content: /contains the spell (.+), from the (.+) circle/,
    inspect_anywhere: /You determine that you could wear the .+ anywhere on your body/,
    inspect_neck: /You determine that you could wear the .+ around your neck/,
    inspect_ear: /You determine that you could wear the .+, hanging it from your ear/,
    inspect_wear_location: /You determine that you could wear the .+ (?:on|around) your (.+)\./,
    permanently_unlocked: /Its loresong has been permanently unlocked by a bard\./,
    weight: /It (?:is|appears to weigh about) (a .+|.+ pounds?)\./,
    value: /It is estimated to be worth about ([\d,]+) silvers\./,
    magic_resistant: /It is magic resistant\./,
    glance: /You glance down to see (.+) in your right hand/,
    weapon_type: /After a careful inspection you determine that .+ requires skill in (\w+) to use effectively\./,
    weapon_bonus: /It imparts a bonus of \+(\d+) more than usual\./,
    material: /It is predominantly crafted of (.+)\./,
    modification_difficulty: /It is a (simple|moderate|challenging|extremely difficult) project \((\d+) difficulty\) for an adventurer to modify\./,
    recall: /As you recall .+, you feel a faint resonating vibration/,
    must_reveal: /You must reveal the entire loresong of the .+ before you can unlock it\./
  }

  CHARGE_MAPPING = {
    "one" => 1,
    "few" => 2,
    "several" => 3,
    "fair" => 6,
    "quite" => 10,
    "lot" => 15,
    "dwarf" => 25,
    "giantman" => 25,
    "huge" => 40,
    "innumerable" => 75
  }

  def initialize
    @item_attributes = {
      name: '', # This will be the single-word noun
      full_name: '', # This will be the full description
      wear_location: '',
      enhancive_persistence: '',
      magic_persistence: '',
      imbedable: 'No',
      charges: '',
      magical_effects: [],
      spells: [],
      weight: '',
      value: '',
      magic_resistance: 'No',
      loresong: '',
      weapon_type: '',
      weapon_bonus: '',
      material: '',
      modification_difficulty: ''
    }
    @response = []
  end

  def start
    prepare_for_loresong
    inspect_item
    perform_loresong
    save_to_csv
    fput "speak common"
  rescue SystemExit
    echo "Script terminated."
  end

  private

  def prepare_for_loresong
    pause 1
    get_item_details
    wait_until { checkmana > 20 }
    fput "speak bard"
  end

  def get_item_details
    @item_attributes[:name] = checkright
    result = dothistimeout "glance", 5, REGEX[:glance]
    if result =~ REGEX[:glance]
      @item_attributes[:full_name] = $1
    else
      @item_attributes[:full_name] = @item_attributes[:name]
      echo "Unable to get detailed item name from glance. Using checkright result for full name."
    end
  end

  def perform_loresong
    if attempt_recall
      echo "Recall successful. Skipping loresong."
    else
      echo "Recall unsuccessful. Attempting loresong."
      result = sing_loresong
      handle_loresong_result(result)
    end
    process_response
  end

  def attempt_recall
    fput "recall #{@item_attributes[:name]}"
    result = wait_for_response
    if result.any? { |line| line =~ REGEX[:recall] }
      true
    elsif result.any? { |line| line =~ REGEX[:must_reveal] }
      echo "Loresong not yet revealed. Proceeding to loresing."
      false
    else
      echo "Recall unsuccessful. Attempting loresong."
      false
    end
  end

  def sing_loresong
    fput "loresing #{@item_attributes[:name]} it will be helpful for me to know,;What ability within will you now show?"
    wait_for_response
    @response.join("\n")
  end

  def wait_for_response
    @response = []
    Timeout.timeout(TIMEOUT) do
      loop do
        line = get
        @response << line
        break if line =~ REGEX[:roundtime]
      end
    end
    @response
  rescue Timeout::Error
    echo "Response timed out after #{TIMEOUT} seconds."
    @response
  end

  def handle_loresong_result(result)
    if result =~ REGEX[:already_loresang]
      echo "Item already loresang. Exiting"
      exit
    elsif result =~ REGEX[:loresong] || result =~ REGEX[:roundtime]
      echo "Loresong complete."
    elsif result =~ REGEX[:cannot_loresing]
      echo "Cannot loresing this item. Ending script."
      exit
    else
      echo "Unexpected response for loresong. Continuing."
    end
  end

  def process_response
    return if @response.empty?

    full_loresong = []
    capture = false

    @response.each do |line|
      if line.include?("What ability within will you now show?")
        capture = true
        next
      end
      if line =~ REGEX[:roundtime]
        capture = false
        break
      end
      full_loresong << line if capture

      process_line(line)
    end

    @item_attributes[:loresong] = full_loresong.join("\n").strip

    echo "No useful information found for this item." if no_useful_information?
  end

  def process_line(line)
    regex_actions.each do |regex, action|
      match = regex.match(line)
      action.call(match) if match
    end
  end

  def regex_actions
    {
      REGEX[:item_description] => ->(match) { @item_attributes[:description] = match[1] },
      REGEX[:enhancive_persistence] => ->(match) { @item_attributes[:enhancive_persistence] = match[1] },
      REGEX[:magic_persistence] => ->(match) { @item_attributes[:magic_persistence] = match[1] },
      REGEX[:magical_effect] => ->(match) { 
        effect = "#{match[2]}: +#{match[1]}"
        effect += " (#{match[3]} ranks)" if match[3]
        @item_attributes[:magical_effects] << effect
      },
      REGEX[:charges] => ->(match) { 
        charge_desc = match[1]
        @item_attributes[:charges] = map_charges(charge_desc)
      },
      REGEX[:imbedable] => ->(_) { @item_attributes[:imbedable] = 'Yes' },
      REGEX[:spell_content] => ->(match) { @item_attributes[:spells] << "#{match[1]} (#{match[2]})" },
      REGEX[:weight] => ->(match) { @item_attributes[:weight] = match[1] },
      REGEX[:value] => ->(match) { @item_attributes[:value] = match[1] },
      REGEX[:magic_resistant] => ->(_) { @item_attributes[:magic_resistance] = 'Yes' },
      REGEX[:weapon_type] => ->(match) { @item_attributes[:weapon_type] = match[1] },
      REGEX[:weapon_bonus] => ->(match) { @item_attributes[:weapon_bonus] = match[1] },
      REGEX[:material] => ->(match) { @item_attributes[:material] = match[1] },
      REGEX[:modification_difficulty] => ->(match) { 
        @item_attributes[:modification_difficulty] = "#{match[1]} (#{match[2]})"}
    }
  end

  def map_charges(charge_description)
    CHARGE_MAPPING.each do |key, value|
      if charge_description.include?(key)
        return "#{key} (#{value})"
      end
    end
    charge_description  # Return original description if no match found
  end

  def inspect_item
    result = dothistimeout "inspect #{@item_attributes[:name]}", 5, /#{REGEX[:inspect_anywhere]}|#{REGEX[:inspect_neck]}|#{REGEX[:inspect_ear]}|#{REGEX[:inspect_wear_location]}|#{REGEX[:weapon_type]}/
    if result =~ REGEX[:inspect_anywhere]
      @item_attributes[:wear_location] = "anywhere"
    elsif result =~ REGEX[:inspect_neck]
      @item_attributes[:wear_location] = "neck"
    elsif result =~ REGEX[:inspect_ear]
      @item_attributes[:wear_location] = "ear"
    elsif result =~ REGEX[:inspect_wear_location]
      @item_attributes[:wear_location] = result.match(REGEX[:inspect_wear_location])[1]
    elsif result =~ REGEX[:weapon_type]
      @item_attributes[:wear_location] = "weapon"
      @item_attributes[:weapon_type] = result.match(REGEX[:weapon_type])[1]
    else
      @item_attributes[:wear_location] = "unknown"
    end
  end

  def no_useful_information?
    @item_attributes[:magical_effects].empty? && 
    @item_attributes[:enhancive_persistence].empty? && 
    @item_attributes[:magic_persistence].empty? &&
    @item_attributes[:spells].empty? &&
    @item_attributes[:weapon_type].empty?
  end

  def save_to_csv
    return if @item_attributes.values.all?(&:empty?)

    CSV.open(FILENAME, File.exist?(FILENAME) ? "a" : "w") do |csv|
      csv << HEADERS unless File.size?(FILENAME)
      csv << prepare_data_row
    end

    echo "Results saved to #{FILENAME}"
  end

  def prepare_data_row
    @item_attributes.values_at(:full_name, :wear_location, :weapon_type, :weapon_bonus, :weight, :value, :material, :modification_difficulty, :enhancive_persistence, :magic_persistence, :imbedable, :charges, :magical_effects, :spells, :magic_resistance, :loresong).map { |v| v.is_a?(Array) ? v.join("; ") : v }
  end
end

sing = LoreSinger.new
sing.start