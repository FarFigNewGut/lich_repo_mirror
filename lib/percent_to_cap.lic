=begin
author: Lucullan
date: 11/8/2024

  This script will tell you how far your are along to capping, in a raw percentage.


  usage:
    ;percent_to_cap

=end

class ExperienceMonitor
  def initialize
    @last_checked = nil
    @cached_exp = [0, 0]
    @total_experience = 0
    @experience = 0
    @exp_at_cap = 7572500
    @ascension_experience = 0
    get_exp(true)
  end

  def get_exp(force = false)
    if @last_checked && (Time.now - @last_checked) < 15 && !force
      return @cached_exp
    end

    res = Lich::Util.quiet_command_xml("exp", /<output class="mono"\/>/, /<prompt time=/)
    res.each do |line|
      # Capture both Total Experience and Field Exp in the same line if available
      if line =~ /Experience:\s+([\d,]+)\s+Field Exp:\s+([\d,]+)\/([\d,]+)/i
        @experience = $1.delete(',').to_i
        field_current = $2.delete(',').to_i
        field_max = $3.delete(',').to_i
        @cached_exp = [field_current, field_max]
        @last_checked = Time.now
      elsif line =~ /Experience:\s+([\d,]+)/i
        @experience = $1.delete(',').to_i
        @last_checked = Time.now
      elsif line =~ /Field Exp:\s+([\d,]+)\/([\d,]+)/i
        field_current = $1.delete(',').to_i
        field_max = $2.delete(',').to_i
        @cached_exp = [field_current, field_max]
        @last_checked = Time.now
      elsif line =~ /Ascension Exp:\s+([\d,]+)/i
        @ascension_experience = $1.delete(',').to_i
      elsif line =~ /Total Exp:\s+([\d,]+)/i
          @total_experience = $1.delete(',').to_i
      end
    end
    return @cached_exp
  end

  def get_true_percentage(force = false)
    field_current, field_max = get_exp(force)
    return field_current.to_f / field_max.to_f
  end

  def get_percentage_display
    field_current, field_max = get_exp
    return "%.2f%%" % ((field_current.to_f / field_max.to_f) * 100)
  end

  def get_total_experience
    return @total_experience
  end

  def get_display_percentage
    return "%.2f%%" % ((@experience.to_f / @exp_at_cap.to_f) * 100)
  end

  def get_experience
    return @experience
  end

  def get_ascension
    return @ascension_experience
  end

  def message(type = "info", text)
    # color options - set type to use
    # yellow, orange, teal, green, plain

    return if type == "debug"

    if text.class == Hash
      text = text.inspect.gsub("#<", "#")
    elsif text.class == Array
      text = text.to_s
    elsif text.class == String
      text = text.gsub("#<", "#")
    end

    Lich::Messaging.msg(type, text)
  end
end
exp_mon = ExperienceMonitor.new
exp_mon.message("*************************")
exp_mon.message("*************************")
exp_mon.message("You have #{exp_mon.get_experience} experience")
exp_mon.message("Progress to cap: #{exp_mon.get_display_percentage}")
exp_mon.message("Ascension Experience: #{exp_mon.get_ascension}")
exp_mon.message("If you converted your Ascension Experience to regular experience, you would have #{exp_mon.get_total_experience}")
exp_mon.message("putting you at #{exp_mon.get_total_display_percentage} to cap")
exp_mon.message("*************************")
exp_mon.message("*************************")
