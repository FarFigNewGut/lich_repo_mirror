=begin

  Shattered Bounty Parsing Script

   authors: Tykus
      game: Gemstone
      tags: shattered, bounties, adventurer guild, advguild
   version: 0.1
  requried: Lich >= 4.6.54

  changelog:
    0.1 (20-03-16):
      Initial creation of script based on previously created community script

      
  Note: shat_bounty_parser is meant to be run on startup and remain running. It will recognize when there is a change to your bounty and update the values of global variables for future use. 
  Variables:
      $bounty_parser_amount ~~ number of items tasked to retrieve
      $bounty_parser_target ~~ creature, herb, or gem 
      $bounty_parser_task ~~ type of task assigned
      $bounty_parser_heirloom ~~ heirloom description 
      $bounty_parser_location ~~ LOCATION of item or creature
      $bounty_parser_destination ~~ destination of escort task
=end

# Verify this is running in shattered
unless XMLData.game =~ /^GSF/
  output = "\n"
  output.concat "shat_bounty_parser.lic is intended to be used in Gemstone IV: Shattered\n"
  output.concat "\n"
  output.concat "Please come and join us in Shattered if you would like to know more!\n"
  output.concat "\n"
  respond output
  exit
end

old_bounty = checkbounty
b_amount = nil
b_target = nil
b_location = nil
b_heirloom = nil
b_task = nil
b_destination = nil
b_guild = nil
$bounty_parser_amount = nil
$bounty_parser_target = nil
$bounty_parser_task = nil
$bounty_parser_heirloom = nil
$bounty_parser_location = nil
$bounty_parser_guild = UserVars.bounty_origination_room
primary_tasks = [:skins_unknown,:heirloom_unknown,:creature_unknown,:bandit_unknown,:rescue_unknown,:gems_unknown,:herbs_unknown,:escort]


loop {
  b_task = nil
  b_amount = nil
  b_target = nil
  b_location = nil
  b_heirloom = nil
  b_destination = nil
 
# comparing checkbounty against all the possible messaging 
  if /Hmm, I've got a task here from the town of .*.  The local furrier .* has an order to fill and wants our help.  Head over there and see what you can do./ =~ checkbounty
    b_task = :skins_unknown
  elsif /You have been tasked to retrieve (?<b_amount>\d*) .* of at least .* quality for .* in .*.  You can SKIN them off the corpse of (a|an|some) (?<b_target>.*) purchase them from another adventurer./ =~ checkbounty
    b_task = :skins_known
    b_target = b_target.split(' ')[0...-1].join(' ')
  elsif /Hmm, I've got a task here from the town of .*.  It appears they need your help in tracking down some kind of lost heirloom./ =~ checkbounty
    b_task = :heirloom_unknown
  elsif /You have been tasked to recover (a|an|some) (?<b_heirloom>.*) that an unfortunate citizen lost after being attacked by (a|an|some) (?<b_target>.*) (on|in)(\sthe|\s)(?<b_location>.*)\.  The heirloom can be identified by the initials .* engraved upon it.  SEARCH the area until you find it./ =~ checkbounty
    b_task = :heirloom_search
  elsif /You have been tasked to recover (a|an|some) (?<b_heirloom>.*) that an unfortunate citizen lost after being attacked by (a|an|some) (?<b_target>.*) (on|in)(\sthe|\s)(?<b_location>.*)\.  The heirloom can be identified by the initials .* engraved upon it.  Hunt down the creature and LOOT the item from its corpse./ =~ checkbounty 
    b_task = :heirloom_loot
  elsif /You have located (a|an|some) (?<b_target>.*) and should bring it back to the .* of .*\./ =~ checkbounty
    b_task = :heirloom_found
  elsif /Hmm, I've got a task here from the town of .*.  It appears they have a bandit problem they'd like you to solve.  Go report to .* to find out more.  .*  Be sure to ASK about BOUNTIES./ =~ checkbounty
    b_task = :bandit_unknown
  elsif /You have been tasked to suppress bandit activity (a|an|some) (?<b_target>.*) (on|in)(\sthe|\s)(?<b_location>.*)\.  You need to kill (?<b_amount>\d*) of them to complete your task./ =~ checkbounty
    b_task = :bandit_known
    b_target = "bandit"
  elsif /Hmm, I've got a task here from the town of .*.  It appears they have a creature problem they'd like you to solve./ =~ checkbounty
    b_task = :creature_unknown
  elsif /You have been tasked to suppress (?<b_target>.*) activity (on|in)(\sthe|\s)(?<b_location>.*)\.  You need to kill (?<b_amount>\d*) (of|more of) them to complete your task./ =~ checkbounty
    b_task = :creature_cull
  elsif /You have been tasked to hunt down and kill a particularly dangerous (?<b_target>.*) that has established a territory (on|in)(\sthe|\s)(?<b_location>.*)\./ =~ checkbounty
    b_task = :creature_dangerous
  elsif /Hmm, I've got a task here from the town of .*.  It appears that a local resident urgently needs our help in some matter.  Go report to/ =~ checkbounty
    b_task = :rescue_unknown
  elsif /You have been tasked to rescue the young (runaway|kidnapped) .* of a local citizen.  A local divinist has had visions of the child fleeing from (a|an|some) (?<b_target>.*) (on|in)(\sthe|\s)(?<b_location>.*)\.  Find the area where the child was last seen and clear out the creatures that have been tormenting (him|her) in order to bring (him|her) out of hiding./ =~ checkbounty
    b_task = :rescue_not_found
  elsif /You have made contact with the child you are to rescue and you must get her back alive to the .* of .*./
    b_task = :rescue_found
  elsif /Hmm, I've got a task here from the town of .*.  The local (alchemist|healer), .*, has asked for our aid.  Head over there and see what you can do.  Be sure to ASK about BOUNTIES./ =~ checkbounty
    b_task = :herbs_unknown
  elsif /The (alchemist|healer) in .*, .*, is working on a concoction that requires (a|an|some) (?<b_target>.*) found (on|in)(\sthe|\s)(?<b_location>.*)\.  These samples must be in pristine condition.  You have been tasked to retrieve (?<b_amount>\d*) samples/ =~ checkbounty
    b_task = :herbs_known
  elsif /Hmm, I've got a task here from the town of .*.  The local gem dealer, .*, has an order to fill and wants our help.  Head over there and see what you can do./ =~ checkbounty
    b_task = :gems_unknown
  elsif /The gem dealer in .*, .*, has received orders from multiple customers requesting (a|an|some) (?<b_target>.*).  You have been tasked to retrieve (?<b_amount>\d*) of them.  You can SELL them to the gem dealer as you find them./ =~ checkbounty
    b_task = :gems_known
  elsif /I've got a special mission for you.  A certain client has hired us to provide a protective escort on (his|her) upcoming journey.  Go to the area .* and WAIT for (him|her) to meet you there.  You must guarantee (his|her) safety to (?<b_destination>.*) as soon as you can, being ready for any dangers that the two of you may face.  Good luck!/ =~ checkbounty
    b_task = :escort
  elsif /You succeeded in your task and should report back to the .* of .*\./ =~ checkbounty
    b_task = :complete_task
  elsif /You have succeeded in your task and can return to the Adventurer's Guild to receive your reward./ =~ checkbounty
    b_task = :complete_no_task
  elsif /You are not currently assigned a task./
    b_task = :no_task
end

  # some locations use a (near|between town name) messaging but not always. 
  if b_location =~ /(near)|(between)/
    if b_location =~ /near/
      word = "near"
    else
      word = "between"
    end
    split_loc = b_location.split(" ")
    inx = split_loc.index(word)
    b_location = split_loc[0..(inx - 1)].join(" ").strip
  end

  # outputs some info if you have UserVars.debug set to true
  if UserVars.debug == true
    echo checkbounty
    output_array = [b_destination,b_heirloom,b_location,b_task,b_target,b_amount]
    output_array.each { |o|
      if o != nil
        if o.is_a? String   
          o.strip!
        end
        respond o
      end
    }
  end

# assign local variables to global variables 
  if primary_tasks.include?(b_task) && Room.current.tags.include?('advguild')
    $bounty_parser_guild = Room.current.id
    UserVars.bounty_origination_room = Room.current.id
  end
  $bounty_parser_amount = b_amount
  $bounty_parser_target = b_target
  $bounty_parser_task = b_task
  $bounty_parser_heirloom = b_heirloom
  $bounty_parser_location = b_location
  $bounty_parser_destination = b_destination
  
# waits for a new checkbounty
  wait_until{checkbounty != old_bounty}
  
  old_bounty = checkbounty
}