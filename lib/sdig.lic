=begin

    SDig by SpiffyJr

     author: SpiffyJr
       name: SDig
       tags: torture

    changelog:
        2018.02.23 - initial release
=end

script.silent = true

adv_rooms = [23798,23782,23796,23795,23794,23793,23792,23791,23790,23789,23788,23787,23786,23785,23767,23778,23777,23776,23775,23774,23773,23772,23771,23770,23769,23768,23783,23779]
arch_rooms = [26091,26092,26093,24549,24547,24546,24548,26388]
dig_rooms = [25557,25558,25559,25556,25555,25575,25574,25578,25562,25563,25573,25577,25564,25565,25567,25571,25570,25572,25553,25550,25551]
box_regexp = /box|strongbox|chest|crate|coffer|trunk/i
casket_regexp = /casket|coffin|sarcophagus/i
junk_regexp = /\b(?:thick-shelled carapace|clump of barnacles|pile of excrement|clump of debris|lump of charcoal|piece of sandstone|pile of muck|black rose|brittle rock|clod of dirt|rotting flesh|crumbly rock|clump of sand|congealed slime|glass jar|petrified root)\b/i

if not UserVars.lootsack
    echo '** failed to find lootsack: ;vars set lootsack=item'
    exit
end

lootsack = GameObj.inv.find { |i| i.noun =~ /\b#{UserVars.lootsack}\b/ }



if not lootsack
    echo "** failed to find lootsack: currently set to #{UserVars.lootsack}"
    exit
end

if not lootsack.contents
    fput "look in ##{lootsack.id}"
end

if checkleft and GameObj.left_hand.name !~ box_regexp and GameObj.left_hand.name !~ casket_regexp and GameObj.left_hand.name !~ junk_regexp
    fput 'store left'
    fput 'stow left' if checkleft
end

if checkright and checkright !~ /pickaxe/
    fput 'store right'
    fput 'stow right' if checkright
end

in_dig = proc do
    if Room.current.location != 'Duskruin Arena'
        Script.run('go2', 'town')
        fput "quest transport duskruin"
        fput "quest transport duskruin"
    end

    if not dig_rooms.include?(Room.current.id)
        Script.run('go2', '26093')
        move 'go tunnel'

        if Room.current.id != 25555
            echo '** failed to enter tunnel'
            exit
        end
    end
end

out_dig = proc do
    if dig_rooms.include?(Room.current.id)
        if Room.current.id != 25555
            Script.run('go2', '25555')
        end
    
        move 'up'
        
        if Room.current.id != 26093
            echo '** failed to find tunnel exit'
            exit
        end
    elsif arch_rooms.include?(Room.current.id)
    elsif adv_rooms.include?(Room.current.id)
    else
        Script.run('go2', '26092')

        if Room.current.id != 26092
            echo '** not sure how to get out of where you are'
            exit
        end
    end
end

sell = proc do
    if checkleft or checkright
        fput 'store all'
    end

    if checkleft or checkright
        fput 'stow all'
    end

    if Room.current.location == 'Duskruin Arena'
        out_dig.call()

        echo '-- selling to archaeologist'
        
        idx = 0
        while to_sell = lootsack.contents.find_all { |i| i.name =~ /\b(?:broken fire opal chunk|sharp golden topaz shard|thin iron strip|lopsided golden moonstone sphere|sharp golden topaz shard|cracked ur-barath stone|black opal fragment|thin platinum strip|jagged white sunstone shard|broken white opal sphere|blood red garnet chunk|coarse grey moonstone shard|carved ur-barath totem|white dreamstone sliver)\b/ }
            if npc = GameObj.npcs.find { |npc| npc.name =~ /archaeologist/i }
                to_sell.each do |item|
                    if not GameObj.npcs.find { |npc| npc.name =~ /archaeologist/ }
                        break
                    end

                    put "_drag ##{item.id} right"
                    res = dothistimeout "give ##{item.id} to ##{npc.id}", 5, /I can buy that|I don't want anything/
                    if res =~ /I don't want anything/
                        fput "_drag ##{item.id} ##{lootsack.id}"
                    else
                        put "give ##{item.id} to ##{npc.id}"
                    end
                end
            end

            if to_sell.length == 0
                break
            end

            if idx > arch_rooms.length - 1
                idx = 0
            end

            Script.run('go2', arch_rooms[idx].to_s)
            idx += 1
        end

        echo '-- selling to adventurer'

        idx = 0
        while to_sell = lootsack.contents.find_all { |i| i.name =~ /\b(?:blue feather-shaped charm|squat pale grey crystal bottle|contract|pack|twisting blue-green potion)\b/ }
            if npc = GameObj.npcs.find { |npc| npc.name =~ /adventurer/i }
                to_sell.each do |item|
                    if not GameObj.npcs.find { |npc| npc.name =~ /adventurer/ }
                        break
                    end

                    fput "_drag ##{item.id} right"
                    res = dothistimeout "give ##{item.id} to ##{npc.id}", 5, /I can buy that|I don't want anything/
                    if res =~ /I don't want anything/
                        fput "_drag ##{item.id} ##{lootsack.id}"
                    else
                        fput "give ##{item.id} to ##{npc.id}"
                    end
                end
            end

            if to_sell.length == 0
                break
            end

            if idx > adv_rooms.length - 1
                idx = 0
            end

            Script.run('go2', adv_rooms[idx].to_s)
            idx += 1
        end

        Script.run('go2', '23717')
        move 'go wagon'
    end

    Script.run('go2', 'gemshop')
    fput "remove ##{lootsack.id}"
    fput "sell ##{lootsack.id}"
    fput "wear ##{lootsack.id}"

    if checkleft
        fput 'stow left'
    end

    lootsack.contents.each do |item|
        if item.name !~ /(?:jacinth|garnet|opal|pearl|lapis|bloodjewel|dreamstone|turquoise|geode|ora-bloom|sapphire|rosespar|blazestar|amber|sapphire|hyacinth|citrine|diamond|glimaerstone|amethyst|zircon|agate|heliodor|quartz|chrysoberyl|azurite|haon|peridot|moonstone|malachite|ametrine|emerald|feystone|ruby)$/
            next
        end

        fput "_drag ##{item.id} right"
        fput "sell ##{item.id}"
    end

    Script.run('go2', 'pawnshop')
    lootsack.contents.each do |item|
        if item.name !~ /\b(?:plumille|boar hide|wyrwood|balenite|alexandrite|rhimar)\b/
            next
        end

        fput "_drag ##{item.id} right"
        fput "sell ##{item.id}"
    end

    Script.run('slootbeta', 'sell')
end

dig = proc do
    silence_i_keel_you = proc do |server_string|
        if server_string =~ /begins? to dig|digs in with|continues? to dig|hits? something hard|tries to empty|brush off any/i
            nil
        elsif server_string =~ /^As you place a.* you feel pleased with yourself|lifts? the lid|opens? the lid/
            nil
        elsif server_string =~ /^In the|Total items|\w+ \[\d+\]\:|gathers? the remaining|^You (?:put|grab) an?|You reach down to see what you hit/
            nil
        elsif server_string =~ /(?:put|remove)s? .* pickaxe|Roundtime\: \d+ sec\./
            nil
        elsif server_string =~ /^As you (?:pluck|bust|break|pick|reach)/
            nil
        elsif server_string =~ /^You remove.*from/
            nil
        else
            server_string
        end
    end

    DownstreamHook.add('sdig_silent', silence_i_keel_you)

    before_dying do
        DownstreamHook.remove('sdig_silent') 
    end

    in_dig.call()

    dig_room = script.vars[2] ? script.vars[2].to_i : Room.current.id

    if dig_room == 'random'
        echo '-- no dig room specified: I\'ll pick one for you'
        echo '-- if you want to specify a room kill me; you have 2 seconds'
        sleep 2
        dig_room = dig_rooms[rand(dig_rooms.length)]
    end

    loop do
        if percentencumbrance(100)
            sell.call()
            in_dig.call()
        end
    
        if Room.current.id != dig_room
            Script.run('go2', dig_room.to_s)
        end
    
        waitrt?
    
        trash = GameObj.loot.find { |l| l.name =~ /bin/ }
    
        if not trash
            echo "** failed to find trash container"
            exit
        end
    
        pickaxe = ([GameObj.right_hand] + lootsack.contents).find { |i| i.name =~ /\bpickaxe$/ }
        
        if not pickaxe
            echo '** seems you don\'t have a pickaxe'
            exit
        end
    
        # check for trash to open
        if not checkleft and junk = lootsack.contents.find { |i| i.name =~ junk_regexp }
            fput "_drag ##{junk.id} left"
            sleep 0.5
        end
    
        if checkleft
            if GameObj.left_hand.name =~ junk_regexp
                verbs = ['break', 'clean', 'rub', 'tap']
                fput "#{verbs[rand(verbs.length)]} ##{GameObj.left_hand.id}"
                
                waitrt?
                
                if GameObj.left_hand.id.nil?
                    res = dothistimeout 'get coins', 5, /You cannot hold|You gather/
                    if res =~ /You cannot hold/
                        sell.call()
                        in_dig.call()
                    end
                else
                    dothistimeout "_drag ##{GameObj.left_hand.id} ##{lootsack.id}", 5, /^You put/
                end
            else
                if checkright
                    fput "_drag ##{pickaxe.id} ##{lootsack.id}"
                end
    
                if GameObj.left_hand.name =~ box_regexp and not GameObj.left_hand.contents
                    fput "open ##{GameObj.left_hand.id}"
                elsif GameObj.left_hand.name =~ casket_regexp and not GameObj.left_hand.contents
                    fput "pry ##{GameObj.left_hand.id}"
                    fput "pry ##{GameObj.left_hand.id}"
                end
            
                if not GameObj.left_hand.contents
                    dothistimeout "look in ##{GameObj.left_hand.id}", 5, /In the/
                end
    
                if not GameObj.left_hand.contents
                    echo "** something bad happened; failed to find contents"
                    exit
                end
    
                GameObj.left_hand.contents.each do |item|
                    if item.name =~ /coins/
                        fput "get ##{item.id}"
                        waitrt?
                        next
                    end
    
                    res = dothistimeout "_drag ##{item.id} ##{lootsack.id}", 5, /^You (?:put|gather)/
                    if res.nil?
                        echo '** unexpected drag item result'
                        exit
                    end
                end
    
                waitrt?
    
                while GameObj.left_hand.id
                    fput "_drag ##{GameObj.left_hand.id} ##{trash.id}"
                    sleep 0.5
                end
            end
        end
    
        if GameObj.right_hand.id != pickaxe.id
            fput "_drag ##{pickaxe.id} right"
        end
    
        res = dothistimeout "dig", 5, /^You (?:hit something hard|continue to dig|begin to dig)/
        if res.nil?
            echo "** unexpected dig result"
            exit
        end
    end
end

if script.vars[1] == 'dig'
    dig.call()
elsif script.vars[1] == 'sell'
    sell.call()
end