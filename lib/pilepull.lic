=begin

  This is for Shattered!

  ;pilepull
  For use with the treasure pile put out for 1,000,000 silvers per search.

  Start in front of a treasure pile to search.
  Currently will withdraw 100,000,000 silvers per go (configurable manually in the script)
  and continue doing so until you have no more room in your STOW container or you are item capped.

  Usage:

      ;pilepull           - will run the normal SEARCH of the pile
      ;pilepull cleanup   - will attempt to cleanup bundlable items, which include:
                              * glowing orbs
                              * potent yellow-green potion
                              * swirling yellow-green potion
                              * Elanthian Guilds voucher pack
                              * Adventurer's Guild voucher pack

  There's also some variables in the script you can set to true/false
  All default to false to throw away
    * @withdraw_amount
    * @keep_spoon
    * @keep_wisp  (not yet implemented)
    * @keep_nexus

            author: Tysong
      contributors: everyone in shattered!
              game: Gemstone
              tags: loot, mania, treasure, pile, shattered
          required: Lich >= 5.12.4
           version: 1.0.0

  Improvements:
  Major_change.feature_addition.bugfix
  v1.0.0 (2025-08-31)
    - initial release
=end

module PilePull
  @prize_pile = nil
  @inventory_quantity = nil

  # Set the amount to withdraw each time it goes to the bank
  @withdraw_amount = 100_000_000

  # Set the following on whether to TRASH them on receiving them
  @keep_spoon = false
  @keep_wisp  = false # not yet implemented
  @keep_nexus = false

  def self.detect_pile
    ['pile', 'prizes'].each do |thing|
      if (found_thing = GameObj.loot.find { |item| item.noun == thing })
        result = dothistimeout("look ##{found_thing.id}", 2, /SEARCH the \w+ to get something from the \w+!/)
        if result =~ /SEARCH the \w+ to get something from the \w+!/
          return @prize_pile = found_thing
        end
      end
    end
    echo("Could not find a prize pile, be sure to start script in front of a treasure pile! Exiting!")
    exit
  end

  def self.silver_check
    return Lich::Util.silver_count
  end

  def self.bank_run
    current_location = Room.current.id
    Script.run("go2", "u8213023")
    fput("deposit all")
    result = dothistimeout("withdraw #{@withdraw_amount} silver", 2, /you don't seem to have that much|hands you [\d,]+ silvers/)
    if result =~ /you don't seem to have that much/
      echo("Not enough silver, exiting!")
      exit
    end
    Script.run("go2", "#{current_location}")
  end

  def self.search_pile
    loop {
      result = dothistimeout("search ##{@prize_pile.id}", 2, /In order to search through a pile of mania prizes|You do not have enough silver to SEARCH|You hand over 1,000,000|You've recently searched through|You have too many items to search./)
      case result
      when /In order to search through/
        next
      when /You've recently searched through/
        sleep(0.3)
        next
      when /You do not have enough silver to SEARCH/
        return false
      when /You have too many items to search./
        echo("You have too many items! Handle that!")
        exit
      when /You hand over 1,000,000/
        sleep(1)
        waitrt?
        return true
      end
    }
  end

  def self.handle_loot
    case GameObj.right_hand.name
    when /booklet/
      fput('redeem booklet')
    when /steel spoon/
      if @keep_spoon
        fput('stow all')
      else
        fput('trash my spoon')
      end
    when /nexus orb/
      if @keep_nexus
        fput('stow all')
      else
        fput('trash my orb')
      end
    else
      fput('stow all')
    end

    20.times {
      return if GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?
      sleep(0.1)
    }

    echo("Couldn't handle item received, likely full containers, exiting!")
    exit
  end

  def self.check_inventory_count
    waitrt?
    result = dothistimeout("inventory quantity", 3, /You are carrying ([\d,]+) items\./)
    if result =~ /You are carrying ([\d,]+) items\./
      @inventory_quantity = $1.to_i
      if @inventory_quantity >= 400
        echo("You have to many items on you, preventing run as you should empty some stuff off your person")
        echo("Item cap is 500 and you have #{@inventory_quantity}.")
        exit
      end
    else
      echo("Couldn't detect current inventory quantity, exiting for safety reasons!")
      exit
    end
  end

  def self.populate_inventory
    GameObj.inv.each do |item|
      # echo "item: #{item.name} | type: #{item.type}"
      next if GameObj.containers.keys.include?(item.id.to_s) && item.contents.is_a?(Array)
      next if item.type =~ /jewelry|weapon|armor|uncommon/
      next if item.type.nil?

      # check out whats inside
      lines = Lich::Util.issue_command("look in ##{item.id}", /<exposeContainer|<dialogData|<container|you glance|There is nothing/i, usexml: true, silent: true, quiet: true)
      next if lines.any? { |l| l =~ /You glance|There is nothing/i }

      20.times {
        break if GameObj.containers.keys.include?(item.id) && item.contents.is_a?(Array)
        sleep 0.1
      }
    end
  end

  def self.find_items(item_name)
    all_items = []

    if StowList.default
      StowList.default.contents.each do |thing|
        if thing.name =~ item_name
          all_items.push(thing)
        end
      end
    else
      GameObj.inv.each { |container|
        next unless GameObj.containers.keys.include?(container.id.to_s)
        next unless container.contents.is_a?(Array)

        container.contents.each do |thing|
          if thing.name =~ item_name
            all_items.push(thing)
          end
        end
      }
    end
    return all_items
  end

  def self.cleanup
    populate_inventory

    # glowing orbs - REIM stuff
    found_items = find_items(/\bglowing orb\b/)
    found_items.each { |item|
      fput("get ##{item.id}")
      multifput("bundle ##{item.id}", "bundle ##{item.id}")
      fput('stow left') unless GameObj.right_hand.id.nil? || GameObj.left_hand.id.nil?
    } if found_items.count > 1
    fput('stow all') unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?

    # potent yellow-green potions - SKE enhancive 30day recharge
    found_items = find_items(/\bpotent yellow-green potion\b/)
    found_items.each { |item|
      fput("get ##{item.id}")
      multifput("pour ##{item.id} in my second potion")
      fput('stow left') unless GameObj.right_hand.id.nil? || GameObj.left_hand.id.nil?
    } if found_items.count > 1
    fput('stow all') unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?

    # swirling yellow-green potions - regular enhancive 30day recharge
    found_items = find_items(/\bswirling yellow-green potion\b/)
    found_items.each { |item|
      fput("get ##{item.id}")
      multifput("pour ##{item.id} in my second potion")
      fput('stow left') unless GameObj.right_hand.id.nil? || GameObj.left_hand.id.nil?
    } if found_items.count > 1
    fput('stow all') unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?

    # Elanthian Guilds voucher pack
    found_items = find_items(/\bElanthian Guilds voucher pack\b/)
    found_items.each { |item|
      fput("get ##{item.id}")
      multifput("bundle ##{item.id}")
      fput('stow left') unless GameObj.right_hand.id.nil? || GameObj.left_hand.id.nil?
    } if found_items.count > 1
    fput('stow all') unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?

    # Adventurer's Guild voucher pack
    found_items = find_items(/\bAdventurer's Guild voucher pack\b/)
    found_items.each { |item|
      fput("get ##{item.id}")
      multifput("bundle ##{item.id}")
      fput('stow left') unless GameObj.right_hand.id.nil? || GameObj.left_hand.id.nil?
    } if found_items.count > 1
    fput('stow all') unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?
  end

  def self.main
    detect_pile

    check_inventory_count
    unless silver_check >= 1_000_000
      bank_run
    end
    loop do
      if search_pile
        handle_loot
      else
        check_inventory_count
        bank_run
      end
    end
  end
end

if Script.current.vars[1] == "cleanup"
  PilePull.cleanup
else
  PilePull.main
end
