=begin

Loadout Manager

This script manages loadouts, allowing you to assign items to letters and save them as numbered loadouts for quick access.
It handles stowing and equipping items automatically, including worn items.

SETUP INSTRUCTIONS:

1. Assign Items to Letters:
   Use: ;loadout assign <letter> <item> <container/worn>
   Example:
     ;loadout assign a broadsword scabbard
     ;loadout assign b shield worn

2. Save Loadouts:
   Use: ;loadout save <number> <right-letter> [<left-letter>]
   Example:
     ;loadout save 1 a b
     ;loadout save 2 a

3. Equip Loadouts:
   Use: ;loadout <number>
   Example:
     ;loadout 1

ADDITIONAL COMMANDS:

- Dynamically Stow Held Items:
  Use: ;loadout stow

- List Assignments and Loadouts:
  Use: ;loadout list

Author: Machtig
Category: Utility
Version: 1.0.0

=end


# Ensure settings are loaded and initialized
if CharSettings.to_hash.empty?
  CharSettings[:assignments] = {}
  CharSettings[:loadouts] = {}
  CharSettings.save
end
CharSettings.load

@assignments = CharSettings[:assignments] || {}
@loadouts = CharSettings[:loadouts] || {}

# Save settings to persist data
def save_settings
  CharSettings[:assignments] = @assignments
  CharSettings[:loadouts] = @loadouts
  CharSettings.save
end

# Assign an item to a letter
def assign_item(letter, item, container = nil)
  if letter.nil? || item.nil?
    echo "Usage: ;loadout assign <letter> <item> [<container>]"
    return
  end

  @assignments[letter] = { item: item, container: container }
  echo "Assigned #{item}#{container ? " in #{container}" : ""} to letter #{letter}."
  save_settings
end

# Save a loadout to a number
def save_loadout(loadout_number, right_letter, left_letter = nil)
  if @assignments[right_letter]
    @loadouts[loadout_number] = { right: right_letter, left: left_letter }
    echo "Saved loadout #{loadout_number} with right: #{right_letter}#{left_letter ? ", left: #{left_letter}" : ""}."
    save_settings
  else
    echo "Error: Right item #{right_letter} is not assigned."
  end
end

# Equip a loadout by number
def equip_loadout(loadout_number)
  loadout = @loadouts[loadout_number]

  if loadout
    stow_items # Clean out hands before equipping a loadout

    # Process the right-hand item
    if loadout[:right]
      right_item = @assignments[loadout[:right]]
      if right_item
        if right_item[:container] == "worn"
          result = dothistimeout("remove #{right_item[:item]}", 5, /Remove what\?|You remove|You are not wearing/)
          if result =~ /Remove what\?/
            fput "get #{right_item[:item]}"
          end
        else
          fput "get #{right_item[:item]}" if right_item[:item]
        end
        fput "hold #{right_item[:item]}" if checkright.empty?
      else
        echo "Error: Right item #{loadout[:right]} is not assigned."
        return
      end
    else
      echo "Error: Right-hand item is required in a loadout."
      return
    end

    # Process the left-hand item, only if it is specified
    if loadout[:left]
      left_item = @assignments[loadout[:left]]
      if left_item
        if left_item[:container] == "worn"
          result = dothistimeout("remove #{left_item[:item]}", 5, /Remove what\?|You remove|You are not wearing/)
          if result =~ /Remove what\?/
            fput "get #{left_item[:item]}"
          end
        else
          fput "get #{left_item[:item]} from #{left_item[:container]}" if left_item[:container]
        end
        fput "hold #{left_item[:item]}" if checkleft.empty?
      else
      end
    end

    echo "Equipped loadout #{loadout_number}."
  else
    echo "Error: Loadout #{loadout_number} not found."
  end
end



# Stow items
def stow_items
  # Collect items in both hands
  items_to_stow = []
  items_to_stow << { hand: "right", item: checkright } if checkright
  items_to_stow << { hand: "left", item: checkleft } if checkleft

  # Process each item
  items_to_stow.each do |hand_item|
    assignment = @assignments.values.find { |v| v[:item] == hand_item[:item] }
    if assignment
      if assignment[:container] == "worn"
        fput "wear #{hand_item[:item]}"
      else
        fput "put #{hand_item[:item]} in #{assignment[:container]}" if assignment[:container]
      end
    else
      fput "stow #{hand_item[:hand]}"
    end
  end

  echo "Stowed items."
end

# List assignments and loadouts
def list_assignments_and_loadouts
  echo "Assignments:"
  if @assignments.empty?
    echo "  None."
  else
    @assignments.each do |letter, details|
      echo "  #{letter}: #{details[:item]}#{details[:container] ? " in #{details[:container]}" : ""}"
    end
  end

  echo "Loadouts:"
  if @loadouts.empty?
    echo "  None."
  else
    @loadouts.each do |number, details|
      echo "  #{number}: Right: #{details[:right]}#{details[:left] ? ", Left: #{details[:left]}" : ""}"
    end
  end
end

# Parse and clean command variables
clean_vars = script.vars.join(" ").split(" ")

if clean_vars.empty?
  echo "Commands:"
  echo "  ;loadout assign <letter> <item> [<container>]"
  echo "  ;loadout save <loadout_number> <right_letter> [<left_letter>]"
  echo "  ;loadout <loadout_number>"
  echo "  ;loadout stow"
  echo "  ;loadout list"
else
  case clean_vars[0].downcase
  when "assign"
    letter, item, container = clean_vars[1], clean_vars[2], clean_vars[3]
    assign_item(letter, item, container)
  when "save"
    loadout_number, right_letter, left_letter = clean_vars[1], clean_vars[2], clean_vars[3]
    save_loadout(loadout_number, right_letter, left_letter)
  when /^\d+$/
    loadout_number = clean_vars[0]
    equip_loadout(loadout_number)
  when "stow"
    stow_items
  when "list"
    list_assignments_and_loadouts
  else
    echo "Unknown command. Use ;loadout for help."
  end
end
