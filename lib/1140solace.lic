=begin

Casts 1140 on a target and attempts to heal all of their wounds.
Add the optional scars parameter if you want to heal scars too.

USAGE: ;1140 <target> [scars]

Note: This will NOT heal your own wounds afterwards.  
Use another script for that, such as ;healself

by Daedeus
=end
hasSolaceRecovery = false
done = false

squelchSpells = proc { |server_string|
    if server_string.include? "Solace Recovery"
        hasSolaceRecovery = true
    end

    if server_string =~ /You currently have the following|\.\.\.\.\.\.\.|No spells found|ActiveSpells|<output/
        nil
    elsif server_string =~ /<prompt/
        done = true
        DownstreamHook.remove("squelchSpells")
        server_string
    else
        server_string
    end
}
StaminaCost = {
    "minor" => 10,
    "medium" => 15,
    "severe" => 20
}

DownstreamHook.add("squelchSpells", squelchSpells)
put "spell active"
wait_until { done }

if hasSolaceRecovery
    echo "You're still recovering from a previous Solace cast."
    exit
end
unless Char.prof =~ /Empath/
    echo "You're not an empath."
    exit
end

unless script.vars[1]
    echo "Usage: ;1140 <player name>"
    exit
end

unless checkmana >= 40
    echo "You're too low on mana."
    exit
end

if checkprep !~ /None|Solace/
    echo "You've got a spell prepped already."
    exit
end

target = script.vars[1]

fput "prep 1140" if checkprep !~ /Solace/
result = dothistimeout "cast #{target}", 3, /Cast at what|Through your spirit you feel|your spirit would fray and dwindle|You can't determine an exact location/

if result =~ /Cast at what/
    echo "Couldn't find that player."
    exit
elsif result =~ /You can't determine an exact location/
    echo "They went somewhere strange."
    exit
elsif result =~ /would fray and dwindle/
    echo "Out of range"
    exit
end

if result =~ /You are still recovering from your last Solace/
    exit
end

count = 0
types = ["injury"]
types.push["scars"] if script.vars.include? "scars"

types.each { |injury| 
    ["severe","medium","minor"].each { |severity|
        result.scan(/#{severity} (\w+(?: \w+)?) injury/) { |m| 
            part = $1
            if checkstamina < StaminaCost[severity]
                echo "You need at least #{StaminaCost[severity]} to heal a #{severity} #{part} wound."
                next
                #wait_until { checkstamina >= StaminaCost[severity] }
            end

            count += 1
            m =~ /#{severity} (\w+(?: \w+)?) #{injury}/
            
            part = "nerves" if part =~ /nervous system/
            fput "transfer #{target} #{part}"
        }
    }
}