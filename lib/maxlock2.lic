=begin
  Shows a chart of the hardest lock and trap difficulties that can be picked/disarmed with a roll of 100.

  Can also show relevant stats and bonuses (`;maxlock2 stats`)
  or suggest lockpicks for a given lock (`;maxlock2 difficulty` where `difficulty` is the lock difficulty)

  Lore bonuses are correctly calculated using the formula released by GM Naijin on 2020-03-09.
  No fudging is built in to the formula, this shows your true maximum lock.
  Lockpick suggestions favor lockpicks/lore combinations that succeed on a roll close to 60.

  Inspired by, but a complete rewrite from, ;maxlock

  author: LostRanger (thisgenericname@gmail.com)
  game: gs
  tags: utility
  required: Lich >= 4.6.0.

  version: 0.4 (2020-03-11)

  changelog:
    version 0.4 (2020-03-11)
      * Actually fix the enhanced dex issue.

    version 0.3 (2020-03-11)
      * Lich reports enhanced dex wrong if it's never seen your dex enhanced.  This correctly reflects it and falls
        back to regular dex if your enhanced dex stat (not bonus) is reported as 0.

    version 0.2 (2020-03-10)
      * Fix being overly optimistic by 1 point.  (Endrolls need to be 101 to succeed, not 100.)

    version 0.1 (2020-03-10)
      * First public release.
=end


module Maxlock

    # @lockpicks_long = [["copper", 1.00], ["brass", 1.00], ["steel", 1.10], ["ivory", 1.20], ["gold", 1.20], ["silver", 1.30], ["mithril", 1.45], ["ora", 1.55], ["glaes", 1.60], ["laje", 1.75], ["vultite", 1.80], ["rolaren", 1.90], ["veniom", 2.15], ["invar", 2.25], ["alum", 2.30], ["golvern", 2.35], ["kelyn", 2.40], ["vaalin", 2.5],["shadow", 2.5]]
    @lockpicks = [["copper/brass", 1.00], ["steel", 1.10], ["gold/ivory", 1.20], ["silver", 1.30], ["mithril", 1.45], ["ora", 1.55], ["glaes", 1.60], ["laje", 1.75], ["vultite", 1.80], ["rolaren", 1.90], ["veniom", 2.15], ["invar", 2.25], ["alum", 2.30], ["golvern", 2.35], ["kelyn", 2.40], ["vaalin/shadow", 2.5]]


    class << self
        # def true_skill(name)
        #     # Properly handles fractional ranks from enhancives for low level rogues.
        #     # ... except Lich fakes Char.skills, making this entire exercise pointless.
        #     match = Char.skills.find{|x| x =~ /  #{name}.*\|\s+(\d+)\s+\d+$/}
        #     return 0 unless $1
        #     return $1.to_i
        # end
        #
        def _lock_skill; Skills.to_bonus(Skills.pickinglocks); end  #  return true_skill("Picking Locks"); end
        def _trap_skill; Skills.to_bonus(Skills.disarmingtraps); end  #  true_skill("Disarming Traps"); end

        def _dex_bonus
            if defined?(Stats.enhanced_dex) and Stats.enhanced_dex[0] > 0
                return Stats.enhanced_dex[1]
            else
                return Stats.dex[1]
            end
        end

        def _lore_bonus(spell, skill, selfcast=nil)
            selfcast = Spell[spell].known? if selfcast.nil?
            bonus = (Char.level/2).floor + (skill*0.1).floor + _dex_bonus + (Spells.minorelemental/4).floor
            bonus = skill if bonus > skill
            bonus = (bonus/2).floor unless selfcast
            return bonus
        end
        def _locklore_bonus(selfcast=nil)
            return _lore_bonus(403, _lock_skill, selfcast)
        end
        def _traplore_bonus(selfcast=nil)
            return _lore_bonus(404, _trap_skill, selfcast)
        end

        def format_bonuses
            dex_bonus = _dex_bonus
            lock_skill = _lock_skill
            trap_skill = _trap_skill
            locklore_bonus = _locklore_bonus
            traplore_bonus = _traplore_bonus
            know403 = Spell[403].known? ? "(self-cast)" : "(halved since not self-cast)"
            know404 = Spell[404].known? ? "(self-cast)" : "(halved since not self-cast)"

            return [
                "Dexterity bonus........| #{dex_bonus.to_s.rjust(4)}",
                "Picking Locks bonus....| #{lock_skill.to_s.rjust(4)}",
                "Locklore bonus.........| #{locklore_bonus.to_s.rjust(4)}  #{know403}",
                "Disarming Traps bonus..| #{trap_skill.to_s.rjust(4)}",
                "Traplore bonus.........| #{traplore_bonus.to_s.rjust(4)}  #{know404}",
            ]
        end

        def show_bonuses
            respond format_bonuses
        end

        def format_chart(filter=nil)
            unlored = _dex_bonus + _lock_skill
            lored = unlored + _locklore_bonus

            msg = [
                " UNLORED    W/LORE  LOCKPICK",
                "--------  --------  --------------"
            ]

            @lockpicks.each do |name, multiplier|
                msg << "#{((unlored * multiplier).floor - 1).to_s.rjust(8)}  #{((lored * multiplier).floor - 1).to_s.rjust(8)}  #{name}"
            end

            msg << ""
            msg << "   TRAPS    W/LORE"
            msg << "--------  --------"
            unlored = _dex_bonus + _trap_skill - 1
            lored = unlored + _traplore_bonus
            msg << "#{unlored.to_s.rjust(8)}  #{lored.to_s.rjust(8)}"

            msg << "Values shown assume a 100 on a d100 roll."
            msg << "Use `#{$lich_char}#{Script.current.name} stats` to see relevant stats and lore bonuses."
            msg << "Use `#{$lich_char}#{Script.current.name} locksize` to see suggested lockpicks for a lock of a given size."

            return msg
        end

        def show_chart
            respond format_chart
        end

        def suggest_lockpick(difficulty, margin=60, min_margin=30)
            unlored = _dex_bonus + _lock_skill
            lored = unlored + _locklore_bonus

            candidates = []

            @lockpicks.each do |name, multiplier|
                n = (unlored * multiplier).floor - 1
                roll = 100 - (n - difficulty)
                roll = 2 if roll < 2

                if roll <= 100
                    if roll > min_margin or candidates.empty?
                        candidates << [n, roll, false, name]
                    end
                end
            end

            @lockpicks.each do |name, multiplier|
                n = (lored * multiplier).floor - 1
                roll = 100 - (n - difficulty)
                roll = 2 if roll < 2

                if roll <= 100 or multiplier == 2.5
                    if roll > min_margin # or not have_lore_candidate
                        candidates << [n, roll, true, name]
                        # have_lore_candidate = true
                    end
                end
            end

            candidates.sort_by!{|x| (x[1] - margin).abs}

            msg = [
                " MAX   ROLL   LORE  LOCKPICK",
                "----  -----  -----  --------------",
            ]

            candidates.each do |n, roll, lore, lockpick|
                if lore
                    t = "lore + #{lockpick}"
                else
                    t = "       #{lockpick}"
                end
                msg << "#{n.to_s.rjust(4)}  #{roll.to_s.rjust(4)}+  #{t}"
            end

            respond msg
        end

        def run(script)
            if script.vars[1] =~ /^-?\d+$/
                n = script.vars[1].to_i.abs
                suggest_lockpick(n)
            elsif script.vars[1] =~ /stats/i
                show_bonuses
            else
                show_chart
            end
        end
    end

end

Maxlock.run(script)