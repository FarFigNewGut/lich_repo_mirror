# Boon appraise script. Will appraise all boon (miniboss / boss / pack mobs)
# and display their associated traits
#
# requires a recently updated gameobj-data.xml file that defines the BOON npc type
# to check all mobs in the room.
# ;repo download gameobj-data.xml
#
# usage:
# 	;boon_appraise - check all boon typed mobs in the room
# 	;boon_appraise rat - check a specific creature
# 	;boon_appraise #1234567 - check a specific creatures by gameobj ID
# 	                          also works without the pound sign
#
#
# tags: boon, boss, hunting, mobs, miniboss, packs
# version: 1.0

status_tags

@@boon_tiers = {
    "blink" => 3,
    "bolt shield" => 1,
    "boosted defense" => 1,
    "boosted hp" => 1,
    "boosted mana" => 1,
    "boosted offense" => 1,
    "cheat death" => 3,
    "confuse" => 3,
    "counter-attack" => 3,
    "crit death immune" => 1,
    "crit padding" => 2,
    "crit weighting" => 2,
    "damage padding" => 2,
    "damage weighting" => 2,
    "diseased" => 2,
    "dispelling" => 2,
    "elemental flares" => 2,
    "elemental negation" => 2,
    "ethereal" => 3,
    "extra spells - elemental" => 1,
    "extra spells - other" => 1,
    "extra spells - spiritual" => 1,
    "frenzy" => 2,
    "jack of all trades" => 1,
    "magic immune" => 3,
    "mind blast" => 2,
    "parting shot" => 1,
    "physical negation" => 2,
    "poisonous" => 2,
    "regeneration" => 2,
    "soul stealing" => 2,
    "stun immune" => 1,
    "terrifying" => 3,
    "weaken" => 3
}

@@boon_mapping = {
    "adroit" => "jack of all trades",
    "afflicted" => "diseased",
    "apt" => "counter-attack",
    "barbed" => "damage weighting",
    "belligerent" => "boosted offense",
    "blurry" => "confuse",
    "canny" => "mind blast",
    "combative" => "boosted offense",
    "dazzling" => "dispelling",
    "deft" => "jack of all trades",
    "diseased" => "diseased",
    "drab" => "parting shot",
    "dreary" => "parting shot",
    "ethereal" => "ethereal",
    "flashy" => "dispelling",
    "flexile" => "boosted defense",
    "flickering" => "blink",
    "flinty" => "damage padding",
    "frenzied" => "frenzy",
    "ghastly" => "terrifying",
    "ghostly" => "ethereal",
    "gleaming" => "crit weighting",
    "glittering" => "elemental flares",
    "glorious" => "cheat death",
    "glowing" => "extra spells - elemental",
    "grotesque" => "terrifying",
    "hardy" => "crit padding",
    "illustrious" => "cheat death",
    "indistinct" => "physical negation",
    "keen" => "mind blast",
    "lanky" => "weaken",
    "luminous" => "boosted mana",
    "lustrous" => "boosted mana",
    "muculent" => "regeneration",
    "nebulous" => "physical negation",
    "oozing" => "poisonous",
    "pestilent" => "diseased",
    "radiant" => "extra spells - spiritual",
    "raging" => "frenzy",
    "ready" => "counter-attack",
    "resolute" => "crit death immune",
    "robust" => "boosted hp",
    "rune-covered" => "magic immune",
    "shadowy" => "soul stealing",
    "shielded" => "bolt shield",
    "shifting" => "confuse",
    "shimmering" => "crit weighting",
    "shining" => "elemental negation",
    "sickly green" => "poisonous",
    "sinuous" => "boosted defense",
    "slimy" => "regeneration",
    "sparkling" => "elemental negation",
    "spindly" => "weaken",
    "spiny" => "damage weighting",
    "stalwart" => "boosted hp",
    "steadfast" => "stun immune",
    "stout" => "crit padding",
    "tattooed" => "magic immune",
    "tenebrous" => "soul stealing",
    "tough" => "damage padding",
    "twinkling" => "extra spells - other",
    "unflinching" => "crit death immune",
    "unyielding" => "stun immune",
    "wavering" => "blink",
    "wispy" => "ethereal"
}


@@boon_reg = @@boon_mapping.keys.map { |b| Regexp.escape(b) }.join("|")

def app_critter(mob)
	mob_resp = {"header" => nil, "boons" => []}
	trait_line = dothistimeout "appraise ##{mob.id}", 3, /prompt time|appears to be/
	traits = trait_line.scan(/\b(#{@@boon_reg})\b/)
	mob_resp['header'] = "#{monsterbold_start}#{mob.name} (#{mob.id})#{monsterbold_end}"
	unless traits.empty?
		trait_lines = {3 => [], 2 => [], 1 => []}
		traits.each { |t|
			trait_class = @@boon_mapping[t[0]]
			trait_tier = @@boon_tiers[trait_class]
			trait_lines[trait_tier].push("    #{t[0]}: #{trait_class} (tier: #{trait_tier})")
		}
		sorted_lines = trait_lines[3] + trait_lines[2] + trait_lines[1]
		sorted_lines.each { |sl| mob_resp['boons'].push(sl) }
	else
		mob_resp['boons'].push("    No traits deteced!")
	end
	return mob_resp
end

if script.vars.empty?
	critters = GameObj.targets.find_all { |n| n.type =~ /boon/ }
else
	specified_crit = script.vars[0].delete("#") # handle gameobj ID
	critters = GameObj.targets.find_all { |n| n.name =~ /#{specified_crit}/ or n.id == specified_crit.to_s }
end

critter_responses = []
critters.each { |c|
	critter_responses.push(app_critter(c))
}
critter_responses.each { |resp|
	_respond resp['header']
	resp['boons'].each { |boon_line|
		_respond boon_line
	}
	_respond ""
}
