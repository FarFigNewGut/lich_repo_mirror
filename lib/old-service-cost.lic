=begin

	This script is for calculating all the things for all of the services.
	
	Simply start up the script and enter all of the information.
	
	Enter your item's difficulty level, what the next service you want on it is, the skill of the person who is going to do the cast, and enter what the person is charging, and the script will calculate how much resources are required for your base cast, whether the person will need to use suffuse, how much suffuse is required, total resources required, total cost, and more!
	
	So take all of the guesswork out of how much your next project is going to cost and let this script do all the work for you.
	
	Changelog:
	
	Version 2: Fixed total skill required for enchant formula. It was off by just a little before, but now it's 100% accurate. Maybe.
	Version 2: Added Resist Nature support!
	Version 2: Added lots of other features!
	Version 3: Added darkmode option to the windows.
	Version 3: Added Ensorcell, Sanctify, and Warrior Grit Service. That's all of the current services! Well except Monks, but you don't need a script for that one.
	Version 4: Added a window on grit service where you can enter how many services your item has and the script will calculate how much difficulty would be added to your item if you were to get that grit service.
	Version 4: Added a "Save" button on the final window which will allow you to save the current information about your project, including updated difficulty, which services you have added to the projet with this script, how much each service cost in silvers and resources, and total cost in silvers and resources. After clicking "Save" the script starts over from the first window where you can continue to add services and save information.
	Version 4: Added option to save all current information to a file on your computer.
	Version 4: Removed "darkmode" option and replaced it with a "Setup" button on the first window which will allow you to customize the color and size of text and the color of the windows.
	Version 4: Various other quality of life features, such as a back button, an exit button, and more!
	Version 5: This is the old version of ;service-cost. I made a lot of changes to the new version so you should probably use that one, but I am leaving this up in case anyone liked the old version better. I will not be making any updates to this version.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 5

=end

require 'gtk3'

@service_automatically_choose_next_project_step = true #Set to true to automatically choose the next service step when selecting the same service again. Set to nil to still show the select service screen but it will only show the next step.

@service_color_magenta = Gdk::RGBA.new(1, 0.4, 1, 1)
@service_color_gold = Gdk::RGBA.new(1, 215.0 / 255, 0, 1)
@service_color_white = Gdk::RGBA.new(1, 1, 1, 1)
@service_color_black = Gdk::RGBA.new(0, 0, 0, 1)
@service_color_blue = Gdk::RGBA.new(0, 0, 1, 1)
@service_color_brown = Gdk::RGBA.new(0.647, 0.165, 0.165, 1.0)
@service_color_gray = Gdk::RGBA.new(0.5, 0.5, 0.5, 1.0)
@service_color_purple = Gdk::RGBA.new(0.5, 0.0, 0.5, 1.0)
@service_color_red = Gdk::RGBA.new(1, 0, 0, 1.0)
@service_color_green = Gdk::RGBA.new(0, 1, 0, 1.0)
@service_all_text_font_size = nil

if File.exist?("service_cost_setup_options.txt")
	File.open("service_cost_setup_options.txt", "r") do |file|
		@service_color_of_all_normal_text = file.readline.chomp
		@service_color_of_all_highlighted_text = file.readline.chomp
		@service_color_of_all_backgrounds = file.readline.chomp
		@service_all_text_font_size = file.readline.chomp
	end
end

@service_color_of_all_normal_text = @service_color_black if @service_color_of_all_normal_text.nil?
@service_color_of_all_highlighted_text = @service_color_red if @service_color_of_all_highlighted_text.nil?
@service_color_of_all_backgrounds = @service_color_white if @service_color_of_all_backgrounds.nil?
@service_all_text_font_size = 10 if @service_all_text_font_size.nil?

@service_information_win = nil
@service_saved_item_difficulty = nil
@service_list_all_saved_services = Array.new

@service_show_enchant_button = true
@service_show_ensorcell_button = true
@service_show_resist_nature_button = true
@service_show_sanctify_button = true
@service_show_warrior_service_button = true

@service_skip_enchant_selection = nil
@service_skip_ensorcell_selection = nil
@service_skip_resist_nature_selection = nil
@service_skip_sanctify_selection = nil
@service_skip_grit_selection = nil

@service_previous_caster_skill_enchant = nil
@service_previous_caster_skill_ensorcell = nil
@service_previous_caster_skill_resist = nil
@service_previous_caster_skill_sanctify = nil
@service_previous_caster_skill_grit = nil

@service_previous_cost_enchant = nil
@service_previous_cost_ensorcell = nil
@service_previous_cost_resist = nil
@service_previous_cost_sanctify = nil
@service_previous_cost_grit = nil

@service_number_of_grit_services = nil

@service_enchant_target_value = 0
@service_ensorcell_target_value = 0
@service_resist_target_value = 0
@service_sanctify_target_value = 0
@service_grit_target_value = 0

@service_total_cost_of_all_services_silvers = 0
@service_total_cost_of_all_resources_enchant = 0
@service_total_cost_of_all_resources_ensorcell = 0
@service_total_cost_of_all_resources_resist = 0
@service_total_cost_of_all_resources_sanctify = 0
@service_total_cost_of_all_resources_grit = 0

def create_services_window	
	@service_services_win = Gtk::Window.new
	@service_services_win.set_title("Services")
	@service_services_win.set_border_width(10)
	@service_services_win.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	@service_services_win.set_keep_above(true)
	@service_services_win.set_position(Gtk::WindowPosition::CENTER)

	vbox = Gtk::Box.new(:vertical, 10)

	hbox = Gtk::Box.new(:horizontal, 10)
	
	@service_services_win_label = Gtk::Label.new("Choose service")
	@service_services_win_label.set_halign(Gtk::Align::CENTER)
	hbox.pack_start(@service_services_win_label, :expand => true, :fill => true, :padding => 0)

	vbox.pack_start(hbox, :expand => false, :fill => false, :padding => 0)

	if @service_show_enchant_button
		enchant_button = Gtk::Button.new(:label => "Enchant (925)")
		enchant_button.signal_connect("clicked") do
			@service_service_chosen = "Enchant"
			@service_resource_name = "essence"
			@service_cost_per_point_suffuse = 400
			if @service_saved_item_difficulty
				create_service_enchant_window
			else
				create_difficulty_window
			end
			close_window(@service_services_win)
		end
	end

	if @service_show_ensorcell_button
		ensorcell_button = Gtk::Button.new(:label => "Ensorcell (735)")
		ensorcell_button.signal_connect("clicked") do
			@service_service_chosen = "Ensorcell"
			@service_resource_name = "Necrotic Energy"
			@service_cost_per_point_suffuse = 2000
			if @service_saved_item_difficulty
				create_ensorcell_window
			else
				create_difficulty_window
			end
			close_window(@service_services_win)
		end
	end

	if @service_show_resist_nature_button
		resist_nature_button = Gtk::Button.new(:label => "Resist Nature (620)")
		resist_nature_button.signal_connect("clicked") do
			@service_service_chosen = "Resist Nature"
			@service_resource_name = "Nature's Grace"
			@service_cost_per_point_suffuse = 1000
			create_resist_nature_window
			close_window(@service_services_win)
		end
	end

	if @service_show_sanctify_button
		sanctify_button = Gtk::Button.new(:label => "Sanctify (330)")
			sanctify_button.signal_connect("clicked") do
			@service_service_chosen = "Sanctify"
			@service_resource_name = "Devotion"
			@service_cost_per_point_suffuse = 2000
			if @service_saved_item_difficulty
				create_sanctify_window
			else
				create_difficulty_window
			end
			close_window(@service_services_win)
		end
	end

	if @service_show_warrior_service_button
		grit_button = Gtk::Button.new(:label => "Warrior Grit Service")
		grit_button.signal_connect("clicked") do
			@service_service_chosen = "Warrior Service"
			@service_resource_name = "Grit"
			@service_cost_per_point_suffuse = 150
			@service_base_resources_needed = 25000
			if @service_saved_item_difficulty
				create_grit_services_window
			else
				create_difficulty_window
			end
			close_window(@service_services_win)
		end
	end
	
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_services_win)
		close_window(@service_information_win)
	end
	
	setup_button = Gtk::Button.new(:label => "Setup")
	setup_button.signal_connect("clicked") do
		close_window(@service_services_win)
		service_create_set_up_window
	end

	button_box = Gtk::Box.new(:horizontal, 10)
	button_box.pack_start(enchant_button, :expand => true, :fill => true, :padding => 0) if @service_show_enchant_button
	button_box.pack_start(ensorcell_button, :expand => true, :fill => true, :padding => 0) if @service_show_ensorcell_button
	button_box.pack_start(resist_nature_button, :expand => true, :fill => true, :padding => 0) if @service_show_resist_nature_button
	button_box.pack_start(sanctify_button, :expand => true, :fill => true, :padding => 0) if @service_show_sanctify_button
	button_box.pack_start(grit_button, :expand => true, :fill => true, :padding => 0) if @service_show_warrior_service_button

	button_box_2 = Gtk::Box.new(:vertical, 10)
	button_box_2.pack_start(button_box, :expand => false, :fill => false, :padding => 0)
	button_box_2.pack_start(setup_button, :expand => false, :fill => false, :padding => 0)
	button_box_2.pack_start(exit_button, :expand => false, :fill => false, :padding => 0)

	vbox.pack_start(button_box_2, :expand => false, :fill => false, :padding => 0)

	all_labels_normal_text = [ @service_services_win_label ]
	
	all_labels_normal_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
	end
	
	@service_services_win.add(vbox)

	@service_services_win.show_all
	@service_services_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	GLib::Timeout.add(0) do
		if @service_information_win && @service_automatically_choose_next_project_step
			if @service_skip_resist_nature_selection
				resist_nature_button.clicked
			elsif @service_grit_target_value.to_i == 5000 && @service_ensorcell_target_value == 5 && @service_sanctify_target_value == 6	
				enchant_button.clicked
			elsif @service_grit_target_value.to_i == 5000 && @service_enchant_target_value == 50 && @service_sanctify_target_value == 6	
				ensorcell_button.clicked
			elsif @service_grit_target_value.to_i == 5000 && @service_enchant_target_value == 50 && @service_ensorcell_target_value == 5	
				sanctify_button.clicked
			elsif @service_enchant_target_value.to_i == 50 && @service_ensorcell_target_value == 5 && @service_sanctify_target_value == 6
				grit_button.clicked
			end
		end
		false
	end
end

def service_create_set_up_window
	@service_setup_window = Gtk::Window.new(:toplevel)
		.set_title("Text and window setup")
		.set_border_width(10)
		.set_type_hint(Gdk::WindowTypeHint::UTILITY)
		.set_keep_above(true)
		.set_position(Gtk::WindowPosition::CENTER)
	
	all_labels_to_change_text_size = []
	@all_labels_normal_text = []
	@all_highlighted_text_labels = []

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)

	title_label = Gtk::Label.new("Choose how you want the windows to look like.")
	normal_text_color_label = Gtk::Label.new("Choose color for normal text:")
	grid.attach(title_label, 0, 0, 25, 1)
	grid.attach(normal_text_color_label, 0, 1, 25, 1)
	
	color_values = [@service_color_magenta, @service_color_gold, @service_color_white, @service_color_black, @service_color_blue, @service_color_brown, @service_color_gray, @service_color_purple, @service_color_red, @service_color_green]
	color_labels = ["Magenta", "Gold", "White", "Black", "Blue", "Brown", "Gray", "Purple", "Red", "Green"]

	color_values.zip(color_labels).each_with_index do |(color, label), index|
		button = Gtk::Button.new(:label => label)
		button.signal_connect("clicked") { 
			@all_labels_normal_text.each { |label| label.override_color(Gtk::StateFlags::NORMAL, color) }
			@service_color_of_all_normal_text  = color
		}
		grid.attach(button, index % 5 * 5, (index / 5) + 2, 5, 1)
	end
  
	highlighted_text_color_label = Gtk::Label.new("Choose color for highlighted text:")
	@all_highlighted_text_labels = [highlighted_text_color_label]

	grid.attach(highlighted_text_color_label, 0, 4, 25, 1)
	
	color_values.zip(color_labels).each_with_index do |(color, label), index|
		button = Gtk::Button.new(:label => label)
		button.signal_connect("clicked") { 
			@all_highlighted_text_labels.each { |label| label.override_color(Gtk::StateFlags::NORMAL, color) }
			@service_color_of_all_highlighted_text = color
		}
		grid.attach(button, index % 5 * 5, index / 5 + 5, 5, 1)
	end
	
	color_values.zip(color_labels).each_with_index do |(color, label), index|
		button = Gtk::Button.new(:label => label)
		button.signal_connect("clicked") { 
			@service_setup_window.override_background_color(Gtk::StateFlags::NORMAL, color)
			@service_color_of_all_backgrounds = color
		}
		grid.attach(button, (index % 5) * 5, 8 + (index / 5), 5, 1)
	end

	background_color_label = Gtk::Label.new("Choose color for background:")
	grid.attach(background_color_label, 0, 7, 25, 1)
	
	font_size_label = Gtk::Label.new("Choose size of font:")
	grid.attach(font_size_label, 0, 10, 25, 1)
	@all_labels_normal_text = [normal_text_color_label, title_label, background_color_label, font_size_label]

	font_sizes = [8, 10, 12, 14, 16]
	font_size_buttons = []

	font_sizes.each_with_index do |size, i|
	font_size_buttons[i] = Gtk::Button.new(:label => "Size #{size}")
		font_size_buttons[i].signal_connect("clicked") {
			all_labels_to_change_text_size.each do |label|
				text = label.text.gsub(/<\/?[^>]*>/, "")
				label.set_markup("<span font_desc='Helvetica #{size}'>#{text}</span>")
			end
			@service_setup_window.resize(100, 100)
			@service_all_text_font_size = size
		}
		grid.attach(font_size_buttons[i], i*5, 11, 5, 1)
	end
	
	def set_colors(normal_text_color, highlighted_text_color, background_color)
		@service_color_of_all_normal_text = normal_text_color
		@service_color_of_all_highlighted_text = highlighted_text_color
		@service_color_of_all_backgrounds = background_color
		@all_labels_normal_text.each{ |label| label.override_color(Gtk::StateFlags::NORMAL, normal_text_color) }
		@all_highlighted_text_labels.each{ |label| label.override_color(Gtk::StateFlags::NORMAL, highlighted_text_color) }
		@service_setup_window.override_background_color(Gtk::StateFlags::NORMAL, background_color)
	end

	default_light_mode_label = Gtk::Button.new(:label => "Light Mode")
	default_light_mode_label.signal_connect("clicked") {
		set_colors(@service_color_black, @service_color_red, @service_color_white)
	}
	grid.attach(default_light_mode_label, 0, 13, 12, 1)
	
	default_dark_mode_label = Gtk::Button.new(:label => "Dark Mode")
	default_dark_mode_label.signal_connect("clicked") {
		set_colors(@service_color_gray, @service_color_gold, @service_color_black)
	}
	grid.attach(default_dark_mode_label, 13, 13, 12, 1)
	
	save_button = Gtk::Button.new(:label => "Save")
	save_button.signal_connect("clicked") do
		close_window(@service_setup_window)
		if @service_information_win
			@service_information_win_all_labels_normal_text.each{ |label| label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text) }
			@service_information_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
		end
		File.open("service_cost_setup_options.txt", "w") do |file|
			file.puts @service_color_of_all_normal_text
			file.puts @service_color_of_all_highlighted_text
			file.puts @service_color_of_all_backgrounds
			file.puts @service_all_text_font_size
		end
		create_services_window
	end
	grid.attach(save_button, 0, 12, 25, 1)
	
	@all_labels_normal_text.each{ |i| all_labels_to_change_text_size.push(i) }
		
	@all_labels_normal_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
	end
	
	@all_highlighted_text_labels.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@all_highlighted_text_labels.each{ |label| label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text) }
	@service_setup_window.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)

	@service_setup_window.add(grid)
	@service_setup_window.show_all
end

def create_difficulty_window
	@service_difficulty_win = Gtk::Window.new(:toplevel)
	.set_title("Item difficulty")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)

	@service_item_difficulty = ""

	title_label = Gtk::Label.new("Enter your item's difficulty.\nThis can be found by using RECALL on your item.")

	item_diff_label = Gtk::Label.new("Item difficulty: #{@service_item_difficulty}")

	buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			@service_item_difficulty += i.to_s
			update_label(item_diff_label, @service_item_difficulty, "Item difficulty:")
		end
		buttons << button
	end

	delete_button = Gtk::Button.new(:label => "Delete")
	delete_button.signal_connect("clicked") do
		@service_item_difficulty = @service_item_difficulty.chop
		update_label(item_diff_label, @service_item_difficulty, "Item difficulty:")
	end
	buttons << delete_button
  
	delete_button = Gtk::Button.new(:label => "Reset")
	delete_button.signal_connect("clicked") do
		@service_item_difficulty = ""
		update_label(item_diff_label, @service_item_difficulty, "Item difficulty:")
	end
	buttons << delete_button

	finished_button = Gtk::Button.new(:label => "Finished")
	finished_button.signal_connect("clicked") do
		@service_item_difficulty = 0 if @service_item_difficulty.length < 1
		close_window(@service_difficulty_win)
		if @service_service_chosen == "Enchant"
			create_service_enchant_window
		elsif @service_service_chosen == "Ensorcell"
			create_ensorcell_window
		elsif @service_service_chosen == "Sanctify"
			create_sanctify_window
		elsif @service_service_chosen == "Warrior Service"
			create_grit_services_window
		end
	end
	buttons << finished_button

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 9, 1)
	grid.attach(item_diff_label, 0, 1, 5, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 2, 1, 1)
	end
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		create_services_window
		close_window(@service_difficulty_win)
	end
	grid.attach(back_button, 0, 10, 10, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_difficulty_win)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, 11, 10, 1)

	all_labels_normal_text = [ title_label ]
	all_labels_highlighted_text = [ item_diff_label ]
	
	all_labels_normal_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
	end
	
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@service_difficulty_win.add(grid)
	@service_difficulty_win.show_all
	@service_difficulty_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
end

def create_resist_nature_window
	@service_resist_win = Gtk::Window.new(:toplevel)
	.set_title("Next Resist Nature cast")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)
  
	title_label = Gtk::Label.new("Click your next Resist Nature cast.\nR refers to how many current resistances your trinket has (add 1 if your next service is T1.)\nT refers to what Tier your current resistance is at.\nExample if you have 3 resistances on your trinket, and your current resistance is T5, click R4T1.\nExample if you have no casts on your trinket, click R1T1.")
	title_label.set_size_request(200, 50)
	
	buttons = []
	1.upto(5) do |r|
		1.upto(5) do |t|
			show_the_button = nil
			if @service_resist_target_value == 0
				show_the_button = true
			else
				ints = @service_resist_target_value.scan(/\d+/).map(&:to_i)
				if (r.to_i == (ints[0] + 1)) && (ints[1] == 5) && (t.to_i == 1)
					show_the_button = true
				elsif (r.to_i == ints[0] ) && ((ints[1] + 1) == t.to_i)
					show_the_button = true
				end
			end
			if show_the_button
				label = "R#{r}T#{t}"
				button = Gtk::Button.new(:label => "R#{r}T#{t}")
				button.signal_connect("clicked") do
					case t
					when 1
						@service_base_resources_needed = 50000
						@service_tier_being_worked_on = 1
					when 2
						@service_base_resources_needed = 75000
						@service_tier_being_worked_on = 2
					when 3
						@service_base_resources_needed = 100000
						@service_tier_being_worked_on = 3
					when 4
						@service_base_resources_needed = 125000
						@service_tier_being_worked_on = 4
					when 5
						@service_base_resources_needed = 150000
						@service_tier_being_worked_on = 5
					end

					case r
					when 1
						@service_item_difficulty = 100 + (t - 1) * 100
					when 2
						@service_item_difficulty = 250 + (t - 1) * 100
					when 3
						@service_item_difficulty = 400 + (t - 1) * 100
					when 4
						@service_item_difficulty = 550 + (t - 1) * 100
					when 5
						@service_item_difficulty = 700 + (t - 1) * 100
					end
					@service_service_wanted = label
					@service_resist_target_value = label
					close_window(@service_resist_win)
					create_cost_window
				end
				buttons << button
				@service_last_button_created = button
			end
		end
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		create_services_window
		close_window(@service_resist_win)
	end
	grid.attach(back_button, 0, 10, 5, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_resist_win)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, 11, 5, 1)
	
	all_labels_highlighted_text = [ title_label ]
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@service_resist_win.add(grid)
	@service_resist_win.show_all
	@service_resist_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	GLib::Timeout.add(0) do
		@service_last_button_created.clicked if @service_information_win && @service_automatically_choose_next_project_step && @service_skip_resist_nature_selection
		false
	end
end

def create_grit_services_window
	cer_services_pairs = {
		0 => 0,
		1 => 10,
		2 => 20,
		3 => 30,
		4 => 40,
		5 => 50,
		6 => 70,
		7 => 90,
		8 => 110,
		9 => 130,
		10 => 150,
		11 => 180,
		12 => 210,
		13 => 240,
		14 => 270,
		15 => 300,
		16 => 340,
		17 => 380,
		18 => 420,
		19 => 460,
		20 => 500,
		21 => 600,
		22 => 700,
		23 => 800,
		24 => 900,
		25 => 1000,
		26 => 1100,
		27 => 1200,
		28 => 1300,
		29 => 1400,
		30 => 1500,
		31 => 1600,
		32 => 1700,
		33 => 1800,
		34 => 1900,
		35 => 2000,
		36 => 2100,
		37 => 2200,
		38 => 2300,
		39 => 2400,
		40 => 2500,
		41 => 2700,
		42 => 2900,
		43 => 3100,
		44 => 3300,
		45 => 3500,
		46 => 3800,
		47 => 4100,
		48 => 4400,
		49 => 4700,
		50 => 5000,
		51 => 5001,
	}
	
	@service_difficulty_being_added_to_item = 0

	@service_grit_window = Gtk::Window.new(:toplevel)
	.set_title("Number of CER services")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)

	@service_number_of_grit_services = ""
	
	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)

	title_label = Gtk::Label.new("Enter your item's number of CER services.")

	label = Gtk::Label.new("CER services: #{@service_number_of_grit_services}")

	buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			@service_number_of_grit_services += i.to_s
			update_label(label, @service_number_of_grit_services, "CER services:")
		end
		buttons << button
	end

	delete_button = Gtk::Button.new(:label => "Delete")
	delete_button.signal_connect("clicked") do
		@service_number_of_grit_services = @service_number_of_grit_services.chop
		update_label(label, @service_number_of_grit_services, "CER services:")
	end
	buttons << delete_button
  
	delete_button = Gtk::Button.new(:label => "Reset")
	delete_button.signal_connect("clicked") do
		@service_number_of_grit_services = ""
		update_label(label, @service_number_of_grit_services, "CER services:")
	end
	buttons << delete_button

	finished_button = Gtk::Button.new(:label => "Finished")
	finished_button.signal_connect("clicked") do
		if @service_grit_target_value != 0
			@service_number_of_grit_services = @service_grit_target_value
		elsif @service_number_of_grit_services.length < 1
			@service_number_of_grit_services = 0
		end
		
		current_cer_value = nil
		one_up_from_current_cer_value = nil

		if @service_number_of_grit_services.to_i >= 5000
			@service_number_of_grit_services = ""
			update_label(label, @service_number_of_grit_services, "CER services:")
			cannot_add_more_services_label = Gtk::Label.new
			cannot_add_more_services_label.set_markup("<span font_desc='Helvetica 16'>CER services are capped at 5,000.</span>")
			grid.attach(cannot_add_more_services_label, 0, 0, 10, 1)
			@service_grit_window.show_all
			@service_grit_window.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
		else
			cer_services_pairs.each do |key, value|
				if @service_number_of_grit_services.to_i == value
					current_cer_value = key
					one_up_from_current_cer_value = key + 1
					break
				elsif @service_number_of_grit_services.to_i <= value
					current_cer_value = key - 1
					one_up_from_current_cer_value = key
					break
				end
			end

			new_number_of_item_services = @service_number_of_grit_services.to_i + 1
			upgraded_cer_value = nil
			one_up_from_upgraded_cer_value = nil

			cer_services_pairs.each do |key, value|
				if new_number_of_item_services == value
					upgraded_cer_value = key
					one_up_from_upgraded_cer_value = key + 1
					break
				elsif new_number_of_item_services <= value
					upgraded_cer_value = key - 1
					one_up_from_upgraded_cer_value = key
					break
				end
			end
			
			current_grit_difficulty = (((@service_number_of_grit_services.to_f - cer_services_pairs[current_cer_value]) / (cer_services_pairs[one_up_from_current_cer_value] - cer_services_pairs[current_cer_value]) + current_cer_value) ** 2).round

			new_grit_difficulty = (((new_number_of_item_services.to_f - cer_services_pairs[upgraded_cer_value]) / (cer_services_pairs[one_up_from_upgraded_cer_value] - cer_services_pairs[upgraded_cer_value]) + upgraded_cer_value) ** 2).round

			@service_difficulty_being_added_to_item = new_grit_difficulty - current_grit_difficulty
			@service_service_wanted = "CER service number #{(@service_number_of_grit_services.to_i + 1).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
			@service_grit_target_value = @service_number_of_grit_services.to_i + 1
			close_window(@service_grit_window)
			create_cost_window
		end
	end
	buttons << finished_button
  
	grid.attach(title_label, 0, 1, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 3, 1, 1)
	end

	grid.attach(label, 0, 2, 5, 1)
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		if @service_skip_enchant_selection || @service_skip_ensorcell_selection || @service_skip_sanctify_selection || @service_skip_grit_selection
			create_services_window
		else
			create_difficulty_window
		end
		close_window(@service_grit_window)
	end
	grid.attach(back_button, 0, 10, 5, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_grit_window)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, 11, 5, 1)

	all_labels_highlighted_text = [ title_label, label ]
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@service_grit_window.add(grid)
	@service_grit_window.show_all
	@service_grit_window.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	GLib::Timeout.add(0) do
		finished_button.clicked if @service_information_win && @service_automatically_choose_next_project_step && @service_skip_grit_selection
		false
	end
end

def create_ensorcell_window
	@service_ensorcell_win = Gtk::Window.new(:toplevel)
	.set_title("Next Ensorcell cast")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)
  
	title_label = Gtk::Label.new("Click your next Ensorcell cast.")
	title_label.set_size_request(200, 50)
	
	buttons = []
	1.upto(5) do |t|
		if (t.to_i == (@service_ensorcell_target_value + 1)) || @service_ensorcell_target_value == 0
			label = "T#{t}"
			button = Gtk::Button.new(:label => "T#{t}")
			button.signal_connect("clicked") do
				case t
				when 1
					@service_base_resources_needed = 50000
					@service_tier_being_worked_on = 1
					@service_ensorcell_target_value = 1
				when 2
					@service_base_resources_needed = 75000
					@service_tier_being_worked_on = 2
					@service_ensorcell_target_value = 2
				when 3
					@service_base_resources_needed = 100000
					@service_tier_being_worked_on = 3
					@service_ensorcell_target_value = 3
				when 4
					@service_base_resources_needed = 125000
					@service_tier_being_worked_on = 4
					@service_ensorcell_target_value = 4
				when 5
					@service_base_resources_needed = 150000
					@service_tier_being_worked_on = 5
					@service_ensorcell_target_value = 5
				end
				@service_service_wanted = label
				create_cost_window
				close_window(@service_ensorcell_win)
			end
			buttons << button
			@service_last_button_created = button
		end
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		if @service_skip_enchant_selection || @service_skip_ensorcell_selection || @service_skip_sanctify_selection || @service_skip_grit_selection
			create_services_window
		else
			create_difficulty_window
		end
		close_window(@service_ensorcell_win)
	end
	grid.attach(back_button, 0, 10, 5, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_ensorcell_win)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, 11, 5, 1)

	all_labels_highlighted_text = [ title_label ]
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@service_ensorcell_win.add(grid)
	@service_ensorcell_win.show_all
	@service_ensorcell_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	GLib::Timeout.add(0) do
		@service_last_button_created.clicked if @service_information_win && @service_automatically_choose_next_project_step && @service_skip_ensorcell_selection
		false
	end
end

def create_sanctify_window
	@service_sanctify_win = Gtk::Window.new(:toplevel)
	.set_title("Next Sanctify cast")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)
  
	title_label = Gtk::Label.new("Click your next Sanctify cast.")
	title_label.set_size_request(200, 50)
	
	button_label_to_values_map = {
		"S1" => { base_resources_needed: 50000, tier_being_worked_on: 1, sanctify_target_value: 1 },
		"S2" => { base_resources_needed: 75000, tier_being_worked_on: 2, sanctify_target_value: 2 },
		"S3" => { base_resources_needed: 100000, tier_being_worked_on: 3, sanctify_target_value: 3 },
		"S4" => { base_resources_needed: 125000, tier_being_worked_on: 4, sanctify_target_value: 4 },
		"S5" => { base_resources_needed: 150000, tier_being_worked_on: 5, sanctify_target_value: 5 },
		"S6" => { base_resources_needed: 200000, tier_being_worked_on: 6, sanctify_target_value: 6 }
	}

	buttons = []
	1.upto(6) do |t|
		if (t.to_i == (@service_sanctify_target_value + 1)) || @service_sanctify_target_value == 0
			label = "S#{t}"
			button = Gtk::Button.new(:label => label)
			button.signal_connect("clicked") do
				values = button_label_to_values_map[label]
				@service_base_resources_needed = values[:base_resources_needed]
				@service_tier_being_worked_on = values[:tier_being_worked_on]
				@service_sanctify_target_value = values[:sanctify_target_value]
				@service_service_wanted = label
				create_cost_window
				close_window(@service_sanctify_win)
			end
			buttons << button
			@service_last_button_created = button
		end
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		if @service_skip_enchant_selection || @service_skip_ensorcell_selection || @service_skip_sanctify_selection || @service_skip_grit_selection
			create_services_window
		else
			create_difficulty_window
		end
		close_window(@service_sanctify_win)
	end
	grid.attach(back_button, 0, 10, 5, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_sanctify_win)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, 11, 5, 1)

	all_labels_highlighted_text = [ title_label ]
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@service_sanctify_win.add(grid)
	@service_sanctify_win.show_all
	@service_sanctify_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	GLib::Timeout.add(0) do
		@service_last_button_created.clicked if @service_information_win && @service_automatically_choose_next_project_step && @service_skip_sanctify_selection
		false
	end
end

def update_label(label, text, label_text)
	update_text = "#{label_text} #{text.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
end

def create_service_enchant_window
	@service_enchant_win = Gtk::Window.new(:toplevel)
	.set_title("Next Enchant")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)
  
	title_label = Gtk::Label.new("Click your next enchant.\nExample if your current enchant is +25 then click on +26.")
	title_label.set_size_request(200, 50)

	buttons = []
	1.upto(50) do |i|
		if i == @service_enchant_target_value.to_i + 1 || @service_enchant_target_value == 0
			button = Gtk::Button.new(:label => "+#{i}")
			button.signal_connect("clicked") do
				@service_service_wanted = "+#{i}"
				@service_enchant_target_value = i
				@service_base_resources_needed = 
				if i <= 24
				  ((i - 1) * 312.5).truncate
				elsif i <= 50
				  (i - 24) * 7500
				end
				close_window(@service_enchant_win)
				create_cost_window
			end
			buttons << button
			@service_last_button_created = button
		end
	end

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
  
	grid.attach(title_label, 0, 0, 10, 1)
  
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, index / 5 + 1, 1, 1)
	end
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		if @service_skip_enchant_selection || @service_skip_ensorcell_selection || @service_skip_sanctify_selection || @service_skip_grit_selection
			create_services_window
		else
			create_difficulty_window
		end
		close_window(@service_enchant_win)
	end
	grid.attach(back_button, 0, 11, 5, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_enchant_win)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, 12, 5, 1)
	
	all_labels_highlighted_text = [ title_label ]
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end

	@service_enchant_win.add(grid)
	@service_enchant_win.show_all
	@service_enchant_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	GLib::Timeout.add(0) do
		@service_last_button_created.clicked if @service_information_win && @service_automatically_choose_next_project_step && @service_skip_enchant_selection
		false
	end
end

def create_cost_window
	@service_weekly_or_per_point_cost = ""
	@service_caster_skill = ""
	@service_resources_from_suffuse_needed = 0
	@service_amount_suffuse_needed = 0
	
	if @service_service_chosen == "Enchant"
		@service_caster_skill = @service_previous_caster_skill_enchant if @service_previous_caster_skill_enchant
		@service_weekly_or_per_point_cost = @service_previous_cost_enchant if @service_previous_cost_enchant 
	elsif @service_service_chosen == "Ensorcell"
		@service_caster_skill = @service_previous_caster_skill_ensorcell if @service_previous_caster_skill_ensorcell
		@service_weekly_or_per_point_cost = @service_previous_cost_ensorcell if @service_previous_cost_ensorcell 
	elsif @service_service_chosen == "Resist Nature"
		@service_caster_skill = @service_previous_caster_skill_resist if @service_previous_caster_skill_resist
		@service_weekly_or_per_point_cost = @service_previous_cost_resist if @service_previous_cost_resist 
	elsif @service_service_chosen == "Sanctify"
		@service_caster_skill = @service_previous_caster_skill_sanctify if @service_previous_caster_skill_sanctify
		@service_weekly_or_per_point_cost = @service_previous_cost_sanctify if @service_previous_cost_sanctify 
	elsif @service_service_chosen == "Warrior Service"
		@service_caster_skill = @service_previous_caster_skill_grit if @service_previous_caster_skill_grit
		@service_weekly_or_per_point_cost = @service_previous_cost_grit if @service_previous_cost_grit 
	end

	@service_cost_win = Gtk::Window.new(:toplevel)
	.set_title("Cost of #{@service_resource_name} and skill of caster")
	.set_border_width(10)
	.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	.set_keep_above(true)
	.set_position(Gtk::WindowPosition::CENTER)
	
	add_auto_chosen_service_label = nil
	add_auto_chosen_service_label = true if (@service_skip_enchant_selection && @service_service_chosen == "Enchant") || (@service_skip_ensorcell_selection && @service_service_chosen == "Ensorcell") || (@service_skip_resist_nature_selection && @service_service_chosen == "Resist Nature") || (@service_skip_sanctify_selection && @service_service_chosen == "Sanctify")|| (@service_skip_grit_selection && @service_service_chosen == "Warrior Service")
	if add_auto_chosen_service_label
		service_auto_chosen = Gtk::Label.new
		service_auto_chosen.set_markup("<span font_desc='Helvetica 14'>Next step in service automatically chosen.</span>")
	end
	
	wanted_and_chosen_service = Gtk::Label.new
	if @service_service_chosen == "Warrior Service"
		wanted_and_chosen_service.set_markup("<span font_desc='Helvetica 14'>Information for: #{@service_service_wanted}</span>")
	else
		wanted_and_chosen_service.set_markup("<span font_desc='Helvetica 14'>Information for: #{@service_service_chosen} #{@service_service_wanted}</span>")
	end

	if @service_service_chosen == "Enchant"
		enter_cost_per_point = Gtk::Label.new("Enter silver cost per point of #{@service_resource_name} below.")
	elsif @service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		enter_cost_per_point = Gtk::Label.new("Enter silver cost per 1 week's of #{@service_resource_name} below.")
	elsif @service_service_chosen = "Warrior Service"
		enter_cost_per_point = Gtk::Label.new("Enter silver cost per 1 Warrior Service below.")
	end
 	
	skill_of_caster = Gtk::Label.new("Enter skill of caster below.")
 	
	@service_cost_win_skill_caster_label = Gtk::Label.new("Skill bonus of caster: #{@service_caster_skill.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	
	one_percent_failure_label = Gtk::Label.new("There is always at least a 1% chance of failure.")
 
	if @service_service_chosen == "Enchant"
		@service_cost_win_cost_label = Gtk::Label.new("Silver cost per point of #{@service_resource_name}: #{@service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	elsif @service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		@service_cost_win_cost_label = Gtk::Label.new("Silver cost per 1 week's of #{@service_resource_name}: #{@service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	elsif @service_service_chosen = "Warrior Service"
		@service_cost_win_cost_label = Gtk::Label.new("Silver cost per 1 Warrior Service: #{@service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	end
	
	if @service_service_chosen == "Enchant"
		starting_difficulty_modifier = ((((@service_enchant_target_value.to_i - 1) - 2) ** 2) / 9.0).round
		ending_difficulty_modifier = (((@service_enchant_target_value.to_i - 2) ** 2) / 9.0).round
		@service_difficulty_being_added_to_item = ending_difficulty_modifier - starting_difficulty_modifier
		@service_skill_needed_for_best_chance = (@service_item_difficulty.to_i + @service_difficulty_being_added_to_item) + 100
	elsif @service_service_chosen == "Resist Nature"
		@service_skill_needed_for_best_chance = @service_item_difficulty.to_i + 100
	elsif @service_service_chosen == "Ensorcell"
		@service_difficulty_being_added_to_item = 50
		@service_skill_needed_for_best_chance = (@service_item_difficulty.to_i + @service_difficulty_being_added_to_item) + 100
	elsif @service_service_chosen == "Sanctify"
		if @service_tier_being_worked_on == 6
			@service_difficulty_being_added_to_item = 50
			@service_skill_needed_for_best_chance = (@service_item_difficulty.to_i + @service_difficulty_being_added_to_item) + 100
		else
			@service_difficulty_being_added_to_item = 20
			@service_skill_needed_for_best_chance = (@service_item_difficulty.to_i + @service_difficulty_being_added_to_item) + 100
		end
	elsif @service_service_chosen == "Warrior Service"
		@service_skill_needed_for_best_chance = @service_item_difficulty.to_i + 101
	end
	skill_needed = Gtk::Label.new("Skill bonus needed for best chance: #{@service_skill_needed_for_best_chance.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")

	@service_cost_win_casters_success_chance_label = Gtk::Label.new("Caster's success chance without suffuse: N/A")
	cost_suffuse_label = Gtk::Label.new("Each point of suffuse costs #{@service_cost_per_point_suffuse.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} #{@service_resource_name}.")
	items_difficulty = Gtk::Label.new("Item difficulty: #{@service_item_difficulty.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}")
	wanted_service_description = Gtk::Label.new("Service wanted: #{@service_service_wanted} (#{@service_base_resources_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} #{@service_resource_name} (#{(@service_base_resources_needed / 50000.0).round(2)} weeks))")
	@service_cost_win_total_resource_required_label = Gtk::Label.new("Total #{@service_resource_name} required: #{@service_base_resources_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_base_resources_needed / 50000.0).round(2)} weeks)")
	@service_cost_win_total_cost_label = Gtk::Label.new("Total cost: 0 silvers")
	@service_cost_win_suffuse_required_label = Gtk::Label.new("Suffuse needed for 100% success:\nN/A")
	@service_cost_win_cost_from_suffuse_label = Gtk::Label.new("Suffuse cost: N/A")
	@service_cost_win_base_cost_label = Gtk::Label.new("Base cost: N/A")
	blank_line_label = Gtk::Label.new(" " * 160)
	
	all_labels_highlighted_text = [ one_percent_failure_label, @service_cost_win_cost_label, @service_cost_win_skill_caster_label ]
	all_labels_highlighted_text.push(service_auto_chosen) if add_auto_chosen_service_label
	all_labels_highlighted_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
	end
	
	all_labels_normal_text = [ skill_of_caster, enter_cost_per_point, skill_needed, @service_cost_win_casters_success_chance_label, cost_suffuse_label, items_difficulty, wanted_service_description, @service_cost_win_total_resource_required_label, @service_cost_win_total_cost_label, @service_cost_win_suffuse_required_label, @service_cost_win_cost_from_suffuse_label, @service_cost_win_base_cost_label, wanted_and_chosen_service ]
	
	all_labels_normal_text.each do |label|
		label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{label.label}</span>")
		label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
	end

	buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			@service_weekly_or_per_point_cost += i.to_s
			update_all_cost_win_labels
		end
		buttons << button
	end

	delete_button = Gtk::Button.new(:label => "Delete")
	delete_button.signal_connect("clicked") do
		@service_weekly_or_per_point_cost = @service_weekly_or_per_point_cost.chop
		update_all_cost_win_labels
	end
	buttons << delete_button
  
	reset_button = Gtk::Button.new(:label => "Reset")
	reset_button.signal_connect("clicked") do
		@service_weekly_or_per_point_cost = ""
		update_all_cost_win_labels
	end
	buttons << reset_button

	second_set_buttons = []
	0.upto(9) do |i|
		button = Gtk::Button.new(:label => "#{i}")
		button.signal_connect("clicked") do
			@service_caster_skill += i.to_s 
			update_all_cost_win_labels
		end
		second_set_buttons << button
	end

	delete_button_2 = Gtk::Button.new(:label => "Delete")
	delete_button_2.signal_connect("clicked") do
		@service_caster_skill = @service_caster_skill.chop	
		update_all_cost_win_labels
	end
	second_set_buttons << delete_button_2
  
	delete_button_2 = Gtk::Button.new(:label => "Reset")
	delete_button_2.signal_connect("clicked") do
		@service_caster_skill = ""
		update_all_cost_win_labels
	end
	second_set_buttons << delete_button_2

	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
	grid.attach(service_auto_chosen, 0, 0, 5, 1) if add_auto_chosen_service_label
	grid.attach(wanted_and_chosen_service, 0, 1, 5, 1)
	grid.attach(enter_cost_per_point, 0, 2, 5, 1)
	grid.attach(@service_cost_win_cost_label, 0, 3, 5, 1)
	buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, (index / 5) + 4, 1, 1)
	end
	
	grid.attach(skill_of_caster, 0, 7, 5, 1)
	grid.attach(@service_cost_win_skill_caster_label, 0, 8, 5, 1)
	second_set_buttons.each_with_index do |button, index|
		grid.attach(button, index % 5, (index / 5) + 9, 1, 1)
	end

	grid_position = 11
	grid.attach(one_percent_failure_label, 0, grid_position += 1, 5, 1)
	grid.attach(cost_suffuse_label, 0, grid_position += 1, 5, 1)
	grid.attach(items_difficulty, 0, grid_position += 1, 5, 1)
	grid.attach(skill_needed, 0, grid_position += 1, 5, 1)
	grid.attach(@service_cost_win_casters_success_chance_label, 0, grid_position += 1, 5, 1)
	grid.attach(wanted_service_description, 0, grid_position += 1, 5, 1)
	grid.attach(@service_cost_win_suffuse_required_label, 0, grid_position += 1, 5, 1)
	grid.attach(@service_cost_win_total_resource_required_label, 0, grid_position += 1, 5, 1)
	grid.attach(@service_cost_win_base_cost_label, 0, grid_position += 1, 5, 1)
	grid.attach(@service_cost_win_cost_from_suffuse_label, 0, grid_position += 1, 5, 1)
	grid.attach(@service_cost_win_total_cost_label, 0, grid_position += 1, 5, 1)

	grid.attach(blank_line_label, 0, grid_position += 1, 5, 1)

	save_button = Gtk::Button.new(:label => "Save")
	save_button.signal_connect("clicked") do
		if @service_service_chosen == "Enchant"
			@service_previous_caster_skill_enchant = @service_caster_skill
			@service_previous_cost_enchant = @service_weekly_or_per_point_cost
		elsif @service_service_chosen == "Ensorcell"
			@service_previous_caster_skill_ensorcell = @service_caster_skill
			@service_previous_cost_ensorcell = @service_weekly_or_per_point_cost
		elsif @service_service_chosen == "Resist Nature"
			@service_previous_caster_skill_resist = @service_caster_skill
			@service_previous_cost_resist = @service_weekly_or_per_point_cost
		elsif @service_service_chosen == "Sanctify"
			@service_previous_caster_skill_sanctify = @service_caster_skill
			@service_previous_cost_sanctify = @service_weekly_or_per_point_cost
		elsif @service_service_chosen == "Warrior Service"
			@service_previous_caster_skill_grit = @service_caster_skill
			@service_previous_cost_grit = @service_weekly_or_per_point_cost
		end
		update_all_cost_win_labels
		if @service_information_win
			update_info_window_info
		else
			create_information_window
		end
		if @service_service_chosen =~ /Warrior Service|Sanctify|Ensorcell|Enchant/
			@service_show_resist_nature_button = nil
			@service_show_enchant_button = nil if @service_enchant_target_value.to_i == 50
			@service_show_ensorcell_button = nil if @service_ensorcell_target_value == 5
			@service_show_sanctify_button = nil if @service_sanctify_target_value == 6
			@service_show_warrior_service_button = nil if @service_grit_target_value == 5000
		elsif @service_service_chosen == "Resist Nature"
			@service_show_enchant_button = nil
			@service_show_ensorcell_button = nil
			@service_show_sanctify_button = nil
			@service_show_warrior_service_button = nil
			ints = @service_resist_target_value.scan(/\d+/).map(&:to_i)
			@service_show_resist_nature_button = nil if ints[0] == 5 && ints[1] == 5
		end
		create_services_window
		close_window(@service_cost_win)
	end
	grid.attach(save_button, 0, grid_position += 1, 5, 1)
	
	back_button = Gtk::Button.new(:label => "Back")
	back_button.signal_connect("clicked") do
		if @service_service_chosen == "Enchant"
			@service_enchant_target_value = @service_current_round_starting_target_value_enchant.dup
			if @service_skip_enchant_selection
				create_services_window
			else
				create_service_enchant_window
			end
			close_window(@service_cost_win)
		elsif @service_service_chosen == "Ensorcell"
			@service_ensorcell_target_value = @service_current_round_starting_target_value_ensorcell.dup
			if @service_skip_ensorcell_selection
				create_services_window
			else
				create_ensorcell_window
			end
			close_window(@service_cost_win)
		elsif @service_service_chosen == "Resist Nature"
			if @service_skip_resist_nature_selection.nil?
				@service_resist_target_value = @service_current_round_starting_target_value_resist.dup
				close_window(@service_cost_win)
				create_resist_nature_window
			end
		elsif @service_service_chosen == "Sanctify"
			@service_sanctify_target_value = @service_current_round_starting_target_value_sanctify.dup
			if @service_skip_sanctify_selection
				create_services_window
			else
				create_sanctify_window
			end
			close_window(@service_cost_win)
		elsif @service_service_chosen == "Warrior Service"
			@service_grit_target_value = @service_current_round_starting_target_value_grit.dup
			if @service_skip_grit_selection
				create_services_window
			else
				create_grit_services_window
			end
			close_window(@service_cost_win)
		end
	end
	grid.attach(back_button, 0, grid_position += 1, 5, 1)
  
	exit_button = Gtk::Button.new(:label => "Exit")
	exit_button.signal_connect("clicked") do
		close_window(@service_cost_win)
		close_window(@service_information_win)
	end
	grid.attach(exit_button, 0, grid_position += 1, 5, 1)

	@service_cost_win.add(grid)
	@service_cost_win.show_all
	@service_cost_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
end

def update_all_cost_win_labels
	@service_cost_win.resize(100, 100)
	update_cost_label(@service_cost_win_cost_label)
	update_skill_label(@service_cost_win_skill_caster_label)
	update_required_suffuse_label(@service_cost_win_suffuse_required_label)
	update_base_cost_label(@service_cost_win_base_cost_label)
	update_suffuse_cost_label(@service_cost_win_cost_from_suffuse_label)
	update_resource_total_label(@service_cost_win_total_resource_required_label)
	update_casters_success_chance_label(@service_cost_win_casters_success_chance_label)
	update_total_cost(@service_cost_win_total_cost_label)
end

def create_information_window
	@service_information_win = Gtk::Window.new(:toplevel)
	.set_title("Item Information")
	.set_border_width(10)
	.move(0, 0)
	.set_size_request(100, 100)

	@service_information_list_all_services_label = Gtk::Label.new
	
	@service_information_total_running_cost  = Gtk::Label.new
	
	@service_info_win_font_size = 8
	
	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
	grid_position = 0

	checkbox1 = Gtk::RadioButton.new("Font size 8")
	@service_information_win_label1 = checkbox1.children[0]
	checkbox1.signal_connect("toggled") do |widget|
		if widget.active?
			@service_info_win_font_size = 8
			update_font_size_info_window
		end
	end
	grid.attach(checkbox1, 1, grid_position, 1, 1)

	checkbox2 = Gtk::RadioButton.new(checkbox1, "Font size 10")
	@service_information_win_label2 = checkbox2.children[0]
	checkbox2.signal_connect("toggled") do |widget|
		if widget.active?
			@service_info_win_font_size = 10
			update_font_size_info_window
		end
	end
	grid.attach(checkbox2, 2, grid_position, 1, 1)

	checkbox3 = Gtk::RadioButton.new(checkbox1, "Font size 12")
	@service_information_win_label3 = checkbox3.children[0]
	checkbox3.signal_connect("toggled") do |widget|
		if widget.active?
			@service_info_win_font_size = 12
			update_font_size_info_window
		end
	end
	grid.attach(checkbox3, 3, grid_position, 1, 1)

	checkbox4 = Gtk::RadioButton.new(checkbox1, "Font size 14")
	@service_information_win_label4 = checkbox4.children[0]
	checkbox4.signal_connect("toggled") do |widget|
		if widget.active?
			@service_info_win_font_size = 14
			update_font_size_info_window
		end
	end
	grid.attach(checkbox4, 4, grid_position, 1, 1)

	checkbox5 = Gtk::RadioButton.new(checkbox1, "Font size 16")
	@service_information_win_label5 = checkbox5.children[0]
	checkbox5.signal_connect("toggled") do |widget|
		if widget.active?
			@service_info_win_font_size = 16
			update_font_size_info_window
		end
	end
	grid.attach(checkbox5, 5, grid_position, 1, 1)
	
	file_name = "Service Cost Information for #{checkname}.txt"
	@service_cost_win_casters_success_chance_label = Gtk::Label.new("Click to save information to a file.\nFile will be saved to your Lich directory named: #{file_name}")
	grid.attach(@service_cost_win_casters_success_chance_label, 0, grid_position + 1, 5, 1)
	
	exit_button = Gtk::Button.new(:label => "Save")
	exit_button.signal_connect("clicked") do
		File.write("#{file_name}", @service_list_all_saved_services.join("\n")) if @service_do_not_save_again.nil?
		@service_do_not_save_again = true
	end
	grid.attach(exit_button, 0, grid_position += 2, 5, 1)

	grid.attach(@service_information_total_running_cost, 0, grid_position += 1, 5, 1)

	grid.attach(@service_information_list_all_services_label, 0, grid_position += 1, 5, 1)
	
	@service_information_win_all_labels_normal_text = [ @service_information_win_label1, @service_information_win_label2, @service_information_win_label3, @service_information_win_label4, @service_information_win_label5, @service_information_list_all_services_label, @service_cost_win_casters_success_chance_label ]
	
	@service_information_win_all_labels_normal_text.each{ |label| label.set_markup("<span font_desc='Helvetica #{@service_info_win_font_size}'>#{label.label}</span>")}
	
	@service_information_win.override_background_color(Gtk::StateFlags::NORMAL, @service_color_of_all_backgrounds)
	
	update_info_window_info
	
	@service_information_win.add(grid)
	@service_information_win.show_all
end

def update_info_window_info
	@service_do_not_save_again = nil
	if @service_service_chosen == "Enchant"
		@service_skip_enchant_selection = true
		@service_total_cost_of_all_resources_enchant += @service_resource_total_needed.to_i
	elsif @service_service_chosen == "Ensorcell"
		@service_skip_ensorcell_selection = true
		@service_total_cost_of_all_resources_ensorcell += @service_resource_total_needed.to_i
	elsif @service_service_chosen == "Resist Nature"
		@service_skip_resist_nature_selection = true
		@service_total_cost_of_all_resources_resist += @service_resource_total_needed.to_i
	elsif @service_service_chosen == "Sanctify"
		@service_skip_sanctify_selection = true
		@service_total_cost_of_all_resources_sanctify += @service_resource_total_needed.to_i
	elsif @service_service_chosen == "Warrior Service"
		@service_skip_grit_selection = true
		@service_total_cost_of_all_resources_grit += @service_resource_total_needed.to_i
	end
	
	enchant_info = "Total #{@service_resource_name}: #{@service_total_cost_of_all_resources_enchant.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_total_cost_of_all_resources_enchant / 50000.0).round(2)} weeks)"
	
	ensorcell_info = "Total #{@service_resource_name}: #{@service_total_cost_of_all_resources_ensorcell.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_total_cost_of_all_resources_ensorcell / 50000.0).round(2)} weeks)"
	
	resist_info = "Total #{@service_resource_name}: #{@service_total_cost_of_all_resources_resist.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_total_cost_of_all_resources_resist / 50000.0).round(2)} weeks)"
	
	sanctify_info = "Total #{@service_resource_name}: #{@service_total_cost_of_all_resources_sanctify.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_total_cost_of_all_resources_sanctify / 50000.0).round(2)} weeks)"
	
	grit_info = "Total #{@service_resource_name}: #{@service_total_cost_of_all_resources_grit.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_total_cost_of_all_resources_grit / 50000.0).round(2)} weeks)"
	
	service_set_current_round_levels
	
	@service_saved_item_difficulty = @service_item_difficulty.to_i + @service_difficulty_being_added_to_item.to_i
	@service_item_difficulty = @service_saved_item_difficulty.dup
	
	new_service_info = ""
	new_service_info += "#{@service_list_all_saved_services.count + 1}: #{@service_service_wanted} #{@service_service_chosen}, Cost: #{@service_total_cost_of_service.to_i.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers, #{@service_resource_name} needed: #{@service_resource_total_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_resource_total_needed / 50000.0).round(2)} weeks)"
	new_service_info += ", New difficulty: #{@service_saved_item_difficulty}" if @service_service_chosen != "Resist Nature"
	
	@service_total_cost_of_all_services_silvers += @service_total_cost_of_service.to_i
	total_service_info += "Total silver cost: #{@service_total_cost_of_all_services_silvers.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}\n"
	total_service_info += "#{enchant_info}\n" if @service_total_cost_of_all_resources_enchant > 0
	total_service_info += "#{ensorcell_info}\n" if @service_total_cost_of_all_resources_ensorcell > 0
	total_service_info += "#{resist_info}\n" if @service_total_cost_of_all_resources_resist > 0
	total_service_info += "#{sanctify_info}\n" if @service_total_cost_of_all_resources_sanctify > 0
	total_service_info += "#{grit_info}\n" if @service_total_cost_of_all_resources_grit > 0
	
	@service_information_total_running_cost.set_markup("<span font_desc='Helvetica #{@service_info_win_font_size}'>#{total_service_info}</span>")
	
	@service_list_all_saved_services.push(new_service_info)
	@service_service_list_text = @service_list_all_saved_services.join("\n")
	@service_information_list_all_services_label.set_markup("<span font_desc='Helvetica #{@service_info_win_font_size}'>#{@service_service_list_text}</span>")
	@service_total_cost_of_service = nil
end

def update_font_size_info_window
	@service_information_win.resize(100, 100)
	@service_information_win_all_labels_normal_text.each do |label|
		text = label.text.gsub(/<\/?[^>]*>/, "")
		label.set_markup("<span font_desc='Helvetica #{@service_info_win_font_size}'>#{text}</span>")
	end
	@service_information_list_all_services_label.set_markup("<span font_desc='Helvetica #{@service_info_win_font_size}'>#{@service_service_list_text}</span>")
end

def update_cost_label(label)
	if @service_service_chosen == "Enchant"
		update_text = "Silver cost per point of #{@service_resource_name}: #{@service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
	elsif @service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		update_text = "Silver cost per 1 week's of #{@service_resource_name}: #{@service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
	elsif @service_service_chosen = "Warrior Service"
		update_text = "Silver cost per 1 Warrior Service: #{@service_weekly_or_per_point_cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
	end
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
end

def update_skill_label(label)
	update_text = "Skill bonus of caster: #{@service_caster_skill.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_highlighted_text)
end

def update_required_suffuse_label(label)
	if @service_caster_skill.length == 0
		update_text = "Suffuse needed for 100% success:\nN/A"
		@service_resources_from_suffuse_needed = 0
	else
		@service_amount_suffuse_needed = [(@service_skill_needed_for_best_chance - @service_caster_skill.to_i), 0].max
		@service_resources_from_suffuse_needed = @service_amount_suffuse_needed * @service_cost_per_point_suffuse
		update_text = "Suffuse needed for 100% success:\n#{@service_amount_suffuse_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (+#{@service_resources_from_suffuse_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} #{@service_resource_name} (#{(@service_resources_from_suffuse_needed / 50000.0).round(2)} weeks))"
	end
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
end

def update_suffuse_cost_label(label)
	if @service_caster_skill.length == 0
		update_text = "Suffuse cost: N/A"
		@service_resources_from_suffuse_needed = 0
	else
		if @service_service_chosen == "Enchant"
			cost_total = @service_weekly_or_per_point_cost.to_i * @service_resources_from_suffuse_needed
		elsif @service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
			cost_total = (@service_weekly_or_per_point_cost.to_i / 50000.0) * @service_resources_from_suffuse_needed
		elsif @service_service_chosen = "Warrior Service"
			cost_total = (@service_weekly_or_per_point_cost.to_i / 25000.0) * @service_resources_from_suffuse_needed
		end
		update_text = "Suffuse cost: #{sprintf("%.0f", cost_total).reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers"
	end
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
end

def update_base_cost_label(label)
	if @service_service_chosen == "Enchant"
		cost_total = @service_weekly_or_per_point_cost.to_i * @service_base_resources_needed
	elsif @service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		cost_total = (@service_weekly_or_per_point_cost.to_i / 50000.0) * @service_base_resources_needed
	elsif @service_service_chosen = "Warrior Service"
		cost_total = (@service_weekly_or_per_point_cost.to_i / 25000.0) * @service_base_resources_needed
	end
	update_text = "Base cost: #{sprintf("%.0f", cost_total).reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers"
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
end

def update_resource_total_label(label)
	@service_resource_total_needed = @service_resources_from_suffuse_needed.to_i + @service_base_resources_needed.to_i
	update_text = "Total #{@service_resource_name} required: #{@service_resource_total_needed.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} (#{(@service_resource_total_needed / 50000.0).round(2)} weeks)"
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
end

def update_casters_success_chance_label(label)
	percent_success_chance = @service_skill_needed_for_best_chance.to_i - @service_caster_skill.to_i
	percent_result = 0

	if percent_success_chance >= 100
		percent_result = 0
	elsif percent_success_chance >= 0
	  percent_result = 100 - percent_success_chance
	else
	  percent_result = 100
	end

	update_text = "Caster's success chance without suffuse: #{percent_result}%"
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
end

def update_total_cost(label)
	if @service_service_chosen == "Enchant"
		@service_total_cost_of_service = @service_weekly_or_per_point_cost.to_i * (@service_base_resources_needed + @service_resources_from_suffuse_needed)
	elsif @service_service_chosen =~ /Resist Nature|Ensorcell|Sanctify/
		@service_total_cost_of_service = (@service_weekly_or_per_point_cost.to_i / 50000.0) * (@service_base_resources_needed + @service_resources_from_suffuse_needed)
	elsif @service_service_chosen = "Warrior Service"
		@service_total_cost_of_service = (@service_weekly_or_per_point_cost.to_i / 25000.0) * (@service_base_resources_needed + @service_resources_from_suffuse_needed)
	end
	update_text = "Total cost: #{sprintf("%.0f", @service_total_cost_of_service).reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse} silvers"
	label.set_markup("<span font_desc='Helvetica #{@service_all_text_font_size}'>#{update_text}</span>")
	label.override_color(Gtk::StateFlags::NORMAL, @service_color_of_all_normal_text)
end

def close_window(window)
	window.close if window && !window.destroyed? && window.visible?
end

def service_set_current_round_levels
	['enchant', 'ensorcell', 'resist', 'sanctify', 'grit'].each do |level|
	  instance_variable_set("@service_current_round_starting_target_value_#{level}", instance_variable_get("@service_#{level}_target_value"))
	end
end

service_set_current_round_levels

Gtk.queue {
	create_services_window
	Gtk.main
}