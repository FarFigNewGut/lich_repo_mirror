require 'yaml'

DATA_DIR = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
BIRD_DATA_PATH = "#{DATA_DIR}birds_and_feathers.yaml"

# Ensure the data directory exists
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(DATA_DIR) unless Dir.exist?(DATA_DIR)

# Load existing bird and feather data or initialize a new hash
def load_bird_data
  if File.exist?(BIRD_DATA_PATH)
    YAML.load_file(BIRD_DATA_PATH) || { 'birds' => {}, 'feathers' => {} }
  else
    { 'birds' => {}, 'feathers' => {} }
  end
end

# Save bird and feather data to YAML
def save_bird_data(data)
  File.open(BIRD_DATA_PATH, 'w') { |file| file.write(data.to_yaml) }
end

# Record a new bird or feather sighting
def record_sighting(type, name)
  data = load_bird_data
  uid = Room.current.uid.to_s # Convert UID to string to avoid potential nil errors
  data[type][name] ||= []
  unless data[type][name].include?(uid)
    data[type][name] << uid
    save_bird_data(data)
    echo("New #{type} recorded: '#{name}' in UID: #{uid}.")
  end
end

# Function to handle spyglass peering output
def handle_spyglass_output(line)
  if line =~ /you notice (an? .+?) in this area/i
    bird_name = $1
    record_sighting('birds', bird_name)
  elsif line =~ /you notice (an? .+? feather) hiding in the environment/i
    feather_name = $1
    record_sighting('feathers', feather_name)
  end
end

# Search the stored data for birds or feathers, supporting multi-word searches
def search_data(query)
  data = load_bird_data
  search_terms = query.downcase.split  # Split the query into individual words
  results = []

  # Search birds
  data['birds'].each do |bird, uids|
    if search_terms.all? { |term| bird.downcase.include?(term) }
      results << "Bird: '#{bird}' found in UIDs: #{uids.join(', ')}"
    end
  end

  # Search feathers
  data['feathers'].each do |feather, uids|
    if search_terms.all? { |term| feather.downcase.include?(term) }
      results << "Feather: '#{feather}' found in UIDs: #{uids.join(', ')}"
    end
  end

  if results.empty?
    echo("No results found for '#{query}'.")
  else
    echo("Search results for '#{query}':\n" + results.join("\n"))
  end
end

# Main monitoring loop for game output
def game_monitor
  while true
    line = get.strip

    # Handle spyglass output
    handle_spyglass_output(line)

    # Handle search command
    if line =~ /^search\s+(.+)/i
      search_query = $1
      search_data(search_query)
    end

    sleep 0.1  # Avoid overloading
  end
rescue => e
  echo("Error in game monitor: #{e.message}")
end

# Start the game monitor
game_monitor
