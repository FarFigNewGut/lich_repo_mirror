=begin

This script created with the help of Chat GPT.

This script is intended to be a field guide of sorts for bird watchers using the new Jeepers Creepers bird watching items.
https://gswiki.play.net/Jeepers_Creepers

The script runs in the background and will record data per uID for any birds or feathers you find by "peering my spyglass".

	1.0.0 (2024-10-06)
	  - Initial release.
	1.1.0 (2024-10-06)
	  - Search function updated to look at your uID and match the 5 numerically closest uIDs.
	1.2.0 (2024-10-07)
	  - Added new ;send birds and ;send feathers commands.
	  - Added new ;send totals command.
	  
COMMANDS
;send search
	>;send search lapis
	[Ta'Illistim, Aaendarein Gaer - 724] (u13100038)
	Meandering along the edge of the cliffs, the gaer provides secure footing despite its narrowness.  Set just off the pathway is a three-sided glaes scholar statue.  Bits of shrubbery have grown up about the figure encircling its form.  The view is magnificent, covering the Gyldemar Forest to the east all the way to the Black Forest far southward.
	Obvious paths: north, southeast, west
	>;send search lapis
	--- sent: search lapis
	[birdwatching: Search results for 'lapis':
	Bird: 'brilliant lapis and vert peacock' found in closest UIDs: [13100038, 13100039, 13100037, 13100036, 13100040]
	Bird: 'round-winged lapis blue jay' found in closest UIDs: [13034403, 13034304, 13034303, 13034302, 13034301]
	Feather: 'ebon and lapis blue jay feather' found in closest UIDs: [13034403, 13034304, 13034303, 13034302, 13034301]
	Feather: 'gilt-striated lapis peacock feather' found in closest UIDs: [13100042, 13034416, 13034415, 13034414, 13034412]
	Feather: 'lapis and vert peacock feather' found in closest UIDs: [13100038, 13100039, 13100037, 13100036, 13100040]]


;send explore
This will attempt to search the area around you that is lacking entries in the database.  It will move to the closest uID without entries and peer 30 times.  It will then move on to the next closest uid and repeat.


;send room
	>;send room
	--- sent: room
	[birdwatching: Entries for UID: [14150113]:
	Bird: 'rose-breasted ashen grey thielfira'
	Feather: 'ash-tinted rosy thielfira feather']


;send feather ash-tinted rosy thielfira feather 10
	[birdwatching]>peer my spyglass
	Peering through the spyglass, you notice a rose-breasted ashen grey thielfira in this area.  If you would like to capture its likeness, then please SHAKE the spyglass in the next 30 seconds.
	As you lower a copper-ringed spyglass sporting a wren-etched handle, you notice an ash-tinted rosy thielfira feather hiding in the environment.  You think you could probably remember where it is for the next 30 seconds before you lose sight of it.
	>
	[birdwatching: Found feather: 'ash-tinted rosy thielfira feather']
	[birdwatching: Feather 'ash-tinted rosy thielfira feather' matches the desired feather. Attempting to collect it.]
	[birdwatching]>get feather
	You collect an ash-tinted rosy thielfira feather from somewhere in the surrounding environment.
	>
	[birdwatching]>put feather in my sash
	Pinching one of the clips on your auroralaen sash, you carefully attach an ash-tinted rosy thielfira feather.
	>
	[birdwatching: Collected 3 of 10 feather(s).]


;send paper BIRD #
;send gem BIRD #
;send hard BIRD #
;send soft BIRD #
;send choco BIRD #
	The PAPER and GEM commands will place your bird cage in your FEET inventory slot if you are not wearing it.
	It registers the bird cage each time it does this.


;send birds
;send feather
	These two commands will list all birds or all feathers you've spotted in a comprehensive list organized by the type of bird or the type of feather.


;send Totals
	>;send totals
	--- sent: totals
	[birdwatching: **Birdwatching Totals:**
	- Total Birds: 132
	- Total Feathers: 132
	- Total Completed Rooms: 2177]

tags: jeepers creepers, birds, bird watching
version: 1.2.0

=end

require 'yaml'

DATA_DIR = "#{$data_dir}#{XMLData.game}/"
BIRD_DATA_PATH = "#{DATA_DIR}birds_and_feathers.yaml"

# Ensure the data directory exists
Dir.mkdir("#{$data_dir}#{XMLData.game}") unless Dir.exist?("#{$data_dir}#{XMLData.game}")
Dir.mkdir(DATA_DIR) unless Dir.exist?(DATA_DIR)

# Load existing bird and feather data or initialize a new hash
def load_bird_data
  if File.exist?(BIRD_DATA_PATH)
    YAML.load_file(BIRD_DATA_PATH) || { 'birds' => {}, 'feathers' => {}, 'completed_rooms' => [] }
  else
    { 'birds' => {}, 'feathers' => {}, 'completed_rooms' => [] }
  end
end

require 'yaml'

# Custom array class that forces flow style when dumping to YAML
class FlowStyleArray < Array
  def encode_with(coder)
    coder.style = Psych::Nodes::Sequence::FLOW
    coder.represent_seq(nil, self)
  end
end

# Helper method to recursively transform arrays
def deep_transform_arrays(obj, &block)
  case obj
  when Hash
    obj.each_with_object({}) do |(k, v), h|
      h[k] = deep_transform_arrays(v, &block)
    end
  when Array
    yield(obj.map { |e| deep_transform_arrays(e, &block) })
  else
    obj
  end
end

# Save bird and feather data to YAML with arrays in flow style
def save_bird_data(data)
  # Transform the data to use FlowStyleArray for arrays
  data = deep_transform_arrays(data) { |array| FlowStyleArray.new(array) }

  # Sort the 'birds' and 'feathers' hashes by their keys
  data['birds'] = data['birds'].sort.to_h
  data['feathers'] = data['feathers'].sort.to_h

  File.open(BIRD_DATA_PATH, 'w') do |file|
    file.write(data.to_yaml(line_width: -1))
  end
end

def update_totals
  data = load_bird_data

  # Calculate totals
  total_birds = data['birds'] ? data['birds'].size : 0
  total_feathers = data['feathers'] ? data['feathers'].size : 0
  total_completed_rooms = data['completed_rooms'] ? data['completed_rooms'].size : 0

  # Update totals in YAML
  data['totals'] = {
    'total_birds' => total_birds,
    'total_feathers' => total_feathers,
    'total_completed_rooms' => total_completed_rooms
  }

  save_bird_data(data)
  echo("Totals updated in YAML.")
end

# Method to display totals from YAML
def send_totals
  data = load_bird_data

  # Fetch totals, with fallback to zero if not present
  total_birds = data.dig('totals', 'total_birds') || 0
  total_feathers = data.dig('totals', 'total_feathers') || 0
  total_completed_rooms = data.dig('totals', 'total_completed_rooms') || 0

  # Generate the output
  result = []
  result << "**Birdwatching Totals:**"
  result << "- Total Birds: #{total_birds}"
  result << "- Total Feathers: #{total_feathers}"
  result << "- Total Completed Rooms: #{total_completed_rooms}"

  # Output the result
  echo(result.join("\n"))
end

# Record a new bird or feather sighting
def record_sighting(type, name)
  data = load_bird_data
  uid = Room.current.uid.to_s  # Convert UID to string

  # Check if the UID is valid (not empty)
  if uid.nil? || uid.empty?
    echo("Room has no UID. Entry not recorded.")
    return
  end

  # Check if the entry (bird or feather) exists in the YAML at all
  first_time_discovery = data[type][name].nil?

  # Add the new UID to the bird or feather entry if it's not already recorded
  data[type][name] ||= []
  unless data[type][name].include?(uid)
    data[type][name] << uid
    data[type][name].uniq!  # Ensure no duplicate UIDs
    save_bird_data(data)

    # Echo a big message if this is the first time the bird/feather is being added to YAML
    if first_time_discovery
	  echo("\n\n\n" + "="*50 + "\n NEW #{type.upcase} DISCOVERED! \n '#{name}' recorded for the first time!\n" + "="*50 + "\n\n")
    else
      # Regular echo for a new UID, but not a new bird/feather
      echo("New location for #{type}: '#{name}' added in room #{uid}.")
    end
  else
    # Message for an already recorded bird/feather in the same UID
#    echo("Existing #{type} found: '#{name}' already recorded in UID: #{uid}.")
  end
end

# Mark a room as completed after 30 peers
def mark_room_completed
  data = load_bird_data
  uid = Room.current.uid.to_s
  unless data['completed_rooms'].include?(uid)
    data['completed_rooms'] << uid
    save_bird_data(data)
    echo("Room #{uid} marked as completed.")
  end
end

# Function to handle spyglass peering output
def handle_spyglass_output(line)
  if line =~ /you notice an? (.+?) in this area/i
    bird_name = $1.strip
    record_sighting('birds', bird_name)
  end
  if line =~ /you notice an? (.+? feather) hiding in the environment/i
    feather_name = $1.strip
    record_sighting('feathers', feather_name)
  end
end

# Helper method to find up to 5 closest UIDs from a list to the current UID
def find_closest_uids(current_uid, uids, limit = 5)
  current_uid = current_uid.to_i
  cleaned_uids = uids.map { |uid| uid.to_s.gsub(/[^\d]/, '').to_i }  # Remove non-numeric characters and convert to integers
  # Sort by absolute distance to the current_uid and select up to the specified limit
  cleaned_uids.sort_by { |uid| (uid - current_uid).abs }.first(limit)
end

# Search the stored data for birds or feathers, showing up to 5 closest UIDs to the player's current location
def search_data(query)
  data = load_bird_data
  search_terms = query.downcase.split  # Split the query into individual words
  results = []

  # Get the player's current UID
  current_uid = Room.current.uid.to_s.gsub(/[^\d]/, '').to_i  # Clean the current UID

  # Search birds
  data['birds'].each do |bird, uids|
    if search_terms.all? { |term| bird.downcase.include?(term) }
      closest_uids = find_closest_uids(current_uid, uids)
      results << "Bird: '#{bird}' found in closest UIDs: [#{closest_uids.join(', ')}]"
    end
  end

  # Search feathers
  data['feathers'].each do |feather, uids|
    if search_terms.all? { |term| feather.downcase.include?(term) }
      closest_uids = find_closest_uids(current_uid, uids)
      results << "Feather: '#{feather}' found in closest UIDs: [#{closest_uids.join(', ')}]"
    end
  end

  if results.empty?
    echo("No results found for '#{query}'.")
  else
    echo("Search results for '#{query}':\n" + results.join("\n"))
  end
end

# Display all birds and feathers tied to the current UID and check if the room is completed
def room_data
  data = load_bird_data
  uid = Room.current.uid.to_s  # Get the current room's UID as a string

  # Check if the UID is valid
  if uid.nil? || uid.empty?
    echo("This room has no UID. Cannot display entries.")
    return
  end

  results = []

  # Find all birds tied to the current UID
  data['birds'].each do |bird, uids|
    results << "Bird: '#{bird}'" if uids.include?(uid)
  end

  # Find all feathers tied to the current UID
  data['feathers'].each do |feather, uids|
    results << "Feather: '#{feather}'" if uids.include?(uid)
  end

  # Check if the room is marked as completed
  if data['completed_rooms'] && data['completed_rooms'].include?(uid)
    results << "Room Status: Completed"
  else
    results << "Room Status: Not Completed"
  end

  if results.empty?
    echo("No birds or feathers recorded for UID: #{uid}. Room Status: Not Completed.")
  else
    echo("Entries for UID: #{uid}:\n" + results.join("\n"))
  end
end

# Method to peer through the spyglass until the specified number of feathers is found
def find_and_store_feather(feather_description, count_needed = 1)
  count_needed = count_needed.to_i  # Ensure count_needed is an integer
  found_count = 0

  # Normalize the desired feather description
  desired_feather = feather_description.strip.downcase
  echo("Searching for feather: '#{desired_feather}'. Need to find #{count_needed} feather(s).")

  loop do
    waitrt?  # Wait for the roundtime to end before executing the next command
    fput "stow all" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput "get my spyglass" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput('peer my spyglass')
    sleep 0.15  # Slight delay to avoid too fast execution

    # Collect multiple lines of output
    output_lines = []
    begin
      Timeout.timeout(0.15) do
        while (line = get.strip)
          break if line.empty?
          output_lines << line
          break if output_lines.size >= 5  # Limit to max 5 lines
        end
      end
    rescue Timeout::Error
      # Timeout reached, continue with what we have in output_lines
    end

    # Check if the specified feather is found in the output
    output_lines.each do |line|
      if line =~ /you notice an? (.+? feather) hiding in the environment/i
        current_feather = $1.strip.downcase  # Normalize found feather to lowercase
        echo("Found feather: '#{current_feather}'")  # Show the feather found in the environment

        if current_feather == desired_feather
          echo("Feather '#{current_feather}' matches the desired feather. Attempting to collect it.")
          fput("get feather")  # Get the feather
          sleep 0.5  # Small delay before putting the feather

          # Attempt to put the feather in boa or sash
          if GameObj.inv.any? { |item| item.name =~ /boa/i }
            fput("put feather in my boa")
          elsif GameObj.inv.any? { |item| item.name =~ /sash/i }
            fput("put feather in my sash")
          else
            echo("No boa or sash found to store the feather.")
          end

          found_count += 1
          echo("Collected #{found_count} of #{count_needed} feather(s).")

          # Stop if we've found the specified number of feathers
          return echo("Successfully found and stored the feather '#{feather_description}' #{found_count} time(s).") if found_count >= count_needed

          break  # Break out of the output processing loop since the feather is found
        else
          echo("Feather '#{current_feather}' does not match the desired feather.")  # Indicate mismatch
        end
      end
    end
  end
end

require 'timeout'

def explore_and_record(location = nil)
  location ||= Room.current.location  # Use current location if none specified
  anchor = Room.current.id
  bird_data = load_bird_data

  # Retrieve all room IDs in the specified location
  room_ids = Map.list.select { |room| room.location.eql?(location) }.map(&:id)

  # Remove rooms that have already been explored or marked as completed
  room_ids.reject! do |id|
    uid = Room[id].uid.to_s
    bird_data['completed_rooms'].include?(uid) ||
      bird_data['birds'].any? { |_, uids| uids.include?(uid) } ||
      bird_data['feathers'].any? { |_, uids| uids.include?(uid) }
  end

  if room_ids.empty?
    echo("No unexplored rooms found in the location: #{location}.")
    return
  end

  echo("Exploring rooms in #{location}...")

  # Loop until all unexplored rooms are covered or stopped manually
  until room_ids.empty?
    # Find the closest unexplored room
    closest_room = Room.current.find_nearest(room_ids)
    if closest_room.nil?
      echo("Cannot find a path to the remaining unexplored rooms.")
      break
    end

    # Navigate to the closest room
    room_ids.delete(closest_room)
    Script.run("go2", closest_room.to_s)

    sightings_recorded = false
    no_bird_count = 0  # Initialize the no bird sightings counter
	
    # Peer through the spyglass 30 times to record sightings
    30.times do
      waitrt?  # Wait for the roundtime to end before executing the next command
      fput "stow all" if GameObj.right_hand.noun !~ /(?:spyglass)/
      fput "get my spyglass" if GameObj.right_hand.noun !~ /(?:spyglass)/
      fput('peer my spyglass')
      sleep 0.15  # Slight delay between actions to avoid being too fast

      # Collect multiple lines of output with a timeout to avoid hanging
      output_lines = []
      begin
        Timeout.timeout(0.15) do  # Adjust timeout as needed
          while (line = get.strip)
            break if line.empty?
            output_lines << line
            break if output_lines.size >= 5  # Limit to max 5 lines
          end
        end
      rescue Timeout::Error
        # Timeout reached, continue with what we have in output_lines
      end

      # Process each line of output for both birds and feathers
      output_lines.each do |line|
        # Check for the specific message indicating no birds or feathers are found
        if line =~ /Unfortunately, you appear to be inside and can't find any trace of an avian anywhere near you/i
          echo("No birds or feathers found in this room. Marking as completed.")
          mark_room_completed
          sightings_recorded = true  # Set to true to avoid further processing
          break  # Break out of the loop since further peering is unnecessary
        end

        if line =~ /you don't see any birds in the immediate area/i
          no_bird_count += 1
          # If we get the "no birds" message 10 times in a row, break the loop and mark the room as completed
          if no_bird_count >= 3
            echo("No birds found after 10 attempts. Marking room as completed.")
            mark_room_completed
            sightings_recorded = true  # Set to true to avoid further processing
            break  # Break out of the output processing loop
          end
        else
          no_bird_count = 0  # Reset the counter if we encounter something else
        end

        if line =~ /you notice an? (.+?) in this area/i
          bird_name = $1.strip
          record_sighting('birds', bird_name)
          sightings_recorded = true
        end

        if line =~ /you notice an? (.+? feather) hiding in the environment/i
          feather_name = $1.strip
          record_sighting('feathers', feather_name)
          sightings_recorded = true
        end
      end

      # Break out of the 30-times loop if we marked the room as completed
      break if sightings_recorded && output_lines.any? { |line| line =~ /Unfortunately, you appear to be inside and can't find any trace of an avian anywhere near you/i }
	  break if no_bird_count >= 3
	end

    # Mark room as completed if any sightings were recorded or if we broke out due to the "no trace" message
    mark_room_completed
  end

  # Return to the starting point
  Script.run("go2", anchor.to_s)
  echo("Exploration completed.")
 
end

# Method to peer through the spyglass until the specified number of birds is found
def find_and_store_bird(bird_description, count_needed = 1, command_type = 'paper')
  count_needed = count_needed.to_i  # Ensure count_needed is an integer
  found_count = 0

  # Normalize the desired bird description
  desired_bird = bird_description.strip.downcase
  echo("Searching for bird: '#{desired_bird}'. Need to find #{count_needed} bird(s).")

  # Retrieve and place the bird cage if command type is 'paper' or 'gem'
  if command_type == 'paper' || command_type == 'gem'
    fput("get my cage")
    fput('register my cage')
    fput("place feet cage")
  end

  loop do
    waitrt?  # Wait for the roundtime to end before executing the next command
    fput "stow all" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput "get my spyglass" if GameObj.right_hand.noun !~ /(?:spyglass)/
    fput('peer my spyglass')
    sleep 0.15  # Slight delay to avoid too fast execution

    # Collect multiple lines of output
    output_lines = []
    begin
      Timeout.timeout(0.15) do
        while (line = get.strip)
          break if line.empty?
          output_lines << line
          break if output_lines.size >= 5  # Limit to max 5 lines
        end
      end
    rescue Timeout::Error
      # Timeout reached, continue with what we have in output_lines
    end

    # Check if the specified bird is found in the output
    output_lines.each do |line|
      if line =~ /you notice an? (.+?) in this area/i
        current_bird = $1.strip.downcase  # Normalize found bird to lowercase
        echo("Found bird: '#{current_bird}'")  # Show the bird found in the environment

        if current_bird == desired_bird
          echo("Bird '#{current_bird}' matches the desired bird. Attempting to capture it.")

          # Handle specific actions based on the command type
          case command_type
          when 'paper'
            fput('shake my spyglass')
            fput('pluck my spyglass')
            fput('put left in cage')
          when 'gem'
		    fput('shake my spyglass')
            fput('whisper my spyglass option gem')
            fput('pluck my spyglass')
            fput('put left in cage')
          when 'hard'
		    fput('shake my spyglass')
            fput('whisper my spyglass option candy hard')
            fput('pluck my spyglass')
            fput('stow left')
          when 'soft'
		    fput('shake my spyglass')
            fput('whisper my spyglass option candy soft')
            fput('pluck my spyglass')
            fput('stow left')
          when 'choco'
		    fput('shake my spyglass')
            fput('whisper my spyglass option candy chocolate')
            fput('pluck my spyglass')
            fput('stow left')
		  else
            echo("Unknown command type: #{command_type}")
          end

          found_count += 1
          echo("Captured #{found_count} of #{count_needed} bird(s).")

          # Stop if we've found the specified number of birds
          if found_count >= count_needed
		    if command_type == 'paper' || command_type == 'gem'
				fput('get cage')  # Pick up the cage after completing the capture
				fput('stow cage')
			end
            return echo("Successfully found and captured the bird '#{bird_description}' #{found_count} time(s).")
          end

          break  # Break out of the output processing loop since the bird is found
        else
          echo("Bird '#{current_bird}' does not match the desired bird.")  # Indicate mismatch
        end
      end
    end
  end
end

# List all birds grouped by their type
def list_birds_grouped_by_type
  data = load_bird_data
  bird_list = data['birds'].keys

  # Create a hash to group birds by their type (last word in the bird name)
  grouped_birds = Hash.new { |hash, key| hash[key] = [] }

  bird_list.each do |bird|
    type = bird.split.last # Get the last word in the bird's name as its type
    grouped_birds[type] << bird
  end

  # Sort the grouped birds by type alphabetically
  grouped_birds = grouped_birds.sort.to_h

  # Generate the output
  result = []
  grouped_birds.each do |type, birds|
    result << "**#{type.capitalize}:**"
    birds.each do |bird|
      result << "- #{bird}"
    end
  end

  # Add totals at the end
  total_birds_spotted = bird_list.size
  total_birds_in_game = 389
  birds_left = total_birds_in_game - total_birds_spotted

  result << "\nYou have spotted #{total_birds_spotted} out of #{total_birds_in_game} birds."
  result << "You have #{birds_left} birds left to discover."

  echo(result.join("\n"))
end

def send_feathers
  feathers_data = YAML.load_file('path/to/your/yaml_file.yml') # Load the existing feather data
  organized_feathers = Hash.new { |hash, key| hash[key] = [] } # Create a new hash to organize feathers

  # Iterate over the feathers in the data
  feathers_data.each do |feather, uids|
    # Extract the bird type (word before "feather")
    bird_type = feather.split(' ')[0]
    organized_feathers[bird_type] << feather
  end

  # Sort feathers by bird type alphabetically
  sorted_feathers = organized_feathers.sort.to_h

  # Output the organized feathers
  echo "Feathers organized by bird type:"
  sorted_feathers.each do |bird_type, feathers|
    echo "#{bird_type}: #{feathers.join(', ')}"
  end
end

# List all feathers grouped by their type
def list_feathers_grouped_by_type
  data = load_bird_data
  feather_list = data['feathers'].keys

  # Create a hash to group feathers by their type (second-to-last word before 'feather')
  grouped_feathers = Hash.new { |hash, key| hash[key] = [] }

  feather_list.each do |feather|
    # Split the description into words and get the second-to-last word before "feather"
    words = feather.split
    index = words.index('feather')
    if index && index > 0
      type = words[index - 1] # Get the second-to-last word before "feather"
      grouped_feathers[type] << feather
    end
  end

  # Sort the grouped feathers by type alphabetically
  grouped_feathers = grouped_feathers.sort.to_h

  # Generate the output
  result = []
  grouped_feathers.each do |type, feathers|
    result << "**#{type.capitalize}:**"
    feathers.each do |feather|
      result << "- #{feather}"
    end
  end

  echo(result.join("\n"))
end

# Command to send the field guide entry for a bird
def send_fg(bird_name)
  data = load_bird_data
  search_terms = bird_name.downcase.split  # Split the bird name into individual words

  # Search the fieldguide section for a matching bird name
  matched_bird = data['fieldguide'].keys.find do |key|
    search_terms.all? { |term| key.downcase.include?(term) }
  end

  if matched_bird
    description = data['fieldguide'][matched_bird]['description']
    vocalization = data['fieldguide'][matched_bird]['vocalization']

    # Generate and echo the fieldguide entry
    echo("\n\n" + "="*50 + " FIELD GUIDE ENTRY: #{matched_bird.upcase} " + "="*50 + "\n")
    echo("\nDescription: #{description}")
    echo("\nVocalization: #{vocalization}")
    echo("\n\n" + "="*50 + " FIELD GUIDE ENTRY: #{matched_bird.upcase} " + "="*50 )
  else
    echo("No field guide entry found for '#{bird_name}'.")
  end
end

# Main monitoring loop for game output
def game_monitor
  while true
    line = get.strip

    # Handle spyglass output
    handle_spyglass_output(line)

    # Handle search command
    if line =~ /^search\s+(.+)/i
      search_query = $1
      search_data(search_query)

    elsif line =~ /^explore\b/i
      explore_and_record

    elsif line =~ /^room\b/i
      room_data

    elsif line =~ /^feather\s+(.+?)(?:\s+(\d+))?$/i
      feather_description = $1.strip
      attempts = $2 ? $2.to_i : 30  # Default to 30 attempts if not specified
      find_and_store_feather(feather_description, attempts)

    elsif line =~ /^(paper|gem|hard|soft|choco)\s+(.+?)(?:\s+(\d+))?$/i
      command_type = $1.downcase
      bird_description = $2.strip
      count_needed = $3
      find_and_store_bird(bird_description, count_needed, command_type)

    elsif line =~ /^birds\b/i
      list_birds_grouped_by_type

    elsif line =~ /^feathers\b/i
      list_feathers_grouped_by_type

    elsif line =~ /^totals\b/i
      send_totals

    # Handle fieldguide command
    elsif line =~ /^fg\s+(.+)/i
      bird_name = $1
      send_fg(bird_name)
    end

    sleep 0.1  # Avoid overloading
  end
rescue => e
  echo("Error in game monitor: #{e.message}")
end

# Start the game monitor
update_totals
game_monitor
