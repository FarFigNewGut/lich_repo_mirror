=begin

Bug Catcher! (WIP)
for catching dem bugs!
Author: Timbalt

********* SCRIPT NEEDS "bugs.yaml" FROM THE REPO **********
bug hash is built from the bugs spreadsheet
go in settings tab and change your settings **** DO THIS FIRST!! ****
then go to the main tab
select bug to catch
number of bugs to catch
what whisper option to use
start catchin dem bugs!

to do:
  idk?

=end

VERSION = "1.5"
AUTHOR = "Timbalt"

require 'gtk3'
require 'yaml'



NEARBY_TOWNS = {
  "Wehnimer's Landing" => ["Wehnimer's Landing", "Solhaven", "Icemule Trace", "the Red Forest"],
  "Solhaven" => ["Solhaven", "Wehnimer's Landing", "Icemule Trace", "the Red Forest"],
  "River's Rest" => ["River's Rest"],
  "Icemule Trace" => ["Icemule Trace", "Wehnimer's Landing", "Solhaven", "the Red Forest"],
  "the Red Forest" => ["the Red Forest", "Wehnimer's Landing", "Solhaven", "Icemule Trace"],
  "Ta'Vaalor" => ["Ta'Vaalor", "Ta'Illistim", "Cysaegir", "the Red Forest"],
  "Ta'Illistim" => ["Ta'Illistim", "Ta'Vaalor", "Cysaegir", "the Red Forest"],
  "Cysaegir" => ["Cysaegir", "Ta'Vaalor", "Ta'Illistim", "the Red Forest"],
  "the Red Forest" => ["the Red Forest", "Ta'Vaalor", "Ta'Illistim", "Cysaegir"],
  # Add more towns and their neighbors here
}


$exit_script = false
$bug_to_catch = nil
$bug_count_to_catch = nil
$start_catching = false
$catch_bug_name = nil
$catch_bug_count = nil
$catch_result_label = nil

def go_to(place)
      start_script( 'go2', [place] )
      wait_while { running?('go2') }
    end


unless File.exist?('data/bugs.yaml')
  Lich::Messaging.msg("info", "Error: data/bugs.yaml not found! Please ;repo download bugs.yaml and rerun.")
  Gtk.queue { Gtk::MessageDialog.new(message: "Error: data/bugs.yaml not found!\nPlease ;repo download bugs.yaml and rerun.", buttons_type: :close).run }
  exit
end

$bugs_hash = YAML.load_file('data/bugs.yaml')

# Create $bugs_list for dropdown/search
$bugs_list = []
$bugs_hash.each do |town, bugs|
  bugs.each do |name, data|
    $bugs_list << {
      "name" => name,
      "Noun" => data["Noun"],
      "Town" => town,
      "Rooms" => data["Rooms"]
    }
  end
end

def find_and_collect_bug(bug_name, result_label, count, whisper_options)
  jar_noun = Vars.bugs_jar_noun
  jarsack = Vars.bugs_jarsack
  bugsack = Vars.bugs_bugsack

  unless jar_noun && jarsack && bugsack && !jar_noun.empty? && !jarsack.empty? && !bugsack.empty?
    Gtk.queue { result_label.set_text("Error: Set jar noun, jarsack, and bugsack in Settings tab.") }
    return
  end

  return_room = Room.current.id.to_i

  wait_while { running?('go2') }
  sleep 1

  # Make sure jar is in hand
  unless GameObj.left_hand.noun == jar_noun || GameObj.right_hand.noun == jar_noun
    fput "get my #{jar_noun} from my #{jarsack}"
    sleep 1
    unless GameObj.left_hand.noun == jar_noun || GameObj.right_hand.noun == jar_noun
      Gtk.queue { result_label.set_text("Jar not in jarsack!.") }
      return
    end
  end

  caught = 0
  while caught < count
    Gtk.queue { result_label.set_text("Hunting '#{bug_name}'\n   (#{caught+1}/#{count})") }
    loop do
      result = dothis("peer #{jar_noun}", /.+/) # capture the game output
      #jar_contents = result.scan(/Peering through the #{jar_noun}, you notice.*?: (.*?)\./).flatten.first
      if result.include?(bug_name)
        Gtk.queue { result_label.set_text("Found '#{bug_name}'\n   (#{caught+1}/#{count})") }
        break
      end
      sleep 0.1 # Pause time between peers to find bug
  end

    fput "shake #{jar_noun}"
    sleep 2
# Whisper options
    whisper_options.each do |opt|
      fput "whisper my #{jar_noun} option #{opt}"
      sleep 2
    end
    fput "pluck #{jar_noun}"
    sleep 2
    bug_obj = [GameObj.left_hand, GameObj.right_hand].find do |obj|
      bug_name.downcase.include?(obj.noun.downcase) || obj.noun.downcase.include?(bug_name.downcase)
    end
    if bug_obj
      fput "put my #{bug_obj.noun} in my #{bugsack}"
    else
      Gtk.queue { result_label.set_text("Error: No bug in hand") }
      return
    end
    caught += 1
    Gtk.queue { result_label.set_text("'#{bug_name}' collected\n   (#{caught}/#{count})") }
    sleep 1
    end
    Gtk.queue { result_label.set_text("All #{bug_name}'s caught\n   #{caught}/#{count}") }
    fput "put my #{jar_noun} in my #{jarsack}"
    sleep 1
    Script.run("go2", "#{return_room}") if return_room
  end

def test
  Gtk.queue {
    # Main window setup
    window = Gtk::Window.new(:toplevel)
    window.set_title("Bug Catcher!")
    window.set_default_size(500, 300)
    window.set_border_width(10)
    window.set_position(Gtk::WindowPosition::CENTER)

    # Header bar
    header = Gtk::HeaderBar.new
    header.set_name("main_header")
    header.show_close_button = true
    header_box = Gtk::Box.new(:vertical, 0)
    title_label = Gtk::Label.new("Bug Catcher!")
    title_label.set_markup("<span size='large' weight='bold'>Bug Catcher!</span>")
    subtitle_label = Gtk::Label.new("Gotta catch'em all!")
    header_box.pack_start(title_label, expand: false, fill: false, padding: 0)
    header_box.pack_start(subtitle_label, expand: false, fill: false, padding: 0)
    header_box.show_all
    header.set_custom_title(header_box)
    window.titlebar = header

    # CSS styling for dark theme and accent color
    css = <<-CSS
      #main_window,
      #main_window *{
        background-image: none;
        background-size: cover;
        background-repeat: no-repeat;
        background-color: #555555; /* Dark Brown */
        color: #d8dee9;
        border: none;
        margin: 0;
        box-shadow: none;
      }
      #main_window checkbutton {
        background-color: transparent;
      }
      #main_window checkbutton check {
        border: 2px solid #228b22; /* ForestGreen */
        background-color: #555555; /* Dark Brown */
        border-radius: 3px;
        margin-right: 3px;
      }
      #main_header,
      #main_header:backdrop,
      #main_header:focus,
      #main_header:active,
      #main_header.titlebar,
      #main_header.titlebar:backdrop{
        background-color: #555555; /* Dark Brown */
        color: #2e3440;
        font-weight: bold;
        border-radius: 0px;
        padding: 0px;
      }
      #main_window .button.active {
        background-color: #555555; /* Dark Brown */
        color: #2e3440;
        border-color: #d8dee9;
      }
      #main_header GtkLabel{
        color: #2e3440;
        border-radius: 0px;
        padding: 0px;
      }
      #custom_entry {
        background-color: #555555; /* Dark Brown */
        color: #eceff4;
        border: 2px solid #228b22; /* ForestGreen */
        border-radius: 3px;
        box-shadow: none;
        padding: 2px 6px;
        min-height: 9px;
      }
      #custom_entry:focus {
        background-color: #555555; /* Dark Brown */
        color: #e0e0e0;
        border: 2px solid #228b22; /* ForestGreen */
        border-radius: 3px;
        box-shadow: none;
      }
      #main_header button{
        background-color: #555555; /* Dark Brown */
        color: black;
        border: 2px solid #228b22; /* ForestGreen */
        border-radius: 3px;
        padding: 0px;
      }
      #main_window button{
        border: none;
        box-shadow: none;
        background-image: none;
        border-width: 2px;
        border-style: solid;
        border-color: #228b22; /* ForestGreen */
        color: #d8dee9;
        background-color: #555555; /* Dark Brown */
      }
      #bug_tab {
        background-color: #555555; /* Dark Brown */
        border-radius: 8px;
        padding: 16px;
      }
      #custom_spin {
        background-color: #555555; /* Dark Brown */
        color: #eceff4;
        border: 2px solid #228b22; /* ForestGreen */
        border-radius: 3px;
      }
      #settings_tab {
        background-color: #555555; /* Dark Brown */
        border-radius: 8px;
        padding: 16px;
      }
      .monospace-labels{
        font-family: "Comic Sans MS";
        font-size: 10pt;
      }
    CSS

    provider = Gtk::CssProvider.new
    provider.load(data: css)
    Gtk::StyleContext.add_provider_for_screen(
      Gdk::Screen.default,
      provider,
      Gtk::StyleProvider::PRIORITY_APPLICATION
    )
    window.name = "main_window"

    # Main vertical box
    main_vbox = Gtk::Box.new(:vertical, 12)

    # Notebook for tabs
    notebook = Gtk::Notebook.new

    # --- Bug Catcher Tab ---
    bug_tab_vbox = Gtk::Box.new(:vertical, 10)
    bug_tab_vbox.set_border_width(10)

    # Entry for bug name (remove/comment out, not needed)
    # bug_entry = Gtk::Entry.new
    # bug_entry.set_name("custom_entry")
    # bug_entry.set_placeholder_text("Enter bug name (default: firefly)")
    # bug_tab_vbox.pack_start(bug_entry, expand: false, fill: true, padding: 5)

    # Create search entry and dropdown
    search_entry = Gtk::Entry.new
    search_entry.set_name("custom_entry")
    search_entry.set_width_chars(30)       # 30 characters wide
    search_entry.set_size_request(100, 20) # 120 pixels wide, 20 high
    search_entry.set_placeholder_text("Search bugs...")
    # search_entry.set_width_chars(30)       # 50 characters wide
    # search_entry.set_size_request(-1, 20)  # -1 keeps the current width, 30 sets the height

    bug_dropdown = Gtk::ComboBoxText.new

    # Helper to update dropdown based on filter, grouped by town


def update_bug_dropdown(dropdown, bugs_list, filter)
  current_town = Room.current.location.sub(/^(the town of|the village of|the isle of|the Isle of|the city of)\s+/i, '')
  nearby_towns = NEARBY_TOWNS[current_town] || [current_town]
  dropdown.remove_all
  grouped = {}
  bugs_list.each do |bug|
    next unless bug["name"]
    next unless nearby_towns.include?(bug["Town"]) # Show bugs from current and nearby towns
    next unless bug["name"].downcase.include?(filter.downcase)
    grouped[bug["Town"]] ||= []
    grouped[bug["Town"]] << bug
  end
  grouped.each do |town, bugs|
    dropdown.append_text("--- #{town} ---")
    bugs.each do |bug|
      dropdown.append_text("  #{bug['name']}")
    end
  end
  # Set first selectable bug as active (skip group headers)
  item_count = dropdown.children.size
  (0...item_count).each do |idx|
    dropdown.set_active(idx)
    txt = dropdown.active_text
    next unless txt
    unless txt.start_with?("---")
      break
    end
  end
end

    # def update_bug_dropdown(dropdown, bugs_list, filter)
    #   current_town = Room.current.location.sub(/^(the town of|the village of|the isle of|the Isle of|the city of)\s+/i, '')
    #   dropdown.remove_all
    #   grouped = {}
    #   bugs_list.each do |bug|
    #     next unless bug["name"]
    #     next unless bug["Town"] == current_town # Only show bugs from current town
    #     next unless bug["name"].downcase.include?(filter.downcase)
    #     grouped[bug["Town"]] ||= []
    #     grouped[bug["Town"]] << bug
    #   end
    #   grouped.each do |town, bugs|
    #     dropdown.append_text("--- #{town} ---")
    #     bugs.each do |bug|
    #       dropdown.append_text("  #{bug['name']}")
    #     end
    #   end
    #   # Set first selectable bug as active (skip group headers)
    #   # Gtk::ComboBoxText does not provide a way to get all items directly.
    #   # We'll use the count and active_text to iterate and select the first bug.
    #   item_count = dropdown.children.size
    #   (0...item_count).each do |idx|
    #     dropdown.set_active(idx)
    #     txt = dropdown.active_text
    #     next unless txt
    #     unless txt.start_with?("---")
    #       break
    #     end
    #   end
    # end

    # Initial fill
    update_bug_dropdown(bug_dropdown, $bugs_list, "")
    # Set the first item as active if there are bugs
    bug_dropdown.set_active(0) if $bugs_list.any?

    # Connect search box to dropdown filter
    search_entry.signal_connect("changed") do
      filter = search_entry.text
      update_bug_dropdown(bug_dropdown, $bugs_list, filter)
      if bug_dropdown.active != -1 && search_entry.is_focus
        bug_dropdown.popup
       # bug_dropdown.show_popup if bug_dropdown.respond_to?(:show_popup)
    end
  end

    # Add to your layout (example)
    bug_tab_vbox.pack_start(search_entry, expand: false, fill: false, padding: 5)
    bug_tab_vbox.pack_start(bug_dropdown, expand: false, fill: false, padding: 5)

    # Spin button for bug count
    bug_count_adjustment = Gtk::Adjustment.new(1, 1, 100, 1, 5, 0)
    bug_count_spin = Gtk::SpinButton.new(bug_count_adjustment, 1, 0)
    bug_count_spin.set_name("custom_spin")
    bug_count_spin.set_numeric(true)
    bug_count_spin.set_value(1)
    bug_count_spin.set_width_chars(3)     # Enough space for 3 digits    
    bug_count_spin.halign = :start
    label = Gtk::Label.new("Amount to catch:")
    label.set_justify(:left)
    label.halign = :start
    bug_tab_vbox.pack_start(label, expand: false, fill: false, padding: 2)
    #bug_tab_vbox.pack_start(Gtk::Label.new("Amount to catch:"), expand: false, fill: false, padding: 2)
    bug_tab_vbox.pack_start(bug_count_spin, expand: false, fill: false, padding: 2)

    # Label to show selected values
    result_label = Gtk::Label.new("Ready to catch bugs!")
    result_label.set_justify(:center)
    result_label.style_context.add_class("monospace-labels")
    bug_tab_vbox.pack_start(result_label, expand: false, fill: true, padding: 5)

    # Helper to get selected bug name from dropdown (skip group headers, strip spaces)
    def selected_bug_name(dropdown)
      txt = dropdown.active_text
      return "firefly" unless txt
      return "firefly" if txt.start_with?("---")
      txt.strip
    end

    # Whisper option checkboxes
    # whisper_label = Gtk::Label.new("Whisper options after catching:")
    # whisper_label.set_justify(:left)
    # bug_tab_vbox.pack_start(whisper_label, expand: false, fill: true, padding: 2)

    whisper_paper = Gtk::CheckButton.new("Paper")
    # whisper_paper.set_name("custom_checkbox")
    whisper_gem = Gtk::CheckButton.new("Gem")
    # whisper_gem.set_name("custom_checkbox")
    whisper_candy = Gtk::CheckButton.new("Candy")
    # whisper_candy.set_name("custom_checkbox")
    whisper_candy_type = Gtk::Entry.new
    whisper_candy_type.set_name("custom_entry")
    whisper_candy_type.set_width_chars(20)       # 20 characters wide
    whisper_candy_type.set_size_request(-1, 20)  # -1 keeps the current width, 30 sets the height
    whisper_candy_type.set_placeholder_text("Type (e.g. chocolate, hard, chew)")
    candy_box = Gtk::Box.new(:horizontal, 5)
    bug_tab_vbox.pack_start(whisper_paper, expand: false, fill: false, padding: 2)
    bug_tab_vbox.pack_start(whisper_gem, expand: false, fill: false, padding: 2)
    candy_box.pack_start(whisper_candy, expand: false, fill: false, padding: 0)
    candy_box.pack_start(whisper_candy_type, expand: false, fill: false, padding: 0)
    bug_tab_vbox.pack_start(candy_box, expand: false, fill: true, padding: 2)
    # candy_box.pack_start(whisper_candy, expand: false, fill: false, padding: 0)
    # candy_box.pack_start(whisper_candy_type, expand: false, fill: false, padding: 0)
    # bug_tab_vbox.pack_start(candy_box, expand: false, fill: true, padding: 2)
    # bug_tab_vbox.pack_start(whisper_paper, expand: false, fill: true, padding: 2)
    # bug_tab_vbox.pack_start(whisper_gem, expand: false, fill: true, padding: 2)
    # bug_tab_vbox.pack_start(whisper_candy_chocolate, expand: false, fill: true, padding: 2)
    # bug_tab_vbox.pack_start(whisper_candy_hard, expand: false, fill: true, padding: 2)
    # bug_tab_vbox.pack_start(whisper_candy_chew, expand: false, fill: true, padding: 2)

    # Start button
    start_button = Gtk::Button.new(label: "Start")
    start_button.set_size_request(60, 28) # width, height in pixels
    start_button.signal_connect("clicked") do
      $catch_bug_name = selected_bug_name(bug_dropdown)
      $catch_bug_count = bug_count_spin.value.to_i
      $catch_result_label = result_label
      $start_catching = true
      # Gather whisper options
      $catch_whisper_options = []
      $catch_whisper_options << "paper" if whisper_paper.active?
      $catch_whisper_options << "gem" if whisper_gem.active?
      if whisper_candy.active? && !whisper_candy_type.text.strip.empty?
        $catch_whisper_options << whisper_candy_type.text.strip
      end
    # Move to room if present
    #   if bug_data && bug_data["Rooms"]
    #     rooms = [bug_data["Rooms"]].flatten # Handles single or array
    #     rooms.each do |room|
    #       go_to(room) # Move to bug rooms
    #       sleep 1
    #     end
    #   end
    # end

     bug_data = $bugs_list.find { |bug| bug["name"].strip == $catch_bug_name }

      if bug_data && bug_data["Rooms"]
        rooms = [bug_data["Rooms"]].flatten.map(&:to_i)
        current_room = Room.current.id.to_i
        closest_room = rooms.min_by { |room| (room - current_room).abs }
        # return_room = Room.current.id.to_i
        Script.run("go2", "#{closest_room}") if closest_room
        sleep 1
      end
    end
    bug_tab_vbox.pack_start(start_button, expand: false, fill: false, padding: 5)
    # bug_tab_vbox.pack_start(start_button, expand: false, fill: true, padding: 5)

    notebook.append_page(bug_tab_vbox, Gtk::Label.new("Bug Catcher!"))
 

    # --- Settings Tab ---
    settings_vbox = Gtk::Box.new(:vertical, 10)
    settings_vbox.set_border_width(10)

    jar_noun_entry = Gtk::Entry.new
    jar_noun_entry.set_width_chars(20)
    jar_noun_entry.set_name("custom_entry")
    jar_noun_entry.set_placeholder_text("Enter jar noun (e.g. jar, bottle, etc.)")
    jar_noun_entry.text = Vars.bugs_jar_noun || ""
    settings_vbox.pack_start(Gtk::Label.new("Jar Noun:"), expand: false, fill: false, padding: 2)
    settings_vbox.pack_start(jar_noun_entry, expand: false, fill: false, padding: 2)

    jarsack_entry = Gtk::Entry.new
    jarsack_entry.set_width_chars(20)
    jarsack_entry.set_name("custom_entry")
    jarsack_entry.set_placeholder_text("Enter jarsack (container your jar is in)")
    jarsack_entry.text = Vars.bugs_jarsack || ""
    settings_vbox.pack_start(Gtk::Label.new("Jar sack:"), expand: false, fill: false, padding: 2)
    settings_vbox.pack_start(jarsack_entry, expand: false, fill: false, padding: 2)

    bugsack_entry = Gtk::Entry.new
    bugsack_entry.set_width_chars(20)
    bugsack_entry.set_name("custom_entry")
    bugsack_entry.set_placeholder_text("Enter bugsack (container for bugs)")
    bugsack_entry.text = Vars.bugs_bugsack || ""
    settings_vbox.pack_start(Gtk::Label.new("Bug sack:"), expand: false, fill: false, padding: 2)
    settings_vbox.pack_start(bugsack_entry, expand: false, fill: false, padding: 2)

    settings_result_label = Gtk::Label.new("")
    settings_result_label.set_justify(:center)
    settings_result_label.style_context.add_class("monospace-labels")
    
    save_button = Gtk::Button.new(label: "Save")
    save_button.signal_connect("clicked") do
      Vars.bugs_jarsack = jarsack_entry.text.strip
      Vars.bugs_bugsack = bugsack_entry.text.strip
      Vars.bugs_jar_noun = jar_noun_entry.text.strip
      settings_result_label.set_text("Settings Saved!")
    end
    settings_vbox.pack_start(save_button, expand: false, fill: false, padding: 5)
    settings_vbox.pack_start(settings_result_label, expand: false, fill: true, padding: 5)

    notebook.append_page(settings_vbox, Gtk::Label.new("Settings"))
 
    # Add notebook to main_vbox
    main_vbox.pack_start(notebook, expand: true, fill: true, padding: 0)

    # Close button at the bottom
    close_button = Gtk::Button.new(label: "Close")
    close_button.signal_connect("clicked") do
      close_button.set_size_request(80, -1)
      $exit_script = true
      window.destroy
    end
    main_vbox.pack_start(close_button, expand: false, fill: false, padding: 8)

    window.add(main_vbox)
    window.show_all
  }
end


test()

# Main loop: handle bug catching from main thread
until $exit_script
  if $start_catching
    $start_catching = false
    find_and_collect_bug($catch_bug_name, $catch_result_label, $catch_bug_count, $catch_whisper_options || [])
  end
  sleep 0.2
end