=begin
Take care of your boxes.

Known Issues
  not set up for all locations (currently WL, Icemule, Ta'Illistim, RR, Solhaven)
  no special handling for silver costs

author: nishima
tags: bounty
version: 0.1

Changelog
0.1 - initial release
=end

if Vars.boxbuster_tip.nil?
  Vars.boxbuster_tip = 500
  respond "Default tip set to 500 silver"
  exit
end

if Vars.container.nil? || Vars.container2.nil?
  respond "You must first set your two main containers."
  respond ";vars set container=MAIN"
  respond ";vars set container2=SECONDARY"
  exit
end



user_command = Script.current.vars[0]
if !["get","get all","give","give all","list"].include?(user_command) or user_command.nil?
  respond ""
  respond "USAGE:"
  respond ";#{script.name} get          (get one box)"
  respond ";#{script.name} get all      (get all boxes)"
  respond ";#{script.name} give         (give box in right hand)"
  respond ";#{script.name} give all     (give all boxes you have)"
  respond ";#{script.name} list         (look at boxes in queue)"
  respond "\nTip is set to #{Vars.boxbuster_tip}"
  respond "\nExamples for setting the tip amount:"
  respond ";vars set boxbuster_tip=500"
  respond ";vars set boxbuster_tip=20%"
  respond ""
  exit
end

if (Room.current.id) == 2400 #icemule
    @pool_npc = "trickster"
    @garbage_bin = "barrel"
  elsif (Room.current.id) == 3807 #landing
    @pool_npc = "worker"
    @garbage_bin = "wastebasket"
  elsif (Room.current.id) == 18687 #Ta'Illistim
    @pool_npc = "gnome"
    @garbage_bin = "barrel"
  elsif (Room.current.id) == 28717 #RR
    @pool_npc = "woman"
    @garbage_bin = "wooden crate"
  elsif (Room.current.id) == 28719 #Sol
    @pool_npc = "jahck"
    @garbage_bin = "barrel"
  else
  respond "Not at known locksmith pool."
  exit
end

def get_box 
  fput "ask #{@pool_npc} to return"
  line = matchtimeout 1, "Alright, here's your"

  if line.is_a?(String)
    if line =~ /Alright, here's your ([a-z]+) ([a-z]+) back./
      boxMaterial = $1
      boxType = $2
    end
  else
    boxMaterial = boxType = nil
  end


  if boxMaterial == nil and boxType == nil
    respond "No boxes left or wrong place."
    exit
  end



  myBox = "#{boxMaterial} #{boxType}"

  fput "open my #{myBox}"
  fput "get coins"
  fput "look in my #{myBox}"
  waitrt?
  sleep 0.5
  fput "empty my #{myBox} into my #{Vars.container}"
  line = get until line =~ /You try to empty the contents of your/ || line =~ /There is nothing in/ || line =~ /is closed./
  if line =~ /, and everything falls in quite nicely./ || line =~ /, but nothing comes out./ || line =~ /There is nothing in the/
    waitrt?
    fput "glance my #{myBox}"
    line = get until line =~ /You glance at/
    if line =~ /mithril|gold|silver/
    sleep 0.3
      fput "stow my #{myBox}"
    else
    sleep 0.3
      fput "put my #{myBox} in #{@garbage_bin}"
    end
  else
    echo "You might be full or check the box..."
    exit
  end

end

def give_box
  if checkright
    fput "give #{@pool_npc} #{Vars.boxbuster_tip}"
    fput "give #{@pool_npc} #{Vars.boxbuster_tip}"
    #add check for not enough
  else
    respond "No box in right hand to offer."
  end
end

def my_containers
  container1 = Vars.container
  container2 = Vars.container2

  container1_id = (GameObj.inv.find {|container| container.noun == container1}).id
  container2_id = (GameObj.inv.find {|container| container.noun == container2}).id
  disk_id = (GameObj.loot.find {|disk| disk.name =~ /#{checkname} disk/}).id
  crate_id = (GameObj.loot.find {|crate| crate.name == "battered antique faewood crate"}).id

  container_list = [container1_id]
  container_list.append(container2_id) if !container2_id.nil?
  container_list.append(disk_id) if !disk_id.nil?
  container_list.append(crate_id) if !crate_id.nil?

  return container_list
end

def give_all_boxes
  boxlist = ["box","coffer","chest","trunk","strongbox"]
  my_containers.each do |current_container|
    put "look in ##{current_container}"
    waitfor "In the "
    found_boxes = (GameObj.containers.find {|container| container[0] == current_container })[1]
    give_this = found_boxes.select {|obj| boxlist.include? obj.noun }
    if give_this.size.to_i > 0 #any matching items
      give_this.each do |box| fput "get ##{box.id}"
      give_box
      matchtimeout 3, "We'll get someone on that right away."
      end
    else
      respond "no boxes found in ##{current_container}"
    end
  end
end

#count = 0
case user_command
when "get"
  get_box
when "get all"
loop {
  get_box
  waitfor "As you place","You put","As you toss"
}
when "give"
  give_box
when "give all"
  give_all_boxes
when "list"
  fput "ask #{@pool_npc} for list"
end