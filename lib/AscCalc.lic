=begin

  Parses your Ascension skill allocations and reports the ATP and EXP cost per skill.

  original author: Kaetel
       maintainer: Kaetel
             game: gs
             name: AscCalc
             tags: ascension,utility
          version: 1.0.4

  v1.0.4 (2025-05-15)
    - Added eligibility for gemstone slots
  v1.0.3 (2025-03-28)
    - Formatting updates
  v1.0.2 (2025-03-27)
    - Added handling for milestone ATPs to break down actual exp cost
    - Added unallocated ATPs
  v1.0.1 (2024-09-21)
    - Fixed caluclations for Trancend Destiny ATPs and Experience
  v1.0.0 (2024-09-19)
    - Initial release
=end

module AscCalc
  ASC_START_RX = /.+ your Ascension Abilities are as follows:/
  ASC_LINE_RX = /\s+([A-z\-\s]+)\s+\<d cmd.+\s+(\d+)\/\d+\s+.+/
  ASC_UNUSED_RX = /Available Ascension Abilities Points: (\d+)/

  MILESTONE_START_RX = /.+, your Ascension Milestones are as follows:/
  MILESTONE_LINE_RX = /\s+\d+\. .+ (Yes|No)/

  GEMSTONES_LOCKED_RX = /You have not yet unlocked Gemstones\./
  GEMSTONES_SLOTS_RX = /You have (\d) Gemstone slots? unlocked\./
  GEMSTONES_START_RX = Regexp.union(
    GEMSTONES_LOCKED_RX,
    GEMSTONES_SLOTS_RX
  )
  
  CUSTOM_COST_MAP = {
    'Transcend Destiny' => ->(ranks) {
      (1..ranks).to_a.map(&->(rank) {
        cost += [rank * 10, 50].min
      }).sum
    }
  }

  def self.formatSmall(v, width = 4)
    v.to_s.rjust(width)
  end

  def self.toExp(v, width = 12)
    (v * 50_000).with_commas.rjust(width)
  end

  def self.run()
    @@unused = 0
    @@costTotal = 0
    @@costSubtotal = 0
    @@ranksTotal = 0
    @@milestonesTotal = 0
    @@gemstoneSlots = 0
    @@report = []

    Lich::Util.quiet_command_xml('ASC INFO', ASC_START_RX)
      .each(&->(line) {self.ingest(line)})

    Lich::Util.quiet_command_xml('ASC MILESTONE', MILESTONE_START_RX)
      .each(&->(line) {self.ingestMilestone(line)})

    Lich::Util.quiet_command_xml('GEMSTONE SLOTS', GEMSTONES_START_RX)
      .each(&->(line) {self.ingestGemstones(line)})

    @@costTotal = @@costSubtotal - @@milestonesTotal + @@unused

    @@report << ['------', '', '', '']
    @@report << [
      'Subtotal',
      '',
      formatSmall(@@costSubtotal),
      toExp(@@costSubtotal)
    ]
    @@report << [
      '- Milestones',
      '',
      formatSmall(@@milestonesTotal*-1),
      toExp(@@milestonesTotal*-1)
    ]
    @@report << [
      '+ Unallocated',
      '',
      formatSmall(@@unused),
      toExp(@@unused)
    ]
    @@report << [
      'Total',
      formatSmall(@@ranksTotal),
      formatSmall(@@costTotal),
      toExp(@@costTotal)
    ]

    reportTable = Terminal::Table.new(
      headings: ['Skill', 'Ranks', 'ATPs', 'EXP'],
      rows: @@report
    )

    Lich::Messaging.mono(reportTable.to_s)

    if (@@gemstoneSlots > 0)
      reportGemstoneSlots()
    end
  end

  def self.reportGemstoneSlots
    gemstoneSlotMap = {
      5 => 7_500_000,
      4 => 4_500_000,
      3 => 2_500_000,
      2 => 1_000_000,
      1 => 0,
    }
    
    eligibleSlots = gemstoneSlotMap.find{ |slots, requirement|
      Experience.axp >= requirement
    }.first

    Lich::Messaging.msg('', '')
    Lich::Messaging.msg(
      'info',
      'You have unlocked %d out of %d possible gemstone slot%s based on your current ascension experience total of %s' % [
        @@gemstoneSlots,
        eligibleSlots,
        eligibleSlots > 1 ? 's' : '',
        Experience.axp.with_commas
      ])
  end

  def self.calcCost(skill, ranks)
    cost = 0
    
    if (CUSTOM_COST_MAP.key?(skill))
      return CUSTOM_COST_MAP[skill].call(ranks)
    end

    tier = ranks / 5
    depth = ranks % 5
        
    cost += (1..tier).to_a.map(&->(t) {5 * t}).sum

    if (depth > 0)
      cost += (depth * (tier + 1))
    end

    cost
  end

  def self.ingest(line)
    if (line =~ ASC_LINE_RX)
      skill = $1.strip
      ranks = $2.to_i
      cost = self.calcCost(skill, ranks)

      @@report << [
        skill,
        formatSmall(ranks),
        formatSmall(cost),
        toExp(cost)
      ]
      
      @@ranksTotal += ranks
      @@costSubtotal += cost
    elsif (line =~ ASC_UNUSED_RX)
      @@unused = $1.to_i
    end
  end

  def self.ingestMilestone(line)
    if (line =~ MILESTONE_LINE_RX)
      if ($1.downcase.eql?('yes'))
        @@milestonesTotal += 1
      end
    end
  end

  def self.ingestGemstones(line)
    if (line =~ GEMSTONES_SLOTS_RX)
      @@gemstoneSlots = $1.to_i
    end
  end

  self.run()
end
