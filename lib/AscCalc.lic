=begin

  Parses your Ascension skill allocations and reports the ATP and EXP cost per skill.

  original author: Kaetel
       maintainer: Kaetel
             game: gs
             name: AscCalc
             tags: ascension,utility
          version: 1.0

  v1.0.1 (2024-09-21)
    - Fixed caluclations for Trancend Destiny ATPs and Experience
  v1.0.0 (2024-09-19)
    - Initial release
=end

module AscCalc
  ASC_START_RX = /.+ your Ascension Abilities are as follows:/
  ASC_LINE_RX = /\s+([A-z\-\s]+)\s+\<d cmd.+\s+(\d+)\/\d+\s+.+/
  
  CUSTOM_COST_MAP = {
    'Transcend Destiny' => ->(ranks) {
      (1..ranks).to_a.map(&->(rank) {
        cost += [rank * 10, 50].min
      }).sum
    }
  }

  def self.run()
    @@costTotal = 0
    @@ranksTotal = 0
    @@report = []

    Lich::Util.quiet_command_xml('ASC INFO', ASC_START_RX)
      .each(&->(line) {self.ingest(line)})

    @@report << ['-', '', '', '']
    @@report << [
      'Total',
      @@ranksTotal,
      @@costTotal,
      (@@costTotal * 50_000).with_commas
    ]

    reportTable = Terminal::Table.new(
      headings: ['Skill', 'Ranks', 'ATPs', 'EXP'],
      rows: @@report
    )

    Lich::Messaging.mono(reportTable.to_s)
  end

  def self.calcCost(skill, ranks)
    cost = 0
    
    if (CUSTOM_COST_MAP.key?(skill))
      return CUSTOM_COST_MAP[skill].call(ranks)
    end

    tier = ranks / 5
    depth = ranks % 5
        
    cost += (1..tier).to_a.map(&->(t) {5 * t}).sum

    if (depth > 0)
      cost += (depth * (tier + 1))
    end

    cost
  end

  def self.ingest(line)
    if (line =~ ASC_LINE_RX)
      skill = $1.strip
      ranks = $2.to_i
      cost = self.calcCost(skill, ranks)

      @@report << [
        skill,
        ranks,
        cost,
        (cost * 50_000).with_commas
      ]
      
      @@ranksTotal += ranks
      @@costTotal += cost
    end
  end

  self.run()
end
