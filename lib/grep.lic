=begin
  basic grepping for Gemstone commands

  features:
    * && chaining

  
  examples:
    >locker manifest landing | grep coraesine|urnon
      a coraesine dagger
    >locker manifest landing | grep vorpal
      ...no matches
    >locker manifest land && locker manifest sol | grep brace*
  
  Required: Lich 4.3.12
  Author: Ondreian
  tags: util, grep, search
=end

class Grep
  @@grepping = false
  @@matched  = false
  STOP_TOKEN = /\<prompt/
  PIPE_TOKEN = "|"
  GREP_PIPE  = /^\<c\>(?<command>.*?)\|( |)grep ('|"|)(?<search>.*?)('|"|)$/

  def self.send(cmd)    
    respond "grep>#{cmd}"
    Game._puts "<c>#{cmd}\r\n"
  end

  def self.reset!
    @@grepping = false
    @@matched  = false
  end

  def self.matched!
    @@matched = true
  end

  def self.halt!
    @@grepping = false
  end

  def self.grepping!
    @@grepping = true
  end

  def self.matched?
    @@matched
  end

  def self.grepping?
    @@grepping
  end

  def self.match(cmd, search)
    Grep.grepping!
    exp = Regexp.new(%{(?<match>#{search})})
    n = 0
    DownstreamHook.add(self.name, Proc.new do |line|
      begin
        unless Grep.grepping?
          line
        else
          if line =~ STOP_TOKEN
            DownstreamHook.remove(self.name)
            Grep.halt!
            nil
          elsif !line.empty? && info = line.downcase.match(exp)
            Grep.matched!
            n = n +1
            if line.size > 20
              # TODO: highlight matches on long lines
              #line = line.gsub(exp, "<b>#{info[:match]}</b>")
            end
            %{#{n.to_s.rjust(3)}: #{line.gsub(%r{^\s+}, "")}}
          else
            nil
          end
        end
      rescue
        respond $!
        respond $!.backtrace[0..1]
        DownstreamHook.remove(self.name)
        line
      end
    end)

    Grep.send cmd

    while grepping?
      sleep 0.1
    end
    
    unless Grep.matched?
      respond "\t...no matches"
    end

    Grep.reset!   
  end

  def self.pipe(input)
    begin
      if input =~ GREP_PIPE
        _, cmds, search = *GREP_PIPE.match(input)
        cmds.split("&&").map(&:strip).each do |cmd|
          Grep.match cmd, search
        end
        nil
      else
        input
      end
    rescue
      respond $!
      respond $!.backtrace[0..1]
      input
    end
  end

  UpstreamHook.add(self.name, Proc.new do |cmd|
    Grep.pipe cmd
  end)
end
