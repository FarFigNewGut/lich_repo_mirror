module Go2Person
	def self.lookup_legacy(room)
		Map.list.find do |r| 
			r.title.include?(room['title']) and r.desc.include?(room['description']) and r.paths.include?(room['exits']) 
		end
	end

	def self.raise_not_mapped(name, room)
		fail Exception, %{#{name} is not in a mapped room => \n#{room["title"]}\n#{room["description"]}}
	end

	def self.raise_too_many_tries(name)
		fail Exception, %{Too many failures tracking down #{name}}
	end

	WRONG_LEADER = %r{is already a member of (?<leader>.*)'s group}
	OK = %r{^You join|does not let you join} 
	NOT_FOUND = %r{Player not found}

	JOIN_OUTCOMES = Regexp.union(
		WRONG_LEADER,
		OK,
		NOT_FOUND)

	def self.join_group(name, n)
		target = GameObj.pcs.to_a.find do |pc| pc.noun.downcase.start_with?(name.downcase) end
		return if target.nil?
		case (result = dothistimeout("join ##{target.id}", 3, JOIN_OUTCOMES))
		when WRONG_LEADER
			return join_group($1, n)
		when NOT_FOUND
			return go2(name, n + 1)
		else
			# silence is golden
		end	
	end

	def self.go2_cluster(name)
		return :err unless defined?(Cluster)
		target = Cluster.connected.find do |key| key.downcase.start_with?(name.downcase) end
		return :err if target.nil?
		Log.out(target, label: :target)
		resp = Cluster.request(name, channel: :location, timeout: 1)
		Log.out(resp, label: :location)
		return :err	if resp.is_a?(Exception)
		resp.id.go2
		resp
	end

	def self.go2_lnet(name)
		room = LNet.get_data(name, 'locate')
		respond room if Script.current.vars.include?("--debug")
		# make sure lnet responded with something
		room.is_a?(Hash) or fail Exception, %{locate failed}
		if room.include?("id") and room.fetch("id", false)
			# 0net includes id in the response to make lookups constant time
			Script.run("go2", room["id"].to_s)
		elsif room.include?("id")
			raise_not_mapped(name, room)
		else
			# fall-back to slow legacy ;lnet lookup
			found = Go2Person.lookup_legacy(room) or raise_not_mapped(name, room)
			Script.run("go2", found["id"].to_s)
		end
	end

	def self.go2(name, n = 0)
		raise_too_many_tries(name) if n > 2
		fast_lookup = Go2Person.go2_cluster(name)
		Log.out(fast_lookup, label: :fast_lookup)
		go2_lnet(name) if fast_lookup.eql?(:err)
		join_group(name, n)
	end

	Go2Person.go2(Script.current.vars.last.downcase)
end
