=begin
  attendance 1.11

  This script tracks attendance for events and gatherings.
  It will scan the room roughly every minute and count the number of minutes each person has been in attendance.
  Attendance time is only incremented for a person if they were present for the prior room scan.
  It will also optionally identify new and returning arrivals.

  
  version 1.11
  - Added messaging to show new arrivals when Attendance is first launched.

  version 1.10
  - cleaned up code for readability
  - added option to toggle display of time at event when listing attendees.
  - added option to toggle minimum required attendance time for attendees.
  - added option to list attendees that did not meet the minimum required attendance time.

  Usage: ;attendance

  While it is running:
    ;send attendance menu - displays this menu.
    ;send attendance new - displays newly added attendeed (most recent time unit).
    ;send attendance list - displays current list of all attendees.
    ;send attendance newarrival - toggles newarrival notification on update (default is on).
    ;send attendance showtime - toggles display of time at event when listing attendees (default is on)
    ;send attendance setmintime - toggles minimum time required for attendance at the event to be recognized (1, 5, 10, 15, 30).
    ;send attendance listall - toggles display of attendees that did not meet the minimum attendance time requirement (default is off)
    ;send attendance exit - displays current list of all attendees and exits ;attendance.

  Feel free to contact me with questions, feedback, requests for additional features, etc. either
  in-game or via my play.net email address.

  -- Faulkil
=end

class Attendees

  class Attendee

    attr_reader :name, :firstarrived, :lastarrived, :lastseen, :scansthisvisit, :scansthisevent

    def initialize(name, interval)
      @name = name
      @firstarrived = interval
      @lastarrived = interval
      @lastseen = interval
      @scansthisvisit = 0      
      @scansthisevent = 0
    end

    def update(interval)
      #returns 1 for new visit, 0 if extending current visit.
      if interval > (@lastseen + 1) #start a new visit.
        @lastseen = interval
        @lastarrived = interval
        @scansthisvisit = 0
        return 1
      elsif (interval == (@lastseen + 1)) #still here since last check!
        @lastseen = interval
        @scansthisvisit += 1
        @scansthisevent += 1
        return 0
      else
        echo "Something wonky happened and we went back in time!"
        exit
      end
      
    end #update

  end #class Attendee

  def initialize()
    @interval = 0
    @participants = Hash.new()
    @eventstarttime = Time.now()
    @lastintervaltime = @eventstarttime
    @lastnewarrivaltime = nil
    @lastnewarrivalinterval = -1

    @minrequiredscans = 1
    @newarrivalnotification = :on
    @displaytimeatevent = :off
    @displayattendeeslessthanrequiredtime = :off
    @secondsperinterval = 60
  end

  def increment_interval()
    @interval += 1
    @lastintervaltime = Time.now()
  end #increment_interval

  def add_attendee(name)
    if @participants[name] == nil
      @participants[name] = Attendee.new(name, @interval)
      @lastnewarrivalinterval = @interval
      @lastnewarrivaltime = @lastintervaltime
    else
      if (@participants[name].update(@interval)) == 1
        @lastnewarrivalinterval = @interval
        @lastnewarrivaltime = @lastintervaltime
      end
    end
  end #add_attendee

  def list_new_arrivals(mode)
    #mode == :mostrecentarivals
    #mode == :lastscan

    newarrival = []
    if mode == :mostrecentarrivals  #return list of most recent arrivals
      for participant in @participants.keys
        if @participants[participant].lastarrived == @lastnewarrivalinterval
          if @participants[participant].lastarrived == @participants[participant].firstarrived
            newarrival << "#{@participants[participant].name} (new)"
          else
            newarrival << "#{@participants[participant].name} (returning)"
          end
        end
      end
      if (newarrival.length == 0)
        return "No new arrivals since attendance began at #{@eventstarttime.strftime("%I:%M%p")}."
      elsif (newarrival.length == 1)
        return "One new arrival since #{@lastnewarrivaltime.strftime("%I:%M%p")}: #{newarrival.join(", ")}."
      else
        return "#{newarrival.length} new arrivals since #{@lastnewarrivaltime.strftime("%I:%M%p")}: #{newarrival.join(", ")}."
      end
    elsif (mode == :lastscan and @newarrivalnotification == :on)  #return list of new arrivals for current @interval
      for participant in @participants.keys
        if @participants[participant].lastarrived == @interval
          if @participants[participant].lastarrived == @participants[participant].firstarrived
            newarrival << "#{@participants[participant].name} (new)"
          else
            newarrival << "#{@participants[participant].name} (returning)"
          end
        end
      end
      if (newarrival.length == 0)
        return nil
      elseif (newarrival.length == 1)
        return "One new arrival since the last update: #{newarrival.join(", ")}."
      else
        return "#{newarrival.length} new arrivals since the last update: #{newarrival.join(", ")}."
      end
    end
    return nil
  end #list_new_arrivals

  def list_attendees()
    currentattendees = []
    ineligibleattendees = []

    for participant in @participants.keys
      if @participants[participant].scansthisevent >= @minrequiredscans
        if @displaytimeatevent == :on
          currentattendees << "#{@participants[participant].name} (#{@participants[participant].scansthisevent})"
        else
          currentattendees << "#{@participants[participant].name}"
        end
      else
        if @displaytimeatevent == :on
          ineligibleattendees << "#{@participants[participant].name} (#{@participants[participant].scansthisevent})"
        else
          ineligibleattendees << "#{@participants[participant].name}"
        end
      end
    end
    if currentattendees.length == 0 and ineligibleattendees.length == 0
      return "No attendees seen from #{@eventstarttime.strftime("%I:%M%p")} through #{Time.now.strftime("%I:%M%p")}:"
    elsif @displayattendeeslessthanrequiredtime == :off
      return "#{currentattendees.length} attendees counted (present for at least #{@minrequiredscans}) from #{@eventstarttime.strftime("%I:%M%p")} through #{Time.now.strftime("%I:%M%p")}:\r\n#{currentattendees.join(", ")}."
    else
      return "#{currentattendees.length} attendees counted (present for at least #{@minrequiredscans}) from #{@eventstarttime.strftime("%I:%M%p")} through #{Time.now.strftime("%I:%M%p")}:\r\n#{currentattendees.join(", ")}.\r\n\r\n#{ineligibleattendees.length} attendees have not met the minimum required time:\r\n#{ineligibleattendees.join(", ")}."
    end
  end #list_attendees

  def toggle_new_arrival_notification()
    if @newarrivalnotification == :off
      @newarrivalnotification = :on
    else
      @newarrivalnotification = :off
    end
    return @newarrivalnotification
  end #toggle_new_arrival_notification()

  def toggle_display_time_at_event()
    if @displaytimeatevent == :off
      @displaytimeatevent = :on
    else
      @displaytimeatevent = :off
    end
    return @displaytimeatevent
  end #toggle_display_time_at_event()

  def toggle_list_attendees_under_min_time()
    if @displayattendeeslessthanrequiredtime == :off
      @displayattendeeslessthanrequiredtime = :on
    else
      @displayattendeeslessthanrequiredtime = :off
    end
    return @displayattendeeslessthanrequiredtime
  end #toggle_list_attendees_under_min_time()

  def toggle_min_required_scans()
    if @minrequiredscans == 1
      @minrequiredscans = 5
    elsif @minrequiredscans == 5
      @minrequiredscans = 10
    elsif @minrequiredscans == 10
      @minrequiredscans = 15
    elsif @minrequiredscans == 15
      @minrequiredscans = 30
    else
      @minrequiredscans = 1
    end
    return @minrequiredscans
  end #toggle_min_required_scans()

  def set_time_unit(seconds)
    @secondspertime = seconds
  end #set_time_unit

end #Class Attendees

def msg(message)

  if $fake_stormfront
    then puts("\034GSL\r\n")
    else puts("<pushBold\/>")
  end
  puts("Attendance: " + message)
  if $fake_stormfront
    then puts("\034GSM\r\n")
    else puts("<popBold\/>")
  end

end


#Begin main program
msg "Starting attendance version 1.11 at #{Time.now.strftime("%I:%M%p")}."
msg "Type ';send attendance menu' for a list of commands."

hide_me
setpriority(-2)

if toggle_upstream == false
  then toggle_upstream
end

participants = Attendees.new

#Set loop counter to pick up people in room on initial pass.
loopcounter = 19

before_dying {
  msg "#{participants.list_attendees()}"
  msg "Attendance shutting down."
}

while true
  #Check for attendance commands issued via the ;send command.
  messages = clear

  for message in messages
    if (message.downcase == "attendance menu")
      msg "===  Attendance Commands  ==="
      msg ";send attendance menu - displays this menu."
      msg ";send attendance new - displays nost recent arrivals (new or returning)."
      msg ";send attendance list - displays current list of all attendees."
      msg ";send attendance newarrival - toggles newarrival notification on update (default is on)."
      msg ";send attendance showtime - toggles display of time at event when listing attendees (default is on)"
      msg ";send attendance setmintime - toggles minimum time required for attendance to be recognized (default=1, 5, 10, 15, 30)."
      msg ";send attendance listall - toggles display of attendees that did not meet the minimum attendance time requirement (default is off)"
      msg ";send attendance exit - displays current list of all attendees then exits."
      msg ""
      msg "*Note that ';k attendance' will have the same result as ';send attendance exit'."
    elsif (message.downcase == "attendance new")
      msg "#{participants.list_new_arrivals(:mostrecentarrivals)}"
    elsif  (message.downcase == "attendance list")
      msg "#{participants.list_attendees()}"
    elsif (message.downcase == "attendance newarrival")
      result = participants.toggle_new_arrival_notification()
      if result == :on
        msg "New arrival notification turned on."
      else
        msg "New arrival notification turned off."
      end
    elsif (message.downcase == "attendance showtime")
      result = participants.toggle_display_time_at_event()
      if result == :on
        msg "Attendee lists will now display time in attendance for each attendee."
      else
        msg "Attendee lists will not display time in attendance for each attendee."
      end
    elsif (message.downcase == "attendance setmintime")
      result = participants.toggle_min_required_scans()
      if result == 1
          msg "Attendee must be present for at least one full scan to be counted for this event."
      else
        msg "Attendee must be present for at least #{result} full scans to be counted for this event."
      end
    elsif (message.downcase == "attendance listall")
      result = participants.toggle_list_attendees_under_min_time
      if result == :on
        msg "Attendees that do not meet the minimum scan requirement will be displayed in a seperate list."
      else
        msg "Attendees that do not meet the minimum scan requirement will not be displayed."
      end
    elsif (message.downcase == "attendance exit")
      #exit messaging handled by before_dying routine.
      exit
    end
  end

  loopcounter += 1
  if (loopcounter) == 20
    #reset loopcounter, increment timer, add or update attendees
    loopcounter = 0
    participants.increment_interval()
    for pc in GameObj.pcs
      participants.add_attendee(pc.name)
    end
    #display new arrivals
    if (pmessage = participants.list_new_arrivals(:lastscan)) != nil
      msg(pmessage)
    end
  end

  sleep 3

end #while true
