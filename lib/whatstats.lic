=begin
	What stats?
	Script is a stat growth calculator
	Script should work for any race/profession combo
	Script has two major functions
		DEFAULT:  shows current level and next levelup per stat
		ALTERNATE:  shows full stat increase through cap/max per stat
	USAGE:	;whatstats			=> Default use
			;whatstats full			=> Alternate use

	UPDATE!  7-17-2012
				ADDED MONKS!  ADDED MONKS!  ADDED MONKS!
				### PREVIOUS UPDATES ###
				Added stat totaling and display for current stats
				full mode will also show calculated capped stats total
	author: Gibreficul
	tags: information, utility, stats, GI
=end
quiet_exit
full_mode = false
case script.vars[0]
when /full/i
	if Char.level < 100
		full_mode = true
	end
end
professions = {
	'bard' => 			{'con' => 20, 'dex' => 25, 'dis' => 15, 'log' => 10, 'int' => 15, 'str' => 25, 'agl' => 20, 'inf' => 30, 'wis' => 20, 'aur' => 25,	},
	'cleric' => 		{'con' => 20, 'dex' => 10, 'dis' => 25, 'log' => 25, 'int' => 25, 'str' => 20, 'agl' => 15, 'inf' => 20, 'wis' => 30, 'aur' => 15,	},
	'empath' => 		{'con' => 20, 'dex' => 15, 'dis' => 25, 'log' => 25, 'int' => 20, 'str' => 10, 'agl' => 15, 'inf' => 25, 'wis' => 30, 'aur' => 20,	},
	'monk' =>		{'con' => 25, 'dex' => 20, 'dis' => 25, 'log' => 20, 'int' => 20, 'str' => 25, 'agl' => 30, 'inf' => 10, 'wis' => 15, 'aur' => 15,	},
	'paladin' => 		{'con' => 25, 'dex' => 20, 'dis' => 25, 'log' => 10, 'int' => 15, 'str' => 30, 'agl' => 20, 'inf' => 20, 'wis' => 25, 'aur' => 15,	},
	'ranger' => 		{'con' => 20, 'dex' => 30, 'dis' => 20, 'log' => 15, 'int' => 25, 'str' => 25, 'agl' => 20, 'inf' => 10, 'wis' => 25, 'aur' => 15,	},
	'rogue' => 		{'con' => 20, 'dex' => 25, 'dis' => 20, 'log' => 20, 'int' => 25, 'str' => 25, 'agl' => 30, 'inf' => 15, 'wis' => 10, 'aur' => 15,	},
	'sorcerer' => 		{'con' => 15, 'dex' => 20, 'dis' => 25, 'log' => 25, 'int' => 20, 'str' => 10, 'agl' => 15, 'inf' => 20, 'wis' => 25, 'aur' => 30,	},
	'warrior' => 		{'con' => 25, 'dex' => 25, 'dis' => 20, 'log' => 10, 'int' => 20, 'str' => 30, 'agl' => 25, 'inf' => 20, 'wis' => 15, 'aur' => 15,	},
	'wizard' => 		{'con' => 15, 'dex' => 25, 'dis' => 20, 'log' => 25, 'int' => 25, 'str' => 10, 'agl' => 15, 'inf' => 20, 'wis' => 20, 'aur' => 30,	},
}
races = {
	'dark elf' => 		{'con' => -2, 'dex' => 5,  'dis' => -2,  'log' => 0, 'int' => 0, 'str' => 0, 'agl' => 5, 'inf' => 0, 'wis' => 0, 'aur' => 0,},
	'dwarf' => 		{'con' => 5,  'dex' => -3, 'dis' => 3,   'log' => 0, 'int' => 0, 'str' => 5, 'agl' => -5, 'inf' => -2, 'wis' => 3, 'aur' => 0,},
	'elf' => 			{'con' => -5, 'dex' => 5,  'dis' => -5,  'log' => 0, 'int' => 0, 'str' => 0, 'agl' => 3, 'inf' => 3, 'wis' => 0, 'aur' => 5,},
	'giantman' => 		{'con' => 3,  'dex' => -2, 'dis' => 0,   'log' => 0, 'int' => 2, 'str' => 5, 'agl' => -2, 'inf' => 0, 'wis' => 0, 'aur' => 0,},
	'half-elf' => 		{'con' => 0,  'dex' => 2,  'dis' => -2,  'log' => 0, 'int' => 0, 'str' => 2, 'agl' => 2,    'inf' => 2, 'wis' => 0, 'aur' => 0,},
	'halfling' => 		{'con' => 5,  'dex' => 5,  'dis' => -2,  'log' => -2, 'int' => 0, 'str' => -5, 'agl' => 5, 'inf' => 0, 'wis' => 0, 'aur' => 0,},
	'human' => 		{'con' => 2,  'dex' => 0,  'dis' => 0,   'log' => 0, 'int' => 2, 'str' => 2, 'agl' => 0,    'inf' => 0, 'wis' => 0, 'aur' => 0,},
	'sylvankind' => 	{'con' => -2, 'dex' => 5,  'dis' => -5, 'log' => 0, 'int' => 0, 'str' => -3, 'agl' => 5, 'inf' => 3, 'wis' => 0, 'aur' => 3,},
	'forest gnome' => 	{'con' => 2,  'dex' => 2,  'dis' => 2,   'log' => 0, 'int' => 0, 'str' => -3, 'agl' => 3, 'inf' => 0, 'wis' => 0, 'aur' => 0,},
	'burghal gnome' => 	{'con' => 0,  'dex' => 3,  'dis' => -3, 'log' => 5, 'int' => 5, 'str' => -5, 'agl' => 3, 'inf' => 0, 'wis' => 0, 'aur' => -2,},
	'half-krolvin' => 	{'con' => 5,  'dex' => 2,  'dis' => 0,  'log' => -2, 'int' => 0, 'str' => 3, 'agl' => 2, 'inf' => -2, 'wis' => 0, 'aur' => -2,},
	'erithian' => 		{'con' => 0,  'dex' => 0,  'dis' => 3,  'log' => 2, 'int' => 0, 'str' => -2, 'agl' => 0, 'inf' => 3, 'wis' => 0, 'aur' => 0,},
	'aelotoi' => 		{'con' => -2, 'dex' => 3,  'dis' => 2,  'log' => 0, 'int' => 2,  'str' => 0, 'agl' => 3, 'inf' => -2, 'wis' => 0, 'aur' => 0,},
}
mystats = 	{	'con' => Stats.con[0], 'dex' => Stats.dex[0], 'dis' => Stats.dis[0], 'log' => Stats.log[0], 'int' => Stats.int[0],  'str' => Stats.str[0], 'agl' => Stats.agi[0], 'inf' => Stats.inf[0], 'wis' => Stats.wis[0], 'aur' => Stats.aur[0],}
myrace = races[Char.race.downcase]
myprof = professions[Char.prof.downcase]
gri = {}

mystats.each{|key, val|
	gri[key] = [1, (val / (myrace[key] + myprof[key])).floor].max
}
respond ""
respond  "* * * * * * * * * * * * * * * * * * * * LEVEL #{Char.level} * * * * * * * * * * * * * * * * * * * *"
curtotal = 0
fintotal = 0
gri.each{|a, b|
	curtotal += mystats[a]
	respond "*"
	respond "* The Growth Interval for #{a.upcase} as a level #{Char.level} #{Char.race} #{Char.prof} is #{b}:  Growth divisor:  #{myrace[a] + myprof[a]}"
	if mystats[a] == 100
		respond "*     Your #{a.upcase} Stat is maxed:  #{mystats[a]}"
		fintotal += mystats[a]
		next
	end
	case (Char.level / b.to_f) <=> (Char.level / b.to_f).floor
	when 1
		respond	"*     No stat growth at level #{Char.level} for #{a.upcase}"
		newlevel = Char.level
		loop{
			newlevel += 1
			if newlevel >  100 || mystats[a] >= 100
				if full_mode
					respond "*          Your #{a.upcase} stat will max at #{mystats[a]}"
				else
					respond "*          Your #{a.upcase} is has reached it's max value of #{mystats[a]}."
				end
				break
			end
			case (newlevel / b.to_f) <=> (newlevel.to_f / b).floor
			when 0
				respond "*          Your #{a.upcase} will grow from #{mystats[a]} to #{mystats[a] += 1} at level #{newlevel}"
				gg = [1, (mystats[a] / (myrace[a] + myprof[a])).floor].max
				if gg != b
					respond "*               Growth Interval changed from #{b} to #{gg}"
					b = gg
				end
				unless full_mode
					break
				end
			end
		}
		fintotal += mystats[a]
	when 0
		respond	"*     Your character should have seen stat growth in #{a.upcase} from #{mystats[a] - 1} to #{mystats[a]} at level #{Char.level}"
		newlevel = Char.level
		loop{
			newlevel += 1
			if newlevel >  100 || mystats[a] >= 100
				if full_mode
					respond "*          Your #{a.upcase} stat will max at #{mystats[a]}"
				else
					respond "*          Your #{a.upcase} is has reached it's max value of #{mystats[a]}."
				end
				break
			end
			case (newlevel / b.to_f) <=> (newlevel.to_f / b).floor
			when 0
				respond "*          Your #{a.upcase} will grow from #{mystats[a]} to #{mystats[a] += 1} at level #{newlevel}"
				gg = [1, (mystats[a] / (myrace[a] + myprof[a])).floor].max
				if gg != b
					respond "*               Growth Interval changed from #{b} to #{gg}"
					b = gg
				end
				unless full_mode
					break
				end
			end
		}
		fintotal += mystats[a]
	end
}
respond "*"
if Char.level == 100
	respond "*	- You are level 100 (capped), your stat total is #{curtotal}"
elsif full_mode
	respond "*	-The total of your current stats is #{curtotal}"
	respond "*	-The total of your calculated capped stats is #{fintotal}"
else
	respond "*	- Current stat total is #{curtotal}"
end
respond "*"
respond "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"