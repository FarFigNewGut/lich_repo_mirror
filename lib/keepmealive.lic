=begin

	"keepmealive.lic"
	This script combines other scripts to keep the user alive with "sigil of health".
	
	Reference:
	https://gswiki.play.net/Guardians_of_Sunfist
	
	author: Nisch
	requestor: Aemma

	this script uses snippets from the script(s):
		waggle by Tillmen
	
	changelog:
		1.0.0 (2019-01-17)
			Initial version

=end

use_power    = true
use_mana     = true
use_wracking = false

reserve_mana = 1

# author: Tillmen (tillmen@lichproject.org)
check_mana = proc { |spell, num_multicast|

	unless spell.affordable?(:multicast => num_multicast) and ((spell.mana_cost == 0) or (mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana))
	
		sigil_of_health        = Spell[9717]		
		sigil_of_power          = Spell[9718]
		
		sign_of_wracking        = Spell[9918]
		
		symbol_of_mana          = Spell[9813]
		symbol_of_mana_cooldown = Spell[9048]
		
		punishment              = Spell[9012]		

		if use_power and sigil_of_power.known? and (spell.mana_cost > 0) and (mana < (spell.mana_cost(:multicast => num_multicast) + reserve_mana)) and (spell.stamina_cost == 0)
			until spell.affordable?(:multicast => num_multicast) and (mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)
				if sigil_of_power.affordable?
					sigil_of_power.cast
					sleep 0.2
				else
					fput 'release' unless checkprep == 'None'
					echo 'waiting for mana...'
					wait_until { (spell.affordable?(:multicast => num_multicast) and (mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)) or sigil_of_power.affordable? }
				end
			end
		elsif use_mana and symbol_of_mana.known? and spell.mana_cost > 0
			until spell.affordable?(:multicast => num_multicast) and (mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)
				waitrt?
				waitcastrt?
				if not symbol_of_mana_cooldown.active?
					# fixme: might spam if out of favor
					symbol_of_mana.cast
					sleep 0.2
				else
					fput 'release' unless checkprep == 'None'
					echo 'waiting for mana or mana cooldown...'
					wait_until { (spell.affordable?(:multicast => num_multicast) and (mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)) or not symbol_of_mana_cooldown.active? }
				end
			end
		elsif use_wracking and sign_of_wracking.known? and not punishment.active? and (spell.mana_cost > 0) and (mana < (spell.mana_cost(:multicast => num_multicast) + reserve_mana))
			until spell.affordable?(:multicast => num_multicast) and (mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)
				waitrt?
				waitcastrt?
				if sign_of_wracking.affordable? and not punishment.active? 
					if invisible? or hidden? or not checkpcs
						sign_of_wracking.cast if checkspirit(6)
					else
						status_tags
						evil_pcs = checkpcs
						result = dothistimeout 'sign of recognition', 5, /^You (?:touch|scratch|rub|tap|point to) your (?:right|left) (?:eyebrow|nostril|earlobe|shoulder|cheek) with your (?:right|left) (?:pinky|forefinger|thumb|index finger)\.$/
						unless result.nil?
							while (line = get) and (line !~ /<prompt/)
								if line =~ /<a.*?>([A-Z][a-z]+)<\/a> acknowledges your sign/
									evil_pcs.delete($1)
								end
							end
						end
						status_tags
						if sign_of_wracking.affordable? and (evil_pcs.nil? or evil_pcs.empty?)
							sign_of_wracking.cast if checkspirit(6)
						elsif sign_of_wracking.affordable? and wander_to_wrack
							start_room = Room.current
							20.times {
								break if (checkpcs.nil? or invisible?) and not Room.current.tags.include?('no-magic')
								wander.call
							}
							if (checkpcs.nil? or invisible?) and checkspirit(6) and not Room.current.tags.include?('no-magic')
								sign_of_wracking.cast
								unless start_room == Room.current
									start_script 'go2', [ start_room.id.to_s ]
									wait_while { running?('go2') }
								end
							else
								unless start_room == Room.current
									start_script 'go2', [ start_room.id.to_s ]
									wait_while { running?('go2') }
								end
								fput 'release' unless checkprep == 'None'
								echo 'waiting on mana... or evil people to go away...'
								wait_until { (spell.affordable?(:multicast => num_multicast) and (spell.mana_cost == 0 or mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)) or hidden? or invisible? or not checkpcs.to_a.any? { |pc| evil_pcs.include?(pc) } }
							end
						else
							fput 'release' unless checkprep == 'None'
							echo 'waiting on mana... or evil people to go away...'
							wait_until { (spell.affordable?(:multicast => num_multicast) and (spell.mana_cost == 0 or mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)) or hidden? or invisible? or not checkpcs.to_a.any? { |pc| evil_pcs.include?(pc) } }
						end
					end
				else
					fput 'release' unless checkprep == 'None'
					echo 'waiting for mana or spirit...'
					wait_until { (spell.affordable?(:multicast => num_multicast) and (spell.mana_cost == 0 or mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana)) or sign_of_wracking.affordable? }
				end
			end
		else
			fput 'release' unless checkprep == 'None'
			echo 'waiting for mana...'
			wait_until { spell.affordable?(:multicast => num_multicast) and (spell.mana_cost == 0 or mana >= spell.mana_cost(:multicast => num_multicast) + reserve_mana) }
		end
		

	end
}

# author: Tillmen (tillmen@lichproject.org)
release_spell = proc {
	unless checkprep == 'None'
		dothistimeout 'release', 5, /^You feel the magic of your spell rush away from you\.$|^You don't have a prepared spell to release!$/
	end
}

# author: Tillmen (tillmen@lichproject.org)
fix_spell = proc { |spell|

	#if (spell.class == Fixnum) or (spell.class == String and spell =~ /^[0-9]+$/)
	
	if (spell.class == String and spell =~ /^[0-9]+$/)
		spell = Spell[spell.to_i]
	end
	unless spell.class == Spell
		echo 'error: missing spell information'
		exit
	end
	spell
}

# author: Tillmen (tillmen@lichproject.org)
cast_spell = proc { |spell, target, num_multicast|
	did_something = true
	spell = fix_spell.call(spell)
	result = nil
	loop {
		check_mana.call(spell, num_multicast)
		if target == Char.name
			if num_multicast > 1
				cast_result = spell.cast(num_multicast.to_s)
			else
				cast_result = spell.cast
			end
		else
			if num_multicast > 1
				cast_result = spell.cast("at #{target} #{num_multicast}")
			else
				cast_result = spell.cast("at #{target}")
			end
		end
		if cast_result =~ /^Be at peace my child, there is no need for spells of war in here\.$|Spells of War cannot be cast/
			result = :bad_spell
			break
		elsif cast_result == 'Cast at what?'
			result = :bad_target
			break
		elsif cast_result =~ /^\[Spell Hindrance for/
			nil # try again
		else
			result = :success
			break
		end
	}
	result
}

# author: Tillmen (tillmen@lichproject.org)
get_target_info = proc { |target|
	if defined?(LNet.get_data)
		LNet.get_data(target, 'spells')
	else
		nil
	end
}

# author: Tillmen (tillmen@lichproject.org)
max_multicast = proc{ |spell|
	ranks = 0
	if Char.prof == 'Wizard'
		ranks = Skills.emc
	elsif Char.prof =~ /^Cleric$|^Ranger$|^Paladin$/
		ranks = Skills.smc
	elsif Char.prof =~ /^Empath$|^Monk$|^Bard$/
		if [1,2].include?(spell.circle.to_i)
			ranks = Skills.smc + (Skills.mmc / 2)
		elsif spell.circle.to_i == 11
			ranks = [Skills.mmc,Skills.smc].max + ([Skills.mmc,Skills.smc].min / 2)
		elsif spell.circle.to_i == 12
			ranks = Skills.mmc + (Skills.smc / 2)
		elsif spell.circle.to_i == 4
			ranks = Skills.emc + (Skills.mmc / 2)
		end
	elsif Char.prof =~ /^Sorcerer$|^Warrior$|^Rogue$/
		if spell.circle.to_i == 4
			ranks = Skills.emc + (Skills.smc / 2)
		elsif spell.circle.to_i == 1
			ranks = Skills.smc + (Skills.emc / 2)
		elsif spell.circle.to_i == 7
			ranks = [Skills.emc,Skills.smc].max + ([Skills.emc,Skills.smc].min / 2)
		end
	end
	(ranks / 25) + 1
}

# sigil of health == 9717
spell = fix_spell.call('9717')
name = Char.name

#cast_spell.call(spell, name, max_multicast.call(spell))

loop {
	wait_until{percenthealth < 80};
	echo "Health is low - trying to automatically increase health!"
	cast_spell.call(spell, name, max_multicast.call(spell)) until percenthealth > 95
}