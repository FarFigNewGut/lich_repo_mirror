=begin
Author: Demandred
Contributors: Doug, Falicor, Tysong
Game: Gemstone
Version: 2.1
Tags: Paladin,Consecrate,1604

changelog
	2.1 - small change to prepared spell check.
	2.0 - spelling error.
	1.9 - insurance on prepping 1604 in normal item consecrate.
	1.8 - fixed some remaining issue with the added normal item consecration
	1.7 - added some insurance against armor hindrance
	1.6 - cleaned up some escapes and closing things so it keeps running. If you have a failure or run out of mana it should now just skip the item in the failure case, or clear the lost consecrates and then keep waiting for new lost consecrates. You'll need to reconsecrate the skipped stuff manually somehow.
	1.5 - Fix regex for non-consecrated items.
	1.4 - Fixed bad forgotten affordable else.
	1.3 - added consecrating normal items on falloff.
	1.2 - Ugh, fixed instance to normal vars.
	1.1 - changed global to instance variables
	1.0 - first public release
	
Let me know on discord or in game if you have any issues.

First script. Should re-consecrate any weapon that consecrate falls off of...including
if you use multiple items for combat(i.e. - UCS) and two fall off simultaneously.
	
=end

if !Spell[1604].known?
	echo "You don't know Consecrate, how do you expect to use this?!?"
	exit
end
scripts_to_pause = ["bigshot", "sbounty", "treim"]
consecrate_array = []
item = nil
cons_cons_match = /[Y|y]our <a exist="-?(\d+)" noun="[^"]+">[^<]+<\/a> returns? to normal\./
cons_norm_match = /(?:Silvery tendrils rise up from your |The translucent shell covering your )(?:[^ ]+ )?(?:[^ ]+ )?(?:[^ ]+ )?(?:[^ ]+ )?(?:[^ ]+ )?(?:[^ ]+ )?(?:[^ ]+ )?([^ ]+)(?: and quickly dissipate\.| shatters in an array of cascading silver light\.)/
status_tags

while (line = get)
	#echo line
	if line =~ cons_cons_match
		consecrate_array.push($1)
	elsif line =~ /^Roundtime/ && consecrate_array.count > 0
		if Spell[1604].affordable?
			scripts_to_pause.each { |script| Script.pause(script) if Script.running?(script) }
			sleep 0.2
			waitrt?
			waitcastrt?
			sleep 0.2
			while consecrate_array.count > 0 && Spell[1604].affordable?
				fput "prep 1604"
				result = dothistimeout "cast at ##{consecrate_array[0]}", 2, /A violet tongue of flame enfolds .*#{consecrate_array[0]}.* for a moment and then appears to become incorporated into it|Silvery tendrils rise up and wreathe their way around .*#{consecrate_array[0]}.* before sinking into its surface|Silvery tendrils rise up and wreathe their way around .*#{consecrate_array[0]}.* but quickly begin to dissipate|A sullen violet flame burns briefly around .*#{consecrate_array[0]}.* quickly returns to normal/
				if result =~ /A violet tongue of flame enfolds .*#{consecrate_array[0]}.* for a moment and then appears to become incorporated into it/
					consecrate_array.delete(consecrate_array[0])
					sleep 0.2
					waitcastrt?
					sleep 0.2
				elsif result =~ /Silvery tendrils rise up and wreathe their way around .*#{consecrate_array[0]}.* before sinking into its surface/
					echo "*** Reconsecrated, but it looks like you lost a bless, as well."
					consecrate_array.delete(consecrate_array[0])
					sleep 0.2
					waitcastrt?
					sleep 0.2
				elsif result =~ /Silvery tendrils rise up and wreathe their way around .*#{consecrate_array[0]}.* but quickly begin to dissipate/
					echo "*** Check your item, not sure what's going on with it!"
					consecrate_array.delete(consecrate_array[0])
					sleep 0.2
					waitcastrt?
					sleep 0.2
				elsif result =~ /A sullen violet flame burns briefly around .*#{consecrate_array[0]}.* quickly returns to normal/
					echo "*** How this item ended up in the array, I have no idea. It is non-consecrateable."
					echo "*** Removing from array and continuing."
					consecrate_array.delete(consecrate_array[0])
					sleep 0.2
					waitcastrt?
					sleep 0.2
				end
			end
		else
			echo "Out of mana, deleting all array items - you'll need to reconsecrate manually!"
			consecrate_array = []
		end
		scripts_to_pause.each { |script| Script.unpause(script) if Script.paused?(script) }
	elsif line =~ cons_norm_match
		item = $1
		if Spell[1604].affordable?
			scripts_to_pause.each { |script| Script.pause(script) if Script.running?(script) }
			success = false
			record = false
			until success
				success = true
				sleep 0.5
				waitrt?
				waitcastrt?
				if XMLData.prepared_spell != "None" && XMLData.prepared_spell != "Consecrate"
					fput "release"
				end
				until XMLData.prepared_spell == "Consecrate"
					fput "prep 1604"
					sleep 0.2
				end
				put "cast at my #{item}"
				line = nil
				until line =~ /Your armor prevents the spell from working correctly\.|Cast Roundtime/
					line = get
					if line =~ /Your armor prevents the spell from working correctly\./
						success = false
					end
				end
			end
			scripts_to_pause.each { |script| Script.unpause(script) if Script.paused?(script) }
		end
  end
end
