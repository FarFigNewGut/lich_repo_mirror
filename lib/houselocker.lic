=begin
--------------------------------------------------------------------------------
 Title : Houselocker
 Date : 10/06/2014
 Author : Oweodry

 Use :
  ;houselocker
  ;houselocker town
  ;houselocker (destination)

 Details :
  Goes to a house locker and lets you do your business. Can be run with "town" 
  argument or no arguments to go to your house locker in your current town. 
  Otherwise a destination town can be specified.

 Notes :
  - Uses the Lich.house setting (see ;houselocker help)
  - Take care when using this to access house lockers in disatant towns
  - Currently only supports Solhaven, will update other towns, may need help

 Updates :
  - 10/06/2014 Released

--------------------------------------------------------------------------------
=end

# ---------- Initialization (start) ------------------------------------------ #

# Help text and valid house check
houselist = ['House of the Argent Aspis','House of the Rising Phoenix','House of Paupers','House of the Arcane Masters','House Brigatta','Twilight Hall','SilverGate Inn','House Sovyn','House Sylvanfair','Helden Hall','White Haven','Obsidian Tower','Vacant','Beacon Hall Archive','Rone Academy','Willow Hall','Moonstone Abbey']
if Lich.house.nil? or !houselist.include?(Lich.house) or script.vars.find { |val| val =~ /\bhelp\b/i }
	respond("\n\tThis script will take you to your house locker in your current town.")
	respond("\t\tUsage: ;houselocker")
	respond("\n\tYou must first set your house membership to a valid house:")
	respond("\t\t;settings add house <housename>\n\n")
	respond("\tValid houses are:")
	houselist.each { |house| respond("\t\t#{house}")}
	respond("\n\tExample: ;settings add house White Haven\n\n")
	exit
end

# Failsafe
if Room.current.id == 4
	echo "### Not in a mapped room. Start somewhere that's mapped."
	exit
end

# ---------- Initialization (end) -------------------------------------------- #

# ---------- Definitions (start) --------------------------------------------- #

# Town finder
def check_town

	# Get map name
	town = Room.current.map_name.slice(/[^-]+/)

	# Return valid town based on map name
	if town == 'imt' then return "icemule"
	elsif town == 'en' then return "illistim"
	elsif town == 'isle_of_the_four_winds'	 then return "four winds"
	elsif town == 'rr' then return "rest"
	elsif town == 'vo' then return "solhaven"
	elsif town == 'ti' then return "teras"
	elsif town == 'wl' then return "landing"
	else return false
	end

end

# Solhaven lockers
def solhaven_locker

	# House lockers are w, sw, sw, go warehouse from North Market, upstairs.
	# Rooms are identical but have readable plaques with house names
	sol_lockers = {
		'House of the Argent Aspis' => [0,1],
		'House of the Rising Phoenix' => [0,2],
		'House of Paupers' => [0,3],
		'House of the Arcane Masters' => [0,4],

		'House Brigatta' => [1,1],
		'Twilight Hall' => [1,2],
		'SilverGate Inn' => [1,3],
		'House Sovyn' => [1,4],

		'House Sylvanfair' => [2,1],
		'Helden Hall' => [2,2],
		'White Haven' => [2,3],
		'Obsidian Tower' => [2,4],

		'Vacant' => [3,1],
		'Beacon Hall Archive' => [3,2],
		'Rone Academy' => [3,3],
		'Willow Hall' => [3,4],
		'Moonstone Abbey' => [3,5]
	}

	# Go to house locker area
	start_script "go2",["14114"]
	wait_until { !running?"go2" }

	# Navigate to locker
	sol_lockers[Lich.house][0].times { move "east" }
	sol_lockers[Lich.house][1].times { move "north" }
	multimove "go door","go opening"
	# Can also go north to next locker, add in failsafe

	waitfor "You nod"
	multimove "go opening","out"
	sol_lockers[Lich.house][1].times { move "south" }
	sol_lockers[Lich.house][0].times { move "west" }

	# Go to town gathering spot
	#start_script "go2",["town"]
	start_script "go2",["bank"]
	wait_until { !running?"go2" }
end

# ---------- Definitions (end) ----------------------------------------------- #

# ---------- Variables (end) ------------------------------------------------- #

# Destination banks
townlist = {	"icemule" => 3370,
		"wehnimer's landing" => 400,
		"wehnimer's" => 400,
		"landing" => 400,
		"vornavis" => 5710,
		"solhaven" => 5710,
		"ta'illistim" => 11,
		"illistim" => 11,
		"zul logoth" => 9472,
		"zul" => 9472,
		"logoth" => 9472,
		"teras" => 1838,
		"kharam-dzu" => 1838,
		"kharam" => 1838,
		"ta'vaalor" => 10325,
		"vaalor" => 10325,
		"river's rest" => 10911,
		"river" => 10911,
		"rest" => 10911,
		"four winds" => 3672,
		"mist harbor" => 3672 }

# ---------- Variables (end) ------------------------------------------------- #

# ---------- Main (start) ---------------------------------------------------- #

# Destination specified in the arguments
destination = townlist.keys.find { |town| script.vars.any? { |var| town =~ /#{var}/i } }

# Locker by destination
if destination

	# Status report
	echo "### Destination specified: #{destination}"
	echo "### Going to house locker via #{Room[townlist[destination]].title} - #{Room[townlist[destination]].id}"
	pause 2

	# Go to bank in appropriate town
	start_script "go2",["get-silvers=on","get-return-trip-silvers=on","#{townlist[destination]}"]
	wait_until { !running?"go2" }

# Locker by current location
else

	# Locker by nearest town
	if script.vars.find { |var| var =~ /town/i }
		echo "### Heading to nearest town's locker..."; pause 2
		start_script "go2",["town"]
		wait_until { !running?"go2" }
	end

	# If the town name is invalid
	if !check_town
		respond("\n\tError: #{script.name} can not be run from this location.")
		respond("\n\tTry one of the following:")
		respond("\t\t;#{script.name} town - Go to the nearest town's house locker")
		respond("\t\t;#{script.name} (destination) - Go to a destination town's house locker")
		respond("\n\tOtherwise, use go2 to head to town and run ;#{script.name}\n\n")
		exit
	end

	# Determine current town
	destination = check_town

	# Status report
	echo "### Current town: #{destination}"
	echo "### Going to house locker..."
	pause 2

end

# Run locker routine for appropriate town
if destination =~ /icemule/ then echo "### Not implemented!"; exit
elsif destination =~ /wehnimer|landing/ then  echo "### Not implemented!"; exit
elsif destination =~ /solhaven|vornavis/ then solhaven_locker
elsif destination =~ /illistim/ then echo "### Not implemented!"; exit
elsif destination =~ /zul|logoth/ then echo "### Not implemented!"; exit
elsif destination =~ /teras|kharam/ then echo "### Not implemented!"; exit
elsif destination =~ /vaalor/ then echo "### Not implemented!"; exit
elsif destination =~ /river|rest/ then echo "### Not implemented!"; exit
elsif destination =~ /four|winds|mist|harbor/
	if check_town !~ /four winds/
		echo "### Travel to Mist Harbor not implemented!"; exit;
	end
else echo "### fixme (destination)"; exit
end

# ---------- Main (end) ---------------------------------------------------- #
