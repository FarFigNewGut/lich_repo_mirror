=begin
  Original Wrayth FE Window
    https://discordapp.com/channels/226045346399256576/1339018254517145681

    New GTK Window for Avalon and Wizard FEs
    https://discordapp.com/channels/226045346399256576/1386507836191670342

  This script creates a dedicated window to display room exit information in real time.

  Features:
  - Continuously updates with the current rooms exits.
  - Displays clickable exits for both standard and Lich exits.
  - Uses consistent window formatting.
  - Supports ;go2 navigation for Lich exits.
  - Trash containers added.
  - Lichid and Uid added.

    Commands:
         *ewgtk - Enable GTK window.

  Changelog:
     1.2.0 (2025-06-25)
           Gtk window now displays clickable exits for both standard and Lich exits.
     1.1.1 (2025-06-25)
           Replaced light/dark mode toggle with Gtk palette selector.
     1.1.0 (2025-06-22)
           Added Wizard and Avalon FE compatability via implementation of a Gtk window.
     1.0.0 (2025-02-11)
           Initial release.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, paths, navigation, wizard, avalon
version: 1.2.0

=end

no_kill_all

require 'yaml'
require 'gtk3'

# where to store our window settings
LICH5_PATHS = [
  "C:\\Lich5\\scripts",
  File.expand_path("~/Desktop/Lich5/scripts")
]

WINDOW_SETTINGS_PATH = LICH5_PATHS.find do |path|
  path && Dir.exist?(path)
end
WINDOW_SETTINGS_PATH = if WINDOW_SETTINGS_PATH
  File.join(WINDOW_SETTINGS_PATH, "lichwraythwindows.yaml")
else
  File.join(Dir.ewd, "lichwraythwindows.yaml")
end

def load_window_settings
  return {} unless File.exist?(WINDOW_SETTINGS_PATH)
  YAML.load_file(WINDOW_SETTINGS_PATH) || {}
end

def save_window_settings(settings)
  File.write(WINDOW_SETTINGS_PATH, settings.to_yaml)
rescue => e
  echo "creaturewindow: failed to save window settings: #{e.message}"
end

$exit_settings       = load_window_settings
$exit_window         = $exit_settings["exitwindow"] ||= {}
$use_gtk_window = $exit_window["use_gtk_window"] || false

# if they’ve explicitly enabled GTK, always launch it
if $use_gtk_window || $frontend != "stormfront"
  respond ""
  respond " Initiating GTK window."
  respond ""
  respond " GTK Exitwindow is active."
  respond ""
  Gtk.queue { ExitWindowGtk.create_main_window }
  Gtk.main unless Gtk.main_level > 0
end

if $frontend == "stormfront"
  # Open the room info window using Wrayth's dynamic dialog.
  puts("<closeDialog id='Exits'/><openDialog type='dynamic' id='Exits' title='Exits' target='Exits' scroll='manual' location='main' justify='3' height='100' width='100' resident='true' ><dialogData id='Exits'></dialogData></openDialog>")
end

@last_room_id = nil

# ─── 1) Define your palettes ────────────────────────────────────────────────
PALETTES = {
  "Lich Dark Mode"     => { bg: "#2E2E2E", fg: "#DADADA" },
  "Lich Light Mode"    => { bg: "#E6E6E6", fg: "#202020" },
  "Middle Ground"      => { bg: "#333333", fg: "#FFFFFF" },
  "White on Black"     => { bg: "#000000", fg: "#FFFFFF" },
  "NQWhite on NQBlack" => { bg: "#111111", fg: "#f6f6f6" },
  "Black on White"     => { bg: "#FFFFFF", fg: "#000000" },
}

class ExitWindowGtk
  @window       = nil
  @css_provider = nil
  @font_size    = nil
  @pending_command = nil
  class << self
    attr_accessor :pending_command
  end
  # ─── 2) Regenerate & apply CSS using the chosen palette ────────────────────
  def self.reload_css
    # Load persisted palette choice (default to “White on Black”)
    settings = load_window_settings
    ew       = settings["exitwindow"] ||= {}
    pal_name = ew["palette"] || "NQWhite on NQBlack"
    colors   = PALETTES[pal_name]

    css = <<~CSS
      /* window frame */
      window#exitwindow {
        background-color: #{colors[:bg]};
        color:            #{colors[:fg]};
        border:           0px solid #888888;
        border-radius:    4px;
      }

      window#exitwindow .palette-btn,
      window#exitwindow popover .palette-btn,
      window#exitwindow GtkPopover .palette-btn {
        background: #{colors[:bg]};
        color: #{colors[:fg]};
      }
  #{' '}
      window#exitwindow .palette-btn:checked {
        background: #{colors[:bg]};
        color: #{colors[:fg]};
      }

      /* header bar */
      window#exitwindow headerbar {
        background-color: #{colors[:bg]};
        color:            #{colors[:fg]};
      }

      /* header bar buttons / toggles */
      window#exitwindow headerbar .header-toggle {
        margin:      0 2px;
        padding:     2px 4px;
        background-image: none;
        background-color: transparent;
        color:            #{colors[:fg]};
        border:           none;
        box-shadow:       none;
      }

      /* “on” state for toggles */
      window#exitwindow headerbar .header-toggle:checked {
        background-color: #0a84ff; /* system blue */
        color:            #FFFFFF;
      }

      /* content labels */
      window#exitwindow label {
        font-size: #{@font_size}px;
        color:     #{colors[:fg]};
      }

      /* scrolled area & flowbox */
      window#exitwindow GtkScrolledWindow,
      window#exitwindow GtkFlowBox {
        background-color: #{colors[:bg]};
      }
  window#exitwindow .exit-btn,
  window#exitwindow button.exit-btn {
        background: #{colors[:bg]};
        color: #{colors[:fg]};
    border-radius: 6px;
    border-width: 1px;
    border-style: solid;
    border-color: #888888;
    padding: 5px;
    font-weight: normal;
    transition: background 0.2s;
  }

  window#exitwindow .exit-btn:active,
  window#exitwindow button.exit-btn:active {
        background: #{colors[:bg]};
        color: #{colors[:fg]};
  }
CSS

    @css_provider.load(data: css)
  end

  def self.create_main_window
    return if @window

    # ——— load persisted settings ———
    settings = load_window_settings
    ew       = settings["exitwindow"] ||= {}
    @font_size = ew["font_size"] || 14
    ew["palette"] || "White on Black"

    # ——— build top‐level window & HeaderBar ———
    @window = Gtk::Window.new(:toplevel)
    @window.set_name("exitwindow")
    @window.set_border_width(10)
    @window.set_type_hint(Gdk::WindowTypeHint::UTILITY)
    @window.set_keep_above(true)

    header = Gtk::HeaderBar.new
    header.show_close_button = true
    header.title = "EW"

    # — Font size buttons —
    dec_btn = Gtk::Button.new(label: "A−")
    inc_btn = Gtk::Button.new(label: "A+")
    [dec_btn, inc_btn].each do |b|
      b.style_context.add_class("header-toggle")
      header.pack_start(b)
    end
    dec_btn.signal_connect("clicked") do
      @font_size = [@font_size - 1, 8].max
      ew["font_size"] = @font_size; save_window_settings(settings)
      reload_css
    end
    inc_btn.signal_connect("clicked") do
      @font_size = [@font_size + 1, 30].min
      ew["font_size"] = @font_size; save_window_settings(settings)
      reload_css
    end

    # — Palette selector —
    # build your MenuButton
    palette_btn = Gtk::MenuButton.new
    palette_btn.style_context.add_class("header-toggle")
    img = Gtk::Image.new(
      icon_name: "preferences-desktop-color-symbolic",
      icon_size: Gtk::IconSize::SMALL_TOOLBAR
    )
    palette_btn.set_image(img)
    palette_btn.set_always_show_image(true)

    # create the Popover and position it _before_ attaching it
    popover = Gtk::Popover.new(palette_btn)
    popover.set_position(Gtk::PositionType::TOP) # ← do this first

    # now fill your popover
    listbox = Gtk::Box.new(:vertical, 0)
    PALETTES.each_key do |name|
      btn = Gtk::ToggleButton.new(label: name)
      btn.style_context.add_class("header-toggle")
      btn.style_context.add_class("palette-btn")
      btn.active = (name == ew["palette"])
      btn.set_sensitive(true) # <- This ensures it's clickable
      btn.signal_connect("clicked") do
        ew["palette"] = name
        save_window_settings(settings)
        reload_css
      end
      listbox.add(btn)
    end
    popover.add(listbox)
    listbox.show_all

    # *only now* attach the popover to the button
    palette_btn.set_popover(popover)

    # and finally pack it into your header
    header.pack_end(palette_btn)

    @window.set_titlebar(header)

    # — CSS provider & initial styling —
    @css_provider = Gtk::CssProvider.new
    reload_css
    screen = Gdk::Screen.default
    Gtk::StyleContext.add_provider_for_screen(
      screen,
      @css_provider,
      Gtk::StyleProvider::PRIORITY_APPLICATION
    )

    # — Restore geometry —
    @window.resize(ew["width"], ew["height"]) if ew["width"] && ew["height"]
    @window.move(ew["x"], ew["y"]) if ew["x"] && ew["y"]

    @scroll = Gtk::ScrolledWindow.new
    @scroll.set_policy(Gtk::PolicyType::AUTOMATIC, Gtk::PolicyType::AUTOMATIC)
    @scroll.set_hexpand(true)
    @scroll.set_vexpand(true)

    @flow = Gtk::FlowBox.new
    @flow.selection_mode        = :none
    @flow.max_children_per_line = 1
    @flow.column_spacing        = 0
    @flow.row_spacing           = 0
    @flow.set_vexpand(true)
    @flow.valign                = Gtk::Align::START
    @flow.homogeneous           = false
    @scroll.add(@flow)

    @window.add(@scroll)

    # ─── save geometry on move/resize ────────────────────────────────────
    @ignore_next_configure = true
    @window.signal_connect("configure_event") do |_w, _ev|
      if @ignore_next_configure
        @ignore_next_configure = false
      else
        x, y = @window.position
        w, h = @window.size
        s = load_window_settings
        s["exitwindow"] ||= {}
        s["exitwindow"].merge!("x" => x, "y" => y, "width" => w, "height" => h)
        save_window_settings(s)
      end
      false
    end

    # ─── replace the default destroy→Gtk.main_quit handler ───────────────
    # 1) First, connect Gtk.main_quit *yourself* and capture its handler ID:
    default_quit_id = @window.signal_connect("destroy") do
      Gtk.main_quit
    end

    # 2) Immediately disconnect that handler:
    @window.signal_handler_disconnect(default_quit_id)

    # 3) Now install *your* destroy handler that only closes this window:
    @window.signal_connect("destroy") do
      @window = nil
      # NO Gtk.main_quit here!
    end

    @window.show_all

    # — initial fill —
    if defined?(Room) && Room.current
      std   = extract_exits_from_paths(Room.current.paths)
      lich  = extract_lich_exits(Room.current.id)
      trash = extract_trash_containers
      ExitWindowGtk.update_exits(std, lich, trash)
    end
  end

  def self.update_exits(standard, lich, trash)
    return unless @window
    Gtk.queue do
      # clear out old widgets
      @flow.children.each { |c| @flow.remove(c) }

      # ---- ROOM INFO: Add once at the top! ----
      room_info = Gtk::Label.new("Lid#: #{Room.current.id}   Uid#: #{Room.current.uid.to_s.gsub(/\[|\]/, '')}")
      room_info.set_xalign(0)
      room_info.style_context.add_class("room-info")
      @flow.add(room_info)

      # ---- STANDARD EXITS: clickable buttons ----
      standard.each do |exit_label|
        btn = Gtk::Button.new(label: exit_label)
        btn.style_context.add_class("exit-btn")
        btn.signal_connect("clicked") do
          ExitWindowGtk.pending_command = "go #{exit_label.downcase}"
        end
        @flow.add(btn)
      end

      # ---- LICH EXITS (as labels for now) ----
      lich.each do |it|
        display_label = it.is_a?(Hash) ? it[:label] : it.to_s
        command = it.is_a?(Hash) && it[:cmd] ? it[:cmd] : display_label
        btn = Gtk::Button.new(label: display_label)
        btn.style_context.add_class("exit-btn")
        btn.signal_connect("clicked") do
          ExitWindowGtk.pending_command = command
        end
        @flow.add(btn)
      end

      # ---- SPACER ----
      @flow.add(Gtk::Label.new(""))

      # ---- TRASH CONTAINERS (as labels) ----
      trash.each do |it|
        line = Gtk::Label.new(it.to_s)
        line.set_xalign(0)
        @flow.add(line)
      end

      @flow.show_all
    end
  end
end

# Extract standard exits from the room's paths.
def extract_exits_from_paths(paths)
  room_exits = []
  paths.each do |path|
    if path =~ /Obvious (?:paths|exits):\s*(.*)/i
      exits = $1.strip.split(/,\s*/).map(&:capitalize)
      room_exits.concat(exits)
    end
  end
  room_exits
end

# Extract Lich exits that are not standard movement directions.
def valid_exits(room_id)
  room = Room[room_id]
  return {} unless room

  room_exits = {}
  room.wayto.each do |key, value|
    next unless value.is_a?(String) || value.is_a?(Proc) # Ensure only valid exits

    room_exits[key] = { wayto: value, name: Room[key].title.first.gsub(/\[|\]/, '') }
  end

  room_exits
end

# Extract Lich exits using the valid_exits function.
def extract_lich_exits(room_id)
  room_exits = valid_exits(room_id) # Use the valid_exits function
  return [] if room_exits.nil? || !room_exits.is_a?(Hash) || room_exits.empty?

  ignored_directions = /^(?:o|d|u|n|ne|e|se|s|sw|w|nw|out|down|up|north|northeast|east|southeast|south|southwest|west|northwest|StringProc)$/

  lich_exits = []
  room_exits.each do |key, value|
    next unless value.is_a?(Hash) && value[:wayto] # Ensure :wayto exists
    next if value[:wayto].to_s.match?(ignored_directions) # Ignore obvious directions

    wayto_cmd = if value[:wayto].is_a?(String)
                  value[:wayto]
                elsif value[:wayto] == "StringProc"
                  ";go2 #{key}" # Default for unknown procs
                else
                  next
                end

    lich_exits << { label: "#{wayto_cmd}", cmd: wayto_cmd, destination: value[:name] }
  end
  lich_exits
end

# Extract trash container using the meta tag method.
def extract_trash_containers
  if (match = Room.current.tags.find { |t| t =~ /meta:trashcan:(.*)/ })
    # Use the match object to extract the trash container name and strip any extra whitespace.
    [match.match(/meta:trashcan:(.*)/)[1].strip]
  else
    []
  end
end

# Push exit and trash container data to the ExitWindow
def push_room_info_to_window(standard_exits, lich_exits, trash_containers)
  output = "<dialogData id='Exits' clear='t' wrap='true'>"

  # Room info at top (occupies 36 pixels)
  output += "<label id='room_info' value='Lid#: #{Room.current.id}' left='0' top='0' />"
  output += "<label id='room_info_uid' value='Uid#: #{Room.current.uid.to_s.gsub(/\[|\]/, '')}' left='0' top='18' />"

  # Spacing constants
  room_info_height = 36    # room info block height (0-36)
  header_height = 18       # height for a header label
  link_height = 18         # height for each link/label
  section_gap = 18 # gap between sections

  # Standard exits block
  standard_exits_header_top = room_info_height + section_gap # start at 36
  output += "<label id='total' value='Exits: #{standard_exits.size}' left='0' top='#{standard_exits_header_top}' />"

  standard_exits.each_with_index do |exit, index|
    exit_top = standard_exits_header_top + header_height + (link_height * index)
    output += "<link id='room_exit_#{index}' value='#{exit}' cmd='go #{exit.downcase}' echo='go #{exit.downcase}' left='0' top='#{exit_top}' />"
  end

  # Calculate end of standard exits block
  standard_exits_block_end = standard_exits_header_top + header_height + (link_height * standard_exits.size)

  # Lich exits block
  lich_exits_start = standard_exits_block_end + section_gap
  if lich_exits.any?
    output += "<label id='lich_exits' value='Lich Exits: #{lich_exits.size}' left='0' top='#{lich_exits_start}' />"
    lich_base_top = lich_exits_start + header_height
    lich_exits.each_with_index do |lich_exit, index|
      lich_exit_top = lich_base_top + (link_height * index)
      output += "<link id='lich_exit_#{index}' value='#{lich_exit[:cmd]}' cmd='#{lich_exit[:cmd]}' echo='#{lich_exit[:cmd]}' left='0' top='#{lich_exit_top}' font='normal' />"
    end
  end

  # Calculate end of Lich exits block
  lich_exits_block_end = lich_exits.any? ? (lich_exits_start + header_height + (link_height * lich_exits.size)) : standard_exits_block_end

  # Trash containers block
  trash_containers_start = lich_exits_block_end + section_gap
  if trash_containers.any?
    output += "<label id='trash_containers' value='Trash Containers: #{trash_containers.size}' left='0' top='#{trash_containers_start}' />"
    trash_base_top = trash_containers_start + header_height
    trash_containers.each_with_index do |trash, index|
      trash_top = trash_base_top + (link_height * index)
      output += "<label id='trash_#{index}' value='#{trash}' left='0' top='#{trash_top}' font='small' />"
    end
  end

  output += "</dialogData>"
  puts(output)
end

# Update room exit information.
def update_room_info
  standard_exits = extract_exits_from_paths(Room.current.paths)
  lich_exits = extract_lich_exits(Room.current.id)
  trash_containers = extract_trash_containers

  push_room_info_to_window(standard_exits, lich_exits, trash_containers)
end

UPSTREAM_HOOK_ID = "#{Script.current.name}_upstream".freeze

UpstreamHook.remove(UPSTREAM_HOOK_ID) rescue nil

UpstreamHook.add("#{Script.current.name}_upstream", proc do |cmd|
  case cmd.strip.downcase
  when /\*ewgtk/i
    $use_gtk_window = !$use_gtk_window
    respond "GTK Exitwindow is now #{$use_gtk_window ? 'ENABLED' : 'DISABLED'}."

    # persist the new setting
    settings = load_window_settings
    settings["exitwindow"] ||= {}
    settings["exitwindow"]["use_gtk_window"] = $use_gtk_window
    save_window_settings(settings)

    if $use_gtk_window
      # launch it if not already up
      Gtk.queue do
        ExitWindowGtk.create_main_window
        Gtk.main
      end
    else
      # close it if it exists
      if defined?(ExitWindowGtk) && ExitWindowGtk.instance_variable_get(:@window)
        Gtk.queue do
          ExitWindowGtk.instance_variable_get(:@window).hide
        end
      end
    end

    nil
  else
    cmd
  end
end)

before_dying do
  UpstreamHook.remove("#{Script.current.name}_upstream")

  if defined?(ExitWindowGtk) && ExitWindowGtk.instance_variable_get(:@window)
    Gtk.queue { ExitWindowGtk.instance_variable_get(:@window).close }
  end
end

echo "Exitwindow is active." if $frontend == "stormfront"

loop do
  if @last_room_id != Room.current.id
    std   = extract_exits_from_paths(Room.current.paths)
    lich  = extract_lich_exits(Room.current.id)
    trash = extract_trash_containers

    update_room_info if $frontend == "stormfront"
    ExitWindowGtk.update_exits(std, lich, trash) if $use_gtk_window

    @last_room_id = Room.current.id
  end

  if ExitWindowGtk.pending_command
    fput ExitWindowGtk.pending_command
    ExitWindowGtk.pending_command = nil
  end

  sleep 0.05
end
