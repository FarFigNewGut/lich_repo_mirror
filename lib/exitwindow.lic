=begin
  This script creates a dedicated window to display room exit information in real time.
  Features:
  - Continuously updates with the current room's exits.
  - Displays clickable exits for both standard and Lich exits.
  - Uses consistent window formatting.
  - Supports `;go2` navigation for Lich exits.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, paths, navigation 

=end

hide_me

# Open the room info window using Wrayth's dynamic dialog.
puts("<closeDialog id='Exits'/><openDialog type='dynamic' id='Exits' title='Exits' target='Exits' scroll='manual' location='main' justify='3' height='100' width='100' resident='true'><dialogData id='Exits'></dialogData></openDialog>")

@last_room_id = nil

# Extract standard exits from the room's paths.
def extract_exits_from_paths(paths)
  room_exits = []
  paths.each do |path|
    if path =~ /Obvious (?:paths|exits):\s*(.*)/i
      exits = $1.strip.split(/,\s*/).map(&:capitalize)
      room_exits.concat(exits)
    end
  end
  room_exits
end

# Extract Lich exits using the valid_exits function.
def extract_lich_exits(room_id)
  room_exits = valid_exits(room_id) # Use the valid_exits function
  return [] if room_exits.nil? || !room_exits.is_a?(Hash) || room_exits.empty?

  ignored_directions = /^(?:o|d|u|n|ne|e|se|s|sw|w|nw|out|down|up|north|northeast|east|southeast|south|southwest|west|northwest|StringProc)$/

  lich_exits = []
  room_exits.each do |key, value|
    next unless value.is_a?(Hash) && value[:wayto] # Ensure :wayto exists
    next if value[:wayto].to_s.match?(ignored_directions) # Ignore obvious directions

    wayto_cmd = if value[:wayto].is_a?(String)
                  value[:wayto]
                elsif value[:wayto] == "StringProc"
                  ";go2 #{key}" # Default for unknown procs
                else
                  next
                end

    lich_exits << { cmd: wayto_cmd, destination: value[:name] }
  end
  lich_exits
end

# Push exit data to the ExitWindow.
def push_room_info_to_window(standard_exits, lich_exits)
  output = "<dialogData id='Exits' clear='t'>"

  # Standard exits
  if standard_exits.any?
    output += "<label id='total' value='Exits: #{standard_exits.size}' left='0' top='0' />"
    
    standard_exits.each_with_index do |exit, index|
      output += "<link id='room_exit_#{index}' value='#{exit}' cmd='go #{exit.downcase}' echo='go #{exit.downcase}' left='0' top='#{18 * (index + 1)}' />"
    end
  end

  # Dynamically position Lich exits AFTER all standard exits
  lich_exits_start = 23 * (standard_exits.size + 1) # Ensures Lich exits always start below standard exits

  # Lich exits header
  if lich_exits.any?
    output += "<label id='lich_exits' value='Lich Exits: #{lich_exits.size}' left='0' top='#{lich_exits_start}' />"

    base_top = lich_exits_start + 20  # Extra space for the Lich Exits header

    lich_exits.each_with_index do |lich_exit, index|
      wayto_font_size = 1  # Assuming a standard size for commands
      destination_font_size = 2  # Assuming a larger size for destinations
      font_difference = destination_font_size - wayto_font_size

      # Dynamic spacing factor to accommodate font differences
      extra_spacing = font_difference * 1  # Adjust spacing dynamically

      # Clickable wayto command
      output += "<link id='lich_exit_#{index}' value='#{lich_exit[:cmd]}' cmd='#{lich_exit[:cmd]}' echo='#{lich_exit[:cmd]}' left='0' top='#{base_top}' font='normal' />"

      # Destination name underneath (with increased spacing)
#      output += "<label id='lich_dest_#{index}' value='#{lich_exit[:destination]}' left='15' top='#{base_top + 18 + extra_spacing}' font='large' />"

      # Increase base_top for the next entry
      base_top += 18 + extra_spacing  # Increased spacing dynamically
    end
  end

  output += "</dialogData>"
  puts(output)
end

# Update room exit information.
def update_room_info
  standard_exits = extract_exits_from_paths(Room.current.paths)
  lich_exits = extract_lich_exits(Room.current.id) # Pass current room ID
  push_room_info_to_window(standard_exits, lich_exits)
end

# Main update loop.
loop do
  if @last_room_id != Room.current.id
    update_room_info
    @last_room_id = Room.current.id
  end
  sleep 0.025
end

echo "Dedicated Room Info Window is active."
