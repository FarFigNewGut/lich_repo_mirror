	arcanesymbols = 0
	magicitemuse = 0
	elementalmanacontrol = 0
	mentalmanacontrol = 0
	bardranks = 0
	level = 0
	influence = 0
	intuition = 0

	#put "skills"
	
	skillsLines = Lich::Util.quiet_command("skills", /your current skill/i, /Further information can be found/i, include_end = false, timeout = 1, silent = true) 	
	skillsLines.each {|line| 

	    if line =~ /^  Arcane Symbols\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
        	arcanesymbols = $1.to_i
    	elsif line =~ /^  Magic Item Use\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
	        magicitemuse = $1.to_i
	    elsif line =~ /^  Elemental Mana Control\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
        	elementalmanacontrol = $1.to_i
		elsif line =~ /^  Mental Mana Control\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
			mentalmanacontrol = $1.to_i			
    	elsif line =~ /\w*Bard\.*\|(?:\s+)(\d+)$/
	        bardranks = $1.to_i
    	end	
	}

	infoLines = Lich::Util.quiet_command("info", /Name/i, /Mana/i, include_end = false, timeout = 1, silent = true) 	
	infoLines.each {|line| 
	    if line =~ /^Gender: (?:\w+)(?:\s+)Age: (?:[\d,]+)(?:\s+)Expr: (?:[\d,]+)(?:\s+)Level:(?:\s+)(\d+)$/
        	level = $1.to_i
    	elsif line =~ /^   Influence \(INF\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
	        influence = $1.to_i
	    elsif line =~ /^   Intuition \(INT\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
        	intuition = $1.to_i
    	end
	}

    weekly_resource = nil
    total_resource = nil
    suffused = nil
	
    res = Lich::Util.quiet_command_xml("resource", /^Health: /)
    res.each { |line|
      line = line.gsub('<pushBold/>', '').gsub('<popBold/>', '')
      if line =~ /([\d,]+)\/50,000 \(Weekly\)\s+([\d,]+)\/200,000 \(Total\)$/
        weekly_resource = $1
        total_resource = $2
		
        weekly_resource = weekly_resource.gsub(",", "").to_i
        total_resource = total_resource.gsub(",", "").to_i
		
      elsif line =~ /Suffused.+: ([\d,]+)$/
        suffused = $1.gsub(",", "").to_i
      end
    }


	bardRankBonus = (bardranks > (level + 1) ? (level + 1)*2 + (bardranks - (level + 1)) : bardranks * 2)
	bardSongOfLuckBonus = level + influence + intuition + bardRankBonus + elementalmanacontrol + mentalmanacontrol + magicitemuse + 20
	bardSongOfLuckSuffusedMaxBonus = bardSongOfLuckBonus + suffused
	
	respond ""
	respond "     Song of Luck Success Formula"
	respond "     ---------------------------"
	respond "       #{(level).to_s.rjust(3)} : Level"
	respond "     + #{(influence).to_s.rjust(3)} : Influence Bonus"
	respond "     + #{(intuition).to_s.rjust(3)} : Intuition Bonus"
	respond "     + #{(bardRankBonus).to_s.rjust(3)} : Bard Spells"
	respond "     + #{((elementalmanacontrol)).to_s.rjust(3)} : EMC ranks"
	respond "     + #{((mentalmanacontrol)).to_s.rjust(3)} : MMC ranks"
	respond "     + #{((magicitemuse)).to_s.rjust(3)} : MIU ranks"
	respond "     +  20 : Workshop Bonus"
	respond "     ==========================="
	respond "     Song of Luck Total Bonus: #{bardSongOfLuckBonus}"
	respond "     Song of Luck Total Bonus with suffused Inspiration: #{bardSongOfLuckBonus + suffused}"
	respond ""
	respond ""
	respond "     Song of Luck Casting Requirements:"
	respond ""	
	respond "         Tier        Difficulty    Bonus Needed for 100%       Inspiration Required"
	respond "          L1             150               250                        50,000       "
    respond "          L2             225               325                        75,000       "
    respond "          L3             300               400                        100,000      "
    respond "          L4             375               475                        125,000      "
    respond "          L5             450               550                        150,000      "
    respond "          L6             525               625                        200,000      "

	difficulties = [250, 325, 400, 575, 550, 625]
	
	maxUnsuffusedTier = 0
	maxSuffusedTier = 0
	
	difficulties.each{|difficulty|
	
		if(difficulty < bardSongOfLuckBonus)
			maxUnsuffusedTier += 1
		end
				
		if(difficulty < bardSongOfLuckSuffusedMaxBonus)
			maxSuffusedTier += 1		
		end
	}
	
	
	respond ""
	respond "     Right now:"
	respond "         The max Song of Luck tier you can cast without suffusion is: #{(maxUnsuffusedTier == 0) ? "NONE" : "L#{maxUnsuffusedTier}"}"
	respond "         The max Song of Luck tier you can cast with suffusion is: #{(maxSuffusedTier == 0) ? "NONE" : "L#{maxSuffusedTier}"}"
	respond ""
	
	tiers = [1,2,3,4,5,6]
	tiers.each{|tier|
		if(maxSuffusedTier < tier)
			missingSuffuse = difficulties[tier-1] - bardSongOfLuckSuffusedMaxBonus;
			missingWeeks = (missingSuffuse / 25.0).ceil
			respond "         To make an L#{tier} cast, you need #{missingSuffuse.to_s.rjust(3)} suffused inspiration (#{missingWeeks} weeks)"
		end	
	}
	
	respond ""
	respond ""
	