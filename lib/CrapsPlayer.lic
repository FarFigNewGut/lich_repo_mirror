=begin

	Play craps with your friends! Or play craps with Dreaven at Dreavenings! No in game dice needed!
	
	This is the player client of the Craps set of scripts. Start up the script and you will be presented with a window which will allow you to directly interact with the dealer. You can see all of the possible bets and click on a bet to place a bet, you can see your stats, you can see how everyone else has bet, and more!
	
	There are two currency modes that the dealer sets. Be sure to look out for them when you join the game!
	Gold: This is purely for fun. There is no physical currency used and the dealer tracks everything on their end.
	Silver: This is for real! Uses in game silver to place bets and you are awarded silver when you win bets. NOTE: The dealer script can easily be edited to cheat, only play silver games with someone you trust.
	
	NOTE: The game is pay as you play, meaning when you make a bet you give the silvers up front, and when you win the dealer pays you right away. If the script crashes for whatever reason, or your game client crashes for whatever reason, there is no mechanism for the dealer to know that you were not paid if you miss a payout.

	Version 1: Initial release!
	Version 2: Bug fix.
	Version 3: Fixed bug with script crashing.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 3

=end

require 'gtk3'

class CrapsPlayerMain	
	@save_file = "Craps Player Settings.json"
	@lock_file = "Lock File.lock"

	@load_data = nil
	@saving_on_exit = nil
	@all_settings = {}
	
	@all_color_options = [ "Red", "Green", "Blue" ]
	@settings_colors = [ "Window Color", "Text Color" ]
	
	@game_settings = {}
	@game_settings["All Current Bets"] = []
	@game_lingo = {}
	@bet_buttons = {}
	@other_buttons = {}
	@all_labels = {}
	@all_entries = {}
	@session_stats = {}
	@session_stats["Currency Won"] = 0
	@session_stats["Currency Spent"] = 0
	@session_stats["Net Currency"] = 0
	
	def self.load_the_data
		begin
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file|
				lock_file.flock(File::LOCK_EX)
				
				return unless File.exist?(@save_file)
				
				@load_data = JSON.parse(File.read(@save_file))
			}
		rescue StandardError => e
			respond "Error message from ;CrapsPlayer: #{e.message}"
		ensure
			File.open(@lock_file, File::RDWR | File::CREAT){ |lock_file| lock_file.flock(File::LOCK_UN) }
		end
	end
	
	load_the_data
	
	@lingo_option = @load_data["Lingo"] ? @load_data["Lingo"] : "Lich Bones"
	
	def self.change_color_settings
		@settings_colors.each{ |setting|
			red = @load_data["#{setting} Red"]
			green = @load_data["#{setting} Green"]
			blue = @load_data["#{setting} Blue"]
			
			if setting == "Window Color"
				@all_settings["#{setting} Red"] = red ? red : 0
				@all_settings["#{setting} Green"] = green ? green : 255
				@all_settings["#{setting} Blue"] = blue ? blue : 0
			elsif setting == "Text Color"
				@all_settings["#{setting} Red"] = red ? red : 0
				@all_settings["#{setting} Green"] = green ? green : 0
				@all_settings["#{setting} Blue"] = blue ? blue : 0
			end
		}
	end
	
	change_color_settings
	
	after_roll = "\n\nWhen bet can be made: After the come out roll."
	other_bet_info = "Shooter rolls a 7 after the come out roll.\n\nWhen bet can be made: After come out roll.\n\nNote: this bet is inactive (can't win or lose) on the come out roll. The bet also carries over if the Shooter rolls their Point."
	
	@tooltips = {
		"Payout Info" => "Here is how payout odds work: The first number is divided by the second number and then this is multipled by the bet amount. You also receive your original bet when you win.\n\nFor example: Let's say you bet 100 on a 5 to 1 payout and you win, you divide 5 by 1 which is 5, multiply this by 100 which equals 500, add the original bet and you receive 600, but since you lost 100 when you made the bet you are ahead by 500 in total.\n\nAnother example: 100 bet on 5 to 4 odds, 5 divided by 4 is 1.25, multiply this by 100 which is 125, you receive 125 plus your original 100 bet.",
		"Currency" => "IMPORTANT:  \"Silver\" currency uses actual in game silvers for betting. Be sure to only play silver currency games with a dealer you trust. The dealer script can easily be edited to allow the dealer to cheat.\n\n\"Gold\" currency is just for fun. There is no physical currency and the dealer tracks everyone's Gold on their end.",
		"Bet Pass" => "Win condition: The Shooter rolls a 7 or 11 on the come out roll, or the Shooter rolls their Point after the Point has been set.\n\nLose condition: The Shooter rolls a 2, 3, or 12 on the come out roll, or the Shooter rolls a 7 after the Point has been set.\n\nWhen bet can be made: Before come out roll.",
		"Bet Don't Pass" => "Win condition: The Shooter rolls a 2, 3, or 12 on the come out roll, or the Shooter rolls a 7 before their Point after the Point has been set.\n\nLose condition: The Shooter rolls 7 or 11 on the come out roll, or the Shooter rolls their Point after the Point has been set.\n\nWhen bet can be made: Before come out roll.",
		"Bet Odds" => "If you made a Pass bet then the win and lose conditions are the same for this bet, if you made a Don't Pass bet then the win and lose conditions are the same for this bet.\n\nWhen bet can be made: After the come out roll and only if you made a Pass or Don't Pass bet.",
		"Bet Field" => "Win condition: The next roll is 2, 3, 4, 9, 10, 11, or 12.\n\nLose condition: The next roll is 5, 6, 7, or 8.#{after_roll}",
		"Bet Horn" => "Note: This bet is different in that what you wager is split evenly among the 2, 3, 11, and 12. So if you bet 100 and the next dice roll totals 2, then you win 25 (100 divided by 4) times whatever the payout amount is.\n\nWin condition: The next roll is 2, 3, 11, or 12.\n\nLose condition: The next roll is not 2, 3, 11, or 12.#{after_roll}",
		"Bet Hard 4" => "Win condition: The Shooter rolls a 2 and 2.\n\nLose condition: The Shooter rolls a dice total of 4 that isn't a roll of 2 and 2, or the #{other_bet_info}",
		"Bet Hard 6" => "Win condition: The Shooter rolls a 3 and 3.\n\nLose condition: The Shooter rolls a dice total of 6 that isn't a roll of 3 and 3, or the #{other_bet_info}",
		"Bet Hard 8" => "Win condition: The Shooter rolls a 4 and 4.\n\nLose condition: The Shooter rolls a dice total of 8 that isn't a roll of 4 and 4, or the #{other_bet_info}",
		"Bet Hard 10" => "Win condition: The Shooter rolls a 5 and 5.\n\nLose condition: The Shooter rolls a dice total of 10 that isn't a roll of 5 and 5, or the #{other_bet_info}",
		"Bet Any 7" => "Win condition: The next roll is 7.\n\nLose condition: The next roll is not 7.#{after_roll}",
		"Bet Prop 2" => "Win condition: The next roll is 2.\n\nLose condition: The next roll is not 2.#{after_roll}",
		"Bet Prop 3" => "Win condition: The next roll is 3.\n\nLose condition: The next roll is not 3.#{after_roll}",
		"Bet Prop 11" => "Win condition: The next roll is 11.\n\nLose condition: The next roll is not 11.#{after_roll}",
		"Bet Prop 12" => "Win condition: The next roll is 12.\n\nLose condition: The next roll is not 12.#{after_roll}",
		"Bet Craps" => "Win condition: The next roll is 2, 3, or 12.\n\nLose condition: The next roll is not 2, 3, or 12.#{after_roll}",
		"Bet Place 4" => "Win condition: The Shooter rolls a 4.\n\nLose condition: The #{other_bet_info}",
		"Bet Place 5" => "Win condition: The Shooter rolls a 5.\n\nLose condition: The #{other_bet_info}",
		"Bet Place 6" => "Win condition: The Shooter rolls a 6.\n\nLose condition: The #{other_bet_info}",
		"Bet Place 8" => "Win condition: The Shooter rolls a 8.\n\nLose condition: The #{other_bet_info}",
		"Bet Place 9" => "Win condition: The Shooter rolls a 9.\n\nLose condition: The #{other_bet_info}",
		"Bet Place 10" => "Win condition: The Shooter rolls a 10.\n\nLose condition: The #{other_bet_info}",
		"Dealer Name" => "Enter the dealer's name of the game you want to join then click \"Join Game\".",
		"Join Game" => "Enter the dealer's name of the game you want to join in the box to the left then click this button.",
		"Get Stats" => "Click this button to get all of your stat information from the dealer.\n\nNote: Button only works after you have joined a game and you can only ask for your stat information once per session.",
		"Bet Amount" => "Enter how much you want to place a bet for then click on the bet above.",
		"Lingo" => "Select the lingo you want to see in the game window.\n\nCraps: The standard Craps lingo.\nLich Bones: A more fantasty take on standard Craps lingo.",
		"Settings" => "Click button to adjust the settings of the game window.",
		"Window Color Red" => "Enter the Red value you want for the window.",
		"Window Color Green" => "Enter the Green value you want for the window.",
		"Window Color Blue" => "Enter the Blue value you want for the window.",
		"Text Color Red" => "Enter the Red value you want for all text.",
		"Text Color Green" => "Enter the Green value you want for the all text.",
		"Text Color Blue" => "Enter the Blue value you want for the all text.",
		"Save" => "Click this button to save the current values. If you want to discard any changes made then just close the Settings window.",
		"Load" => "Load the current saved values. Values aren't saved until you click the \"Save\" button.",
	}
	
	def self.change_lingo_terms
		@game_lingo["Pass"] = @lingo_option == "Lich Bones" ? "HERO" : "PASS"
		@game_lingo["Don't Pass"] = @lingo_option == "Lich Bones" ? "LICH" : "DON'T PASS"
		@game_lingo["Field"] = @lingo_option == "Lich Bones" ? "BESEECH" : "FIELD"
		@game_lingo["Horn"] = @lingo_option == "Lich Bones" ? "INFERNO" : "HORN"
		@game_lingo["Hard 4"] = @lingo_option == "Lich Bones" ? "CHARGE" : "HARD 4"
		@game_lingo["Hard 6"] = @lingo_option == "Lich Bones" ? "FEINT" : "HARD 6"
		@game_lingo["Hard 8"] = @lingo_option == "Lich Bones" ? "JUDGEMENT" : "HARD 8"
		@game_lingo["Hard 10"] = @lingo_option == "Lich Bones" ? "STRIKE" : "HARD 10"
		@game_lingo["Any 7"] = @lingo_option == "Lich Bones" ? "CLAW 7" : "ANY 7"
		@game_lingo["Prop 3"] = @lingo_option == "Lich Bones" ? "CLAW 3" : "PROP 3"
		@game_lingo["Prop 11"] = @lingo_option == "Lich Bones" ? "CLAW 11" : "PROP 11"
		@game_lingo["Prop 2"] = @lingo_option == "Lich Bones" ? "CLAW 2" : "PROP 2"
		@game_lingo["Prop 12"] = @lingo_option == "Lich Bones" ? "CLAW 12" : "PROP 12"
		@game_lingo["Craps"] = @lingo_option == "Lich Bones" ? "DRAIN" : "CRAPS"
		@game_lingo["Odds"] = @lingo_option == "Lich Bones" ? "CHEER" : "ODDS"
		@game_lingo["Place 4"] = @lingo_option == "Lich Bones" ? "ATTACK 4" : "PLACE 4"
		@game_lingo["Place 5"] = @lingo_option == "Lich Bones" ? "ATTACK 5" : "PLACE 5"
		@game_lingo["Place 6"] = @lingo_option == "Lich Bones" ? "ATTACK 6" : "PLACE 6"
		@game_lingo["Place 8"] = @lingo_option == "Lich Bones" ? "ATTACK 8" : "PLACE 8"
		@game_lingo["Place 9"] = @lingo_option == "Lich Bones" ? "ATTACK 9" : "PLACE 9"
		@game_lingo["Place 10"] = @lingo_option == "Lich Bones" ? "ATTACK 10" : "PLACE 10"
		@game_lingo["Attack Bets"] = @lingo_option == "Lich Bones" ? "ATTACK BETS" : "PLACE BETS"
		@game_lingo["Lingo"] = @lingo_option == "Lich Bones" ? "LICH NAMES" : "CRAPS NAMES"
		@game_lingo["Settings"] = "SETTINGS"
		@game_lingo["Shooter"] = @lingo_option == "Lich Bones" ? "HERO" : "Shooter"
		@game_lingo["Point"] = @lingo_option == "Lich Bones" ? "Quest" : "Point"
	end
	
	@all_bet_names = {}
	@all_bet_names["HERO"] = "PASS"
	@all_bet_names["LICH"] = "DON'T PASS"
	@all_bet_names["BESEECH"] = "FIELD"
	@all_bet_names["INFERNO"] = "HORN"
	@all_bet_names["CHARGE"] = "HARD 4"
	@all_bet_names["STRIKE"] = "HARD 10"
	@all_bet_names["FEINT"] = "HARD 6"
	@all_bet_names["JUDGEMENT"] = "HARD 8"
	@all_bet_names["CLAW 7"] = "ANY 7"
	@all_bet_names["CLAW 3"] = "PROP 3"
	@all_bet_names["CLAW 11"] = "PROP 11"
	@all_bet_names["CLAW 2"] = "PROP 2"
	@all_bet_names["CLAW 12"] = "PROP 12"
	@all_bet_names["DRAIN"] = "CRAPS"
	@all_bet_names["CHEER"] = "ODDS"
	@all_bet_names["ATTACK 4"] = "PLACE 4"
	@all_bet_names["ATTACK 5"] = "PLACE 5"
	@all_bet_names["ATTACK 6"] = "PLACE 6"
	@all_bet_names["ATTACK 8"] = "PLACE 8"
	@all_bet_names["ATTACK 9"] = "PLACE 9"
	@all_bet_names["ATTACK 10"] = "PLACE 10"
	
	@bets_allowed_before_come_out_roll = [ "Pass", "Don't Pass" ]

	@bets_allowed_after_come_out_roll = [ "Field", "Horn", "Hard 4", "Hard 10", "Hard 6", "Hard 8", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Craps", "Odds", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]
	
	@bets_all_bet_names = [ "Pass", "Don't Pass", "Field", "Horn", "Hard 4", "Hard 10", "Hard 6", "Hard 8", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Craps", "Odds", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]
	
	@all_payout_names = [ "Pass", "Don't Pass", "Hard 4", "Hard 6", "Hard 8", "Hard 10", "Field 2", "Field 3", "Field 4", "Field 9", "Field 10", "Field 11", "Field 12", "Horn 2", "Horn 3", "Horn 11", "Horn 12", "Craps", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10", "Odds Pass 4", "Odds Pass 5", "Odds Pass 6", "Odds Pass 8", "Odds Pass 9", "Odds Pass 10", "Odds Don't Pass 4", "Odds Don't Pass 5", "Odds Don't Pass 6", "Odds Don't Pass 8", "Odds Don't Pass 9", "Odds Don't Pass 10" ]

	@click_button_timers = {}
	@click_button_timers["Join Game"] = Time.now
	@click_button_timers["Get Stats"] = Time.now
	@bets_all_bet_names.each{ |name| @click_button_timers[name] = Time.now }
	
	def self.save_settings
		File.open(@lock_file, File::RDWR | File::CREAT){ |lock|
			lock.flock(File::LOCK_EX)
			
			if File.exist?(@save_file)
				save_data = JSON.parse(File.read(@save_file))
			else
				save_data = {}
			end
			
			@dealer_name = "Dreaven" if @dealer_name.length < 1
			save_data["Dealer Name"] = @dealer_name
			
			save_data["Lingo"] = @lingo_option

			if @saving_on_exit.nil?
				@settings_colors.each{ |setting,value|
					@all_color_options.each{ |color|
						full_setting = "#{setting} #{color}"
						save_data[full_setting] = @spin_buttons[full_setting].value.to_i
					}
				}
			end
				
			File.open(@save_file, 'w'){ |file| file.write(JSON.pretty_generate(save_data)) }
			respond ";CrapsPlayer: Data saved." if @saving_on_exit.nil?
		}
	end
	
	def self.update_bet_names
		if @lingo_option == "Lich Bones"
			@lingo_option = "Craps"
		elsif @lingo_option == "Craps"
			@lingo_option = "Lich Bones"
		end
		change_lingo_terms
		
		@other_buttons["Lingo"].label = @game_lingo["Lingo"]

		@bet_buttons.each{ |button_name,button|
			if button_name =~ /Place (\d+)/
				button.label = $1
			elsif (@game_lingo[button_name] == "DON'T PASS") && (@lingo_option != "Lich Bones")
				button.label = "DON'T\nPASS"
			else
				button.label = @game_lingo[button_name]
			end
		}
		@all_labels["Attack Bets"].set_text(@game_lingo["Attack Bets"])
		
		@all_labels["Current Shooter"].set_text("Current #{@game_lingo["Shooter"].capitalize}: #{@game_settings["Current Shooter"].capitalize}")
		@all_labels["Current Point"].set_text("Current #{@game_lingo["Point"].capitalize}: #{@game_settings["Current Point"]}")

		update_all_bet_labels
		update_payout_tab
		@bet_buttons.each{ |button_name,button|
			tooltip = update_tooltip_lingo(@tooltips["Bet #{button_name}"])
			button.set_tooltip_text(tooltip)
		}
	end
	
	change_lingo_terms
	
	@font_info = Pango::FontDescription.new("Monospace 10")
	
	def self.set_button_info(name, options = {})
		button_width = options[:width]
		button_height = options[:height]
		position_horizontal = options[:horizontal_position]
		position_vertical = options[:vertical_position]

		if name =~ /Place (\d+)/
			@bet_buttons[name] = Gtk::Button.new(label: $1)
		elsif (@game_lingo[name] == "DON'T PASS") && (@lingo_option != "Lich Bones")
			@bet_buttons[name] = Gtk::Button.new(label: "DON'T\nPASS")
		else
			@bet_buttons[name] = Gtk::Button.new(label: @game_lingo[name])
		end

		@bet_buttons[name].set_size_request(button_width, button_height)
		tooltip = update_tooltip_lingo(@tooltips["Bet #{name}"])
		@bet_buttons[name].set_tooltip_text(tooltip)
		@main_table_layout.put(@bet_buttons[name], position_horizontal, position_vertical)
		
		@bet_buttons[name].signal_connect("clicked"){
			if Time.now > @click_button_timers[name] + 0.6
				@click_button_timers[name] = Time.now
				if @game_settings["Joined Game"]
					put "give #{@all_entries["Dealer Name"].text} #{@bet_amount_spin_button.value.to_i}" if @game_settings["Currency Name"] == "Silver"
					put "whisper ooc #{@all_entries["Dealer Name"].text} Bet #{@bet_amount_spin_button.value.to_i} on #{name}."
				end
			end
		}
	end
	
	def self.update_tooltip_lingo(text)
		if @lingo_option == "Lich Bones"
			text = text.gsub("Don't Pass", "Lich")
			text = text.gsub("Pass", "Hero")
			text = text.gsub("Shooter", "Hero")
			text = text.gsub("come out roll", "opening attack roll")
			text = text.gsub("Point", "Quest")
		else
			text = text
		end
	end

	def self.create_window
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.set_title("Craps: Player Client - #{checkname}")
		@main_window.set_default_size(400, 300)

		@main_table_layout = Gtk::Fixed.new

		@all_grids = {}
		grids = [ "Parent", "Save Settings", "Dice", "Information", "Bet Buttons", "Roll Button", "All Bets 1", "All Bets 2", "Stats", "Payouts" ]
		grids.each{ |name| @all_grids[name] = Gtk::Grid.new }
		
		@all_labels["Notebook Main"] = Gtk::Label.new("Main")
		@all_labels["Current Bets 1"] = Gtk::Label.new("Current Bets 1")
		@all_labels["Current Bets 2"] = Gtk::Label.new("Current Bets 2")
		@all_labels["Notebook Stats"] = Gtk::Label.new("Stats")
		@all_labels["Notebook Payouts"] = Gtk::Label.new("Payouts")
		@main_notebook = Gtk::Notebook.new
		@main_notebook.append_page(@main_table_layout, @all_labels["Notebook Main"])
		@main_notebook.append_page(@all_grids["All Bets 1"], @all_labels["Current Bets 1"])
		@main_notebook.append_page(@all_grids["All Bets 2"], @all_labels["Current Bets 2"])
		@main_notebook.append_page(@all_grids["Stats"], @all_labels["Notebook Stats"])
		@main_notebook.append_page(@all_grids["Payouts"], @all_labels["Notebook Payouts"])
		change_color_values(@all_settings["Window Color Red"], @all_settings["Window Color Green"], @all_settings["Window Color Blue"])
		@main_notebook.override_background_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
		
		create_payouts_page
		
		@all_bets_labels = {}
		@all_players_bets = {}
		bets = [ "Pass", "Don't Pass", "Odds", "Field", "Horn", "Hard 4", "Hard 6", "Hard 8", "Hard 10", "Craps" ]
		create_all_bets_page(bets, @all_grids["All Bets 1"])
		
		bets = [ "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]
		create_all_bets_page(bets, @all_grids["All Bets 2"])

		#####
		@all_labels["Dealer Name"] = Gtk::Label.new("DEALER NAME")
		@main_table_layout.put(@all_labels["Dealer Name"], 57, 10)
		
		@all_entries["Dealer Name"] = Gtk::Entry.new
		@main_table_layout.put(@all_entries["Dealer Name"], 25, 25)
		@all_entries["Dealer Name"].text = @load_data["Dealer Name"] ? @load_data["Dealer Name"] : "Dreaven"
		@dealer_name = @all_entries["Dealer Name"].text
		
		@all_labels["Currency"] = Gtk::Label.new("CURRENCY")
		@main_table_layout.put(@all_labels["Currency"], 250, 10)
		
		@other_buttons["Join Game"] = Gtk::Button.new(label: "Join Game")
		@main_table_layout.put(@other_buttons["Join Game"], 195, 25)
		
		@other_buttons["Join Game"].signal_connect("clicked"){
			if Time.now > @click_button_timers["Join Game"] + 1
				@click_button_timers["Join Game"] = Time.now
				put "whisper ooc #{@all_entries["Dealer Name"].text} Join game."
			end
		}
		#####
		width = 75
		name = "Pass"
		set_button_info(name, width: width, height: 121, horizontal_position: 25, vertical_position: 91)
		
		name = "Odds"
		set_button_info(name, width: (width * 2), height: 44, horizontal_position: 25, vertical_position: 213)
		
		name = "Don't Pass"
		set_button_info(name, width: width, height: 121, horizontal_position: 101, vertical_position: 91)

		#####
		width1 = 50
		height = 40
		
		name = "Field"		
		set_button_info(name, width: (width1 * 5) + 4, height: height + 3, horizontal_position: 177, vertical_position: 126)
		
		name = "Horn"
		set_button_info(name, width: (width1 * 5) + 4, height: height + 3, horizontal_position: 177, vertical_position: 170)
		
		name = "Craps"
		set_button_info(name, width: (width1 * 5) + 4, height: height + 3, horizontal_position: 177, vertical_position: 214)
		
		height /= 2
		
		name = "Place 4"
		set_button_info(name, width: width1, height: height, horizontal_position: 177, vertical_position: 91)
		
		name = "Place 5"
		set_button_info(name, width: width1, height: height, horizontal_position: 228, vertical_position: 91)
		
		name = "Place 6"
		set_button_info(name, width: width1, height: height, horizontal_position: 279, vertical_position: 91)
		
		@all_labels["Attack Bets"] = Gtk::Label.new(@game_lingo["Attack Bets"])
		@main_table_layout.put(@all_labels["Attack Bets"], 285, 66)
		
		name = "Place 8"
		set_button_info(name, width: width1, height: height, horizontal_position: 330, vertical_position: 91)
		
		name = "Place 9"
		set_button_info(name, width: width1, height: height, horizontal_position: 381, vertical_position: 91)
		
		name = "Place 10"
		set_button_info(name, width: width1, height: height, horizontal_position: 432, vertical_position: 91)
		
		#####
		width = 110
		name = "Hard 4"
		set_button_info(name, width: width, height: height, horizontal_position: 432, vertical_position: 126)
		
		name = "Hard 10"
		set_button_info(name, width: width, height: height, horizontal_position: 543, vertical_position: 126)
		
		name = "Hard 6"
		set_button_info(name, width: width, height: height, horizontal_position: 432, vertical_position: 161)
		
		name = "Hard 8"
		set_button_info(name, width: width, height: height, horizontal_position: 543, vertical_position: 161)
		
		name = "Any 7"
		set_button_info(name, width: width * 2, height: height, horizontal_position: 432, vertical_position: 196)
		
		name = "Prop 3"
		set_button_info(name, width: width, height: height, horizontal_position: 432, vertical_position: 231)
		
		name = "Prop 11"
		set_button_info(name, width: width, height: height, horizontal_position: 543, vertical_position: 231)
		
		name = "Prop 2"
		set_button_info(name, width: width, height: height, horizontal_position: 432, vertical_position: 266)
		
		name = "Prop 12"
		set_button_info(name, width: width, height: height, horizontal_position: 543, vertical_position: 266)
		
		@bet_buttons.each{ |name, button| button.sensitive = false }
		
		label = Gtk::Label.new
		@main_table_layout.put(label, 676, 100)
		
		@main_table_layout.put(@all_grids["Parent"], 25, 307)
		
		row = -1
		@all_grids["Parent"].attach(@all_grids["Roll Button"], 0, row += 1, 1, 1)
		@all_grids["Parent"].attach(@all_grids["Dice"], 0, row += 1, 1, 1)
		@all_grids["Parent"].attach(@all_grids["Information"], 0, row += 1, 1, 1)
		@all_grids["Parent"].attach(@all_grids["Bet Buttons"], 0, row += 1, 1, 1)
		@all_grids["Parent"].attach(@all_grids["Save Settings"], 0, row += 1, 1, 1)
		
		@other_buttons["Roll Dice"] = Gtk::Button.new(label: "ROLL DICE")
		@all_grids["Roll Button"].attach(@other_buttons["Roll Dice"], 0, 0, 1, 1)
		@other_buttons["Roll Dice"].set_size_request(600, 50)
		@other_buttons["Roll Dice"].signal_connect("clicked"){
			put "clench fist"
			@other_buttons["Roll Dice"].hide
		}
		
		@other_buttons["Get Stats"] = Gtk::Button.new(label: "Get Stats")
		@all_labels["Stat Information"] = Gtk::Label.new
		@all_grids["Stats"].attach(@other_buttons["Get Stats"], 0, 0, 1, 1)
		@all_grids["Stats"].attach(@all_labels["Stat Information"], 0, 1, 1, 1)
		@other_buttons["Get Stats"].signal_connect("clicked"){
			if Time.now > @click_button_timers["Get Stats"] + 0.5
				@click_button_timers["Get Stats"] = Time.now
				if @game_settings["Joined Game"]
					put "whisper ooc #{@all_entries["Dealer Name"].text} Stats."
				end
			end
		}
		
		@die_1_label = Gtk::Label.new.set_markup("<span size='72000'>&#x25FB;</span>")
		@die_2_label = Gtk::Label.new.set_markup("<span size='72000'>&#x25FB;</span>")
		@all_grids["Dice"].attach(@die_1_label, 0, 0, 1, 1)
		@all_grids["Dice"].attach(@die_2_label, 1, 0, 1, 1)
		
		@all_labels["Current Phase"] = Gtk::Label.new("Current Phase: Enter the dealer's name above and then click \"Join Game\"")
		@all_labels["Currency Info"] = Gtk::Label.new("Current Currency: ")
		@all_labels["Current Shooter"] = Gtk::Label.new("Current #{@game_lingo["Shooter"].capitalize}: ")
		@all_labels["Current Point"] = Gtk::Label.new("Current #{@game_lingo["Point"].capitalize}: ")
		@all_labels["Total Net"] = Gtk::Label.new("#{@game_settings["Currency Name"]} Won: 0, #{@game_settings["Currency Name"]} Spent: 0, Net #{@game_settings["Currency Name"]}: 0")
		@all_labels["Current Phase"].set_halign(Gtk::Align::START)
		@all_labels["Currency Info"].set_halign(Gtk::Align::START)
		@all_labels["Current Shooter"].set_halign(Gtk::Align::START)
		@all_labels["Current Point"].set_halign(Gtk::Align::START)
		@all_labels["Total Net"].set_halign(Gtk::Align::START)
		row = - 1
		@all_grids["Information"].attach(@all_labels["Current Phase"], 0, row += 1, 1, 1)
		@all_grids["Information"].attach(@all_labels["Current Shooter"], 0, row += 1, 1, 1)
		@all_grids["Information"].attach(@all_labels["Current Point"], 0, row += 1, 1, 1)
		@all_grids["Information"].attach(@all_labels["Total Net"], 0, row += 1, 1, 1)
		@all_grids["Information"].attach(@all_labels["Currency Info"], 0, row += 1, 1, 1)
		
		@all_labels["Bet Amount"] = Gtk::Label.new("Bet Amount:     ")
		@bet_adjustment = Gtk::Adjustment.new(1, 1, 1000000, 100, 1000, 0)
		@bet_amount_spin_button = Gtk::SpinButton.new(@bet_adjustment)
		@bet_amount_spin_button.set_tooltip_text(@tooltips["Bet Amount"])
		@all_grids["Bet Buttons"].attach(@all_labels["Bet Amount"], 0, 0, 1, 1)
		@all_grids["Bet Buttons"].attach(@bet_amount_spin_button, 1, 0, 1, 1)
		
		new_buttons = [ "Lingo", "Settings" ]
		column = -1
		new_buttons.each{ |name|
			@other_buttons[name] = Gtk::Button.new(label: @game_lingo[name])
			@other_buttons[name].set_size_request(150, 10) if name == "Lingo"
		}
		
		@main_table_layout.put(@other_buttons["Lingo"], 400, 25)
		@main_table_layout.put(@other_buttons["Settings"], 551, 25)
		
		@other_buttons["Lingo"].signal_connect("clicked"){ update_bet_names }
		
		@other_buttons["Settings"].signal_connect("clicked"){ create_settings_window unless @settings_window }
		
		@all_entries["Dealer Name"].signal_connect("changed"){ |entry|
			text = entry.text
			text.gsub!(/[^a-zA-Z]/, "")
			entry.text = text.capitalize
			@dealer_name = @all_entries["Dealer Name"].text
		}
		
		@main_window.signal_connect("destroy") do
			@saving_on_exit = true
			save_settings
			@main_window.close
			@main_window = nil
			@settings_window.close
			@settings_window = nil
			Gtk.main_quit
			kill_script "CrapsPlayer" if running? "CrapsPlayer"
		end
		
		change_color_values(@all_settings["Text Color Red"], @all_settings["Text Color Green"], @all_settings["Text Color Blue"])
		@all_bets_labels.each{ |label_name,label|
			label.override_font(@font_info)
			label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
		}

		@all_entries.each{ |entry_name,entry| entry.set_tooltip_text(@tooltips[entry_name]) }
		
		@die_1_label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
		@die_2_label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
		
		@payout_labels.each{ |label_name,label|
			label.set_tooltip_text(@tooltips["Payout Info"])
			label.override_font(@font_info)
			label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
		}
		
		@all_labels.each{ |label_name,label|
			label.set_tooltip_text(@tooltips[label_name])
			label.override_font(@font_info)
			label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
		}

		@bet_buttons.each{ |button_name,button| button.override_font(@font_info) }
		
		@other_buttons.each{ |button_name,button|
			button.override_font(@font_info)
			button.set_tooltip_text(@tooltips[button_name])
		}
		
		@all_payout_names.each{ |button_name,button| button.override_font(@font_info) }
		
		@main_window.add(@main_notebook)
		@main_window.show_all
		@other_buttons["Roll Dice"].hide
	end
	
	def self.create_payouts_page
		@payout_labels = {}
		row = 0
		column = -1
		@all_payout_names.each{ |name|
			if column >= 3
				row += 1
				column = -1
			end
			@payout_labels["#{name} Name"] = Gtk::Label.new("          #{name}:          ")
			@all_grids["Payouts"].attach(@payout_labels["#{name} Name"], column += 1, row, 1, 1)
			@payout_labels["#{name} Payout"] = Gtk::Label.new
			@all_grids["Payouts"].attach(@payout_labels["#{name} Payout"], column += 1, row, 1, 1)
		}
		update_payout_tab
	end
	
	def self.create_all_bets_page(bets, grid)
		row = -1
		column = 0
		bets.each{ |bet_name|
			@all_bets_labels[bet_name] = Gtk::Label.new("#{@game_lingo[bet_name]}:  ")
			grid.attach(@all_bets_labels[bet_name], column, row += 1, 1, 1)
			@all_bets_labels[bet_name].set_halign(Gtk::Align::START)
			@all_bets_labels[bet_name].set_line_wrap(true)
			@all_bets_labels[bet_name].set_line_wrap_mode(:word)
		}
	end
	
	def self.add_commas(number)
		number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
	end
	
	def self.update_all_settings
		load_the_data
		change_settings_values
	end
	
	def self.change_color_values(red, green, blue)
		@color_red = (red / 255.0)
		@color_green = (green / 255.0)
		@color_blue = (blue / 255.0)
	end
	
	def self.change_settings_values
		change_color_settings
		@settings_colors.each{ |setting|
			@all_color_options.each{ |color|
				full_setting = "#{setting} #{color}"
				@spin_buttons[full_setting].value = @all_settings[full_setting].to_i
			}
		}
	end
	
	def self.create_settings_window
		@settings_window = Gtk::Window.new(:toplevel)
		@settings_window.set_keep_above(true)
		@settings_window.set_title("Settings")
		@settings_window.set_default_size(400, 300)
		
		@all_grids["Parent"] = Gtk::Grid.new
		spin_grid = Gtk::Grid.new
		save_grid = Gtk::Grid.new
		
		@spin_buttons = {}
		
		row = -1
		@all_grids["Parent"].attach(spin_grid, 0, row += 1, 1, 1)
		@all_grids["Parent"].attach(save_grid, 0, row += 1, 1, 1)
		
		@settings_colors.each{ |name|
			column = -1
			label = Gtk::Label.new("#{name}          ")
			spin_grid.attach(label, column += 1, row += 1, 1, 1)
			@all_color_options.each{ |color|
				@spin_buttons["#{name} #{color}"] = Gtk::SpinButton.new(0, 255, 1)
				@spin_buttons["#{name} #{color}"].set_tooltip_text(@tooltips["#{name} #{color}"])
				spin_grid.attach(@spin_buttons["#{name} #{color}"], column += 1, row, 1, 1)
				
				@spin_buttons["#{name} #{color}"].signal_connect("value-changed"){
					red = @spin_buttons["#{name} Red"].value
					green = @spin_buttons["#{name} Green"].value
					blue = @spin_buttons["#{name} Blue"].value
					change_color_values(red, green, blue)
					if name == "Window Color"
						@main_notebook.override_background_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
					elsif name == "Text Color"
						@all_labels.each{ |label_name,label| label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0)) }
						@payout_labels.each{ |label_name,label| label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0)) }
						@all_bets_labels.each{ |label_name,label| label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0)) }
						@die_1_label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
						@die_2_label.override_color(:normal, Gdk::RGBA.new(@color_red, @color_green, @color_blue, 1.0))
					end
				}
			}
		}
		
		update_all_settings
		
		column = -1
		all_buttons = [ "Save", "Load" ]
		all_buttons.each{ |button_name|
			@other_buttons[button_name] = Gtk::Button.new(label: button_name)
			@other_buttons[button_name].set_tooltip_text(@tooltips[button_name])
			save_grid.attach(@other_buttons[button_name], column += 1, 0, 1, 1)
		}
		
		@other_buttons["Save"].signal_connect("clicked"){ save_settings }
		@other_buttons["Load"].signal_connect("clicked"){ update_all_settings }
		
		@settings_window.signal_connect("destroy") do
			update_all_settings
			@settings_window.close
			@settings_window = nil
		end
		
		@settings_window.add(@all_grids["Parent"])
		@settings_window.show_all
	end
	
	def self.find_correct_bet_type(first, second)
		@changed_bet_name = first
		@changed_bet_name = second if @changed_bet_name.nil?
		@changed_bet_name = @changed_bet_name.split(" ").map(&:capitalize).join(" ")
		@changed_bet_name = @changed_bet_name.gsub(/Attack /i, "Place ")
	end
	
	def self.update_all_bet_labels
		@all_bets_labels.each{ |bet_name,label| label.set_text("#{@game_lingo[bet_name]}:  ") }
		@all_players_bets.each{ |bet_name, bet_info|
			text = "#{@game_lingo[bet_name]}:  "
			bet_info.each{ |name, bet|
				amount = bet.gsub(/([a-zA-Z\s])+/, "")
				text += "#{name}: #{amount}, "
			}
			text.chop!.chop!
			@all_bets_labels[bet_name].set_text(text)
		}
	end
	
	def self.reset_bet_labels
		all_reset = [ "Field", "Horn", "Craps", "Any 7", "Prop 2", "Prop 3", "Prop 11", "Prop 12" ]
		all_reset.each{ |name| @all_players_bets[name] = {} }
		
		all_reset = [ "Pass", "Don't Pass", "Odds" ]
		if @game_settings["Die Total"] == 7
			all_reset.each{ |name| @all_players_bets[name] = {} }
		elsif @game_settings["Die Total"] == @game_settings["Current Point"]
			all_reset.each{ |name| @all_players_bets[name] = {} }
		elsif @game_settings["This Is Come Out Roll"]
			if (@game_settings["Die Total"] == 2) || (@game_settings["Die Total"] == 3) || (@game_settings["Die Total"] == 11) || (@game_settings["Die Total"] == 12)
				all_reset.each{ |name| @all_players_bets[name] = {} }
			end
		end
		
		if (@game_settings["Die Total"] == 7) && (@game_settings["This Is Come Out Roll"].nil?)
			all_reset = [ "Hard 4", "Hard 6", "Hard 8", "Hard 10", "Place 4", "Place 5", "Place 6", "Place 8", "Place 9", "Place 10" ]
			all_reset.each{ |name| @all_players_bets[name] = {} }
		else
			if @game_settings["Die Total"] == 4
				@all_players_bets["Hard 4"] = {}
				@all_players_bets["Place 4"] = {}
			elsif @game_settings["Die Total"] == 5
				@all_players_bets["Place 5"] = {}
			elsif @game_settings["Die Total"] == 6
				@all_players_bets["Hard 6"] = {}
				@all_players_bets["Place 6"] = {}
			elsif @game_settings["Die Total"] == 8
				@all_players_bets["Hard 8"] = {}
				@all_players_bets["Place 8"] = {}
			elsif @game_settings["Die Total"] == 9
				@all_players_bets["Place 9"] = {}
			elsif @game_settings["Die Total"] == 10
				@all_players_bets["Hard 10"] = {}
				@all_players_bets["Place 10"] = {}
			end
		end
	end
	
	def self.update_payout_tab
		if @game_settings["All Payout Info"]
			needed_text = @game_settings["All Payout Info"]
		else
			needed_text = ""
			@all_payout_names.each{ |bet_type| needed_text += "#{bet_type}, " }
		end
		
		payout_info = needed_text.split(", ")
		payout_info.each{ |info|
			name_value = info.split(": ")
			new_name = @game_lingo[name_value[0]]
			needed_words = {
				"Field" => @lingo_option == "Lich Bones" ? "BESEECH" : "FIELD",
				"Odds Pass" => @lingo_option == "Lich Bones" ? "CHEER HERO" : "ODDS PASS",
				"Odds Don't Pass" => @lingo_option == "Lich Bones" ? "CHEER LICH" : "ODDS DON'T PASS",
				"Horn" => @lingo_option == "Lich Bones" ? "INFERNO" : "HORN",
			}
			if new_name.nil?
				if name_value[0] =~ /(Field|Odds Pass|Odds Don't Pass|Horn)/
					words = needed_words[$1]
					new_name = name_value[0].gsub($1, words)
				end
			end
			@payout_labels["#{name_value[0]} Name"].text = "          #{new_name}:  "
			@payout_labels["#{name_value[0]} Payout"].text = "#{name_value[1]}"
			@payout_labels["#{name_value[0]} Name"].set_halign(Gtk::Align::END)
		}
	end
	
	def self.update_session_stats
		spent = add_commas(@session_stats["Currency Spent"])
		won = add_commas(@session_stats["Currency Won"])
		net_numbers = @session_stats["Currency Won"] - @session_stats["Currency Spent"]
		net = add_commas(net_numbers)
		@all_labels["Total Net"].text = "#{@game_settings["Currency Name"]} Won: #{won}, #{@game_settings["Currency Name"]} Spent: #{spent}, Net #{@game_settings["Currency Name"]}: #{net}"
		
		if @game_settings["Currency Name"] == "Silver"
			remaining = @game_settings["Starting Silver"] + net_numbers
			number = add_commas(remaining)
			@all_labels["Currency Info"].set_text("Current #{@game_settings["Currency Name"]}:  #{number}")
		end
	end
	
	def self.update_stats_tab
		all_stats = @game_settings["All Stats Info"].split(", ")
		text = ""
		all_stats.each{ |stat| text += "#{stat}\n" }
		@all_labels["Stat Information"].text = text
	end
	
	def self.betting_timer
		Thread.new{
			seconds_left = @game_settings["Betting Length"].dup
			@game_settings["Betting Length"].times{
				@all_labels["Current Phase"].text = "Current Phase: Seconds left to bet: #{seconds_left}"
				sleep 1
				seconds_left -= 1
			}
		}
	end
	
	def self.watching
		before_dying{
			@main_window.close if @main_window
		}
	
		while line = get
			if line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers, .*Your current (.*) is ([0-9,]+)\./
				@game_settings["Currency Name"] = $1
				current_currency = $2
				@all_labels["Currency Info"].set_text("Current #{@game_settings["Currency Name"]}:  #{current_currency}")
			end
			
			if line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers, \"Welcome!.* Currency: (.*), Min bet\: (\d+), Max bet\: (\d+), Bet Length\: (\d+)/
				@game_settings["Currency Name"] = $1
				@game_settings["Minimum Bet"] = $2.to_i
				@game_settings["Maximum Bet"] = $3.to_i
				@game_settings["Betting Length"] = $4.to_i
				put "wealth quiet" if @game_settings["Currency Name"] == "Silver"
				@all_labels["Currency"].set_text("CURRENCY: #{@game_settings["Currency Name"].upcase}")
				@bet_adjustment.lower = @game_settings["Minimum Bet"]
				@bet_adjustment.upper = @game_settings["Maximum Bet"]
				@bet_amount_spin_button.value = @game_settings["Minimum Bet"]
				@all_labels["Current Phase"].text = "Current Stage: Waiting..."
				@all_entries["Dealer Name"].editable = false
				@other_buttons["Join Game"].hide
				@game_settings["Joined Game"] = true
			elsif line =~ /^You have (.*) silver with you./
				if $1 == "no"
					silver = 0 
				elsif $1 == "but one"
					silver = 1
				else
					silver = $1.delete(",").to_i
				end
				@game_settings["Starting Silver"] = silver
				number = add_commas(silver)
				@all_labels["Currency Info"].set_text("Current #{@game_settings["Currency Name"]}:  #{number}")
			elsif line =~ /^#{@all_entries["Dealer Name"].text} [a-zA-Z]+, \"Betting is now open! Next roll is the .*\! ([a-zA-Z]+) is the current .*\. You may now also JOIN the game\!\"/
				shooter = $1
				betting_timer
				@die_1_label.set_markup("<span size='72000'>&#x25FB;</span>")
				@die_2_label.set_markup("<span size='72000'>&#x25FB;</span>")
				@game_settings["Current Shooter"] = $1
				@game_settings["Current Point"] = nil
				@all_labels["Current Shooter"].set_text("Current #{@game_lingo["Shooter"].capitalize}: #{@game_settings["Current Shooter"].capitalize}")
				@all_labels["Current Point"].set_text("Current #{@game_lingo["Point"].capitalize}: #{@game_settings["Current Point"]}")
				@game_settings["This Is Come Out Roll"] = true
				@bets_allowed_before_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = true }
				@bets_allowed_after_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = false	}
			elsif line =~ /^#{@all_entries["Dealer Name"].text} exclaims, \"Betting is now open! ([a-zA-Z]+) is looking for the .* of (\d+)\! You may now also JOIN the game\!\"/
				shooter = $1
				point = $2
				betting_timer
				@game_settings["This Is Come Out Roll"] = nil
				@game_settings["Current Shooter"] = $1
				@game_settings["Current Point"] = point.to_i
				@all_labels["Current Shooter"].set_text("Current #{@game_lingo["Shooter"].capitalize}: #{@game_settings["Current Shooter"].capitalize}")
				@all_labels["Current Point"].set_text("Current #{@game_lingo["Point"].capitalize}: #{@game_settings["Current Point"]}")
				@bets_allowed_before_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = false }
				@bets_allowed_after_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = true }
				@game_settings["All Current Bets"].each{ |bet_name| @bet_buttons[bet_name].sensitive = false }
			elsif line =~ /^#{@all_entries["Dealer Name"].text} exclaims\, \"Betting is now closed\!/
				@all_labels["Current Phase"].text = "Current Phase: Waiting for #{@game_lingo["Shooter"]} to roll."
				@bets_allowed_before_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = false }
				@bets_allowed_after_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = false }
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers, \"Sorry, I have to take over as shooter.\"/
				@other_buttons["Roll Dice"].hide
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, "(.*) LOST\. .* You are out your bet of/
				find_correct_bet_type(@all_bet_names[$1], $1)
				@game_settings["All Current Bets"].delete(@changed_bet_name)
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, "(.*) WON\. .* You have won ([\d,]+) .*\./
				find_correct_bet_type(@all_bet_names[$1], $1)
				@game_settings["All Current Bets"].delete(@changed_bet_name)
				@session_stats["Currency Won"] += $2.delete(",").to_i
				update_session_stats
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, \"Payout info\: (.*)\.\"/
				@game_settings["All Payout Info"] = $1
				update_payout_tab
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, \"Sorry a bet for .* may not be placed before the/
				@bets_allowed_after_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = false }
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, \"Sorry a bet for .* may not be placed after the/
				@bets_allowed_before_come_out_roll.each{ |bet_name| @bet_buttons[bet_name].sensitive = false }
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, \"You\'re the .*\! Type CLENCH FIST to roll\./
				@other_buttons["Roll Dice"].show
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, \"Your [a-zA-Z]+ stats\: (.*)\.\"/
				@game_settings["All Stats Info"] = $1
				@other_buttons["Get Stats"].hide
				update_stats_tab
			elsif line =~ /^#{@all_entries["Dealer Name"].text} [a-zA-Z]+\, \"([a-zA-Z]+) has placed a bet for '(.*)' for (.*?)\./
				player = $1
				bet_amount = $3
				find_correct_bet_type(@all_bet_names[$2], $1)
				
				if player == checkname
					numbers = bet_amount.gsub(/[a-zA-Z,\s]/, '')
					@session_stats["Currency Spent"] += numbers.to_i
					update_session_stats
				end
				
				@all_players_bets[@changed_bet_name] = {} unless @all_players_bets[@changed_bet_name]
				@all_players_bets[@changed_bet_name][player] = bet_amount
				text = "#{@game_lingo[@changed_bet_name]}:  "
				@all_players_bets[@changed_bet_name].each{ |name, bet| text += "#{name}: #{numbers}, " }
				text.chop!.chop!
				@all_bets_labels[@changed_bet_name].set_text(text)
			elsif line =~ /^#{@all_entries["Dealer Name"].text} [a-zA-Z]+\, \"Rolled (\d+)/
				@game_settings["Die Total"] = $1.to_i
				@all_labels["Current Phase"].text = "Current Phase: #{@game_settings["Die Total"]} was rolled. Waiting for betting phase."
				reset_bet_labels
				update_all_bet_labels
			elsif line =~ /^\(#{@all_entries["Dealer Name"].text} (?:picks|watches) .* When the bones stop they land on (\d+) and (\d)\.\)/
				die1 = $1.to_i
				die2 = $2.to_i
				@die_1_label.set_markup("<span size='72000'>&#x268#{die1 - 1};</span>")
				@die_2_label.set_markup("<span size='72000'>&#x268#{die2 - 1};</span>")
			elsif line =~ /^\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers, \"Your '(.*)' bet for .* has been accepted./ || line =~ /\(OOC\) #{@all_entries["Dealer Name"].text}\'s player whispers\, \"You have already made a '(.*)' bet for/
				find_correct_bet_type(@all_bet_names[$1], $1)
				@game_settings["All Current Bets"].push(@changed_bet_name)
				if @changed_bet_name == "Pass" || @changed_bet_name == "Don't Pass"
					@bet_buttons["Pass"].sensitive = false
					@bet_buttons["Don't Pass"].sensitive = false
				else
					@bet_buttons[@changed_bet_name].sensitive = false
				end
			end
		end
	end
end

Gtk.queue {
	CrapsPlayerMain.create_window		
	Gtk.main
}

respond "################################################################################"
respond "################################################################################"
respond "WARNING: Games using \"Silver\" as currency deals with real in game silver. If you are betting using real silvers then be sure you trust the dealer you are playing with. The dealer script can easily be edited to allow a dealer to cheat."
respond "################################################################################"
respond "################################################################################"

CrapsPlayerMain.watching