=begin

Script: 		Lore
Author: 		WilliamW1979 (WilliamW1979@netscape.net)
Game:			Gemstone
Date: 			August 25, 2017
Version: 		2.4
Description: 		LoreSing to an object in your right hand, gives results at the end!
Commands: 		;lore help (usage and options)
What script does:	It has automated loresinging, even a whisper feature to give data to people, logging feature so you can get data later from other characters, and a silent mode so you don't see your own singing.

Update history

2.4
Bug fixes

2.3
fput was locking up script, fixed problem using dothistimeout instead

2.2
Fixed some minor issues.	

2.1
Change the right hand to detect only if you are singing to an object.

2.0
Added a whisper feature so you can whisper the details to someone you are loresinging to and it works with autolore script now!

1.84
Got rid of the settings.lic file to be used and started using UserVars in its place for a better solution!

1.83
Weird bugs for some reason needed fixing. Stopped working at one point, so fixed the errors!

1.82
Upgrading to utilities messed up some variables I had to fix to enable silent mode to work again.

1.81
Fixed some bugs (Changed number commands to reflect which verse singing (0 is all now instead of 1).

1.8
Upgraded script to have universal settings file for easy upgrading for future updates!

1.7
Added the settings class to allow for cross-script compatibility. A special setting file is created for each character individually that can be used for all scripts I create!

1.6
Added a treat!

1.5
updated silent loresinging so others hear that you are speaking bard and not common.

1.4
Added more features to the logging ability and changed made a few detects for trust so no errors should come up	

1.3 
Added LOG command to enable and disable logging
Removed SEEALL command, now Silence / Silent will take a second variale of on or off.

1.2
Added a logging feature (needs to be trusted to work) This logging feature will allow future scripts to access the data as it stores all singing attempts based on name and id

1.1
Added silent feature using SILENCE and SEEALL commands

1.0
First version made which as a basic loresinging script

=end

temppass = 0

object = nil

Silent = false
Enable_Logs = true

ResultAbility = nil
ResultEnhance = nil
ResultPurpose = nil
ResultValue = nil

def SingLore(var)
	loretype = [", please tell me and tell me true,;What might be your own value?", " I am listening and it is all coming clear,;But your purpose is what I would most like to hear.", " it will be helpful for me to know,;What enhance within will you now show?", ", from my ears and eyes you have nothing to hide,;What special ability do you hold inside?"]
	while true
		dothistimeout "loresing #{$object}" + loretype[var].to_s, 15, /You sing/
		while line = get
			if line =~ /you learn something/ or line =~ /in your hand/
				line = get
				if line2 = Script.current.gets?
					if line2 =~ /You sense/ or line2.include?($object.to_s) or line2 =~ /provides a bonus/ or line2 =~ /This enhancement/
						respond line + " " + line2
						return line + " " + line2
					else
						respond line
						return line
					end
				else
					return line
				end
			elsif line =~ /you previously learned/
				return nil
			elsif line =~ /reached the end/
				return nil
			elsif line =~ /without sufficient power/ or line =~ /You open your mouth, but find yourself unable to sing/
				return nil
			elsif line =~ /glean more/
				break
			end
		end
	end
end

class Lore

	attr_accessor :type, :objectname, :objectid

	def initialize()
		silence_me
		$ResultValue = nil
		$ResultPurpose = nil
		$ResultEnhance = nil
		$ResultAbility = nil
		$Silent = UserVars.Lore_Silent
		$Enable_Logs = UserVars.Lore_Logs
		@objectname = GameObj.right_hand.name
		@objectid = GameObj.right_hand.id
		$object = GameObj.right_hand.noun
		load_data
		if $Silent == true
			before_dying {DownstreamHook.remove("Lore_LoreSilent")}
		end
		unless $SAFE == 0
			$Enable_Logs = false
		end
	end

	LoreSilent = proc{
		action = proc { |server_string|
			if $Silent == true or server_string.include?("now speaking")
				nil
			else
				server_string
			end
		}
		if $Silent == true then DownstreamHook.add("Lore_LoreSilent", action) end
		fput "speak bard"
		case $Temppass
		when 0
			$ResultValue = SingLore(0)
		when 1
			$ResultPurpose = SingLore(1)
		when 2
			$ResultEnhance = SingLore(2)
		when 3
			$ResultAbility = SingLore(3)
		when 4
			$ResultAbility = SingLore(3)
			$ResultEnhance = SingLore(2)
			$ResultPurpose = SingLore(1)
			$ResultValue = SingLore(0)
		end
		fput "speak common"
		if $Silent == true then DownstreamHook.remove("Lore_LoreSilent") end
	}

	def command
		if Stats.prof != "Bard"
			respond
			respond
			respond "Displaying previously sung data!"
			display_data
			exit
		elsif Script.current.vars[1].nil?
			if $Enable_Logs == true and File.exists?("#{$lich_dir}logs/#{XMLData.game}-Lore/#{@objectname}-#{@objectid}.txt")
				respond
				respond
				respond "Displaying what we know sung in the past!"
				display_data
				exit
			else
				$Temppass = 4
				LoreSilent.call
			end
		elsif "all".include?(variable[1].to_s) or variable[1] == '0'
			if GameObj.right_hand.name == "Empty" and Script.current.vars[1] then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			$Temppass = 4
			LoreSilent.call
		elsif "value".include?(Script.current.vars[1].to_s) or Script.current.vars[1] == '1'
			if GameObj.right_hand.name == "Empty" and Script.current.vars[1] then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			$Temppass = 0
			LoreSilent.call
		elsif "purpose".include?(Script.current.vars[1].to_s) or Script.current.vars[1] == '2'
			if GameObj.right_hand.name == "Empty" and Script.current.vars[1] then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			$Temppass = 1
			LoreSilent.call
		elsif "enhance".include?(Script.current.vars[1].to_s) or Script.current.vars[1] == '3'
			if GameObj.right_hand.name == "Empty" and Script.current.vars[1] then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			$Temppass = 2
			LoreSilent.call
		elsif "ability".include?(Script.current.vars[1].to_s) or Script.current.vars[1] == '4'
			if GameObj.right_hand.name == "Empty" and Script.current.vars[1] then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			$Temppass = 3
			LoreSilent.call
		elsif "whisper".include?(Script.current.vars[1].to_s)
			unless Script.current.vars[2].nil?
#				unless $ResultValue.nil? then fput "whisper #{Script.current.vars[2]} #{$ResultValue}" end
#				unless $ResultPurpose.nil? then fput "whisper #{Script.current.vars[2]} #{$ResultPurpose}" end
#				unless $ResultEnhance.nil? then fput "whisper #{Script.current.vars[2]} #{$ResultEnhance}" end
#				unless $ResultAbility.nil? then fput "whisper #{Script.current.vars[2]} #{$ResultAbility}" end
				data = "#{@objectname}: "
				unless $ResultValue.nil? then data = data + $ResultValue + " " end
				unless $ResultPurpose.nil? then data = data + $ResultPurpose + " " end
				unless $ResultEnhance.nil? then data = data + $ResultEnhance + " " end
				unless $ResultAbility.nil? then data = data + $ResultAbility + " " end
				fput "whisper #{Script.current.vars[2]} #{data}"
			end
			exit
		elsif "silence".include?(Script.current.vars[1].to_s) or "silent".include?(Script.current.vars[1].to_s)
			if Script.current.vars[2].to_s == 'on' or Script.current.vars[2].to_s == 'true'
				UserVars.change("Lore_Silent", true)
				UserVars.save
				respond
				respond "Silent Mode is now active!"
				respond
			elsif Script.current.vars[2].to_s == 'off' or Script.current.vars[2].to_s == 'false'
				UserVars.change("Lore_Silent", false)
				UserVars.save
				respond
				respond "Silent Mode is now deactive!"
				respond
			end
			exit
		elsif "logs".include?(Script.current.vars[1].to_s)
			if Script.current.vars[2].to_s == 'on' or Script.current.vars[2].to_s == 'true'
				unless $SAFE == 0
					echo "This script must be trusted to be allowed to write to log files."
					echo "You can trust it with the following command: #{$lich_char}trust #{script.name}"
					exit
				end
				UserVars.change("Lore_Logs", true)
				UserVars.save
				respond
				respond "Logs are now active!"
				respond
			elsif Script.current.vars[2].to_s == 'off' or Script.current.vars[2].to_s == 'false'
				UserVars.change("Lore_Logs", false)
				UserVars.save
				respond
				respond "Logs are now deactivated!"
				respond
			end
			exit
		elsif "virgins".include?(Script.current.vars[1])
			respond
			respond "You have discovered the hidden command!"
			respond
			fput "sing A dragon has come to our village today.;We've asked him to leave, but he won't go away.;Now he's talked to our king and they worked out a deal.;No homes will he burn and no crops will he steal."
			pause 7
			fput "sing Now there is but one catch, we dislike it a bunch.;Twice a year he invites him a virgin to lunch.;Well, we've no other choice, so the deal we'll respect.;But we can't help but wonder and pause to reflect."
			pause 7
			fput "sing Do virgins taste better than those who are not?;Are they salty, or sweeter, more juicy or what?;Do you savor them slowly? Gulp them down on the spot?;Do virgins taste better than those who are not?"
			pause 7
			fput "sing Now we'd like to be shed you, and many have tried.;But no one can get through your thick scaly hide.;We hope that some day, some brave knight will come by.;'Cause we can't wait around 'til you're too fat to fly."
			pause 7
			fput "sing Now you have such good taste in your women for sure,;They always are pretty, they always are pure.;But your notion of dining, it makes us all flinch,;For your favorite entree is barbecued wench."
			pause 7
			fput "sing Now we've found a solution, it works out so neat,;If you insist on nothing but virgins to eat.;No more will our number ever grow small,;We'll simply make sure there's no virgins at all!"
			exit
		else
			respond
			respond "Place the object in your right hand you want to loresing!"
			respond
			respond "      COMMANDS                               DESCRIPTION"
			respond
			respond ";lore all or ;lore 0                   Loresing EVERYTHING (All verses in order)"
			respond ";lore value or ;lore 1                 Loresing Value Only (verse 1)"
			respond ";lore purpose or ;lore 2               Loresing Purpose Only (verse 2)"
			respond ";lore enhance or ;lore 3               Loresing enhance Only (verse 3)"
			respond ";lore ability or ;lore 4               Loresing Ability Only (verse 4)"
			respond
			respond ";lore                                  If logging is enabled and there is a log, will pull log or else it will sing all 4 types!"
			respond
			respond "                            OPTIONS"
			respond
			respond ";lore log [on/off/true/false]          Enable/Disable logging (off by default)"
			respond ";lore silence [on/off/true/false]      Hide/See singing (on by default)"
			respond ";lore silent [on/off/true/false]       Hide/See singing (on by default)"
			respond ";lore whisper [PERSON]                 Whispers details to person of object already sung to in right hand (Requires logging)."
			respond
			respond
			respond 'Please note, there is a script called "AUTOLORE" that will automatically run this script for mass loresinging'
			respond
			return
		end
		if $Enable_Logs == true then log end
		display_data
	end

	def log
		basedir = "#{$lich_dir}logs/"
		directory = basedir + "#{XMLData.game}-Lore/"
		Dir.mkdir(basedir) unless File.exists?(basedir)
		Dir.mkdir(directory) unless File.exists?(directory)

		if File.exists?("#{$lich_dir}logs/#{XMLData.game}-Lore/#{@objectname}-#{@objectid}.txt")
			my_file = File.open("#{$lich_dir}logs/#{XMLData.game}-Lore/#{@objectname}-#{@objectid}.txt", "w+")
		else
			my_file = File.new("#{$lich_dir}logs/#{XMLData.game}-Lore/#{@objectname}-#{@objectid}.txt", "w")
		end
		my_file.write("Object Name:#{GameObj.right_hand.name}\n")
		my_file.write("Object ID:#{GameObj.right_hand.id}\n")
		if $ResultValue
			my_file.write("Value:#{$ResultValue}\n")
		end
		if $ResultPurpose
			my_file.write("Purpose:#{$ResultPurpose}\n")
		end
		if $ResultEnhance
			my_file.write("Enhance:#{$ResultEnhance}\n")
		end
		if $ResultAbility
			my_file.write("Ability:#{$ResultAbility}\n")
		end
		my_file.close
	end

	def display_data
		respond
		respond
		respond "Object Name: #{@objectname}"
		respond "Object ID: #{@objectid}"
		respond 
		unless $ResultValue.nil? then respond "Value: #{$ResultValue}" end
		unless $ResultPurpose.nil? then respond "Purpose: #{$ResultPurpose}" end
		unless $ResultEnhance.nil? then respond "Enhansive: #{$ResultEnhance}" end
		unless $ResultAbility.nil? then respond "Ability: #{$ResultAbility}" end
		respond
		respond
	end

	def load_data
		if File.exists?("#{$lich_dir}logs/#{XMLData.game}-Lore/#{@objectname}-#{@objectid}.txt")
			datafile = File.open("#{$lich_dir}logs/#{XMLData.game}-Lore/#{@objectname}-#{@objectid}.txt", "r")
			while (line = datafile.gets)
				if line.include?("Value:")
					data = line.gsub("Value:", "")
					data.delete!("\n")
					$ResultValue = data;
				elsif line.include?("Purpose:")
					data = line.gsub("Purpose:", "")
					data.delete!("\n")
					$ResultPurpose = data;
				elsif line.include?("Enhance:")
					data = line.gsub("Enhance:", "")
					data.delete!("\n")
					$ResultEnhance = data;
				elsif line.include?("Ability:")
					data = line.gsub("Ability:", "")
					$ResultAbility = data;
				end
			end
			datafile.close
		end
	end
end

sing = Lore.new
sing.command