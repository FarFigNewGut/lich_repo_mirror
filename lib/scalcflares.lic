##quiet
## vim: set ft=ruby:
=begin

    SCalcFlares by SpiffyJr (spiffyjr@gmail.com)
    
     author: spiffyjr
      email: theman@spiffyjr.me
       name: SCalcFlares
       tags: mechanics
    version: 1.0

=end

CharSettings['flares'] ||= Hash.new
CharSettings['swings'] ||= Hash.new

flare_types = {
    'unleash an invisible burst of force' => 'grapple',
    'flares with a burst of flame' => 'fire',
    'releases a blast of vibrating energy' => 'vibe',
    'unleashes a blast of sonic energy' => 'sonic',
}

message = proc { |msg|
    echo '-- ' + msg
}

item_flared = proc { |item, flare, increment|    
    if CharSettings['flares'][item].nil?
        CharSettings['flares'][item] = Hash.new
    end
    if CharSettings['flares'][item][flare].nil?
        CharSettings['flares'][item][flare] = 0
    end
    if increment
        CharSettings['flares'][item][flare] += 1
    else
        CharSettings['flares'][item][flare]
    end
}

report_flare = proc { |item, flare, increment|
    count  = item_flared.call(item, flare, increment)
    swings = CharSettings['swings'][item]

    message.call(sprintf('item: %s, flare: %s, swings: %d, procs: %d, percent: %2.2f%%', item, flare, swings, count, (count.to_f / swings.to_f) * 100.0))
}

if script.vars[0] =~ /^clear/i
    CharSettings['flares'] = Hash.new
    CharSettings['swings'] = Hash.new
    message.call('cleared')
elsif script.vars[0] =~ /^report/i
    message.call('report')
    items = CharSettings['flares'].keys
    items.each { |item|
        CharSettings['flares'][item].keys.each { |flare|
            report_flare.call(item, flare, false)
        }
    }
    exit
end

status_tags

item = nil
target = nil
buffer = []

while line = get
    if line =~ /You (?:thrust with|swing|attempt to (?:punch|grapple|jab)) an? ([^<]+) at <pushBold\/>(?:a|an) <a exist="(\d+)"/ or line =~ /^Roundtime: \d+/
        new_item = $1
        new_target = $2

        if item and target
            if GameObj.left_hand and item =~ /#{GameObj.left_hand.name}/
                item = GameObj.left_hand.name
            elsif GameObj.right_hand and item =~ /#{GameObj.right_hand.name}/
                item = GameObj.right_hand.name
            else
                echo ">> failed to find item match"
                next
            end

            if not CharSettings['swings'][item]
                CharSettings['swings'][item] = 0
            end
            CharSettings['swings'][item] += 1

            buffer.each { |data| report_flare.call(data[:item], data[:flare], true) }
            
            target = nil
            item = nil
            buffer = []
        end

        if new_item and new_target
            item = new_item
            target = new_target
        end
    end
    
    if line =~ /\*\* Your <a exist="\d+" noun=".*">(.*)<\/a> (.*) at.*! \*\*/
        flare_desc = $2.to_s
        buffer.push({item: $1.to_s, flare: flare_types[flare_desc] ? flare_types[flare_desc] : 'miscellaneous'})
    elsif line =~ /\*\* Your <a exist="\d+" noun=".*">(.*)<\/a> pulses with a burst of plasma energy! \*\*/
        buffer.push({item: $1.to_s, flare: 'guiding light'})
    elsif line =~ /\*\* Necrotic energy from your <a exist="\d+" noun=".*">(.*)<\/a> overflows into you\! \*\*/
        buffer.push({item: $1.to_s, flare: 'necrotic'})
    elsif line =~ /With a loud snap, a blast of energy bursts from your <a exist="\d+" noun=".*">(.*)<\/a>/
        buffer.push({item: $1.to_s, flare: 'sonic2'})
    end
end
