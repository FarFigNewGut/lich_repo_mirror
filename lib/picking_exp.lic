=begin
  
  Start of a script to try and predict experience per box, based on fame gained, and records some other information to your familiar window.
  

          author: Xanlin
            game: GS
            tags: lockpicking, rogue, stats, utility
        required: Lich >= 4.6.4
         version: 2
            
  +---------------------------------------------------------------+

=end
def self.ts(); return "#{Time.now.strftime('%Y-%m-%d_%H:%M:%S')}"; end;
def self.sendto_familiar(msg, stamp=self.ts) _respond "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>#{stamp};#{msg}\n<popStream/>\n" end
@prev_fame = 0
@curr_fame = 0
@lock      = 0
@pick      = nil;
@plinite   = 0;
@roll      = 0
@trap      = 0
@scarab    = nil;
patterns  = Hash.new()
patterns[:fame] = /^Your personal fame is (?<fame>\d+)\./
patterns[:roll] = /^You make an? .*? attempt \(d100=(?<roll>\d+)\)./
patterns[:opened] = /\.  Then...CLICK!  It opens!|You carefully pull the core from its casing and leave it to rest upon the very tip of the plinite, where it can be easily PLUCKed./
patterns[:plinite] = /^It looks like .*? extraction .*?\(.*?(?<plinite>\-?\d+)\)./
patterns[:opened_lock] = /(?<lock>\d+) thief-lingo difficulty ranking\).  Then...CLICK!  It opens!$/
#patterns[:trap] = /^It looks like (?:it|an?) .*? (?:trap|extraction) \((?:about )?(?<trap>\-?\d+)\)./
patterns[:trap] = /^It looks like (?:it|an?) .*? (?:trap) \((?:about )?(?<trap>\-?\d+)\)./
patterns[:no_trap] = /^You discover no traps./
patterns[:scarab] = /^Peering closely into the lock, you spy (.*? scarab) wedged/
patterns[:not_pick] = /Empty|box|coffer|chest|trunk|plinite/i 

# Startup
result = dothistimeout 'fame', 1, patterns[:fame] 
  p = patterns[:fame].match(result);
  @prev_fame = p[:fame].to_i;
  @curr_fame = @prev_fame;
  
# Fame proc
check_fame = proc {
    result = dothistimeout 'fame', 1, patterns[:fame];
    if result
      f = patterns[:fame].match(result);
      @prev_fame = @curr_fame;
      @curr_fame = f[:fame].to_i;
    end;
};

#Report to user
report = proc { 
  gained = @curr_fame-@prev_fame;
  if gained > 0
    @lock = @plinite if @lock == 0 and @plinite != 0;
    msg= "picking_exp;fame:#{" "*(2-gained.to_s.length)}#{gained}; exp:#{" "*(3-(gained*5).to_s.length)}#{gained*5}; trap:#{" "*(4-@trap.to_s.length)}#{@trap}; lock:#{" "*(4-@lock.to_s.length)}#{@lock}; roll:#{" "*(3-@roll.to_s.length)}#{@roll}; lore:#{Spell[403].active? ? "true" : "false"}; pick:#{@pick};#{@scarab.nil? ? "" : "scarab:#{@scarab}"}"
    _respond "\n+#{'-'*10};#{msg};time:#{Time.now}\n\n";
    self.sendto_familiar(msg);
  end
  @roll=0;@trap=0;@lock=0;@pick=nil;@scarab=nil;@plinite=0;
}

#Record info (todo)
record = proc {
  _respond "picking_exp.record not implemented"
}

do_stuff = proc { 
  @pick = GameObj.right_hand.name !~ patterns[:not_pick] ? GameObj.right_hand.name : GameObj.left_hand.name
  check_fame.call
  report.call
  #record.call
}

# Loop
while line = get;
  if patterns[:roll].match(line);
    r = patterns[:roll].match(line);
    @roll = r[:roll].to_i;
  elsif patterns[:scarab].match(line);
    @scarab = $1;
  elsif t = patterns[:trap].match(line);
    @trap = t[:trap];
  elsif patterns[:no_trap].match(line);
    @trap = 0;
  elsif p = patterns[:plinite].match(line);
    @plinite = p[:plinite].to_i * -1;
  elsif l = patterns[:opened_lock].match(line);
    @lock = l[:lock].to_i;
    do_stuff.call();
  elsif o = patterns[:opened].match(line);
    do_stuff.call();
  end
end
