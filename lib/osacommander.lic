VERSION = '3.1.0'
UserVars.osacrew["commanderversion"] = VERSION

def ship_type
	case Room.current.id
	when (29038..29042)
			@ship_type = "sloop"
			@cargo_hold = 29039
			@main_deck = 29038
			@mid_deck = nil
			@forward_deck = nil
			@bow = nil
			@crows_nest = 29040
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = nil
			@crew_quarters = nil
			@helm = 29041
			@cannons1 = 29038
			@cannons2 = nil
			@cannons3 = nil
			@captains_quarters = 29042
			@ship_map = [29038, 29039, 29040, 29041, 29042]
			@Slooptimes = UserVars.osacrew["Slooptimes"].last(50)
			if @Slooptimes.nil? or @Slooptimes.empty?
				@Slooptimes = [0.315]
			end
			@Sailtimes = @Slooptimes
	when (30140..30147)
			@ship_type = "brigantine"
			@cargo_hold = 30145
			@main_deck = 30142
			@mid_deck = nil
			@forward_deck = 30144
			@bow = nil
			@crows_nest = 30143
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = 30147
			@crew_quarters = 30146
			@helm = 30141
			@captains_quarters = 30140
			@cannons1 = 30142
			@cannons2 = nil
			@cannons3 = 30144
			@ship_map = [30144, 30142, 30143, 30145, 30147, 30146, 30141, 30140]
			@Brigtimes = UserVars.osacrew["Brigtimes"].last(50)
			if @Brigtimes.nil? or @Brigtimes.empty?
				@Brigtimes = [0.30000000000000000]
			end
			@Sailtimes = @Brigtimes
	when (30119..30127)
			@ship_type = "carrack"
			@cargo_hold = 30125
			@main_deck = 30119
			@mid_deck = nil
			@forward_deck = 30121
			@social_room = nil
			@bow = 30122
			@crows_nest = 30123
			@forward_crows_nest = nil
			@mess_hall = 30127
			@crew_quarters = 30126
			@helm = 30120
			@captains_quarters = 30124
			@cannons1 = 30119
			@cannons2 = nil
			@cannons3 = 30121
			@ship_map = [30122, 30121, 30123, 30119, 30127, 30125, 30126, 30120, 30124]
			@Cartimes = UserVars.osacrew["Cartimes"].last(50)
			if @Cartimes.nil? or @Cartimes.empty?
				@Cartimes = [0.30000000000000000]
			end
			@Sailtimes = @Cartimes
	when (30176..30186)
			@ship_type = "galleon"
			@cargo_hold = 30182
			@main_deck = 30176
			@mid_deck = nil
			@forward_deck = 30177
			@bow = 30178
			@crows_nest = 30181
			@forward_crows_nest = nil
			@social_room = 30185
			@mess_hall = 30184
			@crew_quarters = 30183
			@helm = 30179
			@captains_quarters = 30180
			@cannons1 = 30176
			@cannons2 = nil
			@cannons3 = 30177
			@ship_map = [30178, 30177, 30181, 30176, 30185, 30184, 30182, 30183, 30179, 30180]
			@Galtimes = UserVars.osacrew["Galtimes"].last(50)
			if @Galtimes.nil? or @Galtimes.empty?
				@Galtimes = [0.30000000000000000]
			end
			@Sailtimes = @Galtimes
	when (30166..30175)
			@ship_type = "frigate"
			@cargo_hold = 30167
			@main_deck = 30166
			@mid_deck = nil
			@forward_deck = 30171
			@bow = 30172
			@crows_nest = 30173
			@forward_crows_nest = nil
			@social_room = 30170
			@mess_hall = 30169
			@crew_quarters = 30168
			@helm = 30174
			@captains_quarters = 30175
			@cannons1 = 30166
			@cannons2 = nil
			@cannons3 = 30171
			@ship_map = [30172, 30171, 30173, 30166, 30170, 30169, 30167, 30168, 30174, 30175]
			@Fritimes = UserVars.osacrew["Fritimes"].last(50)
			if @Fritimes.nil? or @Fritimes.empty?
				@Fritimes = [0.30000000000000000]
			end
			@Sailtimes = @Fritimes
	when (30128..30139)
			@ship_type = "man o' war"
			@cargo_hold = 30136
			@main_deck = 30130
			@mid_deck = 30131
			@forward_deck = 30132
			@bow = 30133
			@crows_nest = 30135
			@forward_crows_nest = 30134
			@social_room = 30139
			@mess_hall = 30138
			@crew_quarters = 30137
			@helm = 30128
			@captains_quarters = 30129
			@cannons1 = 30130
			@cannons2 = 30131
			@cannons3 = 30132
			@ship_map = [30133, 30134, 30132, 30131, 30135, 30130, 30139, 30138, 30136, 30137, 30128, 30129]
			@Mantimes = UserVars.osacrew["Mantimes"].last(50)
			if @Mantimes.nil? or @Mantimes.empty?
				@Mantimes = [0.35000000000000000]
			end
			@Sailtimes = @Mantimes
	end
	if (30787..30791).include? Room.current.id || (@enemy_main_deck == 30787)
			@enemy_ship_type = "Sloop"
			@enemy_bow = nil
			@enemy_forward_deck = nil
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30787
			@enemy_crows_nest = 30791
			@enemy_cargo_hold = 30790
			@enemy_helm = 30788
			@enemy_quarters = 30789
			@enemy_ship_map = [30787, 30791, 30788, 30790]
	end
	if (30792..30797).include? Room.current.id || (@enemy_main_deck == 30792)
			@enemy_ship_type = "Brigantine"
			@enemy_bow = nil
			@enemy_forward_deck = 30797
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30792
			@enemy_crows_nest = 30796
			@enemy_cargo_hold = 30795
			@enemy_helm = 30793
			@enemy_quarters = 30794
			@enemy_ship_map = [30797, 30792, 30796, 30793, 30795]
	end
	if (30266..30272).include? Room.current.id || (@enemy_main_deck == 30266)
			@enemy_ship_type = "Carrack"
			@enemy_bow = 30272
			@enemy_forward_deck = 30271
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30266
			@enemy_crows_nest = 30270
			@enemy_cargo_hold = 30269
			@enemy_helm = 30267
			@enemy_quarters = 30268
			@enemy_ship_map = [30272, 30271, 30266, 30270, 30267, 30269]
	end
	if (30798..30804).include? Room.current.id || (@enemy_main_deck == 30798)
			@enemy_ship_type = "Galleon"
			@enemy_bow = 30804
			@enemy_forward_deck = 30803
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30798
			@enemy_crows_nest = 30802
			@enemy_cargo_hold = 30801
			@enemy_helm = 30799
			@enemy_quarters = 30800
			@enemy_ship_map = [30804, 30803, 30798, 30802, 30799, 30801]
	end
	if (30805..30810).include? Room.current.id || (@enemy_main_deck == 30805)
			@enemy_ship_type = "Frigate"
			@enemy_bow = nil
			@enemy_forward_deck = 30810
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30805
			@enemy_crows_nest = 30809
			@enemy_cargo_hold = 30808
			@enemy_helm = 30806
			@enemy_quarters = 30807
			@enemy_ship_map = [30810, 30805, 30809, 30806, 30808]
	end
	if (30778..30786).include? Room.current.id || (@enemy_main_deck == 30778)
			@enemy_ship_type = "Man O' War"
			@enemy_bow = 30784
			@enemy_forward_deck = 30786
			@enemy_forward_crows_nest = 30758
			@enemy_mid_deck = 30783
			@enemy_main_deck = 30778
			@enemy_crows_nest = 30782
			@enemy_cargo_hold = 30781
			@enemy_helm = 30779
			@enemy_quarters = 30780
			@enemy_ship_map = [30784, 30786, 30758, 30783, 30778, 30782, 30779, 30781]
	end
end


def commander_broadcast_location
    ship_type
	if Room.current.id != @main_deck
		start_script("go2", [@main_deck])
		wait_while { running?("go2") }
	end
	fput "look ocean"
        sleep 0.5
    room_title = room_description = room_exits_string = nil
    history = ($_SERVERBUFFER_ + $_SERVERBUFFER_.history)
    history.each_index { |i|
            history[i-7..i].each { |line|
                if line =~ /<style id="roomName" \/>(.*)$/
                    room_title = $1.strip
                elsif line =~ /<style id="roomDesc"\/>(.*?)<style id=""\/>/
                    room_description = $1.strip.gsub(/<.*?>/, '')
                elsif line =~ /(Obvious (?:paths|exits): .*)/
                    room_exits_string = $1.strip.gsub(/<.*?>/, '')
                end
                }}
    room = Map.list.find { |room| room.title.include?(room_title) and room.desc.include?(room_description) and room.paths.include?(room_exits_string) }
    unless room
        desc_regex = /#{Regexp.escape(room_description).gsub(/\\\.(?:\\\.\\\.)?/, '|')}/
        room = Map.list.find { |room| room.title.include?(room_title) and room.paths.include?(room_exits_string) and room.desc.find { |desc| desc =~ desc_regex } }
    end
    LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "The Ship Is Now Moored In #{room.location}. Room Number: #{room.id} #{room.title[0]}")
	if !UserVars.osacrew["gangplank"].nil? 
		Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	end
	UserVars.osacrew["gangplank"] = room.id
	Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	if UserVars.osacrew["othersailors"]
		commander_give_permission
	end
end

def ship_rooms_present
	@ship_rooms_present = Array.new
	@ship_rooms_present.push(@enemy_bow) if @enemy_bow != nil
	@ship_rooms_present.push(@enemy_forward_deck) if @enemy_forward_deck != nil
	@ship_rooms_present.push(@enemy_forward_crows_nest) if @enemy_forward_crows_nest != nil
	@ship_rooms_present.push(@enemy_mid_deck) if @enemy_mid_deck != nil
	@ship_rooms_present.push(@enemy_main_deck) if @enemy_main_deck != nil
	@ship_rooms_present.push(@enemy_crows_nest) if @enemy_crows_nest != nil
	@ship_rooms_present.push(@enemy_helm) if @enemy_helm != nil
	@ship_rooms_present.push(@enemy_cargo_hold) if @enemy_cargo_hold != nil
	@ship_rooms_present.push(@enemy_crew_quarters) if @enemy_crew_quarters != nil
	@ship_rooms_present.push(@enemy_mess_hall) if @enemy_mess_hall != nil
	@ship_rooms_present.push(@enemy_social_room) if @enemy_social_room != nil
	@ship_rooms_present.push(@bow) if @bow != nil
	@ship_rooms_present.push(@forward_deck) if @forward_deck != nil
	@ship_rooms_present.push(@forward_crows_nest) if @forward_crows_nest != nil
	@ship_rooms_present.push(@mid_deck) if @mid_deck != nil
	@ship_rooms_present.push(@main_deck) if @main_deck != nil
	@ship_rooms_present.push(@crows_nest) if @crows_nest != nil
	@ship_rooms_present.push(@helm) if @helm != nil
	@ship_rooms_present.push(@cargo_hold) if @cargo_hold != nil
	@ship_rooms_present.push(@crew_quarters) if @crew_quarters != nil
	@ship_rooms_present.push(@mess_hall) if @mess_hall != nil
	@ship_rooms_present.push(@social_room) if @social_room != nil
end

def determine_enemy_type
	result = dothistimeout "look ocean", 2, /You notice (.*) approaching your position/
	if result.to_s =~ /You notice (.*) approaching your position/
		if $1.include? "ethereal"
			UserVars.osacrew["enemy_type"] = "undead"
		end
		if $1.include? "krolvin"
			UserVars.osacrew["enemy_type"] = "krolvin"
		end
		if $1.include? "dark"
			UserVars.osacrew["enemy_type"] = "pirate"
		end
		if $1.downcase.include? "sloop"
			@enemy_main_deck = 30787
		elsif $1.downcase.include? "brigantine"
			@enemy_main_deck = 30792
		elsif $1.downcase.include? "carrack"
			@enemy_main_deck = 30266
		elsif $1.downcase.include? "galleon"
			@enemy_main_deck = 30798
		elsif $1.downcase.include? "frigate"
			@enemy_main_deck = 30805
		elsif $1.downcase.include? "man o' war"
			@enemy_main_deck = 30778
		end
	end
	Room["#{@main_deck}"].wayto["#{@enemy_main_deck}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
	Room["#{@main_deck}"].timeto["#{@enemy_main_deck}"] = 0.2
	Room["#{@enemy_main_deck}"].wayto["#{@main_deck}"] = StringProc.new("fput \"go gang\"")
	Room["#{@enemy_main_deck}"].timeto["#{@main_deck}"] = 0.2
end

def cleanup_target_routine
	if UserVars.osacrew["enemy_type"] == "pirate"
		fput "target random"
	end
	waitrt?
	waitcastrt?
	pause 1
	wait_until {GameObj.targets.count {|npc| npc.status !~ /dead|gone/ && npc.name !~ /animated| arm|arms|tentacle|tentacles/ } < 1}
	waitrt?
	waitcastrt?
	cleanup_loot_routine
end

def cleanup_loot_routine
	dead_npcs = GameObj.npcs.find_all { |i| i.status == 'dead' && i.type !~ /escort/i }
	if dead_npcs.count > 0
		Script.run "eloot"
		wait_while { running?("eloot") }
	else
		return
	end
end

def cleanup_aoe_routine
	if Spell[1602].known? && Spell[1602].affordable?
		waitrt?
		waitcastrt?
		multifput "prep 1602", "cast"
	else
		fput "search"
		waitrt?
		waitcastrt?
	end
end

def cleanup_pirate_routine
	cleanup_aoe_routine
	result = matchtimeout 5, /slashes with a|lunges forward|flies out of the shadows toward|is revealed from hiding|boldly accosts|leaps out of (his|her) hiding place|swings (.*) at you!|stumbles slightly as (he|she)|springs from hiding|is forced out of hiding/
		if result.to_s =~ /slashes with a|lunges forward|is revealed from hiding|boldly accosts|leaps out of (his|her) hiding place|swings (.*) at you!|stumbles slightly as (he|she)|springs from hiding|is forced out of hiding/
			waitrt?
			waitcastrt?
			cleanup_target_routine
		elsif result.to_s =~ /flies out of the shadows toward/
			cleanup_aoe_routine
			cleanup_target_routine
		else
			return
		end
end

def cleanup_listen_routine
	if !checkroom.include?	("Enemy Ship")
		return
	end
	waitrt?
	waitcastrt?
	result = dothistimeout "listen", 3, /You've cleared out all the enemies aboard the|You listen carefully for any potential threats/
		if result.to_s =~ /You've cleared out all the enemies aboard the/
			waitrt?
			waitcastrt?
			UserVars.osacrew["cleanup_done"] = true
		elsif result.to_s =~ /You listen carefully for any potential threats/
			waitrt?
			waitcastrt?
			return
		end
end

def cleanup_check_for_enemies
	if !checkroom.include?	("Enemy Ship")
		start_script("go2", [@enemy_main_deck])
		wait_while { running?("go2") }
	end
	waitrt?
	waitcastrt?
	result = dothistimeout "listen", 3, /You've cleared out all the enemies aboard the|You listen carefully for any potential threats/
		if result.to_s =~ /You've cleared out all the enemies aboard the/
			waitrt?
			waitcastrt?
			UserVars.osacrew["cleanup_done"] = true
			echo "Cleanup Completed, The Ship Is Now Safe"
			cleanup_finished
		elsif result.to_s =~ /You listen carefully for any potential threats/
			waitrt?
			waitcastrt?
			@ship_rooms_present.each do |n|
				@ship_room = n
				start_script("go2", [@ship_room])
				wait_while { running?("go2") }	
				cleanup_listen_routine
				if UserVars.osacrew["cleanup_done"]
					cleanup_loot_routine
					break
				end
				if UserVars.osacrew["enemy_type"] == "pirate"
					cleanup_pirate_routine
				end
				cleanup_loot_routine
				cleanup_target_routine
				if UserVars.osacrew["cleanup_done"]
					break
				end
			end
			cleanup_check_for_enemies
		end
end

def cleanup_begin_routine
	UserVars.osacrew["cleanup_done"] = false
	UserVars.osacrew["piratehunter"] = false
	determine_enemy_type
	ship_type
	ship_rooms_present
	cleanup_check_for_enemies
end

def cleanup_finished
	if  UserVars.osacrew["cleanup_type"] == nil
		commander_end_routine
	end
	if UserVars.osacrew["cleanup_type"] == "raze"
		if running? "osacombat"
			stop_script "osacombat"
			wait_until {!running? "osacombat"}
		end
		pause 3
		start_script("go2", [@enemy_main_deck])
		wait_while { running?("go2") }
	end
	if UserVars.osacrew["cleanup_type"] == "spawn"
		if running? "osacombat"
			stop_script "osacombat"
			wait_until {!running? "osacombat"}
		end
		pause 3
		start_script("go2", [@enemy_quarters])
		wait_while { running?("go2") }
	end
end

def recieve_bless
result = matchtimeout 15, /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
	if result.to_s =~ /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
		return
	else
		respond ""
		respond "                                  Something May Have Gone Wrong With The Bless                               "
		respond ""
	end
end

def self_bless
	if Spell[1604].known? and Spell[1604].affordable?
		Spell[1604].cast
	end
	waitcastrt?
	if Spell[304].known? and Spell[304].affordable?
		Spell[304].cast
	else
		fput "symbol bless"
	end
end

def get_self_bless
	if (UserVars.osacrew["needbless"]) and (UserVars.osacrew["blesser"])
		if UserVars.osacrew["uachands"].empty? and UserVars.osacrew["uacfeet"].empty?
			fput "gird"
			pause 1
		else
			if !UserVars.osacrew["uachands"].empty?
				fput "remove #{UserVars.osacrew["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacrew["uacfeet"].empty?
				fput "remove #{UserVars.osacrew["uacfeet"]}"
			end
		end
		if !checkleft.nil? && checkright.nil?
			fput "swap"
		end
		if !checkleft.nil? && !checkright.nil?
			self_bless
			waitrt?
			waitcastrt?
			fput "swap"
			self_bless
			waitrt?
			waitcastrt?
			fput "swap"
		else
			self_bless
			waitrt?
			waitcastrt?
		end
		if UserVars.osacrew["uachands"].empty? and UserVars.osacrew["uacfeet"].empty?
			fput "store both"
			return
		else
			if !UserVars.osacrew["uachands"].empty?
				fput "wear #{UserVars.osacrew["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacrew["uacfeet"].empty?
				fput "wear #{UserVars.osacrew["uacfeet"]}"
			end
		end	
	end
end

def get_bless
	if UserVars.osacrew["needbless"]
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Need Blessed Please!")
		waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"#{checkname}/
		if UserVars.osacrew["uachands"].empty? and UserVars.osacrew["uacfeet"].empty?
			fput "gird"
		else
			if !UserVars.osacrew["uachands"].empty?
				fput "remove #{UserVars.osacrew["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacrew["uacfeet"].empty?
				fput "remove #{UserVars.osacrew["uacfeet"]}"
			end
		end
		if !checkleft.nil? && checkright.nil?
			fput "swap"
		end
		if !checkleft.nil? && !checkright.nil?
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Have Two.")
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Am Ready.")
			recieve_bless
			fput "swap"
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "Ok, The Next One Is Ready.")
			recieve_bless
		else
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Have One.")
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Am Ready.")
			recieve_bless
		end
		if UserVars.osacrew["uachands"].empty? and UserVars.osacrew["uacfeet"].empty?
			fput "store both"
		else
			if !UserVars.osacrew["uachands"].empty?
				fput "wear #{UserVars.osacrew["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacrew["uacfeet"].empty?
				fput "wear #{UserVars.osacrew["uacfeet"]}"
			end
		end	
	end
end

def cast_bless
	result = matchtimeout 5, /^\[Private\]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private\]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
		if result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private\]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
			if Spell[1604].known? and Spell[1604].affordable?
				Spell[1604].cast("#{@name}")
			end
			waitcastrt?
			if Spell[304].known? and Spell[304].affordable?
				Spell[304].cast("#{@name}")
			else
				fput "symbol bless #{@name}"
			end
		end
end
		
def give_bless
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{@name}")
	result = matchtimeout 5, /^\[Private\]-GSIV:#{@name}\: \"I Have One.\"|^\[Private\]-GSIV:#{@name}\: \"I Have Two.\"/
		if result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Have One.\"/
			cast_bless
		elsif result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Have Two.\"/
			2.times{cast_bless}
		end
end

def who_needs_blessed
	result = matchtimeout 1, /^\[Private\]-GSIV:(.*)\: \"I Need Blessed Please!\"/
	if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Need Blessed Please!\"/
		@blessname.push($1)
		who_needs_blessed
	end
end

def begin_bless
	if (Spell[304].known? or Spell[9802].known?) && UserVars.osacrew["givebless"] == true
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Will Be Providing All Crew Blessings!")
		@blessname = Array.new
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Does Anyone Need A Bless?")
		who_needs_blessed
		@blessname.each do |n|
			@name = n
			give_bless
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "The Crew Has Been Properly Blessed!")
	else
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Can Anyone Bless?")
		result = matchtimeout 3, /^\[Private\]-GSIV:(.*)\: \"I Can Captain!\"/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Can Captain!\"/
			UserVars.osacrew["blesser"] = $1
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{UserVars.osacrew["blesser"]}, Will You Please Bless The Crew?")
			waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"Does Anyone Need A Bless\?\"/
			get_bless
			waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"The Crew Has Been Properly Blessed Captain!"/
		else
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "We Do Not Have Anyone Present Who Can Bless The Crew, We Will Continue Without!")
		end
	end		
end

def lower_sail
	result = dothistimeout "lower sail", 3, /you slowly lower the (.*) sail until it is at half mast|you slowly lower the (.*) sail until it is fully open|far as it can go!/
        waitrt?
	if result.to_s =~ /...wait/
		waitrt?
		lower_sail
	elsif result.to_s =~ /you slowly lower the (.*) sail until it is at half mast/
		waitrt?
		lower_sail
	elsif result.to_s =~ /you slowly lower the (.*) sail until it is fully open/
		@lowered_sail = true
		waitrt?
	elsif result.to_s =~ /far as it can go!/
		end
end

def raise_anchor
	result = dothistimeout "push capstan", 3, /begin to push|one final push|anchor is already up/
        waitrt?
	if result.to_s =~ /...wait/
		waitrt?
		raise_anchor
	elsif result.to_s =~ /begin to push/
		waitrt?
		raise_anchor
	elsif result.to_s =~ /one final push/
		@anchor_aweigh = true
		waitrt?
	elsif result.to_s =~ /anchor is already up/
		return
	end
end

def one_mast
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Main Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Main Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
end

def two_masts
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def three_masts
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Mizzen Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def commander_task_complete
	result = matchtimeout 600, /^\[Private\]-GSIV:(.*)\: \"Task Complete\"$/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"Task Complete\"$/
			@taskcount.push($1)
		end
end

def commander_crew_request
		result = matchtimeout 5, /^\[Private\]-GSIV:(.*)\: \"Crewman (.*), Requesting Permission To Come Aboard!"$/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"Crewman (.*), Requesting Permission To Come Aboard!"$/
			@commander_request.push($2)
			commander_crew_request
		else
			respond "
			No Remaining Crew Requests, Moving On!
			"
		end
end

def format_number(number)
  num_groups = number.to_s.chars.to_a.reverse.each_slice(3)
  num_groups.map(&:join).join(',').reverse
end

def end_of_encounter
@endbalancewithcommas = format_number(@endbalance)
respond ""
respond ""
respond ""
respond ""
_respond "\<preset id=\"thought\"\>" + "                             --------------------------------------------------------------------------------" + "\<\/preset\>"
respond ""
_respond "\<preset id=\"speech\"\>" + "                                      --* Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} *--" + "\<\/preset\>"
respond ""                            
_respond "\<preset id=\"speech\"\>" + "                                          Time To Board Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@boardingtime}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Time To Clear Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@clearingtime}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Total Enemies Defeated This Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@enemy_count.gsub(/"|\[|\]/, '')}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Total Boxes Found This Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@amount_of_boxes}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Total Silver Made This Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@endbalancewithcommas}" + "\<\/preset\>"
respond ""
_respond "\<preset id=\"thought\"\>" + "                             --------------------------------------------------------------------------------" + "\<\/preset\>"
respond ""
respond ""
respond ""
respond ""
LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join}| Time To Board Vessel: #{@boardingtime}| Time To Clear Vessel: #{@clearingtime} | Total Enemies Defeated This Vessel: #{@enemy_count.gsub(/"|\[|\]/, '')} | Total Boxes Found This Vessel: #{@amount_of_boxes} | Total Silver Made This Vessel: #{@endbalancewithcommas}")
end

def enemy_counter
	result = dothistimeout "listen", 10, /\[Enemies Left\: (.*)\]/
		if result.to_s =~ /Enemies Left: (.*)\]/
			@enemy_count = $1
		end
end

def commander_check_crew
	if @crewsize.nil?
		respond ""
		respond "                       You Must First Perform A Muster                                                               "
		respond ""
		 
	end
	@crew_check = (@crew_check + 1)
	if (@crew_check + @crewsize.count) > UserVars.osacrew["commander_max_crew"]
		LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_request }, "Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!")
	else
		LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_request }, "Permission Granted, Come Aboard!")
	end
end

def commander_final_approach
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	move "east"
	waitfor /collide against your/
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	fput "push gang"
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	move "go gangplank"
	@helmsman_end_time = Time.now.to_f
	@boardingtime = ((@helmsman_end_time - @helmsman_start_time) / 60.00).as_time
	return
end

def commander_final_approach_2
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	move "east"
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	fput "push gang"
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	move "go gangplank"
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	@helmsman_end_time = Time.now.to_f
	@boardingtime = ((@helmsman_end_time - @helmsman_start_time) / 60.00).as_time
	return
end

def commander_navigator
	wait_while { running?("ecure") }
	result = dothistimeout "turn wheel ship", 120, /You will be upon the|of boarding range!|The sides of the (.*) collide against your (.*)!|in boarding range!|ways out!|sailing closer!|...wait|Tenebrous Cauldron.  Victory is yours!/
	if result.to_s =~ /of boarding range!|ways out!|sailing closer!/
		commander_navigator
	elsif result.to_s =~ /...wait/
		waitrt?
		waitcastrt?
		commander_navigator
	elsif result.to_s =~ /Tenebrous Cauldron.  Victory is yours!/
			commander_sunk_ship
	elsif result.to_s =~ /in boarding range!/
		if @warning == true
			commander_final_approach
		end
		waitrt?
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Thirty second warning, drop what yer doing and prepare for battle. Here they come!")
		fput "yell Thirty second warning, drop what yer doing and prepare for battle. Here they come!"
		@warning = true
		fput "group open"
		fput "turn wheel ship"
		waitrt?
		commander_final_approach
	elsif result.to_s =~ /The sides of the (.*) collide against your (.*)!/
		commander_final_approach_2
	elsif result.to_s =~ /You will be upon the/
		commander_final_approach
	else
		commander_navigator
	end
end

def commander_helmsman
	waitrt?	
	wait_until {!checkstunned}
	wait_until {!checkwebbed}
	wait_until {!checkbound}
	wait_while { running?("ecure") }
	result = dothistimeout "turn wheel ship", 600, /The sides of the (.*) collide against your (.*)!|in boarding range!|Tenebrous Cauldron.  Victory is yours!/
		if result.to_s =~ /in boarding range!/
			commander_final_approach
		elsif result.to_s =~ /Tenebrous Cauldron.  Victory is yours!/
			commander_sunk_ship
		elsif result.to_s =~ /The sides of the (.*) collide against your (.*)!/
			commander_final_approach_2
		end
end

def commander_check_role
	if UserVars.osacrew["helmsman_enabled"]
		commander_navigator
	else
		commander_helmsman
	end
end

def commander_check_balance
	balance_line = dothistimeout "bank acc", 10, /Total:/
	@bankbalance = balance_line.match(/([0-9,]+)/)[1].to_s.delete(',').to_i
	if @bankbalance == 0
		commander_check_balance
	end
end

def commander_determine_group_members
	status_tags
	toggle_upstream
	$everyone_in_my_group = Array.new
	$everyone_in_my_group.clear
	res = dothistimeout 'group',3,/^You are/
	grouped = res.scan(/noun="([^"]+)"/).flatten
	grouped.each{|member| $everyone_in_my_group.push(member)}
end

def commander_apply_support
	@supportlist.each do |n, t|
		@support_rec = n
		@support_type = t
		if @support_type == "Blessing"
			pause 5
			waitrt?
			fput "armor blessing #{@support_rec}"
		elsif @support_type == "Reinforcement"
			pause 5
			waitrt?
			fput "armor reinforement #{@support_rec}"
		elsif @support_type == "Support"
			pause 5
			waitrt?
			fput "armor support #{@support_rec}"
		elsif @support_type == "Casting"
			pause 5
			waitrt?
			fput "armor casting #{@support_rec}"
		elsif @support_type == "Evasion" 
			pause 5
			waitrt?
			fput "armor evasion #{@support_rec}"
		elsif @support_type == "Fluidity"
			pause 5
			waitrt?
			fput "armor fluidity #{@support_rec}"
		elsif @support_type == "Stealth"
			pause 5
			waitrt?
			fput "armor stealth #{@support_rec}"
		end
	end
end

def need_mana
	while running?("ewaggle")
		if percentmana < 15
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Mana!")
			wait_until {percentmana > 15}
		end
	end
end

def commander_spell_up
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Does Anyone Need Armor Adjustments?")
	pause 1.5
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Spells")
	if UserVars.osacrew["selfspellup"] == true
			start_script("ewaggle", ['--start-at=120', '--stop-at=120', '--stop-before=180', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on'])
	end
	@taskcount = Array.new
	@taskcount.clear
	Vars.crewsize.to_i.times { commander_task_complete }
	wait_until { !running?("ewaggle") }
	if UserVars.osacrew["groupspellup"] == true
		commander_determine_group_members
		$everyone_in_my_group.delete(checkname)
		$everyone_in_my_group.each do |n|
			$pc = n
			start_script("ewaggle", ['--start-at=120', '--stop-at=120', '--stop-before=180', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on', $pc])
			need_mana
		end
	end
	if UserVars.osacrew["armor_specs"] == true
		commander_apply_support
		@supportlist.clear
	end
	if !UserVars.osacrew["my_armor_spec"].empty?
		pause 5
		fput "armor #{UserVars.osacrew["my_armor_spec"]}"
	end
	pause 6
	fput "group open"
	GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Spell Up Completed")
end

def commander_take_muster
	muster = matchtimeout 6, /Crewman (.*) Reporting For Duty Captain/
	if muster.to_s =~ /Crewman (.*) Reporting For Duty Captain/
        crewmate = $1
        @crewsize.push(crewmate) if !@crewsize.include?(crewmate)
		commander_take_muster
	end
end

def commander_call_muster
	if @crewsize.count != checkpcs.count
		@crewsize = Array.new
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Quarters! All Hands To Quarters For Muster, Instruction and Inspection!")
		commander_take_muster
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "All Present And Accounted For! We Have #{@crewsize.count} Crew Onboard For A Total Compliment of #{@crewsize.count + 1} Personnel!")
		do_client ";var set crewsize=#{@crewsize.count}"
		pause 3
	else
		echo " Crewsize Matches All Crew Present, Skipping Muster! "
	end
end

def commander_begin_balance
	commander_check_balance
	@beginbalance = "#{@bankbalance}"
end

def commander_after_balance
	commander_check_balance
	@afterbalance = "#{@bankbalance}"
end

def commander_left_hand
	if checkleft == nil
		return
	else
		if (checkleft == "box") or (checkleft == "strongbox") or (checkleft == "coffer") or (checkleft == "trunk") or (checkleft == "chest")
			fput "drop left"
		else 
			multifput "store left", "stow left"
		end
	end
end

def commander_right_hand
	if checkright == nil
		return
	else
		if (checkright == "box") or (checkright == "strongbox") or (checkright == "coffer") or (checkright == "trunk") or (checkright == "chest")
			fput "drop right"
		else 
			multifput "store right", "stow right"
		end
	end
end

def give_boxes_to_security_officer
	wait_until { checkpcs.include? (UserVars.osacrew["securityofficer"]) }
	pause 1
	ELoot.find_boxes.each do | box_in_inventory |
		multifput "get ##{box_in_inventory.id}", "give ##{box_in_inventory.id} to #{UserVars.osacrew["securityofficer"]}"
		waitfor /#{UserVars.osacrew["securityofficer"]} offers you (.*).  Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds/
		multifput "accept", "stow ##{box_in_inventory.id}"
	end
	LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["securityofficer"] }, "Thank You Crewman #{UserVars.osacrew["securityofficer"]}")
end

def commander_yes_boxes
	ship_type
	fput "loot room"
	pause 0.5
	commander_right_hand
	commander_left_hand
	if (UserVars.osacrew["use_security_officer"]) && (@ship_map.to_s.include? UserVars.osacrew["security_officer_location"])
		nil
	else
		commander_go_gangplank
	end
	pause 0.5
	if UserVars.osacrew["use_security_officer"]
		start_script("go2", [UserVars.osacrew["security_officer_location"]])
		wait_while { running?("go2") }
		start_script("eloot", ["start"])
		wait_while { running?("eloot") }
		give_boxes_to_security_officer
		if @ship_map.to_s.include? UserVars.osacrew["security_officer_location"]
			start_script("go2", [@main_deck])
			wait_while { running?("go2") }
			commander_go_gangplank
		end	
		start_script("eloot", ["sell"])
		wait_while { running?("eloot") }
		start_script("go2", ["myship"])
		wait_while { running?("go2") }
	else
		start_script("eloot", ["pool", "deposit"])
		wait_while { running?("eloot") }
	end
	pause 0.5
	move "go gangplank"
end
	
def commander_have_boxes
	result = dothistimeout "loot room", 1, /There is no loot/
	if result.to_s =~ /There is no loot/
		commander_go_gangplank
		waitfor /You make your way across the/
		if !UserVars.osacrew["gangplank"].nil? 
			Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
		end
		UserVars.osacrew["gangplank"] = Room.current.id
		Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
		return
	else
		commander_yes_boxes
		commander_have_boxes	
	end
end

def commander_stowaways
	if UserVars.osacrew["stowaways"]
	fput "whisper group Please let me know when you're all set"
		echo "
		--------------------------------------------~~~~~~|       Waiting For Party Members           |~~~~~~~~-------------------------------------------------------
                                                  		|                                           |
		--------------------------------------------~~~~~~|  Please Type \"\Yes\"\ When Ready To Continue |~~~~~~~~-------------------------------------------------------
		"
		waitfor "A good positive attitude never hurts."
	end
end

def commander_give_permission
	@commander_request = Array.new
	@crew_check = 0
	commander_crew_request
	if !@commander_request.nil?
		@commander_request.each do |n|
			@crew_request = n
			commander_check_crew
		end
		@commander_request.clear
	end
end

def commander_check_task
result = dothistimeout "osa task", 1, /You do not currently have a task from the Sea Hag's Roost|You should return to the Sea Hag's Roost to report your success|Abandons your current task/
    if result.to_s =~ /You do not currently have a task from the Sea Hag's Roost/
		@turnin = false
			fput "take board"
			pause 0.5
			return
	elsif result.to_s =~ /You should return to the Sea Hag's Roost to report your success/
		@turnin = true
		if saturated?
			if UserVars.osacrew["uselte"]
				fput "boost long"
			end
			wait_until {!saturated?}
		end
		fput "turn board"
		pause 0.5
		fput "take board"
		pause 0.5
		return
	elsif result.to_s =~ /Abandons your current task/
		return
	else
		return
    end
end

def commander_sell_loot
	commander_begin_balance
	commander_have_boxes
	ELoot.data.settings[:loot_types].push("gem", "skin", "alchemy", "armor", "clothing", "collectible", "jewelry", "uncommon", "scroll", "reagent", "weapon", "wand", "valuable", "lockpick", "magic")
	start_script("eloot", ['sell'])
	wait_while { running?("eloot") }
	if Vars.crewsize != "0"
		move "go gangplank"
		waitfor /You make your way across the/
		multimove "west","go wooden door"
		pause 1
	end
	commander_crew_share
end

def commander_crew_share
	if Vars.crewsize != "0"
		GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
		commander_stowaways
		multimove "out","east","go gangplank"
	end
	start_script("go2", ['handler'])
	wait_while { running?("go2") }
	fput "stow all"
	commander_start_handler
	fput "open my #{Vars.gemsack}"
	do_client ";foreach gem in #{Vars.lootsack};get item;put item in #{Vars.gemsack}"
	wait_while { running?("foreach") }
	#fput "close my #{Vars.gemsack}"
	if Room.current.location == "Kraken's Fall"
		start_script("go2", ['28950'])
		wait_while { running?("go2") }
	end
	commander_check_task
	if Vars.crewsize != "0"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Task Time!")
		@taskcount = Array.new
		@taskcount.clear
		Vars.crewsize.to_i.times { commander_task_complete }
		commander_stowaways
	end
	start_script("go2", ['bank'])
	wait_while { running?("go2") }
	fput "depo all"
	if (UserVars.osacrew["othersailors"] == true) or (UserVars.osacrew["stowaways"] == true)
		if UserVars.osacrew["fwi"]
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			start_script("go2", ['bank'])
			wait_while { running?("go2") }
			fput "depo all"
			commander_after_balance
			@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
			if @endbalance > 0
				fput "withdraw #{@endbalance} silver"
				pause 0.5
			end
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			fput "share all"
			pause 0.5
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			start_script("go2", ['bank'])
			wait_while { running?("go2") }
			fput "depo all"
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			commander_stowaways
		end
		if !UserVars.osacrew["fwi"]
			fput "depo all"
			commander_after_balance
			@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
			if @endbalance > 0
				fput "withdraw #{@endbalance} silver"
				pause 0.5
			end
			fput "share all"
			pause 0.5
			fput "depo all"
			commander_stowaways
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Deposit")
	else
		fput "depo all"
		commander_after_balance
		@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
	end
	pause 2
	start_script("go2", ["myship"])
	wait_while { running?("go2") }
	multimove "go gangplank", "west", "go wooden door"
	do_client ";eloot load"
	end_of_encounter
	if Vars.crewsize == "0"
		do_client ";force osacrew repairs"
	end
	return
end

def commander_go_gangplank
	result = dothistimeout "push gangplank", 1, /You cannot deploy your|As you approach the|You give the/
		if result.to_s =~ /You cannot deploy your/
			pause 5
			commander_go_gangplank
		elsif result.to_s =~ /As you approach the/
			move "go gangplank"
			return
		elsif result.to_s =~ /You give the/
			move "go gangplank"
			return
		end
end

def commander_after_raze
	waitrt?
	multimove "go gangplank","west"
	waitfor /The (.*) rapidly descends beneath the cold, dark waters./
	if UserVars.osacrew["netlauncher"]
		check_for_crate
	end
	if Room.current.id != @helm
		start_script("go2", [@helm])
		wait_while { running?("go2") }
	end
	fput "turn wheel port"
	waitfor /The (.*) drifts steadily toward the (.*) port/
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Moored!")
	waitrt?
	fput "yell Moored!"
	if Room.current.id != @cargo_hold
		start_script("go2", [@cargo_hold])
		wait_while { running?("go2") }
	end
	fput "take crate"
	multifput "put my crate in wood", "put my crate in balls"
	pause 1
	if (checkleft == "crate") or (checkright == "crate")
		fput "drop crate"
	end
	move "up"
	if Vars.crewsize != "0"
		pause 0.5
		move "west"
		pause 0.5
		move "go wooden door"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Silvers")
		pause 1.5
		multifput "disband","group open"
		pause 0.5
	end
	commander_broadcast_location
	commander_sell_loot
end

def commander_raze_it
	result = dothistimeout "raze", 3, /You grab a nearby|Are you sure you|You cannot raze/
	if result.to_s =~ /You grab a nearby/
		commander_after_raze
	elsif result.to_s =~ /Are you sure you/
		commander_raze_it
	elsif result.to_s =~ /You cannot raze/
		fput "stow all"
		start_script "osacombat"
		pause 3
		UserVars.osacrew["cleanup_type"] = "raze"
		cleanup_begin_routine
		UserVars.osacrew["cleanup_type"] = nil
		commander_raze_it
	else
		commander_raze_it
	end
end

def commander_wait_yell
	fput "group open"
	multimove "out","east"
	@amount_of_boxes = GameObj.loot.count {|item| item.type =~ /box/}
	do_client ";foreach box on ground;drag item;go gangplank"
	wait_while { running?("foreach") }
	fput "loot room"
	@taskcount = Array.new
	@taskcount.clear
	if Vars.crewsize != "0"
		multimove "go gangplank", "west", "go door"
		Vars.crewsize.to_i.times { commander_task_complete }
		commander_stowaways
		GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
		multimove "out", "east", "go gangplank"
	end
	commander_raze_it
end

def commander_hands_full
	multimove "out", "east"
	commander_left_hand
	commander_right_hand
	do_client ";foreach box in #{Vars.lootsack};move to ground"
	wait_while { running?("foreach") }
	multimove "west", "go wooden door"
end
	
def commander_get_treasure
	result = dothistimeout "search pile", 5, /You search around in the|Are you sure you would|You take a moment to|How do you plan|You cannot SEARCH/
		if result.to_s =~ /You search around in the|How do you plan/
			waitrt?
			if (checkleft == "crate") or (checkright == "crate")
				fput "stow all"
				commander_wait_yell
			else
				commander_hands_full
				commander_get_treasure
			end
		elsif result.to_s =~ /Are you sure you would/
			commander_get_treasure
		elsif result.to_s =~ /You take a moment to/
			commander_wait_yell
		elsif result.to_s =~ /You cannot SEARCH/
			fput "stow all"
			start_script "osacombat"
			pause 3
			UserVars.osacrew["cleanup_type"] = "spawn"
			cleanup_begin_routine
			UserVars.osacrew["cleanup_type"] = nil
			start_script("go2", [@enemy_quarters])
			wait_while { running?("go2") }
			commander_get_treasure
		else
			ship_type
			start_script("go2", [@enemy_quarters])
			wait_while { running?("go2") }
			commander_get_treasure
		end
end

def commander_prep_it
		move "down"
		fput "drag crate"
		move "up"
		waitrt?
		multifput "go gangplank", "go gangplank", "drag crate"
		waitrt?
		move "down"
		waitrt?
		fput "drag stop"
		if Room.current.id != @enemy_quarters
			start_script("go2", [@enemy_quarters])
			wait_while { running?("go2") }
		end
		fput "stow set #{Vars.lootsack}"
		commander_get_treasure
end

def commander_give_coins
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Silvers")
	pause 1
	fput "depo all"
end

def exp_check
	@capped = false
	@resource = nil
	@resource_total = nil
	@resource_weekly = nil
	exp = Lich::Util.quiet_command("exp", /Level:/, end_pattern = /You mind is (.*)\./)
	if exp.to_s =~ /Exp to next TP: ([0-9,]+)/
		@capped = true
		@exptntp = $1
	elsif exp.to_s =~ /Exp until lvl: ([0-9,]+)/
		@capped = false
	end
	if exp.to_s =~ /PTPs\/MTPs: ([0-9,]+)\/([0-9,]+)/
		@mtrainingpoints = $2
		@ptrainingpoints = $1
	end
	resource = Lich::Util.quiet_command("resource", /Health:/, end_pattern = /(Grit|Essence|Motes of Tranquility|Devotion|Lore Knowledge|Nature\'s Grace|Necrotic Energy): ([0-9,]+)/)
	if resource.to_s =~ /(.*): ([0-9,]+)\/50,000/
		if Stats.prof == "Warrior"
			@resource = "Grit"
		elsif Stats.prof == "Wizard"
			@resource = "Essence"
		elsif Stats.prof == "Monk"
			@resource = "Motes of Tranquility"
		elsif Stats.prof == "Cleric"
			@resource = "Devotion"
		elsif Stats.prof == "Bard"
			@resource = "Lore Knowledge"
		elsif Stats.prof == "Ranger"
			@resource = "Nature's Grace"
		elsif Stats.prof == "Sorcerer"
			@resource = "Necrotic Energy"
		end
		@resource_weekly = $2
	end
	if resource.to_s =~ /(.*) ([0-9,]+)\/200,000/
		@resource_total = $2
	end
	if !@capped && !@resource.nil?
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}")
	end
	if !@capped && @resource.nil?
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}")
	end
	if @capped && !@resource.nil?
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}")
	end
	if @capped && @resource.nil?
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}")
	end
end

def commander_solo_get_underway
	ship_type
	ph_off
	waitrt?
	do_client ";force osacrew underway"
	waitfor /You yell, "Underway!"/
	if Room.current.id != @captains_quarters
		start_script("go2", [@captains_quarters])
		wait_while { running?("go2") }
	end
	if percentmana <= 84
		respond ""
		respond "          -----------------------------------------------------"
		respond "          |                Waiting For Mana                   |"
		respond "          -----------------------------------------------------"
		respond ""
		wait_until {percentmana >= 85}
	end
	do_client ";foreach food, junk in #{Vars.lootsack};move to bucket"
	wait_while { running?("foreach") }
	pause 0.5
	ph_on
end

def commander_get_underway
	ship_type
	ph_off
	waitrt?
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "All Hands Make Ready To Get Underway!")
	fput "yell All Hands Make Preparations For Getting Underway!"
	pause 2
	waitrt?
	waitcastrt?
	echo "Raising Anchor"
	if Room.current.id != @helm
		start_script("go2", [@helm])
		wait_while { running?("go2") }
	end
	raise_anchor
	waitrt?
	if @anchor_aweigh
		fput "yell Anchor's Aweigh!"
		@anchor_aweigh = false
	end
	move "go wooden door"
	@taskcount = Array.new
	@taskcount.clear
	Vars.crewsize.to_i.times { commander_task_complete }
	if percentmana <= 84
		respond ""
		respond "          -----------------------------------------------------"
		respond "          |                Waiting For Mana                   |"
		respond "          -----------------------------------------------------"
		respond ""
		wait_until {percentmana >= 85}
	end
	do_client ";foreach food, junk in #{Vars.lootsack};move to bucket"
	wait_while { running?("foreach") }
	pause 0.5
	GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	multifput "depart","depart"
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Underway!")
	fput "yell Underway!"
	ph_on
end

def commander_ship_info
	result = matchtimeout 3, /Ship Name: (.*)|Gangplank Material: (.*)|Captain\'s Chambers Room Style:/
		if result.to_s =~ /Ship Name: (.*)/
			UserVars.osacrew["commander_ship_name"] = $1
			commander_ship_info
		elsif result.to_s =~ /Gangplank Material: (.*)/
			if $1 == "Not Set"
				UserVars.osacrew["commander_gangplank"] = "slender gangplank"
			else
				UserVars.osacrew["commander_gangplank"] = "#{$1} gangplank"
			end
			commander_ship_info
		elsif result.to_s =~ /Captain\'s Chambers Room Style:/
			nil
		end
	if (UserVars.osacrew["helmsman_enabled"] == nil) or (UserVars.osacrew["helmsman_enabled"] == false)
		result = dothistimeout "osa role", 3, /Current Role: (.*)/
			if result.to_s =~ /Current Role: (.*)/
				@role = $1
				wait_until {get =~ /#{@role}/}
				wait_until {get =~ /Rank: (.*)/}
				@rank = $1
			end
			if (@role == ("Navigator") and @rank == ("Veteran")) or (@role == ("Navigator") and @rank == ("Master"))
				UserVars.osacrew["helmsman_enabled"] = true
			else
				UserVars.osacrew["helmsman_enabled"] = false
			end
	end
end

def commander_board_ship
	if !UserVars.osacrew["gangplank"].nil? 
		Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	end
	UserVars.osacrew["gangplank"] = Room.current.id
	Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	if UserVars.osacrew["commander_ship_type"] == "man o' war"
		move "go man"
	else
		move "go #{UserVars.osacrew["commander_ship_type"]}"
	end
	ship_type
	start_script("go2", [@crows_nest])
	wait_while { running?("go2") }
	fput "ship flag black"
	if UserVars.osacrew["othersailors"]
		commander_call_muster
	end
	if Vars.crewsize != "0"
		commander_get_underway
	else
		commander_solo_get_underway
	end
	waitrt?
	return
end

def commander_check_handler
	fput "ask #{checknpcs.last} about ret #{UserVars.osacrew["commander_ship_type"]}"
	result = dothistimeout "ask #{checknpcs.last} about ret #{UserVars.osacrew["commander_ship_type"]}", 2, /Looks like we have some space around the (.*)./
		if result.to_s =~ /Looks like we have some space around the (.*)./
			@shiplocation = $1
		if @shiplocation.include? "Thrak"
			@pier_map = [29738, 29739, 29740, 29741, 29742] 
		elsif @shiplocation.include? "Helga"
			@pier_map = [30228, 30232, 30233, 30234, 30235]
		elsif @shiplocation.include? "Beldrin"
			@pier_map = [30223, 30227, 30229, 30230, 30231]
		elsif @shiplocation.include? "Dakris"
			@pier_map = [30221, 30222, 30224, 30225, 30226]
		elsif @shiplocation.include? "Larton"
			@pier_map = [30220, 30219, 30218, 30217, 30216]
		elsif @shiplocation.include? "Green"
			@pier_map = [30192, 30191, 30190, 30189, 30188]
		elsif @shiplocation.include? "White"
			@pier_map = [30193, 30209, 30210, 30211, 30212]
		elsif @shiplocation.include? "Blue"
			@pier_map = [30194, 30205, 30206, 30207, 30208]
		elsif @shiplocation.include? "Gold"
			@pier_map = [30195, 30201, 30202, 30203, 30204]
		elsif @shiplocation.include? "Crimson"
			@pier_map = [30196, 30197, 30198, 30199, 30200]
		elsif @shiplocation.include? "Asterfire"
			@pier_map = [30241, 30250, 30251, 30252, 30253]
		elsif @shiplocation.include? "Geode"
			@pier_map = [30242, 30249, 30254, 30255, 30256]
		elsif @shiplocation.include? "Dreamstone"
			@pier_map = [30243, 30248, 30257, 30258, 30259]
		elsif @shiplocation.include? "Dragonfire"
			@pier_map = [30244, 30247, 30260, 30261, 30262]
		elsif @shiplocation.include? "Sunstone"
			@pier_map = [30245, 30246, 30263, 302564, 30265]
		elsif @shiplocation.include? "Dovesnail"
			@pier_map = [29503, 29504, 29505, 29506, 29507]
		elsif @shiplocation.include? "Wentletrap"
			@pier_map = [29508, 29509, 29510, 29511, 29512]
		elsif @shiplocation.include? "Moonsnail"
			@pier_map = [29513, 29514, 29515, 29516, 29517]
		elsif @shiplocation.include? "Sandsilver"
			@pier_map = [29518, 29519, 29520, 29521, 29522]
		elsif @shiplocation.include? "Hornsnail"
			@pier_map = [29523, 29524, 29525, 29526, 29527]
		elsif @shiplocation.include? "First"
			@pier_map = [29033, 29034, 29035, 29036, 29037]
		elsif @shiplocation.include? "Second"
			@pier_map = [29032, 29044, 29045, 29046, 29150]
		elsif @shiplocation.include? "Third"
			@pier_map = [29043, 29151, 29152, 29153, 29154]
		elsif @shiplocation.include? "Fourth"
			@pier_map = [29155, 29156, 29157, 29156, 29157]
		elsif @shiplocation.include? "Fifth"
			@pier_map = [29060, 29061, 29062, 29063, 29064]
		elsif @shiplocation.include? "Broken Pier"
			@pier_map = [32350]
		elsif @shiplocation.include? "Greying Pier"
			@pier_map = [32347]	
		elsif @shiplocation.include? "Old Pier"
			@pier_map = [32356]
		elsif @shiplocation.include? "Decaying Pier"
			@pier_map = [32355]	
		elsif @shiplocation.include? "Crumbling Pier"
			@pier_map = [32360]
		elsif @shiplocation.include? "Cracked Pier"
			@pier_map = [32359]
		elsif @shiplocation.include? "Weathered Pier"
			@pier_map = [32358]	
		elsif @shiplocation.include? "Port Pier"
			@pier_map = [32357]	
		elsif @shiplocation.include? "Starboard Pier"
			@pier_map = [32351]
		elsif @shiplocation.include? "Salty Pier"
			@pier_map = [32352]
		elsif @shiplocation.include? "Rimy Pier"
			@pier_map = [32353]
		elsif @shiplocation.include? "Gelid Pier"
			@pier_map = [32348]
		elsif @shiplocation.include? "Snowy Pier"
			@pier_map = [32349]
		elsif @shiplocation.include? "Gleaming Pier"
			@pier_map = [32370]
		elsif @shiplocation.include? "Shivering Pier"
			@pier_map = [32371]
		elsif @shiplocation.include? "Cold Pier"
			@pier_map = [32372]
		elsif @shiplocation.include? "Crab Pier"
			@pier_map = [32340]	
		elsif @shiplocation.include? "Albatross Pier"
			@pier_map = [32346]
		elsif @shiplocation.include? "Barrow Pier"
			@pier_map = [32345]
		elsif @shiplocation.include? "Highland Pier"
			@pier_map = [32344]
		elsif @shiplocation.include? "Moon Pier"
			@pier_map = [32343]
		elsif @shiplocation.include? "Shadowed Pier"
			@pier_map = [32342]
		elsif @shiplocation.include? "Crawling Pier"
			@pier_map = [32341]
		elsif @shiplocation.include? "Briar Pier"
			@pier_map = [32354]
		elsif @shiplocation.include? "Docks, Shoreline"
			@pier_map = [32339]
		elsif @shiplocation.include? "Soaring Wyvern"
			@pier_map = [31502, 31517, 31516, 31503, 31518]
		elsif @shiplocation.include? "Rampant Wyvern"
			@pier_map = [31500, 31501, 31515, 31514, 31513]
		elsif @shiplocation.include? "Roaring Wyvern"
			@pier_map = [31498, 31499, 31508, 31507, 31506]
		elsif @shiplocation.include? "Resting Wyvern"
			@pier_map = [31496, 31497, 31510, 31509, 31505]
		elsif @shiplocation.include? "Staring Wyvern"
			@pier_map = [31494, 31495, 31512, 31511, 31504]
		elsif @shiplocation.include? "Pier 1"
			@pier_map = [32908, 32909, 32910, 32911, 32912]
		elsif @shiplocation.include? "Pier 2"
			@pier_map = [32907, 32913, 32914, 32915, 32916]
		elsif @shiplocation.include? "Pier 3"
			@pier_map = [32906, 32917, 32918, 32919, 32920]
		elsif @shiplocation.include? "Pier 4"
			@pier_map = [32905, 32921, 32922, 32923, 32924]
		elsif @shiplocation.include? "Pier 5"
			@pier_map = [32504, 32925, 32926, 32927, 32928]
		elsif @shiplocation.include? "Acistira Pier"
			@pier_map = [33831, 33832, 33833, 33834, 33835]
		elsif @shiplocation.include? "Naefira Pier"
			@pier_map = [33836, 33837, 33838, 33839, 33840]
		elsif @shiplocation.include? "Taerethil Pier"
			@pier_map = [33841, 33842, 33843, 33844, 33845]
		elsif @shiplocation.include? "Resaeun Pier"
			@pier_map = [33846, 33847, 33848, 33849, 33850]
		elsif @shiplocation.include? "Aelerine Pier"
			@pier_map = [33851, 33852, 33853, 33854, 33855]
		end
	end
end

def commander_crew_menu
	if UserVars.osacrew["roster"].empty?
		UserVars.osacrew["roster"] = Array.new
	end
	if variable[2].nil?
		respond "
		Please Select A Valid Option: 
			
			Login: Logs In All Of Your Personal Crew
			
			Add: Adds A Crew Members Name To Your Personal Crew
			
			Delete: Deletes A Crew Member From Your Personal Crew
			
			Clear: Clears Your Personal Crew
			
			Display: Displays Your Personal Crew
		"
		return
	end
	if variable[2].downcase == "login"
		respond "
			Login Sequence Initiated...
			"
		start_script("elogin", ["set", "realm", "prime"])
		wait_while { running?("elogin") }
		pause 0.5
		UserVars.osacrew["roster"].each do |n|
			echo "Logging In #{n}"
			start_script("elogin", ["#{n}"])
			wait_while { running?("elogin") }
			pause 6.5
		end
		respond "
			Login Complete Captain!
			"
	end
	if variable[2].downcase == "add"
		respond "
				Saving #{variable[3]} To Your Personal Crew!
				"
		UserVars.osacrew["roster"].push(variable[3])
		UserVars.osacrew["roster"] = UserVars.osacrew["roster"].uniq
		return
	end
	if variable[2].downcase == "delete"
		respond "
				Removing #{variable[3]} From Your Personal Crew!
				"
		UserVars.osacrew["roster"].delete(variable[3])
		UserVars.osacrew["roster"] = UserVars.osacrew["roster"].uniq
		return
	end
	if variable[2].downcase == "clear"
		respond "
				Clearing Your Personal Crew!
				"
		UserVars.osacrew["roster"].clear
		return
	end
	if variable[2].downcase == "display"
		respond "
				Your Personal Crew Includes:
				"
				puts UserVars.osacrew["roster"]
		respond ""
		return
	end
end

def commander_muster_up
	if @crewsize.nil?
		respond ""
		respond "      You Have Not Built A Ships Roster Yet!"
		respond "       Please Call A Muster Then Try Again"
		respond ""
		return
	end
	if (checkpcs - @crewsize).count > 0
		respond ""
		respond "      The Following People Present Are Not Part Of The Crew:"
		respond ""
		puts checkpcs - @crewsize
		respond ""
	else
		respond ""
		respond "      All Present Adventurers Are Members Of The Crew!"
		respond ""
	end
end

def commander_roger_up
	if @crewsize.nil?
		respond ""
		respond "      You Have Not Built A Ships Roster Yet!"
		respond "       Please Call A Muster Then Try Again"
		respond ""
		return
	end
	if (@crewsize - @taskcount).count > 0
		respond ""
		respond "      The Following Crew Have Not Rogered Up:"
		respond ""
		puts @crewsize - @taskcount
		respond ""
	else
		respond ""
		respond "      All Crew Have Rogered Up!"
		respond ""
	end
end

def commander_start_up
	if UserVars.osacrew["othersailors"]
		commander_call_muster
	end
	@crewsize.each do |n|
		@crewmember = n
		fput "hold #{@crewmember}"
	end
	start_script("go2", ['bank'])
	wait_while { running?("go2") }
	if UserVars.osacrew["commander_ship_type"] == "sloop"
		@shipcost = "5000"
	end
	if UserVars.osacrew["commander_ship_type"] == "brigantine"
		@shipcost = "7500"
	end
	if UserVars.osacrew["commander_ship_type"] == "carrack"
		@shipcost = "7500"
	end
	if UserVars.osacrew["commander_ship_type"] == "galleon"
		@shipcost = "10000"
	end
	if UserVars.osacrew["commander_ship_type"] == "frigate"
		@shipcost = "10000"
	end
	if UserVars.osacrew["commander_ship_type"] == "man o' war"
		@shipcost = "12500"
	end
	fput "withdraw #{@shipcost} sil"
	start_script("go2", ['handler'])
	wait_while { running?("go2") }
	pause 0.5
	commander_check_handler
	@found_ship = false
	@pier_map.each do |pier_berth|
		waitrt?
		start_script("go2", [pier_berth]) 
		wait_while { running?("go2") }
		if GameObj.loot.count {|item| item.name =~ /#{UserVars.osacrew["commander_ship_type"]}/} > 0
			if UserVars.osacrew["commander_ship_type"] == "man o' war"
				fput "look man"
			else
				fput "look #{UserVars.osacrew["commander_ship_type"]}"
			end
			result = matchtimeout 1, /Sprawling across the back of the (.*) it reads, "(.*)"/
				if result.to_s =~ /Sprawling across the back of the (.*) it reads, "(.*)"/
					if UserVars.osacrew["commander_ship_name"] == $2
						@found_ship = true
						break
					end
				end
		end
	end
	if @found_ship == false
		echo "The Ship Isn't Here, Something Went Wrong, Restart"
		exit
	end
	commander_board_ship
end

def commander_start_handler
	result = dothistimeout "get crate from my #{Vars.lootsack}", 3, /Get what?|You remove|You grab a|You retrieve/
	if result.to_s =~ /Get what?/
	respond ""
	_respond "\<preset id=\"thought\"\>" + "*** All Out of Crates***" + "\<\/preset\>"
	respond ""
	return
	elsif result.to_s =~ /You remove|You grab a|You retrieve/
	commander_handler
	else
		respond ""
		respond " ---------------==========================================================--------------- "
		respond ""		                 
		respond "                Hands Are Full, Clear Your Hands Then Type Yes To Continue        "
		respond ""
		respond " ---------------==========================================================--------------- "
		waitfor /A good positive attitude never hurts/
		commander_start_handler
	end
end

def commander_handler
	pause 0.5
	fput "give crate to #{checknpcs.last}"
	pause 0.5
	fput "give crate to #{checknpcs.last}"
	pause 0.5
	@handler_box = checkright
	multifput "open my #{@handler_box}", "look in my #{@handler_box}", "empty my #{@handler_box} into my #{Vars.lootsack}"
	waitrt
	pause 0.1
	fput "throw my #{@handler_box}"
	@handler_box = nil
	commander_start_handler
end

def scripted_crew_off
	if UserVars.osacrew["othersailors"]
		UserVars.osacrew["othersailors"] = false
		respond "   *===============================================================================*
												   |          *****You Are No Longer Accepting Outside Scripted Crew*****          |
														   *===============================================================================* 			"
	else
		respond "    Scripted Crew Is Disabled"
	end
end

def scripted_crew_on
	if !UserVars.osacrew["othersailors"]
		UserVars.osacrew["othersailors"] = true
		respond "   *==========================================================================*
												   |          *****You Are Now Accepting Outside Scripted Crew*****           |
														   *==========================================================================* 			"
	else
		respond "    Scripted Crew Is Enabled"
	end
end

def ph_off
	if UserVars.osacrew["piratehunter"]
		UserVars.osacrew["piratehunter"] = false
		respond "   *===========================================================*
												   |          *****Enemy Ship Detection Disabled*****          |     
																				   |                     Godspeed Captain!                     |
														   *===========================================================* 			"
	else
		respond "    Enemy Detection Already Disabled"
	end
end

def ph_on
	if !UserVars.osacrew["piratehunter"]
		UserVars.osacrew["piratehunter"] = true
		respond "   *===========================================================*
												   |          *****Enemy Ship Detection Enabled*****           |     
																				   |                   Happy Hunting Captain!                  |
														   *===========================================================* 			"
	else
		respond "    Enemy Detection Already Enabled"
	end
end

def no_script_off
	if UserVars.osacrew["stowaways"]
		UserVars.osacrew["stowaways"] = false
		respond "      *===========================================================*
												      |       *****Non-Scripting Guest Mode Disabled*****         |
														      *===========================================================* 			"
	else
		respond "    Non-Scripting Guest Mode Already Disabled"
	end
end

def no_script_on
	if !UserVars.osacrew["stowaways"]
		UserVars.osacrew["stowaways"] = true
		respond "      *===========================================================*
												      |       *****Non-Scripting Guest Mode Enabled*****           | 
														      *===========================================================* 			"
	else
		respond "    Non-Scripting Guest Mode Already Enabled"
	end
end

def cleanup_off
	if UserVars.osacrew["cleanup"]
		UserVars.osacrew["cleanup"] = false
		respond "   *===============================================================================*
												   |          *****You Are No Longer Looking For Stragglers*****                   |
														   *===============================================================================* 			"
	else
		respond "    Clean Up Is Disabled"
	end
end

def cleanup_on
	if !UserVars.osacrew["cleanup"]
		UserVars.osacrew["cleanup"] = true
		respond "   *==========================================================================*
												   |          *****You Are Now Looking For Stragglers*****                    |
														   *==========================================================================* 			"
	else
		respond "    Cleanup Is Enabled"
	end
end

def commander_end_routine
	@clearing_end_time = Time.now.to_f
	if UserVars.osacrew["enemyship"] == nil
		UserVars.osacrew["enemyship"] = "a pirate ship"
	end
	if @boardingtime.nil?
		@boardingtime = ((Time.now.to_f - Time.now.to_f)/ 60.00).as_time
	end
	if @helmsman_end_time.nil?
		@helmsman_end_time = Time.now.to_f
	end
	@clearingtime = ((@clearing_end_time - @helmsman_end_time) / 60.00).as_time
	pause 0.5
	if Vars.crewsize != "0"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Turn To!")
		pause 2
	end
	if running? "osacombat"
		stop_script "osacombat"
		wait_until {!running? "osacombat"}
	end
	pause 3
	ship_type
	if Room.current.id != @enemy_main_deck
		start_script("go2", [@enemy_main_deck])
		wait_while { running?("go2") }
	end
	commander_prep_it
end

def commander_sunk_ship
	ship_type
	UserVars.osacrew["cleanup"] = false
	UserVars.osacrew["boarding"] = false
	UserVars.osacrew["piratehunter"] = false
	waitfor /rapidly descends beneath the cold, dark waters/
	if running? "osacombat"
		stop_script "osacombat"
		wait_until {!running? "osacombat"}
	end
	pause 3
	check_for_crate
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Turn To!")
	if Room.current.id != @captains_quarters
		start_script("go2", [@captains_quarters])
		wait_while { running?("go2") }
	end
	Vars.crewsize.to_i.times { commander_task_complete }
	GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	UserVars.osacrew["cleanup"] = true
	UserVars.osacrew["boarding"] = true
	UserVars.osacrew["piratehunter"] = true
	exit
end

def fire_launcher
	waitrt?
	result = dothistimeout "fire net-launcher", 2, /pretend to fire at an imaginary target|A clean miss!|A direct hit!|...wait/
		if result.to_s =~ /pretend to fire at an imaginary target/
			return
		elsif result.to_s =~ /A clean miss!/
			waitrt?
			reel_launcher
			fire_launcher
		elsif result.to_s =~ /A direct hit!/
			waitrt?
			reel_launcher
		elsif result.to_s =~ /...wait/
			waitrt?
			fire_launcher
		end
end

def reel_launcher
	waitrt?
	result = dothistimeout "pull net-launcher", 2, /crate gets closer!|crate comes plopping onto the deck|net-launcher emits a final clicking noise|You do not see a reason to pull the crank/
		if result.to_s =~ /crate gets closer!/
			waitrt?
			reel_launcher
		elsif result.to_s =~ /crate comes plopping onto the deck|net-launcher emits a final clicking noise|You do not see a reason to pull the crank/
			waitrt?
			if GameObj.loot.count {|item| item.name =~ /supply crate/} > 0
				fput "take crate"
				if Room.current.id != @cargo_hold
					start_script("go2", [@cargo_hold])
					wait_while { running?("go2") }
				end
				multifput "put crate in wood", "put crate in balls"
				pause 1
				if (checkleft == "crate") or (checkright == "crate")
					fput "drop crate"
				end
				start_script("go2", [@main_deck])
				wait_while { running?("go2") }
			end
			if GameObj.loot.count {|item| item.name =~ /salvage crate/} > 0
				multifput "take salvage crate", "stow salvage crate"
			end
			fire_launcher
		else
			waitrt?
			reel_launcher
		end
end

def check_for_crate
	waitrt?
	if Room.current.id != @main_deck
		start_script("go2", [@main_deck])
		wait_while { running?("go2") }
	end
	result = dothistimeout "look ocean", 2, /crate floating near enough to your ship/
		if result.to_s =~ /crate floating near enough to your ship/
			waitrt?
			fire_launcher
		else
			return
		end
end

def commander_help_display
	respond ""
	respond "   OSACommander Version: #{VERSION}"
	respond ""
	respond "   Usage: "
	respond ""
	respond "   ;osacommander info <ship type>                       Will gather your ship info and save your current ship type"
	respond "   ;osacommander crew                                   Will display commands for auto crew login"
	respond "   ;osacommander begin                                  Will go to bank to withdrawl silvers retrieve your ship and get underway"
	respond "   ;osacommander undead                                 Orders crew to start undead combat scripts"
	respond "   ;osacommander bless                                  Will begin a blessing sequence for your crew"
	respond "   ;osacommander start                                  Orders crew to start combat scripts"
	respond "   ;osacommander end                                    Orders crew to begin end sequence after enemy ship is cleared"
	respond "   ;osacommander stop                                   Orders crew to stop all combat scripts and resets ship boarding settings"
	respond "   ;osacommander exit                                   Orders crew to attention and to exit game"
	respond "   ;osacommander pause                                  Pauses crew combat scripts"
	respond "   ;osacommander unpause                                Unpauses crew combat scripts"
	respond "   ;osacommander sheath                                 Orders crew to sheath thier weapons"
	respond "   ;osacommander testcon <crew member>                  Orders a crew member to respond. For testing thier settings and connection"
	respond "   ;osacommander muster                                 Takes a roll call of your crew members"
	respond "   ;osacommander muster count                           Will determine who present is not of the ships company"
	respond "   ;osacommander broadcast                              This will look ocean and broadcast the ships location and accept or decline any request to join"
	respond "   ;osacommander summon                                 Call your crew to your location, they will then salute and join your group"
	respond "   ;osacommander underway                               Orders crew to get ship underway"
	respond "   ;osacommander repairs                                Orders crew to do repairs"
	respond "   ;osacommander invoker                                Goes to the invoker and orders crew to ask the invoker for spells"
	respond "   ;osacommander bread                                  Medical Officer will make mana bread and share it with everyone with Groupspellup checked"
	respond "   ;osacommander spells                                 Orders crew to begin spellups"
	respond "   ;osacommander spellup                                Orders crew to perform a mana spellup"
	respond "   ;osacommander silvers                                Orders crew to give all silvers to the commander"
	respond "   ;osacommander status                                 Orders crew to display important info in crew chat"
	respond "   ;osacommander task                                   Orders crew to turn in and get new tasks"
	respond "   ;osacommander task count                             Will determine who hasn't rogered up"
	respond "   ;osacommander sell                                   Orders crew to sell thier loot and return when finished"
	respond "   ;osacommander reset                                  Orders crew to reset osacrew scripts"
	respond "   ;osacommander update <scriptname>                    Orders crew to update a script"
	respond "   ;osacommander detection on/off                       Turns on or off your enemy ship detection"
	respond "   ;osacommander cleanup on/off                         Turns on or off detection of the death of the Captain for straggler cleanup"
	respond "   ;osacommander cleanup                                Begins the cleanup process"
	respond "   ;osacommander scripted on/off                        Turns on or off acceptance of outside scripted crew members"
	respond "   ;osacommander noscript on/off                        Turns on or off a pause for non-scripting members of crew to do tasks and deposit silver"
	respond ""
	respond "   This is the OSA Commander script. It is ran from your ship captain to give orders to the crew. "
	respond "   Enjoy "
	respond ""
	respond "   ~Peggyanne "
	respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
		exit
end

def commander_begin_it
	if !variable[1].include? "info" and !variable[1].include? "crew"
		if UserVars.osacrew["commander_ship_type"].nil?
			respond "
				**** Ship Settings Not Detected ****
				      
					     Please Set Your Ship Type

					   Example: ;osacommander info <ship type>
					"
		return
		end
	end
	if variable[1] =~ /start/
		cleanup_on
		UserVars.osacrew["boarding"] = true
		if UserVars.osacrew["enemy_type"] == "undead"
			if Vars.crewsize == "0"
				get_self_bless
			else
				begin_bless
			end
		end
		if UserVars.osacrew["cannon_engage"] == true
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Enemy Vessel Detected, #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} Inbound. Sound General Quarters! Gunners Man Your Irons!")
		else
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Enemy Vessel Detected, #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} Inbound. Sound General Quarters!")
		end
		@start_time = Time.now.to_f
		if !running? "osacombat"
			start_script "osacombat"
			pause 3
		end
		@helmsman_start_time = Time.now.to_f
		commander_check_role
		enemy_counter
	elsif variable[1] =~ /broadcast/
		commander_broadcast_location
	elsif variable[1] =~ /end/
		UserVars.osacrew["boarding"] = false
		commander_end_routine
	elsif variable[1] =~ /silvers/
		commander_give_coins
	elsif variable[1] =~ /stop/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Stop")
		UserVars.osacrew["cleanup"] = false
		UserVars.osacrew["boarding"] = false
		UserVars.osacrew["piratehunter"] = false
			if running? "osacombat"
				stop_script "osacombat"
				wait_until {!running? "osacombat"}
			end
	elsif variable[1] =~ /spells/
		commander_spell_up
	elsif variable[1] =~ /exit/
		if Room.current.location == "Ships"
			ship_type
			start_script("go2", [@main_deck])
			wait_while { running?("go2") }
			fput "push gangplank"
			move "go gangplank"
		end
		fput "recite #{UserVars.osacrew["commander_ship_name"]}!;Attention To Quarters!"
		pause 1.5
		fput "snap attention"
		pause 1.5
		multifput "salute", "recite Post!"
		pause 2
		fput "exit"
	elsif variable[1] =~ /repairs/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Make Repairs!")
	elsif variable[1] =~ /status/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Status")
		status_check
	elsif variable[1] =~ /spellup/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Mana Spellup")
		if (Stats.prof != "Warrior") and (Stats.prof != "Rogue")
			fput "mana spellup"
		end
	elsif variable[1] =~ /bread/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Let Us Break Bread Together!")
	elsif variable[1] =~ /detection/
		if variable[2] =~ /on/
			ph_on
		end
		if variable[2] =~ /off/
			ph_off
		end
	elsif variable[1] =~ /noscript/
		if variable[2] =~ /on/
			no_script_on
		end
		if variable[2] =~ /off/
			no_script_off
		end
	elsif variable[1] =~ /scripted/
		if variable[2] =~ /on/
			scripted_crew_on
		end
		if variable[2] =~ /off/
			scripted_crew_off
		end
	elsif variable[1] =~ /cleanup/
		if variable[2] =~ /on/
			cleanup_on
		elsif variable[2] =~ /off/
			cleanup_off
		else
			cleanup_begin_routine
		end		
	elsif variable[1] =~ /reset/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Reset")
		do_client ";e stop_script 'osacrew';wait_while { running?('osacrew') };start_script 'osacrew'"
	elsif variable[1] =~ /task/
		if variable[2].nil?
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Task Time!")
			return
		end
		if !variable[2].include? "cou"
			respond "
					Please Select A Valid Task Option:
						
						Count:          Will Determine Who Hasn't Rogered Up
						No Option:      Will Call For The Crew To Get A Task
					"
		end
		if variable[2].include? "cou"
			commander_roger_up
			return
		end
	elsif variable[1] =~ /begin/
		commander_start_up
	elsif variable[1] =~ /testcon/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Connection Test: #{variable[2]}")
	elsif variable[1] =~ /summon/
		fput "group open"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Crew, Report To: #{Room.current.id}")
	elsif variable[1] =~ /bless/
		begin_bless
	elsif variable[1] =~ /unpause/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Unpause")
		if running? "osacombat"
			unpause_script "osacombat"
		end
	elsif variable[1] =~ /pause/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Pause")
		if running? "osacombat"
			pause_script "osacombat"
		end
	elsif variable[1] =~ /muster/
		if variable[2].nil?
			commander_call_muster
			return
		end
		if !variable[2].include? "cou"
			respond "
					Please Select A Valid Muster Option:
						
						Count:          Will Determine Who Present Is Not Of The Ships Company
						No Option:      Will Call A Ships Muster
					"
		end
		if variable[2].include? "cou"
			commander_muster_up
			return
		end
	elsif variable[1] =~ /crew/
		commander_crew_menu
	elsif variable[1] =~ /invoker/
		if Room.current.location == "Ships"
			ship_type
			start_script("go2", [@main_deck])
			wait_while { running?("go2") }
			fput "push gangplank"
			move "go gangplank"
		end
		if Room.current.id != "288"
			start_script("go2", ['288'])
			wait_while { running?("go2") }
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Invoker!")
		fput "ask invoker about spells"
		pause 0.5
		fput "spell active"
	elsif variable[1] =~ /info/
		if variable[2].downcase.include? "sloo"
			UserVars.osacrew["commander_ship_type"] = "sloop"
			UserVars.osacrew["commander_max_crew"] = 2
		elsif variable[2].downcase.include? "bri"
			UserVars.osacrew["commander_ship_type"] = "brigantine"
			UserVars.osacrew["commander_max_crew"] = 4
		elsif variable[2].downcase.include? "car"
			UserVars.osacrew["commander_ship_type"] = "carrack"
			UserVars.osacrew["commander_max_crew"] = 7
		elsif variable[2].downcase.include? "gal"
			UserVars.osacrew["commander_ship_type"] = "galleon"
			UserVars.osacrew["commander_max_crew"] = 11
		elsif variable[2].downcase.include? "fri"
			UserVars.osacrew["commander_ship_type"] = "frigate"
			UserVars.osacrew["commander_max_crew"] = 13
		elsif variable[2].downcase.include? "man"
			UserVars.osacrew["commander_ship_type"] = "man o' war"
			UserVars.osacrew["commander_max_crew"] = 19
		else
			respond "
						Please Select A Valid Ship Type From Your Fleet: Sloop, Brigantine, Carrack, Galleon, Frigate or Man O' War
						"
				return
		end
		fput "ship info #{variable[2]}"
		commander_ship_info
	elsif variable[1] =~ /helmsman/
		@helmsman_start_time = Time.now.to_f
		commander_check_role
		enemy_counter
	elsif variable[1] =~ /repairs/
		begin_repairs
	elsif variable[1] =~ /settings/
		crew_display_settings
	elsif variable[1] =~ /call/
		(eval variable[2]).call
	elsif variable[1] =~ /setup/
		self.setup()
	elsif variable[1] =~ /underway/
		if UserVars.osacrew["othersailors"]
			commander_call_muster
		end
		if Vars.crewsize != "0"
			commander_get_underway
		else
			commander_solo_get_underway
		end
	elsif variable[1] =~ /version/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Current Version Are As Follows: Combat #{UserVars.osacrew["combatversion"]}, Crew #{UserVars.osacrew["crewversion"]} and Commander #{UserVars.osacrew["commanderversion"]}")
	else
		commander_help_display
	end
end

toggle_upstream

Thread.new{
	loop{
		command = upstream_get
			if command =~/^\<c\>;osacomm(.*) status/i
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Status")
				status_check
			elsif command =~/^\<c\>;osacomm(.*) task (.*)/i
				variable[2] = $2
				if variable[2].empty?
					LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Task Time!")
					return
				end
				if !variable[2].include? "cou"
					respond "
						Please Select A Valid Task Option:
							
							Count:          Will Determine Who Hasn't Rogered Up
							No Option:      Will Call For The Crew To Get A Task
						"
				end
				if variable[2].include? "cou"
					commander_roger_up
					return
				end
			elsif command =~/^\<c\>;osacomm(.*) detection on/
				ph_on
			elsif command =~/^\<c\>;osacomm(.*) detection off/
				ph_off
			elsif command =~/^\<c\>;osacomm(.*) noscript on/
				no_script_on
			elsif command =~/^\<c\>;osacomm(.*) noscript off/
				no_script_off
			elsif command =~/^\<c\>;osacomm(.*) scripted on/
				scripted_crew_on
			elsif command =~/^\<c\>;osacomm(.*) scripted off/
				scripted_crew_off
			elsif command =~/^\<c\>;osacomm(.*) cleanup on/
				cleanup_on
			elsif command =~/^\<c\>;osacomm(.*) cleanup off/
				cleanup_off
			end}
}

before_dying {@warning = false}
@anchor_aweigh = false
@commander_lowered_sail = false
@warning = false
UserVars.osacrew["cleanup_type"] = nil
Room[33889].wayto["3668"] = StringProc.new("Map[7].wayto['3668'].call;")
Room[33889].timeto["3668"] = StringProc.new("Map[7].timeto['3668'].call;")
Room[33889].tags.push("meta:fwi:teleport")
Room[33889].location = nil
Room[3669].wayto["33889"] = StringProc.new("Map[7].wayto['3668'].call;")
Room[3669].timeto["33889"] = StringProc.new("Map[7].timeto['3668'].call;")
commander_begin_it