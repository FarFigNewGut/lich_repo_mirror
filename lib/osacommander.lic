UserVars.osacrew["commanderversion"] = '3.8.3 (August 8th, 2024)'
$TITLE = "OSACommander: v. (#{UserVars.osacrew["commanderversion"]})"
=begin
	
	   OSACommander Version: '3.8.3 (August 8th, 2024)
	
	   Usage: 
	
	   ;osacommander info <ship type>                       Will gather your ship info and save your current ship type
	   ;osacommander crew                                   Will display commands for auto crew login
	   ;osacommander begin                                  Will go to bank to withdrawl silvers retrieve your ship and get underway
	   ;osacommander undead                                 Orders crew to start undead combat scripts
	   ;osacommander bless                                  Will begin a blessing sequence for your crew
	   ;osacommander start                                  Orders crew to start combat scripts
	   ;osacommander end                                    Orders crew to begin end sequence after enemy ship is cleared
	   ;osacommander stop                                   Orders crew to stop all combat scripts and resets ship boarding settings
	   ;osacommander exit                                   Orders crew to attention and to exit game
	   ;osacommander pause                                  Pauses crew combat scripts
	   ;osacommander setup                                  Opens Setup Menu For Commander
	   ;osacommander unpause                                Unpauses crew combat scripts
	   ;osacommander sheath                                 Orders crew to sheath thier weapons
	   ;osacommander testcon <crew member>                  Orders a crew member to respond. For testing thier settings and connection
	   ;osacommander kick <crew member                      Commands a crew member to depart from duty
	   ;osacommander unkick <crew member                    Commands a crew member to return to duty
	   ;osacommander muster                                 Takes a roll call of your crew members
	   ;osacommander muster count                           Will determine who present is not of the ships company
	   ;osacommander broadcast                              This will look ocean and broadcast the ships location and accept or decline any request to join
	   ;osacommander summon                                 Call your crew to your location, they will then salute and join your group
	   ;osacommander underway                               Orders crew to get ship underway
	   ;osacommander repairs                                Orders crew to do repairs
	   ;osacommander invoker                                Goes to the invoker and orders crew to ask the invoker for spells
	   ;osacommander bread                                  Medical Officer will make mana bread and share it with everyone with Groupspellup checked
	   ;osacommander spells                                 Orders crew to begin spellups
	   ;osacommander spellup                                Orders crew to perform a mana spellup
	   ;osacommander silvers                                Orders crew to give all silvers to the commander
	   ;osacommander status                                 Orders crew to display important info in crew chat
	   ;osacommander task                                   Orders crew to turn in and get new tasks
	   ;osacommander task count                             Will determine who hasn't rogered up
	   ;osacommander sell                                   Orders crew to sell thier loot and return when finished
	   ;osacommander reset                                  Orders crew to reset osacrew scripts
	   ;osacommander update <scriptname>                    Orders crew to update a script
	   ;osacommander detection on/off                       Turns on or off your enemy ship detection
	   ;osacommander cleanup on/off                         Turns on or off detection of the death of the Captain for straggler cleanup
	   ;osacommander cleanup                                Begins the cleanup process
	   ;osacommander scripted on/off                        Turns on or off acceptance of outside scripted crew members
	   ;osacommander noscript on/off                        Turns on or off a pause for non-scripting members of crew to do tasks and deposit silver
	   ;osacommander checkversion                           Checks the version of all scripts for you and your crew members
	
	   This is the OSA Commander script. It is ran from your ship captain to give orders to the crew. 
	   Enjoy 
	
	   ~Peggyanne 
	 PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. 
		exit
=end 

def commander_help_display
	respond ""
	respond "   OSACommander Version: #{UserVars.osacrew["commanderversion"]}"
	respond ""
	respond "   Usage: "
	respond ""
	respond "   ;osacommander info <ship type>                       Will gather your ship info and save your current ship type"
	respond "   ;osacommander crew                                   Will display commands for auto crew login"
	respond "   ;osacommander begin                                  Will go to bank to withdrawl silvers retrieve your ship and get underway"
	respond "   ;osacommander undead                                 Orders crew to start undead combat scripts"
	respond "   ;osacommander bless                                  Will begin a blessing sequence for your crew"
	respond "   ;osacommander start                                  Orders crew to start combat scripts"
	respond "   ;osacommander end                                    Orders crew to begin end sequence after enemy ship is cleared"
	respond "   ;osacommander stop                                   Orders crew to stop all combat scripts and resets ship boarding settings"
	respond "   ;osacommander exit                                   Orders crew to attention and to exit game"
	respond "   ;osacommander pause                                  Pauses crew combat scripts"
	respond "   ;osacommander setup                                  Opens setup menu for commander"
	respond "   ;osacommander unpause                                Unpauses crew combat scripts"
	respond "   ;osacommander sheath                                 Orders crew to sheath thier weapons"
	respond "   ;osacommander testcon <crew member>                  Orders a crew member to respond. For testing thier settings and connection"
	respond "   ;osacommander kick <crew member                      Commands a crew member to depart from duty"
	respond "   ;osacommander unkick <crew member                    Commands a crew member to return to duty"
	respond "   ;osacommander muster                                 Takes a roll call of your crew members"
	respond "   ;osacommander muster count                           Will determine who present is not of the ships company"
	respond "   ;osacommander broadcast                              This will look ocean and broadcast the ships location and accept or decline any request to join"
	respond "   ;osacommander summon                                 Call your crew to your location, they will then salute and join your group"
	respond "   ;osacommander underway                               Orders crew to get ship underway"
	respond "   ;osacommander repairs                                Orders crew to do repairs"
	respond "   ;osacommander invoker                                Goes to the invoker and orders crew to ask the invoker for spells"
	respond "   ;osacommander bread                                  Medical Officer will make mana bread and share it with everyone with Groupspellup checked"
	respond "   ;osacommander spells                                 Orders crew to begin spellups"
	respond "   ;osacommander spellup                                Orders crew to perform a mana spellup"
	respond "   ;osacommander silvers                                Orders crew to give all silvers to the commander"
	respond "   ;osacommander status                                 Orders crew to display important info in crew chat"
	respond "   ;osacommander task                                   Orders crew to turn in and get new tasks"
	respond "   ;osacommander task count                             Will determine who hasn't rogered up"
	respond "   ;osacommander sell                                   Orders crew to sell thier loot and return when finished"
	respond "   ;osacommander reset                                  Orders crew to reset osacrew scripts"
	respond "   ;osacommander update <scriptname>                    Orders crew to update a script"
	respond "   ;osacommander detection on/off                       Turns on or off your enemy ship detection"
	respond "   ;osacommander cleanup on/off                         Turns on or off detection of the death of the Captain for straggler cleanup"
	respond "   ;osacommander cleanup                                Begins the cleanup process"
	respond "   ;osacommander scripted on/off                        Turns on or off acceptance of outside scripted crew members"
	respond "   ;osacommander noscript on/off                        Turns on or off a pause for non-scripting members of crew to do tasks and deposit silver"
	respond "   ;osacommander checkversion                           Checks the version of all scripts for you and your crew members"
	respond ""
	respond "   This is the OSA Commander script. It is ran from your ship captain to give orders to the crew. "
	respond "   Enjoy "
	respond ""
	respond "   ~Peggyanne "
	respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
		exit
end

		  $get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  
	  def set_value(key, clean, default)
    if (!UserVars.osacommander[key].nil? && UserVars.osacommander[key] !~ /^\s*$/)
      cleaned = clean_value(clean, UserVars.osacommander[key])
      instance_variable_set("@#{key.upcase}", cleaned)
    else
      instance_variable_set("@#{key.upcase}", default)
    end
  end
  
  def self.profile(vars)
  require 'yaml'
  require 'fileutils'
  FileUtils.mkdir_p(File.join($data_dir, XMLData.game, Char.name, "osacommander_profiles"))
    if vars[2] =~ /load/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacommander_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if !File.exist?("#{filename}")
          respond ""
          respond " You are trying to load a profile that does not exist."
          respond ""
          respond "***************************"
          respond " Notice- your default osacommander profiles folder has changed to:"
          respond " #{dir}"
          respond ""
          respond " The old location is here: #{File.join($script_dir, 'osacommander_profiles')}"
          respond " You can copy this folder or appropriate profiles into the relevant character directory in your operating system"
          respond "****************************"
          respond ""
        else
          from_file = YAML.load_file(filename)
          UserVars.osacommander = from_file
          echo "Settings loaded from profile: #{filename}."
        end
      else
        echo "You forgot to name your profile you wish to load."
        echo "Syntax: ;osacommander profile load <NAME Here, no Spaces!>"
      end
    elsif vars[2] =~ /save/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacommander_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if File.exist?("#{filename}")
          echo "File already exists, if you wish to overwrite, please ;unpause osacrew."
          echo "Else ;kill osacrew and choose another filename."
          pause_script
        end
        File.write(filename, UserVars.osacommander.to_yaml)
        echo "Settings saved to profile: #{filename}."
      else
        echo "You forgot to name your profile you wish to save."
        echo "Syntax: ;osacommander profile save <NAME Here, no Spaces!>"
      end
    end
  end
	  
def self.setup
	@theme_state = Lich.track_dark_mode if defined? Lich.track_dark_mode
    Gtk.queue do
      @get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  @OC_WINDOW = Gtk::Window.new
      @OC_WINDOW.title = $TITLE
      @OC_WINDOW.set_icon(@default_icon)
      @OC_WINDOW.set_border_width(10)
      @OC_WINDOW.keep_above = true
	  
		if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
			grey = Gdk::RGBA::parse("#d3d3d3")
			@OP_WINDOW.override_background_color(:normal, grey)
		end

      @OC_BOX = @get_vBox.call
      @OC_BOX.set_border_width(5)
      @OC_WINDOW.add(@OC_BOX)

      @OC_NOTEBOOK = Gtk::Notebook.new
      @OC_NOTEBOOK.set_show_border(true)
	  if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
		@OC_NOTEBOOK.override_background_color(:normal, grey)
	  end
      @OC_BOX.add(@OC_NOTEBOOK)
      @OC_ENTRY = Hash.new # For mapping entries to variables
      @OC_TABLE_SIZE = Hash.new # For mapping table sizes

  end
  
	Gtk.queue do
      tab_names = %w[
        General
      ]
	  
     tab_names.each.with_index(1) do |name, val|
        new_table = Gtk::Table.new(10, 4, true).tap do |table|
          table.row_spacings = 1
          table.column_spacings = 1
        end

        new_box = if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end

        if Gtk.check_version(3,0,0).nil?
          new_box.pack_start(new_table, expand: false, fill: false, padding: 0)
        else
          new_box.pack_start(new_table, false, false, 0)
        end

        @OC_NOTEBOOK.append_page(new_box, Gtk::Label.new(name))

        instance_variable_set("@OC_TABLE#{val}", new_table)
        instance_variable_set("@OC_VERTICAL_BOX#{val}", new_box)
      end
end

def self.add_label_entry(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacommander[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 1, 2, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end

def self.add_label_entry2(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacommander[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 3, 4, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry3(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry4(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry5(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 4, 5, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry6(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 1, 2, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

    def self.add_dropdown(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacommander[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacommander[variable].to_s != "Fixnum" && UserVars.osacommander[variable].to_s != "Integer"
          UserVars.osacommander[variable]
        end
        dropdown.set_active(UserVars.osacommander[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 0, 1, size, size + 1)
      table.attach(align2, 1, 2, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

def self.add_dropdown2(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacommander[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacommander[variable].to_s != "Fixnum" && UserVars.osacommander[variable].to_s != "Integer"
          UserVars.osacommander[variable]
        end
        dropdown.set_active(UserVars.osacommander[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 2, 3, size, size + 1)
      table.attach(align2, 3, 4, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

      def self.add_text_area(vbox, label, variable)
      # Grab value for a manual check since we can't rely on a version of Ruby with safe operators
      current_value = UserVars.osacommander[variable]

      entry = Gtk::TextView.new
      entry.buffer.text = current_value ? current_value.gsub("||","\n") : ""

      swin = Gtk::ScrolledWindow.new
      swin.border_width = 5
      swin.add(entry)
      swin.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

      frame = Gtk::Frame.new(label)
      frame.add(swin)

      vbox.pack_start_defaults(frame)

      @OC_ENTRY[variable] = entry
    end
  Gtk.queue do
    @OC_ENTRY = Hash.new
	add_label_entry3(@OC_TABLE1, "Enemy Types To Engage:", true)
	add_checkbox(@OC_TABLE1, 0,  "Pirates", 'enemy_pirate')
	add_checkbox(@OC_TABLE1, 1,  "Krolvin", 'enemy_krolvin')
	add_checkbox(@OC_TABLE1, 2,  "Ethereal", 'enemy_undead', true)
	add_label_entry3(@OC_TABLE1, "Ship Types To Board:", true)
	add_checkbox(@OC_TABLE1, 0,  "Sloop", 'board_sloop')
	add_checkbox(@OC_TABLE1, 1,  "Brigantine", 'board_brigantine')
	add_checkbox(@OC_TABLE1, 2,  "Carrack", 'board_carrack', true)
	add_checkbox(@OC_TABLE1, 0,  "Galleon", 'board_galleon')
	add_checkbox(@OC_TABLE1, 1,  "Frigate", 'board_frigate')
	add_checkbox(@OC_TABLE1, 2,  "Man O' War", 'board_man', true)
	add_label_entry3(@OC_TABLE1, "Ship Types To Cannon:", true)
	add_checkbox(@OC_TABLE1, 0,  "Sloop", 'fire_sloop')
	add_checkbox(@OC_TABLE1, 1,  "Brigantine", 'fire_brigantine')
	add_checkbox(@OC_TABLE1, 2,  "Carrack", 'fire_carrack', true)
	add_checkbox(@OC_TABLE1, 0,  "Galleon", 'fire_galleon')
	add_checkbox(@OC_TABLE1, 1,  "Frigate", 'fire_frigate')
	add_checkbox(@OC_TABLE1, 2,  "Man O' War", 'fire_man', true)
	add_label_entry3(@OC_TABLE1, "General Settings", true)
	add_label_entry(@OC_TABLE1, "Security Officer:", 'securityofficer', true)
	add_label_entry(@OC_TABLE1, "Security Officer Room Number:", 'security_officer_location', true)
	add_label_entry(@OC_TABLE1, "Spellup If Avg Time Left On Spells Is Less Than (Default is 65 Mins)", 'time_left_setting', true)
	add_checkbox(@OC_TABLE1, 0,  "Four Winds Access", 'fwi')
	add_checkbox(@OC_TABLE1, 1,  "Use Net-Launcher", 'netlauncher', true)
	add_checkbox(@OC_TABLE1, 0,  "Break Bread Before Spellup", 'use_bread')
	add_checkbox(@OC_TABLE1, 1,  "Skip Blessing Routine", 'no_bless', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Security Officer For Boxes", 'use_security_officer')
	add_checkbox(@OC_TABLE1, 1,  "Use Fossil Charm", 'fossil_charm')
end
  
    def self.add_checkbox(table, x_pos, label, variable, newrow = false, default = false)
      size = @OC_TABLE_SIZE[table] || 0
      checkbox = Gtk::CheckButton.new label
      value = UserVars.osacommander[variable] || default
      checkbox.active = value
      table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
      @OC_ENTRY[variable] = checkbox
      @OC_TABLE_SIZE[table] += 1 if newrow
    end
	
  Gtk.queue do
    @OC_WINDOW.signal_connect("delete_event") {
      @OC_SETUP_COMPLETED = true
    }
  end

  Gtk.queue do 
	
    @OC_WINDOW.show_all
  end

  @OC_SETUP_COMPLETED = false
  until(@OC_SETUP_COMPLETED)
    sleep(0.5)
  end

    UserVars.osacommander ||= Hash.new
    @OC_ENTRY.keys.each do |key|
      echo "#{key} - #{@OC_ENTRY[key].to_s}" if $osacrew_debug
      if @OC_ENTRY[key].to_s =~ /CheckButton/
        value = @OC_ENTRY[key].active?
        UserVars.osacommander[key] = @OC_ENTRY[key].active?
      elsif @OC_ENTRY[key].to_s =~ /ComboBox/
        UserVars.osacommander[key] = @OC_ENTRY[key].active
      elsif @OC_ENTRY[key].to_s =~ /TextView/
        # Store these with double pipes so we don't mess up any supplied expressions
        UserVars.osacommander[key] = @OC_ENTRY[key].buffer.text.gsub("\n","||")
      else
        if key == 'wounded_eval'
          UserVars.osacommander[key] = @OC_ENTRY[key].text
        else
          UserVars.osacommander[key] = @OC_ENTRY[key].text.strip
        end
      end
    end
    UserVars.save

  Gtk.queue do
    @OC_WINDOW.destroy
 end
end

def ship_type
	#Sloop Map
	if !Room[29038].tags.include? "main_deck"
		Room[29039].tags.push("cargo_hold")
		Room[29038].tags.push("main_deck")
		Room[29040].tags.push("crows_nest")
		Room[29041].tags.push("helm")
		Room[29042].tags.push("captains_quarters")
		Room[29038].tags.push("main_cannon")
	end
	if !Room[30787].tags.include? "enemy_main_deck"
		Room[30790].tags.push("enemy_cargo_hold")
		Room[30787].tags.push("enemy_main_deck")
		Room[30791].tags.push("enemy_crows_nest")
		Room[30788].tags.push("enemy_helm")
		Room[30789].tags.push("enemy_quarters")
	end
	if Room[29038].wayto["30787"].nil?
		Room[29038].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30787"] = 0.2
		Room[29038].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30792"] = 0.2
		Room[29038].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30266"] = 0.2
		Room[29038].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30798"] = 0.2
		Room[29038].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30805"] = 0.2
		Room[29038].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[29038].timeto["30778"] = 0.2
	end
	#Brigantine Map
	if !Room[30142].tags.include? "main_deck"
		Room[30145].tags.push("cargo_hold")
		Room[30142].tags.push("main_deck")
		Room[30144].tags.push("forward_deck")
		Room[30143].tags.push("crows_nest")
		Room[30147].tags.push("mess_hall")
		Room[30146].tags.push("crew_quarters")
		Room[30141].tags.push("helm")
		Room[30140].tags.push("captains_quarters")
		Room[30142].tags.push("main_cannon")
		Room[30144].tags.push("forward_cannon")
	end
	if !Room[30792].tags.include? "enemy_main_deck"
		Room[30795].tags.push("enemy_cargo_hold")
		Room[30792].tags.push("enemy_main_deck")
		Room[30797].tags.push("enemy_forward_deck")
		Room[30796].tags.push("enemy_crows_nest")
		Room[30793].tags.push("enemy_helm")
		Room[30794].tags.push("enemy_quarters")
	end
	if Room[30142].wayto["30787"].nil?
		Room[30142].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30787"] = 0.2
		Room[30142].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30792"] = 0.2
		Room[30142].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30266"] = 0.2
		Room[30142].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30798"] = 0.2
		Room[30142].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30805"] = 0.2
		Room[30142].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30142].timeto["30778"] = 0.2
	end
	#Carrack Map
	if !Room[30119].tags.include? "main_deck"
		Room[30125].tags.push("cargo_hold")
		Room[30119].tags.push("main_deck")
		Room[30121].tags.push("forward_deck")
		Room[30122].tags.push("bow")
		Room[30123].tags.push("crows_nest")
		Room[30127].tags.push("mess_hall")
		Room[30126].tags.push("crew_quarters")
		Room[30120].tags.push("helm")
		Room[30124].tags.push("captains_quarters")
		Room[30119].tags.push("main_cannon")
		Room[30121].tags.push("forward_cannon")
	end
	if !Room[30266].tags.include? "enemy_main_deck"
		Room[30269].tags.push("enemy_cargo_hold")
		Room[30266].tags.push("enemy_main_deck")
		Room[30271].tags.push("enemy_forward_deck")
		Room[30272].tags.push("enemy_bow")
		Room[30270].tags.push("enemy_crows_nest")
		Room[30267].tags.push("enemy_helm")
		Room[30268].tags.push("enemy_quarters")
	end
	if Room[30119].wayto["30787"].nil?
		Room[30119].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30787"] = 0.2
		Room[30119].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30792"] = 0.2
		Room[30119].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30266"] = 0.2
		Room[30119].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30798"] = 0.2
		Room[30119].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30805"] = 0.2
		Room[30119].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30119].timeto["30778"] = 0.2
	end
	#Galleon Map
	if !Room[30176].tags.include? "main_deck"
		Room[30182].tags.push("cargo_hold")
		Room[30176].tags.push("main_deck")
		Room[30177].tags.push("forward_deck")
		Room[30178].tags.push("bow")
		Room[30181].tags.push("crows_nest")
		Room[30185].tags.push("social_room")
		Room[30184].tags.push("mess_hall")
		Room[30183].tags.push("crew_quarters")
		Room[30179].tags.push("helm")
		Room[30180].tags.push("captains_quarters")
		Room[30176].tags.push("main_cannon")
		Room[30177].tags.push("forward_cannon")
	end
	if !Room[30798].tags.include? "enemy_main_deck"
		Room[30801].tags.push("enemy_cargo_hold")
		Room[30798].tags.push("enemy_main_deck")
		Room[30803].tags.push("enemy_forward_deck")
		Room[30804].tags.push("enemy_bow")
		Room[30802].tags.push("enemy_crows_nest")
		Room[30799].tags.push("enemy_helm")
		Room[30800].tags.push("enemy_quarters")
	end
	if Room[30176].wayto["30787"].nil?
		Room[30176].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30787"] = 0.2
		Room[30176].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30792"] = 0.2
		Room[30176].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30266"] = 0.2
		Room[30176].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30798"] = 0.2
		Room[30176].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30805"] = 0.2
		Room[30176].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30176].timeto["30778"] = 0.2
	end
	#Frigate Map
	if !Room[30166].tags.include? "main_deck"
		Room[30167].tags.push("cargo_hold")
		Room[30166].tags.push("main_deck")
		Room[30171].tags.push("forward_deck")
		Room[30172].tags.push("bow")
		Room[30173].tags.push("crows_nest")
		Room[30170].tags.push("social_room")
		Room[30169].tags.push("mess_hall")
		Room[30168].tags.push("crew_quarters")
		Room[30174].tags.push("helm")
		Room[30175].tags.push("captains_quarters")
		Room[30166].tags.push("main_cannon")
		Room[30171].tags.push("forward_cannon")
	end
	if !Room[30805].tags.include? "enemy_main_deck"
		Room[30808].tags.push("enemy_cargo_hold")
		Room[30805].tags.push("enemy_main_deck")
		Room[30810].tags.push("enemy_forward_deck")
		Room[30809].tags.push("enemy_crows_nest")
		Room[30806].tags.push("enemy_helm")
		Room[30807].tags.push("enemy_quarters")
	end
	if Room[30166].wayto["30787"].nil?
		Room[30166].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30787"] = 0.2
		Room[30166].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30792"] = 0.2
		Room[30166].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30266"] = 0.2
		Room[30166].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30798"] = 0.2
		Room[30166].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30805"] = 0.2
		Room[30166].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30166].timeto["30778"] = 0.2
	end
	#Man O' War Map
	if !Room[30130].tags.include? "main_deck"
		Room[30136].tags.push("cargo_hold")
		Room[30130].tags.push("main_deck")
		Room[30131].tags.push("mid_deck")
		Room[30132].tags.push("forward_deck")
		Room[30133].tags.push("bow")
		Room[30135].tags.push("crows_nest")
		Room[30134].tags.push("forward_crows_nest")
		Room[30139].tags.push("social_room")
		Room[30138].tags.push("mess_hall")
		Room[30137].tags.push("crew_quarters")
		Room[30128].tags.push("helm")
		Room[30129].tags.push("captains_quarters")
		Room[30130].tags.push("main_cannon")
		Room[30131].tags.push("mid_cannon")
		Room[30132].tags.push("forward_cannon")
	end
	if !Room[30778].tags.include? "enemy_main_deck"
		Room[30781].tags.push("enemy_cargo_hold")
		Room[30778].tags.push("enemy_main_deck")
		Room[30783].tags.push("enemy_mid_deck")
		Room[30786].tags.push("enemy_forward_deck")
		Room[30784].tags.push("enemy_bow")
		Room[30782].tags.push("enemy_crows_nest")
		Room[30785].tags.push("enemy_forward_crows_nest")
		Room[30779].tags.push("enemy_helm")
		Room[30780].tags.push("enemy_quarters")
	end
	if Room[30130].wayto["30787"].nil?
		Room[30130].wayto["30787"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30787"] = 0.2
		Room[30130].wayto["30792"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30792"] = 0.2
		Room[30130].wayto["30266"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30266"] = 0.2
		Room[30130].wayto["30798"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30798"] = 0.2
		Room[30130].wayto["30805"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30805"] = 0.2
		Room[30130].wayto["30778"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room[30130].timeto["30778"] = 0.2
	end
end

def ship_map
	case Room.current.id
	when (29038..29042)
			UserVars.osacrew["ship_type"] = "sloop"
			@captains_quarters = 29042
			UserVars.osacrew["ship_map"] = ["main_deck", "cargo_hold", "crows_nest", "helm", "captains_quarters"]
			@Slooptimes = UserVars.osacrew["Slooptimes"].last(50)
			UserVars.osacrew["Slooptimes"] = @Slooptimes
			if @Slooptimes.nil? or @Slooptimes.empty?
				@Slooptimes = [0.315]
			end
			@Sailtimes = @Slooptimes
	when (30140..30147)
			UserVars.osacrew["ship_type"] = "brigantine"
			UserVars.osacrew["ship_map"] = ["forward_deck", "main_deck", "crows_nest", "cargo_hold", "mess_hall", "crew_quarters", "helm", "captains_quarters"]
			@Brigtimes = UserVars.osacrew["Brigtimes"].last(50)
			UserVars.osacrew["Brigtimes"] = @Brigtimes
			if @Brigtimes.nil? or @Brigtimes.empty?
				@Brigtimes = [0.30000000000000000]
			end
			@Sailtimes = @Brigtimes
	when (30119..30127)
			UserVars.osacrew["ship_type"] = "carrack"
			UserVars.osacrew["ship_map"] = ["bow", "forward_deck", "crows_nest", "main_deck", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Cartimes = UserVars.osacrew["Cartimes"].last(50)
			UserVars.osacrew["Cartimes"] = @Cartimes
			if @Cartimes.nil? or @Cartimes.empty?
				@Cartimes = [0.30000000000000000]
			end
			@Sailtimes = @Cartimes
	when (30176..30186)
			UserVars.osacrew["ship_type"] = "galleon"
			UserVars.osacrew["ship_map"] = ["bow", "forward_deck", "crows_nest", "main_deck", "social_room", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Galtimes = UserVars.osacrew["Galtimes"].last(50)
			UserVars.osacrew["Galtimes"] = @Galtimes
			if @Galtimes.nil? or @Galtimes.empty?
				@Galtimes = [0.30000000000000000]
			end
			@Sailtimes = @Galtimes
	when (30166..30175)
			UserVars.osacrew["ship_type"] = "frigate"
			UserVars.osacrew["ship_map"] = ["bow", "forward_deck", "crows_nest", "main_deck", "social_room", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Fritimes = UserVars.osacrew["Fritimes"].last(50)
			UserVars.osacrew["Fritimes"] = @Fritimes
			if @Fritimes.nil? or @Fritimes.empty?
				@Fritimes = [0.30000000000000000]
			end
			@Sailtimes = @Fritimes
	when (30128..30139)
			UserVars.osacrew["ship_type"] = "man o' war"
			UserVars.osacrew["ship_map"] = ["bow", "forward_crows_nest", "forward_deck", "mid_deck", "crows_nest", "main_deck", "social_room", "mess_hall", "cargo_hold", "crew_quarters", "helm", "captains_quarters"]
			@Mantimes = UserVars.osacrew["Mantimes"].last(50)
			UserVars.osacrew["Mantimes"] = @Mantimes
			if @Mantimes.nil? or @Mantimes.empty?
				@Mantimes = [0.35000000000000000]
			end
			@Sailtimes = @Mantimes
	end
end

def commander_map_gangplank
	if UserVars.osacrew["commander_ship_type"] == "man o' war"
		Room[UserVars.osacrew["gangplank"]].wayto["30130"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30130"] = 0.2
		Room["30130"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30130"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end
	
	if UserVars.osacrew["commander_ship_type"] == "frigate"
		Room[UserVars.osacrew["gangplank"]].wayto["30166"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30166"] = 0.2
		Room["30166"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30166"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end

	if UserVars.osacrew["commander_ship_type"] == "galleon"
		Room[UserVars.osacrew["gangplank"]].wayto["30176"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30176"] = 0.2
		Room["30176"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30176"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end

	if UserVars.osacrew["commander_ship_type"] == "carrack"
		Room[UserVars.osacrew["gangplank"]].wayto["30119"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30119"] = 0.2
		Room["30119"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30119"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end

	if UserVars.osacrew["commander_ship_type"] == "brigantine"
		Room[UserVars.osacrew["gangplank"]].wayto["30142"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["30142"] = 0.2
		Room["30142"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["30142"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end
	

	if UserVars.osacrew["commander_ship_type"] == "sloop"
		Room[UserVars.osacrew["gangplank"]].wayto["29038"] = StringProc.new("gangplank = GameObj.loot.find{|o| o.noun == \"gangplank\" }.id;if !gangplank.nil?;fput \"go #\#{gangplank}\";else;ship = GameObj.loot.find{|o| o.noun =~ /sloop|brigantine|carrack|frigate|galleon|^man/ }.id; if !ship.nil?;fput \"go #\#{ship}\";else;echo \"Couldnt find gangplank or ship\";end;end;")
		Room[UserVars.osacrew["gangplank"]].timeto["29038"] = 0.2
		Room["29038"].wayto["#{UserVars.osacrew["gangplank"]}"] = StringProc.new("fput \"push gang\";fput \"go gang\"")
		Room["29038"].timeto["#{UserVars.osacrew["gangplank"]}"] = 0.2
	end
end

def commander_clear_gangplank
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30130")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30130")
	Room[30130].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30130].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30166")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30166")
	Room[30166].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30166].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30176")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30176")
	Room[30176].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30176].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30119")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30119")
	Room[30119].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30119].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("30142")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("30142")
	Room[30142].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[30142].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[UserVars.osacrew["gangplank"]].wayto.delete ("29038")
	Room[UserVars.osacrew["gangplank"]].timeto.delete ("29038")
	Room[29038].wayto.delete ("#{UserVars.osacrew["gangplank"]}")
	Room[29038].timeto.delete ("#{UserVars.osacrew["gangplank"]}")
end


def cargo_hold
	ship_type
	start_script("go2", ["cargo_hold"]) if !Room.current.tags.include? "cargo_hold"
	wait_while { running?("go2") }
end

def main_deck
	ship_type
	start_script("go2", ["main_deck"]) if !Room.current.tags.include? "main_deck"
	wait_while { running?("go2") }
end

def mid_deck
	ship_type
	start_script("go2", ["mid_deck"]) if !Room.current.tags.include? "mid_deck"
	wait_while { running?("go2") }
end

def forward_deck
	ship_type
	start_script("go2", ["forward_deck"]) if !Room.current.tags.include? "forward_deck"
	wait_while { running?("go2") }
end

def bow
	ship_type
	start_script("go2", ["bow"]) if !Room.current.tags.include? "bow"
	wait_while { running?("go2") }
end

def crows_nest
	ship_type
	start_script("go2", ["crows_nest"]) if !Room.current.tags.include? "crows_nest"
	wait_while { running?("go2") }
end

def forward_crows_nest
	ship_type
	start_script("go2", ["forward_crows_nest"]) if !Room.current.tags.include? "forward_crows_nest"
	wait_while { running?("go2") }
end

def social_room
	ship_type
	start_script("go2", ["social_room"]) if !Room.current.tags.include? "social_room"
	wait_while { running?("go2") }
end

def mess_hall
	ship_type
	start_script("go2", ["mess_hall"]) if !Room.current.tags.include? "mess_hall"
	wait_while { running?("go2") }
end

def crew_quarters
	ship_type
	start_script("go2", ["crew_quarters"]) if !Room.current.tags.include? "crew_quarters"
	wait_while { running?("go2") }
end

def helm
	ship_type
	start_script("go2", ["helm"]) if !Room.current.tags.include? "helm"
	wait_while { running?("go2") }
end

def captains_quarters
	ship_type
	start_script("go2", ["captains_quarters"]) if !Room.current.tags.include? "captains_quarters"
	wait_while { running?("go2") }
end

def enemy_cargo_hold
	ship_type
	start_script("go2", ["enemy_cargo_hold"]) if !Room.current.tags.include? "enemy_cargo_hold"
	wait_while { running?("go2") }
end

def enemy_main_deck
	ship_type
	start_script("go2", ["enemy_main_deck"]) if !Room.current.tags.include? "enemy_main_deck"
	wait_while { running?("go2") }
end

def enemy_mid_deck
	ship_type
	start_script("go2", ["enemy_mid_deck"]) if !Room.current.tags.include? "enemy_mid_deck"
	wait_while { running?("go2") }
end

def enemy_forward_deck
	ship_type
	start_script("go2", ["enemy_forward_deck"]) if !Room.current.tags.include? "enemy_forward_deck"
	wait_while { running?("go2") }
end

def enemy_bow
	ship_type
	start_script("go2", ["enemy_bow"]) if !Room.current.tags.include? "enemy_bow"
	wait_while { running?("go2") }
end

def enemy_crows_nest
	ship_type
	start_script("go2", ["enemy_crows_nest"]) if !Room.current.tags.include? "enemy_crows_nest"
	wait_while { running?("go2") }
end

def enemy_forward_crows_nest
	ship_type
	start_script("go2", ["enemy_forward_crows_nest"]) if !Room.current.tags.include? "enemy_forward_crows_nest"
	wait_while { running?("go2") }
end

def enemy_helm
	ship_type
	start_script("go2", ["enemy_helm"]) if !Room.current.tags.include? "enemy_helm"
	wait_while { running?("go2") }
end

def enemy_quarters
	ship_type
	start_script("go2", ["enemy_quarters"]) if !Room.current.tags.include? "enemy_quarters"
	wait_while { running?("go2") }
end

def determine_to_engage
	@enemy_type_list = Array.new
	@enemy_ship_list = Array.new
	@enemy_cannon_list = Array.new
	@enemy_type_list.push ("pirate") if UserVars.osacommander["enemy_pirate"]
	@enemy_type_list.push ("krolvin") if UserVars.osacommander["enemy_krolvin"]
	@enemy_type_list.push ("undead") if UserVars.osacommander["enemy_undead"]
	@enemy_ship_list.push ("Sloop") if UserVars.osacommander["board_sloop"]
	@enemy_ship_list.push ("Brigantine") if UserVars.osacommander["board_brigantine"]
	@enemy_ship_list.push ("Carrack") if UserVars.osacommander["board_carrack"]
	@enemy_ship_list.push ("Galleon") if UserVars.osacommander["board_galleon"]
	@enemy_ship_list.push ("Frigate") if UserVars.osacommander["board_frigate"]
	@enemy_ship_list.push ("Man O\' War") if UserVars.osacommander["board_man"]
	@enemy_cannon_list.push ("Sloop") if UserVars.osacommander["fire_sloop"]
	@enemy_cannon_list.push ("Brigantine") if UserVars.osacommander["fire_brigantine"]
	@enemy_cannon_list.push ("Carrack") if UserVars.osacommander["fire_carrack"]
	@enemy_cannon_list.push ("Galleon") if UserVars.osacommander["fire_galleon"]
	@enemy_cannon_list.push ("Frigate") if UserVars.osacommander["fire_frigate"]
	@enemy_cannon_list.push ("Man O\' War") if UserVars.osacommander["fire_man"]
	if (@enemy_type_list.include? UserVars.osacrew["enemy_type"]) and (@enemy_ship_list.include? UserVars.osacrew["enemy_ship_type"])
		UserVars.osacrew["engage"] = true
	else
		UserVars.osacrew["engage"] = false
	end
	if (@enemy_cannon_list.include? UserVars.osacrew["enemy_ship_type"])
		UserVars.osacrew["cannon_engage"] = true
	else
		UserVars.osacrew["cannon_engage"] = false
	end
end

def commander_vessel_messaging
	waitrt?
	@ph_vessel_messaging = rand(1..11)
	if @ph_vessel_messaging == 1
		fput "yell We Are Engaging A #{UserVars.osacrew["enemy_type"]} Vessel, All Hands Man Your Battlestations!"
	elsif @ph_vessel_messaging == 2
		fput "yell Surface Contact, Port Side, Bearing #{"%03d" % rand(225..315)}, #{UserVars.osacrew["enemy_type"]} Vessel Inbound!"
	elsif @ph_vessel_messaging == 3
		fput "yell Surface Contact, Starboard Side, Bearing #{"%03d" % rand(46..135)}, #{UserVars.osacrew["enemy_type"]} Vessel Inbound!"
	elsif @ph_vessel_messaging == 4
		fput "yell Surface Contact, Dead Ahead, Bearing #{"%03d" % rand(0..45)}, #{UserVars.osacrew["enemy_type"]} Vessel Inbound!"
	elsif @ph_vessel_messaging == 5
		fput "yell Surface Contact, Dead Ahead, Bearing #{"%03d" % rand(316..359)}, #{UserVars.osacrew["enemy_type"]} Vessel Inbound!"	
	elsif @ph_vessel_messaging == 6
		fput "yell Surface Contact, Dead Astern, Bearing #{"%03d" % rand(136..224)}, #{UserVars.osacrew["enemy_type"]} Vessel Inbound!"
	elsif @ph_vessel_messaging == 7
		fput "yell Cannon Fire Inbound, Brace For Shock!"
		fput "yell #{UserVars.osacrew["enemy_type"]} Vessel Approaching!"
	elsif @ph_vessel_messaging == 8
		fput "yell #{UserVars.osacrew["enemy_type"]} Ship Detected, She's Caught Between The Devil And The Deep Blue Sea!"
		fput "yell To Your Battlestations!"
	elsif @ph_vessel_messaging == 9
		fput "yell #{UserVars.osacrew["enemy_type"]} Vessel Inbound! She Be Sailing Close To The Wind Me Boys!"
		fput "yell Time To Make Waves!"
	elsif @ph_vessel_messaging == 10
		fput "yell #{UserVars.osacrew["enemy_type"]} Vessel Starboard Side!"
		fput "yell She Be Choc-a-Block, Knock Seven Bells!"
	elsif @ph_vessel_messaging == 11
		fput "yell #{UserVars.osacrew["enemy_type"]} Vessel Port Side!"
		fput "yell She Be Choc-a-Block, Knock Seven Bells!"
	end
end

def do_not_board
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Crew, We Do Not Have Authorization To Engage This Vessel!")
	helm
	fput "turn wheel port"
	waitfor /The (.*) drifts steadily toward the (.*) port/
	if UserVars.osacrew["crewsize"].count != 0
		commander_call_muster
	end
	if UserVars.osacrew["crewsize"].count != 0
		commander_get_underway
	else
		commander_solo_get_underway
	end
end

def commander_broadcast_location
	main_deck
	fput "push gangplank"
	Lich::Util.quiet_command("look ocean", /\[(.*)\]/, end_pattern = /(Open waters: (.*)|Obvious paths: (.*))/, include_end = false ,timeout = 0.4, silent = true)
        sleep 0.25
    room_title = room_description = room_exits_string = nil
    history = ($_SERVERBUFFER_ + $_SERVERBUFFER_.history)
    history.each_index { |i|
            history[i-7..i].each { |line|
                if line =~ /<style id="roomName" \/>(.*)$/
                    room_title = $1.strip
                elsif line =~ /<style id="roomDesc"\/>(.*?)<style id=""\/>/
                    room_description = $1.strip.gsub(/<.*?>/, '')
                elsif line =~ /(Obvious (?:paths|exits): .*)/
                    room_exits_string = $1.strip.gsub(/<.*?>/, '')
                end
                }}
    room = Map.list.find { |room| room.title.include?(room_title) and room.desc.include?(room_description) and room.paths.include?(room_exits_string) }
    unless room
        desc_regex = /#{Regexp.escape(room_description).gsub(/\\\.(?:\\\.\\\.)?/, '|')}/
        room = Map.list.find { |room| room.title.include?(room_title) and room.paths.include?(room_exits_string) and room.desc.find { |desc| desc =~ desc_regex } }
    end
    LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "The Ship Is Now Moored In #{room.location}. Room Number: #{room.id} #{room.title[0]}")
	if !UserVars.osacrew["gangplank"].nil? 
		Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	end
	commander_clear_gangplank
	UserVars.osacrew["gangplank"] = room.id
	Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	commander_map_gangplank
	if UserVars.osacrew["othersailors"]
		commander_give_permission
	end
end

def determine_enemy_type
	result = Lich::Util.quiet_command("look ocean", /\[(.*)\]/, end_pattern = /(Open waters: (.*)|Obvious paths: (.*))/, include_end = false ,timeout = 0.5, silent = true)
	if result.to_s =~ /You notice (.*) approaching your position/
		UserVars.osacrew["enemyship"] = $1
		if $1.include? "ethereal"
			UserVars.osacrew["enemy_type"] = "undead"
			UserVars.osacombat["creature_type"] = "undead"
		end
		if $1.include? "krolvin"
			UserVars.osacrew["enemy_type"] = "krolvin"
			UserVars.osacombat["creature_type"] = "living"
		end
		if $1.include? "dark"
			UserVars.osacrew["enemy_type"] = "pirate"
			UserVars.osacombat["creature_type"] = "living"
		end
		if $1.downcase.include? "sloop"
			UserVars.osacrew["enemy_ship_type"] = "Sloop"
			UserVars.osacrew["enemy_ship_map"] = ["enemy_main_deck", "enemy_crows_nest", "enemy_helm", "enemy_cargo_hold"]
		elsif $1.downcase.include? "brigantine"
			UserVars.osacrew["enemy_ship_type"] = "Brigantine"
			UserVars.osacrew["enemy_ship_map"] = ["enemy_forward_deck", "enemy_main_deck", "enemy_crows_nest", "enemy_helm", "enemy_cargo_hold"]
		elsif $1.downcase.include? "carrack"
			UserVars.osacrew["enemy_ship_type"] = "Carrack"
			UserVars.osacrew["enemy_ship_map"] = ["enemy_bow", "enemy_forward_deck", "enemy_main_deck", "enemy_crows_nest", "enemy_helm", "enemy_cargo_hold"]
		elsif $1.downcase.include? "galleon"
			UserVars.osacrew["enemy_ship_type"] = "Galleon"
			UserVars.osacrew["enemy_ship_map"] = ["enemy_bow", "enemy_forward_deck", "enemy_main_deck", "enemy_crows_nest", "enemy_helm", "enemy_cargo_hold"]
		elsif $1.downcase.include? "frigate"
			UserVars.osacrew["enemy_ship_type"] = "Frigate"
			UserVars.osacrew["enemy_ship_map"] = ["enemy_forward_deck", "enemy_main_deck", "enemy_crows_nest", "enemy_helm", "enemy_cargo_hold"]
		elsif $1.downcase.include? "man o' war"
			UserVars.osacrew["enemy_ship_type"] = "Man O' War"
			UserVars.osacrew["enemy_ship_map"] = ["enemy_bow", "enemy_forward_deck", "enemy_forward_crows_nest", "enemy_mid_deck", "enemy_main_deck", "enemy_crows_nest", "enemy_helm", "enemy_cargo_hold"]
		end
	end
end

def cleanup_target_routine
	if UserVars.osacrew["enemy_type"] == "pirate"
		Lich::Util.quiet_command("target random", /(Could not find a valid target\.|You are now targeting (.*)\.)/, end_pattern = /(Could not find a valid target\.|You are now targeting (.*)\.)/, include_end = false ,timeout = 0.2, silent = true)
		if GameObj.targets.count > 0
			fput "say Send them to the bottom boys!"
		end
	end
	waitrt?
	waitcastrt?
	wait_until {GameObj.targets.count {|npc| npc.status !~ /dead|gone/ && npc.name !~ /animated| arm|arms|tentacle|tentacles/ } < 1}
	waitrt?
	waitcastrt?
	cleanup_loot_routine
end

def cleanup_loot_routine
	dead_npcs = GameObj.npcs.find_all { |i| i.status == 'dead' && i.type !~ /escort/i }
	if dead_npcs.count > 0
		Script.run "eloot"
		wait_while { running?("eloot") }
		if GameObj.loot.find_all{|item| item.type =~ /box/}
			UserVars.osacrew["straggler_boxes"].push (Room.current.id)
		end
	else
		return
	end
end

def change_stance(new_stance, force = true)
    return if Spell[216].active? || dead?
    perfect_stance = nil
    if new_stance =~ /10|20|30|40|50|60|70|80|90|100/i
      perfect_stance = new_stance
      new_stance = "advance" if perfect_stance =~ /10|20/i
      new_stance = "forward" if perfect_stance =~ /30|40/i
      new_stance = "neutral" if perfect_stance =~ /50|60/i
      new_stance = "guarded" if perfect_stance =~ /70|80/i
      new_stance = "defensive" if perfect_stance =~ /90|100/i
    end
    if (stance() =~ /#{new_stance}/)
      return
    elsif (checkcastrt() > 0 && new_stance =~ /def/)
      return if stance() == 'guarded'
    end

    if ((force) && (perfect_stance != nil) && (CMan.known?("Stance Perfection")))
      dothistimeout("cman stance #{perfect_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    elsif (force)
      dothistimeout("stance #{new_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    else
      fput "stance #{new_stance}"
    end
end

def wait_rt
	pause 0.1
	waitrt?
	waitcastrt?
end	

def stance_defensive
	wait_rt
    change_stance('defensive')
end

def stance_offensive
	wait_rt
    change_stance('offensive')
end

def cleanup_aoe_routine
	if UserVars.osacombat["stealth_disabler"] == 0
		stance_defensive
		fput "search"
		waitrt?
		waitcastrt?
	elsif UserVars.osacombat["stealth_disabler"] == 1
		$stealth_disabler = "Dispel Invisibility"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 2
		$stealth_disabler = "Searing Light"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 3
		$stealth_disabler = "Light"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 4
		$stealth_disabler = "Censure"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 5
		$stealth_disabler = "Divine Wrath"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 6
		$stealth_disabler = "Elemental Wave"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 7
		$stealth_disabler = "Major Elemental Wave"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 8
		$stealth_disabler = "Cone of Elements"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 9
		$stealth_disabler = "Sunburst"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 10
		$stealth_disabler = "Nature's Fury"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 11
		$stealth_disabler = "Grasp of the Grave"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 12
		$stealth_disabler = "Implosion"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 13
		$stealth_disabler = "Tremors"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 14
		$stealth_disabler = "Call Wind"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 15
		$stealth_disabler = "Aura of the Arkati"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 16
		$stealth_disabler = "Judgement"
		cast_disabler
	elsif UserVars.osacombat["stealth_disabler"] == 17
		stance_offensive
		fput "cman eviscerate"
		stance_defensive
	elsif UserVars.osacombat["stealth_disabler"] == 18
		stance_offensive
		Warcry.use("Cry", "All")
		stance_defensive
	elsif UserVars.osacombat["stealth_disabler"] == 19
		stance_defensive
		fput "symbol of sleep"
		waitrt?
		waitcastrt?
	end
end

def cast_disabler
	if !Spell["#{$stealth_disabler}"].known?
		respond ""
		respond "You Have Selected A Stealth Diabling Spell You Do Not Know, Please Select One Known To Your Character. Defaulting To Search"
		respond ""
		return
		fput "search"
		waitrt?
		waitcastrt?
	else
		fput "prep #{$stealth_disabler}"
		fput "cast"
		waitrt?
		waitcastrt?
		if $stealth_disabler == "Light"
			fput "search"
			waitrt?
			waitcastrt?
		end
	end
end

def cleanup_pirate_routine
	cleanup_aoe_routine
	result = matchtimeout 5, /slashes with a|lunges forward|flies out of the shadows toward|is revealed from hiding|boldly accosts|leaps out of (his|her) hiding place|swings (.*) at you!|stumbles slightly as (he|she)|springs from hiding|is forced out of hiding/
		if result.to_s =~ /slashes with a|lunges forward|is revealed from hiding|boldly accosts|leaps out of (his|her) hiding place|swings (.*) at you!|stumbles slightly as (he|she)|springs from hiding|is forced out of hiding/
			waitrt?
			waitcastrt?
			cleanup_target_routine
		elsif result.to_s =~ /flies out of the shadows toward/
			cleanup_aoe_routine
			cleanup_target_routine
		else
			return
		end
end

def cleanup_listen_routine
	if !checkroom.include?	("Enemy Ship")
		return
	end
	waitrt?
	waitcastrt?
	result = dothistimeout "listen", 3, /You've cleared out all the enemies aboard the|You listen carefully for any potential threats/
		if result.to_s =~ /You've cleared out all the enemies aboard the/
			waitrt?
			waitcastrt?
			UserVars.osacrew["cleanup_done"] = true
		elsif result.to_s =~ /You listen carefully for any potential threats/
			waitrt?
			waitcastrt?
			return
		end
end

def cleanup_check_for_enemies
	if !checkroom.include?	("Enemy Ship")
		enemy_main_deck
	end
	waitrt?
	waitcastrt?
	result = dothistimeout "listen", 3, /You've cleared out all the enemies aboard the|You listen carefully for any potential threats/
		if result.to_s =~ /You've cleared out all the enemies aboard the/
			waitrt?
			waitcastrt?
			UserVars.osacrew["cleanup_done"] = true
			echo "Cleanup Completed, The Ship Is Now Safe"
			cleanup_finished
		elsif result.to_s =~ /You listen carefully for any potential threats/
			waitrt?
			waitcastrt?
			@ship_rooms_present.each do |n|
				start_script("go2", [n])
				wait_while { running?("go2") }	
				cleanup_listen_routine
				if UserVars.osacrew["cleanup_done"]
					cleanup_loot_routine
					break
				end
				if UserVars.osacrew["enemy_type"] == "pirate"
					cleanup_pirate_routine
				end
				cleanup_loot_routine
				cleanup_target_routine
				if UserVars.osacrew["cleanup_done"]
					break
				end
			end
			cleanup_check_for_enemies
		end
end

def cleanup_begin_routine
	UserVars.osacrew["cleanup_done"] = false
	UserVars.osacrew["piratehunter"] = false
	determine_enemy_type
	@ship_rooms_present = Array.new
	@ship_rooms_present = UserVars.osacrew["enemy_ship_map"]
	UserVars.osacrew["ship_map"].each do |n|
		@ship_rooms_present.push(n)
	end
	@ship_rooms_present.delete("captains_quarters")
	cleanup_check_for_enemies
end

def cleanup_finished
	if  UserVars.osacrew["cleanup_type"] == nil
		commander_end_routine
	end
	if UserVars.osacrew["cleanup_type"] == "raze"
		if running? "osacombat"
			stop_script "osacombat"
			wait_until {!running? "osacombat"}
		end
		pause 3
		enemy_main_deck
	end
	if UserVars.osacrew["cleanup_type"] == "spawn"
		if running? "osacombat"
			stop_script "osacombat"
			wait_until {!running? "osacombat"}
		end
		pause 3
		enemy_quarters
	end
end

def recieve_bless
result = matchtimeout 15, /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
	if result.to_s =~ /a moment and then gently dissipates|leaving a soft white afterglow|appears to become incorporated into it|but it quickly returns to normal/
		return
	else
		respond ""
		respond "                                  Something May Have Gone Wrong With The Bless                               "
		respond ""
	end
end

def self_bless
	if Spell[1604].known? and Spell[1604].affordable?
		Spell[1604].cast
	end
	waitcastrt?
	if Spell[304].known? and Spell[304].affordable?
		Spell[304].cast
	else
		fput "symbol bless"
	end
end

def get_self_bless
	if (UserVars.osacombat["needbless"]) and (UserVars.osacrew["blesser"])
		if UserVars.osacombat["uachands"].empty? and UserVars.osacombat["uacfeet"].empty?
			fput "gird"
			pause 1
		else
			if !UserVars.osacombat["uachands"].empty?
				fput "remove #{UserVars.osacombat["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacombat["uacfeet"].empty?
				fput "remove #{UserVars.osacombat["uacfeet"]}"
			end
		end
		if !GameObj.left_hand.id.nil? && GameObj.right_hand.id.nil?
			fput "swap"
		end
		if !GameObj.left_hand.id.nil? && !GameObj.right_hand.id.nil?
			self_bless
			waitrt?
			waitcastrt?
			fput "swap"
			self_bless
			waitrt?
			waitcastrt?
			fput "swap"
		else
			self_bless
			waitrt?
			waitcastrt?
		end
		if UserVars.osacombat["uachands"].empty? and UserVars.osacombat["uacfeet"].empty?
			fput "store both"
			return
		else
			if !UserVars.osacombat["uachands"].empty?
				fput "wear #{UserVars.osacombat["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacombat["uacfeet"].empty?
				fput "wear #{UserVars.osacombat["uacfeet"]}"
			end
		end	
	end
end

def get_bless
	if UserVars.osacombat["needbless"]
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Need Blessed Please!")
		waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"#{checkname}/
		if UserVars.osacombat["uachands"].empty? and UserVars.osacombat["uacfeet"].empty?
			fput "gird"
		else
			if !UserVars.osacombat["uachands"].empty?
				fput "remove #{UserVars.osacombat["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacombat["uacfeet"].empty?
				fput "remove #{UserVars.osacombat["uacfeet"]}"
			end
		end
		if !GameObj.left_hand.id.nil? && GameObj.right_hand.id.nil?
			fput "swap"
		end
		if !GameObj.left_hand.id.nil? && !GameObj.right_hand.id.nil?
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Have Two.")
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Am Ready.")
			recieve_bless
			fput "swap"
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "Ok, The Next One Is Ready.")
			recieve_bless
		else
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Have One.")
			LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["blesser"] }, "I Am Ready.")
			recieve_bless
		end
		if UserVars.osacombat["uachands"].empty? and UserVars.osacombat["uacfeet"].empty?
			fput "store both"
		else
			if !UserVars.osacombat["uachands"].empty?
				fput "wear #{UserVars.osacombat["uachands"]}"
				pause 0.5
			end
			if !UserVars.osacombat["uacfeet"].empty?
				fput "wear #{UserVars.osacombat["uacfeet"]}"
			end
		end	
	end
end

def cast_bless
	result = matchtimeout 5, /^\[Private\]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private\]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
		if result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Am Ready.\"|^\[Private\]-GSIV:#{@name}\: \"Ok, The Next One Is Ready.\"/
			if Spell[1604].known? and Spell[1604].affordable?
				Spell[1604].cast("#{@name}")
			end
			waitcastrt?
			if Spell[304].known? and Spell[304].affordable?
				Spell[304].cast("#{@name}")
			else
				fput "symbol bless #{@name}"
			end
		end
end
		
def give_bless
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{@name}")
	result = matchtimeout 5, /^\[Private\]-GSIV:#{@name}\: \"I Have One.\"|^\[Private\]-GSIV:#{@name}\: \"I Have Two.\"/
		if result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Have One.\"/
			cast_bless
		elsif result.to_s =~ /^\[Private\]-GSIV:#{@name}\: \"I Have Two.\"/
			2.times{cast_bless}
		end
end

def who_needs_blessed
	result = matchtimeout 1, /^\[Private\]-GSIV:(.*)\: \"I Need Blessed Please!\"/
	if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Need Blessed Please!\"/
		@blessname.push($1)
		who_needs_blessed
	end
end

def begin_bless
	if (Spell[304].known? or Spell[9802].known?) && UserVars.osacombat["givebless"] == true
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Will Be Providing All Crew Blessings!")
		@blessname = Array.new
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Does Anyone Need A Bless?")
		who_needs_blessed
		@blessname.each do |n|
			@name = n
			give_bless
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "The Crew Has Been Properly Blessed!")
	else
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Can Anyone Bless?")
		result = matchtimeout 3, /^\[Private\]-GSIV:(.*)\: \"I Can Captain!\"/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"I Can Captain!\"/
			UserVars.osacrew["blesser"] = $1
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "#{UserVars.osacrew["blesser"]}, Will You Please Bless The Crew?")
			waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"Does Anyone Need A Bless\?\"/
			get_bless
			waitfor /^\[#{UserVars.osacrew["crew"]}\]-GSIV:#{UserVars.osacrew["blesser"]}\: \"The Crew Has Been Properly Blessed Captain!"/
		else
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "We Do Not Have Anyone Present Who Can Bless The Crew, We Will Continue Without!")
		end
	end		
end

def lower_sail
	result = dothistimeout "lower sail", 3, /you slowly lower the (.*) sail until it is at half mast|you slowly lower the (.*) sail until it is fully open|far as it can go!/
        waitrt?
	if result.to_s =~ /...wait/
		waitrt?
		lower_sail
	elsif result.to_s =~ /you slowly lower the (.*) sail until it is at half mast/
		waitrt?
		lower_sail
	elsif result.to_s =~ /you slowly lower the (.*) sail until it is fully open/
		@lowered_sail = true
		waitrt?
	elsif result.to_s =~ /far as it can go!/
		end
end

def raise_anchor
	result = dothistimeout "push capstan", 3, /begin to push|one final push|anchor is already up/
        waitrt?
	if result.to_s =~ /...wait/
		waitrt?
		raise_anchor
	elsif result.to_s =~ /begin to push/
		waitrt?
		raise_anchor
	elsif result.to_s =~ /one final push/
		@anchor_aweigh = true
		waitrt?
	elsif result.to_s =~ /anchor is already up/
		return
	end
end

def one_mast
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Main Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Main Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
end

def two_masts
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def three_masts
	fput "pull gangplank"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Mizzen Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		fput "yell Main Mast Unfurled"
		@lowered_sail = false
	end
	pause 0.5
	move "east"
	lower_sail
	if @lowered_sail
		waitrt?
		if checkname == UserVars.osacrew["commander"]
			fput "yell Fore Mast Unfurled, She's Ready to Sail!"
		else
			fput "yell Fore Mast Unfurled, She's Ready to Sail Captain!"
		end
		@lowered_sail = false
	end
	pause 0.5
	move "west"
	pause 0.5
	move "west"
	pause 0.5
	move "west"
end

def commander_task_complete
	@taskcount = Array.new
	@taskcount.clear
	UserVars.osacrew["crewsize"].count.times {
	result = matchtimeout 600, /^\[Private\]-GSIV:(.*)\: \"Task Complete\"$/
	if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"Task Complete\"$/
			@taskcount.push($1)
	end}
end

def commander_crew_request
		result = matchtimeout 5, /^\[Private\]-GSIV:(.*)\: \"Crewman (.*), Requesting Permission To Come Aboard!"$/
		if result.to_s =~ /^\[Private\]-GSIV:(.*)\: \"Crewman (.*), Requesting Permission To Come Aboard!"$/
			@commander_request.push($2)
			commander_crew_request
		else
			respond "
			No Remaining Crew Requests, Moving On!
			"
		end
end

def format_number(number)
  num_groups = number.to_s.chars.to_a.reverse.each_slice(3)
  num_groups.map(&:join).join(',').reverse
end

def end_of_encounter
@endbalancewithcommas = format_number(@endbalance)
respond ""
respond ""
respond ""
respond ""
_respond "\<preset id=\"thought\"\>" + "                             --------------------------------------------------------------------------------" + "\<\/preset\>"
respond ""
_respond "\<preset id=\"speech\"\>" + "                                      --* Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} *--" + "\<\/preset\>"
respond ""                            
_respond "\<preset id=\"speech\"\>" + "                                          Time To Board Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{(@boardingtime/60).as_time}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Time To Clear Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{(@clearingtime/60).as_time}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Total Enemies Defeated This Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@enemy_count.gsub(/"|\[|\]/, '')}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Total Boxes Found This Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@amount_of_boxes}" + "\<\/preset\>"
respond ""  
_respond "\<preset id=\"speech\"\>" + "                                          Total Silver Made This Vessel:" + "\<\/preset\>"
_respond "\<preset id=\"monster\"\>" + "                                          #{@endbalancewithcommas}" + "\<\/preset\>"
respond ""
_respond "\<preset id=\"thought\"\>" + "                             --------------------------------------------------------------------------------" + "\<\/preset\>"
respond ""
respond ""
respond ""
respond ""
LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} | Time To Board Vessel: #{(@boardingtime/60).as_time}| Time To Clear Vessel: #{(@clearingtime/60).as_time} | Total Enemies Defeated This Vessel: #{@enemy_count.gsub(/"|\[|\]/, '')} | Total Boxes Found This Vessel: #{@amount_of_boxes} | Total Silver Made This Vessel: #{@endbalancewithcommas}")
if UserVars.osacrew["stowaways"]
	fput "whisper ooc group Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join}| Time To Board Vessel: #{(@boardingtime/60).as_time} | Time To Clear Vessel: #{(@clearingtime/60).as_time} | Total Enemies Defeated This Vessel: #{@enemy_count.gsub(/"|\[|\]/, '')} | Total Boxes Found This Vessel: #{@amount_of_boxes} | Total Silver Made This Vessel: #{@endbalancewithcommas}"
end
end

def enemy_counter
	result = dothistimeout "listen", 10, /\[Enemies Left\: (.*)\]/
		if result.to_s =~ /Enemies Left: (.*)\]/
			@enemy_count = $1
		end
end

def commander_check_crew
	if UserVars.osacrew["crewsize"].nil?
		respond ""
		respond "                       You Must First Perform A Muster                                                               "
		respond ""
		 
	end
	@crew_check = (@crew_check + 1)
	if (@crew_check + UserVars.osacrew["crewsize"].count) > UserVars.osacrew["commander_max_crew"]
		LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_request }, "Permission Denied, Im Sorry Shipmate But The Ship Is Too Full Right Now. Try Again Later!")
	else
		LNet.send_message(attr = { 'type' => 'private', 'to' => @crew_request }, "Permission Granted, Come Aboard!")
		UserVars.osacrew["crewsize"].push(@crew_request)
		UserVars.osacrew["crewsize"] = UserVars.osacrew["crewsize"].uniq
	end
end

def commander_final_approach
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	main_deck
	waitfor /collide against your/
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	enemy_main_deck
	@helmsman_end_time = Time.now
	@boardingtime = (@helmsman_end_time - @helmsman_start_time)
	return
end

def commander_final_approach_2
	wait_while {GameObj.pcs.any? {|s| s.status =~ /sitting|^lying|prone|stunned/}}
	enemy_main_deck
	@helmsman_end_time = Time.now
	@boardingtime = (@helmsman_end_time - @helmsman_start_time)
	return
end

def commander_navigator
	wait_while { running?("ecure") }
	result = dothistimeout "turn wheel ship", 120, /You will be upon the|of boarding range!|The sides of the (.*) collide against your (.*)!|in boarding range!|ways out!|sailing closer!|...wait|Tenebrous Cauldron.  Victory is yours!/
	if result.to_s =~ /of boarding range!|ways out!|sailing closer!/
		commander_navigator
	elsif result.to_s =~ /...wait/
		waitrt?
		waitcastrt?
		commander_navigator
	elsif result.to_s =~ /Tenebrous Cauldron.  Victory is yours!/
			UserVars.osacrew["boarding"] = false
			commander_sunk_ship
	elsif result.to_s =~ /in boarding range!|You will be upon the/
		if @warning == true
			commander_final_approach
		end
		waitrt?
		@warning = true
		fput "group open"
		fput "turn wheel ship"
		waitrt?
		pause 0.5
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Thirty second warning, drop what yer doing and prepare for battle. Here they come!")
		fput "yell Thirty second warning, drop what yer doing and prepare for battle. Here they come!"
		commander_final_approach
	elsif result.to_s =~ /The sides of the (.*) collide against your (.*)!/
		commander_final_approach_2
	else
		commander_navigator
	end
end

def commander_helmsman
	waitrt?
	wait_until {!checkstunned}
	wait_until {!checkwebbed}
	wait_until {!checkbound}
	wait_while { running?("ecure") }
	result = dothistimeout "turn wheel ship", 600, /The sides of the (.*) collide against your (.*)!|in boarding range!|You will be upon the|Tenebrous Cauldron.  Victory is yours!/
		if result.to_s =~ /in boarding range!|You will be upon the/
			if @warning == true
				commander_final_approach
			end
			waitrt?
			pause 0.5
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Thirty second warning, drop what yer doing and prepare for battle. Here they come!")
			fput "yell Thirty second warning, drop what yer doing and prepare for battle. Here they come!"
			@warning = true
			fput "group open"
			commander_final_approach
		elsif result.to_s =~ /Tenebrous Cauldron.  Victory is yours!/
			UserVars.osacrew["boarding"] = false
			commander_sunk_ship
		elsif result.to_s =~ /The sides of the (.*) collide against your (.*)!/
			commander_final_approach_2
		end
end

def commander_check_role
	if UserVars.osacrew["helmsman_enabled"] && !UserVars.osacrew["cannon_engage"]
		commander_navigator
	else
		commander_helmsman
	end
end

def commander_check_balance
	balance_line = Lich::Util.quiet_command("bank acc", /You currently have the following amounts on deposit\:/, end_pattern = /(You currently have (.*) inter-town bank transfer option available.)/, include_end = false ,timeout = 1.5, silent = true)
	if balance_line.to_s =~ /Total\: ([0-9,]+)/
		@bankbalance = $1.to_s.delete(',').to_i
	end
end

def commander_determine_group_members
	UserVars.osacrew["everyone_in_my_group"] = Array.new
	UserVars.osacrew["everyone_in_my_group"].clear
	res = Lich::Util.quiet_command("group", /You are leading (.*)|You are not currently in a group.|You are grouped with (.*)./, end_pattern = /GROUP HELP for a list of other options./, include_end = false ,timeout = 0.6, silent = true)
	grouped = res.to_s.scan(/[A-Z]\w*/).flatten.uniq
	grouped.delete_if { |name| name =~  /Your|You/i }
	grouped.each{|member| UserVars.osacrew["everyone_in_my_group"].push(member) if !UserVars.osacrew["everyone_in_my_group"].include? (member) }
end

def commander_apply_support
	@supportlist.each do |n, t|
		@support_rec = n
		@support_type = t
		if @support_type == "Blessing"
			waitrt?
			fput "armor blessing #{@support_rec}"
			pause 5
		elsif @support_type == "Reinforcement"
			waitrt?
			fput "armor reinforcement #{@support_rec}"
			pause 5
		elsif @support_type == "Support"
			waitrt?
			fput "armor support #{@support_rec}"
			pause 5
		elsif @support_type == "Casting"
			waitrt?
			fput "armor casting #{@support_rec}"
			pause 5
		elsif @support_type == "Evasion"
			waitrt?
			fput "armor evasion #{@support_rec}"
			pause 5
		elsif @support_type == "Fluidity"
			waitrt?
			fput "armor fluidity #{@support_rec}"
			pause 5
		elsif @support_type == "Stealth"
			waitrt?
			fput "armor stealth #{@support_rec}"
			pause 5
		end
	end
end

def commander_self_armor_spec
	if UserVars.osacrew["my_armor_spec"].downcase.include? "blessing"
		pause 5
		waitrt?
		fput "armor blessing"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "reinforcement"
		pause 5
		waitrt?
		fput "armor reinforcement"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "support"
		pause 5
		waitrt?
		fput "armor support"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "casting"
		pause 5
		waitrt?
		fput "armor casting"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "evasion"
		pause 5
		waitrt?
		fput "armor evasion"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "fluidity"
		pause 5
		waitrt?
		fput "armor fluidity"
	elsif UserVars.osacrew["my_armor_spec"].downcase.include? "stealth"
		pause 5
		waitrt?
		fput "armor stealth"
	end
end

def need_mana
	while running?("ewaggle")
		if percentmana < 15
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
			wait_until {percentmana > 15}
		end
	end
end

def mana_share
	$mana_type = Array.new
	$mana_type.clear
	$my_mana_type = Array.new
	$my_mana_type.clear
	if (Skills.smc >= 24)
		$mana_type.push ("Spiritual")
		$my_mana_type.push ("Spiritual")
	end
	if (Skills.mmc >= 24)
		$mana_type.push ("Mental")
		$my_mana_type.push ("Mental")
	end
	if (Skills.emc >= 24)
		$mana_type.push ("Elemental")
		$my_mana_type.push ("Elemental")
	end
	if $mana_type.count > 1
		$new_mana_type = $mana_type.last()
		$mana_type.delete "#{$mana_type.last()}"
		$mana_type.push ("or #{$new_mana_type}")
	end
	if $mana_type.count.to_i == 3
		$mana_message = "I Need #{$mana_type[0]}, #{$mana_type[1]} #{$mana_type[2]} Mana!"
	end
	if $mana_type.count.to_i == 2
		$mana_message = "I Need #{$mana_type[0]} #{$mana_type[1]} Mana!"
	end
	if $mana_type.count.to_i == 1
		$mana_message = "I Need #{$mana_type[0]} Mana!"
	end
end

def spellup_time_left
	$timeleft = Array.new
	Spell.active.each { |s| 
		if ((s.timeleft <= 250) and (s.timeleft > 2)) 
			$timeleft.push (s.timeleft)
		end}
		UserVars.osacommander["waggletimeleft"] = ($timeleft.sum/$timeleft.count)
end

def commander_spell_up
	commander_call_muster
	if !UserVars.osacrew["medical_officer"].empty? && UserVars.osacommander["use_bread"]
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Let Us Break Bread Together!")
		waitfor /^\[#{UserVars.osacrew["crew"]}\]-(GSIV:#{UserVars.osacrew["medicalofficer"]}|You): "Bread Is Served!\"/
		pause 1
	end
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Does Anyone Need Armor Adjustments?")
	pause 4
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Spells")
	spellup = Lich::Util.quiet_command("mana", /Normal/, end_pattern = /You have used the MANA SPELLUP ability (.*) out of (.*) times for today\./, include_end = true ,timeout = 0.4, silent = true)
	if spellup.to_s =~ /You have used the MANA SPELLUP ability (.*) out of (.*) times for today\./
		if ($2 == "0") or ($1 == $2 )
			$mana_spellup = false
		else
			$mana_spellup = true
		end
		if !UserVars.osacrew["mana_spellup"]
			$mana_spellup = false
		end
		if $mana_spellup
			spellup_time_left
			if (UserVars.osacommander["waggletimeleft"] <= 90)
				waitrt?
				waitcastrt?
				pause 0.2
				fput "mana spellup"
			end
		end
	end
	spellup
	if UserVars.osacrew["selfspellup"] == true
			start_script("ewaggle", ['--start-at=240', '--stop-at=240', '--stop-before=500', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on'])
	end
	commander_task_complete
	wait_until { !running?("ewaggle") }
	if UserVars.osacrew["groupspellup"] == true
		commander_determine_group_members
		UserVars.osacrew["everyone_in_my_group"].delete(checkname)
		UserVars.osacrew["everyone_in_my_group"].each do |n|
			$pc = n
			start_script("ewaggle", ['--start-at=240', '--stop-at=240', '--stop-before=500', '--refreshable-min=30', '--use-multicast=on', '--use-power=on', '--use-concentration=on', '--use-mana=on', $pc])
			need_mana
		end
	end
	if UserVars.osacrew["armor_specs"] == true
		commander_apply_support
		@supportlist.clear
	end
	commander_self_armor_spec
	pause 5
	fput "group open"
	UserVars.osacrew["crewsize"].each{|pc|;fput "hold #{pc}"}
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Spell Up Completed")
end

def check_for_muster
	$call_muster = false
	UserVars.osacrew["crewsize"].each do |n|
		$call_muster = true if !checkpcs.include? (n)
	end
	checkpcs.each do |n|
		$call_muster = true if !UserVars.osacrew["crewsize"].include? (n)
	end
end

def commander_take_muster
	muster = matchtimeout 6, /Crewman (.*) Reporting For Duty Captain/
	if muster.to_s =~ /Crewman (.*) Reporting For Duty Captain/
        crewmate = $1
        UserVars.osacrew["crewsize"].push(crewmate) if !UserVars.osacrew["crewsize"].include?(crewmate)
		commander_take_muster
	end
end

def commander_call_muster
	check_for_muster
	if $call_muster
		UserVars.osacrew["crewsize"] = Array.new
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Quarters! All Hands To Quarters For Muster, Instruction and Inspection!")
		commander_take_muster
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "All Present And Accounted For! We Have #{UserVars.osacrew["crewsize"].count} Crew Onboard For A Total Compliment of #{UserVars.osacrew["crewsize"].count + 1} Personnel!")
		#do_client ";var set crewsize=#{@crewsize.count}"
		pause 3
	else
		respond ""
		respond " ------ Crewsize Matches All Crew Present, Skipping Muster! ------ "
		respond ""
	end
end

def commander_begin_balance
	commander_check_balance
	@beginbalance = "#{@bankbalance}"
end

def commander_after_balance
	commander_check_balance
	@afterbalance = "#{@bankbalance}"
end

def commander_left_hand
	if GameObj.left_hand.id.nil?
		return
	else
		if (GameObj.left_hand.noun.to_s == "box") or (GameObj.left_hand.noun.to_s == "strongbox") or (GameObj.left_hand.noun.to_s == "coffer") or (GameObj.left_hand.noun.to_s == "trunk") or (GameObj.left_hand.noun.to_s == "chest")
			fput "drop left"
		else 
			multifput "store left", "stow left"
		end
	end
end

def commander_right_hand
	if GameObj.right_hand.id.nil?
		return
	else
		if (GameObj.right_hand.noun.to_s == "box") or (GameObj.right_hand.noun.to_s == "strongbox") or (GameObj.right_hand.noun.to_s == "coffer") or (GameObj.right_hand.noun.to_s == "trunk") or (GameObj.right_hand.noun.to_s == "chest")
			fput "drop right"
		else 
			multifput "store right", "stow right"
		end
	end
end

def commander_sell_loot
	commander_begin_balance
	if UserVars.osacommander["use_security_officer"]
		start_script("eloot", ['start'])
		wait_while { running?("eloot") }
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacommander["securityofficer"] }, "Your Services Are Requested At #{UserVars.osacommander["security_officer_location"]} Crewman")
	end
	commander_have_boxes
	ELoot.data.settings[:loot_types].push("gem", "skin", "alchemy", "armor", "clothing", "collectible", "jewelry", "uncommon", "scroll", "reagent", "weapon", "wand", "valuable", "lockpick", "magic")
	start_script("go2", [UserVars.osacrew["gangplank"]])
	wait_while { running?("go2") }
	start_script("eloot", ['sell'])
	wait_while { running?("eloot") }
	commander_crew_share
end

def give_boxes_to_security_officer
	wait_until { checkpcs.include? (UserVars.osacommander["securityofficer"]) }
	#start_script('foreach', ['box', 'in', 'inventory;get', 'item;move', 'item', 'to', 'ground;sleep', '0.5'])
	#wait_while { running?("foreach") }
	ELoot.find_boxes.each do | box_in_inventory |
		multifput "get ##{box_in_inventory.id}", "drop ##{box_in_inventory.id}"
	end
	if @done_with_sec_off
		LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacommander["securityofficer"] }, "That's All Of Them!")
		waitfor /^\[Private\]-GSIV:#{UserVars.osacommander["securityofficer"]}\: \"All Set, Captain!"/
		commander_loot_boxes
		commander_loot_silvers
		commander_loot_room
		waitrt?
		pause 0.5
	end
end

def commander_loot_silvers
	boxes = GameObj.loot.find_all{|item| item.type =~ /box/}
	if UserVars.osacommander["fossil_charm"]
		boxes.each{|box|
		getsilver = dothistimeout "point charm at ##{box.id}", 5, /^You summon a swarm of/
			if getsilver.to_s =~ /^You summon a swarm of/
				waitrt?
				pause 0.5
			end
		}
	else
		boxes.each{|box| 
		getsilver = dothistimeout "get coins in ##{box.id}", 5, /^You gather the/
			if getsilver.to_s =~ /^You gather the/
				waitrt?
				pause 0.5
			end
		}
	end
end

def commander_loot_boxes
	boxes = GameObj.loot.find_all{|item| item.type =~ /box/}
	boxes.each{|box|
	fput "open ##{box.id}"
	lootmybox = dothistimeout "loot ##{box.id}", 5, /^You search through (.*) and note some interesting treasure but are unable to take any of it|There is no loot inside the (.*)|You search through (.*) and remove (.*) which you promptly stow away./
		if lootmybox.to_s =~ /^You search through (.*) and note some interesting treasure but are unable to take any of it/
			waitrt?
			pause 0.5
			start_script("eloot", ['sell'])
			wait_while { running?("eloot") }
			fput "loot ##{box.id}"
		elsif lootmybox.to_s =~ /^There is no loot inside the (.*)|You search through (.*) and remove (.*) which you promptly stow away./
			waitrt?
			pause 0.5
		end
	}
end	

def commander_loot_room
	loottheroom = dothistimeout "loot room", 2, /^In a desperate attempt to pick up and stow as much treasure as you can manage|With a discerning eye, you gather up what treasure|There is no loot/
	if loottheroom.to_s =~ /^In a desperate attempt to pick up and stow as much treasure as you can manage/
		commander_right_hand
		commander_left_hand
		start_script("go2", [UserVars.osacrew["gangplank"]])
		wait_while { running?("go2") }
		start_script("eloot", ['sell'])
		wait_while { running?("eloot") }
		main_deck
		commander_loot_room
	elsif loottheroom.to_s =~ /^With a discerning eye, you gather up what treasure|There is no loot/
		waitrt?
		pause 0.5
	end
end

def commander_yes_boxes
	commander_right_hand
	commander_left_hand
	pause 0.5
	if UserVars.osacommander["use_security_officer"]
		start_script("go2", [UserVars.osacommander["security_officer_location"]])
		wait_while { running?("go2") }
		give_boxes_to_security_officer	
	else
		start_script("go2", [UserVars.osacrew["gangplank"]])
		wait_while { running?("go2") }
		start_script("eloot", ["pool", "deposit"])
		wait_while { running?("eloot") }
	end
	pause 0.5
	main_deck
end

def commander_have_boxes
	result = dothistimeout "loot room", 1, /There is no loot/
	if result.to_s =~ /There is no loot/
		@done_with_sec_off = true
	end
		commander_yes_boxes
	if !@done_with_sec_off
		commander_have_boxes
	end
end

def commander_stowaways
	if UserVars.osacrew["stowaways"]
	fput "whisper group #{$whisper_message}"
	#fput "whisper group Please let me know when you're all set"
		echo "
		--------------------------------------------~~~~~~|       Waiting For Party Members           |~~~~~~~~-------------------------------------------------------
                                                  		|                                           |
		--------------------------------------------~~~~~~|  Please Type \"\Yes\"\ When Ready To Continue |~~~~~~~~-------------------------------------------------------
		"
		waitfor "A good positive attitude never hurts."
	end
end

def commander_give_permission
	@commander_request = Array.new
	@crew_check = 0
	commander_crew_request
	if !@commander_request.nil?
		@commander_request.each do |n|
			@crew_request = n
			commander_check_crew
		end
		@commander_request.clear
	end
end

def commander_check_task
checktask = Lich::Util.quiet_command("osa task", /OSA TASK/, end_pattern = /Expedites your current task cooldown./, include_end = false ,timeout = 0.75, silent = true)
    if checktask.to_s =~ /You do not currently have a task from the Sea Hag's Roost/
		@turnin = false
			fput "take board"
			pause 0.5
			return
	elsif checktask.to_s =~ /You should return to the Sea Hag's Roost to report your success/
		@turnin = true
		if saturated?
			if UserVars.osacrew["uselte"]
				fput "boost long"
			end
			wait_until {!saturated?}
		end
		fput "turn board"
		pause 0.5
		fput "take board"
		pause 0.5
		return
	elsif checktask.to_s =~ /Abandons your current task/
		return
	else
		return
    end
end

def commander_crew_share
	if UserVars.osacrew["crewsize"].count != 0
		captains_quarters
		wait_until {UserVars.osacrew["crewsize"] & checkpcs == UserVars.osacrew["crewsize"]}
		GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
		$whisper_message = "We are about to turn in the salvage crate and share loot, please let me know when you're all set"
		commander_stowaways
	end
	start_script("go2", ['handler'])
	wait_while { running?("go2") }
	fput "stow all"
	commander_start_handler
	if Room.current.location == "Kraken's Fall"
		start_script("go2", ['28950'])
		wait_while { running?("go2") }
	end
	commander_check_task
	if UserVars.osacrew["crewsize"].count != 0
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Task Time!")
		commander_task_complete
		$whisper_message = "Turn in any completed tasks and get a new one when you are ready. Then, please let me know when you're all set"
		commander_stowaways
	end
	start_script("go2", ['bank'])
	wait_while { running?("go2") }
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Crew, Sell Your Loot!")
	commander_task_complete
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Silvers")
	pause 2
	fput "depo all"
	if (UserVars.osacrew["othersailors"] == true) or (UserVars.osacrew["stowaways"] == true)
		if UserVars.osacommander["fwi"]
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			start_script("go2", ['bank'])
			wait_while { running?("go2") }
			fput "depo all"
			commander_after_balance
			@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
			if @endbalance > 0
				fput "withdraw #{@endbalance} silver"
				pause 0.5
			end
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			fput "share all"
			pause 0.5
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			start_script("go2", ['bank'])
			wait_while { running?("go2") }
			fput "depo all"
			@bank_room = Room.current
			fput "turn my #{Vars.mapdb_fwi_trinket}"
			wait_until {Room.current != @bank_room}
			$whisper_message = "Please deposit your silvers and let me know when you're all set"
			commander_stowaways
		end
		if !UserVars.osacommander["fwi"]
			fput "depo all"
			commander_after_balance
			@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
			if @endbalance > 0
				fput "withdraw #{@endbalance} silver"
				pause 0.5
			end
			fput "share all"
			pause 0.5
			fput "depo all"
			$whisper_message = "Please desposit your silvers and let me know when you're all set"
			commander_stowaways
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Deposit")
	else
		fput "depo all"
		commander_after_balance
		@endbalance = (@afterbalance.to_i - @beginbalance.to_i)
	end
	pause 2
	captains_quarters
	do_client ";eloot load"
	spellup_time_left
	if UserVars.osacrew["crewsize"].count > 1 and (UserVars.osacommander["waggletimeleft"] <= UserVars.osacommander["time_left_setting"].to_f)
		commander_spell_up
	else
		respond ""
		respond " ------ Average Spell Duration Is Above Setting, Skipping Spellup ------ "
		respond ""
	end
	end_of_encounter
	if UserVars.osacrew["crewsize"] == 0
		do_client ";force osacrew repairs"
	end
	return
end

def commander_go_gangplank
	result = dothistimeout "go gangplank", 1, /|As you approach the|Where are you trying to go|You make your way across the/
		if result.to_s =~ /As you approach the/
			fput "push gangplank"
			pause 0.5
			move "go gangplank"
			return
		elsif result.to_s =~ /You make your way across the/
			return
		elsif result.to_s =~ /Where are you trying to go?/
			fput "go #{@ship_type.split.first}"
			return
		else
			return
		end
end

def commander_after_raze
	waitrt?
	helm
	waitfor /The (.*) rapidly descends beneath the cold, dark waters./
	if UserVars.osacommander["netlauncher"]
		check_for_crate
	end
	helm
	fput "turn wheel port"
	waitfor /The (.*) drifts steadily toward the (.*) port/
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Moored!")
	waitrt?
	fput "yell Moored!"
	cargo_hold
	fput "take supply crate"
	multifput "put my crate in wood", "put my crate in balls"
	pause 1
	if (GameObj.left_hand.noun.to_s == "crate") or (GameObj.right_hand.noun.to_s == "crate")
		fput "drop supply crate"
	end
	if UserVars.osacrew["crewsize"].count != 0
		captains_quarters
		pause 1.5
		if UserVars.osacrew["stowaways"]
			fput "whisper group I will now sell all the loot and drop our boxes in the locksmith pool. I will return shortly. Please do not depart the ship."
		end
		multifput "disband","group open"
		pause 0.5
	end
	commander_broadcast_location
	commander_sell_loot
end

def commander_raze_it
	result = dothistimeout "raze", 3, /You grab a nearby|Are you sure you|You cannot raze/
	if result.to_s =~ /You grab a nearby/
		commander_after_raze
	elsif result.to_s =~ /Are you sure you/
		commander_raze_it
	elsif result.to_s =~ /You cannot raze/
		fput "stow all"
		start_script "osacombat"
		pause 3
		UserVars.osacrew["cleanup_type"] = "raze"
		cleanup_begin_routine
		UserVars.osacrew["cleanup_type"] = nil
		commander_raze_it
	else
		commander_raze_it
	end
end

def commander_wait_yell
	fput "group open"
	enemy_main_deck
	@amount_of_boxes = GameObj.loot.count {|item| item.type =~ /box/}
	do_client ";foreach box on ground;drag item;go gangplank;sleep 0.2"
	wait_while { running?("foreach") }
	fput "loot room"
	if UserVars.osacrew["crewsize"].count != 0
		captains_quarters
		commander_task_complete
		$whisper_message = "Next we will sink the enemy ship, please let me know when you're all set"
		commander_stowaways
		GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
		enemy_main_deck
	end
	commander_raze_it
end

def commander_hands_full
	enemy_main_deck
	commander_left_hand
	commander_right_hand
	do_client ";foreach box in #{Vars.lootsack};move to ground;sleep 0.2"
	wait_while { running?("foreach") }
	enemy_quarters
end

def get_straggler_boxes
	UserVars.osacrew["straggler_boxes"].each do |n|
		@room_with_box = n
		start_script("go2", [@room_with_box])
		wait_while { running?("go2") }
		straggler_boxes = GameObj.loot.find_all{|item| item.type =~ /box/}
		straggler_boxes.each{|box|
			fput "drag #{box}"
			if Room.current.title.to_s.include? "Enemy"
				enemy_main_deck
			else
				main_deck
			end
			if Room.current.title.to_s.include? "Enemy"
				fput "go gangplank"
			end
			fput "drag stop"
			start_script("go2", [@room_with_box]) if !Room.current.tags.include? @room_with_box
			wait_while { running?("go2") }
		}
	end
end
	
def commander_get_treasure
	result = dothistimeout "search pile", 5, /You search around in the|Are you sure you would|You take a moment to|How do you plan|You cannot SEARCH/
		if result.to_s =~ /You search around in the|How do you plan/
			waitrt?
			if (GameObj.left_hand.noun.to_s == "crate") or (GameObj.right_hand.noun.to_s == "crate")
				fput "stow all"
				commander_wait_yell
			else
				commander_hands_full
				commander_get_treasure
			end
		elsif result.to_s =~ /Are you sure you would/
			commander_get_treasure
		elsif result.to_s =~ /You take a moment to/
			commander_wait_yell
		elsif result.to_s =~ /You cannot SEARCH/
			fput "stow all"
			start_script "osacombat"
			pause 3
			UserVars.osacrew["cleanup_type"] = "spawn"
			cleanup_begin_routine
			UserVars.osacrew["cleanup_type"] = nil
			enemy_quarters
			commander_get_treasure
		else
			enemy_quarters
			commander_get_treasure
		end
end

def commander_prep_it
		move "down"
		fput "drag supply crate"
		move "up"
		waitrt?
		multifput "go gangplank", "go gangplank", "drag supply crate"
		waitrt?
		move "down"
		waitrt?
		fput "drag stop"
		get_straggler_boxes
		UserVars.osacrew["straggler_boxes"].clear
		enemy_quarters
		fput "stow set #{Vars.lootsack}"
		commander_get_treasure
end

def commander_give_coins
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Silvers")
	pause 1
	fput "depo all"
end

def exp_check
	@capped = false
	@resource = nil
	@resource_total = nil
	@resource_weekly = nil
	exp = Lich::Util.quiet_command("exp", /Level:/, end_pattern = /You mind is (.*)\./, include_end = false ,timeout = 0.4, silent = true)
	if exp.to_s =~ /Exp to next TP: ([0-9,]+)/
		@capped = true
		@exptntp = $1
	elsif exp.to_s =~ /Exp until lvl: ([0-9,]+)/
		@capped = false
	end
	if exp.to_s =~ /PTPs\/MTPs: ([0-9,]+)\/([0-9,]+)/
		@mtrainingpoints = $2
		@ptrainingpoints = $1
	end
	pause 1
	resource = Lich::Util.quiet_command("resource", /Health: ([0-9,]+)\/([0-9,]+)     Mana: ([0-9,]+)\/([0-9,]+)     Stamina: ([0-9,]+)\/([0-9,]+)     Spirit: ([0-9,]+)\/([0-9,]+)/, end_pattern = /Suffused (.*): ([0-9,]+)/, include_end = true, timeout = 0.5, silent = true)
	if resource.to_s =~ /(Necrotic Energy|Essence|Motes of Tranquility|Devotion|Nature's Grace|Luck Inspiration|Grit): ([0-9,]+)\/50,000/
		@resource = $1
		@resource_weekly = $2
	end
	if resource.to_s =~ /([0-9,]+)\/200,000/
		@resource_total = $1
	end
	if resource.to_s =~ /(.*) ([0-9,]+)\/200,000/
		@resource_total = $2
	end
	if !@capped && !@resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}"
		respond ""
	end
	if !@capped && @resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Level #{Stats.level.to_i + 1}: #{XMLData.next_level_text.to_i} | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}"
		respond ""
	end
	if @capped && !@resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")} | Weekly #{@resource}: #{@resource_weekly} | Total #{@resource}: #{@resource_total}"
		respond ""
	end
	if @capped && @resource.nil? && checkname == UserVars.osacrew["commander"]
		respond ""
		respond "                   Your Stats Are:           Health: #{health}/#{maxhealth} | Mana: #{mana}/#{maxmana} | Stamina: #{stamina}/#{maxstamina} | Spirit: #{spirit}/#{maxspirit} | Exp Till Next TP: #{@exptntp} | #{@ptrainingpoints} PTP\'s | #{@mtrainingpoints} MTP\'s | State Of Mind: #{checkmind.split(/ |\_/).map(&:capitalize).join(" ")}"
		respond ""
	end
end

def commander_solo_get_underway
	ph_off
	waitrt?
	main_deck
	do_client ";force osacrew underway"
	waitfor /You yell, "Underway!"/
	captains_quarters
	if percentmana <= 84
		respond ""
		respond "          -----------------------------------------------------"
		respond "          |                Waiting For Mana                   |"
		respond "          -----------------------------------------------------"
		respond ""
		wait_until {percentmana >= 85}
	end
	do_client ";foreach food, junk in #{Vars.lootsack};move to bucket;sleep 0.2"
	wait_while { running?("foreach") }
	pause 0.5
	ph_on
end

def commander_get_underway
	ph_off
	waitrt?
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "All Hands Make Ready To Get Underway!")
	fput "yell All Hands Make Preparations For Getting Underway!"
	pause 2
	waitrt?
	waitcastrt?
	echo "Raising Anchor"
	helm
	raise_anchor
	waitrt?
	if @anchor_aweigh
		fput "yell Anchor's Aweigh!"
		@anchor_aweigh = false
	end
	#move "go wooden door"
	captains_quarters
	commander_task_complete
	if percentmana <= 84
		respond ""
		respond "          -----------------------------------------------------"
		respond "          |                Waiting For Mana                   |"
		respond "          -----------------------------------------------------"
		respond ""
		wait_until {percentmana >= 85}
	end
	do_client ";foreach food, junk in #{Vars.lootsack};move to bucket;sleep 0.2"
	wait_while { running?("foreach") }
	pause 0.5
	GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	multifput "depart","depart"
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Underway!")
	fput "yell Underway!"
	ph_on
end

def commander_ship_info
	shipinfo = Lich::Util.quiet_command("ship info #{@ship_type}", /SHIP INFO/, end_pattern = /Captain\'s Chambers Room Style\: (.*)./, include_end = false ,timeout = 0.75, silent = true)
		if shipinfo.to_s =~ /Ship Name: (.*) Ship Status/
			UserVars.osacrew["commander_ship_name"] = $1.tr('",', '').chop
		end
		if shipinfo.to_s =~ /Gangplank Material: (.*) Gangplank Color:/
			if $1.tr('",', '').chop.chop == "Not Set"
				UserVars.osacrew["commander_gangplank"] = "slender gangplank"
			else
				UserVars.osacrew["commander_gangplank"] = "#{$1.tr('",', '').chop.chop} gangplank"
			end
		end
	if (UserVars.osacrew["helmsman_enabled"] == nil) or (UserVars.osacrew["helmsman_enabled"] == false)
		checkrole = Lich::Util.quiet_command("osa role", /Roles/, end_pattern = /You can change your declared role at the Inking Den of Kraken's Fall./, include_end = false ,timeout = 0.75, silent = true)
				if checkrole.to_s =~ /Current Role: (.*) Active Bonuses/
					@role = $1.tr('",', '').chop.chop
				end
				if checkrole.to_s =~ /Navigator(.*)Rank\: (.*) Total Experience/
					@rank = $2.tr('",', '').chop.chop
				end
				if (@role == ("Navigator") and @rank == ("Veteran")) or (@role == ("Navigator") and @rank == ("Master"))
					UserVars.osacrew["helmsman_enabled"] = true
				else
					UserVars.osacrew["helmsman_enabled"] = false
				end
	end
	respond "Checking Command Information"
	pause 0.15
	respond "."
	pause 0.25
	respond ".."
	pause 0.35
	respond "... Command Information Saved"
	respond ""
end

def commander_board_ship
	if !UserVars.osacrew["gangplank"].nil? 
		Room[UserVars.osacrew["gangplank"]].tags.delete("myship") if Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	end
	commander_clear_gangplank
	UserVars.osacrew["gangplank"] = Room.current.id
	Room[UserVars.osacrew["gangplank"]].tags.push("myship") if !Room[UserVars.osacrew["gangplank"]].tags.include? "myship"
	commander_map_gangplank
	crows_nest
	fput "ship flag black"
	if UserVars.osacrew["crewsize"].count != 0
		commander_call_muster
	end
	if UserVars.osacrew["crewsize"].count != 0
		commander_get_underway
	else
		commander_solo_get_underway
	end
	waitrt?
	return
end

def commander_check_handler
	fput "ask #{checknpcs.last} about ret #{UserVars.osacrew["commander_ship_type"]}"
	result = dothistimeout "ask #{checknpcs.last} about ret #{UserVars.osacrew["commander_ship_type"]}", 2, /Looks like we have some space around the (.*)./
		if result.to_s =~ /Looks like we have some space around the (.*)./
			@shiplocation = $1
		if @shiplocation.include? "Thrak"
			@pier_map = [29738, 29739, 29740, 29741, 29742] 
		elsif @shiplocation.include? "Helga"
			@pier_map = [30228, 30232, 30233, 30234, 30235]
		elsif @shiplocation.include? "Beldrin"
			@pier_map = [30223, 30227, 30229, 30230, 30231]
		elsif @shiplocation.include? "Dakris"
			@pier_map = [30221, 30222, 30224, 30225, 30226]
		elsif @shiplocation.include? "Larton"
			@pier_map = [30220, 30219, 30218, 30217, 30216]
		elsif @shiplocation.include? "Green"
			@pier_map = [30192, 30191, 30190, 30189, 30188]
		elsif @shiplocation.include? "White"
			@pier_map = [30193, 30209, 30210, 30211, 30212]
		elsif @shiplocation.include? "Blue"
			@pier_map = [30194, 30205, 30206, 30207, 30208]
		elsif @shiplocation.include? "Gold"
			@pier_map = [30195, 30201, 30202, 30203, 30204]
		elsif @shiplocation.include? "Crimson"
			@pier_map = [30196, 30197, 30198, 30199, 30200]
		elsif @shiplocation.include? "Asterfire"
			@pier_map = [30241, 30250, 30251, 30252, 30253]
		elsif @shiplocation.include? "Geode"
			@pier_map = [30242, 30249, 30254, 30255, 30256]
		elsif @shiplocation.include? "Dreamstone"
			@pier_map = [30243, 30248, 30257, 30258, 30259]
		elsif @shiplocation.include? "Dragonfire"
			@pier_map = [30244, 30247, 30260, 30261, 30262]
		elsif @shiplocation.include? "Sunstone"
			@pier_map = [30245, 30246, 30263, 302564, 30265]
		elsif @shiplocation.include? "Dovesnail"
			@pier_map = [29503, 29504, 29505, 29506, 29507]
		elsif @shiplocation.include? "Wentletrap"
			@pier_map = [29508, 29509, 29510, 29511, 29512]
		elsif @shiplocation.include? "Moonsnail"
			@pier_map = [29513, 29514, 29515, 29516, 29517]
		elsif @shiplocation.include? "Sandsilver"
			@pier_map = [29518, 29519, 29520, 29521, 29522]
		elsif @shiplocation.include? "Hornsnail"
			@pier_map = [29523, 29524, 29525, 29526, 29527]
		elsif @shiplocation.include? "First"
			@pier_map = [29033, 29034, 29035, 29036, 29037]
		elsif @shiplocation.include? "Second"
			@pier_map = [29032, 29044, 29045, 29046, 29150]
		elsif @shiplocation.include? "Third"
			@pier_map = [29043, 29151, 29152, 29153, 29154]
		elsif @shiplocation.include? "Fourth"
			@pier_map = [29155, 29156, 29157, 29156, 29157]
		elsif @shiplocation.include? "Fifth"
			@pier_map = [29060, 29061, 29062, 29063, 29064]
		elsif @shiplocation.include? "Broken Pier"
			@pier_map = [32350]
		elsif @shiplocation.include? "Greying Pier"
			@pier_map = [32347]	
		elsif @shiplocation.include? "Old Pier"
			@pier_map = [32356]
		elsif @shiplocation.include? "Decaying Pier"
			@pier_map = [32355]	
		elsif @shiplocation.include? "Crumbling Pier"
			@pier_map = [32360]
		elsif @shiplocation.include? "Cracked Pier"
			@pier_map = [32359]
		elsif @shiplocation.include? "Weathered Pier"
			@pier_map = [32358]	
		elsif @shiplocation.include? "Port Pier"
			@pier_map = [32357]	
		elsif @shiplocation.include? "Starboard Pier"
			@pier_map = [32351]
		elsif @shiplocation.include? "Salty Pier"
			@pier_map = [32352]
		elsif @shiplocation.include? "Rimy Pier"
			@pier_map = [32353]
		elsif @shiplocation.include? "Gelid Pier"
			@pier_map = [32348]
		elsif @shiplocation.include? "Snowy Pier"
			@pier_map = [32349]
		elsif @shiplocation.include? "Gleaming Pier"
			@pier_map = [32370]
		elsif @shiplocation.include? "Shivering Pier"
			@pier_map = [32371]
		elsif @shiplocation.include? "Cold Pier"
			@pier_map = [32372]
		elsif @shiplocation.include? "Crab Pier"
			@pier_map = [32340]	
		elsif @shiplocation.include? "Albatross Pier"
			@pier_map = [32346]
		elsif @shiplocation.include? "Barrow Pier"
			@pier_map = [32345]
		elsif @shiplocation.include? "Highland Pier"
			@pier_map = [32344]
		elsif @shiplocation.include? "Moon Pier"
			@pier_map = [32343]
		elsif @shiplocation.include? "Shadowed Pier"
			@pier_map = [32342]
		elsif @shiplocation.include? "Crawling Pier"
			@pier_map = [32341]
		elsif @shiplocation.include? "Briar Pier"
			@pier_map = [32354]
		elsif @shiplocation.include? "Docks, Shoreline"
			@pier_map = [32339]
		elsif @shiplocation.include? "Soaring Wyvern"
			@pier_map = [31502, 31517, 31516, 31503, 31518]
		elsif @shiplocation.include? "Rampant Wyvern"
			@pier_map = [31500, 31501, 31515, 31514, 31513]
		elsif @shiplocation.include? "Roaring Wyvern"
			@pier_map = [31498, 31499, 31508, 31507, 31506]
		elsif @shiplocation.include? "Resting Wyvern"
			@pier_map = [31496, 31497, 31510, 31509, 31505]
		elsif @shiplocation.include? "Staring Wyvern"
			@pier_map = [31494, 31495, 31512, 31511, 31504]
		elsif @shiplocation.include? "Pier 1"
			@pier_map = [32908, 32909, 32910, 32911, 32912]
		elsif @shiplocation.include? "Pier 2"
			@pier_map = [32907, 32913, 32914, 32915, 32916]
		elsif @shiplocation.include? "Pier 3"
			@pier_map = [32906, 32917, 32918, 32919, 32920]
		elsif @shiplocation.include? "Pier 4"
			@pier_map = [32905, 32921, 32922, 32923, 32924]
		elsif @shiplocation.include? "Pier 5"
			@pier_map = [32504, 32925, 32926, 32927, 32928]
		elsif @shiplocation.include? "Acistira Pier"
			@pier_map = [33831, 33832, 33833, 33834, 33835]
		elsif @shiplocation.include? "Naefira Pier"
			@pier_map = [33836, 33837, 33838, 33839, 33840]
		elsif @shiplocation.include? "Taerethil Pier"
			@pier_map = [33841, 33842, 33843, 33844, 33845]
		elsif @shiplocation.include? "Resaeun Pier"
			@pier_map = [33846, 33847, 33848, 33849, 33850]
		elsif @shiplocation.include? "Aelerine Pier"
			@pier_map = [33851, 33852, 33853, 33854, 33855]
		end
	end
end

def commander_crew_menu
	if UserVars.osacrew["roster"].empty?
		UserVars.osacrew["roster"] = Array.new
	end
	if variable[2].nil?
		respond "
		Please Select A Valid Option: 
			
			Login: Logs In All Of Your Personal Crew
			
			Add: Adds A Crew Members Name To Your Personal Crew
			
			Delete: Deletes A Crew Member From Your Personal Crew
			
			Clear: Clears Your Personal Crew
			
			Display: Displays Your Personal Crew
		"
		return
	end
	if variable[2].downcase == "login"
		respond "
			Login Sequence Initiated...
			"
		start_script("elogin", ["set", "realm", "prime"])
		wait_while { running?("elogin") }
		pause 0.5
		UserVars.osacrew["roster"].each do |n|
			echo "Logging In #{n}"
			start_script("elogin", ["#{n}"])
			wait_while { running?("elogin") }
			pause 15
		end
		respond "
			Login Complete Captain!
			"
	end
	if variable[2].downcase == "add"
		respond "
				Saving #{variable[3]} To Your Personal Crew!
				"
		UserVars.osacrew["roster"].push(variable[3])
		UserVars.osacrew["roster"] = UserVars.osacrew["roster"].uniq
		return
	end
	if variable[2].downcase == "delete"
		respond "
				Removing #{variable[3]} From Your Personal Crew!
				"
		UserVars.osacrew["roster"].delete(variable[3])
		UserVars.osacrew["roster"] = UserVars.osacrew["roster"].uniq
		return
	end
	if variable[2].downcase == "clear"
		respond "
				Clearing Your Personal Crew!
				"
		UserVars.osacrew["roster"].clear
		return
	end
	if variable[2].downcase == "display"
		respond "
				Your Personal Crew Includes:
				"
				puts UserVars.osacrew["roster"]
		respond ""
		return
	end
end

def commander_muster_up
	if UserVars.osacrew["crewsize"].nil?
		respond ""
		respond "      You Have Not Built A Ships Roster Yet!"
		respond "       Please Call A Muster Then Try Again"
		respond ""
		return
	end
	if (checkpcs - UserVars.osacrew["crewsize"]).count > 0
		respond ""
		respond "      The Following People Present Are Not Part Of The Crew:"
		respond ""
		puts checkpcs - UserVars.osacrew["crewsize"]
		respond ""
	else
		respond ""
		respond "      All Present Adventurers Are Members Of The Crew!"
		respond ""
	end
end

def commander_roger_up
	if UserVars.osacrew["crewsize"].nil?
		respond ""
		respond "      You Have Not Built A Ships Roster Yet!"
		respond "       Please Call A Muster Then Try Again"
		respond ""
		return
	end
	if (UserVars.osacrew["crewsize"] - @taskcount).count > 0
		respond ""
		respond "      The Following Crew Have Not Rogered Up:"
		respond ""
		puts UserVars.osacrew["crewsize"] - @taskcount
		respond ""
	else
		respond ""
		respond "      All Crew Have Rogered Up!"
		respond ""
	end
end

def commander_start_up
	if UserVars.osacrew["crewsize"].count != 0
		commander_call_muster
	end
	UserVars.osacrew["crewsize"].each do |n|
		@crewmember = n
		fput "hold #{@crewmember}"
	end
	start_script("go2", ['bank'])
	wait_while { running?("go2") }
	if UserVars.osacrew["commander_ship_type"] == "sloop"
		@shipcost = "5000"
	end
	if UserVars.osacrew["commander_ship_type"] == "brigantine"
		@shipcost = "7500"
	end
	if UserVars.osacrew["commander_ship_type"] == "carrack"
		@shipcost = "7500"
	end
	if UserVars.osacrew["commander_ship_type"] == "galleon"
		@shipcost = "10000"
	end
	if UserVars.osacrew["commander_ship_type"] == "frigate"
		@shipcost = "10000"
	end
	if UserVars.osacrew["commander_ship_type"] == "man o' war"
		@shipcost = "12500"
	end
	fput "withdraw #{@shipcost} sil"
	start_script("go2", ['handler'])
	wait_while { running?("go2") }
	pause 0.5
	commander_check_handler
	@found_ship = false
	@pier_map.each do |pier_berth|
		waitrt?
		start_script("go2", [pier_berth]) 
		wait_while { running?("go2") }
		if GameObj.loot.count {|item| item.name =~ /#{UserVars.osacrew["commander_ship_type"]}/} > 0
			if UserVars.osacrew["commander_ship_type"] == "man o' war"
				fput "look man"
			else
				fput "look #{UserVars.osacrew["commander_ship_type"]}"
			end
			result = matchtimeout 1, /Sprawling across the back of the (.*) it reads, "(.*)"/
				if result.to_s =~ /Sprawling across the back of the (.*) it reads, "(.*)"/
					if UserVars.osacrew["commander_ship_name"] == $2
						@found_ship = true
						break
					end
				end
		end
	end
	if @found_ship == false
		echo "The Ship Isn't Here, Something Went Wrong, Restart"
		exit
	end
	commander_board_ship
end

def commander_start_handler
	result = dothistimeout "get salvage crate from my #{Vars.lootsack}", 3, /Get what?|You remove|You grab a|You retrieve/
	if result.to_s =~ /Get what?/
	respond ""
	_respond "\<preset id=\"thought\"\>" + "*** All Out of Crates***" + "\<\/preset\>"
	respond ""
	return
	elsif result.to_s =~ /You remove|You grab a|You retrieve/
	commander_handler
	else
		respond ""
		respond " ---------------==========================================================--------------- "
		respond ""		                 
		respond "                Hands Are Full, Clear Your Hands Then Type Yes To Continue        "
		respond ""
		respond " ---------------==========================================================--------------- "
		waitfor /A good positive attitude never hurts/
		commander_start_handler
	end
end

def commander_handler
	pause 0.5
	fput "give salvage crate to #{checknpcs.last}"
	pause 0.5
	fput "give salvage crate to #{checknpcs.last}"
	pause 0.5
	@handler_box = GameObj.right_hand.noun
	multifput "open my #{@handler_box}", "look in my #{@handler_box}", "empty my #{@handler_box} into my #{Vars.lootsack}"
	waitrt
	pause 1
	fput "throw my #{@handler_box}"
	@handler_box = nil
	commander_start_handler
end

def scripted_crew_off
	if UserVars.osacrew["othersailors"]
		UserVars.osacrew["othersailors"] = false
		respond "   *===============================================================================*
												   |          *****You Are No Longer Accepting Outside Scripted Crew*****          |
														   *===============================================================================* 			"
	else
		respond "    Scripted Crew Is Disabled"
	end
end

def scripted_crew_on
	if !UserVars.osacrew["othersailors"]
		UserVars.osacrew["othersailors"] = true
		respond "   *==========================================================================*
												   |          *****You Are Now Accepting Outside Scripted Crew*****           |
														   *==========================================================================* 			"
	else
		respond "    Scripted Crew Is Enabled"
	end
end

def ph_off
	if UserVars.osacrew["piratehunter"]
		UserVars.osacrew["piratehunter"] = false
		respond "   *===========================================================*
												   |          *****Enemy Ship Detection Disabled*****          |     
																				   |                     Godspeed Captain!                     |
														   *===========================================================* 			"
	else
		respond "    Enemy Detection Already Disabled"
	end
end

def ph_on
	if !UserVars.osacrew["piratehunter"]
		UserVars.osacrew["piratehunter"] = true
		respond "   *===========================================================*
												   |          *****Enemy Ship Detection Enabled*****           |     
																				   |                   Happy Hunting Captain!                  |
														   *===========================================================* 			"
	else
		respond "    Enemy Detection Already Enabled"
	end
end

def no_script_off
	if UserVars.osacrew["stowaways"]
		UserVars.osacrew["stowaways"] = false
		respond "      *===========================================================*
												      |       *****Non-Scripting Guest Mode Disabled*****         |
														      *===========================================================* 			"
	else
		respond "    Non-Scripting Guest Mode Already Disabled"
	end
end

def no_script_on
	if !UserVars.osacrew["stowaways"]
		UserVars.osacrew["stowaways"] = true
		respond "      *===========================================================*
												      |       *****Non-Scripting Guest Mode Enabled*****           | 
														      *===========================================================* 			"
	else
		respond "    Non-Scripting Guest Mode Already Enabled"
	end
end

def cleanup_off
	if UserVars.osacrew["cleanup"]
		UserVars.osacrew["cleanup"] = false
		respond "   *===============================================================================*
												   |          *****You Are No Longer Looking For Stragglers*****                   |
														   *===============================================================================* 			"
	else
		respond "    Clean Up Is Disabled"
	end
end

def cleanup_on
	if !UserVars.osacrew["cleanup"]
		UserVars.osacrew["cleanup"] = true
		respond "   *==========================================================================*
												   |          *****You Are Now Looking For Stragglers*****                    |
														   *==========================================================================* 			"
	else
		respond "    Cleanup Is Enabled"
	end
end

def commander_end_routine
	@clearing_end_time = Time.now
	if UserVars.osacrew["enemyship"] == nil
		UserVars.osacrew["enemyship"] = "a pirate ship"
	end
	if @boardingtime.nil?
		@boardingtime = ((Time.now - Time.now)/60).as_time
	end
	if @helmsman_end_time.nil?
		@helmsman_end_time = Time.now
	end
	@clearingtime = (@clearing_end_time - @helmsman_end_time)
	pause 2
	if UserVars.osacrew["crewsize"].count != 0
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Turn To!")
		pause 2
	end
	if XMLData.injuries.any?{|key,value| value["wound"] > 1}
		start_script("eherbs", ['--buy=off', '--mending=on', '--skipscars=on', '--yaba=on', '--potions=on'])
		wait_until {!running? "eherbs"}
	end
	if XMLData.injuries.any?{|key,value| value["wound"] > 1}
		echo "You still have some wounds, this may inhibate your ability to handle loot!"
	end
	if running? "osacombat"
		stop_script "osacombat"
		wait_until {!running? "osacombat"}
	end
	enemy_main_deck
	commander_prep_it
end

def commander_avg_sink_time
	if UserVars.osacrew["enemy_ship_type"] == "Sloop"
		if UserVars.osacrew["Sloop_sink_times"].nil?
			UserVars.osacrew["Sloop_sink_times"] = Array.new
		end
		UserVars.osacrew["Sloop_sink_times"].push (@boardingtime)
		@Sloop_sink_times = UserVars.osacrew["Sloop_sink_times"].last(50)
		UserVars.osacrew["Sloop_sink_times"] = @Sloop_sink_times
		@average_sink_time = (UserVars.osacrew["Sloop_sink_times"].sum/UserVars.osacrew["Sloop_sink_times"].size.to_f)
	end
	if UserVars.osacrew["enemy_ship_type"] == "Brigantine"
		if UserVars.osacrew["Brig_sink_times"].nil?
			UserVars.osacrew["Brig_sink_times"] = Array.new
		end
		UserVars.osacrew["Brig_sink_times"].push (@boardingtime)
		@Brig_sink_times = UserVars.osacrew["Brig_sink_times"].last(50)
		UserVars.osacrew["Brig_sink_times"] = @Brig_sink_times
		@average_sink_time = (UserVars.osacrew["Brig_sink_times"].sum/UserVars.osacrew["Brig_sink_times"].size.to_f)
	end
	if UserVars.osacrew["enemy_ship_type"] == "Carrack"
		if UserVars.osacrew["Car_sink_times"].nil?
			UserVars.osacrew["Car_sink_times"] = Array.new
		end
		UserVars.osacrew["Car_sink_times"].push (@boardingtime)
		@Car_sink_times = UserVars.osacrew["Car_sink_times"].last(50)
		UserVars.osacrew["Car_sink_times"] = @Car_sink_times
		@average_sink_time = (UserVars.osacrew["Car_sink_times"].sum/UserVars.osacrew["Car_sink_times"].size.to_f)
	end
	if UserVars.osacrew["enemy_ship_type"] == "Galleon"
		if UserVars.osacrew["Gal_sink_times"].nil?
			UserVars.osacrew["Gal_sink_times"] = Array.new
		end
		UserVars.osacrew["Gal_sink_times"].push (@boardingtime)
		@Gal_sink_times = UserVars.osacrew["Gal_sink_times"].last(50)
		UserVars.osacrew["Gal_sink_times"] = @Gal_sink_times
		@average_sink_time = (UserVars.osacrew["Gal_sink_times"].sum/UserVars.osacrew["Gal_sink_times"].size.to_f)
	end
	if UserVars.osacrew["enemy_ship_type"] == "Frigate"
		if UserVars.osacrew["Frig_sink_times"].nil?
			UserVars.osacrew["Frig_sink_times"] = Array.new
		end
		UserVars.osacrew["Frig_sink_times"].push (@boardingtime)
		@Frig_sink_times = UserVars.osacrew["Frig_sink_times"].last(50)
		UserVars.osacrew["Frig_sink_times"] = @Frig_sink_times
		@average_sink_time = (UserVars.osacrew["Frig_sink_times"].sum/UserVars.osacrew["Frig_sink_times"].size.to_f)
	end
	
	if UserVars.osacrew["enemy_ship_type"] == "Man O' War"
		if UserVars.osacrew["Man_sink_times"].nil?
			UserVars.osacrew["Man_sink_times"] = Array.new
		end
		UserVars.osacrew["Man_sink_times"].push (@boardingtime)
		@Man_sink_times = UserVars.osacrew["Man_sink_times"].last(50)
		UserVars.osacrew["Man_sink_times"] = @Man_sink_times
		@average_sink_time = (UserVars.osacrew["Man_sink_times"].sum/UserVars.osacrew["Man_sink_times"].size.to_f)
	end
end

def commander_sunk_ship
	@helmsman_end_time = Time.now
	@boardingtime = (@helmsman_end_time - @helmsman_start_time)
	commander_avg_sink_time
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} | Time To Sink Vessel: #{(@boardingtime/60).as_time} | Average Time To Sink A #{UserVars.osacrew["enemy_ship_type"]}: #{(@average_sink_time/60).as_time}")
	if UserVars.osacrew["stowaways"]
		fput "whisper ooc group Encounter With #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} | Time To Sink Vessel: #{(@boardingtime/60).as_time} | Average Time To Sink A #{UserVars.osacrew["enemy_ship_type"]}: #{(@average_sink_time/60).as_time}"
	end
	UserVars.osacrew["cleanup"] = false
	UserVars.osacrew["piratehunter"] = false
	waitfor /rapidly descends beneath the cold, dark waters/
	if running? "osacombat"
		stop_script "osacombat"
		wait_until {!running? "osacombat"}
	end
	pause 3
	LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Turn To!")
	if XMLData.injuries.any?{|key,value| value["wound"] > 1}
		start_script("eherbs", ['--buy=off', '--mending=on', '--skipscars=on', '--yaba=on', '--potions=on'])
		wait_until {!running? "eherbs"}
	end
	if XMLData.injuries.any?{|key,value| value["wound"] > 1}
		echo "You still have some wounds, this may inhibate your ability to handle loot!"
	end
	check_for_crate
	captains_quarters
	commander_task_complete
	GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	UserVars.osacrew["cleanup"] = true
	UserVars.osacrew["piratehunter"] = true
	exit
end

def fire_launcher
	waitrt?
	result = dothistimeout "fire net-launcher", 2, /pretend to fire at an imaginary target|A clean miss!|A direct hit!|You need to PULL on the crank to retract the net first|...wait/
		if result.to_s =~ /pretend to fire at an imaginary target/
			return
		elsif result.to_s =~ /A clean miss!|You need to PULL on the crank to retract the net first/
			waitrt?
			reel_launcher
			fire_launcher
			return
		elsif result.to_s =~ /A direct hit!/
			waitrt?
			reel_launcher
			return
		elsif result.to_s =~ /...wait/
			waitrt?
			fire_launcher
			return
		end
end

def reel_launcher
	waitrt?
	result = dothistimeout "pull net-launcher", 2, /crate gets closer!|crate comes plopping onto the deck|net-launcher emits a final clicking noise|You do not see a reason to pull the crank/
		if result.to_s =~ /crate gets closer!/
			waitrt?
			reel_launcher
			#return
		elsif result.to_s =~ /crate comes plopping onto the deck|You do not see a reason to pull the crank/
			waitrt?
			if GameObj.loot.count {|item| item.name =~ /supply crate/} > 0
				fput "take supply crate"
				cargo_hold
				multifput "put crate in wood", "put crate in balls"
				pause 1
				if (GameObj.left_hand.noun.to_s == "crate") or (GameObj.right_hand.noun.to_s == "crate")
					fput "drop supply crate"
				end
				main_deck
			end
			if GameObj.loot.count {|item| item.name =~ /salvage crate/} > 0
				multifput "take salvage crate", "stow salvage crate"
			end
			fire_launcher
			#return
		else
			waitrt?
			reel_launcher
			#return
		end
end

def check_for_crate
	waitrt?
	main_deck
	result = Lich::Util.quiet_command("look ocean", /\[(.*)\]/, end_pattern = /(Open waters: (.*)|Obvious paths: (.*))/, include_end = false ,timeout = 0.4, silent = true)
		if result.to_s =~ /crate floating near enough to your ship/
			waitrt?
			fire_launcher
			#return
		else
			return
		end
end

def commander_begin_it
	if !variable[1].include? "info" and !variable[1].include? "crew"
		if UserVars.osacrew["commander_ship_type"].nil?
			respond "
				**** Ship Settings Not Detected ****
				      
					     Please Set Your Ship Type

					   Example: ;osacommander info <ship type>
					"
		return
		end
	end
	if variable[1] =~ /start/
		UserVars.osacrew["straggler_boxes"] = Array.new
		helm
		determine_enemy_type
		determine_to_engage
		if UserVars.osacrew["engage"]
			UserVars.osacrew["boarding"] = true
			if UserVars.osacrew["enemy_type"] == "undead" && !UserVars.osacommander["no_bless"]
				$whisper_message = "If you need any weapon blesses, speak now then let me know when you're all set"
				if UserVars.osacrew["crewsize"].count == 0
					get_self_bless
					commander_stowaways
				else
					begin_bless
					commander_stowaways
				end
			end	
			commander_vessel_messaging
			cleanup_on
			if UserVars.osacrew["cannon_engage"] == true
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Enemy Vessel Detected, #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} Inbound. Sound General Quarters! Gunners Man Your Irons!")
			else
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Enemy Vessel Detected, #{UserVars.osacrew["enemyship"].split(/\b/).map(&:capitalize).join} Inbound. Sound General Quarters!")
			end
			@start_time = Time.now
			if !running? "osacombat"
				start_script "osacombat"
				pause 3
			end
			ship_map
			helm
			@helmsman_start_time = Time.now
			commander_check_role
			enemy_counter
		else
			do_not_board
		end
	elsif (Script.current.vars[1] =~ /profile/i)
	self.profile(Script.current.vars)
	exit
	elsif variable[1] =~ /broadcast/
		commander_broadcast_location
	elsif variable[1] =~ /end/
		commander_end_routine
	elsif variable[1] =~ /silvers/
		commander_give_coins
	elsif variable[1] =~ /version/
	respond ""
	respond "OSACombat Version #{UserVars.osacrew["commanderversion"]}"
	respond ""
	exit
	elsif variable[1] =~ /stop/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Stop")
		UserVars.osacrew["cleanup"] = false
		UserVars.osacrew["piratehunter"] = false
		UserVars.osacrew["boarding"] = false
			if running? "osacombat"
				stop_script "osacombat"
				wait_until {!running? "osacombat"}
			end
	elsif variable[1] =~ /spells/
		commander_spell_up
	elsif variable[1] =~ /exit/
		UserVars.osacrew["logging"] = true
		if Room.current.location == "Ships"
			main_deck
			fput "push gangplank"
			move "go gangplank"
		end
		fput "recite #{UserVars.osacrew["commander_ship_name"]}!;Attention To Quarters!"
		pause 1.5
		fput "snap attention"
		pause 1.5
		multifput "salute", "recite Post!"
		pause 3
		fput "exit"
	elsif variable[1] =~ /repairs/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Make Repairs!")
	elsif variable[1] =~ /status/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Status")
		status_check
	elsif variable[1] =~ /spellup/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Mana Spellup")
		if (Stats.prof != "Warrior") and (Stats.prof != "Rogue")
			fput "mana spellup"
		end
	elsif variable[1] =~ /bread/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Let Us Break Bread Together!")
	elsif variable[1] =~ /detection/
		if variable[2] =~ /on/
			ph_on
		end
		if variable[2] =~ /off/
			ph_off
		end
	elsif variable[1] =~ /noscript/
		if variable[2] =~ /on/
			no_script_on
		end
		if variable[2] =~ /off/
			no_script_off
		end
	elsif variable[1] =~ /scripted/
		if variable[2] =~ /on/
			scripted_crew_on
		end
		if variable[2] =~ /off/
			scripted_crew_off
		end
	elsif variable[1] =~ /cleanup/
		if variable[2] =~ /on/
			cleanup_on
		elsif variable[2] =~ /off/
			cleanup_off
		else
			cleanup_begin_routine
		end
	elsif variable[1] =~ /unkick/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Crewman #{variable[2].capitalize}, Quarterdeck!")
	elsif variable[1] =~ /kick/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Lay Below Crewman #{variable[2].capitalize}!")
	elsif variable[1] =~ /reset/
		do_client ";e stop_script 'osacrew';wait_while { running?('osacrew') };start_script 'osacrew'"
		UserVars.osacrew["logging"] = true
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Reset")
		pause 2
		UserVars.osacrew["logging"] = false
	elsif variable[1] =~ /task/
		if variable[2].nil?
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Task Time!")
			return
		end
		if !variable[2].include? "cou"
			respond "
					Please Select A Valid Task Option:
						
						Count:          Will Determine Who Hasn't Rogered Up
						No Option:      Will Call For The Crew To Get A Task
					"
		end
		if variable[2].include? "cou"
			commander_roger_up
			return
		end
	elsif variable[1] =~ /begin/
		commander_start_up
	elsif variable[1] =~ /testcon/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Connection Test: #{variable[2].capitalize}")
	elsif variable[1] =~ /summon/
		fput "group open"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Crew, Report To: #{Room.current.id}")
	elsif variable[1] =~ /bless/
		begin_bless
	elsif variable[1] =~ /unpause/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Unpause")
		if running? "osacombat"
			unpause_script "osacombat"
		end
	elsif variable[1] =~ /pause/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Pause")
		if running? "osacombat"
			pause_script "osacombat"
		end
	elsif variable[1] =~ /muster/
		if variable[2].nil?
			UserVars.osacrew["crewsize"] = Array.new
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Quarters! All Hands To Quarters For Muster, Instruction and Inspection!")
			commander_take_muster
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "All Present And Accounted For! We Have #{UserVars.osacrew["crewsize"].count} Crew Onboard For A Total Compliment of #{UserVars.osacrew["crewsize"].count + 1} Personnel!")
			return
		end
		if !variable[2].include? "cou"
			respond "
					Please Select A Valid Muster Option:
						
						Count:          Will Determine Who Present Is Not Of The Ships Company
						No Option:      Will Call A Ships Muster
					"
		end
		if variable[2].include? "cou"
			commander_muster_up
			return
		end
	elsif variable[1] =~ /crew/
		commander_crew_menu
	elsif variable[1] =~ /invoker/
		if Room.current.id != "288"
			start_script("go2", ['288'])
			wait_while { running?("go2") }
		end
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Invoker!")
		fput "ask invoker about spells"
		pause 0.5
		fput "spell active"
	elsif variable[1] =~ /info/
		if variable[2].downcase.include? "sloo"
			UserVars.osacrew["commander_ship_type"] = "sloop"
			UserVars.osacrew["commander_max_crew"] = 2
		elsif variable[2].downcase.include? "bri"
			UserVars.osacrew["commander_ship_type"] = "brigantine"
			UserVars.osacrew["commander_max_crew"] = 4
		elsif variable[2].downcase.include? "car"
			UserVars.osacrew["commander_ship_type"] = "carrack"
			UserVars.osacrew["commander_max_crew"] = 7
		elsif variable[2].downcase.include? "gal"
			UserVars.osacrew["commander_ship_type"] = "galleon"
			UserVars.osacrew["commander_max_crew"] = 11
		elsif variable[2].downcase.include? "fri"
			UserVars.osacrew["commander_ship_type"] = "frigate"
			UserVars.osacrew["commander_max_crew"] = 13
		elsif variable[2].downcase.include? "man"
			UserVars.osacrew["commander_ship_type"] = "man o' war"
			UserVars.osacrew["commander_max_crew"] = 19
		else
			respond "
						Please Select A Valid Ship Type From Your Fleet: Sloop, Brigantine, Carrack, Galleon, Frigate or Man O' War
						"
				return
		end
		@ship_type = variable[2]
		commander_ship_info
	elsif variable[1] =~ /helmsman/
		@helmsman_start_time = Time.now
		commander_check_role
		enemy_counter
	elsif variable[1] =~ /setup/i
		self.setup()
		exit
	elsif variable[1] =~ /repairs/
		begin_repairs
	elsif variable[1] =~ /settings/
		crew_display_settings
	elsif variable[1] =~ /call/
		(eval variable[2]).call
	elsif variable[1] =~ /setup/
		self.setup()
	elsif variable[1] =~ /underway/
		if UserVars.osacrew["crewsize"].count != 0
			commander_call_muster
		end
		UserVars.osacrew["boarding"] = false
		if UserVars.osacrew["crewsize"].count != 0
			commander_get_underway
		else
			commander_solo_get_underway
		end
	elsif variable[1] =~ /checkversion/
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Current Version Are As Follows: Combat #{UserVars.osacrew["combatversion"]}, Crew #{UserVars.osacrew["crewversion"]} and Commander #{UserVars.osacrew["commanderversion"]}")
	else
		commander_help_display
	end
end

if UserVars.osacrew["crew"].empty?
	respond "*********** Your Crew Channel Is Not Set, Please Set Your Crew Channel Before Proceeding (If You Do Not Have One Set, Use Your Character\'s First Name) ************"
	exit
end
if UserVars.osacrew["commander"].empty?
	respond "*********** Your Commander Is Not Set, Please Set Your Crew Channel Before Proceeding (If You Do Not Have One, Use Your Character\'s First Name) ************"
	exit
end
if UserVars.osacommander["time_left_setting"].to_s.empty?
	UserVars.osacommander["time_left_setting"] = 65
end
before_dying {@warning = false}
@anchor_aweigh = false
@commander_lowered_sail = false
@warning = false
@done_with_sec_off = false
UserVars.osacrew["cleanup_type"] = nil
Room[33889].wayto["3668"] = StringProc.new("Map[7].wayto['3668'].call;")
Room[33889].timeto["3668"] = StringProc.new("Map[7].timeto['3668'].call;")
Room[33889].tags.push("meta:fwi:teleport")
Room[33889].location = nil
Room[3669].wayto["33889"] = StringProc.new("Map[7].wayto['3668'].call;")
Room[3669].timeto["33889"] = StringProc.new("Map[7].timeto['3668'].call;")
if UserVars.osacrew["Sloop_sink_times"].nil?
	UserVars.osacrew["Sloop_sink_times"] = Array.new
end
if UserVars.osacrew["Brig_sink_times"].nil?
	UserVars.osacrew["Brig_sink_times"] = Array.new
end
if UserVars.osacrew["Car_sink_times"].nil?
	UserVars.osacrew["Car_sink_times"] = Array.new
end
if UserVars.osacrew["Gal_sink_times"].nil?
	UserVars.osacrew["Gal_sink_times"] = Array.new
end
if UserVars.osacrew["Frig_sink_times"].nil?
	UserVars.osacrew["Frig_sink_times"] = Array.new
end
if UserVars.osacrew["Man_sink_times"].nil?
	UserVars.osacrew["Man_sink_times"] = Array.new
end
mana_share
commander_begin_it