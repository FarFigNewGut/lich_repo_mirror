=begin
    Re-unifies the Cooldowns, Buffs, Debuffs, and Active Spell panels.

     author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: active spells, buffs, debuffs, cooldowns, utility
    version: 2021.07.27.01

    history:
        2021.07.27.01 - Better regex
        2021.07.26.05 - Add unified-effects:reclassify to handle "misclassified" effects (115 is spell not a buff)
                      - Add death's decay as a Debuff
                      - Add option to keep relative bar lengths consistent (5 min is never a full bar)
        2021.07.26.04 - RegEx cleanup
        2021.07.26.03 - Change dialog title to "Unified Effects"
        2021.07.26.02 - Fix id's of progress bar to retain old color settings.
        2021.07.26.01 - Initial version

    TODO:
    - Documentation for configuration options
    - Cleanup
    - Setting to rewrite SF's windows using this scripts configuration and old color settings
    - Option to force updates every N seconds - I'm not convinced short duration effects are triggering reasonable updates
=end

no_kill_all
no_pause_all
silence_me
hide_me

$active_effects = Hash.new
$last_refresh = 0
valid_types = ["Debuffs", "Cooldowns", "Buffs", "Active Spells"]

# Let users override the order of effects.  The order here is the order they'll
# be added to the common dialog.
if ( Vars['unified-effects'].nil? )
    # Default to the choice I happen to like
    Vars['unified-effects'] = "Debuffs,Cooldowns,Buffs,Active Spells"

    # If we're initializing, also init default spell re-mapping
    if ( Vars['unified-effects:reclassify'].nil? )
        Vars['unified-effects:reclassify'] = "Active Spells = 115"
    end
end

string_to_minutes = Proc.new{|time_str|
    time = 0

    if time_str =~ /\d\d:\d\d:\d\d/
        hours, minutes, seconds = time_str.split(":").map{|str| str.to_i}
        time = (hours * 60) + minutes + (seconds / 60)
    elsif time_str =~ /\d+s$/
        time = 0
    end

    time.to_i
}

Vars['unified-effects'].split(/,/).each{|type|
    next if (type =~ /^$/ || type.nil?)
    $active_effects[type] = Array.new
}

# Let users reclassify an active effect's type.
$reclassify = Hash.new

if ( !Vars['unified-effects:reclassify'].nil? )
    Vars['unified-effects:reclassify'].split(/\s*,\s*/).each{|entry|
        if ( entry =~ /\s*(.*?)\s*=\s*(.*?)\s*$/ )
            type = $1
            ids = $2
            if ($active_effects.key?(type))
                ids.split(/\s*,\s*/).each{|id|
                    $reclassify[id] = type
                }
            else
                respond "Ignoring remap request for invalid type #{type}. Type must be one of #{valid_types.join(', ')}"
            end
        end
    }
end

$active_effects_flags = Hash.new
if ( !Vars['unified-effects:flags'].nil? )
    Vars['unified-effects:flags'].split(/\s*,\s*/).each{|entry|
        $active_effects_flags[entry] = true
    }
end

close_dialog_proc = proc{|name|
    puts("<closeDialog id='#{name}'/>")
}

display_dialog_proc = proc{|name|
    window_text = "<dialogData id='#{name}' clear='t'></dialogData><dialogData id='#{name}'>"
    top = 0

    sort_order = Vars['unified-effects'].split(/,/)
    data = Array.new

    sort_order.each{|type|
        next if (!$active_effects.key?(type))
        data = data | $active_effects[type]
    }

    data.sort{|a, b| sort_order.index(a[:type]) != sort_order.index(b[:type]) ? sort_order.index(a[:type]) <=> sort_order.index(b[:type]) : a[:id] <=> b[:id]}.each{|effect|
        if sort_order.include?(effect[:type])    
            if ( $active_effects_flags.key?("consistent_bars") )
                effect[:barValue] = "#{((string_to_minutes.call(effect[:timeExact]) / 250.0) * 100).to_i}"
            end

            window_text += "<progressBar id='#{effect[:spellName]}' value='#{effect[:barValue]}' text=\"#{effect[:barText]}\" left='22%' top='#{top}' width='76%' height='15' time='#{effect[:timeExact]}'/>"
            window_text += "<label id='#{effect[:labelId]}' value='#{effect[:timeRounded]}' top='#{top}' left='0' justify='2' anchor_right='#{effect[:id]}'/>"
            top = top + 16
        end
    }

    window_text += "</dialogData>"
    puts window_text;
    $last_refresh = Time.now.to_i
}

create_dialog_proc = proc{|name, title|
    before_dying {
        close_dialog_proc.call(name)
    }

    dialog_text =  "<closeDialog id='#{name}'/>"
    dialog_text += "<openDialog type='dynamic' id='#{name}' title='#{title}' target='#{name}' location='main' height='232' width='190' resident='true'>"
    dialog_text += "<dialogData id='#{name}'></dialogData>"
    dialog_text += "</openDialog>";

    puts(dialog_text)
    display_dialog_proc.call(name)
}

create_dialog_proc.call("ActiveSpells", "Unified Effects")

action = proc { |server_string|
    if server_string =~ /<dialogData id='(Cooldowns|Debuffs|Buffs|Active Spells)'>(.*)<\/dialogData>/
        type = $1
        data = $2

        if server_string =~ /<dialogData id='#{type}' clear='t'>/
            $active_effects[type].clear
        end

        server_string.scan(/<progressBar id='(.*?)' value='(.*?)' text="(.*?)" left='.*?%' top='.*?' width='.*?%' height='.*?' time='(.*?)'\/><label id='(.*?)' value='(.*?) ' top='.*?' left='.*?' justify='.*?' anchor_right='.*?'\/>/) {|barId, barValue, barText, barTime, labelId, labelValue|
            # Name mangling necessary so currently configured custom colors continue
            # to work.
            spellNameMangled = barText
            spellNameMangled.gsub!("'", "&apos;");

            # Handle the option for users to remap effect type.
            effective_type = type

            if $reclassify.key?(barId)
                effective_type = $reclassify[barId]
            end

            $active_effects[type].push(
            {
                id:           barId.to_i,
                spellName:    spellNameMangled,
                barValue:     barValue,
                barText:      barText,
                timeExact:    barTime,
                labelId:      labelId,
                timeRounded:  labelValue,
                type:         effective_type
             })
        }

        if ( type=="Debuffs" && Spell[6666].active?)
            $active_effects[type].push(
            {
                id:           6666,
                spellName:    "Decaying",
                barValue:     Spell[6666].timeleft / 250.0,
                barText:      "Decaying",
                timeExact:    Spell[6666].remaining,
                labelId:      "16666",
                timeRounded:  Spell[6666].remaining.sub(/^[0:]+/, ''),
                type:          $reclassify[6666] || type
             })
        end

        display_dialog_proc.call("ActiveSpells")
    end

    server_string
}

hookname = "unified-effects-tracker"

before_dying {
    DownstreamHook.remove(hookname)
}

DownstreamHook.add(hookname, action)

hookname = "unified-effects-init"

before_dying {
    DownstreamHook.remove(hookname)
}


init_action = proc { |server_string|
    if server_string =~ /<prompt/
        server_string
        DownstreamHook.remove("unified-effects-init")
    end
}

DownstreamHook.add(hookname, init_action)
fput "spell active"

loop {
    pause 120
    
    #if ( $last_refresh < (Time.now.to_i - 10) )
    #    display_dialog_proc.call("ActiveSpells")
    #end
}
