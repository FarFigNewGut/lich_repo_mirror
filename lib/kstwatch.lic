=begin

This script should catch storyline-based monsterbold messages, from KST or QST, and echo them to the speech window for StormFront/profanity, or the familiar window for WizardFE.  This will hopefully make following events easier in crowded storyline rooms.

If there is anything odd that gets tracked to the speech window that isn't desired to be, send myself or newsby a copy of the message so it can be looked at.

Author: Claudaro (With contributions from Tysong)
Version: 1.1.1
Date: 7/07/2019

TAGS: KST, RP, Stormfront, speechwindow, monsterbold, GMs, QST, WizardFE, Profanity

1.0.1 Notes
	Added exception so it didn't track death's sting salves to the speech window.
1.0.2
	Added additional exceptions.
1.0.3
	May have gotten overzealous in 1.0.2.  Hopefully this fixes the issues it was having.
1.0.4
	Still having some issues, hopefully this update fixed them!
1.1
	Major update thanks to the efforts of Tysong to include additional FE's and improving the structure of the script.
1.1.1
	Hopefully tracked down the problem.  This should be working correctly again now.

=end
if $frontend == "stormfront" or "profanity"
    story_window_begin = "<pushStream id=\"speech\" ifClosedStyle=\"watching\"/>"
    story_window_end   = "<popStream/>\r\n"
else
    story_window_begin = "\034GSe"
    story_window_end   = "\034GSf\r\n"
end

line = nil
UserVars.kst                  ||= {}
UserVars.kst[:prevline]            = nil
PrevLine_Exclusions                = Regexp.union(
    /This will instantly remove some of the ill effects from Death's Sting/,
    /You scoop out a small amount of pallid grey salve from your jar\./,
    /You have earned some fame\./,
    /Please use this command again within 30 seconds to CONFIRM\./,
)


ksthunter = proc {|server_string|



    if server_string =~ /<popBold\/><prompt/
		#echo "#{UserVars.kst[:prevline]}"
        if UserVars.kst[:prevline] =~ PrevLine_Exclusions
            server_string
        else
            puts("#{story_window_begin}#{UserVars.kst[:prevline]} \r\n#{story_window_end}")
            server_string
        end
    else
        UserVars.kst[:prevline] = server_string
        server_string
    end
}
DownstreamHook.add('ksthunter', ksthunter)
before_dying {
    DownstreamHook.remove('ksthunter')
}

loop do
    sleep 1
end