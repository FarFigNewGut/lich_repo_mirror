=begin
	# Heal bot
	#Speaking Heal Regex by Gib
	#Small modifications by Auryana.
	# v 0.75 beta

	New Healbot 2020, based off the old Healbot on the repo since 2015.
	by Daedeus
	NEW FEATURES:

	- Will wait a default of 6 seconds before responding to a heal request.
	- When mind is high, will increase wait time to 20s to give other healers a longer chance.
	- Will monitor for other healers responding to a request, and cancel if it happens.
	- Will try to respond appropriately to heal requests for a dead body.
	- Will scan and maintain a list of known empaths, and avoid automatically healing them.
	- Will appraise a target before accepting their heal request.
    - Will respond to taps.
	- Will monitor for bards in the room that blow up a gem.
	- Will monitor for rogues in the room that set off certain traps. (BETA/INCOMPLETE)

	- ;healbot invasion   -INVASION MODE! faster healing, less waiting etiquette
=end


#You will automatically heal these people when they run into the room.
#Pinipin focuses on Azanoth with intense concentration.
friendlist = []
ignore = []
$invasion = script.vars[1] =~ /invasion/

if $invasion
	echo "************************"
	echo "**** INVASION MODE *****"
	echo "************************"
end

#We will keep track of known empaths here
CharSettings['known_empaths'] = Hash.new unless CharSettings['known_empaths']

#from title.lic
squelch_who = proc{
	started = false
	hook_proc = proc { |s|
		if started
			if s =~ /<prompt/
				DownstreamHook.remove('squelch-who')
				nil
			elsif s =~ /<output/
				s
			else
				nil
			end
		elsif s =~ /^Brave Adventurers Questing:/
			started = true
			nil
		else
			s
		end
	}
	DownstreamHook.add('squelch-who', hook_proc)
}

scan_for_empaths = proc {
	echo "***Checking for new empaths...***"
	number_of_players_added = 0
	squelch_who.call
	silence_me
	fput "who profession empath"
	silence_me
	all_list = nil
	while (line = get)
		if (line =~ /Brave Adventurers Questing\:/)
			while (line = get)
				all_list += "#{line} " unless (line =~ /Total\:|^\[.*?\]\-[A-z]+\:|^\[server\]\: "/)
				break if (line =~ /Total\:/)
			end
			break
		end
	end
	all_list = all_list.split(" ")
	all_list.each { |name|
		unless CharSettings['known_empaths'].include?(name)
			#players_added += "#{name} (#{checking_current_profession})\n"
			CharSettings['known_empaths'].store(name, "empath")
			number_of_players_added += 1	
		end
	}
	echo "***Added #{number_of_players_added} new empaths to the list.***"
}

#You will also not automatically heal these people who you know to be empaths
#Sometimes people can hide their profession from the who list
KnownEmpaths = /Tawariell|Suvean|Chandrellia|Phatall|Tranquia|Vrom|Invuna|
				Roqe|Aezha|Treeva|Elionwey|Wanion|Samyael|Balley|Kahlanni|
				Yosaffbrig|Snarc|Dirvy|Martyle|Cyana|Xanthras|Rhangath|Iseo|
				Archengrace|Minniemae|Hanscold|Elionway|Dowfen|Telare|Anditus|
				Aeraaxu|Mirando|Morvai|Svanya/x

def gd_wound_transfer(person)
	fput "appraise #{person}"
	line = matchtimeout 5, "You take a quick appraisal of "
	if line !~ /You take a quick appraisal of/ then return end
	wounds = []
	if line =~ /head/ then wounds.push "head" end
	if line =~ /neck/ then wounds.push "neck" end
	if line =~ /right eye/ then wounds.push "right eye" end
	if line =~ /left eye/ then wounds.push "left eye" end
	if line =~ /back/ then wounds.push "back" end
	if line =~ /chest/ then wounds.push "chest" end
	if line =~ /abdomen|abdominal/ then wounds.push "abdomen" end
	if line =~ /left arm/ then wounds.push "left arm" end
	if line =~ /right arm/ then wounds.push "right arm" end
	if line =~ /left hand/ then wounds.push "left hand" end
	if line =~ /right hand/ then wounds.push "right hand" end
	if line =~ /left leg/ then wounds.push "left leg" end
	if line =~ /right leg/ then wounds.push "right leg" end
	if line =~ /twitching|convulsions/ then wounds.push "nerves" end
	if line =~ /no apparent injuries/ then wounds = [] end

	wounds.each do |wound|
		put "transfer #{person} #{wound}"
		pause("0.25s")
	end
	if line !~ /no apparent injuries/
		line = "You take some of sombody's blood loss."
		while checkhealth > 75 and line =~ /some of .+ blood loss/
			fput "transfer #{person}"
			line = matchwait "You take", "You infuse", "Nothing happens."
		end
	end

	echo "wound transfer done"
end
def healbot_cure(cureloc, curemana)
	curelevel = curemana
	curelevel -= 4 if curelevel > 14
	waitrt?
	waitcastrt?
	if checkmana(curemana) and Char.prof == "Empath" and Char.level >= curelevel and Spells.empath >= curelevel
		fput "cure #{cureloc}"
		pause("2s")
		return false
	end
	waitrt?
	waitcastrt?
	return true
end

#In this script, we don't heal rank 1 wounds or scars, in order to maximize healing uptime.
#Scars can take a lot of RT to heal which can interfere with healing others.
#Rank 1 Wounds can usually be left to Troll's Blood
#If you really want to heal these, use another script like ;healself
def healbot_healme(type, dtr)
	if checkhealth < maxhealth then healbot_cure("", 1) end
	dtr = 3 if dtr > 3
	dtr = 1 if dtr < 1
	if type == "Wounds"
		#echo "healing wounds"
		dtr.times { |m|
			n = [3, 2, 2][m]
			x = [5, 5, 0][m]
			if Wounds.head == n		then healbot_cure("head", 4+x) end
			if Wounds.leftArm == n		then healbot_cure("left arm", 2+x) end
			if Wounds.rightArm == n		then healbot_cure("right arm", 2+x) end
			if Wounds.nerves == n		then healbot_cure("nerves", 3+x) end
			if Wounds.leftEye == n		then healbot_cure("left eye", 5+x) end
			if Wounds.rightEye == n		then healbot_cure("right eye", 5+x) end
			if Wounds.leftHand == n		then healbot_cure("left hand", 2+x) end
			if Wounds.rightHand == n	then healbot_cure("right hand", 2+x) end

			if !$invasion
				if Wounds.neck == n		then healbot_cure("neck", 4+x) end
				if Wounds.chest == n		then healbot_cure("chest", 5+x) end
				if Wounds.abdomen == n		then healbot_cure("abdomen", 5+x) end
				
				if Wounds.leftLeg == n		then healbot_cure("left leg", 2+x) end
				if Wounds.rightLeg == n		then healbot_cure("right leg", 2+x) end
				if Wounds.back == n			then healbot_cure("back", 5+x) end
			end
		}
	elsif type == "Scars"
		dtr.times { |m|
			n = [3, 2, 2][m]
			x = [4, 4, 4][m]

			n = 4 if $invasion # do not heal scars during invasion because your empath takes too much RT

			if Scars.head == n		then healbot_cure("head", 13+x) end
			if Scars.neck == n		then healbot_cure("neck", 13+x) end
			if Scars.chest == n		then healbot_cure("chest", 14+x) end
			if Scars.abdomen == n		then healbot_cure("abdomen", 14+x) end
			if Scars.leftArm == n		then healbot_cure("left arm", 11+x) end
			if Scars.rightArm == n		then healbot_cure("right arm", 11+x) end
			if Scars.leftLeg == n		then healbot_cure("left leg", 11+x) end
			if Scars.rightLeg == n		then healbot_cure("right leg", 11+x) end
			if Scars.back == n			then healbot_cure("back", 14+x) end
			if Scars.leftHand == n		then healbot_cure("left hand", 11+x) end
			if Scars.rightHand == n		then healbot_cure("right hand", 11+x) end
			if Scars.nerves == n		then healbot_cure("nerves", 12+x) end
			if Scars.leftEye == n		then healbot_cure("left eye", 14+x) end
			if Scars.rightEye == n		then healbot_cure("right eye", 14+x) end
		}
 	end
end

def AnyOtherEmpaths?()
	return GameObj.pcs.any? { |pc| 
		pc.noun != Char.name && !CharSettings['known_empaths'][pc.noun].nil?
	}
end

############################################################################################################
echo "***HealBot knows about #{CharSettings['known_empaths'].length} empaths.***"
scan_for_empaths.call
$lastScan = Time.now 

loop {
	#scan for new empaths every 5 minutes
	if Time.now - $lastScan > 300
		scan_for_empaths.call
		$lastScan = Time.now 
	end

	#keep staunching up in case you accept bleeders
	fput "sign of staunching" if Spell["Sign of Staunching"].known? && Spell["Sign of Staunching"].affordable? && !Spell["Sign of Staunching"].active?
	
	#echo "waiting for healee.."
	line = matchtimeout 10, "whispers", "asks", "exclaims", "says", "just", "arrived", "arrives", "taps you", "shatters into thousands of fragments", "severely perforated", "drawing the blood from his body", "begins to boil violently", "sickly greenish hue"
	#next if checkmind !~ /becoming|muddled|clear|fresh|numbed/
#You infuse Fliayeb with your own strength, and she appears entirely restored
	if line =~ /(?:^Speaking .*to )?(you, |[A-Z][a-z]+, )?(?:The ghostly voice of |The ghost of )?([A-Z][a-z]+).*(whispers,|asks,|exclaims,|says,)(?i).*?(heal[^t]|bleed|minor|'?ealing?|lacerations|cuts|wound|patch|empath|poison|disease|medic).*?(?:\.|\!|\?)\"|([A-Z][a-z]+) meditates over.*/i
		target = $1
		healee = $2

		verb = $3

		if line =~ /Speaking .*to/
			next unless line =~ /Speaking .*to you/
		end

		next if ignore.include? healee
		next if healee =~ /Speaking/

		bodies = GameObj.pcs.select { |pc| pc.status =~ /dead/ }.map{ |pc| pc.name }
		has_bodies = bodies.length > 0
		bodies_regex = /(#{bodies.join('|')})/

		pause_script "bigshot" if running? 'bigshot'
		echo "***** Healing requested by #{healee}... *****"
		if !CharSettings["known_empaths"][healee].nil? || healee =~ KnownEmpaths 
			echo "*** #{healee} is an empath ***"
			next
		end
		
		#default wait time
		waittime = 6
		sleeptime = 3

		if percentmind <= 25 #you need xp
			waittime = 2
			sleeptime = 1
			echo "*** Mind low, moving quickly on #{healee} ***"
		end
		if percentmind > 70 #give other healers a chance
			if !AnyOtherEmpaths?()
				echo "*** There seem to be no other empaths, so we won't wait extra long ***"
			else
				waittime = 24
				echo "*** Mind high, waiting longer to see if #{healee} gets healed.. ***"
			end
		end

		if $invasion
			waittime = 3
			echo "*** It's an invasion, we'll move quickly ***"
		end
		
		if verb =~ /whispers/
			echo "*** Direct whisper, expediting ***"
			sleeptime = 1
			waittime = 1
		end

		result = matchtimeout waittime + checkrt, "nods at #{healee}", "nods to #{healee}", "focuses on #{healee} with intense concentration"
		if result =~ /(.*) nods at|(.*) focuses on #{healee} with intense concentration/ #some other healer is working this target
			echo "***** Looks like #{$1} is healing #{healee}. ******"
			next
		end
		echo "***** We will heal #{healee}. ******"

		#appraisal check
		result = dothistimeout "appraise #{healee}", 5, /You take a quick appraisal/
		if result =~ /no apparent injuries/
			echo "***** #{healee} is not injured.  False alarm? *****"
			if has_bodies && line =~ bodies_regex
				next if $1.nil?
				echo "*** Maybe they are talking about the dead body, #{$1} ***"
				deader = $1
				result = dothistimeout "appraise #{deader}", 5, /You take a quick appraisal/
				if result =~ /no apparent injuries/
					echo "*** The dead body has no injuries. ***"
					next
				else
					fput "nod #{healee}"
					fput "nod #{deader}"
					healee = deader
				end
			else
				next
			end
		else
			fput "nod #{healee}"
		end
		sleep sleeptime
		gd_wound_transfer(healee)
	elsif line =~ /([A-Z,a-z]+)('s group | )(just arrived|arrives at your table|just came crawling in|just limped in|just came marching in|just came sashaying in gracefully|just arrived, skipping merrily|just tiptoed in|just strode in|just stumbled in|just came trudging in)/
		healee = $1
		if friendlist.include?(healee)
			echo "Friend #{$1} arrived."	
			gd_wound_transfer(healee)
		end
	elsif line =~ /([A-Z,a-z]+) taps you lightly on the shoulder/
		healee = $1
		echo "Direct tap."
		sleep 2
		fput "nod #{$1}"
		sleep 2
		gd_wound_transfer(healee)
	elsif line =~ /which quickly shatters into thousands of fragments/
		line =~ /(.*)'s voice focuses on the (.*) which quickly shatters into thousands of fragments/
		healee = $1
		echo "Uh oh bard accident."
		gd_wound_transfer(healee)
	elsif line =~ /(.*) is severely perforated|The ground beneath (.*) begins to boil violently/
		healee = $1
		echo "Uh oh rogue accident."
		gd_wound_transfer(healee)
	elsif line =~ /\. (.*) looks ill as (?:his|her) skin takes on a sickly greenish hue/
		healee = $1
		echo "Uh oh scarab poison."
		Spell[114].cast healee
		gd_wound_transfer(healee)
	elsif line =~ /\. (.*?) moans to himself and his skin takes on a yellowish tint./
		healee = $1
		echo "Uh oh scarab disease"
		Spell[113].cast healee
	elsif line =~ /(.*) gasps in pain and shock as (.*) drawing the blood from his body/
		healee = $1
		echo "Uh oh blood scarab."
		10.times {
			fput "transfer #{$1}"
			fput "cure blood"
			sleep 3
		}
	end
	healbot_healme("Wounds", 3)
	healbot_healme("Scars", 3)
}

#Tavino gasps in pain and shock as a blood red teardrop-etched scarab pulsates, drawing the blood from his body!