=begin
    Enchant (925) Tears Assistance
    Handy script to assist with tear info
	
    SYNTAX - ;tears <OPTION>
	
    OPTION Selections Include:
         CHART  - Prints off enchant cast tear cost chart for each +1
         SENSE  - Tells you how much tears you have based on SENSE messaging
         CALC   - calculate cost for an enchant project from x to y
                  ;tears calc [starting enchant] [ending enchant] [silver rate per essence]
         CHANCE - Description of test CASTs and chance to succeed
         ROLLS  - Numeric values for roll descriptions
         MATS   - Material difficulty modifiersulty Modifiers
         BONUS  - Show's enchanting success bonus formula

       todo: none
     author: Elanthia-Online
       name: tears
       tags: tears, essence, enchant, enchanting, 925
    version: 1.7

    changelog:
        1.7 (2020-12-06)
            Update for new tears values
        1.6 (2020-09-29)
            Update for commas in INFO readout for ;tears bonus
        1.5 (2020-07-27)
            Updated bonus option to scrape SKILLS/INFO command for enhanced values
        1.4 (2020-07-21)
            Added bonus option to show calculated enchant success formula
        1.3 (2020-05-23)
            Added total cost estimates to calc function
        1.2 (2019-05-14)
            Added material, chance, and rolls function from ;dechanter (thanks Claudaro)
        1.1 (2019-05-10)
            Added calc function (thanks FarFigNewGut)
        1.0 (2019-05-06)
            Initial release

=end

tear_cost = ["0", "312", "625", "937", "1250", "1562", "1875", "2187", "2500", "2812", "3125", "3437", "3750", "4062", "4375", "4687", "5000", "5312", "5625", "5937", "6250", "6562", "6875", "7187", "7500", "15000", "22500", "30000", "37500", "45000", "52500", "60000", "67500", "75000", "82500", "90000", "97500", "105000", "112500", "120000", "127500", "135000", "142500", "150000", "157500", "165000", "172500", "180000", "187500", "195000"]
WEEK = 50000.0

PAD = 91

private_workshop = ["Tysong"]

#Array of Material Modifiers [12, 4, 4, 4, 4, 4]
mat_list = [["Adamantine  ", "-500", "-500", "-500", "N/A ", "N/A "],
			["Alexandrite ", "-500", "0   ", "N/A ", "N/A ", "N/A "],
			["Black-alloy ", "0   ", "-50 ", "0   ", "N/A ", "N/A "],
			["Bone        ", "-250", "+10 ", "-250", "N/A ", "N/A "],
			["Bronze      ", "-50 ", "N/A ", "-50 ", "N/A ", "N/A "],
			["Carmiln     ", "N/A ", "N/A ", "N/A ", "+10 ", "+10 "],
			["Cloth       ", "N/A ", "N/A ", "0   ", "N/A ", "N/A "],
			["Copper      ", "-50 ", "N/A ", "-50 ", "N/A ", "N/A "],
			["Coraesine   ", "-200", "N/A ", "N/A ", "N/A ", "N/A "],
			["Deringo     ", "N/A ", "-20 ", "N/A ", "-20 ", "-20 "],
			["Drakar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
			["Drake       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Eahnor      ", "+15 ", "+15 ", "+15 ", "N/A ", "N/A "],
			["Eonake      ", "-60 ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Faenor      ", "+15 ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Faewood     ", "N/A ", "+10 ", "N/A ", "N/A ", "0   "],
			["Feras       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Fireleaf    ", "N/A ", "+15 ", "N/A ", "N/A ", "+15 "],
			["Glaes       ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
			["Glass       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Glowbark    ", "N/A ", "-10 ", "N/A ", "-10 ", "-10 "],
			["Golvern     ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
			["Gornar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
			["Hoarbeam    ", "N/A ", "+5  ", "N/A ", "+5  ", "+5  "],
			["Illthorn    ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
			["Imflass     ", "-30 ", "-30 ", "-30 ", "N/A ", "N/A "],
			["Invar       ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
			["Ipantor     ", "N/A ", "N/A ", "N/A ", "-40 ", "N/A "],
			["Iron        ", "-30 ", "-30 ", "-30 ", "N/A ", "N/A "],
			["Ironwood    ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
			["Kakore      ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
			["Kelyn       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Krodera     ", "-999", "N/A ", "N/A ", "N/A ", "N/A "],
			["Kroderine   ", "-999", "-999", "-999", "N/A ", "N/A "],
			["Leather     ", "N/A ", "N/A ", "-10 ", "N/A ", "N/A "],
			["Lor         ", "N/A ", "N/A ", "N/A ", "N/A ", "-25 "],
			["Mein        ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
			["Mesille     ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
			["Mithglin    ", "+15 ", "+15 ", "+15 ", "N/A ", "N/A "],
			["Mithril     ", "+20 ", "+20 ", "+20 ", "N/A ", "N/A "],
			["Modwir      ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Mossbark    ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
			["Obsidian    ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
			["Ora         ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
			["Ora, Black  ", "-75 ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Ora, White  ", "-40 ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Orase       ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
			["Razern      ", "-20 ", "N/A ", "N/A ", "N/A ", "N/A "],
			["Rhimar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
			["Rolaren     ", "-40 ", "-40 ", "-40 ", "N/A ", "N/A "],
			["Rowan       ", "N/A ", "N/A ", "N/A ", "N/A ", "+20 "],
			["Ruby        ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
			["Ruic        ", "N/A ", "N/A ", "N/A ", "-60 ", "N/A "],
			["Sephwir     ", "N/A ", "N/A ", "N/A ", "-25 ", "N/A "],
			["Steel       ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
			["Stone       ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
			["Urglaes     ", "-999", "-999", "-999", "N/A ", "N/A "],
			["Urnon       ", "-999", "N/A ", "N/A ", "N/A ", "N/A "],
			["Vaalorn     ", "+10 ", "+10 ", "+10 ", "N/A ", "N/A "],
			["Veil-iron   ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
			["Villswood   ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
			["Vultite     ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
			["White-alloy ", "N/A ", "0   ", "0   ", "N/A ", "N/A "],
			["Witchwood   ", "N/A ", "N/A ", "N/A ", "N/A ", "-75 "],
			["Wood        ", "-100", "-10 ", "-100", "-10 ", "-10 "],
			["Wyrwood     ", "N/A ", "N/A ", "N/A ", "-60 ", "N/A "],
			["Yew         ", "N/A ", "N/A ", "N/A ", "-20 ", "N/A "],
			["Zelnorn     ", "-999", "-999", "-999", "N/A ", "N/A "],
			["Zorchar     ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
			["Metal       ", "-500", "-500", "-500", "N/A ", "N/A "]]

#Arrays of Roll Results and Descriptions [33, 82]-Needed [40, 6]-Roll
r_need = [["97% (Will only fail on a fumble.)", "You can only fail if you are horribly unlucky.                                    "],
		  ["90%-96% Chance                   ", "You should be able to enchant it easily enough, barring bad luck.                 "],
		  ["75%-89% Chance                   ", "The odds are on your side to successfully complete the enchantment.               "],
		  ["55%-74% Chance                   ", "You are more likely than not to succeed on your cast, but you will need some luck."],
		  ["35%-54% Chance                   ", "This enchantment will be difficult, but possible.                                 "],
		  ["15%-34% Chance                   ", "This enchantment will be very difficult.                                          "],
		  ["2%-14% Chance                    ", "That this enchantment will be nearly impossible.                                  "],
		  ["1% Chance (Roll 100)             ", "You will likely need a miracle to complete this enchantment.                      "],
		  ["Only rolling over 100 has a shot.", "This enchantment is completely beyond your abilities.                             "]]

r_result = [["You make an outstanding attempt!        ", "90+   "],
			["You make an excellent attempt!          ", "80+   "],
			["You make a good attempt!                ", "70+   "],
			["You make a decent attempt.              ", "60+   "],
			["You make an okay attempt.               ", "50+   "],
			["You make a passable attempt.            ", "40+   "],
			["You make a questionable attempt.        ", "30+   "],
			["You make a poor attempt!                ", "20+   "],
			["You make a very poor attempt!           ", "10+   "],
			["You make a horribly poor attempt!       ", "2+    "],
			["You make an astoundingly inept attempt! ", "1     "],
			["Something doesn't seem right...         ", "Fumble"]]

def rowout(msg_arr, mbold = false)
        out = '| '
        msg_arr.each { |m|
                out += '%-12.12s | ' % m
        }
        if mbold == true
                _respond "#{monsterbold_start}#{out}#{monsterbold_end}"
        else
                _respond out
        end
end

def number_commas(number)
	return number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
end

def silver_to_dollar(silvers, dollar_per)
	return '%.2f' % ((silvers / 1000000 * dollar_per).to_f.round(2))
end

def calc_rate_row(rate, running_total_ess)
	silver_cost = rate.to_f * running_total_ess.to_f
	row_label = "#{rate} silver"
	orig_rate = rate * 3.125
	silver_cost_comma = number_commas(silver_cost)
	output = [row_label,
                  "#{orig_rate} silver",
                  silver_cost_comma,
                  silver_to_dollar(silver_cost, 4),
                  silver_to_dollar(silver_cost, 5)]
	return output
end

def rowout2(msg_arr, mbold = false)
        out = '| '
        msg_arr.each { |m|
                out += '%-16.16s | ' % m
        }
        if mbold == true
                _respond "#{monsterbold_start}#{out}#{monsterbold_end}"
        else
                _respond out
        end
end

def do_calc(tear_cost)
	starting_bonus = variable[2].to_i
	if variable[3] and variable[3].to_i <= 50
		ending_bonus = variable[3].to_i
	elsif not variable[3] or variable[3].to_i > 50
		ending_bonus = 50
	end
	if variable[4]
		tears_rate = variable[4].to_i
	end
	if ending_bonus <= starting_bonus
		_respond "Ending bonus must be greater than starting bonus"
		_respond ";tears calc [starting bonus] [ending bonus]"
		exit
	end

	_respond "Calculating essence needed to take an item from #{starting_bonus} to #{ending_bonus}"
	_respond ""

	_respond "-" * PAD
	headers = ['Current', 'New', 'Cost (ess)', 'Cost (wks)', 'Total (ess)', 'Total (wks)']
	rowout(headers, true)
	_respond "-" * PAD

	current_bonus = starting_bonus
	running_total_ess = 0
	while current_bonus < ending_bonus
		if current_bonus < 0
			step_cost = 0
		else
			step_cost = tear_cost[current_bonus].to_i
		end
		running_total_ess += step_cost
		response_array = [current_bonus, 
                                  current_bonus + 1, 
                                  step_cost, 
                                  (step_cost / WEEK).round(2), 
                                  running_total_ess, 
                                  (running_total_ess / WEEK).round(2)]
		rowout(response_array)
		current_bonus += 1
	end
	_respond "-" * PAD
	_respond ""
	_respond "-" * 96
	headers = ['Cost per Essence', 'Old Cost per Ess', 'Total Cost', '$4/1m Silver', '$5/1m Silver']
	rowout2(headers, true)
	_respond "-" * 96
	if variable[4]
		rowout2(calc_rate_row(tears_rate, running_total_ess))
	else
		(4..10).to_a.each { |rate_multi|
			rate = 16 * rate_multi
			rowout2(calc_rate_row(rate, running_total_ess))
		}
	end
	_respond "-" * 96
	
end

if variable[0].nil?
	respond "You need to give an otption. See below:"
	respond ""
	respond "   ;tears chart  - Prints off enchant cast tear cost chart for each +1"
	respond "   ;tears sense  - Tells you how much tears you have based on SENSE messaging."
	respond "   ;tears calc [starting bonus] [ending bonus] [silver rate per essence]"
	respond "       Tells you the cost for enchanting an item from starting bonus to ending bonus"
	respond "   ;tears chance - Description Of Test CASTs And Chance To Succeed"
	respond "   ;tears rolls  - Numeric Values For Roll Descriptions"
	respond "   ;tears mats   - Material Difficulty Modifiers"
	respond "   ;tears bonus  - Show's enchanting success bonus formula"
	respond
elsif variable[0] =~ /chart/
	respond "Tears needed to do a single +1 cast"
	respond ""
	tear_cost.each_index { |tear|
		respond "+#{tear.to_s.rjust(2, " ")} -> +#{(tear+1).to_s.rjust(2, " ")} - #{tear_cost[tear].rjust(5, " ")} tears"
	}
	respond ""
	
	exit
elsif variable[0] =~ /calc/
	do_calc(tear_cost)
	exit
elsif variable[0] =~ /sense/
	line = dothistimeout "sense", 5, /You sense that you have accumulated enough essence to complete a +(.*) enchantment\./
	if line =~ /You sense that you have accumulated enough essence to complete a +(.*) enchantment\./
		respond "You have a minimum of #{tear_cost[$1.to_i - 1]} tears."
	end
	exit
elsif script.vars[0] =~ /mat/
	respond "|--------------------------------------------------------------|"
	respond "|                    Material Difficulty Modifiers             |"
	respond "|--------------------------------------------------------------|"
	respond "|   Material   | Weapons | Shields | Armor | Bows | Runestaves |"
	respond "|--------------------------------------------------------------|"
	mat_list.each{ |mat, weap, shie, arm, bow, rune|
		respond "| #{mat} |  #{weap}   |  #{shie}   | #{arm}  | #{bow} |    #{rune}    |"
	}
	respond "|--------------------------------------------------------------|"
	exit
elsif script.vars[0] =~ /chance/
	respond "|-------------------------------------------------------------------------------------------------------------------------|"
	respond "|                                  Description Of Test CASTs And Chance To Succeed                                        |"
	respond "|-------------------------------------------------------------------------------------------------------------------------|"
	respond "| Chance To Get A Successful CHANNEL |                       Messaging On Test CAST                                       |"
	respond "|-------------------------------------------------------------------------------------------------------------------------|"
	r_need.each{|rchan, rmes|
	respond "| #{rchan}  | #{rmes} |"}
	respond "|-------------------------------------------------------------------------------------------------------------------------|"
	exit
elsif script.vars[0] =~ /rolls/
	respond "|-------------------------------------------------------|"
	respond "|          Numeric Values For Roll Descriptions         |"
	respond "|-------------------------------------------------------|"
	respond "|          Roll Result Description         | Roll Value |"
	respond "|-------------------------------------------------------|"
	r_result.each{|rdesc, rval|
	respond "| #{rdesc} |    #{rval}  |"}
	respond "|-------------------------------------------------------|"
	exit
elsif script.vars[0] =~ /bonus/
	arcanesymbols = 0
	magicitemuse = 0
	elementalmanacontrol = 0
	wizardranks = 0
	level = 0
	logic = 0
	intuition = 0

	put "skills"
	loop {
	    line = get
	    if line =~ /^  Arcane Symbols\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
        	arcanesymbols = $1.to_i
    	elsif line =~ /^  Magic Item Use\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
	        magicitemuse = $1.to_i
	    elsif line =~ /^  Elemental Mana Control\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(?:\d+)(?:\s+)(\d+)$/
        	elementalmanacontrol = $1.to_i
    	elsif line =~ /^  Wizard\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\|(?:\s+)(\d+)$/
	        wizardranks = $1.to_i
	    elsif line =~ /\(Use SKILLS BASE to display unmodified ranks and goals\)/
        	break
    	end
	}
	put "info"
	loop {
	    line = get
	    if line =~ /^Gender: (?:\w+)(?:\s+)Age: (?:[\d,]+)(?:\s+)Expr: (?:[\d,]+)(?:\s+)Level:(?:\s+)(\d+)$/
        	level = $1.to_i
    	elsif line =~ /^       Logic \(LOG\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
	        logic = $1.to_i
	    elsif line =~ /^   Intuition \(INT\):(?:\s+)(?:\d+) \((?:\d+|-\d+)\)(?:\s+)\.\.\.(?:\s+)(?:\d+) \((\d+|-\d+)\)$/
        	intuition = $1.to_i
        	break
    	end
	}

	respond "Enchanting Success Formula"
	respond "---------------------------"
	respond "  #{(level).to_s.rjust(3)} : Level"
	respond "+ #{(logic).to_s.rjust(3)} : LOG Bonus"
	respond "+ #{(intuition).to_s.rjust(3)} : INT Bonus"
	respond "+ #{((magicitemuse/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
	respond "+ #{((arcanesymbols/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
	respond "+ #{((elementalmanacontrol/2).truncate).to_s.rjust(3)} : trunc(EMC ranks/2)"
	respond "+ #{((wizardranks > (level + 1) ? (level + 1)*2 + (wizardranks - (level + 1)) : wizardranks * 2)).to_s.rjust(3)} : Wizard Spells"
	respond "+  25 : Familiar Bonus"
	respond "+  #{private_workshop.include?(Char.name) ? 75 : 50} : Workshop Bonus"
	respond "==========================="
	respond "Total of #{level + logic + intuition + (magicitemuse/10).truncate + (arcanesymbols/10).truncate + (elementalmanacontrol/2).truncate + (wizardranks > (level + 1) ? (level + 1)*2 + (wizardranks - (level + 1)) : wizardranks * 2) + 25 + (private_workshop.include?(Char.name) ? 75 : 50)}"
	exit
end
