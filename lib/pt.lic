=begin
  Perfect Tone v3.16

  This is a script to assist with using tones and verbs.

  Proper Usage:

  ;pt <comments>
  -OR-
  ;pt

  Select the desired tone and verb.
  Press Save and Close.
   
  Favorites:

  Clicking the Set Favorites will change to Favorites mode.
  Select any tones and verbs you want to be favorites.
  Click Save Favorites
  These will now appear in your Favorites window

  Recent Addition:
  
  Added in import and export features for category modifications
    - Import file must be in your lich directory and named PT_import.csv.
    - Create your own categories and upload it to the repository to share.
    
  Older Additions:
  Added in the new verbs
  Added the ability to remove the daily check all together.  
  Updated trust check for version checking only. (Optional now)
  Added in checkbox syncing.
  Added in checks to keep just 1 tone and 1 verb checked.
  Added in automatic version checking. 
  Added in a configuration tab with version updating options.
  Rebuilt the entire GUI
  Rebuilt the frames to seperate Tone and Verbs
  Categories has been added (Reach out to Ensayn if you want changes to tone/verb category assignments.
  Target selection.  Target Refresh!
  Commandline text now passed to GUI.
  Dropdown boxes now have labels
  
  Bug Fixes:
  Fixed a bug if PT_IMPORT doesn't exist.

  Bugs:
  You tell me!!  Please please tell me.


  Future Features:
  Updated Categories (in progress)
  Rollback version feature.  (Maybe)
  Recently used.
  Continued work on the UI.


=end



$choice_array = Array.new
$fav_choice_array = Array.new
$target_array = Array.new
$cat_choice_array = Array.new
@catarray =Array.new
@goforit = false
@exitnow = false
@debug = false
@output_text = ""
@target_count = 0

class Choice
  def print
    #echo ("#{@choicename} ----> #{@choicevalue} ----> #{@choicetype}")
  end
  def choicename
    @choicename
  end
  def choicevalue
    @choicevalue
  end
    def choicetype
    @choicetype
  end
  def choicecat
    @choicecat
  end
  def initialize(c_name,c_value,c_type,c_cat)
    @choicename = c_name
    @choicevalue = c_value
    @choicetype = c_type
    @choicecat = c_cat
    $choice_array  << (self)
  end
end

class Cat_Choice
  def print
    #echo ("#{@choicename} ----> #{@choicevalue} ----> #{@choicetype}")
  end
  def choicename
    @choicename
  end
  def choicevalue
    @choicevalue
  end
    def choicetype
    @choicetype
  end
  def choicecat
    @choicecat
  end
  def initialize(c_name,c_value,c_type,c_cat)
    @choicename = c_name
    @choicevalue = c_value
    @choicetype = c_type
    @choicecat = c_cat
    $cat_choice_array  << (self)
  end
end

class Fav_Choice
  def print
    #echo ("#{@choicename} ----> #{@choicevalue} ----> #{@choicetype}")
  end
  def choicename
    @choicename
  end
  def choicevalue
    @choicevalue
  end
    def choicetype
    @choicetype
  end
  def choicecat
    @choicecat
  end
  def initialize(c_name,c_value,c_type,c_cat)
    @choicename = c_name
    @choicevalue = c_value
    @choicetype = c_type
    @choicecat = c_cat
    $fav_choice_array  << (self)
  end
end

class Target_choice
  def print
    echo ("#{@targetname} ----> #{@targetid}")
  end
  def targetname
    @targetname
  end
  def targetid
    @targetid
  end
  def initialize(tc_name,tc_id)
    @targetname = tc_name
    @targetid = tc_id
    $target_array  << (self)
  end
end


@tonearray=[]

def toneadd(item,cat)
  hash = { "name"  => item, "category" => cat}
  @tonearray.push(hash)
end

@verbarray=[]

def verbadd(item,cat)
  hash = { "name"  => item, "category" => cat}
  @verbarray.push(hash)
end

import_dir = "#{$lich_dir}" 
import_filename = "PT_import.csv"
import_file = "#{import_dir}#{import_filename}"
import_fav_filename = "PT_FAV_import.csv"
@import_fav_file = "#{import_dir}#{import_fav_filename}"

def import_from_CSV
  echo "working on a CSV"
  csv = File.open(import_file, "r")
   csv_start = true
   csv.each_line{|line|
     if line.split(",")[2].gsub("\n","") == "tone"
      toneadd(line.split(",")[0],line.split(",")[1])
     end
     if line.split(",")[2].gsub("\n","") == "verb"
      verbadd(line.split(",")[0],line.split(",")[1])
     end
   }
  csv.close
end

if @favs_found['import'] != true || $SAFE > 0 || !(File.file?(import_file))
  toneadd("abashed","Uncomfortable")
  toneadd("abrupt","Rude/Impolite")
  toneadd("absent","Rude/Impolite")
  toneadd("accusing","Unhappy")
  toneadd("acerbic","Rude/Impolite")
  toneadd("acid","Angry")
  toneadd("acrid","Rude/Impolite")
  toneadd("adamant","Serious")
  toneadd("admiring","Friendly/Polite")
  toneadd("adoring","Friendly/Polite")
  toneadd("affable","Friendly/Polite")
  toneadd("affectionate","Friendly/Polite")
  toneadd("affronted","Annoyed")
  toneadd("aggressive","Manner")
  toneadd("agonize","Confused/Querulous")
  toneadd("agreeable","Happy")
  toneadd("airy","Rude/Impolite")
  toneadd("aloof","Rude/Impolite")
  toneadd("amiable","Happy")
  toneadd("amicable","Friendly/Polite")
  toneadd("amused","Happy")
  toneadd("angry","Angry")
  toneadd("animated","Manner")
  toneadd("annoyed","Annoyed")
  toneadd("annoying","Unhappy")
  toneadd("anxious","Baffled/Worried")
  toneadd("apathetic","Unhappy")
  toneadd("apocryphal","Manner")
  toneadd("apologetic","Friendly/Polite")
  toneadd("appreciative","Happy")
  toneadd("apprehensive","Unhappy")
  toneadd("approving","Happy")
  toneadd("arch","Rude/Impolite")
  toneadd("ardent","Happy")
  toneadd("argumentative","Annoyed")
  toneadd("arrogant","Rude/Impolite")
  toneadd("ashamed","Unhappy")
  toneadd("assertive","Manner")
  toneadd("astounded","Manner")
  toneadd("audacious","Manner")
  toneadd("austere","Sound")
  toneadd("authoritative","Serious")
  toneadd("avaricious","Unhappy")
  toneadd("avid","Excited/Bored")
  toneadd("awkward","Uncomfortable")
  toneadd("baffled","Baffled/Worried")
  toneadd("baffling","Manner")
  toneadd("bashful","Uncomfortable")
  toneadd("befuddled","Baffled/Worried")
  toneadd("begrudging","Unhappy")
  toneadd("belated","Manner")
  toneadd("belligerent","Rude/Impolite")
  toneadd("bemused","Baffled/Worried")
  toneadd("bewildered","Baffled/Worried")
  toneadd("bewildering","Manner")
  toneadd("biting","Rude/Impolite")
  toneadd("bitter","Annoyed")
  toneadd("bland","Serious")
  toneadd("bleak","Unhappy")
  toneadd("bleary","Uncomfortable")
  toneadd("blithe","Rude/Impolite")
  toneadd("blunt","Rude/Impolite")
  toneadd("bold","Serious")
  toneadd("bored","Excited/Bored")
  toneadd("boring","Excited/Bored")
  toneadd("bossy","Rude/Impolite")
  toneadd("brash","Excited/Bored")
  toneadd("breathless","Manner")
  toneadd("breezy","Manner")
  toneadd("brief","Manner")
  toneadd("bright","Happy")
  toneadd("brisk","Annoyed")
  toneadd("broad","Manner")
  toneadd("brusque","Rude/Impolite")
  toneadd("cagey","Uncomfortable")
  toneadd("callous","Rude/Impolite")
  toneadd("calm","Serious")
  toneadd("candid","Serious")
  toneadd("cantankerous","Unhappy")
  toneadd("careful","Uncomfortable")
  toneadd("casual","Serious")
  toneadd("caustic","Angry")
  toneadd("cautious","Uncomfortable")
  toneadd("charming","Manner")
  toneadd("cheeky","Happy")
  toneadd("cheerful","Happy")
  toneadd("clear","Sound")
  toneadd("clinical","Rude/Impolite")
  toneadd("clueless","Manner")
  toneadd("coaxing","Manner")
  toneadd("cold","Angry")
  toneadd("comforting","Friendly/Polite")
  toneadd("comical","Happy")
  toneadd("commanding","Serious")
  toneadd("complacent","Manner")
  toneadd("compulsive","Unhappy")
  toneadd("concerned","Friendly/Polite")
  toneadd("condescending","Rude/Impolite")
  toneadd("confident","Serious")
  toneadd("confidential","Manner")
  toneadd("confiding","Manner")
  toneadd("conflicted","Unhappy")
  toneadd("confused","Baffled/Worried")
  toneadd("consoling","Friendly/Polite")
  toneadd("contemptuous","Rude/Impolite")
  toneadd("contented","Happy")
  toneadd("contentious","Rude/Impolite")
  toneadd("contrite","Friendly/Polite")
  toneadd("cool","Angry")
  toneadd("coy","Friendly/Polite")
  toneadd("cranky","Unhappy")
  toneadd("crass","Rude/Impolite")
  toneadd("crisp","Rude/Impolite")
  toneadd("cross","Angry")
  toneadd("crude","Rude/Impolite")
  toneadd("cruel","Angry")
  toneadd("cryptic","Rude/Impolite")
  toneadd("curious","Baffled/Worried")
  toneadd("curt","Annoyed")
  toneadd("dark","Angry")
  toneadd("dazed","Uncomfortable")
  toneadd("decided","Serious")
  toneadd("decisive","Serious")
  toneadd("decorous","Serious")
  toneadd("deep","Sound")
  toneadd("defeated","Unhappy")
  toneadd("defensive","Uncomfortable")
  toneadd("defiant","Angry")
  toneadd("dejected","Unhappy")
  toneadd("deliberate","Manner")
  toneadd("delicate","Friendly/Polite")
  toneadd("delighted","Happy")
  toneadd("delirious","Manner")
  toneadd("demure","Serious")
  toneadd("depressing","tonestuff")
  toneadd("derisive","Rude/Impolite")
  toneadd("despairing","Annoyed")
  toneadd("desperate","Unhappy")
  toneadd("despondent","Unhappy")
  toneadd("determined","Manner")
  toneadd("devilish","Happy")
  toneadd("devoted","Happy")
  toneadd("diabolical","Manner")
  toneadd("didactic","Serious")
  toneadd("diffident","Friendly/Polite")
  toneadd("diligent","Manner")
  toneadd("diplomatic","Serious")
  toneadd("dire","Angry")
  toneadd("disagreeable","Rude/Impolite")
  toneadd("disappointed","Unhappy")
  toneadd("disapproving","Unhappy")
  toneadd("disbelieving","Baffled/Worried")
  toneadd("disconsolate","Unhappy")
  toneadd("disdainful","Rude/Impolite")
  toneadd("disgruntled","Annoyed")
  toneadd("disgusted","Annoyed")
  toneadd("disinterested","Manner")
  toneadd("dismissive","Rude/Impolite")
  toneadd("disoriented","Baffled/Worried")
  toneadd("disparaging","Rude/Impolite")
  toneadd("dispirited","Unhappy")
  toneadd("disrespectful","tonestuff")
  toneadd("distant","Baffled/Worried")
  toneadd("distasteful","Rude/Impolite")
  toneadd("distracted","Baffled/Worried")
  toneadd("doleful","Annoyed")
  toneadd("doubtful","Baffled/Worried")
  toneadd("dramatic","Excited/Bored")
  toneadd("dreamy","Happy")
  toneadd("droll","Happy")
  toneadd("drunken","Manner")
  toneadd("dry","Serious")
  toneadd("dubious","Baffled/Worried")
  toneadd("dull","Unhappy")
  toneadd("dumbfounded","Manner")
  toneadd("eager","Happy")
  toneadd("earnest","Serious")
  toneadd("ecstatic","Happy")
  toneadd("embarrassed","Uncomfortable")
  toneadd("emotional","Serious")
  toneadd("emphatic","Excited/Bored")
  toneadd("enchanted","Happy")
  toneadd("encouraging","Friendly/Polite")
  toneadd("enticing","Manner")
  toneadd("erudite","Manner")
  toneadd("evasive","Baffled/Worried")
  toneadd("even","Serious")
  toneadd("exasperated","Annoyed")
  toneadd("excited","Excited/Bored")
  toneadd("expectant","Serious")
  toneadd("explicit","Annoyed")
  toneadd("express","Manner")
  toneadd("faint","Sound")
  toneadd("fascinated","Manner")
  toneadd("fearful","Unhappy")
  toneadd("feeble","Sound")
  toneadd("feisty","Annoyed")
  toneadd("fervent","Excited/Bored")
  toneadd("fierce","Annoyed")
  toneadd("firm","Manner")
  toneadd("flat","Manner")
  toneadd("flippant","Rude/Impolite")
  toneadd("flirtatious","Friendly/Polite")
  toneadd("flustered","Uncomfortable")
  toneadd("fond","Happy")
  toneadd("forceful","Serious")
  toneadd("forlorn","Unhappy")
  toneadd("formal","Manner")
  toneadd("frank","Serious")
  toneadd("frantic","Excited/Bored")
  toneadd("fretful","Baffled/Worried")
  toneadd("frightened","Unhappy")
  toneadd("frosty","Annoyed")
  toneadd("frustrated","Annoyed")
  toneadd("furious","Angry")
  toneadd("furtive","Manner")
  toneadd("fussy","Manner")
  toneadd("generous","Manner")
  toneadd("gentle","Friendly/Polite")
  toneadd("gleeful","Happy")
  toneadd("glib","Manner")
  toneadd("gloomy","Unhappy")
  toneadd("glum","Unhappy")
  toneadd("gracious","Serious")
  toneadd("grandiose","Manner")
  toneadd("grateful","Manner")
  toneadd("grating","Rude/Impolite")
  toneadd("grave","Serious")
  toneadd("greedy","Excited/Bored")
  toneadd("grim","Serious")
  toneadd("grudging","Annoyed")
  toneadd("gruff","Annoyed")
  toneadd("grumpy","Unhappy")
  toneadd("guarded","Uncomfortable")
  toneadd("guilty","Unhappy")
  toneadd("halting","Baffled/Worried")
  toneadd("happy","Happy")
  toneadd("harsh","Rude/Impolite")
  toneadd("hasty","Baffled/Worried")
  toneadd("hateful","Angry")
  toneadd("haughty","Rude/Impolite")
  toneadd("heartbroken","Unhappy")
  toneadd("heartless","Rude/Impolite")
  toneadd("hearty","Sound")
  toneadd("heated","Annoyed")
  toneadd("heavy","Unhappy")
  toneadd("helpful","Manner")
  toneadd("helpless","Manner")
  toneadd("hesitant","Baffled/Worried")
  toneadd("hoarse","Sound")
  toneadd("hollow","Unhappy")
  toneadd("honest","Manner")
  toneadd("hopeful","Manner")
  toneadd("hopeless","Unhappy")
  toneadd("horrified","Unhappy")
  toneadd("hostile","Rude/Impolite")
  toneadd("humble","Serious")
  toneadd("hurried","Manner")
  toneadd("husky","Sound")
  toneadd("hysterical","Excited/Bored")
  toneadd("icy","Rude/Impolite")
  toneadd("idle","Excited/Bored")
  toneadd("impassive","Manner")
  toneadd("impatient","Annoyed")
  toneadd("imperious","Rude/Impolite")
  toneadd("impertinent","Annoyed")
  toneadd("impish","Happy")
  toneadd("imploring","Manner")
  toneadd("impudent","Rude/Impolite")
  toneadd("impulsive","Rude/Impolite")
  toneadd("inconsolable","Unhappy")
  toneadd("incredulous","Baffled/Worried")
  toneadd("indifferent","Rude/Impolite")
  toneadd("indignant","Annoyed")
  toneadd("indistinct","Sound")
  toneadd("indulgent","Friendly/Polite")
  toneadd("informal","Friendly/Polite")
  toneadd("ingratiating","Manner")
  toneadd("innocent","Manner")
  toneadd("inquisitive","Baffled/Worried")
  toneadd("insincere","Rude/Impolite")
  toneadd("insipid","Manner")
  toneadd("insistent","Serious")
  toneadd("insolent","Rude/Impolite")
  toneadd("insulting","Rude/Impolite")
  toneadd("interested","Baffled/Worried")
  toneadd("intimidating","Angry")
  toneadd("intoxicated","Manner")
  toneadd("ironic","Happy")
  toneadd("irreverent","Happy")
  toneadd("irritated","Annoyed")
  toneadd("jealous","Unhappy")
  toneadd("joking","Friendly/Polite")
  toneadd("jovial","Happy")
  toneadd("jubilant","Happy")
  toneadd("kind","Friendly/Polite")
  toneadd("knowing","Rude/Impolite")
  toneadd("laborious","Manner")
  toneadd("laconic","Serious")
  toneadd("lame","Manner")
  toneadd("laughing","Sound")
  toneadd("lazy","Rude/Impolite")
  toneadd("lewd","Manner")
  toneadd("light","Manner")
  toneadd("listless","Unhappy")
  toneadd("lofty","Manner")
  toneadd("longing","Manner")
  toneadd("loud","Sound")
  toneadd("loving","Friendly/Polite")
  toneadd("loyal","tonestuff")
  toneadd("lusty","Rude/Impolite")
  toneadd("magnanimous","Friendly/Polite")
  toneadd("malevolent","Angry")
  toneadd("malicious","Rude/Impolite")
  toneadd("measured","Manner")
  toneadd("meditative","Serious")
  toneadd("meek","Manner")
  toneadd("melodic","Sound")
  toneadd("menacing","Angry")
  toneadd("mendacious","Manner")
  toneadd("merry","Happy")
  toneadd("mild","Friendly/Polite")
  toneadd("mischievous","Friendly/Polite")
  toneadd("miserable","Unhappy")
  toneadd("mocking","Rude/Impolite")
  toneadd("modest","Manner")
  toneadd("monotone","Sound")
  toneadd("morose","Unhappy")
  toneadd("mournful","Unhappy")
  toneadd("musing","Manner")
  toneadd("mysterious","Manner")
  toneadd("nagging","Rude/Impolite")
  toneadd("nasal","Sound")
  toneadd("nasty","Rude/Impolite")
  toneadd("nervous","Uncomfortable")
  toneadd("neutral","Manner")
  toneadd("nonchalant","Manner")
  toneadd("noncommittal","Excited/Bored")
  toneadd("nonplussed","Baffled/Worried")
  toneadd("oblivious","Baffled/Worried")
  toneadd("obnoxious","Rude/Impolite")
  toneadd("obsequious","Manner")
  toneadd("offended","Unhappy")
  toneadd("offhanded","Manner")
  toneadd("ominous","Rude/Impolite")
  toneadd("optimistic","Happy")
  toneadd("outraged","Annoyed")
  toneadd("outrageous","Rude/Impolite")
  toneadd("painful","Unhappy")
  toneadd("passionate","Excited/Bored")
  toneadd("passive","Manner")
  toneadd("patient","Manner")
  toneadd("patronizing","Rude/Impolite")
  toneadd("pawky","Happy")
  toneadd("pedantic","Rude/Impolite")
  toneadd("peeved","Annoyed")
  toneadd("peevish","Annoyed")
  toneadd("pensive","Manner")
  toneadd("perfunctory","Manner")
  toneadd("perky","Happy")
  toneadd("perplexed","Baffled/Worried")
  toneadd("perspicacious","Manner")
  toneadd("persuasive","Manner")
  toneadd("petulant","Angry")
  toneadd("philosophic","tonestuff")
  toneadd("pious","Manner")
  toneadd("piqued","Annoyed")
  toneadd("pitiless","Annoyed")
  toneadd("pitying","Manner")
  toneadd("placating","Manner")
  toneadd("placid","Manner")
  toneadd("plain","Manner")
  toneadd("plaintive","Manner")
  toneadd("playful","Happy")
  toneadd("pleading","Manner")
  toneadd("pleasant","Manner")
  toneadd("pleased","Happy")
  toneadd("pointed","Manner")
  toneadd("polite","Manner")
  toneadd("pompous","Manner")
  toneadd("pragmatic","Manner")
  toneadd("prayerful","Manner")
  toneadd("prim","Manner")
  toneadd("prompt","Manner")
  toneadd("proud","Happy")
  toneadd("puzzled","Baffled/Worried")
  toneadd("querulous","Baffled/Worried")
  toneadd("quick","Manner")
  toneadd("quiet","Sound")
  toneadd("rapt","Manner")
  toneadd("raspy","Sound")
  toneadd("reasonable","Manner")
  toneadd("reasoned","Serious")
  toneadd("reassuring","Friendly/Polite")
  toneadd("reflective","Serious")
  toneadd("regretful","Unhappy")
  toneadd("rejoicing","Happy")
  toneadd("relieved","Happy")
  toneadd("reluctant","Uncomfortable")
  toneadd("remorseful","Unhappy")
  toneadd("reproachful","Annoyed")
  toneadd("reproving","Annoyed")
  toneadd("resentful","Manner")
  toneadd("resigned","Manner")
  toneadd("resolute","Serious")
  toneadd("respectful","Friendly/Polite")
  toneadd("reticent","Manner")
  toneadd("reverent","Manner")
  toneadd("rhetorical","Manner")
  toneadd("rough","Sound")
  toneadd("rude","Rude/Impolite")
  toneadd("rueful","Unhappy")
  toneadd("sad","Unhappy")
  toneadd("sagacious","Manner")
  toneadd("sage","Manner")
  toneadd("sarcastic","Rude/Impolite")
  toneadd("sardonic","Manner")
  toneadd("sassy","Rude/Impolite")
  toneadd("satirical","Happy")
  toneadd("savage","Angry")
  toneadd("scathing","Rude/Impolite")
  toneadd("scornful","Rude/Impolite")
  toneadd("seductive","Manner")
  toneadd("serene","Manner")
  toneadd("serious","Serious")
  toneadd("severe","Rude/Impolite")
  toneadd("shaky","Unhappy")
  toneadd("shameless","Manner")
  toneadd("sharp","Annoyed")
  toneadd("sheepish","Uncomfortable")
  toneadd("short","Annoyed")
  toneadd("shrewd","Manner")
  toneadd("shrill","Sound")
  toneadd("shy","Uncomfortable")
  toneadd("silky","Manner")
  toneadd("simple","Manner")
  toneadd("sincere","Manner")
  toneadd("skeptical","Manner")
  toneadd("sleepy","Manner")
  toneadd("slow","Sound")
  toneadd("sly","Manner")
  toneadd("smarmy","Manner")
  toneadd("smooth","Manner")
  toneadd("smug","Manner")
  toneadd("snide","Rude/Impolite")
  toneadd("snobbish","Rude/Impolite")
  toneadd("snotty","Annoyed")
  toneadd("sober","Unhappy")
  toneadd("soft","Sound")
  toneadd("solemn","Serious")
  toneadd("somber","Unhappy")
  toneadd("soothing","Manner")
  toneadd("sorrowful","Unhappy")
  toneadd("sour","Annoyed")
  toneadd("speculative","Manner")
  toneadd("speechless","Uncomfortable")
  toneadd("spiteful","Angry")
  toneadd("spurious","Rude/Impolite")
  toneadd("squeaky","Sound")
  toneadd("squeamish","Manner")
  toneadd("steady","Serious")
  toneadd("stern","Annoyed")
  toneadd("stiff","Annoyed")
  toneadd("stilted","Manner")
  toneadd("stoic","Manner")
  toneadd("stout","Manner")
  toneadd("strained","Unhappy")
  toneadd("strict","Manner")
  toneadd("strident","Serious")
  toneadd("stubborn","Manner")
  toneadd("stupid","Manner")
  toneadd("sublime","Manner")
  toneadd("submissive","Manner")
  toneadd("subtle","Manner")
  toneadd("sudden","Manner")
  toneadd("suggestive","Manner")
  toneadd("sulky","Annoyed")
  toneadd("sullen","Unhappy")
  toneadd("surprised","Excited/Bored")
  toneadd("surreptitious","Manner")
  toneadd("suspicious","Uncomfortable")
  toneadd("sweet","Friendly/Polite")
  toneadd("sycophantic","Manner")
  toneadd("sympathetic","Friendly/Polite")
  toneadd("tart","Annoyed")
  toneadd("tearful","Unhappy")
  toneadd("teasing","Friendly/Polite")
  toneadd("tenacious","Manner")
  toneadd("tender","Manner")
  toneadd("tense","Uncomfortable")
  toneadd("tentative","Uncomfortable")
  toneadd("terse","Rude/Impolite")
  toneadd("testy","Annoyed")
  toneadd("theatrical","Manner")
  toneadd("thick","Sound")
  toneadd("thoughtful","Manner")
  toneadd("threatening","Angry")
  toneadd("throaty","Sound")
  toneadd("thunderous","Sound")
  toneadd("tight","Annoyed")
  toneadd("timid","Baffled/Worried")
  toneadd("tired","Unhappy")
  toneadd("toneless","Unhappy")
  toneadd("tremulous","Unhappy")
  toneadd("trite","Manner")
  toneadd("triumphant","Happy")
  toneadd("truthful","Manner")
  toneadd("uncertain","Baffled/Worried")
  toneadd("uncomfortable","Uncomfortable")
  toneadd("unconvincing","Manner")
  toneadd("uncouth","Annoyed")
  toneadd("understanding","Friendly/Polite")
  toneadd("uneasy","Uncomfortable")
  toneadd("unexpected","Manner")
  toneadd("ungracious","Rude/Impolite")
  toneadd("unhappy","Unhappy")
  toneadd("unhelpful","Annoyed")
  toneadd("urbane","Manner")
  toneadd("urgent","Manner")
  toneadd("vague","Manner")
  toneadd("vehement","Excited/Bored")
  toneadd("vengeful","Unhappy")
  toneadd("venomous","Rude/Impolite")
  toneadd("vexed","Angry")
  toneadd("vicious","Angry")
  toneadd("vigorous","Manner")
  toneadd("vociferous","Excited/Bored")
  toneadd("voracious","Rude/Impolite")
  toneadd("warm","Friendly/Polite")
  toneadd("warning","Annoyed")
  toneadd("wary","Manner")
  toneadd("waspish","Angry")
  toneadd("weak","Manner")
  toneadd("weary","Manner")
  toneadd("whimsical","Happy")
  toneadd("whining","Unhappy")
  toneadd("wicked","Manner")
  toneadd("wishful","Manner")
  toneadd("wistful","Manner")
  toneadd("withering","Annoyed")
  toneadd("witty","Happy")
  toneadd("wondering","Baffled/Worried")
  toneadd("wooden","Manner")
  toneadd("worried","Baffled/Worried")
  toneadd("wounded","Unhappy")
  toneadd("wry","Manner")


  verbadd("accuse","Angry")
  verbadd("acknowledge","Polite")
  verbadd("acquiesce","Polite")
  verbadd("add","Polite")
  verbadd("admit","Soothe/Comment")
  verbadd("admonish","Rude/Impolite")
  verbadd("advise","Polite")
  verbadd("affirm","Polite")
  verbadd("agonize","Confused/Querulous")
  verbadd("agree","Polite")
  verbadd("allow","Soothe/Comment")
  verbadd("announce","Academic/Sermonic")
  verbadd("answer","Polite")
  verbadd("apologize","Soothe/Comment")
  verbadd("approve","Polite")
  verbadd("argue","Rude/Impolite")
  verbadd("ask","Confused/Querulous")
  verbadd("assert","Academic/Sermonic")
  verbadd("assure","Soothe/Comment")
  verbadd("attempt","Polite")
  verbadd("attest","Soothe/Comment")
  verbadd("aver","Debate")
  verbadd("babble","Happy")
  verbadd("bark","Sound")
  verbadd("bawl","Sound")
  verbadd("beg","Sad/Demoralized")
  verbadd("begin","Academic/Sermonic")
  verbadd("bellow","Sound")
  verbadd("bemoan","Rude/Impolite")
  verbadd("beseech","Confused/Querulous")
  verbadd("bite","verbstuff")
  verbadd("blather","Confused/Querulous")
  verbadd("blubber","Sound")
  verbadd("blurt","Sound")
  verbadd("bluster","Rude/Impolite")
  verbadd("boast","Excited/Interested")
  verbadd("brag","Rude/Impolite")
  verbadd("breathe","Sound")
  verbadd("cackle","Rude/Impolite")
  verbadd("call","Sound")
  verbadd("caution","Soothe/Comment")
  verbadd("challenge","Militaristic")
  verbadd("chant","Sound")
  verbadd("cheer","Happy")
  verbadd("chide","Angry")
  verbadd("chirp","Happy")
  verbadd("claim","Debate")
  verbadd("clarify","Academic/Sermonic")
  verbadd("cluck","Rude/Impolite")
  verbadd("coax","Confused/Querulous")
  verbadd("command","Militaristic")
  verbadd("comment","Soothe/Comment")
  verbadd("complain","Sad/Demoralized")
  verbadd("compliment","Polite")
  verbadd("concede","Polite")
  verbadd("conclude","Academic/Sermonic")
  verbadd("condescend","Rude/Impolite")
  verbadd("confess","Soothe/Comment")
  verbadd("confide","Soothe/Comment")
  verbadd("confirm","Soothe/Comment")
  verbadd("console","Soothe/Comment")
  verbadd("conspire","Excited/Interested")
  verbadd("contend","Academic/Sermonic")
  verbadd("continue","Academic/Sermonic")
  verbadd("coo","Happy")
  verbadd("correct","Academic/Sermonic")
  verbadd("counter","Rude/Impolite")
  verbadd("criticize","Rude/Impolite")
  verbadd("critique","Rude/Impolite")
  verbadd("croak","verbstuff")
  verbadd("croon","Sound")
  verbadd("crow","Excited/Interested")
  verbadd("cry","Excited/Interested")
  verbadd("curse","Rude/Impolite")
  verbadd("deadpan","Soothe/Comment")
  verbadd("declaim","Academic/Sermonic")
  verbadd("declare","Academic/Sermonic")
  verbadd("demand","Militaristic")
  verbadd("demur","Polite")
  verbadd("denounce","Angry")
  verbadd("deny","Rude/Impolite")
  verbadd("deter","Polite")
  verbadd("direct","Militaristic")
  verbadd("disagree","Academic/Sermonic")
  verbadd("disclose","Soothe/Comment")
  verbadd("dismiss","Rude/Impolite")
  verbadd("dissuade","Academic/Sermonic")
  verbadd("distract","Rude/Impolite")
  verbadd("drawl","Sound")
  verbadd("droll","Happy")
  verbadd("drone","Rude/Impolite")
  verbadd("echo","Soothe/Comment")
  verbadd("elaborate","Debate")
  verbadd("emphasize","Academic/Sermonic")
  verbadd("encourage","verbstuff")
  verbadd("enthuse","Happy")
  verbadd("exclaim","Sound")
  verbadd("explain","Academic/Sermonic")
  verbadd("flatter","Polite")
  verbadd("fret","Confused/Querulous")
  verbadd("fuss","Happy")
  verbadd("gasp","Sound")
  verbadd("gloat","Rude/Impolite")
  verbadd("glower","Angry")
  verbadd("goad","Rude/Impolite")
  verbadd("grant","Academic/Sermonic")
  verbadd("grate","Rude/Impolite")
  verbadd("greet","Polite")
  verbadd("gripe","Rude/Impolite")
  verbadd("groan","Angry")
  verbadd("grouse","Rude/Impolite")
  verbadd("grovel","Sad/Demoralized")
  verbadd("growl","Sound")
  verbadd("grumble","Rude/Impolite")
  verbadd("grunt","Sound")
  verbadd("guess","Confused/Querulous")
  verbadd("gush","Happy")
  verbadd("hazard","Confused/Querulous")
  verbadd("hint","Polite")
  verbadd("hiss","Sound")
  verbadd("holler","Sound")
  verbadd("hum","Sound")
  verbadd("hush","Rude/Impolite")
  verbadd("implore","Sad/Demoralized")
  verbadd("imply","Soothe/Comment")
  verbadd("inform","Academic/Sermonic")
  verbadd("inquire","Confused/Querulous")
  verbadd("insist","Sad/Demoralized")
  verbadd("instruct","Academic/Sermonic")
  verbadd("interject","Rude/Impolite")
  verbadd("interrogate","Rude/Impolite")
  verbadd("interrupt","Rude/Impolite")
  verbadd("intimate","Academic/Sermonic")
  verbadd("intone","Sound")
  verbadd("introduce","Polite")
  verbadd("jest","Happy")
  verbadd("joke","Happy")
  verbadd("lambaste","Rude/Impolite")
  verbadd("lament","Sad/Demoralized")
  verbadd("laugh","Happy")
  verbadd("lecture","Academic/Sermonic")
  verbadd("lisp","Sound")
  verbadd("maintain","Debate")
  verbadd("marvel","Happy")
  verbadd("maunder","Confused/Querulous")
  verbadd("mention","Soothe/Comment")
  verbadd("moan","Sound")
  verbadd("mock","Rude/Impolite")
  verbadd("mouth","Sound")
  verbadd("mumble","Confused/Querulous")
  verbadd("murmur","Sound")
  verbadd("muse","Soothe/Comment")
  verbadd("mutter","Rude/Impolite")
  verbadd("nag","Rude/Impolite")
  verbadd("note","Soothe/Comment")
  verbadd("object","Debate")
  verbadd("observe","Soothe/Comment")
  verbadd("offer","Soothe/Comment")
  verbadd("opine","Sad/Demoralized")
  verbadd("orate","Academic/Sermonic")
  verbadd("order","Militaristic")
  verbadd("persuade","Academic/Sermonic")
  verbadd("placate","Soothe/Comment")
  verbadd("plead","Sad/Demoralized")
  verbadd("ponder","Confused/Querulous")
  verbadd("pontificate","Academic/Sermonic")
  verbadd("posit","Academic/Sermonic")
  verbadd("pout","Sad/Demoralized")
  verbadd("praise","Polite")
  verbadd("pray","Academic/Sermonic")
  verbadd("preach","Academic/Sermonic")
  verbadd("press","Rude/Impolite")
  verbadd("proclaim","Academic/Sermonic")
  verbadd("prod","Soothe/Comment")
  verbadd("profess","Excited/Interested")
  verbadd("promise","Soothe/Comment")
  verbadd("prompt","Manner")
  verbadd("pronounce","Debate")
  verbadd("propose","Soothe/Comment")
  verbadd("protest","Confused/Querulous")
  verbadd("purr","Sound")
  verbadd("quarrel","Rude/Impolite")
  verbadd("query","Confused/Querulous")
  verbadd("quibble","Polite")
  verbadd("quip","Happy")
  verbadd("quote","Academic/Sermonic")
  verbadd("ramble","Happy")
  verbadd("rasp","Sound")
  verbadd("rave","Confused/Querulous")
  verbadd("read","Sound")
  verbadd("reason","Academic/Sermonic")
  verbadd("reassure","Polite")
  verbadd("rebuke","Rude/Impolite")
  verbadd("rebut","Academic/Sermonic")
  verbadd("recall","Soothe/Comment")
  verbadd("recite","Sound")
  verbadd("regale","Academic/Sermonic")
  verbadd("rehearse","Academic/Sermonic")
  verbadd("reinforce","Soothe/Comment")
  verbadd("reiterate","Soothe/Comment")
  verbadd("rejoice","Happy")
  verbadd("relent","Soothe/Comment")
  verbadd("remark","Soothe/Comment")
  verbadd("remind","Academic/Sermonic")
  verbadd("repeat","Academic/Sermonic")
  verbadd("reply","Soothe/Comment")
  verbadd("report","Militaristic")
  verbadd("reprimand","Militaristic")
  verbadd("reproach","Rude/Impolite")
  verbadd("request","Confused/Querulous")
  verbadd("respond","Academic/Sermonic")
  verbadd("retort","Rude/Impolite")
  verbadd("reveal","Soothe/Comment")
  verbadd("roar","Sound")
  verbadd("say","Polite")
  verbadd("scoff","Rude/Impolite")
  verbadd("scold","Angry")
  verbadd("scream","Sound")
  verbadd("screech","Sound")
  verbadd("seethe","Angry")
  verbadd("shout","Sound")
  verbadd("shriek","Sound")
  verbadd("sigh","Happy")
  verbadd("simper","Happy")
  verbadd("singsong","Sound")
  verbadd("slur","Sound")
  verbadd("snap","Rude/Impolite")
  verbadd("snarl","Sound")
  verbadd("sneer","Rude/Impolite")
  verbadd("snicker","Rude/Impolite")
  verbadd("sob","Sad/Demoralized")
  verbadd("soothe","Soothe/Comment")
  verbadd("speculate","Excited/Interested")
  verbadd("spit","Angry")
  verbadd("sputter","Rude/Impolite")
  verbadd("squeak","Sound")
  verbadd("stammer","Sound")
  verbadd("state","Soothe/Comment")
  verbadd("stipulate","Academic/Sermonic")
  verbadd("stress","Soothe/Comment")
  verbadd("stutter","Sound")
  verbadd("submit","Soothe/Comment")
  verbadd("suggest","Academic/Sermonic")
  verbadd("sulk","Confused/Querulous")
  verbadd("supply","Academic/Sermonic")
  verbadd("swear","Rude/Impolite")
  verbadd("taunt","Rude/Impolite")
  verbadd("tease","Rude/Impolite")
  verbadd("threaten","Angry")
  verbadd("urge","Confused/Querulous")
  verbadd("venture","Confused/Querulous")
  verbadd("vow","Excited/Interested")
  verbadd("wail","Sad/Demoralized")
  verbadd("warn","Angry")
  verbadd("wheedle","Sad/Demoralized")
  verbadd("wheeze","Sound")
  verbadd("whimper","Sad/Demoralized")
  verbadd("whine","Sad/Demoralized")
  verbadd("whisper","verbstuff")
  verbadd("wish","Confused/Querulous")
  verbadd("wonder","Excited/Interested")
  verbadd("worry","Confused/Querulous")
  verbadd("yammer","Sound")
  verbadd("yell","Sound")
  verbadd("yelp","Sound")
  verbadd("cajole","verbstuff")
  verbadd("chastise","verbstuff")
  verbadd("choke out","verbstuff")
  verbadd("commend","verbstuff")
  verbadd("contest","verbstuff")
  verbadd("cough","verbstuff")
  verbadd("deflect","verbstuff")
  verbadd("flirt","verbstuff")
  verbadd("force","verbstuff")
  verbadd("huff","verbstuff")
  verbadd("hypothesize","verbstuff")
  verbadd("jeer","verbstuff")
  verbadd("mope","verbstuff")
  verbadd("pant","verbstuff")
  verbadd("pry","verbstuff")
  verbadd("rant","verbstuff")
  verbadd("realize","verbstuff")
  verbadd("recommend","verbstuff")
  verbadd("recount","verbstuff")
  verbadd("reflect","verbstuff")
  verbadd("splutter","verbstuff")
  verbadd("surmise","verbstuff")
  verbadd("squeal","verbstuff")
  verbadd("theorize","verbstuff")
  verbadd("thunder","verbstuff")
else
  import_from_CSV
end



@goforit = false
@store = Gtk::ListStore.new(String)
@tone=nil
@verb=nil
$fav=false
@target_say = nil
@favs_found = CharSettings.to_hash
@fav = false
$pt_version = "Perfect Tone v3.16"
@last_tone = nil
@last_verb = nil

def check_version(cv_title)

  if $SAFE > 0
    _respond "#{monsterbold_start}This script needs to be trusted to work for version checking.  The check and this message will only appear once every 24 hours. (;trust pt.lic)#{monsterbold_end}"
    _respond "#{monsterbold_start}This check may be completely disabled through the configuration tab.#{monsterbold_end}"
    return true
  end
  
  begin
    #echo "Scanning"
    require 'openssl'
    require 'digest/md5'

    hostname           = 'repo.lichproject.org'
    port               = 7157
    ca_cert            = OpenSSL::X509::Certificate.new("-----BEGIN CERTIFICATE-----\nMIIDlTCCAn2gAwIBAgIJAKuu65i5NsruMA0GCSqGSIb3DQEBCwUAMGExCzAJBgNV\nBAYTAlVTMREwDwYDVQQIDAhJbGxpbm9pczESMBAGA1UECgwJTWF0dCBMb3dlMQ8w\nDQYDVQQDDAZSb290Q0ExGjAYBgkqhkiG9w0BCQEWC21hdHRAaW80LnVzMB4XDTE0\nMDYwNzE3NDUwMFoXDTI0MDYwNDE3NDUwMFowYTELMAkGA1UEBhMCVVMxETAPBgNV\nBAgMCElsbGlub2lzMRIwEAYDVQQKDAlNYXR0IExvd2UxDzANBgNVBAMMBlJvb3RD\nQTEaMBgGCSqGSIb3DQEJARYLbWF0dEBpbzQudXMwggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQCcIRn0IMCNYeL5agKmkdedgJXsIyTJS8qKrY6EvQsq4tt0\nmO3Or9K8IaDl7qFdQ9nfSJ5phNgoCy9wZ9rDWv5FhY5MnnVHGr3fCa7RkMxJFR/N\nwiD4ihQlixOUly76glceyc/6QQS9bNe96evZDstERGAFfzgHY4qAlyurR6mBu9Mb\nyyCRok6xMRnjrbTMNkvvOsuG0sY9ot+SLHGgU3qT7+wVh/CbWcjeF7/Qwa//fbFk\nmq5c1FuvhU3DanSSz+VuWudPFSyZ3r5pYrLMJWsyomDa4gkL2bJ5jya2BWDMXvSS\nCpdQgPDIlClMfAFLd/Ss8ZIGa6uNFcSK6Xca51ClAgMBAAGjUDBOMB0GA1UdDgQW\nBBScbglRiGzz9yzuhgBwFYjgimeByDAfBgNVHSMEGDAWgBScbglRiGzz9yzuhgBw\nFYjgimeByDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQA7MLZYfqam\n5aaSBqQpT6sOGDtVc9koIok59oTQmNXqe+awg2VUnAiesxtLd+FWGUMp8XzHdGWw\nH3O6kAUkPm/in001X7TRAhbgDujfTRbTzxND0XrjuEzDMALs3YpDM1pMXqC7RXWA\n7z+N0gRaUgmh1rMbk/qA3cAfC2dwf2j3NYy3bDw3lMpdyIwAfOQxiZVglYgX3dgT\nU9b//gsUyPCvlpL0mYcmhOOLt6oqQhMJaw1I6A9xMe2kO2L+8KPGK2u1B+P5/Sx0\nFE8LIp5KA3a7yRbOty19NsGR+yW7WwV7BL6c6GOKb/iKJBLYzTmNG6m16hRrxDGj\ntGu91I0ORptB\n-----END CERTIFICATE-----")
    client_version     = '2.34'

    connect = proc {
      begin
        if ca_cert.not_before > Time.now
          respond "\n---\n--- warning: The current date is set incorrectly on your computer. This will\n---          cause the SSL certificate verification to fail and prevent this\n---          script from connecting to the server.  Fix it.\n---\n\n"
          sleep 3
        end
        if ca_cert.not_after < Time.now
          respond "\n---\n--- warning: Your computer thinks the date is #{Time.now.strftime("%m-%d-%Y")}.  If this is the\n---          correct date, you need an updated version of this script.  If \n---          this is not the correct date, you need to change it.  In either\n---          case, this date makes the SSL certificate in this script invalid\n---          and will prevent the script from connecting to the server.\n---\n\n"
          sleep 3
        end
        cert_store              = OpenSSL::X509::Store.new
        cert_store.add_cert(ca_cert)
        ssl_context             = OpenSSL::SSL::SSLContext.new
        ssl_context.options     = (OpenSSL::SSL::OP_NO_SSLv2 + OpenSSL::SSL::OP_NO_SSLv3)
        ssl_context.cert_store  = cert_store
        if OpenSSL::SSL::VERIFY_PEER == OpenSSL::SSL::VERIFY_NONE
          # the plat_updater script redefines OpenSSL::SSL::VERIFY_PEER, disabling it for everyone
          ssl_context.verify_mode = 1 # probably right
        else
          ssl_context.verify_mode = OpenSSL::SSL::VERIFY_PEER
        end
        socket                  = TCPSocket.new(hostname, port)
        ssl_socket              = OpenSSL::SSL::SSLSocket.new(socket, ssl_context)
        ssl_socket.connect
        if (ssl_socket.peer_cert.subject.to_a.find { |n| n[0] == 'CN' }[1] != 'lichproject.org') and (ssl_socket.peer_cert.subject.to_a.find { |n| n[0] == 'CN' }[1] != 'Lich Repository')
          if cmd_force
            echo "warning: server certificate hostname mismatch"
          else
            echo "error: server certificate hostname mismatch"
            ssl_socket.close rescue nil
            socket.close rescue nil
            exit
          end
        end
        def ssl_socket.geth
          hash = Hash.new
          gets.scan(/[^\t]+\t[^\t]+(?:\t|\n)/).each { |s| s = s.chomp.split("\t"); hash[s[0].downcase] = s[1] }
          return hash
        end
        def ssl_socket.puth(h)
          puts h.to_a.flatten.join("\t")
        end
      rescue
        echo "error connecting to server: #{$!}"
        ssl_socket.close rescue nil
        socket.close rescue nil
        exit
      end
      [ ssl_socket, socket ]
    }
    file = "pt.lic"
    game = "GS"

    begin
      ssl_socket, socket = connect.call
      ssl_socket.puth('action' => 'inspect', 'file' => file, 'game' => game, 'client' => client_version)
      response = ssl_socket.geth
      if response['warning']
        echo "warning: server says: #{response['warning']}"
      end
      if response['error']
        echo "error: server says: #{response['error']}"
        exit
      elsif (response['size'] !~ /^[0-9]+$/)
        echo 'error: out of cheese 4'
        exit
      end
      data = ssl_socket.read(response['size'].to_i)
    ensure
      ssl_socket.close rescue nil
      socket.close rescue nil
     end
    return data.include? cv_title
  rescue
    echo "Check version failed!"
    return true
  end
end


def pop_choice_array(pca_array,pca_type)
    echo "POPULATE CHOICE ARRAY" if @debug 
    pca_array.each{|b|
      Choice.new(b["name"],Gtk::CheckButton.new((b["name"])),pca_type,b["category"])
    }
end

def pop_cat_choice_array(pca_array,pca_type)
    echo "POPULATE CHOICE ARRAY" if @debug 
    pca_array.each{|b|
      Cat_Choice.new(b["name"],Gtk::CheckButton.new((b["name"])),pca_type,b["category"])
    }
end

def pop_cat_array(pca_array)
    pca_array.each{|tone| @catarray.push(tone["category"]) if !(@catarray.include? tone["category"])}
    @catarray = @catarray.sort
end

def pop_fav_array
  ### POPULATE FAVORTE ARRAY
  $fav_choice_array = Array.new
  pfa_tmp = Array.new
  echo "POPULATE FAVORTE ARRAY" if @debug     
  if @favs_found['importfav'] != true || !(File.file?(@import_fav_file))
    $choice_array.each {|a| 
      if @favs_found[a.choicename] == "fav"
        pfa_tmp.push(a.choicename)
        Fav_Choice.new(a.choicename,Gtk::CheckButton.new((a.choicename)),a.choicetype,a.choicecat)
      end
    }
    $cat_choice_array.each {|a| 
      if @favs_found[a.choicename] == "fav"  && !(pfa_tmp.include? a.choicename)
        Fav_Choice.new(a.choicename,Gtk::CheckButton.new((a.choicename)),a.choicetype,a.choicecat)
      end
    }
  else
     #echo "working on a CSV"
     #import_dir = "#{$lich_dir}" 
     #import_filename = "PT_FAV_import.csv"
     #import_file = "#{import_dir}#{import_filename}"
     csv = File.open(@import_fav_file, "r")
     csv_start = true
     csv.each_line{|line|
      if line != "name,category,toneverb"
        #echo line
        #echo line.split(",")[0]
        #        echo line.split(",")[1]
        #                echo line.split(",")[2]
        Fav_Choice.new(line.split(",")[0],Gtk::CheckButton.new((line.split(",")[0])),line.split(",")[2].gsub("\n",""),line.split(",")[1])
      end
     }
     csv.close
  end
end

def build_target_array

  pcs = Hash.new
  GameObj.pcs.each {|i| pcs["#{i.noun}"] = i.id }
  pcs.sort.each { |k,v| Target_choice.new(k,v)}
  npcs = Hash.new
  GameObj.npcs.each {|i| npcs["#{i.name}"] = i.id }
  npcs.sort.each { |k,v| Target_choice.new(k+"_"+"#"+v,v)}
end


def build_table(bt_attacharray = nil, bt_table = nil)
  if bt_table.nil?
      bt_table = Gtk::Table.new(2, 2, false)
  else
    children = bt_table.children();
    children.each{|c| bt_table.remove(c)}
  end

  r=2
  c=0
  last_start = "a"
  verbnotfound = true
  bt_attacharray.each {|a| 
      if a.choicetype == "verb" && verbnotfound
        c += 1
        r = 2
        verbnotfound = false
      end
      bt_table.attach(a.choicevalue, c, (c+1), r, r+1)
      r += 1
      if r == 17
        c += 1
        r = 2
       end
      a.choicevalue.show      
  }
  return bt_table
end

def savetv_fav
  sf_array = Array.new
  $choice_array.each {|a| 
    if a.choicevalue.active?
      @favs_found[a.choicename] = "fav"
      sf_array.push(a.choicename)
    elsif @favs_found[a.choicename] == "fav"
      @favs_found[a.choicename] = ""
    end
  }
  $cat_choice_array.each {|a| 
    if a.choicevalue.active? && !(sf_array.push.include? a.choicename)
      @favs_found[a.choicename] = "fav"
    elsif @favs_found[a.choicename] == "fav" && !(sf_array.push.include? a.choicename)
      @favs_found[a.choicename] = ""
    end
  }
end

def savetv
  $choice_array.each {|a| 
    if a.choicetype ==  "tone"
      @tone = a.choicename if a.choicevalue.active?
    elsif a.choicetype ==  "verb"
      @verb = a.choicename if a.choicevalue.active?
    end
  }
  $cat_choice_array.each {|a| 
    if a.choicetype ==  "tone"
      @tone = a.choicename if a.choicevalue.active?
    elsif a.choicetype ==  "verb"
      @verb = a.choicename if a.choicevalue.active?
    end
  }
  @goforit = true
end

def savefav
  $fav_choice_array.each {|a| 
    if a.choicetype ==  "tone"
      @tone = a.choicename if a.choicevalue.active?
    elsif a.choicetype ==  "verb"
      @verb = a.choicename if a.choicevalue.active?
    end
  }
  $goforit = true
end

def find_button(fb_name,fb_array)
  if fb_name.nil?
    return nil
  end
  
  fb_array.each{|a|
    if a.choicename == fb_name
      return a.choicevalue
    end
  }
  return nil
end

def clear_current(cc_name,cc_type)
  if cc_type == "tone" && @last_tone != cc_name
    sync_button(@last_tone,false,"tone") if !(@last_tone.nil?)
  elsif cc_type == "verb" && @last_verb != cc_name
    sync_button(@last_verb,false,"verb") if !(@last_verb.nil?)
  end
end

def sync_button(sb_name,sb_active,sb_type)
  if sb_type == "tone"
    @last_tone = sb_name
  elsif sb_type == "verb"
    @last_verb = sb_name
  end
   result = find_button(sb_name,$choice_array)
   if !(result.nil?)
     result.set_active(sb_active)
   end
   result = find_button(sb_name,$cat_choice_array)
   if !(result.nil?)
     result.set_active(sb_active)
   end
  result = find_button(sb_name,$fav_choice_array)
  if !(result.nil?)
   result.set_active(sb_active)
  end
end


	@window = window_action = nil
  
	Gtk.queue {					
    ### POPULATE  ARRAYS
    pop_choice_array(@tonearray,"tone")
    pop_choice_array(@verbarray,"verb")
    pop_cat_choice_array(@tonearray,"tone")
    pop_cat_choice_array(@verbarray,"verb")
    pop_cat_array(@tonearray)
    pop_cat_array(@verbarray)
    pop_fav_array
    build_target_array
		
    ##### BUILD WINDOW ###
    @window = Gtk::Window.new

    @favs_found['LastRun'] = Time.now if @favs_found['LastRun'].nil?
    (time_diff = Time.now - @favs_found['LastRun']) if @favs_found['LastRun'] != "Off"
    if (time_diff > 86400) && (@favs_found['LastRun'] != "Off")
      @favs_found['LastRun'] = Time.now
      if check_version($pt_version)
        @window.title = $pt_version
      else
        @window.title = ($pt_version + "--- OUT OF DATE ---") 
      end
    else
     @window.title = $pt_version
    end
    @window.border_width = 3
    @window.resizable = false
    @window.resize(450, 300)
    
    
    ###INIT NOTEBOOK
    notebook_main = Gtk::Notebook.new.set_show_border(true).set_tab_border(3)
    
    
    #### PAGE 1 #####
    
    hb = Gtk::HBox.new(false,1)
    frame_page1 = Gtk::VBox.new(false,1).set_border_width(3)
    main_page1_t = Gtk::VBox.new(false,1).set_border_width(3)
    main_page1_v = Gtk::VBox.new(false,1).set_border_width(3)
    frame1_t = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Tone</b></big>'))
    frame1_t.add(main_page1_t)


    frame1_v = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Verb</b></big>'))
    frame1_v.add(main_page1_v)

    hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(frame1_t))
    hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(frame1_v))
    frame_page1.pack_start(hb,false)
     
    $tmp_fav_t =Array.new
    $fav_choice_array.each {|a| 
      if a.choicetype == "tone"
        $tmp_fav_t.push(a)
      end
    }
    @favtable_t = build_table($tmp_fav_t)
    
    $tmp_fav_v =Array.new
    $fav_choice_array.each {|a| 
      if a.choicetype == "verb"
        $tmp_fav_v.push(a)
      end
    }
    @favtable_v = build_table($tmp_fav_v)

    main_page1_t.pack_start(@favtable_t,false)
    main_page1_v.pack_start(@favtable_v,false)
    notebook_main.append_page(frame_page1,Gtk::Label.new('Favorites'))

    #### PAGE 2 #####
    
 
    hb = Gtk::HBox.new(false,1)
    frame_page2 = Gtk::VBox.new(false,1).set_border_width(3)
    main_page2_t = Gtk::VBox.new(false,1).set_border_width(3)
    main_page2_v = Gtk::VBox.new(false,1).set_border_width(3)
    frame2_t = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Tone</b></big>'))
    frame2_t.add(main_page2_t)
  
    frame2_v = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Verb</b></big>'))
    frame2_v.add(main_page2_v)

    hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(frame2_t))
    hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(frame2_v))
    frame_page2.pack_start(hb,false)

    

    @cat_table_t = build_table()
    @cat_table_v = build_table()
 

  
  
    main_page2_t.pack_start(@cat_table_t,false)
    main_page2_v.pack_start(@cat_table_v,false)
    
    
    notebook_main.append_page(frame_page2,Gtk::Label.new('Categories'))  
    
    #### PAGE 3 #####
    
    
    hb = Gtk::HBox.new(false,1)
    frame_page3 = Gtk::VBox.new(false,1).set_border_width(3)
    main_page3_t = Gtk::VBox.new(false,1).set_border_width(3)
    main_page3_v = Gtk::VBox.new(false,1).set_border_width(3)
    frame3_t = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Tone</b></big>'))
    frame3_t.add(main_page3_t)
  
    frame3_v = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Verb</b></big>'))
    frame3_v.add(main_page3_v)

    hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(frame3_t))
    hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(frame3_v))
    frame_page3.pack_start(hb,false)

    
    $tmp =Array.new
    $choice_array.each {|a| 
      if a.choicename[0] == "a" && a.choicetype == "tone"
        $tmp.push(a)
      end
    }
    @table_t = build_table($tmp)
    $tmp =Array.new
    
    $tmp =Array.new
    $choice_array.each {|a| 
      if a.choicename[0] == "a" && a.choicetype == "verb"
        $tmp.push(a)
      end
    }
    @table_v = build_table($tmp)
    $tmp =Array.new

  
  
    main_page3_t.pack_start(@table_t,false)
    main_page3_v.pack_start(@table_v,false)
    notebook_main.append_page(frame_page3,Gtk::Label.new('By Letter'))  

    #### PAGE 4 #####
    
    frame_page4 = Gtk::VBox.new(false,1).set_border_width(3)
    main_page4 = Gtk::VBox.new(false,1).set_border_width(3)
    frame4 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Configuration</b></big>'))
    frame4.add(main_page4)
    frame_page4.pack_start(frame4,false)
    
    notebook_main.append_page(frame_page4,Gtk::Label.new('Configuration'))


    

#############################  BUTTONS ################################################  


  #### BUILD BUTTONS  ######

    hb_saveclose = Gtk::HBox.new
    save = Gtk::Button.new('                 _SAY IT!                ')
    close = Gtk::Button.new('E_xit')
    setfavorites = Gtk::Button.new("Set _Favorites")
    combo = Gtk::ComboBox.new(true)
    combo.append_text("By Letter")
    ('A'..'Z').to_a.each {|alpha| combo.append_text(alpha)} 
    combo.active = 0
    cat_combo = Gtk::ComboBox.new(true)
    cat_combo.append_text("Categories")
    @catarray.each {|ca_obj| cat_combo.append_text(ca_obj)}
    cat_combo.active = 0
    @textbox = Gtk::Entry.new
    @textbox.set_editable(true)
    @textbox.text = script.vars[0]
    @textbox.set_has_frame(true)
    
    ########## BUILD CONFIG BUTTONS #####################
    update = Gtk::Button.new("Download the Latest Version")
    auto_update = Gtk::Button.new("Set to Auto Update")
    repo_check_off = "Toggle Daily Repo Check On"
    repo_check_on = "Toggle Daily Repo Check Off"
    if (@favs_found['LastRun'] == "Off")
      repo_check_message = repo_check_off
    else
      repo_check_message = repo_check_on
    end
    toggle_repo_check = Gtk::Button.new(repo_check_message)
    export_to_csv = Gtk::Button.new("Export to CSV")
    itc_on = "Toggle to set Category Import OFF"
    itc_off = "Toggle to set Category Import ON <$lich__dir\\PT__import.csv>"
    if @favs_found['import'] == true
      import_to_csv = Gtk::Button.new(itc_on)
    else
      import_to_csv = Gtk::Button.new(itc_off)
    end
    export_fav_to_csv = Gtk::Button.new("Export Favorites to CSV")
    iftc_on = "Toggle to set Favorite Import OFF"
    iftc_off = "Toggle to set Favorite Import ON <$lich__dir\\PT__FAV__import.csv>"
    if @favs_found['importfav'] == true
      import_fav_to_csv = Gtk::Button.new(iftc_on)
    else
      import_fav_to_csv = Gtk::Button.new(iftc_off)
    end

    @target_combo = Gtk::ComboBox.new(true)
    @target_combo.append_text("Targets")
    @target_combo.append_text("Refresh")
    @target_combo.append_text(XMLData.name)
    $target_array.each {|ta_obj| @target_count += 1;@target_combo.append_text(ta_obj.targetname)}
    @target_combo.active = 0

    
    
  #### SET BUTTON CLICKS ######    
    
    $fav_choice_array.each{|a|
      a.choicevalue.signal_connect('clicked'){
        clear_current(a.choicename,a.choicetype) if !($fav)
        sync_button(a.choicename,a.choicevalue.active?,a.choicetype)
      }
    }
    $choice_array.each{|a|
      a.choicevalue.signal_connect('clicked'){
        clear_current(a.choicename,a.choicetype) if !($fav)
        sync_button(a.choicename,a.choicevalue.active?,a.choicetype)
      }
    }
    $cat_choice_array.each{|a|
      a.choicevalue.signal_connect('clicked'){
        clear_current(a.choicename,a.choicetype) if !($fav)
        sync_button(a.choicename,a.choicevalue.active?,a.choicetype)
      }
    }   
    
    update.signal_connect('clicked') {Script.run("repo","download pt.lic") }
    auto_update.signal_connect('clicked') {
      Script.run("repo","set-updatable pt.lic") 
      @favs_found['LastRun'] = "Off"
    }
    toggle_repo_check.signal_connect('clicked') {
      if (@favs_found['LastRun'] == "Off") 
        toggle_repo_check.set_label(repo_check_on)
        @favs_found['LastRun'] = nil
      else
        toggle_repo_check.set_label(repo_check_off)
        @favs_found['LastRun'] = "Off"
      end
    }
    export_to_csv.signal_connect('clicked') {
      if $SAFE > 0
        _respond "#{monsterbold_start}This feature is disabled.  Trust PT and it will be enabled. (;trust pt.lic)#{monsterbold_end}"
        else
        echo "working on a CSV"
        export_dir = "#{$lich_dir}" 
        datetimestamp = "#{Time.now.strftime("%Y-%m-%d_%H-%M-%S")}"
        export_filename = "PT_#{datetimestamp}.csv"
        export_file = "#{export_dir}#{export_filename}"
        begin
          require 'csv'
          csv = CSV.open(export_file, "w+")
          csv_start = true
          csv << ["name","category","toneverb"]
          @tonearray.each { |hash_item|
            etc_hash = hash_item.to_hash
            etc_array = [etc_hash["name"],etc_hash["category"],"tone"]
           # echo etc_array
            csv << etc_array
          } 
          @verbarray.each { |hash_item|
            etc_hash = hash_item.to_hash
            etc_array = [etc_hash["name"],etc_hash["category"],"verb"]
            #echo etc_array
            csv << etc_array
          } 
        ensure
          csv.close rescue()
        end
      end
    }
    import_to_csv.signal_connect('clicked') {
      if $SAFE > 0
        _respond "#{monsterbold_start}This feature is disabled.  Trust PT and it will be enabled. (;trust pt.lic)#{monsterbold_end}"
      else
        if @favs_found['import'] == true
          import_to_csv.set_label(itc_off)
          @favs_found['import'] = false
        else
          import_to_csv.set_label(itc_on)
          @favs_found['import'] = true
        end
      end
    }
    export_fav_to_csv.signal_connect('clicked') {
     if $SAFE > 0
        _respond "#{monsterbold_start}This feature is disabled.  Trust PT and it will be enabled. (;trust pt.lic)#{monsterbold_end}"
        else
        echo "working on a CSV"
        export_dir = "#{$lich_dir}" 
        datetimestamp = "#{Time.now.strftime("%Y-%m-%d_%H-%M-%S")}"
        export_filename = "PT_FAV_#{datetimestamp}.csv"
        export_file = "#{export_dir}#{export_filename}"
        begin
           require 'csv'
           csv = CSV.open(export_file, "w+")
           csv_start = true
           csv << ["name","category","toneverb"]
          $fav_choice_array.each{|hash_item|
            etc_array = hash_item.choicename,hash_item.choicecat,hash_item.choicetype
            csv << etc_array
          }
        ensure
          # csv.close rescue()
        end
      end
    }
    import_fav_to_csv.signal_connect('clicked') {
      if $SAFE > 0
        _respond "#{monsterbold_start}This feature is disabled.  Trust PT and it will be enabled. (;trust pt.lic)#{monsterbold_end}"
      else
        if @favs_found['importfav'] == true
          import_fav_to_csv.set_label(iftc_off)
          @favs_found['importfav'] = false
        else
          import_fav_to_csv.set_label(iftc_on)
          @favs_found['importfav'] = true
        end
      end
    }
    save.signal_connect('clicked') {savetv;savefav; window_action = :save }
    close.signal_connect('clicked') { window_action = :exit }
    combo.signal_connect("changed"){
      if combo.active_iter[0].downcase != "by letter"
         $tmp_com_t =Array.new
         $choice_array.each {|a| 
           if a.choicename[0] == combo.active_iter[0].downcase && a.choicetype == "tone" 
               $tmp_com_t.push(a)
           end
         }
         $tmp_com_v =Array.new
         $choice_array.each {|a| 
           if a.choicename[0] == combo.active_iter[0].downcase && a.choicetype == "verb" 
               $tmp_com_v.push(a)
           end
         }
         @table_t = build_table($tmp_com_t,@table_t)
         @table_v = build_table($tmp_com_v,@table_v)
         notebook_main.set_page(2)
      end
 }
    cat_combo.signal_connect("changed"){
      if cat_combo.active_iter[0].downcase != "categories"
        $tmp_cat_t =Array.new
        $cat_choice_array.each {|a| 
          if a.choicecat.downcase == cat_combo.active_iter[0].downcase && a.choicetype == "tone" 
              $tmp_cat_t.push(a)
          end
        }

        $tmp_cat_v =Array.new
        $cat_choice_array.each {|a| 
          if a.choicecat.downcase == cat_combo.active_iter[0].downcase && a.choicetype == "verb" 
              $tmp_cat_v.push(a)
          end
        }

        
        @cat_table_v = build_table($tmp_cat_v,@cat_table_v)
        @cat_table_t = build_table($tmp_cat_t,@cat_table_t)        
        notebook_main.set_page(1)
      end
    }
    
    setfavorites.signal_connect('clicked'){
      if !($fav)
        $fav = true
        setfavorites.set_label("Save _Favorites")
        $choice_array.each {|a| 
          if @favs_found[a.choicename] == "fav"
            a.choicevalue.set_active(true)
            Fav_Choice.new(a.choicename,Gtk::CheckButton.new((a.choicename + ":" + a.choicetype.upcase)),a.choicetype,a.choicecat)
          elsif
            a.choicevalue.set_active(false)
          end
        }
        $cat_choice_array.each {|a| 
          if @favs_found[a.choicename] == "fav"
            a.choicevalue.set_active(true)
            Fav_Choice.new(a.choicename,Gtk::CheckButton.new((a.choicename + ":" + a.choicetype.upcase)),a.choicetype,a.choicecat)
          end
        }
        
        $fav_choice_array.each{|a|
          a.choicevalue.set_active(true)
  
        }
        
      elsif
        setfavorites.set_label("Set _Favorites")
        $fav = false
        savetv_fav
        pop_fav_array
        $tmp_fav_t =Array.new
        $fav_choice_array.each {|a| 
          if a.choicetype == "tone"
            $tmp_fav_t.push(a)
          end
        }
        @favtable_t = build_table($tmp_fav_t,@favtable_t)
        
        $tmp_fav_v =Array.new
        $fav_choice_array.each {|a| 
          if a.choicetype == "verb"
            $tmp_fav_v.push(a)
          end
        }
        @favtable_v = build_table($tmp_fav_v,@favtable_v)
        $choice_array.each {|a|
          a.choicevalue.set_active(false)
        }
        $cat_choice_array.each {|a|
          a.choicevalue.set_active(false)
        }
        
  
      end 
    } 
    @target_combo.signal_connect("changed"){
      if @target_combo.active_iter[0].downcase != "targets" && @target_combo.active_iter[0].downcase != "refresh"
        @target_say=  @target_combo.active_iter[0].downcase
      elsif @target_combo.active_iter[0].downcase == "refresh"
        [*3..(@target_count+2)].reverse.each{|a| @target_combo.remove_text(a)}
        $target_array = Array.new
        build_target_array
        @target_count = 0
        $target_array.each {|ta_obj| @target_count += 1;@target_combo.append_text(ta_obj.targetname)}
        @target_combo.active = 0
      end
    }
    
      #### ATTACH BUTTONS  ######
    
    hb_saveclose.pack_start(@target_combo, false)
    hb_saveclose.pack_start(cat_combo,false)
    hb_saveclose.pack_start(combo,false)
    hb_saveclose.pack_start(setfavorites,false)
    hb_saveclose.pack_start(save,false)
    hb_saveclose.pack_start(close,false)
    hb_text = Gtk::HBox.new
    hb_text.pack_start(@textbox,true,true)
    main_page4.pack_start(update,false)
    main_page4.pack_start(auto_update,false)
    main_page4.pack_start(toggle_repo_check,false)
    main_page4.pack_start(export_to_csv,false)
    main_page4.pack_start(import_to_csv,false)
    main_page4.pack_start(export_fav_to_csv,false)
    main_page4.pack_start(import_fav_to_csv,false)
    
    # Primary VerticalBox to split up Notebook and Save/Close buttons
    vb_main = Gtk::VBox.new(false,5)
    vb_main.border_width = 3

    vb_main.pack_start(notebook_main,false)
    vb_main.pack_start(Gtk::Alignment.new(1,0,0,0).add(hb_saveclose),false)
    vb_main.pack_start(Gtk::Alignment.new(0,0,1,0).add(hb_text),false)
    
    @window.signal_connect('delete_event') { window_action = :exit }
    @window.add(vb_main)
    @window.show_all
    @window.keep_above = true # On windows keep_above is required AFTER show_all			
    @window.set_focus(@textbox)    
	}

before_dying { Gtk.queue { @window.destroy } }
wait_while { window_action.nil? }
undo_before_dying
Gtk.queue { @window.destroy }

if window_action == :exit
  exit
end

output = @textbox.text
if $goforit && output != "" && output != nil
  (output = ":#{@tone} " + output )if !(@tone.nil?)
  (output = "=#{@verb} " + output) if !(@verb.nil?)
  if !(@target_say.nil?) && !(@target_say == "") && !(output.nil?)
    if @target_say.include? "_"
      output = "::#{@target_say.split("_")[1]} " + output
    else
      output = "::#{@target_say} " + output
    end
  end 
  
  output = "'" + output
  fput output
end
  
  
  
Script.self.kill												



