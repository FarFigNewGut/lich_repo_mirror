=begin

    My Combat

    Adds a new window to your SF interface and shows only your combat messages (whether
    that is you swinging/casting, or something swinging/casting at you)

    MOST of this code was original the briefcombat.lic script, with some code also
    used from showxml.lic (to make a new window). So thanks to both of those
    script creators for those! I suggest you check them out too!

      author: Kilded (kilded.gs4@gmail.com)
        game: gs
     version: 1.0

=end

unless defined?(script.want_script_output)
    echo 'Your version of Lich is too old for this script.'
    exit
end

class ShowMyBattleScript
    VERSION = '0.2 (2017-06-24)'

    BOOLEAN_MAP = {
            'yes' => true, 'true' => true, 'on' => true, '1' => true,
            'no' => false, 'false' => false, 'off' => false, '0' => false,
    }

    pc_or_you = '<pushBold\/>An? <a exist="\d+" noun="\w+">[\w ]+<\/a><popBold\/>|<a exist="(-\d+)" noun="\w+">\w+<\/a>|You'
    verbs = ['gestures? at',
             'channels? at',
             '(?:hurl|fire|swing|thrust)s? an? [\w \-\']+ at',
             'swings? an? [\w \-\']+ at',
             'thrusts?(?: with)? a [\w \-\']+ at',
             'directing the sound of (?:his|her|your) voice at',
             '(?:make a precise )?attempts? to (?:punch|jab|grapple|kick)']

    target = '<pushBold\/>(.*)<popBold\/>' #npc targets are in bold thanks to MonsterBold setting
    youtarget = 'you!'
    $combat_regex = /(#{pc_or_you}) (#{verbs.join('|')}) (#{target})/
    $combat_atyou_regex = /(#{pc_or_you}) (#{verbs.join('|')}) (#{youtarget})/

    include REXML::StreamListener

    def initialize(script)
        script.want_script_output = false
        script.want_upstream = true
        script.want_downstream = false
        script.want_downstream_xml = true

        @script = script

        @window_id = 'mycombat_window'
        @window_title = 'My Combat'
        @window_location = 'center'

        @options = {
                :show => true, :bold => true,
                :resident => false, :clear => false, :high => false, :time => false, :save => false
        }
        @output = Queue.new
        @thread = nil
        @stack = []
    end

    def help_command
        script = "#{$lich_char}#{@script.name}"
        spacer = ''.ljust(script.length, ' ')
        respond "#{script} version #{VERSION}"
        respond "Usage:"
        respond
        respond "   #{script} HELP                Shows this help text."
        respond
        respond "   #{script} [<options...>]      Begins capturing XML and displaying it in a stream window."
        respond
        respond 'Options:'
        respond '   It is not neccessary to specify all (or any!) options'
        respond
        respond '   id=mybattle_debug_window       Stream window ID to use.'
        respond
        respond '   title="XML Stream"            Title for window.'
        respond
        respond '   location=center               Location for window.'
        respond
        respond '   [no]resident                  Resident windows persist after being closed.  (Default: noresident)'
        respond '                                 If the window is resident, showXML will continue logging after it is closed'
        respond
        respond '   [no]show                      (Don\'t) force the window to become visible.  (Default: show)'
        respond
        respond '   [no]clear                     (Don\'t) clear the window contents on startup.  (Default: noclear)'
        respond
        respond '   [no]bold                      (Don\'t) use monsterbold for client commands.  (Default: bold)'
        respond
        respond '   [no]high[lights]              (Don\'t) process highlight strings.  (Default: nohigh)'
        respond
        respond '   [no]time[stamps]              (Don\'t) timestamp messages.  (Default: notime)'
        respond
        respond '   [no]save                      (Don\'t) save the window configuration.  (Default: nosave)'
    end

    def run(vars)
        def commanderror(msg)
            echo msg
            echo "See #{$lich_char}#{@script.name} HELP"
            nil
        end

        *args = vars[1..-1]
        unless args.length > 0
            echo "Using default settings.  See #{$lich_char}#{@script.name} HELP if you wanted more information."
        end

        seen = Set.new

        args.each{|arg|
            next unless arg and arg != ''
            if arg.downcase == 'help'
                help_command
                return
            end

            setting, value = arg.split('=', 2)
            setting.downcase!
            setting = 'high' if setting.length > 4 and 'highlights'.start_with?(setting)
            setting = 'time' if setting.length > 4 and 'timestamps'.start_with?(setting)

            return commanderror("Option '#{setting}' was repeated") unless seen.add?(setting)

            if value.nil?
                if setting.start_with?('no')
                    setting = setting[2..-1]
                    value = false
                else
                    value = true
                end
            end

            case setting
                when 'id'
                    return commanderror('Stream ID must be a string.') unless value.instance_of?(String)
                    return commanderror('Stream ID must have a nonzero length.') unless value.length > 0
                    @window_id = value
                when 'title'
                    return commanderror('Window title must be a string.') unless value.instance_of?(String)
                    return commanderror('Window title must have a nonzero length.') unless value.length > 0
                    @window_title = value
                when 'location'
                    return commanderror('Window location must be a string.') unless value.instance_of?(String)
                    return commanderror('Window location must have a nonzero length.') unless value.length > 0
                    @window_location = value
                else
                    return commanderror("Unknown setting '#{setting}'") unless @options.include?(setting.intern)
                    if value.instance_of?(String)
                        valuetext = value
                        value = BOOLEAN_MAP[value.downcase.strip]
                        return commanderror("Invalid boolean option '#{valuetext}'") if valuetext.nil?
                    end
                    @options[setting.intern] = value
            end
        }

        before_dying{
            Thread.kill(@thread)
            DownstreamHook.remove('mybattle_downstream_hook')
        }

        # Server hook
        DownstreamHook.add('mybattle_downstream_hook', proc{|data|
            @output.push([:server, data.dup])
            data
        })

        # Client hook
        @thread = Thread.new(@output) {|q|
            while true
                @output.push([:client, upstream_get])
            end
        }

        # Create the window
        buffer = []
        xml = REXML::Element.new('streamWindow')
        xml.attributes['id'] = @window_id
        xml.attributes['title'] = @window_title
        xml.attributes['location'] = @window_location
        # xml.attributes['subtitle'] = " - #{@script.name} #{VERSION}"
        xml.attributes['ifClosed'] = ''
        xml.attributes['scroll'] = 'auto'
        xml.attributes['resident'] = @options[:resident].to_s
        xml.attributes['save'] = '' unless @options[:save]
        buffer << xml.to_s
        if @options[:clear]
            xml = REXML::Element.new('clearStream')
            xml.attributes['id'] = @window_id
            buffer << xml.to_s
        end
        if @options[:show]
            xml = REXML::Element.new('exposeStream')
            xml.attributes['id'] = @window_id
            buffer << xml.to_s
        end
        puts buffer.join('')

        # Determine wrapper commands for writing to the window
        before = "<pushStream id='#{@window_id}' /><output class='mono'/>"
        after = "<popStream id='#{@window_id}' /><output class=''/>\n"  # TODO: See if we need to output.. output... or SF is smart enough

        if @options[:resident]
            exit_command = nil
        else
            exit_command = "<c>_swclose s#{@window_id}"
        end

        echo @options.inspect

        battlemsg = false

        while true
            source, message = @output.pop
            output = nil
            if battlemsg
                if message.index("<prompt") != nil
                    battlemsg = false
                    output = nil
                else
                    output = message
                end
            else
                if message =~ $combat_regex
                    target_string = $4
                    is_my_action = $1 == 'You'

                    if is_my_action
                        battlemsg = true
                        timestamp = "[#{Time.now.strftime('%X')}] "
                        output = timestamp + message
                    end
                end
                if message =~ $combat_atyou_regex
                    battlemsg = true
                    output = message
                end
            end
            if source == :client
                if exit_command and exit_command == message
                    break
                end
                #if @options[:bold]
                #    output = "<b>#{output}</b>\n"
                #end
            end
            #puts "#{before}#{output}#{after}"
            puts "#{before}#{output}#{after}"
        end

        Thread.kill(@thread)
        DownstreamHook.remove('mybattle_downstream_hook')
    end
end

ShowMyBattleScript.new(script).run(script.vars)