# QUIET

=begin
		Itemagic displays magic items in inventory and open containers.
  
		author: Juspera, working off Daedeeus's itemmagic script
          tags: core
       version: 0.1.0
      required: Lich >= 4.6.58

     changelog:
		0.1.0 (2023-04-28): first release

#############################################################################
#                                                                           #
#                       HOW TO ADD YOUR MAGIC ITEMS                         #
#                                                                           #
#############################################################################

Magic items may be entered below, where it says RECORD YOUR MAGIC ITEMS HERE.
Keep to the formatting shown. Add a comma at the end of any new line.
I have provided a few examples. Use :notes to record enhancive properties, if applicable.
If you don't know an item's spell, or if it doesn't have one, leave out the :spell part.
If you have no notes, leave out the :notes part.
If your item has no spell and no notes, why are you entering it?

If itemagic will not run, please check the following:
	1) Your :spell and :notes are separated by a comma, if you have both
 	2) You have a => pointing from the item name into the brackets, and a => between :spell and its number, and/or between :notes and the note
 	3) All item names and all notes are contained in quotes
 	4) The :spell/:notes area of each line is contained in curly brackets
 	5) All lines except the last end in a comma
	
If itemagic runs but your item will not show, please check the following:
 	1) It is on your character and entered in the correct format, with no misspellings
 	2) It is worn, or is in an open container that is worn
	
=end

# RECORD YOUR MAGIC ITEMS HERE
# You may want to make a copy of these before updating this script.

YourMagicItems = {
	"detailed alabaster swan statue" => { :spell => 1712 },
	"vaalorn warlance" => { :notes => "+1 Int Base" },
	"pair of black pearl earrings" => { :spell => 115, :notes => "+2 Ambush Ranks" }
}



#########################################################################
#									#
#			TOUCH THIS CODE AT OWN RISK			#
#									#
#########################################################################

# Treasure system and other common magic items
# :rechargeable attribute from Daedeeus's itemmagic script retained for possible future use

GameMagicItems = {
	"blue crystal" => { :spell => 117, :rechargeable => true },
	"white crystal" => { :spell => 509, :rechargeable => false },
	"black crystal" => { :spell => 511, :rechargeable => false },
	"small statue" => { :spell => 1712, :rechargeable => true },
	"heavy quartz orb" => { :spell => 1711, :rechargeable => true },
	"ruby amulet" => { :spell => 140, :rechargeable => true },
	"small moonstone cube" => { :spell => 1705, :rechargeable => false },
	"solid moonstone cube" => { :spell => 1705, :rechargeable => false },
	"heavy moonstone cube" => { :spell => 1705, :rechargeable => true },
	"dull gold coin" => { :spell => 1701, :rechargeable => true },
	"pinch of powdered iron filings" => { :spell => 1704, :rechargeable => true },
	"ruby amulet" => { :spell => 140, :rechargeable => true },
	"granite triangle" => { :spell => 1706, :rechargeable => true },
	"deathstone granules" => { :spell => 1713, :rechargeable => false },
	"cracked clay disc" => { :spell => 1714, :rechargeable => true },
	"fine firestone dust" => { :spell => 1715, :rechargeable => true },
	"bronze square" => { :spell => 1718, :rechargeable => false },
	"crystalline prism" => { :spell => 1720, :rechargeable => true },
	"gold-framed clear glass lens" => { :spell => 1750, :rechargeable => false },
	"verlok feather" => { :spell => 205, :rechargeable => false },
	"small glowing vial" => { :spell => 211, :rechargeable => false },
	"blue feather-shaped charm" => { :spell => 0 },
	"small totem head" => { :spell => 1 },
	"nettle berry" => { :spell => 2 },
	"ochre-colored fungus" => { :spell => 2 }
}

# Abridged spell list
# s = spiritual, e = elemental, m = mental, b = bolt

SpellNotes = {
	#"spells" for items that don't really have spells
	0 => "relieves 100lb of weight",
	1 => "4 hours underwater breathing",
	2 => "unpoisons",
	
	#actual spells
	101 => "+10 sTD, +10 bDS",
	102 => "-20 AS, +20 DS",
	103 => "+10 DS",
	104 => "",
	105 => "",
	106 => "+30 DS to all in room",
	107 => "+15 sTD, +25 bDS",
	109 => "",
	112 => "",
	113 => "",
	114 => "",
	115 => "chance for 2nd warding",
	117 => "+75 AS",
	119 => "",
	120 => "+15 DS, +20 sTD",
	130 => "'fog'",
	140 => "+100 DS",
	202 => "+10 DS",
	203 => "",
	204 => "",
	205 => "-10 DS to all in room",
	206 => "+20 FA ranks",
	207 => "",
	211 => "+15 AS",
	213 => "",
	215 => "+25 AS",
	218 => "",
	219 => "+30 bDS, +30 sTD",
	220 => "",
	303 => "+10 DS",
	304 => "",
	305 => "",
	307 => "up +15 AS and DS",
	310 => "up +20 DS and TD",
	313 => "+10 sTD",
	314 => "negates encumbrance",
	315 => "",
	319 => "absorbs an attack",
	401 => "+5 DS, +5 eTD",
	402 => "aids search & detection",
	403 => "",
	404 => "",
	406 => "+10 DS, +10 eTD",
	410 => "",
	414 => "+20 DS, +15 eTD",
	419 => "+20 DS, +15 eTD",
	425 => "+25 AS, +25 eCS",
	503 => "+20 DS",
	506 => "speeds you up",
	507 => "+20 DS",
	508 => "+20 eTD",
	509 => "+15 STR",
	511 => "disk",
	513 => "+20 bAS",
	515 => "speeds up combat",
	520 => "crit padding",
	535 => "speeds you up",
	601 => "+10 DS",
	602 => "+15 bDS (common bolts only)",
	604 => "+25 to skin",
	605 => "absorbs next attack",
	606 => "+10 STR",
	608 => "+30 AS, +18 sCS",
	612 => "gives flares/summons breeze",
	613 => "+20 DS, +20 sTD",
	617 => "aids stalking & hiding",
	618 => "+20 Dodge ranks",
	620 => "resist one element",
	625 => "up to +12 sTD",
	640 => "+20 DS",
	706 => "stuns",
	707 => "",
	712 => "+25 DS, +20 TD",
	905 => "+5 DS, +20 bDS",
	911 => "+20 Dodge ranks",
	913 => "+10 DS, +20 eTD",
	916 => "",
	919 => "+50 DS",
	920 => "",
	930 => "",
	1101 => "heal",
	1107 => "cures overexertion/breaks webs",
	1109 => "+15 AS, +25 DS, +15 sTD",
	1118 => "",
	1119 => "+12 DS, +12 sTD",
	1130 => "+20 AS, +20 DS",
	1201 => "removes emotional effect",
	1202 => "armor of full leather equiv",
	1204 => "+10 DS",
	1205 => "+20 Trading ranks",
	1208 => "+20 mTD",
	1213 => "20% lower stamina costs",
	1214 => "parry more attacks",
	1215 => "chance for 2nd defense roll",
	1216 => "+30 DS",
	1218 => "",
	1220 => "+20 DS",
	1225 => "incites local creatures",
	1601 => "+5 DS, +5 sTD",
	1607 => "7 mana for 15 HP & stamina",
	1608 => "+20 Armor Use ranks",
	1609 => "+15 DS, aids blocking",
	1610 => "+10 DS",
	1611 => "+10 CM",
	1612 => "lowers armor hindrance",
	1616 => "+4 constitution",
	1619 => "+50 sTD",
	1635 => "removes 1 status effect",
	1701 => "always dispelled first",
	1704 => "",
	1705 => "+10 CM",
	1711 => "+10 CS",
	1712 => "+25 DS",
	1713 => "",
	1714 => "(hits adjacent rooms)",
	1715 => "",
	1716 => "(temporary)",
	1718 => "+30 AS, auto attack",
	1720 => "immunity to low-level attack spells",
	1750 => "cast any spell from treasure system"
}

list = []

if script.vars[0].nil?

	# Making a list of items that are worn or in containers that are worn
	class GameObjMagicitem < GameObj
		attr_accessor :id, :noun, :name, :quantity, :loc
		def initialize(id, noun, name, quantity, loc=nil)
			@id = id
			@name = name
			@noun = noun
			@quantity = quantity
			@loc = loc
		end
	end

	# Grouping regular with bound (and other special) blue, white, and black crystals and ruby amulets
	def condense_name(name)
		if name =~ /blue crystal$/
			@name = "blue crystal"
		elsif name =~ /white crystal$/
			@name = "white crystal"
		elsif name =~ /black crystal$/
			@name = "black crystal"
		elsif name =~ /ruby amulet$/
			@name = "ruby amulet"
		else
			@name =name
		end
	end

	items = []
	quantities = []

	echo "Searching open containers. This may trigger look scripts..."

	# Getting items
	GameObj.inv.each do |i|
		condensed_name = condense_name(i.name)
		if script.vars[0] = "loc"
			if items.select { |obj| obj.name == condensed_name and obj.loc == "worn"}.length > 0
				duplicate_items = items.select { |obj| obj.name == condensed_name and obj.loc == "worn" }
				duplicate_items[0].quantity += 1
			else
				obj = GameObjMagicitem.new(id=i.id,noun=i.noun,name=condensed_name,quantity=1,loc="worn")
				items.append(obj)
			end
		else
			if items.select { |obj| obj.name == condensed_name }.length > 0
				duplicate_items = items.select { |obj| obj.name == condensed_name }
				duplicate_items[0].quantity += 1
			else
				obj = GameObjMagicitem.new(id=i.id,noun=i.noun,name=condensed_name,quantity=1)
				items.append(obj)
			end
		end
		
		# If item shows as having no contents, look in it to force game to load contents. Loop through contents.
		Lich::Util.quiet_command_xml("look in ##{i.id}", /In the|There is nothing|That is/, /Total items|in the.*\.|closed.|<prompt/) if i.contents.nil?
		i.contents.each do |j|
			condensed_name = condense_name(j.name)
			if script.vars[0] = "loc"
				if items.select { |obj| obj.name == condensed_name and obj.loc == i.noun }.length > 0
					duplicate_items = items.select { |obj| obj.name == condensed_name and obj.loc == i.noun }
					duplicate_items[0].quantity += 1
				else
					obj = GameObjMagicitem.new(id=j.id,noun=j.noun,name=condensed_name,quantity=1,loc=i.noun)
					items.append(obj)
				end
			else
				if items.select { |obj| obj.name == condensed_name }.length > 0
					duplicate_items = items.select { |obj| obj.name == condensed_name }
					duplicate_items[0].quantity += 1
				else
					obj = GameObjMagicitem.new(id=j.id,noun=j.noun,name=condensed_name,quantity=1)
					items.append(obj)
				end
			end
		end
	end

	# Alphabetizing items
	items = items.sort_by {|obj| obj.name}

	$ItemMagicList = []
	$ItemActivator = {}
	currentNumber = 1
	list.push("\n\tIdentifiable magic items:\n")
	
	# Building display
	items.each do |i|
		if YourMagicItems.keys.include?(i.name)
			loc = nil
			if script.vars[0] = "loc"
				loc = " (#{i.loc})"
			end
			spacedname = "#{i.name}#{loc}"
			if spacedname.length < 30
				interval = 30 - spacedname.length
				while interval > 0 do
					spacedname += " "
					interval -= 1
				end
			end
			mi = YourMagicItems[i.name]
			q = i.quantity
			type = ""
			type = "rechargeable" if mi[:rechargeable]
			type = "empowerable" if mi[:empowerable]
			spell = "No spell"
			spell = "#{mi[:spell]} #{Spell[mi[:spell]].name}" if mi[:spell] > 100
			spacedspell = spell
			if spacedspell.length < 24
				interval = 24 - spacedspell.length
				while interval > 0 do
					spacedspell += " "
					interval -= 1
				end
			end
			spellnotes = ""
			
			spellnotes = "#{SpellNotes[mi[:spell]]} " if mi[:spell]
			notes = " "
			notes = "(#{mi[:notes]})" if mi[:notes]
			list.push("\t(#{q}) <a exist=\"#{i.id}\" noun=\"#{i.noun}\">#{spacedname}</a>\t#{spacedspell}#{spellnotes}#{notes}")
			$ItemMagicList.push(i.name)
			$ItemActivator[i.id] = mi[:activate] unless mi[:activate].nil?
			currentNumber += 1
		end

		if GameMagicItems.keys.include?(i.name)
			loc = nil
			if script.vars[0] = "loc"
				loc = " (#{i.loc})"
			end
			spacedname = "#{i.name}#{loc}"
			if spacedname.length < 30
				interval = 30 - spacedname.length
				while interval > 0 do
					spacedname += " "
					interval -= 1
				end
			end
			mi = GameMagicItems[i.name]
			q = i.quantity
			type = ""
			type = "rechargeable" if mi[:rechargeable]
			type = "empowerable" if mi[:empowerable]
			spell = "No spell"
			spell = "#{mi[:spell]} #{Spell[mi[:spell]].name}" if mi[:spell] > 100
			spacedspell = spell
			if spacedspell.length < 24
				interval = 24 - spacedspell.length
				while interval > 0 do
					spacedspell += " "
					interval -= 1
				end
			end
			spellnotes = ""
			spellnotes = "#{SpellNotes[mi[:spell]]} " if mi[:spell]
			notes = " "
			notes = "(#{mi[:notes]})" if mi[:notes]
			list.push("\t(#{q}) #{spacedname}\t#{spacedspell}#{spellnotes}#{notes}")
			$ItemMagicList.push(i.name)
			currentNumber += 1
		end
	end
	

	list.push("\n\tSee \";itemagic help\" for troubleshooting/how to enter your unique items.")

	# Sending info to user
	pushonce = proc { |server_string|
		if server_string =~ /Please rephrase that command/
			server_string = list.join("\n") + "\n"
			DownstreamHook.remove('pushonce')
		end
		server_string
	}

	DownstreamHook.add('pushonce',pushonce)
	put " "

# Help
else
	list.push(" ")
	list.push("\tItemagic will search a character's inventory and one level of open containers.")
	list.push("\tIt does not use in-game means to detect magic items, but relies on pre-entered info.")
	list.push("\tTo add your own magic items, edit the itemagic script in your Lich scripts folder.")
	list.push("\tIt's easy. The script will be somewhere like Desktop\\Lich5\\scripts.")
	list.push("\tFollow the instructions at the top.")
	list.push("\tJust be sure to make a backup so your custom items won't be lost if you update.")

	pushonce = proc { |server_string|
		if server_string =~ /Please rephrase that command/
			server_string = list.join("\n") + "\n"
			DownstreamHook.remove('pushonce')
		end
		server_string
	}

	DownstreamHook.add('pushonce',pushonce)
	put " "
end

#
# Currently unused code
#

=begin
	# Checking hands
	if GameObj.left_hand.name != "Empty"
		i = GameObj.left_hand
		obj = GameObjMagicitem.new(id=i.id,noun=i.noun,name=i.name,quantity=1)
		items.append(obj)
	end

	if GameObj.right_hand.name != "Empty"
		i = GameObj.right_hand
	if items.select { |obj| obj.name == i.name }.length > 0
			duplicate_items = items.select { |obj| obj.name == i.name }
			duplicate_items[0].quantity += 1
		else
			obj = GameObjMagicitem.new(id=i.id,noun=i.noun,name=i.name,quantity=1)
			items.append(obj)
		end
	end
=end