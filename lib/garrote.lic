#garrote.lic
=begin
    Author: Gwrawr
    Garrote execution script with optional logic.
=end

##aborts
if XMLData.active_spells.any? {|spell| spell.any? {|text| text.to_s =~ /Garrote Cooldown/}}
    echo "Error: Garrote was called while cooling down"
end
if checkstamina < 10
    echo "Error: Garrote was called with insufficent stamina"
    exit
end

##initialize
#load settings, or defaults if settings dne
readyPhrase = CharSettings["garrote_readyPhrase"] || "get my garrote"
unreadyPhrase = CharSettings["garrote_unreadyPhrase"] || "stow my garrote"
stance = CharSettings["garrote_stance"] || "offensive"
noun = CharSettings["garrote_noun"] || "garrote"
garrote_when = CharSettings["garrote_when"] || "always"
garrote_time = CharSettings["garrote_time"] || 15

#save defaults if settings dne
CharSettings["garrote_readyPhrase"] = readyPhrase
CharSettings["garrote_unreadyPhrase"] = unreadyPhrase
CharSettings["garrote_stance"] = stance
CharSettings["garrote_noun"] = noun
CharSettings["garrote_when"] = "always"
CharSettings["garrote_time"] = garrote_time
CharSettings.save


##functions
#waitrt helper
def ifrt
    waitrt if checkrt > 0
    waitrt?
end

#show help menu
displayHelp = lambda {
    echo    "\n\nStandard\nusage is:   .garrote or .garrote target\n\nInitial\nusage is:   .garrote [set|target|list|show|settings|pref(erences)?] [always|never|stance|noun|ready|unready] [[stance|noun][words]*]\n
            Examples:\n
            .garrote set stance offensive
            .garrote set stance neutral\n
            .garrote set ready get my garrote
            .garrote set ready pinch my sheath
            .garrote set ready get my thingy from my container\n
            .garrote set unready stow my garrote
            .garrote set unready tuck my garrote
            .garrote set unready put my garrote in my boot\n
            .garrote set noun garrote
            .garrote set noun wire
                **where noun refers to the garrote in its weaponized form**\n
            .garrote set always
                **always garrote when enhanced agility is already on**
            .garrote set never
                **never garrote when enhanced agility is already on**
            .garrote set refresh/keep #
                **like never, but allow up to # seconds of overlap in order reapply without dropping**
            .garrote list/show/pref/preferences/settings
            .garrote default/reset/clear
            .garrote help"
    echo
    exit
}

#list settings
list = lambda {
    echo "\n\nYour ;garrote settings are:\n
    ready phrase:\t#{readyPhrase}
    unready phrase:\t#{CharSettings["garrote_unreadyPhrase"]}
    stance:\t\t#{CharSettings["garrote_stance"]}
    noun:\t\t#{CharSettings["garrote_noun"]}
    when:\t\t#{CharSettings["garrote_when"]}
    time:\t\t#{CharSettings["garrote_time"]}\n\nfor directions run ;garrote help"
    echo
}

#do the deed
garrote = lambda { |stance|
    ifrt
    put "stance #{stance}"
    return if checkstamina < 10
    put "cman garrote"
    loop do
        line = get
        case line
        when /rather awkward prop|Garrote what|could not find|referring to|no valid target|still stunned/
            return
            break
        when /You release the|You attempt to snap it taught, but|Your concentration lapses|is out of reach!/
            return
            break
        when /wait...|Wait/
            garrote.call()
            return
            break
        else
            #get next line
        end
    end
    ifrt
}

#ready garrote
ready = lambda {
    ##clear hands
    right = checkright
    left = checkleft
    ifrt
    waitcastrt?
    #weapon
    put "sheath" if checkright
    #shield
    if checkleft =~ /(?<shield>greatshield|shield|aegis|targe|buckler|heater|krytze|parma|scutum|mantlet|pavis)/
        shield = $~[:shield]
        put "wear my #{shield}"
    end
    #bow
    if checkleft =~ /(?<bow1>longbow|shortbow|crossbow|bow|lutk'azi|lutk'quoab|yumi|kut'zikokra|arbalest|kut'ziko)/
        bow = $~[:bow1]
        put "wear my #{bow}"
    end
    #other bow
    if checkright =~ /(?<bow2>longbow|shortbow|crossbow|bow|lutk'azi|lutk'quoab|yumi|kut'zikokra|arbalest|kut'ziko)/
        bow = (bow == $~[:bow2]) ? "other " + bow : $~[:bow2]
        put "wear my #{bow}"
        put "wear my "
    end
    #2weapon
    put "sheath" if checkleft
    wait
    #anything else
    put "store left" if checkleft
    put "store right" if checkright
    put "stow left" if checkleft
    put "stow right" if checkright
    #get garrote
    put readyPhrase

    return left, right
}
    
#store garrote
unready = lambda { |left, right|
    2.times{ifrt}
    until checkleft == left and checkright == right
        put unreadyPhrase
        put "gird"
        wait
    end
}


##BEGIN
##argparse
#help
if variable[1] and variable[1] =~ /(-h)|(help)/
   displayHelp.call()
   exit
end
#set
if variable[1] and variable[1] =~ /(?<!re)set/
    if variable[2] and variable[2] =~ /stance/
        if variable[3] and variable[3] =~ /(?<newstance>^(d|D)|^(g|G)|^(n|N)|^(f|F)|^(a|A)|^(o|O))/
            case $~[:newstance]
            when /^(d|D)/
                stance = "defensive"
            when /^(g|G)/
                stance = "guarded"
            when /^(n|N)/
                stance = "neutral"
            when /^(f|F)/
                stance = "forward"
            when /^(a|A)/
                stance = "advance"
            when /^(o|O)/
                stance = "offensive"
            else
                echo "\n\t Error:\tinvalid stance\n\t\tfor directions run ;garrote help"
                exit
            end
                CharSettings["garrote_stance"] = stance
                CharSettings.save
                echo "Stance saved as #{stance}"
                exit
        else
            echo "\n\t Error:\tinvalid stance\n\t\tfor directions run ;garrote help"
            exit
        end
    elsif variable[2] and variable[2] =~ /unready/
        if variable[3]
            if not variable[4] and variable[3] =~ /stow/
                readyPhrase = "stow all"
            elsif not variable[4] and variable[3] =~ /stor/
                readyPhrase = "store both"
            else
                unreadyPhrase = variable[3..].join(" ")
            end
            CharSettings["garrote_unreadyPhrase"] = unreadyPhrase
            CharSettings.save
            echo "Unready phrase saved as #{unreadyPhrase}"
            exit
        else
            echo "\n\t Error:\tunready phrase not provided\n\t\tfor directions run ;garrote help"
            exit
        end
    elsif variable[2] and variable[2] =~ /ready/
        if variable[3]
            readyPhrase = variable[3..].join(" ")
            CharSettings["garrote_readyPhrase"] = readyPhrase
            CharSettings.save
            echo "Ready phrase saved as #{readyPhrase}"
            exit
        else
            echo "\n\t Error:\tready phrase not provided\n\t\tfor directions run ;garrote help"
            exit
        end
    elsif variable[2] and variable[2] == "noun"
        if variable[3]
            noun = variable[3]
            CharSettings["garrote_noun"] = noun
            CharSettings.save
            echo "Noun saved as #{noun}"
            exit
        else
            echo "\n\t Error:\tnoun not provided\n\t\tfor directions run ;garrote help"
            exit
        end
    elsif variable[2] =~ /^al/
        CharSettings["garrote_when"] = "always"
        CharSettings.save
        echo "When saved as #{CharSettings["garrote_when"]}"
        exit
    elsif variable[2] =~ /^n/
        CharSettings["garrote_when"] = "never"
        CharSettings.save
        echo "When saved as #{CharSettings["garrote_when"]}"
        exit
    elsif variable[2] =~ /^ref|^k/
        if variable[3].to_i >= 1 and variable[3].to_i <= 120
            CharSettings["garrote_time"] = variable[3].to_i
            CharSettings["garrote_when"] = "refresh"
            CharSettings.save
            echo "When saved as #{CharSettings["garrote_when"]}"
            echo "Time saved as #{CharSettings["garrote_time"]} seconds"
            exit
        else
            echo "\n\t Error:\tmissing time for set refresh\n\t\tfor directions run ;garrote help"
            exit
        end
    elsif not variable[2]
        echo "\n\t Error:\tmissing option for set\n\t\tfor directions run ;garrote help"
        exit
    else
        echo "\n\t Error:\tinvalid option for set\n\t\tfor directions run ;garrote help"
        exit
    end
elsif variable[1] and variable[1] =~ /list|show|settings|pref(erences)?/
    list.call()
    exit
elsif variable[1] =~ /^def(?!e)|^rese|^cl(?!er)/
    CharSettings["garrote_readyPhrase"] = "get my garrote"
    CharSettings["garrote_unreadyPhrase"] = "stow my garrote"
    CharSettings["garrote_stance"] = "offensive"
    CharSettings["garrote_noun"] = "garrote"
    CharSettings["garrote_when"] = "always"
    CharSettings["garrote_time"] = 15
    CharSettings.save
    echo "Defaults set"
    list.call()
    echo "for directions run ;garrote help"
    exit
else #targeting section
    if variable[1]
        target = variable[1]
        if not GameObj.targets.any? {|t| t.name =~ /#{target}/}
            echo "\n\t Error:\tTarget not found\n\t\tfor directions run ;garrote help"
            exit
        else
            put "target #{variable[1]}"
        end
        #look for a new target up to three times
        3.times{
        if (GameObj.npcs["##{XMLData.current_target_id}".to_i] == nil || GameObj.npcs["##{XMLData.current_target_id}".to_i].status =~ /dead/)
            echo "Getting new target since target status is #{GameObj.npcs["##{XMLData.current_target_id}".to_i].status}"
            last = XMLData.current_target_id
            if GameObj.targets.length > 0
                put "target next" 
                wait
            end
            break if last == XMLData.current_target_id
        end
    }
    end
end


##MAIN LOOP

#get time left
enhanced = nil
remaining_time = nil
XMLData.active_spells.each { |spell, time| 
    if spell =~ /Enh\. Agility/ 
        enhanced = true
        #drop_time = Time.strptime(time, "%Y-%m-%d %H:%M:%S")
        drop_time = time
        remaining_time = (drop_time - Time.now).to_i
        echo "There are still #{remaining_time.to_s} seconds of Enhanced Agility remaining" if remaining_time > 15
    else
        enhanced = false
        remaining_time = 0
    end
}

#determine action
if ((not enhanced) or (garrote_when == "always") or ((garrote_when == "refresh") and (garrote_time >= remaining_time)))
    left, right = ready.call()
    garrote.call(stance)
    unready.call(left, right)
    put "stance defensive"
    exit
else
    #TODO make an attack anyway setting to attack if ran while refresh conditions are not met
    #TODO let that attack be aimed
    echo "\n\t Error:\tRefresh is set and remaining time is greater than your refresh time\n\t\tfor directions run ;garrote help"
    exit
end