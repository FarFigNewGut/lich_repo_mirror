# news.lic - Fetches daily events from the TownCrier RSS feed with fixed time range support.
# Version 1.3 - now supports more headlines - Today & Remember!
# Version 1.2- now supports til Sundown events. (what the heck is that anyway?)
# Version 1.1- now captures noon events

require 'open-uri'
require 'rexml/document'

TOWNCRIER_FEED = 'https://gstowncrier.com/feed/'
INFO_LINK = 'https://gstowncrier.com/author/newsby/'

def fetch_rss_feed
  begin
    xml_data = URI.open(TOWNCRIER_FEED).read
    return xml_data
  rescue => e
    respond "Error fetching RSS feed: #{e.message}"
    return nil
  end
end

def extract_today_events(xml_data)
  return ["No events found.", "Unknown Date"] unless xml_data

  begin
    doc = REXML::Document.new(xml_data)
    
    # Find the first <item> entry
    first_item = doc.elements['rss/channel/item']
    return ["No events found.", "Unknown Date"] unless first_item
    
    # Extract the event title
    title = first_item.elements['title'].text
    

    # Extract the date by skipping "What's" and capturing between "Happening Today" and "GemStone IV"
    date_match = title.match(/Happening Today: (.+?) in GemStone IV/)
    display_date = date_match ? date_match[1] : "Unknown Date"

    # Extract the event description
    description = first_item.elements['description'].text

    # Remove HTML tags (<li>, <strong>, <a>, etc.)
    description.gsub!(/<\/?[^>]+>/, '') 

    # Extract lines that start with a time format (including time ranges with 'Midnight' and 'Noon')


events = description.scan(/\b(?:24\/7|Noon|til Sundown|Midnight|\d{1,2}(?::\d{2})?(?:am|pm)?(?:-(?:\d{1,2}(?::\d{2})?(?:am|pm)?|CANCELED|Today|Remember|Midnight|Noon))?): .*/)

    return events.any? ? [events, display_date] : [["No events found."], display_date]
  rescue => e
    return [["Error parsing RSS: #{e.message}"], "Unknown Date"]
  end
end

# Main script execution
respond "Fetching TownCrier events..."
xml_data = fetch_rss_feed
events, display_date = extract_today_events(xml_data)

# Print results in-game
respond "------------------------------------"
respond "Events for: #{display_date}"
respond "------------------------------------"
events.each { |event| respond event.strip }
respond "------------------------------------"
respond "All times are Eastern."
respond "For more information, visit: #{INFO_LINK}"
