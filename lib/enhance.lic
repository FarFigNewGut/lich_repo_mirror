=begin

	wear/remove enhancives

	;enhance help

	 author: Tillmen (tillmen@lichproject.org)
	   game: Gemstone
	version: 0.1

=end

CharSettings['items']            ||= Hash.new
CharSettings['items']['default'] ||= Hash.new
CharSettings['next-num']         ||= 1

put_regex     = /^You put|^You slip|^You tuck|^You carefully add|^You carefully attach|^A sigh of grateful pleasure can be heard as you feed .*? to your|^I could not find what you were referring to\.$|^As you place|^There appears .*? significant value|^Are you crazy\?!\?  Do you know what that's worth!\?!|It's closed!|^Your .*? won't fit in .*?\.$/

container = nil
find_container = proc {
	unless UserVars.enhancesack.nil? or UserVars.enhancesack.empty?
		container = (GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.enhancesack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /#{Regexp.escape(UserVars.enhancesack).sub(' ', ' .*')}$/i })
	end
	if container.nil?
		if UserVars.enhancesack.nil? or UserVars.enhancesack.nil?
			echo "error: Enhancive container is not set.  Use ;enhance container <container name>"
		else
			echo "error: Enhancive container (#{UserVars.enhancesack}) was not found.  Use ;enhance container <container name>"
		end
		exit
	end
}

if script.vars[1].nil?
	find_container.call
	container.contents.each { |o| fput "_drag ##{o.id} wear" if CharSettings['items']['default'].values.include?(o.name) }
elsif script.vars[1] =~ /^(?:#{CharSettings['items'].keys.collect { |g| Regexp.escape(g) }.join('|')})$/i
	find_container.call
	group = script.vars[1]
	if CharSettings['items'][group].nil?
		group = CharSettings['items'].keys.find { |k| script.vars[1].downcase == k.downcase }
	end
	container.contents.each { |o| fput "_drag ##{o.id} wear" if CharSettings['items'][group].values.include?(o.name) }
elsif script.vars[1].downcase == 'off'
	group = (script.vars[2] || 'default')
	if CharSettings['items'][group].nil?
		echo "error: unknown group: #{group}"
		exit
	end
	find_container.call
	GameObj.inv.each { |o| fput("_drag ##{o.id} ##{container.id}") if CharSettings['items'][group].values.include?(o.name) }
elsif script.vars[1].downcase == 'only'
	group = (script.vars[2] || 'default')
	if CharSettings['items'][group].nil?
		echo "error: unknown group: #{group}"
		exit
	end
	find_container.call
	remove_names = Array.new; CharSettings['items'].each_pair { |g,h| h.values.each { |n| remove_names.push(n) unless CharSettings['items'][group].values.include?(n) } if g != group }
	GameObj.inv.each { |o| fput("_drag ##{o.id} ##{container.id}") if remove_names.include?(o.name) }
	container.contents.each { |o| fput "_drag ##{o.id} wear" if CharSettings['items'][group].values.include?(o.name) }
elsif script.vars[1].downcase == 'nothing'
	find_container.call
	GameObj.inv.each { |o| fput("_drag ##{o.id} ##{container.id}") if CharSettings['items'].values.any? { |h| h.values.include?(o.name) } }
elsif script.vars[1].downcase == 'list'
	output = "\n"
	CharSettings['items'].each_pair { |group,items|
		if items.empty?
			output.concat "   #{group}: (empty)\n"
		else
			output.concat "   #{group}:\n"
			items.each { |num,name|
				output.concat "      #{num.to_s.rjust(CharSettings['next-num'].to_s.length)}: #{name}\n"
			}
			output.concat "\n"
		end
	}
	output.concat "\n"
	if UserVars.enhancesack.nil? or UserVars.enhancesack.empty?
		output.concat "   container: (not set)\n"
	else
		output.concat "   container: #{UserVars.enhancesack}\n"
	end
	output.concat "\n"
	respond output
elsif (script.vars[1].downcase == 'container') and script.vars[2]
	name = script.vars[2..-1].join(' ')
	obj_list = GameObj.inv.find_all { |obj| obj.noun == name }
	if obj_list.empty?
		obj_list = GameObj.inv.find_all { |obj| obj.name == name }
	end
	if obj_list.empty?
		obj_list = GameObj.inv.find_all { |obj| obj.name =~ /\b#{Regexp.escape(name)}$/i }
	end
	if obj_list.empty?
		obj_list = GameObj.inv.find_all { |obj| obj.name =~ /\b#{name.split(' ').collect { |n| Regexp.escape(n) }.join(".*\\b")}/i }
	end
	if obj_list.empty?
		echo "error: failed to find a container in your inventory by the name of \"#{name}\""
	elsif obj_list.length > 1
		echo "error: multiple containers in your inventory match the name \"#{name}\""
	else
		UserVars.enhancesack = name
		echo "enhancive container set to #{name}"
	end
elsif (script.vars[1].downcase == 'add')
	find_container.call
	item_id = GameObj.right_hand.id
	if item_id.nil?
		echo "put the item you want to add in your right hand and try again"
		exit
	end
	result = dothistimeout "_drag ##{item_id} ##{container.id}", 10, put_regex
	if result =~ /It's closed!/
		result = dothistimeout "open ##{container.id}", 10, /^You open|^That is already open/
		result = dothistimeout "_drag ##{item_id} ##{container.id}", 10, put_regex
	end
	item = container.contents.find { |o| o.id == item_id }
	if item.nil?
		echo 'fixme 1'
		exit
	end
	group = (script.vars[2] || 'default')
	unless CharSettings['items'][group]
		echo "creating new group: #{group}"
		CharSettings['items'][group] = Hash.new
	end
	CharSettings['items'][group][CharSettings['next-num']] = item.name
	CharSettings['next-num'] += 1
	echo "#{item.name} was added to the #{group} group"
elsif (script.vars[1].downcase == 'delete') and script.vars[2]
	if script.vars[2] =~ /^[0-9]+$/
		item_num = script.vars[2].to_i
		item_name = nil
		item_group = nil
		CharSettings['items'].each_pair { |g,i|
			if i[item_num]
				item_name = i[item_num]
				item_group = g
				break
			end
		}
		if item_group
			CharSettings['items'][item_group].delete(item_num)
			echo "#{item_name} was deleted from #{item_group}"
		else
			echo "could not find item number #{item_num} in any group"
		end
	else
		if CharSettings['items'][script.vars[2]]
			CharSettings['items'].delete(script.vars[2])
			echo "group #{script.vars[2]} was deleted"
		else
			echo "could not find group #{script.vars[2]}"
		end
	end
else
	output = "\n"
	output.concat "commands:\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name}                wear enhancives in the default group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} only           wear enhancives in the default group and remove any\n"
	output.concat " #{''.rjust(script.name.length + 3)}                known enhancives that are not in the default group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} off            remove enhancives in the default group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} <group>        wear enhancives in the named group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} only <group>   wear enhancives in the named group and remove any\n"
	output.concat " #{''.rjust(script.name.length + 3)}                known enhancives that are not in the named group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} off <group>    remove enchancives in the named group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} nothing        remove all known enhancives\n"
	output.concat "\n"
	output.concat "settings:\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} list               shows known enhancives and groups\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} container <name>   set the container where enhancives are kept\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} add                add the item in your right hand to the default group\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} add <group>        add the item in your right hand to the named group \n"
	output.concat " #{''.rjust(script.name.length + 3)}                    (creates the group if needed)\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} delete <number>    delete an item from a group \n"
	output.concat " #{''.rjust(script.name.length + 3)}                    (use ;enhance list to find the number)\n"
	output.concat "\n"
	output.concat "   #{$clean_lich_char}#{script.name} delete <group>     delete an entire group\n"
	output.concat "\n"
	respond output
end
