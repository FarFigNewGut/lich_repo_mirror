=begin
;CatchemInTheAct is a script to add preset highlights to any observed ACTs from other players

Optional parameter to override default preset of bold, can be one of bold, thought, whisper, speech, or link

   original author: Kaetel
        maintainer: Kaetel
              game: gs
              tags: text,formatting
           version: 2.0.0

  v2.0.0 (2025-09-23)
    - Updated CLI params to use --preset=<preset> and --no-parentheses
    - Added option to remove parentheses around ACT text
  v1.0.0 (2025-02-10)
    - Initial release

=end

module CatchemInTheAct
  HOOK_NAME = Script.current.name + '::hook'
  
  PRESET_BOLD = 'bold'
  PRESET_THOUGHT = 'thought'
  PRESET_WHISPER = 'whisper'
  PRESET_SPEECH = 'speech'
  PRESET_LINK = 'link'
  PRESET_NONE = 'none'
  ALL_PRESETS = [PRESET_BOLD, PRESET_THOUGHT, PRESET_WHISPER, PRESET_SPEECH, PRESET_LINK, PRESET_NONE]

  HELP_TXT = <<~HELP
  Usage: CatchemInTheAct [options]  
  Options:
    --help, -h          Show this help message      
    --preset=<preset>   One of #{ALL_PRESETS.join(', ')} (default: bold)
    --no-parentheses    Remove parentheses around ACT text
    
  HELP

  ACT_RX = /^\(<a exist=".+" noun=".+">.+<\/a>(.+)\)/

  @options = {
    :preset => PRESET_BOLD,
    :keepParentheses => true
  }

  def self.init(opts)
    parseOpts(opts)

    Lich::Messaging.msg('info', "Capturing ACTs with preset '#{@options[:preset]}', #{@options[:keepParentheses] ? 'keeping' : 'removing'} parentheses")
  end

  def self.parseOpts(opts = [])
    opts.each(&->(opt) {
      case opt
      when '--help', '-h'
        Lich::Messaging.mono(HELP_TXT, encode: true)
        exit()
      when %r[--preset=(.+)]
        preset = $1.downcase
        unless (ALL_PRESETS.include?(preset.downcase))
          raise "Unknown preset option '#{preset}'"
        end
        @options[:preset] = preset
      when Regexp.union(ALL_PRESETS.map(&->(v) { /^#{v}$/i })) # Legacy support for single word options
        @options[:preset] = opt.downcase
      when '--no-parentheses'
        @options[:keepParentheses] = false
      else
        raise "Unknown option '#{opt}'"
      end
    });
  end

  def self.findAct(line)
    if (line =~ ACT_RX)
      act = $1
      unless (@options[:preset].eql?(PRESET_NONE))
        line.gsub!(act, Lich::Messaging.msg_format(@options[:preset], act))
      end

      unless (@options[:keepParentheses])
        line.gsub!(/[()]/, '')
      end
    end

    line
  end

  before_dying {DownstreamHook.remove(HOOK_NAME)}

  Script.current.want_downstream_xml = true
  DownstreamHook.add(HOOK_NAME, ->(server_string) {
    server_string = findAct(server_string)
  })

  init(Script.current.vars[1..-1])

  loop do; sleep(1); end
end