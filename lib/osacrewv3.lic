=begin
This is a companion to osacommander. It is ran on your crew members to complete simple tasks on the ship including combat.
There are no commands to run the script. But setup does require a few variables to be set.
Enjoy

~Peggyanne and Zreat
PS: feel free to send me any bugs via discord Bait#4376 or onoipor#5688 and We Will try our best to fix them.
7/22/2021 Initial Release, Supports All Ship Types

    SYNTAX - Select <ATTACKOPTION> from GUI
    Will remember last used attack option if none given.
	
    ATTACKOPTION Selections Include:
     <SPELLNUMBER> - use a spell to cast once per wave/boss IE. 908 Major Fire
     SLEEP         - symbol of voln sleep
	 ATTACK	       - single-target attack
	 FIRE	       - single-target ranged attack
     MSTRIKE       - mstrike attack (works for ranged if you set FIRE as default)
     UAC           - mstrike punch and punch boss for all your UAC needs
     JAB	       - single-target jab
	 PUNCH	       - single-target punch
	 GRAPPLE       - single-target grapple
	 KICK	       - single-target kick
	 SCRUB         - combination mstrike and 435 cast routine
	 BARDCAST       - combination mstrike and 1030 cast routine
	 DREDD         - combination mstrike and 1630 cast routine
     NONE          - won't attack, useful if manually wish to attack
	 
	Stance-dance back from offensive back to defensive after an attack, default is TRUE

=end
VERSION = '2.1.0'
$TITLE = "OSACrew: v. (#{VERSION})"
$osacrewv2 = self
@once = "False"

		  $get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }


  def set_value(key, clean, default)
    if (!UserVars.osacrew[key].nil? && UserVars.oosacrew[key] !~ /^\s*$/)
      cleaned = clean_value(clean, UserVars.oosacrew[key])
      instance_variable_set("@#{key.upcase}", cleaned)
    else
      instance_variable_set("@#{key.upcase}", default)
    end
  end
  
  def self.profile(vars)
      if vars[5] =~ /load/i
      if vars[4] != nil
        dir = "#{$lich_dir}scripts/osacrew_profiles"
        filename = "#{dir}/#{vars[3]}.yaml"
        if !File.exists?("#{filename}")
          echo "Trying to load a profile that does not exist."
        else
          from_file = YAML.load_file(filename)
          UserVars.osacrew = from_file
          echo "Settings loaded from profile: #0{filename}."
        end
      else
        echo "You forgot to name your profile you wish to load."
        echo "Syntax: ;osacrew profile load <NAME Here, no Spaces!>"
      end
    elsif vars[3] =~ /save/i
      if vars[4] != nil
        Dir.mkdir("#{$lich_dir}scripts/osacrew_profiles") unless File.exists?("#{$lich_dir}scripts/osacrew_profiles")
        dir = "#{$lich_dir}scripts/osacrew_profiles"
        filename = "#{dir}/#{vars[4]}.yaml"
        if File.exists?("#{filename}")
          echo "File already exists, if you wish to overwrite, please ;unpause bigshot."
          echo "Else ;kill bigshot and choose another filename."
          pause_script
        end
        File.write(filename, UserVars.osacrew.to_yaml)
        echo "Settings saved to profile: #{filename}."
      else
        echo "You forgot to name your profile you wish to save."
        echo "Syntax: ;osacrew profile save <NAME Here, no Spaces!>"
      end
    end
  end
	  
def self.setup
    Gtk.queue do
      @get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  @OC_WINDOW = Gtk::Window.new
      @OC_WINDOW.title = $TITLE
      @OC_WINDOW.set_icon(@default_icon)
      @OC_WINDOW.set_border_width(10)
      @OC_WINDOW.keep_above = true
	  
	  grey = Gdk::RGBA::parse("#d3d3d3") if Gtk.check_version(3,0,0).nil?
      @OC_WINDOW.override_background_color(:normal, grey) if Gtk.check_version(3,0,0).nil?

      @OC_BOX = @get_vBox.call
      @OC_BOX.set_border_width(5)
      @OC_WINDOW.add(@OC_BOX)

      @OC_NOTEBOOK = Gtk::Notebook.new
      @OC_NOTEBOOK.set_show_border(true)
	  @OC_NOTEBOOK.override_background_color(:normal, grey) if Gtk.check_version(3,0,0).nil?
      @OC_BOX.add(@OC_NOTEBOOK)
      @OC_ENTRY = Hash.new # For mapping entries to variables
      @OC_TABLE_SIZE = Hash.new # For mapping table sizes

  end


  # # Gtk.queue {
    # # @OC_TABLE1 = Gtk::Table.new(10, 5, false)
    # # @OC_TABLE1.row_spacings=3
    # # @OC_TABLE1.column_spacings=3
    # # @OC_VERTICAL_BOX1.pack_start(@OC_TABLE1, :expand => false, :fill => false, :padding => 0)

  # }
  
	Gtk.queue do
      tab_names = %w[
        General
		Bless
		Combat
		Undead
      ]
	  
     tab_names.each.with_index(1) do |name, val|
        new_table = Gtk::Table.new(6, 3, false).tap do |table|
          table.row_spacings = 3
          table.column_spacings = 3
        end

        new_box = if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end

        if Gtk.check_version(3,0,0).nil?
          new_box.pack_start(new_table, expand: false, fill: false, padding: 0)
        else
          new_box.pack_start(new_table, false, false, 0)
        end

        @OC_NOTEBOOK.append_page(new_box, Gtk::Label.new(name))

        instance_variable_set("@OC_TABLE#{val}", new_table)
        instance_variable_set("@OC_VERTICAL_BOX#{val}", new_box)
      end
end


def self.add_label_entry(table, label, variable)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 1, 0, 0, 0
    align.set_padding(4, 0, 3, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacrew[variable].to_s
    entry.set_width_request(157)
    table.attach(entry, 1, 2, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1
  end

    def self.add_dropdown(table, dropdown, variable, options)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacrew[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacrew[variable].to_s != "Fixnum" && UserVars.osacrew[variable].to_s != "Integer"
          UserVars.osacrew[variable]
        end
        dropdown.set_active(UserVars.osacrew[variable])
      end
      align = Gtk::Alignment.new 1, 0, 0, 0
      align2 = Gtk::Alignment.new 1, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 0, 1, size, size + 1)
      table.attach(align2, 1, 2, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1
    end

      def self.add_text_area(vbox, label, variable)
      # Grab value for a manual check since we can't rely on a version of Ruby with safe operators
      current_value = UserVars.osacrew[variable]

      entry = Gtk::TextView.new
      entry.buffer.text = current_value ? current_value.gsub("||","\n") : ""

      swin = Gtk::ScrolledWindow.new
      swin.border_width = 5
      swin.add(entry)
      swin.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

      frame = Gtk::Frame.new(label)
      frame.add(swin)

      vbox.pack_start_defaults(frame)

      @OC_ENTRY[variable] = entry
    end
	
  Gtk.queue do
    @OC_ENTRY = Hash.new
    add_label_entry(@OC_TABLE1, "Commander:", 'commander')
	add_label_entry(@OC_TABLE1, "Crew Channel:", 'crew') 
	add_label_entry(@OC_TABLE1, "Loot Script:", 'lootscript')	
    add_label_entry(@OC_TABLE1, "Society Script:", 'societyscript')
	add_label_entry(@OC_TABLE1, "Spell up Script:", 'spellupscript')
	add_label_entry(@OC_TABLE2, "Weapon Bless Caster:", 'blesser')
    add_label_entry(@OC_TABLE2, "Bless Weapon:", 'blessweapon')
    add_label_entry(@OC_TABLE2, "Bless Weapon Sheath:", 'blessweaponsheath')
	add_label_entry(@OC_TABLE2, "Paladin Infuse Spell:", 'infusespell')
    add_label_entry(@OC_TABLE3, "Attack Script:", 'attackscript')
    add_dropdown(@OC_TABLE3, "Attack Options:", 'attacktype', 'None,UAC Brawling,UAC Brawling - Stealth,Melee 1H 2H,Melee 1H 2H Stealth,Bow + Arrow,Bow + Arrow Stealth,Crossbow + Bolt,Crossbow + Bolt Stealth,Magic Bolt Spell Casters,Warding Magic Users,Archer Hybrid Users Spell Openers,Meelee Hybrid Users Spell Openers,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008')
	add_dropdown(@OC_TABLE3, "Attack Openers:", 'attackopen', 'None,Shield Strike,Weapon Flurry,OHE Cripple,Shield Charge,Voln Sleep')
	add_dropdown(@OC_TABLE3,  "AOE Attack:", 'aoe','None,Whirlwind 2 hander attack,Cyclone Polearms,Pulverizer OHB,Whirling Blade 1HE,Volley Ranged,Clash Brawling,Shield Throw')
	add_label_entry(@OC_TABLE3, "Spell Openers:", 'spellopen')
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype')
	add_label_entry(@OC_TABLE4, "Undead Attack Script:", 'undeadattackscript')
	add_dropdown(@OC_TABLE4, "Attack Options:", 'undeadattacktype', 'None,UAC Brawling,UAC Brawling - Stealth,Melee 1H 2H,Melee 1H 2H Stealth,Bow + Arrow,Bow + Arrow Stealth,Crossbow + Bolt,Crossbow + Bolt Stealth,Magic Bolt Spell Casters,Warding Magic Users,Archer Hybrid Users Spell Openers,Meelee Hybrid Users Spell Openers,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008')
	add_dropdown(@OC_TABLE4, "Attack Openers:", 'undeadattackopen', 'None,Shield Strike,Weapon Flurry,OHE Cripple,Shield Charge,Voln Sleep')
	add_dropdown(@OC_TABLE4,  "AOE Attack:", 'undeadaoe','None,Whirlwind 2 hander attack,Cyclone Polearms,Pulverizer OHB,Whirling Blade 1HE,Volley Ranged,Clash Brawling,Shield Throw')
	add_label_entry(@OC_TABLE4, "Undead Spell Openers:", 'undeadspellopen')
	add_label_entry(@OC_TABLE4, "Undead Attack Spell:", 'undeadspelltype')
end
  
    def self.add_checkbox(table, x_pos, label, variable, default = false)
      size = @OC_TABLE_SIZE[table] || 0
      checkbox = Gtk::CheckButton.new label
      value = UserVars.osacrew[variable] || default
      checkbox.active = value
      table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
      @OC_ENTRY[variable] = checkbox
      @OC_TABLE_SIZE[table] += 1 if x_pos == 1
    end
	
  Gtk.queue do
  # Commander
	
    add_checkbox(@OC_TABLE1, 1,  "Crew Tasks", 'osacrewtasks')
    add_checkbox(@OC_TABLE2, 0,  "Need Bless", 'needbless')
	add_checkbox(@OC_TABLE2, 1,  "Bless Caster", 'givebless')
	add_checkbox(@OC_TABLE3, 0,  "Combat", 'osacombat')
	add_checkbox(@OC_TABLE3, 1,  "Evoke Attack", 'spellevoke')
	add_checkbox(@OC_TABLE3, 1,  "Channel Attack", 'spellchan')
	add_checkbox(@OC_TABLE4, 1,  "Evoke Undead Attack", 'undeadspellevoke')
	add_checkbox(@OC_TABLE4, 1,  "Channel Undead Attack", 'undeadspellchan')
  end
  Gtk.queue do
    @OC_WINDOW.signal_connect("delete_event") {
      @OC_SETUP_COMPLETED = true
    }
  end

  Gtk.queue do 
#   @OC_TOOLTIPS = Gtk::Tooltips.new
#   @OC_TOOLTIPS.enable

    size = @OC_TABLE_SIZE[@OC_TABLE1]
    label = Gtk::Label.new
    label.set_markup("Commander and Crew are case sensitive, If Crew is left unchecked you will be considered a passenger and skip crew tasks")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(5, 0, 0, 25)
    align.add(label)
    @OC_TABLE1.attach(align, 1, 2, size, size + 1)
	
	attack_tip = "ATTACKOPTION\nUAC Brawling\nUAC Brawling - Stealth\nMelee (1H, 2H, Shield)\nMelee (1H, 2H, Shield) Stealth\nBow + Arrow\nBow + Arrow Stealth\nCrossbow + Bolt\nCrossbow + Bolt Stealth\nBolt Spell Casters\nWarding Magic Users\nArcher Hybrid Users Spell Openers\nMeelee Hybrid Users Spell Openers\nBard Support - 1035- 1002\nBard Caster 1030 AOE 1008 Single Target"
    @OC_ENTRY['attacktype'].set_tooltip_text(attack_tip)
	aoeatt_tip = "Meelee AOE attack Options Select Number\nWhirlwind 2 hander attack\nCyclone Polearms\nPulverizer OHB\nWhirling Blade 1HE\nVolley Ranged\nClash Brawling\nShield Throw"
	@OC_ENTRY['aoe'].set_tooltip_text(aoeatt_tip)
	spell_tip = "Please input spell number to cast by default for Attack"
    @OC_ENTRY['spelltype'].set_tooltip_text(spell_tip)
	a_open = "Attack Openers Option\n 0 - None\nShield Strike\nWeapon Flurry\nOHE Cripple\nShield Charge\nVoln Sleep 2 targets or more"
	@OC_ENTRY['attackopen'].set_tooltip_text(a_open)
	s_open = "Spell Openers.  Input Spell Number to Disable or weaken enemies  ex: 709 to do Grasp of the Grave"
	@OC_ENTRY['spellopen'].set_tooltip_text(s_open)
	
	size = @OC_TABLE_SIZE[@OC_TABLE2]
	label = Gtk::Label.new
    label.set_markup("Check Need Bless for auto blessing, Ensure weapon can be blessed that is marked for bless")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(5, 0, 0, 25)
    align.add(label)
    @OC_TABLE2.attach(align, 1, 2, size, size + 1)

    size = @OC_TABLE_SIZE[@OC_TABLE3]
	label = Gtk::Label.new
    label.set_markup("Use your own Scripts or Choose from our Attack Options")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(5, 0, 0, 25)
    align.add(label)
    @OC_TABLE3.attach(align, 1, 2, size, size + 1)
	
	    size = @OC_TABLE_SIZE[@OC_TABLE4]
	label = Gtk::Label.new
    label.set_markup("Use your own Scripts or Choose from our Attack Options")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(5, 0, 0, 25)
    align.add(label)
    @OC_TABLE4.attach(align, 1, 2, size, size + 1)
	
    @OC_WINDOW.show_all
  end

  @OC_SETUP_COMPLETED = false
  until(@OC_SETUP_COMPLETED)
    sleep(0.5)
  end

    UserVars.osacrew ||= Hash.new
    @OC_ENTRY.keys.each do |key|
      echo "#{key} - #{@OC_ENTRY[key].to_s}" if $osacrew_debug
      if @OC_ENTRY[key].to_s =~ /CheckButton/
        value = @OC_ENTRY[key].active?
        UserVars.osacrew[key] = @OC_ENTRY[key].active?
      elsif @OC_ENTRY[key].to_s =~ /ComboBox/
        UserVars.osacrew[key] = @OC_ENTRY[key].active
      elsif @OC_ENTRY[key].to_s =~ /TextView/
        # Store these with double pipes so we don't mess up any supplied expressions
        UserVars.osacrew[key] = @OC_ENTRY[key].buffer.text.gsub("\n","||")
      else
        if key == 'wounded_eval'
          UserVars.osacrew[key] = @OC_ENTRY[key].text
        else
          UserVars.osacrew[key] = @OC_ENTRY[key].text.strip
        end
      end
    end
    UserVars.save

  Gtk.queue do
    @OC_WINDOW.destroy
 end
end


if script.vars[1] =~ /call/
(eval script.vars[2]).call

elsif (script.vars[1] =~ /setup/i)
  self.setup()
  exit
elsif script.vars[1].downcase == 'help'
respond ""
respond "   'Usage:' "
respond ""
respond "   #{$clean_lich_char}#{script.name} setup                       show setup window"
respond "   #{$clean_lich_char}#{script.name} help                        More functional info to be added"
respond "   #{$clean_lich_char}#{script.name} list                        Will show current settings Not currently setup"  
respond "   This is a companion to osacommander. It is ran on your crew members to complete simple tasks on the ship including combat. "
respond "   There are no commands to run the script. But setup does require a few variables to be set. "
respond "   Enjoy "
respond ""
respond "   ~Peggyanne "
respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
respond " 7/22/2021 Initial Release, Supports All Ship Types "
	exit
elsif script.vars[1] == '?'
respond ""
respond "   'Usage:' "
respond ""
respond "   #{$clean_lich_char}#{script.name} setup                       show setup window"
respond "   #{$clean_lich_char}#{script.name} help                        More functional info to be added"
respond "   #{$clean_lich_char}#{script.name} list                        Will show current settings Not currently setup"  
respond "   This is a companion to osacommander. It is ran on your crew members to complete simple tasks on the ship including combat. "
respond "   There are no commands to run the script. But setup does require a few variables to be set. "
respond "   Enjoy "
respond ""
respond "   ~Peggyanne "
respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
respond " 7/22/2021 Initial Release, Supports All Ship Types "
	exit
elsif script.vars[1] =~ /(.*)/
  message("Usage is:
;osacrew setup
;osacrew help
;osacrew ?")
  exit
end


no_file = proc{
respond "

In order to run OSACrew you need #{@needfile}
=================================================
Do you wish to download it now?
    1\. Yes
    2\. No
=================================================
Please Select an Option - 
      ;send <#> "
respond
clear
line = nil
line = get until line.strip =~ /^[0-9]+$/
answer = line
if answer == "1"
	respond "
	Excellent, Downloading Now!
	"
	start_script 'repository', [ 'download', "#{@needfile}" ]
	wait_until { !running?('repository') }
	respond "
	Download Complete, Moving On...
	"
elsif answer == "2"
	echo "Very Well, Please Restart OSACrew When You Have It."
	exit
	end
}

# if variable[1] =~ /help/
	# echo "
	
# This is a companion to osacommander. It is ran on your crew members to complete simple tasks on the ship including combat.
# There are no commands to run the script. But setup does require a few variables to be set.
# Enjoy

# ~Peggyanne
# PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them.
# 7/22/2021 Initial Release, Supports All Ship Types"
# exit
# end
@needfile = nil
if !Script.exists?('damagecontrol')
	@needfile = "DamageControl"
	no_file.call
end
if !Script.exists?('OSASails')
	@needfile = "OSASails"
	no_file.call
end

whereami = proc{
	if checkroom.include?	("Bow")
		move "west"
		whereami.call
	elsif checkroom.include?	("Forward Deck")
		move "west"
		whereami.call
	elsif checkroom.include?	("Crow's Nest")
		move "down"
		whereami.call
	elsif checkroom.include?	("Enemy Ship, Quarters")
		move "out"
		pause 0.5
		move "east"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Helm")
		move "east"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Main Deck")
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Mid Deck")
		move "west"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?	("Enemy Ship, Cargo Hold")
		move "up"
		pause 0.5
		move "go gangplank"
	elsif checkroom.include?("Main Deck")
		next
	elsif checkroom.include?("Cargo Hold")
		move "up"
	elsif checkroom.include?("Helm")
		move "east"
	elsif checkroom.include?("Captain's Quarters")
		move "out"
		pause 0.5
		move "east"
	elsif checkroom.include?("Mess Hall")
		move "west"
		pause 0.5
		move "up"
	elsif checkroom.include?("Crew Quarters")
		move "east"
		pause 0.5
		move "up"
	elsif checkroom.include?("Mid Deck")
		move "west"
	elsif checkroom.include?("Social Room")
		move "west"
		pause 0.5
		move "west"
		pause 0.5
		move "up"
	end
}

prebless = proc{
result = dothistimeout "turn my quiver", 1, /a bundle of fireleaf arrows|a bundle of glowbark arrows|a bundle of wyrwood arrows|a bundle of faewood arrows/
if result =~ /a bundle of faewood arrows/
	next
else
	prebless.call
end
}

givebless = proc{
	fput "say #{@blessname[0]}"
	waitfor /Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds./
	fput "accept"
	if Spell[119].known? and Spell[119].affordable?
	Spell[119].cast("#{checkright}")
	end
	waitcastrt?
	if Spell[1604].known? and Spell[1604].affordable?
	Spell[1604].cast("#{checkright}")
	end
	waitcastrt?
	if Spell[302].known? and Spell[302].affordable?
	Spell[302].cast("#{checkright}")
	else
	Spell[9802].cast("#{checkright}")
	end
	fput "give my #{checkright} to #{@blessname[0]}"
	waitfor /#{@blessname[0]} has accepted your offer and is now holding a/
	@blessname.shift
	if @blessname.count != 0
		givebless.call
	end
}


whoneedsblessed = proc{
result = matchtimeout 1, /^\[Private]-GSIV:(.*)\: \"I Need Blessed Please!\"$/
	if result =~ /^\[Private]-GSIV:(.*)\: \"I Need Blessed Please!\"$/
		@blessname.push($1)
		whoneedsblessed.call
	end
}

getbless = proc{
	if UserVars.osacrew["needbless"]
		do_client ";chat to #{UserVars.osacrew["blesser"]} I Need Blessed Please!"
		waitfor /#{UserVars.osacrew["blesser"]} says, "#{checkname}."/
		if checkname == "Bait"
			prebless.call
		end
		multifput "get #{UserVars.osacrew["blessweapon"]} from my #{UserVars.osacrew["blessweaponsheath"]}", "give #{UserVars.osacrew["blessweapon"]} to #{UserVars.osacrew["blesser"]}"
		waitfor /Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds./
		multifput "accept", "put my #{UserVars.osacrew["blessweapon"]} in my #{UserVars.osacrew["blessweaponsheath"]}"
	end
}

spellup = proc{
	if Stats.prof == "Empath"
		if running? "cure"
			stop_script "cure"
		end
		wait_while { running?("cure") }
		Script.run("cure","room")
		wait_while { running?("cure") }
	end
	if !UserVars.osacrew["spellupscript"].empty?
		start_script "#{UserVars.osacrew["spellupscript"]}"
		wait_while { running?("#{UserVars.osacrew["spellupscript"]}") }
	end
	do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
	if !running? 'sharetest'
		start_script 'sharetest'
	end
}

damagecontrol = proc{
if UserVars.osacrew["osacrewtasks"]
		do_client "store both"
		pause 1
		start_script 'damagecontrol'
		wait_while { running?("damagecontrol") }
else
	whereami.call
end
}

give_coins = proc{
	wealth_line = dothistimeout "wealth quiet", 1, /coins? with you.$/
	@coins = wealth_line.match(/([0-9,]+)/)[1].sub(/[^0-9]/, '').to_i
	if  @coins == 0
	respond "Your Pockets Are Empty!"
	else
	fput "give #{UserVars.osacrew["commander"]} #{@coins} coins"
	end
}

gemcount = proc{
fput "open my pouch"
pause 0.5 
fput "look in my pouch"
while line = get
case line
when /Gems \[(.*)\]/
@gems = $1
fput "close my pouch"
do_client ";chat to #{UserVars.osacrew["commander"]} #{@gems} total gems."
break
next
when /There is nothing in the pouch/
fput "close my pouch"
do_client ";chat to #{UserVars.osacrew["commander"]} 0 total gems."
break
next
end
end
}

statuscheck = proc{
	do_client ";chat on #{UserVars.osacrew["crew"]} Health: #{health}/#{maxhealth}     Mana: #{mana}/#{maxmana}     Stamina: #{stamina}/#{maxstamina}     Spirit: #{spirit}/#{maxspirit}"
	next
}

expcheck = proc{
	do_client ";chat on #{UserVars.osacrew["crew"]} Exp Till Level #{Stats.level.to_i + 1} Is: #{XMLData.next_level_text.to_i}"
}

checkexp = proc{
result = dothistimeout "osa task", 1, /You do not currently have a task from the Sea Hag's Roost|You should return to the Sea Hag's Roost to report your success|Abandons your current task/
    if result =~ /You do not currently have a task from the Sea Hag's Roost/
		fput "take board"
		pause 0.5
		do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
	elsif result =~ /You should return to the Sea Hag's Roost to report your success/
		if saturated?
			wait_until {!saturated?}
				end
		fput "turn board"
		pause 0.5
		fput "take board"
		pause 0.5
		do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
	elsif result =~ /Abandons your current task/
		do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
	else
		do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
    end
}

cureall = proc{
	if running? "cure"
		stop_script "cure"
		end
	if running? "#{UserVars.osacrew["attackscript"]}"
		pause_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "#{UserVars.osacrew["attackscript"]}"
		pause_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "bravery"
		pause_script "bravery"
	end
	waitrt?
	waitcastrt?
	start_script("cure", ['group'])
	wait_while { running?("cure}") }
	if running? "#{UserVars.osacrew["attackscript"]}"
		unpause_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "#{UserVars.osacrew["undeadattackscript"]}"
		unpause_script "#{UserVars.osacrew["undeadattackscript"]}"
	end
	if running? "bravery"
		unpause_script "bravery"
	end	
}


dumpgems = proc{
	waitfor /#{UserVars.osacrew["commander"]} says, "#{checkname}."/
	pause 0.5
	fput "remove my pouch"
	pause 0.5
	fput "open my pouch"
	pause 0.5
	fput "give pouch to #{UserVars.osacrew["commander"]}"
	waitfor /#{UserVars.osacrew["commander"]} offers you/
	fput "accept"
	pause 0.5
	fput "close my pouch"
	pause 0.5
	fput "wear my pouch"
}

while line = get
case line
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["blesser"]}\: \"Does Anyone (Need|Else Need) A Bless\?\"$/
	if UserVars.osacrew["needbless"]
	getbless.call
	end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Ok Lets Do This!\"$/
if UserVars.osacrew["osacombat"] == true
	if running? "#{UserVars.osacrew["undeadattackscript"]}"
		stop_script "#{UserVars.osacrew["undeadattackscript"]}"
	end
	if !running? "#{UserVars.osacrew["attackscript"]}"
		start_script "#{UserVars.osacrew["attackscript"]}"
	end
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Turn To!\"$/
if UserVars.osacrew["osacombat"] == true
	if running? "#{UserVars.osacrew["attackscript"]}"
		stop_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "#{UserVars.osacrew["undeadattackscript"]}"
		stop_script "#{UserVars.osacrew["undeadattackscript"]}"
	end
end
	fput "leave"
	pause 0.5
	fput "group open"
	damagecontrol.call
	wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
	do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Silvers\"$/
give_coins.call
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Stop\"$/
if UserVars.osacrew["osacrewcombat"] == true
	if running? "#{UserVars.osacrew["attackscript"]}"
	stop_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "#{UserVars.osacrew["undeadattackscript"]}"
	stop_script "#{UserVars.osacrew["undeadattackscript"]}"
	end
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Gems\"$/
if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne")
gemcount.call
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"All Hands Make Ready To Get Underway!\"$/
if UserVars.osacrew["osacrewtasks"] == true
	fput "leave"
	pause 0.5
	fput "group open"
	start_script 'osasails'
	wait_while { running?("osasails") }
	move "go door"
	wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
	do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
else
	echo "You Are Not Currently In A Crew Role, Please Standby To Standby!"
	pause 5
	wait_until {checkpcs.include? "#{UserVars.osacrew["commander"]}"}
	do_client ";chat to #{UserVars.osacrew["commander"]} Task Complete"
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Exit\"$/
fput "exit"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Status\"$/
statuscheck.call
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Spells\"$/
spellup.call
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Exp\"$/
expcheck.call
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Task Time!\"$/
checkexp.call
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Deposit\"$/
fput "depo all"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Sheath\"$/
do_client "sheath"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Reset\"$/
do_client ";e stop_script 'osacrew';wait_while { running?('osacrew') };start_script 'osacrew'"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Change Of Command: (.*)\"$/
@commandchange = $1
do_client ";vars set commander = #{@commandchange}"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Crew Swap: (.*)\"$/
@crewchange = $1
do_client ";lnet untune #{UserVars.osacrew["crew"]}"
pause 0.5
do_client ";vars set crew = #{@crewchange}"
pause 0.5
do_client ";lnet tune #{UserVars.osacrew["crew"]}"
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}: "Undead Mode!\"$/
      if UserVars.osacrew["osacombat"] == true
if running? "#{UserVars.osacrew["attackscript"]}"
stop_script "#{UserVars.osacrew["attackscript"]}"
end
if !running? "#{UserVars.osacrew["undeadattackscript"]}"
start_script "#{UserVars.osacrew["undeadattackscript"]}"
end
    else
        echo "You Are Not Currently In A Combatant Role, Ready Thyself For Combat!"
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Pause\"$/
if UserVars.osacrew["osacrewcombat"] == true
	if running? "#{UserVars.osacrew["attackscript"]}"
	pause_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "#{UserVars.osacrew["undeadattackscript"]}"
	pause_script "#{UserVars.osacrew["undeadattackscript"]}"
	end
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Unpause\"$/
if UserVars.osacrew["osacrewcombat"] == true
	if running? "#{UserVars.osacrew["attackscript"]}"
	unpause_script "#{UserVars.osacrew["attackscript"]}"
	end
	if running? "#{UserVars.osacrew["undeadattackscript"]}"
	unpause_script "#{UserVars.osacrew["undeadattackscript"]}"
	end
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Dumpem!\"$/
if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne")
	dumpgems.call
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:(.*)\: \"I Am Injured!\"$/
	if Stats.prof == "Empath"
		cureall.call
	end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Make Repairs!\"$/
if UserVars.osacrew["osacrewtasks"]
	damagecontrol.call
else
	echo "You Are Not Currently In A Crew Role, Please Standby To Standby!"
end
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Can Anyone Bless\?\"$/
	if UserVars.osacrew["givebless"]
		do_client ";chat to #{UserVars.osacrew["commander"]} I Can Captain!"
		result = matchtimeout 3, /#{UserVars.osacrew["commander"]} asks, "#{checkname}, Will You Please Bless The Crew\?"/
			if result =~ /#{UserVars.osacrew["commander"]} asks, "#{checkname}, Will You Please Bless The Crew\?"/
				fput "say Of Course Captain!"
				@blessname = Array.new
				do_client ";chat on #{UserVars.osacrew["crew"]} Does Anyone Need A Bless?"
				whoneedsblessed.call
				givebless.call
				fput "say The Crew Has Been Properly Blessed Captain!"
				next
			else
				next
			end
	else
		next
	end
when /#{UserVars.osacrew["commander"]} asks, "(.*), Will You Please Bless The Crew\?/
	UserVars.osacrew["blesser"] = $1
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"I Will Be Providing All Crew Blessings!\"$/
	UserVars.osacrew["blesser"] = UserVars.osacrew["commander"]
when /^\[#{UserVars.osacrew["crew"]}]-GSIV:#{UserVars.osacrew["commander"]}\: \"Quarters! All Hands To Quarters For Muster, Instruction and Inspection!\"$/
		do_client ";chat to #{UserVars.osacrew["commander"]} Crewman #{checkname} Reporting For Duty Captain!"
when /Attention To Quarters!/
	fput "snap attention"
	waitfor /Post!/
	fput "salute #{UserVars.osacrew["commander"]}"
	if (checkname == "Bait") or (checkname == "Subeta") or (checkname == "Ithloria") or (checkname == "Carolanne")
	fput "exit"
	end
	end
end