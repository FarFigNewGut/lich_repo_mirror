=begin
Autobundle by Mindl.

Autobundle is designed to organize hides into bundles of ten automatically from a designated container.

You can also add the keyword arrow before the container to organize arrows into bundles of 24.

Usage is ;autobundle <arrow> <container>

The arrow bundling functionality will only work if all the arrows in the container are identical.

Most output has been silenced and/or disabled. Try to use this away from others so you don't spam them with all of your actions.

The list of hides is based off the wiki. There are some hides that appear to have the same name from different creatures. It is
unknown how the script will handle those if they are bundleable. I will update when I get some of those hides.

Thanks to DintarL and SpiffyJr. I used some of their code from Myfletch and Slootbeta for some features.

=end

bundleshash = {}
hideshash = {}
hidescounthash = {}
arrowhash = {}
arrowcounthash = {}

hides = "(?:daggerbeak wing|rolton ear|worm skin|rodent fang|fire ant pincer|ant pincer|rat pelt|kobold skin|ghoul nail|rolton pelt|skeleton bone|spotted gnarp horn|snake skin|rotting rolton pelt|brown gak hide|gnome scalp|goblin fang|goblin skin|pale crab pincer|squirrel tail|gak hide|rolton horn|cave nipper skin|salamander skin|ghoul scraping|spider leg|hobgolbin scalp|skeleton skull|kobold ear|snowcat pelt|relnak sail|velnalin horn|gak pelt|striped relnak sail|velnalin hide|black urgh hide|cobra skin|viper skin|mangy kobold scalp|spotted leaper pelt|urgh hide|water moccasin skin|whiptail stinger|bobcat claw|coyote tail|mist wraith eye|mongrel hobgolbin snout|night golem finger|cockatrice feather|leaper hide|mummy's shroud|orc hide|monkey paw|snowy cockatrice tailfeather|lynx pelt|blood red eagle feather|kappa fin|hobgolbin shaman ear|orc claw|red orc scalp|shelfae scale|multi-faceted tomb spider eye|golem bone|faceted crystal crab shell|orc claw|orc scalp|spider leg|thrak hide|brown spinner leg|crocodile snout|dirge skin|manticore tail|spectre nail|marmot pelt|boar tusk|rotted canine|werebear paw|orc knuckle|shelfae crest|orc ear|antlers|cockatrice plume|tawny brindlecat hide|black boar hide|brown boar skin|troll hide|weasel pelt|brown bear skin|orc beard|silverback orc knuckle|spectre skin|swamp troll scalp|white puma hide|black leopard paw|puma paw|ogre tusk|greasy troll scalp|panther pelt|puma hide|yellowed boar tusk|wight claw|wraith talon|agresh bear claw|rattlesnake rattle|bear hide|troll skin|fire rat tail|ghoul finger|troll beard|yellowed canine|ogre nose|scraggly orc scalp|bear paw|crooked witch nose|glistening black eye|veaba claw|goat hoof|troll toe|bighorn skeepskin|stone-grey lizard tail|ghoul master claw|fire cat claw|hornet stinger|mountain lion skin|plains lion skin|orange shelfae scale|troll scalp|troll heart|wight skin|ogre tooth|warcat whisker|wight scalp|bear claw|cougar tail|basilisk crest|panther pelt|warthog snout|centaur hide|zombie scalp|wolverine tail|scoprion stinger|ice hound ear|night hound hide|tree viper fang|wolverine pelt|troll knuckle|cyclops eye|leopard skin|troll fang|dobrem snout|tufted hawk-owl ear|martial eagle talon|arctic manticore mane|ice troll scalp|scaly burgee shell|sheer white spider mandible|hisskra skin|troll tongue|scalp of troll skin|mandible|tegursh claw|ash hag nose|krynch shinbone|fog beetle carapace|a pair of caribou antlers|hisskra tooth|moor hound paw|skeletal giant bone|tailspike|ruff of vulture feathers|hisskra crest|troll eye|decaying troll eye|tundra giant tooth|troll ear|eagle talon|fungal cap|arctic titan foe|fire giant mane|crooked crone finger|bat wing|blood-stained leaf|wight skull|silver-tipped horseshoe|skeletal warhorse jaw|ursian tusk|giant toe|grizzly bear hide|wasp stinger|silvery tail|vesperti claw|desiccated stem|cracked troll jawbone|wight mane|giant skin|kiramon mandible|myklian scale|thorn-ridden appendage|giant scalp|roa'ter skin|frozen scalp|multicolored siren lizard skin|raptor feathers|silvery hoof|pulsating firethorn|trali scalp|spotted leopard pelt|polar bear skin|frosted branch|vruul skin|shimmering wasp wing|trali hide|kiramon tongue|mottled faeroth crest|chimera stinger|vor'taz horn|bleached thorn|snake fang|thrak tail|waern fur|faeroth fang|shriveled cutting|seeker eye|madrinol skin|troll thumb|mammoth tusk|tiger incisor|troll eyeball|silver mane|pyrothag hide|viper fang|heavy grey tusk|pale white feather|stone heart|massive troll king hide|direbear fang|grifflet pelt|tsark skin|red eye|minotaur hide|minotaur horn|minotaur hoof|blood-stained bark|caedera skin|mossy beard|aivren gizzard|curved gold-flecked claw|elongated triton spine|cerebralite tentacle|war griffin talon|iridescent triton hide|jagged rift crawler tooth|a rimed lich finger bone|a scorched lich finger bone)"

count = 0
@righthand = 0
@lefthand = 0
@container_exit = false
x = 0
y = 1
arrowname = nil
close_on_exit = false

if Script.running?("sorter")
	Script.kill("sorter")
	sorter_start = true
end

silence_the_output = proc{
	action = proc{ |server_string|
		if server_string =~ /You glance through your bundle and count a total of/
			nil
		elsif server_string =~ /You remove a/
			nil
		elsif server_string =~ /You carefully add your/
			nil
		elsif server_string =~ /You carefully count/
			nil
		elsif server_string =~ /Individual projectiles/
			nil
		elsif server_string =~ /Each individual projectile/
			nil
		elsif server_string =~ /You bundle your/
			nil
		elsif server_string =~ /You add a/
			nil
		elsif server_string =~ /You carefully arrange your/
			nil
		elsif server_string =~ /You put a/
			nil
		elsif server_string =~ /In the/
			nil
		elsif server_string =~ /You close/
			nil
		elsif server_string =~ /You open/
			nil
		elsif server_string =~ /That is closed/
			nil
		elsif server_string =~ /This is already/
			nil
		elsif server_string =~ /You can't put your/
			nil
		elsif server_string =~ /I could not find/
			@container_exit = true
			nil
		else
			server_string
	end
	}
	DownstreamHook.add("#{script.name}_silence_the_output", action)
}

rightbreak = proc{
	silence_me
	fput("stow ##{@righthand}")
	test = $_SERVERBUFFER_.reverse.find { |line| line =~ /You can't put your/ }
	if test =~ /You can't put your/
		fput "open my #{script.vars[1]}"
		fput("stow ##{@righthand}")
		silence_me
		close_on_exit = true
	else
		silence_me
	end
	before_dying{
		silence_me
		multifput("stow right") if GameObj.right_hand.id
		fput("get ##{@righthand}")	
		if close_on_exit == true
			fput "close my #{script.vars[1]}"
		end
		silence_me
	}
}
leftbreak = proc{
	silence_me
	fput("stow ##{@lefthand}")
	silence_me
	before_dying{
		silence_me
		fput("stow left") if GameObj.left_hand.id
		fput("get ##{@lefthand}")
		if GameObj.right_hand.id == @lefthand.to_i
			fput("swap")
		end
		silence_me
	}
}

container_doesnt_exsist = proc{
	echo "The container you specified doesn't appear to exist. Try again."
	DownstreamHook.remove("#{script.name}_silence_the_output")
	exit
}

if script.vars[1] == 'help'
    print_option = proc do |option, msg, eg = "", pad = 2|
        if eg != ""
            msg = sprintf("%-40s #{$lich_char}#{script.name} #{eg}", msg)
        end

        respond(sprintf("  %s%-25s %s", " " * pad, option, msg))
    end

    respond("Autobundle by Mindl")
    respond("")
    respond("Autobundle is designed to organize hides into bundles of ten automatically from a designated container.")
    respond("")
    repsond("You can also add the keyword arrow before the container to organize arrows into bundles of 24.")
	respond("")
	respond("Usage is ;autobundle <arrow> <container>")
    respond("")
	respond("The arrow bundling functionality will only work if all the arrows in the container are identical.")
	respond("")
    respond("Most output has been silenced and/or disabled. Try to use this away from others so you don't spam them with all of your actions.")
    respond("")
	respond("The list of hides is based off the wiki. There are some hides that appear to have the same name from different creatures. It is
unknown how the script will handle those if they are bundleable. I will update when I get some of those hides.")
	respond("")
	respond("Thanks to DintarL and SpiffyJr. I used some of their code from Myfletch and Slootbeta for some features.")
	
	exit
elsif script.vars.empty? 

	echo("Error! You must supply the container that contains hides or arrows to be bundled when starting the script (only one per run)")
	DownstreamHook.remove("#{script.name}_silence_the_output")

else

	if Script.running?("sorter")
		Script.kill("sorter")
		sorter_start = true
	end
	
	if script.vars[1] != "arrow"
		silence_the_output.call	

		if GameObj.right_hand.id
			@righthand = GameObj.right_hand.id
			rightbreak.call
		else
			@righthand = 'nil'
		end
		if GameObj.left_hand.id
			@lefthand = GameObj.left_hand.id
			leftbreak.call
		else
			@lefthand = 'nil'
		end

		silence_me
		fput "look in my #{script.vars[1]}"
		silence_me
		test = $_SERVERBUFFER_.reverse.find { |line| line =~ /closed/ || /I could not find/ }
		if test =~ /closed/
			silence_me
			fput "open my #{script.vars[1]}"
			silence_me
			close_on_exit = true
		end

		if @container_exit == true
			container_doesnt_exsist.call
		end
	
		echo "Beginning to sort through your #{script.vars[1]}"

		GameObj[script.vars[1]].contents.each{|i|
				if i.name =~ /bundle of/ 
					if i.name =~ /#{hides}/
						silence_me
						fput "measure ##{i.id} in my #{script.vars[1]}"
						silence_me
						test = $_SERVERBUFFER_.reverse.find { |line| line =~ /total/ }
						if test =~ /total of (\d*)/
							convert = $1
							if convert != 10
								keytest = bundleshash.has_key? i.name
								if keytest != true
									bundleshash[i.name] = []
								end
								bundleshash[i.name] << [i.id,convert]
								x += 1
							end
						end	
					end
				else
					if i.name !~ /bundle of/
						if i.name =~ /#{hides}/
							keytest = hideshash.has_key? i.name
							if keytest != true
								hideshash[i.name] = []
								hidescounthash[i.name] = []
							else
								count = hidescounthash[i.name]
							end
							hideshash[i.name] << [i.id]
							count += 1
							hidescounthash[i.name] = count
							count = 0
							y += 1
						end
					end
				end
			}
			
		bundlekeys = bundleshash.keys
		hidekeys = hideshash.keys

		h = 0
		x = 0
		y = 0
		z = 0

		bundlekeys.each do |x|	
			singlebundle = bundleshash[x]
			singlebundle.sort! { |a,b| a[1] <=> b[1]}
			
			singlebundle.each do |y|
				size = y[1].to_i
				hidekeys.each do |c|
					if x =~ /#{c}/
						count = hidescounthash[c].to_i
						if size != 10 and count > 0
							silence_me
							fput "get ##{y[0]} from my #{script.vars[1]}"
							silence_me
							while size < 10 && count > 0
								hidetemp = hideshash[c][z].join
								silence_me
								fput "get ##{hidetemp} from my #{script.vars[1]}"
								fput "bundle"
								silence_me
								count -= 1
								size += 1
								z += 1
							end
						hidescounthash[c] = count
						silence_me
						fput "stow ##{y[0]}"
						silence_me
						end
					end
				end
			end
			z = 0
		end

		count = 0
		hideshash.clear
		hidescounthash.clear
		y = 0

		GameObj[script.vars[1]].contents.each{|i|
			if i.name !~ /bundle of/
						if i.name =~ /#{hides}/
							keytest = hideshash.has_key? i.name
							if keytest != true
								hideshash[i.name] = []
								hidescounthash[i.name] = []
							else
								count = hidescounthash[i.name]
							end
							hideshash[i.name] << [i.id]
							count += 1
							hidescounthash[i.name] = count
							count = 0
							y += 1
						end
					end
			}

		size = 1
		z = 0

		hidekeys.each do |c|
			count = hidescounthash[c].to_i
			if c =~ /#{hides}/
				hidetemp = hideshash[c][z].join
				while count > 1
					silence_me
					fput "get ##{hidetemp} from my #{script.vars[1]}"
					silence_me
					z += 1
					count -= 1
					while count > 0 && size < 10
						hidetemp = hideshash[c][z].join
						silence_me
						fput "get ##{hidetemp} from my #{script.vars[1]}"
						fput "bundle"
						silence_me
						z += 1
						count -= 1
						size += 1
						if size == 10 and count > 1
							size = 1
							silence_me
							fput "stow all"
							hidetemp = hideshash[c][z].join
							fput "get ##{hidetemp} from my #{script.vars[1]}"
							count -= 1
							z += 1
							silence_me
						end
					end
					silence_me
					fput "stow all"
					silence_me
				end
				z = 0
				size = 1
			end
		end

		silence_me
		fput "look in my #{script.vars[1]}"
		silence_me
		
		DownstreamHook.remove("#{script.name}_silence_the_output")

		echo "Done sorting through your #{script.vars[1]}. Your hides should be nicely organized now."
	
	else
		
		if script.vars[2] != nil
 		
			silence_the_output.call	

			if GameObj.right_hand.id
				@righthand = GameObj.right_hand.id
				rightbreak.call
			else
				@righthand = 'nil'
			end
			if GameObj.left_hand.id
				@lefthand = GameObj.left_hand.id
				leftbreak.call
			else
				@lefthand = 'nil'
			end
									
			
			silence_me
			fput "look in my #{script.vars[2]}"
			silence_me
			test = $_SERVERBUFFER_.reverse.find { |line| line =~ /closed/ || /I could not find/ }
			if test =~ /closed/
				silence_me
				fput "open my #{script.vars[2]}"
				silence_me
				close_on_exit = true
			end

			if @container_exit == true
				container_doesnt_exsist.call
			end
		
			echo "Beginning to sort arrows in your #{script.vars[2]}. Depending on the number of arrows this can take a few minutes."
		
			GameObj[script.vars[2]].contents.each{|i|
				if i.name =~ /bundle of arrows/ 
					silence_me
					fput "look at ##{i.id} in my #{script.vars[2]}"
					test = $_SERVERBUFFER_.reverse.find { |line| line =~ /count/ }
					if test =~ /find (\d*)/
						convert = $1.to_i
						if convert.to_i < 24
							test = $_SERVERBUFFER_.reverse.find { |line| line =~ /long of/ }
							if test =~ /long of "(.*)"/
								arrowname = $1
							end
							keytest = bundleshash.has_key? arrowname
							if keytest != true
								bundleshash[arrowname] = []
							end
							bundleshash[arrowname] << [i.id,convert]
							x += 1
							totalbundlecount += convert
						elsif convert > 24
							fput "get ##{i.id}"
							while convert > 24
								fput "get 1 arrow"
								fput "stow arrow"
								convert -= 1
							end
							fput "stow all"
						end
					silence_me
					end						
				end
			}
			
			GameObj[script.vars[2]].contents.each{|i|
				if i.name !~ /bundle of arrows/
					if i.name =~ /arrow/
						keytest = arrowhash.has_key? i.name
						if keytest != true
							arrowhash[i.name] = []
							arrowcounthash[i.name] = []
						else
							count = arrowcounthash[i.name]
						end
						arrowhash[i.name] << [i.id]
						count += 1
						arrowcounthash[i.name] = count
						count = 0
					end
				end
			}
			
			bundlekeys = bundleshash.keys
			arrowkeys = arrowhash.keys

			h = 0
			x = 0
			y = 0
			z = 0

			bundlekeys.each do |x|	
				singlebundle = bundleshash[x]
				singlebundle.sort! { |a,b| a[1] <=> b[1]}
				
				singlebundle.each do |y|
					size = y[1].to_i
					
					arrowkeys.each do |c|
						if x =~ /#{c}/
							count = arrowcounthash[c].to_i
							if size < 24 && count > 0
								silence_me
								fput "get ##{y[0]} from my #{script.vars[2]}"
								silence_me
								while size < 24 && count > 0
									arrowtemp = arrowhash[c][z].join
									silence_me
									fput "get ##{arrowtemp} from my #{script.vars[2]}"
									fput "bundle"
									silence_me
									count -= 1
									size += 1
									z += 1
								end
							arrowcounthash[c] = count
							silence_me
							fput "stow ##{y[0]}"
							silence_me
							end
						end
					end
				end
				z = 0
			end

			count = 0
			arrowhash.clear
			arrowcounthash.clear
			y = 0

			GameObj[script.vars[2]].contents.each{|i|
				if i.name !~ /bundle of/
					keytest = arrowhash.has_key? i.name
					if keytest != true
						arrowhash[i.name] = []
						arrowcounthash[i.name] = []
					else
						count = arrowcounthash[i.name]
					end
					arrowhash[i.name] << [i.id]
					count += 1
					arrowcounthash[i.name] = count
					count = 0
				end
				}

			size = 1
			z = 0

			arrowkeys.each do |c|
				count = arrowcounthash[c].to_i
				arrowtemp = arrowhash[c][z].join
				while count > 1
					silence_me
					fput "get ##{arrowtemp} from my #{script.vars[2]}"
					silence_me
					z += 1
					count -= 1
					while count > 0 && size.to_i < 24
						arrowtemp = arrowhash[c][z].join
						silence_me
						fput "get ##{arrowtemp} from my #{script.vars[2]}"
						fput "bundle"
						silence_me
						z += 1
						count -= 1
						size += 1
						if size == 24 and count > 1
							size = 1
							silence_me
							fput "stow all"
							arrowtemp = arrowhash[c][z].join
							fput "get ##{arrowtemp} from my #{script.vars[2]}"
							count -= 1
							z += 1
							silence_me
						end
					end
					silence_me
					fput "stow all"
					silence_me
				end
				z = 0
				size = 1
			end
			
			silence_me
			fput "look in my #{script.vars[2]}"
			silence_me

			DownstreamHook.remove("#{script.name}_silence_the_output")
			
			echo "Done sorting through your #{script.vars[2]}. Your arrows should be nicely organized now."
						
		else
			echo("Error! You must supply the container that contains hides or arrows to be bundled when starting the script (only one per run)")
			DownstreamHook.remove("#{script.name}_silence_the_output")
		end
	end
end

before_dying{
	
	if sorter_start == true
		Script.start("sorter")
	end
	
	DownstreamHook.remove("#{script.name}_silence_the_output")
}