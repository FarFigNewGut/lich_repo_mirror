=begin

	Tries to parse the "creatures by level page" on the wiki to mimic the old
	behavior from ;bestiary

	Currently only supports searching by level ranges (not name or undead status)

	requires nokogiri gem if not already installed. (gem install nokogiri)

	for usage info:
		;wikibeast help

	support = none, just go to the page yourself. Or don't, i'm not your dad. You do you.


		author: someone?
		contributers: someone else?
		game: Gemstone
		tags: info, play.net, news, wiki, bestiary, monsters, critters, help
		version: 1.1

	changelog:
		1.1 - tries to infer creature type from name using gameobj data
		1.0 - initial release
=end

require "net/https"
require "uri"

begin
  require "nokogiri"
rescue LoadError 
  _respond "#{monsterbold_start}You must install the nokogiri gem to use this script#{monsterbold_end}"
  exit
end

base_url = "https://gswiki.play.net/List_of_creatures_by_level"
disarm_url = "https://gswiki.play.net/List_of_creatures_that_can_cause_item_loss"
MOB_BY_LEVEL = {}

def get_page(url)
	uri = URI.parse(url)
	http = Net::HTTP.new(uri.host, uri.port)
	http.use_ssl = true

	req = Net::HTTP::Get.new(uri.request_uri)
	begin
		resp = http.request(req)
		http_code = "HTTP: #{resp.code}"
	rescue
		http_code = 'DNS or connection error'
	end
	if not resp.kind_of? Net::HTTPSuccess
        	_respond "Error retrieving #{uri} (#{http_code})"
	end
	return http_code, resp.body
end


if script.vars.include? "help"
	echo "usage:"
	echo "    ;wikibeast refresh                              - refresh local cache of the 'creatures by level' page"
	echo "                                                      this happens automatically if you have not run this script previously"
	echo "    ;wikibeast <start level> <end level (optional)> - show creatures between start and end level"
        echo "                                                      if end level is omitted, only shows creatures of <start level>"
        echo ":   ;wikibeast                                      - show creatures that are +/-5 from your current level"
	echo exit
elsif script.vars[1] =~ /refresh|reload/ or not CharSettings['page_cache']
	echo "Updating local cache of creature list from wiki..."
	http_code, resp = get_page(base_url)
	CharSettings['page_cache'] = resp
	CharSettings['updated_at'] = Time.now
	exit
else
	echo "Loading local cache of creature list from wiki (last updated: #{CharSettings['updated_at']})"
	resp = CharSettings['page_cache']
end
page = Nokogiri::HTML(resp)
creature_table = page.xpath("//table").first

def get_level_from_main(tab, level)
	url_root = "https://gswiki.play.net"
	lvl_list = tab.xpath('//td/b/a[@title="Category:Level ' + level.to_s + ' Creatures"]').first.parent.parent.xpath(".//li/a")
	MOB_BY_LEVEL[level] = []
	lvl_list.each { |m|
		MOB_BY_LEVEL[level].push({"name": m.text.capitalize, "link": "#{url_root}#{m['href']}"})
	}
end

def pretty_print_level(lvl)
	_respond "#{monsterbold_start}Level #{lvl}:#{monsterbold_end}"
	MOB_BY_LEVEL[lvl].each { |mob|
		fake_mobj = fake_obj(mob[:name])
		types = get_types(fake_mobj)
		typestring = "#{types}".ljust(40)
		_respond "      #{lvl}:    #{mob[:name].ljust(40)}#{typestring}#{mob[:link]}"
	}
end

# makes a fake creature game obj to check type
def fake_obj(creature)
	fakeobj = GameObj.new(666999, creature.split(" ").last, creature.downcase)
	if fakeobj.type.nil?
		fakeobj = GameObj.new(666999, creature.split(" ").last, creature)
	end
	return fakeobj
end

def get_types(fakeobj)
	types = fakeobj.type
	if types.nil? or types == ''
		types = "UNKNOWN"
	end
	return types.sub(/(?:,)?aggressive npc(?:$|,)/, '')
end

levels = script.vars[0].scan(/(\d+)/)
if levels
	if levels.length > 2
		echo "Too many things that look like levels in your arguments"
		exit
	elsif levels.length == 2
		lvl_range = [levels[0][0].to_i, levels[1][0].to_i].sort
		lvl_range = (lvl_range[0]..lvl_range[1])
	else
		lvl_range = [levels[0][0].to_i]
	end
elsif levels.nil?
	lvl_range = ((Char.level.to_i - 5)..(Char.level.to_i + 5)).to_a
end

lvl_range.each { |lvl|
	if lvl.nil?
		echo "Error parsing given level range"
		exit
	end
	next if lvl < 1
	get_level_from_main(creature_table, lvl)	
	pretty_print_level(lvl)
}
