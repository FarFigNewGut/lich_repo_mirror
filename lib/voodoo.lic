#quiet
## vim: set ft=ruby:
=begin

	Do the voodoo with the magic. Turns spell numbers and optional
	aliases into casts! Hooray!
	
	;voodoo help for teh infoz
	
	         author: Tillmen
	original author: SpiffyJr, Azanoth
	           game: Gemstone
	           tags: magic
	        version: 2.2

	changelog:
		2.2 (2014-03-05):
			fix stance bug
		2.1 (2014-12-17):
			allow multi-word targets

=end

hide_me
no_kill_all
no_pause_all

$voodoo_settings = CharSettings.to_hash
$voodoo_settings['alias'] ||= Hash.new
$voodoo_pending_num = nil
$voodoo_pending_target = nil

client_string_regex = nil
update_client_string_regex = proc {
	if $voodoo_settings['alias'].nil? or $voodoo_settings['alias'].empty?
		alias_regex = ''
	else
		alias_regex = "|#{$voodoo_settings['alias'].keys.join('|')}"
	end
	client_string_regex = "^(?:<c>)?(\\d{3,4}#{alias_regex})(?:\\s+([^\\s].*))?$"
}
update_client_string_regex.call

action = proc { |client_string|
    if client_string =~ /#{client_string_regex}/
    	check  = $1.strip
    	target = $2.to_s.strip

    	if $voodoo_settings['alias'].keys.include?(check)
    		check = $voodoo_settings['alias'][check]
    	end
    	
		$voodoo_pending_num    = check
        $voodoo_pending_target = target if target.size > 0
		
        nil
	elsif client_string =~ /^(?:<c>)?;voodoo (.*)$/
		cmd = $1.strip
		
		case cmd
			when /\?|help/i
				respond "Vodoo by SpiffyJr, Azanoth, and Tillmen"
				respond "      Usage: ;voodoo"
				respond "Description: casts all sorts of spells for you!"
				respond
				respond "    add <word> <spell>"
				respond "        adds an alias for <word> to cast <spell>"
				respond "    channel=<on|off>"
				respond "        channel spells that are able to be channeled"
				respond "    nerves=<on|off>"
				respond "        protects your nerves from being fried"
				respond "    stance=<on|off>"
				respond "        stance dance for spells that are more powerful in offensive"
			when /(add|new|create) ((?:\w+|\d+)+) (\d+)/i
				type = $1
				spell_num = $3.to_i
				word = $2.gsub(/\s|\r|\n/, '')
				spell = Spell[spell_num]				
				
				if not spell
					respond "-- voodoo: spell #{spell_num} could not be found"
				else
					if $voodoo_settings['alias'].keys.include?(word)
						respond "-- voodoo: changed #{word} to cast #{spell} (#{spell_num})"
					else
						respond "-- voodoo: added #{word} to cast #{spell} (#{spell_num})"
					end
					
					$voodoo_settings['alias'][word] = spell_num
					
					update_client_string_regex.call
					
					nil
				end
			when /(?:rem|remove|del|delete) ((?:\w+|\d+)+)/i
				word = $1.gsub(/\s|\r|\n/, '')
				
				if $voodoo_settings['alias'].keys.include?(word)
					respond "-- voodoo: removed #{word}"
					$voodoo_settings['alias'].delete(word)
				else
					respond "-- voodoo: could not find alias #{word}"
				end
				
				update_client_string_regex.call
				
				nil
			when /(?:list)/i
				respond "-- voodoo: alias list:"
				$voodoo_settings['alias'].each_pair { |word,spell|
					respond sprintf "%8s: %s", word, spell
				}
				
				nil
			when /(channel|nerves|stance)=(on|off);?/i
				option = $1.strip
				value = $2.strip
				
				if $2.nil?
					respond "-- voodoo: #{option} is currently set to #{$voodoo_settings[option]}"
				else
					$voodoo_settings[option] = value
					respond "-- voodoo: set #{option} to #{value}"
				end
			else
				respond "-- voodoo: you're doing it wrong! ;voodoo help for information."
		end
	elsif client_string =~ /^(?:<c>)?;voodoo/
		respond "-- voodoo: you're doing it wrong! ;voodoo help for information."
    else
        client_string
    end
}

UpstreamHook.add('voodoo', action)
before_dying { 
	echo 'voodoo exited'
	UpstreamHook.remove('voodoo'); 
}

change_stance = proc { |stance|
    loop {  
        break if checkstance == stance
        
        res = dothistimeout "stance #{stance}", 2, /You are now|Roundtime|Wait|wait/
        if res =~ /Roundtime: (\d+)|wait (\d+)/i
            sleep (($1 || $2).strip.to_f - 1)
        elsif res =~ /You are now/
            break
        end
    }
}

update_client_string_regex.call
echo 'voodoo started'
loop {
	wait_until { $voodoo_pending_num }
    
	spell = Spell[$voodoo_pending_num]
    if not spell.known?
        respond '-- voodoo: unknown spell: ' + spell.name
    elsif not spell
        respond '-- voodoo: something bad happened'
	elsif $voodoo_settings['nerves'].nil? or $voodoo_settings['nerves'] == 'off' or ($voodoo_settings['nerves'] == 'on' and spell.affordable?)	
		if spell.stance and $voodoo_settings['stance'] == 'on'
		    change_stance.call('offensive')
		end
		
		if $voodoo_pending_target.nil? or $voodoo_pending_target.to_s.length == 0
			put "incant #{$voodoo_pending_num}"
		else
			put "prepare #{$voodoo_pending_num}"
			
			if spell.channel
    			put "channel #{$voodoo_pending_target}"
			else
    			put "cast #{$voodoo_pending_target}"
			end            
		end
        		
		if spell.num != 718 and spell.stance and $voodoo_settings['stance'] == 'on'
		    change_stance.call('guarded')
		end
    else
		respond '-- voodoo: preventing nerve damage'
	end
    
    $voodoo_pending_target = nil
    $voodoo_pending_num    = nil
}
