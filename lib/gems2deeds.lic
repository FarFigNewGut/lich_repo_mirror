=begin

	Usage example:
		;gems2deeds greatcloak

	For the landing only, specify a sack with gems in it and this script will get 
	all gems appraised and go to the temple (in the landing only!) and create 
	deeds from those gems using the formula (100*level + 100*deed + 101)/3 
	to determine the cost of a deed in gems.

	It will generate as many deeds as possible from all gems in the specified sack,
	and it will spend no more than 20% over the optimal value of the deed. 

	Advanced note: you can tweak the max percentage it will spend over minimum 
	cost of the deed by opening and editing the first variable in the script.

	Script by Samrit
=end

#
# Change this value if you want to adjust the percentage over
# optimal value that the script will buy deeds for.
#
# Default value (20%): 0.2
#
MAX_VARIANCE = 0.2


####################################

def appraise_gems(uservar)
	finalreport = Array.new
	
	container = GameObj.inv.find{ |container| container.name =~ /.*#{uservar}.*/ }
	
	if container.nil? then fput "look in #{container.name}" end

	gems = container.contents.select{ |item| 
		item.type == "gem"
	}
	
	for gem in gems do
		silence_me
		dothistimeout "take ##{gem.id} from ##{container.id}", 5, /^You remove|You discreetly/
		fput "appraise ##{gem.id}"
		result = matchfind "I'll give you ? for it"
		finalreport << [result.to_i, gem.id, gem.name]
		dothistimeout "put ##{gem.id} in ##{container.id}", 5, /^You put|You discreetly/
		silence_me
	end
	
	respond "All gems appraised:"
	finalreport.sort{ |a,b| a[0] <=> b[0] }.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
	
	return finalreport.sort{ |a,b| a[0] <=> b[0] }
end


#
# Loop, selecting the next most valuable gem that keeps our iterationsum within MAX_VARIENCE
# until we have enough, or run out of gems
#
def get_deed_gems(deedcost, sortedgems)
	iterationsum = 0
	iterationgems = Array.new
	while sortedgems.length > 0 && iterationsum < deedcost do
		for ix in 0..(sortedgems.length-1)
			if sortedgems.at(ix)[0] + iterationsum > deedcost + (deedcost*MAX_VARIANCE) then
				# The value of this gem pushes us over the limit, take the prevous gem
				if ix == 0 then
					sortedgems.delete_at(0)
					break
				end
				iterationsum = iterationsum + sortedgems.at(ix-1)[0]
				iterationgems << sortedgems.at(ix-1)
				sortedgems.delete_at(ix-1)
				break
			elsif ix == sortedgems.length-1 then
				iterationsum = iterationsum + sortedgems.at(ix)[0]
				iterationgems << sortedgems.at(ix)
				sortedgems.delete_at(ix)
				break
			end
		end
	end

	return iterationsum < deedcost ? nil : iterationgems
end


#
# Do the temple offering step, expects to be standing in front of the tapestry
#
def do_temple_offering(deedgems)
	dothistimeout "go tapestry", 5, /^As you approach the/
	dothistimeout "ring chim with mallet", 5, /room is filled with a rich, mellow tone/
	dothistimeout "ring chim with mallet", 5, /Your face and deeds are well documented in the Book of Passing/
	dothistimeout "kneel", 5, /Drop thy offering/
	deedgems.each { |gem|
		dothistimeout "take ##{gem[1]}", 5, /^You remove|You discreetly/
		dothistimeout "drop ##{gem[1]}", 5, /^You drop/
	}
	dothistimeout "ring chime with mallet", 5, /Thy offering pleases the Goddess/
	fput "out"
end


#
# Go2 the gemshop and return only once there
#
def go_to_gemshop()
	start_script "go2", ["gemshop"]
	wait_while { running? "go2" }
end


#
# Go2 the temple in front of the tapestry
#
def go_to_temple()
	start_script "go2", ["4044"]
	wait_while { running? "go2" }
end


#
# Determine the cost of the users next deed
#
def get_next_deed_cost()
	level_deed_text = dothistimeout "experience", 5, /Level:/
	level, deeds = level_deed_text.match(/.*Level: (\d*)[ ]*Deeds: (\d*)/).captures
	return ((100 * level.to_i + 100 * deeds.to_i + 101).to_f / 3.to_f).ceil
end


def main()
	if variable[1].nil? then
		respond "\n*** You didn't specify the sack that your gems are in! ***\n\n    Usage: ;gems2deeds your-gem-sack\n\n\n"
		exit
	end

	deedcost = get_next_deed_cost()

	go_to_gemshop()

	sortedgems = appraise_gems(variable[1])

	go_to_temple()

	num_deeds_done = 0
	while (deedgems = get_deed_gems(deedcost, sortedgems)) != nil do
		sum = 0
		deedgems.each{ |gem| sum += gem[0] }
		percentover = ((sum - deedcost).to_f / deedcost.to_f * 100)
		respond "\nDeed cost: #{deedcost}, #{deedgems.length} gems chosen with total value of #{sum}, which is %0.1f percent over minimum cost" % [percentover]
		deedgems.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
		respond "\n"
		do_temple_offering(deedgems)
		num_deeds_done = num_deeds_done + 1

		deedcost = get_next_deed_cost()
	end

	respond "\n\nGood deeds done: #{num_deeds_done}, now do go something life threatening with them!\n\n"
end

# Start code in main()
main()

