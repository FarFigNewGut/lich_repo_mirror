=begin
 
  ** It is best to use this script while NOT logged in to the character you want to copy settings to.
 
  To show a list of characters with script settings saved in lich.db3:
    ;copy_script_settings list

  Copy script settings, uservars, aliases between characters, but don't overwrite existing settings:
    ;copy_script_settings from:Mymain to:Somealt

  ** deleting existing settings is recommended if you've ever logged in to that character before
  Include the delete keyword if you want to delete existing settings for the 'to' character
    ;copy_script_settings from:Mymain to:Newname delete
  
  If you want to copy settings between games, include GSIV, GSPlat, GSX, or GST:
    ;copy_script_settings from:GSIV:Mymain to:GST:Newname delete
  
  Including the 'go2' keyword will also copy go2 settings between games (for test server mainly):
    ;copy_script_settings from:GSIV:Mymain to:GST:Newname go2 delete
  
  Including the 'confirm' keyword skips the confirmation/unpause part of the script.

  To delete characters from your databases, use:
    ;copy_script_settings delete_only GSIV:Sometypo
    
  (Wrayth only) 
  To list all characters with an additional link to delete them.
    ;copy_script_settings list delete
    
   
    
          author: Xanlin (Xanlin#4407 on discord)
            game: GS
            tags: lich, utility, lichdb, alias, copy, script, settings
  requires_trust: true
        required: Lich >= 4.6.4
         version: 1
=end
if $SAFE != 0;
  _respond "\n     #{$clean_lich_char}#{Script.current.name} requires trust to access database files.\n
     <d cmd=\"#{$clean_lich_char}trust #{Script.current.name}\">#{$clean_lich_char}trust #{Script.current.name}</d>\n\n";
  exit;
end;
module CopyScriptSettings
  def self.help()
  _respond "
  
  <b>** It is best to use this script while NOT logged in to the character you want to copy settings to.</b>
  
  To show a list of characters with script settings saved in lich.db3:
    ;copy_script_settings list

  Copy script settings, uservars, aliases between characters, but don't overwrite existing settings:
    ;copy_script_settings from:Mymain to:Somealt

  ** deleting existing settings is recommended if you've ever logged in to that character before
  Include the delete keyword if you want to delete existing settings for the 'to' character
    ;copy_script_settings from:Mymain to:Newname delete
  
  If you want to copy settings between games, include GSIV, GSPlat, GSX, or GST:
    ;copy_script_settings from:GSIV:Mymain to:GST:Newname delete
  
  Including the 'go2' keyword will also copy go2 settings between games (for test server mainly):
    ;copy_script_settings from:GSIV:Mymain to:GST:Newname go2 delete
  
  Including the 'confirm' keyword skips the confirmation/unpause part of the script.

  To delete characters from your databases, use:
    ;copy_script_settings delete_only GSIV:Sometypo
    
  (Wrayth only) 
  To list all characters with an additional link to delete them.
    ;copy_script_settings list delete
    
  "
  end
  #------------------------------------------------------------------------------#
  # Settings
  #------------------------------------------------------------------------------#
  @game_source = XMLData.game;
  @game_target = XMLData.game;
  @character_source = nil;
  @character_target = nil;
  @copy_alias = true;
  
  if Script.current.vars[0] =~ /\-?\-?from(?:[=: ]) *([:\w]+)/i;
    source = $1.split(':')
    if source.size > 1
      game_source = source.first
      @game_source = game_source if game_source =~ /^(?:GSF|GSIV|GSPlat|GST)$/
    end
    @character_source = source.last.downcase.capitalize;
  end;

  if Script.current.vars[0] =~ /\-?\-?to(?:[=: ]) *([:\w]+)/i;
    target = $1.split(':')
    if target.size > 1
      game_target = target.first
      @game_target = game_target if game_target =~ /^(?:GSF|GSIV|GSPlat|GST)$/
    end
    @character_target = target.last.downcase.capitalize;
  end;

  @copy_go2 = false;
  @copy_go2 = true if Script.current.vars[0] =~ /go2/;

  @delete_existing = false;
  @delete_uservars = false;
  if Script.current.vars[0] =~ /\bdelete\b/i or @game_target=='GST';
    @delete_existing = true;
    @delete_uservars = true;
  end;

  @scope_source = "#{@game_source}:#{@character_source}";
  @scope_target = "#{@game_target}:#{@character_target}";


  @list_only = false;
  @list_only = true if Script.current.vars[0] =~ /^list/
  
  
  @delete_only = false;
  if Script.current.vars[0] =~ /^delete_only (\w+:\w+)/
    @delete_only = true 
    @delete_scope = $1
    @scope_source = $1
  end
  
  
  if @list_only == false and @delete_only == false
    if (@character_source.nil? or @character_target.nil?)
      #respond "please specify characters for both from: and to:";
      self.help()
      exit
    end
    respond "-"*64
    respond "copy from: #{@scope_source}";
    respond "copy to:   #{@scope_target}";
    _respond "** It is best to use this script while <b>NOT</b> logged in to the character you want to copy settings to." if @scope_target == "#{XMLData.game}:#{XMLData.name}"
    respond "  to delete existing settings, include the word 'delete' when executing the script" if @delete_existing == false;
    respond "delete existing script settings for #{@scope_target} : #{@delete_existing}";
    respond "delete existing uservars for #{@scope_target}        : #{@delete_uservars}";
    respond "delete #{@game_target} go2 settings to overwrite with #{@game_source} data: #{@copy_go2}" if @game_source != @game_target and Script.current.vars[0] =~ /go2/
    if Script.current.vars[0] !~ /confirm/i
      respond "-"*64
      respond "!!! pausing script.  #{$clean_lich_char}unpause #{Script.current.name} if input shown above is correct, otherwise #{$clean_lich_char}kill #{Script.current.name}";
      respond "-"*64
      pause_script
    end
  end
  
  #------------------------------------------------------------------------------#
  # open the lich.db3
  #------------------------------------------------------------------------------#
  def self.lich_db_open;
    require 'sqlite3';
    SQLite3::Database.open "#{$lich_dir}data/lich.db3";
  end;

  def self.alias_db_open;
    require 'sqlite3';
    SQLite3::Database.open "#{$lich_dir}data/alias.db3";
  end;

  db = lich_db_open;
  before_dying {db.close}
  #------------------------------------------------------------------------------#
  # list only
  #------------------------------------------------------------------------------#
  @mono_start = %{<output class="mono" />};
  @mono_end   = %{<output class="" />};
  def self.format_mono(msg) "<output class=\"mono\" />\n#{msg}\n<output class=\"\" />"; end;
  def self.d_cmd(cmd,text);return "<d cmd=\"#{cmd}\">#{text}</d>";end;
  
  if @list_only == true
    sql = "SELECT distinct scope FROM script_auto_settings"
    rows = db.execute(sql)
    output = [] 
    
    rows.sort.each { |s| 
      if s[0] =~ /:\w/
        if Script.current.vars[0] =~ /delete/i
          cmd = "#{$clean_lich_char}#{Script.current.name} delete_only #{s[0]}"
          output << "  %-20s | %50s" % [s[0], self.d_cmd(cmd,cmd)]
        else
          output << "  #{s[0]}"
        end
      end
    }
    _respond(self.format_mono(output.join("\n")))
    exit
  end
  #------------------------------------------------------------------------------#
  # delete only
  #------------------------------------------------------------------------------#
  if @delete_only == true
    if Script.current.vars[0] !~ /confirm/i
      respond "-"*64
      respond "!!! pausing script.  #{$clean_lich_char}unpause #{Script.current.name} to delete all settings for #{@delete_scope}.  This can not be undone.";
      _respond "** It is best to use this script while <b>NOT</b> logged in to the character you want to copy settings to." if @delete_scope == "#{XMLData.game}:#{XMLData.name}"
      respond "-"*64
      pause_script
    end
  
    script_settings_exists = db.get_first_value("SELECT 1 from script_auto_settings where scope='#{@delete_scope}'");
    if script_settings_exists.nil? 
      respond "script settings do not exist for #{@delete_scope}"
    else
      
      sql = "delete FROM script_auto_settings where scope = '#{@delete_scope}'"
      begin;
        db.execute(sql);
        respond "#{db.changes} script settings deleted for #{@delete_scope}";
      rescue SQLite3::BusyException;
        sleep 0.1;
        retry;
      end;
    end;
    
    uservars_exists = db.get_first_value("SELECT 1 from uservars where scope='#{@delete_scope}'");
    if uservars_exists.nil? 
      respond "uservars do not exist for #{@delete_scope}"
    else
      sql = "delete from uservars where scope='#{@delete_scope}'";
      begin;
        db.execute(sql);
        respond "uservars deleted for #{@delete_scope}" if db.changes > 0;
      rescue SQLite3::BusyException;
        sleep 0.1;
        retry;
      end;
    end;
    
    db.close;
    
    alias_table = @delete_scope.downcase.sub(':','_');
    db = self.alias_db_open;
    source_exists = db.get_first_value("SELECT name FROM sqlite_master WHERE type = 'table' and name = '#{alias_table}'");
    if source_exists.nil? 
      respond "alias table #{alias_table} not found in alias.db3"
    else
      sql = "drop table #{alias_table}"
      begin;
        db.execute(sql);
        respond "dropped #{alias_table} from alias.db3";
      rescue SQLite3::BusyException;
        sleep 0.1;
        retry;
      end;
    end
    
    exit
  end
  
  
  #------------------------------------------------------------------------------#
  # check source exists for lich.db
  #------------------------------------------------------------------------------#
  scope_source_exists = db.get_first_value("SELECT scope FROM script_auto_settings WHERE scope = '#{@scope_source}' limit 1")
  if scope_source_exists.nil? or scope_source_exists.empty?
    respond "#{@scope_source} does not exist in the lich db"
    exit
  end
  #------------------------------------------------------------------------------#
  # Delete script settings
  #------------------------------------------------------------------------------#
  if @delete_existing == true ;
    sql = "select script from script_auto_settings where scope='#{@scope_target}'
      and script in (select script from script_auto_settings where scope = '#{@scope_source}')";
    rows = db.execute(sql)
    if rows.size > 0
      respond "deleting existing script settings for #{@scope_target}: #{rows.sort.join(', ')}" 
      sql = "delete from script_auto_settings where scope='#{@scope_target}'
        and script in (select script from script_auto_settings where scope = '#{@scope_source}')";
      begin;
        db.execute(sql);
        respond "#{db.changes} script settings deleted from #{@scope_target}";
      rescue SQLite3::BusyException;
        sleep 0.1;
        retry;
      end;
    end;
  end;
  #------------------------------------------------------------------------------#
  # copy script settings
  #------------------------------------------------------------------------------#
  sql = "
    select script
    from script_auto_settings as sas
    where scope='#{@scope_source}' 
      and not exists (
        select 1
        from script_auto_settings i
        where i.script = sas.script
          and i.scope  ='#{@scope_target}'
      )
    "
  rows = db.execute(sql);
  if rows.size < 1
    respond "No script settings to copy from #{@scope_source} that do not already exist for #{@scope_target}"
  else
    sql = "
      insert into script_auto_settings (script,scope,hash)
      select script, '#{@scope_target}', hash
      from script_auto_settings as sas
      where scope='#{@scope_source}' 
        and not exists (
          select 1
          from script_auto_settings i
          where i.script = sas.script
            and i.scope  ='#{@scope_target}'
        )
      ";
    begin;
      db.execute(sql);
      respond "#{db.changes} script settings copied from #{@scope_source} to #{@scope_target}";
    rescue SQLite3::BusyException;
      sleep 0.1;
      retry;
    end;
  end
  #------------------------------------------------------------------------------#
  # overwrite uservars
  #------------------------------------------------------------------------------#
  if @delete_uservars == true;
    sql = "delete from uservars where scope='#{@scope_target}'";
    begin;
      db.execute(sql);
      respond "uservars deleted for #{@scope_target}";
    rescue SQLite3::BusyException;
      sleep 0.1;
      retry;
    end;
  end
  
  uservars_exist = db.get_first_value("select 1 from uservars i where i.scope='#{@scope_target}'")
  if uservars_exist.nil?
    sql = "
      insert into uservars (hash, scope)
      select hash, '#{@scope_target}' 
      from uservars u
      where scope='#{@scope_source}' 
        and not exists (select 1 from uservars i where i.scope='#{@scope_target}')
    ";
    begin;
      db.execute(sql);
      respond "uservars copied from #{@scope_source} to #{@scope_target}";
    rescue SQLite3::BusyException;
      sleep 0.1;
      retry;
    end;
  end;
  
  #------------------------------------------------------------------------------#
  # overwrite global go2
  #------------------------------------------------------------------------------#
  if @copy_go2 == true and @game_source != @game_target;
    sql = "delete from script_auto_settings where script='go2' and scope in ('#{@game_target}:','#{@game_target}')";
    begin;
      db.execute(sql);
      respond "go2 settings deleted from #{@game_target}";
    rescue SQLite3::BusyException;
      sleep 0.1;
      retry;
    end;

  end;
  #------------------------------------------------------------------------------#
  # insert source go2 if go2 doesn't exist
  #------------------------------------------------------------------------------#
  if @copy_go2 == true and @game_source != @game_target;
    begin
      sql = "select 1 
            from script_auto_settings 
            where scope='#{@game_target}' and script='go2'
            "
      test_go2_settings_exist = 0;
      test_go2_settings_exist = db.get_first_value(sql); #null = nil
      if test_go2_settings_exist.nil?;
        sql = "
          insert into script_auto_settings (script, hash, scope)
          select 'go2', hash, '#{@game_target}:' from script_auto_settings 
          where scope='#{@game_source}:' and script='go2'
            and not exists (
              select 1 
              from script_auto_settings 
              where scope='#{@game_target}:' and script='go2'
              )
        ";
        begin;
          db.execute(sql);
        rescue SQLite3::BusyException;
          sleep 0.1;
          retry;
        end;
          sql = "
          insert into script_auto_settings (script, hash, scope)
          select 'go2', hash, '#{@game_target}' from script_auto_settings 
          where scope='#{@game_source}' and script='go2'
            and not exists (
              select 1 
              from script_auto_settings 
              where scope='#{@game_target}' and script='go2'
              )
        ";
        begin;
          db.execute(sql);
          respond "go2 settings copied from #{@game_source} to #{@game_target}";
        rescue SQLite3::BusyException;
          sleep 0.1;
          retry;
        end;

      end;
    end;
  end;
  #------------------------------------------------------------------------------#
  # done with lich db
  #------------------------------------------------------------------------------#
  db.close;
  #------------------------------------------------------------------------------#
  # copy alias
  #------------------------------------------------------------------------------#
  if @copy_alias == true
    alias_source = @scope_source.downcase.sub(':','_');
    alias_target = @scope_target.downcase.sub(':','_');
    db = self.alias_db_open;
    before_dying {db.close};
    source_exists = db.get_first_value("SELECT name FROM sqlite_master WHERE type = 'table' and name = '#{alias_source}'");
    if source_exists.nil? 
      respond "#{@scope_source.downcase} does not exist in the alias db";
    else
      db.execute("create table if not exists #{alias_target} (trigger text not null, target text not null, unique(trigger));")
      if @delete_existing == true
        sql = "delete from #{alias_target} as t
          where exists (select 1 from #{alias_source} as s where s.trigger = t.trigger)"
        begin;
          db.execute(sql);
          respond "#{db.changes} alias triggers deleted from #{alias_target}";
        rescue SQLite3::BusyException;
          sleep 0.1;
          retry;
        end;
      end;
      
      sql = "
        insert into #{alias_target} (trigger,target)
        select trigger,target
        from #{alias_source} src
        where not exists (
            select 1
            from #{alias_target} i
            where i.trigger = src.trigger
              and i.target  = src.target
          )
      ";
      begin;
        db.execute(sql);
        respond "#{db.changes} alias triggers copied from #{alias_source} to #{alias_target}";
      rescue SQLite3::BusyException;
        sleep 0.1;
        retry;
      end;
    end;
  end;
  #------------------------------------------------------------------------------#
  # done with alias db
  #------------------------------------------------------------------------------#
  db.close;
end