=begin

	Shows a bunch of cool stats about your character that either aren't shown anywhere, or are shown via many different commands.
	
	Simply run the script and it will display stats such as your character's weight, your character's carrying capacity, health regeneration, natural crit padding, and more!
	
	Requires Lich version 5.5.0 or greater.
	
	Changelog:
	Version 1: Initial release and stuff and stuff
	Version 2: Script now lists natural bolt crit weighting stat, base trading bonus, character creation date info.
	Version 3: Script now lists House/MHO membership if this information is shown in your profile, percantage towards next level and percentage towards cap if under level 100, and what percentage past cap if you are level 100.
	Version 4: Script now lists: Voln favor, GoS prestige, fame, profession guild ranks, fixed bug with script not showing House/MHO membership if you have certain House titles.
	Version 5: Updated all instaces of Char.prof to Stats.prof and all instances of Char.level to Stats.level

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version 5

=end

LICH_GEM_REQUIRES = '5.5.0'
if Gem::Version.new(LICH_VERSION) < Gem::Version.new(LICH_GEM_REQUIRES)
	_respond "This script requires Lich Version #{LICH_GEM_REQUIRES} or greater. Please update to the latest version of Lich in order to use this script."
	exit
end

enhanced_str_stat = Stats.enhanced_str[0]
enhanced_con_stat = Stats.enhanced_con[0]
enhanced_con_bonus = Stats.enhanced_con[1]
enhanced_log_bonus = Stats.enhanced_log[1]
enhanced_dex_bonus = Stats.enhanced_dex[1]
enhanced_agi_bonus = Stats.enhanced_agi[1]
enhanced_str_bonus = Stats.enhanced_str[1]
enhanced_int_bonus = Stats.enhanced_int[1]
enhanced_wis_bonus = Stats.enhanced_wis[1]
enhanced_inf_bonus = Stats.enhanced_inf[1]
normal_str_stat = Stats.str[0]
normal_con_stat = Stats.con[0]
@stats_ascension_ranks_porter = 0
@stats_ascension_ranks_health_regen = 0
@stats_physical_damage_reduction = 0
@stats_magical_damage_reduction = 0
@stats_house_membership = "Membership could not be determined"

level_information = Hash.new
level_information[1] = 2500;level_information[2] = 5000;level_information[3] = 10000;level_information[4] = 17500;level_information[5] = 27500;level_information[6] = 40000;level_information[7] = 55000;level_information[8] = 72500;level_information[9] = 92500;level_information[10] = 115000;level_information[11] = 140000;level_information[12] = 167000;level_information[13] = 197500;level_information[14] = 230000;level_information[15] = 265000;level_information[16] = 302000;level_information[17] = 341000;level_information[18] = 382000;level_information[19] = 425000;level_information[20] = 470000;level_information[21] = 517000;level_information[22] = 566000;level_information[23] = 617000;level_information[24] = 670000;level_information[25] = 725000;level_information[26] = 781500;level_information[27] = 839500;level_information[28] = 899000;level_information[29] = 960000;level_information[30] = 1022500;level_information[31] = 1086500;level_information[32] = 1152000;level_information[33] = 1219000;level_information[34] = 1287500;level_information[35] = 1357500;level_information[36] = 1429000;level_information[37] = 1502000;level_information[38] = 1576500;level_information[39] = 1652500;level_information[40] = 1730000;level_information[41] = 1808500;level_information[42] = 1888000;level_information[43] = 1968500;level_information[44] = 2050000;level_information[45] = 2132500;level_information[46] = 2216000;level_information[47] = 2300500;level_information[48] = 2386000;level_information[49] = 2472500;level_information[50] = 2560000;level_information[51] = 2648000;level_information[52] = 2736500;level_information[53] = 2825500;level_information[54] = 2915000;level_information[55] = 3005000;level_information[56] = 3095500;level_information[57] = 3186500;level_information[58] = 3278000;level_information[59] = 3370000;level_information[60] = 3462500;level_information[61] = 3555500;level_information[62] = 3649000;level_information[63] = 3743000;level_information[64] = 3837500;level_information[65] = 3932500;level_information[66] = 4028000;level_information[67] = 4124000;level_information[68] = 4220500;level_information[69] = 4317500;level_information[70] = 4415000;level_information[71] = 4513000;level_information[72] = 4611500;level_information[73] = 4710500;level_information[74] = 4810000;level_information[75] = 4910000;level_information[76] = 5010500;level_information[77] = 5111500;level_information[78] = 5213000;level_information[79] = 5315000;level_information[80] = 5417500;level_information[81] = 5520500;level_information[82] = 5624000;level_information[83] = 5728000;level_information[84] = 5832500;level_information[85] = 5937500;level_information[86] = 6043000;level_information[87] = 6149000;level_information[88] = 6255500;level_information[89] = 6362500;level_information[90] = 6470000;level_information[91] = 6578000;level_information[92] = 6686500;level_information[93] = 6795500;level_information[94] = 6905000;level_information[95] = 7015000;level_information[96] = 7125500;level_information[97] = 7236500;level_information[98] = 7348000;level_information[99] = 7460000;level_information[100] = 7572500

#Ascension info:
result = Lich::Util.quiet_command_xml("asc info", /Skill |your Ascension Abilities are as follows/)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /Porter.*porter.* (\d+)\/50/
		@stats_ascension_ranks_porter = $1.to_i
	elsif info =~ /Health Regeneration.*regenhealth.* (\d+)\/50/
		@stats_ascension_ranks_health_regen = $1.to_i
	end
}

#Stamina info:
result = Lich::Util.quiet_command_xml("stamina", /Normal /)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /Stamina gained per pulse\:.*\d+\s+(\d+)/
		@stats_stamina_regen_rate = $1.to_i
	end
}

#Mana info:
result = Lich::Util.quiet_command_xml("mana", /Normal /)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /Mana gained off node\:.*\d+\s+ (.*)/
		@stats_mana_regen_rate_off_node = $1.to_i
	elsif info =~ /Mana gained on node\:.*\d+\s+ (\d+)/
		@stats_mana_regen_rate_on_node = $1.to_i
	end
}

#Health info:
result = Lich::Util.quiet_command_xml("health", /Maximum Health Points|You seem to be in one piece|You have the following/)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /Physical Damage Reduction\: (.*)\%/
		@stats_physical_damage_reduction = $1.to_f
	elsif info =~ /Magical Damage Reduction\: (.*)\%/
		@stats_magical_damage_reduction = $1.to_f
	end
}

#Profile info:
result = Lich::Util.quiet_command_xml("profile #{checkname}", /PERSONAL INFORMATION/)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /(Argent Aspis|Beacon Hall Archive|Cairnfang Manor|Helden Hall|House (of )?Arcane|House (of )?Brigatta|House (of )?Paupers|House (of )?Sovyn|House (of )?Sylvanfair|Moonstone Abbey|Obsidian Tower|Rising Phoenix|Rone Academy|Silvergate Inn|Twilight Hall|White Haven|Willow Hall)/
		@stats_house_membership = $1
	elsif info =~ /No MHO affiliation|No House affiliation/
		@stats_house_membership = "No membership"
	end
}

#Society task:
result = Lich::Util.quiet_command_xml("society task", /You currently possess .* prestige points|You currently have no active society task.|It is your eternal duty to release undead creatures from their suffering in the name of the Great Spirit Voln./)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /You currently possess (.*) prestige points\./
		@stats_gos_prestige = $1
	end
}

#Resource info:
result = Lich::Util.quiet_command_xml("resource", /Health\:/)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /Voln Favor\: (.*)/
		@stats_voln_favor = $1
	end
}

#Profession guild info:
result = Lich::Util.quiet_command_xml("gld", /You have no guild affiliation|You are .* of the .* Guild./)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /You currently have (.*) ranks? out of a possible (.*) for your training\./
		@stats_current_guild_ranks = $1.to_i
		@stats_max_guild_ranks = $2.to_i
	end
}

#Experience info:
result = Lich::Util.quiet_command_xml("exp", /Level\: /)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /Level\:\s+(\d+)\s+Fame\:\s+(.*)/
		@stats_current_level = $1.to_i
		@stats_current_fame = $2
	elsif info =~ /Experience\: (.*)\s+Field Exp/
		@stats_normal_experience = $1.delete(",").to_i
	elsif info =~ /Total Exp\: (.*)\s+Death/
		@stats_total_experience = $1.delete(",").to_i
	elsif info =~ /Exp until lvl\: (.*)/
		@stats_exp_until_level = $1.delete(",").to_i
	end
}

if @stats_current_level == 100
	@stats_percent_of_cap = ((@stats_total_experience / 7572500.to_f) * 100).round(2)
else
	@stats_percent_of_cap = ((@stats_normal_experience / 7572500.to_f) * 100).round(2)
	total_experience_needed_for_level = level_information[@stats_current_level + 1] - level_information[(@stats_current_level)]
	@stats_percent_towards_next_level = ((total_experience_needed_for_level - @stats_exp_until_level).to_f / (total_experience_needed_for_level) * 100).round(2)
end

#Start info:
result = Lich::Util.quiet_command_xml("info start", /Level 0 Stats for/)
result.each{ |info|
	info = strip_xml(info)
	if info =~ /This character was created on [a-zA-Z]+ ([a-zA-Z]+)\s+(\d+) .* [a-zA-Z]+ (\d+)/
		if $1 == "Jan"
			@stats_created_month = 1
		elsif $1 == "Feb"
			@stats_created_month = 2
		elsif $1 == "Mar"
			@stats_created_month = 3
		elsif $1 == "Apr"
			@stats_created_month = 4
		elsif $1 == "May"
			@stats_created_month = 5
		elsif $1 == "Jun"
			@stats_created_month = 6
		elsif $1 == "Jul"
			@stats_created_month = 7
		elsif $1 == "Aug"
			@stats_created_month = 8
		elsif $1 == "Sep"
			@stats_created_month = 9
		elsif $1 == "Oct"
			@stats_created_month = 10
		elsif $1 == "Nov"
			@stats_created_month = 11
		elsif $1 == "Dec"
			@stats_created_month = 12
		end
		@stats_created_day = $2.to_i
		@stats_created_year = $3.to_i
	end
}

#Character creation info
created_date = "#{@stats_created_month}/#{@stats_created_day}/#{@stats_created_year}"
current_time = Time.new
character_created_this_many_days_ago = (Date.new(current_time.year, current_time.month, current_time.day) - Date.new(@stats_created_year, @stats_created_month, @stats_created_day)).to_i

#MOC info:
if Skills.multiopponentcombat < 5
	unfocused_mstrike_number = 0
elsif Skills.multiopponentcombat < 15
	unfocused_mstrike_number = 2
elsif Skills.multiopponentcombat < 35
	unfocused_mstrike_number = 3
elsif Skills.multiopponentcombat < 60
	unfocused_mstrike_number = 4
elsif Skills.multiopponentcombat < 100
	unfocused_mstrike_number = 5
elsif Skills.multiopponentcombat < 155
	unfocused_mstrike_number = 6
elsif Skills.multiopponentcombat < 225
	unfocused_mstrike_number = 7
else
	unfocused_mstrike_number = 8
end

if Skills.multiopponentcombat < 30
	focused_mstrike_number = 0
elsif Skills.multiopponentcombat < 55
	focused_mstrike_number = 2
elsif Skills.multiopponentcombat < 90
	focused_mstrike_number = 3
elsif Skills.multiopponentcombat < 135
	focused_mstrike_number = 4
elsif Skills.multiopponentcombat < 190
	focused_mstrike_number = 5
elsif Skills.multiopponentcombat < 255
	focused_mstrike_number = 6
else
	focused_mstrike_number = 7
end

if Stats.prof =~ /Ranger|Rogue/
	ranged_moc_skill = Skills.multiopponentcombat * 1.5
	
	if ranged_moc_skill < 5
		ranged_unfocused_mstrike_number = 0
	elsif ranged_moc_skill < 15
		ranged_unfocused_mstrike_number = 2
	elsif ranged_moc_skill < 35
		ranged_unfocused_mstrike_number = 3
	elsif ranged_moc_skill < 60
		ranged_unfocused_mstrike_number = 4
	elsif ranged_moc_skill < 100
		ranged_unfocused_mstrike_number = 5
	elsif ranged_moc_skill < 155
		ranged_unfocused_mstrike_number = 6
	elsif ranged_moc_skill < 225
		ranged_unfocused_mstrike_number = 7
	else
		ranged_unfocused_mstrike_number = 8
	end

	if ranged_moc_skill < 30
		ranged_focused_mstrike_number = 0
	elsif ranged_moc_skill < 55
		ranged_focused_mstrike_number = 2
	elsif ranged_moc_skill < 90
		ranged_focused_mstrike_number = 3
	elsif ranged_moc_skill < 135
		ranged_focused_mstrike_number = 4
	elsif ranged_moc_skill < 190
		ranged_focused_mstrike_number = 5
	elsif ranged_moc_skill < 255
		ranged_focused_mstrike_number = 6
	else
		ranged_focused_mstrike_number = 7
	end
end

if Skills.multiopponentcombat < 10
	fof_benefit = 0
elsif Skills.multiopponentcombat < 25
	fof_benefit = 1
elsif Skills.multiopponentcombat < 45
	fof_benefit = 2
elsif Skills.multiopponentcombat < 70
	fof_benefit = 3
elsif Skills.multiopponentcombat < 95
	fof_benefit = 4
elsif Skills.multiopponentcombat < 120
	fof_benefit = 5
elsif Skills.multiopponentcombat < 145
	fof_benefit = 6
elsif Skills.multiopponentcombat < 170
	fof_benefit = 7
elsif Skills.multiopponentcombat < 195
	fof_benefit = 8
elsif Skills.multiopponentcombat < 220
	fof_benefit = 9
elsif Skills.multiopponentcombat < 245
	fof_benefit = 10
elsif Skills.multiopponentcombat < 270
	fof_benefit = 11
elsif Skills.multiopponentcombat < 295
	fof_benefit = 12
else
	fof_benefit = 13
end

#Race specific information:
if Char.race.downcase == "burghal gnome"
	race_base_body_weight = 40
	race_weight_factor = 0.40
	on_node_base_spirit_regen = 0.666
	off_node_base_spirit_regen = 0.333
	race_base_health_regen = 2
elsif Char.race.downcase == "halfling"
	race_base_body_weight = 45.333
	race_weight_factor = 0.4533
	on_node_base_spirit_regen = 0.8
	off_node_base_spirit_regen = 0.4
	race_base_health_regen = 3
elsif Char.race.downcase == "forest gnome"
	race_base_body_weight = 47.666
	race_weight_factor = 0.4767
	on_node_base_spirit_regen = 0.8
	off_node_base_spirit_regen = 0.4
	race_base_health_regen = 2
elsif Char.race.downcase == "aelotoi"
	race_base_body_weight = 67.666
	race_weight_factor = 0.6767
	on_node_base_spirit_regen = 0.5
	off_node_base_spirit_regen = 0.25
	race_base_health_regen = 1
elsif Char.race.downcase == "elf"
	race_base_body_weight = 70
	race_weight_factor = 0.70
	on_node_base_spirit_regen = 0.4
	off_node_base_spirit_regen = 0.2
	race_base_health_regen = 1
elsif Char.race.downcase == "erithian"
	race_base_body_weight = 72.333
	race_weight_factor = 0.7233
	on_node_base_spirit_regen = 0.5
	off_node_base_spirit_regen = 0.25
	race_base_health_regen = 2
elsif Char.race.downcase == "sylvankind"
	race_base_body_weight = 72.333
	race_weight_factor = 0.7233
	on_node_base_spirit_regen = 0.5
	off_node_base_spirit_regen = 0.25
	race_base_health_regen = 1
elsif Char.race.downcase == "dark elf"
	race_base_body_weight = 77.666
	race_weight_factor = 0.7767
	on_node_base_spirit_regen = 0.4
	off_node_base_spirit_regen = 0.2
	race_base_health_regen = 1
elsif Char.race.downcase == "dwarf"
	race_base_body_weight = 77.666
	race_weight_factor = 0.7767
	on_node_base_spirit_regen = 0.8
	off_node_base_spirit_regen = 0.4
	race_base_health_regen = 3
elsif Char.race.downcase == "half-elf"
	race_base_body_weight = 82.333
	race_weight_factor = 0.8233
	on_node_base_spirit_regen = 0.5
	off_node_base_spirit_regen = 0.25
	race_base_health_regen = 2
elsif Char.race.downcase == "human"
	race_base_body_weight = 90
	race_weight_factor = 0.90
	on_node_base_spirit_regen = 0.666
	off_node_base_spirit_regen = 0.333
	race_base_health_regen = 2
elsif Char.race.downcase == "half-krolvin"
	race_base_body_weight = 100
	race_weight_factor = 1.0
	on_node_base_spirit_regen = 0.5
	off_node_base_spirit_regen = 0.25
	race_base_health_regen = 2
elsif Char.race.downcase == "giantman"
	race_base_body_weight = 120
	race_weight_factor = 1.20
	on_node_base_spirit_regen = 0.666
	off_node_base_spirit_regen = 0.333
	race_base_health_regen = 2
end

#Experience absorption calculations
experience_absorbed_on_node = 32 + (enhanced_log_bonus / 5) #This assumes on super node and 1000 field experience
experience_absorbed_off_node = 24 + (enhanced_log_bonus / 7) #This assumes 1000 field experience

#Natural crit weighting
one_hand_open_crit_weighting = [(((enhanced_dex_bonus) + ([0, (enhanced_str_bonus - 20)].min)) / 4), 0].max #This assumes weapon speed 6
no_hand_open_crit_weighting = [(((enhanced_dex_bonus) + ([0, (enhanced_str_bonus - 42)].min)) / 4), 0].max #This assumes weapon speed 5

#Calculating body weight and carrying capacity:
if normal_str_stat >= 100
	strength_stat_for_body_weight = 100
elsif normal_str_stat.odd?
	strength_stat_for_body_weight = (normal_str_stat - 1)
else
	strength_stat_for_body_weight = normal_str_stat
end

if normal_con_stat >= 100
	con_stat_for_body_weight = 100
elsif normal_con_stat.odd?
	con_stat_for_body_weight = (normal_con_stat - 1)
else
	con_stat_for_body_weight = normal_con_stat
end

character_body_weight = (race_base_body_weight + ((strength_stat_for_body_weight + con_stat_for_body_weight)) * race_weight_factor).truncate
character_carrying_capacity = ((((((enhanced_str_stat.to_f - 20) / 200) * character_body_weight).truncate(2) + (character_body_weight.to_f / 200)).truncate(2)) + (@stats_ascension_ranks_porter * 2)).truncate(2)

#Aim success chance calculations
melee_aim_hidden = [((Skills.to_bonus(Skills.ambush) + (enhanced_dex_bonus) + (((enhanced_int_bonus + 1) / 2).truncate)) / 2).truncate, 95].min
melee_aim_open = [(((((Skills.to_bonus(Skills.combatmaneuvers) + Skills.to_bonus(Skills.ambush) + 1) / 2).truncate) + (enhanced_dex_bonus) + (((enhanced_int_bonus + 1) / 2).truncate)) / 2).truncate, 95].min
hurling_aim_open = [(melee_aim_open * 1.5).truncate, 95].min
if Spells.ranger < 13
	ranged_aim_hidden = [(((Skills.perception +  Skills.ambush) / 2).truncate) + ((Skills.rangedweapons / 4).truncate), 75].min
	ranged_aim_open = [((Skills.perception / 2).truncate) + ((Skills.rangedweapons / 4).truncate), 75].min
else
	ranged_aim_hidden = [(((Skills.perception +  Skills.ambush) / 2).truncate) + ((Skills.rangedweapons / 4).truncate) + 15 + (Spells.ranger - 13), 75].min
	ranged_aim_open = [((Skills.perception / 2).truncate) + ((Skills.rangedweapons / 4).truncate) + 15 + (Spells.ranger - 13), 75].min
end

#agidex
if enhanced_dex_bonus + enhanced_agi_bonus < 8
	agi_dex_bonus = 0
elsif enhanced_dex_bonus + enhanced_agi_bonus < 23
	agi_dex_bonus = 1
elsif enhanced_dex_bonus + enhanced_agi_bonus < 38
	agi_dex_bonus = 2
elsif enhanced_dex_bonus + enhanced_agi_bonus < 53
	agi_dex_bonus = 3
elsif enhanced_dex_bonus + enhanced_agi_bonus < 68
	agi_dex_bonus = 4
elsif enhanced_dex_bonus + enhanced_agi_bonus < 83
	agi_dex_bonus = 5
elsif enhanced_dex_bonus + enhanced_agi_bonus < 98
	agi_dex_bonus = 6
elsif enhanced_dex_bonus + enhanced_agi_bonus < 113
	agi_dex_bonus = 7
else
	agi_dex_bonus = 8
end

#Trading bonus
if Skills.trading == 0
	trading_bonus = 0
else
	trading_bonus = (enhanced_inf_bonus + Skills.to_bonus(Skills.trading)) / 12
	trading_bonus = Skills.trading if trading_bonus >= (Skills.trading + 1)
end

#Displaying information:
_respond "#{monsterbold_start}################################################################################{monsterbold_end}\n"
_respond
_respond "Keep in mind that certain enhanced stats (such as enhanced spirit regeneration) can't be tracked because this information doesn't appear anywhere in game. In such instances just the base stat will be shown."
_respond
_respond "Body weight:                   #{character_body_weight} pounds"
_respond "Carrying capacity:             #{character_carrying_capacity} pounds"
_respond "Character created date:        #{created_date}, which was #{character_created_this_many_days_ago / 365} years and #{character_created_this_many_days_ago % 365} days ago."
_respond "Citizenship:                   #{Char.citizenship}"
_respond "House/MHO membership:          #{@stats_house_membership}"
_respond "Base trading bonus:            #{trading_bonus}%"
_respond "Experience:                    #{@stats_percent_of_cap}% of cap" if @stats_current_level == 100
_respond "Experience:                    #{@stats_percent_towards_next_level}% towards next level, #{@stats_percent_of_cap}% towards cap" if @stats_current_level != 100
_respond "Fame:                          #{@stats_current_fame}"
_respond "Society:                       #{Society.member} rank #{Society.rank}" if @stats_voln_favor.nil? && @stats_gos_prestige.nil?
_respond "Society:                       #{Society.member} rank #{Society.rank}, favor: #{@stats_voln_favor}" if @stats_voln_favor
_respond "Society:                       #{Society.member} rank #{Society.rank}, prestige: #{@stats_gos_prestige}" if @stats_gos_prestige
_respond "Profession guild:              No guild affiliation." if @stats_current_guild_ranks.nil?
_respond "Profession guild:              #{@stats_current_guild_ranks}/#{@stats_max_guild_ranks} ranks in the #{Stats.prof} guild." if @stats_current_guild_ranks
_respond "Experience absorption:         #{experience_absorbed_on_node}/min on super node, #{experience_absorbed_off_node}/min off node. Both assume 1000 field exp. +1 if grouped"
_respond "Health regen:                  #{(race_base_health_regen + (Skills.physicalfitness / 20).truncate) + @stats_ascension_ranks_health_regen}/min"
_respond "Stamina regen:                 #{@stats_stamina_regen_rate}/min"
_respond "Mana regen:                    #{@stats_mana_regen_rate_on_node}/pulse on node, #{@stats_mana_regen_rate_off_node}/pulse off node"
_respond "Spirit regen:                  #{on_node_base_spirit_regen}/min on node, #{off_node_base_spirit_regen}/min off node"
_respond "Physical damage reduction:     #{@stats_physical_damage_reduction}%"
_respond "Magical damage reduction:      #{@stats_magical_damage_reduction}%"
_respond "MSTRIKE:                       #{unfocused_mstrike_number} unfocused targets, #{focused_mstrike_number} focused attacks."
_respond "MSTRIKE (bows/crossbows):      #{ranged_unfocused_mstrike_number} unfocused targets, #{ranged_focused_mstrike_number} focused attacks." if Stats.prof == "Ranger"
_respond "MSTRIKE (crossbows/hurl):      #{ranged_unfocused_mstrike_number} unfocused targets, #{ranged_focused_mstrike_number} focused attacks." if Stats.prof == "Rogue"
_respond "FoF foes ignored beyond 1:     #{fof_benefit}"
_respond "Melee aim base success:        #{melee_aim_hidden}% hidden, #{melee_aim_open}% open. Assumes 0 bonus from weapon, area, and target status. Max 95."
_respond "Hurling aim base success:      #{hurling_aim_open}% open. Assumes 0 bonus same as above. Max 95."
_respond "Ranged aim base success:       #{ranged_aim_hidden}% hidden, #{ranged_aim_open}% open. Same 0 bonus. +5 crossbow, +20 crossbow+kneeling. Max 75." if Stats.prof != "Ranger"
_respond "Ranged aim base success:       #{ranged_aim_hidden}% hidden, #{ranged_aim_open}% open. With 613. Same 0 bonus. +5 crossbow, +20 crossbow+kneeling. Max 75." if Stats.prof == "Ranger"
_respond "Natural crit padding:          #{[0, (enhanced_con_bonus / 5)].max}"
_respond "Natural melee crit weighting:  #{one_hand_open_crit_weighting} (assumes weapon speed 6 and 1 hand open), #{no_hand_open_crit_weighting} (assumes weapon speed 5 and no hand open)"
_respond "Natural bolt crit weighting:   #{(enhanced_int_bonus + enhanced_wis_bonus) / 6}"
_respond "Melee RT reduction:            #{agi_dex_bonus} seconds"
_respond "Ranged RT reduction:           #{enhanced_str_bonus / 10} seconds (doesn't include spells or other temporary boosts)"
_respond "Spell song duration:           #{Spellsong.duration / 60} minutes #{Spellsong.duration % 60} seconds" if Stats.prof == "Bard"
_respond
_respond "#{monsterbold_start}###################################################{monsterbold_end}\n"