=begin
    author: Lucullan
    date: 3/30/2025
    version: 0.1.0
	
    This script manages gemstone loadouts for use with the GEM system in-game. 
	
	Instead of remembering to GEM UNEQUIP 1, GEM UNEQUIP 2, GEM EQUIP 4 before going hunting, you can configure a loadout here.
	Say you create a special loadout for Nelemar to use all your fancy regionals
	Just open the configuration with ;gem_loadouts setup, then save your nelemar gem loadout (which gems you want active while
	hunting nelemar).
	
	Then:
	;gem_loadouts set nelemar

    USAGE:
      DO THIS FIRST!
      ;gem_loadouts --load        - Loads current GEM LIST ALL data and writes it to a YAML file
      
      ;gem_loadouts setup         - Opens the GUI for managing loadouts	  
      ;gem_loadouts set -name-    - Switches your currently equipped gems to the specified loadout
      ;gem_loadouts help          - Displays this message

    When using the GUI:
      - You can create a new loadout by naming it and selecting the gems.
      - You can delete a loadout by selecting it and clicking 'Delete This Loadout'.
      - Saving a loadout will update or create the entry without closing the window.
	
	Report bugs to Lucullan.
	
=end
require 'gtk3'
require 'yaml'

GEMSTONE_FILE = 'gemstones.yml'
CONFIG_FILE_NAME = 'gem_loadouts'

module ConfigManager
  def self.load_config(config_name, defaults = {})
    data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
    config_file_path = "#{data_dir}#{config_name}.yaml"

    config_data = if File.exist?(config_file_path)
                    YAML.load_file(config_file_path) || {}
                  elsif UserVars.respond_to?(config_name)
                    UserVars.send(config_name) || {}
                  else
                    {}
                  end

    config_data = defaults.merge(config_data)
    config_data
  end

  def self.save_config(config_name, data)
    data_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"
    config_file_path = "#{data_dir}#{config_name}.yaml"
    Dir.mkdir(data_dir) unless Dir.exist?(data_dir)

    begin
      File.open(config_file_path, "w") { |file| file.write(data.to_yaml) }
      echo("Preferences successfully saved to #{config_file_path}.")
    rescue StandardError => e
      echo("Failed to save preferences: #{e.message}")
    end
  end
end

# Parses the output of GEM LIST ALL
def parse_gem_output(lines)
  gems = {}
  current_gem = nil

  lines.each do |line|
    if line =~ /^Gemstone (\d+):.*?<d cmd='gem (?:un)?equip \d+'>(.*?)<\/d>(.*)$/
      gem_number = $1.to_i
      gem_name = $2.strip
      equipped = $3.include?("(equipped)")

      current_gem = gem_number
      gems[current_gem] = {
        'name' => gem_name,
        'equipped' => equipped,
        'powers' => []
      }
    elsif line =~ /^\s*\* <d cmd='gem info .*?'>(.*?)<\/d>(.*)$/
      power_name = $1.strip
      power_rank_info = $2.strip

      power = { 'name' => power_name }
      power['rank'] = power_rank_info.scan(/Rank (\d+) of (\d+)/).flatten.map(&:to_i) if power_rank_info =~ /Rank/

      gems[current_gem]['powers'] << power if current_gem
    end
  end

  gems
end

def load_gemstone_data
  lines = Lich::Util.issue_command("gem list all", /Gemstone 1|Message with no gemstones?/, silent: true, quiet: true)

  parsed_gems = parse_gem_output(lines)
  File.open(GEMSTONE_FILE, 'w') { |f| f.write(parsed_gems.to_yaml) }
  echo "Gemstone data loaded."
end

if script.vars[0] == 'help'
  puts <<~HEREDOC
    author: Lucullan
    date: 3/30/2025

    This script manages gemstone loadouts for use with the GEM system in-game.

    USAGE:
	  DO THIS FIRST!
	  ;gem_loadouts --load        - Loads current GEM LIST ALL data and writes it to a YAML file
      
	  ;gem_loadouts setup         - Opens the GUI for managing loadouts	  
      ;gem_loadouts set -name-    - Switches your currently equipped gems to the specified loadout
      ;gem_loadouts help          - Displays this message

    When using the GUI:
      - You can create a new loadout by naming it and selecting the gems.
      - You can delete a loadout by selecting it and clicking 'Delete This Loadout'.
      - Saving a loadout will update or create the entry without closing the window.
  HEREDOC
  exit
end

if script.vars.include?('--load')
  load_gemstone_data
  exit
end

if script.vars[1] == 'set'
  loadout_key = script.vars[2]&.downcase&.gsub(' ', '_')
  config = ConfigManager.load_config(CONFIG_FILE_NAME)
  lines = Lich::Util.issue_command("gem list all", /Gemstone 1|Message with no gemstones?/, silent: true, quiet: true)

  gems = parse_gem_output(lines)
  loadout = config['loadouts'][loadout_key]

  if loadout.nil?
    echo "Loadout not found: #{loadout_key}"
    exit
  end

  current_equipped = gems.select { |_, data| data['equipped'] }.keys.map(&:to_i)
  target_gems = loadout['gems'].map(&:to_i)

  to_unequip = current_equipped - target_gems
  to_equip = target_gems - current_equipped

  to_unequip.each { |id| fput "gem unequip #{id}" }
  to_equip.each { |id| fput "gem equip #{id}" }

  echo "Switched to loadout: #{loadout['name']}"
  exit
end

class GemLoadoutManager
  def initialize
    @config = ConfigManager.load_config(CONFIG_FILE_NAME, { 'loadouts' => {} })
    @gemstones = YAML.load_file(GEMSTONE_FILE)
  end

  def save_config
    ConfigManager.save_config(CONFIG_FILE_NAME, @config)
  end

  def run_gui
	  window_closed = false

	  Gtk.queue {
		window = Gtk::Window.new("Gem Loadout Manager")
		window.set_default_size(400, 400)

		vbox = Gtk::Box.new(:vertical, 10)
		window.add(vbox)

		loadout_selector = Gtk::ComboBoxText.new
		@config['loadouts'].each { |_, ld| loadout_selector.append_text(ld['name']) }
		vbox.pack_start(loadout_selector, expand: false, fill: false, padding: 5)

		loadout_name = Gtk::Entry.new
		loadout_name.placeholder_text = "Loadout Name"
		vbox.pack_start(loadout_name, expand: false, fill: false, padding: 5)

		gem_checks = {}
		@gemstones.each do |id, gem|
		  powers = gem['powers'].map { |p| p['name'] }.join(', ')
		  label = "#{gem['name']} (#{powers})"
		  checkbox = Gtk::CheckButton.new
		  checkbox.label = label
		  vbox.pack_start(checkbox, expand: false, fill: false, padding: 2)
		  gem_checks[id] = checkbox
		end

		loadout_selector.signal_connect("changed") do
		  selected = loadout_selector.active_text
		  matching = @config['loadouts'].find { |_, ld| ld['name'] == selected }
		  if matching
			key, data = matching
			loadout_name.text = data['name']
			gem_checks.each { |id, cb| cb.active = data['gems'].include?(id) }
		  end
		end

		save_button = Gtk::Button.new(label: "Save Loadout")
		save_button.signal_connect("clicked") do
		  selected_gems = gem_checks.select { |_, cb| cb.active? }.keys
		  ld_key = loadout_name.text.downcase.gsub(' ', '_')
		  @config['loadouts'][ld_key] = {
			'name' => loadout_name.text,
			'gems' => selected_gems
		  }
		  save_config
		  echo "Saved loadout: #{loadout_name.text}"
		  unless loadout_selector.active_text == loadout_name.text
			loadout_selector.append_text(loadout_name.text)
		  end
		end
		vbox.pack_start(save_button, expand: false, fill: false, padding: 5)

		delete_button = Gtk::Button.new(label: "Delete This Loadout")
		delete_button.signal_connect("clicked") do
		  ld_key = loadout_name.text.downcase.gsub(' ', '_')
		  if @config['loadouts'].key?(ld_key)
			@config['loadouts'].delete(ld_key)
			save_config
			echo "Deleted loadout: #{loadout_name.text}"
			loadout_selector.remove(loadout_selector.active)
			loadout_name.text = ""
			gem_checks.each { |_, cb| cb.active = false }
		  else
			echo "Loadout not found: #{loadout_name.text}"
		  end
		end
		vbox.pack_start(delete_button, expand: false, fill: false, padding: 5)

		window.signal_connect("destroy") { window_closed = true }

		window.show_all
	  }

	  wait_while { !window_closed }
  end
end

if script.vars[0] == 'setup' || script.vars.empty?
  manager = GemLoadoutManager.new
  manager.run_gui
  exit
end
