# iSing - Loresinging Made Easy
#
# Version 1.3
#
# Author: Ifor Get (DrunkenDurfin)
# Major help from: RaneCV - Could not have done the RegEx without you!
#
#
# Gemstone Shattered, where all the best scripts originate!

def recite_details(sing_details)
	recite = sing_details.join(';')
	if recite.length > 600
		sing_details.each {|r| fput "say #{r}"}
	else
		fput "recite #{recite}"
	end
end

def cmd_proc(cmd, start_regex, timeout = 0)
	wait_until { mana > 50 }
	DownstreamHook.remove("clib_#{cmd}_proc")
	start = false; finish = false
	action = proc { |ss|
		#return ss if !start ||= ss =~ start_regex
		ss, finish = yield(ss)
		DownstreamHook.remove("clib_#{cmd}_proc") if finish
		ss
	}
	DownstreamHook.add("clib_#{cmd}_proc", action)
	$_SERVER_.puts "<c>#{cmd}\n"
	t = Time.now;
	wait_until { finish or (timeout>0 and t+timeout<Time.now) }
end

def sing_info(cmd)
	info = []; catch = false
	cmd_proc(cmd, /As you sing(.*):|Your music surrounds(.*):/) { |ss|
		catch ||= ss =~ /\.\.\./
		info.push(ss.strip.gsub(/<.+?>/, '')) if catch and !ss.strip.empty? and ss !~ /Roundtime|prompt/
		[ss, ss =~ /prompt/]
}
	info
end

if script.vars.empty?
item = checkright
	fput "speak bard"
	fput "loresing #{item} that I hold;let your value now be told"
		waitrt?
		waitcastrt?
	fput "loresing #{item} that I hold;let your purpose now be told"
		waitrt?
		waitcastrt?
	fput "loresing #{item} that I hold;let your  magic now be told"
		waitrt?
		waitcastrt?
	fput "loresing #{item} that I hold;let your special ability now be told"
	fput "speak common"
elsif script.vars[1].downcase == 'help'

	respond
	respond 'Usage:'
	respond "   #{$clean_lich_char}#{script.name} help           show this message"
	respond "   #{$clean_lich_char}#{script.name} [no variable]  sings to item in your right hand"
	respond "   #{$clean_lich_char}#{script.name} bot            recites result of loresong for everyone to hear"
	respond "   #{$clean_lich_char}#{script.name} log            appends loresong info to iSing-LOG.txt located in your Lich\Scripts folder"
	respond
	exit
elsif script.vars[1].downcase == 'bot'
	
loop{
customer = ''
	customer = matchfind "? offers you"
		pause_script "warpwn"
	fput "accept"
	sleep 1
	item = checkright

	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your value now be told")
		waitrt?
		waitcastrt?
		sleep 1
	recite_details(sing_details)

	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your purpose now be told")
		waitrt?
		waitcastrt?
		sleep 1
	recite_details(sing_details)

	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your  magic now be told")
		waitrt?
		waitcastrt?
		sleep 1
	recite_details(sing_details)

	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your special ability now be told")
		waitrt?
		waitcastrt?
		sleep 1
	recite_details(sing_details)
	result = dothistimeout "give #{customer}", 35, /accepted|declined|expired/
		if result =~ /expired|declined/
			fput "whisper #{customer} Sorry, the offer was not accepted.  Please contact me later and I will return the item.  Sorry for the inconvience, this is a new script."
			fput "stow right"
		end
	sing_details = []
		unpause_script "warpwn"
}

elsif script.vars[1].downcase == 'log'
log_file = "#{$script_dir}iSing-LOG-#{Time.now.strftime("%Y-%m-%d")}.txt"
    file = File.open(log_file, File::WRONLY|File::APPEND|File::CREAT) 
    
    before_dying { file.close }

item = checkright

fput "glance"

	if get =~ /^You glance down to see(.*) in your right hand(.*)$/
		fullitemname = $1
		#fput "recite #{fullitemname}"
		fullitemname[0] = ''
		space = "=========================="
	end

	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your value now be told")
		sleep 1
		waitrt?
		waitcastrt?
		sleep 1
	#file.write("#{sing_details.join(';')}\n")
	#echo sing_details
	
	log_detail = sing_details.to_s
	#echo log_detail
	
	if log_detail.include? "weight"
		weight = (log_detail.split(', which is about')[1]).split('pounds')
		totalweight = "Weight =" + weight[0] + "lbs."
	else
		totalweight = "Weight = less than 2 lbs."
	end
	
	if log_detail.include? "worth"
		value = (log_detail.split('worth')[1]).split('silvers')
		totalvalue = "Value =" + value[0] + "silvers."
	end
	
	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your purpose now be told")
		sleep 1
		waitrt?
		waitcastrt?
		sleep 1
	#file.write("#{sing_details.join(';')}\n")
	log_detail = sing_details.to_s
	#echo log_detail
	
	if log_detail.include? "refilled"
		rechargable = "Mage Rechargeable"
	end
	
	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your  magic now be told")
		sleep 1
		waitrt?
		waitcastrt?
		sleep 1
	#file.write("#{sing_details.join(';')}\n")
	log_detail = sing_details.to_s
	#echo log_detail
		
	if log_detail.include? "from a normal"
		bonus = (log_detail.split('a bonus of')[1]).split('from')
		totalbonus = "Bonus of:" + bonus[0]
	end

	if log_detail.include? "imbedded"
		imbed = "Imbeddable for " + log_detail.split('contain ')[1]
		imbed = imbed.split('.",')
		imbed = "#{imbed[0]}"
	end
	
	sing_details = []
	sing_details += sing_info("loresing #{item} that I hold;let your special ability now be told")
		sleep 1
		waitrt?
		waitcastrt?
		sleep 1
	#file.write("#{sing_details.join(';')}\n")
	log_detail = sing_details.to_s
	#echo log_detail
	
	if log_detail.include? "infused"
		flares = (log_detail.split('infused with')[1]).split('.",')
		totalflare = "Flares =" + flares[0]
	end
	
	if log_detail.include? "allows a caster"
		flares = (log_detail.split('granting')[1]).split('.",')
		totalflare = "Flares = acuity: " + flares[0]
	end
	
	if log_detail.include? "contains the spell"
		spell = (log_detail.split('circle')[0]).split('the spell')[1]
		if rechargable
			spell = "Mage Rechargeable#{spell}"
		end
		spell = "#{spell}circle"
	end
	
	if log_detail.include? "sanctified"
		sanctified = "Sanctified"
	end
	
	if log_detail.include? "extra damage"
		if log_detail.include? "temporary"
			temporary = "Temporary "
		end
		dweighted = "Damage Weighted"
	end
	
	if log_detail.include? "more fearsome"
		if log_detail.include? "temporary"
			temporary = "Temporary "
		end
		cweighted = "Critical Weighted"
	end

	if log_detail.include? "aiming attacks"
		if log_detail.include? "temporary"
			temporary = "Temporary "
		end
		sighted = "Sighting"
	end
	
	if log_detail.include? "severity of inflicted"
		if log_detail.include? "temporary"
			temporary = "Temporary "
		end
		cpadded = "Critical Padding"
	end

	if log_detail.include? "protect from additional damage"
		if log_detail.include? "temporary"
			temporary = "Temporary "
		end
		dpadded = "Damage Padding"
	end

	if log_detail.include? "protect from magical attacks"
		if log_detail.include? "temporary"
			temporary = "Temporary "
		end
		mpadded = "TD Bonus"
	end
	
	if log_detail.include? "resistant to"
		resistance = log_detail.split('determine')[1]
		resistance = resistance[12...-3]
	end
	
	if log_detail.include? "enhances"
		sentences = log_detail.split('following ways:", ')
		enhancements = sentences[1].split('.",')
		enhance_count = enhancements.length - 2
		i = 0
		enhancive = Array.new
		until i >= enhance_count
			bonus = enhancements[i].split('boost of ')
			limit = enhancements[i+1].split('have not ')
			if bonus[1].length > 5
				addtoarray = "#{bonus[1]} for those who have #{limit[1]}"
				enhancive << "#{addtoarray}"
			end
			i = i+2
		end
		charges = (log_detail.split('looks to have')[1]).split('remaining')[0]
		charges = "It has #{charges} remaining.\n"
	end
	
	if log_detail.include? "enhancive charge has been expended"
		crumbly = log_detail.split('.",')
		if crumbly[crumbly.length-1].include? "enhancive"
			crumblyen = crumbly[crumbly.length-1]
			crumblyen = crumblyen[2...-3]
		else
			crumblyen = crumbly[crumbly.length-2]
			crumblyen = crumblyen[2...-1] + "d"
		end
    end
	
	if log_detail.include? "magical charge has been expended"
		crumbly = log_detail.split('.",')
		crumblyim = crumbly[crumbly.length-1]
		crumblyim = crumblyim[2...-3]
    end
			
	file.write("\n#{space}\n")
	file.write("#{fullitemname}\n")
	if totalweight 
		file.write("#{totalweight}\n") 
	end
	if totalvalue 
		file.write("#{totalvalue}\n") 
	end
	if totalbonus 
		file.write("#{totalbonus}\n") 
	end 
	if imbed 
		file.write("#{imbed}\n") 
	end
	if totalflare 
		file.write("#{totalflare}\n") 
	end
	if spell 
		file.write("#{spell}\n") 
	end
	if sanctified 
		file.write("#{sanctified}\n") 
	end
	if temporary 
		file.write("#{temporary}") 
	end
	if dweighted 
		file.write("#{dweighted}\n") 
	end
	if cweighted 
		file.write("#{cweighted}\n") 
	end
	if sighted 
		file.write("#{sighted}\n") 
	end
	if cpadded 
		file.write("#{cpadded}\n") 
	end
	if dpadded 
		file.write("#{dpadded}\n") 
	end
	if mpadded 
		file.write("#{mpadded}\n") 
	end
	if resistance 
		file.write("#{resistance}\n") 
	end
	if enhancive
		enhancive.each { |x| file.write("#{x}\n") }
		#file.write("#{enhancive}\n") 
	end
	if crumblyen
		file.write("#{crumblyen}\n") 
	end
	if crumblyim
		file.write("#{crumblyim}\n") 
	end
		
	sing_details = []
end


