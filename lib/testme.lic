=begin

	Will perform every action your character is capable of to find information about an item. The script will list all important information it found in a neat list for easy viewing. Information such as weight, 	enchant level, any 		zests the script may have found, wearable location, etc.

	Usage:
	;vars set testme_save=yes if you want all results to be stored in a text file log. (this only needs to be done once.)

	;testme will perform every test except loresinging and warrior assessing.
	;testme skip Will skip the zest test portion of the script.
	;testme lore will perform every test including loresinging (bards only).
	;testme ass will perform every test including warrior assessing (warriors only).
	;testme wait will wait for someone to hand you something then you will warrior assess the item, whisper the person what you found, and hand the item back (warriors only.)
	;testme all-<container-name> will have the script go through every item in said container Example ;testme all-cloak would go through all items in your cloak.
	;testme all-locker will have the script go through your locker (or all locker containers if premium) and test all items inside your locker.
	;testme name-<person's name> will perform every test including loresinging and if weighting/padding is found it will hand the item to the specified warrior who will then assess the item, whisper the results back and hand the item back. The warrior assess information will show up in the list of item properties (bards only.) For example ;testme name-Dreaven
	
	THE ABOVE COMMANDS CAN BE IN ANY COMBINATION OR IN ANY ORDER. FOR EXAMPLE DOING: 
	
	;testme skip lore all-cloak
	
	Will do the same thing as doing:
	
	;testme all-cloak lore skip
	
	;testme other will set your character up to wait for someone to hand them an item. You will then loresing the item if you're a bard or assess the item if you're a warrior. You will then hand the item back to the person who gave it to you and whisper the relevant results to them. Using this option automatically skips zest tests and will perform loresinging/assessing, so no other variables are needed with this option.
	
	WARNING
	Be careful using this script on the same item twice in a row, if you have orbs in your fusion gear then the script exhaling on them twice will remove it's enhancive properties. This will not be a problem if you only use the 		script once on the same item every 30 seconds.
	WARNING

	The following properties WILL NOT show up:

	rare properties/properties that don't have a consistent loresong such as x/day items, poison flares, shadowdeath, etc etc.

	The zest test portion of the script works best if you're not lagging and you're alone in a room and don't do anything while the script is running.

	Author: Tgo01
	Version: 47

=end

$number_of_loresongs_given = 0

zest = [ "rub", "read", "slap", "polish", "preen", "attend", "dust", "exhale", "clench", "grip", "tilt", "tap", "pet", "pinch", "poke", "push", "press", "pound", "pull", "prod", "turn", "twist", "eat", "smooch", "hug", "kiss", "tickle", "clean", "ponder", "peer", "stare", "point", "pluck", "kick", "nudge", "spin", "roll", "touch", "lick", "hiss", "gaze", "lean", "rest", "flip", "wave", "raise", "hold", "toss", "open", "close", "wear", "remove" ]

(successful_zest = Array.new;fresults = Array.new;zresults = Array.new;results = Array.new;iresults = Array.new;eresults = Array.new;wresults = Array.new;zest_test_number = -1;item_description = nil;count = 0;zest_found = 0;display_results = nil;item = nil;itemname = nil;warrior_assess = nil;wait_mode = nil;person = nil;gem_number = 0;fusion_socket_count = nil;empty_fusion_sockets = nil;do_all = nil;do_all_container = nil;test_stuff = nil;wearing_item = nil;skip_zest_test = nil)

locker_already_checked = nil
number_of_tries = 0
loresing_or_assess = nil
warrior_wait = nil
get_assess_info = nil
assess_info_name = nil
customer_mode = nil
wait_in_customer_mode = nil
customer_name = nil
give_customer_item_back = nil
what_to_whisper = nil
customer_canceled = nil
locker_contents = nil
$currently_singing_to_an_item = nil
silence_it = nil
locker_id = nil
all_locker_items_names = Array.new
locker_container_count = 0
locker_name = nil
duplicate_items = Array.new
temp_item_name = nil
new_locker_container_to_check = nil
all_locker_containers_checked = Array.new
locker = nil
temp_line = Array.new
check_temp_lines = nil

check_temp_lines = proc{
	temp_line.each{|line|
		if line =~ /The .* contains the spell (.*), from the .*/i
			results[7] = "Spell: #$1"
		end
		if line =~ /.* is for healing/i
			results[4] = "Purpose: herb"
		end
		if line =~ /.* infused .* (earth|corrosive|ice|fire|vibration|lightning|disrupting|holy|flaming|steam|dark|disintegrating)/i
			results[31] = $1
			if results[31] =~ /corrosive/i
				results[31] = "acid"
			end
			if results[31] =~ /flaming/i
				results[31] = "plasma"
			end
			if results[31] =~ /disrupting/i
				results[31] = "disruption"
			end
			if results[31] =~ /dark/i
				results[31] = "vacuum"
			end
			if results[31] =~ /ice/i
				results[31] = "cold"
			end
			if results[31] =~ /disintegrating/i
				results[31] = "disintegration"
			end
			results[31] = "Flares: #{results[31]}"
		end
		if line =~ /allows a caster to occasionally focus their magical prowess for a single cast/i
			results[31] = "Flares: acuity"
		end
		if line =~ /infused with mana/i
			results[31] = "Flares: mana"
		end
		if line =~ /infused with the power of a strange anti\-magical substance/i
			results[31] = "Flares: dispel"
		end
		if line =~ /cause their skin and muscles/i
			results[31] = "Flares: bubble"
		end
		if line =~ /grappling force/i
			results[31] = "Flares: grappling"
		end
		if line =~ /unbalanc/i
			results[31] = "Flares: unbalancing"
		end
		if line =~ /.* inflicts more fearsome wounds when it strikes/i
			results[18] = "Weighted: crit"
		end
		if line =~ /does extra damage when it strikes/i
			results[18] = "Weighted: damage"
		end
		if line =~ /.* has been enchanted by (.*)\./i
			results[8] = "Enchanted by: #$1"
		end
		if line =~ /It provides a boost of (.*)\./i
			if results[9] == nil
				results[9] = $1
				results[9] += " Stat" if (results[9] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[9] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
			end
		end
		if line =~ /It provides a boost of (.*)\./i
			if results[10] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
				results[10] = $1
				results[10] += " Stat" if (results[10] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[10] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
			end
		end
		if line =~ /It provides a boost of (.*)\./i
			if results[11] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
				results[11] = $1
				results[11] += " Stat" if (results[11] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[11] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
			end
		end
		if line =~ /It provides a boost of (.*)\./i
			if results[12] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
				results[12] = $1
				results[12] += " Stat" if (results[12] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[12] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
			end
		end
		if line =~ /It provides a boost of (.*)\./i
			if results[13] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
				results[13] = $1
				results[13] += " Stat" if (results[13] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[13] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
			end
		end
		if line =~ /It provides a boost of (.*)\./i
			if results[14] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
				results[14] = $1
				results[14] += " Stat" if (results[14] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[14] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
			end
		end
		if line =~ /have (.*) (of|amount) .*charges remaining./i
			results[15] = "Charges remaining: #$1"
		end
		if line =~ /have more than your average (.*) could count charges remaining./i
			results[15] = "Charges remaining: more than your average #$1 could count"
		end
		if line =~ /looks to have quite a few charges remaining/
			results[15] = "Charges remaining: quite a few"
		end
		if line =~ /will persist.* enhancive .*/i
			results[16] = "Persists on enhancive: Yes"
		end
		if line =~ /will crumble .* enhancive .*/i
			results[16] = "Crumbly on enhancive: Yes"
		end
		if line =~ /.* will (shatter|disintegrate|dust) after its last magical charge has been expended/i
			results[17] = "Crumbly on magical charge: Yes"
		end
		if line =~ /will persist after its last magical charge has been expended./i
			results[17] = "Persists on magical charge: Yes"
		end
		if line =~ /.* serves to protect from magical attacks by providing \+(\d+) Target Defense\./i
			results[27] = "TD Bonus: #{$1}"
		end
		if line =~ /sanctified/i
			results[32] = "Sanctified: Yes"
		end
		if line =~ /protect from additional damage/i
			results[34] = "Padding: damage"
		end
		if line =~ /severity of inflicted wounds/i
			results[34] = "Padding: crit"
		end
		if line =~ /As your song penetrates .* you determine that it is (.*)\./i
			results[35] = "Resistances: #$1"
		end
		if line =~ /The notes of your song snag briefly on some custom fittings\, and you sense that the (.*) was/
			results[46] = "Temporary Warrior fittings: #{$1}"
		end
		if line =~ /Odd sensations ripple through your body as your voice begins to coax information out of/i
			results[1] = "Shadowdeath Weapon"
		end
		if line =~ /assists its bearer with aiming attacks/i
			results[39] = "Sighted: Yes"
		end
		if line =~ /.* when employed against (.*)./i
			results[40] = $1
			if line =~ /fearsome/i
				results[40] = "Bane: crit weighted against #{results[40]}"
			elsif line =~ /damage/i
				results[40] = "Bane: damage weighted against #{results[40]}"
			elsif line =~ /(earth|corrosive|ice|fire|vibration|lightning|disrupting|holy|flaming|steam|dark|disintegrating)/i
				results[40] = "Bane: #$1 flares against #{results[40]}"	
			elsif line =~ /allows a caster to occasionally focus their magical prowess for a single cast/i
				results[40] = "Bane: acuity flares against #{results[40]}"	
			elsif line =~ /skin and muscles/i
				results[40] = "Bane: bubble flares against #{results[40]}"
			elsif line =~ /grappling/i
				results[40] = "Bane: grappling flares against #{results[40]}"
			elsif line =~ /unbalanc/i
				results[40] = "Bane: unbalancing flares against #{results[40]}"
			elsif line =~ /enchant/i
				results[40] = "Bane: enchant bonus against #{results[40]}"
			else
				results[40] = "A bane was detected but I couldn't tell which type of bane, here is the relevant loresing line, please provide this information to the author: #{line}"
			end	
		end
		if line =~ /before its enhancement has completely degraded away\./i
			results[100] = "Temporary enhancement"
		end
		if line =~ /withstand an? (.*) of uses before its enhancement has completely degraded away\./i
			results[100] = "Temporary enhancement charges: #$1"
		end
		if line =~ /withstand quite a few uses before its enhancement has completely degraded away\./i
			results[100] = "Temporary enhancement charges: quite a few"
		end
		if line =~ /When its enhancement has degraded away/i
			results[101] = "Temporary enhancement: #{line}"
		end
		if line =~ /permanently blessed/i
			results[42] = "Permanently blessed: Yes"
		end
		if line =~ /helps defend the one who wields it by granting \+(\d+) Defensive Bonus/i
			results[43] = "Defender Bonus: +#{$1}"
		end
		if line =~ /grants a quicker recovery to the deceased when it is waved over the corpse/i
			results[44] = "Chrism: Yes"
		end
		if line =~ /This .* may not be used by the following .*\: (.*)/
			results[45] = "Item Restrictions: #{$1}"
		end
		if line =~ /It is empowered and can be charged for an additional (\d+) charge/i
			results[102] = "Empowered: Yes for up to #$1 charges"
		end
	}
}

silence_it = proc{
	action = proc { |server_string|
		if server_string =~ /Please rephrase that command\./
			DownstreamHook.remove("#{script.name}_silence_it")
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence_it", action)
		silence_me
		fput "stuff incoming"
		silence_me
}

before_dying { DownstreamHook.remove("#{script.name}_silence_it") }

wait_in_customer_mode = proc{
	loop{
		until checkright == nil
			waitrt?
			fput "stow right" if checkright
			sleep 0.2
		end
		until checkleft == nil
			waitrt?
			fput "stow left" if checkleft
			sleep 0.2
		end
		fput "accept"
		while line = get
			if line =~ /^([a-zA-Z]+) offers you .*\.  Click ACCEPT to accept the offer or DECLINE to decline it\.  The offer will expire in 30 seconds\./ || line =~ /^You accept ([a-zA-Z]+)\'s offer/
				customer_name = $1
				$currently_singing_to_an_item = true
				customer_canceled = nil
				waitrt?
				if line =~ /Click ACCEPT to accept/
					fput "accept"
					while line = get
						if line =~ /^You accept/
							break
						elsif line =~ /^You could not possibly accept all that extra weight\!/
							fput "whisper ooc #{customer_name} Sorry, I am too encumbered at the moment. Let me fix this."
							$currently_singing_to_an_item = nil
							exit
						elsif line =~ /[a-zA-Z]+ has cancelled the offer\.|You both have to be in the same place for that\.|^You have no offers to accept\./
							customer_canceled = true
							break
						end
					end
				end
				if customer_canceled
					$currently_singing_to_an_item = nil
					break
				else
					fput "swap" if checkright == nil
					wait_until { checkright }
					item = GameObj.right_hand.id
					test_stuff.call
					$number_of_loresongs_given += 1 if checkname == "Vonaq"
					break
				end
			end
		end
	}
}

give_customer_item_back = proc{
	waitrt?
	fput "cancel"
	if checkright.nil?
		nil
	elsif number_of_tries > 5
		$currently_singing_to_an_item = nil
		waitrt?
	else
		result = dothistimeout "give #{customer_name}", 2, /You offer your|\.\.\.wait (\d+) seconds\./
		if result =~ /\.\.\.wait (\d+) seconds\./
			sleep $1.to_i
			give_customer_item_back.call
		elsif result =~ /You offer your/
			while line = get
				if line =~ /^[a-zA-Z]+ has accepted your|What is it you\'re trying to give\?|What are you trying to give\?/
					$currently_singing_to_an_item = nil
					waitrt?	
					number_of_tries += 1
					break
				elsif line =~ /^[a-zA-Z]+ already has an outstanding offer\./
					sleep 5
					number_of_tries += 1
					give_customer_item_back.call
					break
				elsif line =~ /^Your offer to [a-zA-Z]+ has expired\.|^[a-zA-Z]+ has declined the offer\./
					number_of_tries += 1
					give_customer_item_back.call
					break
				end
			end
		elsif result.nil?
			give_customer_item_back.call
		end
	end
}

wait_mode = proc{
	while line = get
		if line =~ /(.*) offers you/i
			person = $1
			break
		end
	end
	fput "accept"
	sleep 1
	wait_until { checkright }
	fput "assess #{checkright}"
	while line = get
		if line =~ /it looks like it is (.*) padded against critical blows./
			wresults[1] = "Padding: #$1 crit padded"
		elsif line =~ /it looks like it is (.*) padded, lessening the damage the wearer takes./
			wresults[1] = "Padding: #$1 damage padded"
		elsif line =~ /it looks like it is (.*) weighted to inflict more damage./
			wresults[1] = "Weighting: #$1 damage weighted"
		elsif line =~ /it looks like it is (.*) weighted to inflict more critical blows/
			wresults[1] = "Weighting: #$1 crit weighted"
		elsif line =~ /it looks like it is weighted to inflict more damage/
			wresults[1] = "Weighting: damage weighted, couldn't detect amount"
		elsif line =~ /it looks like it is weighted to inflict more critical blows/
			wresults[1] = "Weighting: crit weighted, couldn't detect amount"
		elsif line =~ /it looks like it is padded against critical blows./
			wresults[1] = "Padding: #$1 crit padded, couldn't detect amount"
		elsif line =~ /it looks like it is padded, lessening the damage the wearer takes./
			wresults[1] = "Padding: #$1 damage padded, couldn't detect amount"
		elsif line =~ /It appears to have .* \((.*)\) to cause critical wounds\./
			wresults[1] = "Weighting: #$1 crit weighted"
		elsif line =~ /(but note nothing unusual about it|learn nothing)/
			wresults[1] = "Couldn't detect any weighting or padding"
		end
		break if line =~ /but note nothing unusual about it|weighted|padded|nothing more/i
	end
	fput "whisper #{person} #{wresults[1]}"
	waitrt?
	fput "cancel"
	fput "give #{person}"
	wait_mode.call
}

warrior_assess = proc{
	fput "assess ##{item}"
	while line = get
		if line =~ /it looks like it is (.*) padded against critical blows./
			wresults[1] = "Padding: #$1 crit padded"
		elsif line =~ /it looks like it is (.*) padded, lessening the damage the wearer takes./
			wresults[1] = "Padding: #$1 damage padded"
		elsif line =~ /it looks like it is (.*) weighted to inflict more damage./
			wresults[1] = "Weighting: #$1 damage weighted"
		elsif line =~ /it looks like it is (.*) weighted to inflict more critical blows/
			wresults[1] = "Weighting: #$1 crit weighted"
		elsif line =~ /it looks like it is weighted to inflict more damage/
			wresults[1] = "Weighting: damage weighted, couldn't detect amount"
		elsif line =~ /it looks like it is weighted to inflict more critical blows/
			wresults[1] = "Weighting: crit weighted, couldn't detect amount"
		elsif line =~ /it looks like it is padded against critical blows./
			wresults[1] = "Padding: #$1 crit padded, couldn't detect amount"
		elsif line =~ /it looks like it is padded, lessening the damage the wearer takes./
			wresults[1] = "Padding: #$1 damage padded, couldn't detect amount"
		elsif line =~ /It appears to have .* \((.*)\) to cause critical wounds/
			wresults[1] = "Weighting: #$1 crit weighted"
		elsif line =~ /but note nothing unusual about it./
			wresults[1] = "Couldn't detect any weighting or padding"
		end
		break if line =~ /but note nothing unusual about it|weighted|padded/i
	end
}

display_results = proc{
	respond "\n"
	respond "*************************"
	respond "#{checkname}'s #{do_all_container}" if do_all
	respond "#{itemname}"
	respond "Look description: #{item_description}"
	respond "\n" if results[1] != nil
	respond "Loresong information" if results[1] != nil
	results[9] = "Enhancive bonus: #{results[9]}" if results[9] != nil
	results[10] = "Enhancive bonus: #{results[10]}" if results[10] != nil
	results[11] = "Enhancive bonus: #{results[11]}" if results[11] != nil
	results[12] = "Enhancive bonus: #{results[12]}" if results[12] != nil
	results[13] = "Enhancive bonus: #{results[13]}" if results[13] != nil
	results[14] = "Enhancive bonus: #{results[14]}" if results[14] != nil
	results.each{|i|
		respond "#{i}" if i != nil
	}
	respond "\n"
	respond "Inspect/Analyze Information"
	iresults.each{|i|
		respond "#{i}" if i != nil
	}
	respond "\n" if eresults[1] != nil
	respond "Ensorcell Information" if eresults[1] != nil
	eresults.each{|i|
		respond "#{i}" if i != nil
	}
	respond "\n" if wresults[1] != nil
	respond "Warrior assess Information" if wresults[1] != nil
	wresults.each{|i|
		respond "#{i}" if i != nil
	}
	respond "\n" if fresults[1] != nil
	respond "Fusion Information" if fresults[1] != nil
	fresults.each{|i|
		respond "#{i}" if i != nil
	}

	zresults.each{ |i|
		if i != nil
			zest_found = 1
		end
	}

	if zest_found == 0
		respond "\n"
		respond "I didn't find any zests."
		respond "*************************"
		respond "\n"
	else
		respond "\n"	
		respond "The following may be zests:"
		zest_test_number = -1
		loop{
			zest_test_number = zest_test_number + 1
			respond "#{zresults[zest_test_number]}: #{successful_zest[zest_test_number]}" if zresults[zest_test_number] != nil and successful_zest[zest_test_number] != nil
			respond "#{zresults[zest_test_number]}: Couldn't detect anything, you may have been lagging. Try performing verb later." if zresults[zest_test_number] != nil and successful_zest[zest_test_number] == nil
			break if zest[zest_test_number] == "remove"
		}

	respond "*************************"
	respond "\n"
	end

	if UserVars.testme_save == "yes"
		Script.log "\n"
		Script.log "*************************"
		Script.log "#{checkname}'s #{do_all_container}" if do_all
		Script.log "\n"
		Script.log "#{itemname}"
		Script.log "Look description: #{item_description}"
		Script.log "\n" if results[1] != nil
		Script.log "Loresong information" if results[1] != nil
		results.each{|i|
			Script.log "#{i}" if i != nil
		}
		Script.log "\n"
		Script.log "Inspect/Analyze Information"
		iresults.each{|i|
			Script.log "#{i}" if i != nil
		}
		Script.log "\n" if eresults[1] != nil
		Script.log "Ensorcell Information" if eresults[1] != nil
		eresults.each{|i|
			Script.log "#{i}" if i != nil
		}
		Script.log "\n" if wresults[1] != nil
		Script.log "Warrior assess Information" if wresults[1] != nil
		wresults.each{|i|
			Script.log "#{i}" if i != nil
		}
		Script.log "\n" if fresults[1] != nil
		Script.log "Fusion Information" if fresults[1] != nil
		fresults.each{|i|
			Script.log "#{i}" if i != nil
		}
	
		zresults.each{ |i|
			if i != nil
				zest_found = 1
			end
		}

		if zest_found == 0
			Script.log "\n"
			Script.log "I didn't find any zests."
			Script.log "*************************"
			Script.log "\n"
		else	
			Script.log "\n"	
			Script.log "The following may be zests:"
			zest_test_number = -1
			loop{
				zest_test_number = zest_test_number + 1
				Script.log "#{zresults[zest_test_number]}: #{successful_zest[zest_test_number]}" if zresults[zest_test_number] != nil and successful_zest[zest_test_number] != nil
				Script.log "#{zresults[zest_test_number]}: Couldn't detect anything, you may have been lagging. Try performing verb later." if zresults[zest_test_number] != nil and successful_zest[zest_test_number] == nil
				break if zest[zest_test_number] == "remove"
			}

		Script.log "*************************"
		Script.log "\n"
		end
	end
}

test_stuff = proc{
	fput "glance"
	while line = get
		if line =~ /You glance down to see (.*) in your right hand/i
			itemname = $1
		end
		break if line =~ /left hand/i
	end
	(waitrt?;waitcastrt?)
	if Spell[405].known?
		(waitrt?;waitcastrt?)
		(echo "Waiting for mana." if checkmana < 5;wait_until { checkmana >= 5 })
		Thread.new {
			sleep 3
			silence_it.call
		}
		start_time = Time.now
		multifput "prep 405", "cast at ##{item}"
		while line = get
			if line =~ /has (.*) layers? of (.*) necrotic energy upon it/i
				eresults[2] = "Ensorcell level: #$1 #$2"
			end
			break if line =~ /Cast Roundtime/i
			break if Time.now > start_time + 2
		end
	end

	waitrt?
	Thread.new {
		sleep 3
		silence_it.call
	}
	start_time = Time.now
	fput "analyze ##{item}"
	while line = get
		if line =~ /may or may not be able to be worked on by a merchant alterer/
			iresults[20] = "Alteration restrictions: Unknown"
		end
		if line =~ /.* sense that the item is free from merchant alteration restrictions/
			iresults[20] = "Alteration restrictions: None"
		end
		if line =~ /item is largely free from merchant/
			iresults[20] = "Alteration restrictions: Yes"
		end
		if line =~ /You sense that this item can be altered in any way./
			iresults[20] = "Alteration restrictions: You sense that this item can be altered in any way."
		end
		if line =~ /You get no sense of whether or not .* may be further lightened./i
			iresults[21] = "Can be lightened: Unknown"
		end
		if line =~ /You might be able to have a talented merchant lighten/i
			iresults[21] = "Can be lightened: Yes"
		end
		if line =~ /is as light as it can get/i
			iresults[21] = "Max lightened: Yes"
		end
		if line =~ /have its pockets deepened|or deepen its pockets/i
			iresults[22] = "Pockets can be deepened: Yes"
		end
		if line =~ /pockets could not possibly get any deeper/i
			iresults[22] = "Pockets can be deepened: No"
		end
		if line =~ /appears to be a modified (.*)/i
			iresults[23] = "Weapon: Modified #$1"
		end
		if line =~ /This armor has been designed to provide mechanical benefit to members of the Order of Voln\./
			iresults[31] = "Voln Armor: Yes"
		end
		if line =~ /This item is currently Tier (\d+) \(of (\d+)\) with (\d+) \(of (\d+)\) spider\(s\)\./
			iresults[32] = "Spider bag info: Tier #{$1} (of #{$2}) with #{$3} (of #{$4}) spiders"
		end
		break if Time.now > start_time + 2
	end

	waitrt?
	Thread.new {
		sleep 3
		silence_it.call
	}
	start_time = Time.now
	fput "inspect ##{item}"
	while line = get
		if line =~ /appears to be a modified (.*)\./i
			iresults[23] = "Weapon: Modified #$1"
		end
		if line =~ /armor that covers the (.*)\./i
			iresults[23] = "Armor coverage: #$1"
		end
		if line =~ /that it is a (.*) shield that protects/i
			iresults[23] = "Shield size: #$1"
		end
		if line =~ /cloth armor/i
			iresults[24] = "Armor: cloth armor"
		end
		if line =~ /soft leather armor that covers the torso only./i
			iresults[24] = "Armor: light leather"
		end
		if line =~ /soft leather armor that covers the torso and arms./i
			iresults[24] = "Armor: full leather"
		end
		if line =~ /soft leather armor that covers the torso, arms, and legs./i
			iresults[24] = "Armor: reinforced leather"
		end
		if line =~ /soft leather armor that covers the torso, arms, legs, neck, and head./i
			iresults[24] = "Armor: double leather"
		end
		if line =~ /rigid leather armor that covers the torso only./i
			iresults[24] = "Armor: leather breastplate"
		end
		if line =~ /rigid leather armor that covers the torso and arms./i
			iresults[24] = "Armor: cuirbouilli leather"
		end
		if line =~ /rigid leather armor that covers the torso, arms, and legs./i
			iresults[24] = "Armor: studded leather"
		end
		if line =~ /rigid leather armor that covers the torso, arms, legs, neck, and head./i
			iresults[24] = "Armor: brigadine armor"
		end
		if line =~ /chain armor that covers the torso only./i
			iresults[24] = "Armor: chain mail"
		end
		if line =~ /chain armor that covers the torso and arms./i
			iresults[24] = "Armor: double chain"
		end
		if line =~ /chain armor that covers the torso, arms, and legs./i
			iresults[24] = "Armor: augmented chain"
		end
		if line =~ /chain armor that covers the torso, arms, legs, neck, and head./i
			iresults[24] = "Armor: chain hauberk"
		end
		if line =~ /plate armor that covers the torso only./i
			iresults[24] = "Armor: metal breastplate"
		end
		if line =~ /plate armor that covers the torso and arms./i
			iresults[24] = "Armor: augmented plate"
		end
		if line =~ /plate armor that covers the torso, arms, and legs./i
			iresults[24] = "Armor: half plate"
		end
		if line =~ /plate armor that covers the torso, arms, legs, neck, and head./i
			iresults[24] = "Armor: full plate"
		end
		if line =~ /.* you could wear .* (finger|neck|belt|chest|shoulders|back|head|feet|anywhere|ankle|wrist|ear)/i
			iresults[25] = "Wearable location: #$1"
			if line =~ /hanging it from your shoulders/
				iresults[25] = "Wearable location: cloak-worn"
			elsif line =~ /slinging it across your shoulders and back/
				iresults[25] = "Wearable location: shoulder"
			elsif line =~ /on your back/
				iresults[25] = "Wearable location: back"
			end
		end
		if line =~ /can store an? (.*) with enough space/i
			iresults[26] = "Storage capacity: #$1"
		end
		if line =~ /with enough space for (.*) of? items?/i
			iresults[28] = "Storage number of items: #$1"
		end
		if line =~ /You also notice that it is spiked./i
			iresults[28] = "Spiked: Yes"
		end
		if iresults[23] =~ /twohanded sword/i and item == "claidhmore"
			iresults[29] = "Oldstyle claidhmore: Yes"
		end
		if line =~ /can hold liquids/i
			iresults[29] = "Can hold liquids: Yes"
		end
		break if Time.now > start_time + 2
	end


	Thread.new {
		sleep 3
		silence_it.call
	}
	start_time = Time.now
	fput "look at ##{item}"
	while line = get
		if line =~ /strange necrotic haze radiates/i
			eresults[1] = "Ensorcelled: Yes"
		end
		if line =~ /split weapon/i
			results[41] = "Split weapon: Yes"
		end
		if line =~ /You see nothing unusual/i
			item_description = line
		end
		if line =~ /#{checkright}/i
			item_description = line
		end
		if line =~ /(One|Two|Three|Four|Five|Six) spherical depressions adorn .*/i
			fusion_socket_count = 1 if $1 == "One"
			fusion_socket_count = 2 if $1 == "Two"
			fusion_socket_count = 3 if $1 == "Three"
			fusion_socket_count = 4 if $1 == "Four"
			fusion_socket_count = 5 if $1 == "Five"
			fusion_socket_count = 6 if $1 == "Six"
			if line =~ /All of the gem chambers are currently empty./i
				fresults[1] = "Total sockets: #{fusion_socket_count}"
				fresults[2] = "Empty sockets: #{fusion_socket_count}"
			end
			if line =~ /The chambers currently hold (.*)/i
				"#{line}".scan(/\w+/) do |w|
					if w =~ /orb/i
						gem_number += 1
					end
				end
				empty_fusion_sockets = fusion_socket_count - gem_number
				fresults[1] = "Total sockets: #{fusion_socket_count}"
				fresults[2] = "Empty sockets: #{empty_fusion_sockets}"
			end
		end
		break if Time.now > start_time + 2
	end
	if skip_zest_test == nil
		fput "wear ##{item}"
		sleep 1
		wearing_item = true if GameObj.right_hand.id != item
		loop{
			zest_test_number = zest_test_number + 1
			waitrt?
			fput "get ##{item}" if GameObj.right_hand.id != item and zest[zest_test_number] != "remove" and wearing_item == nil
			(fput "remove ##{item}";waitrt?) if zest[zest_test_number] == "wear" and wearing_item
			result = dothistimeout "#{zest[zest_test_number]} ##{item}", 1.5, /(You rub your .*\.|You run your hand over .* and preen\.|You dust off your .*\.|You cock your head and examine the .*\.|You tap .* that you are wearing\.|You reach out and touch your .*\.|You can't turn that.|You must pick it up first.|You glance at your .* as if it really needs a hug\.|You pucker up and blow a kiss at your .*\.|Perhaps that might be easier if you were holding .*\.|You reach out and touch your .*\.|You stick your tongue out at your .*\.|You gaze with interest at your .*\.|But you are wearing that!|You must be holding that to raise it.|You clench your fists involuntarily as you gaze at your .* wishing it could be yours\.|You pull back your hand to give .* a good slap, but stop when you realize how strange that would be.|You attach .* to your arms.|You remove .* from your arms.|You remove .* from your legs.|You attach .* to your legs.|You glance at .* and preen.|You notice that things have returned to their normal speed.|gestures at you.|You glance at .* and preen\.|You attend to your .*, making .* presentable as possible.|What were you referring to|You feel less drained.|Your SIGN OF|There is nothing there to read.|You feel at full magical power again.|That is already open.|You feel more refreshed|You rub the .* in your hand|You dust off the .* in your hand|A faint foggy mist forms over the surface of the .* then slowly fades away|You blow on your .*|That would not be appropriate|You grip your .* a little tighter|You tilt your .* side to side, making the light play off it|You tap \b(some|an?)\b .*, which is in your \b(right|left)\b hand|You tap the tip of your .* on the ground.|You thumb the .* in your hand|You pick idly at \b(some|an?)\b .*|Going around poking things isn't going to get you far|That would accomplish nothing|You pound \b(some|an?)\b .* with your fist, causing it to shake slightly|You pound \b(some|an?)\b .* with your fist, sending it flying.|I'm afraid that you can't pull that|You give your .* a little prod with the tip of your finger|You turn over your .*|That doesn't seem to do much|You try to eat your .*|You might want to try drinking it, instead|I don't think you are supposed to eat that|You pucker your lips and make a sloppy smooching sound at your .*|You glance at \b(some|an?)\b .* in your hand as if it really needs a hug|ou pucker up and blow a kiss at the .* in your hand|You brush your fingers lightly against your .*|Feeling a tad bit obsessive, are we|You gaze thoughtfully at your .*|You peer closely at \b(some|an?)\b .*, but see nothing of interest.  Maybe if you examined it closely, you would see more|You stare at your .*|You stare intently at your .*, silently noting its position and potential uses|You point at your .*|You swiftly run the tip of your forefinger across your .*|You can't pluck that|You give your bow string a good pluck, testing it for proper tension.|You cannot kick at \b(some|an?)\b .*|You try to nudge your .*|You can't spin that|That's ridiculous.|You thumb the .* in your hand|You lick the .* in your hand|You glance at the .* and hiss|You gaze in awe at the .* in your hand|That can't really be leaned up against safely|You lean on your .*|That would not be advisable|You lean on your .*, taking a momentary rest.|Do you think you're an acrobat|You wave your .* around|You raise your .* skyward|You raise your .* in triumph|You relax your hold on the .* in your hand|I don't think that's possible.|There doesn't seem to be any way to do that|You can't wear that|You slide .* onto your finger\.|You drape .* from your shoulders\.|You put .* on your back\.|You sling .* over your shoulder\.|You put .* on your head.|You hang .* around your neck.|You aren't wearing that|You slide .* off your finger\.|You take off .*\.|You remove .* from your shoulders\.|You take .* off your back\.|You sling .* off from over your shoulder\.|You take .* off your head.|You remove .* from around your neck.)|The faintly glowing string extends from the weapon to your fingers|You grip .* with (one hand|both hands).|You casually flip your .* into the air before catching it deftly by the haft.|You draw back your (left|right) arm, raising your .* into a throwing position|ethereal string connected to it|30 seconds|As you rub your .* it gives off a high-pitched sound and begins to steadily vibrate for a moment.|As you rub your .* it gives off a high-pitched sound and begins to rapidly vibrate for a moment.|.*you.*/i

			if result =~ /(You rub your .*\.|You run your hand over .* and preen\.|You dust off your .*\.|You cock your head and examine the .*\.|You tap .* that you are wearing\.|You reach out and touch your .*\.|You can't turn that.|You must pick it up first.|You glance at your .* as if it really needs a hug\.|You pucker up and blow a kiss at your .*\.|Perhaps that might be easier if you were holding .*\.|You reach out and touch your .*\.|You stick your tongue out at your .*\.|You gaze with interest at your .*\.|But you are wearing that!|You must be holding that to raise it.|You clench your fists involuntarily as you gaze at your .* wishing it could be yours\.|You pull back your hand to give .* a good slap, but stop when you realize how strange that would be.|You attach .* to your arms.|You remove .* from your arms.|You remove .* from your legs.|You attach .* to your legs.|You glance at .* and preen.|You notice that things have returned to their normal speed.|gestures at you.|You glance at an? .* and preen.|You attend to your .*, making .* presentable as possible.|What were you referring to|You feel less drained.|Your SIGN OF|There is nothing there to read.|You feel at full magical power again.|That is already open.|You feel more refreshed|You rub the .* in your hand|You dust off the .* in your hand|A faint foggy mist forms over the surface of the .* then slowly fades away|You blow on your .*|That would not be appropriate|You grip your .* a little tighter|You tilt your .* side to side, making the light play off it|You tap \b(some|an?)\b .*, which is in your \b(right|left)\b hand|You tap the tip of your .* on the ground.|You thumb the .* in your hand|You pick idly at \b(some|an?)\b .*|Going around poking things isn't going to get you far|That would accomplish nothing|You pound \b(some|an?)\b .* with your fist, causing it to shake slightly|You pound \b(some|an?)\b .* with your fist, sending it flying.|I'm afraid that you can't pull that|You give your .* a little prod with the tip of your finger|You turn over your .*|That doesn't seem to do much|You try to eat your .*|You might want to try drinking it, instead|I don't think you are supposed to eat that|You pucker your lips and make a sloppy smooching sound at your .*|You glance at \b(some|an?)\b .* in your hand as if it really needs a hug|ou pucker up and blow a kiss at the .* in your hand|You brush your fingers lightly against your .*|Feeling a tad bit obsessive, are we|You gaze thoughtfully at your .*|You peer closely at \b(some|an?)\b .*, but see nothing of interest.  Maybe if you examined it closely, you would see more|You stare at your .*|You stare intently at your .*, silently noting its position and potential uses|You point at your .*|You swiftly run the tip of your forefinger across your .*|You can't pluck that|You give your bow string a good pluck, testing it for proper tension.|You cannot kick at \b(some|an?)\b .*|You try to nudge your .*|You can't spin that|That's ridiculous.|You thumb the .* in your hand|You lick the .* in your hand|You glance at the .* and hiss|You gaze in awe at the .* in your hand|That can't really be leaned up against safely|You lean on your .*|That would not be advisable|You lean on your .*, taking a momentary rest.|Do you think you're an acrobat|You wave your .* around|You raise your .* skyward|You raise your .* in triumph|You relax your hold on the .* in your hand|I don't think that's possible.|There doesn't seem to be any way to do that|You can't wear that|You slide .* onto your finger\.|You drape .* from your shoulders\.|You put .* on your back\.|You sling .* over your shoulder\.|You put .* on your head.|You hang .* around your neck.|You aren't wearing that|You slide .* off your finger\.|You take off .*\.|You remove .* from your shoulders\.|You take .* off your back\.|You sling .* off from over your shoulder\.|You take .* off your head.|You remove .* from around your neck.)/i
				sleep 0.1
			elsif result =~ /The faintly glowing string extends from the weapon to your fingers/i
				results[37] = "Ethereal string: Yes"
				zresults[zest_test_number] = zest[zest_test_number]
				successful_zest[zest_test_number] = result
				sleep 0.1
			elsif result =~ /You casually flip your .* into the air before catching it deftly by the haft./i
				results[38] = "Returner: Yes"
				zresults[zest_test_number] = zest[zest_test_number]
				successful_zest[zest_test_number] = result
				sleep 0.1
			elsif result =~ /ethereal string connected to it/i
				results[37] = "Ethereal string: Yes"
				zresults[zest_test_number] = zest[zest_test_number]
				successful_zest[zest_test_number] = result
				sleep 0.1
			elsif result =~ /You grip .* with (one hand|both hands)./i
				iresults[27] = "1 handed or 2 handed use: Yes"
				sleep 0.1
			elsif result =~ /You draw back your (left|right) arm, raising your .* into a throwing position/i
				results[38] = "Returner: Yes"
				zresults[zest_test_number] = zest[zest_test_number]
				successful_zest[zest_test_number] = result
				sleep 0.1
			elsif result =~ /As you rub your .* it gives off a high-pitched sound and begins to steadily vibrate for a moment./i
				iresults[30] = "Bubble flares: normal"
				zresults[zest_test_number] = zest[zest_test_number]
			successful_zest[zest_test_number] = result
				sleep 0.1
			elsif result =~ /As you rub your .* it gives off a high-pitched sound and begins to rapidly vibrate for a moment./i
				iresults[30] = "Bubble flares: super"
				zresults[zest_test_number] = zest[zest_test_number]
				successful_zest[zest_test_number] = result
				sleep 0.1
			elsif result =~ /.*you.*/i
				if result =~ /(You pull back your hand to give .* a good slap, but stop when you realize how strange that would be.|You attach .* to your arms.|You remove .* from your arms.|You remove .* from your legs.|You attach .* to your legs.|You glance at .* and preen.|You notice that things have returned to their normal speed.|gestures at you.|You glance at an? .* and preen.|You attend to your .*, making .* presentable as possible.|What were you referring to|You feel less drained.|Your SIGN OF|There is nothing there to read.|You feel at full magical power again.|That is already open.|You feel more refreshed|You rub the .* in your hand|You dust off the .* in your hand|A faint foggy mist forms over the surface of the .* then slowly fades away|You blow on your .*|That would not be appropriate|You grip your .* a little tighter|You tilt your .* side to side, making the light play off it|You tap \b(some|an?)\b .*, which is in your \b(right|left)\b hand|You tap the tip of your .* on the ground.|You thumb the .* in your hand|You pick idly at \b(some|an?)\b .*|Going around poking things isn't going to get you far|That would accomplish nothing|You pound \b(some|an?)\b .* with your fist, causing it to shake slightly|You pound \b(some|an?)\b .* with your fist, sending it flying.|I'm afraid that you can't pull that|You give your .* a little prod with the tip of your finger|You turn over your .*|That doesn't seem to do much|You try to eat your .*|You might want to try drinking it, instead|I don't think you are supposed to eat that|You pucker your lips and make a sloppy smooching sound at your .*|You glance at \b(some|an?)\b .* in your hand as if it really needs a hug|ou pucker up and blow a kiss at the .* in your hand|You brush your fingers lightly against your .*|Feeling a tad bit obsessive, are we|You gaze thoughtfully at your .*|You peer closely at \b(some|an?)\b .*, but see nothing of interest.  Maybe if you examined it closely, you would see more|You stare at your .*|You stare intently at your .*, silently noting its position and potential uses|You point at your .*|You swiftly run the tip of your forefinger across your .*|You can't pluck that|You give your bow string a good pluck, testing it for proper tension.|You cannot kick at \b(some|an?)\b .*|You try to nudge your .*|You can't spin that|That's ridiculous.|You thumb the .* in your hand|You lick the .* in your hand|You glance at the .* and hiss|You gaze in awe at the .* in your hand|That can't really be leaned up against safely|You lean on your .*|That would not be advisable|You lean on your .*, taking a momentary rest.|Do you think you're an acrobat|You wave your .* around|You raise your .* skyward|You raise your .* in triumph|You relax your hold on the .* in your hand|I don't think that's possible.|There doesn't seem to be any way to do that|You can't wear that|You slide .* onto your finger\.|You drape .* from your shoulders\.|You put .* on your back\.|You sling .* over your shoulder\.|You put .* on your head.|You hang .* around your neck.|You aren't wearing that|You slide .* off your finger\.|You take off .*\.|You remove .* from your shoulders\.|You take .* off your back\.|You sling .* off from over your shoulder\.|You take .* off your head.|You remove .* from around your neck.)/i
					sleep 0.1
				else
					zresults[zest_test_number] = zest[zest_test_number]
					successful_zest[zest_test_number] = result
					sleep 0.1
				end
			elsif result.nil?
				sleep 0.1
				zresults[zest_test_number] = zest[zest_test_number]
			end
			break if zest[zest_test_number] == "remove"
		}
	end
	sleep 0.5
	fput "swap" if GameObj.right_hand.id != item

	if Char.prof == 'Warrior' && loresing_or_assess
		warrior_assess.call
	end
	if Char.prof == 'Bard' && loresing_or_assess
		fput "speak bard"
		(waitrt?;waitcastrt?)
		(echo "Waiting for mana." if checkmana < 2;wait_until { checkmana >= 2 })
		if GameObj.right_hand.name =~ /Hammer of Kai/i
			fput "loresing Hammer of Kai that I hold;let your value now be told"
		else
			fput "loresing #{checkright} that I hold;let your value now be told"
		end
		Thread.new {
			sleep 4
			silence_it.call
		}
		start_time = Time.now
		while line = get
			if line =~ /.* (under a pound).* about (.*) silvers, and is of (.*) quality\./
				results[19] = "Quality: #$3"
			end
			if (line =~ /.*,( which is about)? (under a pound|.* pounds).  In your best estimation, it's worth about (.*) silvers./i) || (line =~ /.*,( which is about)? (under a pound|.* pounds).  It's not worth much...around (.*) silvers./i)
				if iresults[24] == "Armor: cloth armor"
					results[1] = "Weight: #$2 (base weight for this armor type: 8 pounds)"
				elsif iresults[24] == "Armor: light leather"
					results[1] = "Weight: #$2 (base weight for this armor type: 10 pounds)"
				elsif iresults[24] == "Armor: full leather"
					results[1] = "Weight: #$2 (base weight for this armor type: 13 pounds)"
				elsif iresults[24] == "Armor: reinforced leather"
					results[1] = "Weight: #$2 (base weight for this armor type: 15 pounds)"
				elsif iresults[24] == "Armor: double leather"
					results[1] = "Weight: #$2 (base weight for this armor type: 16 pounds)"
				elsif iresults[24] == "Armor: leather breastplate"
					results[1] = "Weight: #$2 (base weight for this armor type: 16 pounds)"
				elsif iresults[24] == "Armor: cuirbouilli leather"
					results[1] = "Weight: #$2 (base weight for this armor type: 17 pounds)"
				elsif iresults[24] == "Armor: studded leather"
					results[1] = "Weight: #$2 (base weight for this armor type: 20 pounds)"
				elsif iresults[24] == "Armor: brigadine armor"
					results[1] = "Weight: #$2 (base weight for this armor type: 25 pounds)"
				elsif iresults[24] == "Armor: chain mail"
					results[1] = "Weight: #$2 (base weight for this armor type: 25 pounds)"
				elsif iresults[24] == "Armor: double chain"
					results[1] = "Weight: #$2 (base weight for this armor type: 25 pounds)"
				elsif iresults[24] == "Armor: augmented chain"
					results[1] = "Weight: #$2 (base weight for this armor type: 26 pounds)"
				elsif iresults[24] == "Armor: chain hauberk"
					results[1] = "Weight: #$2 (base weight for this armor type: 27 pounds)"
				elsif iresults[24] == "Armor: metal breastplate"
					results[1] = "Weight: #$2 (base weight for this armor type: 23 pounds)"
				elsif iresults[24] == "Armor: augmented plate"
					results[1] = "Weight: #$2 (base weight for this armor type: 25 pounds)"
				elsif iresults[24] == "Armor: half plate"
					results[1] = "Weight: #$2 (base weight for this armor type: 50 pounds)"
				elsif iresults[24] == "Armor: full plate"
					results[1] = "Weight: #$2 (base weight for this armor type: 75 pounds)"
				else
					results[1] = "Weight: #$2"
				end
				results[2] = "Value: #$3"
			end
			if line =~ /Odd sensations ripple through your body as your voice begins to coax information out of/i
				results[1] = "Shadowdeath Weapon"
			end
			break if Time.now > start_time + 3
		end
		(waitrt?;waitcastrt?)
		(echo "Waiting for mana." if checkmana < 4;wait_until { checkmana >= 4 })
		sleep 1
		if GameObj.right_hand.name =~ /Hammer of Kai/i
			fput "loresing Hammer of Kai that I hold;let your purpose now be told"
		else
			fput "loresing #{checkright} that I hold;let your purpose now be told"
		end
		Thread.new {
			sleep 4
			silence_it.call
		}
		start_time = Time.now
		while line = get
			if line =~ /You also feel a faint drawing sensation from it/i
				results[3] = "Rechargeable: Yes"
			end
			if line =~ /From the pitch of the vibration you determine that the purpose .* (some|is as a|is as some type of|is as a decorative or|is as a kind of|is as a piece of)? (magical|jewelry|wearable container|container|collectible|weapon|defensive garment|consumable|decorative|shield|trophy|gem).*/i
				results[4] = $2
				if results[4] == "defensive garment"
					results[4] = "Purpose: armor"
				else
					results[4] = "Purpose: #{results[4]}"
				end
			end
			if line =~ /.* as a container of some kind. It has an? (.*) lock on it./i
				results[3] = "Lock: #$1"
				results[4] = "Purpose: container"
			end
			if line =~ /.* is unusual, but the exact use escapes you/i
				if item =~ /scroll|paper|parchment|vellum/i
					results[4] = "Purpose: Scroll"
				else
					results[4] = "Purpose: unusual"
				end
			end
			if line =~ /holy item/i
				results[36] = "Holy item: Yes"
			end
			if line =~ /you feel it trying to draw power from you/i and results[4] =~ /gem/i
				results[36] = "Orb gem: Yes"
			end
			if line =~ /pulses strongly with the rhythm of your words/i and results[4] =~ /gem/i
				results[36] = "Mage rechargeable gem: Yes"
			end
			if line =~ /Odd sensations ripple through your body as your voice begins to coax information out of/i
				results[1] = "Shadowdeath Weapon"
			end
			break if Time.now > start_time + 3
		end
		(waitrt?;waitcastrt?)
		(echo "Waiting for mana." if checkmana < 6;wait_until { checkmana >= 6 })
		sleep 1
		if GameObj.right_hand.name =~ /Hammer of Kai/i
			fput "loresing Hammer of Kai that I hold;let your magic now be told"
		else
			fput "loresing #{checkright} that I hold;let your magic now be told"
		end
		Thread.new {
			sleep 4
			silence_it.call
		}
		start_time = Time.now
		while line = get
			if line =~ /This is an? (.*) item, which casts .* It has (.*) (bites?|charges?|sips?)./i
				results[5] = "Activation: #$1"
				results[6] = "Charges: #$2"
				results[5] = nil if results[5] =~ /magical/i
			end
			if line =~ /.* bonus of (.\d*) .* normal (.*)/i
				results[5] = $1
				results[5] = "Bonus: #{results[5]}"
			end
			if line =~ /has an? (.*) increased effectiveness in combat/i
				results[33] = $1
				if results[33] =~ /lightly/i
					results[33] = "Forging bonus: elegant"
				elsif results[33] =~ /moderately/i
					results[33] = "Forging bonus: superior"
				elsif results[33] =~ /significantly/i
					results[33] = "Forging bonus: perfect"
				else
					results[33] = "Forging bonus: #{results[33]}"
				end
			end
			if line =~ /.* determine it has no spell within it now, but could be imbedded with one, in the proper hands.  You estimate that it can contain an? (.*)\./i
				results[18] = "Blank imbeddable: holds #$1"
			end
			if line =~ /Odd sensations ripple through your body as your voice begins to coax information out of/i
				results[1] = "Shadowdeath Weapon"
			end
			if line =~ /It is empowered and can be charged for an additional (\d+) charge/i
				results[102] = "Empowered: Yes for up to #$1 charges"
			end
			break if Time.now > start_time + 3
		end
		(waitrt?;waitcastrt?)
		(echo "Waiting for mana." if checkmana < 8;wait_until { checkmana >= 8 })
		sleep 1
		if GameObj.right_hand.name =~ /Hammer of Kai/i
			fput "loresing Hammer of Kai that I hold;let your special ability now be told"
		else
			fput "loresing #{checkright} that I hold;let your special ability now be told"
		end
		Thread.new {
			sleep 4
			silence_it.call
		}
		start_time = Time.now
		while line = get
			if line =~ /The .* contains the spell (.*), from the .*/i
				results[7] = "Spell: #$1"
			end
			if line =~ /.* is for healing/i
				results[4] = "Purpose: herb"
			end
			if line =~ /.* infused .* (earth|corrosive|ice|fire|vibration|lightning|disrupting|holy|flaming|steam|dark|disintegrating)/i
				results[31] = $1
				if results[31] =~ /corrosive/i
					results[31] = "acid"
				end
				if results[31] =~ /flaming/i
					results[31] = "plasma"
				end
				if results[31] =~ /disrupting/i
					results[31] = "disruption"
				end
				if results[31] =~ /dark/i
					results[31] = "vacuum"
				end
				if results[31] =~ /ice/i
					results[31] = "cold"
				end
				if results[31] =~ /disintegrating/i
					results[31] = "disintegration"
				end
				results[31] = "Flares: #{results[31]}"
			end
			if line =~ /allows a caster to occasionally focus their magical prowess for a single cast/i
				results[31] = "Flares: acuity"
			end
			if line =~ /infused with mana/i
				results[31] = "Flares: mana"
			end
			if line =~ /infused with the power of a strange anti\-magical substance/i
				results[31] = "Flares: dispel"
			end
			if line =~ /cause their skin and muscles/i
				results[31] = "Flares: bubble"
			end
			if line =~ /grappling force/i
				results[31] = "Flares: grappling"
			end
			if line =~ /unbalanc/i
				results[31] = "Flares: unbalancing"
			end
			if line =~ /.* inflicts more fearsome wounds when it strikes/i
				results[18] = "Weighted: crit"
			end
			if line =~ /does extra damage when it strikes/i
				results[18] = "Weighted: damage"
			end
			if line =~ /.* has been enchanted by (.*)\./i
				results[8] = "Enchanted by: #$1"
			end
			if line =~ /It provides a boost of (.*)\./i
				if results[9] == nil
					results[9] = $1
					results[9] += " Stat" if (results[9] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[9] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
					while (line = get)
						if(line =~ /This enhancement may not be used by adventurers who have not trained (.*) times?\./)
							results[9] += " (Level #$1 required)"
							break
						elsif line =~ /This enhancive item has restrictions whose type are unclear to you\./
							results[9] += " (Level requirement unknown)"
							break
						else
							temp_line[1] = "The following line was not included in above loresong results: #{line}"
							results[9] += " (No level requirement mentioned)"
							break
						end
					end
				end
			end
			if line =~ /It provides a boost of (.*)\./i
				if results[10] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
					results[10] = $1
					results[10] += " Stat" if (results[10] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[10] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
					while (line = get)
						if(line =~ /This enhancement may not be used by adventurers who have not trained (.*) times?\./)
							results[10] += " (Level #$1 required)"
							break
						elsif line =~ /This enhancive item has restrictions whose type are unclear to you\./
							results[10] += " (Level requirement unknown)"
							break
						else
							temp_line[2] = "The following line was not included in above loresong results: #{line}"
							results[10] += " (No level requirement mentioned)"
							break
						end
					end
				end
			end
			if line =~ /It provides a boost of (.*)\./i
				if results[11] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
					results[11] = $1
					results[11] += " Stat" if (results[11] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[11] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
					while (line = get)
						if(line =~ /This enhancement may not be used by adventurers who have not trained (.*) times?\./)
							results[11] += " (Level #$1 required)"
							break
						elsif line =~ /This enhancive item has restrictions whose type are unclear to you\./
							results[11] += " (Level requirement unknown)"
							break
						else
							temp_line[3] = "The following line was not included in above loresong results: #{line}"
							results[11] += " (No level requirement mentioned)"
							break
						end
					end
				end
			end
			if line =~ /It provides a boost of (.*)\./i
				if results[12] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
					results[12] = $1
					results[12] += " Stat" if (results[12] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[12] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
					while (line = get)
						if(line =~ /This enhancement may not be used by adventurers who have not trained (.*) times?\./)
							results[12] += " (Level #$1 required)"
							break
						elsif line =~ /This enhancive item has restrictions whose type are unclear to you\./
							results[12] += " (Level requirement unknown)"
							break
						else
							temp_line[4] = "The following line was not included in above loresong results: #{line}"
							results[12] += " (No level requirement mentioned)"
							break
						end
					end
				end
			end
			if line =~ /It provides a boost of (.*)\./i
				if results[13] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
					results[13] = $1
					results[13] += " Stat" if (results[13] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[13] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
					while (line = get)
						if(line =~ /This enhancement may not be used by adventurers who have not trained (.*) times?\./)
							results[13] += " (Level #$1 required)"
							break
						elsif line =~ /This enhancive item has restrictions whose type are unclear to you\./
							results[13] += " (Level requirement unknown)"
							break
						else
							temp_line[5] = "The following line was not included in above loresong results: #{line}"
							results[13] += " (No level requirement mentioned)"
							break
						end
					end
				end
			end
			if line =~ /It provides a boost of (.*)\./i
				if results[14] == nil and results[9] != $1 and results[10] != $1 and results[11] != $1 and results[12] != $1 and results[13] != $1 and results[14] != $1
					results[14] = $1
					results[14] += " Stat" if (results[14] =~ /Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence/i) && (results[14] !~ /(Strength|Constitution|Dexterity|Agility|Discipline|Aura|Logic|Intuition|Wisdom|Influence) bonus/i)
					while (line = get)
						if(line =~ /This enhancement may not be used by adventurers who have not trained (.*) times?\./)
							results[14] += " (Level #$1 required)"
							break
						elsif line =~ /This enhancive item has restrictions whose type are unclear to you\./
							results[14] += " (Level requirement unknown)"
							break
						else
							temp_line[6] = "The following line was not included in above loresong results: #{line}"
							results[14] += " (No level requirement mentioned)"
							break
						end
					end
				end
			end
			if line =~ /have (.*) (of|amount) .*charges remaining./i
				results[15] = "Charges remaining: #$1"
			end
			if line =~ /have more than your average (.*) could count charges remaining./i
				results[15] = "Charges remaining: more than your average #$1 could count"
			end
			if line =~ /looks to have quite a few charges remaining/
				results[15] = "Charges remaining: quite a few"
			end
			if line =~ /will persist.* enhancive .*/i
				results[16] = "Persists on enhancive: Yes"
			end
			if line =~ /will crumble .* enhancive .*/i
				results[16] = "Crumbly on enhancive: Yes"
			end
			if line =~ /.* will (shatter|disintegrate|dust) after its last magical charge has been expended/i
				results[17] = "Crumbly on magical charge: Yes"
			end
			if line =~ /will persist after its last magical charge has been expended./i
				results[17] = "Persists on magical charge: Yes"
			end
			if line =~ /.* serves to protect from magical attacks by providing \+(\d+) Target Defense\./i
				results[27] = "TD Bonus: #{$1}"
			end
			if line =~ /sanctified/i
				results[32] = "Sanctified: Yes"
			end
			if line =~ /protect from additional damage/i
				results[34] = "Padding: damage"
			end
			if line =~ /severity of inflicted wounds/i
				results[34] = "Padding: crit"
			end
			if line =~ /As your song penetrates .* you determine that it is (.*)\./i
				results[35] = "Resistances: #$1"
			end
			if line =~ /The notes of your song snag briefly on some custom fittings\, and you sense that the (.*) was/
				results[46] = "Temporary Warrior fittings: #{$1}"
			end
			if line =~ /Odd sensations ripple through your body as your voice begins to coax information out of/i
				results[1] = "Shadowdeath Weapon"
			end
			if line =~ /assists its bearer with aiming attacks/i
				results[39] = "Sighted: Yes"
			end
			if line =~ /.* when employed against (.*)./i
				results[40] = $1
				if line =~ /fearsome/i
					results[40] = "Bane: crit weighted against #{results[40]}"
				elsif line =~ /damage/i
					results[40] = "Bane: damage weighted against #{results[40]}"
				elsif line =~ /(earth|corrosive|ice|fire|vibration|lightning|disrupting|holy|flaming|steam|dark|disintegrating)/i
					results[40] = "Bane: #$1 flares against #{results[40]}"	
				elsif line =~ /allows a caster to occasionally focus their magical prowess for a single cast/i
					results[40] = "Bane: acuity flares against #{results[40]}"	
				elsif line =~ /skin and muscles/i
					results[40] = "Bane: bubble flares against #{results[40]}"
				elsif line =~ /grappling/i
					results[40] = "Bane: grappling flares against #{results[40]}"
				elsif line =~ /unbalanc/i
					results[40] = "Bane: unbalancing flares against #{results[40]}"
				elsif line =~ /enchant/i
					results[40] = "Bane: enchant bonus against #{results[40]}"
				else
					results[40] = "A bane was detected but I couldn't tell which type of bane, here is the relevant loresing line, please provide this information to the author: #{line}"
				end	
			end
			if line =~ /before its enhancement has completely degraded away\./i
				results[100] = "Temporary enhancement"
			end
			if line =~ /withstand an? (.*) of uses before its enhancement has completely degraded away\./i
				results[100] = "Temporary enhancement charges: #$1"
			end
			if line =~ /withstand quite a few uses before its enhancement has completely degraded away\./i
				results[100] = "Temporary enhancement charges: quite a few"
			end
			if line =~ /When its enhancement has degraded away/i
				results[101] = "Temporary enhancement: #{line}"
			end
			if line =~ /permanently blessed/i
				results[42] = "Permanently blessed: Yes"
			end
			if line =~ /helps defend the one who wields it by granting \+(\d+) Defensive Bonus/i
				results[43] = "Defender Bonus: +#{$1}"
			end
			if line =~ /grants a quicker recovery to the deceased when it is waved over the corpse/i
				results[44] = "Chrism: Yes"
			end
			if line =~ /This .* may not be used by the following .*\: (.*)/
				results[45] = "Item Restrictions: #{$1}"
			end
			break if Time.now > start_time + 3
		end
	end
	fput "speak common" if Char.prof == 'Bard' && loresing_or_assess
	if (results[18] || results[34]) && get_assess_info
		waitrt?
		fput "cancel"
		fput "give ##{item} to #{assess_info_name}"
		while line = get
			if line =~ /#{assess_info_name} whispers, "(.*)\.\"/i
				wresults[1] = $1
				if line =~ /(weighting|padding)/i
					waitfor "to accept the offer"
					fput "accept"
					break
				end
			end
		end
	end
	check_temp_lines.call
	display_results.call
	if customer_mode
		what_to_whisper = nil
		what_to_whisper += "#{itemname}: "
		results.each{|i|
			what_to_whisper += "#{i}, " if i
		}
		eresults.each{|i|
			what_to_whisper += "#{i}, " if i
		}
		wresults.each{|i|
			what_to_whisper += "#{i}, " if i
		}
		fresults.each{|i|
			what_to_whisper += "#{i}, " if i
		}
		what_to_whisper = what_to_whisper.chop.chop
		fput "whisper ooc #{customer_name} #{what_to_whisper}. ALSO BE SURE TO USE RECALL ON THE ITEM TO SEE THE LORESONG INFORMATION FOR YOURSELF."
		count = 0
		zest_found = 0
		gem_number = 0
		zest_test_number = -1
		successful_zest = Array.new
		fresults = Array.new
		zresults = Array.new
		results = Array.new
		iresults = Array.new
		eresults = Array.new
		wresults = Array.new
		temp_line = Array.new
		number_of_tries = 0
		give_customer_item_back.call
	end
}

all_script_vars_to_check = [
	script.vars[1],
	script.vars[2],
	script.vars[3],
	script.vars[4],
	script.vars[5],
	script.vars[6],
	script.vars[7],
	script.vars[8],
	script.vars[9],
	script.vars[10],	
]

all_script_vars_to_check.each{|i|
	if i =~ /wait/i
		warrior_wait = true
	end
}

all_script_vars_to_check.each{|i|
	if i =~ /other/i
		customer_mode = true
	end
}

all_script_vars_to_check.each{|i|
	if i =~ /all-([a-zA-Z]+)/i
		do_all = true
		do_all_container = $1
	end
}

all_script_vars_to_check.each{|i|
	if i =~ /name-([a-zA-Z]+)/i
		get_assess_info = true
		assess_info_name = $1
	end
}

all_script_vars_to_check.each{|i|
	if i =~ /skip/i
		skip_zest_test = true
	end
}
	
all_script_vars_to_check.each{|i|
	if i =~ /lore|ass/i
		loresing_or_assess = true
	end
}

if warrior_wait
	if Char.prof == 'Warrior'
		fput "stow right" if checkright
		fput "stow left" if checkleft
		echo "You are waiting for someone to hand you something to assess."
		wait_mode.call
	else
		echo "This feature only works for warriors."
		exit
	end
end

if customer_mode
	loresing_or_assess = true
	skip_zest_test = true
	warrior_wait = nil
	do_all = nil
	wait_in_customer_mode.call
elsif do_all == nil
	if checkright == nil && checkleft == nil
		echo "You need to be holding something to use this feature. By default the script will sing to whatever is in your right hand, but if your right hand is empty it will sing to whatever is in your left hand."
		exit
	elsif checkright
		nil
	elsif checkleft
		fput "swap"
	end
	item = GameObj.right_hand.id
	test_stuff.call
elsif do_all
	if do_all_container =~ /locker/
		fput "open locker"
		sleep 1
		loop{
			new_locker_container_to_check = nil
			GameObj.loot.each{ |i|
				break if locker_container_count >= GameObj.loot.length
				if !all_locker_containers_checked.include?(i.noun)
					all_locker_containers_checked.push(i.noun)
					locker_container_count += 1
					if i.noun !~ /curtain|disk|coffin/
						new_locker_container_to_check = true
						locker_id = i.id
						locker_name = i.noun
						fput "open ##{locker_id}"
						fput "look in ##{locker_id}"
						fput "look on ##{locker_id}"
						locker_contents = GameObj.containers[locker_id]
					end
					break
				end
			}
			if new_locker_container_to_check.nil? && locker_already_checked.nil?
				locker_already_checked = true
				counter = GameObj.room_desc.find{ |i| i.name == "counter" }
				fput "look on #{counter}" if counter.contents.nil?
				wait_until { counter.contents }
				locker = counter.contents.find{ |i| i.name =~ /locker/ }
				if !all_locker_containers_checked.include?("locker")
					all_locker_containers_checked.push("locker")
					new_locker_container_to_check = true
					locker_id = locker.id
					locker_name = "locker"
					fput "open ##{locker_id}"
					fput "look in ##{locker_id}"
					fput "look on ##{locker_id}"
					locker_contents = GameObj.containers[locker_id]
					wait_until { locker_contents }
				end
			end
			if new_locker_container_to_check
				locker_contents.each{ |i|
					if all_locker_items_names.include?(i.name)
						duplicate_items.push(i.name) unless duplicate_items.include?(i.name)
					else
						all_locker_items_names.push(i.name)
					end
				}
				all_locker_items_names.each{|i|
					temp_item_name = i
					if duplicate_items.include?(i)
						nil
					else
						unless locker_name == "locker"
							locker = GameObj.loot.find { |i| i.noun == locker_name }
							locker_id = locker.id
						end
						fput "look in ##{locker_id}"
						fput "look on ##{locker_id}"
						locker_contents = GameObj.containers[locker_id]
						locker_contents.each{ |i|
							if i.name == temp_item_name
								item = i.id
								fput "stow right" if checkright
								fput "stow left" if checkleft
								fput "get ##{item} from ##{locker_id}"
								fput "swap" if checkleft
								test_stuff.call
								count = 0
								zest_found = 0
								gem_number = 0
								zest_test_number = -1
								wearing_item = nil
								successful_zest = Array.new
								fresults = Array.new
								zresults = Array.new
								results = Array.new
								iresults = Array.new
								eresults = Array.new
								wresults = Array.new
								temp_line = Array.new
								waitrt?
								fput "put my #{i} in locker"
								sleep 3
								break
							end
						}
					end
				}
				if duplicate_items.length > 0
					10.times{ 
						echo "You have 2 or more of the following items in your locker. I could not sing to each of them so I suggest you take each one out and test them individually to see if they have different properties."
						echo "#{duplicate_items}"
					}
				end
			end
			break if locker_container_count >= GameObj.loot.length
		}
	else
		GameObj.inv.each{|container|
			if container.name =~ /#{do_all_container}/i
				fput "look in my #{do_all_container}"
				container.contents.each{ |i|
					fput "stow right" if checkright
					fput "stow left" if checkleft
					item = i.id
					fput "get ##{item}"
					test_stuff.call
					count = 0
					zest_found = 0
					gem_number = 0
					zest_test_number = -1
					successful_zest = Array.new
					fresults = Array.new
					zresults = Array.new
					results = Array.new
					iresults = Array.new
					eresults = Array.new
					wresults = Array.new
					temp_line = Array.new
					waitrt?
					fput "put ##{item} in my #{do_all_container}"
					sleep 2
				}
			end
		}
	end
end