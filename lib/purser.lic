=begin
   Automagically adds your looted silvers 
   to your weightless coinbag

   requires you to set the coinbag var

   example :
    ;var set coinbag=silvery mesh coin bag

  author:  Ondreian
  version: 0.0.1
=end

module Purser
  VAR = Vars["coinbag"]

  if VAR.nil?
    raise Exception.new %{
      please set:
        ;var set coinbag=<full name>
      
      example:
        ;var set coinbag=silvery mesh coin bag
    } 
  end

  BAG = GameObj.inv.find do |item| item.name.eql?(VAR) end

  exit if BAG.nil?
  
  BAG_STR = %{<a exist="#{BAG.id}" noun="#{BAG.noun}">(.*?)</a>}
  ##
  ## silver regexp
  ##
  module Silvers
    FIND    = /You gather the remaining (?<silver>\d+) coins\.$/
    RM      = /You reach into your #{BAG_STR} and remove (?<silver>\d+) silver coins\.$/
    ADD     = %r{^You place (?<silver>\d+) silver coins inside your #{BAG_STR}.$}
    HAVE    = /^Inside the #{BAG_STR} you see approximately (?<silver>\d+) silver coins\.$/
  end
  ##
  ## interaction outcomes for dealing with a bag
  ##
  module Outcomes
    FAIL      = %r{^Your (.*?) is already full!$}
    NOT_FOUND = %r{^But you do not have that many coins!$}
    ALL       = Regexp.union(Silvers::ADD, FAIL, NOT_FOUND)
  end
  ##
  ## class vars
  ##
  @@debug   = Script.current.vars.include?("--debug")
  @@max     = 25_000
  @@val     = 0
  @@squelch = false
  QUEUE     = Queue.new
  LOCK      = Mutex.new

  HOOK = "__purser"

  DownstreamHook.add(HOOK, Proc.new do |incoming| 
    #Purser.log(incoming, :xml)
    begin   
      if silvers = Purser.unwrap(incoming, Silvers::RM)
        #Purser.log(incoming, :xml_rm)
        Purser.rm silvers
      end

      if silvers = Purser.unwrap(incoming, Silvers::FIND)
        Purser.log(incoming, :xml_find)
        QUEUE << silvers
      end

      if silvers = Purser.unwrap(incoming, Silvers::ADD)
        #Purser.log(incoming, :xml_add)
        Purser.add(silvers)
      end

      if silvers = Purser.unwrap(incoming, Silvers::HAVE)
        #Purser.log(incoming, :xml_have)
        Purser.is silvers
      end
    rescue Exception => e
      respond e.message
      respond e.backtrace.join("\n")
    end
    if @@squelch
      @@squelch = false
      nil
    else
      incoming
    end
  end)

  def self.unwrap(str, patt)
    res = str.strip.match(patt)
    res && res[:silver].to_i
  end

  def self.log(message, label = :debug)
    return self unless @@debug
    respond %{[Purser.#{label}] #{message}}
  end

  def self.full?
    @@val == @@max
  end

  def self.empty?
    @@val == 0
  end

  def self.is(silvers)
    @@val = silvers.to_i
    log(@@val, :silvers)
  end

  def self.add(silvers)
    @@val = @@val + silvers
    log(@@val, :silvers)
  end

  def self.rm(silvers)
    @@val = @@val - silvers
    log(@@val, :silvers)
  end

  def self.remainder
    @@max - @@val
  end

  def self.silvers
    @@val
  end

  def self.bound(silvers)
    (remainder - silvers) < 0 ? remainder : silvers
  end

  def self.squelch_next_match!
    @@squelch = true
  end

  def self.bg_puts(cmd)
    Game._puts "<c>#{cmd}\r\n"
  end

  def self.room?
    !full?
  end

  def self.throws(msg = "")
    raise Exception.new msg
  end

  def self.store(silvers)
    LOCK.synchronize do
      coins = bound(silvers)
      if room? && coins > 0
        Purser.log(coins, :bounded_silver)
        
        dothistimeout("put #{coins} silver in ##{BAG.id}", 
          2, Outcomes::ALL)
        
      end
    end
    self
  end

  def self.run!
    squelch_next_match!
    bg_puts "look in ##{BAG.id}"
  end

  before_dying do
    DownstreamHook.remove(HOOK)
  end

  Purser.log("debug: #{@@debug}", :mode)
  Purser.run!
  # keepalive
  loop do  
    Purser.store QUEUE.shift unless QUEUE.empty?
    sleep 0.1
  end
end