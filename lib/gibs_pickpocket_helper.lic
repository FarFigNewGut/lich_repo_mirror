=begin
	Gibreficul's pickpocket helper.
	Helps by tracking what you stole, from whom you stole it, and from what container you got each item.
	Currently in BETA write, Will add improvements as I steal from more people.
	Update::  5-6-11-01
	ENJOY!
	UPDATE:  Fixed false matches.
	ADDED:  clear_person   and restore_person features.  Run script with "help"  for details.
	author: Gibreficul
	tags: pickpocket, utility, information
=end
if $steal_list
	CharSettings['thief'] = $steal_list
else
	$steal_list = CharSettings['thief'] || Hash.new
end
def gmarks
	respond "You have stolen from #{$steal_list.keys.sort.join(', ')}"
	return($steal_list.keys.sort)
end
def gbooty(who = false)
	if who =~ /all_details/i
		$steal_list.each_pair{|a, b|
			gbooty(a)
		}
		return
	elsif who =~ /in_room/i
		GameObj.pcs.each{|person|
			if $steal_list.keys.include?(person.noun)
				gbooty(person.noun)
			else
				respond "You have not yet tracked any steal attempts against #{person.noun}"
			end
			respond ""
		}
		return
	end
	who = who.downcase.capitalize
	if who
		coins = 0
		items = []
		mark = $steal_list[who] || false
		unless mark
			respond "You haven't stolen from #{who}"
			return
		end
		mark.each_pair{|key, val|
			mi = []
			val.each{|thing|
				if thing =~ /(\d+) silver/
					y = $1
					coins += y.to_i
				else
					mi.push(thing)
				end
			}
			next if key =~ /pockets/i
			respond "Items stolen from #{who}'s #{key}: #{mi.join(', ')}."
		}
		respond "You have stolen #{coins} silvers from #{who}" if coins > 0
	else
		x = $steal_list.keys
		y = []
		x.each{|key|
			containers = $steal_list[key].keys
			containers.each{|cont|
				y.push($steal_list[key][cont])
			}
		}
		z = y.flatten
		items = []
		coins = 0
		z.each{|item|
			if item =~ /(\d+) silver/
				gcoins = $1
				coins += gcoins.to_i
			else
				items.push(item) unless item =~ /nothing/i
			end
		}
		respond "Grandmaster Rogue Gibreficul has been watching you.  Here's what you stole."
		respond "MARKS:	#{$steal_list.keys.sort.join(', ')}"
		respond "COINS:	#{coins} silvers"
		respond "LOOT:	#{items.join(', ')}"
		respond "*"
		respond ""
	end
end
if $gppscript_has_run == false || script.vars[1] =~ /help/i
	respond "***** Welcome to Grandmaster Rogue Gibreficul's pickpocketing tracker script *****"
	respond "	The script runs a fairly simple loop in the background."
	respond "	The tracking features are easily accessed with short command line scripts once the script has been run."
	respond "	For these features to work, the script must be trusted."
	respond "	The following commands are currently functional:"
	respond "		;e gbooty"
	respond "			-- Will list who you tried to steal from, what you got, and how many coins."
	respond "		;e gbooty(name)   (where name is a string that is the full name of a mark)"
	respond "			-- Will break down what you stole from that person"
	respond "			-- NOTE:  you must either quote the name, or use a string variable with that name as the value"
	respond "			-- EXAMPLE:	;e gbooty('kristianna')   Example2:  ;e x = 'kristianna';gbooty(x)"
	respond "		;e gbooty('all_details') will show you the result of gbooty(name) for every name in your list."
	respond "		;e gbooty('in_room') will show you the result of gbooty(name) for all people in the room."
	respond "		** UPDATES **"
	respond "			Added command line variable driven commands, as follows"
	respond "			start script as such:  ;gibs_pickpocket_helper clear_person Gibreficul to clear Gibreficul from your steal history"
	respond "			start script as such:  ;gibs_pickpocket_helper restore_person Gibreficul to restore Gibreficul from your steal history"
	respond "";respond "******************************************************************************"
	$gppscript_has_run = true
end

if script.vars[1] =~ /clear_person/i
	if script.vars[2]
		person = script.vars[2].downcase.capitalize
		backup = CharSettings['backup'] || Hash.new
		if $steal_list.keys.include?(person)
			if backup.keys.include?(person)
				respond "A backup record of #{person} already exists. Script will merge current list into backup."
				new_hash = backup[person]
				$steal_list[person].keys.each{|cont|
					if new_hash.keys.include?(cont)
						new_hash[cont] = [$steal_list[person][cont], new_hash[person][cont]].flatten
					else
						new_hash[cont] = $steal_list[person][cont]
					end
				}
				backup[person] = new_hash
				respond "DELETING FROM LIST: #{person}'s information"
				$steal_list.delete(person)
				CharSettings['thief'] = $steal_list
				CharSettings['backup'] = backup
			else
				respond "No backup record exists for #{person}. Creating one..."
				backup[person] = $steal_list[person]
				$steal_list.delete(person)
				CharSettings['thief'] = $steal_list
				CharSettings['backup'] = backup
				respond ""
				respond "*******************"
				respond "** #{person} cleared. **"
				respond "**      Script exiting.      **"
				respond "********************"
				respond ""
				exit
			end
		else
			respond "** #{person} is not in your current list, exiting. **"
			exit
		end
	else
		respond "** SCRIPT FAIL, no name to clear, exiting. **"
		exit
	end
elsif script.vars[1] =~ /restore_person/i
	#
	if script.vars[2]
		person = script.vars[2].downcase.capitalize
		backup = CharSettings['backup'] || Hash.new
		if backup.keys.include?(person)
			if $steal_list.keys.include?(person)
				echo "MERGING"
				new_hash = $steal_list[person]
				backup[person].keys.each{|cont|
					if new_hash.keys.include?(cont)
						new_hash[cont] = [backup[person][cont], new_hash[person][cont]].flatten
					else
						new_hash[cont] = backup[person][cont]
					end
				}
				$steal_list[person] = new_hash
				respond "DELETING FROM LIST: #{person}'s information"
				backup.delete(person)
				CharSettings['thief'] = $steal_list
				CharSettings['backup'] = backup
			else
				echo "NO RECORD, ADDING"
				$steal_list[person] = backup[person]
				backup.delete(person)
				CharSettings['thief'] = $steal_list
				CharSettings['backup'] = backup
				respond ""
				respond "*******************"
				respond "** #{person} restored. **"
				respond "**      Script exiting.      **"
				respond "********************"
				respond ""
				exit
			end
		else
			respond "** #{person} is not in your current list, exiting. **"
			exit
		end
	else
		respond "** SCRIPT FAIL, no name to clear, exiting. **"
		exit
	end
elsif script.vars[1] =~ /restore_all/i
elsif script.vars[1] =~ /clear_all/i
end
loop{
	y = matchwait /^You reach into/
	if y =~ /^You reach into ([A-Z][a-z]+)'s (.*?)\sand pull out (.*?)\.$/
		target = $1
		cont = $2
		item = $3
		next if item == "nothing"
		item = item.gsub("nothing", "0 silvers")
		if cont =~ /.*?\s(\w+)$/
			container = $1
		else
			container = cont
		end
		next if container == 'pockets' && item == '0 silvers'
		$steal_list[target] ||= {}
		$steal_list[target][container] ||= []
		$steal_list[target][container].push(item)
		CharSettings['thief'] = $steal_list
	else
		echo "*** Strange, script gathered STRING... #{y} ... and doesn't know how to break it up."
	end
}

