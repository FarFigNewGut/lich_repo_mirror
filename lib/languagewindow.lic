=begin
   https://discordapp.com/channels/226045346399256576/1339018254517145681

   This script creates a dedicated window to display known languages, phrases, and vocabulary entries in a structured, searchable, and interactive format for Wrayth.

   Features:
   - Languages are displayed in alphabetical order.
   - Phrases are sorted by their meanings.
   - Vocabulary words are sorted by their definitions.
   - Click ( ! ) to SAY the phrase or word aloud.
   - Click the phrase/word text to echo its meaning/definition.
   - Click [ X ] next to languages, phrases, or words to hide it from the window.
   - Hidden languages are shown at the bottom with clickable ( HIDDEN ) labels to unhide them.
   - Phrases and words sections can be toggled independently per language.

   Coming Soon:
   - Support for all languages. https://gswiki.play.net/Category:Languages

   Changelog:
     1.0.0 (2025-06-11)
             Initial release.

author: Phocosoen, ChatGPT
tags: wrayth, frontend, mod, window, language, roleplay, dictionary, lexicon, aelotian, chirasen, dark elven, dhenar, dwarven, elven, erithi, faendryl, giantkin, gnomish, inyexi, ithzir, kannalan, krolgeh, sylvan, yrthalen, tehir, trollspeak
version: 1.0.0

=end

require 'yaml'

LANGUAGE_YAML_DATA = [
  "---",
  "aelotian:",
  "  Phrases:",
  "  - phrase: Ami\'eda phu tayr, phu amyrana\'s en\'elta",
  "    meaning: For when it comes our time, our mother\'s arms are where we\'ll fall.",
  "  - phrase: Anu aminaeri",
  "    meaning: I love you.",
  "  - phrase: Cyrasei liran casroh dai",
  "    meaning: Bright skies above you. Used as an all-purpose blessing or an expression of good luck for others. Often shortened to the less formal version, \"Cyrasei liran.\"",
  "  - phrase: Dal amin dai",
  "    meaning: We love you.",
  "  - phrase: Dal wlo\'yll dai",
  "    meaning: We miss you.",
  "  - phrase: Kai-da!",
  "    meaning: Help! or Help me!",
  "  - phrase: Kala sutara",
  "    meaning: Pleasant dreams.",
  "  - phrase: Kala ylliras",
  "    meaning: Good winds. Used as an all-purpose greeting or farewell, as you would use hello or goodbye.",
  "  - phrase: Khem dyre ti kerosa yalmere khem eyra cyr",
  "    meaning: The darkness is worst before the first light.",
  "  - phrase: Mei phu naertas a nis ne meril yai\'ela fhriise wlo\'tara",
  "    meaning: May our hearts and souls forever honor these memories.",
  "  - phrase: Meril dai a tal ne",
  "    meaning: Forever, you and I.",
  "  - phrase: Yllira symisiri",
  "    meaning: Many thanks. Used as an expression of gratitude. Literally translates to \"winds carry.\"",
  "  Words:",
  "  - word: aehda",
  "    definition: female warrior",
  "  - word: aehdo",
  "    definition: male warrior",
  "tehir:",
  "  Phrases:",
  "  Words:",
  "  - word: ah",
  "    definition: up",
  "  - word: ahmdir",
  "    definition: blue (alternate form)",
  "  - word: ahruut",
  "    definition: up twig",
  "  - word: artim",
  "    definition: a type of sandals",
  "  - word: aseges",
  "    definition: a layered skirt worn by women",
  "  - word: ayr",
  "    definition: Tehir-styled lute",
  "  - word: bri",
  "    definition: red",
  "  - word: deker",
  "    definition: root",
  "  - word: duaidz",
  "    definition: men's bloused trousers",
  "  - word: eobj",
  "    definition: dark",
  "  - word: eoriz",
  "    definition: dates",
  "  - word: erasay",
  "    definition: a sleeveless or short-sleeved shirt for men",
  "  - word: euliemomgi",
  "    definition: dominance",
  "  - word: gir",
  "    definition: black/jet",
  "  - word: gograz",
  "    definition: cactus",
  "  - word: gure",
  "    definition: cold",
  "  - word: hohid",
  "    definition: paper",
  "  - word: hraz",
  "    definition: plus",
  "  - word: huame",
  "    definition: pound",
  "  - word: hudor",
  "    definition: Tehir woman's tabard",
  "  - word: iem",
  "    definition: in",
  "  - word: imhda",
  "    definition: empty",
  "  - word: iov",
  "    definition: east",
  "  - word: iuhkt",
  "    definition: eight",
  "  - word: kiete bukazd",
  "    definition: robustness",
  "  - word: krai",
  "    definition: blue",
  "  - word: kriehkt",
  "    definition: bright",
  "  - word: krio",
  "    definition: bread",
  "  - word: lafiier",
  "    definition: my veil (noblewoman's way to refer to husband)",
  "  - word: layafi",
  "    definition: nobleman's way to refer to his wife",
  "  - word: livebiz",
  "    definition: noblewoman title",
  "  - word: lovib",
  "    definition: nobleman title",
  "  - word: ma",
  "    definition: zero or null",
  "  - word: morduska",
  "    definition: reptilian carnivore",
  "  - word: mubzh",
  "    definition: north",
  "  - word: mud-gure",
  "    definition: warm (not-cold)",
  "  - word: mudah",
  "    definition: down",
  "  - word: mudah-ruut",
  "    definition: not-up-twig (root)",
  "  - word: muhkt",
  "    definition: night",
  "  - word: muma",
  "    definition: many",
  "  - word: mumi",
  "    definition: nine",
  "  - word: murkilom",
  "    definition: nobleman title",
  "  - word: nakaten",
  "    definition: a type of saddle used on yierkas",
  "  - word: qahzumar",
  "    definition: scorpion-like creature from the Sea of Fire",
  "  - word: qiv",
  "    definition: west",
  "  - word: qot-zome",
  "    definition: desert (big sand)",
  "  - word: qude",
  "    definition: bird",
  "  - word: riehkt",
  "    definition: light (adjective, weight)",
  "  - word: rim",
  "    definition: ten",
  "  - word: rio",
  "    definition: tea",
  "  - word: riz",
  "    definition: minus",
  "  - word: ro-ueke",
  "    definition: tree (tall wood)",
  "  - word: ruu",
  "    definition: two",
  "  - word: ruut",
  "    definition: twig, branch",
  "  - word: selshis",
  "    definition: reptilian carnivore",
  "  - word: sikuust",
  "    definition: desert earwig",
  "  - word: takouba",
  "    definition: a type of falchion",
  "  - word: tasig-heqi",
  "    definition: weaver witches",
  "  - word: tebriim",
  "    definition: green",
  "  - word: tesarit",
  "    definition: a single earring",
  "  - word: tiofa",
  "    definition: heavy",
  "  - word: tisrin",
  "    definition: a type of ring",
  "  - word: torv",
  "    definition: half",
  "  - word: tosak'dusalla",
  "    definition: Father of Storms; a legendary-sized morduska",
  "  - word: tou",
  "    definition: hail",
  "  - word: tud",
  "    definition: hot",
  "  - word: tzaq",
  "    definition: shrub",
  "  - word: tzimurqi",
  "    definition: noblewoman title",
  "  - word: tzou",
  "    definition: shadow",
  "  - word: tzou lekem",
  "    definition: Lornon",
  "  - word: uad",
  "    definition: out",
  "  - word: ueke",
  "    definition: wood",
  "  - word: ufura",
  "    definition: Liabo",
  "  - word: ufura",
  "    definition: ivory",
  "  - word: umi",
  "    definition: one",
  "  - word: va",
  "    definition: full, all",
  "  - word: virid",
  "    definition: finger",
  "  - word: vruuib",
  "    definition: to flower (verb)",
  "  - word: vuad",
  "    definition: four",
  "  - word: vubrium",
  "    definition: fiery",
  "  - word: vufi",
  "    definition: five",
  "  - word: vutz",
  "    definition: figs",
  "  - word: vyau",
  "    definition: fluid",
  "  - word: vyuqid",
  "    definition: flower (noun)",
  "  - word: yierka",
  "    definition: a large omnivorous reptilian quadruped",
  "  - word: yuhkt",
  "    definition: light (noun)",
  "  - word: zamad",
  "    definition: special songs of the Tehir",
  "  - word: zdurtzi",
  "    definition: noblewoman title",
  "  - word: zhi-zja",
  "    definition: heavens",
  "  - word: zhifiier",
  "    definition: nobleman title",
  "  - word: zhii",
  "    definition: three",
  "  - word: zhiqietz",
  "    definition: Heaven's wish (from zhi-zja and qietz)",
  "  - word: zhi'vieba",
  "    definition: Sea of Fire",
  "  - word: zifim",
  "    definition: seven",
  "  - word: zja",
  "    definition: sky",
  "  - word: zja-ruut",
  "    definition: sky twig",
  "  - word: zlo",
  "    definition: Tilaok",
  "  - word: zlo-ueke",
  "    definition: small wood (shrub)",
  "  - word: zome",
  "    definition: sand",
  "  - word: zome",
  "    definition: yellow",
  "  - word: zuazh",
  "    definition: south",
  "  - word: zun",
  "    definition: six",
  "yrthalen:",
  "  Phrases:",
  "  - phrase: Acalen wan lythela.",
  "    meaning: May your festival be filled with light.",
  "  - phrase: Sael eth ilyraelin.",
  "    meaning: Art is like fireflies. (A common Sylvan greeting)",
  "  - phrase: Tahl yrthalen, enwan?",
  "    meaning: How is the forest, friend? (Equivalent to \"How are you?\")",
  "  - phrase: Yrieth vel ataela.",
  "    meaning: The wind carries the clouds. (A poetic way to say goodbye)",
  "  Words:",
].join("\n")

WINDOW_ID = 'LanguageWindow'
HOOK_ID   = 'languagewindow_hook'
LANGUAGE_CMD_QUEUE = Queue.new

$language_yaml_path = File.join(DATA_DIR, XMLData.game, Char.name, "languagewindow.yaml")
@current_language_mode = :normal
@show_hidden_languages = true

def escape_xml(text)
  text.to_s.gsub("'", '`') # strip apostrophes completely
      .gsub('&', '&amp;')
      .gsub('<', '&lt;')
      .gsub('>', '&gt;')
      .gsub('"', '&quot;')
end

# Language hide/unhide system
module LanguageAPI
  @hidden_languages_in_memory = []
  @hidden_phrase_sections = []
  @hidden_word_sections = []

  def self.hidden_languages
    @hidden_languages_in_memory
  end

  def self.hidden_phrase_sections
    @hidden_phrase_sections
  end

  def self.hidden_word_sections
    @hidden_word_sections
  end

  def self.toggle_phrase_section(language)
    if @hidden_phrase_sections.include?(language)
      @hidden_phrase_sections.delete(language)
    else
      @hidden_phrase_sections << language
    end
    LANGUAGE_CMD_QUEUE.push(:update_language)
  end

  def self.toggle_word_section(language)
    if @hidden_word_sections.include?(language)
      @hidden_word_sections.delete(language)
    else
      @hidden_word_sections << language
    end
    LANGUAGE_CMD_QUEUE.push(:update_language)
  end

  def self.load_from_yaml(path)
    if File.exist?(path)
      data = YAML.load_file(path)
      @hidden_languages_in_memory = data["hidden_languages"] || []
    else
      @hidden_languages_in_memory = []
    end
  end

  def self.save_to_yaml(path, state)
    data = File.exist?(path) ? YAML.load_file(path) : {}
    data["hidden_languages"] = @hidden_languages_in_memory
    data["window_state"] = state
    data["show_hidden_languages"] = true
    File.write(path, data.to_yaml)
  end

  def self.toggle(language)
    language = language.to_s
    if @hidden_languages_in_memory.include?(language)
      @hidden_languages_in_memory.delete(language)
    else
      @hidden_languages_in_memory << language
    end
    save_to_yaml($language_yaml_path, :normal)
    LANGUAGE_CMD_QUEUE.push(:update_language)
  end
end

# Load/save state

def load_language_window_state
  if File.exist?($language_yaml_path)
    data = YAML.load_file($language_yaml_path)
    LanguageAPI.load_from_yaml($language_yaml_path)
    @current_language_mode = data.fetch("window_state", :normal).to_sym
    @show_hidden_languages = data.fetch("show_hidden_languages", true)
  end
end

def save_language_window_state
  LanguageAPI.save_to_yaml($language_yaml_path, @current_language_mode)
end

# Parse language data

def load_languages
  raw_data = YAML.load(LANGUAGE_YAML_DATA)
  @language_data = raw_data
end

# Render the language window

def render_language_window(language_data)
  output = "<dialogData id='#{WINDOW_ID}' clear='t'>"
  top = 0

  visible = language_data.reject { |lang, _| LanguageAPI.hidden_languages.include?(lang) }.sort.to_h
  hidden  = language_data.select { |lang, _| LanguageAPI.hidden_languages.include?(lang) }.sort.to_h

  visible.each do |language, content|
    output += "<link id='#{language}_hide' value='[ X ]' cmd=';e LanguageAPI.toggle(\"#{language}\")' echo='[Hiding #{language}]' justify='left' left='0' top='#{top}' />"
    output += "<label id='#{language}_label' value='#{language.capitalize}' justify='left' left='30' top='#{top}' />"
    top += 20

    if content["Phrases"]
      output += "<link id='#{language}_phrase_hide' value='[ X ]' cmd=';e LanguageAPI.toggle_phrase_section(\"#{language}\")' echo='[Toggling phrases for #{language}]' justify='left' left='0' top='#{top}' />"
      output += "<label id='#{language}_phrases_header' value='Phrases:' justify='left' left='30' top='#{top}' />"
      top += 20
      unless LanguageAPI.hidden_phrase_sections.include?(language)
        content["Phrases"].sort_by { |e| e["meaning"].downcase }.each_with_index do |entry, i|
          phrase = entry["phrase"]
          meaning = entry["meaning"]

          say_cmd  = "say #{phrase}"
          echo_cmd = ";e echo #{phrase.inspect}"

          output += "<link id='#{language}_phrase_say_#{i}' value='( ! )' cmd='#{escape_xml(say_cmd)}' echo='#{escape_xml(phrase)}' justify='left' left='0' top='#{top}' />"
          output += "<link id='#{language}_phrase_def_#{i}' value='#{escape_xml(meaning)}' cmd='#{escape_xml(echo_cmd)}' echo='[#{escape_xml(language)} - #{escape_xml(meaning)}]' justify='left' left='30' top='#{top}' />"

          top += 20
        end
      end
    end
    if content["Words"]
      output += "<link id='#{language}_words_hide' value='[ X ]' cmd=';e LanguageAPI.toggle_word_section(\"#{language}\")' echo='[Toggling words for #{language}]' justify='left' left='0' top='#{top}' />"
      output += "<label id='#{language}_words_header' value='Words:' justify='left' left='30' top='#{top}' />"
      top += 20
      next if LanguageAPI.hidden_word_sections.include?(language)
      content["Words"].sort_by { |e| e["definition"].downcase }.each_with_index do |entry, i|
        word = entry["word"]
        definition = entry["definition"]
        say_cmd = "say #{word}"
        echo_cmd = ";e echo #{word.inspect}"

        output += "<link id='#{language}_word_say_#{i}' value='( ! )' cmd='#{escape_xml(say_cmd)}' echo='#{escape_xml(word)}' justify='left' left='0' top='#{top}' />"
        output += "<link id='#{language}_word_def_#{i}' value='#{escape_xml(definition)}' cmd='#{escape_xml(echo_cmd)}' echo='[#{language} - #{definition}]' justify='left' left='30' top='#{top}' />"
        top += 20
      end
    end
  end

  unless hidden.empty?
    output += "<label id='hidden_langs' value='Hidden Languages:' justify='left' left='0' top='#{top}' />"
    top += 20

    hidden.each do |language, _|
      output += "<link id='hidden_lang_#{language}' value='( HIDDEN ) #{language.capitalize}' cmd=';e LanguageAPI.toggle(\"#{language}\")' echo='[Unhiding #{language}]' justify='left' left='30' top='#{top}' />"
      top += 20
    end
  end

  output += "</dialogData>"
  puts "<closeDialog id='#{WINDOW_ID}'/><openDialog type='dynamic' id='#{WINDOW_ID}' title='Language Window' scroll='auto' location='main' justify='3' height='500' resident='true'>#{output}</openDialog>"
end

# Start up
load_language_window_state
load_languages
LANGUAGE_CMD_QUEUE.push(:update_language)

# Main loop
loop do
  case LANGUAGE_CMD_QUEUE.pop
  when :update_language
    render_language_window(@language_data)
  end
end

before_dying do
  save_language_window_state
end
