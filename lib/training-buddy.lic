=begin

	There are a lot of skills in this game, and every skill affects so many different systems, so which skill helps with what?! This script sets out to answer those questions! Enter how many skill point you are planning for a skill and see everything that the skill affects at that number of ranks. Increase/decrease those ranks and you can see the numbers change.
	
	Check out how many Armor Use points you need to train off the Action Penalty and Spell Hindrance of the armor you want to wear.
	Check out how much DS and Block chance you'll get from training in Shield Use.
	See how much AS, Parry DS, and Parry chance you'll get from training in weapons.
	
	And more!
	
	This is currently a work in progress, at the moment it only works for Armor Use, Shield Use, and every weapon type.

	Version 1: Initial release!
	Version 2: Updated all instaces of Char.prof to Stats.prof and all instances of Char.level to Stats.level

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 2

=end

class TrainingBuddyMain
	@everything = {
		"Skill" => [ "Stats", "Armor Use", "Shield Use", "Edged Weapons", "Blunt Weapons", "Two-Handed Weapons", "Ranged Weapons", "Thrown Weapons", "Polearm Weapons", "Brawling" ],
		"Profession" => [ "Bard", "Cleric", "Empath", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warrior", "Wizard" ],
		"Squares" => [ "Monk", "Rogue", "Warrior" ],
		"Pures" => [ "Cleric", "Empath", "Sorcerer", "Wizard" ],
		"Semis" => [ "Bard", "Paladin", "Ranger" ],
		"Race" => [ "Aelotoi", "Burghal Gnome", "Dark Elf", "Dwarf", "Elf", "Erithian", "Forest Gnome", "Giantman", "Half-Elf", "Half-Krolvin", "Halfling", "Human", "Sylvankind" ],
		"Stats" => [ "Strength", "Constitution", "Dexterity", "Agility", "Discipline", "Aura", "Logic", "Intuition", "Wisdom", "Influence" ],
		
		"Min Stats" => {
			"Bard" => [ "Influence", "Aura" ],
			"Cleric" => [ "Wisdom", "Intuition" ],
			"Empath" => [ "Wisdom", "Influence" ],
			"Monk" => [ "Agility", "Strength" ],
			"Paladin" => [ "Wisdom", "Strength" ],
			"Ranger" => [ "Dexterity", "Intuition" ],
			"Rogue" => [ "Dexterity", "Agility" ],
			"Sorcerer" => [ "Aura", "Wisdom" ],
			"Warrior" => [ "Constitution", "Strength" ],
			"Wizard" => [ "Aura", "Logic" ],
		},
		
		"Full Name" => { "Base RT Added" => "Armor#Roundtime_Penalty", "New RT Added" => "Armor#Roundtime_Penalty", "Base AP" => "Armor#Action_Penalty", "New AP" => "Armor#Action_Penalty", "Spell Hindrance" => "Hindrance", "Shield Enchant" => "925", "Attacker Level" => "Category:Creatures_by_Level", "Melee DS" => "Block#Melee_Defense", "Melee Block" => "Block#Block_Chance_Formula", "Ranged DS" => "Block#Ranged_Defense", "Ranged Block" => "Block#Block_Chance_Formula", "Weapon Techniques" => "Weapon Technique", "Parry DS" => "Parry", },
		
		"All Shield Sizes" => { "Small" => { "Melee Modifier" => 0.85, "Ranged Modifier" => 1.20, "Ranged Bonus" => -8 }, "Medium" => { "Melee Modifier" => 1.00, "Ranged Modifier" => 1.50, "Ranged Bonus" => 0 }, "Large" => { "Melee Modifier" => 1.15, "Ranged Modifier" => 1.80, "Ranged Bonus" => 8 }, "Tower" => { "Melee Modifier" => 1.30, "Ranged Modifier" => 2.10, "Ranged Bonus" => 16 }, },
		
		"All Stances" => {
			"Offensive" => { "Shield Modifier" => 0.50, "Block Modifier" => 0, "AS Modifier" => 1, "Parry Stance Bonus" => 0, "One Hand Parry Modifier" => 0.20, "Two Hand Parry Modifier" => 0.30, "Parry Modifier" => 0, "Polearm Parry Modifier" => 0.27, "Polearm Stance Bonus" => 15, "Bow Parry Modifier" => 0.15, "Crossbow Parry Modifier" => 0.12 },
			"Advance" => { "Shield Modifier" => 0.60, "Block Modifier" => 20, "AS Modifier" => 0.90, "Parry Stance Bonus" => 10, "One Hand Parry Modifier" => 0.30, "Two Hand Parry Modifier" => 0.45, "Parry Modifier" => 20, "Polearm Parry Modifier" => 0.41, "Polearm Stance Bonus" => 28, "Bow Parry Modifier" => 0.21, "Crossbow Parry Modifier" => 0.17 },
			"Forward" => { "Shield Modifier" => 0.70, "Block Modifier" => 40, "AS Modifier" => 0.80, "Parry Stance Bonus" => 20, "One Hand Parry Modifier" => 0.40, "Two Hand Parry Modifier" => 0.60, "Parry Modifier" => 40, "Polearm Parry Modifier" => 0.54, "Polearm Stance Bonus" => 41, "Bow Parry Modifier" => 0.27, "Crossbow Parry Modifier" => 0.22 },
			"Neutral" => { "Shield Modifier" => 0.80, "Block Modifier" => 60, "AS Modifier" => 0.70, "Parry Stance Bonus" => 30, "One Hand Parry Modifier" => 0.50, "Two Hand Parry Modifier" => 0.75, "Parry Modifier" => 60, "Polearm Parry Modifier" => 0.68, "Polearm Stance Bonus" => 54, "Bow Parry Modifier" => 0.33, "Crossbow Parry Modifier" => 0.27 },
			"Guarded" => { "Shield Modifier" => 0.90, "Block Modifier" => 80, "AS Modifier" => 0.60, "Parry Stance Bonus" => 40, "One Hand Parry Modifier" => 0.60, "Two Hand Parry Modifier" => 0.90, "Parry Modifier" => 80, "Polearm Parry Modifier" => 0.81, "Polearm Stance Bonus" => 67, "Bow Parry Modifier" => 0.39, "Crossbow Parry Modifier" => 0.32 },
			"Defensive" => { "Shield Modifier" => 1.00, "Block Modifier" => 100, "AS Modifier" => 0.50, "Parry Stance Bonus" => 50, "One Hand Parry Modifier" => 0.70, "Two Hand Parry Modifier" => 1.05, "Parry Modifier" => 100, "Polearm Parry Modifier" => 0.94, "Polearm Stance Bonus" => 80, "Bow Parry Modifier" => 0.45, "Crossbow Parry Modifier" => 0.37 },
		},
		
		"All Armor" => [ "Robes", "Light Leather", "Full Leather", "Reinforced Leather", "Double Leather", "Leather Breastplate", "Cuirbouilli Leather", "Studded Leather", "Brigandine Armor", "Chain Mail", "Double Chain", "Augmented Chain", "Chain Hauberk", "Metal Breastplate", "Augmented Breastplate", "Half Plate", "Full Plate" ],
		
		"All Shields" => [ "Small", "Medium", "Large", "Tower", ],
		"Stances" => [ "Offensive", "Advance", "Forward", "Neutral", "Guarded", "Defensive" ],
		
		"All Spell Lists" => [ "Minor Spiritual", "Major Spiritual", "Cleric", "Minor Elemental", "Major Elemental", "Ranger", "Sorcerer", "Wizard", "Bard", "Empath", "Minor Mental", "Major Mental", "Paladin" ],
		
		"Aelotoi" => { "Strength" => -5, "Constitution"	=> 0, "Dexterity" => 5, "Agility" => 10, "Discipline" => 5, "Aura" => 0, "Logic" => 5, "Intuition" => 5, "Wisdom" => 0, "Influence" => -5 },

		"Burghal Gnome" => { "Strength" => -15, "Constitution" => 10, "Dexterity" => 10, "Agility" => 10, "Discipline" => -5, "Aura" => 5, "Logic" => 10, "Intuition" => 5, 		"Wisdom" => 0, "Influence" => -5 },

		"Dark Elf" => { "Strength" => 0, "Constitution" => -5, "Dexterity" => 10, "Agility" => 5, "Discipline" => -10, "Aura" => 10, "Logic" => 0, "Intuition" => 5, "Wisdom" => 5, "Influence" => -5 },

		"Dwarf" => { "Strength" => 10, "Constitution" => 15, "Dexterity" => 0, "Agility" => -5, "Discipline" => 10, "Aura" => -10, "Logic" => 5, "Intuition" => 0, "Wisdom" => 0, "Influence" => -10 },

		"Elf" => { "Strength" => 0, "Constitution" => 0, "Dexterity" => 5, "Agility" => 15, "Discipline" => -15, "Aura" => 5, "Logic" => 0, "Intuition" => 0, "Wisdom" => 0, "Influence" => 10 },

		"Erithian" => { "Strength" => -5, "Constitution" => 10, "Dexterity" => 0, "Agility" => 0, "Discipline" => 5, "Aura" => 0, "Logic" => 5, "Intuition" => 0, "Wisdom" => 0, "Influence" => 10 },

		"Forest Gnome" => { "Strength" => -10, "Constitution" => 10, "Dexterity" => 5, "Agility" => 10, "Discipline" => 5, "Aura" => 0, "Logic" => 5, "Intuition" => 0, "Wisdom" => 5, "Influence" => -5 },

		"Giantman" => { "Strength" => 15, "Constitution" => 10, "Dexterity" => -5, "Agility" => -5, "Discipline" => 0, "Aura" => -5, "Logic" => -5, "Intuition" => 0, "Wisdom" => 0, "Influence" => 5 },

		"Half-Elf" => { "Strength" => 0, "Constitution" => 0, "Dexterity" => 5, "Agility" => 10, "Discipline" => -5, "Aura" => 0, "Logic" => 0, "Intuition" => 0, "Wisdom" => 0, "Influence" => 5 },

		"Half-Krolvin" => { "Strength" => 10, "Constitution" => 10, "Dexterity" => 0, "Agility" => 5, "Discipline" => 0, "Aura" => 0, "Logic" => -10, "Intuition" => 0, "Wisdom" => -5, "Influence" => -5 },

		"Halfling" => { "Strength" => -15, "Constitution" => 10, "Dexterity" => 15, "Agility" => 10, "Discipline" => -5, "Aura" => -5, "Logic" => 5, "Intuition" => 10, "Wisdom" => 0, "Influence" => -5 },

		"Human" => { "Strength" => 5, "Constitution" => 0, "Dexterity" => 0, "Agility" => 0, "Discipline" => 0, "Aura" => 0, "Logic" => 5, "Intuition" => 5, "Wisdom" => 0, "Influence" => 0 },

		"Sylvankind" => { "Strength" => 0, "Constitution" => 0, "Dexterity" => 10, "Agility" => 5, "Discipline" => -5, "Aura" => 5, "Logic" => 0, "Intuition" => 0, "Wisdom" => 0, "Influence" => 0 },
		
		"Armor Use" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 3, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 3, "Wizard" => 1 },
		"Shield Use" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 3, "Wizard" => 1 },
		"Edged Weapons" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		"Blunt Weapons" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		"Two-Handed Weapons" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		"Ranged Weapons" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		"Thrown Weapons" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		"Polearm Weapons" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		"Brawling" => { "Bard" => 2, "Cleric" => 1, "Empath" => 1, "Monk" => 2, "Paladin" => 2, "Ranger" => 2, "Rogue" => 2, "Sorcerer" => 1, "Warrior" => 2, "Wizard" => 1 },
		
		"Current Skill Ranks" => { "Armor Use" => Skills.armoruse, "Shield Use" => Skills.shielduse, "Edged Weapons" => Skills.edgedweapons, "Blunt Weapons" => Skills.bluntweapons, "Two-Handed Weapons" => Skills.twohandedweapons, "Ranged Weapons" => Skills.rangedweapons, "Thrown Weapons" => Skills.thrownweapons, "Polearm Weapons" => Skills.polearmweapons, "Brawling" => Skills.brawling },
		
		"Weapon Techniques" => {
			"Brawling" => { "10" => "Twin Hammerfists", "25" => "Fury", "50" => "Clash", "75" => "Spin Kick" },
			"Blunt Weapons" => { "10" => "Dizzying Swing", "25" => "Clobber", "50" => "Pummel", "75" => "Pulverize" },
			"Edged Weapons" => { "10" => "Cripple", "25" => "Riposte", "50" => "Flurry", "75" => "Whirling Blade" },
			"Polearm Weapons" => { "10" => "Charge", "25" => "Guardant Thrusts", "50" => "Cyclone", "75" => "Radial Sweep" },
			"Ranged Weapons" => { "10" => "Reactive Shot", "25" => "Pin Down", "50" => "Barrage", "75" => "Volley" },
			"Two-Handed Weapons" => { "10" => "Overpower", "25" => "Thrash", "50" => "Reverse Strike", "75" => "Whirlwind" },
		},
		
		"Armor Stats" => {
			"Added RT" => { "Robes" => 0, "Light Leather" => 0, "Full Leather" => 1, "Reinforced Leather" => 2, "Double Leather" => 2, "Leather Breastplate" => 3, "Cuirbouilli Leather" => 4, "Studded Leather" => 5, "Brigandine Armor" => 6, "Chain Mail" => 7, "Double Chain" => 8, "Augmented Chain" => 8, "Chain Hauberk" => 9, "Metal Breastplate" => 9, "Augmented Breastplate" => 10, "Half Plate" => 11, "Full Plate" => 12 },
			
			"Base AP" => { "Robes" => 0, "Light Leather" => 0, "Full Leather" => 1, "Reinforced Leather" => 5, "Double Leather" => 6, "Leather Breastplate" => 7, "Cuirbouilli Leather" => 8, "Studded Leather" => 10, "Brigandine Armor" => 12, "Chain Mail" => 13, "Double Chain" => 14, "Augmented Chain" => 16, "Chain Hauberk" => 18, "Metal Breastplate" => 20, "Augmented Breastplate" => 25, "Half Plate" => 30, "Full Plate" => 35 },
			
			"Ranks Train Off Penalty" => { "Robes" => 0, "Light Leather" => 0, "Full Leather" => 2, "Reinforced Leather" => 6, "Double Leather" => 6, "Leather Breastplate" => 10, "Cuirbouilli Leather" => 15, "Studded Leather" => 20, "Brigandine Armor" => 27, "Chain Mail" => 35, "Double Chain" => 50, "Augmented Chain" => 50, "Chain Hauberk" => 70, "Metal Breastplate" => 70, "Augmented Breastplate" => 90, "Half Plate" => 110, "Full Plate" => 130 },
			
			"AG" => { "Robes" => 1, "Light Leather" => 2, "Full Leather" => 2, "Reinforced Leather" => 2, "Double Leather" => 2, "Leather Breastplate" => 3, "Cuirbouilli Leather" => 3, "Studded Leather" => 3, "Brigandine Armor" => 3, "Chain Mail" => 4, "Double Chain" => 4, "Augmented Chain" => 4, "Chain Hauberk" => 4, "Metal Breastplate" => 5, "Augmented Breastplate" => 5, "Half Plate" => 5, "Full Plate" => 5 },
			
			"Hindrance" => { 
				"Robes" => { "Minor Spiritual" => 0, "Major Spiritual" => 0, "Cleric" => 0, "Minor Elemental" => 0, "Major Elemental" => 0, "Ranger" => 0, "Sorcerer" => 0, "Wizard" => 0, 	"Bard" => 0, "Empath" => 0, "Minor Mental" => 0, "Major Mental" => 0, "Paladin" => 0, "Max" => 0, },
				
				"Light Leather" => { "Minor Spiritual" => 0, "Major Spiritual" => 0, "Cleric" => 0, "Minor Elemental" => 0, "Major Elemental" => 0, "Ranger" => 0, "Sorcerer" => 0, "Wizard" => 0, "Bard" => 0, "Empath" => 0, "Minor Mental" => 0, "Major Mental" => 0, "Paladin" => 0, "Max" => 0, },
				
				"Full Leather" => { "Minor Spiritual" => 0, "Major Spiritual" => 0, "Cleric" => 0, "Minor Elemental" => 0, "Major Elemental" => 0, "Ranger" => 0, "Sorcerer" => 0, 	"Wizard" => 0, "Bard" => 0, "Empath" => 0, "Minor Mental" => 0, "Major Mental" => 0, "Paladin" => 0, "Max" => 0, },
				
				"Reinforced Leather" => { "Minor Spiritual" => 0,  "Major Spiritual" => 0, "Cleric" => 0, "Minor Elemental" => 0, "Major Elemental" => 2, "Ranger" => 0, "Sorcerer" => 1, "Wizard" => 2, "Bard" => 0, "Empath" => 0, "Minor Mental" => 0, "Major Mental" => 2, "Paladin" => 0, "Max" => 4, },
				
				"Double Leather" => { "Minor Spiritual" => 0, "Major Spiritual" => 0, "Cleric" => 0, "Minor Elemental" => 0, "Major Elemental" => 4, "Ranger" => 0, "Sorcerer" => 2, "Wizard" => 4, "Bard" => 2, "Empath" => 0, "Minor Mental" => 2, "Major Mental" => 4, "Paladin" => 0, "Max" => 6, },
				
				"Leather Breastplate" => { "Minor Spiritual" => 3, "Major Spiritual" => 4, "Cleric" => 4, "Minor Elemental" => 4, "Major Elemental" => 6, "Ranger" => 3, "Sorcerer" => 5, "Wizard" => 6, "Bard" => 3, "Empath" => 4, "Minor Mental" => 4, "Major Mental" => 6, "Paladin" => 2, "Max" => 16, },
				
				"Cuirbouilli Leather" => { "Minor Spiritual" => 4, "Major Spiritual" => 5, "Cleric" => 5, "Minor Elemental" => 5, "Major Elemental" => 7, "Ranger" => 4, "Sorcerer" => 6, "Wizard" => 7, "Bard" => 3, "Empath" => 5, "Minor Mental" => 5, "Major Mental" => 7, "Paladin" => 3, "Max" => 20, },
				
				"Studded Leather" => { "Minor Spiritual" => 5, "Major Spiritual" => 6, "Cleric" => 6, "Minor Elemental" => 6, "Major Elemental" => 9, "Ranger" => 5, "Sorcerer" => 8, "Wizard" => 9, "Bard" => 3, "Empath" => 6, "Minor Mental" => 6, "Major Mental" => 9, "Paladin" => 4, "Max" => 24, },
				
				"Brigandine Armor" => { "Minor Spiritual" => 6, "Major Spiritual" => 7, "Cleric" => 7, "Minor Elemental" => 7, "Major Elemental" => 12, "Ranger" => 6, "Sorcerer" => 11, "Wizard" => 12, "Bard" => 7, "Empath" => 7, "Minor Mental" => 7, "Major Mental" => 12, "Paladin" => 5, "Max" => 28, },
				
				"Chain Mail" => { "Minor Spiritual" => 7, "Major Spiritual" => 8, "Cleric" => 8, "Minor Elemental" => 8, "Major Elemental" => 16, "Ranger" => 7, "Sorcerer" => 16, 	"Wizard" => 16, "Bard" => 8, "Empath" => 8, "Minor Mental" => 8, "Major Mental" => 16, "Paladin" => 6, "Max" => 40, },
				
				"Double Chain" => { "Minor Spiritual" => 8, "Major Spiritual" => 9, "Cleric" => 9, "Minor Elemental" => 9, "Major Elemental" => 20, "Ranger" => 8, "Sorcerer" => 18, "Wizard" => 20, "Bard" => 8, "Empath" => 9, "Minor Mental" => 9, "Major Mental" => 20, "Paladin" => 7, "Max" => 45, },
				
				"Augmented Chain" => { "Minor Spiritual" => 9, "Major Spiritual" => 11, "Cleric" => 11, "Minor Elemental" => 10, "Major Elemental" => 25, "Ranger" => 9, "Sorcerer" => 22, "Wizard" => 25, "Bard" => 8, "Empath" => 11, "Minor Mental" => 10, "Major Mental" => 25, "Paladin" => 8, "Max" => 55, },
				
				"Chain Hauberk" => { "Minor Spiritual" => 11, "Major Spiritual" => 14, "Cleric" => 14, "Minor Elemental" => 12, "Major Elemental" => 30, "Ranger" => 11, "Sorcerer" => 26, "Wizard" => 30, "Bard" => 15,"Empath" => 15, "Minor Mental" => 15, "Major Mental" => 30, "Paladin" => 9, "Max" => 60, },
				
				"Metal Breastplate" => { "Minor Spiritual" => 16, "Major Spiritual" => 25, "Cleric" => 25, "Minor Elemental" => 16, "Major Elemental" => 35, "Ranger" => 21, "Sorcerer" => 29, "Wizard" => 35, "Bard" => 21, "Empath" => 25, "Minor Mental" => 21, "Major Mental" => 35, "Paladin" => 10, "Max" => 90, },
				
				"Augmented Breastplate" => { "Minor Spiritual" => 17, "Major Spiritual" => 28, "Cleric" => 28, "Minor Elemental" => 18, "Major Elemental" => 40, "Ranger" => 24, "Sorcerer" => 33, "Wizard" => 40, "Bard" => 21, "Empath" => 28, "Minor Mental" => 21, "Major Mental" => 40, "Paladin" => 11, "Max" => 92, },
				
				"Half Plate" => { "Minor Spiritual" => 18, "Major Spiritual" => 32, "Cleric" => 32, "Minor Elemental" => 20, "Major Elemental" => 45, "Ranger" => 27, "Sorcerer" => 39, "Wizard" => 45, "Bard" => 21, "Empath" => 32, "Minor Mental" => 21, "Major Mental" => 45, "Paladin" => 12, "Max" => 94, },
				
				"Full Plate" => { "Minor Spiritual" => 20, "Major Spiritual" => 45, "Cleric" => 45, "Minor Elemental" => 22, "Major Elemental" => 50, "Ranger" => 30, "Sorcerer" => 48, "Wizard" => 50, "Bard" => 50, "Empath" => 45, "Minor Mental" => 50, "Major Mental" => 50, "Paladin" => 13, "Max" => 96, },
			},
		},
	}
	
	stat_info = "\n\nKeep in mind every stat can only reach 100 via leveling. You can attain another 40 to each stat from both Ascension and Enhancives, allowing for a possible total of 180.\n\nThe bonus is automatically calculated based on the stat value and race selected."
	rank_info = "\n\nEnter the number of ranks you want to plan for.\n\nThe script allows you to go 100 ranks over what your Profession allows because you can get up to 50 ranks in both Ascension and Enhancives.\n\n"
	@tooltips = {
		"Level" => "Enter the level you are planning for.",
		"Strength" => "Enter the Strength you are planning for.#{stat_info}",
		"Constitution" => "Enter the Constitution you are planning for.#{stat_info}",
		"Dexterity" => "Enter the Dexterity you are planning for.#{stat_info}",
		"Agility" => "Enter the Agility you are planning for.#{stat_info}",
		"Discipline" => "Enter the Discipline you are planning for.#{stat_info}",
		"Aura" => "Enter the Aura you are planning for.#{stat_info}",
		"Logic" => "Enter the Logic you are planning for.#{stat_info}",
		"Intuition" => "Enter the Intuition you are planning for.#{stat_info}",
		"Wisdom" => "Enter the Wisdom you are planning for.#{stat_info}",
		"Influence" => "Enter the Influence you are planning for.#{stat_info}",
		"Profession" => "Enter the Profession you want to plan for.",
		"Race" => "Enter the Race you want to plan for.",
		"Skill" => "Select 'Stats' to enter the level and stats you want to plan for, then select a skill you want more information on.",
		"Asc/Enh Ranks Needed" => "The total number of ranks you would need from Ascension or Enhancives to reach the number of ranks entered.",
		"Base RT Added" => "The base number of seconds this armor type adds to your RoundTime whenever you swing a weapon.\n\nThis number can be reduced to 0 with enough Armor Use ranks.",
		"Base AP" => "The base Action Penalty for this armor type.\n\nThe Action Penalty gives your character a negative modifier in many checks, including defending against a standard maneuver, defending against Elemental Wave, standing up, and more.\n\nThe Action Penalty also lowers your Evade DS by half of the Action Penalty. For example: If you have 100 Evade DS, and your armor gives a 20% Action Penalty, then you would lose 10% of your Evade DS, leaving you with 90 Evade DS.\n\nThe Action Penalty can never be fully trained off, but it can be lowered by training in Armor Use.",
		"Armor Specialization" => "The number of Armor Specialization Points you will have from training in Armor Use. These points can be used to train in Armor Skills.\n\nYou get 1 point per rank of Armor Use. \n\nNote: You don't receive points from Armor Use trained in Ascension or via Enhancive items.",
		"Shield Specialization" => "The number of Shield Specialization Points you will have from training in Shield Use. These points can be used to train in Shield Skills.\n\nYou get 1 point per rank of Shield Use. \n\nNote: You don't receive points from Shield Use trained in Ascension or via Enhancive items.",
		"Grit" => "The Grit Bonus this training gives you.\n\nYou get 2 Grit Bonus per rank of Armor Use up to your level, then 1 Grit Bonus per rank after that.",
		"New RT Added" => "The number of seconds this armor type adds to your RoundTime (based on training) whenever you swing a weapon.",
		"New AP" => "The Action Penalty for this armor type based on your Armor Use training.",
		"Spell Hindrance" => "The Spell Hindrance for every spell list for this armor type.\n\nIf an armor type has a spell hindrance then the spell hindrance can be lowered by training more in Armor Use, but it can never be reduced to 0.",
		"Armor Type" => "Select the armor type you want to see stats for.",
		"Armor" => "Armor protects its wearer from damage by decreasing the damage factor (usually) and increasing the critical divisor.",
		"Armor Use" => "#{rank_info}The Armor Use skill is used to reduce the effects of wearing armor on one's actions, including attacking roundtime, spell hindrance, and maneuver hindrance. Depending on the armor, specific amounts of training are required to train off the hindrances of the armor. Spell casting hindrance can never be fully trained off (only minimized).",
		"Shield Use" => "Shield Use is a skill a character trains in to increase their proficiency with shields, thereby increasing Defensive Strength (DS) when the shield is in the character's off-hand, as well as providing a chance to block an attack outright before the attack roll can take place.",
		"Shield Enchant" => "Enter the enchant bonus of the shield you are planning to use.\n\nShield Bonus adds directly to your DS when using a shield.",
		"Attacker Level" => "Enter the level of the attacker you want to train for.\n\nYour chance to block, parry, and evade is lower against higher level attackers.",
		"Shield Size" => "Select the Shield Size of the shield you are planning for.",
		"Stance" => "Select the Stance you plan on being in.",
		"Melee DS" => "The amount of Melee DS the current settings give your character.\n\nEverything that affects your Melee DS:\nShield Use Ranks\nStrength Bonus\nDexterity Bonus\nShield Size\nStance\nShield Enchant Bonus",
		"Ranged DS" => "The amount of Ranged DS the current settings give your character.\n\nEverything that affects your Ranged DS:\nShield Use Ranks\nStrength Bonus\nDexterity Bonus\nShield Size\nShield Size Bonus/Penalty\nStance\nShield Enchant Bonus",
		"Melee Block" => "The percent chance your character has to block a melee attack based on the current settings. Block is capped at 60%.\n\nEverything that affects your Melee Block:\nShield Use Ranks\nStrength Bonus\nDexterity Bonus\nShield Size\nStance\nAttacker Level\n\nYour status conditions (such as prone, stunned, missing health, missing spirit, etc) also negatively affect your block chance.\n\nOther things can affect your Block chance such as the CMAN skill Block Specialization.",
		"Ranged Block" => "The percent chance your character has to block a ranged attack based on the current settings. Block is capped at 60%.\n\nEverything that affects your Melee Block:\nShield Use Ranks\nStrength Bonus\nDexterity Bonus\nShield Size\nStance\nAttacker Level\n\nYour status conditions (such as prone, stunned, missing health, missing spirit, etc) also negatively affect your block chance.\n\nOther things can affect your Block chance such as the CMAN skill Block Specialization.",
		"Edged Weapons" => "Edged Weapons (OHE) are some of the most common melee weapons in Elanthia. They're easy and require little training to use, as evidenced by training point costs.",
		"Blunt Weapons" => "The purpose of most blunt weapons is to crush. Many of these weapons also deal puncture damage due to added spikes. One-handed blunt weapons are small and light enough to be wielded in a single hand, allowing the user to make use of a shield or a second weapon if so desired.",
		"Two-Handed Weapons" => "Two-Handed Weapons are some of the most damaging weapons in the world of Elanthia. Users of these weapons have access to the claidhmore, a weapon that has a natural fantastic (40 points) level of critical weighting.",
		"Ranged Weapons" => "Ranged Weapons, which include bows and crossbows, are used to launch ammunition at enemies from a distance.",
		"Thrown Weapons" => "Thrown Weapons skill allows the user to HURL a weapon at a target. Most weapons can be hurled, but only a few types are ideal for throwing.",
		"Polearm Weapons" => "Training in the Polearm Weapons skill supports the use of polearm weapons such as spears, halberds, and lances in melee combat.",
		"Brawling" => "Brawling is the skill related to the use of one's open hands or small weapons used in a similar manner to one's open hands",
		"Attack Strength" => "How much Attack Strength your character receives from the current settings.\n\nEverything that affects your Attack Strength:\nWeapon Skill Bonus\nStrength Bonus (Melee and Thrown)\nDexterity Bonus (Ranged and Thrown)\nPerception Ranks (Ranged and Thrown)\nAmbush Ranks (Ranged)\nCombat Maneuvers Ranks (Melee and Thrown)\nWeapon Enchant\nStance\n\nThere are many other things that affect your Attack Strength such as CMAN skills, Spells, Society Skills, and more.",
		"Weapon Techniques" => "Weapon Techniques are a skill type managed by the Player System Manager similar to Combat Maneuvers for warriors, rogues, and paladins. Unlike the other systems, Weapon Techniques are granted automatically when Weapon Skill requirements are met. The WEAPON verb provides access to this system.",
		"Parry" => "The percent chance your character has to parry an attack based on the current settings. Parry is capped at 60%.\n\nEverything that affects your Parry:\nWeapon Ranks\nStrength Bonus\nDexterity Bonus\nWeapon Enchant\nStance\nYour Weapon Speed\nAttacker's Weapon Speed\nAttacker's Level\n\nOther things can affect your Parry chance such as the CMAN skill Parry Specialization.",
		"Parry DS" => "The amount of Parry DS the current settings give your character.\n\nEverything that affects your Parry DS:\nWeapon Ranks\nStrength Bonus\nDexterity Bonus\nStance\nWeapon Enchant Bonus",
		"Polearm Grip" => "Some Polearms only require one hand to use, select whether your Polearm requires one hand or two.",
		"Bow/Crossbow" => "Parry DS is different for Bows and Crossbows. Select the one you will be using.",
	}

	@current_stats = { "Strength" => Stats.str[0], "Constitution" => Stats.con[0], "Dexterity" => Stats.dex[0], "Agility" => Stats.agi[0], "Discipline" => Stats.dis[0], "Aura" => Stats.aur[0], "Logic" => Stats.log[0], "Intuition" => Stats.int[0], "Wisdom" => Stats.wis[0], "Influence" => Stats.inf[0] }

	def self.create_window
		@width_windows = 300
		@height_windows = 500
		@main_window = Gtk::Window.new(:toplevel)
		@main_window.set_keep_above(true)
		@main_window.set_title("Training Buddy - #{checkname}")
		@main_window.set_size_request(@width_windows, @height_windows)
		
		@info_window = Gtk::Window.new(:toplevel)
		@info_window.set_keep_above(true)
		@info_window.set_decorated(false)
		@info_window.set_size_request(@width_windows, @height_windows)
		
		@main_parent_grid = Gtk::Grid.new
		@main_menu_grid = Gtk::Grid.new
		@info_grid = Gtk::Grid.new
		
		@main_parent_grid.attach(@main_menu_grid, 0, 0, 1, 1)
		@main_parent_grid.attach(@info_grid, 0, 1, 1, 1)
		
		@main_menus = {}
		@current_info = {}
		
		name = "Skill"
		@main_menus[name] = Gtk::ComboBoxText.new
		@everything[name].each{ |item| @main_menus[name].append_text(item) }
		@main_menu_grid.attach(@main_menus[name], 0, 0, 1, 1)
			
		@main_menus[name].signal_connect("changed"){ |menu|
			if menu.active_text == "Stats"
				@info_grid.each { |child|
					@info_grid.remove(child)
					child.destroy
				}
				populate_stats_page
			else
				@info_grid.each { |child|
					@info_grid.remove(child)
					child.destroy
				}
				@current_info["Skill Name"] = menu.active_text
				populate_skill_page
			end
		}
		
		@main_menus["Skill"].set_active(0)
		
		@main_window.signal_connect("configure-event"){ |window, event|
			x, y = event.x, event.y
			@info_window.move(x + @width_windows + 2, y)
			false
		}
		
		@info_window_grid = Gtk::Grid.new
		@info_window_label = Gtk::Label.new
		@info_window_label.set_line_wrap(true)
		@info_window_label.set_line_wrap_mode(:word)
		@info_window_grid.attach(@info_window_label, 0, 0, 1, 1)
		
		@main_window.signal_connect("destroy") do
			@info_window.close
			@info_window = nil
			@main_window.close
			@main_window = nil
			@info_window_label = nil
			Gtk.main_quit
			kill_script "training-buddy" if running? "training-buddy"
		end

		@main_window.add(@main_parent_grid)
		@main_window.show_all
		
		@info_window.add(@info_window_grid)
		@info_window.show_all
	end
	
	before_dying{
		@main_window.close if @main_window
	}
	
	def self.populate_stats_page
		@all_stat_buttons = {}
		@other_spin_buttons = {}
		@bonus_labels = {}
		@all_adjustment = {}
		menu_grid = Gtk::Grid.new
		stats_grid = Gtk::Grid.new
		@info_grid.attach(menu_grid, 0, 0, 1, 1)
		@info_grid.attach(stats_grid, 0, 1, 1, 1)

		row = -1
		
		level = @current_info["Level"] ? @current_info["Level"] : Stats.level
		name = "Level"
		adjustment = Gtk::Adjustment.new(level, 0, 100, 1, 10, 0)
		@other_spin_buttons[name] = Gtk::SpinButton.new(adjustment)
		stats_grid.attach(Gtk::Label.new("#{name}     "), 0, row += 1, 1, 1)
		stats_grid.attach(@other_spin_buttons[name], 1, row, 1, 1)
		@other_spin_buttons[name].signal_connect("value-changed"){ @current_info[name] = @other_spin_buttons[name].value.to_i }

		menu_names = [ "Profession", "Race" ]
		column = -1
		menu_names.each{ |name|
			@main_menus[name] = Gtk::ComboBoxText.new
			@everything[name].each{ |item| @main_menus[name].append_text(item) }
			
			@main_menus[name].signal_connect("changed"){ |menu|
				@current_info[name] = menu.active_text
				if name == "Profession"
					@all_adjustment.each{ |stat_name, adjustment|
						min = set_min_stat(stat_name)
						adjustment.lower = min
					}
				elsif name == "Race"
					@all_stat_buttons.each{ |stat_name,button| update_stat_bonus(stat_name) }
				end
				change_tooltip(menu.active_text)
			}

			menu_grid.attach(@main_menus[name], column += 1, 0, 1, 1)
			
			if name == "Profession"
				prof = @current_info["Profession"] ? @current_info["Profession"] : Stats.prof
				match_menu_item(@main_menus[name], prof)
			elsif name == "Race"
				race = @current_info["Race"] ? @current_info["Race"] : Char.race
				match_menu_item(@main_menus[name], race)
			end
		}

		@everything["Stats"].each{ |name|
			current = @current_info[name] ? @current_info[name] : @current_stats[name]
			min = 0
			min = set_min_stat(name)
			max = 180
			@all_adjustment[name] = Gtk::Adjustment.new(current, min, max, 1, 10, 0)
			@all_stat_buttons[name] = Gtk::SpinButton.new(@all_adjustment[name])
			@current_info[name] = @all_stat_buttons[name].value.to_i
			
			@bonus_labels[name] = Gtk::Label.new
			update_stat_bonus(name)
			
			stats_grid.attach(Gtk::Label.new("#{name}     "), 0, row += 1, 1, 1)
			stats_grid.attach(@all_stat_buttons[name], 1, row, 1, 1)
			stats_grid.attach(@bonus_labels[name], 2, row, 1, 1)
			
			@all_stat_buttons[name].signal_connect("value-changed"){
				@current_info[name] = @all_stat_buttons[name].value.to_i
				update_stat_bonus(name)
			}
		}
		
		[@all_stat_buttons, @other_spin_buttons].each{ |hash|
			hash.each{ |name,button|
				current_value = button.value.to_i
				if current_value == 20 || current_value == 0
					button.value += 1
					button.value -= 1
				else
					button.value -= 1
					button.value += 1
				end
				button.value = current_value
			}
		}
		
		@main_menus.each{ |name,value| value.set_tooltip_text(@tooltips[name]) unless value.tooltip_text }
		
		[@all_stat_buttons, @other_spin_buttons].each{ |hash| hash.each{ |name,value| hash[name].signal_connect('enter-notify-event'){ change_tooltip(name) } } }
		
		@main_window.show_all
	end
	
	def self.change_tooltip(name)
		if @info_window_label
			tooltip = @tooltips[name]
			if name == "Asc/Enh Ranks Needed"
				info = "Ascension"
				tooltip += "\n\n<a href='https://gswiki.play.net/#{info}'>Click here</a> for more info on #{info}."
				
				info = "Enhancive"
				tooltip += "\n\n<a href='https://gswiki.play.net/#{info}'>Click here</a> for more info on #{info}."
			elsif name =~ /One Handed|Two Handed/
				info = "Grip"
				tooltip += "\n\n<a href='https://gswiki.play.net/#{info}'>Click here</a> for more info on #{info}."
			elsif name =~ /Bow|Crossbow/
				info = "Ranged Weapons"
				tooltip += "\n\n<a href='https://gswiki.play.net/#{info}'>Click here</a> for more info on #{info}."
			elsif name =~ /Your Weapon Speed|Attacker's Weapon Speed/
				tooltip += "\n\n<a href='https://gswiki.play.net/Base weapon speed'>Click here</a> for more info on Weapon Speed."
			else
				if @everything["Profession"].include?(name)
					full_name = "#{name}_Base"
				elsif @everything["All Shields"].include?(name)
					name = "Shields"
					full_name = "Shield"
				elsif @everything["Stances"].include?(name)
					name = "Stances"
					full_name = "Stance"
				else
					full_name = @everything["Full Name"][name]
				end
				full_name = name.dup if full_name.nil?
				tooltip += "\n\n<a href='https://gswiki.play.net/#{full_name}'>Click here</a> for more info on #{name}."
			end
			@info_window_label.markup = tooltip
		end
	end
	
	def self.set_min_stat(name)
		if @everything["Min Stats"][@current_info["Profession"]].include?(name)
			min = 30
		else
			min = 20
		end
	end
	
	def self.update_stat_bonus(name)
		if @current_info[name] == 50
			bonus = 0
		elsif @current_info[name] < 50
			bonus = (((50 - @current_info[name]) / 2).truncate) * -1
		else
			bonus = ((@current_info[name] - 50) / 2).truncate
		end
		bonus += @everything[@current_info["Race"]][name]
		@current_info["#{name} Bonus"] = bonus
		@bonus_labels[name].text = "     Bonus: #{@current_info["#{name} Bonus"].to_s}"
	end
	
	def self.populate_skill_page
		@skill_info_labels = {}
		@skill_menus = {}
		spin_button_grid = Gtk::Grid.new
		@skill_menu_grid = Gtk::Grid.new
		@skill_more_grid = Gtk::Grid.new
		@skill_spin_buttons = {}
		@skill_event_boxes = {}
		
		@info_grid.attach(spin_button_grid, 0, 0, 1, 1)
		@info_grid.attach(@skill_menu_grid, 0, 1, 1, 1)
		@info_grid.attach(@skill_more_grid, 0, 2, 1, 1)
		
		@skill_row = -1
		current = @everything["Current Skill Ranks"][@current_info["Skill Name"]]
		min = 0
		ranks_per_level = @everything[@current_info["Skill Name"]][@current_info["Profession"]]
		base_max = (ranks_per_level * @current_info["Level"]) + (ranks_per_level)
		base_max += ranks_per_level if @current_info["Level"] < 100
		max = base_max + 100
		@rank_adjustment = Gtk::Adjustment.new(current, min, max, 1, 10, 0)
		info = "Ranks"
		@skill_spin_buttons[info] = Gtk::SpinButton.new(@rank_adjustment)
		spin_button_grid.attach(Gtk::Label.new("#{@current_info["Skill Name"]}             "), 0, @skill_row += 1, 1, 1)
		spin_button_grid.attach(@skill_spin_buttons[info], 1, @skill_row, 1, 1)
		
		if @current_info["Skill Name"] == "Armor Use"
			info = "Armor Type"
			@skill_menus[info] = Gtk::ComboBoxText.new
			@everything["All Armor"].each{ |item| @skill_menus[info].append_text(item) }
			@skill_menu_grid.attach(@skill_menus[info], 0, @skill_row += 1, 1, 1)
			
			labels = [ "Asc/Enh Ranks Needed", "Base RT Added", "Base AP" ]
			add_skill_labels(labels)
			
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			
			if @current_info["Profession"] =~ /Paladin|Rogue|Warrior/
				info = "Armor Specialization"
				put_label_in_box(info)
				@skill_more_grid.attach(@skill_event_boxes[info], 0, @skill_row += 1, 1, 1)
			end
			
			if @current_info["Profession"] == "Warrior"
				info = "Grit"
				put_label_in_box(info)
				@skill_more_grid.attach(@skill_event_boxes[info], 0, @skill_row += 1, 1, 1)
			end
			
			labels = [ "New RT Added", "New AP" ]
			add_skill_labels(labels)
			
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			
			labels = [ "Spell Hindrance" ]
			add_skill_labels(labels)
			
			@everything["All Spell Lists"].each{ |info|
				put_label_in_box(info)
				@skill_more_grid.attach(@skill_event_boxes[info], 0, @skill_row += 1, 1, 1)
			}
		elsif @current_info["Skill Name"] == "Shield Use"
			add_enchant_button("Shield Enchant")
			add_level_button
		
			info = "Shield Size"
			@skill_menus[info] = Gtk::ComboBoxText.new
			@everything["All Shield Sizes"].each{ |name, value| @skill_menus[info].append_text(name) }
			@skill_menu_grid.attach(@skill_menus[info], 0, @skill_row += 1, 1, 1)
			
			add_stance_menu
			
			labels = [ "Asc/Enh Ranks Needed" ]
			add_skill_labels(labels)
			
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			
			if @current_info["Profession"] =~ /Paladin|Rogue|Warrior/
				info = "Shield Specialization"
				put_label_in_box(info)
				@skill_more_grid.attach(@skill_event_boxes[info], 0, @skill_row += 1, 1, 1)
				@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			end
			
			labels = [ "Melee DS", "Melee Block" ]
			add_skill_labels(labels)
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			labels = [ "Ranged DS", "Ranged Block" ]
			add_skill_labels(labels)
		elsif @current_info["Skill Name"] =~ /Brawling|Blunt Weapons|Edged Weapons|Polearm Weapons|Ranged Weapons|Thrown Weapons|Two-Handed Weapons/
			add_enchant_button("Weapon Enchant")
			add_level_button
			add_weapon_speed("Your Weapon Speed")
			add_weapon_speed("Attacker's Weapon Speed")
			add_stance_menu
			
			if @current_info["Skill Name"] == "Polearm Weapons" || @current_info["Skill Name"] == "Ranged Weapons"
				if @current_info["Skill Name"] == "Polearm Weapons"
					info = "Polearm Grip"
					items = [ "One Handed", "Two Handed" ]
				elsif @current_info["Skill Name"] == "Ranged Weapons"
					info = "Bow/Crossbow"
					items = [ "Bow", "Crossbow" ]
				end
				@skill_menus[info] = Gtk::ComboBoxText.new
				items.each{ |name, value| @skill_menus[info].append_text(name) }
				@skill_menu_grid.attach(@skill_menus[info], 1, @skill_row, 1, 1)
			end
			
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			
			labels = [ "Asc/Enh Ranks Needed" ]
			add_skill_labels(labels)
			
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			
			labels = [ "Attack Strength", "Parry DS", "Parry" ]
			add_skill_labels(labels)
			
			@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			
			if (@current_info["Skill Name"] != "Thrown Weapons") && (!@everything["Pures"].include?(@current_info["Profession"]))
				labels = [ "Weapon Techniques" ]
				add_skill_labels(labels)
				@skill_more_grid.attach(Gtk::Label.new, 0, @skill_row += 1, 1, 1)
			end
		end
		
		@skill_menus.each{ |name,value|
			value.set_tooltip_text(@tooltips[name])
			value.signal_connect("changed"){ |menu|
				change_tooltip(menu.active_text)
				update_skill_info(base_max)
			}
		}
		@skill_spin_buttons.each{ |name,button| 
			button.signal_connect('enter-notify-event'){
				if name == "Ranks"
					change_tooltip(@main_menus["Skill"].active_text)
				else
					change_tooltip(name)
				end
			}
			
			button.signal_connect("value-changed"){ update_skill_info(base_max) }
		}
		@skill_menus.each{ |name,value| value.set_tooltip_text(@tooltips[name]) unless value.tooltip_text }
		@skill_event_boxes.each{ |name,box| box.signal_connect('enter-notify-event'){ change_tooltip(name) } }
		@skill_info_labels.each{ |name,label| label.set_halign(Gtk::Align::END) }
		
		@skill_menus.each{ |name,menu| menu.set_active(1) }
		@skill_menus.each{ |name,menu| menu.set_active(0) }
		@skill_spin_buttons.each{ |name,button| button.value += 1 }
		@skill_spin_buttons.each{ |name,button| button.value -= 1 }
	
		@main_window.show_all
	end
	
	def self.add_enchant_button(info)
		current = 20
		min = 0
		max = 50
		adjustment = Gtk::Adjustment.new(current, min, max, 1, 10, 0)
		@skill_spin_buttons[info] = Gtk::SpinButton.new(adjustment)
		@skill_menu_grid.attach(Gtk::Label.new("#{info}     "), 0, @skill_row += 1, 1, 1)
		@skill_menu_grid.attach(@skill_spin_buttons[info], 1, @skill_row, 1, 1)
	end
	
	def self.add_level_button
		current = @current_info["Level"]
		min = 1
		max = 200
		adjustment = Gtk::Adjustment.new(current, min, max, 1, 10, 0)
		info = "Attacker Level"
		@skill_spin_buttons[info] = Gtk::SpinButton.new(adjustment)
		@skill_menu_grid.attach(Gtk::Label.new("#{info}     "), 0, @skill_row += 1, 1, 1)
		@skill_menu_grid.attach(@skill_spin_buttons[info], 1, @skill_row, 1, 1)
	end
	
	def self.add_weapon_speed(info)
		current = 5
		min = 1
		max = 9
		adjustment = Gtk::Adjustment.new(current, min, max, 1, 10, 0)
		@skill_spin_buttons[info] = Gtk::SpinButton.new(adjustment)
		@skill_menu_grid.attach(Gtk::Label.new("#{info}     "), 0, @skill_row += 1, 1, 1)
		@skill_menu_grid.attach(@skill_spin_buttons[info], 1, @skill_row, 1, 1)
	end
	
	def self.add_stance_menu
		info = "Stance"
		if @current_info["Skill Name"] == "Shield Use"
			column = 1
		else
			column = 0
			@skill_row += 1
		end
		@skill_menus[info] = Gtk::ComboBoxText.new
		@everything["All Stances"].each{ |name, value| @skill_menus[info].append_text(name) }
		@skill_menu_grid.attach(@skill_menus[info], column, @skill_row, 1, 1)
	end
	
	def self.put_label_in_box(info)
		@skill_info_labels[info] = Gtk::Label.new(info)
		@skill_event_boxes[info] = Gtk::EventBox.new
		@skill_event_boxes[info].add(@skill_info_labels[info])
	end
	
	def self.update_skill_info(base_max)
		skill = @current_info["Skill Name"]
		@current_info["Ranks"] = @skill_spin_buttons["Ranks"].value.to_i
		calculate_bonus(@current_info["Ranks"])
		@current_info["Ranks Needed"] = @current_info["Ranks"] > base_max ? @current_info["Ranks"] - base_max : 0
		@current_info["Specialization Points"] = @current_info["Ranks"] > base_max ? base_max : @current_info["Ranks"]
		str_bonus = @current_info["Strength Bonus"]
		dex_bonus = @current_info["Dexterity Bonus"]

		if (@current_info["Profession"] =~ /Paladin|Rogue|Warrior/) && (skill == "Armor Use" || skill == "Shield Use")
			if skill == "Armor Use"
				info = "Armor Specialization"
			elsif skill == "Shield Use"
				info = "Shield Specialization"
			end
			@skill_info_labels[info].text = "#{info} Points: #{@current_info["Specialization Points"]}"
		end
		
		info = "Asc/Enh Ranks Needed"
		@skill_info_labels[info].text = "#{info}: #{@current_info["Ranks Needed"]}"
		
		if skill == "Armor Use"
			@current_armor = @skill_menus["Armor Type"].active_text
			@base_rt = @everything["Armor Stats"]["Added RT"][@current_armor]
			@base_ap = @everything["Armor Stats"]["Base AP"][@current_armor]
			change_tooltip("Armor")
		
			rt_reduction = calculate_rt_reduction
			new_ap = calculate_ap_reduction(@current_info["Ranks"])
			
			if @current_info["Profession"] == "Warrior"
				info = "Grit"
				points = calculate_grit_bonus(@current_info["Ranks"])
				@skill_info_labels[info].text = "#{info}: #{points}"
			end
			
			new_rt = @base_rt - rt_reduction
			new_rt = 0 if new_rt < 0
			info = "New RT Added"
			@skill_info_labels[info].text = "#{info}: #{new_rt}"
			
			info = "New AP"
			@skill_info_labels[info].text = "#{info}: #{new_ap * -1}"
			
			info = "Base RT Added"
			@skill_info_labels[info].text = "#{info}: #{@base_rt}"
			
			info = "Base AP"
			@skill_info_labels[info].text = "#{info}: #{@base_ap * -1}"
			
			@everything["All Spell Lists"].each{ |info|
				base = @everything["Armor Stats"]["Hindrance"][@current_armor][info]
				max = @everything["Armor Stats"]["Hindrance"][@current_armor]["Max"]
				required = (base * 20) - 10
				if @current_info["Skill Bonus"] >= required
					hindrance = base
				else
					hindrance = [(base * (1.0 + ((required - @current_info["Skill Bonus"]) / 20.0))), max].min
				end
				hindrance = hindrance.truncate
				@skill_info_labels[info].text = "#{info}: #{hindrance}%"
			}
		elsif skill == "Shield Use"
			stance = @skill_menus["Stance"].active_text
			shield_size = @skill_menus["Shield Size"].active_text
		
			base = @current_info["Ranks"] + (str_bonus / 4).truncate + (dex_bonus / 4).truncate
			shield_size_mod = @everything["All Shield Sizes"][shield_size]["Melee Modifier"]
			stance_mod = @everything["All Stances"][stance]["Shield Modifier"]
			stance_block_mod = @everything["All Stances"][stance]["Block Modifier"]

			enchant_bonus = @skill_spin_buttons["Shield Enchant"].value.to_i

			if base && shield_size_mod && stance_mod && enchant_bonus
				final_ds = ((base * shield_size_mod * stance_mod) / 1.5).truncate + 20 + enchant_bonus
				@skill_info_labels["Melee DS"].text = "Melee DS: #{final_ds}"
				
				final_block = ((base * shield_size_mod).truncate * (100 - ((3 * (100 - stance_block_mod)) / 4)).truncate / 100).truncate
				final_block = [((final_block * 20) / @skill_spin_buttons["Attacker Level"].value.to_i).truncate, 60].min
				@skill_info_labels["Melee Block"].text = "Melee Block: #{final_block}%"
			end
			
			shield_size_mod = @everything["All Shield Sizes"][shield_size]["Ranged Modifier"]
			size_bonus = @everything["All Shield Sizes"][shield_size]["Ranged Bonus"]
			
			if base && shield_size_mod && stance_mod && enchant_bonus && size_bonus
				final_ds = (((base * shield_size_mod + size_bonus) * stance_mod) / 1.5).truncate + 20 + enchant_bonus
				@skill_info_labels["Ranged DS"].text = "Ranged DS: #{final_ds}"
				
				final_block = ((base * shield_size_mod).truncate * (100 - ((3 * (100 - stance_block_mod)) / 4)).truncate / 100).truncate
				final_block = [((final_block * 20) / @skill_spin_buttons["Attacker Level"].value.to_i).truncate, 60].min
				@skill_info_labels["Ranged Block"].text = "Ranged Block: #{final_block}%"
			end
		elsif skill =~ /Brawling|Blunt Weapons|Edged Weapons|Polearm Weapons|Ranged Weapons|Thrown Weapons|Two-Handed Weapons/
			stance = @skill_menus["Stance"].active_text
			
			final_as = @current_info["Skill Bonus"]
			final_as += @skill_spin_buttons["Weapon Enchant"].value.to_i
			if skill == "Ranged Weapons"
				final_as += dex_bonus
			elsif skill == "Thrown Weapons"
				final_as += (dex_bonus + str_bonus) / 2
			else
				final_as += str_bonus
			end
			final_as = (final_as * @everything["All Stances"][stance]["AS Modifier"]).truncate
			@skill_info_labels["Attack Strength"].text = "Attack Strength: #{final_as}"

			if (skill != "Thrown Weapons") && (!@everything["Pures"].include?(@current_info["Profession"]))
				learned = ""
				learned += "#{@everything["Weapon Techniques"][skill]["10"]}\n" if @current_info["Ranks"] >= 10
				learned += "#{@everything["Weapon Techniques"][skill]["25"]}\n" if @current_info["Ranks"] >= 25
				learned += "#{@everything["Weapon Techniques"][skill]["50"]}\n" if @current_info["Ranks"] >= 50
				learned += "#{@everything["Weapon Techniques"][skill]["75"]}\n" if @current_info["Ranks"] >= 75
				@skill_info_labels["Weapon Techniques"].text = "Weapon Techniques:\n#{learned}"
			end
			
			weapon_bonus = @skill_spin_buttons["Weapon Enchant"].value.to_i
			ranks = @current_info["Ranks"]
			stance_bonus = @everything["All Stances"][stance]["Parry Stance Bonus"]
			
			if skill == "Ranged Weapons"
				if @skill_menus["Bow/Crossbow"].active_text == "Bow"
					modifier = @everything["All Stances"][stance]["Bow Parry Modifier"]
				elsif @skill_menus["Bow/Crossbow"].active_text == "Crossbow"
					modifier = @everything["All Stances"][stance]["Crossbow Parry Modifier"]
				end
			elsif skill == "Two-Handed Weapons"
				modifier = @everything["All Stances"][stance]["Two Hand Parry Modifier"]
			elsif skill == ("Polearm Weapons") && (@skill_menus["Polearm Grip"].active_text == "Two Handed")
				modifier = @everything["All Stances"][stance]["Polearm Parry Modifier"]
				stance_bonus = @everything["All Stances"][stance]["Polearm Stance Bonus"]
			else
				modifier = @everything["All Stances"][stance]["One Hand Parry Modifier"]
			end
			
			if (ranks) && (modifier) && (weapon_bonus) && (stance_bonus)
				if skill == "Ranged Weapons"
					final_ds = ((ranks + dex_bonus + weapon_bonus + stance_bonus) * modifier).truncate
				else
					final_ds = (ranks) + (str_bonus / 4).truncate + (dex_bonus / 4).truncate
					if (skill == "Two-Handed Weapons") || (skill == "Polearm Weapons" && @skill_menus["Polearm Grip"].active_text == "Two Handed")
						final_ds += weapon_bonus
					else
						final_ds += (weapon_bonus / 2).truncate
					end
					final_ds = (final_ds * modifier).truncate
					final_ds += stance_bonus
				end
				@skill_info_labels["Parry DS"].text = "Parry DS: #{final_ds}"
				
				modifier = @everything["All Stances"][stance]["Parry Modifier"]
				attacker_speed = @skill_spin_buttons["Attacker's Weapon Speed"].value.to_i
				defender_speed = @skill_spin_buttons["Your Weapon Speed"].value.to_i
				parry = (ranks) + (str_bonus / 4).truncate + (dex_bonus / 4).truncate
				if skill == "Two-Handed Weapons"
					parry += weapon_bonus
				elsif (skill == "Polearm Weapons" && @skill_menus["Polearm Grip"].active_text == "Two Handed")
					parry *= 1.35
					parry += (weapon_bonus / 2).truncate
				else
					parry += (weapon_bonus / 2)
				end
				parry = (parry * (100 - ((4 * (100 - modifier)) / 5 )) / 100).truncate
				parry = (parry * (100 - (10 * (attacker_speed - defender_speed))) / 100).truncate
				parry = ((parry * 10.0) / @skill_spin_buttons["Attacker Level"].value.to_i).truncate
				parry = [parry, 60].min
				@skill_info_labels["Parry"].text = "Parry: #{parry}%"
			end
		end
	end
	
	def self.add_skill_labels(labels)
		labels.each{ |info|
			put_label_in_box(info)
			@skill_more_grid.attach(@skill_event_boxes[info], 0, @skill_row += 1, 1, 1)
		}
	end
	
	def self.calculate_grit_bonus(value)
		new_value = value.dup
		points = new_value < @current_info["Level"] ? new_value * 2 : @current_info["Level"] * 2
		new_value -= @current_info["Level"]
		points += new_value if new_value > 0
		return points
	end
	
	def self.calculate_rt_reduction
		rt_reduction = 0
		new_bonus = @current_info["Skill Bonus"].dup
		if new_bonus >= 10
			rt_reduction += 1
			new_bonus -= 10
		end
		rt_reduction += (new_bonus / 20)
		return rt_reduction
	end
	
	def self.calculate_ap_reduction(ranks)
		new_ranks = ranks.dup
		ag = (@everything["Armor Stats"]["AG"][@current_armor] - 1)
		new_ranks -= @everything["Armor Stats"]["Ranks Train Off Penalty"][@current_armor]
		points = 0
		points = (new_ranks / 50).truncate if new_ranks > 0
		reduction = (points * ag)
		new_ap = @base_ap - reduction
		new_ap = (@base_ap / 2.0).ceil if new_ap < (@base_ap / 2.0)
		return new_ap
	end
	
	def self.calculate_bonus(value)
		remaining = value.dup
		@current_info["Skill Bonus"] = 0
		if remaining > 0
			bonus_amounts = [ 5, 4, 3, 2 ]
			bonus_amounts.each{ |amount|
				10.times{
					break if remaining < 1
					@current_info["Skill Bonus"] += amount
					remaining -= 1
				}
			}
			@current_info["Skill Bonus"] += remaining if remaining > 0
		end
	end
	
	def self.match_menu_item(menu, item_needed)
		menu.model.each{ |model, path, iter|
			if item_needed == menu.model.get_value(iter, 0)
				menu.set_active_iter(iter)
				break
			end
		}
	end
end

Gtk.queue {
	TrainingBuddyMain.create_window		
	Gtk.main
}

sleep