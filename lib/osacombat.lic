VERSION = '3.0.0'
UserVars.osacrew["combatversion"] = VERSION
$TITLE = "OSACombat: v. (#{VERSION})"
$osacombat_auto_stow = nil
$osacombat_my_mstrike_focus = nil        #These are variables for Mstrike.  Not needed in GUI as they are autoset in mstrike def below.  Can remove or try to autoset this in osacrew.vars so settings are saved.  But this will check settings on open each time.
$osacombat_my_mstrike_open = nil
$osacombat_uac_current_attack = 0
$osacombat_retaliate = 0


def ship_type
	case Room.current.id
	when (29038..29042)
			@ship_type = "sloop"
			@cargo_hold = 29039
			@main_deck = 29038
			@mid_deck = nil
			@forward_deck = nil
			@bow = nil
			@crows_nest = 29040
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = nil
			@crew_quarters = nil
			@helm = 29041
			@cannons1 = 29038
			@cannons2 = nil
			@cannons3 = nil
			@captains_quarters = 29042
			@ship_map = [29038, 29039, 29040, 29041, 29042]
			@Slooptimes = UserVars.osacrew["Slooptimes"].last(50)
			if @Slooptimes.nil? or @Slooptimes.empty?
				@Slooptimes = [0.315]
			end
			@Sailtimes = @Slooptimes
	when (30140..30147)
			@ship_type = "brigantine"
			@cargo_hold = 30145
			@main_deck = 30142
			@mid_deck = nil
			@forward_deck = 30144
			@bow = nil
			@crows_nest = 30143
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = 30147
			@crew_quarters = 30146
			@helm = 30141
			@captains_quarters = 30140
			@cannons1 = 30142
			@cannons2 = 30144
			@cannons3 = nil
			@ship_map = [30144, 30142, 30143, 30145, 30147, 30146, 30141, 30140]
			@Brigtimes = UserVars.osacrew["Brigtimes"].last(50)
			if @Brigtimes.nil? or @Brigtimes.empty?
				@Brigtimes = [0.30000000000000000]
			end
			@Sailtimes = @Brigtimes
	when (30119..30127)
			@ship_type = "carrack"
			@cargo_hold = 30125
			@main_deck = 30119
			@mid_deck = nil
			@forward_deck = 30121
			@social_room = nil
			@bow = 30122
			@crows_nest = 30123
			@forward_crows_nest = nil
			@mess_hall = 30127
			@crew_quarters = 30126
			@helm = 30120
			@captains_quarters = 30124
			@cannons1 = 30119
			@cannons2 = 30121
			@cannons3 = nil
			@ship_map = [30122, 30121, 30123, 30119, 30127, 30125, 30126, 30120, 30124]
			@Cartimes = UserVars.osacrew["Cartimes"].last(50)
			if @Cartimes.nil? or @Cartimes.empty?
				@Cartimes = [0.30000000000000000]
			end
			@Sailtimes = @Cartimes
	when (30176..30186)
			@ship_type = "galleon"
			@cargo_hold = 30182
			@main_deck = 30176
			@mid_deck = nil
			@forward_deck = 30177
			@bow = 30178
			@crows_nest = 30181
			@forward_crows_nest = nil
			@social_room = 30185
			@mess_hall = 30184
			@crew_quarters = 30183
			@helm = 30179
			@captains_quarters = 30180
			@cannons1 = 30176
			@cannons2 = 30177
			@cannons3 = nil
			@ship_map = [30178, 30177, 30181, 30176, 30185, 30184, 30182, 30183, 30179, 30180]
			@Galtimes = UserVars.osacrew["Galtimes"].last(50)
			if @Galtimes.nil? or @Galtimes.empty?
				@Galtimes = [0.30000000000000000]
			end
			@Sailtimes = @Galtimes
	when (30166..30175)
			@ship_type = "frigate"
			@cargo_hold = 30167
			@main_deck = 30166
			@mid_deck = nil
			@forward_deck = 30171
			@bow = 30172
			@crows_nest = 30173
			@forward_crows_nest = nil
			@social_room = 30170
			@mess_hall = 30169
			@crew_quarters = 30168
			@helm = 30174
			@captains_quarters = 30175
			@cannons1 = 30166
			@cannons2 = 30171
			@cannons3 = nil
			@ship_map = [30172, 30171, 30173, 30166, 30170, 30169, 30167, 30168, 30174, 30175]
			@Fritimes = UserVars.osacrew["Fritimes"].last(50)
			if @Fritimes.nil? or @Fritimes.empty?
				@Fritimes = [0.30000000000000000]
			end
			@Sailtimes = @Fritimes
	when (30128..30139)
			@ship_type = "man o' war"
			@cargo_hold = 30136
			@main_deck = 30130
			@mid_deck = 30131
			@forward_deck = 30132
			@bow = 30133
			@crows_nest = 30135
			@forward_crows_nest = 30134
			@social_room = 30139
			@mess_hall = 30138
			@crew_quarters = 30137
			@helm = 30128
			@captains_quarters = 30129
			@cannons1 = 30130
			@cannons2 = 30131
			@cannons3 = 30132
			@ship_map = [30133, 30134, 30132, 30131, 30135, 30130, 30139, 30138, 30136, 30137, 30128, 30129]
			@Mantimes = UserVars.osacrew["Mantimes"].last(50)
			if @Mantimes.nil? or @Mantimes.empty?
				@Mantimes = [0.35000000000000000]
			end
			@Sailtimes = @Mantimes
	end
	if (30787..30791).include? Room.current.id || (@enemy_main_deck == 30787)
			@enemy_ship_type = "Sloop"
			@enemy_bow = nil
			@enemy_forward_deck = nil
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30787
			@enemy_crows_nest = 30791
			@enemy_cargo_hold = 30790
			@enemy_helm = 30788
			@enemy_quarters = 30789
			@enemy_ship_map = [30787, 30791, 30788, 30790]
	end
	if (30792..30797).include? Room.current.id || (@enemy_main_deck == 30792)
			@enemy_ship_type = "Brigantine"
			@enemy_bow = nil
			@enemy_forward_deck = 30797
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30792
			@enemy_crows_nest = 30796
			@enemy_cargo_hold = 30795
			@enemy_helm = 30793
			@enemy_quarters = 30794
			@enemy_ship_map = [30797, 30792, 30796, 30793, 30795]
	end
	if (30266..30272).include? Room.current.id || (@enemy_main_deck == 30266)
			@enemy_ship_type = "Carrack"
			@enemy_bow = 30272
			@enemy_forward_deck = 30271
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30266
			@enemy_crows_nest = 30270
			@enemy_cargo_hold = 30269
			@enemy_helm = 30267
			@enemy_quarters = 30268
			@enemy_ship_map = [30272, 30271, 30266, 30270, 30267, 30269]
	end
	if (30798..30804).include? Room.current.id || (@enemy_main_deck == 30798)
			@enemy_ship_type = "Galleon"
			@enemy_bow = 30804
			@enemy_forward_deck = 30803
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30798
			@enemy_crows_nest = 30802
			@enemy_cargo_hold = 30801
			@enemy_helm = 30799
			@enemy_quarters = 30800
			@enemy_ship_map = [30804, 30803, 30798, 30802, 30799, 30801]
	end
	if (30805..30810).include? Room.current.id || (@enemy_main_deck == 30805)
			@enemy_ship_type = "Frigate"
			@enemy_bow = nil
			@enemy_forward_deck = 30810
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30805
			@enemy_crows_nest = 30809
			@enemy_cargo_hold = 30808
			@enemy_helm = 30806
			@enemy_quarters = 30807
			@enemy_ship_map = [30810, 30805, 30809, 30806, 30808]
	end
	if (30778..30786).include? Room.current.id || (@enemy_main_deck == 30778)
			@enemy_ship_type = "Man O' War"
			@enemy_bow = 30784
			@enemy_forward_deck = 30786
			@enemy_forward_crows_nest = 30758
			@enemy_mid_deck = 30783
			@enemy_main_deck = 30778
			@enemy_crows_nest = 30782
			@enemy_cargo_hold = 30781
			@enemy_helm = 30779
			@enemy_quarters = 30780
			@enemy_ship_map = [30784, 30786, 30758, 30783, 30778, 30782, 30779, 30781]
	end
end

####### Miscelleanous Combat Actions
def osa_put(message)
    echo "osa_put" if $osa_debug
    unless (script = Script.self) then
      respond('--- waitfor: Unable to identify calling script.')
      return false
    end
    clear
    put(message)

    while (string = get)
      if string.to_s =~ /(?:\.\.\.wait |Wait )[0-9]+/
        hold_up = string.slice(/[0-9]+/).to_i
        sleep(hold_up - 1) unless hold_up.nil? || hold_up == 1
        clear
        put(message)
        next
      elsif string.to_s =~ /struggle.+stand/
        clear
        osa_put("stand")
        next
      elsif string.to_s =~ /stunned|can't do that while|cannot seem|can't seem|don't seem|Sorry, you may only type ahead/
        if dead?
          echo("You're dead...! You can't do that!")
          sleep(0.25)
          script.downstream_buffer.unshift(string)
          return false
        elsif checkstunned
          while checkstunned
            sleep(0.25)
          end
        elsif checkwebbed
          while checkwebbed
            sleep(0.25)
          end
        else
          sleep(0.25)
        end
        clear
        put(message)
        next
      else
        script.downstream_buffer.unshift(string)
        return string
      end
    end
end

def change_stance(new_stance, force = true)
    return if Spell[216].active? || dead?
    perfect_stance = nil
    if new_stance =~ /10|20|30|40|50|60|70|80|90|100/i
      perfect_stance = new_stance
      new_stance = "advance" if perfect_stance =~ /10|20/i
      new_stance = "forward" if perfect_stance =~ /30|40/i
      new_stance = "neutral" if perfect_stance =~ /50|60/i
      new_stance = "guarded" if perfect_stance =~ /70|80/i
      new_stance = "defensive" if perfect_stance =~ /90|100/i
    end
    if (stance() =~ /#{new_stance}/)
      return
    elsif (checkcastrt() > 0 && new_stance =~ /def/)
      return if stance() == 'guarded'
    end

    if ((force) && (perfect_stance != nil) && (CMan.known?("Stance Perfection")))
      dothistimeout("cman stance #{perfect_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    elsif (force)
      dothistimeout("stance #{new_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    else
      fput "stance #{new_stance}"
    end
end

def looter
	if @deadnpcs.count > 0
		if UserVars.osacrew["osalooter"]
			start_script "eloot"
			wait_while { running?("eloot") }
			if Spell[1635].known?
				fput "beseech #{checkright} conserve"
			end
			stance_defensive
		end
	end
end

def cast_at_bad_thing
	if (Spell[612].known? and Spell[612].affordable?) && (@badtype == "cloud") 
		waitrt?
		waitcastrt?
		Spell[612].cast
		return
	end
	if (Spell[417].known? and Spell[417].affordable?) && ((@badtype == "cloud") or (@badtype == "swarm") or (@badtype == "vine") or (@badtype == "tempest" and UserVars.osacrew["badtempest"]) or (@badtype == "web" and UserVars.osacrew["badweb"]) or (@badtype == "void" and UserVars.osacrew["badvoid"]))
		waitrt?
		waitcastrt?
		Spell[417].cast "#{@badtype}"
		return
	end
	if (Spell[505].known? and Spell[505].affordable?) && (@badtype == "cloud")
		waitrt?
		waitcastrt?
		Spell[505].cast "#{@badtype}"
		return
	end
	if (Spell[119].known? and Spell[119].affordable?) && ((@badtype == "cloud") or (@badtype == "swarm") or (@badtype == "vine") or (@badtype == "tempest" and UserVars.osacrew["badtempest"]) or (@badtype == "web" and UserVars.osacrew["badweb"]) or (@badtype == "void" and UserVars.osacrew["badvoid"]))
		waitrt?
		waitcastrt?
		Spell[119].cast "#{@badtype}"
		return
	end
	if (Spell[1218].known? and Spell[1218].affordable?) && (@badtype =="cloud")
        waitrt?
        waitcastrt?
        Spell[1218].cast "#{badtype}"
        return
    end
end

def creature_type
	if GameObj.npcs.count { |npc| npc.type =~ /undead/ } >= 1
		@creature_type = "undead"
	else
		@creature_type = "living"
	end
	if @creature_type == "living"
		@spell_type = "#{UserVars.osacrew["spelltype"]}"
		@spell_open = "#{UserVars.osacrew["spellopen"]}"
		@attack_type = "#{UserVars.osacrew["attacktype"]}"
		@osaattackopen = UserVars.osacrew["attackopen"].to_i
		@osaattackopen2 = UserVars.osacrew["attackopen2"].to_i
		@osaaoe = UserVars.osacrew["aoe"].to_i
		@osaspecial = UserVars.osacrew["specialattack"].to_i
		if UserVars.osacrew["spellevoke"] == true && UserVars.osacrew["spellchan"] == false
			@cast_type = "evoke"
		elsif UserVars.osacrew["spellchan"] == true && UserVars.osacrew["spellevoke"] == false
			@cast_type = "channel"
		elsif UserVars.osacrew["spellchan"] == true && UserVars.osacrew["spellevoke"] == true
			@cast_type = "evoke channel"
		else
			@cast_type = ""
		end
	elsif @creature_type == "undead"
		@spell_type = "#{UserVars.osacrew["undeadspelltype"]}"
		@spell_open = "#{UserVars.osacrew["undeadspellopen"]}"
		@attack_type = "#{UserVars.osacrew["undeadattacktype"]}"
		@osaattackopen = UserVars.osacrew["undeadattackopen"].to_i
		@osaattackopen2 = UserVars.osacrew["undeadattackopen2"].to_i
		@osaaoe = UserVars.osacrew["undeadaoe"].to_i
		@osaspecial = UserVars.osacrew["undeadspecialattack"].to_i
		if UserVars.osacrew["undeadspellevoke"] == true && UserVars.osacrew["undeadspellchan"] == false
			@cast_type = "evoke"
		elsif UserVars.osacrew["undeadspellchan"] == true && UserVars.osacrew["undeadspellevoke"] == false
			@cast_type = "channel"
		elsif UserVars.osacrew["undeadspellchan"] == true && UserVars.osacrew["undeadspellevoke"] == true
			@cast_type = "evoke channel"
		else
			@cast_type = ""
		end
	end
end

def prep_reset
	if checkprep == "None"
		return
	else
		fput "release"
	end
	
end

def stand(stand_command = nil)
    echo "stand" if $bigshot_debug
    return if (stand_command =~ /^(?:fire|kneel|hide)/i && kneeling? && checkleft =~ /^(?:arbalest|kut'ziko|crossbow|kut'zikokra)$/)
    until (standing?)
      change_stance('defensive')
      osa_put 'stand'
    end
end

def stance_offensive
    change_stance('offensive')
end

def stance_defensive
    change_stance('defensive')
end
    
def stance_guarded
    change_stance('guarded')
end
	
def stand_check
    stand() if !standing?
end
	
def kneel_check
	if !checkkneeling
		fput "kneel"
		pause 0.25
		waitrt?
	end
end

def hide_time
	checkforenemies	
	if @npcs.count >= 1
		if checkhidden
			return
		else
			result = dothistimeout "hide", 2, /fail to slip|that no one has noticed|but can't see anywhere/
			if result.to_s =~ /fail to slip/
				waitrt?
				fput "hide"
			elsif result.to_s =~ /that no one has noticed/
				return
			elsif result.to_s =~ /but can't see anywhere/
				return
			end
		end
	else
		return
	end
end

	
def wait_rt
	waitrt?
	waitcastrt?
end	
	
###### Basic Attack Function
			
def chicken_attack
	checkforenemies
	if @npcs.count > 0
		stance_offensive
		fput "attack"
		stance_defensive
	end
end
	
def chicken_ambush
	checkforenemies
	if @npcs.count > 0
		stance_offensive
		fput "ambush"
		stance_defensive
	end
end

def chicken_fire
	checkforenemies
	if @npcs.count > 0
		stance_offensive
		fput "fire"
		stance_defensive
	end
end

def uac_round
	#respond "Debug Output - Starting UAC Round"
	checkforenemies
	if @npcs.count >= 1
		if $osacombat_uac_current_attack == 0
			$osacombat_uac_current_attack = "jab"
		elsif $osacombat_uac_current_attack == nil
			$osacombat_uac_current_attack = "jab"
		end
		stance_offensive
		result = dothistimeout "#{$osacombat_uac_current_attack}", 2, /excellent positioning|followup jab|followup punch|followup grapple|followup kick|Roundtime/
		if result.to_s =~ /excellent positioning/
			$osacombat_uac_current_attack = "kick"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup jab/
			$osacombat_uac_current_attack = "jab"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup punch/
			$osacombat_uac_current_attack = "punch"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup grapple/
			$osacombat_uac_current_attack = "grapple"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup kick/
			$osacombat_uac_current_attack = "kick"
			wait_rt
			stance_defensive	
		elsif result.to_s =~ /Roundtime/
			$osacombat_uac_current_attack = "jab"
			wait_rt
			stance_defensive
		end
	else
		wait_rt
		stance_defensive
		return
	end
end

####### Mstrike Setup

def mstrike_setup
	#Mstrike Detection
	if UserVars.osacrew["attacktype"] == "1"
		fput "mstrike set recovery off"
		fput "mstrike set default jab"
	elsif UserVars.osacrew["attacktype"] == "2"
		fput "mstrike set recovery off"	
		fput "mstrike set default grapple"
	elsif UserVars.osacrew["attacktype"] == "3"
		fput "mstrike set recovery off"
		fput "mstrike set default attack"
	elsif UserVars.osacrew["attacktype"] == "4"
		fput "mstrike set recovery off"
		fput "mstrike set default attack"
	elsif UserVars.osacrew["attacktype"] == "5"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacrew["attacktype"] == "6"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacrew["attacktype"] == "7"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacrew["attacktype"] == "8"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacrew["attacktype"] == "11"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacrew["attacktype"] == "12"
		fput "mstrike set recovery off"
		fput "mstrike set default attack"
	# elsif UserVars.osacrew["attacktype"] == 9
		# nil
	else
		nil
	end
	if Skills.multiopponentcombat >= 190
		$osacombat_my_mstrike_focus = 6
		$osacombat_my_mstrike_open = 7
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 155
		$osacombat_my_mstrike_focus = 5
		$osacombat_my_mstrike_open = 7
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 135
		$osacombat_my_mstrike_focus = 5
		$osacombat_my_mstrike_open = 6
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 100
		$osacombat_my_mstrike_focus = 4
		$osacombat_my_mstrike_open = 6
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 90
		$osacombat_my_mstrike_focus = 4
		$osacombat_my_mstrike_open = 5
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 60
		$osacombat_my_mstrike_focus = 3
		$osacombat_my_mstrike_open = 5
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 55
		$osacombat_my_mstrike_focus = 3
		$osacombat_my_mstrike_open = 4	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 35
		$osacombat_my_mstrike_focus = 2
		$osacombat_my_mstrike_open = 4	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 30
		$osacombat_my_mstrike_focus = 2
		$osacombat_my_mstrike_open = 3	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 15
		$osacombat_my_mstrike_focus = 0
		$osacombat_my_mstrike_open = 3	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 5
		$osacombat_my_mstrike_focus = 0
		$osacombat_my_mstrike_open = 2
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"			
	end	
end

################ Spell Checks to Cast

def prep_reset
	if checkprep == "None"
		return
	else
		fput "release"
	end
end

def infuse_weapon
	if !UserVars.osacrew["infusespell"].empty?
		if Spell[UserVars.osacrew["infusespell"]].affordable?
			fput "prep #{UserVars.osacrew["infusespell"]}"
			fput "infuse my #{checkright}"
			pause 5
		else
			echo "------==== Out Of Mana ==== ------"
		end
	else
		echo "------==== No Insufion Spell Designated ==== ------"
	end
end

def can_cast
	if !@spell_type.empty?
		if !Spell[@spell_type].known?
			echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat2 ==== ------"
			exit
		end
		if Spell[@spell_type].affordable?
			waitrt?
			waitcastrt?
			fput "incant #{@spell_type} #{@cast_type}"
		else
			stance_defensive
			wait_until {Spell[@spell_type].affordable?}
			fput "incant #{@spell_type} #{@cast_type}"
		end
	else
		echo "------==== No Spell Designated. Select An Attack Spell And Restart OSACombat2 ==== ------"
		exit
	end
end

def can_cast_opener
	if !@spell_open.empty?
		if !Spell[@spell_open].known?
			return
		end
		if GameObj.loot.find { |loot| loot.name =~ /vine|grapevine|creepers/ }
			if @spell_open == "610"
				return
			end
		end
		if GameObj.loot.find { |loot| loot.name =~ / arm|arms|pincer|pincers|tentacle|tentacles/ }
			if @spell_open == "709"
				return
			end
		end
		if GameObj.loot.find { |loot| loot.name =~ /tempest/ }
			if @spell_open == "710"
				return
			end
		end
		if GameObj.loot.find { |loot| loot.name =~ /void/ }
			if @spell_open == "720"
				return
			end
		end	
		if Spell[@spell_open].affordable?
			stance_offensive
			fput "incant #{@spell_open}"
			stance_guarded
		else
			return
		end
	else
		return
	end
end

############# Bard Spell Caster

def bard_1030
	if checkmana >= 110
		checkforenemies
		if @npcs.count > 2
			fput "incant 1030 open"
			stance_guarded
			wait_rt
		end
	end
end

def bard_1008
	if checkmana >= 75
		fput "incant 1008 target"
		stance_guarded
		wait_rt	
	end
end

def bard_1035
	if Spell.active? "1035"
		return
	else
		if checkmana >= 110
			fput "incant 1035"
			stance_guarded
			wait_rt	
		end
	end
end
	
	
def bard_1002
	if checkmana >= 75
		fput "incant 1002 target"
		stance_guarded
		wait_rt	
	end
end	

############# Attack Openers
	def bertrandts_bellow_single
		checkforenemies
		if @npcs.count > 1 && Warcry.available?("Bellow")
			stance_offensive
			Warcry.use("Bellow", "#{@npcs.last}")
			stance_defensive
		end
		return
	end

	def bertrandts_bellow_open
		checkforenemies
		if @npcs.count > 1 && Warcry.available?("Bellow")
			stance_offensive
			Warcry.use("Bellow", "All")
			stance_defensive
		end
		return
	end

	def gerrelles_growl_single
		checkforenemies
		if @npcs.count > 1 && Warcry.available?("Growl")
			stance_offensive
			Warcry.use("Growl", "#{@npcs.last}")
			stance_defensive
		end
		return
	end

	def gerrelles_growl_open
		checkforenemies
		if @npcs.count > 1 && Warcry.available?("Growl")
			stance_offensive
			Warcry.use("Growl", "All")
			stance_defensive
		end
		return
	end

	def carns_cry_single
		checkforenemies
		if @npcs.count > 1 && Warcry.available?("Cry")
			stance_offensive
			Warcry.use("Cry", "#{@npcs.last}")
			stance_defensive
		end
		return
	end

	def carns_cry_open
		checkforenemies
		if @npcs.count > 1 && Warcry.available?("Cry")
			stance_offensive
			Warcry.use("Cry", "All")
			stance_defensive
		end
		return
	end

def reactive
	checkforenemies
	wait_rt
	if @npcs.count > 0	&& UserVars.osacrew["reactive"]
		stance_offensive
		fput "weapon #{UserVars.osacrew["reactivetype"]}"
		UserVars.osacrew["reactive"] = false
		stance_defensive
	end
	return
end

def charge
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Charge")
		stance_offensive
		fput "weapon charge"
		stance_defensive
	end
	return
end
		
def cripples
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Cripple")
		stance_offensive
		fput "weapon cripple"
		stance_defensive
	end
	return
end

def crowd_press
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Crowd Press")
		stance_offensive
		fput "cman cpress"
		stance_defensive
	end
	return
end

def dirt_kick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Dirt Kick")
		stance_offensive
		fput "cman dirtkick"
		stance_defensive
	end
	return
end

def disarm_manuever
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Disarm")
		stance_offensive
		fput "cman disarm"
		stance_defensive
	end
	return
end

def dislodge
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Dislogde")
		stance_offensive
		fput "cman dislodge"
		stance_defensive
	end
	return
end

def dizzying_swing
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Dizzying Swing")
		stance_offensive
		fput "weapon dizzyingswing"
		stance_defensive
	end
	return
end

def feint_manuever
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Feint")
		stance_offensive
		fput "cman feint"
		stance_defensive
	end
	return
end

def groin_kick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Groin Kick")
		stance_offensive
		fput "cman gkick"
		stance_defensive
	end
	return
end

def hamstring
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Hamstring")
		stance_offensive
		fput "cman hamstring"
		stance_defensive
	end
	return
end

def haymaker
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Haymaker")
		stance_offensive
		fput "cman haymaker"
		stance_defensive
	end
	return
end

def headbutt
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Headbutt")
		stance_offensive
		fput "cman headbutt"
		stance_defensive
	end
	return
end

def shield_bash
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Bash")
		stance_offensive
		Shield.use("Shield Bash", "")
		stance_defensive
	end
	return
end

def shield_charge
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Charge")
		stance_offensive
		Shield.use("Shield Charge", "")
		stance_defensive
	end
	return
end

def shield_push
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Push")
		stance_offensive
		Shield.use("Shield Push", "")
		stance_defensive
	end
	return
end

def spell_cleave
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Spell Cleave")
		stance_offensive
		fput "cman scleave"
		stance_defensive
	end
	return
end

def sunder_shield
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Sunder Shield")
		stance_offensive
		fput "cman sunder"
		stance_defensive
	end
	return
end

def tackle_manuever
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Tackle")
		stance_offensive
		fput "cman tackle"
		stance_defensive
	end
	return
end

def bull_rush
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Bull Rush")
		voln_sleep
		stance_offensive
		put "weapon bullrush"
		stance_defensive
	end
	return
end

def trip
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Trip")
		stance_offensive
		fput "cman trip"
		stance_defensive
	end
	return
end

def twin_hammerfists
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Twin Hammerfists")
		stance_offensive
		fput "weapon twinhammer"
		stance_defensive
	end
	return
end

def vault_kick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Vault Kick")
		stance_offensive
		fput "cman vaultkick"
		stance_defensive
	end
	return
end

def voln_sleep
	checkforenemies
	if @npcs.count > 1 && @osaattackopen == "25"
		wait_rt
		fput "Symbol of Sleep"
		wait_rt
	end
	return
end

def att_openers2
	if @osaattackopen2 == 0
		return
	elsif @osaattackopen2 == 1
		charge
	elsif @osaattackopen2 == 2
		cripples
	elsif @osaattackopen2 == 3
		crowd_press
	elsif @osaattackopen2 == 4
		dirt_kick
	elsif @osaattackopen2 == 5
		disarm_manuever
	elsif @osaattackopen2 == 6
		dislodge
	elsif @osaattackopen2 == 7
		dizzying_swing
	elsif @osaattackopen2 == 8
		feint_manuever
	elsif @osaattackopen2 == 9
		groin_kick
	elsif @osaattackopen2 == 10
		hamstring
	elsif @osaattackopen2 == 11
		haymaker
	elsif @osaattackopen2 == 12
		headbutt
	elsif @osaattackopen2 == 13
		shield_bash
	elsif @osaattackopen2 == 14
		shield_charge
	elsif @osaattackopen2 == 15
		shield_push
	elsif @osaattackopen2 == 16
		spell_cleave
	elsif @osaattackopen2 == 17
		sunder_shield
	elsif @osaattackopen2 == 18
		tackle_manuever
	elsif @osaattackopen2 == 19
		trip
	elsif @osaattackopen2 == 20
		twin_hammerfists
	elsif @osaattackopen2 == 21
		vault_kick
	elsif @osaattackopen2 == 22
		voln_sleep
	elsif @osaattackopen2 == 23
		bertrandts_bellow_single
	elsif @osaattackopen2 == 24
		bertrandts_bellow_open
	elsif @osaattackopen2 == 25
		gerrelles_growl_single
	elsif @osaattackopen2 == 26
		garrelles_growl_open
	elsif @osaattackopen2 == 27
		carns_cry_single
	elsif @osaattackopen2 == 28
		carns_cry_open
	end
end
	
def att_openers
	if @osaattackopen == 0
		return
	elsif @osaattackopen == 1
		charge
	elsif @osaattackopen == 2
		cripples
	elsif @osaattackopen == 3
		crowd_press
	elsif @osaattackopen == 4
		dirt_kick
	elsif @osaattackopen == 5
		disarm_manuever
	elsif @osaattackopen == 6
		dislodge
	elsif @osaattackopen == 7
		dizzying_swing
	elsif @osaattackopen == 8
		feint_manuever
	elsif @osaattackopen == 9
		groin_kick
	elsif @osaattackopen == 10
		hamstring
	elsif @osaattackopen == 11
		haymaker
	elsif @osaattackopen == 12
		headbutt
	elsif @osaattackopen == 13
		shield_bash
	elsif @osaattackopen == 14
		shield_charge
	elsif @osaattackopen == 15
		shield_push
	elsif @osaattackopen == 16
		spell_cleave
	elsif @osaattackopen == 17
		sunder_shield
	elsif @osaattackopen == 18
		tackle_manuever
	elsif @osaattackopen == 19
		trip
	elsif @osaattackopen == 20
		twin_hammerfists
	elsif @osaattackopen == 21
		vault_kick
	elsif @osaattackopen == 22
		voln_sleep
	elsif @osaattackopen == 23
		bertrandts_bellow_single
	elsif @osaattackopen == 24
		bertrandts_bellow_open
	elsif @osaattackopen == 25
		gerrelles_growl_single
	elsif @osaattackopen == 26
		garrelles_growl_open
	elsif @osaattackopen == 27
		carns_cry_single
	elsif @osaattackopen == 28
		carns_cry_open
	end
	att_openers2
end

################### Special Attacks

def exsanguinate
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Exsanguinate")
		stance_offensive
		fput "cman exsanguinate"
		stance_defensive
	end
	return
end

def leap_attack
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Leap Attack")
		stance_offensive
		fput "cman leapattack"
		stance_defensive
	end
	return
end

def mighty_blow
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Mighty Blow")
		stance_offensive
		fput "cman mblow"
		stance_defensive
	end
	return
end

def shield_strike
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Strike")
		stance_offensive
		Shield.use("Shield Strike", "")
		stance_defensive
	end
	return
end

def spin_attack
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Spin Attack")
		stance_offensive
		fput "cman sattack"
		stance_defensive
	end
	return
end

def staggering_blow
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Staggering Blow")
		stance_offensive
		fput "cman sblow"
		stance_defensive
	end
	return
end
	
def true_strike
	checkforenemies
	if @npcs.count > 0 && CMan.available?("True Strike")
		stance_offensive
		fput "cman truestrike"
		stance_defensive
	end
	return
end
	
def special_att
	if @osaspecial == 0
		return
	elsif @osaspecial == 1
		exsanguinate
	elsif @osaspecial == 2
		leap_attack
	elsif @osaspecial == 3
		mighty_blow
	elsif @osaspecial == 4
		shield_strike
	elsif @osaspecial == 5
		spin_attack
	elsif @osaspecial == 6
		staggering_blow
	elsif @osaspecial == 7
		true_strike
	end
end
		
################### AOE Attacks	

def barrage
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Barrage")
		voln_sleep
		stance_offensive
		put "weapon barrage"
		stance_defensive
	end
	return
end

def clash
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Clash")
		voln_sleep
		stance_offensive
		put "weapon clash"
		stance_defensive
	end
	return
end

def cyclone
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Cyclone")
		voln_sleep
		stance_offensive
		put "weapon cyclone"
		stance_defensive
	end
	return
end

def flurry
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Flurry")
		voln_sleep
		stance_offensive
		put "weapon flurry"
		stance_defensive
	end
	return
end

def fury
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Fury")
		voln_sleep
		stance_offensive
		put "weapon Fury"
		stance_defensive
	end
	return
end

def guardant_thrusts
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Guardant Thrusts")
		voln_sleep
		stance_offensive
		put "weapon gthrusts"
		stance_defensive
	end
	return
end

def pin_down
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Pin Down")
		voln_sleep
		stance_offensive
		put "weapon pindown"
		stance_defensive
	end
	return
end

def pummel
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Pummel")
		voln_sleep
		stance_offensive
		put "weapon pummel"
		stance_defensive
	end
	return
end

def pulverize
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Pulverize")
		voln_sleep
		stance_offensive
		put "weapon pulverize"
		stance_defensive
	end
	return
end

def shield_throw
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Throw")
		voln_sleep
		stance_offensive
		Shield.use("Shield Throw", "")
		stance_defensive
	end
	return
end

def thrash
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Thrash")
		voln_sleep
		stance_offensive
		put "weapon thrash"
		stance_defensive
	end
	return
end

def whirling_blade
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Whirling Blade")
		voln_sleep
		stance_offensive
		put "weapon wblade"
		stance_defensive
	end
	return
end

def whirlwind
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Whirlwind")
		voln_sleep
		stance_offensive
		fput "weapon whirlwind"
		stance_defensive
	end
	return
end

def volley
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Volley")
		voln_sleep
		stance_offensive
		put "weapon volley"
		stance_defensive
	end
	return
end

def aoe_att
	if @osaaoe == 0
		return
	elsif @osaaoe == 1
		barrage
	elsif @osaaoe == 2
		bull_rush
	elsif @osaaoe == 3
		clash
	elsif @osaaoe == 4
		cyclone
	elsif @osaaoe == 5
		flurry
	elsif @osaaoe == 6
		fury
	elsif @osaaoe == 7
		guardant_thrusts
	elsif @osaaoe == 8
		pin_down
	elsif @osaaoe == 9
		pummel
	elsif @osaaoe == 10
		pulverize
	elsif @osaaoe == 11
		shield_throw
	elsif @osaaoe == 12
		thrash
	elsif @osaaoe == 13
		whirling_blade
	elsif @osaaoe == 14
		whirlwind
	elsif @osaaoe == 15
		volley
	end
end

################# Mstrike Routine	
def mstrike_routine
	if Skills.multiopponentcombat >= 5
		if Effects::Cooldowns.active? "Multi-Strike"
			return
		else
			checkforenemies
			if @npcs.count >= 2 && $osacombat_my_mstrike_focus == 0 && $osacombat_my_mstrike_open >= 1
				if percentstamina >= 50
					stance_offensive
					fput "mstrike" 
					stance_defensive
				end
			elsif @npcs.count == 1 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1
				if percentstamina >= 50
					stance_offensive
					fput "mstrike target" 
					stance_defensive
				end
			elsif @npcs.count >= 2 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1
				if percentstamina >= 50
					stance_offensive
					fput "mstrike" 
					stance_defensive
				end
			end
		end
	else
		return
	end
	waitrt?
end

################# Combat Styles	

def combat	
	stand_check
	if @attack_type.to_i == 0
		# No Attack Type
		return
	elsif @attack_type.to_i == 1
		# UAC Brawling
		aoe_att
		mstrike_routine
		att_openers
		special_att
		uac_round
		looter
	elsif @attack_type.to_i == 2
		#UAC Brawling - Stealth
		att_openers
		special_att
		hide_time
		uac_round
		looter
	elsif @attack_type.to_i == 3
		#Melee 1H 2H
		aoe_att
		mstrike_routine
		att_openers
		special_att
		chicken_attack
		looter
	elsif @attack_type.to_i == 4
		#Melee 1H 2H - Stealth
		att_openers
		special_att
		hide_time
		chicken_ambush
		wait_rt
		looter
	elsif @attack_type.to_i == 5
	    #Bow
		aoe_att
		mstrike_routine
		att_openers
		special_att
		chicken_fire
		looter
	elsif @attack_type.to_i == 6
		#Bow - Stealth
		att_openers
		special_att
		hide_time
		chicken_fire
		looter
	elsif @attack_type.to_i == 7		
		#Crossbow
		aoe_att
		mstrike_routine
		special_att
		kneel_check
		chicken_fire
		looter
	elsif @attack_type.to_i == 8	
		#Crossbow - Stealth
		special_att
		kneel_check
		hide_time
		chicken_fire
		looter
	elsif @attack_type.to_i == 9
		#Bolt Spell Caster
		prep_reset
		stance_offensive
		can_cast_opener
		stance_offensive
		can_cast
		stance_guarded
		looter
	elsif @attack_type.to_i == 10
		#Warding Caster
		prep_reset
		can_cast_opener
		stance_defensive
		can_cast
		stance_guarded
		looter
	elsif @attack_type.to_i == 11
		#Archer W/ Spell Opener
		prep_reset
		can_cast_opener
		aoe_att
		mstrike_routine
		att_openers
		special_att
		chicken_fire
		wait_rt
		looter
	elsif @attack_type.to_i == 12
		#Melee W/ Spell Opener
		prep_reset
		can_cast_opener
		aoe_att
		mstrike_routine
		att_openers
		special_att
		chicken_attack	
		looter
	elsif @attack_type.to_i == 13
		#Bard Support (1035 - 1002)
		prep_reset
		bard_1035
		bard_1002
		wait_rt
		looter
	elsif @attack_type.to_i == 14
		#Bard Pure (1030 - 1008)
		prep_reset
		bard_1030
		wait_rt
		bard_1008
		wait_rt
		looter			
	end			
end

############Combat Checking Start

def groupeffects
		
		society_script if $society_first_cast == false && (Room.current.title.to_s.downcase.include? "enemy")
		society_script if $society_first_cast
		mana_focus if UserVars.osacrew["groupmana"] && $mana_focus_first_cast == false && (Room.current.title.to_s.downcase.include? "enemy")
		mana_focus if UserVars.osacrew["groupmana"] && $mana_focus_first_cast
		bravery if UserVars.osacrew["groupbravery"] && !$group_bravery_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		bravery if UserVars.osacrew["groupbravery"] && $group_bravery_first_cast
		heroism if UserVars.osacrew["groupheroism"] && !$group_heroism_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		heroism if UserVars.osacrew["groupheroism"] && $group_heroism_first_cast
		beaconofcourage if UserVars.osacrew["beaconofcourage"] && !$beacon_of_courage_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		beaconofcourage if UserVars.osacrew["beaconofcourage"] && $beacon_of_courage_first_cast
		songoftonis if UserVars.osacrew["songoftonis"] && !$song_of_tonis_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		songoftonis if UserVars.osacrew["songoftonis"] && $song_of_tonis_first_cast
		warcryshout if UserVars.osacrew["warcryshout"] && !$warcry_shout_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		warcryshout if UserVars.osacrew["warcryshout"] && $warcry_shout_first_cast
		warcryholler if UserVars.osacrew["warcryholler"] && !$warcry_holler_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		warcryholler if UserVars.osacrew["warcryholler"] && $warcry_holler_first_cast
end

def time_diff_seconds(start,finish)
	(finish - start)
end

def combat_spellup
    if running? "ecure"
		wait_until { !running?('ecure') }
	end
	if !checkprep.include? "None"
		fput "release"
	end
	if checkmana < 50
		do_client ";chat on #{UserVars.osacrew["crew"]} I Need Mana!"
		pause 1
	end
	wait_rt
    result = dothistimeout "incant #{@combat_spell}", 30, /Wait|...wait|Spell Hindrance|Cast Roundtime|Sing Roundtime/
        if result.to_s =~ /Wait|...wait/
            combat_spellup
        elsif result.to_s =~ /Spell Hindrance/
            waitcastrt?
            combat_spellup
        elsif result.to_s =~ /Cast Roundtime|Sing Roundtime/
            return
        else
            combat_spellup
        end
end

def society_script
	start_script "signore"
	$society_first_cast = nil
end

def mana_focus
	if (!Spell[1018].active? && Spell[418].known?)
		@combat_spell = "418"
		combat_spellup
		$mana_focus_first_cast = nil
	end
end

def bravery
	if UserVars.osacrew["groupbravery"] && ( $osacombat_group_bravery_start == nil || time_diff_seconds($osacombat_group_bravery_start,Time.now) > 190)
		wait_rt
		@combat_spell = "211"
		combat_spellup	if Spell[211].affordable?
		$group_bravery_first_cast = true
		$osacombat_group_bravery_start = Time.now
		waitcastrt
	end
end

def heroism
	if UserVars.osacrew["groupheroism"] && ( $osacombat_group_heroism_start == nil || time_diff_seconds($osacombat_group_heroism_start,Time.now) > 190)
		wait_rt
		@combat_spell = "215"
		combat_spellup if Spell[215].affordable?
		$group_heroism_first_cast = true
		$osacombat_group_heroism_start = Time.now
		waitcastrt
	end
end
	
def beaconofcourage
	if (UserVars.osacrew["beaconofcourage"] && !Spell[1699].active?)
		wait_rt
		@combat_spell = "1608"
		combat_spellup if Spell[1608].affordable?
		$beacon_of_courage_first_cast = true
		waitcastrt
	end
end

def songoftonis
	if (UserVars.osacrew["songoftonis"] && !Spell[1035].active? )
			wait_rt
			@combat_spell = "1035"
			combat_spellup if Spell[1035].affordable?
			$song_of_tonis_first_cast = true
			waitcastrt
		end
end

def warcryshout
    if (UserVars.osacrew["warcryshout"] && checkstamina > 20 && !Effects::Buffs.active?("Empowered (+20)"))
		waitrt?
		result = dothistimeout "warcry shout", 3, /let loose an echoing shout/
		if result.to_s =~ /let loose an echoing shout/
			$warcry_shout_first_cast = true
			return
		end
    end
end

def warcryholler
	if UserVars.osacrew["warcryholler"] && ( $osacombat_warcryholler_start == nil || time_diff_seconds($osacombat_warcryholler_start,Time.now) > 150)
		if (checkstamina > 14 || Spell[9628].active?) or (checkstamina > 29 || !Spell[9628].active? )
			waitrt?
			result = dothistimeout "warcry holler", 2, /a thundering holler|holler your war cry|You do not know/
			if result.to_s =~ /a thundering holler|You do not know/
				$osacombat_warcryholler_start = Time.now
				$warcry_holler_first_cast = true
				return
			elsif result.to_s =~ /holler your war cry/
				warcryholler
			end
		end
	end
end

def get_captains_location
	LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Captain, I've Been Injured and Will Return Shortly")
	result = matchtimeout 30, /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Ok Crewman\, We Are At (.*) And Will Await Your Arrival"/
		if result.to_s =~ /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Ok Crewman\, We Are At (.*) And Will Await Your Arrival"/
			@captains_location = $1
		else
			echo "Something Went Wrong, Retrying!"
			get_captains_location
	end
end

def go_to_healer
	if (!checkpcs.include? UserVars.osacrew["medicalofficer"]) and (Room.current.location == "Ships")
		wait_until {!checkstunned}
		wait_until {!checkwebbed}
		wait_until {!checkbound}
		waitrt?
		pause_script "osacrew"
		ship_type
		@injured_room = Room.current.id
		if Room.current.id != @captains_quarters
			start_script("go2", [@captains_quarters])
			wait_while { running?("go2") }
		end
	end
	if checkpcs.include? UserVars.osacrew["medicalofficer"]
		if @healing_status == "poisoned"
			do_client ";chat on #{UserVars.osacrew["crew"]} I Am Poisoned!"
			wait_until {!Effects::Debuffs.active? ("Wall of Thorns Poison 1")||(Effects::Debuffs.active? "Wall of Thorns Poison 2")||(Effects::Debuffs.active? "Wall of Thorns Poison 3")||(Effects::Debuffs.active? "Wall of Thorns Poison 4")||(Effects::Debuffs.active? "Wall of Thorns Poison 5") and !checkpoison}
			@healing_status = "clear"
			if Room.current.id == @captains_quarters
				start_script("go2", [@injured_room])
				wait_while { running?("go2") }
				unpause_script "osacrew"
			end
			if !checkpcs.include?(UserVars.osacrew["commander"]) and (!UserVars.osacrew["commander"].include?(checkname))
				get_captains_location
				fput "group open"
				start_script("go2", [@captains_location])
				wait_while { running?("go2") }
			end
		end
		if @healing_status == "injured"
			do_client ";chat on #{UserVars.osacrew["crew"]} I Am Injured!"
			wait_until {!XMLData.injuries.any?{|key,value,| value["wound"] > UserVars.osacrew["wound_level"].to_i}}
			@healing_status = "clear"
			if Room.current.id == @captains_quarters
				start_script("go2", [@injured_room])
				wait_while { running?("go2") }
				unpause_script "osacrew"
			end
			if !checkpcs.include?(UserVars.osacrew["commander"]) and (!UserVars.osacrew["commander"].include?(checkname))
				get_captains_location
				fput "group open"
				start_script("go2", [@captains_location])
				wait_while { running?("go2") }
			end
		end
		if @healing_status == "popped"
			if Feat.known?("Kroderine Soul")
				LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "surge KS")
			else
				LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "surge")
			end
			wait_until {!Effects::Debuffs.active? "Overexerted"}
			@healing_status = "clear"
			if Room.current.id == @captains_quarters
				start_script("go2", [@injured_room])
				wait_while { running?("go2") }
				unpause_script "osacrew"
			end
			if !checkpcs.include?(UserVars.osacrew["commander"]) and (!UserVars.osacrew["commander"].include?(checkname))
				get_captains_location
				fput "group open"
				start_script("go2", [@captains_location])
				wait_while { running?("go2") }
			end
		end
	else
		if @healing_status == "poisoned"
			respond ""
			respond " -------                                         WARNING                                                  --------"
			respond " -------                  You Appear To Be Poisoned And There Is No Herbal Cure For Poison                --------"
			respond " ------- OSACombat Will Wait Until The Poison Is No Longer Affecting You And Then Return To The Main Deck --------"
			respond " -------                      To Stop Waiting And Continue With The Poison Type                           --------"
			respond ""
			waitfor /A good positive attitude never hurts/
			@healing_status = "ignore"
			if Room.current.id == @captains_quarters
				start_script("go2", [@injured_room])
				wait_while { running?("go2") }
				unpause_script "osacrew"
			end
			if !checkpcs.include?(UserVars.osacrew["commander"]) and (!UserVars.osacrew["commander"].include?(checkname))
				get_captains_location
				fput "group open"
				start_script("go2", [@captains_location])
				wait_while { running?("go2") }
			end
		end
		if @healing_status == "injured"
			do_client ";eherbs --buy=off --mending=on --skipscars=on --yaba=on --potions=on"
			wait_while { running?("eherbs") }
			if XMLData.injuries.any?{|key,value| value["wound"] > UserVars.osacrew["wound_level"].to_i}
				respond " -------      You Still Have Serious Wounds, It Is Recommended You Seek Medical Attention Immediately -------"
				respond " -------              OSACombat Will Stay Here Where It Is Safe Until You Can Get Help                -------"
				respond " -------                   To Stop Waiting And Continue With The Wounds Type YES                      -------"
				waitfor /A good positive attitude never hurts/
				@healing_status = "ignore"
			end
			if Room.current.id == @captains_quarters
				start_script("go2", [@injured_room])
				wait_while { running?("go2") }
				unpause_script "osacrew"
			end
			if !checkpcs.include?(UserVars.osacrew["commander"]) and (!UserVars.osacrew["commander"].include?(checkname))
				get_captains_location
				fput "group open"
				start_script("go2", [@captains_location])
				wait_while { running?("go2") }
			end
		end
		if @healing_status == "popped"
			respond " -------      You Still Have Overexertion, It Is Recommended You Seek Medical Attention Immediately -------"
			respond " -------              OSACombat Will Stay Here Where It Is Safe Until You Can Get Help                -------"
			respond " -------                   To Stop Waiting And Continue With The Overexertion Type YES                      -------"
			waitfor /A good positive attitude never hurts/
			@healing_status = "ignore"
			if Room.current.id == @captains_quarters
				start_script("go2", [@injured_room])
				wait_while { running?("go2") }
				unpause_script "osacrew"
			end
			if !checkpcs.include?(UserVars.osacrew["commander"]) and (!UserVars.osacrew["commander"].include?(checkname))
				get_captains_location
				fput "group open"
				start_script("go2", [@captains_location])
				wait_while { running?("go2") }
			end
		end
	end
end

def check_for_poison
	if (Effects::Debuffs.active? "Wall of Thorns Poison 1")||(Effects::Debuffs.active? "Wall of Thorns Poison 2")||(Effects::Debuffs.active? "Wall of Thorns Poison 3")||(Effects::Debuffs.active? "Wall of Thorns Poison 4")||(Effects::Debuffs.active? "Wall of Thorns Poison 5")||(checkpoison)
		if Spell[114].known? && Spell[114].affordable?
			Spell[114].cast
			return
		end
		if @healing_status == "ignore"
			return
		else 
			@healing_status = "poisoned"
			go_to_healer
		end
	end
end

def check_for_injuries
	if XMLData.injuries.any?{|key,value| value["wound"] > UserVars.osacrew["wound_level"].to_i}
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			wait_while { running?("ecure") }
			waitrt?
			waitcastrt?
			pause 0.5
			wait_until {!checkstunned}
			wait_until {!checkwebbed}
			wait_until {!checkbound}
			start_script "ecure"
			wait_while { running?("ecure") }
		else
			if @healing_status == "ignore"
				return
			else
				@healing_status = "injured"
				go_to_healer
			end
		end
	end
end

def check_for_popped
	if Effects::Debuffs.active? "Overexerted"
		if Spell[1107].known? && Spell[1107].affordable?
			Spell[1107].cast
			return
		end
		if @healing_status == "ignore"
			return
		else
			@healing_status = "popped"
			go_to_healer
		end
	end
end

def check_for_stunned
	if(!checkstunned && !checkdead && players = GameObj.pcs)
		if Spell[108].known?
			players.each do |p|
				waitcastrt?
				if p.status =~ /stun/i
					wait_until{ checkmana >= 8 }
					waitrt?
					waitcastrt?
					fput "prep 108"
					fput "cast " + p.name
					pause 3
				end
			end
		end
	end
end

def check_for_standing
	if !standing?
		if checkkneeling
			return
		end
		wait_until {!checkstunned}
		wait_until {!checkwebbed}
		wait_until {!checkbound}
		waitrt?
		waitcastrt?
		fput "stand"
	end
end

def check_dead
	if checkdead == true
		respond "
			You Have Died My Friend, Please Wait Until You Are Resurrected!
				"
		do_client ";chat on #{UserVars.osacrew["crew"]} Call The Bugleman, Crewman #{checkname} Has Died!"
		if Spell[9823].known?
			Spell[9823].cast
		end
		if running? "osacrew"
			stop_script "osacrew"
		end
		exit
	end
end
def check_for_badstuff
	if GameObj.loot.find {|s| s.name =~ /tempest|web|cloud|void|swarm|vine/}
		GameObj.loot.each do |s|
			if s.name =~ /tempest|web|cloud|void|swarm|vine/
				waitrt?
				waitcastrt?
				@badtype = s.noun
				cast_at_bad_thing
			end
		end
	end
end

def health_monitor
	check_dead
	check_for_injuries
	check_for_poison
	check_for_popped
	check_for_standing
	check_for_stunned
	check_for_badstuff
end

before_dying {
	wait_while { running?("eloot") }
	if Spell[1635].known?
		stop_script "beseech"
	end
	if (Spell[1625].known?) and (Stats.level >= 29)
		infuse_weapon
	end
	if Spell[630].known?
		fput "tell comp behave defensive"
	end
	fput "store both"
	stop_script "signore"
	if UserVars.osacrew["usebriefcombat"]
		multifput "flag combatbrief off", "flag combatnonumbers off", "flag combatselffull on"
	end
	}

	if UserVars.osacrew["mob"] == true
		Spell[1213].cast if (Spell[1213].known?) && (Spell[1213].affordable?)
	end

	if UserVars.osacrew["focus"] == true
		Spell[1216].cast if (Spell[1216].known?) && (Spell[1216].affordable?)
	end
	
	if (@attack_type.to_i != 1 and @attack_type.to_i != 2)
		do_client "gird"
	end
	mstrike_setup
	if Spell[1635].known?
		start_script "beseech"
	end
	if (Spell[1625].known?) and (Stats.level >= 29)
		pause 1
		fput "beseech #{checkright} conserve"
	end
	if Spell[630].known?
		fput "tell comp behave offensive"
	end
	if UserVars.osacrew["spellopen"].empty? == true
		echo "
		------==== No Opener Spell Designated ==== ------
		"
	end
	if UserVars.osacrew["undeadspellopen"].empty? == true
		echo "
		------==== No Undead Opener Spell Designated ==== ------
		"
	end

def checkforenemies
	@deadnpcs = GameObj.npcs.find_all { |i| i.status =~ /dead|gone/ }
    @deadnpcs.delete_if { |npc| (npc.name =~ /animated/ && npc.name !~ /animated slush/) }
    @deadnpcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate/i && npc.name !~ /ethereal|celestial|unworldly/i }
    @deadnpcs.delete_if { |npc| npc.noun =~ /^(?:arm|appendage|claw|limb|pincer|tentacle)s?$|^(?:palpus|palpi)$/i }
	@npcs = GameObj.targets.find_all { |i| i.status !~ /dead|gone/ }
	@npcs.delete_if { |npc| (npc.name =~ /animated/ && npc.name !~ /animated slush/) }
    @npcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate/i && npc.name !~ /ethereal|celestial|unworldly/i }
    @npcs.delete_if { |npc| npc.noun =~ /^(?:arm|appendage|claw|limb|pincer|tentacle)s?$|^(?:palpus|palpi)$/i }
end	

if Room.current.location == "Ships"
	$mana_focus_first_cast = false
	$group_bravery_first_cast = false
	$group_heroism_first_cast = false
	$song_of_tonis_first_cast = false
	$beacon_of_courage_first_cast = false
	$warcry_shout_first_cast = false
	$warcry_holler_first_cast = false
	$society_first_cast = false
else
	$mana_focus_first_cast = true
	$group_bravery_first_cast = true
	$group_heroism_first_cast = true
	$song_of_tonis_first_cast = true
	$beacon_of_courage_first_cast = true
	$warcry_shout_first_cast = true
	$warcry_holler_first_cast = true
	$society_first_cast = true
end
if UserVars.osacrew["usebriefcombat"]
	multifput "flag combatbrief on", "flag combatnonumbers on", "flag combatselffull off"
end

loop {
	stance_defensive
	health_monitor
	groupeffects
	checkforenemies
	looter
	if @npcs.count > 0
		creature_type
		reactive
		combat
	end
	sleep 0.1
}