UserVars.osacrew["combatversion"] = '3.13.6 (July 26, 2025)'
$TITLE = "OSACombat: v. (#{UserVars.osacrew["combatversion"]})"
		  $get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  
def osacombat_help_display
	respond ""
	respond "
	                             ud$$$**$$$$$$$bc.
                          u@**\"        4$$$$$$$Nu
                        J                \"\"#$$$$$$r
                       @                       $$$$b
                     .F                        ^*3$$$
                    :% 4                         J$$$N
                    $  :F                       :$$$$$
                   4F  9                       J$$$$$$$
                   4$   k             4$$$$bed$$$$$$$$$
                   $$r  'F            $$$$$$$$$$$$$$$$$r
                   $$$   b.           $$$$$$$$$$$$$$$$$N
                   $$$$$k 3eeed$$b    $$$Euec.\"$$$$$$$$$
    .@$**N.        $$$$$\" $$$$$$F'L $$$$$$$$$$$  $$$$$$$
    :$$L  'L       $$$$$ 4$$$$$$  * $$$$$$$$$$F  $$$$$$F         edNc
   @$$$$N  ^k      $$$$$  3$$$$*%   $F4$$$$$$$   $$$$$\"        d\"  z$N
   $$$$$$   ^k     '$$$\"   #$$$F   .$  $$$$$c.u@$$$          J\"  @$$$$r
   $$$$$$$b   *u    ^$L            $$  $$$$$$$$$$$$u@       $$  d$$$$$$
    ^$$$$$$.    \"NL   \"N. z@*     $$$  $$$$$$$$$$$$$P      $P  d$$$$$$$
       ^\"*$$$$b   '*L   9$E      4$$$  d$$$$$$$$$$$\"     d*   J$$$$$r
            ^$$$$u  '$.  $$$L     \"#\" d$$$$$$\".@$$    .@$\"  z$$$$*\"
              ^$$$$. ^$N.3$$$       4u$$$$$$$ 4$$$  u$*\" z$$$\"
                '*$$$$$$$$ *$b      J$$$$$$$b u$$P $\"  d$$P
                   #$$$$$$ 4$ 3*$\"$*$ $\"$'c@@$$$$ .u@$$$P
                     \"$$$$  \"\"F~$ $uNr$$$^&J$$$$F $$$$#
                       \"$$    \"$$$bd$.$W$$$$$$$$F $$\"
                         ?k         ?$$$$$$$$$$$F'*
                          9$$bL     z$$$$$$$$$$$F
                           $$$$    $$$$$$$$$$$$$
                            '#$$c  '$$$$$$$$$\"
                             .@\"#$$$$$$$$$$$$b
                           z*      $$$$$$$$$$$$N.
                         e\"      z$$\"  #$$$k  '*$$.
                     .u*      u@$P\"      '#$$c   \"$$c
              u@$*\"\"\"       d$$\"            \"$$$u  ^*$$b.
            :$F           J$P\"                ^$$$c   '\"$$$$$$bL
           d$$  ..      @$#                      #$$b         '#$
           9$$$$$$b   4$$                          ^$$k         '$
            \"$$6\"\"$b u$$                             '$    d$$$$$P
              '$F $$$$$\"                              ^b  ^$$$$b$
               '$W$$$$\"                                'b@$$$$\"
                                                        ^$$$* 


-----------------------------------------------------------------------"
	respond "   OSACombat Version: #{UserVars.osacrew["combatversion"]}"
	respond ""
	respond "Usage:"
	respond ""
	respond ";osacombat setup                       Opens the setup window to configure combat routines"
	respond ""
	respond "   OSACombat is an automated combat script for OSA but it will work in other hunting grounds as well"
	respond "   Enjoy "
	respond ""
	respond "   ~Peggyanne "
	respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
	respond ""
	respond "Change Log:"
	respond ""
	respond "           May 24, 2025 - Improved Targeting Logic, Removed Attack Types and Added Use Archery and Use UAC W/O Weapons Checkboxs"
	respond	"           June 7, 2025 - Removed Anti Effect methods, Ecleanse does this much better. Also fixed logic for assaults."
	respond "           June 19, 2025 - Resolved Lag and Redundancy Issues. Also Added Support for Paladin Feat Excoriate."
	respond "           June 22, 2025 - Adjusted Opener Spell Logic, Added Opener Support For Cold Snap And Added A Second Opener Spell."
	respond "           June 23, 2025 - Fixed Targeting Error In Second Spell Opener."
	respond "           July 19, 2025 - Fixed Issue With Unstun Method That Was Causing Lag."
	respond "           July 20, 2025 - Fixed Issue With Mob Count If Statements."
	respond "           July 26, 2025 - Adjusted Assaults And Removed Spell Active Check."
	respond ""
end

=begin
	                             ud$$$**$$$$$$$bc.
                          u@**"        4$$$$$$$Nu
                        J                ""#$$$$$$r
                       @                       $$$$b
                     .F                        ^*3$$$
                    :% 4                         J$$$N
                    $  :F                       :$$$$$
                   4F  9                       J$$$$$$$
                   4$   k             4$$$$bed$$$$$$$$$
                   $$r  'F            $$$$$$$$$$$$$$$$$r
                   $$$   b.           $$$$$$$$$$$$$$$$$N
                   $$$$$k 3eeed$$b    $$$Euec."$$$$$$$$$
    .@$**N.        $$$$$" $$$$$$F'L $$$$$$$$$$$  $$$$$$$
    :$$L  'L       $$$$$ 4$$$$$$  * $$$$$$$$$$F  $$$$$$F         edNc
   @$$$$N  ^k      $$$$$  3$$$$*%   $F4$$$$$$$   $$$$$"        d"  z$N
   $$$$$$   ^k     '$$$"   #$$$F   .$  $$$$$c.u@$$$          J"  @$$$$r
   $$$$$$$b   *u    ^$L            $$  $$$$$$$$$$$$u@       $$  d$$$$$$
    ^$$$$$$.    "NL   "N. z@*     $$$  $$$$$$$$$$$$$P      $P  d$$$$$$$
       ^"*$$$$b   '*L   9$E      4$$$  d$$$$$$$$$$$"     d*   J$$$$$r
            ^$$$$u  '$.  $$$L     "#" d$$$$$$".@$$    .@$"  z$$$$*"
              ^$$$$. ^$N.3$$$       4u$$$$$$$ 4$$$  u$*" z$$$"
                '*$$$$$$$$ *$b      J$$$$$$$b u$$P $"  d$$P
                   #$$$$$$ 4$ 3*$"$*$ $"$'c@@$$$$ .u@$$$P
                     "$$$$  ""F~$ $uNr$$$^&J$$$$F $$$$#
                       "$$    "$$$bd$.$W$$$$$$$$F $$"
                         ?k         ?$$$$$$$$$$$F'*
                          9$$bL     z$$$$$$$$$$$F
                           $$$$    $$$$$$$$$$$$$
                            '#$$c  '$$$$$$$$$"
                             .@"#$$$$$$$$$$$$b
                           z*      $$$$$$$$$$$$N.
                         e"      z$$"  #$$$k  '*$$.
                     .u*      u@$P"      '#$$c   "$$c
              u@$*"""       d$$"            "$$$u  ^*$$b.
            :$F           J$P"                ^$$$c   '"$$$$$$bL
           d$$  ..      @$#                      #$$b         '#$
           9$$$$$$b   4$$                          ^$$k         '$
            "$$6""$b u$$                             '$    d$$$$$P
              '$F $$$$$"                              ^b  ^$$$$b$
               '$W$$$$"                                'b@$$$$"
                                                        ^$$$* 


-----------------------------------------------------------------------
	   OSACombat Version: 3.13.6 (July 26, 2025)
	
	   Usage:
	   
	   ;osacombat setup                       Opens the setup window to configure combat routines
	   
	   OSACombat is an automated combat script for OSA but it will work in other hunting grounds as well
	   Enjoy 
		
	   ~Peggyanne 
	 PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them.
	 
	 Change Log:
	 
	            May 24, 2025 - Improved Targeting Logic, Removed Attack Types and Added Use Archery and Use UAC W/O Weapons Checkboxs
	            June 7, 2025 - Removed Anti Effect methods, Ecleanse does this much better. Also fixed logic for assaults.
	            June 19, 2025 - Resolved Lag and Redundancy Issues. Also Added Support for Paladin Feat Excoriate.
	            June 22, 2025 - Adjusted Opener Spell Logic, Added Opener Support For Cold Snap And Added A Second Opener Spell.
	            June 23, 2025 - Fixed Targeting Error In Second Spell Opener.
	            July 19, 2025 - Fixed Issue With Unstun Method That Was Causing Lag.
	            July 20, 2025 - Fixed Issue With Mob Count If Statements.
	            July 26, 2025 - Adjusted Assaults And Removed Spell Active Check.
=end

 def set_value(key, clean, default)
    if (!UserVars.osacombat[key].nil? && UserVars.osacombat[key] !~ /^\s*$/)
      cleaned = clean_value(clean, UserVars.osacombat[key])
      instance_variable_set("@#{key.upcase}", cleaned)
    else
      instance_variable_set("@#{key.upcase}", default)
    end
  end
  
  def self.profile(vars)
  require 'yaml'
  require 'fileutils'
  FileUtils.mkdir_p(File.join($data_dir, XMLData.game, Char.name, "osacombat_profiles"))
    if vars[2] =~ /load/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacombat_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if !File.exist?("#{filename}")
          respond ""
          respond " You are trying to load a profile that does not exist."
          respond ""
          respond "***************************"
          respond " Notice- your default osacombat profiles folder has changed to:"
          respond " #{dir}"
          respond ""
          respond " The old location is here: #{File.join($script_dir, 'osacombat_profiles')}"
          respond " You can copy this folder or appropriate profiles into the relevant character directory in your operating system"
          respond "****************************"
          respond ""
        else
          from_file = YAML.load_file(filename)
          UserVars.osacombat = from_file
          echo "Settings loaded from profile: #{filename}."
        end
      else
        echo "You forgot to name your profile you wish to load."
        echo "Syntax: ;osacombat profile load <NAME Here, no Spaces!>"
      end
    elsif vars[2] =~ /save/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacombat_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if File.exist?("#{filename}")
          echo "File already exists, if you wish to overwrite, please ;unpause osacombat."
          echo "Else ;kill osacombat and choose another filename."
          pause_script
        end
        File.write(filename, UserVars.osacombat.to_yaml)
        echo "Settings saved to profile: #{filename}."
      else
        echo "You forgot to name your profile you wish to save."
        echo "Syntax: ;osacombat profile save <NAME Here, no Spaces!>"
      end
    end
  end
	  
def self.osacombatsetup
	@theme_state = Lich.track_dark_mode if defined? Lich.track_dark_mode
    Gtk.queue do
      @get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  @OC_WINDOW = Gtk::Window.new
      @OC_WINDOW.title = $TITLE
      @OC_WINDOW.set_icon(@default_icon)
      @OC_WINDOW.set_border_width(10)
      @OC_WINDOW.keep_above = true
	  
		if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
			grey = Gdk::RGBA::parse("#d3d3d3")
			@OP_WINDOW.override_background_color(:normal, grey)
		end

      @OC_BOX = @get_vBox.call
      @OC_BOX.set_border_width(5)
      @OC_WINDOW.add(@OC_BOX)

      @OC_NOTEBOOK = Gtk::Notebook.new
      @OC_NOTEBOOK.set_show_border(true)
	  if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
		@OC_NOTEBOOK.override_background_color(:normal, grey)
	  end
      @OC_BOX.add(@OC_NOTEBOOK)
      @OC_ENTRY = Hash.new # For mapping entries to variables
      @OC_TABLE_SIZE = Hash.new # For mapping table sizes

  end
  
	Gtk.queue do
      tab_names = %w[
		General
		Support
		Living
		Undead
		
      ]
	  
     tab_names.each.with_index(1) do |name, val|
        new_table = Gtk::Table.new(10, 4, true).tap do |table|
          table.row_spacings = 1
          table.column_spacings = 1
        end

        new_box = if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end

        if Gtk.check_version(3,0,0).nil?
          new_box.pack_start(new_table, expand: false, fill: false, padding: 0)
        else
          new_box.pack_start(new_table, false, false, 0)
        end

        @OC_NOTEBOOK.append_page(new_box, Gtk::Label.new(name))

        instance_variable_set("@OC_TABLE#{val}", new_table)
        instance_variable_set("@OC_VERTICAL_BOX#{val}", new_box)
      end
end

def self.add_label_entry(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacombat[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 1, 2, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end

def self.add_label_entry2(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacombat[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 3, 4, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry3(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry4(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry5(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 4, 5, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry6(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 1, 2, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry7(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacombat[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 1, 3, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end
  
def self.add_label_entry8(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 1, 2, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacombat[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 2, 3, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end
  
    def self.add_dropdown(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacombat[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacombat[variable].to_s != "Fixnum" && UserVars.osacombat[variable].to_s != "Integer"
          UserVars.osacombat[variable]
        end
        dropdown.set_active(UserVars.osacombat[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 0, 1, size, size + 1)
      table.attach(align2, 1, 2, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

def self.add_dropdown2(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacombat[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacombat[variable].to_s != "Fixnum" && UserVars.osacombat[variable].to_s != "Integer"
          UserVars.osacombat[variable]
        end
        dropdown.set_active(UserVars.osacombat[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 2, 3, size, size + 1)
      table.attach(align2, 3, 4, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

      def self.add_text_area(vbox, label, variable)
      # Grab value for a manual check since we can't rely on a version of Ruby with safe operators
      current_value = UserVars.osacombat[variable]

      entry = Gtk::TextView.new
      entry.buffer.text = current_value ? current_value.gsub("||","\n") : ""

      swin = Gtk::ScrolledWindow.new
      swin.border_width = 5
      swin.add(entry)
      swin.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

      frame = Gtk::Frame.new(label)
      frame.add(swin)

      vbox.pack_start_defaults(frame)

      @OC_ENTRY[variable] = entry
    end
	
    def self.add_checkbox(table, x_pos, label, variable, newrow = false, default = false)
      size = @OC_TABLE_SIZE[table] || 0
      checkbox = Gtk::CheckButton.new label
      value = UserVars.osacombat[variable] || default
      checkbox.active = value
      table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
      @OC_ENTRY[variable] = checkbox
      @OC_TABLE_SIZE[table] += 1 if newrow
    end
	
  Gtk.queue do
    @OC_ENTRY = Hash.new
	add_label_entry3(@OC_TABLE1, "Combat Settings", true)
	add_label_entry(@OC_TABLE1, "Percent Mana Before Using Mana Leech (Default: 50)", 'percentleech', true)
	add_label_entry(@OC_TABLE1, "Seek Healing at Wound Above Level: (0-3 Default: 0)", 'wound_level', true)
	add_label_entry(@OC_TABLE1, "Percent Health Before Using Symbol of Restore (1-90 Default: 65)", 'percent_health', true)
	add_label_entry(@OC_TABLE1, "Safe Room (Will Default to \"Node\")", 'safe_room', true)
	add_dropdown(@OC_TABLE1, "Stealth Disabler:", 'stealth_disabler', 'Search (Default), Dispel Invisibility, Searing Light, Light, Censure, Divine Wrath, Elemental Wave, Major Elemental Wave, Cone of Elements, Sunburst, Nature\'s Fury, Grasp of the Grave, Implosion, Tremors, Call Wind, Aura of the Arkati, Judgement, Eviscerate, Carn\'s Cry, Symbol of Sleep', true)
	add_label_entry(@OC_TABLE1, "UAC Hand Wraps:", 'uachands', true)
	add_label_entry(@OC_TABLE1, "UAC Foot Wraps:", 'uacfeet', true)
	add_label_entry(@OC_TABLE1, "Paladin Infuse Spell:", 'infusespell',true)
	add_label_entry7(@OC_TABLE1, "Creature Exclusion List:", 'exclusion', true)
	add_label_entry3(@OC_TABLE1, "", true)
	add_checkbox(@OC_TABLE1, 0,  "Scripted Combat", 'osacombat', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Normal Attack Command", 'noattack')
	add_checkbox(@OC_TABLE1, 1,  "Use Archery", 'osaarcher')
	add_checkbox(@OC_TABLE1, 2,  "Kneel With Crossbow", 'use_kneel')
	add_checkbox(@OC_TABLE1, 3,  "Use Mstrike", 'use_mstrike', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Stalking and Hiding (Ambush)", 'use_stealth')
	add_checkbox(@OC_TABLE1, 1,  "Use Stalking and Hiding (Waylay)", 'use_waylay')
	add_checkbox(@OC_TABLE1, 2,  "Use UAC W/ Weapon(s)", 'uacweapons')
	add_checkbox(@OC_TABLE1, 3,  "Use UAC W/O Weapon(s)", 'nouacweapons', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Brief Combat", 'usebriefcombat')
	add_checkbox(@OC_TABLE1, 1,  "Use Reactive Attacks \*\*\*", 'use_reactive')
	add_checkbox(@OC_TABLE1, 2,  "Avoid Poaching \*\*\*", 'check_for_group')	
	add_checkbox(@OC_TABLE1, 3,  "Loot Dead Creatures", 'osalooter', true)
	add_checkbox(@OC_TABLE1, 0,  "Use Unstun", 'use_unstun')
	add_checkbox(@OC_TABLE1, 1,  "Bless Caster", 'givebless')
	add_checkbox(@OC_TABLE1, 2,  "Need Bless", 'needbless')
	add_checkbox(@OC_TABLE1, 3,  "Use Mana Leech", 'use_mana_leech', true)
	add_label_entry3(@OC_TABLE1, "", true)
	add_label_entry3(@OC_TABLE1, "\*\*\* This Requires OSACrew to Be Running.", false)
	add_label_entry3(@OC_TABLE2, "Buffs:", false)
	add_label_entry4(@OC_TABLE2, "", true)
	add_checkbox(@OC_TABLE2, 0,  "Seanette's Shout", 'warcryshout')
	add_checkbox(@OC_TABLE2, 1,  "Horland's Holler", 'warcryholler')
	add_checkbox(@OC_TABLE2, 2,  "Surge of Strength (Use Cooldown)", 'surgeofstrength_cooldown', true)
	add_checkbox(@OC_TABLE2, 0,  "Surge of Strength (Ignore Cooldown)", 'surgeofstrength_nocooldown')
	add_checkbox(@OC_TABLE2, 1,  "Wall of Force (140)", 'wallofforce')
	add_checkbox(@OC_TABLE2, 2,  "Group Bravery (211)", 'groupbravery', true)
	add_checkbox(@OC_TABLE2, 0,  "Group Heroism (215)", 'groupheroism')
	add_checkbox(@OC_TABLE2, 1,  "Mana Focus (418)", 'groupmana')
	add_checkbox(@OC_TABLE2, 2,  "Group Barkskin (605)", 'groupbarkskin', true)
	add_checkbox(@OC_TABLE2, 0,  "Song of Tonis (1035)", 'songoftonis')
	add_checkbox(@OC_TABLE2, 1,  "Mind Over Body (1213)", 'mob')
	add_checkbox(@OC_TABLE2, 2,  "Focus Barrier (1216)", 'focus', true)
	add_checkbox(@OC_TABLE2, 0,  "Beacon of Courage (1608)", 'beaconofcourage')
	add_checkbox(@OC_TABLE2, 1,  "Faith Shield (1619)", 'faithshield', true)
	add_label_entry4(@OC_TABLE2, "", true)
	add_label_entry3(@OC_TABLE2, "Council of Light", false)
	add_label_entry6(@OC_TABLE2, "Guardians of Sunfist", false)
	add_label_entry4(@OC_TABLE2, "Order of Voln", true)
	add_label_entry4(@OC_TABLE2, "", true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Warding", 'sign_of_warding')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Minor Bane", 'sigil_of_minor_bane')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Courage", 'symbol_of_courage', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Defending", 'sign_of_defending')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Offense", 'sigil_of_offense')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Protection", 'symbol_of_protection', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Deflection (Not Implemented Yet)", 'sign_of_deflection')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Major Bane", 'sigil_of_major_bane')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Disruption", 'symbol_of_disruption', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Shields", 'sign_of_shields')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Minor Protection", 'sigil_of_minor_protection')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Mana", 'symbol_of_mana', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Striking", 'sign_of_striking')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Defense", 'sigil_of_defense')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Retribution", 'symbol_of_retribution', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Smiting", 'sign_of_smiting')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Major Protection", 'sigil_of_major_protection')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Supremacy", 'symbol_of_supremacy', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Swords", 'sign_of_swords')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Concentration", 'sigil_of_concentration')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Restore", 'symbol_of_restore', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Dissipation (Not Implemented Yet)", 'sign_of_dissipation')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Power", 'sigil_of_power')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Transcendence", 'symbol_of_transcendance', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Wracking (Not Implemented Yet)", 'sign_of_wracking', true)
	add_label_entry4(@OC_TABLE2, "", true)
	add_label_entry3(@OC_TABLE3, "Combat Settings:", true)
	#add_dropdown(@OC_TABLE3, "Attack Option:", 'attacktype', 'None,UAC Brawling,Melee,Archery,Spell Caster,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008', true)
	#add_label_entry3(@OC_TABLE3, "", true)
	add_dropdown(@OC_TABLE3,  "Attacking Stance", 'attackstance','Offensive,Advance,Forward,Neutral,Guarded,Defensive', true)
	add_dropdown(@OC_TABLE3,  "Defending Stance", 'defendingstance','Defensive,Guarded,Neutral,Forward,Advance,Offensive', true)
	add_label_entry3(@OC_TABLE3, "", true)
	add_dropdown(@OC_TABLE3, "Setup Attack:", 'attackopen', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eviscerate,Excoriate,Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Shield Trample,Spell Cleave,Subdue,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep")
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'setup_if', true)
	add_dropdown(@OC_TABLE3, "Second Setup Attack:", 'attackopen2', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eviscerate,Excoriate,Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Shield Trample,Spell Cleave,Subdue,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep")
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'setup_if2', true)
	add_dropdown(@OC_TABLE3, "Special Attack:", 'specialattack', 'None,Bearhug,Chastise,Excoriate,Exsanguinate,Leap Attack,Shield Strike,Spin Attack,Staggering Blow,True Strike')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'special_if', true)
	add_dropdown(@OC_TABLE3, "Second Special Attack:", 'secondspecialattack', 'None,Bearhug,Chastise,Excoriate,Exsanguinate,Leap Attack,Shield Strike,Spin Attack,Staggering Blow,True Strike')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'secondspecial_if', true)
	add_dropdown(@OC_TABLE3,  "AOE Attack:", 'aoe','None,Bull Rush,Clash (Brawling),Cyclone (Polearm),Pin Down (Ranged),Pulverize (Blunt),Shield Throw,Shield Trample,Whirling Blade (Edged),Whirlwind (Two-Handed),Volley (Ranged)', false)
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'aoe_if', true)
	add_dropdown(@OC_TABLE3,  "Assault:", 'assault','None,Barrage (Ranged),Flurry (Edged),Fury (Brawling),Guardant Thrusts (Polearm),Pummel (Blunt),Thrash (Two-Handed)')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Below:", 'assault_if', true)
	add_label_entry3(@OC_TABLE3, "", true)
	add_label_entry3(@OC_TABLE3, "Spell Settings:", true)
	add_label_entry(@OC_TABLE3, "Spell Opener:", 'spellopen')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'opener_if')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'open_spellwarding')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'open_spellchan')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'open_spellevoke')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'open_opener', true)
	add_label_entry(@OC_TABLE3, "Spell Opener:", 'spellopen2')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'opener_if2')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'open_spellwarding2')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'open_spellchan2')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'open_spellevoke2')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'open_opener2', true)
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'spelltype_if')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'spellwarding')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'spellchan')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'spellevoke')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'spell_open_cast', true)
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype2')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'spelltype2_if')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'spellwarding2')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'spellchan2')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'spellevoke2')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'spell_open_cast2', true)
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype3')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'spelltype3_if')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'spellwarding3')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'spellchan3')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'spellevoke3')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'spell_open_cast3', true)
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype4')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'spelltype4_if')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'spellwarding4')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'spellchan4')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'spellevoke4')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'spell_open_cast4', true)
	add_label_entry(@OC_TABLE3, "Attack Spell:", 'spelltype5')
	add_label_entry2(@OC_TABLE3, "If Enemy Count Is Above:", 'spelltype5_if')
	add_checkbox(@OC_TABLE3, 4,  "Warding", 'spellwarding5')
	add_checkbox(@OC_TABLE3, 5,  "Channel", 'spellchan5')
	add_checkbox(@OC_TABLE3, 6,  "Evoke", 'spellevoke5')
	add_checkbox(@OC_TABLE3, 7,  "Open (No Target)", 'spell_open_cast5', true)
	add_label_entry3(@OC_TABLE4, "Combat Settings:", true)
	#add_dropdown(@OC_TABLE4, "Attack Option:", 'undeadattacktype', 'None,UAC Brawling,Melee,Archery,Spell Caster,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008', true)
	#add_label_entry3(@OC_TABLE4, "", true)
	add_dropdown(@OC_TABLE4,  "Attacking Stance", 'undeadattackstance','Offensive,Advance,Forward,Neutral,Guarded,Defensive', true)
	add_dropdown(@OC_TABLE4,  "Defending Stance", 'undeaddefendingstance','Defensive,Guarded,Neutral,Forward,Advance,Offensive', true)
	add_label_entry3(@OC_TABLE4, "", true)
	add_dropdown(@OC_TABLE4, "Setup Attack:", 'undeadattackopen', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eviscerate,Excoriate,Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Shield Trample,Spell Cleave,Subdue,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep")
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadsetup_if', true)
	add_dropdown(@OC_TABLE4, "Second Setup Attack:", 'undeadattackopen2', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eviscerate,Excoriate,Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Shield Trample,Spell Cleave,Subdue,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep")
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadsetup_if2', true)
	add_dropdown(@OC_TABLE4, "Special Attack:", 'undeadspecialattack', 'None,Bearhug,Chastise,Excoriate,Exsanguinate,Leap Attack,Shield Strike,Spin Attack,Staggering Blow,True Strike')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadspecial_if', true)
	add_dropdown(@OC_TABLE4, "Second Special Attack:", 'secondundeadspecialattack', 'None,Bearhug,Chastise,Excoriate,Exsanguinate,Leap Attack,Shield Strike,Spin Attack,Staggering Blow,True Strike')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'secondundeadspecial_if', true)
	add_dropdown(@OC_TABLE4,  "AOE Attack:", 'undeadaoe','None,Bull Rush,Clash (Brawling),Cyclone (Polearm),Pin Down (Ranged),Pulverize (Blunt),Shield Throw,Shield Trample,Whirling Blade (Edged),Whirlwind (Two-Handed),Volley (Ranged)', false)
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadaoe_if', true)
	add_dropdown(@OC_TABLE4,  "Assault:", 'undeadassault','None,Barrage (Ranged),Flurry (Edged),Fury (Brawling),Guardant Thrusts (Polearm),Pummel (Blunt),Thrash (Two-Handed)')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Below:", 'undeadassault_if', true)
	add_label_entry3(@OC_TABLE4, "", true)
	add_label_entry3(@OC_TABLE4, "Spell Settings:", true)
	add_label_entry(@OC_TABLE4, "Spell Opener:", 'undeadspellopen')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undead_opener_if')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadopen_spellwarding')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadopen_spellchan')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadopen_spellevoke')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadopen_opener', true)
	add_label_entry(@OC_TABLE4, "Spell Opener:", 'undeadspellopen2')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undead_opener_if2')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadopen_spellwarding2')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadopen_spellchan2')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadopen_spellevoke2')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadopen_opener2', true)
	add_label_entry(@OC_TABLE4, "Attack Spell:", 'undeadspelltype')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadspelltype_if')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadspellwarding')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadspellchan')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadspellevoke')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadspell_open_cast', true)
	add_label_entry(@OC_TABLE4, "Attack Spell:", 'undeadspelltype2')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadspelltype2_if')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadspellwarding2')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadspellchan2')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadspellevoke2')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadspell_open_cast2', true)
	add_label_entry(@OC_TABLE4, "Attack Spell:", 'undeadspelltype3')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadspelltype3_if')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadspellwarding3')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadspellchan3')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadspellevoke3')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadspell_open_cast3', true)
	add_label_entry(@OC_TABLE4, "Attack Spell:", 'undeadspelltype4')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadspelltype4_if')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadspellwarding4')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadspellchan4')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadspellevoke4')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadspell_open_cast4', true)
	add_label_entry(@OC_TABLE4, "Attack Spell:", 'undeadspelltype5')
	add_label_entry2(@OC_TABLE4, "If Enemy Count Is Above:", 'undeadspelltype5_if')
	add_checkbox(@OC_TABLE4, 4,  "Warding", 'undeadspellwarding5')
	add_checkbox(@OC_TABLE4, 5,  "Channel", 'undeadspellchan5')
	add_checkbox(@OC_TABLE4, 6,  "Evoke", 'undeadspellevoke5')
	add_checkbox(@OC_TABLE4, 7,  "Open (No Target)", 'undeadspell_open_cast5', true)
end
	
  Gtk.queue do
    @OC_WINDOW.signal_connect("delete_event") {
      @OC_SETUP_COMPLETED = true
    }
  end

  Gtk.queue do 
	
    @OC_WINDOW.show_all
  end

  @OC_SETUP_COMPLETED = false
  until(@OC_SETUP_COMPLETED)
    sleep(0.5)
  end

    UserVars.osacombat ||= Hash.new
    @OC_ENTRY.keys.each do |key|
      echo "#{key} - #{@OC_ENTRY[key].to_s}" if $osacombat_debug
      if @OC_ENTRY[key].to_s =~ /CheckButton/
        value = @OC_ENTRY[key].active?
        UserVars.osacombat[key] = @OC_ENTRY[key].active?
      elsif @OC_ENTRY[key].to_s =~ /ComboBox/
        UserVars.osacombat[key] = @OC_ENTRY[key].active
      elsif @OC_ENTRY[key].to_s =~ /TextView/
        # Store these with double pipes so we don't mess up any supplied expressions
        UserVars.osacombat[key] = @OC_ENTRY[key].buffer.text.gsub("\n","||")
      else
        if key == 'wounded_eval'
          UserVars.osacombat[key] = @OC_ENTRY[key].text
        else
          UserVars.osacombat[key] = @OC_ENTRY[key].text.strip
        end
      end
    end
    UserVars.save

  Gtk.queue do
    @OC_WINDOW.destroy
 end
end

if UserVars.osacombat["wound_level"].to_s.empty?
	UserVars.osacombat["wound_level"] = 0
end
if UserVars.osacombat["percent_health"].to_s.empty?
	UserVars.osacombat["percent_health"] = 65
end
if UserVars.osacombat["percentleech"].to_s.empty?
	UserVars.osacombat["percentleech"] = 50
end
if UserVars.osacombat["safe_room"].to_s.empty?
	UserVars.osacombat["safe_room"] = "node"
end
if script.vars[1] == '?'
	osacombat_help_display
	exit
elsif script.vars[1] == 'living'
	UserVars.osacrew["enemy_type"] = "living"
		respond ""
		respond "Setting Creature Type to Living"
		respond ""
elsif script.vars[1] == 'undead'
	UserVars.osacrew["enemy_type"] = "undead"
		respond ""
		respond "Setting Creature Type to Undead"
		respond ""
elsif (script.vars[1] =~ /setup/i)
self.osacombatsetup()
exit
elsif (Script.current.vars[1] =~ /profile/i)
	self.profile(Script.current.vars)
	exit
elsif script.vars[1] == 'help'
	osacombat_help_display
	exit
elsif script.vars[1] == 'version'
	respond ""
	respond "OSACombat Version #{UserVars.osacrew["combatversion"]}"
	respond ""
	exit
end

$osacombat_auto_stow = nil
$osacombat_my_mstrike_focus = nil        #These are variables for Mstrike.  Not needed in GUI as they are autoset in mstrike def below.  Can remove or try to autoset this in osacrew.vars so settings are saved.  But this will check settings on open each time.
$osacombat_my_mstrike_open = nil
$osacombat_uac_current_attack = 0
$osacombat_retaliate = 0

def ship_type
	case Room.current.id
	when (29038..29042)
			@ship_type = "sloop"
			@cargo_hold = 29039
			@main_deck = 29038
			@mid_deck = nil
			@forward_deck = nil
			@bow = nil
			@crows_nest = 29040
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = nil
			@crew_quarters = nil
			@helm = 29041
			@cannons1 = 29038
			@cannons2 = nil
			@cannons3 = nil
			@captains_quarters = 29042
			@ship_map = [29038, 29039, 29040, 29041, 29042]
			@Slooptimes = UserVars.osacrew["Slooptimes"].last(50)
			if @Slooptimes.nil? or @Slooptimes.empty?
				@Slooptimes = [0.315]
			end
			@Sailtimes = @Slooptimes
	when (30140..30147)
			@ship_type = "brigantine"
			@cargo_hold = 30145
			@main_deck = 30142
			@mid_deck = nil
			@forward_deck = 30144
			@bow = nil
			@crows_nest = 30143
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = 30147
			@crew_quarters = 30146
			@helm = 30141
			@captains_quarters = 30140
			@cannons1 = 30142
			@cannons2 = 30144
			@cannons3 = nil
			@ship_map = [30144, 30142, 30143, 30145, 30147, 30146, 30141, 30140]
			@Brigtimes = UserVars.osacrew["Brigtimes"].last(50)
			if @Brigtimes.nil? or @Brigtimes.empty?
				@Brigtimes = [0.30000000000000000]
			end
			@Sailtimes = @Brigtimes
	when (30119..30127)
			@ship_type = "carrack"
			@cargo_hold = 30125
			@main_deck = 30119
			@mid_deck = nil
			@forward_deck = 30121
			@social_room = nil
			@bow = 30122
			@crows_nest = 30123
			@forward_crows_nest = nil
			@mess_hall = 30127
			@crew_quarters = 30126
			@helm = 30120
			@captains_quarters = 30124
			@cannons1 = 30119
			@cannons2 = 30121
			@cannons3 = nil
			@ship_map = [30122, 30121, 30123, 30119, 30127, 30125, 30126, 30120, 30124]
			@Cartimes = UserVars.osacrew["Cartimes"].last(50)
			if @Cartimes.nil? or @Cartimes.empty?
				@Cartimes = [0.30000000000000000]
			end
			@Sailtimes = @Cartimes
	when (30176..30186)
			@ship_type = "galleon"
			@cargo_hold = 30182
			@main_deck = 30176
			@mid_deck = nil
			@forward_deck = 30177
			@bow = 30178
			@crows_nest = 30181
			@forward_crows_nest = nil
			@social_room = 30185
			@mess_hall = 30184
			@crew_quarters = 30183
			@helm = 30179
			@captains_quarters = 30180
			@cannons1 = 30176
			@cannons2 = 30177
			@cannons3 = nil
			@ship_map = [30178, 30177, 30181, 30176, 30185, 30184, 30182, 30183, 30179, 30180]
			@Galtimes = UserVars.osacrew["Galtimes"].last(50)
			if @Galtimes.nil? or @Galtimes.empty?
				@Galtimes = [0.30000000000000000]
			end
			@Sailtimes = @Galtimes
	when (30166..30175)
			@ship_type = "frigate"
			@cargo_hold = 30167
			@main_deck = 30166
			@mid_deck = nil
			@forward_deck = 30171
			@bow = 30172
			@crows_nest = 30173
			@forward_crows_nest = nil
			@social_room = 30170
			@mess_hall = 30169
			@crew_quarters = 30168
			@helm = 30174
			@captains_quarters = 30175
			@cannons1 = 30166
			@cannons2 = 30171
			@cannons3 = nil
			@ship_map = [30172, 30171, 30173, 30166, 30170, 30169, 30167, 30168, 30174, 30175]
			@Fritimes = UserVars.osacrew["Fritimes"].last(50)
			if @Fritimes.nil? or @Fritimes.empty?
				@Fritimes = [0.30000000000000000]
			end
			@Sailtimes = @Fritimes
	when (30128..30139)
			@ship_type = "man o' war"
			@cargo_hold = 30136
			@main_deck = 30130
			@mid_deck = 30131
			@forward_deck = 30132
			@bow = 30133
			@crows_nest = 30135
			@forward_crows_nest = 30134
			@social_room = 30139
			@mess_hall = 30138
			@crew_quarters = 30137
			@helm = 30128
			@captains_quarters = 30129
			@cannons1 = 30130
			@cannons2 = 30131
			@cannons3 = 30132
			@ship_map = [30133, 30134, 30132, 30131, 30135, 30130, 30139, 30138, 30136, 30137, 30128, 30129]
			@Mantimes = UserVars.osacrew["Mantimes"].last(50)
			if @Mantimes.nil? or @Mantimes.empty?
				@Mantimes = [0.35000000000000000]
			end
			@Sailtimes = @Mantimes
	end
	if (30787..30791).include? Room.current.id || (@enemy_main_deck == 30787)
			@enemy_ship_type = "Sloop"
			@enemy_bow = nil
			@enemy_forward_deck = nil
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30787
			@enemy_crows_nest = 30791
			@enemy_cargo_hold = 30790
			@enemy_helm = 30788
			@enemy_quarters = 30789
			@enemy_ship_map = [30787, 30791, 30788, 30790]
	end
	if (30792..30797).include? Room.current.id || (@enemy_main_deck == 30792)
			@enemy_ship_type = "Brigantine"
			@enemy_bow = nil
			@enemy_forward_deck = 30797
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30792
			@enemy_crows_nest = 30796
			@enemy_cargo_hold = 30795
			@enemy_helm = 30793
			@enemy_quarters = 30794
			@enemy_ship_map = [30797, 30792, 30796, 30793, 30795]
	end
	if (30266..30272).include? Room.current.id || (@enemy_main_deck == 30266)
			@enemy_ship_type = "Carrack"
			@enemy_bow = 30272
			@enemy_forward_deck = 30271
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30266
			@enemy_crows_nest = 30270
			@enemy_cargo_hold = 30269
			@enemy_helm = 30267
			@enemy_quarters = 30268
			@enemy_ship_map = [30272, 30271, 30266, 30270, 30267, 30269]
	end
	if (30798..30804).include? Room.current.id || (@enemy_main_deck == 30798)
			@enemy_ship_type = "Galleon"
			@enemy_bow = 30804
			@enemy_forward_deck = 30803
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30798
			@enemy_crows_nest = 30802
			@enemy_cargo_hold = 30801
			@enemy_helm = 30799
			@enemy_quarters = 30800
			@enemy_ship_map = [30804, 30803, 30798, 30802, 30799, 30801]
	end
	if (30805..30810).include? Room.current.id || (@enemy_main_deck == 30805)
			@enemy_ship_type = "Frigate"
			@enemy_bow = nil
			@enemy_forward_deck = 30810
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30805
			@enemy_crows_nest = 30809
			@enemy_cargo_hold = 30808
			@enemy_helm = 30806
			@enemy_quarters = 30807
			@enemy_ship_map = [30810, 30805, 30809, 30806, 30808]
	end
	if (30778..30786).include? Room.current.id || (@enemy_main_deck == 30778)
			@enemy_ship_type = "Man O' War"
			@enemy_bow = 30784
			@enemy_forward_deck = 30786
			@enemy_forward_crows_nest = 30785
			@enemy_mid_deck = 30783
			@enemy_main_deck = 30778
			@enemy_crows_nest = 30782
			@enemy_cargo_hold = 30781
			@enemy_helm = 30779
			@enemy_quarters = 30780
			@enemy_ship_map = [30784, 30786, 30785, 30783, 30778, 30782, 30779, 30781]
	end
end

####### Miscelleanous Combat Actions
def osa_put(message)
    echo "osa_put" if $osa_debug
    unless (script = Script.self) then
      respond('--- waitfor: Unable to identify calling script.')
      return false
    end
    clear
    put(message)

    while (string = get)
      if string.to_s =~ /(?:\.\.\.wait |Wait )[0-9]+/
        hold_up = string.slice(/[0-9]+/).to_i
        sleep(hold_up - 1) unless hold_up.nil? || hold_up == 1
        clear
        put(message)
        next
      elsif string.to_s =~ /struggle.+stand/
        clear
        osa_put("stand")
        next
      elsif string.to_s =~ /stunned|can't do that while|cannot seem|can't seem|don't seem|Sorry, you may only type ahead/
        if dead?
          echo("You're dead...! You can't do that!")
          sleep(0.25)
          script.downstream_buffer.unshift(string)
          return false
        elsif checkstunned
          while checkstunned
            sleep(0.25)
          end
        elsif checkwebbed
          while checkwebbed
            sleep(0.25)
          end
        else
          sleep(0.25)
        end
        clear
        put(message)
        next
      else
        script.downstream_buffer.unshift(string)
        return string
      end
    end
end

def change_stance(new_stance, force = true)
	health_monitor
    return if Spell[216].active? || dead?
    perfect_stance = nil
    if new_stance =~ /10|20|30|40|50|60|70|80|90|100/i
      perfect_stance = new_stance
      new_stance = "advance" if perfect_stance =~ /10|20/i
      new_stance = "forward" if perfect_stance =~ /30|40/i
      new_stance = "neutral" if perfect_stance =~ /50|60/i
      new_stance = "guarded" if perfect_stance =~ /70|80/i
      new_stance = "defensive" if perfect_stance =~ /90|100/i
    end
    if (stance() =~ /#{new_stance}/)
      return
    elsif (checkcastrt() > 0 && new_stance =~ /def/)
      return if stance() == 'guarded'
    end

    if ((force) && (perfect_stance != nil) && (CMan.known?("Stance Perfection")))
      dothistimeout("cman stance #{perfect_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    elsif (force)
      dothistimeout("stance #{new_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    else
      fput "stance #{new_stance}"
    end
end

def get_target
	if !GameObj.targets.empty? && GameObj.target.nil?
		fput "target ##{GameObj.targets[0].id}"
	end
end

def flavor_messaging
	$percent_chance = rand(0-100)
	$flavor_message = rand(1-10)
	if $percent_chance >= 95 && (GameObj.target.status != "dead")
		if $flavor_message == 1
			fput "recite Feel The Wrath of Lorminstra!"
		end
		if $flavor_message == 2
			fput "recite Feel The Undying Cold Of Lady Winter's Justice!"
		end
		if $flavor_message == 3
			fput "recite Behold The Awesome Power Of Lorminstra!"
		end
		if $flavor_message == 4
			fput "recite Fear The Cold Embrace Of The Gatekeeper!"
		end
		if $flavor_message == 5
			fput "recite I Send Thee To Lady Winter, May You Be Judged Favorably!"
		end
		if $flavor_message == 6
			fput "recite Begone Foul Abomination;Luukos Be Damned, All Praise Lorminstra!"
		end
		if $flavor_message == 7
			fput "recite All Praise Lady Winter!"
		end
		if $flavor_message == 8
			fput "recite Behold The Might Of The Gatekeeper!"
		end
		if $flavor_message == 9
			fput "recite In The Name Of Lorminstra!;I Release You From The Evil Binds Of The Serpent!"
		end
		if $flavor_message == 10
			fput "recite Lady Winter, I Pray You Set This Tortured Soul Free!"
		end
	end
end

def looter
	health_monitor
	checkfordead
	if @deadnpcs.count > 0 && ((!stunned?) or (!webbed?) or (!bound?))
		check_for_poaching
		if UserVars.osacombat["osalooter"] && !$poaching
			stance_defensive
			start_script "eloot"
			wait_while { running?("eloot") }
			if checkname == "Peggyanne"
				daybringer_light
				wait_rt
			end
		end
	end
end

def cast_at_bad_thing
	if (Spell[612].known? and Spell[612].affordable?) && (($potential_bad_thing.noun == "cloud") or ($potential_bad_thing.noun == "cyclone") or ($potential_bad_thing.noun == "whirlwind") or ($potential_bad_thing.noun == "sandstorm") or ($potential_bad_thing.noun == "vortex")) && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		Spell[612].cast
		return
	end
	if (Spell[417].known? and Spell[417].affordable?) && (!UserVars.osacombat["myweapon"].nil?) && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		Spell[417].cast UserVars.osacombat["myweapon"]
	end
	if (Spell[417].known? and Spell[417].affordable?) && (($potential_bad_thing.noun == "vine") or ($potential_bad_thing.noun == "cyclone") or ($potential_bad_thing.noun == "whirlwind") or ($potential_bad_thing.noun == "sandstorm") or ($potential_bad_thing.noun == "swarm") or ($potential_bad_thing.noun == "tempest") or ($potential_bad_thing.noun == "void") or ($potential_bad_thing.noun == "web") or ($potential_bad_thing.noun == "cloud") or ($potential_bad_thing.noun == "vortex") or ($potential_bad_thing.noun == "globe")or ($potential_bad_thing.noun == "rift")) && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		Spell[417].cast "##{$potential_bad_thing.id}"
		return
	end
	if (Spell[505].known? and Spell[505].affordable?) && (($potential_bad_thing.noun == "cloud") or ($potential_bad_thing.noun == "cyclone") or ($potential_bad_thing.noun == "whirlwind") or ($potential_bad_thing.noun == "sandstorm") or ($potential_bad_thing.noun == "vortex")) && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		Spell[505].cast "##{$potential_bad_thing.id}"
		return
	end
	if (Spell[119].known? and Spell[119].affordable?) && (!UserVars.osacombat["myweapon"].nil?) && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		Spell[119].cast UserVars.osacombat["myweapon"]
	end
	if (Spell[119].known? and Spell[119].affordable?) && (($potential_bad_thing.noun == "vine") or ($potential_bad_thing.noun == "cyclone") or ($potential_bad_thing.noun == "whirlwind") or ($potential_bad_thing.noun == "sandstorm") or ($potential_bad_thing.noun == "swarm") or ($potential_bad_thing.noun == "tempest") or ($potential_bad_thing.noun == "void") or ($potential_bad_thing.noun == "web") or ($potential_bad_thing.noun == "cloud") or ($potential_bad_thing.noun == "vortex")or ($potential_bad_thing.noun == "globe")or ($potential_bad_thing.noun == "rift")) && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		Spell[119].cast "##{$potential_bad_thing.id}"
		return
	end
	if (Spell[1218].known? and Spell[1218].affordable?) && (($potential_bad_thing.noun == "cloud") or ($potential_bad_thing.noun == "cyclone")) && ((!stunned?) or (!webbed?) or (!bound?))
        wait_rt
        Spell[1218].cast "##{$potential_bad_thing.id}"
        return
    end
end

def creature_type
	get_target
	if GameObj.target.type.include? "undead"
		UserVars.osacombat["creature_type"] = "undead"
	else
		UserVars.osacombat["creature_type"] = "living"
	end
	if UserVars.osacombat["creature_type"] == "living"
		#@attack_type = "#{UserVars.osacombat["attacktype"]}"
		@offstance = UserVars.osacombat["attackstance"].to_i
		@defstance = UserVars.osacombat["defendingstance"].to_i
		@osaattackopen = UserVars.osacombat["attackopen"].to_i
		@osaattackopen_if = UserVars.osacombat["setup_if"].to_i
		@osaattackopen2 = UserVars.osacombat["attackopen2"].to_i
		@osaattackopen2_if = UserVars.osacombat["setup2_if"].to_i
		@osaspecial = UserVars.osacombat["specialattack"].to_i
		@osaspecial_if = UserVars.osacombat["special_if"].to_i
		@secondosaspecial = UserVars.osacombat["secondspecialattack"].to_i
		@secondosaspecial_if = UserVars.osacombat["secondspecial_if"].to_i
		@osaaoe = UserVars.osacombat["aoe"].to_i
		@osaaoe_if = UserVars.osacombat["aoe_if"].to_i
		@osaassault = UserVars.osacombat["assault"].to_i
		@osaassault_if = UserVars.osacombat["assault_if"].to_i
		@spell_open = "#{UserVars.osacombat["spellopen"]}"
		@spell_open_count = UserVars.osacombat["opener_if"].to_i
		@warding_opener = UserVars.osacombat["open_spellwarding"]
		@channel_opener = UserVars.osacombat["open_spellchan"]
		@evoke_opener = UserVars.osacombat["open_spellevoke"]
		@open_cast_opener = UserVars.osacombat["open_opener"]
		@spell_open2 = "#{UserVars.osacombat["spellopen2"]}"
		@spell_open_count2 = UserVars.osacombat["opener_if2"].to_i
		@warding_opener2 = UserVars.osacombat["open_spellwarding2"]
		@channel_opener2 = UserVars.osacombat["open_spellchan2"]
		@evoke_opener2 = UserVars.osacombat["open_spellevoke2"]
		@open_cast_opener2 = UserVars.osacombat["open_opener2"]
		@spell_type = "#{UserVars.osacombat["spelltype"]}"
		@spell_type_if = UserVars.osacombat["spelltype_if"].to_i
		@cast_type_warding = UserVars.osacombat["spellwarding"]
		@cast_type_channel = UserVars.osacombat["spellchan"]
		@cast_type_evoke = UserVars.osacombat["spellevoke"]
		@cast_type_open = UserVars.osacombat["spell_open_cast"]
		if @cast_type_evoke && !@cast_type_channel
			@cast_type = "evoke"
		elsif @cast_type_channel && !@cast_type_evoke
			@cast_type = "channel"
		elsif @cast_type_channel && @cast_type_evoke
			@cast_type = "evoke channel"
		else
			@cast_type = ""
		end
		@spell_type2 = "#{UserVars.osacombat["spelltype2"]}"
		@spell_type2_if = UserVars.osacombat["spelltype2_if"].to_i
		@cast_type2_warding = UserVars.osacombat["spellwarding2"]
		@cast_type2_channel = UserVars.osacombat["spellchan2"]
		@cast_type2_evoke = UserVars.osacombat["spellevoke2"]
		@cast_type2_open = UserVars.osacombat["spell_open_cast2"]
		if @cast_type2_evoke && !@cast_type2_channel
			@cast_type2 = "evoke"
		elsif @cast_type2_channel && !@cast_type2_evoke
			@cast_type2 = "channel"
		elsif @cast_type2_channel && @cast_type2_evoke
			@cast_type2 = "evoke channel"
		else
			@cast_type2 = ""
		end
		@spell_type3 = "#{UserVars.osacombat["spelltype3"]}"
		@spell_type3_if = UserVars.osacombat["spelltype3_if"].to_i
		@cast_type3_warding = UserVars.osacombat["spellwarding3"]
		@cast_type3_channel = UserVars.osacombat["spellchan3"]
		@cast_type3_evoke = UserVars.osacombat["spellevoke3"]
		@cast_type3_open = UserVars.osacombat["spell_open_cast3"]
		if @cast_type3_evoke && !@cast_type3_channel
			@cast_type3 = "evoke"
		elsif @cast_type3_channel && !@cast_type3_evoke
			@cast_type3 = "channel"
		elsif @cast_type3_channel && @cast_type3_evoke
			@cast_type3 = "evoke channel"
		else
			@cast_type3 = ""
		end
		@spell_type4 = "#{UserVars.osacombat["spelltype4"]}"
		@spell_type4_if = UserVars.osacombat["spelltype4_if"].to_i
		@cast_type4_warding = UserVars.osacombat["spellwarding4"]
		@cast_type4_channel = UserVars.osacombat["spellchan4"]
		@cast_type4_evoke = UserVars.osacombat["spellevoke4"]
		@cast_type4_open = UserVars.osacombat["spell_open_cast4"]
		if @cast_type4_evoke && !@cast_type4_channel
			@cast_type4 = "evoke"
		elsif @cast_type4_channel && !@cast_type4_evoke
			@cast_type4 = "channel"
		elsif @cast_type4_channel && @cast_type4_evoke
			@cast_type4 = "evoke channel"
		else
			@cast_type4 = ""
		end
		@spell_type5 = "#{UserVars.osacombat["spelltype5"]}"
		@spell_type5_if = UserVars.osacombat["spelltype5_if"].to_i
		@cast_type5_warding = UserVars.osacombat["spellwarding5"]
		@cast_type5_channel = UserVars.osacombat["spellchan5"]
		@cast_type5_evoke = UserVars.osacombat["spellevoke5"]
		@cast_type5_open = UserVars.osacombat["spell_open_cast5"]
		if @cast_type5_evoke && !@cast_type5_channel
			@cast_type5 = "evoke"
		elsif @cast_type5_channel && !@cast_type5_evoke
			@cast_type5 = "channel"
		elsif @cast_type5_channel && @cast_type5_evoke
			@cast_type5 = "evoke channel"
		else
			@cast_type5 = ""
		end
	elsif UserVars.osacombat["creature_type"] == "undead"
		#@attack_type = "#{UserVars.osacombat["undeadattacktype"]}"
		@offstance = UserVars.osacombat["undeadattackstance"].to_i
		@defstance = UserVars.osacombat["undeaddefendingstance"].to_i
		@osaattackopen = UserVars.osacombat["undeadattackopen"].to_i
		@osaattackopen_if = UserVars.osacombat["undeadsetup_if"].to_i
		@osaattackopen2 = UserVars.osacombat["undeadattackopen2"].to_i
		@osaattackopen2_if = UserVars.osacombat["undeadsetup2_if"].to_i
		@osaspecial = UserVars.osacombat["undeadspecialattack"].to_i
		@osaspecial_if = UserVars.osacombat["undeadspecial_if"].to_i
		@secondosaspecial = UserVars.osacombat["secondundeadspecialattack"].to_i
		@secondosaspecial_if = UserVars.osacombat["secondundeadspecial_if"].to_i
		@osaaoe = UserVars.osacombat["undeadaoe"].to_i
		@osaaoe_if = UserVars.osacombat["undeadaoe_if"].to_i
		@osaassault = UserVars.osacombat["undeadassault"].to_i
		@osaassault_if = UserVars.osacombat["undeadassault_if"].to_i
		@spell_open = "#{UserVars.osacombat["undeadspellopen"]}"
		@spell_open_count = UserVars.osacombat["undead_opener_if"].to_i
		@warding_opener = UserVars.osacombat["undeadopen_spellwarding"]
		@channel_opener = UserVars.osacombat["undeadopen_spellchan"]
		@evoke_opener = UserVars.osacombat["undeadopen_spellevoke"]
		@open_cast_opener = UserVars.osacombat["undead_open_opener"]
		@spell_open2 = "#{UserVars.osacombat["undeadspellopen2"]}"
		@spell_open_count2 = UserVars.osacombat["undead_opener_if2"].to_i
		@warding_opener2 = UserVars.osacombat["undeadopen_spellwarding2"]
		@channel_opener2 = UserVars.osacombat["undeadopen_spellchan2"]
		@evoke_opener2 = UserVars.osacombat["undeadopen_spellevoke2"]
		@open_cast_opener2 = UserVars.osacombat["undead_open_opener2"]
		@spell_type = "#{UserVars.osacombat["undeadspelltype"]}"
		@spell_type_if = UserVars.osacombat["undeadspelltype_if"].to_i
		@cast_type_warding = UserVars.osacombat["undeadspellwarding"]
		@cast_type_channel = UserVars.osacombat["undeadspellchan"]
		@cast_type_evoke = UserVars.osacombat["undeadspellevoke"]
		@cast_type_open = UserVars.osacombat["undeadspell_open_cast"]
		if @cast_type_evoke && !@cast_type_channel
			@cast_type = "evoke"
		elsif @cast_type_channel && !@cast_type_evoke
			@cast_type = "channel"
		elsif @cast_type_channel && @cast_type_evoke
			@cast_type = "evoke channel"
		else
			@cast_type = ""
		end
		@spell_type2 = "#{UserVars.osacombat["undeadspelltype2"]}"
		@spell_type2_if = UserVars.osacombat["undeadspelltype2_if"].to_i
		@cast_type2_warding = UserVars.osacombat["undeadspellwarding2"]
		@cast_type2_channel = UserVars.osacombat["undeadspellchan2"]
		@cast_type2_evoke = UserVars.osacombat["undeadspellevoke2"]
		@cast_type2_open = UserVars.osacombat["undeadspell_open_cast2"]
		if @cast_type2_evoke && !@cast_type2_channel
			@cast_type2 = "evoke"
		elsif @cast_type2_channel && !@cast_type2_evoke
			@cast_type2 = "channel"
		elsif @cast_type2_channel && @cast_type2_evoke
			@cast_type2 = "evoke channel"
		else
			@cast_type2 = ""
		end
		@spell_type3 = "#{UserVars.osacombat["undeadspelltype3"]}"
		@spell_type3_if = UserVars.osacombat["undeadspelltype3_if"].to_i
		@cast_type3_warding = UserVars.osacombat["undeadspellwarding3"]
		@cast_type3_channel = UserVars.osacombat["undeadspellchan3"]
		@cast_type3_evoke = UserVars.osacombat["undeadspellevoke3"]
		@cast_type3_open = UserVars.osacombat["undeadspell_open_cast3"]
		if @cast_type3_evoke && !@cast_type3_channel
			@cast_type3 = "evoke"
		elsif @cast_type3_channel && !@cast_type3_evoke
			@cast_type3 = "channel"
		elsif @cast_type3_channel && @cast_type3_evoke
			@cast_type3 = "evoke channel"
		else
			@cast_type3 = ""
		end
		@spell_type4 = "#{UserVars.osacombat["undeadspelltype4"]}"
		@spell_type4_if = UserVars.osacombat["undeadspelltype4_if"].to_i
		@cast_type4_warding = UserVars.osacombat["undeadspellwarding4"]
		@cast_type4_channel = UserVars.osacombat["undeadspellchan4"]
		@cast_type4_evoke = UserVars.osacombat["undeadspellevoke4"]
		@cast_type4_open = UserVars.osacombat["undeadspell_open_cast4"]
		if @cast_type4_evoke && !@cast_type4_channel
			@cast_type4 = "evoke"
		elsif @cast_type4_channel && !@cast_type4_evoke
			@cast_type4 = "channel"
		elsif @cast_type4_channel && @cast_type4_evoke
			@cast_type4 = "evoke channel"
		else
			@cast_type4 = ""
		end
		@spell_type5 = "#{UserVars.osacombat["undeadspelltype5"]}"
		@spell_type5_if = UserVars.osacombat["undeadspelltype5_if"].to_i
		@cast_type5_warding = UserVars.osacombat["undeadspellwarding5"]
		@cast_type5_channel = UserVars.osacombat["undeadspellchan5"]
		@cast_type5_evoke = UserVars.osacombat["undeadspellevoke5"]
		@cast_type5_open = UserVars.osacombat["undeadspell_open_cast5"]
		if @cast_type5_evoke && !@cast_type5_channel
			@cast_type5 = "evoke"
		elsif @cast_type5_channel && !@cast_type5_evoke
			@cast_type5 = "channel"
		elsif @cast_type5_channel && @cast_type5_evoke
			@cast_type5 = "evoke channel"
		else
			@cast_type5 = ""
		end
	end
end

def prep_reset
	if checkprep == "None"
		return
	else
		fput "release"
	end
	
end

def stand(stand_command = nil)
    echo "stand" if $bigshot_debug
    return if (@use_kneel)
	until (standing?)
      #change_stance('defensive')
      osa_put 'stand'
    end
end

def stance_defensive
	health_monitor
	wait_rt
	if ((!stunned?) or (!webbed?) or (!bound?))
		if  @defstance == 0
			change_stance('defensive')
		elsif @defstance == 1
			change_stance('guarded')
		elsif @defstance == 2
			change_stance('neutral')
		elsif @defstance == 3
			change_stance('forward')
		elsif @defstance == 4
			change_stance('advance')
		elsif @defstance == 5
			change_stance('offensive')
		end
	end
end

def stance_offensive
	health_monitor
	wait_rt
	if ((!stunned?) or (!webbed?) or (!bound?))
		if @offstance == 0
			change_stance('offensive')
		elsif @offstance == 1
			change_stance('advance')
		elsif @offstance == 2
			change_stance('forward')
		elsif @offstance == 3
			change_stance('neutral')
		elsif @offstance == 4
			change_stance('guarded')
		elsif @offstance == 5
			change_stance('defensive')
		end
	end
end
    
def stance_guarded
	health_monitor
    change_stance('guarded')
end
	
def stand_check
	if !standing? && ((!stunned?) or (!webbed?) or (!bound?))
		#wait_rt
		stand()
	end
end
	
def kneel_check
	health_monitor
	if !checkkneeling && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		fput "kneel"
		pause 0.25
		wait_rt
	end
end

def hide_time
	health_monitor
	if GameObj.targets.count >= 1 && ((!stunned?) or (!webbed?) or (!bound?))
		if checkhidden
			return
		else
			result = dothistimeout "hide", 2, /fail to slip|that no one has noticed|but can't see anywhere/
			if result.to_s =~ /fail to slip/
				wait_rt
				fput "hide"
			elsif result.to_s =~ /that no one has noticed/
				return
			elsif result.to_s =~ /but can't see anywhere/
				return
			end
		end
	else
		return
	end
end

def wait_rt
	pause 0.1
	waitrt?
end

def wait_castrt
	pause 0.1
	waitrt?
	pause 0.1
	waitcastrt?
end

def reactive
	health_monitor
	if UserVars.osacombat["use_reactive"] && UserVars.osacrew["reactive"] && ((!stunned?) or (!webbed?) or (!bound?))
		wait_rt
		if UserVars.osacombat["reactive_creatures"].all? { |e| GameObj.targets.id.include?(e) }
			UserVars.osacrew["reactive"] = false
		else
			stance_offensive
			fput "weapon #{UserVars.osacrew["reactivetype"]}"
			UserVars.osacrew["reactive"] = false
			stance_defensive
		end
	end
end
###### Basic Attack Function
			
def chicken_attack
	if GameObj.targets.count > 0 && ((!stunned?) or (!webbed?) or (!bound?))
		if UserVars.osacombat["noattack"]
			stance_offensive
			if UserVars.osacombat["use_waylay"]
				fput "waylay"
			else
				fput "attack"
			end
		end
		stance_defensive
	end
end

def chicken_fire
	if GameObj.targets.count > 0 && ((!stunned?) or (!webbed?) or (!bound?))
		if UserVars.osacombat["noattack"]
			stance_offensive
			fput "fire"
		end
		stance_defensive
	end
end

def uac_round
	if GameObj.targets.count >= 1 && ((!stunned?) or (!webbed?) or (!bound?))
		if $osacombat_uac_current_attack == 0
			$osacombat_uac_current_attack = "jab"
		elsif $osacombat_uac_current_attack == nil
			$osacombat_uac_current_attack = "jab"
		end
		stance_offensive
		result = dothistimeout "#{$osacombat_uac_current_attack}", 2, /excellent positioning|followup jab|followup punch|followup grapple|followup kick|Roundtime/
		if result.to_s =~ /excellent positioning/
			$osacombat_uac_current_attack = "kick"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup jab/
			$osacombat_uac_current_attack = "jab"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup punch/
			$osacombat_uac_current_attack = "punch"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup grapple/
			$osacombat_uac_current_attack = "grapple"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup kick/
			$osacombat_uac_current_attack = "kick"
			wait_rt
			stance_defensive	
		elsif result.to_s =~ /Roundtime/
			$osacombat_uac_current_attack = "jab"
			wait_rt
			stance_defensive
		end
	else
		wait_rt
		stance_defensive
	end
end

####### Mstrike Setup

def mstrike_setup
	#Mstrike Detection
	if UserVars.osacombat["use_mstrike"]
		if UserVars.osacombat["nouacweapons"]
			fput "mstrike set recovery off"	
			fput "mstrike set default grapple"

		elsif UserVars.osacombat["osaarcher"]
			fput "mstrike set recovery off"
			fput "mstrike set default fire"
		else
			fput "mstrike set recovery off"
			fput "mstrike set default attack"
		end
	end
	if UserVars.osacombat["use_mstrike"]
		if Skills.multiopponentcombat >= 190
			$osacombat_my_mstrike_focus = 6
			$osacombat_my_mstrike_open = 7
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 155
			$osacombat_my_mstrike_focus = 5
			$osacombat_my_mstrike_open = 7
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 135
			$osacombat_my_mstrike_focus = 5
			$osacombat_my_mstrike_open = 6
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 100
			$osacombat_my_mstrike_focus = 4
			$osacombat_my_mstrike_open = 6
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 90
			$osacombat_my_mstrike_focus = 4
			$osacombat_my_mstrike_open = 5
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 60
			$osacombat_my_mstrike_focus = 3
			$osacombat_my_mstrike_open = 5
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 55
			$osacombat_my_mstrike_focus = 3
			$osacombat_my_mstrike_open = 4	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 35
			$osacombat_my_mstrike_focus = 2
			$osacombat_my_mstrike_open = 4	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 30
			$osacombat_my_mstrike_focus = 2
			$osacombat_my_mstrike_open = 3	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 15
			$osacombat_my_mstrike_focus = 0
			$osacombat_my_mstrike_open = 3	
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"
		elsif Skills.multiopponentcombat >= 5
			$osacombat_my_mstrike_focus = 0
			$osacombat_my_mstrike_open = 2
			fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
			fput "mstrike set open  #{$osacombat_my_mstrike_open}"			
		end
	end
end

################ Spell Checks to Cast
def symbol_of_mana
	if Spell["Symbol of Mana"].known? && UserVars.osacombat["symbol_of_mana"] && ((!stunned?) or (!webbed?) or (!bound?))
		if Effects::Cooldowns.active? "Symbol of Mana"
			nil
		else
			Spell["Symbol of Mana"].cast
		end
	end
end

def mana_leech
	if (Spell[516].known? && (Spell[9516].timeleft < 15) && Spell[516].affordable? && (percentmana < UserVars.osacombat["percentleech"].to_i) && UserVars.osacombat["use_mana_leech"]) && ((!stunned?) or (!webbed?) or (!bound?))
		if GameObj.targets.count > 0	
			get_target
			Spell[516].cast "target"
		end
	end
end

def sigil_of_power
	Spell["Sigil of Power"].cast if Spell["Sigil of Power"].known? && Spell["Sigil of Power"].affordable? && UserVars.osacrew["sigil_of_mana"] && ((!stunned?) or (!webbed?) or (!bound?))
end

def prep_reset
	if checkprep == "None"
		return
	else
		fput "release"
	end
end

def infuse_weapon
	if !UserVars.osacombat["infusespell"].empty?
		if Spell[UserVars.osacombat["infusespell"]].affordable?
			fput "prep #{UserVars.osacombat["infusespell"]}"
			fput "infuse ##{GameObj.right_hand.id}"
			pause 5
		else
			echo "------==== Out Of Mana ==== ------"
		end
	else
		echo "------==== No Insufion Spell Designated ==== ------"
	end
end

def infuse_shield
	check_shield_fire = Lich::Util.quiet_command("look ##{GameObj.left_hand.id}", //, end_pattern = //, include_end = true ,timeout = 1.0, silent = true)
	if check_shield_fire.to_s =~ /Heatless violet flames burn across the (.*)./
		return
	else
		if Spell[1604].affordable?
			multifput "prep 1604", "evoke ##{GameObj.left_hand.id}"
			wait_rt	
		else
			echo "------==== Out Of Mana ==== ------"
		end
	end
end

def mana_share
	$mana_type = Array.new
	$mana_type.clear
	$my_mana_type = Array.new
	$my_mana_type.clear
	if (Skills.smc >= 24)
		$mana_type.push ("Spiritual")
		$my_mana_type.push ("Spiritual")
	end
	if (Skills.mmc >= 24)
		$mana_type.push ("Mental")
		$my_mana_type.push ("Mental")
	end
	if (Skills.emc >= 24)
		$mana_type.push ("Elemental")
		$my_mana_type.push ("Elemental")
	end
	if $mana_type.count > 1
		$new_mana_type = $mana_type.last()
		$mana_type.delete "#{$mana_type.last()}"
		$mana_type.push ("or #{$new_mana_type}")
	end
	if $mana_type.count.to_i == 3
		$mana_message = "I Need #{$mana_type[0]}, #{$mana_type[1]} #{$mana_type[2]} Mana!"
	end
	if $mana_type.count.to_i == 2
		$mana_message = "I Need #{$mana_type[0]} #{$mana_type[1]} Mana!"
	end
	if $mana_type.count.to_i == 1
		$mana_message = "I Need #{$mana_type[0]} Mana!"
	end
end

def can_cast
	get_target
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_type.empty?
		return
	end
	if GameObj.targets.count > @spell_type_if
		if !@spell_type.empty?
			if !Spell[@spell_type].known?
				echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat ==== ------"
				exit
			end
			if !Spell[@spell_type].affordable?
				mana_leech
				symbol_of_mana
				sigil_of_power
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
				wait_until {Spell[@spell_type].affordable?}
			end
			if !@cast_type_warding
				stance_offensive
			end
			get_target
			if !@cast_type_open
					fput "incant #{@spell_type} #{@cast_type} target"
			else
					fput "incant #{@spell_type} #{@cast_type} open"
			end
			stance_guarded
			health_monitor
			wait_castrt
			stance_defensive
		end
	end
end

def can_cast2
	get_target
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_type2.empty?
		return
	end
	if GameObj.targets.count > @spell_type2_if
		if !@spell_type2.empty?
			if !Spell[@spell_type2].known?
				echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat ==== ------"
				exit
			end
			if !Spell[@spell_type2].affordable?
				mana_leech
				symbol_of_mana
				sigil_of_power
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
				wait_until {Spell[@spell_type2].affordable?}
			end
			if !@cast_type2_warding
				stance_offensive
			end
			get_target
			if !@cast_type2_open
					fput "incant #{@spell_type2} #{@cast_type2} target"
			else
					fput "incant #{@spell_type2} #{@cast_type2} open"
			end
			stance_guarded
			health_monitor
			wait_castrt
			stance_defensive
		end
	end
end

def can_cast3
	get_target
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_type3.empty?
		return
	end
	if GameObj.targets.count > @spell_type3_if
		if !@spell_type3.empty?
			if !Spell[@spell_type3].known?
				echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat ==== ------"
				exit
			end
			if !Spell[@spell_type3].affordable?
				mana_leech
				symbol_of_mana
				sigil_of_power
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
				wait_until {Spell[@spell_type3].affordable?}
			end
			if !@cast_type3_warding
				stance_offensive
			end
			get_target
			if !@cast_type3_open
					fput "incant #{@spell_type3} #{@cast_type3} target"
			else
					fput "incant #{@spell_type3} #{@cast_type3} open"
			end
			stance_guarded
			health_monitor
			wait_castrt
			stance_defensive
		end
	end
end

def can_cast4
	get_target
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_type4.empty?
		return
	end
	if GameObj.targets.count > @spell_type4_if
		if !@spell_type4.empty?
			if !Spell[@spell_type4].known?
				echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat ==== ------"
				exit
			end
			if !Spell[@spell_type4].affordable?
				mana_leech
				symbol_of_mana
				sigil_of_power
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
				wait_until {Spell[@spell_type4].affordable?}
			end
			if !@cast_type4_warding
				stance_offensive
			end
			get_target
			if !@cast_type4_open
					fput "incant #{@spell_type4} #{@cast_type4} target"
			else
					fput "incant #{@spell_type4} #{@cast_type4} open"
			end
			stance_guarded
			health_monitor
			wait_castrt
			stance_defensive
		end
	end
end

def can_cast5
	get_target
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_type5.empty?
		return
	end
	if GameObj.targets.count > @spell_type5_if
		if !@spell_type5.empty?
			if !Spell[@spell_type5].known?
				echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat ==== ------"
				exit
			end
			if !Spell[@spell_type5].affordable?
				mana_leech
				symbol_of_mana
				sigil_of_power
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
				wait_until {Spell[@spell_type5].affordable?}
			end
			if !@cast_type5_warding
				stance_offensive
			end
			get_target
			if !@cast_type5_open
					fput "incant #{@spell_type5} #{@cast_type5} target"
			else
					fput "incant #{@spell_type5} #{@cast_type5} open"
			end
			stance_guarded
			health_monitor
			wait_castrt
			stance_defensive
		end
	end
end

def can_cast_opener
	get_target
	wait_castrt
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_open.empty?
		return
	end
	if GameObj.targets.count > @spell_open_count
		if !@spell_open.empty?
			if !Spell[@spell_open].known?
				return
			end
			if GameObj.loot.find { |loot| loot.name =~ /vine|bramble|widgeonweed|vathor club|swallowwort|smilax|creeper|creepers|briar|ivy|tumbleweed/ }
				if @spell_open == "610"
					return
				end
			end
			if GameObj.loot.find { |loot| loot.name =~ / arm|arms|pincer|pincers|tentacle|tentacles/ }
				if @spell_open == "709"
					return
				end
			end
			if GameObj.loot.find { |loot| loot.name =~ /tempest/ }
				if @spell_open == "710"
					return
				end
			end
			if GameObj.loot.find { |loot| loot.name =~ /void/ }
				if @spell_open == "720"
					return
				end
			end	
			if GameObj.loot.find { |loot| loot.name =~ /web/ }
				if @spell_open == "118"
					return
				end
			end
			if (@spell_open == "1117") or (@spell_open == "1614") or (@spell_open == "217") or (@spell_open == "512")
				@room_creatures.clear
				GameObj.targets.each do |i|
					@room_creatures.push (i.id)
				end
				if @room_creatures.all? { |e| @empathic_link.include?(e) }
					return
				else
					@empathic_link.clear
					GameObj.targets.each do |i|
						@empathic_link.push (i.id)
					end
					if Spell[@spell_open].affordable? && (GameObj.targets.count > @spell_open_count.to_i)
						if !@warding_opener
							stance_offensive
						end
						if @open_cast_opener
							fput "incant #{@spell_open} open"
						else
							get_target
							fput "incant #{@spell_open} target"
						end
						stance_guarded
					else
						return
					end
				end
			elsif (@spell_open == "909")
				@not_prone = GameObj.targets.find_all { |i| i.status !~ /dead|gone/ }
				@not_prone.delete_if { |npc| (npc.status =~ /lying/) }
				if @not_prone.count > 0
					if (!Spell[909].active?) and (Spell[909].available?)
						fput "incant 909 channel"
						wait_rt
						pause 0.1
						fput "tap"
					else
						wait_rt
						pause 0.1
						fput "tap"
					end
				end
			else
				if Spell[@spell_open].affordable? && (GameObj.targets.count > @spell_open_count.to_i)
					if !@warding_opener
						stance_offensive
					end
					if @open_cast_opener
						fput "incant #{@spell_open} open"
					else
						get_target
						fput "incant #{@spell_open} target"
					end
					stance_guarded
				else
					return
				end
			end
		end
	end
end

def can_cast_opener2
	get_target
	wait_castrt
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?)) or @spell_open2.empty?
		return
	end
	if GameObj.targets.count > @spell_open_count2
		if !@spell_open2.empty?
			if !Spell[@spell_open2].known?
				return
			end
			if GameObj.loot.find { |loot| loot.name =~ /vine|bramble|widgeonweed|vathor club|swallowwort|smilax|creeper|creepers|briar|ivy|tumbleweed/ }
				if @spell_open2 == "610"
					return
				end
			end
			if GameObj.loot.find { |loot| loot.name =~ / arm|arms|pincer|pincers|tentacle|tentacles/ }
				if @spell_open2 == "709"
					return
				end
			end
			if GameObj.loot.find { |loot| loot.name =~ /tempest/ }
				if @spell_open2 == "710"
					return
				end
			end
			if GameObj.loot.find { |loot| loot.name =~ /void/ }
				if @spell_open2 == "720"
					return
				end
			end	
			if GameObj.loot.find { |loot| loot.name =~ /web/ }
				if @spell_open2 == "118"
					return
				end
			end
			if (@spell_open2 == "1117") or (@spell_open2 == "1614") or (@spell_open2 == "217") or (@spell_open2 == "512")
				@room_creatures2.clear
				GameObj.targets.each do |i|
					@room_creatures2.push (i.id)
				end
				if @room_creatures2.all? { |e| @empathic_link2.include?(e) }
					return
				else
					@empathic_link2.clear
					GameObj.targets.each do |i|
						@empathic_link2.push (i.id)
					end
					if Spell[@spell_open2].affordable? && (GameObj.targets.count > @spell_open_count2.to_i)
						if !@warding_opener2
							stance_offensive
						end
						if @open_cast_opener2
							fput "incant #{@spell_open2} open"
						else
							get_target
							fput "incant #{@spell_open2} target"
						end
						stance_guarded
					else
						return
					end
				end
			elsif (@spell_open2 == "909")
				@not_prone = GameObj.targets.find_all { |i| i.status !~ /dead|gone/ }
				@not_prone.delete_if { |npc| (npc.status =~ /lying/) }
				if @not_prone.count > 0
					if (!Spell[909].active?) and (Spell[909].available?)
						fput "incant 909 channel"
						wait_rt
						pause 0.1
						fput "tap"
					else
						wait_rt
						pause 0.1
						fput "tap"
					end
				end
			else
				if Spell[@spell_open2].affordable? && (GameObj.targets.count > @spell_open_count2.to_i)
					if !@warding_opener2
						stance_offensive
					end
					if @open_cast_opener2
						fput "incant #{@spell_open2} open"
					else
						get_target
						fput "incant #{@spell_open2} target"
					end
					stance_guarded
				else
					return
				end
			end
		end
	end
end


############# Attack Openers
def return_from_berserk
	ship_type
	start_script("go2", [@berserk_return]) if !Room.current.id != @berserk_return
	wait_while { running?("go2") }
	if checkname == UserVars.osacrew["commander"]
		GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	else
		fput "join #{UserVars.osacrew["commander"]}"
	end
end

def berserk
	if CMan.available?("Berserk")
		@berserk_return = Room.current.id
		stance_offensive
		fput "berserk"
		waitfor /The redness fades from the world and you begin to breathe harder/
		looter
		stance_defensive
		return_from_berserk
	end
end

def bertrandts_bellow_single
	if Warcry.available?("Bellow")
		stance_offensive
		Warcry.use("Bellow", "")
		stance_defensive
	end
end

def bertrandts_bellow_open
	if Warcry.available?("Bellow")
		stance_offensive
		Warcry.use("Bellow", "All")
		stance_defensive
	end
end

def carns_cry_single
	if Warcry.available?("Cry")
		stance_offensive
		Warcry.use("Cry", "")
		stance_defensive
	end
end

def carns_cry_open
	if Warcry.available?("Cry")
		stance_offensive
		Warcry.use("Cry", "All")
		stance_defensive
	end
end

def charge
	if Weapon.available?("Charge")
		stance_offensive
		fput "weapon charge"
		stance_defensive
	end
end
		
def cripples
	if Weapon.available?("Cripple")
		stance_offensive
		fput "weapon cripple"
		stance_defensive
	end
end

def crowd_press
	if CMan.available?("Crowd Press")
		stance_offensive
		fput "cman cpress"
		stance_defensive
	end
end

def cutthroat
	hide_time
	if CMan.available?("Cutthroat")
		stance_offensive
		fput "cman cutthroat"
		stance_defensive
	end
end

def dirt_kick
	if CMan.available?("Dirt Kick")
		stance_offensive
		fput "cman dirtkick"
		stance_defensive
	end
end

def disarm_manuever
	if CMan.available?("Disarm")
		stance_offensive
		fput "cman disarm"
		stance_defensive
	end
end

def dislodge
	if CMan.available?("Dislogde")
		stance_offensive
		fput "cman dislodge"
		stance_defensive
	end
end

def dizzying_swing
	if Weapon.available?("Dizzying Swing")
		stance_offensive
		fput "weapon dizzyingswing"
		stance_defensive
	end
end

def eviscerate
	hide_time
	if CMan.available?("Eviscerate")
		stance_offensive
		fput "cman eviscerate"
		stance_defensive
	end
end

def eyepoke
	if CMan.available?("Eyepoke")
		stance_offensive
		fput "cman eyepoke"
		stance_defensive
	end
end

def feint_manuever
	if CMan.available?("Feint")
		stance_offensive
		fput "cman feint"
		stance_defensive
	end
end

def footstomp
	if CMan.available?("Footstomp")
		stance_offensive
		fput "cman footstomp"
		stance_defensive
	end
end

def gerrelles_growl_single
	if Warcry.available?("Growl")
		stance_offensive
		Warcry.use("Growl", "")
		stance_defensive
	end
end

def gerrelles_growl_open
	if Warcry.available?("Growl")
		stance_offensive
		Warcry.use("Growl", "All")
		stance_defensive
	end
end

def groin_kick
	if CMan.available?("Groin Kick")
		stance_offensive
		fput "cman gkick"
		stance_defensive
	end
end

def hamstring
	if CMan.available?("Hamstring")
		stance_offensive
		fput "cman hamstring"
		stance_defensive
	end
end

def haymaker
	if CMan.available?("Haymaker")
		stance_offensive
		fput "cman haymaker"
		stance_defensive
	end
end

def headbutt
	if CMan.available?("Headbutt")
		stance_offensive
		fput "cman headbutt"
		stance_defensive
	end
end

def kneebash
	if CMan.available?("Kneebash")
		stance_offensive
		fput "cman kneebash"
		stance_defensive
	end
end

def mighty_blow
	if CMan.available?("Mighty Blow")
		stance_offensive
		fput "cman mblow"
		stance_defensive
	end
end

def mug
	if CMan.available?("Mug")
		stance_offensive
		fput "cman mug"
		stance_defensive
	end
end

def nosetweak
	if CMan.available?("Nosetweak")
		stance_offensive
		fput "cman nosetweak"
		stance_defensive
	end
end

def shield_bash
	if Shield.available?("Shield Bash")
		stance_offensive
		fput "shield bash"
		stance_defensive
	end
end

def shield_charge
	if Shield.available?("Shield Charge")
		stance_offensive
		fput "shield charge"
		stance_defensive
	end
end

def shield_push
	if Shield.available?("Shield Push")
		stance_offensive
		fput "shield push"
		stance_defensive
	end
end

def shield_trample
	if Shield.available?("Shield Trample") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "shield trample"
		stance_defensive
	end
end

def spell_cleave
	if CMan.available?("Spell Cleave") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman scleave"
		stance_defensive
	end
end

def subdue
	hide_time
	if CMan.available?("Subdue") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman subdue"
		stance_defensive
	end
end

def sunder_shield
	if CMan.available?("Sunder Shield") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman sunder"
		stance_defensive
	end
end

def sweep
	if CMan.available?("Sweep") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman sweep"
		stance_defensive
	end
end

def swiftkick
	if CMan.available?("Swiftkick") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman swiftkick"
		stance_defensive
	end
end

def tackle_manuever
	if CMan.available?("Tackle") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman tackle"
		stance_defensive
	end
end

def templeshot
	if CMan.available?("Templeshot") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman templeshot"
		stance_defensive
	end
end

def throatchop
	if CMan.available?("Throatchop") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman throatchop"
		stance_defensive
	end
end

def trip
	if CMan.available?("Trip") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman trip"
		stance_defensive
	end
end

def twin_hammerfists
	if Weapon.available?("Twin Hammerfists") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "weapon twinhammer"
		stance_defensive
	end
end

def vault_kick
	if CMan.available?("Vault Kick") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman vaultkick"
		stance_defensive
	end
end

def voln_sleep
	wait_rt
	fput "Symbol of Sleep"
	wait_rt
end

def att_openers2
	if ((GameObj.targets.count > @osaattackopen2_if) && ((!stunned?) or (!webbed?) or (!bound?)))
		get_target
		if @osaattackopen2 == 0
			return
		elsif @osaattackopen2 == 1
			berserk
		elsif @osaattackopen2 ==  2
			bertrandts_bellow_single
		elsif @osaattackopen2 ==  3
			bertrandts_bellow_open
		elsif @osaattackopen2 ==  4
			bull_rush
		elsif @osaattackopen2 ==  5
			carns_cry_single
		elsif @osaattackopen2 ==  6
			carns_cry_open
		elsif @osaattackopen2 ==  7
			charge
		elsif @osaattackopen2 == 8
			cripples
		elsif @osaattackopen2 == 9
			crowd_press
		elsif @osaattackopen2 ==  10
			cutthroat
		elsif @osaattackopen2 == 11
			dirt_kick
		elsif @osaattackopen2 == 12
			disarm_manuever
		elsif @osaattackopen2 == 13
			dislodge
		elsif @osaattackopen2 == 14
			dizzying_swing
		elsif @osaattackopen2 ==  15
			eviscerate
		elsif @osaattackopen2 ==  16
			excoriate
		elsif @osaattackopen2 ==  17
			eyepoke
		elsif @osaattackopen2 == 18
			feint_manuever
		elsif @osaattackopen2 ==  19
			footstomp
		elsif @osaattackopen2 ==  20
			gerrelles_growl_single
		elsif @osaattackopen2 ==  21
			gerrelles_growl_open
		elsif @osaattackopen2 == 22
			groin_kick
		elsif @osaattackopen2 == 23
			hamstring
		elsif @osaattackopen2 == 24
			haymaker
		elsif @osaattackopen2 == 25
			headbutt
		elsif @osaattackopen2 ==  26
			kneebash
		elsif @osaattackopen2 ==  27
			mighty_blow
		elsif @osaattackopen2 ==  28
			mug
		elsif @osaattackopen2 ==  29
			nosetweak
		elsif @osaattackopen2 == 30
			shield_bash
		elsif @osaattackopen2 == 31
			shield_charge
		elsif @osaattackopen2 == 32
			shield_push
		elsif @osaattackopen2 ==  33
			shield_throw
		elsif @osaattackopen2 == 34
			shield_trample
		elsif @osaattackopen2 == 35
			spell_cleave
		elsif @osaattackopen2 ==  36
			subdue
		elsif @osaattackopen2 == 37
			sunder_shield
		elsif @osaattackopen2 ==  38
			sweep
		elsif @osaattackopen2 ==  39
			swiftkick
		elsif @osaattackopen2 == 40
			tackle_manuever
		elsif @osaattackopen2 ==  41
			templeshot
		elsif @osaattackopen2 ==  42
			throatchop
		elsif @osaattackopen2 == 43
			trip
		elsif @osaattackopen2 == 44
			twin_hammerfists
		elsif @osaattackopen2 == 45
			vault_kick
		elsif @osaattackopen2 == 46
			voln_sleep
		end
	end
end
	
def att_openers
	if ((GameObj.targets.count > @osaattackopen_if) && ((!stunned?) or (!webbed?) or (!bound?)))
		get_target
		if @osaattackopen == 0
			return
		elsif @osaattackopen == 1
			berserk
		elsif @osaattackopen ==  2
			bertrandts_bellow_single
		elsif @osaattackopen ==  3
			bertrandts_bellow_open
		elsif @osaattackopen ==  4
			bull_rush
		elsif @osaattackopen ==  5
			carns_cry_single
		elsif @osaattackopen ==  6
			carns_cry_open
		elsif @osaattackopen ==  7
			charge
		elsif @osaattackopen == 8
			cripples
		elsif @osaattackopen == 9
			crowd_press
		elsif @osaattackopen ==  10
			cutthroat
		elsif @osaattackopen == 11
			dirt_kick
		elsif @osaattackopen == 12
			disarm_manuever
		elsif @osaattackopen == 13
			dislodge
		elsif @osaattackopen == 14
			dizzying_swing
		elsif @osaattackopen ==  15
			eviscerate
		elsif @osaattackopen ==  16
			excoriate
		elsif @osaattackopen ==  17
			eyepoke
		elsif @osaattackopen == 18
			feint_manuever
		elsif @osaattackopen ==  19
			footstomp
		elsif @osaattackopen ==  20
			gerrelles_growl_single
		elsif @osaattackopen ==  21
			gerrelles_growl_open
		elsif @osaattackopen == 22
			groin_kick
		elsif @osaattackopen == 23
			hamstring
		elsif @osaattackopen == 24
			haymaker
		elsif @osaattackopen == 25
			headbutt
		elsif @osaattackopen ==  26
			kneebash
		elsif @osaattackopen ==  27
			mighty_blow
		elsif @osaattackopen ==  28
			mug
		elsif @osaattackopen ==  29
			nosetweak
		elsif @osaattackopen == 30
			shield_bash
		elsif @osaattackopen == 31
			shield_charge
		elsif @osaattackopen == 32
			shield_push
		elsif @osaattackopen ==  33
			shield_throw
		elsif @osaattackopen == 34
			shield_trample
		elsif @osaattackopen == 35
			spell_cleave
		elsif @osaattackopen ==  36
			subdue
		elsif @osaattackopen == 37
			sunder_shield
		elsif @osaattackopen ==  38
			sweep
		elsif @osaattackopen ==  39
			swiftkick
		elsif @osaattackopen == 40
			tackle_manuever
		elsif @osaattackopen ==  41
			templeshot
		elsif @osaattackopen ==  42
			throatchop
		elsif @osaattackopen == 43
			trip
		elsif @osaattackopen == 44
			twin_hammerfists
		elsif @osaattackopen == 45
			vault_kick
		elsif @osaattackopen == 46
			voln_sleep
		end
	end
end

################### Special Attacks

def bearhug
	if Effects::Cooldowns.active? "Bearhug"
		return
	end
	if CMan.available?("Bearhug") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman bearhug target"
		wait_until { !Effects::Buffs.active? "Concentrating" }
		stance_defensive
	end
end

def chastise
	if checkname == "Peggyanne"
		if (!Effects::Cooldowns.active? "Blood Boil")
			fput "gemstone activate bloodboil"
			wait_castrt
		end
	end
	if ((checkstamina >= 10) && (!Effects::Cooldowns.active? "Chastise")) && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		if checkname == "Peggyanne"
			flavor_messaging
		end
		fput "feat chastise"
		stance_defensive
	end
end

def excoriate
	if ((checkmana >= 10) && (!Effects::Cooldowns.active? "Excoriate")) && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		if checkname == "Peggyanne"
			flavor_messaging
		end
		fput "feat excoriate"
		stance_defensive
	end
end

def exsanguinate
	if CMan.available?("Exsanguinate") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman exsanguinate"
		stance_defensive
	end
end

def leap_attack
	if CMan.available?("Leap Attack") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman leapattack"
		stance_defensive
	end
end

def shield_strike
	if Shield.available?("Shield Strike") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "shield strike"
		stance_defensive
	end
end

def spin_attack
	if CMan.available?("Spin Attack") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman sattack"
		stance_defensive
	end
end

def staggering_blow
	if CMan.available?("Staggering Blow") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman sblow"
		stance_defensive
	end
end
	
def true_strike
	if CMan.available?("True Strike") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		fput "cman truestrike"
		stance_defensive
	end
end
	
def special_att
	if ((GameObj.targets.count > @osaspecial_if) && ((!stunned?) or (!webbed?) or (!bound?)))
		get_target
		if @osaspecial == 0
			return
		elsif @osaspecial == 1
			bearhug
		elsif @osaspecial == 2
			chastise
		elsif @osaspecial == 3
			excoriate
		elsif @osaspecial == 4
			exsanguinate
		elsif @osaspecial == 5
			leap_attack
		elsif @osaspecial == 6
			shield_strike
		elsif @osaspecial == 7
			spin_attack
		elsif @osaspecial == 8
			staggering_blow
		elsif @osaspecial == 9
			true_strike
		end
	end
end

def secondspecial_att
	if ((GameObj.targets.count > @secondosaspecial_if) && ((!stunned?) or (!webbed?) or (!bound?)))
		get_target
		if @secondosaspecial == 0
			return
		elsif @secondosaspecial == 1
			bearhug
		elsif @secondosaspecial == 2
			chastise
		elsif @secondosaspecial == 3
			excoriate
		elsif @secondosaspecial == 4
			exsanguinate
		elsif @secondosaspecial == 5
			leap_attack
		elsif @secondosaspecial == 6
			shield_strike
		elsif @secondosaspecial == 7
			spin_attack
		elsif @secondosaspecial == 8
			staggering_blow
		elsif @secondosaspecial == 9
			true_strike
		end
	end
end

################### Assault Attacks
def barrage
	if Weapon.available?("Barrage") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		assault = dothistimeout "weapon barrage", 15, /Barrage what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
		if assault.to_s =~ /Barrage what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
			wait_rt
			stance_defensive
		else
			wait_rt
			stance_defensive
		end
	end
end

def flurry
	if Weapon.available?("Flurry") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		assault = dothistimeout "weapon flurry", 15, /Flurry what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
		if assault.to_s =~ /Flurry what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
			wait_rt
			stance_defensive
		else
			wait_rt
			stance_defensive
		end
	end
end

def fury
	if Weapon.available?("Fury") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		assault = dothistimeout "weapon fury", 15, /Fury what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
		if assault.to_s =~ /Fury what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
			wait_rt
			stance_defensive
		else
			wait_rt
			stance_defensive
		end
	end
end

def gthrusts
	if checkname == "Peggyanne"	
		if (!Effects::Cooldowns.active? "Blood Boil")
			fput "gemstone activate bloodboil"
			wait_castrt
		end
	end
	if Weapon.available?("Guardant Thrusts") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		if checkname == "Peggyanne"
			flavor_messaging
		end
		assault = dothistimeout "weapon gthrusts", 15, /Guardant Thrusts what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
		if assault.to_s =~ /Guardant Thrusts what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
			wait_rt
			stance_defensive
		else
			wait_rt
			stance_defensive
		end
	end
end

def pummel
	if Weapon.available?("Pummel") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		assault = dothistimeout "weapon pummel", 15, /Pummel what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
		if assault.to_s =~ /Pummel what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
			wait_rt
			stance_defensive
		else
			wait_rt
			stance_defensive
		end
	end
end

def thrash
	if Weapon.available?("Thrash") && (!GameObj.target.nil?) && (GameObj.target.status != "dead")
		stance_offensive
		assault = dothistimeout "weapon thrash", 15, /Thrash what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
		if assault.to_s =~ /Thrash what?|Distracted, you hesitate|glides to its inevitable end with one final twirl|You feel a fair amount more durable|With a final snap of your wrist|You complete your assault|to the ready, your assault complete|Upon firing your last (?:arrow|bolt)|With a final, explosive breath|recentering yourself for the fight|You don't seem to be able to move your legs to do that|too injured|already dead|little bit late|could not find/i
			wait_rt
			stance_defensive
		else
			wait_rt
			stance_defensive
		end
	end
end

def assault_att
	if ((GameObj.targets.count < @osaassault_if) && (!GameObj.target.nil?)) && ((!stunned?) or (!webbed?) or (!bound?))
		get_target
		if @osaassault == 0
			return
		elsif @osaassault == 1
			barrage
		elsif @osaassault == 2
			flurry
		elsif @osaassault == 3
			fury
		elsif @osaassault == 4
			gthrusts
		elsif @osaassault == 5
			pummel
		elsif @osaassault == 6
			thrash
		end
	end
end

################### AOE Attacks	
def bull_rush
	if CMan.available?("Bull Rush")
		stance_offensive
		fput "cman bullrush"
		stance_defensive
	end
end

def clash
	if Weapon.available?("Clash")
		stance_offensive
		fput "weapon clash"
		stance_defensive
	end
end

def cyclone
	if checkname == "Peggyanne"	
		if (!Effects::Cooldowns.active? "Blood Boil")
			fput "gemstone activate bloodboil"
			wait_castrt
		end
	end
	if Weapon.available?("Cyclone")
		stance_offensive
		fput "weapon cyclone"
		stance_defensive
	end
end

def pin_down
	if Weapon.available?("Pin Down")
		stance_offensive
		fput "weapon pindown"
		stance_defensive
	end
end

def pulverize
	if Weapon.available?("Pulverize")
		stance_offensive
		fput "weapon pulverize"
		stance_defensive
	end
end

def shield_throw
	if checkname == "Peggyanne"	
		if (!Effects::Cooldowns.active? "Blood Boil")
			fput "gemstone activate bloodboil"
			wait_castrt
		end
	end
	if Shield.available?("Shield Throw")
		stance_offensive
		fput "shield throw"
		stance_defensive
	end
end

def whirling_blade
	if Weapon.available?("Whirling Blade")
		stance_offensive
		fput "weapon wblade"
		stance_defensive
	end
end

def whirlwind
	if Weapon.available?("Whirlwind") && ((!stunned?) or (!webbed?) or (!bound?))
		stance_offensive
		fput "weapon whirlwind"
		stance_defensive
	end
end

def volley
	if Weapon.available?("Volley")
		stance_offensive
		fput "weapon volley"
		stance_defensive
	end
end

def aoe_att
	if ((GameObj.targets.count > @osaaoe_if.to_i) && ((!stunned?) or (!webbed?) or (!bound?)))	
		if @osaaoe == 0
			return
		elsif @osaaoe == 1
			bull_rush
		elsif @osaaoe == 2
			clash
		elsif @osaaoe == 3
			cyclone
		elsif @osaaoe == 4
			pin_down
		elsif @osaaoe == 5
			pulverize
		elsif @osaaoe == 6
			shield_throw
		elsif @osaaoe == 7
			shield_trample
		elsif @osaaoe == 8
			whirling_blade
		elsif @osaaoe == 9
			whirlwind
		elsif @osaaoe == 10
			volley
		end
	end
end

################# Mstrike Routine	
def mstrike_routine
	if Skills.multiopponentcombat >= 5 && UserVars.osacombat["use_mstrike"]
		get_target
		if Effects::Cooldowns.active? "Multi-Strike" or ((stunned?) or (webbed?) or (bound?))
			return
		else
			if GameObj.targets.count >= 2 && $osacombat_my_mstrike_focus == 0 && $osacombat_my_mstrike_open >= 1 && UserVars.osacombat["use_mstrike"]
				if percentstamina >= 50
					stance_offensive
					fput "mstrike" 
					stance_defensive
				end
			elsif GameObj.targets.count == 1 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1 && UserVars.osacombat["use_mstrike"]
				if percentstamina >= 50
					stance_offensive
					fput "mstrike target" 
					stance_defensive
				end
			elsif GameObj.targets.count >= 2 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1 && UserVars.osacombat["use_mstrike"]
				if percentstamina >= 50
					stance_offensive
					fput "mstrike" 
					stance_defensive
				end
			end
		end
	else
		return
	end
	wait_rt
end

################# Combat Styles	

def combat	
	prep_reset
	reactive
	can_cast_opener
	reactive
	can_cast_opener2
	reactive
	health_monitor
	wait_rt
	reactive
	att_openers
	health_monitor
	wait_rt
	reactive
	att_openers2
	health_monitor
	wait_rt
	reactive
	aoe_att
	health_monitor
	wait_rt
	reactive
	if @use_kneel
		kneel_check
	end
	assault_att
	health_monitor
	wait_rt
	reactive
	mstrike_routine
	health_monitor
	wait_rt
	reactive
	special_att
	reactive
	secondspecial_att
	health_monitor
	wait_rt
	reactive
	if @use_kneel
		kneel_check
	end
	if UserVars.osacombat["use_stealth"]
		hide_time
	end
	if UserVars.osacombat["noattack"]
		if UserVars.osacombat["osaarcher"]
			chicken_fire
		end
		if UserVars.osacombat["nouacweapons"]
			uac_round
		end
		if (!UserVars.osacombat["nouacweapons"]) && (!UserVars.osacombat["osaarcher"])
			chicken_attack
		end
	end
	health_monitor
	wait_rt
	prep_reset
	reactive
	can_cast
	health_monitor
	reactive
	can_cast2
	health_monitor
	reactive
	can_cast3
	health_monitor
	reactive
	can_cast4
	health_monitor
	reactive
	can_cast5
	health_monitor
	reactive
	looter		
end

############Combat Checking Start

def groupeffects
		check_dead
		society_script if !$society_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		society_script if $society_first_cast
		mana_focus if UserVars.osacombat["groupmana"] && $mana_focus_first_cast == false && (Room.current.title.to_s.downcase.include? "enemy")
		mana_focus if UserVars.osacombat["groupmana"] && $mana_focus_first_cast
		bravery if UserVars.osacombat["groupbravery"] && !$group_bravery_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		bravery if UserVars.osacombat["groupbravery"] && $group_bravery_first_cast
		wallofforce if UserVars.osacombat["wallofforce"] && !$wallofforce_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		wallofforce if UserVars.osacombat["wallofforce"] && $wallofforce_first_cast
		faithshield if UserVars.osacombat["faithshield"] && !$faith_shield_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		faithshield if UserVars.osacombat["faithshield"] && $faith_shield_first_cast
		heroism if UserVars.osacombat["groupheroism"] && !$group_heroism_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		heroism if UserVars.osacombat["groupheroism"] && $group_heroism_first_cast
		barkskin if UserVars.osacombat["groupbarkskin"] && !$group_barkskin_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		barkskin if UserVars.osacombat["groupbarkskin"] && $group_barkskin_first_cast
		beaconofcourage if UserVars.osacombat["beaconofcourage"] && !$beacon_of_courage_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		beaconofcourage if UserVars.osacombat["beaconofcourage"] && $beacon_of_courage_first_cast
		songoftonis if UserVars.osacombat["songoftonis"] && !$song_of_tonis_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		songoftonis if UserVars.osacombat["songoftonis"] && $song_of_tonis_first_cast
		warcryshout if UserVars.osacombat["warcryshout"] && !$warcry_shout_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		warcryshout if UserVars.osacombat["warcryshout"] && $warcry_shout_first_cast
		warcryholler if UserVars.osacombat["warcryholler"] && !$warcry_holler_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		warcryholler if UserVars.osacombat["warcryholler"] && $warcry_holler_first_cast
		surgeofstrength_cooldown if UserVars.osacombat["surgeofstrength_cooldown"] && !$surgeofstrength_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		surgeofstrength_cooldown if UserVars.osacombat["surgeofstrength_cooldown"] && $surgeofstrength_first_cast
		surgeofstrength_nocooldown if UserVars.osacombat["surgeofstrength_nocooldown"] && !$surgeofstrength_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		surgeofstrength_nocooldown if UserVars.osacombat["surgeofstrength_nocooldown"] && $surgeofstrength_first_cast
end

def time_diff_seconds(start,finish)
	(finish - start)
end

def combat_spellup
	health_monitor
	if (Effects::Debuffs.active? "Mystic Impedance") or (Effects::Debuffs.active? "Silenced") or ((stunned?) or (webbed?) or (bound?))
		return
	end
    if running? "ecure"
		wait_until { !running?('ecure') }
	end
	if !checkprep.include? "None"
		fput "release"
	end
	if checkmana < 50
		mana_share
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, $mana_message)
		pause 1
	end
	wait_rt
    result = dothistimeout "incant #{@combat_spell}", 30, /Wait|...wait|Spell Hindrance|(Cast|Sing) Roundtime (.*) Seconds./
        if result.to_s =~ /Wait|...wait/
            combat_spellup
        elsif result.to_s =~ /Spell Hindrance/
            wait_castrt
            combat_spellup
        elsif result.to_s =~ /(Cast|Sing) Roundtime (.*) Seconds./
            return
        else
            combat_spellup
        end
end

def society_script
	health_monitor
	Spell["Sign of Warding"].cast if Spell["Sign of Warding"].known? && Spell["Sign of Warding"].affordable? && !Spell["Sign of Warding"].active? && UserVars.osacombat["sign_of_warding"]
	Spell["Sign of Defending"].cast if Spell["Sign of Defending"].known? && Spell["Sign of Defending"].affordable? && !Spell["Sign of Defending"].active? && UserVars.osacombat["sign_of_defending"]
	Spell["Sign of Shields"].cast if Spell["Sign of Shields"].known? && Spell["Sign of Shields"].affordable? && !Spell["Sign of Shields"].active? && UserVars.osacombat["sign_of_shields"]
	Spell["Sign of Striking"].cast if Spell["Sign of Striking"].known? && Spell["Sign of Striking"].affordable? && !Spell["Sign of Striking"].active? && UserVars.osacombat["sign_of_striking"]
	Spell["Sign of Smiting"].cast if Spell["Sign of Smiting"].known? && Spell["Sign of Smiting"].affordable? && !Spell["Sign of Smiting"].active? && UserVars.osacombat["sign_of_smiting"]
	Spell["Sign of Swords"].cast if Spell["Sign of Swords"].known? && Spell["Sign of Swords"].affordable? && !Spell["Sign of Swords"].active? && UserVars.osacombat["sign_of_swords"]
	Spell["Sigil of Minor Bane"].cast if Spell["Sigil of Minor Bane"].known? && Spell["Sigil of Minor Bane"].affordable? && !Spell["Sigil of Minor Bane"].active? && UserVars.osacombat["sigil_of_minor_bane"]
	Spell["Sigil of Offense"].cast if Spell["Sigil of Offense"].known? && Spell["Sigil of Offense"].affordable? && !Spell["Sigil of Offense"].active? && UserVars.osacombat["sigil_of_offense"]
	Spell["Sigil of Major Bane"].cast if Spell["Sigil of Major Bane"].known? && Spell["Sigil of Major Bane"].affordable? && !Spell["Sigil of Major Bane"].active? && UserVars.osacombat["sigil_of_major_bane"]
	Spell["Sigil of Minor Protection"].cast if Spell["Sigil of Minor Protection"].known? && Spell["Sigil of Minor Protection"].affordable? && !Spell["Sigil of Minor Protection"].active? && UserVars.osacombat["sigil_of_minor_protection"]
	Spell["Sigil of Defense"].cast if Spell["Sigil of Defense"].known? && Spell["Sigil of Defense"].affordable? && !Spell["Sigil of Defense"].active? && UserVars.osacombat["sigil_of_defense"]
	Spell["Sigil of Major Protection"].cast if Spell["Sigil of Major Protection"].known? && Spell["Sigil of Major Protection"].affordable? && !Spell["Sigil of Major Protection"].active? && UserVars.osacombat["sigil_of_major_protection"]
	Spell["Sigil of Concentration"].cast if Spell["Sigil of Concentration"].known? && Spell["Sigil of Concentration"].affordable? && !Spell["Sigil of Concentration"].active? && UserVars.osacombat["sigil_of_concentration"]
	Spell["Symbol of Courage"].cast if Spell["Symbol of Courage"].known? && Spell["Symbol of Courage"].affordable? && !Spell["Symbol of Courage"].active? && UserVars.osacombat["symbol_of_courage"]
	Spell["Symbol of Protection"].cast if Spell["Symbol of Protection"].known? && Spell["Symbol of Protection"].affordable? && !Spell["Symbol of Protection"].active? && UserVars.osacombat["symbol_of_protection"]
	Spell["Symbol of Retribution"].cast if Spell["Symbol of Retribution"].known? && Spell["Symbol of Retribution"].affordable? && !Spell["Symbol of Retribution"].active? && UserVars.osacombat["symbol_of_retribution"] && UserVars.osacombat["creature_type"] == "undead"
	Spell["Symbol of Supremacy"].cast if Spell["Symbol of Supremacy"].known? && Spell["Symbol of Supremacy"].affordable? && !Spell["Symbol of Supremacy"].active? && UserVars.osacombat["symbol_of_supremacy"] && UserVars.osacombat["creature_type"] == "undead"
	Spell[1607].cast if Spell[1607].available? && (!Effects::Buffs.active? "Rejuvenation") && percentstamina <= 50
end

def mana_focus
	if (!Spell[1018].active? && Spell[418].known?)
		@combat_spell = "418"
		combat_spellup
		$mana_focus_first_cast = nil
	end
end

def bravery
	if UserVars.osacombat["groupbravery"] && ( $osacombat_group_bravery_start == nil || time_diff_seconds($osacombat_group_bravery_start,Time.now) > 180) && (!UserVars.osacrew["everyone_in_my_group"].empty?)
		wait_castrt
		@combat_spell = "211"
		combat_spellup	if Spell[211].affordable?
		$group_bravery_first_cast = true
		$osacombat_group_bravery_start = Time.now
		waitcastrt
	end
end

def barkskin
	if UserVars.osacombat["groupbarkskin"] && ( $osacombat_group_barkskin_start == nil || time_diff_seconds($osacombat_group_barkskin_start,Time.now) > 60)
		if (!UserVars.osacrew["everyone_in_my_group"].empty? && (Effects::Cooldowns.active? "Barkskin")) or (!UserVars.osacrew["everyone_in_my_group"].empty? && (!Effects::Cooldowns.active? "Barkskin")) or (UserVars.osacrew["everyone_in_my_group"].empty? && (!Effects::Cooldowns.active? "Barkskin"))
			wait_castrt
			@combat_spell = "605"
			combat_spellup if Spell[605].affordable?
			$group_barkskin_first_cast = true
			$osacombat_group_barkskin_start = Time.now
			waitcastrt
		end
	end
end

def heroism
	if UserVars.osacombat["groupheroism"] && ( $osacombat_group_heroism_start == nil || time_diff_seconds($osacombat_group_heroism_start,Time.now) > 180) && (!UserVars.osacrew["everyone_in_my_group"].empty?)
		wait_castrt
		@combat_spell = "215"
		combat_spellup if Spell[215].affordable?
		$group_heroism_first_cast = true
		$osacombat_group_heroism_start = Time.now
		waitcastrt
	end
end
	
def faithshield
	if UserVars.osacombat["faithshield"] && ( $osacombat_faithshield_start == nil || time_diff_seconds($osacombat_faithshield_start,Time.now) > 210)
		wait_castrt
		@combat_spell = "1619"
		combat_spellup if Spell[1619].affordable?
		$faith_shield_first_cast = true
		$osacombat_faithshield_start = Time.now
	end
end

def surgeofstrength_nocooldown
	health_monitor
    if (UserVars.osacombat["surgeofstrength_nocooldown"] && (!Effects::Buffs.active?("Strength Enh. (+16)") and !Effects::Buffs.active?("Strength Enh. (+20)") and !Effects::Buffs.active?("Strength Enh. (+24)") and !Effects::Buffs.active?("Strength Enh. (+28)") and !Effects::Buffs.active?("Strength Enh. (+32)"))) && ( $osacombat_surgeofstrength_start == nil || time_diff_seconds($osacombat_surgeofstrength_start,Time.now) > 90)
		if (checkstamina >= 60) && (CMan.known? "Surge of Strength") && (Effects::Cooldowns.active? "Surge of Strength")
			wait_rt
			fput "cman surge"
			$surgeofstrength_first_cast = true
			$osacombat_surgeofstrength_start = Time.now
		else 
			if (CMan.affordable? "Surge of Strength") && (CMan.known? "Surge of Strength") && (!Effects::Cooldowns.active? "Surge of Strength")
						wait_rt
				fput "cman surge"
				$surgeofstrength_first_cast = true
				$osacombat_surgeofstrength_start = Time.now
			end
		end
    end
end

def surgeofstrength_cooldown
	health_monitor
    if (UserVars.osacombat["surgeofstrength_cooldown"] && (!Effects::Buffs.active?("Strength Enh. (+16)") and !Effects::Buffs.active?("Strength Enh. (+20)") and !Effects::Buffs.active?("Strength Enh. (+24)") and !Effects::Buffs.active?("Strength Enh. (+28)") and !Effects::Buffs.active?("Strength Enh. (+32)"))) && ( $osacombat_surgeofstrength_start == nil || time_diff_seconds($osacombat_surgeofstrength_start,Time.now) > 90)
		if (CMan.affordable? "Surge of Strength") && (CMan.known? "Surge of Strength") && (!Effects::Cooldowns.active? "Surge of Strength")
			wait_rt
			fput "cman surge"
			$surgeofstrength_first_cast = true
			$osacombat_surgeofstrength_start = Time.now
		end
    end
end

def wallofforce
	if UserVars.osacombat["wallofforce"] && ( $osacombat_wallofforce_start == nil || time_diff_seconds($osacombat_wallofforce_start,Time.now) > 270)
		wait_castrt
		@combat_spell = "140"
		combat_spellup if Spell[140].affordable?
		$wallofforce_first_cast = true
		$osacombat_wallofforce_start = Time.now
	end
end

def beaconofcourage
	if (UserVars.osacombat["beaconofcourage"] && !Spell[1699].active?) && (!UserVars.osacrew["everyone_in_my_group"].empty?)
		wait_castrt
		@combat_spell = "1608"
		combat_spellup if Spell[1608].affordable?
		$beacon_of_courage_first_cast = true
		waitcastrt
	end
end

def songoftonis
	if (UserVars.osacombat["songoftonis"] && !Spell[1035].active? ) && (!UserVars.osacrew["everyone_in_my_group"].empty?)
			wait_castrt
			@combat_spell = "1035"
			combat_spellup if Spell[1035].affordable?
			$song_of_tonis_first_cast = true
			waitcastrt
		end
end

def warcryshout
	health_monitor
    if (UserVars.osacombat["warcryshout"] && !Effects::Buffs.active?("Empowered (+20)")) && (!Effects::Debuffs.active? "Silenced") && ((!stunned?) or (!bound?))
		if (checkstamina > 11 || Spell[9628].active?) or (checkstamina > 24 || !Spell[9628].active? )
			wait_rt
			result = dothistimeout "warcry shout", 3, /let loose an echoing shout/
			if result.to_s =~ /let loose an echoing shout/
				$warcry_shout_first_cast = true
				return
			end
		end
    end
end

def warcryholler
	health_monitor
	if (UserVars.osacombat["warcryholler"] && !Effects::Buffs.active?("Enh. Health (+20)")) && (!Effects::Debuffs.active? "Silenced") && ((!stunned?) or (!bound?))
		if (checkstamina > 14 || Spell[9628].active?) or (checkstamina > 29 || !Spell[9628].active? )
			wait_rt
			result = dothistimeout "warcry holler", 2, /a thundering holler|holler your war cry|You do not know/
			if result.to_s =~ /a thundering holler|You do not know/
				$warcry_holler_first_cast = true
				return
			elsif result.to_s =~ /holler your war cry/
				warcryholler
			end
		end
	end
end

def return_to_injured_room
	if Room.current.id == @captains_quarters && (Room.current.location == "Ships")
		start_script("go2", [@injured_room])
		wait_while { running?("go2") }
		unpause_script "osacrew"
	end
end

def get_captains_location
	LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Captain, I've Been Injured and Will Return Shortly")
	result = matchtimeout 30, /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Ok Crewman\, We Are At (.*) And Will Await Your Arrival"/
		if result.to_s =~ /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Ok Crewman\, We Are At (.*) And Will Await Your Arrival"/
			@captains_location = $1
		else
			echo "Something Went Wrong, Retrying!"
			get_captains_location
	end
end

def wheres_the_captain
	if !checkpcs.include?(UserVars.osacrew["commander"]) && (!UserVars.osacrew["commander"].include?(checkname)) && (Room.current.location == "Ships")
		get_captains_location
		fput "group open"
		start_script("go2", [@captains_location])
		wait_while { running?("go2") }
	end
end

def go_to_healer
	if (!checkpcs.include? UserVars.osacrew["medicalofficer"]) and (Room.current.location == "Ships")
		wait_rt
		pause_script "osacrew"
		ship_type
		@injured_room = Room.current.id
		if (Room.current.id != @captains_quarters) && (Room.current.location == "Ships")
			start_script("go2", ["captains_quarters"])
			wait_while { running?("go2") }
		end
	end
	if checkpcs.include? UserVars.osacrew["medicalofficer"]
		if UserVars.osacombat["healing_status"] == "poisoned"
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Am Poisoned!")
			wait_until {!Effects::Debuffs.active? ("Wall of Thorns Poison 5") and (!Effects::Debuffs.active? "Wall of Thorns Poison 4") and (!Effects::Debuffs.active? "Wall of Thorns Poison 3") and (!Effects::Debuffs.active? "Wall of Thorns Poison 2") and (!Effects::Debuffs.active? "Wall of Thorns Poison 1") and !checkpoison}
			wait_until {!Effects::Debuffs.active? ("Wall of Thorns Poison 1") and (!Effects::Debuffs.active? "Wall of Thorns Poison 2") and (!Effects::Debuffs.active? "Wall of Thorns Poison 3") and (!Effects::Debuffs.active? "Wall of Thorns Poison 4") and (!Effects::Debuffs.active? "Wall of Thorns Poison 5") and !checkpoison}
			UserVars.osacombat["healing_status"] = "clear"
			return_to_injured_room
			wheres_the_captain
		end
		if UserVars.osacombat["healing_status"] == "diseased"
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Am Diseased!")
			wait_until {!diseased?}
			UserVars.osacombat["healing_status"] = "clear"
			return_to_injured_room
			wheres_the_captain
		end
		if UserVars.osacombat["healing_status"] == "injured"
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Am Injured!")
			wait_until {!XMLData.injuries.any?{|key,value,| value["wound"] > UserVars.osacombat["wound_level"].to_i}}
			UserVars.osacombat["healing_status"] = "clear"
			return_to_injured_room
			wheres_the_captain
		end
		if UserVars.osacombat["healing_status"] == "popped"
			if Feat.known?("Kroderine Soul")
				LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "surge KS")
			else
				LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "surge")
			end
			wait_until {!Effects::Debuffs.active? "Overexerted"}
			UserVars.osacombat["healing_status"] = "clear"
			return_to_injured_room
			wheres_the_captain
		end
	else
		if UserVars.osacombat["healing_status"] == "poisoned"
			respond ""
			respond " -------                                         WARNING                                                  --------"
			respond " -------                  You Appear To Be Poisoned And There Is No Herbal Cure For Poison                --------"
			respond " ------- OSACombat Will Wait Until The Poison Is No Longer Affecting You And Then Return To Your Last Location ---"
			respond " -------                      To Stop Waiting And\\Or Continue With The Poison Type YES                       --------"
			respond ""
			waitfor /A good positive attitude never hurts/
			UserVars.osacombat["healing_status"] = "ignore"
			return_to_injured_room
			wheres_the_captain
		end
		if UserVars.osacombat["healing_status"] == "diseased"
			respond ""
			respond " -------                                         WARNING                                                  --------"
			respond " -------                  You Appear To Be Poisoned And There Is No Herbal Cure For Disease               --------"
			respond " ------- OSACombat Will Wait Until The Disease Is No Longer Affecting You And Then Return To Your Last Location ---"
			respond " -------                      To Stop Waiting And\\Or Continue With The Disease Type YES                       --------"
			respond ""
			waitfor /A good positive attitude never hurts/
			UserVars.osacombat["healing_status"] = "ignore"
			return_to_injured_room
			wheres_the_captain
		end
		if UserVars.osacombat["healing_status"] == "injured"
			start_script("go2", [UserVars.osacombat["safe_room"]])
			wait_while { running?("go2") }
			do_client ";eherbs --buy=off --mending=on --skipscars=on --yaba=on --potions=on"
			wait_while { running?("eherbs") }
			if XMLData.injuries.any?{|key,value| value["wound"] > UserVars.osacombat["wound_level"].to_i}
				respond " -------      You Still Have Serious Wounds, It Is Recommended You Seek Medical Attention Immediately -------"
				respond " -------              OSACombat Will Stay Here Where It Is Safe Until You Can Get Help                -------"
				respond " -------                   To Stop Waiting And\\Or Continue With The Wounds Type YES                      -------"
				waitfor /A good positive attitude never hurts/
				UserVars.osacombat["healing_status"] = "ignore"
			end
			return_to_injured_room
			wheres_the_captain
		end
		if UserVars.osacombat["healing_status"] == "popped"
			start_script("go2", [UserVars.osacombat["safe_room"]])
			wait_while { running?("go2") }
			respond " -------      You Have Overexertion, It Is Recommended You Seek Medical Attention Immediately         -------"
			respond " -------              OSACombat Will Stay Here Where It Is Safe Until You Can Get Help                -------"
			respond " -------                   To Stop Waiting And\\Or Continue With The Overexertion Type YES                      -------"
			waitfor /A good positive attitude never hurts/
			UserVars.osacombat["healing_status"] = "ignore"
			return_to_injured_room
			wheres_the_captain
		end
	end
end

def check_for_poison
	if (Effects::Debuffs.active? "Wall of Thorns Poison 1")||(Effects::Debuffs.active? "Wall of Thorns Poison 2")||(Effects::Debuffs.active? "Wall of Thorns Poison 3")||(Effects::Debuffs.active? "Wall of Thorns Poison 4")||(Effects::Debuffs.active? "Wall of Thorns Poison 5")||(checkpoison)
		if Spell[114].known? && Spell[114].affordable? && (!Effects::Debuffs.active? "Mystic Impedance") && (!Effects::Debuffs.active? "Silenced")
			Spell[114].cast
			Lich::Util.quiet_command("spell active", /You currently have the following active effects\:/, end_pattern = /No debuffs found\./, include_end = true ,timeout = 0.5, silent = true)
			return
		end
		if UserVars.osacombat["healing_status"] == "ignore"
			return
		else 
			UserVars.osacombat["healing_status"] = "poisoned"
			go_to_healer
		end
	end
end

def check_for_disease
	if (diseased?)
		if Spell[113].known? && Spell[114].affordable? && (!Effects::Debuffs.active? "Mystic Impedance") && (!Effects::Debuffs.active? "Silenced")
			Spell[113].cast
			Lich::Util.quiet_command("spell active", /You currently have the following active effects\:/, end_pattern = /No debuffs found\./, include_end = true ,timeout = 0.5, silent = true)
			return
		end
		if UserVars.osacombat["healing_status"] == "ignore"
			return
		else 
			UserVars.osacombat["healing_status"] = "diseased"
			go_to_healer
		end
	end
end

def check_for_injuries
	if (percenthealth < UserVars.osacombat["percent_health"].to_i) && UserVars.osacombat["symbol_of_restore"]
		fput "sym rest" until percenthealth > 90
		wait_rt
		pause 0.5
	end
	if XMLData.injuries.any?{|key,value| value["wound"] > UserVars.osacombat["wound_level"].to_i}
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			wait_while { running?("ecure") }
			wait_rt
			pause 0.5
			start_script "ecure"
			wait_while { running?("ecure") }
		else
			if UserVars.osacombat["healing_status"] == "ignore"
				return
			else
				UserVars.osacombat["healing_status"] = "injured"
				go_to_healer
			end
		end
	end
end

def check_for_popped
	if Effects::Debuffs.active? "Overexerted"
		if Spell[1107].known? && Spell[1107].affordable? && (!Effects::Debuffs.active? "Mystic Impedance") && (!Effects::Debuffs.active? "Silenced")
			Spell[1107].cast
			Lich::Util.quiet_command("spell active", /You currently have the following active effects\:/, end_pattern = /No debuffs found\./, include_end = true ,timeout = 0.5, silent = true)
			return
		end
		if UserVars.osacombat["healing_status"] == "ignore"
			return
		else
			UserVars.osacombat["healing_status"] = "popped"
			go_to_healer
		end
	end
end

def check_for_stunned
	if(!checkstunned && !checkdead && GameObj.pcs.find { |p| p.status =~ /stunned/ })
		stunned_players = GameObj.pcs
		if Spell[108].known? && UserVars.osacombat["use_unstun"] && (!Effects::Debuffs.active? "Mystic Impedance") && (!Effects::Debuffs.active? "Silenced")
			stunned_players.each do |p|
				wait_rt
				if p.status =~ /stun/i
					wait_until{ checkmana >= 8 }
					wait_castrt
					fput "prep 108"
					fput "cast " + p.noun
					pause 3
				end
			end
		end
	end
end

def check_dead
	if checkdead == true
		respond "
			You Have Died My Friend, Please Wait Until You Are Resurrected!
				"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Call The Bugleman, Crewman #{checkname} Has Died!")
		if Spell[9823].known?
			Spell[9823].cast
		end
		if running? "osacrew"
			stop_script "osacrew"
		end
		exit
	end
end

def target_bad_thing
	if (($potential_bad_thing.noun == "globe") or ($potential_bad_thing.noun == "cyclone") or ($potential_bad_thing.noun == "rift"))
		@list_of_bad_things.push ($potential_bad_thing.id)
		return
	else
		res = Lich::Util.quiet_command("target ##{$potential_bad_thing.id}", /You discern that you are the origin of (.*).|Usage:  TARGET {player|creature|hazard}|You are unable to discern the origin of a(.).|Suspecting that(.*)!/, end_pattern = /You discern that you are the origin of (.*).|You do not have a target.|You are currently targeting(.*).|You are unable to discern the origin of a (.).|You are now targeting(.*)./, include_end = false ,timeout = 0.5, silent = true)
		if res.to_s =~ /You are unable to discern the origin of a (.)./
			if !@list_of_good_things.include? $potential_bad_thing.id
				@list_of_good_things.push ($potential_bad_thing.id)
			end
		elsif res.to_s =~ /Suspecting that a (.*) is the origin of (.*), you turn your attention towards (.*)!/
			if !@list_of_bad_things.include? $potential_bad_thing.id
				@list_of_bad_things.push ($potential_bad_thing.id)
			end
		elsif res.to_s =~ /You discern that you are the origin of (.*)./
			if !@list_of_good_things.include? $potential_bad_thing.id
				@list_of_good_things.push ($potential_bad_thing.id)
			end
		end
	end
end

def check_for_badstuff
	if !UserVars.osacombat["myweapon"].nil?
		@list_of_bad_things.push (UserVars.osacombat["myweapon"])
		cast_at_bad_thing
		@list_of_bad_things.delete (UserVars.osacombat["myweapon"])
		UserVars.osacombat["myweapon"] = nil
	end
	@badstuff = GameObj.loot.find_all { |n| n.noun =~ /globe|rift/}
		@badstuff.each do |b|
			$potential_bad_thing = b
			if @list_of_good_things.include? $potential_bad_thing.id
				$potential_bad_thing = nil
				return
			else
				target_bad_thing
				if @list_of_bad_things.include? $potential_bad_thing.id
					cast_at_bad_thing
					@list_of_bad_things.delete ($potential_bad_thing.id)
				end
			end
			$potential_bad_thing = nil
		end
end

def check_daybringer
	check_weapon = Lich::Util.quiet_command("anal my #{GameObj.right_hand}", /You analyze the |(NIGHT|DAY)BRINGER/, end_pattern = /Target: As brilliant as the sun, radiant beams surge forth from [ATTACKER's] [ITEM] and burn you, leaving a stench of scorched matter in the air!!/, include_end = true ,timeout = 1, silent = true)
	if check_weapon.to_s =~ /NIGHTBRINGER/ 
		if (UserVars.osacrew["enemy_type"] == "undead")
			respond ""
			respond "Switching to Daybringer!"
			respond ""
			waitrt?
			waitcastrt?
			pause 0.1
			fput "turn my spear"
			waitrt?
			waitcastrt?
			pause 0.1
		end
	elsif check_weapon.to_s =~ /DAYBRINGER/
		if (UserVars.osacrew["enemy_type"] != "undead")
			respond ""
			respond "Switching to Nightbringer!"
			respond ""
			waitrt?
			waitcastrt?
			pause 0.1
			fput "turn my spear"
			waitrt?
			waitcastrt?
			pause 0.1
		end
	end
end

def beseechme
	beseech = dothistimeout "beseech", 1, /You beseech (.*) for some divine assistance.|...wait/
	if beseech.to_s =~ /You beseech (.*) for some divine assistance./
		return
	elsif beseech.to_s =~ /...wait/
		beseechme
	end
end

def check_status
	$status = false
	$need_dispel = false
	$status = true if ((Effects::Debuffs.active? "Stunned") or (Effects::Debuffs.active? "Calm") or (Effects::Debuffs.active? "Frenzy") or (Effects::Debuffs.active? "Curse") or (Effects::Debuffs.active? "Blinded") or (Effects::Debuffs.active? "Webbed") or (Effects::Debuffs.active? "Bind") or (Effects::Debuffs.active? "Interference") or (Effects::Debuffs.active? "Moonbeam") or (Effects::Debuffs.active? "Stone Fist"))
	$need_dispel = true if ((Effects::Debuffs.active? "Earthen Fury")or (Effects::Debuffs.active? "Condemn"))
	if ((UserVars.osacombat["symbol_of_transcendance"]) && (!Spell[9049].active? && !Spell[9812].active?) && (checkrt > 6) && (!standing? or stunned? or webbed?) && (GameObj.npcs.any? { |npc| npc.type !~ /passive/ and npc.status !~ /dead/ }))
		if Spell[9812].known? && Spell[9812].affordable?
			fput "symbol of transcendence"
			fput "symbol of transcendence confirm"
		end
	end
	if $status
		if Spell[1635].known? && Spell[1635].affordable?
			wait_castrt
			beseechme
			Lich::Util.quiet_command("spell active", /You currently have the following active effects\:/, end_pattern = /No debuffs found\./, include_end = true ,timeout = 0.5, silent = true)
			check_status
		end
	end
	if ($need_dispel && (!Effects::Debuffs.active? "Mystic Impedance"))
		wait_castrt
		if Spell[119].known? && Spell[119].affordable?
			multifput "prep 119", "channel #{checkname}"
		end
		if Spell[417].known? && Spell[417].affordable?
			multifput "prep 417", "channel #{checkname}"
		end
		Lich::Util.quiet_command("spell active", /You currently have the following active effects\:/, end_pattern = /No debuffs found\./, include_end = true ,timeout = 0.5, silent = true)
		check_status
	end
	stand_check
end

def health_monitor
	check_dead
	check_status
	check_for_injuries
	check_for_poison
	check_for_disease
	check_for_popped
	check_for_stunned
	check_for_badstuff
end

def determine_group_members
	res = Lich::Util.quiet_command("group", /You are leading (.*)|You are not currently in a group.|You are grouped with (.*)./, end_pattern = /GROUP HELP for a list of other options./, include_end = false ,timeout = 0.4, silent = true)
	grouped = res.to_s.scan(/[A-Z]\w*/).flatten.uniq
	grouped.delete_if { |name| name =~  /Your|You/i }
	grouped.each{|member| UserVars.osacrew["everyone_in_my_group"].push(member) if !UserVars.osacrew["everyone_in_my_group"].include? (member) }
end

def check_for_poaching
	if (UserVars.osacombat["pc_hiding"] && UserVars.osacombat["pc_hiding_room"] == Room.current.id)
		#echo "setting true for hider"
		$poaching = true
		#wait_until { !Room.current.id == UserVars.osacombat["pc_hiding_room"] }
	else
		#echo "setting false, no hiders"
		$poaching = false
	end
	checkpcs.each do |n|
		if !UserVars.osacrew["everyone_in_my_group"].include? (n)
			#echo "setting true for non group member"
			$poaching = true
		else
			#echo "setting false, all group present"
			$poaching = false
		end
	end
	#echo $poaching
end

def energy_shield
	checkshield = Lich::Util.quiet_command("anal my pavis", /You analyze the/, end_pattern = /Target: As brilliant as the sun, radiant beams surge forth from [ATTACKER's] [ITEM] and burn you, leaving a stench of scorched matter in the air!/, include_end = true ,timeout = 0.5, silent = true)
	if checkshield.to_s =~ /\(Store Energy\)(\W+)Currently\:(\s+)(.*)(\s+)PUSH/
		if $3.delete('^a-zA-Z') == "ON"
			$drained_flares = true
		else
			$drained_flares = false
		end
	end
	if checkshield.to_s =~ /at the cost of energy\)(\W+)Currently\:(\s+)(.*)(\s+)PUNCH/
		if $3.delete('^a-zA-Z') == "ON"
			$surged_flares = true
		else 
			$surged_flares = false
		end
	end
	if checkshield.to_s =~ /Energy Stored\: ([0-9,]+)\/500/
		$energy_stored = $1
	end
	set_shield
end

def set_shield
	if ($energy_stored.to_i <= 20) && (($surged_flares && !$drained_flares) or (!$surged_flares && !$drained_flares))
		wait_rt
		pause 0.1
		fput "pull my pavis"
		wait_rt
		pause 0.1
	end
	if ($energy_stored.to_i >= 500) && ((!$surged_flares && $drained_flares) or (!$surged_flares && !$drained_flares))
		wait_rt
		pause 0.1
		fput "pull my pavis"
		wait_rt
		pause 0.1
		fput "push my pavis"
		wait_rt
		pause 0.1
	end
end

def daybringer_light
	check_light = Lich::Util.quiet_command("anal my #{GameObj.right_hand}", /You analyze the |(NIGHT|DAY)BRINGER/, end_pattern = /Target: As brilliant as the sun, radiant beams surge forth from [ATTACKER's] [ITEM] and burn you, leaving a stench of scorched matter in the air!/, include_end = true ,timeout = 0.5, silent = true)
	if check_light.to_s =~ /\(Charge with 111, 609, 205 \(Light, Cast\), 135\)(\W+)Status\:(\s+)(.*)(\s+)Cauterize/
		if $3.delete('^a-zA-Z') == "Ready"
			$ready_to_charge = true
		else
			$ready_to_charge = false
		end
	end
	if check_light.to_s =~ /Stored: ([0-9,]+)\/250/
		$stored_light = $1
	end
	if ($stored_light.to_i <= 210) && $ready_to_charge
		pause 0.5
		Spell[111].cast GameObj.right_hand
	end
end

before_dying {
	if !checkdead
		wait_while { running?("eloot") }
		if (Spell[1625].known?) and (Stats.level >= 29) and !GameObj.right_hand.id.nil?
			infuse_weapon
		end
		if Spell[1604].known? and !GameObj.left_hand.id.nil?
			pause 0.2
			infuse_shield
		end
		if Spell[630].known?
			fput "tell comp behave defensive"
		end
		if checkname == "Peggyanne"
				wait_rt
				pause 0.1
				energy_shield
		end
		fput "store both"
		if UserVars.osacombat["usebriefcombat"]
			multifput "flag combatbrief off", "flag combatnonumbers off", "flag combatselffull on"
		end
	end}
	
	@use_kneel = false
	if UserVars.osacombat["mob"] == true
		Spell[1213].cast if (Spell[1213].known?) && (Spell[1213].affordable?)
	end
	if UserVars.osacombat["focus"] == true
		Spell[1216].cast if (Spell[1216].known?) && (Spell[1216].affordable?)
	end
	fput "store both"
	if UserVars.osacombat["nouacweapons"]
			nil
	else
		fput "gird"
	end
	if (Spell[330].known?) && (Spell[330].affordable?)
		pause 1
		multifput "prep 330", "evoke ##{GameObj.right_hand.id}"
		wait_castrt
		if !GameObj.left_hand.id.nil?
			multifput "prep 330", "evoke ##{GameObj.left_hand.id}"
		end
	end
	mstrike_setup
	if (Spell[1625].known?) and (Stats.level >= 29) and !GameObj.right_hand.id.nil?
		pause 0.5
		fput "beseech #{GameObj.right_hand.noun} conserve"
	end
	if Spell[630].known?
		fput "tell comp return"
		pause 0.5
		fput "tell comp behave offensive"
	end
	if UserVars.osacombat["spellopen"].empty? == true
		echo "
		------==== No Opener Spell Designated ==== ------
		"
	end
	if UserVars.osacombat["undeadspellopen"].empty? == true
		echo "
		------==== No Undead Opener Spell Designated ==== ------
		"
	end

def checkfordead
	@deadnpcs = GameObj.npcs.find_all { |i| i.status =~ /dead|gone/ }
    @deadnpcs.delete_if { |npc| (npc.name =~ /animated/ && npc.name !~ /animated slush/) }
    @deadnpcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate/i && npc.name !~ /ethereal|celestial|unworldly/i }
    @deadnpcs.delete_if { |npc| npc.noun =~ /^(?:arm|appendage|claw|limb|pincer|tentacle)s?$|^(?:palpus|palpi)$/i }
end	

if Room.current.location == "Ships"
	$mana_focus_first_cast = false
	$group_bravery_first_cast = false
	$group_heroism_first_cast = false
	$group_barkskin_first_cast = false
	$song_of_tonis_first_cast = false
	$beacon_of_courage_first_cast = false
	$warcry_shout_first_cast = false
	$warcry_holler_first_cast = false
	$society_first_cast = false
	$wallofforce_first_cast = false
	$faith_shield_first_cast = false
	$surgeofstrength_first_cast = false
else
	$mana_focus_first_cast = true
	$group_bravery_first_cast = true
	$group_heroism_first_cast = true
	$group_barkskin_first_cast = true
	$song_of_tonis_first_cast = true
	$beacon_of_courage_first_cast = true
	$warcry_shout_first_cast = true
	$warcry_holler_first_cast = true
	$society_first_cast = true
	$wallofforce_first_cast = true
	$faith_shield_first_cast = true
	$surgeofstrength_first_cast = true
end
$poaching = false
UserVars.osacombat["pc_hiding_room"] = nil
UserVars.osacombat["pc_hiding"] = false
UserVars.osacrew["everyone_in_my_group"] = Array.new
UserVars.osacrew["everyone_in_my_group"].clear
@list_of_bad_things = Array.new
@list_of_good_things = Array.new
if @room_creatures.nil?
	@room_creatures = Array.new
end
if @empathic_link.nil?
	@empathic_link = Array.new
end
if @empathic_link2.nil?
	@empathic_link2 = Array.new
end
if UserVars.osacombat["usebriefcombat"]
	multifput "flag combatbrief on", "flag combatnonumbers on", "flag combatselffull off"
end
determine_group_members
mana_share
if !GameObj.right_hand.id.nil? && checkname == "Peggyanne"
	check_daybringer
end
if checkname == "Peggyanne"
	wait_rt
	pause 0.1
	energy_shield
end
toggle_upstream

Thread.new{
	loop{
		command = upstream_get
			if command =~/^\<c\>;osacombat setup/i
				self.osacombatsetup()
				nil
			elsif command =~/^(\<c\>;osacombat help|\<c\>;osacombat ?)/i
				osacombat_help_display
				nil
			end
	}
}

creature_type
loop {
	stance_defensive
	health_monitor
	groupeffects
	mana_leech
	looter
	check_dead
	if GameObj.targets.count > 0 && !checkdead
		if UserVars.osacombat["check_for_group"]
			check_for_poaching
			if !$poaching
				creature_type
				reactive
				combat
			end
		else
			creature_type
			reactive
			combat
		end
	end
	sleep 0.1
}
