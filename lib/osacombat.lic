UserVars.osacrew["combatversion"] = '3.5.2 (May 4th, 2024)'
$TITLE = "OSACombat: v. (#{UserVars.osacrew["combatversion"]})"
		  $get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  
def osacombat_help_display
	respond ""
	respond "   OSACombat Version: #{UserVars.osacrew["combatversion"]}"
	respond ""
	respond "Usage:"
	respond ""
	respond ";osacombat setup                       Opens the setup window to configure combat routines"
	respond ""
	respond "   OSACombat is an automated combat script for OSA but it will work in other hunting grounds as well"
	respond "   Enjoy "
	respond ""
	respond "   ~Peggyanne "
	respond " PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. "
end

=begin
	
	   OSACombat Version: 3.5.2 (May 4th, 2024)
	
	   Usage:
	   
	   ;osacombat setup                       Opens the setup window to configure combat routines
	   
	   OSACombat is an automated combat script for OSA but it will work in other hunting grounds as well
	   Enjoy 
		
	   ~Peggyanne 
	 PS: feel free to send me any bugs via discord Bait#4376 and I'll try my best to fix them. 
=end

 def set_value(key, clean, default)
    if (!UserVars.osacombat[key].nil? && UserVars.osacombat[key] !~ /^\s*$/)
      cleaned = clean_value(clean, UserVars.osacombat[key])
      instance_variable_set("@#{key.upcase}", cleaned)
    else
      instance_variable_set("@#{key.upcase}", default)
    end
  end
  
  def self.profile(vars)
  require 'yaml'
  require 'fileutils'
  FileUtils.mkdir_p(File.join($data_dir, XMLData.game, Char.name, "osacombat_profiles"))
    if vars[2] =~ /load/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacombat_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if !File.exist?("#{filename}")
          respond ""
          respond " You are trying to load a profile that does not exist."
          respond ""
          respond "***************************"
          respond " Notice- your default osacombat profiles folder has changed to:"
          respond " #{dir}"
          respond ""
          respond " The old location is here: #{File.join($script_dir, 'osacombat_profiles')}"
          respond " You can copy this folder or appropriate profiles into the relevant character directory in your operating system"
          respond "****************************"
          respond ""
        else
          from_file = YAML.load_file(filename)
          UserVars.osacombat = from_file
          echo "Settings loaded from profile: #{filename}."
        end
      else
        echo "You forgot to name your profile you wish to load."
        echo "Syntax: ;osacombat profile load <NAME Here, no Spaces!>"
      end
    elsif vars[2] =~ /save/i
      if vars[3] != nil
        dir = File.join($data_dir, XMLData.game, Char.name, "osacombat_profiles")
        filename = File.join(dir, "#{vars[3]}.yaml")
        if File.exist?("#{filename}")
          echo "File already exists, if you wish to overwrite, please ;unpause osacombat."
          echo "Else ;kill osacombat and choose another filename."
          pause_script
        end
        File.write(filename, UserVars.osacombat.to_yaml)
        echo "Settings saved to profile: #{filename}."
      else
        echo "You forgot to name your profile you wish to save."
        echo "Syntax: ;osacombat profile save <NAME Here, no Spaces!>"
      end
    end
  end
	  
def self.setup
	@theme_state = Lich.track_dark_mode if defined? Lich.track_dark_mode
    Gtk.queue do
      @get_vBox = proc {
        if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end
      }
	  @OC_WINDOW = Gtk::Window.new
      @OC_WINDOW.title = $TITLE
      @OC_WINDOW.set_icon(@default_icon)
      @OC_WINDOW.set_border_width(10)
      @OC_WINDOW.keep_above = true
	  
		if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
			grey = Gdk::RGBA::parse("#d3d3d3")
			@OP_WINDOW.override_background_color(:normal, grey)
		end

      @OC_BOX = @get_vBox.call
      @OC_BOX.set_border_width(5)
      @OC_WINDOW.add(@OC_BOX)

      @OC_NOTEBOOK = Gtk::Notebook.new
      @OC_NOTEBOOK.set_show_border(true)
	  if Gtk.check_version(3,0,0).nil? && (@theme_state == 'off' or @theme_state.nil?)
		@OC_NOTEBOOK.override_background_color(:normal, grey)
	  end
      @OC_BOX.add(@OC_NOTEBOOK)
      @OC_ENTRY = Hash.new # For mapping entries to variables
      @OC_TABLE_SIZE = Hash.new # For mapping table sizes

  end
  
	Gtk.queue do
      tab_names = %w[
		General
		Support
		Cannons
      ]
	  
     tab_names.each.with_index(1) do |name, val|
        new_table = Gtk::Table.new(10, 4, true).tap do |table|
          table.row_spacings = 1
          table.column_spacings = 1
        end

        new_box = if Gtk.check_version(3,0,0).nil?
          Gtk::Box.new(:vertical)
        else
          Gtk::VBox.new(false, 0)
        end

        if Gtk.check_version(3,0,0).nil?
          new_box.pack_start(new_table, expand: false, fill: false, padding: 0)
        else
          new_box.pack_start(new_table, false, false, 0)
        end

        @OC_NOTEBOOK.append_page(new_box, Gtk::Label.new(name))

        instance_variable_set("@OC_TABLE#{val}", new_table)
        instance_variable_set("@OC_VERTICAL_BOX#{val}", new_box)
      end
end

def self.add_label_entry(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacombat[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 1, 2, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
  end

def self.add_label_entry2(table, label, variable, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.osacombat[variable].to_s
    entry.set_width_request(150)
    table.attach(entry, 3, 4, size, size + 1)

    @OC_ENTRY[variable] = entry
    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry3(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end  

def self.add_label_entry4(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 2, 3, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry5(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 4, 5, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

def self.add_label_entry6(table, label, newrow = false)
    size = @OC_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 0, 0, 0, 0
    align.set_padding(4, 1, 1, 4)
    align.add(label)
    table.attach(align, 1, 2, size, size + 1)

    @OC_TABLE_SIZE[table] += 1 if newrow
end 

    def self.add_dropdown(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacombat[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacombat[variable].to_s != "Fixnum" && UserVars.osacombat[variable].to_s != "Integer"
          UserVars.osacombat[variable]
        end
        dropdown.set_active(UserVars.osacombat[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 0, 1, size, size + 1)
      table.attach(align2, 1, 2, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

def self.add_dropdown2(table, dropdown, variable, options, newrow = false)
      size = @OC_TABLE_SIZE[table] || 0

      label = Gtk::Label.new(dropdown)
      dropdown = if Gtk.check_version(3,0,0).nil?
        Gtk::ComboBoxText.new
      else
        Gtk::ComboBox.new
      end

      options.split(',').each { |s| dropdown.append_text(s) }
      if UserVars.osacombat[variable].nil?
        dropdown.set_active(0)
      else
        if UserVars.osacombat[variable].to_s != "Fixnum" && UserVars.osacombat[variable].to_s != "Integer"
          UserVars.osacombat[variable]
        end
        dropdown.set_active(UserVars.osacombat[variable])
      end
      align = Gtk::Alignment.new 0, 0, 0, 0
      align2 = Gtk::Alignment.new 0, 0, 1, 0
      align.set_padding(4, 0, 3, 4)
      align2.set_padding(0, 0, 0, 0)
      align.add(label)
      align2.add(dropdown)
      table.attach(align, 2, 3, size, size + 1)
      table.attach(align2, 3, 4, size, size + 1)
      @OC_ENTRY[variable] = dropdown
      @OC_TABLE_SIZE[table] += 1 if newrow
    end

      def self.add_text_area(vbox, label, variable)
      # Grab value for a manual check since we can't rely on a version of Ruby with safe operators
      current_value = UserVars.osacombat[variable]

      entry = Gtk::TextView.new
      entry.buffer.text = current_value ? current_value.gsub("||","\n") : ""

      swin = Gtk::ScrolledWindow.new
      swin.border_width = 5
      swin.add(entry)
      swin.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

      frame = Gtk::Frame.new(label)
      frame.add(swin)

      vbox.pack_start_defaults(frame)

      @OC_ENTRY[variable] = entry
    end
  Gtk.queue do
    @OC_ENTRY = Hash.new
	add_label_entry3(@OC_TABLE1, "Combat Settings", false)
	add_label_entry4(@OC_TABLE1, "Undead Combat Settings", true)
	add_dropdown(@OC_TABLE1, "Attack Option:", 'attacktype', 'None,UAC Brawling,UAC Brawling - Stealth,Melee 1H 2H,Melee 1H 2H Stealth,Bow + Arrow,Bow + Arrow Stealth,Crossbow + Bolt,Crossbow + Bolt Stealth,Magic Bolt Spell Casters,Warding Magic Users,Archer Hybrid Users Spell Openers,Meelee Hybrid Users Spell Openers,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008')
	add_dropdown2(@OC_TABLE1, "Undead Attack Option:", 'undeadattacktype', 'None,UAC Brawling,UAC Brawling - Stealth,Melee 1H 2H,Melee 1H 2H Stealth,Bow + Arrow,Bow + Arrow Stealth,Crossbow + Bolt,Crossbow + Bolt Stealth,Magic Bolt Spell Casters,Warding Magic Users,Archer Hybrid Users Spell Openers,Meelee Hybrid Users Spell Openers,Bard Support - 1035- 1002,Bard Caster 1030 AOE 1008', true)
	add_dropdown(@OC_TABLE1, "Setup Attack:", 'attackopen', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Spell Cleave,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep")
	add_dropdown2(@OC_TABLE1, "Undead Setup Attack:", 'undeadattackopen', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Spell Cleave,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep", true)
	add_dropdown(@OC_TABLE1, "Second Setup Attack:", 'attackopen2', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Spell Cleave,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep")
	add_dropdown2(@OC_TABLE1, "Second Undead Setup Attack:", 'undeadattackopen2', "None,Berserk,Bertrandt\'s Bellow (Single Target),Bertrandt\'s Bellow,Bull Rush, Carn\'s Cry (Single Target),Carn\'s Cry (Open),Charge (Polearm),Cripple(Edged),Crowd Press,Cutthroat,Dirtkick,Disarm Weapon,Dislodge,Dizzying Swing (Blunt),Eyepoke,Feint,Footstomp,Garrelle\'s Growl (Single Target),Garrelle\'s Growl (Open),Groin Kick,Hamstring,Haymaker,Headbutt,Kneebash,Mighty Blow,Mug,Nosetweak,Shield Bash,Shield Charge,Shield Push,Shield Throw,Spell Cleave,Sunder Shield,Sweep,Swiftkick,Tackle,Templeshot,Throatchop,Trip,Twin Hammerfists (Brawling),Vault Kick,Voln Sleep", true)
	add_dropdown(@OC_TABLE1, "Special Attack:", 'specialattack', 'None,Exsanguinate,Leap Attack,Shield Strike,Spin Attack,Staggering Blow,True Strike')
	add_dropdown2(@OC_TABLE1, "Undead Special Attack:", 'undeadspecialattack', 'None,Exsanguinate,Leap Attack,Shield Strike,Spin Attack,Staggering Blow,True Strike', true)
	add_dropdown(@OC_TABLE1,  "AOE Attack:", 'aoe','None,Bull Rush,Clash (Brawling),Cyclone (Polearm),Pin Down (Ranged),Pulverize (Blunt),Shield Throw,Whirling Blade (Edged),Whirlwind (Two-Handed),Volley (Ranged)')
	add_dropdown2(@OC_TABLE1,  "Undead AOE Attack:", 'undeadaoe','None,Bull Rush,Clash (Brawling),Cyclone (Polearm),Pin Down (Ranged),Pulverize (Blunt),Shield Throw,Whirling Blade (Edged),Whirlwind (Two-Handed),Volley (Ranged)', true)
	add_dropdown(@OC_TABLE1,  "Assault:", 'assault','None,Barrage (Ranged),Flurry (Edged),Fury (Brawling),Guardant Thrusts (Polearm),Pummel (Blunt),Thrash (Two-Handed)')
	add_dropdown2(@OC_TABLE1,  "Undead Assault:", 'undeadassault','None,Barrage (Ranged),Flurry (Edged),Fury (Brawling),Guardant Thrusts (Polearm),Pummel (Blunt),Thrash (Two-Handed)', true)
	add_label_entry(@OC_TABLE1, "AOE Only If Enemy Count Is Above:", 'aoe_if')
	add_label_entry2(@OC_TABLE1, "AOE Only If Enemy Count Is Above:", 'undead_aoe_if', true)
	add_label_entry(@OC_TABLE1, "Spell Opener:", 'spellopen')
	add_label_entry2(@OC_TABLE1, "Undead Spell Opener:", 'undeadspellopen', true)
	add_label_entry(@OC_TABLE1, "Opener Only If Enemy Count Is Above:", 'opener_if')
	add_label_entry2(@OC_TABLE1, "Opener Only If Enemy Count Is Above:", 'undead_opener_if', true)
	add_label_entry(@OC_TABLE1, "Attack Spell:", 'spelltype')
	add_label_entry2(@OC_TABLE1, "Undead Attack Spell:", 'undeadspelltype', true)
	add_checkbox(@OC_TABLE1, 0,  "Channel Attack", 'spellchan')
	add_checkbox(@OC_TABLE1, 1,  "Open Cast Spell Opener", 'open_opener')
	add_checkbox(@OC_TABLE1, 2,  "Channel Undead Attack", 'undeadspellchan')
	add_checkbox(@OC_TABLE1, 3,  "Open Cast Undead Spell Opener", 'undead_open_opener', true)
	add_checkbox(@OC_TABLE1, 0,  "Evoke Attack", 'spellevoke')
	add_checkbox(@OC_TABLE1, 1,  "Warding Spell Opener", 'warding_opener')
	add_checkbox(@OC_TABLE1, 2,  "Evoke Undead Attack", 'undeadspellevoke')
	add_checkbox(@OC_TABLE1, 3,  "Warding Undead Spell Opener", 'undead_warding_opener', true)
	add_checkbox(@OC_TABLE1, 0,  "Kneel With Crossbow", 'use_kneel')
	add_checkbox(@OC_TABLE1, 1,  "Use Mana Leech", 'use_mana_leech')
	add_checkbox(@OC_TABLE1, 2,  "Kneel With Crossbow On Undead", 'undead_use_kneel')
	add_checkbox(@OC_TABLE1, 3,  "Use Mana Leech On Undead", 'undead_use_mana_leech', true)
	add_checkbox(@OC_TABLE1, 0,  "Scripted Combat", 'osacombat')
	add_checkbox(@OC_TABLE1, 1,  "Use Brief Combat", 'usebriefcombat')
	add_checkbox(@OC_TABLE1, 2,  "Use Mstrike", 'use_mstrike', true)
	add_label_entry3(@OC_TABLE2, "Society Settings:", true)
	add_label_entry3(@OC_TABLE2, "Council of Light", false)
	add_label_entry6(@OC_TABLE2, "Guardians of Sunfist", false)
	add_label_entry4(@OC_TABLE2, "Order of Voln")
	add_label_entry4(@OC_TABLE2, "", true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Warding", 'sign_of_warding')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Minor Bane", 'sigil_of_minor_bane')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Courage", 'symbol_of_courage', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Defending", 'sign_of_defending')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Offense", 'sigil_of_offense')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Protection", 'symbol_of_protection', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Shields", 'sign_of_shields')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Major Bane", 'sigil_of_major_bane')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Disruption", 'symbol_of_disruption', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Striking", 'sign_of_striking')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Minor Protection", 'sigil_of_minor_protection')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Mana", 'symbol_of_mana', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Smiting", 'sign_of_smiting')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Defense", 'sigil_of_defense')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Retribution", 'symbol_of_retribution', true)
	add_checkbox(@OC_TABLE2, 0,  "Sign of Swords", 'sign_of_swords')
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Major Protection", 'sigil_of_major_protection')
	add_checkbox(@OC_TABLE2, 2,  "Symbol of Supremacy", 'symbol_of_supremacy', true)
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Concentration", 'sigil_of_concentration', true)
	add_checkbox(@OC_TABLE2, 1,  "Sigil of Power", 'sigil_of_power', true)
	add_label_entry4(@OC_TABLE2, "", true)
	add_label_entry3(@OC_TABLE2, "Group Buffs:")
	add_label_entry4(@OC_TABLE2, "Bless Settings:", true)
	add_checkbox(@OC_TABLE2, 0,  "Seanette's Shout", 'warcryshout')
	add_checkbox(@OC_TABLE2, 2,  "Bless Caster", 'givebless', true)
	add_checkbox(@OC_TABLE2, 0,  "Horland's Holler", 'warcryholler')
	add_checkbox(@OC_TABLE2, 2,  "Need Bless", 'needbless', true)
	add_checkbox(@OC_TABLE2, 0,  "Mind Over Body (1213)", 'mob')
	add_label_entry2(@OC_TABLE2, "UAC Hand Wraps:", 'uachands', true)
	add_checkbox(@OC_TABLE2, 0,  "Focus Barrier (1216)", 'focus')
	add_label_entry2(@OC_TABLE2, "UAC Foot Wraps:", 'uacfeet', true)
	add_checkbox(@OC_TABLE2, 0,  "Group Bravery (211)", 'groupbravery')
	add_label_entry2(@OC_TABLE2, "Paladin Infuse Spell:", 'infusespell',true)
	add_checkbox(@OC_TABLE2, 0,  "Group Heroism (215)", 'groupheroism', true)
	add_checkbox(@OC_TABLE2, 0,  "Beacon of Courage (1608)", 'beaconofcourage', true)
	add_checkbox(@OC_TABLE2, 0,  "Song of Tonis (1035)", 'songoftonis', true)
	add_checkbox(@OC_TABLE2, 0,  "Mana Focus", 'groupmana', true)
	add_label_entry3(@OC_TABLE3, "Cannon Settings:", true)
	add_label_entry4(@OC_TABLE3, "", true)
	add_checkbox(@OC_TABLE3, 0,  "Use Cannons", 'cannoneer', true)
	add_label_entry4(@OC_TABLE3, "", true)
	add_checkbox(@OC_TABLE3, 0,  "Load Only", 'loadonly', false)
	add_checkbox(@OC_TABLE3, 1,  "Main Cannons", 'maincannons', true)
	add_checkbox(@OC_TABLE3, 0,  "Fire Only", 'fireonly', false)
	add_checkbox(@OC_TABLE3, 1,  "Mid Cannons", 'midcannons', true)
	add_checkbox(@OC_TABLE3, 0,  "Load And Fire", 'loadandfire', false)
	add_checkbox(@OC_TABLE3, 1,  "Forwards Cannons", 'forwardcannons', true)
end
  
    def self.add_checkbox(table, x_pos, label, variable, newrow = false, default = false)
      size = @OC_TABLE_SIZE[table] || 0
      checkbox = Gtk::CheckButton.new label
      value = UserVars.osacombat[variable] || default
      checkbox.active = value
      table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
      @OC_ENTRY[variable] = checkbox
      @OC_TABLE_SIZE[table] += 1 if newrow
    end
	
  Gtk.queue do
    @OC_WINDOW.signal_connect("delete_event") {
      @OC_SETUP_COMPLETED = true
    }
  end

  Gtk.queue do 
	
    @OC_WINDOW.show_all
  end

  @OC_SETUP_COMPLETED = false
  until(@OC_SETUP_COMPLETED)
    sleep(0.5)
  end

    UserVars.osacombat ||= Hash.new
    @OC_ENTRY.keys.each do |key|
      echo "#{key} - #{@OC_ENTRY[key].to_s}" if $osacombat_debug
      if @OC_ENTRY[key].to_s =~ /CheckButton/
        value = @OC_ENTRY[key].active?
        UserVars.osacombat[key] = @OC_ENTRY[key].active?
      elsif @OC_ENTRY[key].to_s =~ /ComboBox/
        UserVars.osacombat[key] = @OC_ENTRY[key].active
      elsif @OC_ENTRY[key].to_s =~ /TextView/
        # Store these with double pipes so we don't mess up any supplied expressions
        UserVars.osacombat[key] = @OC_ENTRY[key].buffer.text.gsub("\n","||")
      else
        if key == 'wounded_eval'
          UserVars.osacombat[key] = @OC_ENTRY[key].text
        else
          UserVars.osacombat[key] = @OC_ENTRY[key].text.strip
        end
      end
    end
    UserVars.save

  Gtk.queue do
    @OC_WINDOW.destroy
 end
end

if script.vars[1] == '?'
	osacombat_help_display
	exit
elsif (script.vars[1] =~ /setup/i)
self.setup()
exit
elsif (Script.current.vars[1] =~ /profile/i)
	self.profile(Script.current.vars)
	exit
elsif script.vars[1] == 'help'
	osacombat_help_display
	exit
elsif script.vars[1] == 'version'
	respond ""
	respond "OSACombat Version #{UserVars.osacrew["combatversion"]}"
	respond ""
	exit
end

$osacombat_auto_stow = nil
$osacombat_my_mstrike_focus = nil        #These are variables for Mstrike.  Not needed in GUI as they are autoset in mstrike def below.  Can remove or try to autoset this in osacrew.vars so settings are saved.  But this will check settings on open each time.
$osacombat_my_mstrike_open = nil
$osacombat_uac_current_attack = 0
$osacombat_retaliate = 0

def ship_type
	case Room.current.id
	when (29038..29042)
			@ship_type = "sloop"
			@cargo_hold = 29039
			@main_deck = 29038
			@mid_deck = nil
			@forward_deck = nil
			@bow = nil
			@crows_nest = 29040
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = nil
			@crew_quarters = nil
			@helm = 29041
			@cannons1 = 29038
			@cannons2 = nil
			@cannons3 = nil
			@captains_quarters = 29042
			@ship_map = [29038, 29039, 29040, 29041, 29042]
			@Slooptimes = UserVars.osacrew["Slooptimes"].last(50)
			if @Slooptimes.nil? or @Slooptimes.empty?
				@Slooptimes = [0.315]
			end
			@Sailtimes = @Slooptimes
	when (30140..30147)
			@ship_type = "brigantine"
			@cargo_hold = 30145
			@main_deck = 30142
			@mid_deck = nil
			@forward_deck = 30144
			@bow = nil
			@crows_nest = 30143
			@forward_crows_nest = nil
			@social_room = nil
			@mess_hall = 30147
			@crew_quarters = 30146
			@helm = 30141
			@captains_quarters = 30140
			@cannons1 = 30142
			@cannons2 = 30144
			@cannons3 = nil
			@ship_map = [30144, 30142, 30143, 30145, 30147, 30146, 30141, 30140]
			@Brigtimes = UserVars.osacrew["Brigtimes"].last(50)
			if @Brigtimes.nil? or @Brigtimes.empty?
				@Brigtimes = [0.30000000000000000]
			end
			@Sailtimes = @Brigtimes
	when (30119..30127)
			@ship_type = "carrack"
			@cargo_hold = 30125
			@main_deck = 30119
			@mid_deck = nil
			@forward_deck = 30121
			@social_room = nil
			@bow = 30122
			@crows_nest = 30123
			@forward_crows_nest = nil
			@mess_hall = 30127
			@crew_quarters = 30126
			@helm = 30120
			@captains_quarters = 30124
			@cannons1 = 30119
			@cannons2 = 30121
			@cannons3 = nil
			@ship_map = [30122, 30121, 30123, 30119, 30127, 30125, 30126, 30120, 30124]
			@Cartimes = UserVars.osacrew["Cartimes"].last(50)
			if @Cartimes.nil? or @Cartimes.empty?
				@Cartimes = [0.30000000000000000]
			end
			@Sailtimes = @Cartimes
	when (30176..30186)
			@ship_type = "galleon"
			@cargo_hold = 30182
			@main_deck = 30176
			@mid_deck = nil
			@forward_deck = 30177
			@bow = 30178
			@crows_nest = 30181
			@forward_crows_nest = nil
			@social_room = 30185
			@mess_hall = 30184
			@crew_quarters = 30183
			@helm = 30179
			@captains_quarters = 30180
			@cannons1 = 30176
			@cannons2 = 30177
			@cannons3 = nil
			@ship_map = [30178, 30177, 30181, 30176, 30185, 30184, 30182, 30183, 30179, 30180]
			@Galtimes = UserVars.osacrew["Galtimes"].last(50)
			if @Galtimes.nil? or @Galtimes.empty?
				@Galtimes = [0.30000000000000000]
			end
			@Sailtimes = @Galtimes
	when (30166..30175)
			@ship_type = "frigate"
			@cargo_hold = 30167
			@main_deck = 30166
			@mid_deck = nil
			@forward_deck = 30171
			@bow = 30172
			@crows_nest = 30173
			@forward_crows_nest = nil
			@social_room = 30170
			@mess_hall = 30169
			@crew_quarters = 30168
			@helm = 30174
			@captains_quarters = 30175
			@cannons1 = 30166
			@cannons2 = 30171
			@cannons3 = nil
			@ship_map = [30172, 30171, 30173, 30166, 30170, 30169, 30167, 30168, 30174, 30175]
			@Fritimes = UserVars.osacrew["Fritimes"].last(50)
			if @Fritimes.nil? or @Fritimes.empty?
				@Fritimes = [0.30000000000000000]
			end
			@Sailtimes = @Fritimes
	when (30128..30139)
			@ship_type = "man o' war"
			@cargo_hold = 30136
			@main_deck = 30130
			@mid_deck = 30131
			@forward_deck = 30132
			@bow = 30133
			@crows_nest = 30135
			@forward_crows_nest = 30134
			@social_room = 30139
			@mess_hall = 30138
			@crew_quarters = 30137
			@helm = 30128
			@captains_quarters = 30129
			@cannons1 = 30130
			@cannons2 = 30131
			@cannons3 = 30132
			@ship_map = [30133, 30134, 30132, 30131, 30135, 30130, 30139, 30138, 30136, 30137, 30128, 30129]
			@Mantimes = UserVars.osacrew["Mantimes"].last(50)
			if @Mantimes.nil? or @Mantimes.empty?
				@Mantimes = [0.35000000000000000]
			end
			@Sailtimes = @Mantimes
	end
	if (30787..30791).include? Room.current.id || (@enemy_main_deck == 30787)
			@enemy_ship_type = "Sloop"
			@enemy_bow = nil
			@enemy_forward_deck = nil
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30787
			@enemy_crows_nest = 30791
			@enemy_cargo_hold = 30790
			@enemy_helm = 30788
			@enemy_quarters = 30789
			@enemy_ship_map = [30787, 30791, 30788, 30790]
	end
	if (30792..30797).include? Room.current.id || (@enemy_main_deck == 30792)
			@enemy_ship_type = "Brigantine"
			@enemy_bow = nil
			@enemy_forward_deck = 30797
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30792
			@enemy_crows_nest = 30796
			@enemy_cargo_hold = 30795
			@enemy_helm = 30793
			@enemy_quarters = 30794
			@enemy_ship_map = [30797, 30792, 30796, 30793, 30795]
	end
	if (30266..30272).include? Room.current.id || (@enemy_main_deck == 30266)
			@enemy_ship_type = "Carrack"
			@enemy_bow = 30272
			@enemy_forward_deck = 30271
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30266
			@enemy_crows_nest = 30270
			@enemy_cargo_hold = 30269
			@enemy_helm = 30267
			@enemy_quarters = 30268
			@enemy_ship_map = [30272, 30271, 30266, 30270, 30267, 30269]
	end
	if (30798..30804).include? Room.current.id || (@enemy_main_deck == 30798)
			@enemy_ship_type = "Galleon"
			@enemy_bow = 30804
			@enemy_forward_deck = 30803
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30798
			@enemy_crows_nest = 30802
			@enemy_cargo_hold = 30801
			@enemy_helm = 30799
			@enemy_quarters = 30800
			@enemy_ship_map = [30804, 30803, 30798, 30802, 30799, 30801]
	end
	if (30805..30810).include? Room.current.id || (@enemy_main_deck == 30805)
			@enemy_ship_type = "Frigate"
			@enemy_bow = nil
			@enemy_forward_deck = 30810
			@enemy_forward_crows_nest = nil
			@enemy_mid_deck = nil
			@enemy_main_deck = 30805
			@enemy_crows_nest = 30809
			@enemy_cargo_hold = 30808
			@enemy_helm = 30806
			@enemy_quarters = 30807
			@enemy_ship_map = [30810, 30805, 30809, 30806, 30808]
	end
	if (30778..30786).include? Room.current.id || (@enemy_main_deck == 30778)
			@enemy_ship_type = "Man O' War"
			@enemy_bow = 30784
			@enemy_forward_deck = 30786
			@enemy_forward_crows_nest = 30785
			@enemy_mid_deck = 30783
			@enemy_main_deck = 30778
			@enemy_crows_nest = 30782
			@enemy_cargo_hold = 30781
			@enemy_helm = 30779
			@enemy_quarters = 30780
			@enemy_ship_map = [30784, 30786, 30785, 30783, 30778, 30782, 30779, 30781]
	end
end

####### Miscelleanous Combat Actions
def osa_put(message)
    echo "osa_put" if $osa_debug
    unless (script = Script.self) then
      respond('--- waitfor: Unable to identify calling script.')
      return false
    end
    clear
    put(message)

    while (string = get)
      if string.to_s =~ /(?:\.\.\.wait |Wait )[0-9]+/
        hold_up = string.slice(/[0-9]+/).to_i
        sleep(hold_up - 1) unless hold_up.nil? || hold_up == 1
        clear
        put(message)
        next
      elsif string.to_s =~ /struggle.+stand/
        clear
        osa_put("stand")
        next
      elsif string.to_s =~ /stunned|can't do that while|cannot seem|can't seem|don't seem|Sorry, you may only type ahead/
        if dead?
          echo("You're dead...! You can't do that!")
          sleep(0.25)
          script.downstream_buffer.unshift(string)
          return false
        elsif checkstunned
          while checkstunned
            sleep(0.25)
          end
        elsif checkwebbed
          while checkwebbed
            sleep(0.25)
          end
        else
          sleep(0.25)
        end
        clear
        put(message)
        next
      else
        script.downstream_buffer.unshift(string)
        return string
      end
    end
end

def change_stance(new_stance, force = true)
    return if Spell[216].active? || dead?
    perfect_stance = nil
    if new_stance =~ /10|20|30|40|50|60|70|80|90|100/i
      perfect_stance = new_stance
      new_stance = "advance" if perfect_stance =~ /10|20/i
      new_stance = "forward" if perfect_stance =~ /30|40/i
      new_stance = "neutral" if perfect_stance =~ /50|60/i
      new_stance = "guarded" if perfect_stance =~ /70|80/i
      new_stance = "defensive" if perfect_stance =~ /90|100/i
    end
    if (stance() =~ /#{new_stance}/)
      return
    elsif (checkcastrt() > 0 && new_stance =~ /def/)
      return if stance() == 'guarded'
    end

    if ((force) && (perfect_stance != nil) && (CMan.known?("Stance Perfection")))
      dothistimeout("cman stance #{perfect_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    elsif (force)
      dothistimeout("stance #{new_stance}", 3, /You are now in an?|You move into an?|You fall back into a|Cast Roundtime in effect|You are unable to change/)
    else
      fput "stance #{new_stance}"
    end
end

def looter
	if @deadnpcs.count > 0
		if UserVars.osacrew["osalooter"]
			start_script "eloot"
			wait_while { running?("eloot") }
			if Spell[1635].known?
				fput "beseech ##{GameObj.right_hand.id} conserve"
			end
			stance_defensive
		end
	end
end

def cast_at_bad_thing
	if (Spell[612].known? and Spell[612].affordable?) && (@badtype == "cloud") 
		wait_rt
		Spell[612].cast
		return
	end
	if (Spell[417].known? and Spell[417].affordable?) && ((@badtype == "cloud") or (@badtype == "swarm") or (@badtype == "vine" and UserVars.osacrew["badvine"]) or (@badtype == "tempest" and UserVars.osacrew["badtempest"]) or (@badtype == "web" and UserVars.osacrew["badweb"]) or (@badtype == "void" and UserVars.osacrew["badvoid"]))
		wait_rt
		Spell[417].cast "#{@badtype}"
		return
	end
	if (Spell[505].known? and Spell[505].affordable?) && (@badtype == "cloud")
		wait_rt
		Spell[505].cast "#{@badtype}"
		return
	end
	if (Spell[119].known? and Spell[119].affordable?) && ((@badtype == "cloud") or (@badtype == "swarm") or (@badtype == "vine" and UserVars.osacrew["badvine"]) or (@badtype == "tempest" and UserVars.osacrew["badtempest"]) or (@badtype == "web" and UserVars.osacrew["badweb"]) or (@badtype == "void" and UserVars.osacrew["badvoid"]))
		wait_rt
		Spell[119].cast "#{@badtype}"
		return
	end
	if (Spell[1218].known? and Spell[1218].affordable?) && (@badtype =="cloud")
        wait_rt
        Spell[1218].cast "#{badtype}"
        return
    end
end

def creature_type
	if GameObj.npcs.count { |npc| npc.type =~ /undead/ } >= 1
		@creature_type = "undead"
	else
		@creature_type = "living"
	end
	if @creature_type == "living"
		@spell_type = "#{UserVars.osacombat["spelltype"]}"
		@spell_open = "#{UserVars.osacombat["spellopen"]}"
		@use_kneel = "#{UserVars.osacombat["use_kneel"]}"
		@use_mana_leech = "#{UserVars.osacombat["use_mana_leech"]}"
		@warding_opener = "#{UserVars.osacombat["warding_opener"]}"
		@open_cast_opener = "#{UserVars.osacombat["open_opener"]}"
		@spell_open_count = UserVars.osacombat["opener_if"].to_i
		@attack_type = "#{UserVars.osacombat["attacktype"]}"
		@osaattackopen = UserVars.osacombat["attackopen"].to_i
		@osaattackopen2 = UserVars.osacombat["attackopen2"].to_i
		@osaassault = UserVars.osacombat["assault"].to_i
		@osaaoe = UserVars.osacombat["aoe"].to_i
		@osaaoecount = UserVars.osacombat["aoe_if"].to_i
		@osaspecial = UserVars.osacombat["specialattack"].to_i
		if UserVars.osacombat["spellevoke"] == true && UserVars.osacombat["spellchan"] == false
			@cast_type = "evoke"
		elsif UserVars.osacombat["spellchan"] == true && UserVars.osacombat["spellevoke"] == false
			@cast_type = "channel"
		elsif UserVars.osacombat["spellchan"] == true && UserVars.osacombat["spellevoke"] == true
			@cast_type = "evoke channel"
		else
			@cast_type = ""
		end
	elsif @creature_type == "undead"
		@spell_type = "#{UserVars.osacombat["undeadspelltype"]}"
		@spell_open = "#{UserVars.osacombat["undeadspellopen"]}"
		@use_kneel = "#{UserVars.osacombat["undead_use_kneel"]}"
		@use_mana_leech = "#{UserVars.osacombat["undead_use_mana_leech"]}"
		@warding_opener = "#{UserVars.osacombat["undead_warding_opener"]}"
		@open_cast_opener = "#{UserVars.osacombat["undead_open_opener"]}"
		@spell_open_count = UserVars.osacombat["undead_opener_if"].to_i
		@attack_type = "#{UserVars.osacombat["undeadattacktype"]}"
		@osaattackopen = UserVars.osacombat["undeadattackopen"].to_i
		@osaattackopen2 = UserVars.osacombat["undeadattackopen2"].to_i
		@osaassault = UserVars.osacombat["undeadassault"].to_i
		@osaaoe = UserVars.osacombat["undeadaoe"].to_i
		@osaaoecount = UserVars.osacombat["undead_aoe_if"].to_i
		@osaspecial = UserVars.osacombat["undeadspecialattack"].to_i
		
		if UserVars.osacombat["undeadspellevoke"] == true && UserVars.osacombat["undeadspellchan"] == false
			@cast_type = "evoke"
		elsif UserVars.osacombat["undeadspellchan"] == true && UserVars.osacombat["undeadspellevoke"] == false
			@cast_type = "channel"
		elsif UserVars.osacombat["undeadspellchan"] == true && UserVars.osacombat["undeadspellevoke"] == true
			@cast_type = "evoke channel"
		else
			@cast_type = ""
		end
	end
end

def prep_reset
	if checkprep == "None"
		return
	else
		fput "release"
	end
	
end

def stand(stand_command = nil)
    echo "stand" if $bigshot_debug
    return if (stand_command =~ /^(?:fire|kneel|hide)/i && kneeling? && GameObj.left_hand.noun =~ /^(?:arbalest|kut'ziko|crossbow|kut'zikokra)$/)
    until (standing?)
      change_stance('defensive')
      osa_put 'stand'
    end
end

def stance_offensive
    wait_rt
	change_stance('offensive')
end

def stance_defensive
	wait_rt
    change_stance('defensive')
end
    
def stance_guarded
    change_stance('guarded')
end
	
def stand_check
	if !standing?
		wait_until {!checkstunned}
		wait_until {!checkwebbed}
		wait_until {!checkbound}
		wait_rt
		stand()
	end
end
	
def kneel_check
	if !checkkneeling
		wait_rt
		fput "kneel"
		pause 0.25
		wait_rt
	end
end

def hide_time
	checkforenemies	
	if @npcs.count >= 1
		if checkhidden
			return
		else
			result = dothistimeout "hide", 2, /fail to slip|that no one has noticed|but can't see anywhere/
			if result.to_s =~ /fail to slip/
				wait_rt
				fput "hide"
			elsif result.to_s =~ /that no one has noticed/
				return
			elsif result.to_s =~ /but can't see anywhere/
				return
			end
		end
	else
		return
	end
end

def wait_rt
	pause 0.1
	waitrt?
	waitcastrt?
end	

def reactive
	checkforenemies
	wait_rt
	if @npcs.count > 0	&& UserVars.osacrew["reactive"]
		stance_offensive
		fput "weapon #{UserVars.osacrew["reactivetype"]}"
		UserVars.osacrew["reactive"] = false
		stance_defensive
	end
	return
end
###### Basic Attack Function
			
def chicken_attack
	checkforenemies
	if @npcs.count > 0
		stance_offensive
		fput "attack"
		stance_defensive
	end
end
	
def chicken_ambush
	checkforenemies
	if @npcs.count > 0
		stance_offensive
		fput "ambush"
		stance_defensive
	end
end

def chicken_fire
	checkforenemies
	if @npcs.count > 0
		stance_offensive
		fput "fire"
		stance_defensive
	end
end

def uac_round
	#respond "Debug Output - Starting UAC Round"
	checkforenemies
	if @npcs.count >= 1
		if $osacombat_uac_current_attack == 0
			$osacombat_uac_current_attack = "jab"
		elsif $osacombat_uac_current_attack == nil
			$osacombat_uac_current_attack = "jab"
		end
		stance_offensive
		result = dothistimeout "#{$osacombat_uac_current_attack}", 2, /excellent positioning|followup jab|followup punch|followup grapple|followup kick|Roundtime/
		if result.to_s =~ /excellent positioning/
			$osacombat_uac_current_attack = "kick"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup jab/
			$osacombat_uac_current_attack = "jab"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup punch/
			$osacombat_uac_current_attack = "punch"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup grapple/
			$osacombat_uac_current_attack = "grapple"
			wait_rt
			stance_defensive
		elsif result.to_s =~ /followup kick/
			$osacombat_uac_current_attack = "kick"
			wait_rt
			stance_defensive	
		elsif result.to_s =~ /Roundtime/
			$osacombat_uac_current_attack = "jab"
			wait_rt
			stance_defensive
		end
	else
		wait_rt
		stance_defensive
		return
	end
end

####### Mstrike Setup

def mstrike_setup
	#Mstrike Detection
	if UserVars.osacombat["attacktype"] == "1"
		fput "mstrike set recovery off"
		fput "mstrike set default jab"
	elsif UserVars.osacombat["attacktype"] == "2"
		fput "mstrike set recovery off"	
		fput "mstrike set default grapple"
	elsif UserVars.osacombat["attacktype"] == "3"
		fput "mstrike set recovery off"
		fput "mstrike set default attack"
	elsif UserVars.osacombat["attacktype"] == "4"
		fput "mstrike set recovery off"
		fput "mstrike set default attack"
	elsif UserVars.osacombat["attacktype"] == "5"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacombat["attacktype"] == "6"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacombat["attacktype"] == "7"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacombat["attacktype"] == "8"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacombat["attacktype"] == "11"
		fput "mstrike set recovery off"
		fput "mstrike set default fire"
	elsif UserVars.osacombat["attacktype"] == "12"
		fput "mstrike set recovery off"
		fput "mstrike set default attack"
	# elsif UserVars.osacombat["attacktype"] == 9
		# nil
	else
		nil
	end
	if Skills.multiopponentcombat >= 190
		$osacombat_my_mstrike_focus = 6
		$osacombat_my_mstrike_open = 7
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 155
		$osacombat_my_mstrike_focus = 5
		$osacombat_my_mstrike_open = 7
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 135
		$osacombat_my_mstrike_focus = 5
		$osacombat_my_mstrike_open = 6
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 100
		$osacombat_my_mstrike_focus = 4
		$osacombat_my_mstrike_open = 6
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 90
		$osacombat_my_mstrike_focus = 4
		$osacombat_my_mstrike_open = 5
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 60
		$osacombat_my_mstrike_focus = 3
		$osacombat_my_mstrike_open = 5
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 55
		$osacombat_my_mstrike_focus = 3
		$osacombat_my_mstrike_open = 4	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 35
		$osacombat_my_mstrike_focus = 2
		$osacombat_my_mstrike_open = 4	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 30
		$osacombat_my_mstrike_focus = 2
		$osacombat_my_mstrike_open = 3	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 15
		$osacombat_my_mstrike_focus = 0
		$osacombat_my_mstrike_open = 3	
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"
	elsif Skills.multiopponentcombat >= 5
		$osacombat_my_mstrike_focus = 0
		$osacombat_my_mstrike_open = 2
		fput "mstrike set focus #{$osacombat_my_mstrike_focus}"
		fput "mstrike set open  #{$osacombat_my_mstrike_open}"			
	end	
end

################ Spell Checks to Cast
def symbol_of_mana
	if Spell["Symbol of Mana"].known? && UserVars.osacombat["symbol_of_mana"]
		if Effects::Cooldowns.active? "Symbol of Mana"
			nil
		else
			Spell["Symbol of Mana"].cast
		end
	end
end

def mana_leech
	Spell[516].cast if (Spell[516].known? && (Spell[9516].timeleft < 15) && Spell[516].affordable? && (percentmana < 50) && @use_mana_leech)
end

def sigil_of_power
	Spell["Sigil of Power"].cast if Spell["Sigil of Power"].known? && Spell["Sigil of Power"].affordable? && UserVars.osacrew["sigil_of_mana"]
end

def prep_reset
	if checkprep == "None"
		return
	else
		fput "release"
	end
end

def infuse_weapon
	if !UserVars.osacombat["infusespell"].empty?
		if Spell[UserVars.osacombat["infusespell"]].affordable?
			fput "prep #{UserVars.osacombat["infusespell"]}"
			fput "infuse ##{GameObj.right_hand.id}"
			pause 5
		else
			echo "------==== Out Of Mana ==== ------"
		end
	else
		echo "------==== No Insufion Spell Designated ==== ------"
	end
end

def infuse_shield
	if !GameObj.left_hand.id.nil?
		if Spell[1604].affordable?
			Spell[1604].cast "##{GameObj.left_hand.id}"
			wait_rt	
		else
			echo "------==== Out Of Mana ==== ------"
		end
	else
		echo "------==== No Insufion Spell Designated ==== ------"
	end
end

def can_cast
	if !@spell_type.empty?
		if !Spell[@spell_type].known?
			echo "------==== You Do Not Know That Spell. Select A Valid Attack Spell And Restart OSACombat2 ==== ------"
			exit
		end
		if Spell[@spell_type].affordable?
			wait_rt
			fput "incant #{@spell_type} #{@cast_type} target"
		else
			stance_defensive
			symbol_of_mana
			sigil_of_power
			mana_leech
			if !Spell[@spell_type].affordable?
				LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Mana!")
				wait_until {Spell[@spell_type].affordable?}
				fput "incant #{@spell_type} #{@cast_type} target"
			end
		end
	else
		echo "------==== No Spell Designated. Select An Attack Spell And Restart OSACombat ==== ------"
		exit
	end
end

def can_cast_opener
	if !@spell_open.empty?
		if !Spell[@spell_open].known?
			return
		end
		if GameObj.loot.find { |loot| loot.name =~ /vine|bramble|widgeonweed|vathor club|swallowwort|smilax|creeper|creepers|briar|ivy|tumbleweed/ }
			if @spell_open == "610"
				return
			end
		end
		if GameObj.loot.find { |loot| loot.name =~ / arm|arms|pincer|pincers|tentacle|tentacles/ }
			if @spell_open == "709"
				return
			end
		end
		if GameObj.loot.find { |loot| loot.name =~ /tempest/ }
			if @spell_open == "710"
				return
			end
		end
		if GameObj.loot.find { |loot| loot.name =~ /void/ }
			if @spell_open == "720"
				return
			end
		end	
		if GameObj.loot.find { |loot| loot.name =~ /web/ }
			if @spell_open == "118"
				return
			end
		end	
		if Spell[@spell_open].affordable? && (@npcs.count > @spell_open_count.to_i)
			if !@warding_opener
				stance_offensive
			end
			if @open_cast_opener
				multifput "prep #{@spell_open}", "cast"
			else
				fput "incant #{@spell_open} target"
			end
			stance_guarded
		else
			return
		end
	end
end

############# Bard Spell Caster

def bard_1030
	if checkmana >= 110
		checkforenemies
		if @npcs.count > 2
			fput "incant 1030 open"
			stance_guarded
			wait_rt
		end
	end
end

def bard_1008
	if checkmana >= 75
		fput "incant 1008 target"
		stance_guarded
		wait_rt	
	end
end

def bard_1035
	if Spell.active? "1035"
		return
	else
		if checkmana >= 110
			fput "incant 1035"
			stance_guarded
			wait_rt	
		end
	end
end
	
def bard_1002
	if checkmana >= 75
		fput "incant 1002 target"
		stance_guarded
		wait_rt	
	end
end	

############# Attack Openers
def return_from_berserk
	ship_type
	start_script("go2", [@berserk_return]) if !Room.current.id != @berserk_return
	wait_while { running?("go2") }
	if checkname == UserVars.osacrew["commander"]
		GameObj.pcs.each{|pc|;fput "hold ##{pc.id}"}
	else
		fput "join #{UserVars.osacrew["commander"]}"
	end
	
end

def berserk
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Berserk")
		@berserk_return = Room.current.id
		stance_offensive
		fput "berserk"
		waitfor /The redness fades from the world and you begin to breathe harder/
		looter
		stance_defensive
		return_from_berserk
	end
	return
end

def bertrandts_bellow_single
	checkforenemies
	if @npcs.count > 1 && Warcry.available?("Bellow")
		stance_offensive
		Warcry.use("Bellow", "#{@npcs.last}")
		stance_defensive
	end
	return
end

def bertrandts_bellow_open
	checkforenemies
	if @npcs.count > 1 && Warcry.available?("Bellow")
		stance_offensive
		Warcry.use("Bellow", "All")
		stance_defensive
	end
	return
end

def carns_cry_single
	checkforenemies
	if @npcs.count > 1 && Warcry.available?("Cry")
		stance_offensive
		Warcry.use("Cry", "#{@npcs.last}")
		stance_defensive
	end
	return
end

def carns_cry_open
	checkforenemies
	if @npcs.count > 1 && Warcry.available?("Cry")
		stance_offensive
		Warcry.use("Cry", "All")
		stance_defensive
	end
	return
end

def charge
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Charge")
		stance_offensive
		fput "weapon charge"
		stance_defensive
	end
	return
end
		
def cripples
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Cripple")
		stance_offensive
		fput "weapon cripple"
		stance_defensive
	end
	return
end

def crowd_press
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Crowd Press")
		stance_offensive
		fput "cman cpress"
		stance_defensive
	end
	return
end

def cutthroat
	checkforenemies
	hide_time
	if @npcs.count > 0 && CMan.available?("Cutthroat")
		stance_offensive
		fput "cman cutthroat"
		stance_defensive
	end
end

def dirt_kick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Dirt Kick")
		stance_offensive
		fput "cman dirtkick"
		stance_defensive
	end
	return
end

def disarm_manuever
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Disarm")
		stance_offensive
		fput "cman disarm"
		stance_defensive
	end
	return
end

def dislodge
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Dislogde")
		stance_offensive
		fput "cman dislodge"
		stance_defensive
	end
	return
end

def dizzying_swing
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Dizzying Swing")
		stance_offensive
		fput "weapon dizzyingswing"
		stance_defensive
	end
	return
end

def eyepoke
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Eyepoke")
		stance_offensive
		fput "cman eyepoke"
		stance_defensive
	end
end

def feint_manuever
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Feint")
		stance_offensive
		fput "cman feint"
		stance_defensive
	end
	return
end

def footstomp
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Footstomp")
		stance_offensive
		fput "cman footstomp"
		stance_defensive
	end
end

def gerrelles_growl_single
	checkforenemies
	if @npcs.count > 1 && Warcry.available?("Growl")
		stance_offensive
		Warcry.use("Growl", "#{@npcs.last}")
		stance_defensive
	end
	return
end

def gerrelles_growl_open
	checkforenemies
	if @npcs.count > 1 && Warcry.available?("Growl")
		stance_offensive
		Warcry.use("Growl", "All")
		stance_defensive
	end
	return
end

def groin_kick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Groin Kick")
		stance_offensive
		fput "cman gkick"
		stance_defensive
	end
	return
end

def hamstring
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Hamstring")
		stance_offensive
		fput "cman hamstring"
		stance_defensive
	end
	return
end

def haymaker
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Haymaker")
		stance_offensive
		fput "cman haymaker"
		stance_defensive
	end
	return
end

def headbutt
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Headbutt")
		stance_offensive
		fput "cman headbutt"
		stance_defensive
	end
	return
end

def kneebash
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Kneebash")
		stance_offensive
		fput "cman kneebash"
		stance_defensive
	end
end

def mighty_blow
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Mighty Blow")
		stance_offensive
		fput "cman mblow"
		stance_defensive
	end
end

def mug
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Mug")
		stance_offensive
		fput "cman mug"
		stance_defensive
	end
end

def nosetweak
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Nosetweak")
		stance_offensive
		fput "cman nosetweak"
		stance_defensive
	end
end

def shield_bash
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Bash")
		stance_offensive
		Shield.use("Shield Bash", "")
		stance_defensive
	end
	return
end

def shield_charge
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Charge")
		stance_offensive
		Shield.use("Shield Charge", "")
		stance_defensive
	end
	return
end

def shield_push
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Push")
		stance_offensive
		Shield.use("Shield Push", "")
		stance_defensive
	end
	return
end

def spell_cleave
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Spell Cleave")
		stance_offensive
		fput "cman scleave"
		stance_defensive
	end
	return
end

def subdue
	checkforenemies
	hide_time
	if @npcs.count > 0 && CMan.available?("Subdue")
		stance_offensive
		fput "cman subdue"
		stance_defensive
	end
end

def sunder_shield
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Sunder Shield")
		stance_offensive
		fput "cman sunder"
		stance_defensive
	end
	return
end

def sweep
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Sweep")
		stance_offensive
		fput "cman sweep"
		stance_defensive
	end
end

def swiftkick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Swiftkick")
		stance_offensive
		fput "cman swiftkick"
		stance_defensive
	end
end

def tackle_manuever
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Tackle")
		stance_offensive
		fput "cman tackle"
		stance_defensive
	end
	return
end

def templeshot
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Templeshot")
		stance_offensive
		fput "cman templeshot"
		stance_defensive
	end
end

def throatchop
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Throatchop")
		stance_offensive
		fput "cman throatchop"
		stance_defensive
	end
end

def trip
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Trip")
		stance_offensive
		fput "cman trip"
		stance_defensive
	end
	return
end

def twin_hammerfists
	checkforenemies
	if @npcs.count > 0 && Weapon.available?("Twin Hammerfists")
		stance_offensive
		fput "weapon twinhammer"
		stance_defensive
	end
	return
end

def vault_kick
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Vault Kick")
		stance_offensive
		fput "cman vaultkick"
		stance_defensive
	end
	return
end

def voln_sleep
	checkforenemies
	if @npcs.count > 1
		wait_rt
		fput "Symbol of Sleep"
		wait_rt
	end
	return
end

def att_openers2
	if @osaattackopen2 == 0
		return
	elsif @osaattackopen2 == 1
		berserk
	elsif @osaattackopen2 ==  2
		bertrandts_bellow_single
	elsif @osaattackopen2 ==  3
		bertrandts_bellow_open
	elsif @osaattackopen2 ==  4
		bull_rush
	elsif @osaattackopen2 ==  5
		carns_cry_single
	elsif @osaattackopen2 ==  6
		carns_cry_open
	elsif @osaattackopen2 ==  7
		charge
	elsif @osaattackopen2 == 8
		cripples
	elsif @osaattackopen2 == 9
		crowd_press
	elsif @osaattackopen2 ==  10
		cutthroat
	elsif @osaattackopen2 == 11
		dirt_kick
	elsif @osaattackopen2 == 12
		disarm_manuever
	elsif @osaattackopen2 == 13
		dislodge
	elsif @osaattackopen2 == 14
		dizzying_swing
	elsif @osaattackopen2 ==  15
		eyepoke
	elsif @osaattackopen2 == 16
		feint_manuever
	elsif @osaattackopen2 ==  17
		footstomp
	elsif @osaattackopen2 ==  18
		gerrelles_growl_single
	elsif @osaattackopen2 ==  19
		gerrelles_growl_open
	elsif @osaattackopen2 == 20
		groin_kick
	elsif @osaattackopen2 == 21
		hamstring
	elsif @osaattackopen2 == 22
		haymaker
	elsif @osaattackopen2 == 23
		headbutt
	elsif @osaattackopen2 ==  24
		kneebash
	elsif @osaattackopen2 ==  25
		mighty_blow
	elsif @osaattackopen2 ==  26
		mug
	elsif @osaattackopen2 ==  27
		nosetweak
	elsif @osaattackopen2 == 28
		shield_bash
	elsif @osaattackopen2 == 29
		shield_charge
	elsif @osaattackopen2 == 30
		shield_push
	elsif @osaattackopen2 ==  31
		shield_throw
	elsif @osaattackopen2 == 32
		spell_cleave
	elsif @osaattackopen2 ==  33
		subdue
	elsif @osaattackopen2 == 34
		sunder_shield
	elsif @osaattackopen2 ==  35
		sweep
	elsif @osaattackopen2 ==  36
		swiftkick
	elsif @osaattackopen2 == 37
		tackle_manuever
	elsif @osaattackopen2 ==  38
		templeshot
	elsif @osaattackopen2 ==  39
		throatchop
	elsif @osaattackopen2 == 40
		trip
	elsif @osaattackopen2 == 41
		twin_hammerfists
	elsif @osaattackopen2 == 42
		vault_kick
	elsif @osaattackopen2 == 43
		voln_sleep
	end
end
	
def att_openers
	if @osaattackopen == 0
		return
	elsif @osaattackopen == 1
		berserk
	elsif @osaattackopen ==  2
		bertrandts_bellow_single
	elsif @osaattackopen ==  3
		bertrandts_bellow_open
	elsif @osaattackopen ==  4
		bull_rush
	elsif @osaattackopen ==  5
		carns_cry_single
	elsif @osaattackopen ==  6
		carns_cry_open
	elsif @osaattackopen ==  7
		charge
	elsif @osaattackopen == 8
		cripples
	elsif @osaattackopen == 9
		crowd_press
	elsif @osaattackopen ==  10
		cutthroat
	elsif @osaattackopen == 11
		dirt_kick
	elsif @osaattackopen == 12
		disarm_manuever
	elsif @osaattackopen == 13
		dislodge
	elsif @osaattackopen == 14
		dizzying_swing
	elsif @osaattackopen ==  15
		eyepoke
	elsif @osaattackopen == 16
		feint_manuever
	elsif @osaattackopen ==  17
		footstomp
	elsif @osaattackopen ==  18
		gerrelles_growl_single
	elsif @osaattackopen ==  19
		gerrelles_growl_open
	elsif @osaattackopen == 20
		groin_kick
	elsif @osaattackopen == 21
		hamstring
	elsif @osaattackopen == 22
		haymaker
	elsif @osaattackopen == 23
		headbutt
	elsif @osaattackopen ==  24
		kneebash
	elsif @osaattackopen ==  25
		mighty_blow
	elsif @osaattackopen ==  26
		mug
	elsif @osaattackopen ==  27
		nosetweak
	elsif @osaattackopen == 28
		shield_bash
	elsif @osaattackopen == 29
		shield_charge
	elsif @osaattackopen == 30
		shield_push
	elsif @osaattackopen ==  31
		shield_throw
	elsif @osaattackopen == 32
		spell_cleave
	elsif @osaattackopen ==  33
		subdue
	elsif @osaattackopen == 34
		sunder_shield
	elsif @osaattackopen ==  35
		sweep
	elsif @osaattackopen ==  36
		swiftkick
	elsif @osaattackopen == 37
		tackle_manuever
	elsif @osaattackopen ==  38
		templeshot
	elsif @osaattackopen ==  39
		throatchop
	elsif @osaattackopen == 40
		trip
	elsif @osaattackopen == 41
		twin_hammerfists
	elsif @osaattackopen == 42
		vault_kick
	elsif @osaattackopen == 43
		voln_sleep
	end
end

################### Special Attacks

def exsanguinate
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Exsanguinate")
		stance_offensive
		fput "cman exsanguinate"
		stance_defensive
	end
	return
end

def leap_attack
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Leap Attack")
		stance_offensive
		fput "cman leapattack"
		stance_defensive
	end
	return
end

def shield_strike
	checkforenemies
	if @npcs.count > 0 && Shield.available?("Shield Strike")
		stance_offensive
		Shield.use("Shield Strike", "")
		stance_defensive
	end
	return
end

def spin_attack
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Spin Attack")
		stance_offensive
		fput "cman sattack"
		stance_defensive
	end
	return
end

def staggering_blow
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Staggering Blow")
		stance_offensive
		fput "cman sblow"
		stance_defensive
	end
	return
end
	
def true_strike
	checkforenemies
	if @npcs.count > 0 && CMan.available?("True Strike")
		stance_offensive
		fput "cman truestrike"
		stance_defensive
	end
	return
end
	
def special_att
	if @osaspecial == 0
		return
	elsif @osaspecial == 1
		exsanguinate
	elsif @osaspecial == 2
		leap_attack
	elsif @osaspecial == 3
		shield_strike
	elsif @osaspecial == 4
		spin_attack
	elsif @osaspecial == 5
		staggering_blow
	elsif @osaspecial == 6
		true_strike
	end
end

################### Assault Attacks
def barrage
	if Effects::Cooldowns.active? "Barrage"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Barrage")
		stance_offensive
		barrageresult = dothistimeout "weapon barrage", 15, /Upon firing your last arrow|Distracted, you hesitate|...wait|A little bit late for that don't you think?|You currently have no valid target/
			if barrageresult.to_s =~ /Upon firing your last arrow|Distracted, you hesitate|You currently have no valid target/
				return
			elsif barrageresult.to_s =~ /...wait|A little bit late for that don't you think?/
				barrage
			end
		stance_defensive
	end
	return
end

def flurry
	if Effects::Cooldowns.active? "Flurry"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Flurry")
		stance_offensive
		flurryresult = dothistimeout "weapon flurry", 15, /You watch for openings|Distracted, you hesitate|...wait|A little bit late for that don't you think?|You currently have no valid target/
			if flurryresult.to_s =~ /You watch for openings|Distracted, you hesitate|You currently have no valid target/
				return
			elsif flurryresult.to_s =~ /...wait|A little bit late for that don't you think?/
				flurry
			end
		stance_defensive
	end
	return
end

def fury
	if Effects::Cooldowns.active? "Fury"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Fury")
		stance_offensive
		furyresult = dothistimeout "weapon fury", 15, /You draw back and take a slow|Distracted, you hesitate|...wait|A little bit late for that don't you think?|You currently have no valid target/
			if furyresult.to_s =~ /You draw back and take a slow|Distracted, you hesitate|You currently have no valid target/
				return
			elsif furyresult.to_s =~ /...wait|A little bit late for that don't you think?/
				fury
			end
		stance_defensive
	end
	return
end

def gthrusts
	if Effects::Cooldowns.active? "Guardant Thrusts"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Guardant Thrusts")
		stance_offensive
		gthrustsresult = dothistimeout "weapon gthrusts", 15, /You complete your assault|Distracted, you hesitate|...wait|A little bit late for that don't you think?|You currently have no valid target/
			if gthrustsresult.to_s =~ /You complete your assault|Distracted, you hesitate|You currently have no valid target/
				return
			elsif gthrustsresult.to_s =~ /...wait|A little bit late for that don't you think?/
				gthrusts
			end
		stance_defensive
	end
	return
end

def pummel
	if Effects::Cooldowns.active? "Pummel"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Pummel")
		stance_offensive
		pummelresult = dothistimeout "weapon pummel", 15, /With a final snap of your wrist|Distracted, you hesitate|...wait|A little bit late for that don't you think?|You currently have no valid target/
			if pummelresult.to_s =~ /With a final snap of your wrist|Distracted, you hesitate|You currently have no valid target/
				return
			elsif pummelresult.to_s =~ /...wait|A little bit late for that don't you think?/
				pummel
			end
		stance_defensive
	end
	return
end

def thrash
	if Effects::Cooldowns.active? "Thrash"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Thrash")
		stance_offensive
		thrashresult = dothistimeout "weapon thrash", 15, /With a final, explosive breath|Distracted, you hesitate|...wait|A little bit late for that don't you think?|You currently have no valid target/
			if thrashresult.to_s =~ /With a final, explosive breath|Distracted, you hesitate|You currently have no valid target/
				return
			elsif thrashresult.to_s =~ /...wait|A little bit late for that don't you think?/
				thrash
			end
		stance_defensive
	end
	return
end

def assault_att
	if @osaassault == 0
		return
	elsif @osaassault == 1
		barrage
	elsif @osaassault == 2
		flurry
	elsif @osaassault == 3
		fury
	elsif @osaassault == 4
		gthrusts
	elsif @osaassault == 5
		pummel
	elsif @osaassault == 6
		thrash
	end
end

################### AOE Attacks	
def bull_rush
	checkforenemies
	if @npcs.count > 0 && CMan.available?("Bull Rush")
		stance_offensive
		put "cman bullrush"
		stance_defensive
	end
	return
end

def clash
	if Effects::Cooldowns.active? "Clash"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Clash")
		stance_offensive
		put "weapon clash"
		stance_defensive
	end
	return
end

def cyclone
	if Effects::Cooldowns.active? "Cyclone"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Cyclone")
		stance_offensive
		put "weapon cyclone"
		stance_defensive
	end
	return
end

def pin_down
	if Effects::Cooldowns.active? "Pin Down"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Pin Down")
		stance_offensive
		put "weapon pindown"
		stance_defensive
	end
	return
end

def pulverize
	if Effects::Cooldowns.active? "Pulverize"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Pulverize")
		stance_offensive
		put "weapon pulverize"
		stance_defensive
	end
	return
end

def shield_throw
	if Effects::Cooldowns.active? "Shield Throw"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Shield.available?("Shield Throw")
		stance_offensive
		Shield.use("Shield Throw", "")
		stance_defensive
	end
	return
end

def whirling_blade
	if Effects::Cooldowns.active? "Whirling Blade"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Whirling Blade")
		stance_offensive
		put "weapon wblade"
		stance_defensive
	end
	return
end

def whirlwind
	if Effects::Cooldowns.active? "Whirlwind"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Whirlwind")
		stance_offensive
		fput "weapon whirlwind"
		stance_defensive
	end
	return
end

def volley
	if Effects::Cooldowns.active? "Volley"
		return
	end
	checkforenemies
	if @npcs.count > @osaaoecount.to_i && Weapon.available?("Volley")
		stance_offensive
		put "weapon volley"
		stance_defensive
	end
	return
end

def aoe_att
	if @osaaoe == 0
		return
	elsif @osaaoe == 1
		bull_rush
	elsif @osaaoe == 2
		clash
	elsif @osaaoe == 3
		cyclone
	elsif @osaaoe == 4
		pin_down
	elsif @osaaoe == 5
		pulverize
	elsif @osaaoe == 6
		shield_throw
	elsif @osaaoe == 7
		whirling_blade
	elsif @osaaoe == 8
		whirlwind
	elsif @osaaoe == 9
		volley
	end
end

################# Mstrike Routine	
def mstrike_routine
	if Skills.multiopponentcombat >= 5 && UserVars.osacombat["use_mstrike"]
		if Effects::Cooldowns.active? "Multi-Strike"
			return
		else
			checkforenemies
			if @npcs.count >= 2 && $osacombat_my_mstrike_focus == 0 && $osacombat_my_mstrike_open >= 1 && UserVars.osacombat["use_mstrike"]
				if percentstamina >= 50
					stance_offensive
					fput "mstrike" 
					stance_defensive
				end
			elsif @npcs.count == 1 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1 && UserVars.osacombat["use_mstrike"]
				if percentstamina >= 50
					stance_offensive
					fput "mstrike target" 
					stance_defensive
				end
			elsif @npcs.count >= 2 && $osacombat_my_mstrike_focus >= 1 && $osacombat_my_mstrike_open >= 1 && UserVars.osacombat["use_mstrike"]
				if percentstamina >= 50
					stance_offensive
					fput "mstrike" 
					stance_defensive
				end
			end
		end
	else
		return
	end
	wait_rt
end

################# Combat Styles	

def combat	
	stand_check
	if @attack_type.to_i == 0
		# No Attack Type
		return
	elsif @attack_type.to_i == 1
		# UAC Brawling
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		uac_round
		wait_rt
		looter
	elsif @attack_type.to_i == 2
		#UAC Brawling - Stealth
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		hide_time
		uac_round
		wait_rt
		looter
	elsif @attack_type.to_i == 3
		#Melee 1H 2H
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		chicken_attack
		wait_rt
		looter
	elsif @attack_type.to_i == 4
		#Melee 1H 2H - Stealth
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		hide_time
		wait_rt
		chicken_ambush
		wait_rt
		looter
	elsif @attack_type.to_i == 5
	    #Bow
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		chicken_fire
		wait_rt
		looter
	elsif @attack_type.to_i == 6
		#Bow - Stealth
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		hide_time
		wait_rt
		chicken_fire
		wait_rt
		looter
	elsif @attack_type.to_i == 7		
		#Crossbow
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		if @use_kneel
			kneel_check
		end
		wait_rt
		chicken_fire
		wait_rt
		looter
	elsif @attack_type.to_i == 8	
		#Crossbow - Stealth
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		if @use_kneel
			kneel_check
		end
		wait_rt
		hide_time
		wait_rt
		chicken_fire
		wait_rt
		looter
	elsif @attack_type.to_i == 9
		#Bolt Spell Caster
		att_openers
		wait_rt
		att_openers2
		wait_rt
		prep_reset
		can_cast_opener
		stance_offensive
		can_cast
		stance_guarded
		looter
	elsif @attack_type.to_i == 10
		#Warding Caster
		att_openers
		wait_rt
		att_openers2
		wait_rt
		prep_reset
		can_cast_opener
		stance_defensive
		can_cast
		stance_guarded
		looter
	elsif @attack_type.to_i == 11
		#Archer W/ Spell Opener
		prep_reset
		can_cast_opener
		wait_rt
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		chicken_fire
		wait_rt
		looter
	elsif @attack_type.to_i == 12
		#Melee W/ Spell Opener
		prep_reset
		can_cast_opener
		wait_rt
		att_openers
		wait_rt
		att_openers2
		wait_rt
		special_att
		wait_rt
		aoe_att
		wait_rt
		assault_att
		wait_rt
		mstrike_routine
		wait_rt
		chicken_attack
		wait_rt		
		looter
	elsif @attack_type.to_i == 13
		#Bard Support (1035 - 1002)
		prep_reset
		bard_1035
		wait_rt
		bard_1002
		wait_rt
		looter
	elsif @attack_type.to_i == 14
		#Bard Pure (1030 - 1008)
		prep_reset
		bard_1030
		wait_rt
		bard_1008
		wait_rt
		looter			
	end			
end

############Combat Checking Start

def groupeffects
		society_script if !$society_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		society_script if $society_first_cast
		mana_focus if UserVars.osacombat["groupmana"] && $mana_focus_first_cast == false && (Room.current.title.to_s.downcase.include? "enemy")
		mana_focus if UserVars.osacombat["groupmana"] && $mana_focus_first_cast
		bravery if UserVars.osacombat["groupbravery"] && !$group_bravery_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		bravery if UserVars.osacombat["groupbravery"] && $group_bravery_first_cast
		heroism if UserVars.osacombat["groupheroism"] && !$group_heroism_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		heroism if UserVars.osacombat["groupheroism"] && $group_heroism_first_cast
		beaconofcourage if UserVars.osacombat["beaconofcourage"] && !$beacon_of_courage_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		beaconofcourage if UserVars.osacombat["beaconofcourage"] && $beacon_of_courage_first_cast
		songoftonis if UserVars.osacombat["songoftonis"] && !$song_of_tonis_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		songoftonis if UserVars.osacombat["songoftonis"] && $song_of_tonis_first_cast
		warcryshout if UserVars.osacombat["warcryshout"] && !$warcry_shout_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		warcryshout if UserVars.osacombat["warcryshout"] && $warcry_shout_first_cast
		warcryholler if UserVars.osacombat["warcryholler"] && !$warcry_holler_first_cast && (Room.current.title.to_s.downcase.include? "enemy")
		warcryholler if UserVars.osacombat["warcryholler"] && $warcry_holler_first_cast
end

def time_diff_seconds(start,finish)
	(finish - start)
end

def combat_spellup
    if running? "ecure"
		wait_until { !running?('ecure') }
	end
	if !checkprep.include? "None"
		fput "release"
	end
	if checkmana < 50
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Need Mana!")
		pause 1
	end
	wait_rt
    result = dothistimeout "incant #{@combat_spell}", 30, /Wait|...wait|Spell Hindrance|Cast Roundtime|Sing Roundtime/
        if result.to_s =~ /Wait|...wait/
            combat_spellup
        elsif result.to_s =~ /Spell Hindrance/
            wait_rt
            combat_spellup
        elsif result.to_s =~ /Cast Roundtime|Sing Roundtime/
            return
        else
            combat_spellup
        end
end

def society_script
	Spell["Sign of Warding"].cast if Spell["Sign of Warding"].known? && Spell["Sign of Warding"].affordable? && !Spell["Sign of Warding"].active? && UserVars.osacombat["sign_of_warding"]
	Spell["Sign of Defending"].cast if Spell["Sign of Defending"].known? && Spell["Sign of Defending"].affordable? && !Spell["Sign of Defending"].active? && UserVars.osacombat["sign_of_defending"]
	Spell["Sign of Shields"].cast if Spell["Sign of Shields"].known? && Spell["Sign of Shields"].affordable? && !Spell["Sign of Shields"].active? && UserVars.osacombat["sign_of_shields"]
	Spell["Sign of Striking"].cast if Spell["Sign of Striking"].known? && Spell["Sign of Striking"].affordable? && !Spell["Sign of Striking"].active? && UserVars.osacombat["sign_of_striking"]
	Spell["Sign of Smiting"].cast if Spell["Sign of Smiting"].known? && Spell["Sign of Smiting"].affordable? && !Spell["Sign of Smiting"].active? && UserVars.osacombat["sign_of_smiting"]
	Spell["Sign of Swords"].cast if Spell["Sign of Swords"].known? && Spell["Sign of Swords"].affordable? && !Spell["Sign of Swords"].active? && UserVars.osacombat["sign_of_swords"]
	Spell["Sigil of Minor Bane"].cast if Spell["Sigil of Minor Bane"].known? && Spell["Sigil of Minor Bane"].affordable? && !Spell["Sigil of Minor Bane"].active? && UserVars.osacombat["sigil_of_minor_bane"]
	Spell["Sigil of Offense"].cast if Spell["Sigil of Offense"].known? && Spell["Sigil of Offense"].affordable? && !Spell["Sigil of Offense"].active? && UserVars.osacombat["sigil_of_offense"]
	Spell["Sigil of Major Bane"].cast if Spell["Sigil of Major Bane"].known? && Spell["Sigil of Major Bane"].affordable? && !Spell["Sigil of Major Bane"].active? && UserVars.osacombat["sigil_of_major_bane"]
	Spell["Sigil of Minor Protection"].cast if Spell["Sigil of Minor Protection"].known? && Spell["Sigil of Minor Protection"].affordable? && !Spell["Sigil of Minor Protection"].active? && UserVars.osacombat["sigil_of_minor_protection"]
	Spell["Sigil of Defense"].cast if Spell["Sigil of Defense"].known? && Spell["Sigil of Defense"].affordable? && !Spell["Sigil of Defense"].active? && UserVars.osacombat["sigil_of_defense"]
	Spell["Sigil of Major Protection"].cast if Spell["Sigil of Major Protection"].known? && Spell["Sigil of Major Protection"].affordable? && !Spell["Sigil of Major Protection"].active? && UserVars.osacombat["sigil_of_major_protection"]
	Spell["Sigil of Concentration"].cast if Spell["Sigil of Concentration"].known? && Spell["Sigil of Concentration"].affordable? && !Spell["Sigil of Concentration"].active? && UserVars.osacombat["sigil_of_concentration"]
	Spell["Symbol of Courage"].cast if Spell["Symbol of Courage"].known? && Spell["Symbol of Courage"].affordable? && !Spell["Symbol of Courage"].active? && UserVars.osacombat["symbol_of_courage"]
	Spell["Symbol of Protection"].cast if Spell["Symbol of Protection"].known? && Spell["Symbol of Protection"].affordable? && !Spell["Symbol of Protection"].active? && UserVars.osacombat["symbol_of_protection"]
	Spell["Symbol of Retribution"].cast if Spell["Symbol of Retribution"].known? && Spell["Symbol of Retribution"].affordable? && !Spell["Symbol of Retribution"].active? && UserVars.osacombat["symbol_of_retribution"] && @creature_type == "undead"
	Spell["Symbol of Supremacy"].cast if Spell["Symbol of Supremacy"].known? && Spell["Symbol of Supremacy"].affordable? && !Spell["Symbol of Supremacy"].active? && UserVars.osacombat["symbol_of_supremacy"] && @creature_type == "undead"
	#$society_first_cast = nil
end

def mana_focus
	if (!Spell[1018].active? && Spell[418].known?)
		@combat_spell = "418"
		combat_spellup
		$mana_focus_first_cast = nil
	end
end

def bravery
	if UserVars.osacombat["groupbravery"] && ( $osacombat_group_bravery_start == nil || time_diff_seconds($osacombat_group_bravery_start,Time.now) > 190)
		wait_rt
		@combat_spell = "211"
		combat_spellup	if Spell[211].affordable?
		$group_bravery_first_cast = true
		$osacombat_group_bravery_start = Time.now
		waitcastrt
	end
end

def heroism
	if UserVars.osacombat["groupheroism"] && ( $osacombat_group_heroism_start == nil || time_diff_seconds($osacombat_group_heroism_start,Time.now) > 190)
		wait_rt
		@combat_spell = "215"
		combat_spellup if Spell[215].affordable?
		$group_heroism_first_cast = true
		$osacombat_group_heroism_start = Time.now
		waitcastrt
	end
end
	
def beaconofcourage
	if (UserVars.osacombat["beaconofcourage"] && !Spell[1699].active?)
		wait_rt
		@combat_spell = "1608"
		combat_spellup if Spell[1608].affordable?
		$beacon_of_courage_first_cast = true
		waitcastrt
	end
end

def songoftonis
	if (UserVars.osacombat["songoftonis"] && !Spell[1035].active? )
			wait_rt
			@combat_spell = "1035"
			combat_spellup if Spell[1035].affordable?
			$song_of_tonis_first_cast = true
			waitcastrt
		end
end

def warcryshout
    if (UserVars.osacombat["warcryshout"] && checkstamina > 20 && !Effects::Buffs.active?("Empowered (+20)"))
		wait_rt
		result = dothistimeout "warcry shout", 3, /let loose an echoing shout/
		if result.to_s =~ /let loose an echoing shout/
			$warcry_shout_first_cast = true
			return
		end
    end
end

def warcryholler
	if UserVars.osacombat["warcryholler"] && ( $osacombat_warcryholler_start == nil || time_diff_seconds($osacombat_warcryholler_start,Time.now) > 150)
		if (checkstamina > 14 || Spell[9628].active?) or (checkstamina > 29 || !Spell[9628].active? )
			wait_rt
			result = dothistimeout "warcry holler", 2, /a thundering holler|holler your war cry|You do not know/
			if result.to_s =~ /a thundering holler|You do not know/
				$osacombat_warcryholler_start = Time.now
				$warcry_holler_first_cast = true
				return
			elsif result.to_s =~ /holler your war cry/
				warcryholler
			end
		end
	end
end

def return_to_injured_room
	if Room.current.id == @captains_quarters && (Room.current.location == "Ships")
		start_script("go2", [@injured_room])
		wait_while { running?("go2") }
		unpause_script "osacrew"
	end
end

def get_captains_location
	LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["commander"] }, "Captain, I've Been Injured and Will Return Shortly")
	result = matchtimeout 30, /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Ok Crewman\, We Are At (.*) And Will Await Your Arrival"/
		if result.to_s =~ /^\[Private\]-GSIV:#{UserVars.osacrew["commander"]}\: \"Ok Crewman\, We Are At (.*) And Will Await Your Arrival"/
			@captains_location = $1
		else
			echo "Something Went Wrong, Retrying!"
			get_captains_location
	end
end

def wheres_the_captain
	if !checkpcs.include?(UserVars.osacrew["commander"]) && (!UserVars.osacrew["commander"].include?(checkname)) && (Room.current.location == "Ships")
		get_captains_location
		fput "group open"
		start_script("go2", [@captains_location])
		wait_while { running?("go2") }
	end
end

def go_to_healer
	if (!checkpcs.include? UserVars.osacrew["medicalofficer"]) and (Room.current.location == "Ships")
		wait_until {!checkstunned}
		wait_until {!checkwebbed}
		wait_until {!checkbound}
		wait_rt
		pause_script "osacrew"
		ship_type
		@injured_room = Room.current.id
		if (Room.current.id != @captains_quarters) && (Room.current.location == "Ships")
			start_script("go2", ["captains_quarters"])
			wait_while { running?("go2") }
		end
	end
	if checkpcs.include? UserVars.osacrew["medicalofficer"]
		if @healing_status == "poisoned"
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Am Poisoned!")
			#wait_until {!Effects::Debuffs.active? ("Wall of Thorns Poison 1")||(Effects::Debuffs.active? "Wall of Thorns Poison 2")||(Effects::Debuffs.active? "Wall of Thorns Poison 3")||(Effects::Debuffs.active? "Wall of Thorns Poison 4")||(Effects::Debuffs.active? "Wall of Thorns Poison 5") and !checkpoison}
			wait_until {!Effects::Debuffs.active? ("Wall of Thorns Poison 5") and (!Effects::Debuffs.active? "Wall of Thorns Poison 4") and (!Effects::Debuffs.active? "Wall of Thorns Poison 3") and (!Effects::Debuffs.active? "Wall of Thorns Poison 2") and (!Effects::Debuffs.active? "Wall of Thorns Poison 1") and !checkpoison}
			wait_until {!Effects::Debuffs.active? ("Wall of Thorns Poison 1") and (!Effects::Debuffs.active? "Wall of Thorns Poison 2") and (!Effects::Debuffs.active? "Wall of Thorns Poison 3") and (!Effects::Debuffs.active? "Wall of Thorns Poison 4") and (!Effects::Debuffs.active? "Wall of Thorns Poison 5") and !checkpoison}
			@healing_status = "clear"
			return_to_injured_room
			wheres_the_captain
		end
		if @healing_status == "injured"
			LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "I Am Injured!")
			wait_until {!XMLData.injuries.any?{|key,value,| value["wound"] > UserVars.osacrew["wound_level"].to_i}}
			@healing_status = "clear"
			return_to_injured_room
			wheres_the_captain
		end
		if @healing_status == "popped"
			if Feat.known?("Kroderine Soul")
				LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "surge KS")
			else
				LNet.send_message(attr = { 'type' => 'private', 'to' => UserVars.osacrew["medicalofficer"] }, "surge")
			end
			wait_until {!Effects::Debuffs.active? "Overexerted"}
			@healing_status = "clear"
			return_to_injured_room
			wheres_the_captain
		end
	else
		if @healing_status == "poisoned"
			respond ""
			respond " -------                                         WARNING                                                  --------"
			respond " -------                  You Appear To Be Poisoned And There Is No Herbal Cure For Poison                --------"
			respond " ------- OSACombat Will Wait Until The Poison Is No Longer Affecting You And Then Return To The Main Deck --------"
			respond " -------                      To Stop Waiting And Continue With The Poison Type                           --------"
			respond ""
			waitfor /A good positive attitude never hurts/
			@healing_status = "ignore"
			return_to_injured_room
			wheres_the_captain
		end
		if @healing_status == "injured"
			do_client ";eherbs --buy=off --mending=on --skipscars=on --yaba=on --potions=on"
			wait_while { running?("eherbs") }
			if XMLData.injuries.any?{|key,value| value["wound"] > UserVars.osacrew["wound_level"].to_i}
				respond " -------      You Still Have Serious Wounds, It Is Recommended You Seek Medical Attention Immediately -------"
				respond " -------              OSACombat Will Stay Here Where It Is Safe Until You Can Get Help                -------"
				respond " -------                   To Stop Waiting And Continue With The Wounds Type YES                      -------"
				waitfor /A good positive attitude never hurts/
				@healing_status = "ignore"
			end
			return_to_injured_room
			wheres_the_captain
		end
		if @healing_status == "popped"
			respond " -------      You Still Have Overexertion, It Is Recommended You Seek Medical Attention Immediately -------"
			respond " -------              OSACombat Will Stay Here Where It Is Safe Until You Can Get Help                -------"
			respond " -------                   To Stop Waiting And Continue With The Overexertion Type YES                      -------"
			waitfor /A good positive attitude never hurts/
			@healing_status = "ignore"
			return_to_injured_room
			wheres_the_captain
		end
	end
end

def check_for_poison
	if (Effects::Debuffs.active? "Wall of Thorns Poison 1")||(Effects::Debuffs.active? "Wall of Thorns Poison 2")||(Effects::Debuffs.active? "Wall of Thorns Poison 3")||(Effects::Debuffs.active? "Wall of Thorns Poison 4")||(Effects::Debuffs.active? "Wall of Thorns Poison 5")||(checkpoison)
		if Spell[114].known? && Spell[114].affordable?
			Spell[114].cast
			return
		end
		if @healing_status == "ignore"
			return
		else 
			@healing_status = "poisoned"
			go_to_healer
		end
	end
end

def check_for_injuries
	if XMLData.injuries.any?{|key,value| value["wound"] > UserVars.osacrew["wound_level"].to_i}
		if UserVars.osacrew["medicalofficer"].include? "#{checkname}"
			wait_while { running?("ecure") }
			wait_rt
			pause 0.5
			wait_until {!checkstunned}
			wait_until {!checkwebbed}
			wait_until {!checkbound}
			start_script "ecure"
			wait_while { running?("ecure") }
		else
			if @healing_status == "ignore"
				return
			else
				@healing_status = "injured"
				go_to_healer
			end
		end
	end
end

def check_for_popped
	if Effects::Debuffs.active? "Overexerted"
		if Spell[1107].known? && Spell[1107].affordable?
			Spell[1107].cast
			return
		end
		if @healing_status == "ignore"
			return
		else
			@healing_status = "popped"
			go_to_healer
		end
	end
end

def check_for_stunned
	if(!checkstunned && !checkdead && players = GameObj.pcs)
		if Spell[108].known?
			players.each do |p|
				wait_rt
				if p.status =~ /stun/i
					wait_until{ checkmana >= 8 }
					wait_rt
					fput "prep 108"
					fput "cast " + p.noun
					pause 3
				end
			end
		end
	end
end

def check_for_standing
	if !standing?
		if checkkneeling
			return
		end
		wait_until {!checkstunned}
		wait_until {!checkwebbed}
		wait_until {!checkbound}
		wait_rt
		fput "stand"
	end
end

def check_dead
	if checkdead == true
		respond "
			You Have Died My Friend, Please Wait Until You Are Resurrected!
				"
		LNet.send_message(attr = { 'type' => 'channel', 'channel' => UserVars.osacrew["crew"] }, "Call The Bugleman, Crewman #{checkname} Has Died!")
		if Spell[9823].known?
			Spell[9823].cast
		end
		if running? "osacrew"
			stop_script "osacrew"
		end
		exit
	end
end
def check_for_badstuff
	if GameObj.loot.find {|s| s.name =~ /tempest|web|cloud|void|swarm|vine/}
		GameObj.loot.each do |s|
			if s.name =~ /tempest|web|cloud|void|swarm|vine/
				wait_rt
				@badtype = s.noun
				cast_at_bad_thing
			end
		end
	end
end

def health_monitor
	check_dead
	check_for_injuries
	check_for_poison
	check_for_popped
	check_for_standing
	check_for_stunned
	check_for_badstuff
end

before_dying {
	wait_while { running?("eloot") }
	if Spell[1635].known?
		stop_script "beseech"
	end
	if (Spell[1625].known?) and (Stats.level >= 29)
		infuse_weapon
	end
	if Spell[1604].known?
		infuse_shield
	end
	if Spell[630].known?
		fput "tell comp behave defensive"
	end
	fput "store both"
	if UserVars.osacombat["usebriefcombat"]
		multifput "flag combatbrief off", "flag combatnonumbers off", "flag combatselffull on"
	end
	UserVars.osacrew["badvine"] = true
	UserVars.osacrew["badswarm"] = true
	UserVars.osacrew["badtempest"] = true
	UserVars.osacrew["badvoid"] = true
	UserVars.osacrew["badweb"] = true
	}
	
	if UserVars.osacombat["mob"] == true
		Spell[1213].cast if (Spell[1213].known?) && (Spell[1213].affordable?)
	end
	if UserVars.osacombat["focus"] == true
		Spell[1216].cast if (Spell[1216].known?) && (Spell[1216].affordable?)
	end
	do_client "gird"
	if (UserVars.osacrew["enemy_type"] == "undead") && (Spell[330].known?) && (Spell[330].affordable?)
		pause 1
		multifput "prep 330", "evoke ##{GameObj.right_hand.id}"
		wait_rt
		if !GameObj.left_hand.id.nil?
			multifput "prep 330", "evoke ##{GameObj.left_hand.id}"
		end
	end
	mstrike_setup
	if Spell[1635].known?
		start_script "beseech"
	end
	if (Spell[1625].known?) and (Stats.level >= 29)
		pause 1
		fput "beseech ##{GameObj.right_hand.id} conserve"
	end
	if Spell[630].known?
		fput "tell comp return"
		pause 0.5
		fput "tell comp behave offensive"
	end
	if UserVars.osacombat["spellopen"].empty? == true
		echo "
		------==== No Opener Spell Designated ==== ------
		"
	end
	if UserVars.osacombat["undeadspellopen"].empty? == true
		echo "
		------==== No Undead Opener Spell Designated ==== ------
		"
	end

def checkforenemies
	@deadnpcs = GameObj.npcs.find_all { |i| i.status =~ /dead|gone/ }
    @deadnpcs.delete_if { |npc| (npc.name =~ /animated/ && npc.name !~ /animated slush/) }
    @deadnpcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate/i && npc.name !~ /ethereal|celestial|unworldly/i }
    @deadnpcs.delete_if { |npc| npc.noun =~ /^(?:arm|appendage|claw|limb|pincer|tentacle)s?$|^(?:palpus|palpi)$/i }
	@npcs = GameObj.targets.find_all { |i| i.status !~ /dead|gone/ }
	@npcs.delete_if { |npc| (npc.name =~ /animated/ && npc.name !~ /animated slush/) }
    @npcs.delete_if { |npc| npc.noun =~ /child|traveller|scribe|merchant|dignitary|official|magistrate/i && npc.name !~ /ethereal|celestial|unworldly/i }
    @npcs.delete_if { |npc| npc.noun =~ /^(?:arm|appendage|claw|limb|pincer|tentacle)s?$|^(?:palpus|palpi)$/i }
end	

if Room.current.location == "Ships"
	$mana_focus_first_cast = false
	$group_bravery_first_cast = false
	$group_heroism_first_cast = false
	$song_of_tonis_first_cast = false
	$beacon_of_courage_first_cast = false
	$warcry_shout_first_cast = false
	$warcry_holler_first_cast = false
	$society_first_cast = false
else
	$mana_focus_first_cast = true
	$group_bravery_first_cast = true
	$group_heroism_first_cast = true
	$song_of_tonis_first_cast = true
	$beacon_of_courage_first_cast = true
	$warcry_shout_first_cast = true
	$warcry_holler_first_cast = true
	$society_first_cast = true
end
UserVars.osacrew["badweb"] = true
UserVars.osacrew["badtempest"] = true
UserVars.osacrew["badvine"] = true
UserVars.osacrew["badvoid"] = true
UserVars.osacrew["badswarm"] = true
UserVars.osacrew["badcloud"] = true
if UserVars.osacombat["usebriefcombat"]
	multifput "flag combatbrief on", "flag combatnonumbers on", "flag combatselffull off"
end

loop {
	stance_defensive
	stand_check
	health_monitor
	groupeffects
	checkforenemies
	looter
	if @npcs.count > 0
		creature_type
		reactive
		combat
	end
	sleep 0.1
}