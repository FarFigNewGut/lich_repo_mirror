=begin
	AFTER DOWNLOADING THIS SCRIPT BE SURE TO DO THIS:
	
	;autostart add --global dreavening
	
	TO MAKE SURE YOUR DREAVENING SCRIPT AUTOSTARTS AT STARTUP.
	
	Script to help cut down on the screen scroll during the Dreavenings. Just leave this script running in the background and when the Dreavening starts it will automatically squelch spell preps and casting of Dreaven's characters as well as spell buff messaging. As soon as the Dreavening is finished the script will stop squelching these lines, or at anytime you can simply kill this script and it will stop squelching messages as well.

	This only squelches the spell preps/casts of Dreaven's characters during the Dreavening.

	This script will allow you to still enjoy the Dreavening without the screen scroll if it bothers you. Some people may prefer to see the craziness of all the scrolling. The choice is YOURS!
	
	Run the setup menu by doing:
	
	;dreavening setup
	
	To fill out all of the features this script has to offer; including the ability to have the script automatically send mana for you, automatically use wracking, sigil of power, symbol of mana, and more!
	
	For the familiar timer window once your familiar window is setup to be a countdown timer simply open up your familiar window and the timer will update every minute. This script will automatically get the time whenever the next Dreavening time is announced on the Prime or Dreavening channel. It's just like magic!
	
	Additional commands:
	
	Simply enter 'running' while this script is running to automatically run to Dreaven's table.
	
	Enter 'autosend' while this script is running to engage the auto send feature. This is in case the script didn't start the autosend on its own for whatever reason.
	
	Tip commands. Since someone has made it their mission to intercept tips meant for Dreaven by making characters similar to Dreaven these nifty tip features will assure the tip gets to the right person.
	
	Simply do any of the following commands directly into the game window while the ;dreavening script is running.
	
	tip will give Dreaven whatever is in your right hand.
	
	tip nameofitem will give Dreaven whatever item you specify (example tip diamond, tip cookie, etc)
	
	tip amounthere will give Dreaven the specified amount of silvers (tip 1000, tip 10000, etc)
	
	Version 171: I THINK I fixed a bug with the script sometimes not sending mana and not squelching game lines.
	
	Version 172: Updated script to catch spell durations since the recent changes to SPELL ACTIVE list.
	
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 173

=end

if Gem.loaded_specs["gtk3"]
	gtk_version = 3
else
	gtk_version = 2
end

stuff_to_give = nil
tip_amount = nil
silence_all = nil
pre_squelch_running = nil
reserve_mana_amount = nil
amount_to_send = nil
total_saved_mana_amount = nil
figure_out_how_much_mana_to_send = nil
group_status = nil
dreavening_estimate = nil
past_dreavening_estimate = nil
end_of_dreavening_stuff = nil
at_a_dreavening = nil
people_to_send_to = nil
time_known = nil
eta_next_dreavening = nil
local_time_estimate = nil
local_time_start = nil
dreaven_is_online = nil
eat_that_bread = nil

total_minutes_remaining_101 = 0
total_minutes_remaining_104 = 0
total_minutes_remaining_105 = 0
total_minutes_remaining_107 = 0
total_minutes_remaining_112 = 0
total_minutes_remaining_401 = 0
total_minutes_remaining_406 = 0
total_minutes_remaining_503 = 0
total_minutes_remaining_509 = 0
total_minutes_remaining_602 = 0
total_minutes_remaining_618 = 0
total_minutes_remaining_1204 = 0
total_minutes_remaining_1208 = 0

if !$my_characters_array.include?(checkname)
	CharSettings['setup_has_been_run'] = nil unless CharSettings['setup_has_been_run']
end

setup = proc{
	if !$my_characters_array.include?(checkname)
		CharSettings['setup_has_been_run'] = true
	end
	Gtk.queue {
		$DREAVENING_WINDOW = Gtk::Window.new
		$DREAVENING_WINDOW.title = "dreavening"
		$DREAVENING_WINDOW.set_border_width(10)
		
		#GTK2 and GTK3 nonsense:
		if gtk_version == 2
			$DREAVENING_BOX = Gtk::VBox.new(false)
			$DREAVENING_BOX.set_border_width(5)

			$DREAVENING_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
			$DREAVENING_VERTICAL_BOX2 = Gtk::VBox.new(false, 0)
			$DREAVENING_VERTICAL_BOX3 = Gtk::VBox.new(false, 0)
		else
			$DREAVENING_BOX = Gtk::Box.new(:vertical)
			$DREAVENING_BOX.set_border_width(5)

			$DREAVENING_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
			$DREAVENING_VERTICAL_BOX2 = Gtk::Box.new(:vertical, 0)
			$DREAVENING_VERTICAL_BOX3 = Gtk::Box.new(:vertical, 0)
		end
		#####
		
		$DREAVENING_WINDOW.add($DREAVENING_BOX)
		$DREAVENING_NOTEBOOK = Gtk::Notebook.new
		$DREAVENING_NOTEBOOK.set_show_border(true)
		$DREAVENING_BOX.add($DREAVENING_NOTEBOOK)
		$DREAVENING_NOTEBOOK.append_page($DREAVENING_VERTICAL_BOX1, Gtk::Label.new('Mana Sharing'))
		$DREAVENING_NOTEBOOK.append_page($DREAVENING_VERTICAL_BOX2, Gtk::Label.new('Society Abilities'))
		$DREAVENING_NOTEBOOK.append_page($DREAVENING_VERTICAL_BOX3, Gtk::Label.new('Other Options'))
		$DREAVENING_ENTRY = Hash.new 
		$DREAVENING_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$DREAVENING_TABLE1 = Gtk::Table.new(6, 3, false)
		$DREAVENING_TABLE1.row_spacings=3
		$DREAVENING_TABLE1.column_spacings=3
		$DREAVENING_VERTICAL_BOX1.pack_start($DREAVENING_TABLE1, false, false, 0)

		$DREAVENING_TABLE2 = Gtk::Table.new(6, 3, false)
		$DREAVENING_TABLE2.row_spacings=3
		$DREAVENING_TABLE2.column_spacings=3
		$DREAVENING_VERTICAL_BOX2.pack_start($DREAVENING_TABLE2, false, false, 0)

		$DREAVENING_TABLE3 = Gtk::Table.new(6, 3, false)
		$DREAVENING_TABLE3.row_spacings=3
		$DREAVENING_TABLE3.column_spacings=3
		$DREAVENING_VERTICAL_BOX3.pack_start($DREAVENING_TABLE3, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $DREAVENING_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.dreavening[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$DREAVENING_ENTRY[variable] = entry
		$DREAVENING_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$DREAVENING_ENTRY = Hash.new
		add_label_entry($DREAVENING_TABLE1, "Auto send mana:", 'auto_send_mana')
		add_label_entry($DREAVENING_TABLE1, "Stop singing:", 'stop_singing')
		add_label_entry($DREAVENING_TABLE1, "Reserve Mana:", 'reserve_mana')
		add_label_entry($DREAVENING_TABLE2, "Auto Wrack:", 'auto_wrack')
		add_label_entry($DREAVENING_TABLE2, "Sigil of Concentration:", 'sigil_of_concentration')
		add_label_entry($DREAVENING_TABLE2, "Sigil of Power:", 'sigil_of_power')
		add_label_entry($DREAVENING_TABLE2, "Symbol of Mana:", 'symbol_of_mana')
		add_label_entry($DREAVENING_TABLE3, "Timer window:", 'timer_window')
		add_label_entry($DREAVENING_TABLE3, "Squelch all:", 'squelch_all')
		add_label_entry($DREAVENING_TABLE3, "Pre-Squelch:", 'pre_squelch')
		add_label_entry($DREAVENING_TABLE3, "Lich-Bones Auto Roll:", 'lich_bones_auto_roll')
		add_label_entry($DREAVENING_TABLE3, "Stay at table:", 'stay_at_table')
		add_label_entry($DREAVENING_TABLE3, "Auto eat bread:", 'auto_eat_bread')
		add_label_entry($DREAVENING_TABLE3, "WD Quick Whisper:", 'wd_quick_whisper')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $DREAVENING_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.dreavening[variable].nil? ? default : UserVars.dreavening[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$DREAVENING_ENTRY[variable] = checkbox
		$DREAVENING_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$DREAVENING_WINDOW.signal_connect("delete_event") {
			$DREAVENING_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {

		label = Gtk::Label.new
		label.set_markup("Leave line blank for any setting you don't want to use.\n<b>Auto send mana:</b> Enter <b>no</b> to NOT have script automatically send mana during a Dreavening.\n<b>Stop singing: </b> Enter <b>no</b> if you're a bard and you DON'T want the script to stop singing your spell songs.\n<b>Reserve Mana:</b> Enter amount of mana you want autosend to reserve, useful for bards so they don't fry their nerves with their songs renewing.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$DREAVENING_TABLE1.attach(align, 1, 2, 9, 10)

		label = Gtk::Label.new
		label.set_markup("Leave line blank for any setting you don't want to use.\n<b>Auto Wrack:</b> Enter <b>yes</b> to auto wrack. Script is careful not to spirit death you.\n<b>Sigil of Concentration:</b> Enter <b>yes</b> to automatically keep Sigil of Concentration active during a Dreavening.\n<b>Sigil of Power:</b> Enter <b>yes</b> to automatically use Sigil of Power to regain mana when needed.\n<b>Symbol of Mana:</b> Enter <b>yes</b> to automatically use Symbol of Mana to regain mana when needed.\nThis only uses Symbol of Mana outside of the cooldown and won't use deeds.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$DREAVENING_TABLE2.attach(align, 1, 2, 8, 9)
		
		label = Gtk::Label.new
		label.set_markup("<b>Timer window:</b> Enter <b>yes</b> to turn your familiar window into a Dreavening countdown timer.\nYou will lose functionality with your familiar window with this option.\n<b>Squelch all:</b> Enter <b>yes</b> to squelch EVERYTHING except for says and whispers during a Dreavening. Yes, EVERYTHING.\n<b>Pre-Squelch:</b> Enter <b>yes</b> to squelch while at the Dreavening table with Dreaven. This will also use squelch all if you have that option enabled.\nThe squelching will end shortly after leaveing Dreaven's table.\n<b>Lich-Bones Auto Roll:</b> Enter <b>yes</b> to roll automatically when it's your turn to roll as the HERO in Lich Bones.\n<b>Stay at table:</b> Enter <b>yes</b> to stay at table after receiving all spells.\n<b>Auto eat bread:</b> Enter <b>yes</b> to auto eat bread at the table when 203 is not active.\n<b>WD Quick Whisper:</b> Enter <b>yes</b> to enable quick whisper for the Savant game.\nWith this enabled typing for example \"wd look\" would automatically send the command \"whisper dreaven savant look\" to make playing the game much easier.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$DREAVENING_TABLE3.attach(align, 1, 2, 8, 9)

		$DREAVENING_WINDOW.show_all
	}
        
	$DREAVENING_SETUP_COMPLETED = false
	until($DREAVENING_SETUP_COMPLETED)
		sleep 1
	end
       
	UserVars.dreavening ||= Hash.new
	$DREAVENING_ENTRY.keys.each { |key|
		if( $DREAVENING_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $DREAVENING_ENTRY[key].active?
			UserVars.dreavening[key] = $DREAVENING_ENTRY[key].active?
		else
			if(key == 'wounded_eval')
				UserVars.dreavening[key] = $DREAVENING_ENTRY[key].text
			else
				UserVars.dreavening[key] = $DREAVENING_ENTRY[key].text.strip.downcase
			end
		end
	}
	UserVars.save()
        
	Gtk.queue {
		$DREAVENING_WINDOW.destroy
	}
}

if script.vars[1] == "setup"
	setup.call
	exit
end

wait_until { running? "infomon" }
sleep 5

reserve_mana_amount = UserVars.dreavening["reserve_mana"].to_i if UserVars.dreavening["reserve_mana"].length > 0

toggle_upstream

currently_meditating = nil #As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
next_dreavening_seconds = nil
next_dreavening_minutes = nil
next_dreavening_start = nil
update_no_schedule_timer = true
send_mana = nil
add_up_spirit_costs = nil
total_spirit_cost = 0
send_that_mana = nil
minutes_estimate = nil

master_squelch_list = /Nothing happens\.|A small spark leaps from your fingers\.\.\. but little else happens\.|You suddenly hear the voices of nature fill your mind\.|appears to be listening intently to something\.|seems slightly different\.|seems hesitant\, looking unsure of|appears less confident\.|appears less battle\-ready as a soft glow dissipates from around .* form\.|The barrier of force around .* dissipates\.|appears more secure\.|The brilliant aura fades away from|A misty halo surrounds|fingers\.\.\. but little else happens\.|suddenly stops moving light\-footedly|movements no longer appear to be influenced by a divine power as the spiritual force fades from around .* arms\.|The air stops shimmering around|spirits are no longer lifted\.|opens .* eyes\, looking slightly drained\.|eyes and begins chanting\.  Suddenly\, a small bolt of energy arcs between them\!|muscles seem to strain for an instant\.  A sense of loss can be seen in .* eyes\.|suddenly looks drained\!|blends into invisibility among the surroundings\.|You suddenly feel much more dextrous\.|You seem to blend into the surroundings better\.|Dravnib.* adjusts your .*\, improving its ability to support the weight of your gear\.|A faint disk appears next to you\, but then fades away\.|A whirl of spiritual energy streaks down from above\, creating a dully illuminated mantle around your form\.|You suddenly feel more powerful\.|Opening your mind\'s eye to the progression of time\, a myriad of possible future events fills your consciousness\.|#{$my_characters_regex}.* suddenly appears less powerful\.|looks less calm and refreshed than a moment ago\.|A sense of peace and calm resettles over the area\.|#{$my_characters_regex}.* gestures\.|#{$my_characters_regex}.* makes a complex gesture\.|Your form blurs\.|#{$my_characters_regex}.* gestures? at .*\.|A .* luminescence surrounds .*\.|Bochser.* wrings .*his.* hands\.|#{$my_characters_regex}.* appears considerably more powerful\.|A faint disk appears next to .*\, but then fades away\.|A small circular container suddenly appears and floats rather serenely over to .*\.|Glowing specks of light red energy begin to spin around .*\.|looks considerably more imposing\.|A dim aura surrounds .*\.|A .* blue glow surrounds .*\.|suddenly looks more powerful\.|A whirl of spiritual energy streaks down from above\, creating a dully illuminated mantle around .*\'s.* form\.|Eyes widening momentarily\, .* gazes into the distance before adopting a thoughtful expression\.|The air about .* shimmers slightly\.|suddenly looks much more dextrous\.|Dravnib.* adjusts .*\'s.*\, improving its ability to support the weight of .* gear\.|lines spirals outward from the center of|Your spirits are no longer lifted by stories of Kai\'s Triumphs\.|light burns in .*\'s eyes\.|light sparks in .*\'s eyes\.|You feel less drained\.|When the song ends\, you notice .* little more and is void of some natural imperfections\.|The warm glow fades from around|just left.|The .* disk goes off in search of its master\.|There is a dim flash around|veins stand out briefly\./

send_that_mana = proc{
	Spell[9714].cast if UserVars.dreavening["sigil_of_concentration"] =~ /yes/i && Spell[9714].known? && Spell[9714].affordable? && !Spell[9714].active?
	if Skills.smc > 0 || Skills.emc > 0 || Skills.mmc > 0
		if Skills.smc >= Skills.emc && Skills.smc >= Skills.mmc
			people_to_send_to = [ "Dreaven", "Najash", "Ardque", "Ryjin" ]
		elsif Skills.mmc >= Skills.emc && Skills.mmc >= Skills.smc
			people_to_send_to = [ "Snooshezis", "Dreaven", "Vonaq" ]
		else
			people_to_send_to = [ "Bochser", "Ardque", "Dreaven", "Vonaq", "Ryjin" ]
		end
	else
		people_to_send_to = nil
	end
	if people_to_send_to
		people_to_send_to.each {|i|
			figure_out_how_much_mana_to_send.call
			put "send #{amount_to_send} #{i}" if checkmana(total_saved_mana_amount)
			sleep (10 + rand(5))
		}
	end
}

add_up_spirit_costs = proc{
	total_spirit_cost = 0
	total_spirit_cost += 1 if Spell[9912].active? #Sign of Swords
	total_spirit_cost += 1 if Spell[9913].active? #Sign of Shields
	total_spirit_cost += 1 if Spell[9914].active? #Sign of Dissipation
	total_spirit_cost += 3 if Spell[9916].active? #Sign of Madness
}

eat_that_bread = proc{
	if !Spell[203].active? && UserVars.dreavening["auto_eat_bread"] =~ /yes/i
		GameObj.loot.find { |i|
			if i.name =~ /acorn and lemongrass biscuit|round of fried dough branded with a charred design|wafer of candied seeds|swirled disk of blue and yellow ground cornmeal|small wild rice and millet cake laced with maple syrup|steamed dumpling|fried dumpling|sugared barley and oat cake|sundried tomato and garlic loaf|onion and garlic-stuffed bread|thin crisp of hummus\-topped bread|brownish cream\-filled tart |filled piece of bread|thick piece of sea biscuit|greasy seal meat and oat bread|greasy willow paste bread|reddish cream\-filled tart|braid of cracked wheat bread|sugar\-dusted travel biscuit|cheese\-filled manioc ball|toasted squash blossom fritter|sweet pineapple\-glazed pumpkin loaf|garlic\-laced sweet corn cake|petal\-wrapped oatcake|mushroom and potato cake|loaf of dark crusty ale bread|thick disk of golden dwarf bread|thin wafer of crispy elven waybread|small cake of golden elven waybread|golden brown elven waybread|lemongrass biscuit|unleavened rose\-infused rice bread|dense wheat cracker studded with wheatberries|black buckwheat cracker|crispy rye cracker sprinkled with caraway seeds|flaky salted cracker dotted with tiny holes|nutty wheat cracker|scored peppercorn flatbread|airy pale\-colored teacake|stack of dark\-swirled rye crisps|disk of black olive\-laden bread|round of ground acorn bread|tiered honey\-infused flatbread|cherry\-filled loaf of dark bread|baked thyme\-dusted flatbread|manna bread|hermit bar|thick fudge brownie filled with pieces of walnut/
				3.times{
					waitrt?
					fput "stow right" if checkright
					sleep 0.2
				}
				waitrt?
				fput "swap" if checkright
				fput "get #{i}"
				sleep 2
				3.times{
					waitrt?
					fput "gob my #{checkright}" if checkright
				}
				#result = dothistimeout "sniff my #{checkright}", 2, /It smells like nice/
				#if result =~ /It smells like nice/
				#	until checkright.nil?
				#		waitrt?
				#		fput "gob my #{checkright}"
				#		sleep 0.2
				#	end
				#elsif result.nil?
				#	fput "drop right"
				#end
			end
		}
	end
}

silence = proc {
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if server_string =~ /Mirage\-like distortions surround .*#{$my_characters_regex}.* as .* prepares a spell\.\.\./
			nil
		elsif server_string =~ master_squelch_list
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence", action)
}

silence2 = proc{
	action = proc { |server_string|
		if server_string =~ /Please rephrase that command\./
			DownstreamHook.remove("#{script.name}_silence2")
			nil
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_silence2", action)
}

silence_all = proc{
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if server_string =~ /Mirage\-like distortions surround .*#{$my_characters_regex}.* as .* prepares a spell\.\.\./
			nil
		elsif server_string =~ master_squelch_list
			nil
		elsif server_string =~ /\<a exist\=\".*\" noun\=\".*\"/i && server_string !~ /waves at you|offer and are now holding|Click ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds.|You glance down|whisper|yells|recite|sing|say|exclaim|ask|roshambo|takes a drink|You make the symbol for|makes the symbol for|You and .* pound your fists in your open palms three times\.\.\.|\.\.\.It\'s a tie\!|\.\.\..* wins\!|\.\.\.You win\!|You notice|Also here\:|\<style/i
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence_all", action)
}

hook_proc = proc { |string|
	if string =~ /sign of hy|sign of he|sign of p|sign of wr|sign of da/i
		echo "A DREAVENING IS GOING ON AND YOU HAVE SET THIS SCRIPT TO AUTOMATICALLY WRACK WHEN NEEDED! I WON'T ALLOW YOU TO USE THIS SIGN!"
		nil
	else
		string
	end
}

hook_proc_tip = proc{ |string|
	if string =~ /^\<c\>give dre([a-zA-Z]+)? \d+/i && checkroom =~ /table/i
		temp_string = string
		temp_string = temp_string.split(" ")
		stuff_to_give = nil
		temp_string.each {|i|
			if i =~ /dre([a-zA-Z]+)?/i
				stuff_to_give += "Dreaven "
			elsif i =~ /\<c\>/
				stuff_to_give += "give "
			else
				stuff_to_give += "#{i} "
			end
		}
		if checkpcs.include?("Dreaven") 
			put "#{stuff_to_give}"
		else
			echo "In order to combat fake Dreavens the ;dreavening script assumes doing 'give dre' while at a table means you are trying to give Dreaven something. If you are indeed trying to give something to someone whose name starts with Dre and is not Dreaven please do ;kill dreavening then proceed. Remember to ;dreavening again afterwards."
		end
		nil
	elsif string =~ /^\<c\>give dre([a-zA-Z]+)?/i && checkroom =~ /table/i
		if checkpcs.include?("Dreaven") 
			put "give dreaven"
		else
			echo "In order to combat fake Dreavens the ;dreavening script assumes doing 'give dre' while at a table means you are trying to give Dreaven something. If you are indeed trying to give something to someone whose name starts with Dre and is not Dreaven please do ;kill dreavening then proceed. Remember to ;dreavening again afterwards."
		end
		nil
	elsif string =~ /^\<c\>give (.*) to dre([a-zA-Z]+)?/i && checkroom =~ /table/i
		temp_string = string
		temp_string = temp_string.split(" ")
		stuff_to_give = nil
		temp_string.each {|i|
			if i =~ /dre([a-zA-Z]+)?/i
				stuff_to_give += "Dreaven"
			elsif i =~ /\<c\>/
				stuff_to_give += "give "
			else
				stuff_to_give += "#{i} "
			end
		}
		if checkpcs.include?("Dreaven") 
			put "#{stuff_to_give}"
		else
			echo "In order to combat fake Dreavens the ;dreavening script assumes doing 'give dre' while at a table means you are trying to give Dreaven something. If you are indeed trying to give something to someone whose name starts with Dre and is not Dreaven please do ;kill dreavening then proceed. Remember to ;dreavening again afterwards."
		end
		nil
	else
		string
	end
}

figure_out_how_much_mana_to_send = proc{
	if reserve_mana_amount
		amount_to_send = ((checkmana - reserve_mana_amount) / 20) * 20
		total_saved_mana_amount = reserve_mana_amount + 20
	else
		amount_to_send = (checkmana / 20) * 20
		total_saved_mana_amount = 20
	end
}

end_of_dreavening_stuff = proc{
	fput "spell active"
	fput "group #{group_status}" if !$my_characters_array.include?(checkname)
	at_a_dreavening = nil
	send_mana = nil
	DownstreamHook.remove("#{script.name}_silence")
	DownstreamHook.remove("#{script.name}_silence2")
	DownstreamHook.remove("#{script.name}_silence_all")
	UpstreamHook.remove('no_spirit_death')
	pre_squelch_running = nil
}

before_dying { 
	DownstreamHook.remove("#{script.name}_silence")
	DownstreamHook.remove("#{script.name}_silence2")
	DownstreamHook.remove("#{script.name}_silence_all")
	UpstreamHook.remove('no_spirit_death')
	UpstreamHook.remove('proper_tip')
}

if UserVars.dreavening["auto_send_mana"] !~ /no/i && !$my_characters_array.include?(checkname)
	Thread.new{
		loop{
			wait_until { send_mana }
			waitrt?
			put "stop singing" if UserVars.dreavening["stop_singing"] !~ /no/i && Char.prof == "Bard"
			loop{
				if UserVars.dreavening["auto_wrack"] =~ /yes/i && Spell[9918].known?
					if !Spell[9012].active?
						add_up_spirit_costs.call
						total_spirit_check = total_spirit_cost + 5
						wait_until { checkmana(total_saved_mana_amount) || checkspirit > total_spirit_check }
						(break) if (send_mana.nil?)
						waitrt?
						send_that_mana.call if !hiding? && currently_meditating == nil
						if checkspirit > total_spirit_check && (maxmana * 0.10).floor > checkmana && send_mana
							until hiding?
								waitrt?
								put "hide"
								sleep 1
							end
							waitrt?
							put "sign of wracking" if send_mana
							sleep 0.5
							until !hiding?
								waitrt?
								put "unhide"
								sleep 1
							end
							until standing?
								waitrt?
								put "stand"
								sleep 1
							end
							send_that_mana.call
						end
					end
				else
					Spell[9718].cast if UserVars.dreavening["sigil_of_power"] =~ /yes/i && Spell[9718].known? && Spell[9718].affordable? && checkmana < (maxmana - 25)
					Spell[9813].cast if UserVars.dreavening["symbol_of_mana"] =~ /yes/i && Spell[9813].known? && Spell[9813].affordable? && !Spell[9048].active? && checkmana < (maxmana - 50)
					wait_until { checkmana(total_saved_mana_amount) }
					(break) if (send_mana.nil?)
					waitrt?
					send_that_mana.call if !hiding?
				end
				sleep (8 + rand(3))
				(break) if (send_mana.nil?)
			}
		}
	}
end

if !$my_characters_array.include?(checkname)
	if CharSettings['setup_has_been_run'] == nil
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "You must run setup before you can use this script. Type ;dreavening setup"
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
		exit
	end
end

Thread.new{
	loop{
		command = upstream_get
		if command =~ /^\<c\>running/i
			silence2.call
			kill_script "go2" if running? "go2"
			until Room.current.id == 3619
				start_script "go2", [3619]
				wait_while { running? "go2" }
				waitrt?
				sleep 1
			end
			until Room.current.id != 3619
				3.times{
					put "go Iteno table"
					sleep 1
					break if Room.current.id != 3619
					put "go Iteno table"
					sleep 1
					break if Room.current.id != 3619
					sleep 5
				}
				break if Room.current.id != 3619
				2.times{
					put "go Teburu table"
					sleep 1
					break if Room.current.id != 3619
					put "go Teburu table"
					sleep 1
					break if Room.current.id != 3619
					sleep 5
				}
				break if Room.current.id != 3619
				sleep 5
			end
		elsif command =~ /^\<c\>wd (.*)/i
			temp_command = $1
			if UserVars.dreavening["wd_quick_whisper"] =~ /yes/i
				silence2.call
				put "whisper dreaven savant #{temp_command}"
			end
		elsif command =~ /^\<c\>times/i
			silence2.call
			if time_known == "future"
				minutes_estimate = ((local_time_start - Time.now) / 60).ceil
				5.times { _respond "-----------------------------------" }
				_respond "Next Dreavening ESTIMATE: #{minutes_estimate} minutes at #{local_time_estimate}"
				5.times { _respond "-----------------------------------" }
			elsif time_known == "past"
				5.times { _respond "-----------------------------------" }
				_respond "We are past the estimate for the next Dreavening, it could be announced any minute now!"
				5.times { _respond "-----------------------------------" }
			elsif time_known == "confirmed"
				minutes_estimate = ((local_time_start - Time.now) / 60).ceil
				5.times { _respond "-----------------------------------" }
				_respond "Next Dreavening CONFIRMED: #{minutes_estimate} minutes at #{local_time_estimate}"
				5.times { _respond "-----------------------------------" }
			elsif time_known.nil?
				5.times { _respond "-----------------------------------" }
				_respond "Checking to see if Dreaven is online to send him a private message for the next Dreavening update. If he doesn't respond wait a minute and try again."
				5.times { _respond "-----------------------------------" }
				dreaven_is_online = nil
				put "find Dreaven"
				20.times{
					sleep 0.1
					break if dreaven_is_online
				}
				send_to_script 'lnet', "chat to Dreaven time" if dreaven_is_online
				put "think on Dreavening time" if dreaven_is_online
				dreaven_is_online = nil
			end
		elsif command =~ /^\<c\>autosend/i
			silence2.call
			if checkroom !~ /table/i && Room.current.id != 3619
				echo "This feature only works at the Wayside Inn and you apparently aren't there at the moment."
			elsif UserVars.dreavening["auto_send_mana"] !~ /no/i
				echo "Autosend activated!"
				send_mana = true
			else
				echo "You need to run ;dreavening setup and enter 'yes' in the 'Auto send mana' field to use this feature."
			end
		elsif command =~ /^\<c\>tip$/i
			silence2.call
			if checkright
				put "give #{checkright} to Dreaven"
			else
				echo "Doing just \"tip\" attempts to give Dreaven whatever is in your right hand. If you want to specify an item do \"tip itemname\"."
			end
		elsif command =~ /^\<c\>tip ([a-zA-Z]+)$/i
			silence2.call
			put "give #{$1} to Dreaven"
		elsif command =~ /^\<c\>tip (\d+)$/i
			silence2.call
			tip_amount = $1.to_i
			put "give dreaven #{tip_amount} silvers"
		end
	}
}

Thread.new{ #As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
loop{
		wait_until { Spell[9075].active? }
		currently_meditating = true
		wait_until { !Spell[9075].active? }
		currently_meditating = nil
		sleep 1
	}
}

Thread.new{
	loop{
		if checkroom !~ /table/i && Room.current.id != 3619
			sleep 3
			if checkroom !~ /table/i && Room.current.id != 3619
				send_mana = nil
				DownstreamHook.remove("#{script.name}_silence")
				DownstreamHook.remove("#{script.name}_silence2")
				DownstreamHook.remove("#{script.name}_silence_all")
				UpstreamHook.remove('no_spirit_death')
				pre_squelch_running = nil
			end
		end
		sleep 5
	}
}

Thread.new{
	loop{
		if UserVars.dreavening["pre_squelch"] =~ /yes/i && pre_squelch_running == nil
			if GameObj.pcs.find{|pc| pc.noun == "Dreaven"} && checkroom =~ /table/i
				pre_squelch_running = true
				if UserVars.dreavening["squelch_all"] =~ /yes/i
					silence_all.call
				else
					silence.call
				end
			end
		end
		sleep 5
	}
}

Thread.new{
	loop{
		wait_until { at_a_dreavening }
		wait_until { checkroom !~ /table/i && Room.current.id != 3619 }
		at_a_dreavening = nil
		fput "group #{group_status}" if !$my_characters_array.include?(checkname)
		sleep 2
	}
}

if UserVars.dreavening["timer_window"] =~ /yes/i
	if $frontend == 'stormfront'
		fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
		fam_window_end   = "<popStream/>\r\n"
	else
		fam_window_begin = "\034GSe\r\n"
		fam_window_end   = "\034GSf\r\n"
	end
	Thread.new{
		loop{
			100.times{puts("#{fam_window_begin}\r\n#{fam_window_end}")}
			if next_dreavening_minutes == nil
				if update_no_schedule_timer
					puts("#{fam_window_begin}No Dreavening is scheduled.\r\n#{fam_window_end}")
					update_no_schedule_timer = nil
				end
			elsif dreavening_estimate
				if past_dreavening_estimate
					puts("#{fam_window_begin}We are #{next_dreavening_minutes} minutes past the next Dreavening estimate. It could be announced any minute now!")
				else
					puts("#{fam_window_begin}Next Dreavening could POSSIBLY be in #{next_dreavening_minutes} minutes at #{next_dreavening_start.strftime("%m/%d/%Y at %I:%M %p")}.\r\n#{fam_window_end}")
				end
			else
				if next_dreavening_minutes < 1
					puts("#{fam_window_begin}Next Dreavening any minute now!\r\n#{fam_window_end}")
				else
					puts("#{fam_window_begin}Next Dreavening is in #{next_dreavening_minutes} minutes at #{next_dreavening_start.strftime("%m/%d/%Y at %I:%M %p")}.\r\n#{fam_window_end}")
				end
			end
			sleep 60
			next_dreavening_minutes -= 1
		}
	}
end

UpstreamHook.add('proper_tip', hook_proc_tip)

while line = get
	if line =~ /^Dreaven exclaims\, \"Let the spells fly\!\"$|^You exclaim\, \"Let the spells fly\!\"$/
		send_mana = true
		#Spell[9714].cast if UserVars.dreavening["sigil_of_concentration"] =~ /yes/i && Spell[9714].known? && Spell[9714].affordable? && !Spell[9714].active?
		pre_squelch_running = true
		if UserVars.dreavening["squelch_all"] =~ /yes/i
			silence_all.call
		else
			silence.call
		end
		UpstreamHook.add('no_spirit_death', hook_proc) if UserVars.dreavening["auto_wrack"] =~ /yes/i && Spell[9918].known?
		if (Skills.smc > 0 || Skills.emc > 0 || Skills.mmc > 0) && UserVars.dreavening["auto_eat_bread"] =~ /yes/i
			random_number = 1 + rand(2) 
			sleep random_number
			eat_that_bread.call
		end
	elsif line =~ /^\(OOC\) Dreaven\'s player whispers to the group\, \"Please share your spell durations\.\"/ && !$my_characters_array.include?(checkname)
		total_minutes_remaining_101 = 0
		total_minutes_remaining_104 = 0
		total_minutes_remaining_105 = 0
		total_minutes_remaining_107 = 0
		total_minutes_remaining_112 = 0
		total_minutes_remaining_401 = 0
		total_minutes_remaining_406 = 0
		total_minutes_remaining_503 = 0
		total_minutes_remaining_509 = 0
		total_minutes_remaining_602 = 0
		total_minutes_remaining_618 = 0
		total_minutes_remaining_1204 = 0
		total_minutes_remaining_1208 = 0
		fput "spell active"
		while line = get
			if line =~ /(Spirit Warding I|101) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_101 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Disease Resistance|104) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_104 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Poison Resistance|105) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_105 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Spirit Warding II|107) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_107 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Water Walking|112) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_112 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Elemental Defense I|401) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_401 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Elemental Defense II|406) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_406 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Thurfel\'s Ward|503) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_503 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /^  (Strength|509) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_509 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Resist Elements|602) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_602 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Mobility|618) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_618 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Foresight|1204) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_1204 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /(Mindward|1208) \..*\. (\d+)\:(\d+)\:\d+/
				total_minutes_remaining_1208 = ($2.to_i * 60) + $3.to_i
			elsif line =~ /^\(OOC\) Dreaven\'s player whispers to the group\, \"Got your spell durations\?\"/
				random_number = 1 + rand(5) 
				sleep random_number
				fput "whisper ooc Dreaven Spell durations: Spirit Warding I: #{total_minutes_remaining_101}, Disease Resistance: #{total_minutes_remaining_104}, Poison Resistance: #{total_minutes_remaining_105}, Spirit Warding II: #{total_minutes_remaining_107}, Water Walking: #{total_minutes_remaining_112}, Elemental Defense I: #{total_minutes_remaining_401}, Elemental Defense II: #{total_minutes_remaining_406}, Thurfel's Ward: #{total_minutes_remaining_503}, Strength: #{total_minutes_remaining_509}, Resist Elements: #{total_minutes_remaining_602}, Mobility: #{total_minutes_remaining_618}, Foresight: #{total_minutes_remaining_1204}, Mindward: #{total_minutes_remaining_1208}"
				break
			end
		end
	elsif line =~ /^Dreaven says\, \"We will be starting in two minutes/
		Spell[9714].cast if UserVars.dreavening["sigil_of_concentration"] =~ /yes/i && Spell[9714].known? && Spell[9714].affordable? && !Spell[9714].active?
		if (Skills.smc > 0 || Skills.emc > 0 || Skills.mmc > 0) && UserVars.dreavening["auto_eat_bread"] =~ /yes/i
			random_number = 1 + rand(10) 
			sleep random_number
			eat_that_bread.call
		end
	elsif line =~ /^You kneel down and begin to meditate on your lot in life\.|^You begin to meditate on your lot in life\./#As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
		currently_meditating = true
	elsif line =~ /^You wake from your meditation\, yet a deep feeling of relaxation remains present\./#As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
		currently_meditating = nil
	elsif line =~ /^Dreaven exclaims\, \"That\'s everything\!\"$|^You exclaim\, \"That\'s everything\!\"$/
		fput "spell active"
		end_of_dreavening_stuff.call
	elsif line =~ /^Dreaven disbands his group\./
		fput "group #{group_status}" if !$my_characters_array.include?(checkname)
	elsif line =~ /^Dreaven says\, \"We will be starting soon\.\"/ && !$my_characters_array.include?(checkname)
		at_a_dreavening = true
		waitrt?
		if !$my_characters_array.include?(checkname)
			fput "group"
			while line = get
				if line =~ /^Your group status is currently closed\./
					group_status = "close"
					break
				elsif line =~ /^Your group status is currently open\./
					group_status = "open"
					break
				end
			end
		end
		fput "disband"
		fput "leave"
		fput "group close"
		random_number = 1 + rand(3) 
		sleep random_number
		fput "join dreaven"
		until standing?
			waitrt?
			fput "stand"
			sleep 0.3
		end
	elsif line =~ /^Dreaven tried to hold your hand\, but your group status is closed\.|^Dreaven tried to hold your hand\, but you are already leading a group\.|^Dreaven tried to add you to his group\, but you are a member of/
		waitrt?
		fput "join Dreaven"
	elsif line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"No Dreavening is scheduled\./i
		past_dreavening_estimate = nil
		dreavening_estimate = nil
		next_dreavening_minutes = nil
		time_known = nil
	elsif line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"STARTING FINAL GROUP\./i || line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"We are starting a new group/i ||line =~ /^\[Dreavening\]\-GSIV\:Dreaven\: \"We are starting soon\! Get here NOW if you want spells\!/ || line =~ /^\[Dreavening\]\-GSIV\:Dreaven\ \"Dreavening currently in progress/
		past_dreavening_estimate = nil
		dreavening_estimate = nil
		next_dreavening_minutes = nil
		time_known = nil
	elsif line =~ /^\[Dreavening\]\-GSIV\:Dreaven\: \"(\d+) minutes until the next Dreavening/ || line =~ /^\[Dreavening\]\-GSIV\:Dreaven\: \"Next Dreavening is in (\d+) minutes/
		past_dreavening_estimate = nil
		dreavening_estimate = nil
		next_dreavening_minutes = $1.to_i
		next_dreavening_seconds = (next_dreavening_minutes * 60)
		next_dreavening_start = Time.now + next_dreavening_seconds
		update_no_schedule_timer = true
		eta_next_dreavening = $1.to_i
		local_time_start = (Time.now + (eta_next_dreavening * 60))
		local_time_estimate = (Time.now + (eta_next_dreavening * 60)).strftime("%I:%M %p")
		time_known = "confirmed"
	elsif line =~ /^\[Dreavening\]\-GSIV\:Dreaven\: .*ETA.*\: (\d+) minutes/
		past_dreavening_estimate = nil
		dreavening_estimate = true
		next_dreavening_minutes = $1.to_i
		next_dreavening_seconds = (next_dreavening_minutes * 60)
		next_dreavening_start = Time.now + next_dreavening_seconds
		update_no_schedule_timer = true
		eta_next_dreavening = $1.to_i
		local_time_start = (Time.now + (eta_next_dreavening * 60))
		local_time_estimate = (Time.now + (eta_next_dreavening * 60)).strftime("%I:%M %p")
		time_known = "future"
	elsif line =~ /^\[Dreavening\]\-GSIV\:Dreaven\: .*We are (\d+) minutes past our estimate for the next Dreavening./i
		past_dreavening_estimate = true
		dreavening_estimate = true
		next_dreavening_minutes = $1.to_i
		next_dreavening_seconds = (next_dreavening_minutes * 60)
		next_dreavening_start = Time.now + next_dreavening_seconds
		update_no_schedule_timer = true
		time_known = "past"
	elsif line =~ /^#{$my_characters_regex} offers you .*\.  Click ACCEPT to accept the offer or DECLINE to decline it\.  The offer will expire in 30 seconds\./ && !$my_characters_array.include?(checkname)
		fput "accept"
	elsif line =~ /^Dreaven whispers\, \"You\'re the HERO\! Type CLENCH FIST to roll\.\"$/i && UserVars.dreavening["lich_bones_auto_roll"] =~ /yes/i
		fput "clench fist"
	elsif line =~ /^Dreaven whispers\, \"You\'re all set\!\"/
		fput "spell active"
		unless UserVars.dreavening["stay_at_table"] == "yes"
			if UserVars.dreavening["auto_send_mana"] !~ /no/i
				figure_out_how_much_mana_to_send.call
				waitrt?
				fput "send #{amount_to_send} dreaven" if checkmana(total_saved_mana_amount)
			end
			fput "out"
			end_of_dreavening_stuff.call
		end
	elsif line =~ /^Dreaven$/
		dreaven_is_online = true
	end
end