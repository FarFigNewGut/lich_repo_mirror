=begin
  widgetsearch.lic

  script to scan your already open inventory containers for tiny brass gear and output list.
  Also allows for grabbing a specific gear based on CLI usage
  
  Example:
    ;widgetsearch           - lists all gears found
    ;widgetsearch 60        - attempts to grab the first theme #60 gear found
    ;widgetsearch duration  - attempts to grab the first duration gear found
    ;widgetsearch uses      - attempts to grab the first x\day uses gear found

        author: Tysong
  contributors: Luxelle
          game: Gemstone
          tags: duskruin, battle vault, Fizwixit, widget, gear
       version: 1.0.1
      required: Lich >= 5.7.0

  Version Control:
    Major_change.feature_addition.bugfix
  v1.0.1  (2025-08-22)
    - Now supports scanning a bag you are holding as well
  v1.0.0  (2025-08-22)
    - Initial release
=end

module WidgetSearch
  @gear_descriptions = {
    "1" => "A stunning viridian-sanded cove",
    "2" => "An amphitheatre in the clouds",
    "3" => "An elegant salon with sanguine roses and alabaster floors",
    "4" => "A darkened bakery with hints of trouble",
    "5" => "A waterlily pond where capyxitas frolic",
    "6" => "A rudimentary thatched hut",
    "7" => "A cozy tavern",
    "8" => "Backstage at a darkened theatre with a view from a prop closet",
    "9" => "A darkened stage with its curtains closed",
    "10" => "A proscenium theatre with a box seat view",
    "11" => "A giant mushroom theatre",
    "12" => "A crafting room",
    "13" => "A fighting ring outside a ramshackle barn",
    "14" => "A gazebo filled with teadragons",
    "15" => "A cozy library",
    "16" => "An ancient library",
    "17" => "A dungeon stage",
    "18" => "A magistrate's hall with an observation chamber",
    "19" => "A dock deep within a bayou",
    "20" => "A beautiful autumn clearing",
    "21" => "An isolated beach with a hidden cavern",
    "22" => "A moonlit meadow",
    "23" => "A ruin deep in the forest",
    "24" => "A cemetery and its mausoleum",
    "25" => "A grand foyer with a bit of a blood problem",
    "26" => "A training ground with a view from the crenels",
    "27" => "A tower somewhen",
    "28" => "A map-covered chamber",
    "29" => "A soothing tea thief hideaway",
    "30" => "An opulent library with a secret",
    "31" => "Somewhere in the stars, with a view from a distant nebula",
    "32" => "A bug jar adventure",
    "33" => "A throne room and audience gallery",
    "34" => "A stagnant mire",
    "35" => "A blossoming garden",
    "36" => "A desert sanctuary",
    "37" => "A prison cell",
    "38" => "A festive performance circle embraced by market sprawl",
    "39" => "A bend in a lazy river, sheltered by a great oak",
    "40" => "An ill-traveled road filled with fog",
    "41" => "A manicured lawn with a gazebo",
    "42" => "A moonlit road and a fortuneteller's tent",
    "43" => "A snowy mountain pass",
    "44" => "A misty wood with a fire-warmed clearing",
    "45" => "A lair on a volcanic cliff",
    "46" => "A beleria-strewn square",
    "47" => "A Lornonite altar",
    "48" => "A lakeshore in the woods",
    "49" => "An ephemeral oasis",
    "50" => "A forge yard",
    "51" => "A couturier's garden",
    "52" => "An expansive cookery",
    "53" => "A swamp and its hovel",
    "54" => "An elegant winter-themed ballroom",
    "55" => "A secure strategy area",
    "56" => "An alchemical laboratory",
    "57" => "An arid city courtyard enclosed by multifoil arches",
    "58" => "A ceremonial terrace in the southern jungles",
    "59" => "A lone altar in a desert wasteland",
    "60" => "A darkened alley with a seedy tavern",
    "61" => "A desert bazaar",
    "62" => "A jungle bazaar on the waterways",
    "63" => "A royal salon with a secret",
    "64" => "An outdoor theatre-in-the-round",
    "65" => "A lecture hall",
    "66" => "Somewhere over Wehnimer's Landing",
    "uses" => "x\day increase, max of 4",
    "duration" => "increase duration from 30 to 60 minutes",
  }
  def self.populate_inventory
    # populate GameObj.containers properly!
    #echo("GameObj.containers populating...")
    (GameObj.inv + [GameObj.right_hand] + [GameObj.left_hand]).each do |item|
      # echo "item: #{item.name} | type: #{item.type}"
      next if GameObj.containers.keys.include?(item.id.to_s) && item.contents.is_a?(Array)
      next if item.type =~ /jewelry|weapon|armor|uncommon/
      next if item.type.nil?

      # check out whats inside
      lines = Lich::Util.issue_command("look in ##{item.id}", /<exposeContainer|<dialogData|<container|you glance|There is nothing/i, usexml: true, silent: true, quiet: true)
      next if lines.any? { |l| l =~ /You glance|There is nothing/i }

      20.times {
        break if GameObj.containers.keys.include?(item.id) && item.contents.is_a?(Array)
        sleep 0.1
      }
    end
    #echo("GameObj.containers populated!")
  end

  def self.find_items(item_name)
    all_items = {}

    (GameObj.inv + [GameObj.right_hand] + [GameObj.left_hand]).each { |container|
      next unless GameObj.containers.keys.include?(container.id.to_s)
      next unless container.contents.is_a?(Array)
      
      container.contents.each do |thing|
        if thing.name =~ item_name
          all_items[thing.id] = container
        end
      end
    }
    
    return all_items
  end
  
  def self.analyze_items(found_items)
    analyze_results = {}
    echo("Analyzying #{found_items.size} items, please be patient, do not do anything until finished.")
    found_items.each do |key, value|
      lines = Lich::Util.issue_command("analyze ##{key}", /You (?:analyze|inspect) the <a exist="\d+" noun="gear">brass gear<\/a> and /, usexml: true, silent: true, quiet: true)
      lines.each { |line|
        if line =~ /The theme for this is "(\d+) -/
          analyze_results[$1] ||= []
          analyze_results[$1].push(key => value)
        elsif line =~ /increasing its total minutes per use from 30 to 60 minutes/
          analyze_results["duration"] ||= []
          analyze_results["duration"].push(key => value)        
        elsif line =~ /total # of uses per day/
          analyze_results["uses"] ||= []
          analyze_results["uses"].push(key => value)
        end
      }
    end
    return analyze_results
  end

  def self.main
    populate_inventory
    found_items = find_items(/^tiny brass gear$/)
    if found_items.empty?
      echo("No found items!")
      exit
    end
    
    analyze_results = analyze_items(found_items)
    argv = Script.current.vars[0]
    case argv
    when /\d+/
      if result = analyze_results[argv]
        echo("You have #{result.size} matching #{argv}.")
        #result.each { |thing|
        #  echo "#{GameObj[thing.flatten[0]]} - inside of #{thing.flatten[1].name}"
        #}
        echo("Retrieving one from #{result.first.flatten[1].name} now.")
        fput("get ##{result.first.flatten[0]}")
      else
        echo("nothing found matching #{argv}")
      end
    when /duration/
      if result = analyze_results[argv]
        echo("You have #{result.size} matching #{argv}.")
        #result.each { |thing|
        #  echo "#{GameObj[thing.flatten[0]]} - inside of #{thing.flatten[1].name}"
        #}
        echo("Retrieving one from #{result.first.flatten[1].name} now.")
        fput("get ##{result.first.flatten[0]}")
      else
        echo("nothing found matching #{argv}")
      end
    when /uses?/
      if result = analyze_results[argv]
        echo("You have #{result.size} matching #{argv}.")
        #result.each { |thing|
        #  echo "#{GameObj[thing.flatten[0]]} - inside of #{thing.flatten[1].name}"
        #}
        echo("Retrieving one from #{result.first.flatten[1].name} now.")
        fput("get ##{result.first.flatten[0]}")
      else
        echo("nothing found matching #{argv}")
      end
    else # "scan", "report", "list"
      analyze_results.sort_by { |key, value| key.to_i }.each { |key, value|
        echo "#{key} - #{value.size} found - #{@gear_descriptions[key]}"
      }
    end
  end
end

WidgetSearch.main