=begin
    sea-charts - A brutalized version of narost/xnarost for ocean mapping Open Sea Adventures.

     author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: osa, map, ships, sailing
    version: 2022.11.27.1

    Version History:
        2022.11.27.1 - Support for lastknown room when lost.
        2022.11.25.1 - Cleaned it up, a lot! Split out mapping and narost functions.
        2022.11.20.1 - Created based on xnarost 0.5.1 (2017-05-29)

    Credits
        * Narost features stolen from xNarost
        * Ship icon from https://www.flaticon.com/free-icon/pirate-ship_1044564
        * Icon given transparency with https://onlinepngtools.com/create-transparent-png
        * Map from https://docs.google.com/spreadsheets/d/1Ia_IDE0MAaf_uqgO7FRKJslaUZ4PIGJI7_KQfu-qF2Q/edit#gid=999257949
          - munged to be contiguous and consistent scaling, then converted to an image
=end

i_stand_alone
silence_me
clear
no_pause_all

unless HAVE_GTK
    respond
    respond 'error: ruby-gtk bindings are not installed or failed to load'
    respond
    exit
end

unless defined?(Gtk.queue)
    respond
    respond 'Your version of Lich is too old for this script.'
    respond
    exit
end

if $SAFE > 0
    # We load a map file and ship location indicator
    echo "This script needs to be trusted to work properly. (;trust #{script.name})"
    exit
end

message_bold = lambda{|text|
    stringArray  = Array.new
    stringArray  = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
    begin_text   = "<pushBold\/>"
    end_text     = "<popBold\/>"

    if $fake_stormfront
        begin_text = "\034GSL\r\n "
        end_text   = "\034GSM\r\n "
    end

    stringArray.each { |line|
        puts "#{begin_text}#{line.gsub('\n','')}#{end_text}"
    }
}

trouble = script.vars.any? {|var| var =~ /trouble/i}

Settings.load
setting_keep_above = Settings['keep_above']
setting_keep_above = true if setting_keep_above.nil?
setting_follow = true
menu_follow = nil
window_width = Settings['window_width'] || 400
window_height = Settings['window_height'] || 300
window_position = Settings['window_position'] || [0, 0]

if trouble
    echo "Settings['window_width']: #{Settings['window_width'].inspect}"
    echo "Settings['window_height']: #{Settings['window_height'].inspect}"
    echo "Settings['window_position']: #{Settings['window_position'].inspect}"
    echo "window_width: #{window_width.inspect}"
    echo "window_height: #{window_height.inspect}"
    echo "window_position: #{window_position.inspect}"
end

if !running? 'osa-map-plugin'
    start_script 'osa-map-plugin'
end

global_scale = Settings['global_scale']
global_scale = 1.0 if global_scale.nil?
map_scale = Settings['map_scale'] || Hash.new

$seachart_maps ||= Hash.new

scale = nil
map_gutter = 100
seacharts_exit = false
dragging = false
map_dir = "#{$lich_dir}maps#{File::Separator}"
window_resized = true
current_room = nil
last_known_room = nil
current_map = nil
start = false

window = nil
scroller = nil
layout = nil
image = nil
circle_width = nil
circle_height = nil
circle_image = nil

question_width = nil
question_height = nil
question_image = nil

menu = nil
menu_scale_list = nil
scale_list = [10, 25, 33, 50, 66, 75, 90, 100, 110, 125, 133, 150, 166, 175, 190, 200]

# Default to a considerably less pretty and considerably less memory hungry map, but it has numbers!
map_image_name = "map-sea-charts.png"
position_adjustment = { :row_offset => 0, :row_height => 20, :column_offset => 0, :column_width => 21 }

if script.vars.include?("--fancy")
    # Optional fancy map
    map_image_name = "Open_Sea_Adventures.jpg"
    position_adjustment = { :row_offset => 0, :row_height => 25, :column_offset => 0, :column_width => 25, }
end

map_to_display = "#{map_dir}#{map_image_name}"

# A map is necessary to do anything. Don't make users do the download explicitly.
unless File.exists?("#{map_to_display}")
    start_script 'repository', [ 'download', map_image_name ]

    wait_while { running?('repository') }
    unless File.exists?("#{SCRIPT_DIR}/#{map_image_name}")
        message_bold.call("Failed to download map.");
        exit
    end

    File.rename "#{SCRIPT_DIR}/#{map_image_name}", "#{map_to_display}"
end

# This one is small enough to just make.
unless File.exists?("#{map_dir}ship-icon.png")
    #File.open("#{map_dir}ship-icon.png", "rb") do |file| puts Base64.strict_encode64(file.read) end
    File.open("#{map_dir}ship-icon.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAqZJREFUOE+V0l9IU1EcB/Dfvdu6u/ujdjf/bI6Z0mp6t1w3FWeCZD4U9uCwh4ooqB6CKCiKIMq3iKDoISHJRCGViKTsj6D9IwpTQ2yurA0TxbmpE3VuN727954bGoHlWnQeD7/zOd9zfj8MEiyz2VxqpzRNnCB2D0e5U6Ojo/N/lmP/AjJVxC2FDNePhFna7/fP/g+A7SnMm4wgMfym37sZAKR4l61JkJtLH8NxAFGUBAWK1XAIcbhceXX5sCCIwvCwt3k1tAaw2RyijbbjgiBAkjZ5pXYhEgaDwQg+n3eqs+tpxl8BmrYfMJmyWvKsNvji/QTpaWnACwIEg0HYUbYTuNiS9KDtvsvrHWr/hfyWoIApuqxPTbvgyC+AUGgSDJkZoNGooae7FxyObUBRKdDQWHfG7XbfiAvQNHMi02iozd/CwPT0JAy4PwBCItB5W6HE6QQkCVB/5/bBoSFPS1xgebN0e5lotzP4xMQY6BXid15C2DwvJ8vLK2Bw8ONsY1O9LuEnMkzhE7VSGWWSwpUZJK7FkwlpICjNjEeIZwuRKPJ4Bo4mArBzlZa7alDuBxXCER8CTJIBKTMCkBj/bW72Zn3HyNnVM7GmjYecudJGEwsuSwCmozLAdVawGDTQ+jIM3hAmNrzyyBM+YV+Jvl+nEpkjTBQI+c/hkyu1YK2Zw6qd6Y/a3k9VxQWKKqpPB7721vn9/sVLLn0sK1XDF+nGVQoc4HnAzC5yiD3fOpZuMplIo7XweN+LhyutxIp3H56wl1XpLRsohedthy8mSIs5xS6aIli8996ViILK5jbtOpm6XhHme7oefyY1KVTj9YvZ15o7o+1NtT6MKd8bzs7JioCwhEi1ll9HEGhZnpkKkEssKzflWCKrI1NaUsWLaKWm791r8QdDMA5aWVQlFQAAAABJRU5ErkJggg=='.unpack('m').join(''))}
end

unless File.exists?("#{map_dir}question-mark.png")
    File.open("#{map_dir}question-mark.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAC4jAAAuIwF4pT92AAAB50lEQVQ4y33SPWiVdxQG8N95r7fIzSSIDoWgllILKpRAHXRy0KFDJV36QaGTLhHMKA5ScBFL9ygIwS2D4hq0pUUCokhxqB1akSoxTaIm977v+zcQ79/Be8tNjHm285wPnvOcE9ZhOWKoyPnb4GiD3ZCZ7fJbREwO5bw4WF8MBh2++SDnPxscyFx62HD8fsMXmYvYGTn/UXLGRpgLF2puV2G4zz1nf2KkitjWU7e9YjoxsVY2X1fcSREtWOJQzV+JnMgl3Zqf4WGzWVRMl5wDVUSrZq5iL7x6G88mqpIf2nyeuJrINeOQIraXzD3hQy/4vs1UX01iuGSmzdk+94g9idzm1z5XcbHmvJLJDt/ZBImJnoIf+9wSR2pmJO4lRjZq/Kkomh1u9Lz4ve8RPC3sWmZu0wGJ8USuuPyyKLYO5hYjPmnzrMg8WOGzjQassr9n2vi2bvfVYK6Z8+4t/FOshJtNjr9n/UmcHKK7PhGMvuaWFNFKLCxycH1Rhyu9/des+G/4OLHwMmIHqPmq5PHgF8IsY/Nc+4+P/vclolVxtxo4M3jB6cTj5XB4k3N+WvHgnVceeI7RmvmK6Q6nljiYGCk5UXO9YrnN2Dov1qKMaK3KX27JjjXYB13+Dn551Cim9r3uLg3WvwFaTsvwrzm3vwAAAABJRU5ErkJggg=='.unpack('m').join(''))}
end

change_map = proc {|file_name, suppress_scroll=false|
    current_map = file_name

    if File.exists?(current_map)
        if global_scale
            scale = global_scale
        else
            scale = map_scale[current_map] || 1.0
        end

        menu_scale_list.children[scale_list.index((scale*100).to_i)+1].active = true

        unless $seachart_maps[current_map] and ($seachart_maps[current_map]['scale'] == scale)
            $seachart_maps[current_map] = Hash.new
            format, width, height = Gdk::Pixbuf.get_file_info(current_map)
            $seachart_maps[current_map]['width'] = width
            $seachart_maps[current_map]['height'] = height
            $seachart_maps[current_map]['scale'] = scale

            if scale == 1
                $seachart_maps[current_map]['pixbuf'] = Gdk::Pixbuf.new(current_map)
            else
                $seachart_maps[current_map]['pixbuf'] = Gdk::Pixbuf.new(current_map).scale(width*scale, height*scale)
            end
        end

        image.set_pixbuf($seachart_maps[current_map]['pixbuf'])
        image.set_size_request($seachart_maps[current_map]['width']*scale, $seachart_maps[current_map]['height']*scale)
        layout.set_size(($seachart_maps[current_map]['width']*scale) + map_gutter*2, ($seachart_maps[current_map]['height']*scale) + map_gutter*2)
        layout.move(image, map_gutter, map_gutter) unless suppress_scroll
    else
        echo "file not found: #{current_map}"
    end
}

change_room = proc {|suppress_scroll = false|
    if current_room.nil?
        exit
    end

    icon_image = circle_image
    mark_room = current_room

    circle_image.hide
    question_image.hide

    if (!current_room.is_mapped?)
        if (last_known_room.is_mapped?)
            mark_room = last_known_room
            icon_image = question_image
        else
            icon_image = nil
            message_bold.call("Hiding both #{mark_room.id}: #{!last_known_room.nil?}, #{last_known_room.is_mapped?}") if $osadebug
        end
    end

    if !icon_image.nil?
        suppress_scroll = suppress_scroll || !mark_room.is_mapped?
        message_bold.call("Changing room to #{mark_room.id}")  if $osadebug

        xadjust = (scale * (position_adjustment[:row_height] * (mark_room.column.to_i + position_adjustment[:column_offset]))).to_i
        yadjust = (scale * (position_adjustment[:column_width] * (mark_room.row.to_i + position_adjustment[:row_offset]))).to_i

        if window_resized
            window_resized = false
            layout.set_size(($seachart_maps[current_map]['width']*scale) + (map_gutter*2), ($seachart_maps[current_map]['height']*scale) + (map_gutter*2))
            layout.move(image, map_gutter, map_gutter)
        end

        x_icon_border = ((position_adjustment[:row_height] * scale) - circle_height) / 2
        y_icon_border = ((position_adjustment[:column_width] * scale)- circle_width) / 2
        x = map_gutter + xadjust + x_icon_border
        y = map_gutter + yadjust + y_icon_border

        unless suppress_scroll
            scroller.hadjustment.value = x - (scroller.allocation.width.to_i/2)
            scroller.vadjustment.value = y - (scroller.allocation.height.to_i/2)
        end

        layout.move(icon_image, x, y)

        icon_image.show

        title = "Sea Charts: #{Char.name} - #{mark_room.location}"

        if !current_room.is_mapped?
            title += " (Estimated)"
        end

        window.title = title
    else
        title = "Sea Charts: #{Char.name} - Lost?"
        window.title = title
    end

}

Gtk.queue {
    window = Gtk::Window.new
    window.title = "Sea Charts: #{Char.name}"
    window.signal_connect('delete_event') {seacharts_exit = true}
    window.signal_connect('size_allocate') {window_resized = true}

    scroller = Gtk::ScrolledWindow.new
    scroller.border_width = 0
    scroller.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)

    window.add(scroller)

    layout = Gtk::Layout.new
    scroller.add(layout)

    image = Gtk::Image.new
    layout.put(image, 0, 0)

    format, width, height = Gdk::Pixbuf.get_file_info("#{map_dir}question-mark.png")
    circle_width = width
    circle_height = height
    circle_pixbuf = Gdk::Pixbuf.new("#{$lich_dir}maps/ship-icon.png")
    circle_image = Gtk::Image.new
    circle_image.set_pixbuf(circle_pixbuf)
    layout.put(circle_image, circle_width, circle_height)

    format, width, height = Gdk::Pixbuf.get_file_info("#{map_dir}question-mark.png")
    question_width = width
    question_height = height
    question_pixbuf = Gdk::Pixbuf.new("#{map_dir}question-mark.png")
    question_image = Gtk::Image.new
    question_image.set_pixbuf(question_pixbuf)
    layout.put(question_image, question_width, question_height)

    menu_follow = Gtk::CheckMenuItem.new('follow current room')
    menu_follow.active = true
    setting_follow = true
    menu_follow.signal_connect('toggled') {|owner| setting_follow = owner.active?}

    menu_keep_above = Gtk::CheckMenuItem.new('keep above')
    menu_keep_above.active = setting_keep_above
    menu_keep_above.signal_connect('toggled') {|owner| setting_keep_above = window.keep_above = owner.active?}

    menu_scale_list = Gtk::Menu.new
    menu_global_scale = Gtk::CheckMenuItem.new('global setting')
    menu_global_scale.active = true if global_scale
    menu_scale_list.append(menu_global_scale)
    group = nil
    scale_list.each {|num|
        if group
            item = Gtk::RadioMenuItem.new(group, "#{num} %")
        else
            group = item = Gtk::RadioMenuItem.new("#{num} %")
        end
        item.signal_connect('toggled') {|owner|
            if owner.active?
                new_scale = num/100.0
                if new_scale != scale
                    if global_scale
                        global_scale = new_scale
                    else
                        map_scale[current_map] = new_scale
                    end
                    change_map.call(current_map)
                    change_room.call
                end
            end
        }
        menu_scale_list.append(item)
    }
    group = nil

    menu_global_scale.signal_connect('toggled') {
        if menu_global_scale.active?
            scale_list.each_index {|index| global_scale = scale_list[index]/100.0 if menu_scale_list.children[index+1].active?}
        else
            global_scale = false
        end
    }

    menu_scale_map = Gtk::MenuItem.new('scale')
    menu_scale_map.submenu = menu_scale_list

    menu = Gtk::Menu.new
    menu.append(menu_follow)
    menu.append(menu_keep_above)
    menu.append(menu_scale_map)
    menu.show_all

    # Why does this even exist?
    def scroll_event_handler(owner, ev)
    end

    layout.signal_connect('scroll_event') {|owner, ev|
        if ev.state == Gdk::Window::SHIFT_MASK
            if ev.direction == Gdk::EventScroll::DOWN
                ev.direction = Gdk::EventScroll::RIGHT
                ev.put
                true
            elsif ev.direction == Gdk::EventScroll::UP
                ev.direction = Gdk::EventScroll::LEFT
                ev.put
                true
            else
                false
            end

        elsif ev.state == Gdk::Window::CONTROL_MASK
            if current_map
                Gtk.queue {
                    window_x = (ev.x - scroller.hadjustment.value)
                    window_y = (ev.y - scroller.vadjustment.value)
                    old_width = layout.width.to_f
                    old_height = layout.height.to_f

                    if ev.direction == Gdk::EventScroll::DOWN
                        new_scale = scale_list[scale_list.index((scale*100).to_i)-1]/100.0
                    elsif ev.direction == Gdk::EventScroll::UP
                        new_scale = scale_list[scale_list.index((scale*100).to_i)+1]/100.0
                    end

                    unless new_scale.nil?
                        if global_scale
                            global_scale = new_scale
                        else
                            map_scale[current_map] = new_scale
                        end
                        change_map.call(current_map, true)
                        change_room.call(true)
                        scale_x = layout.width.to_f / old_width
                        scale_y = layout.height.to_f / old_height

                        translated_x = ev.x * scale_x
                        translated_y = ev.y * scale_y

                        scroller.hadjustment.value = translated_x - window_x
                        scroller.vadjustment.value = translated_y - window_y
                    end
                }

            end
            true
        else
            false
        end
    }

    layout.add_events(Gdk::Event::BUTTON_PRESS_MASK)

    layout.signal_connect('button_press_event') {|owner, ev|
        if ev.button == 3
            menu.popup(nil, nil, ev.button, ev.time)
        elsif ev.button == 4
            #respond 'button4'
        elsif ev.button == 5
            #respond 'button4'
        else
            # Dragging around the map change what is currently displayed.
            dragging = nil
            pointer_x, pointer_y = layout.pointer
            before_drag = {
                'x' => pointer_x,
                'y' => pointer_y,
                'hadj' => scroller.hadjustment.value.to_i,
                'vadj' => scroller.vadjustment.value.to_i
            }
            Thread.new {
                while dragging != false
                    sleep 0.1
                    pointer_x = pointer_y = nil
                    Gtk.queue {pointer_x, pointer_y = layout.pointer}
                    sleep 0.01 while pointer_y.nil?
                    if dragging.nil?
                        if (pointer_x < before_drag['x'] - 10) or (pointer_x > before_drag['x'] + 10) or (pointer_y < before_drag['y'] - 10) or (pointer_y > before_drag['y'] + 10)
                            dragging = true
                        end
                    end
                    if dragging
                        diff_x = before_drag['x'] - pointer_x
                        diff_y = before_drag['y'] - pointer_y
                        Gtk.queue {
                            scroller.hadjustment.value = [(before_drag['hadj'] + diff_x), ($seachart_maps[current_map]['width']*scale)].min
                            scroller.vadjustment.value = [(before_drag['vadj'] + diff_y), ($seachart_maps[current_map]['height']*scale)].min
                        }
                    end
                end
            }
        end
    }

    layout.add_events(Gdk::Event::BUTTON_RELEASE_MASK)

    layout.signal_connect('button-release-event') {|owner, ev|
        Gtk.queue {
            if dragging
                dragging = false
            else
                dragging = false
                if (ev.event_type == Gdk::Event::Type::BUTTON_RELEASE) and (ev.button == 1)
                    pointer_x, pointer_y = layout.pointer
                    click_x = (scroller.hadjustment.value.to_i + pointer_x.to_i - map_gutter)/scale.to_f
                    click_y = (scroller.vadjustment.value.to_i + pointer_y.to_i - map_gutter)/scale.to_f

                    # Keep these in case we bring over the support from xnarost
                    # in the future.
                    if (ev.state.inspect =~/shift-mask.*control-mask|control-mask.*shift-mask/) and (script.vars[0] =~ /fix/)
                        # Not supported, at least, yet.
                    elsif ev.state.inspect =~/control-mask/
                        # Not supported, at least, yet.
                    elsif ev.state.inspect =~ /shift-mask/
                        # Not supported, at least, yet.
                    else
                        # Not supported, at least, yet.
                    end
                end
            end
        }
    }

    window.show_all

    window_width = [window_width, 100].max
    window_height = [window_height, 100].max
    window.resize(window_width, window_height)

    window_position[0] = [[0, window_position[0].to_i].max, (Gdk.screen_width-window_width)].min
    window_position[1] = [[0, window_position[1].to_i].max, (Gdk.screen_height-window_height)].min
    window.move(window_position[0], window_position[1])

    if trouble
        respond
        respond "[sea-charts: window_width: #{window_width.inspect}]"
        respond "[sea-charts: window_height: #{window_height.inspect}]"
        respond "[sea-charts: window_position: #{window_position.inspect}]"
        respond "[sea-charts: window.allocation.width: #{window.allocation.width.inspect}]"
        respond "[sea-charts: window.allocation.height: #{window.allocation.height.inspect}]"
        respond "[sea-charts: window.position: #{window.position.inspect}]"
    end

    window.keep_above = true if setting_keep_above

    circle_image.hide
    question_image.hide

    start = true
}

before_dying {
    window_position = window_width = window_height = nil
    Gtk.queue {
        window_position = window.position
        window_width = window.allocation.width
        window_height = window.allocation.height
    }
    sleep 0.01 while window_height.nil?
    Gtk.queue {window.destroy}
    Settings['window_position'] = window_position if (window_position.class == Array) and (window_position[0].to_i > 0) and (window_position[1].to_i > 0)
    Settings['window_width'] = window_width if (window_width.class == Fixnum) and (window_width > 100)
    Settings['window_height'] = window_height if (window_height.class == Fixnum) and (window_height > 100)
    Settings['keep_above'] = setting_keep_above
    Settings['global_scale'] = global_scale
    Settings['map_scale'] = map_scale
    Settings.save
}

wait_until {start}

if !Script.running?("osa-map-plugin") || !defined?(OsaMap)
    error_message = "osa-map-plugin must be trusted in order to supply map data.\n"

    if !Script.running?("osa-map-plugin")
        if !Script.start("osa-map-plugin")
            error_message = "osa-map-plugin must be trusted and running in order to supply map data.\n"
            error_message += ";repos download osa-map-plugin\n"
        end
    end

    if !defined?(OsaMap)
        error_message += ";trust osa-map-plugin\n"
        error_message += ";osa-map-plugin\n"
        error_message += "Then run ;sea-charts again\n";
        message_bold.call(error_message);

        Script.kill("osa-map-plugin") if Script.running?("osa-map-plugin")
        exit
    end
end

current_room = OsaMap.current
last_known_room = OsaMap.lastknown

Gtk.queue {
    change_map.call(map_to_display)
    change_room.call
}

until seacharts_exit
    if (current_room.id != OsaMap.current.id || last_known_room.id != OsaMap.lastknown.id)
        current_room = OsaMap.current
        last_known_room = OsaMap.current

        if OsaMap.current.is_mapped?
            current_room = OsaMap.current
        else
            last_known_room = OsaMap.lastknown
        end

        Gtk.queue {
            change_room.call
        }
    end

    sleep 0.2 while (current_room.id == OsaMap.current.id && last_known_room.id == OsaMap.lastknown.id ) and !seacharts_exit
    wait_until {setting_follow or seacharts_exit} unless setting_follow or seacharts_exit
end
