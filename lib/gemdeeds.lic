=begin

				Author: Demandred
          game: Gemstone
          tags: deeds, gems
       version: 1.a3
			
So begins my rewrite of the gems2deeds script originally by Samrit.
Many kudos to him for the original and the idea to expand this. I will still be using
his original gem appraise routine and most of the original routine for the Landing, in addition
to the gem picking routine per deed. I feel why not use what works.
	Thanks, Samrit! Not sure if you're still around in some form, but shout out if you are!

	And thanks to the scripting community for the help learning everything I've learned so far, you
	guys all rock! (Doug, Falicor, Naijin, Steeltalon, among others)

Setup:  Make sure to use ;vars setup OR ;vars set gemsack=<container> to set your gem container
				before first use
				You could also use ;exec UserVars.gemsack = 'container' (?)
				Once the gemsack is set in vars, then:
				
				You may now set a gem value multiplier using:
				;vars set gemdeeds_multiplier=<value>
					examples:	;vars set gemdeeds_multiplier=2.0
										;vars set gemdeeds_multiplier=3.0
										;vars set gemdeeds_multiplier=2.5
				The script will use 1.5 by default.

				Additionally, you may also set your Max Variance using:
				;vars set gemdeeds_maxvariance=<value>
					examples:	;vars set gemdeeds_maxvariance=0.1
										;vars set gemdeeds_maxvariance=0.15
										;vars set gemdeeds_maxvariance=0.05
				The script will use 0.2 by default
				Note: This is the amount the script will attempt to stay below while
							trying to get deeds - i.e. 0.2 = 1.2 x the expected value of the deed
							(this is basically saying 20% over)
							0.15 would be 15%
							etc.

Usage: ;gemdeeds

Will automatically take you to the closest deed puzzle and get you as many deeds as the gems
in the specified sack will obtain. (still tweaking gem values per puzzle, so might be less deeds than
you expect). TODO: Implement a var to declare what YOU think each gem should be worth? Maybe per town?
TODO: if implementing multiple town gem worth vars, possibly bring online a gui...


Goals - To have one comprehensive deeds script that will use gems(including scarabs)
				to get deeds at all deed locations. Including modifying gem worth dependant
				on location, hopefully.

Needs - all primary deed room ids(for ones with doors the room outside the door?)
				and comprehensive deed obtaining logs

	1.a3 - alpha still: added maxvariance and multiplier vars support
	1.a2 - alpha still, WL deeds seems functional, with report properly reporting, maybe? Need to get all success and failure messages for Ta'Vaalor
	1.a1 - alpha still, not done, but a few fixes.
	1.a - alpha version - will include Whenimer's Landing and Ta'Vaalor to begin. And here we go!

=end

#
# Change this value if you want to adjust the percentage over
# optimal value that the script will buy deeds for.
#
# To Do here: @gemdeeds_maxvariance and the command line choosing of a container
# 						into UserVars - or Vars.gemsack perhaps for the container
#							Also maybe allow for a var to determine how much a gem is
#							worth compared to silvers...
#
# Default value (20%): 0.2
#
deed_rooms = [ '745', '4044', '9505', '10375', '10854', '28620' ]
target_room = ''
@gemdeeds_maxvariance = 0.2
@gemdeeds_multiplier = 1.5

if UserVars.gemdeeds_multiplier
	@gemdeeds_multiplier = UserVars.gemdeeds_multiplier.to_f
end

if UserVars.gemdeeds_maxvariance
	@gemdeeds_maxvariance = UserVars.gemdeeds_maxvariance.to_f
end

# test echo
#echo "multiplier is #{@gemdeeds_multiplier}"
#echo "variance is #{@gemdeeds_maxvariance}"

####################################

def appraise_gems()
	finalreport = Array.new
	
	container = GameObj.inv.find{ |container| container.name =~ /.*#{UserVars.gemsack}.*/ }
	
	if container.nil? then fput "look in #{container.name}" end

	gems = container.contents.select{ |item| 
		item.type =~ /gem/ || item.noun == "scarab"
	}
	
	for gem in gems do
		silence_me
		dothistimeout "take ##{gem.id} from ##{container.id}", 5, /^You remove|You discreetly/
		fput "appraise ##{gem.id}"
		result = matchfind "I'll give you ? for it"
		finalreport << [result.delete(",").to_i, gem.id, gem.name]
		dothistimeout "put ##{gem.id} in ##{container.id}", 5, /^You put|You discreetly/
		silence_me
	end
	
	respond "All gems appraised:"
	finalreport.sort{ |a,b| a[0] <=> b[0] }.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
	
	return finalreport.sort{ |a,b| a[0] <=> b[0] }
end

#
# Loop, selecting the next most valuable gem that keeps our iterationsum within @gemdeeds_maxvariance
# until we have enough, or run out of gems
#
def get_deed_gems(deedcost, sortedgems)
	iterationsum = 0
	iterationgems = Array.new
	while sortedgems.length > 0 && iterationsum < deedcost do
		for ix in 0..(sortedgems.length-1)
			if sortedgems.at(ix)[0] + iterationsum > deedcost + (deedcost*@gemdeeds_maxvariance) then
				# The value of this gem pushes us over the limit, take the prevous gem
				if ix == 0 then
					sortedgems.delete_at(0)
					break
				end
				iterationsum = iterationsum + sortedgems.at(ix-1)[0]
				iterationgems << sortedgems.at(ix-1)
				sortedgems.delete_at(ix-1)
				break
			elsif ix == sortedgems.length-1 then
				iterationsum = iterationsum + sortedgems.at(ix)[0]
				iterationgems << sortedgems.at(ix)
				sortedgems.delete_at(ix)
				break
			end
		end
	end

	return iterationsum < deedcost ? nil : iterationgems
end

#
# 	#Ta'Vaalor Deed Routine
#
def do_tvdrawer_offering(deedgems)
	dothistimeout "close door", 2, /You hear a muffled /
	dothistimeout "pull hemp", 2, /A stone panel moves aside/
	dothistimeout "open drawer", 2, /The drawer slides open/
	deedgems.each { |gem|
		dothistimeout "take ##{gem[1]}", 5, /^You remove|You discreetly/
		dothistimeout "put ##{gem[1]} in drawer", 5, /You put/
	}
	offeringresult = dothistimeout "close drawer", 5, /feeling you could have given more/
	dothistimeout "open door", 5, /Creaking slightly/
	if offeringresult =~ /feeling you could have given/
		return "failed"
	else
		return "success"
	end
end

#
# Wehnimer's Landing Deed Routine
#
def do_landingtemple_offering(deedgems)
	dothistimeout "go tapestry", 5, /^As you approach the/
	dothistimeout "ring chime with mallet", 5, /room is filled with a rich, mellow tone/
	dothistimeout "ring chime with mallet", 5, /Your face and deeds are well documented in the Book of Passing/
	dothistimeout "kneel", 5, /Drop thy offering/
	deedgems.each { |gem|
		dothistimeout "take ##{gem[1]}", 5, /^You remove|You discreetly/
		dothistimeout "drop ##{gem[1]}", 5, /^You drop/
	}
	offeringresult = dothistimeout "ring chime with mallet", 5, /Thy offering pleases the Goddess|The Goddess was neither convinced nor pleased/
	fput "out"
	if offeringresult =~ /Thy offering pleases the Goddess/
		return "success"
	elsif offeringresult =~ /The Goddess was neither convinced nor pleased/
		return "failed"
	end
end

#
#	Okay here's my elsif spaghetti to actually GO to the right room.
#
# Room #s still to find and enter: Icemule, Solhaven, Teras Isles
# Puzzles to confirm: All but Ta'Vaalor & Landing
#
def go_to_deedroom(targetroom)
	if targetroom == 28620 #Mist Harbor
		echo "**********"
		echo "Mist Harbor deed section still under construction. Check back soon!"
		echo "Try going to one of the functioning areas mentioned in the script notes."
		echo "Exiting."
		exit
	elsif targetroom == 10854 #River's Rest
		echo "**********"
		echo "River\'s Rest deed section still under construction. Check back soon!"
		echo "Try going to one of the functioning areas mentioned in the script notes."
		echo "Exiting."
		exit
	elsif targetroom == 745 #Ta'Illistim
		echo "**********"
		echo "Ta'Illistim deed section still under construction. Check back soon!"
		echo "Try going to one of the functioning areas mentioned in the script notes."
		echo "Exiting."
		exit
	elsif targetroom == 10375 #Ta'Vaalor
		Script.run('go2', '10375')
		dothistimeout "search vine", 5, /You search through the vines and find an opened mistwood door/
		waitrt?
		dothistimeout "go mistwood door", 3, /small stone room is little more/
	elsif targetroom == 4044 #Wehnimer's Landing
		Script.run('go2', '4044')
	elsif targetroom == 9505 #Zul Logoth
		echo "**********"
		echo "Zul Logoth deed section still under construction. Check back soon!"
		echo "Try going to one of the functioning areas mentioned in the script notes."
		echo "Exiting."
		exit
	else
		echo "**********"
		echo "At this point you should have got a different error...not sure how you reached this but something has gone majorly wrong."
		echo "Exiting."
		echo "**********"
	end
end

#
# Determine the cost of the users next deed
#
#This is fine as is
def get_next_deed_cost()
    deed_text = dothistimeout "experience", 5, /Experience:/
    deeds = deed_text.match(/.*Deeds: (\d*)/).captures[0]
    level = Char.level

    return (((100 * level.to_i + 100 * deeds.to_i + 101).to_f / @gemdeeds_multiplier).to_f).ceil
end


def main()
	if UserVars.gemsack.nil? then
		respond "\n*** You didn't set a gemsack using ;vars! ***\n\n    Set it using ;vars set gemsack=<container>\n     or ;vars setup\n\n\n"
		exit
	end
	
	# location setup
	return_room = Room.current.id
	deed_rooms = [ '745', '4044', '9505', '10375', '10854', '28620' ]
	target_room = Room.current.find_nearest(deed_rooms)

	if (target_room == 9505 && Char.prof == 'Monk')
		echo "   ***"
		echo "Sorry, monks are not able to get deeds in Zul Logoth according to the wiki, will update if I find out different."
		echo
		echo "Exiting."
		echo "   ***"
		exit
	end

	deedcost = get_next_deed_cost()

	Script.run('go2', 'gemshop')

	sortedgems = appraise_gems()

	go_to_deedroom(target_room)

	num_deeds_done = 0
	num_deeds_failed = 0
	deedresult = nil

	while (deedgems = get_deed_gems(deedcost, sortedgems)) != nil do
		sum = 0
		deedgems.each{ |gem| sum += gem[0] }
		percentover = ((sum - deedcost).to_f / deedcost.to_f * 100)
		respond "\nDeed cost: #{deedcost}, #{deedgems.length} gems chosen with total value of #{sum}, which is %0.1f percent over minimum cost" % [percentover]
		deedgems.each { |gem| respond "  Gem: #{gem[0]} value - #{gem[2]} (#{gem[1]})" }
		respond "\n"
		#This is the call to the location deed puzzle spaghetti style
		if target_room == 10375 #Ta'Vaalor
			deedresult = do_tvdrawer_offering(deedgems)
		elsif target_room == 4044 #Wehnimer's Landing
			deedresult = do_landingtemple_offering(deedgems)
		end
		
		num_deeds_done = num_deeds_done + 1 if deedresult == "success"
		num_deeds_failed = num_deeds_failed + 1 if deedresult == "failed"

		deedcost = get_next_deed_cost()
	end

	if target_room == 10375
		dothistimeout "go door", 2, /Tall maoral tree /
	end
	
	Script.run('go2', return_room.to_s)
	
	respond "\n\nDeed report: #{num_deeds_done} deeds obtained successfully, #{num_deeds_failed} failed attempts.\n\n"
end

# Start code in main()
main()
