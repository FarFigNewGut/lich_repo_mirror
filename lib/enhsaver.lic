=begin
# This item keeps track of your enhansive items and wears and removes them.
# items are stored in Lich.lootsack unless otherwise checked and stored in Lich.enhansive_bag
# usage:
#	;enhsaver wear
#	;enhsaver remove
#	;enhsaver setup
#
# warning your lich.enhansive_bag must be big enuff to hold all your enhansive items
# to get each @itemname inspect each item    with ;e echo GameObj.right_hand.inspect
# only use @itemname in each box, please do not use @noun, it will confuse the script
=end
VERSION = "0.1.5"
AUTHOR = "Aethor Whiteaxe"

settings = CharSettings.to_hash
	settings['enh_item1'] ||= ""
	settings['enh_item2'] ||= ""
	settings['enh_item3'] ||= ""
	settings['enh_item4'] ||= ""
	settings['enh_item5'] ||= ""
	settings['enh_item6'] ||= ""
	settings['enh_item7'] ||= ""
	settings['enh_item8'] ||= ""
	settings['enh_item9'] ||= ""
	settings['enh_item10'] ||= ""
	settings['enh_item_stow'] ||= false

setup = proc {
gtk_global = Hash.new
	window = window_action = nil
	Gtk.queue {
		ttips = Gtk::Tooltips.new.enable
		ttips_text = {
			'enh_item1' => 'This is enhansive item number 1',
			'enh_item2' => 'This is enhansive item number 2',
			'enh_item3' => 'This is enhansive item number 3' ,
			'enh_item4' => 'This is enhansive item number 4.' ,
			'enh_item5' => 'This is enhansive item number 5',
			'enh_item6' => 'This is enhansive item number 6',
			'enh_item7' => 'This is enhansive item number 7',
			'enh_item8' => 'This is enhansive item number 8',
			'enh_item9' => 'This is enhansive item number 9',
			'enh_item10' => 'This is enhansive item number 10.',
			'enh_item_stow' => 'Check this box if items to be stowed in enhansive_bag. set via ;vars set enhansive_bag = <container>. otherise stowed in Lich.lootsack',
			}
		
		gtk_global['enh_item1'] = Gtk::Entry.new.set_text(settings['enh_item1'])
		gtk_global['enh_item2'] = Gtk::Entry.new.set_text(settings['enh_item2'])
		gtk_global['enh_item3'] = Gtk::Entry.new.set_text(settings['enh_item3'])
		gtk_global['enh_item4'] = Gtk::Entry.new.set_text(settings['enh_item4'])
		gtk_global['enh_item5'] = Gtk::Entry.new.set_text(settings['enh_item5'])
		gtk_global['enh_item6'] = Gtk::Entry.new.set_text(settings['enh_item6'])
		gtk_global['enh_item7'] = Gtk::Entry.new.set_text(settings['enh_item7'])
		gtk_global['enh_item8'] = Gtk::Entry.new.set_text(settings['enh_item8'])
		gtk_global['enh_item9'] = Gtk::Entry.new.set_text(settings['enh_item9'])
		gtk_global['enh_item10'] = Gtk::Entry.new.set_text(settings['enh_item10'])
		gtk_global['enh_item_stow'] = Gtk::CheckButton.new.set_active(settings['enh_item_stow'])

		ttips_text.each_pair { |widget,tip|
			if widget = gtk_global[widget]# || gtk_locals[widget]
				ttips.set_tip(widget,tip,'')
			end
		}
		
		window = Gtk::Window.new
		window.title = "Enhansive Tracker #{VERSION}"
		window.border_width = 3
		window.resizable = true
		#window.resize(10, 10)
		
		settings_page = Gtk::VBox.new(false,1).set_border_width(3)
		vb_pg1_1 = Gtk::VBox.new(false,1).set_border_width(3)
		fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Settings </b></big>'))
		fr_pg1_1.add(vb_pg1_1)
		settings_page.pack_start(fr_pg1_1,false)

		#random note to self width will be ignored if text is longer
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item1: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item1'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item2: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item2'],false)
		vb_pg1_1.pack_start(hb,false)

		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item3: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item3'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item4: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item4'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item5: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item5'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item6: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item6'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item7: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item7'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item8: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item8'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item9: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item9'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enhansive item10: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item10'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('stow items in separate bag: ')).set_width_request(120))
		hb.pack_start(gtk_global['enh_item_stow'],false)
		vb_pg1_1.pack_start(hb,false)
		
		
		lbl = Gtk::Label.new.set_markup("Mouse over each box for more help")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_1.pack_start(lbl,false)
		
		hb_saveclose = Gtk::HBox.new(false,1)
		save = Gtk::Button.new('_Save & Close')
		close = Gtk::Button.new('E_xit')
		save.signal_connect('clicked') { window_action = :save }
		close.signal_connect('clicked') { window_action = :done }
		hb_saveclose.pack_start(save,false)
		hb_saveclose.pack_start(close,false)
		vb_pg1_1.pack_start(hb_saveclose,false)
		
		window.signal_connect('delete_event') { window_action = :exit }
		window.add(settings_page)
		window.show_all
		window.keep_above = true # On windows keep_above is required AFTER show_all
	}
	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }
	clean_entry = proc { |entry|
		entry.text = entry.text.strip
		if entry.text.empty?
			entry.text = nil
		end
		
		entry.text
	}
		
	if window_action == :save		
		gtk_global.each_pair { |option,widget|
			
			if widget.class == Gtk::CheckButton
				settings[option] = widget.active?
			elsif widget.class == Gtk::Entry
				settings[option] = clean_entry.call(widget)
			elsif widget.class == Gtk::ComboBox
				settings[option] = widget.active
			else
				echo "error: unknown local widget #{option} [#{widget.class}]"
			end
		}
		
		#attempt some error checking
		warning = ""
		if settings['enh_item1'] == ""
			warning += "his script will not run without a minimum of 1 enhansive items.\r\n"
		end
		if warning.length > 0
			if !$fake_stormfront
				puts "<output class=\"mono\"/>#{monsterbold_start}#{warning}#{monsterbold_end}\r\n<output class=\"\"/>"
			else
				puts "#{monsterbold_start}#{warning}#{monsterbold_end}"
			end
		end
		echo 'settings saved'
	else
		echo 'closed without saving'
	end
}

def ginv(what = nil)
	if what.to_i != 0
		return nil unless GameObj.inv.find{|shit| shit.id.to_i == what.to_i}
		return(GameObj.inv.find{|shit| shit.id.to_i == what.to_i}) if GameObj.inv.find{|shit| shit.id.to_i == what.to_i}
	elsif what =~ /\s/
		return(GameObj.inv.find{|shit| shit.name =~ /#{what}/i}) if GameObj.inv.find{|shit| shit.name =~ /#{what}/i}
		return(nil) unless GameObj.inv.find{|shit| shit.name =~ /#{what}/i}
	elsif what =~ /\w+/i
		return(GameObj.inv.find{|shit| shit.noun =~ /#{what}/i}) if GameObj.inv.find{|shit| shit.noun =~ /#{what}/i}
		return nil unless GameObj.inv.find{|shit| shit.noun =~ /#{what}/i}
	end
	return(GameObj.inv)
end

def stashright
	return unless rhand
	$container.each{|cont|
		break unless rhand
		next if $no_shit_here.include?(ginv(cont).noun)
		fput "_drag ##{rhand.id} ##{cont}"
		matchtimeout(1, "compartments|put|fit|cannot attach")
	}
	fput "_drag ##{rhand.id} wear" if rhand
	return unless rhand
	respond "YOU ARE HAVING RIGHT HAND ISSUES"
	wait_while("WAITING FOR EMPTY RIGHT HAND."){rhand}
end

def rhand(what = nil)
	return nil if GameObj.right_hand.name =~ /Empty/
	if what.to_i != 0
		return nil unless GameObj.right_hand.id.to_i == what.to_i
	elsif what =~ /\s/
		return(nil) unless GameObj.right_hand.name =~ /#{what}/i
	elsif what =~ /\w+/i
		return nil unless GameObj.right_hand.noun =~ /#{what}/i
	end
	return(GameObj.right_hand)
end

def lhand(what = nil)
	return nil if GameObj.left_hand.name =~ /Empty/
	if what.to_i != 0
		return nil unless GameObj.left_hand.id.to_i == what.to_i
	elsif what =~ /\s/
		return(nil) unless GameObj.left_hand.name =~ /#{what}/i
	elsif what =~ /\w+/i
		return nil unless GameObj.left_hand.noun =~ /#{what}/i
	end
	return(GameObj.left_hand)
end

def stashleft
	return unless lhand
	fput "_drag ##{lhand.id} wear" if lhand('keyring', 'shield')
	$container.each{|cont|
		break unless lhand
		next if $no_shit_here.include?(ginv(cont).noun)
		fput "_drag ##{lhand.id} ##{cont}"
		matchtimeout(1, "compartments|put|fit|cannot attach")
	}
	fput "_drag ##{lhand.id} wear" if lhand
	return unless lhand
	respond "YOU ARE HAVING LEFT HAND ISSUES"
	wait_while("WAITING FOR EMPTY LEFT HAND."){lhand}
end

def remove (settings)
	if settings['enh_item1'].length > 0
		fput "remove #{settings['enh_item1']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item1']} in #{Lich.enhansive_bag}"
			waitfor "put|fit|sling"
		else 
			fput "put #{settings['enh_item1']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item2'].length > 0
		fput "remove #{settings['enh_item2']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item2']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item2']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item3'].length > 0
		fput "remove #{settings['enh_item3']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item3']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item3']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item4'].length > 0
		fput "remove #{settings['enh_item4']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item4']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item4']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item5'].length > 0
		fput "remove #{settings['enh_item5']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item5']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item5']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item6'].length > 0
		fput "remove #{settings['enh_item6']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item6']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item6']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item7'].length > 0
		fput "remove #{settings['enh_item7']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item7']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item7']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item8'].length > 0
		fput "remove #{settings['enh_item8']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item8']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item8']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item9'].length > 0
		fput "remove #{settings['enh_item9']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item9']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item9']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
	if settings['enh_item10'].length > 0
		fput "remove #{settings['enh_item10']}"
		waitfor "remove|take|sling"
		if settings['enh_item_stow'] == true
			fput "put #{settings['enh_item10']} in #{Lich.enhansive_bag}"
			waitfor "put|fit"
		else 
			fput "put #{settings['enh_item10']} in #{Lich.lootsack}"
			waitfor "put|fit"
		end
	end
end

def wear(settings)
	if settings['enh_item1'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item1']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item1']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item1']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item2'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item2']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item2']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item2']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item3'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item3']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item3']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item3']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item4'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item4']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item4']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item4']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item5'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item5']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item5']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item5']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item6'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item6']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item6']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item6']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item7'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item7']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item7']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item7']}"
		waitfor "put|wear|hang|slip|attatch|sling"
	end
	if settings['enh_item8'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item8']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item8']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item8']}"
		waitfor "put|hang|wear|slip|attatch|sling"
	end
	if settings['enh_item9'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item9']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item9']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item9']}"
		waitfor "put|hang|wear|slip|attatch|sling"
	end
	if settings['enh_item10'].length > 0
		if settings['enh_item_stow'] == true
			fput "get #{settings['enh_item10']} from #{Lich.enhansive_bag}"
			waitfor "remove"
		else 
			fput "get #{settings['enh_item10']} from #{Lich.lootsack}"
			waitfor "remove"
		end
		fput "wear #{settings['enh_item10']}"
		waitfor "put|hang|wear|slip|attatch|sling"
	end
end


#silence_me
stashleft if lhand
stashright if rhand
if variable[0] =~ /setup|config|configure/i
	setup.call
	exit
elsif variable[0] =~ /wear/i
	wear(settings)
	exit
elsif variable[0] =~ /remove/i
	remove(settings)
	exit
elsif !variable[0].nil?
	message = ""
	message += "This script needs a variable to run, either wear|remove|setup\r\n"
	message += "Run ;enhsaver setup at any times to change you settings\r\n"
	
	if !$fake_stormfront
		puts "<output class=\"mono\"/>#{monsterbold_start}#{message}#{monsterbold_end}\r\n<output class=\"\"/>"
	else
		puts "#{monsterbold_start}#{message}#{monsterbold_end}"
	end
	exit
end


