#QUIET
=begin
	Customizable Lore Singing Tool
	Created By: Vailan
	Date:       8/5/2023
	
	          author: Vailan (Vailan#0875 on discord)
            game: GS
            tags: bard, lore, lorsigning
        		required: Lich >= 4.6.4 and StormFront
         		version: 2023.08.05.1
	
	If you want to have a simple way to draft your lore singing without having to edit a script
	and be able to choose the language you use, this is the script for you.
	
	This also validates that the appropriate keywords are in each verse.
	You do not need ot add the commas or semi-colons as i add them for you per line as needed
	
	To Configure
	Command:  ';loresing setup' to configure your verses and select your loresinging language
	Command:  ';loresing reset' to restore default lore songs and enter setup
		
	To use in the world once configured
	Command:  ';loresing all <item>'"
	Command:  ';loresing value <item>'"
	Command:  ';loresing purpose <item>'"
	Command:  ';loresing magic <item>'"
	Command:  ';loresing ability <item>'"
	
	
	********change log***********
	2020.05.01.1 - Initial publication
	2020.05.04.5 - Fixed several little bugs relating to determine what is in your hands
	2020.05.09.1 - Adding Verse Warbling on Failures and Option to try 2 line first and if fail switch to 4 line
	2020.05.14.1 - Almost complete rewrite of the major functions and looping to help reduce thrashing and generate a useful report at the end
	2023.08.05.1 - Updated to use GTK3 For UI
	
	***********todo**************
	-Add check to test if the end of each line is a literal rhyme (audible rhymes are not enough such as beer and hear being not a literal rhyme)
	-Add support for stopping when "Its loresong has been temporarily unlocked" is found as there is no point in going further
	-Redo Checking of Settings based on all the new changes for multi verse lores and such
		
	*********known issues********
	-Not checking to ensure rhyming is proper
	-Not checking to see how many lines you have and enforcing it.
	-2 line verses must be the 3rd and 4th line of each verse with the 1st and 2nd lines left blank
	-Hammer of Kai and other reverse named objects might cause some trouble but added functionality to get the whole item name
	
	

=end

VERSION = "2023.08.05.1"

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in MyLore"
  respond " This version is specific to the Stormfront frontend"
 	respond ""
  respond ""
  respond " Closing now"
  respond ""
  exit
end

echo variable[0]
	#Load settings from character unless being reset
	settings = CharSettings.to_hash
	settings['language_used'] ||= 0
	settings['try2LineFirst'] ||= false
	settings['retryOnFailure'] ||= false
	
	#Value Verse
	settings['valueLyric1'] ||= "Whether you are pruned from forges sprue"
	settings['valueLyric2'] ||= "or assembled and held with exotic glue"
	settings['valueLyric3'] ||= "Please tell me all and tell me true"
	settings['valueLyric4'] ||= "Reveal to me your weight and value."
	#Purpose Verse
	settings['purposeLyric1'] ||= "A calling of darkness for all to fear"
	settings['purposeLyric2'] ||= "or a herald of peace for bending an ear"
	settings['purposeLyric3'] ||= "I am listening now so it shall soon be clear"
	settings['purposeLyric4'] ||= "For it's your purpose that I'd most like to hear."
	#Magic Verse
	settings['magicLyric1'] ||= "Whether arcane fires full of glow"
	settings['magicLyric2'] ||= "or waters ripple on the ebb tide flow"
	settings['magicLyric3'] ||= "Mysteries be unshrouded for me to know"
	settings['magicLyric4'] ||= "What skill or how you enhance I ask you show."
	#Ability Verse
	settings['abilityLyric1'] ||= "As I look at the front or even the side"
	settings['abilityLyric2'] ||= "ever patient am I of the time that I bide"
	settings['abilityLyric3'] ||= "From my ears and eyes you have nothing to hide"
	settings['abilityLyric4'] ||= "What special ability do you hold inside?"
	#Reset Verse
	settings['resetLyric1'] ||= "I sing a song to learn the truth"
	settings['resetLyric2'] ||= "and hope by altering my words of lore"
	settings['resetLyric3'] ||= "I shall gather my verses for to sustain"
	settings['resetLyric4'] ||= "And cause your secrets to therefor pour"
	settings['debugLogging'] ||= false

languages = {
	0 => "Common",
	1	=> "Bard",		
	2	=> "Aelotian",
	3	=> "Dark Elven",
	4	=> "Dhe'narsi",
	5 => "Dwarven",
	6 => "Elven",
	7 => "Erithian",
	8 => "Faendryl",
	9 => "Giantman",
	10 => "Gnomish",
	11 => "Hafling",
	12 => "Krolvin",
	13 => "Sylvankind",
	14 => "Tehir",
}


def check_settings(settings)
	#attempt some error checking
	warning = ""
	critical_warning = ""
	#check for trailing commas and semicolens and 
	if settings['valueLyric1'] =~ /,;|;/i
		critical_warning += "Your Value Verse Line 1 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['valueLyric2'] =~ /,;|;/i
		critical_warning += "Your Value Verse Line 2 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['valueLyric3'] =~ /,;|;/i
		critical_warning += "Your Value Verse Line 3 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['valueLyric4'] =~ /,;|;/i
		critical_warning += "Your Value Verse Line 4 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	
	if settings['purposeLyric1'] =~ /,;|;/i
		critical_warning += "Your Purpose Verse Line 1 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['purposeLyric2'] =~ /,;|;/i
		critical_warning += "Your Purpose Verse Line 2 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['purposeLyric3'] =~ /,;|;/i
		critical_warning += "Your Purpose Verse Line 3 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['purposeLyric4'] =~ /,;|;/i
		critical_warning += "Your Purpose Verse Line 4 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	
	if settings['magicLyric1'] =~ /,;|;/i
		critical_warning += "Your Magic Verse Line 1 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['magicLyric2'] =~ /,;|;/i
		critical_warning += "Your Magic Verse Line 2 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['magicLyric3'] =~ /,;|;/i
		critical_warning += "Your Magic Verse Line 3 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['magicLyric4'] =~ /,;|;/i
		critical_warning += "Your Magic Verse Line 4 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	
	if settings['abilityLyric1'] =~ /,;|;/i
		critical_warning += "Your Ability Verse Line 1 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['abilityLyric2'] =~ /,;|;/i
		critical_warning += "Your Ability Verse Line 2 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['abilityLyric3'] =~ /,;|;/i
		critical_warning += "Your Ability Verse Line 3 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	if settings['abilityLyric4'] =~ /,;|;/i
		critical_warning += "Your Ability Verse Line 4 should not include trailing , or ; as we will put those in automatically for you.\r\n"
	end
	
	#check for lyric keywords
	#Value and Wieght Keywords
	if settings['valueLyric1'] !~ /value/i and settings['valueLyric2'] !~ /value/i and settings['valueLyric3'] !~ /value/i and settings['valueLyric4'] !~ /value/i
		warning += "None of your Value lyrics contain the keyword 'value'\r\n"
	end
	if settings['valueLyric1'] !~ /weight/i and settings['valueLyric2'] !~ /weight/i and settings['valueLyric3'] !~ /weight/i and settings['valueLyric4'] !~ /weight/i
		warning += "None of your Value lyrics contain the keyword 'weight'\r\n"
	end
	
	#Purpose Keyword
	if settings['purposeLyric1'] !~ /purpose/i and settings['purposeLyric2'] !~ /purpose/i and settings['purposeLyric3'] !~ /purpose/i and settings['purposeLyric4'] !~ /purpose/i
		warning += "None of your Purpose lyrics contain the keyword 'purpose'\r\n"
	end
	#Magical Keywords
	if settings['magicLyric4'] !~ /enhance/i and settings['magicLyric4'] !~ /enhance/i and settings['magicLyric4'] !~ /enhance/i and settings['magicLyric4'] !~ /enhance/i
		warning += "None of your Purpose lyrics contain the keyword 'purpose'\r\n"
	end
		
	#Special Ability Keyword
	if settings['abilityLyric1'] !~ /ability/i and settings['abilityLyric2'] !~ /ability/i and settings['abilityLyric3'] !~ /ability/i and settings['abilityLyric4'] !~ /ability/i
		warning += "None of your Ability lyrics contain the keyword 'ability'\r\n"
	end
		
	if critical_warning.length > 0
		if !$fake_stormfront
			puts "<output class=\"mono\"/>#{monsterbold_start}#{"Errors Preventing Operation"}#{monsterbold_end}\r\n<output class=\"\"/>"
			puts "<output class=\"mono\"/>#{monsterbold_start}#{critical_warning}#{monsterbold_end}\r\n<output class=\"\"/>"
		else
			puts "#{monsterbold_start}#{"Errors Preventing Operation"}#{monsterbold_end}"
			puts "#{monsterbold_start}#{critical_warning}#{monsterbold_end}"
		end
		
	end
	if warning.length > 0
		if !$fake_stormfront
			puts "<output class=\"mono\"/>#{monsterbold_start}#{"Warnings"}#{monsterbold_end}\r\n<output class=\"\"/>"
			puts "<output class=\"mono\"/>#{monsterbold_start}#{warning}#{monsterbold_end}\r\n<output class=\"\"/>"
		else
			puts "#{monsterbold_start}#{"Warnings"}#{monsterbold_end}"
			puts "#{monsterbold_start}#{warning}#{monsterbold_end}"
		end
		
	end
	
	if critical_warning.length > 0
		return false
	else
		return true
	end
		
end

def createEntry(entryValue)
	tempEntry = Gtk::Entry.new
	tempEntry.text = entryValue

	return tempEntry
end

def createCheckBox(checkValue)
	tempCheckBox = Gtk::CheckButton.new
	tempCheckBox.active = checkValue

	return tempCheckBox
end

def createComboBox(textValue)
	tempComboBox= Gtk::ComboBoxText.new(is_text_only = true)
	tempComboBox.set_active = textValue


end

setup = proc {
	gtk_global = Hash.new
	window = window_action = nil
	Gtk.queue {
		#ttips = Gtk::Tooltips.new.enable
		#ttips_text = {
		#	'language_used' => 'Select a language you are able to speak to use something other than common',
		#	'valueLyric1' => 'First line of the Value Lyric',
		#	'valueLyric2' => 'Second line of the Value Lyric',
		#	'valueLyric3' => 'Third line of the Value Lyric',
		#	'valueLyric4' => 'Fourth line of the Value Lyric',
		#	'purposeLyric1' => 'First line of the Purpose Lyric', 
		#	'purposeLyric2' => 'Second line of the Purpose Lyric',
		#	'purposeLyric3' => 'Third line of the Purpose Lyric', 
		#	'purposeLyric4' => 'Fourth line of the Purpose Lyric',
		#	'magicLyric1' => 'First line of the Magic Lyric', 
		#	'magicLyric2' => 'Second line of the Magic Lyric',
		#	'magicLyric3' => 'Third line of the Magic Lyric', 
		#	'magicLyric4' => 'Fourth line of the Magic Lyric',
		#	'abilityLyric1' => 'First line of the Ability Lyric', 
		#	'abilityLyric2' => 'Second line of the Ability Lyric',
		#	'abilityLyric3' => 'Third line of the Ability Lyric', 
		#	'abilityLyric4' => 'Fourth line of the Ability Lyric',
		#	'resetLyric1' => 'First line of the Reset Lyric with no Keywords',
		#	'resetLyric2' => 'Second line of the Reset Lyric with no Keywords',
		#	'resetLyric3' => 'Third line of the Reset Lyric with no Keywords',
		#	'resetLyric4' => 'Fourth line of the Reset Lyric with no Keywords',
		#	'try2LineFirst' => 'Try to use a 2 Line Lyric but if you fail use a 4 line',
		#	'retryOnFailure' => 'If our Loresong failes to learn anything try again after resetting',
		#}
		
		comboboxtext = Gtk::ComboBoxText.new()
		
		gtk_global['language_used'] =  comboboxtext
		#Gtk::ComboBoxText.new(is_text_only = true)
		gtk_global['valueLyric1'] = createEntry(settings['valueLyric1'])
		gtk_global['valueLyric2'] = createEntry(settings['valueLyric2'])
		gtk_global['valueLyric3'] = createEntry(settings['valueLyric3'])
		gtk_global['valueLyric4'] = createEntry(settings['valueLyric4'])
		gtk_global['purposeLyric1'] = createEntry(settings['purposeLyric1'])
		gtk_global['purposeLyric2'] = createEntry(settings['purposeLyric2'])
		gtk_global['purposeLyric3'] = createEntry(settings['purposeLyric3'])
		gtk_global['purposeLyric4'] = createEntry(settings['purposeLyric4'])
		gtk_global['magicLyric1'] = createEntry(settings['magicLyric1'])
		gtk_global['magicLyric2'] = createEntry(settings['magicLyric2'])
		gtk_global['magicLyric3'] = createEntry(settings['magicLyric3'])
		gtk_global['magicLyric4'] = createEntry(settings['magicLyric4'])
		gtk_global['abilityLyric1'] = createEntry(settings['abilityLyric1'])
		gtk_global['abilityLyric2'] = createEntry(settings['abilityLyric2'])
		gtk_global['abilityLyric3'] = createEntry(settings['abilityLyric3'])
		gtk_global['abilityLyric4'] = createEntry(settings['abilityLyric4'])
		gtk_global['resetLyric1'] = createEntry(settings['resetLyric1'])
		gtk_global['resetLyric2'] = createEntry(settings['resetLyric2'])
		gtk_global['resetLyric3'] = createEntry(settings['resetLyric3'])
		gtk_global['resetLyric4'] = createEntry(settings['resetLyric4'])
		gtk_global['try2LineFirst'] = createCheckBox(settings['try2LineFirst'])
		gtk_global['retryOnFailure'] = createCheckBox(settings['retryOnFailure'])
		
		x = 0
		while x < languages.length
			gtk_global['language_used'].append_text(languages[x])
			x += 1
		end
		gtk_global['language_used'].set_active(settings['language_used'].to_i) #have to set active after apending
		
		#use paints array to form combox
		#begin skipping for now
		
		
		window = Gtk::Window.new
		window.title = "MyLore #{VERSION}"
		window.border_width = 3
		window.resize(450, 300)
		window.resizable = true
		#window.resize(10, 10)
		
		settings_page = Gtk::Box.new(:horizontal,1).set_border_width(3)
		
		vb_pg1_2 = Gtk::Box.new(:Vertical,1).set_border_width(3)
		fr_pg1_2 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>1st Two Verse </b></big>'))
		fr_pg1_2.add(vb_pg1_2)
		
		vb_pg1_3 = Gtk::Box.new(:vertical,1).set_border_width(3)
		fr_pg1_3 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Last Two Verses </b></big>'))
		fr_pg1_3.add(vb_pg1_3)
		
		vb_pg1_1 = Gtk::Box.new(:horizontal,1).set_border_width(3)
		vb_pg1_1.add(fr_pg1_2)
		vb_pg1_1.add(fr_pg1_3)
		fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Lore Verses </b></big>'))
		fr_pg1_1.add(vb_pg1_1)
		
		settings_page.pack_start(fr_pg1_1,false)
		#settings_page.pack_start(fr_pg1_2,false)
		#settings_page.pack_start(fr_pg1_3,false)

		#random note to self width will be ignored if text is longer
		
		
		lbl = Gtk::Label.new.set_markup("<b>Value and Weight Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_2.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 1(4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric1'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 2(4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric2'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric3'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric4'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("<b>Purpose Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_2.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 1(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric1'].set_width_request(300).set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 2(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric2'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric3'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric4'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		
		#Here is where to split
		
		lbl = Gtk::Label.new.set_markup("<b>Magical Enhancement Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_3.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 1(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric1'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 2(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric2'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric3'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric4'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("<b>Special Ability Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_3.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 1(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric1'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 2(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric2'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric3'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric4'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		vb_pg1_1.pack_start(vb_pg1_3,false)
		
		#End of Lore Settings
		vb_pg2_1 = Gtk::Box.new(:vertical,1).set_border_width(3)
		fr_pg2_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>General Settings</b></big>'))
		fr_pg2_1.add(vb_pg2_1)
		settings_page.pack_start(fr_pg2_1,false)
		
		lbl = Gtk::Label.new.set_markup("<b>Reset Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg2_1.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 1 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric1'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 2 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric2'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 3 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric3'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 3 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric4'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("<b>General Settings</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg2_1.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:horizontal,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Singing Language : ')).set_width_request(120))
		hb.pack_start(gtk_global['language_used'].set_width_request(158),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:horizontal,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Use 2 Line First? : ')).set_width_request(75))
		hb.pack_start(gtk_global['try2LineFirst'],false)
		vb_pg2_1.pack_start(hb,false)

		hb = Gtk::Box.new(:horizontal,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Retry on Failure? : ')).set_width_request(75))
		hb.pack_start(gtk_global['retryOnFailure'],false)
		vb_pg2_1.pack_start(hb,false)	
		
		lbl = Gtk::Label.new.set_markup("Mouse over each box for more help and ensure the ending of each verse in a lyric rhymes")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg2_1.pack_start(lbl,false)
		
		hb_saveclose = Gtk::Box.new(:vertical,1)
		save = Gtk::Button.new('_Save & Close')
		close = Gtk::Button.new('E_xit')
		save.signal_connect('clicked') { window_action = :save }
		close.signal_connect('clicked') { window_action = :done }
		hb_saveclose.pack_start(save,false)
		hb_saveclose.pack_start(close,false)
		
		vb_pg2_1.pack_start(hb_saveclose,false)
				
		
		# Primary VerticalBox to split up Notebook and Save/Close buttons
		#vb_main = Gtk::VBox.new(false,1)
		#vb_main.border_width = 3
		
		#vb_main.pack_start(nb,false)
		#vb_main.pack_start(hb_saveclose,false)
		
		window.signal_connect('delete_event') { window_action = :exit }
		
		#window.add(vb_main)	
		
		
		window.add(settings_page)
		
		
		
		window.show_all
		window.keep_above = true # On windows keep_above is required AFTER show_all
		
	}
	

	
	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }
	clean_entry = proc { |entry|
		entry.text = entry.text.strip
		if entry.text.empty?
			entry.text = nil
		end
		
		entry.text
	}
		
	
	if window_action == :save		
		gtk_global.each_pair { |option,widget|
			
			if widget.class == Gtk::CheckButton
				settings[option] = widget.active?
			elsif widget.class == Gtk::Entry
				settings[option] = clean_entry.call(widget)
			elsif widget.class == Gtk::ComboBoxText
				settings[option] = widget.active
			else
				echo "error: unknown local widget #{option} [#{widget.class}]"
			end
		}
		check_settings(settings)
		
		echo 'settings saved'
		exit
	else
		echo 'closed without saving'
		exit
	end
}



reset = proc {
	echo "entered reset proc"
	gtk_global = Hash.new
	window = window_action = nil
	Gtk.queue {
		#ttips = Gtk::Tooltips.new.enable
		#ttips_text = {
		#	'language_used' => 'Select a language you are able to speak to use something other than common',
		#	'valueLyric1' => 'First line fo the Value Lyric',
		#	'valueLyric2' => 'Second line fo the Value Lyric',
		#	'valueLyric3' => 'Third line fo the Value Lyric',
		#	'valueLyric4' => 'Fourth line fo the Value Lyric',
		#	'purposeLyric1' => 'First line fo the Purpose Lyric', 
		#	'purposeLyric2' => 'Second line fo the Purpose Lyric',
		#	'purposeLyric3' => 'Third line fo the Purpose Lyric', 
		#	'purposeLyric4' => 'Fourth line fo the Purpose Lyric',
		#	'magicLyric1' => 'First line fo the Magic Lyric', 
		#	'magicLyric2' => 'Second line fo the Magic Lyric',
		#	'magicLyric3' => 'Third line fo the Magic Lyric', 
		#	'magicLyric4' => 'Fourth line fo the Magic Lyric',
		#	'abilityLyric1' => 'First line fo the Ability Lyric', 
		#	'abilityLyric2' => 'Second line fo the Ability Lyric',
		#	'abilityLyric3' => 'Third line fo the Ability Lyric', 
		#	'abilityLyric4' => 'Fourth line fo the Ability Lyric',
		#	'resetLyric1' => 'First line of the Reset Lyric with no Keywords',
		#	'resetLyric2' => 'Second line of the Reset Lyric with no Keywords',
		#	'resetLyric3' => 'Third line of the Reset Lyric with no Keywords',
		#	'resetLyric4' => 'Fourth line of the Reset Lyric with no Keywords',
		#	'try2LineFirst' => 'Try to use a 2 Line Lyric but if you fail use a 4 line',
		#	'retryOnFailure' => 'If our Loresong fails to learn anything try again after resetting',
		#	
		#}
		
			settings['language_used'] = 0
			#Value Verse
			settings['valueLyric1'] = "Whether you are pruned from forges sprue"
			settings['valueLyric2'] = "or assembled and held with exotic glue"
			settings['valueLyric3'] = "Please tell me all and tell me true"
			settings['valueLyric4'] = "Reveal to me your weight and value?"
			#Purpose Verse
			settings['purposeLyric1'] = "A calling of darkness for all to fear"
			settings['purposeLyric2'] = "or a herald of peace for bending an ear"
			settings['purposeLyric3'] = "I am listening now so it shall soon be clear"
			settings['purposeLyric4'] = "For it's your purpose that I'd most like to hear"
			#Magic Verse
			settings['magicLyric1'] = "Whether arcane fires full of glow"
			settings['magicLyric2'] = "or waters ripple on the ebb tide flow"
			settings['magicLyric3'] = "Mysteries be unshrouded for me to know"
			settings['magicLyric4'] = "What skill or how you enhance I ask you show."
			#Ability Verse
			settings['abilityLyric1'] = "As I look at the front or even the side"
			settings['abilityLyric2'] = "ever patient am I of the time that I bide"
			settings['abilityLyric3'] = "From my ears and eyes you have nothing to hide"
			settings['abilityLyric4'] = "What special ability do you hold inside?"
			#Reset Verse
			settings['resetLyric1'] = "I sing a song to learn the truth"
			settings['resetLyric2'] = "and hope by altering my words of lore"
			settings['resetLyric3'] = "I shall gather my verses for to sustain"
			settings['resetLyric4'] = "And cause your secrets to therefor pour"		
			settings['debugLogging'] = false	
			
		
		gtk_global['language_used'] = Gtk::ComboBoxText.new(is_text_only = true)
		gtk_global['valueLyric1'] = createEntry(settings['valueLyric1'])
		gtk_global['valueLyric2'] = createEntry(settings['valueLyric2'])
		gtk_global['valueLyric3'] = createEntry(settings['valueLyric3'])
		gtk_global['valueLyric4'] = createEntry(settings['valueLyric4'])
		gtk_global['purposeLyric1'] = createEntry(settings['purposeLyric1'])
		gtk_global['purposeLyric2'] = createEntry(settings['purposeLyric2'])
		gtk_global['purposeLyric3'] = createEntry(settings['purposeLyric3'])
		gtk_global['purposeLyric4'] = createEntry(settings['purposeLyric4'])
		gtk_global['magicLyric1'] = createEntry(settings['magicLyric1'])
		gtk_global['magicLyric2'] = createEntry(settings['magicLyric2'])
		gtk_global['magicLyric3'] = createEntry(settings['magicLyric3'])
		gtk_global['magicLyric4'] = createEntry(settings['magicLyric4'])
		gtk_global['abilityLyric1'] = createEntry(settings['abilityLyric1'])
		gtk_global['abilityLyric2'] = createEntry(settings['abilityLyric2'])
		gtk_global['abilityLyric3'] = createEntry(settings['abilityLyric3'])
		gtk_global['abilityLyric4'] = createEntry(settings['abilityLyric4'])
		gtk_global['resetLyric1'] = createEntry(settings['resetLyric1'])
		gtk_global['resetLyric2'] = createEntry(settings['resetLyric2'])
		gtk_global['resetLyric3'] = createEntry(settings['resetLyric3'])
		gtk_global['resetLyric4'] = createEntry(settings['resetLyric4'])
		gtk_global['try2LineFirst'] = createCheckBox(settings['try2LineFirst'])
		gtk_global['retryOnFailure'] = createCheckBox(settings['retryOnFailure'])

		x = 0
		while x < languages.length
			gtk_global['language_used'].append_text(languages[x])
			x += 1
		end
		gtk_global['language_used'].set_active(settings['language_used'].to_i) #have to set active after apending
		
		#use paints array to form combox
		#begin skipping for now
		
		
		window = Gtk::Window.new
		window.title = "MyLore #{VERSION}"
		window.border_width = 3
		window.resize(450, 300)
		window.resizable = true
		#window.resize(10, 10)
		
		settings_page = Gtk::Box.new(:horizontal,1).set_border_width(3)
		
		vb_pg1_2 = Gtk::Box.new(:Vertical,1).set_border_width(3)
		fr_pg1_2 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>1st Two Verse </b></big>'))
		fr_pg1_2.add(vb_pg1_2)
		
		vb_pg1_3 = Gtk::Box.new(:vertical,1).set_border_width(3)
		fr_pg1_3 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Last Two Verses </b></big>'))
		fr_pg1_3.add(vb_pg1_3)
		
		vb_pg1_1 = Gtk::Box.new(:horizontal,1).set_border_width(3)
		vb_pg1_1.add(fr_pg1_2)
		vb_pg1_1.add(fr_pg1_3)
		fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Lore Verses </b></big>'))
		fr_pg1_1.add(vb_pg1_1)
		
		settings_page.pack_start(fr_pg1_1,false)
		#settings_page.pack_start(fr_pg1_2,false)
		#settings_page.pack_start(fr_pg1_3,false)

		#random note to self width will be ignored if text is longer
		
		lbl = Gtk::Label.new.set_markup("<b>Value and Weight Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_2.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 1(4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric1'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 2(4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric2'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric3'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Value Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['valueLyric4'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("<b>Purpose Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_2.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 1(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric1'].set_width_request(300).set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 2(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric2'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric3'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Purpose Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['purposeLyric4'].set_width_request(300),false)
		vb_pg1_2.pack_start(hb,false)
		
		
		#Here is where to split
		
		lbl = Gtk::Label.new.set_markup("<b>Magical Enhancement Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_3.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 1(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric1'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 2(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric2'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric3'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Magic Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['magicLyric4'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("<b>Special Ability Lore Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_3.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 1(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric1'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 2(2) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric2'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 3(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric3'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Ability Lyric Line 4(2&4) : ')).set_width_request(150))
		hb.pack_start(gtk_global['abilityLyric4'].set_width_request(300),false)
		vb_pg1_3.pack_start(hb,false)
		vb_pg1_1.pack_start(vb_pg1_3,false)
		
		#End of Lore Settings
		vb_pg2_1 = Gtk::Box.new(:vertical,1).set_border_width(3)
		fr_pg2_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>General Settings</b></big>'))
		fr_pg2_1.add(vb_pg2_1)
		settings_page.pack_start(fr_pg2_1,false)
		
		lbl = Gtk::Label.new.set_markup("<b>Reset Lyrics</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg2_1.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 1 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric1'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 2 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric2'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 3 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric3'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:vertical,1)
		hb.pack_start(Gtk::Alignment.new(0,0,0,0).add(Gtk::Label.new('Reset Lyric Line 3 : ')).set_width_request(150))
		hb.pack_start(gtk_global['resetLyric4'].set_width_request(300),false)
		vb_pg2_1.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("<b>General Settings</b>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg2_1.pack_start(lbl,false)
		
		hb = Gtk::Box.new(:horizontal,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Singing Language : ')).set_width_request(120))
		hb.pack_start(gtk_global['language_used'].set_width_request(158),false)
		vb_pg2_1.pack_start(hb,false)
		
		hb = Gtk::Box.new(:horizontal,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Use 2 Line First? : ')).set_width_request(75))
		hb.pack_start(gtk_global['try2LineFirst'],false)
		vb_pg2_1.pack_start(hb,false)

		hb = Gtk::Box.new(:horizontal,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Retry on Failure? : ')).set_width_request(75))
		hb.pack_start(gtk_global['retryOnFailure'],false)
		vb_pg2_1.pack_start(hb,false)	
		
		lbl = Gtk::Label.new.set_markup("Mouse over each box for more help and ensure the ending of each verse in a lyric rhymes")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg2_1.pack_start(lbl,false)
		
		hb_saveclose = Gtk::Box.new(:vertical,1)
		save = Gtk::Button.new('_Save & Close')
		close = Gtk::Button.new('E_xit')
		save.signal_connect('clicked') { window_action = :save }
		close.signal_connect('clicked') { window_action = :done }
		hb_saveclose.pack_start(save,false)
		hb_saveclose.pack_start(close,false)
		
		vb_pg2_1.pack_start(hb_saveclose,false)
		
				
		
		# Primary VerticalBox to split up Notebook and Save/Close buttons
		#vb_main = Gtk::VBox.new(false,1)
		#vb_main.border_width = 3
		
		#vb_main.pack_start(nb,false)
		#vb_main.pack_start(hb_saveclose,false)
		
		window.signal_connect('delete_event') { window_action = :exit }
		
		#window.add(vb_main)	
		
		
		window.add(settings_page)
		
		
		
		window.show_all
		window.keep_above = true # On windows keep_above is required AFTER show_all
		
	}
	

	
	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }
	clean_entry = proc { |entry|
		entry.text = entry.text.strip
		if entry.text.empty?
			entry.text = nil
		end
		
		entry.text
	}
		
	
	if window_action == :save		
		gtk_global.each_pair { |option,widget|
			
			if widget.class == Gtk::CheckButton
				settings[option] = widget.active?
			elsif widget.class == Gtk::Entry
				settings[option] = clean_entry.call(widget)
			elsif widget.class == Gtk::ComboBoxText
				settings[option] = widget.active
			else
				echo "error: unknown local widget #{option} [#{widget.class}]"
			end
		}
		check_settings(settings)
		
		echo 'settings saved'
		exit
	else
		echo 'closed without saving'
		exit
	end
}
before_dying {
	echo "exiting myLore"
} 



if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in MyLore"
  respond " This version is specific to the Stormfront frontend"
  respond ""
  respond " Closing now"
  respond ""
  exit
end
hide_me

class SungItem
	#GSIV Item ID
	def initialize(itemID)
  	@itemID = itemID
  end
	def itemID
		@itemID
	end
	#Item noun 
	def itemNoun
		@itemNoun
	end
	def itemNoun=(itemNoun)
		@itemNoun = itemNoun
	end
	
	#Item Full Name 
	def itemFullName
		@itemFullName
	end
	def itemFullName=(itemFullName)
		@itemFullName = itemFullName
	end
	
	#Item Short Name 
	def itemShortName
		@itemShortName
	end
	def itemShortName=(itemShortName)
		@itemShortName = itemShortName
	end
	
	#Item Weight 
	def itemWeight
		@itemWeight
	end
	def itemWeight=(itemWeight)
		@itemWeight = itemWeight
	end
	
	#Item Value 
	def itemValue
		@itemValue
	end
	def itemValue=(itemValue)
		@itemValue = itemValue
	end
	
	#Item Quality 
	def itemQuality
		@itemQuality
	end
	def itemQuality=(itemQuality)
		@itemQuality = itemQuality
	end
	
	#Item Difficulty
	def itemDifficulty
		@itemDifficulty
	end
	def itemDifficulty=(itemDifficulty)
		@itemDifficulty = itemDifficulty
	end
	
	#Item Unlock Duration 
	def itemUnlockDuration
		@itemUnlockDuration
	end
	def itemUnlockDuration=(itemUnlockDuration)
		@itemUnlockDuration = itemUnlockDuration
	end
	
	#Item Class(weapon, armor, container, gem, jewelry, collectable, etc)
	#From the pitch of the vibration you determine that the purpose of the pin is as a piece of jewelry.
	def itemClass
		@itemClass
	end
	def itemClass=(itemClass)
		@itemClass = itemClass
	end
	
	#Item base type if applicable
	def itemType
		@itemType
	end
	def itemType=(itemType)
		@itemType = itemType
	end
	
	#Item Bonus
	def itemBonus
		@itemBonus
	end
	def itemBonus=(itemBonus)
		@itemBonus = itemBonus
	end
	
	#Item Sighted
	def isSighted
		@isSighted
	end
	def isSighted=(isSighted)
		@isSighted = isSighted
	end
	
	#Item Ensorcelment
	def itemEnsorcelTier
		@itemEnsorcelTier
	end
	def itemEnsorcelTier=(itemEnsorcelTier)
		@itemEnsorcelTier = itemEnsorcelTier
	end
	
	#Item EnsorcelledBy
	def itemEnsorcelledBy
		@itemEnsorcelledBy
	end
	def itemEnsorcelledBy=(itemEnsorcelledBy)
		@itemEnsorcelledBy = itemEnsorcelledBy
	end
	
	#Item Wearable 
	def itemIsWearable
		@itemIsWearable
	end
	def itemIsWearable=(itemIsWearable)
		@itemIsWearable = itemIsWearable
	end
	
	#Item Worn Location 
	def itemWornLocation
		@itemWornLocation
	end
	def itemWornLocation=(itemWornLocation)
		@itemWornLocation = itemWornLocation
	end
	
	#Is item pocketted?
	def itemIsPocketed
		@itemIsPocketed
	end
	def itemIsPocketed=(itemIsPocketed)
		@itemIsPocketed = itemIsPocketed
	end
	
	#Item Capacity Quantity
	def itemCapacityQuantity
		@itemCapacityQuantity
	end
	def itemCapacityQuantity=(itemCapacityQuantity)
		@itemCapacityQuantity = itemCapacityQuantity
	end

	#Item Capacity Weight
	def itemCapacityWeight
		@itemCapacityWeight
	end
	def itemCapacityWeight=(itemCapacityWeight)
		@itemCapacityWeight = itemCapacityWeight
	end

	#Enhancive1
	#Boost Amount
	def enh1BoostAmount
		@enh1BoostAmount
	end
	def enh1BoostAmount=(enh1BoostAmount)
		@enh1BoostAmount = enh1BoostAmount
	end
	#Boost to
	def enh1BoostTo
		@enh1BoostTo
	end
	def enh1BoostTo=(enh1BoostTo)
		@enh1BoostTo = enh1BoostTo
	end
	#Level Required
	def enh1LevelRequired
		@enh1LevelRequired
	end
	def enh1LevelRequired=(enh1LevelRequired)
		@enh1LevelRequired = enh1LevelRequired
	end
	
	#Enhancive2
	#Boost Amount
	def enh2BoostAmount
		@enh2BoostAmount
	end
	def enh2BoostAmount=(enh2BoostAmount)
		@enh2BoostAmount = enh2BoostAmount
	end
	#Boost to
	def enh2BoostTo
		@enh2BoostTo
	end
	def enh2BoostTo=(enh2BoostTo)
		@enh2BoostTo = enh2BoostTo
	end
	#Level Required
	def enh2LevelRequired
		@enh2LevelRequired
	end
	def enh2LevelRequired=(enh2LevelRequired)
		@enh2LevelRequired = enh2LevelRequired
	end
	
	#Enhancive3
	#Boost Amount
	def enh3BoostAmount
		@enh3BoostAmount
	end
	def enh3BoostAmount=(enh3BoostAmount)
		@enh3BoostAmount = enh3BoostAmount
	end
	#Boost to
	def enh3BoostTo
		@enh3BoostTo
	end
	def enh3BoostTo=(enh3BoostTo)
		@enh3BoostTo = enh3BoostTo
	end
	#Level Required
	def enh3LevelRequired
		@enh3LevelRequired
	end
	def enh3LevelRequired=(enh3LevelRequired)
		@enh3LevelRequired = enh3LevelRequired
	end
	
	#Enhancive4
	#Boost Amount
	def enh4BoostAmount
		@enh4BoostAmount
	end
	def enh4BoostAmount=(enh4BoostAmount)
		@enh4BoostAmount = enh4BoostAmount
	end
	#Boost to
	def enh4BoostTo
		@enh4BoostTo
	end
	def enh4BoostTo=(enh4BoostTo)
		@enh4BoostTo = enh4BoostTo
	end
	#Level Required
	def enh4LevelRequired
		@enh4LevelRequired
	end
	def enh4LevelRequired=(enh4LevelRequired)
		@enh4LevelRequired = enh4LevelRequired
	end
	
	#Enhancive5
	#Boost Amount
	def enh5BoostAmount
		@enh5BoostAmount
	end
	def enh5BoostAmount=(enh5BoostAmount)
		@enh5BoostAmount = enh5BoostAmount
	end
	#Boost to
	def enh5BoostTo
		@enh5BoostTo
	end
	def enh5BoostTo=(enh5BoostTo)
		@enh5BoostTo = enh5BoostTo
	end
	#Level Required
	def enh5LevelRequired
		@enh5LevelRequired
	end
	def enh5LevelRequired=(enh5LevelRequired)
		@enh5LevelRequired = enh5LevelRequired
	end
	
	#Enhancive Charges Remaining
	def enhChargeRemaining
		@enhChargeRemaining
	end
	def enhChargeRemaining=(enhChargeRemaining)
		@enhChargeRemaining = enhChargeRemaining
	end
	
	#Enhancive Crumbly?
	def enhIsCrumbly
		@enhIsCrumbly
	end
	def enhIsCrumbly=(enhIsCrumbly)
		@enhIsCrumbly = enhIsCrumbly
	end
	#Rechargeable
	def isRechargeable
		@isRechargeable
	end
	def isRechargeable=(isRechargeable)
		@isRechargeable = isRechargeable
	end
	#Blank Rechargeable
	def isBlankRechargeable
		@isBlankRechargeable
	end
	def isBlankRechargeable=(isBlankRechargeable)
		@isBlankRechargeable = isBlankRechargeable
	end
	
	#Embedable
	def isEmbedable
		@isEmbedable
	end
	def isEmbedable=(isEmbedable)
		@isEmbedable = isEmbedable
	end
	#EmbeddableCapacity
	def embeddableCapacity
		@embeddableCapacity
	end
	def embeddableCapacity=(embeddableCapacity)
		@embeddableCapacity = embeddableCapacity
	end
	#Current Spell
	def embeddableCurrentSpell
		@embeddableCurrentSpell
	end
	def embeddableCurrentSpell=(embeddableCurrentSpell)
		@embeddableCurrentSpell = embeddableCurrentSpell
	end
	#Current Charges
	def embeddableCurrentCharge
		@embeddableCurrentCharge
	end
	def embeddableCurrentCharge=(embeddableCurrentCharge)
		@embeddableCurrentCharge = embeddableCurrentCharge
	end
	#Embeddable Crumbly?
	def embeddableIsCrumbly
		@embeddableIsCrumbly
	end
	def embeddableIsCrumbly=(embeddableIsCrumbly)
		@embeddableIsCrumbly = embeddableIsCrumbly
	end
	#Reimbeddable
	def embeddableIsReembeddable
		@embeddableIsReembeddable
	end
	def embeddableIsReembeddable=(embeddableIsReembeddable)
		@embeddableIsReembeddable = embeddableIsReembeddable
	end

	#Defender Bonus
	def defenderBonus
		@defenderBonus
	end
	def defenderBonus=(defenderBonus)
		@defenderBonus = defenderBonus
	end
	
	#TD Bonus
	def tdBonus
		@tdBonus
	end
	def tdBonus=(tdBonus)
		@tdBonus = tdBonus
	end
	
	#Shield Size
	
	def shieldSize
		@shieldSize
	end
	def shieldSize=(shieldSize)
		@shieldSize = shieldSize
	end
	
	#Padding
		#Damage
	def damagePadding
		@damagePadding
	end
	def damagePadding=(damagePadding)
		@damagePadding = damagePadding
	end
		#Crit
	def critPadding
		@critPadding
	end
	def critPadding=(critPadding)
		@critPadding = critPadding
	end
	
	#Weighting
		#Damage
	def damageWeighting
		@damageWeighting
	end
	def damageWeighting=(damageWeighting)
		@damageWeighting = damageWeighting
	end
		#Crit
	def critWeighting
		@critWeighting
	end
	def critWeighting=(critWeighting)
		@critWeighting = critWeighting
	end	
	#FlareExists (No, Temp, Perm)
	def flareExists
		@flareExists
	end
	def flareExists=(flareExists)
		@flareExists = flareExists
	end
	#Flare Type
	def flareType
		@flareType
	end
	def flareType=(flareType)
		@flareType = flareType
	end
	
	#Sanctified
	def isSanctified
		@isSanctified
	end
	def isSanctified=(isSanctified)
		@isSanctified = isSanctified
	end
	#Blessed
	def isBlessed
		@isBlessed
	end
	def isBlessed=(isBlessed)
		@isBlessed = isBlessed
	end
	#PermaBlessed
	def isPermaBlessed
		@isPermaBlessed
	end
	def isPermaBlessed=(isPermaBlessed)
		@isPermaBlessed = isPermaBlessed
	end

	def parseResultText(songResultText)
		
		songResultText.each do |resultLine|
			#Break this into sections by verse type
			#Prefix Line = As you sing, you feel a faint resonating vibration from the dark grey leathers in your hand, and you learn something about it...
			#First Verse is weight value and material
			#In your best estimation, it's worth about 58,000 silvers
			
			#This is a small item, under a pound.
			#The first thing that strikes you about the runestaff is the weight, which is about 4 pounds.
			
			#You can also tell that the kakore runestaff is predominantly crafted of kakore.
			
			
			
			
		end
		
	end
	
	def outputText
		#Return a string off all of the properties
		outputString = ""
		outputString += "#{@itemID},"
		outputString += "#{@itemNoun},"
		outputString += "#{@itemShortName},"
		outputString += "#{@itemFullName},"
		outputString += "#{@itemWeight},"
		outputString += "#{@itemValue},"
		outputString += "#{@itemQuality},"
		outputString += "#{@itemUnlockDuration},"
		outputString += "#{@itemClass},"
		outputString += "#{@itemType},"
		outputString += "#{@itemBonus},"
		outputString += "#{@isSighted},"
		outputString += "#{@itemEnsorcelTier},"
		outputString += "#{@itemEnsorcelledBy},"
		outputString += "#{@itemIsWearable},"
		outputString += "#{@itemWornLocation},"
		outputString += "#{@itemIsPocketed},"
		outputString += "#{@itemCapacityQuantity},"
		outputString += "#{@itemCapacityWeight},"
		outputString += "#{@flareExists},"
		outputString += "#{@flareType},"
		outputString += "#{@isSanctified},"
		outputString += "#{@isBlessed},"
		outputString += "#{@isPermaBlessed},"
		outputString += "#{@damageWeighting},"
		outputString += "#{@critWeighting},"
		outputString += "#{@damagePadding},"
		outputString += "#{@critPadding},"
		outputString += "#{@defenderBonus},"
		outputString += "#{@tdBonus},"
		outputString += "#{@shieldSize},"
		outputString += "#{@enh1BoostAmount},"
		outputString += "#{@enh1BoostTo},"
		outputString += "#{@enh1LevelRequired},"
		outputString += "#{@enh2BoostAmount},"
		outputString += "#{@enh2BoostTo},"
		outputString += "#{@enh2LevelRequired},"
		outputString += "#{@enh3BoostAmount},"
		outputString += "#{@enh3BoostTo},"
		outputString += "#{@enh3LevelRequired},"
		outputString += "#{@enh4BoostAmount},"
		outputString += "#{@enh4BoostTo},"
		outputString += "#{@enh4LevelRequired},"
		outputString += "#{@enh5BoostAmount},"
		outputString += "#{@enh5BoostTo},"
		outputString += "#{@enh5LevelRequired},"
		outputString += "#{@enhChargeRemaining},"
		outputString += "#{@enhIsCrumbly},"
		outputString += "#{@isEmbedable},"
		outputString += "#{@embeddableCapacity},"
		outputString += "#{@embeddableCurrentSpell},"
		outputString += "#{@embeddableCurrentCharge},"
		outputString += "#{@embeddableIsCrumbly}"
		echo outputString
	end

	def fillFields
		#This is just a part of a test harness to verify output once the fields are filled in
		#@itemID = "123456789"
		@itemNoun = "itemNoun"
		@itemShortName = "itemShortName"
		@itemFullName = "itemFullName"
		@itemWeight = "5"
		@itemValue = "1000000"
		@itemQuality = "Normal"
		@itemUnlockDuration = "23 hours and 59 minutes"
		@itemClass = "Weapon"
		@itemType = "Runestaff"
		@itemBonus = "+20"
		@isSighted = true
		@itemEnsorcelTier = "1"
		@itemEnsorcelledBy = "SorcererName"
		@itemIsWearable = true
		@itemWornLocation = "Back"
		@itemIsPocketed = true
		@itemCapacityQuantity = "Any Number"
		@itemCapacityWeight = "140 pounds"
		@flareExists = "Temporary"
		@flareType = "Greater Fire"
		@isSanctified = true
		@isBlessed = true
		@isPermaBlessed = true
		@damageWeighting = "Massively"
		@critWeighting = "Somewhat"
		@damagePadding = "Massively"
		@critPadding = "Somewhat"
		@defenderBonus = "5"
		@tdBonus = "5"
		@shieldSize = "Medium"
		@enh1BoostAmount = "2"
		@enh1BoostTo = "Elemental Mana Control Bonus"
		@enh1LevelRequired ="2"
		@enh2BoostAmount = "2"
		@enh2BoostTo = "Mana"
		@enh2LevelRequired ="2"
		@enh3BoostAmount = "2"
		@enh3BoostTo = "Stamina"
		@enh3LevelRequired ="2"
		@enh4BoostAmount = "2"
		@enh4BoostTo = "Health"
		@enh4LevelRequired ="2"
		@enh5BoostAmount = "2"
		@enh5BoostTo = "Dodge Ranks"
		@enh5LevelRequired ="2"
		@enhChargeRemaining = "Giantman"
		@enhIsCrumbly = false
		@isEmbedable = true
		@embeddableCapacity = "Average"
		@embeddableCurrentSpell = "Spirit Warding I"
		@embeddableCurrentCharge = ""
		@embeddableIsCrumbly = false
		
		
	end

end

class MyLore

  attr_accessor :variable, :debug
	
	lore_verses = {
	0 => "Value",
	1 => "Purpose",
	2 => "Magic",
	3 => "Ability",
	}
	
	
	def getLoreVersebyID(lvid)
		if lvid == 0 then return "Value" end
		if lvid == 1 then return "Purpose" end
		if lvid == 2 then return "Magic" end
		if lvid == 3 then return "Ability" end
			
	end
	
	
	
	def initialize(variable, debug)
    silence_me if @debug == 0
    @variable = variable
  end
  
  def debugLog(debugState,debugSource,debugMessage)
  	if debugState
  	echo "#{debugSource} - #{debugMessage}"
  	end
  
  
	end
  
  
  def parseResults(settings,loreVerse,savedLoreResults)
  	working_lore_results = Hash.new("loreresults")
  	results = reget 10
 		#echo "We learned something"
		
		#echo results
		resultStarted = false
		resultEnded = false
		results.each {|line|
			#echo "Line #{line}"
			if line =~ /As you sing, you feel a faint resonating vibration/
				resultStarted = true
			elsif resultStarted and !resultEnded
				if  line =~ /Roundtime:/ and resultStarted
  				resultEnded = true
  			else
  					debugLog(settings['debugLogging'],"parseResults", "line = #{getLoreVersebyID(loreVerse)} and value of #{line}") 				
  				if savedLoreResults == nil
  					debugLog(settings['debugLogging'],"parseResults", "Im Nil!")
  				else
  					debugLog(settings['debugLogging'],"parseResults", "Current Lore Result in parResults is #{savedLoreResults}")
  				end
  				if line =~ /As you sing, you feel a faint resonating vibration/
  					#Skipping this first line
  				else
  					working_lore_results["#{line.chomp}"] = getLoreVersebyID(loreVerse)
  				end
  			end	  	
			end 
  	}
  	debugLog(settings['debugLogging'],"parseResults-ReturnValue", "#{working_lore_results}")
  	return working_lore_results
	end
  
  def singVerse(settings,languages,loreSongToSing,lyricCost)
  	#"As you sing, you feel a faint resonating vibration"
  	#  - means we should have results
  	#"but it simply resonates with what you previously learned."
  	#  - means we have already sung this verse whether successful or unsuccessfuly
  	#"You feel as though you have reached the end of"
  	#  - means there is no more lore for this object and need to stop here check to see where i am
  	#"Your song is weak, and without sufficient power"
  	#  - means the verse you are singing isnt likely long enough or you dont have the skill or maybe out of mana
  	#"has more to share, but your song simply wasn't powerful enough to glean more."
  	#  - means we failed but there is something to learn still so retry
  	sleep 1
	  #we use lyric cost plus 4 to account for the reset cost that sometimes occurs
	  if checkmana < lyricCost + 4 then echo "Waiting for Mana" end
	  wait_while { checkmana < lyricCost + 4 }
  	debugLog(settings['debugLogging'], "singVerse","Language to use=#{languages[settings['language_used']]}")
  	waitrt?
  	changeToVerseLanguage(languages[settings['language_used']])
  	debugLog(settings['debugLogging'], "singVerse","loreSongToSing=#{loreSongToSing}")
  	check = dothistimeout loreSongToSing, 3, /As you sing, you feel a faint resonating vibration|but it simply resonates with what you previously learned.|You feel as though you have reached the end of|Your song is weak, and without sufficient power|has more to share, but your song simply wasn't powerful enough to glean more./
  	fput "speak common"
  	debugLog(settings['debugLogging'], "singVerse","Check=#{check}")
  	return check
	end
  
  def checkVerseResultStatus(settings,statusValue)
  		debugLog(settings['debugLogging'], "checkVerseResultStatus","statusValue {#statusValue}")
  		if statusValue =~ /As you sing, you feel a faint resonating vibration/
  			debugLog(settings['debugLogging'], "checkVerseResultStatus","Learned Something")
  			return 0
  		elsif statusValue =~ /but it simply resonates with what you previously learned./
  			debugLog(settings['debugLogging'], "checkVerseResultStatus","Previously Learned")
  			return 1
  		elsif statusValue =~ /You feel as though you have reached the end of/
  			debugLog(settings['debugLogging'], "checkVerseResultStatus","Reached the End")
  			return 2
  		elsif statusValue =~ /Your song is weak, and without sufficient power/
  			debugLog(settings['debugLogging'], "checkVerseResultStatus","Song is Weak")
  			return 3
  		elsif statusValue =~ /has more to share, but your song simply wasn't powerful enough to glean more./
  			debugLog(settings['debugLogging'], "checkVerseResultStatus","Not Powerful Enough")
  			return 4
  		else
  			debugLog(settings['debugLogging'], "checkVerseResultStatus","Didnt Match Anything")
  			return 5
  		end
  
	end
  
  def loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing,loreVerseLength,attemptNumber)
  	#The first thing we check is if this is just a reset verse
  		debugLog(settings['debugLogging'], "loopVerse","loreVerseTosing=#{loreVerseToSing}")
  		debugLog(settings['debugLogging'], "loopVerse","Attempt #{attemptNumber.to_s}")
  	if loreVerseToSing >= 10
  		loreSongToSing = selectVerseToSing(settings,item_to_sing,loreVerseToSing,loreVerseLength)
  		debugLog(settings['debugLogging'], "loopVerse","loreSongToSing=#{loreSongToSing}")
		 	verseResult = singVerse(settings,languages,loreSongToSing,4)
		 	verseResultStatus =  checkVerseResultStatus(settings,verseResult)
		 	debugLog(settings['debugLogging'], "loopVerse","verseResult=#{verseResult}")
		 	loreVerseToSing -= 10
  		if verseResultStatus == 0 #Success
		 			#We want to parse our results here
					debugLog(settings['debugLogging'], "loopVerse","Reset verse Pass - Success")
		 			parsedResultVal = parseResults(settings,loreVerseToSing,verseResult)
		 			debugLog(settings['debugLogging'], "loopVerse","1stPass-ParsedResult = #{parsedResultVal}")
		 			return [1,parsedResultVal]
		 	else		
  			loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing,loreVerseLength,attemptNumber)
  		end
  	else
	  	#Next we will set a limit on maximum attempts at a verse
	  	if attemptNumber > 10 
	  		return [0,nil]
	  	#First Pass Through the loop
		 	elsif (loreVerseLength and attemptNumber <= 0) or attemptNumber <= 0
		 		loreSongToSing = selectVerseToSing(settings,item_to_sing,loreVerseToSing,loreVerseLength)
		 		verseResult = singVerse(settings,languages,loreSongToSing,2)
		 		verseResultStatus =  checkVerseResultStatus(settings,verseResult)
		 		debugLog(settings['debugLogging'], "loopVerse","1st Pass - #{verseResultStatus.to_s}")
		 		if verseResultStatus == 0 #Success
		 			#We want to parse our results here
					debugLog(settings['debugLogging'], "loopVerse","1st Pass - Success")
		 			parsedResultVal = parseResults(settings,loreVerseToSing,verseResult)
		 			debugLog(settings['debugLogging'], "loopVerse","1stPass-ParsedResult = #{parsedResultVal}")
		 			return [0,parsedResultVal]
		 		elsif verseResultStatus == 1 # Reseonates what is already learned
		 			#We want to rety since this is actually our first attempt so couldnt have learned anything yet
					debugLog(settings['debugLogging'], "loopVerse","1st Pass - Already Learned")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing += 10,loreVerseLength,attemptNumber + 1 )
		 		
		 		elsif verseResultStatus == 2 # Maybe Reached the end of what can be learned
		 			#Going to retry half as many times as this might be all there is
					debugLog(settings['debugLogging'], "loopVerse","1st Pass - Reached the end")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing += 10,loreVerseLength,attemptNumber + 9 )
		 		
		 		elsif verseResultStatus == 3 # Song is Weak (if only 2 lines try 4 lines)
		 			#Song is weak so going for a 4 line verse if we didnt before or retrying if we did
					debugLog(settings['debugLogging'], "loopVerse"," 1st Pass - Weak Song")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing,false,attemptNumber + 1 )
		 		
		 		elsif verseResultStatus == 4 # Had more to share but didnt learn it (try again)
		 			#Maybe we got unlucky on our attempt so will try again
					debugLog(settings['debugLogging'], "loopVerse","1st Pass - Had more to learn")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing += 10,false,attemptNumber + 1 )
		 		else 
		 			#Going back to original Verse
					debugLog(settings['debugLogging'], "loopVerse","1st Pass - None of the expected statuses")
					return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing -= 10,false,attemptNumber )
		 			
		 		end
		 		
		 	#Subsequent Passes through the Loop	
		 	elsif attemptNumber <= 10 and settings['retryOnFailure']
		 		loreSongToSing = selectVerseToSing(settings,item_to_sing,loreVerseToSing,false)
		 		verseResult = singVerse(settings,languages,loreSongToSing,4)
		 		verseResultStatus =  checkVerseResultStatus(settings,verseResult)
		 		if verseResultStatus == 0 #Success
		 			#We want to parse our results here
					debugLog(settings['debugLogging'], "loopVerse","Additional Pass - Success")
		 			parsedResultVal=parseResults(settings,loreVerseToSing,verseResult)
		 			debugLog(settings['debugLogging'], "loopVerse","1stPass-ParsedResult = #{parsedResultVal}")

		 			return [0,parsedResultVal]
		 		elsif verseResultStatus == 1 # Reseonates what is already learned
		 			#We want to rety since this is actually our first attempt so couldnt have learned anything yet
					debugLog(settings['debugLogging'], "loopVerse","Additional Pass - Already learned")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing += 10,loreVerseLength,attemptNumber + 1 )
		 		
		 		elsif verseResultStatus == 2 # Maybe Reached the end of what can be learned
		 			#Going to retry half as many times as this might be all there is
					debugLog(settings['debugLogging'], "loopVerse","Additional Pass - Reached the End")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing += 10,loreVerseLength,attemptNumber + 9 )
		 			 		
		 		elsif verseResultStatus == 3 # Song is Weak (if only 2 lines try 4 lines)
		 		if !loreVerseLength then loreVerseToSing += 10 end
					debugLog(settings['debugLogging'], "loopVerse","Additional Pass - Weak Song")
		 			#Song is weak so going for a 4 line verse if we didnt before or retrying if we did
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing ,false,attemptNumber + 1 )
		 		
		 		elsif verseResultStatus == 4 # Had more to share but didnt learn it (try again)
		 			#Maybe we got unlucky on our attempt so will try again
					debugLog(settings['debugLogging'], "loopVerse","Additional Pass - More to Learn")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing += 10,false,attemptNumber + 1 )
		 		else
					debugLog(settings['debugLogging'], "loopVerse","Additional Pass - Success")
		 			return loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing -= 10,false,attemptNumber )				 			
		 		end
			else
				#We have exceded our attempts
				return nil
			end
	 	end
  	
  	
	end
  
  def changeToVerseLanguage(selectedLanguage)
  		check = dothistimeout "speak #{selectedLanguage}", 3, /You are now speaking|Usage:/
		if check =~ /Usage:/
			echo "You do not speak #{selectedLanguage}, switching to guild instead."
			fput "speak bard"
					  
		end
	end
    
  def selectVerseToSing(settings,item_to_sing,loreVerseToSing,twoLineVerse)
  	if loreVerseToSing == 0
	  	valueLyric1 = "#{settings['valueLyric1']}"
			valueLyric2 = "#{settings['valueLyric2']}"
			valueLyric3 = "#{settings['valueLyric3']}"
			valueLyric4 = "#{settings['valueLyric4']}"
			valueLyric = "loresing #{item_to_sing}, "
			 #Value Lyric Assembly
		 debugLog(settings['debugLogging'], "selectVerseToSing","#{settings['try2LineFirst']}")
			if valueLyric1 != "" and !twoLineVerse
				valueLyric += valueLyric1 += ",;"
			
			end
			if valueLyric2 != "" and !twoLineVerse
				valueLyric += valueLyric2 += ",;"
			end
		  if valueLyric3 != "" then valueLyric += valueLyric3 += ",;" end
		  if valueLyric4 != "" then valueLyric += valueLyric4 += "." end
	  	return valueLyric
	  elsif loreVerseToSing == 1
			purposeLyric1 = "#{settings['purposeLyric1']}"
			purposeLyric2 = "#{settings['purposeLyric2']}"
			purposeLyric3 = "#{settings['purposeLyric3']}"
			purposeLyric4 = "#{settings['purposeLyric4']}"
			purposeLyric = "loresing #{item_to_sing}, "
			#Purpose Lyric Assembly
		  if purposeLyric1 != "" and !twoLineVerse
		  	purposeLyric += purposeLyric1 += ",;"
			
		  end
		  if purposeLyric2 != "" and !twoLineVerse
		 	 purposeLyric += purposeLyric2 += ",;"
		  end
		  if purposeLyric3 != "" then purposeLyric += purposeLyric3 += ",;" end
		  if purposeLyric4 != "" then purposeLyric += purposeLyric4 += "." end
		  return purposeLyric
		elsif loreVerseToSing == 2
			magicLyric1 = "#{settings['magicLyric1']}"
			magicLyric2 = "#{settings['magicLyric2']}"
			magicLyric3 = "#{settings['magicLyric3']}"
			magicLyric4 = "#{settings['magicLyric4']}"
			magicLyric = "loresing #{item_to_sing}, "
			#Magic Lyric Assembly
		  if magicLyric1 != "" and !twoLineVerse
			  magicLyric += magicLyric1 += ",;"
				
		  end
		  if magicLyric2 != "" and !twoLineVerse
		 	 magicLyric += magicLyric2 += ",;"
		  end
		  if magicLyric3 != "" then magicLyric += magicLyric3 += ",;" end
		  if magicLyric4 != "" then magicLyric += magicLyric4 += "." end	
		  return magicLyric
		elsif loreVerseToSing == 3
			abilityLyric1 = "#{settings['abilityLyric1']}"
			abilityLyric2 = "#{settings['abilityLyric2']}"
			abilityLyric3 = "#{settings['abilityLyric3']}"
			abilityLyric4 = "#{settings['abilityLyric4']}"
			abilityLyric = "loresing #{item_to_sing}, "
			#Ability Lyric Assembly
		  if abilityLyric1 != "" and !twoLineVerse
			  abilityLyric += abilityLyric1 += ",;"
				
		  end
		  if abilityLyric2 != "" and !twoLineVerse
		 	 abilityLyric += abilityLyric2 += ",;"
		  end
		  if abilityLyric3 != "" then abilityLyric += abilityLyric3 += ",;" end
		  if abilityLyric4 != "" then abilityLyric += abilityLyric4 += "." end
		  return abilityLyric
		else
			resetLyric1 = "#{settings['resetLyric1']}"
			resetLyric2 = "#{settings['resetLyric2']}"
			resetLyric3 = "#{settings['resetLyric3']}"
			resetLyric4 = "#{settings['resetLyric4']}"
			resetLyric = "loresing #{item_to_sing}, "
			#Reset Lyric Assembly
		  if resetLyric1 != "" then resetLyric += resetLyric1 += ",;" end
		  if resetLyric2 != "" then resetLyric += resetLyric2 += ",;" end
		  if resetLyric3 != "" then resetLyric += resetLyric3 += ",;" end
		  if resetLyric4 != "" then resetLyric += resetLyric4 += "." end
		  return resetLyric
  	end
  	
	end
  
	def getItemLongName
		#Parse Glance to get something like this
		#You glance down to see a burnished kakore runestaff in your right hand and a sonic lance in your left hand.
		fput "glance"
		fullItemName = matchfind "You glance down to see a ? in your right hand","You glance down to see an ? in your right hand","You glance down to see some ? in your right hand"
		
		echo fullItemName
		return fullItemName
	end
	
	def inspectItem(sungItem)
		fput "inspect my #{GameObj.right_hand.noun}"
		#get details around where it is worn, material, item type, coverage, etc
		return sungItem
	end
	
	def sing(verse_to_sing, sungItem, settings, languages)
		#item = checkright
		echo "Singing to #{sungItem.itemShortName}"
		before_dying {fput "speak common"}
		#exit
		
		
	  if verse_to_sing == 'all'
	  	debugLog(settings['debugLogging'], "sing","#{settings}")
	  	debugLog(settings['debugLogging'], "sing","#{languages}")
	  	debugLog(settings['debugLogging'], "sing","#{settings['try2LineFirst']}")
	  	loopStartInit += 0
	  	loreResults = Hash.new("loreResults")
	  	#need yo see if results = nil because we failed and handle that gracefully
	  	#Value
	  	# def loopVerse(loreResults,settings,item_to_sing,languages,loreVerseToSing,loreVerseLength,attemptNumber)
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,0,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] == nil
	  		#we have hit the end of the attempts but found nothing
	  		debugLog(settings['debugLogging'], "sing - all ","#{loopVerseOutput[0].to_s} shows success but results are nil")
	  		loopVerseOutput = {"No Value Found" => "Value"}
	  	elsif	loopVerseOutput[0] == 1 and loopVerseOutput[1] != nil
	  		debugLog(settings['debugLogging'], "sing - all ","#{loopVerseOutput[0].to_s} shows failure and results we will add but need to retry again")
	  		#we got a result on a reset verse but are goign to keep retrying
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  		loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,0,settings['try2LineFirst'],loopStartInit)
	  	elsif	loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil
	  		#We sang successfully so adding results properly
	  		debugLog(settings['debugLogging'], "sing - all ","#{loopVerseOutput[0].to_s} shows success and results so we will move on")
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  		
	  	else
	  		debugLog(settings['debugLogging'], "sing - all ", "Not sure what to do with #{loopVerseOutput[0].to_s} and #{loopVerseOutput[1].to_s}")
	  	end

	  	#Purpose
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,1,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] == nil
	  		#we have hit the end of the attempts but found nothing
	  		debugLog(settings['debugLogging'], "sing - all(Purpose) ","#{loopVerseOutput[0].to_s} shows success but results are nil")
	  		loopVerseOutput = {"No Value Found" => "Purpose"}
	  	elsif	loopVerseOutput[0] == 1 and loopVerseOutput[1] != nil
	  		debugLog(settings['debugLogging'], "sing - all(Purpose) ","#{loopVerseOutput[0].to_s} shows failure and results we will add but need to retry again")
	  		#we got a result on a reset verse but are goign to keep retrying
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  		#And try it again since we got a result but not from a success on this step
	  		loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,1,settings['try2LineFirst'],loopStartInit)
	  	elsif	loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil
	  		#We sang successfully so adding results properly
	  		debugLog(settings['debugLogging'], "sing - all(Purpose) ","#{loopVerseOutput[0].to_s} shows success and results so we will move on")
	  		
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  	else
	  		debugLog(settings['debugLogging'], "sing - all(Purpose) ", "not sure what to do with #{loopVerseOutput[0].to_s} and #{loopVerseOutput[1].to_s}")
	  	end
			
			#Magic
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,2,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] == nil
	  		#we have hit the end of the attempts but found nothing
	  		debugLog(settings['debugLogging'], "sing - all(Property) ","#{loopVerseOutput[0].to_s} shows success but results are nil")
	  		loopVerseOutput = {"No Value Found" => "Magic"}
	  	elsif	loopVerseOutput[0] == 1 and loopVerseOutput[1] != nil
	  		debugLog(settings['debugLogging'], "sing - all(Magic) ","#{loopVerseOutput[0].to_s} shows failure and results we will add but need to retry again")
	  		#we got a result on a reset verse but are goign to keep retrying
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  		loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,2,settings['try2LineFirst'],loopStartInit)
	  	elsif	loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil
	  		#We sang successfully so adding results properly
	  		debugLog(settings['debugLogging'], "sing - all(Magic) ","#{loopVerseOutput[0].to_s} shows success and results so we will move on")
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  	else
	  		debugLog(settings['debugLogging'], "sing - all(Magic) ", "not sure what to do with #{loopVerseOutput[0].to_s} and #{loopVerseOutput[1].to_s}")
	  	end

			#Ability
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,3,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] == nil
	  		#we have hit the end of the attempts but found nothing
	  		debugLog(settings['debugLogging'], "sing - all(Ability) ","#{loopVerseOutput[0].to_s} shows success but results are nil")
	  		loopVerseOutput = {"No Value Found" => "Ability"}
	  	elsif	loopVerseOutput[0] == 1 and loopVerseOutput[1] != nil
	  		debugLog(settings['debugLogging'], "sing - all(Ability) ","#{loopVerseOutput[0].to_s} shows failure and results we will add but need to retry again")
	  		#we got a result on a reset verse but are goign to keep retrying
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  		loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,3,settings['try2LineFirst'],loopStartInit)
	  	elsif	loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil
	  		#We sang successfully so adding results properly
	  		debugLog(settings['debugLogging'], "sing - all(Ability) ","#{loopVerseOutput[0].to_s} shows success and results so we will move on")
	  		loreResults = loreResults.merge(loopVerseOutput[1])
	  	else
	  		debugLog(settings['debugLogging'], "sing - all(Ability) ", "not sure what to do with #{loopVerseOutput[0].to_s} and #{loopVerseOutput[1].to_s}")
	  	end

			
			
			
			
		elsif verse_to_sing == 'value'
	  	#Value
	  	
	  	loopStartInit += 0
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,0,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil then loopVerseOutput = {"No Value Found" => "Value"} end
			loreResults = loreResults.merge(loopVerseOutput[1])
					  
		elsif verse_to_sing == 'purpose'
			#Purpose
	  	
	  	loopStartInit += 0
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,1,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil then loopVerseOutput = {"No Purpose Found" => "Purpose"} end
			loreResults = loreResults.merge(loopVerseOutput[1])
							   
		elsif verse_to_sing == 'magic'
	  	#Magic
	  	loopStartInit += 0
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,2,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil then loopVerseOutput = {"No Magic Found" => "Magic"} end
			loreResults = loreResults.merge(loopVerseOutput[1])
						
	   
		elsif verse_to_sing == 'ability'
	  	#Ability
	  	loopStartInit += 0
	  	loopVerseOutput = loopVerse(loreResults,settings,sungItem.itemShortName,languages,3,settings['try2LineFirst'],loopStartInit)
	  	if loopVerseOutput[0] == 0 and loopVerseOutput[1] != nil then loopVerseOutput = {"No Ability Found" => "Ability"} end
			loreResults = loreResults.merge(loopVerseOutput[1])
	  	
	  elsif verse_to_sing == 'reset'
	  	
	  
		else
	    echo ".....| Command:  ';loresing all <item>'"
	    echo ".....| Command:  ';loresing value <item>'"
	    echo ".....| Command:  ';loresing purpose <item>'"
	    echo ".....| Command:  ';loresing magic <item>'"
	    echo ".....| Command:  ';loresing ability <item>'"
	    echo ".....| Command:  ';loresing setup' to configure your verses"
	    
		end
	
		#return loreResults
		fput "speak common"
		resultType = ""
		response = ""
		spreadable = ""
		if loreResults != nil
			response = "The below properties were found for your #{sungItem.itemShortName}\r\n"
			spreadable = "#{sungItem.itemFullName},#{GameObj.right_hand.id}"
			for loreResult in loreResults.sort_by{ |k, v| v }.reverse.to_h
				#set header by section
				if loreResult[1].to_s != resultType
					resultType = loreResult[1] 
					response += "#{loreResult[1].gsub(/\\r/," ")};"
					spreadable += ","
				else
					spreadable += ";"
				end
				response += "#{loreResult[0].to_s.gsub(/\\r/,"").gsub(/\\n/," ")};"
				spreadable += loreResult[0].to_s.gsub(/\\r/,"").gsub(/\\n/," ")
					
			end
		else
			response = "We ere not able to successfuly sing results for your #{item}\r\n"
		end
		spreadable = spreadable.to_a.join.to_s.gsub(/\\r/,"").gsub(/\\n/," ")
		echo spreadable
		if !$fake_stormfront
			puts "<output class=\"mono\"/>#{monsterbold_start}#{"Lore Singing Results"}#{monsterbold_end}\r\n<output class=\"\"/>"
			puts "<output class=\"mono\"/>#{monsterbold_start}#{spreadable.to_s.gsub(/\\r/,"").gsub(/\\n/," ").to_a.join}#{monsterbold_end}\r\n<output class=\"\"/>"
		else
			puts "#{monsterbold_start}#{"Lore Singing Results"}#{monsterbold_end}"
			puts "#{monsterbold_start}#{spreadable.to_s.gsub(/\\r/,"").gsub(/\\n/," ").to_a.join}#{monsterbold_end}"
		end
		
		debugLog(settings['debugLogging'], "sing","Dump Output for all as #{loreResults}")
	end
end

settings['debugLogging'] = false

if variable[0] =~ /setup|config|configure/i
	setup.call
	exit
elsif variable[0] =~ /reset/i
	reset.call
	exit
elsif variable[0] =~ /test/i
	 testSungItem = SungItem.new("123456789")
	 testSungItem.fillFields()
	 outputText = ""
	 outputText = testSungItem.outputText() 
	exit
elsif
	variable[0] =~ /all|value|purpose|magic|ability/i
		
	if check_settings(settings)
	#loreResults = Hash.new("loreResults")

 	lore = MyLore.new(variable[0],false)
 	item = GameObj.right_hand.name
	if item != ""
		
		sungItem = SungItem.new(GameObj.right_hand.id)
		sungItem.itemFullName = lore.getItemLongName()
		sungItem.itemNoun = GameObj.right_hand.noun
		sungItem.itemShortName=GameObj.right_hand.name
		sungItem = lore.inspectItem(sungItem)
		sungItem = lore.sing(variable[1],sungItem,settings,languages)
		echo sungItem
	else
		echo "We did not detect an item in your right hand for singing to and will now exit"
		exit
	end
	

	 
	exit
	else
		echo "There appears to be a problem with your settings"
	end
else
	echo ".....| Command:  ';loresing all <item>'"
  echo ".....| Command:  ';loresing value <item>'"
  echo ".....| Command:  ';loresing purpose <item>'"
  echo ".....| Command:  ';loresing magic <item>'"
  echo ".....| Command:  ';loresing ability <item>'"
  echo ".....| Command:  ';loresing setup' to configure your verses"
end
