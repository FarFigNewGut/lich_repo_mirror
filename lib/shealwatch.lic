# vim: set ft=ruby:
=begin

    SpiffyHealWatch by SpiffyJr (spiffyjr@gmail.com)
    
    ;sheal help for details
    
     author: spiffyjr
      email: theman@spiffyjr.me
       name: SpiffyHealWatch
       tags: empath
    version: 1.0

=end

settings = CharSettings.to_hash
settings['whitelist'] ||= []
settings['invite-to-table'] ||= false
settings['whitelist-enabled'] ||= true
settings['checked-recently'] ||= []

if script.vars[1] =~ /^--/
    if script.vars[1] =~ /^--(invite-to-table|whitelist-enabled)=(on|off)$/i
        settings[$1] = $2 == 'on' ? true : false
    else
        echo "-- you're doing it wrong!"
        exit
    end
    
    echo "-- setting #{$1} set to #{$2}"
elsif script.vars[1] == 'add'
    name = script.vars[2].downcase.strip

    if name.length == 0
        echo '** no name given!'
        exit
    end

    if settings['whitelist'].include?(name)
        echo "** #{name} is already on whitelist"
        exit
    end

    settings['whitelist'].push(name).uniq!
    echo "-- added #{name} to whitelist"
elsif script.vars[1] == 'remove'
    name = script.vars[2].downcase.strip

    if name.length == 0
        echo '** no name given!'
        exit
    end

    if not settings['whitelist'].include?(name)
        echo "** #{name} is not on whitelist"
        exit
    end

    settings['whitelist'].delete(name)
    echo "-- removed #{name} from whitelist"
elsif script.vars[1] == 'list'
    echo 'Your whitelist has the following people:'
    settings['whitelist'].each { |person| echo "  - #{person}" }
elsif script.vars[1] == 'help'
    respond
    respond
    respond 'SpiffyHealWatch by SpiffyJr (theman@spiffyjr.me)'
    respond
    respond "  To see your whitelist: ;#{script.name} list"
    respond "  Add to your whitelist: ;#{script.name} add <name>"
    respond "  Remove from your whitelist: ;#{script.name} remove <name>"
    respond 
    respond "Other options:"
    respond "  ;#{script.name} --invite-to-table=<on/off> automatically invite people to table (default: off)"
    respond "  ;#{script.name} --whitelist-enabled=<on/off> only heal people on your whitelist (default: on)"
    respond
end

if script.vars.length > 0
    exit
end

has_injuries = proc { |target|
    script.want_downstream_xml = true
    script.downstream_buffer.clear

    waitrt?
    put "look at #{target}"

    start = Time.now.to_f
    injured = false

    while line = get
        if line =~ /I could not find/
            echo '** failed to find target, did they leave?'
            break
        elsif line =~ /(?:He|She) is in good shape/i
            break
        elsif line =~ /\b(?:cuts|wounds|bruises|scars?|slurred speech|bleeding|severed)\b/
            injured = true
            break
        elsif Time.now.to_f >= start + 3.00
            break
        end
    end

    script.want_downstream_xml = false

    injured
}

heal_target = proc { |name|
    if settings['checked-recently'].include?(name)
        next
    end

    settings['checked-recently'].push(name)

    if not has_injuries.call(name)
        next
    end

    wait_while { Script.running?('sheal') }
    Script.start('sheal', name, { :quiet => true })
    wait_while { Script.running?('sheal') }
}

name_regex = /#{settings['whitelist'].join('|')}/i

while true
    # remove people from checked list when they leave the room
    settings['checked-recently'].delete_if { |person| GameObj.pcs.find { |pc| pc.noun =~ /#{person}/i }.nil? }

    if settings['whitelist-enabled']
        if people = GameObj.pcs.find_all { |pc| pc.noun =~ name_regex }
            people.each { |person|
                name = person.noun.downcase

                heal_target.call(name)
            }
        end
    end

    sleep 0.25
end