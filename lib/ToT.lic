=begin
author: Alastir
date: 10/3/2022

This script will play Trick or Treat.

 Step 1:  Purchase a candy bag at [In The Bag, Entry - 31584].
 Step 2:  Make sure your variables are configured.
 - ;vars set keepsack=container (The container where your goodies will be stored - backpack, cloak, etc)

    Uses ;BIGSHOT QUICK for hunting logic. So make sure your bigshot is setup correctly.
        Hunting Tab:
        valid targets = (?:.*)
        quickhunt targets = (?:.*)
        active hunting scripts = signore, isigns, etc.
        society abilities/spells/cmans = etc.
        This script DOES use the loot script field, input something like = eloot/sloot
        
        Commands Tab:
        Fill these boxes with how you want it to attack
        hunting commands(a): = 917 target(m17), attack target(x20), etc.
        ** quick hunting commands: 917 target(m17), attack target(x20), etc.
        Set everything else up with how you want it.
        
        Start the script with your combat gear in your hands, or with empty hands and it will use GIRD.

 Step 3:  ;tot at room #31980
 Step 4:  profit
 
 
 
=end

$tot_pause = false
$tot_drops = true
$no_start = nil
$tot_starting_locations = [ '32033', '32038', '32026', '32029', '32000', '32009', '31990' ]

respond 'This script provided by Alastir'
respond ''
respond 'Variables used:'
respond 'Vars.lootsack = Where broken treasure drops are stored'
respond "Vars.lootsack is set to #{Vars.lootsack}"
respond 'You can change this by typing -- ;vars set lootsack=container'
#respond ''
#respond 'Vars.keepsack = Where token/invitation finds are stored'
#respond "Vars.keepsack is set to #{Vars.keepsack}"
#respond 'You can change this by typing -- ;vars set keepsack=container'
respond ''
respond 'The script can be paused between runs by using the $tot_pause setting.'
respond "$tot_pause is set to #{$tot_pause} and should be true/false, this should be changed now or while running, not before you start the script."
respond 'You can change this by typing == ;e $tot_pause=true/false to turn it on or off'
respond ''
respond 'The script can be set to pick up drops and break them by using the $tot_drops setting.'
respond "$tot_drops is set to #{$tot_drops} and should be true/false, this should be changed now or while running, not before you start the script."
respond 'You can change this by typing == ;e $tot_drops=true/false to turn it on or off'
respond ''
respond 'This is a smart script, and will give you data in the Stormfront Loot window if opened'
respond 'You NEED a candy bag for this script to function, it can be purchased at [In The Bag, Entry - 31584]'
respond 'The script should be started in room #31980'
respond ''
respond ';unpause tot if you are satisfied with this setup.'
pause_script

module Tot

  $tot_total = 0
  $tot_knocks = 0
  $tot_knocks_left = 10
  $tot_grand_total = 0
  $tot_start_time = 0

  def self.candy
    result = dothistimeout 'put my candy in my bag', 5, /Having located the interior compartment specific|I could not find what you were referring to./
    if result =~ /Having located the interior compartment specific/
    elsif result =~ /I could not find what you were referring to./
      fput "put my candy in my #{Vars.lootsack}"
    end
  end

  def self.knockone

    if Room.current.title == 'Endeltime Estates, Neighborhood'
      to_start
    elsif Room.current.id == 31583
      fput 'go neighborhood'
    end
    
    if checkleft != nil
      fput 'store left'
    end
    
    result = dothistimeout "knock door", 5, /You've recently knocked on this door.|What were you referring to?|A spectral hand tosses you a large bag of (.*) soul shards that you quickly pocket and slams the door shut.|A spectral hand tosses you a small bag of (.*) soul shards that you quickly pocket and slams the door shut.|A spectral hand tosses you (.*) soul shards that you quickly pocket and slams the door shut.|A spectral hand tosses you a wrapped piece of candy and slams the door shut.|A spectral hand tosses you a pumpkin-etched token and slams the door shut.|A spectral hand tosses you a pair of (.*) species and slams the door shut.|A spectral hand tosses you a ghezyte-veined sea glass bauble and slams the door shut.|bursts out, clearly angered!|grabs you and throws you inside!|A (.*) grabs you and throws you inside\!|A spectral hand tosses you a painted black invitation and slams the door shut.|You don't have time to knock on (.*) door with (.*) still chasing after you!|You need a free hand to knock on (.*)./
    if result =~ /You've recently knocked on this door./
      knocktwo
    elsif result =~ /What were you referring to?/
      to_start
    elsif result =~ /A spectral hand tosses you a large bag of (.*) soul shards that you quickly pocket and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "familiar")
			end      
      $tot_soul_shards = $1.to_i
      $tot_total = $tot_total + $tot_soul_shards
      #count += 1
      respond "You have #{$tot_knocks_left} knocks left."
      knocktwo		
    elsif result =~ /A spectral hand tosses you a small bag of (.*) soul shards that you quickly pocket and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "familiar")
			end      
      $tot_soul_shards = $1.to_i
      $tot_total = $tot_total + $tot_soul_shards
      #count += 1
      respond "You have #{$tot_knocks_left} knocks left."
      knocktwo
    elsif result =~ /A spectral hand tosses you (.*) soul shards that you quickly pocket and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "familiar")
			end      
      $tot_soul_shards = $1.to_i
      $tot_total = $tot_total + $tot_soul_shards
      respond "You have #{$tot_knocks_left} knocks left."
      knocktwo
    elsif result =~ /A spectral hand tosses you a wrapped piece of candy and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found candy!. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found candy!. (#{$tot_knocks_left})", "familiar")
			end      
      candy
      respond "You have #{$tot_knocks_left} knocks left."
      knocktwo
    elsif result =~ /A spectral hand tosses you a pumpkin-etched token and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("* Found token! (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("* Found token! (#{$tot_knocks_left})", "familiar")
			end      
      $tot_soul_shards = 0
      $tot_total = $tot_total + $tot_soul_shards
      fput "put token in my #{Vars.keepsack}"
      respond "You have #{$tot_knocks_left} knocks left."
      knocktwo
    elsif result =~ /A spectral hand tosses you a painted black invitation and slams the door shut./
      $tot_knocks_left -= 1
      loop {
        if $frontend == 'stormfront'
          Lich::Messaging.stream_window("*** Found INVITATION!!!!! (#{$tot_knocks_left})", "loot")
        else
          Lich::Messaging.stream_window("*** Found INVITATION!!!!! (#{$tot_knocks_left})", "familiar")
        end        
        respond 'Unpause the script to continue'
        Script.pause('tot')
        break
      }
      fput "put invitation in my #{Vars.keepsack}"
      respond "You have #{$tot_knocks_left} knocks left."
      knocktwo
    
    elsif result =~ /bursts out, clearly angered!|grabs you and throws you inside!|A (.*) grabs you and throws you inside\!|You don't have time to knock on (.*) door with (.*) still chasing after you!/
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found creature!", "loot")
			else
        Lich::Messaging.stream_window("Found creature!", "familiar")
			end
      fput 'gird'
      tot_attack
      fput 'store all'
      fput 'out'
      knocktwo
    elsif result =~ /You need a free hand to knock on (.*)./
      fput 'store weapon'
      if checkright
        fput "put #{GameObj.right_hand.noun} in my #{Vars.lootsack}"
      elsif checkleft
        fput "put #{GameObj.left_hand.noun} in my #{Vars.lootsack}"
      end
    end
  end

  def self.knocktwo

    if Room.current.title == 'Endeltime Estates, Neighborhood'
      to_start
    elsif Room.current.id == 31583
      fput 'go neighborhood'
    end
    
    if checkleft != nil
      fput 'store left'
    end
    
    result = dothistimeout "knock other door", 5, /You've recently knocked on this door.|What were you referring to?|A spectral hand tosses you a large bag of (.*) soul shards that you quickly pocket and slams the door shut.|A spectral hand tosses you a small bag of (.*) soul shards that you quickly pocket and slams the door shut.|A spectral hand tosses you (.*) soul shards that you quickly pocket and slams the door shut.|A spectral hand tosses you a wrapped piece of candy and slams the door shut.|A spectral hand tosses you a pumpkin-etched token and slams the door shut.|A spectral hand tosses you a pair of (.*) species and slams the door shut.|A spectral hand tosses you a ghezyte-veined sea glass bauble and slams the door shut.|bursts out, clearly angered!|grabs you and throws you inside!|A (.*) grabs you and throws you inside\!|A spectral hand tosses you a painted black invitation and slams the door shut.|You don't have time to knock on (.*) door with (.*) still chasing after you!|You need a free hand to knock on (.*)./
    if result =~ /You've recently knocked on this door./
      wander
    elsif result =~ /What were you referring to?/
      to_start
    elsif result =~ /A spectral hand tosses you a large bag of (.*) soul shards that you quickly pocket and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "familiar")
			end    
      $tot_soul_shards = $1.to_i
      $tot_total = $tot_total + $tot_soul_shards
      #count += 1
      respond "You have #{$tot_knocks_left} knocks left."
      wander	
    elsif result =~ /A spectral hand tosses you a small bag of (.*) soul shards that you quickly pocket and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "familiar")
			end     
      $tot_soul_shards = $1.to_i
      $tot_total = $tot_total + $tot_soul_shards
      respond "You have #{$tot_knocks_left} knocks left."
      wander
    elsif result =~ /A spectral hand tosses you (.*) soul shards that you quickly pocket and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found #{$1} soul shards. (#{$tot_knocks_left})", "familiar")
			end
      $tot_soul_shards = $1.to_i
      $tot_total = $tot_total + $tot_soul_shards
      respond "You have #{$tot_knocks_left} knocks left."
      wander
    elsif result =~ /A spectral hand tosses you a wrapped piece of candy and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found candy!. (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("Found candy!. (#{$tot_knocks_left})", "familiar")
			end
      candy
      respond "You have #{$tot_knocks_left} knocks left."
      wander
    elsif result =~ /A spectral hand tosses you a pumpkin-etched token and slams the door shut.|A spectral hand tosses you a pair of (.*) species and slams the door shut./
      $tot_knocks_left -= 1
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("* Found token! (#{$tot_knocks_left})", "loot")
			else
        Lich::Messaging.stream_window("* Found token! (#{$tot_knocks_left})", "familiar")
			end
      $tot_soul_shards = 0
      $tot_total = $tot_total + $tot_soul_shards
      fput "put token in my #{Vars.keepsack}"
      respond "You have #{$tot_knocks_left} knocks left."
      wander
    elsif result =~ /A spectral hand tosses you a painted black invitation and slams the door shut./
      $tot_knocks_left -= 1
      loop {
        if $frontend == 'stormfront'
          Lich::Messaging.stream_window("*** Found INVITATION!!!!! (#{$tot_knocks_left})", "loot")
        else
          Lich::Messaging.stream_window("*** Found INVITATION!!!!! (#{$tot_knocks_left})", "familiar")
        end
        respond 'Unpause the script to continue'
        Script.pause('tot')
        break
      }
      fput "put invitation in my #{Vars.keepsack}"
      respond "You have #{$tot_knocks_left} knocks left."
      wander
    
    elsif result =~ /bursts out, clearly angered!|grabs you and throws you inside!|A (.*) grabs you and throws you inside\!|You don't have time to knock on (.*) door with (.*) still chasing after you!/
			if $frontend == 'stormfront'
        Lich::Messaging.stream_window("Found creature!", "loot")
			else
        Lich::Messaging.stream_window("Found creature!", "familiar")
			end
      fput 'gird'
      tot_attack
      fput 'store all'
      fput 'out'
      wander
    elsif result =~ /You need a free hand to knock on (.*)./
      fput 'store weapon'
      if checkright
        fput "put #{GameObj.right_hand.noun} in my #{Vars.lootsack}"
      elsif checkleft
        fput "put #{GameObj.left_hand.noun} in my #{Vars.lootsack}"
      end
    end
  end

  def self.stand
    if not standing?
      waitrt?
      fput 'stance offensive'
      fput "stand" until standing?
    end
  end

  def self.haste
    waitrt?
    waitcastrt?
    if Char.prof == 'Bard'
      if !Spell[1035].active?
        Spell[1035].cast if Spell[1035].known? and Spell[1035].affordable?
      end
    end
    if Char.prof == 'Wizard'
      Spell[506].cast if Spell[506].affordable? and Spell[506].known? unless Spell[506].active?
    end
  end

  def self.stomp
    if Spell[909].active? and Spell[909].known?
      if checkmana(5)
        fput 'stomp' if Spell[909].active?
      end
    elsif !Spell[909].active? and Spell[909].known?
      if checkmana(9)
        fput 'incant 909'
        waitcastrt?
        fput 'stomp'
      end
    end
  end

  def self.attack(npc)
    attack_stance = "offensive"

    stand
    haste
    fput "stance #{attack_stance}" if checkstance != attack_stance
    result = dothistimeout('attack', 2, /You thrust|You do not currently have a target.|You currently have no valid target.|Be at peace my child, there is no need to fight here.|...wait 1 seconds.|Wait 1 second./)
    if result =~ /You thrust/
      sleep 0.1
      waitrt?
      waitcastrt?
      attack(npc)
      #$stomp_wait = false
    elsif result =~ /You do not currently have a target.|You currently have no valid target.|You do not currently have a target.|Be at peace my child, there is no need to fight here./
      fput 'loot'
    elsif result =~ /...wait 1 seconds.|Wait 1 second./
      attack(npc)
    elsif result =~ /Please rephrase that command./
      #$stomp_wait = false
    end
  end

  def self.tot_break(obj)
    sleep 0.3
    prize_result = dothistimeout "break ##{obj.id}", 10, /Glancing around, you notice some silver coins scattered across the floor.|Glancing around, you notice (.*) on the floor and pick it up.|I don't understand what you typed./
    if prize_result =~ /Glancing around, you notice some silver coins scattered across the floor./
      fput 'get coins'
    else
  #	elsif prize_result =~ /Glancing around, you notice (.*) on the floor and pick it up./
      found_prize = GameObj.right_hand.name
  #		puts("#{fam_window_begin}Found: #{found_prize}.\r\n#{fam_window_end}")
      prize = GameObj.right_hand.noun
  #		puts("#{fam_window_begin}Prize set to: #{prize}.\r\n#{fam_window_end}")
      fput "put #{prize} in my #{Vars.lootsack}"
  #	elsif prize_result =~ /I don't understand what you typed./
  #		echo 'Something is wrong, fix me'
  #		Script.pause
    end	
  end

  def self.tot_cleanup
    if GameObj.loot.any? { |obj| obj.noun =~ /agate|alexandrite|amethyst|auroraline|crowstone|crystal|dreamstone|everine|fluorite|jasper|obsidian|onyx|opal|rosette|sapphire|scolecite|scoria|soulstone|stone|sunstone/ }
      fput 'store all'
      while GameObj.loot.find { |obj| obj.noun =~ /agate|alexandrite|amethyst|auroraline|crowstone|crystal|dreamstone|everine|fluorite|jasper|obsidian|onyx|opal|rosette|sapphire|scolecite|scoria|soulstone|stone|sunstone/
        result = dothistimeout "get ##{obj.id}", 5, /You can't pick that up.|You gather the remaining (\d) coins.|You pick up|You can only loot creatures!|You reach out and try to grab/
        if result =~ /You can't pick that up./
          break
        elsif result =~ /You gather the remaining (\d) coins./
        elsif result =~ /You pick up/
          fput "put ##{obj.id} in my #{Vars.lootsack}"
          #tot_break(obj)
        elsif result =~ /You can only loot creatures!/
          fput 'out'
        elsif result =~ /You reach out and try to grab/
          break
        end
        }
      end
    end
  end

  #Glancing around, you notice a glyph-etched fire opal medallion on the ground and pick it up.

  def self.tot_attack
    fput 'target random'
    while GameObj.targets.any? {|npc| npc.status !~ /dead|gone/ and npc.noun =~ /concierge|drunkard|ghoul|groundskeeper|shopkeeper|skeleton/ }
      GameObj.targets
      .reject {|foe| foe.status =~ /dead|gone/}
      .sample
      .tap { |npc|
      
         if Char.name == 'Alastir'
          if not standing?
            stand
          end
          haste
          attack(npc)
        elsif (Script.exists?("bigshot"))
          Script.run "bigshot", "quick"
          wait_while { running? 'bigshot' }        

          if Char.prof == 'Sorcerer'
            fput 'stop 709'
          end

          fput 'loot'
        else
          respond "No Bigshot, handle the creature yourself and unpause the script when done."
          pause_script
          fput 'stance defensive'
          fput 'store all'
          fput 'loot'
        end

        if $tot_drops == true
          tot_cleanup
        end
      }
    end
  end

  def self.to_start
    if $frontend == 'stormfront'
      Lich::Messaging.stream_window("Total Found: #{$tot_total} soul shards.", "loot")
      $tot_grand_total = $tot_grand_total + $tot_total
      Lich::Messaging.stream_window("Grand Total: #{$tot_grand_total} soul shards.", "loot")
      $tot_total_time = Time.now - $tot_start_time
      Lich::Messaging.stream_window("Total Time: #{Time.at($tot_total_time).strftime("%M:%S")}!", "loot")
    else
      Lich::Messaging.stream_window("Total Found: #{$tot_total} soul shards.", "familiar")
      $tot_grand_total = $tot_grand_total + $tot_total
      Lich::Messaging.stream_window("Grand Total: #{$tot_grand_total} soul shards.", "familiar")
      $tot_total_time = Time.now - $tot_start_time
      Lich::Messaging.stream_window("Total Found: #{$tot_total} soul shards.", "familiar")
      Lich::Messaging.stream_window("Total Time: #{Time.at($tot_total_time).strftime("%M:%S")}!", "familiar")
    end
    if $tot_pause == true
      Script.pause('tot')
    end
  end

  def self.start
  
    result = dothistimeout('go entry', 5, /The shadowy apparition accepts your key and unlocks a large gated entry.|You need to redeem a barrel key to get inside./)  
    if result =~ /The shadowy apparition accepts your key and unlocks a large gated entry.|You need to redeem a barrel key to get inside./
      $tot_start_time = Time.now
       
      $tot_total = 0
      $tot_knocks = 0
      $tot_knocks_left = 10

      if $tot_starting_locations.empty?
        $tot_starting_locations = [ '32033', '32038', '32026', '32029', '32000', '32009', '31990' ]
      else
        $tot_starting_room = $tot_starting_locations.sample
        if $frontend == 'stormfront'
          Lich::Messaging.stream_window("~ Starting in room #{$tot_starting_room}!", "loot")
        else
          Lich::Messaging.stream_window("~ Starting in room #{$tot_starting_room}!", "familiar")
        end
        $tot_starting_locations.delete($tot_starting_room)
      end
        
      start_script 'go2', [$tot_starting_room]
      wait_while { running? 'go2' }
    elsif result =~ /You need to redeem a barrel key to get inside./
      if $frontend == 'stormfront'
        Lich::Messaging.stream_window("~ Out of Entries!", "loot")
      else
        Lich::Messaging.stream_window("~ Out of Entries!", "familiar")
      end
      Script.kill('tot')
    end
  end

  def self.wander(badrooms = [29290,29291,29292])
    if Room.current.id == 4
      walk
      return
    end
    broom = badrooms
    badrooms = []
    broom.each {|room| badrooms.push(room.to_s)}
    $wander_last_room ||= nil
    room = Room.current
    options = Room.current.wayto.keys - badrooms
    next_room_options = room.wayto.keys - badrooms
    if next_room_options.length > 1
      next_room_options.delete_if {|option| option == $wander_last_room}
    end
    next_room = next_room_options[rand(next_room_options.length)]
    way = room.wayto[next_room]
    if way.class == String
      move(way)
    else
      way.call
    end
    $wander_last_room = room.id.to_s
  end

  #Main Loop
  def self.check_encumbrance
    if percentencumbrance >= 20
      respond "You're carrying too much stuff, lighten up!"
      respond "You're carrying too much stuff, lighten up!"
      respond "You're carrying too much stuff, lighten up!"
      respond "You're carrying too much stuff, lighten up!"
      respond "You're carrying too much stuff, lighten up!"
      Script.kill('tot')
    end
  end

  loop {
    check_encumbrance
    
    if Room.current.id == 31980
        if $frontend == 'stormfront'
          Lich::Messaging.stream_window("~ I'm going Trick of Treating!", "loot")
        else
          Lich::Messaging.stream_window("~ I'm going Trick of Treating!", "familiar")
        end

      start
    else
      knockone
    end
  }

end #End of Module