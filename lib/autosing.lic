=begin

 **** Auto Loresing ****
 set your sing_to_me_container variable
 sings to everything in the container
 outputs formatted results into a log file
  
 author: Timbalt


=end


log_file = "#{$script_dir}autoSing-LOG-#{Time.now.strftime("%Y-%m-%d")}.txt"
file = File.open(log_file, File::WRONLY|File::APPEND|File::CREAT) 
    
before_dying { file.close }

def get_until(pattern, timeout = 30)
  lines = []
  start_time = Time.now
  loop do
    break if Time.now - start_time > timeout
    line = get
    break unless line
    lines << line
    break if line =~ pattern
  end
  lines
end

def sing_info(cmd)
  info = []
  fput cmd
  lines = get_until(/Roundtime|prompt/)
  catch = false
  lines.each do |line|
    catch ||= line =~ /\.\.\./
    info << line.strip.gsub(/<.+?>/, '') if catch && !line.strip.empty? && line !~ /Roundtime|prompt/
  end
  info
end

if Vars.sing_to_me_container.nil?
    Lich::Messaging.msg("info", "First time running the script? Set your sing_to_me_container")
    Lich::Messaging.msg("info", ";vars set sing_to_me_container = container")
		exit
end
    

container_name = Vars.sing_to_me_container
# container_name = "sack" if container_name.nil? || container_name.empty?
main_container = GameObj.inv.find { |obj| obj.name =~ /#{container_name}/i }

if main_container.nil?
  Lich::Messaging.msg("info", "Container '#{container_name}' not found in inventory!")
  exit
end

fput "look in my #{main_container.noun}"

main_container.contents.each { |item|
  fput "get ##{item.id}"
  log_file = "#{$script_dir}autoSing-LOG-#{Time.now.strftime("%Y-%m-%d")}.txt"
  file = File.open(log_file, File::WRONLY|File::APPEND|File::CREAT) 
  before_dying { file.close }

  fput "glance"
  glance_result = get
  if glance_result =~ /You glance down to see (.*?) in your right hand/
    fullitemname = $1.strip
    separator = "=" * 78
    file.write("\n#{separator}\n")
    file.write("Item: #{fullitemname}\n")
    file.write("#{separator}\n\n")
  end

  fput "speak bard"
  sleep 0.5

  loresing_sections = [
    ["Weight/Value", "loresing #{item.noun} that I hold;let your value now be told"],
    ["Purpose",      "loresing #{item.noun} that I hold;let your purpose now be told"],
    ["Magic",        "loresing #{item.noun} that I hold;let your  magic now be told"],
    ["Special",      "loresing #{item.noun} that I hold;let your special ability now be told"]
  ]

  loresing_sections.each do |section_name, cmd|
    sing_details = sing_info(cmd)
    sleep 1
    waitrt?
    waitcastrt?
    sleep 1

    # Clean up lines: remove empty, strip whitespace, deduplicate
    # lines = sing_details.map(&:strip).reject(&:empty?).uniq

  lines = sing_details.map(&:strip)
    .reject(&:empty?)
    .reject { |line| line =~ /^As you sing, you feel a faint resonating vibration/ }
    .uniq

    next if lines.empty?

    file.write("  #{section_name}:\n")
    lines.each { |line| file.write("    â€¢ #{line}\n") }
    file.write("\n")
  end

  sleep 1
  fput "put ##{item.id} in my #{container_name}"
  waitrt?
  waitcastrt?
  sleep 0.5
}
