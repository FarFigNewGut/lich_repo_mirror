=begin
  Checks your bounty and takes you one room away from your bandit's location.

  Alternatively, checks someone else's bounty and goes one room away from their bandit's location.
  
    author: Xanlin (Xanlin#4407 on discord)
      game: GS
      tags: go2, bandits
  required: Lich >= 4.6.4
   version: 6

   - 2020-03-26: Added target functionality, e.g. ;go2bounty Friend   
   - 2020-03-26: Added list of rooms not to include because of quirky location
   - 2020-03-28: Use .inspect for showing wayto
   - 2020-03-28: Testing for simpler wayto
   - 2020-04-10: Uses --get-silvers=on and will try two additional attempts with go2
   - 2022-04-08: Added bad rooms for Widowmaker's Road
=end
#------------------------------------------------------------------------------#
# Sometimes the game is funny about locations.  We might need to adjust some.
#------------------------------------------------------------------------------#
# [37,38,39,40]  #These are marked Whistler's Pass, but it's still in town. 
@badlist = [37,38,39,40,41] # bad Whistler's Pass rooms.
@badlist = @badlist + [30609, 30610, 30611, 30613, 30614, 30615, 30616, 30617, 30618, 30619, 30811, 30817] # bad Widowmaker's Road
#------------------------------------------------------------------------------#
# Map stuff 
#------------------------------------------------------------------------------#
def self.find_nearest_by_location(location_name);
  id = nil;
  target_list = Array.new;
  Room.list.each { |room| target_list.push(room.id) if room.location =~ /#{location_name}/i and !@badlist.include?(room.id)};
  previous, shortest_distances = Map.dijkstra(Room.current.id, target_list);
  if target_list.include?(Room.current.id);
    @id;
  else;
    target_list.delete_if { |room_num| shortest_distances[room_num].nil?  };
    target_list.sort { |a,b| shortest_distances[a] <=> shortest_distances[b] }.first;
  end;
end;
 
def self.off_by_one(destination);
  target_list = [];
  if destination.class == Map;
    target_list = destination.wayto.keys;
  elsif room = Room[destination];
    target_list = room.wayto.keys;
  end;
  Room.current.find_nearest(target_list);
end;
#------------------------------------------------------------------------------#
# Bounty stuff
#------------------------------------------------------------------------------#
@bounty_patterns = {
    'none' => '^You are not currently assigned a task\.',
    # ask
    'ask_bandit'    => 'Hmm, I\'ve got a task here from the town of (?<location>.*?)\.  It appears they have a (?<target>bandit) problem they\'d like you to solve.  Go (?<amount>report)',
    'ask_bandit2'   => 'You are to (?<amount>report) to one of the (?<npc_name>\w+?) .*? in order to help (?<assisting>.*?) take care of a (?<target>bandit) (?<location>problem)',
    # task
    'task_bandit'   => '^You have been tasked to suppress (?<type>bandit) activity (?:in|on|near) (?:the )?(?<location>.*)\s(?:near|between|under|\.).*?You need to kill (?<amount>.*?) (?:more )?of them to complete your task.',
    'task_bandit2'  => '^You have been tasked to help (?<assisting>.*?) suppress (?<type>bandit) activity (?:in|on|near) (?:the )?(?<location>.*)\s(?:near|between|under|\.).*?You need to kill (?<amount>.*?) (?:more )?of them to complete your task.',
    # success
    #You succeeded in your task and should report back to one of the Vornavis gate guards.
    #You succeeded in your task and should report back to one of the guardsmen just inside the Ta'Illistim City Gate.
    'success_guard' => '^You succeeded in your task and should report back to (?:one of the )?.*?(?<town>Vornavis|Ta\'Illistim|Ta\'Vaalor)',
    'success'       => '^You have succeeded in your task and can return',
    'success_guard2' => '^You succeeded in your task and should report back to',
}
def self.get_bounty_data(target);
  if target == XMLData.name or target.nil? or target == "";
    return XMLData.bounty_task;
  else;
    return LNet.get_data(target, 'bounty');
  end;
end;

def self.parse_bounty(data)
  bounty = target = location = amount = nil;
  @bounty_patterns.each { |key,value|
    pattern = /#{value}/i;
    if data =~ pattern;
      bounty   = key.split('_')[-1];
      target   = $1;
      location = $2; 
      amount   = "";
      if key =~ /task_bandit/;
        m = pattern.match(data);
        target   = "bandits";
        location = m[:location];
        amount   = m[:amount];
        break;
      end;
    end;
  };
  #location = 'the Citadel' if location == 'Citadel';
  return bounty, target, location, amount;
end;

def self.simple_wayto(str)
  simplified = str.split(/StringProc.new\("|"\)$|;/).each_with_object([]){ |w,arr| arr << w.gsub(/^.*?'([^']+)'/,'\1') if w !~ /^ *(?:pause|wait|sleep)/i and w.strip.length > 0}.join(';')
  return simplified
end
#------------------------------------------------------------------------------#
# Doing stuff and Going places
#------------------------------------------------------------------------------#
bounty_holder = XMLData.name;
bounty_holder = script.vars[0] if script.vars[0].length > 2;
bounty_data   = self.get_bounty_data(bounty_holder);

bounty, target, location, amount = self.parse_bounty(bounty_data);

if bounty =~ /^ask/
  respond "  Taking you to the guard so you can figure out where our bandits are.";
  Script.run('go2','advguard');
  sleep 0.2;
  respond "  \n  Any idea where we're goin' yet?\n\n";
elsif target =~ /bandit/ and !location.nil? and amount =~ /\d/;
  going_to = find_nearest_by_location(location);
  stopping_short = off_by_one(going_to);
  hiccup = nil;
  if stopping_short == Room.current.id;
    respond "  \n  Hardy har, har har har.  YOU'RE ALREADY HERE.  *grumbles*\n\n";
  elsif going_to.nil? or stopping_short.nil? 
    respond "   Not sure where we were goin', but we ain't goin' ta get there."
    respond "   location:#{location}"
    respond "   going_to:#{going_to}"
    respond "   stopping_short:#{stopping_short}"
    exit;
  else;
    respond "   Going to #{location}.  Er.  Well, close to it anyhow.";
    respond "   Going to #{Room[stopping_short].title[0].sub(']'," - #{stopping_short}]")} => go #{self.simple_wayto(Room[stopping_short].wayto[going_to.to_s].inspect)} to #{Room[going_to].title[0].sub(']'," - #{going_to}]")} fer bandits";
    Script.run('go2',"#{stopping_short} --get-silvers=on --disable-confirm");
    sleep 0.1;
    if Room.current.id != stopping_short
      respond "\n  Hmh.  Almost there.  Probably.";
      Script.run('go2',"#{stopping_short} --disable-confirm");
      sleep 0.1;
      if Room.current.id != stopping_short
        respond "\n  Somethin's fhawky.  Not gettin' where we're goin.  Tryin' one more time.";
        Script.run('go2',"#{stopping_short} --disable-confirm");
        sleep 0.1;
      end
    end
    respond "\n   #{Room[stopping_short].wayto[going_to.to_s]} to #{Room[going_to].title[0].sub(']'," - #{going_to}]")} fer bandits\n\n";
  end;
else;
  respond "\n  #{bounty_holder == XMLData.name ? "YOU" : "THEY"} DON'T GOTS NO BANDITS!!one!1eleven!\n\n";
end;

#------------------------------------------------------------------------------#
# 
#------------------------------------------------------------------------------#