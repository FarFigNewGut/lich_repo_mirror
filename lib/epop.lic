=begin

  epop - pop a box

  Hold a box in your right hand and type ;epop
  The script checks for traps, disarms traps that are safe to disarm, and unlocks the box if it's safe to unlock.
  For more options and settings, see ;epop help

  version: 1.9
  author: Essio
  tags: loot, magic
  game: GS

=end


def setting(name, default)
	return CharSettings[name] != nil ? CharSettings[name] : default
end

def release()
	dothistimeout 'release', 5, /^You feel the magic of your spell rush away from you\.$|^You don't have a prepared spell to release!$/
end

def affordable(spell)
	return checkmana(Spell[spell].mana_cost + UserVars.epop_reserve_mana.to_i)
end

def cast(spell, target = nil, actions = nil)
	rapidfire unless spell == 515
	release unless [Spell[spell].name, 'None'].include?(checkprep)
	unless affordable(spell)
		release unless checkprep == 'None'
		if @ccc
			unique_send_to_script 'crosscharcom', "wall exec reserve = UserVars.epop_reserve_mana.to_i; put \"send \#{checkmana - reserve} #{checkname}\" if checkmana(reserve + 2) && checkpcs.find { |p| p == '#{checkname}' }"
		end
		echo 'Waiting for mana...'
		wait_until { affordable(spell) }
	end
	line = Spell[spell].cast(target && "##{target.id}", actions && Regexp.union(actions.keys))
	return unless actions
	loop {
		for key in actions.keys
			if line =~ key
				action = actions[key]
				action.call if action
				return
			end
		end
		line = get
	}
end

@last_rapid = nil
def rapidfire
	unless Spell[515].active? || Spell[599].active?
		if Spell[515].known?
			cast(515)
		elsif @ccc && (!@last_rapid || Time.now - @last_rapid > 50)
			@last_rapid = Time.now
			unique_send_to_script 'crosscharcom', "wall exec Spell[515].cast('#{checkname}') if Spell[515].known? && checkmana(Spell[515].mana_cost + UserVars.epop_reserve_mana.to_i) && checkpcs.find { |p| p == '#{checkname}' }"
		end
	end
end

def pop(box)
	# Check for glyph traps with Phase
	if Spell[704].known? && @GAZE_TIMES > 0
		begin
			failed = false
			stop = false
			cast(704, box, {
				/^Your .* flickers in and out of existence for a moment but then stabilizes\. +It seems heavier\.$/ => nil,
				/^The .* becomes .* insubstantial but quickly returns to normal\.$/ => nil,
				/^The .* becomes .* insubstantial and appears lighter\.$/ => lambda {
					dothis "drop ##{GameObj.right_hand.id}", /^You think that you can safely drop /
				},
				/^An? .* resists the effects of your magic!$/ => lambda {
					echo 'Glyph trap, stopping.'
					stop = true
				},
				/^Your armor prevents the spell from working correctly\.$/ => lambda {
					failed = true
				},
			})
			redo if failed
			return if stop
		end while false
		box = GameObj.right_hand
	end

	# Check for traps with Piercing Gaze
	disarm = false
	for gaze in 1..@GAZE_TIMES
		unlock = false
		failed = false
		stop = false
		cast(404) if @GAZE_WITH_404 && !Spell[404].active?
		cast(402) if @GAZE_WITH_402 && !Spell[402].active?
		cast(416, box, {
			/^Cast Roundtime / => lambda {
				echo 'No trap found, unlocking.' if gaze == @GAZE_TIMES
			},
			/^You gaze at .* but your vision is obscured\.$/ => lambda {
				failed = true
			},
			/^Your armor prevents the spell from working correctly\.$/ => lambda {
				failed = true
			},
			/^Peering closely into the lock, you spy an? .* scarab wedged into the lock mechanism\./ => lambda {
				echo 'Scarab trap, stopping.'
				stop = true
			},
			/^You notice what appears to be a sharp sliver of metal nestled in a hole next to the lock plate\.$/ => lambda {
				echo 'Poison needle trap, unlocking.'
				unlock = true
			},
			/^You notice a discolored oval ring around the outside of the .* which makes you suspicious\. +Your suspicions are confirmed when you look inside the keyhole and notice the spring-loaded jaws pressed flush against the .* walls\.$/ => lambda {
				echo 'Jaws trap, unlocking.'
				unlock = true
			},
			/^You see a tiny sphere imbedded in the lock mechanism\.$/ => lambda {
				echo 'Sphere trap, stopping.'
				stop = true
			},
			/^You can see a small crystal imbedded in the locking mechanism\.$/ => lambda {
				echo 'Dark crystal trap, disarming.'
				disarm = true
			},
			/^You see a cord stretched between the lid and case\.$/ => lambda {
				echo 'Scales trap, stopping.'
				stop = true
			},
			/^Peering through the .*, you notice that the lock casing is coated with a rough, grainy substance, and a small bladder is wedged between the tumblers of the lock\.$/ => lambda {
				echo 'Sulfur trap, stopping.'
				stop = true
			},
			/^Looking closely into the keyhole of the lock, you spy a small vial of liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\.$/ => lambda {
				echo 'Gas cloud trap, stopping.'
				stop = true
			},
			/^You notice what appears to be a tiny vial placed just past the tumblers of the lock mechanism\. +It appears that any tampering with the lock mechanism will cause the tumblers to crush the vial\.$/ => lambda {
				echo 'Acid vial trap, stopping.'
				stop = true
			},
			/^Peering through the .*, you notice that the hinges have some springs incorporated into the design in an unusual fashion\.$/ => lambda {
				echo 'Springs trap, disarming.'
				disarm = true
			},
			/^Looking closely into the keyhole of the lock, you spy a small vial of fire-red liquid and a tiny hammer device which seems poised to shatter it if the lock is tampered with\.$/ => lambda {
				echo 'Fire vial trap, stopping.'
				stop = true
			},
			/^You see a thin tube extending from the lock mechanism down into the .*\. +The tube appears to be filled with a greenish powder\.$/ => lambda {
				echo 'Spores trap, stopping.'
				stop = true
			},
			/^There appears to be a plate over the lock, sealing it and preventing any access to the tumblers\.$/ => lambda {
				echo 'Plate trap, unlocking.'
				unlock = true
			},
			/^Near the lock mechanism, you notice a pair of small metal rods a hair's width from rubbing together\.$/ => lambda {
				echo 'Rods trap, stopping.'
				stop = true
			},
			/^The inside chamber is lined with some unidentifiable substance\.$/ => lambda {
				echo 'Boomer trap, stopping.'
				stop = true
			},
			/^Suddenly a dark splotch erupts from the lock mechanism and envelops you! +Time seems to slow down and almost stop\.\.\.$/ => lambda {
				echo 'Glyph trap, stopping.'
				stop = true
			},
		})
		return if stop
		redo if failed
		break if disarm || unlock
	end

	# Disarm the box
	if disarm
		if @SAFE_MODE
			echo 'To disarm, type ;u'
			pause_script
		end

		done = false
		until done
			cast(404) if @lores && !Spell[404].active?
			cast('408', box, {
				/^Cast Roundtime / => nil,
				/^(?:Now|You) .* pulses once with a deep crimson light!$/ => lambda {
					done = true
				},
			})
		end
	end

	if @SAFE_MODE && @GAZE_TIMES > 0
		echo 'To unlock, type ;u'
		pause_script
	end

	# Unlock the box
	done = false
	until done
		cast(403) if @lores && !Spell[403].active?
		cast('407', box, {
			/^Cast Roundtime / => nil,
			/^You hear a soft click from the .* and it suddenly flies open\.$/ => lambda {
				done = true
			},
			/^But .* is already open\.$/ => lambda {
				done = true
			},
		})
	end
end


# Load settings
@GAZE_TIMES = setting('GAZE_TIMES', 2)
@GAZE_WITH_404 = setting('GAZE_WITH_404', true)
@GAZE_WITH_402 = setting('GAZE_WITH_402', false)
@SAFE_MODE = setting('SAFE_MODE', false)

# Parse options
@lores = false
@all = false
@ccc = false
script.vars.shift
loop {
	opt = script.vars.shift
	if opt == nil
		break
	elsif opt =~ /^-([luac]+)$/
		flags = $1
		if flags =~ /l/
			@lores = true
		end
		if flags =~ /u/
			@GAZE_TIMES = 0
		end
		if flags =~ /a/
			@all = true
		end
		if flags =~ /c/
			unless running?('crosscharcom')
				echo 'You must have crosscharcom running to use the -c option.'
				exit
			end
			@ccc = true
		end
	elsif opt =~ /^gaze-times=(\d+)$/
		CharSettings['GAZE_TIMES'] = $1.to_i
		respond "Piercing Gaze will now be cast #{$1} time#{$1.to_i != 1 ? 's' : ''}."
		exit
	elsif opt =~ /^gaze-404=(on|off)$/
		CharSettings['GAZE_WITH_404'] = $1 == 'on'
		respond "Disarm Enchancement will #{$1 == 'on' ? 'now' : 'no longer'} be cast before Piercing Gaze."
		exit
	elsif opt =~ /^gaze-402=(on|off)$/
		CharSettings['GAZE_WITH_402'] = $1 == 'on'
		respond "Presence will #{$1 == 'on' ? 'now' : 'no longer'} be cast before Piercing Gaze."
		exit
	elsif opt =~ /^reserve-mana=(\d+)$/
		UserVars.epop_reserve_mana = $1
		respond "Reserving #{$1} mana."
		exit
	elsif opt =~ /^safe-mode=(on|off)$/
		CharSettings['SAFE_MODE'] = $1 == 'on'
		respond "The script will #{$1 == 'on' ? 'now' : 'no longer'} pause before disarming or unlocking a box."
		exit
	else
		respond 'Usage:'
		respond '  ;epop      Pop a box'
		respond '  ;epop -l   Pop a box using lores'
		respond '  ;epop -u   Skip trap detection and just unlock a box'
		respond '  ;epop -a   Pop every box in your lootsack'
		respond 'Options can be combined.'
		respond ''
		respond 'Settings:'
		respond "  ;epop gaze-times=<number>     Cast Piercing Gaze this many times (currently #{@GAZE_TIMES})"
		respond "  ;epop gaze-404=<on|off>       Cast Disarm Enhancement before Piercing Gaze (currently #{@GAZE_WITH_404 ? 'on' : 'off'})"
		respond "  ;epop gaze-402=<on|off>       Cast Presence before Piercing Gaze (currently #{@GAZE_WITH_402 ? 'on' : 'off'})"
		respond "  ;epop reserve-mana=<number>   Wait for mana if the next cast would put you under this amount (currently #{UserVars.epop_reserve_mana.to_i})"
		respond "  ;epop safe-mode=<on|off>      Pause before disarming or unlocking a box (currently #{@SAFE_MODE ? 'on' : 'off'})"
		exit
	end
}

# Check for spells
unless Spell[416].known?
	echo 'You need to know Piercing Gaze (416) to use this script.'
	exit
end

# Pop boxes
if @all
	unless UserVars.lootsack
		echo 'Set the name of your lootsack with ;vars set lootsack=NAME'
		exit
	end
	unless lootsack = GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack.sub(' ', ' .*'))}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack.sub(' ', ' .*'))}/i }
		echo "Couldn't find your lootsack (#{UserVars.lootsack})"
		exit
	end
	empty_hands
	trash = GameObj.loot.find { |l| l.type == 'box' }
	dothistimeout "look in ##{lootsack.id}", 5, /^In .* you see |^Total items: |^There is nothing in there\.$/
	for box in lootsack.contents.select { |i| i.type == 'box' && i.name !~ /(?:^| )(?:mithril|enruned) / }
		dothistimeout "get ##{box.id}", 5, /^You remove /
		if GameObj.right_hand.id != box.id
			echo 'Failed to get box into right hand.'
			exit
		end
		pop(box)
		box = GameObj.right_hand
		if dothis("look in ##{box.id}", /^In .* you see |^Total items: |^That is closed\.$|^There is nothing in there\.$/) == 'That is closed.'
			dothistimeout "put ##{box.id} in ##{lootsack.id}", 5, /^You put /
		else
			dothis("get coins from ##{box.id}", /^You gather the remaining |^Get what\?$/)
			waitrt?
			unless dothis("empty ##{box.id} in ##{lootsack.id}", /^You try to empty the contents of your /) =~ /^You try to empty the contents of your .* into your .*, (and everything falls in quite nicely|but nothing comes out)\.$/
				echo 'Unable to empty all the loot from your box.  Get the loot manually and type ;u to continue, or type ;k to stop.'
				pause_script
			end
			waitrt?
			unless trash && dothis("put ##{box.id} in ##{trash.id}", /^You put .* that is on the ground\.$|^You can't put .* It's closed!$|^Your .* won't fit/) =~ /^You put .* that is on the ground\.$/
				dothis("drop ##{box.id}", /^You drop /)
				trash = box
			end
		end
	end
	fill_hands
else
	box = GameObj.right_hand
	unless box.type == 'box' || box.name =~ /(?:^| )(?:box|chest|coffer|strongbox|trunk)$/
		echo 'Hold the box in your right hand.'
		exit
	end
	pop(box)
end
