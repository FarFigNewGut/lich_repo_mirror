=begin

  paths - add all known paths to the 'obvious paths' in room descriptions

  Additional paths are shown after a semicolon:

     Obvious paths: east, west; go shop, climb steps

  If Lich knows a way out of a room that can't be summed up with a single
  command, an ellipsis is added at the end:

     Obvious exits: west; ...

  You can see where all the paths out of a room lead by typing PATHS:

     >paths
     [Kharam-Dzu, Outside the Gate] - go gate
     [Dragonspine and Glaes]        - south

  version: 1.1
  author: Essio
  game: GS

=end


hide_me

OBVIOUS = %w[north northeast east southeast south southwest west northwest up down out]

hook_down = proc { |s|
	if s =~ /^Obvious (paths|exits): / && (paths = Room.current.wayto.values.select { |x| !OBVIOUS.find { |y| x == y } }).length > 0
		strs = paths.select { |x| x.class == String }
		strs += ['...'] if paths.length > strs.length
		s.chomp + "; #{strs.join(', ')}\n"
	else
		s
	end
}

hook_up = proc { |s|
	if s =~ /^(?:<c>)?\s*paths\s*$/i
		w = Room.current.wayto;
		pad = 0;
		title = Proc.new { |r| Room[r].title[0] }
		w.keys.map { |k|
			length = title.call(k).length
			pad = length if length > pad
		}
		w.keys.map { |k|
			respond sprintf('%-*s - %s', pad, title.call(k), w[k].class == String ? w[k] : w[k].inspect)
		}
		nil
	else
		s
	end
}

DownstreamHook.add('paths_down', hook_down)
UpstreamHook.add('paths_up', hook_up)
before_dying {
	DownstreamHook.remove('paths_down')
	UpstreamHook.remove('paths_up')
}

sleep 60 while true
