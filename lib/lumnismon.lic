# QUIET
=begin
	Lumnis Monitoring Tool!
	Created By: Vailan
	Date:       11-22-2020
	
	          author: Vailan (Vailan#0875 on discord)
            game: GS
            tags:lumnis
        		required: Lich >= 4.6.4
         		version: 2020.11.22.1
	
	The purpose of this application is to query results of "lumnis info" and write them off to a CSV file located in your <lich>/data directory
	and report back to the screen the list of all characters thet have run this, when it was last run, when their lumnis refresh will occur
	how much triple and double experience remain and the status of lumnis which is what we sort by as well to put ready at the top and active
	at the bottom.
	 ";lumnismon help" will display help info
	 ";lumnismon" by itself will query lumnis info and write the parsed info to the CSV file and report back all results from the CSV
	 ";lumnismon log" will query lumnis info and write the parsed info into the CSV file but doesnt not report results
	
	
	Statuses
	Ready = The characters renewal time is int he past and we havent run since then
	Active = We have used some but not all lumnis bonus
	Expired = We have no remaining lumnis bonus left
	
	Given that this is not a persisting application it might be helpful to add this to your autostart so it runs when you start and perhaps
	to other scripts configs like as a pre-hunt and/or pre-rest script in bigshot so that it gets run when you start or when you start
	 and stop hunting respectively
	
	example: ;autostart add --global lumnismon
	
	
	********change log***********
	2020.11.20 - Initial publication
	2020.11.21 - Added Character Profession and Level to Report/Tracking
	2020.11.22 - Added Character Experience until next level, Estimated Field Experience (using midpoint between current status and next higher
							 status), last known room number and room title. also added some column header titling and changed from echo to puts to output
							 the screen and strip away the application header"
								

	
	
	***********todo**************
	If this starts looking like it is useful as a way to gather character stats and skills for offline reference I might add that too
	
	*********known issues********
	I think the blank line issue has been resolved now
	If you get errors when it runs after upgrading delete the <lich>\data\lumnismon.csv file as it is likely a mismatch in columns expected
	

=end

VERSION = "2020.11.22.1"

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in LumnisMon"
  respond " This version is specific to the Stormfront frontend"
 	respond ""
  respond ""
  respond " Closing now"
  respond ""
  exit
end

class CharacterLumnisInfo

	def initialize(characterName)
  	@characterName = characterName
  end
	
	def characterName
		@characterName
	end

	def characterProfession
		@characterProfession
	end
	
	def characterProfession=(characterProfession)
		@characterProfession = characterProfession
	end
	

	def characterLevel
		@characterLevel
	end
	
	def characterLevel=(characterLevel)
		@characterLevel = characterLevel
	end
	
	def lastCheckWhen
		@lastCheckWhen
	end
	
	def lastCheckWhen=(lastCheckWhen)
		@lastCheckWhen = lastCheckWhen
	end

	def doubledExperience
		@doubledExperience
	end
	
	def doubledExperience=(doubledExperience)
		@doubledExperience = doubledExperience
	end

	def tripledExperience
		@tripledExperience
	end
	
	def tripledExperience=(tripledExperience)
		@tripledExperience = tripledExperience
	end

	def refreshWhen
		@refreshWhen
	end
	
	def refreshWhen=(refreshWhen)
		@refreshWhen = refreshWhen
	end

	def refreshDays
		@refreshDays
	end
	
	def refreshDays=(refreshDays)
		@refreshDays = refreshDays
	end

	def refreshHours
		@refreshHours
	end
	
	def refreshHours=(refreshHours)
		@refreshHours = refreshHours
	end

	def refreshMinutes
		@refreshMinutes
	end
	
	def refreshMinutes=(refreshMinutes)
		@refreshMinutes = refreshMinutes
	end
	
	def mindCapacity
		@mindCapacity
	end
	
	def mindCapacity=(mindCapacity)
		@mindCapacity = mindCapacity
	end
	
	def mindPercent
		@mindPercent
	end
	
	def mindPercent=(mindPercent)
		@mindPercent = mindPercent
	end
	
	def currentExp
		@currentExp
	end
	
	def currentExp=(currentExp)
		@currentExp = currentExp
	end
	
	def expNext
		@expNext
	end
	
	def expNext=(expNext)
		@expNext = expNext
	end
	
	def currentRoomNum
		@currentRoomNum
		#Current.room.id
	end
	
	def currentRoomNum=(currentRoomNum)
		@currentRoomNum = currentRoomNum
	end
	
	def currentRoomTitle
		@currentRoomTitle
		#Room.current.title
	end
	
	def currentRoomTitle=(currentRoomTitle)
		@currentRoomTitle = currentRoomTitle
	end
	
	
end

def getMindCapacity
	return 800 + Stats.log[0] + Stats.dis[0]

end

def getMindPercent
	mindString = mind?
	#add parser for strings to map to percentages
	if mindString.downcase == "clear as a bell"
		return  0
	elsif mindString.downcase == "fresh and clear"
		return  0.25/2
	elsif mindString.downcase == "clear"
		return  0.75/2
	elsif mindString.downcase == "muddled"
		return  1.12/2
	elsif mindString.downcase == "becoming numbed"
		return  1.37/2
	elsif mindString.downcase == "numbed"
		return  1.65/2
	elsif mindString.downcase == "must rest"
		return  1.9/2
	elsif mindString.downcase == "completely saturated"
		return  2/2
	end
	
	
end

def expUntilnext
	currentExp = Char.exp
	currentLevel = Char.level
	nextLevelExp = 0
	xpnNLT = XMLData.next_level_text
  if xpnNLT =~ /( experience| until next level)/
    nextLevelExp = xpnNLT.delete(' experience').delete(' until next level').to_i
	end
	return nextLevelExp
end

def getCurrentRoomNumber
	return Room.current.id
end

def getCurrentRoomTitle
	return Room.current.title[0].gsub(",","-")
end

def calcTotalSeconds(refreshDays,refreshHours,refreshMinutes)
	refreshTotalSeconds = (refreshDays.to_i * 24 * 60 * 60) + (refreshHours.to_i * 60 * 60) + (refreshMinutes.to_i * 60)
	#echo refreshTotalSeconds
	return refreshTotalSeconds
end

def parseResultArray(currentDateTime,lumnisResult,charInfo)
	#echo "parsing results"
	resultArray = lumnisResult.split(".")
	#Experience Parsing Section
	experienceArray = resultArray[0].split(" ")
	#echo experienceArray
	doubledExperience = 0
	tripledExperience = 0
	experienceElementNumber = 0
	experienceArray.each{|experienceArrayElement|
		if experienceArrayElement =~ /tripled/
			tripledExperience = experienceArray[experienceElementNumber - 3]
		elsif experienceArrayElement =~ /doubled/
			doubledExperience = experienceArray[experienceElementNumber - 3]
		else
		
		end
		
		experienceElementNumber += 1
	}
	#echo "#{tripledExperience} tripled experience and #{doubledExperience} doubled experience"
	
	#Time Parsing Section
	timeArray = resultArray[1].split(" ")
	#echo timeArray
	refreshDays = 0
	refreshHours = 0
	refreshMinutes = 0
	timeElementNumber = 0
	timeArray.each{|timeArrayElement|
		if timeArrayElement =~ /minute/
			refreshMinutes = timeArray[timeElementNumber -1]
		elsif timeArrayElement =~ /hour/
			refreshHours = timeArray[timeElementNumber -1]
		elsif timeArrayElement =~ /day/
			refreshDays = timeArray[timeElementNumber -1]
		else
		
		end
		timeElementNumber += 1
	}
	#echo "#{refreshDays} days, #{refreshHours} hours, #{refreshMinutes} minutes"
	totalSeconds = calcTotalSeconds(refreshDays,refreshHours,refreshMinutes)
	#echo totalSeconds
	refreshWhen = currentDateTime + totalSeconds
	#echo refreshWhen
	charInfo.lastCheckWhen = currentDateTime
	charInfo.refreshWhen = refreshWhen 
	charInfo.refreshDays = refreshDays.to_i
	charInfo.refreshHours = refreshHours.to_i
	charInfo.refreshMinutes = refreshMinutes.to_i
	charInfo.doubledExperience = doubledExperience.to_i
	charInfo.tripledExperience = tripledExperience.to_i
	#echo charInfo
	return charInfo
	
end

def getLumnisInfo(currentDateTime)
	lumnisResult = dothis "lumnis info", /Lumnis/
	#echo lumnisResult
	#echo currentDateTime
	#2020-11-19 20:19:05 -0800
	tripledExperience = 0
	doubledExperience = 0
	refreshDays = 0
	refreshHours = 0
	refreshMinutes = 0
	#echo calcTotalSeconds(refreshDays,refreshHours,refreshMinutes)
	charInfo = CharacterLumnisInfo.new(XMLData.name)
	charInfo.characterProfession = Char.prof
	charInfo.characterLevel = Char.level
	charInfo.currentRoomNum = getCurrentRoomNumber()
	charInfo.currentRoomTitle = getCurrentRoomTitle()
	charInfo.mindCapacity = getMindCapacity()
	charInfo.mindPercent = getMindPercent()
	charInfo.currentExp = Char.exp
	charInfo.expNext = expUntilnext()
	
	#possible Lumnis Results
	#Not Started
	#Your Gift of Lumnis will restart as soon as you gain experience.
	#Default Lumnis value is 7300 each
	if lumnisResult =~ /Your Gift of Lumnis will restart as soon as you gain experience/
		refreshDateTime = currentDateTime
		charInfo.lastCheckWhen = currentDateTime
		charInfo.refreshWhen = refreshDateTime 
		charInfo.refreshDays = refreshDays
		charInfo.refreshHours = refreshHours
		charInfo.refreshMinutes = refreshMinutes
		charInfo.doubledExperience = 7300
		charInfo.tripledExperience = 7300
		return charInfo
	#Triple and Double Exp left
	#You have 1422 points of tripled experience followed by 7300 points of doubled experience remaining on your Gift of Lumnis.  It is scheduled to refresh in 6 days, 8 hours and 32 minutes.
	elsif lumnisResult =~ /You have/ and lumnisResult =~ /points of tripled experience followed by/
		return parseResultArray(currentDateTime,lumnisResult,charInfo)
	
	#Double Exp left
	#You have 6483 points of doubled experience remaining on your Gift of Lumnis.  It is scheduled to refresh in 3 days, 10 hours and 0 minutes.
	elsif lumnisResult =~ /You have/ and lumnisResult =~ /points of doubled experience/
		return parseResultArray(currentDateTime,lumnisResult,charInfo)
		
	#No Lumnis left
	#Your Gift of Lumnis has expired for this week.  It is scheduled to refresh in 2 days, 18 hours and 16 minutes.
	elsif lumnisResult =~ /Your Gift of Lumnis has expired for this week./
	resultArray = lumnisResult.split(".")
		return parseResultArray(currentDateTime,lumnisResult,charInfo)
	
	else
		echo "Lumnis Info was not found and therefore unable to be parsed"
		return nil
	end
	
  



end

def writeCurrentValues(trackedLumnis)
	#this will find the existing value and overwrite it if it exists and if not then create a new value
	firstRow = true
	filenameOut = "#{DATA_DIR}/lumnismon.csv"
	#Write Header
	fileOutputline = "Char Name,"
	fileOutputline += "Char Profession,"
	fileOutputline += "Char level,"
	fileOutputline += "Last Check When,"
	fileOutputline += "Lumnis Refresh When,"
	fileOutputline += "2x Exp Remaining,"
	fileOutputline += "3x Exp Remaining,"
	fileOutputline += "Lumnis Days to Refresh,"
	fileOutputline += "Lumnis Hours to Refresh,"
	fileOutputline += "Lumnis Minutes to Refresh,"
	fileOutputline += "Last Room Number,"
	fileOutputline += "Last Room Title,"
	fileOutputline += "Mind Capacity,"
	fileOutputline += "Est Mind Percent,"
	fileOutputline += "Current Exp,"
	fileOutputline += "Exp TNL\n"
	if firstRow then 
		if fileOutputline != "\n"
			open(filenameOut,'w') do |f|
										f << "#{fileOutputline}"
						end
		end
		firstRow = false
	else
		if fileOutputline != "\n"
			open(filenameOut,'a') do |f|
										f << "#{fileOutputline}"
						end
			
		end
	end
	
	
	
	trackedLumnis.each{|trackedCharacter|
		charInfo = trackedCharacter[1]
		if charInfo.characterName != nil and charInfo.characterName != ""
			fileOutputline = "#{charInfo.characterName},"
			fileOutputline += "#{charInfo.characterProfession},"
			fileOutputline += "#{charInfo.characterLevel},"
			fileOutputline += "#{charInfo.lastCheckWhen},"
			fileOutputline += "#{charInfo.refreshWhen},"
			fileOutputline += "#{charInfo.doubledExperience},"
			fileOutputline += "#{charInfo.tripledExperience},"
			fileOutputline += "#{charInfo.refreshDays},"
			fileOutputline += "#{charInfo.refreshHours},"
			fileOutputline += "#{charInfo.refreshMinutes},"
			fileOutputline += "#{charInfo.currentRoomNum},"
			fileOutputline += "#{charInfo.currentRoomTitle},"
			fileOutputline += "#{charInfo.mindCapacity},"
			fileOutputline += "#{charInfo.mindPercent},"
			fileOutputline += "#{charInfo.currentExp},"
			fileOutputline += "#{charInfo.expNext}"

			
			if firstRow then 
				if fileOutputline != "\n"
					open(filenameOut,'w') do |f|
												f << "#{fileOutputline}"
								end
				end
				firstRow = false
			else
				if fileOutputline != "\n"
					open(filenameOut,'a') do |f|
												f << "#{fileOutputline}\n"
								end
					
					end
				end
		end
	}
end

def readCurrentValues(trackedLumnis)
#this will read and parse the saved values
firstLine = true
if(File.exist?("#{DATA_DIR}/lumnismon.csv"))
	File.foreach("#{DATA_DIR}/lumnismon.csv") { |line|
			if line != "\n" and firstLine != true
				lineArray = line.split(",")
				if lineArray[0] != nil and lineArray[0] != ""
					charInfo = CharacterLumnisInfo.new(lineArray[0])
					charInfo.characterProfession = lineArray[1]
					charInfo.characterLevel = lineArray[2]
					charInfo.lastCheckWhen = lineArray[3]
					charInfo.refreshWhen = lineArray[4]
					charInfo.doubledExperience = lineArray[5]
					charInfo.tripledExperience = lineArray[6]
					charInfo.refreshDays = lineArray[7]
					charInfo.refreshHours = lineArray[8]
					charInfo.refreshMinutes = lineArray[9]
					charInfo.currentRoomNum = lineArray[10]
					charInfo.currentRoomTitle = lineArray[11]
					charInfo.mindCapacity = lineArray[12]
					charInfo.mindPercent = lineArray[13]
					charInfo.currentExp = lineArray[14]
					charInfo.expNext = lineArray[15].gsub("\n","")
					
					trackedLumnis[charInfo.characterName] = charInfo
				end
				
			end
			firstLine = false
		}
	end
	return trackedLumnis
	
end

def reportTrackedCharacters(trackedLumnis)
	#output header for screen display
	echo "All Values are based off of the last time that character ran LumnisMon"
	screenOutputline = "Character".ljust(15)
	screenOutputline += "Prof".ljust(10)
	screenOutputline += "Lvl".ljust(4)
	screenOutputline += "Check Time".ljust(20)
	screenOutputline += "Renew Time".ljust(20)
	screenOutputline += "2xExp".ljust(6)
	screenOutputline += "3xExp".ljust(6)
	screenOutputline += "Status".ljust(9)
	screenOutputline += "Field XP".ljust(9)
	screenOutputline += "XP TNL".ljust(7)
	screenOutputline += "Rm Num".ljust(7)
	screenOutputline += "Room Title"
	
	#screenOutputline += "#{charInfo.refreshDays.ljust(3)}"
	#screenOutputline += "#{charInfo.refreshHours.ljust(3)}"
	#screenOutputline += "#{charInfo.refreshMinutes.ljust(3)}"
	puts "<output class=\"mono\"/>#{monsterbold_start}#{screenOutputline}#{monsterbold_end}\r\n<output class=\"\"/>"
	#echo screenOutputline
		
	#trackedLumnis.each{|trackedCharacter|
	for trackedCharacter in trackedLumnis.sort_by{ |k, v| Time.parse(v.refreshWhen) }
		charInfo = trackedCharacter[1]
		if charInfo.characterName != nil and charInfo.characterName != ""
			
			screenOutputline = "#{charInfo.characterName.ljust(15)}"
			screenOutputline += "#{charInfo.characterProfession.ljust(10)}"
			screenOutputline += "#{charInfo.characterLevel.ljust(4)}"
			#echo "Break Check 1"
			screenOutputline += "#{Time.parse(charInfo.lastCheckWhen).strftime("%Y-%m-%d %H:%M:%S").to_s.ljust(20)}"
			#echo "Break Check 2"
			screenOutputline += "#{Time.parse(charInfo.refreshWhen).strftime("%Y-%m-%d %H:%M:%S").to_s.ljust(20)}"
			#echo "Break Check 3"
			
			if Time.parse(charInfo.refreshWhen) < Time.now
				screenOutputline += "7300".ljust(6)
				screenOutputline += "7300".ljust(6)
				screenOutputline += "Ready".ljust(9)
			else
				screenOutputline += "#{charInfo.doubledExperience.to_s.ljust(6)}"
				screenOutputline += "#{charInfo.tripledExperience.to_s.ljust(6)}"
				if charInfo.doubledExperience.to_i > 0 or charInfo.tripledExperience.to_i > 0
					screenOutputline += "Active".ljust(9)
				else
					screenOutputline += "Expired".ljust(9)
				end
			end
			
			
			#screenOutputline += "#{charInfo.refreshDays.ljust(3)}"
			#screenOutputline += "#{charInfo.refreshHours.ljust(3)}"
			#screenOutputline += "#{charInfo.refreshMinutes.ljust(3)}"
			screenOutputline += "#{charInfo.mindCapacity.to_i * charInfo.mindPercent.to_f}".to_i.to_s.ljust(9)
			screenOutputline += "#{charInfo.expNext}".to_s.ljust(7)
			screenOutputline += "#{charInfo.currentRoomNum}".to_s.ljust(7)
			screenOutputline += "#{charInfo.currentRoomTitle}"
			#echo screenOutputline.length
			puts "<output class=\"mono\"/>#{screenOutputline}\r\n<output class=\"\"/>"
			#echo screenOutputline
		end
	end
	#}
end

def giveInstructions
	echo "The purpose of this application is to query results of 'lumnis info' and write them off to a CSV file and report back"
 	echo "to the screen the list of all characters thet have run this, when it was last run, when their lumnis refresh will occur"
	echo "how much triple and double experience remain and the status of lumnis which is what we sort by as well to put ready at"
	echo "the top and activeat the bottom."
	echo
	echo "Run ';lumnismon' by itself to get and record the information for this character and report any other characters that are already logged"
	echo "Run ';lumnismon log' to execute lumnis info and log the results but not show the report for other characters upon completion"
	echo "Run ';lumnismon help' shows this dialog you are reading now."

end

logOnly = false

if script.vars[0] == nil
	logOnly = false
elsif script.vars[0] =~ /log/
	logOnly = true
else
	giveInstructions
	exit
end

currentDateTime = Time.now
trackedLumnis = Hash.new("trackedCharacters")
trackedLumnis = readCurrentValues(trackedLumnis)
charInfo = getLumnisInfo(currentDateTime)
trackedLumnis[charInfo.characterName] = charInfo
writeCurrentValues(trackedLumnis)
trackedLumnis = readCurrentValues(trackedLumnis)
#only output if we are not in log only mode
if logOnly

else
	reportTrackedCharacters(trackedLumnis)
end
#echo charInfo.characterName
#echo charInfo.lastCheckWhen
#echo charInfo.refreshWhen
#echo charInfo.doubledExperience
#echo charInfo.tripledExperience
#echo charInfo.refreshDays
#echo charInfo.refreshHours
#echo charInfo.refreshMinutes


