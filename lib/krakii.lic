#quiet
=begin
	Browse Krakiipedia! What else could you want?
	
	~ SpiffyJr, Tillmen
	
     author: spiffyjr
      email: theman@spiffyjr.me
       name: Krakiipedia
       tags: information
    version: 1.1.1
=end
#######################################################################################
# krakii by SpiffyJr (Noldo, the Forest Gnome Wanger) with help from Tillmen
# Date: Wednesday, July 17, 2009
# Version: 1.1.1
#
# Usage
#
# Features
# * Browse Krakiipedia! What else could you want?
#
# Changelog
# * 07/15/2009 - v1.1.0
#	First release of new version (thanks to Tillmen for a little reorganization and tables!)
# * 07/15/2009 - v1.1.1
# 	Added support for spaces in names (forest gnome = forest_gnome)
# * 07/15/2009 - v1.2.0
# 	Clicking links will follow them inside a new krakii script. (Tillmen YTMND!)
#######################################################################################
silence_me

def fatalError(msg)
	if $fake_stormfront then puts("\034GSL\r\n") else puts("<pushBold\/>") end
	puts("===========================================");
	puts("| KRAKII - A FATAL ERROR HAS OCCURED");
	puts("| " + msg);
	puts("|");
	puts("| Krakii will now exit!");
	puts("===========================================");
	if $fake_stormfront then puts("\034GSM\r\n") else puts("<popBold\/>") end
	exit();
end

def message(message)
	if $fake_stormfront then puts("\034GSL\r\n") else puts("<pushBold\/>") end
	puts("===========================================");
	puts("| " + message);
	puts("===========================================");
	if $fake_stormfront then puts("\034GSM\r\n") else puts("<popBold\/>") end
end

search = nil

if script.vars.empty?
	respond("Usage:");
	respond("    #{$clean_lich_char}krakii <page> - looks up the corresponding krakiipedia page");
	respond("    #{$clean_lich_char}krakii search <phrase> - does a search on <phrase>");
	exit
end

# Upstream hook
if not $fake_stormfront
	action = proc { |client_string|
		if client_string =~ /^(?:<c>)?_krakii_(.*)/i
			start_script 'krakii', [ $1 ]
			nil
		else
			client_string
		end
	}
	UpstreamHook.add('krakii', action)
end

if variable[1] == "search" 
	page = "Special:Search?search=#{script.vars[2]}&fulltext=Search"
else
	page = script.vars[0]
	page.gsub!(" ", "_");
end

toggle_echo
i_stand_alone

site = nil
before_dying { site.close rescue() }
site = TCPSocket.open('www.krakiipedia.org', 80)

header = <<_HEADER_
GET /wiki/#{page}&printable=yes HTTP/1.1
Host: www.krakiipedia.org
User-Agent: LichQuery/1.0 (en-US)
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Accept-Language: en-us,en;q=0.5
Accept-Encoding: none
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: close

_HEADER_

site.send(header + "\r\n\r\n",0)
content = site.read.slice(/<p[^>]*>.*?<!\-\-\s+end content\s+\-\->/m)
site.close

unless content
	message("Failed to retrieve page. Searching...");
	
site = TCPSocket.open('www.krakiipedia.org', 80)
page = "Special:Search?search=#{script.vars[0].gsub("_", "+")}&fulltext=Search"

header = <<_HEADER_
GET /wiki/#{page}&printable=yes HTTP/1.1
Host: www.krakiipedia.org
User-Agent: LichQuery/1.0 (en-US)
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Accept-Language: en-us,en;q=0.5
Accept-Encoding: none
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: close

_HEADER_

script.vars[0] = "#{script.vars[0]} [search]"

site.send(header + "\r\n\r\n",0)

content = site.read.slice(/<p[^>]*>.*?<!\-\-\s+end content\s+\-\->/m)
end

if $fake_stormfront then puts("\034GSL\r\n") else puts("<pushBold\/>") end
puts("====================================================================================");
puts("| KRAKIIPEDIA - " + script.vars[0]);
puts("====================================================================================");
if $fake_stormfront then puts("\034GSM\r\n") else puts("<popBold\/>") end
puts("Fetched article from http://www.krakiipedia.org/wiki/" + page + "\n\n");

# remove scripts
content.gsub!(/<script .*? <\/script>/m, '');

# remove line returns
content.gsub!("\n", '')

# reduce whitespace to one space
content.gsub!(/[\t\s]+/, ' ')

# insert escaped spaces
content.gsub!('&nbsp;', ' ')

# paragraphs
content.gsub!(/<p[^>]*>(.*?)<\/p[^>]*>/m) { "#{$1}\n\n" }

# headers
if $fake_stormfront
	content.gsub!(/<h2[^>]*>(.*?)<\/h[^>]*>/m) { "\n\034GSL\r\n--== #{$1}  ==--\034GSM\r\n\n" }
	content.gsub!(/<h3[^>]*>(.*?)<\/h[^>]*>/m) { "\n\034GSL\r\n#{$1}\034GSM\r\n\n" }
else
	content.gsub!(/<h2[^>]*>(.*?)<\/h[^>]*>/m) { "\n<pushBold/>--== #{$1}  ==--<popBold\/>\n" }
	content.gsub!(/<h3[^>]*>(.*?)<\/h[^>]*>/m) { "\n<pushBold/>#{$1}<popBold\/>\n" }
end

# lists
content.gsub!(/<li[^>]*>(.*?)<\/li[^>]*>/m) { "   * #{$1}\n" }
content.gsub!(/<dt[^>]*>(.*?)<\/dt[^>]*>/m) { "#{$1}\n" }
content.gsub!(/<dd[^>]*>(.*?)<\/dd[^>]*>/m) { "     #{$1}\n" }

# tables
while content =~ /<table[^>]*>(.*?)<\/table[^>]*>/m
	table = Array.new
	table_contents = $1
	for row in table_contents.scan(/<tr[^>]*>.*?<\/tr[^>]*>/m)
		table.push Array.new
		for item in row.scan(/<t[dh][^>]*>.*?<\/t[dh][^>]*>/m)
			table[-1].push(item.gsub(/<[^>]*>/, ''))
		end
	end
	column_width = Array.new
	table.each { |row|
		row.each_index { |col|
			width = row[col].length
			if column_width[col].nil? or column_width[col] < width
				column_width[col] = width
			end
		}
	}
	table_string = String.new
	table.each { |row|
		row.each_index { |col|
			table_string += sprintf("%#{column_width[col]+3}s", row[col])
		}
		table_string += "\n\n"
	}
	content.sub!(/<table[^>]*>.*?<\/table[^>]*>/m, "<output class=\"mono\"/>#{table_string}<output class=\"\"/>")
end

# remove remaining tags
if $fake_stormfront
	content.gsub!(/<[^>]*>/, '')
else
	content.gsub!(/<(?!pushBold|popBold|a|\/a|output)[^>]*>/, '')
	content.gsub!(/<a[^>]*?href="(?:http:\/\/www.krakiipedia.org)?\/wiki\/([^"]+)"[^>]*>(.*?)<\/a[^>]*>/m) { "<d cmd=\"_krakii_#{$1}\">#{$2}</d>" }
	content.gsub!(/<a[^>]*?href="\/w\/[^"]+"[^>]*>(.*?)<\/a[^>]*>/m) { $1 }
end

# format links (replace ascii with hex values)
content.gsub!("%28","(");
content.gsub!("%29",")");

# format indentions

# Some extra junk
content.gsub!("&amp;", "&");

puts content
exit
