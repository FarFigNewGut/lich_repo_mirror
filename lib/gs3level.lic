=begin
GemStone III Level Script

	author: Xorus
	game: Gemstone
	version: 1.2
	date: 4/18/2022

This is a script that calculates what your level would have been in GemStone III with the same amount of XP.

It will also tell you:
- What your level in GemStone IV would have been without the cap at Level 100.
- How far you are from your next GemStone III and GemStone IV levels.
- How far you are from cap, or the next multiple of cap.
- When you have achieved a new level or cap increment.
- These fabulous things in terms of both XP and Total XP. (Version 1.1 update!)

Note: Total XP new level and cap alerts wait until user prompts due to XML limitations.

Version 1.1: (2/14/2021) Adds calculations by Total XP.
Version 1.2: (8/3/2021) - Fixed bug in percent overall to next cap increment calculation for Total XP (8/3/2021), occurred when not equal to normal XP's next cap increment. (4/18/2022) - Fixed clearing method of line1 and line2 near the bottom to equal nil instead.
=end
=begin
Automatic notifications from the script for new GemStone IV levels do not begin until after cap. 

GemStone III and GemStone IV levels will rarely happen simultaneously:

GemStone IV <-> GemStone III <-> Experience
Level 3     <-> Level 1      <-> 10,000 XP
Level 6     <-> Level 4      <-> 40,000 XP
Level 44    <-> Level 51     <-> 2,050,000 XP
Level 114   <-> Level 194    <-> 9,200,000 XP
Level 139   <-> Level 257    <-> 12,350,000 XP
Level 210   <-> Level 470    <-> 23,000,000 XP
Level 235   <-> Level 557    <-> 27,350,000 XP
Level 314   <-> Level 873    <-> 43,150,000 XP
Level 339   <-> Level 986    <-> 48,800,000 XP
Level 410   <-> Level 1341   <-> 66,550,000 XP
Level 435   <-> Level 1478   <-> 73,400,000 XP
Level 514   <-> Level 1952   <-> 97,100,000 XP
=end

# Variable initializations. These are part of the loop cycle. line1 and line2 watch for the Exp command from the user.
oldXP = nil
line1 = nil
line2 = nil
nowTime = Time.now - 1

# Ordinary XP variable initializations
xpdummyold = xpdummy2old = xp = (Char.exp)
percentnext1 = 0
fractioncap = xp.fdiv(7572500)
xpdummy = xpdummy2 = 0

# Total XP variable initializations
totalxpdummy = totalxpdummy2 = 0
totalxpdummyold = totalxpdummy2old = totalxp = (Char.exp)
totalpercentnext1 = 0
totalfractioncap = totalxp.fdiv(7572500)

# Switches to circumvent bugs
bugfix1 = 0



loop {


	# Resets the dummy variables for normal XP
	xp = (Char.exp)		# Calls current XP from XML data
	xpdummy = 0		# Counter for GemStone III level calculation
	xpdummy2 = 0		# Counter for GemStone IV level calculation
	gs3lvl = 0		# Stores calculated GemStone III level
	gs4lvl = 0		# Stores calculated GemStone IV level
	gs4lvlextended = 99	# Stores post-cap GemStone IV level, or else equals current pre-cap GemStone IV level
	increment = 5000	# Starting basis for increasing XP requirements for GemStone IV levels in calculation



	# Counts up a dummy variable using the GemStone III level progression rate until reaching your current XP to find GemStone III level
	while xp > xpdummy
		if (xpdummy < 10000)
			xpdummy = xpdummy + 10000
			gs3level = gs3level
		elsif (xpdummy < 50000)
			xpdummy = xpdummy + 10000
			gs3lvl = gs3lvl + 1
		elsif (xpdummy < 150000)
			xpdummy = xpdummy + 20000
			gs3lvl = gs3lvl + 1
		elsif (xpdummy < 300000)
			xpdummy = xpdummy + 30000
			gs3lvl = gs3lvl + 1
		elsif (xpdummy < 500000)
			xpdummy = xpdummy + 40000
			gs3lvl = gs3lvl + 1
		elsif (xpdummy < xp)
			xpdummy = xpdummy + 50000
			gs3lvl = gs3lvl + 1
		end
	end


	# Counts up a dummy variable using the GemStone IV level progression rate, assuming +500 per level past cap, to find GemStone IV level for your current XP
	while xp > xpdummy2
		if (gs4lvl < 2)
			xpdummy2 = xpdummy2 + 2500
			gs4lvl = gs4lvl + 1
			gs4lvlextended = gs4lvl
		elsif (gs4lvl < 14)
			xpdummy2 = xpdummy2 + increment
			increment = increment + 2500
			gs4lvl = gs4lvl + 1
			gs4lvlextended = gs4lvl
		elsif (gs4lvl < 24)
			xpdummy2 = xpdummy2 + increment
			increment = increment + 2000
			gs4lvl = gs4lvl + 1
			gs4lvlextended = gs4lvl
		elsif (gs4lvl < 39)
			xpdummy2 = xpdummy2 + increment
			increment = increment + 1500
			gs4lvl = gs4lvl + 1
			gs4lvlextended = gs4lvl
		elsif (gs4lvl < 49)
			xpdummy2 = xpdummy2 + increment
			increment = increment + 1000
			gs4lvl = gs4lvl + 1
			gs4lvlextended = gs4lvl
		elsif (gs4lvl < 101)
			xpdummy2 = xpdummy2 + increment
			increment = increment + 500
			gs4lvl = gs4lvl + 1
			gs4lvlextended = gs4lvl
		else
			xpdummy2 = xpdummy2 + increment
			increment = increment + 500
			gs4lvlextended = gs4lvlextended + 1
		end
	end


	# Checks to see if your XP to next GemStone III Level is greater than in the previous loop, which means you leveled
  	if xp > 9999
		if (xpdummy - xp) > xpdummyold
  			puts "#{monsterbold_start} You are now GemStone III level #{gs3lvl}!#{monsterbold_end}"
		end
  	end

	# Checks to see if your XP to next GemStone IV Level is greater than in the previous loop for post-cap XP, which means you leveled
 	 if xp > 7575000
  		if (xpdummy2 - xp) > xpdummy2old
			puts "#{monsterbold_start} You are now level #{gs4lvlextended - 1}!#{monsterbold_end}"
		end
  	 end


	# Stores the XP-to-next-level for the next loop, to check if you have leveled
	xpdummyold = xpdummy - xp
	xpdummy2old = xpdummy2 - xp


	# Cap alerts based on difference of values from previous loop. The first announces whole 1x achievements, the second announces 0.1x achievements.
	newfractioncap = xp.fdiv(7572500)
	multiplecap = newfractioncap.ceil

	# Bug - Does not trigger the round0 form of newfractioncap at the whole cap increment, gives the 1 decimal form from elsif
	if newfractioncap > 0.09
		if ( (newfractioncap - (newfractioncap).floor)*100 < percentnext1 )
			puts "#{monsterbold_start} You are now #{newfractioncap.round(0)}x cap!#{monsterbold_end}"
			percentnext1 = (fractioncap - fractioncap.floor)*100
		elsif ( ((newfractioncap*10).floor - (fractioncap*10).floor) == 1 )
			puts "#{monsterbold_start} You are now #{newfractioncap.round(1)}x cap!#{monsterbold_end}"
			fractioncap = newfractioncap
		end
	end



	# Waits for user to prompt for their experience, regular expression identifies it from incoming screen text. Captures Total XP.
	# The rest of the script keeps cycling automatically, the part inside this if-then only fires for user prompts.
  	line1=matchtimeout 1, ("Total Exp:")
	if line1 =~ /Total Exp: ([0-9,]+)/
		totalxp = $1.gsub(',','').to_i

		# Note that the end for this if statement is all the way near the bottom of the script. Total XP calculations have to wait for this prompt, because unlike ordinary XP, Total XP and Ascension XP are not provided by the XML data stream. The only thing it matters for is the alerts when you have reached a new level or cap increment. This can probably be automated, but I do not want to deal with hiding exp command text.


		# Resets the dummy variables for Total XP
		totalxpdummy = 0		# Counter for GemStone III level calculation
		totalxpdummy2 = 0		# Counter for GemStone IV level calculation
		totalgs3lvl = 0			# Stores calculated GemStone III level
		totalgs4lvl = 0			# Stores calculated GemStone IV level
		totalgs4lvlextended = 99	# Stores post-cap GemStone IV level, or else equals current pre-cap GemStone IV level
		totalincrement = 5000		# Starting basis for increasing XP requirements for GemStone IV levels in calculation


		# Counts up a dummy variable using the GemStone III level progression rate until reaching your current Total XP to find GemStone III level
		while totalxp > totalxpdummy
			if (totalxpdummy < 10000)
				totalxpdummy = totalxpdummy + 10000
				totalgs3level = totalgs3level
			elsif (totalxpdummy < 50000)
				totalxpdummy = totalxpdummy + 10000
				totalgs3lvl = totalgs3lvl + 1
			elsif (totalxpdummy < 150000)
				totalxpdummy = totalxpdummy + 20000
				totalgs3lvl = totalgs3lvl + 1
			elsif (totalxpdummy < 300000)
				totalxpdummy = totalxpdummy + 30000
				totalgs3lvl = totalgs3lvl + 1
			elsif (totalxpdummy < 500000)
				totalxpdummy = totalxpdummy + 40000
				totalgs3lvl = totalgs3lvl + 1
			elsif (totalxpdummy < totalxp)
				totalxpdummy = totalxpdummy + 50000
				totalgs3lvl = totalgs3lvl + 1
			end
		end


		# Counts up a dummy variable using the GemStone IV level progression rate, assuming +500 per level past cap, to find GemStone IV level for your current Total XP
		while totalxp > totalxpdummy2
			if (totalgs4lvl < 2)
				totalxpdummy2 = totalxpdummy2 + 2500
				totalgs4lvl = totalgs4lvl + 1
				totalgs4lvlextended = totalgs4lvl
			elsif (totalgs4lvl < 14)
				totalxpdummy2 = totalxpdummy2 + totalincrement
				totalincrement = totalincrement + 2500
				totalgs4lvl = totalgs4lvl + 1
				totalgs4lvlextended = totalgs4lvl
			elsif (totalgs4lvl < 24)
				totalxpdummy2 = totalxpdummy2 + totalincrement
				totalincrement = totalincrement + 2000
				totalgs4lvl = totalgs4lvl + 1
				totalgs4lvlextended = totalgs4lvl
			elsif (totalgs4lvl < 39)
				totalxpdummy2 = totalxpdummy2 + totalincrement
				totalincrement = totalincrement + 1500
				totalgs4lvl = totalgs4lvl + 1
				totalgs4lvlextended = totalgs4lvl
			elsif (totalgs4lvl < 49)
				totalxpdummy2 = totalxpdummy2 + totalincrement
				totalincrement = totalincrement + 1000
				totalgs4lvl = totalgs4lvl + 1
				totalgs4lvlextended = totalgs4lvl
			elsif (totalgs4lvl < 101)
				totalxpdummy2 = totalxpdummy2 + totalincrement
				totalincrement = totalincrement + 500
				totalgs4lvl = totalgs4lvl + 1
				totalgs4lvlextended = totalgs4lvl
			else
				totalxpdummy2 = totalxpdummy2 + totalincrement
				totalincrement = totalincrement + 500
				totalgs4lvlextended = totalgs4lvlextended + 1
			end
		end


		# Checks to see if your Total XP to next GemStone III Level is greater than in the previous user input exp command, which means you leveled
		# Warning, Total XP cannot be called like Char.exp does for XP, it has to wait for users to enter Exp command
	  	if totalxp > 9999
			if (totalxpdummy - totalxp) > totalxpdummyold
	  			puts "#{monsterbold_start} You are now GemStone III level #{totalgs3lvl} by Total XP!#{monsterbold_end}"
			end
	  	end

		# Checks to see if your Total XP to next GemStone IV Level is greater than in the previous user input exp command for post-cap XP, which means you leveled
		# Warning, Total XP cannot be called like Char.exp does for XP, it has to wait for users to enter Exp command
	 	 if totalxp > 7575000
	  		if (totalxpdummy2 - totalxp) > totalxpdummy2old
				puts "#{monsterbold_start} You are now level #{totalgs4lvlextended - 1} by Total XP!#{monsterbold_end}"
			end
	  	 end


		# Stores the XP-to-next-level for the next loop, to check if you have leveled. For Total XP this is limited to user prompts.
		totalxpdummyold = totalxpdummy - totalxp
		totalxpdummy2old = totalxpdummy2 - totalxp


		# Cap alerts based on difference of values from previous loop. The first announces whole 1x achievements, the second announces 0.1x achievements.
		totalnewfractioncap = totalxp.fdiv(7572500)
		totalmultiplecap = totalnewfractioncap.ceil

		# Total XP version. 
		# Bug - Does not trigger the round0 form of newfractioncap at the whole cap increment, gives the 1 decimal form from elsif
		# Bug - Always alerts on script initialization within a range, does not know it has previously fired. Bugfix1 prevents it. Could probably be fixed more elegantly with a tighter trigger condition.
		# Warning, Total XP cannot be called like Char.exp does for XP, it has to wait for users to enter Exp command
		if bugfix1 > 0
			if totalnewfractioncap > 0.09
				if ( (totalnewfractioncap - (totalnewfractioncap).floor)*100 < totalpercentnext1 )
					puts "#{monsterbold_start} You are now #{totalnewfractioncap.round(0)}x cap by Total XP!#{monsterbold_end}"
					totalpercentnext1 = (totalfractioncap - totalfractioncap.floor)*100
				elsif ( ((totalnewfractioncap*10).floor - (totalfractioncap*10).floor) == 1 )
					puts "#{monsterbold_start} You are now #{totalnewfractioncap.round(1)}x cap by Total XP!#{monsterbold_end}"
					totalfractioncap = totalnewfractioncap
				end
			end
		end

		# Initially zero to prevent the new cap increment alert from firing when the script is turned on and exp is first entered
		bugfix1 = 1



		# Delays a moment so the text appears only after giving status message about your mind
		line2=matchtimeout 1, ("Your mind")

		if line2 =! /Your mind/
			fractioncap = xp.fdiv(7572500)					# Fractional value of your XP relative to the amount for cap
			percentcap = fractioncap * 100					# Converts that fractional value into a percentage
			multiplecap = fractioncap.ceil					# Identifies the cap increment you are working on
			percentnext = percentcap.fdiv(multiplecap)			# Percent value of total way to next cap increment
			percentnext1 = (fractioncap - fractioncap.floor)*100		# Percent value of way between last and next cap increments

			totalfractioncap = totalxp.fdiv(7572500)			# Fractional value of your XP relative to the amount for cap
			totalpercentcap = totalfractioncap * 100			# Converts that fractional value into a percentage
			totalmultiplecap = totalfractioncap.ceil			# Identifies the cap increment you are working on
			totalpercentnext = totalpercentcap.fdiv(totalmultiplecap)		# Percent value of total way to next cap increment
			totalpercentnext1 = (totalfractioncap - totalfractioncap.floor)*100	# Percent value of way between last and next cap increments

			respond "                                            With Only XP           With Total XP"
			respond "Your level in GemStone IV is presently:       Level #{gs4lvl - 1}"	
			respond "Your level in GemStone IV without the cap:    Level #{gs4lvlextended - 1}               Level #{totalgs4lvlextended - 1}"		
			respond "Your level in GemStone III would have been:   Level #{gs3lvl}               Level #{totalgs3lvl}"
			respond ""
			# Calculates how much XP to next level. Synchs with the game showing negative experience TNL, just isn't showing that as a negative number
			if xpdummy >= xp
				respond "                                            With Only XP            With Total XP"
				respond "Exp. until next GemStone III Level:             #{xpdummyold}                    #{totalxpdummyold}"
			end

			if xpdummy2 >= xp
				respond "Exp. until next GemStone IV Level:              #{xpdummy2old}                    #{totalxpdummy2old}"
			end
			respond ""
			respond "You are #{percentnext1.round(3)}% of the way between #{multiplecap.round(0) - 1}x and #{multiplecap.round(0)}x cap by usual XP."
			respond "You are #{totalpercentnext1.round(3)}% of the way between #{totalmultiplecap.round(0) - 1}x and #{totalmultiplecap.round(0)}x cap by Total XP."
			respond "You are presently #{fractioncap.round(2)}x cap by usual XP, which is #{(percentnext.round(3))}% overall from 0x to #{multiplecap.round(0)}x cap."
			respond "You are presently #{totalfractioncap.round(2)}x cap by Total XP, which is #{(totalpercentnext.round(3))}% overall from 0x to #{totalmultiplecap.round(0)}x cap."
			respond ""
		end					
  	end

	# Note that the XP to next level numbers get misaligned by uneven numbers of digits. It is not worth the effort to prevent it.
  

	# Clears the line variables of their string content to reset for the next loop
	line1 = nil
	line2 = nil


	# Pauses the loop until the XML Data updates ordinary XP changes, beginning of loop recalculates the dummy variables
  	wait_while { oldXP == XMLData.next_level_text and ( Time.now - nowTime < 1) }
  	nowTime = Time.now

  	if oldXP != XMLData.next_level_text
       		
       		oldXP = XMLData.next_level_text       
  	end 
}
