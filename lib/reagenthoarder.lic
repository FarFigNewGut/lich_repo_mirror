=begin
# Title: reagenthoarder
# Author: Caithris
# Creation Date: 1/25/2013
# Version: 0.1
# Based off of gemhoarder
#   Takes empty jars from your chest
#   Puts full jars in your wardrobe
#   Partially filled jars go in the bin.
#   Manually set reagent amounts
#   Multi-locker edition, premium/plat only.
#      Checks if you have reagents already jarred in other lockers.
#
#   NEW - Updated to put unsuitable reagents in your lootsack.
#
#   CURRENT ISSUES: reagenthoarder does NOT like multiple jars of the same stuff.
#                   Need to implement a sane raid function

=end
silence_me
unless script.vars[1]
	script.vars[1]="none"
end

if script.vars[1] =~ /raid/
respond "Sorry, raid is currently not working with this script. Please check for future updates."
exit
=begin
	unless script.vars[2]
		output = "Please specify a reagent raid or use \"all\" to select all.\n"
		output.concat "Usage:\n"
		output.concat "        ;reagenthoarder raid <reagent|all> [amount]\n"
		respond output
		exit
	end
	unless script.vars[3]
		output = "defaulting to 1 reagent to raid.\n"
		respond output
		script.vars[3]=1
	end
=end
end

if script.vars[1] =~ /help/
	output =      "Usage: ;reagenthoarder [help|newlocker|list|forget]\n"
	output.concat "   help:                      prints out this list.\n"
	output.concat "   newlocker:                 add a new locker to your list.\n"
	output.concat "   list:                      list all reagents currently in jars.\n"
	output.concat "   forget:                    forget the reagent contents in all your lockers.\n"
#	output.concat "   raid <reagent> <amount>:       raid <reagent> where reagent can be \"all\" for the specified amount.\n"
	output.concat "   set <reagent> <amount> <jars>: set the selected reagent to the specified amount.\n"
	output.concat " \n"
	output.concat "   set example: ;reagenthoarder \"essences of fire\" 15 2\n"
	output.concat "   another  set example: ;reagenthoarder \"fire opals\" 0 0 Solhaven\n"
	output.concat " \n"
	output.concat "   to delete a jar, please use an amount of 0\n"
	output.concat "   to move a jar to another locker, please first delete the jar, and then use the set command with an amount, or run this script at your new locker location.\n"

	respond output

elsif script.vars[1] =~ /list/
		output = "                       reagent count  fulls  location\n"
		output.concat "                           --- -----  -----  ------------\n"
		for jar in CharSettings[:jars].sort { |a,b| b[:count] <=> a[:count] }
			output.concat "#{jar[:reagent].rjust(30)} #{jar[:count].to_s.rjust(4)} #{jar[:full].to_s.rjust(6)}   #{jar[:location].to_s.ljust(30)}\n"
		end
		respond output
elsif script.vars[1] =~ /set/
		unless script.vars[2]
			output = "Please specify which reagent to modify.\n"
			respond output
			exit
		end
		unless script.vars[3]
			output = "jar amount not specified, defaulting to removal.\n"
			respond output
			script.vars[3]=0
		end
		unless script.vars[4]
			output = "full jars not specified, defaulting to 0.\n"
			respond output
			script.vars[4]=0
		end
		unless script.vars[5]	
			fput "location"
			script.vars[5] = matchfind "current location is ? or somewhere close to it."
 			output = "setting location to #{script.vars[5]}.\n"
			respond output
		end
	
			
		reagent=script.vars[2]
		count=script.vars[3].to_i
		full=script.vars[4]
		location=script.vars[5]
		jar_hash = CharSettings[:jars].find { |j| j[:reagent] == reagent }
		unless jar_hash
			jar_hash = CharSettings[:jars].find { |j| j[:reagent] == reagent + "s" }
		end

		if count > 0
			output="#{reagent}, #{count}, #{full}, #{location} have been added.\n"
			respond output
			CharSettings[:jars].delete_if { |j| j[:reagent] == reagent }
			CharSettings[:jars].push(h={ :reagent => reagent, :count => count, :full => full, :location => location})
		else
			output = "Removing #{reagent} from the list.\n"
			respond output
			CharSettings[:jars].delete_if { |j| j[:reagent] == reagent }
		end

	exit	

elsif script.vars[1] =~ /forget/
		CharSettings[:jars]=nil
		CharSettings[:known_lockers]=nil
		output = "Locker contents forgotten.\n"
		respond output
	exit
else

	if UserVars.reagentsack.nil? or UserVars.reagentsack.empty?
			echo 'error: reagentsack is not set. (;set change reagentsack <container name>)'
		exit
	end
	if UserVars.lootsack.nil? or UserVars.lootsack.empty?
			echo 'error: lootsack is not set. (;set change lootsack <container name>)'
		exit
	end
	unless reagentsack = (GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.reagentsack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.reagentsack).sub(' ', ' .*')}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.reagentsack).sub(' ', ' .*')}/i })
			echo 'error: failed to find your reagentsack'
		exit
	end
	unless lootsack = (GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i })
			echo 'error: failed to find your lootsack'
		exit
	end
	close_reagentsack = false
	close_lootsack = false

	open_result = dothistimeout "open ##{reagentsack.id}", 5, /^You open|^You carefully|^You unfasten|^That is already open\.$/
	if open_result =~ /^You open|^You carefully|^You unfasten/
		close_reagentsack = true
	else
		dothistimeout "look in ##{reagentsack.id}", 5, /In .*? you see/
		if reagentsack.contents.nil?
			echo 'error: failed to find reagentsack contents'
			exit
		end
	end

	open_result = dothistimeout "open ##{lootsack.id}", 5, /^You open|^You carefully|^You unfasten|^That is already open\.$/
	if open_result =~ /^You open|^You carefully|^You unfasten/
		close_lootsack = true
	else
		dothistimeout "look in ##{lootsack.id}", 5, /In .*? you see/
		if lootsack.contents.nil?
			echo 'error: failed to find lootsack contents'
			exit
		end
	end
	empty_hands
	dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
	if CharSettings[:jars].nil? || script.vars[1]=~/newlocker/
		fput "open locker"
		jars = ["jar", "beaker", "bottle"]
		jars.each { |jar|
			output="You put"
			while output =~ /You put/ do
				dothistimeout "get #{jar} from wardrobe", 3, /^You remove|Get what/
				output = dothistimeout "put my #{jar} in bin", 3, /^You put|I could not find/
			end
		}
		jars.each { |jar|
			output="You put"
			while output =~ /You put/ do
				dothistimeout "get #{jar} from chest", 3, /^You remove|Get what/
				output = dothistimeout "put my #{jar} in bin", 3, /^You put|I could not find/
			end
		}
	end
	dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
	status_tags
	open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(?:locker|bin)"/
	status_tags

	if open_result =~ /exist="(\d+)" noun="(locker|bin)"/
		fput "location"
		location = matchfind "current location is ? or somewhere close to it."
		locker_id = $1
		locker_contents = GameObj.containers[locker_id]
		unless locker_contents
			dothistimeout "look in ##{locker_id}", 3, /^In the/
			locker_contents = GameObj.containers[locker_id]
		end
		if locker_contents
			if CharSettings[:jars].nil?

				CharSettings[:jars] = Array.new
				CharSettings[:empty_jar_count] = 0
				script.vars[1]="newlocker"
				
				locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|bottle|beaker)$/ }.each { |jar|
					if jar.after_name.nil?
						CharSettings[:empty_jar_count] = CharSettings[:empty_jar_count] + 1
					else
						look_result = dothistimeout "look in ##{jar.id} from ##{locker_id}", 3, /^Inside .*? you see [0-9]+ portion/

						if look_result =~ /^Inside .*? you see ([0-9]+) portion/ then
							count = $1.to_i
							reagent = jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
							if look_result.include?('It is full') then
								full = 1;
							else
								full = 0;
							end
							if full > 0
								fput "get ##{jar.id} from ##{locker_id}"
								fput "put ##{jar.id} in wardrobe"
							end
							if CharSettings[:jars].any?{|jar| (jar[:reagent] =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/)} then
								CharSettings[:jars].each{|jar| 
									if jar[:reagent] =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ and jar[:location] == location then
										jar[:count] = jar[:count] + count;
										jar[:full] = jar[:full] + full;
#										echo "Added existing jar to list"
									end
								
								}
							else
#								echo "adding new jar"
								CharSettings[:jars].push(h={ :reagent => reagent, :count => count, :full => full, :location => location})
							end

						end

					end
				}
				CharSettings[:known_lockers]=Array.new
				CharSettings[:known_lockers].push(location)
			elsif script.vars[1]=~/newlocker/
				locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|bottle|beaker)$/ }.each { |jar|
					if jar.after_name.nil?
						CharSettings[:empty_jar_count] = CharSettings[:empty_jar_count] + 1
					else
						look_result = dothistimeout "look in ##{jar.id} from ##{locker_id}", 3, /^Inside .*? you see [0-9]+ portion/
						if look_result =~ /^Inside .*? you see ([0-9]+) portion/
							count = $1.to_i
							reagent = jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
							if look_result.include?('It is full') then
								full = 1;
							else
								full = 0;
							end
							if full > 0
								fput "get ##{jar.id} from ##{locker_id}"
								fput "put ##{jar.id} in wardrobe"
							end
							if CharSettings[:jars].any?{|jar| (jar[:reagent] =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/) and (jar[:count].to_i >= count.to_i)}
								CharSettings[:jars].each{|jar| 
									if jar[:reagent] =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ and jar[:location] == location then
										jar[:count] = jar[:count] + count;
										jar[:full] = jar[:full] + full;
									end
								
								}
							else
								CharSettings[:jars].push(h={ :reagent => reagent, :count => count, :full => full, :location => location})
							end

						end
					end
				}
				CharSettings[:known_lockers].push(location)
			end
			
			unless CharSettings[:known_lockers].include?(location)
				output="WARNING! This locker doesn't appear to have been recorded!\nIf you really want to store reagents to this locker prior to recording, ;send continue.\nTo record this locker, kill reagenthoarder and rerun with the newlocker option.\n"
				respond output
				waitfor "continue"
			end


			not_suitable = Array.new

#####
#RAID GOING HERE
####
			if script.vars[1]=~/raid/	
				count=script.vars[3].to_i
				reagent_bin=Array.new
				reagent_wardrobe=Array.new
				fput "location"
				location = matchfind "current location is ? or somewhere close to it."
	
	
				CharSettings[:jars].each { |reagent_hash|
					if reagent_hash[:location] == location

						if script.vars[2] == "all"
							if reagent_hash[:full] > 0
								reagent_wardrobe.push(reagent_hash[:reagent])
							elsif reagent_hash[:count].to_i >= count.to_i
								reagent_bin.push(reagent_hash[:reagent])
							end
						else
							if reagent_hash[:reagent]==script.vars[2]
								if reagent_hash[:full]
									reagent_wardrobe.push(reagent_hash[:reagent])
								elsif reagent_hash[:count].to_i >= count.to_i
									reagent_bin.push(reagent_hash[:reagent])
								end
							elsif reagent_hash[:reagent]==script.vars[2]+'s'
								if reagent_hash[:full] > 0
									reagent_wardrobe.push(reagent_hash[:reagent])
								elsif reagent_hash[:count].to_i >= count.to_i
									reagent_bin.push(reagent_hash[:reagent])
								end
							end	
						end
					end
				}
				reagent_wardrobe.each { |reagent|
					reagent.gsub!(/large |medium |small |tiny |some /, '')
					dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
					status_tags
					open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(wardrobe)"|already open/
					status_tags
					if open_result =~ /exist="(\d+)" noun="(wardrobe)"/
						locker_id = $1
						locker_contents = GameObj.containers[locker_id]

						dothistimeout "look in ##{locker_id}", 3, /^In the/
						locker_contents = GameObj.containers[locker_id]
						if locker_contents
							if CharSettings[:jars].any? { |jar| (jar[:reagent] =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/) and (jar[:count].to_i >= count.to_i) }
								if jar = locker_contents.find { |jar| jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ }
									jar_hash = CharSettings[:jars].find { |j| j[:reagent] == jar.after_name.sub(/^containing |large |medium |small |tiny |some /, '') }
									jar_result=dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove|Get what?/
									if jar_result=~/^You remove/ then
										count.times {
											dothistimeout "shake ##{jar.id}", 3, /^You .*shake/
											if GameObj.right_hand.id != jar.id
												obj = GameObj.right_hand
											elsif GameObj.left_hand.id != jar.id
												obj = GameObj.left_hand
											end
											dothistimeout "put ##{obj.id} in ##{reagentsack.id}", 3, /^You put/
											jar_hash[:count] = jar_hash[:count] - 1
											jar_hash[:full] = jar_hash[:full] - 1
										}
										if jar_hash[:count] < 1
											CharSettings[:jars].delete(jar_hash)
											CharSettings[:empty] = CharSettings[:empty] + 1
											dothistimeout "put ##{jar.id} in chest", 3, /^You (?:put|place)/
										end
										dothistimeout "put ##{jar.id} in bin", 3, /^You (?:put|place)/
									
										#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
										true
									else
										echo "Sorry. Locker has refreshed. Please re-start ;reagenthoarder raid."
										exit
									end
								else
									#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
									false
								end
							else
								#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
								false
							end
						else
							#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
							echo 'error: failed to find locker contents'
							false
						end
					

					
				
					else
						dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
						echo 'error: failed to find locker'
						false
					
					end
				}
				
				reagent_bin.each { |reagent|
					reagent.gsub!(/large |medium |small |tiny |some /, '')
					dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
					####raid bin
					status_tags
					open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(?:locker|bin)"/
					status_tags

					if open_result =~ /exist="(\d+)" noun="(locker|bin)"/
						locker_id = $1
						locker_contents = GameObj.containers[locker_id]

						unless locker_contents
							dothistimeout "look in ##{locker_id}", 3, /^In the/
							locker_contents = GameObj.containers[locker_id]
						end

						if locker_contents
							if CharSettings[:jars].any? { |jar| (jar[:reagent] =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/) and (jar[:count] >= count.to_i) }
								if jar = locker_contents.find { |jar| jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{reagent.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ }
									jar_hash = CharSettings[:jars].find { |j| j[:reagent] == jar.after_name.sub(/^containing |large |medium |small |tiny |some /, '') }


									jar_result=dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove|Get what?/
									if jar_result=~/^You remove/ then
										count.to_i.times {
											dothistimeout "shake ##{jar.id}", 3, /^You .*shake/
											if GameObj.right_hand.id != jar.id
												obj = GameObj.right_hand
											elsif GameObj.left_hand.id != jar.id
												obj = GameObj.left_hand
											end
											dothistimeout "put ##{obj.id} in ##{reagentsack.id}", 3, /^You put/
											jar_hash[:count] = jar_hash[:count] - 1
											jar_hash[:full] = jar_hash[:full] - 1
										}	
										if jar_hash[:count] < 1
											CharSettings[:jars].delete(jar_hash)
											CharSettings[:empty] = CharSettings[:empty] + 1
											dothistimeout "put ##{jar.id} in chest", 3, /^You (?:put|place)/
										end
										dothistimeout "put ##{jar.id} in bin", 3, /^You (?:put|place)/
	
										#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
										true
									else
										echo "Sorry. Locker has refreshed. Please restart ;reagenthoarder raid"
										exit
									end
								else
									#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
									false
								end
							else
								#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
								false
							end
						else
							#dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
							echo 'error: failed to find locker contents'
							false
						end
					else
						dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
						echo 'error: failed to find locker'
						false
						
					end
					

				}
				
					dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
			
			end
			

########### end new section

#####Fill already filling jars###########
			unless script.vars[1]=~/newlocker/ or script.vars[1]=~/raid/
				for jar in locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|beaker|bottle)$/ }
					if jar.after_name =~ /^containing / 
						reagent_list = reagentsack.contents.find_all { |obj| (jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/) }
						reagent_list.delete_if { |obj| not_suitable.include?(obj.id) }
						jar_hash = CharSettings[:jars].find { |j| j[:reagent] == jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') }					
						unless reagent_list.empty?
							dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove/
							for reagent in reagent_list
								result = dothistimeout "_drag ##{reagent.id} ##{jar.id}", 3, /^You add|is full|does not appear to be a suitable container for/
	
								if result =~ /^You add .* filling it/
									jar_hash[:count] = jar_hash[:count] + 1
									jar_hash[:full] = jar_hash[:full] + 1
									fput "put ##{jar.id} in wardrobe"
									break
								elsif result =~ /^You add/
									jar_hash[:count] = jar_hash[:count] + 1
								elsif result =~ /is full/
									jar_hash[:full] = jar_hash[:full] + 1
									fput "put ##{jar.id} in wardrobe"
									dothistimeout "put ##{reagent.id} in ##{reagentsack.id}", 3, /^You put/
									break
								elsif result =~ /does not appear to be a suitable container for/
									dothistimeout "put ##{reagent.id} in ##{lootsack.id}", 3, /^You put/
									not_suitable.push(reagent.id)
								else
									dothistimeout "put ##{reagent.id} in ##{reagentsack.id}", 3, /^You put/
								end
	
							end
							if checkright
								dothistimeout "put ##{jar.id} in ##{locker_id}", 3, /^You (?:put|place)/
							end
						end
					else
						fput "get ##{jar.id} in ##{locker_id}"
						fput "put ##{jar.id} in chest"
					end
				end
			end

####### new jars########
			dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/	
			status_tags
			open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(?:locker|chest)"/
			status_tags
			if open_result =~ /exist="(\d+)" noun="(locker|chest)"/
				locker_id = $1
				locker_contents = GameObj.containers[locker_id]
				unless locker_contents
					dothistimeout "look in ##{locker_id}", 3, /^In the/
					locker_contents = GameObj.containers[locker_id]
				end
				if locker_contents

					not_suitable = Array.new
					reagent_hoard = Array.new
					for jar in CharSettings[:jars]
						reagent_hoard.push(jar[:reagent], jar[:location])
					end
					other_locker=Array.new
					squelch=Array.new
					unless script.vars[1]=~/newlocker/ or script.vars[1] =~/raid/
						for jar in locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|beaker|bottle)$/ }
					
							reagent_count = Hash.new
							reagentsack.contents.each { |obj|
							if (obj.type =~ /reagent/) and (obj.name !~ /oblivion quartz$/) and not locker_contents.any? { |o| o.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ and not not_suitable.include?(obj.id)}
								reagent_count[obj.name.gsub(/large |medium |small |tiny |some /, '')] = reagent_count[obj.name.gsub(/large |medium |small |tiny |some /, '')].to_i + 1
							else 
								reagent_hoard.find{ |op| 
									if op.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ then
#										echo op
										echo "adding #{obj.name} to other locker"
										other_locker.push(obj.name.gsub(/^containing |large |medium |small |tiny |some /, ''))							
									end
								}

							end
						
						}
					
						next if reagent_count.empty?
						reagent_name = nil
						reagent_num = 0
						reagent_count.each_pair { |name,num|
							if num > reagent_num
								reagent_name = name
								reagent_num = num
							end
						}
						if not squelch.include?(reagent_name)
							dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove/
						end
						jar_hash = nil

						reagentsack.contents.each { |obj|
							if obj.name.gsub(/large |medium |small |tiny |some /, '') == reagent_name and not squelch.include?(reagent_name)
								result = dothistimeout "_drag ##{obj.id} ##{jar.id}", 3, /filling it|^You (?:add|put)|is full|does not appear to be a suitable container for|Not all drag and drop possibilities will/
								if result =~ /^You add .* filling it/
									jar_hash[:count] = jar_hash[:count] + 1
									jar_hash[:full] = jar_hash[:full] + 1
									dothistimeout "put ##{jar.id} in wardrobe", 3, /^You put/
									break
								elsif result =~ /^You put/
									dothistimeout "put ##{jar.id} in ##{lootsack.id}", 3, /^You put/
									saveobjname=obj.name.gsub(/large |medium |small |tiny |some /, '');
									reagent = lootsack.contents.find { |obj| obj.id == jar.id }.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
									dothistimeout "get ##{jar.id}", 3, /^You remove/
									if reagent_hoard.include?(reagent)
#										echo "reagent already included"
										CharSettings[:jars].each { |reagent_hash|
											if reagent_hash[:location] == location and reagent_hash[:reagent] == reagent then
#												echo "reagent found in this locker"
												jar_hash=reagent_hash;
												jar_hash[:count] = jar_hash[:count] + 1
											end											
											if reagent_hash[:location] != location and reagent_hash[:reagent] == reagent then
												echo "reagent found in another locker"
												unless other_locker.include?(reagent)
													fput "shake my jar"
													fput "stow left"
													squelch.push(saveobjname)
													other_locker.push(reagent)
													break
												end
											end
										}

									else
										jar_hash = { :reagent => reagent, :count => 1, :full => 0,  :location => location }
										CharSettings[:jars].push(jar_hash)
									end
								elsif result =~ /is full/
									dothistimeout "put ##{obj.id} in ##{reagentsack.id}", 3, /^You put/
									jar_hash[:full] = jar_hash[:full] + 1
									dothistimeout "put ##{jar.id} in wardrobe", 3, /^You put/
									break
								elsif result =~ /^You add/
									jar_hash[:count] = jar_hash[:count] + 1
								elsif result =~ /does not appear to be a suitable container for/
									not_suitable.push(obj.id)
									fput "put ##{obj.id} in ##{lootsack.id}"
								elsif result =~ /Not all drag and drop possibilities will/
									fput "put ##{obj.id} in ##{reagentsack.id}"
									fput "put ##{jar.id} in wardrobe"
								end
							end
						}
						if checkright
							dothistimeout "put ##{jar.id} in bin", 3, /^You (?:put|place)/
						end
	
					end
				end
			end
			dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
			fill_hands
		else
			dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
			echo 'error: failed to find locker contents'
		end
	else
		dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
		echo 'error: failed to find locker'
	end

end

if script.vars[1]=~/newlocker/
	output = "New locker has been checked, sorted, and saved. Please re-run the script without arguments to deposit reagents.\n"
	output.concat "Please make sure to run \";reagenthoarder newlocker\" at any other locker you are storing reagents in before depositing here!\n"
	respond output
end

unless other_locker.empty?
	output = "Reagents not lockered due to being already in another locker:\n"
		output.concat "                       reagent count  fulls  location\n"
		output.concat "                           --- -----  -----  ------------\n"

	other_locker.each {|reagent|
		jar_hash = CharSettings[:jars].find { |j| j[:reagent] == reagent }
		unless jar_hash
			jar_hash = CharSettings[:jars].find { |j| j[:reagent] == reagent + "s" }
		end

		output.concat "#{jar_hash[:reagent].rjust(30)} #{jar_hash[:count].to_s.rjust(4)} #{jar_hash[:full].to_s.rjust(6)}   #{jar_hash[:location].to_s.ljust(30)}\n"
		
	}
	respond output
end

end
if close_reagentsack
	fput "close ##{reagentsack.id}"
end
if close_lootsack
	fput "close ##{lootsack.id}"
end
fill_hands