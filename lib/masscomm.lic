=begin

	Created By: Vailan
	Date:       9/6/2025
  author: Vailan (Vailan#0875 on discord)
  game: GS
  tags: spellup, mass, masscomm, blur, guard, color, spell
	required: Lich >= 4.6.4 and StormFront
	version: 2025.09.06.02

This script is designed primarily for those who would like to be helpful and cast mass spells, but do not feel comfortable, or want to, coordinating all the notifications, and keeping track of time, and so forth.
It will auto detect if you are able to cast any mass spells (611, 911, 419) and advertise accordingly.

	CLI: ;masscomm -- by itself will show this help dialog
	CLI: ;masscomm help -- will show this help dialog
	
	CLI: ;masscomm [now] -- will immediately start casting spells you are able to cast and overrides annoucements and timer
	CLI: ;masscomm [here] -- will announce to the current room you intention to cast spells and which ones starting in 2 minutes, 30 seconds, 10 seconds and when completed
	CLI: ;masscomm [spell=<blurs|guards|colors>] -- restricts your casting to only the spell specified even if you are able to cast others
	CLI: ;masscomm [espchannel=<esp channel name>] -- will announce you intention to cast spells and which ones in 2 minutes on the specified amunet/esp channel
	CLI: ;masscomm [lnetchannel=<lnet channel name>] -- will announce you intention to cast spells and which ones in 2 minutes on the LNET channel
	
	Examples
	;masscomm here espchannel=Help lnetchannel=help -- annouce in your room as well as on both nets your intention to cast spells in 2 minutes
	;masscomm here spell=guards -- announce in the room you are int hat you will be casting only guards in 2 minutes even if you are a wizard that could also cast blurs

You will need to trust this script in order for it to function correctly. ;trust masscomm
Failure to do so will cause it to hang up.  This is due to the functionality of auto advertising on lnet.

You may also modify the tones, and messages that are spoken to your taste.  To do this, simply edit the script to reflect your tastes in that regard.

Based upon massies.lic 1.0 by Stonmel
2025.09.06.01 -- initial release that refactored to methods and split apart announcing and casting but used global variables which i do not like and will likely fix in the future.
2025.09.06.01 -- bugfix breaking help


=end





$Room_Title = Room.current.title.to_s
$Room_Title = $Room_Title.gsub(/\[/,"").gsub(/\]/,"")
$Room_Location = Room.current.location

$Blur_Planned = true
$Guard_Planned = true
$Color_Planned = true


def showHelp
	respond "This script is designed primarily for those who would like to be helpful and cast mass spells, but do not feel comfortable, or want to, coordinating all the notifications, and keeping track of time, and so forth."
	respond "It will auto detect if you are able to cast any mass spells (611, 911, 419) and advertise accordingly."
	respond ""
	respond "CLI: ;masscomm -- by itself will show this help dialog"
	respond "CLI: ;masscomm help -- will show this help dialog"
	
	respond "CLI: ;masscomm [now]"
	respond " -- will immediately start casting spells you are able to cast and overrides annoucements and timer"
	respond "CLI: ;masscomm [here]"
	respond " -- will announce to the current room you intention to cast spells and which ones starting in 2 minutes, 30 seconds, 10 seconds and when completed"
	respond "CLI: ;masscomm [spell=<blurs|guards|colors>]"
	respond " -- restricts your casting to only the spell specified even if you are able to cast others"
	respond "CLI: ;masscomm [espchannel=<esp channel name>]"
	respond " -- will announce you intention to cast spells and which ones in 2 minutes on the specified amunet/esp channel"
	respond "CLI: ;masscomm [lnetchannel=<lnet channel name>]"
	respond " -- will announce you intention to cast spells and which ones in 2 minutes on the LNET channel"
	respond ""
	respond "Examples"
	respond ";masscomm here espchannel=Help lnetchannel=help"
	respond " -- annouce in your room as well as on both nets your intention to cast spells in 2 minutes"
	respond ";masscomm here spell=guards"
	respond " -- announce in the room you are int hat you will be casting only guards in 2 minutes even if you are a wizard that could also cast blurs"
	exit
	
end

def determineSpellsToCast()
	#This calculates how many casts are needed to ensure a four hour and ten minute duration.
	if (Spell[911].known? and Spell[419].known? and $Blur_Planned and $Guard_Planned)
		echo "Casting Blurs and Guards!"
		
	elsif (Spell[911].known? and $Blur_Planned)
		echo "Casting Blurs!"
		
	elsif (Spell[419].known? and $Guard_Planned)
		echo "Casting Guards!"
		
	elsif (Spell[611].known? and $Color_Planned)
		echo "Casting Colors"
		
	else
		echo "You do not appear to know any mass cast spells (611, 911, 419).  If this is not the case, please check that infomon is running, and type skill and spell all, and run this again."
		exit
	end


end

def calculateCasts()
	#This calculates how many casts are needed to ensure a four hour and ten minute duration.
	if (Spell[911].known? and Spell[419].known? and $Blur_Planned and $Guard_Planned)
		$Blur_cycle = ((250/(20 + Spells.wizard)).to_i + 1)
		$Guard_cycle = ((250/(20 + Spells.minorelemental)).to_i + 1)
		echo "Casting Blurs #{$Blur_cycle} times and Guards #{$Guard_cycle} times."
		
	elsif (Spell[911].known? and $Blur_Planned)
		$Blur_cycle = ((250/(20 + Spells.wizard)).to_i + 1)
		echo "Casting Blurs #{$Blur_cycle} times!"
	elsif (Spell[419].known? and $Guard_Planned)
		$Guard_cycle = ((250/(20 + Spells.minorelemental)).to_i + 1)
		echo "Casting Guards #{$Guard_cycle} times!"
	elsif (Spell[611].known? and $Color_Planned)
		$Color_cycle = ((250/(20 + Spells.ranger)).to_i + 1)
		echo "Casting Colors #{$Color_cycle} times"
	else
		echo "You do not appear to know any mass cast spells (611, 911, 419).  If this is not the case, please check that infomon is running, and type skill and spell all, and run this again."
		exit
	end
end

	


def announceCasting()
	if ($BlockAnnounce)
		echo "Skipping announcements due to [now] parameter"
	else
		#This checks to see if the thoughtnet is active, and if not, activate it.
		#this code is no longer needed due to change sin ESP
		#if ($Room_Location != nil and $Room_Title != nil)
		#	if (!Spell[9703].active? and !Spell[9906].active?)
		#		if (Spell[9703].known? and Spell[9703].affordable?)
		#			Spell[9703].cast
		#		elsif (Spell[9906].known? and Spell[9906].affordable?)
		#			Spell[9906].cast
		#		else
		#			fput "rub my crystal amulet"
		#		end
		#	end
		#end


		pause 1

		if ($Blur_cycle != nil and $Guard_cycle == nil)
			fput "'=pronounce :loud Casting Blurs in two minutes! Please add Guards or Colors if you can!" if ($AnnounceRoom)
			LNet.send_message(attr={'type'=>'channel', 'channel'=>$lnetAnnounceChannel}, "Casting Blurs in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Guards and Colors if you can!") if ($lnetAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
			fput "think on #[$espAnnounceChannel] Casting Blurs in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Guards and Colors if you can!" if ($espAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
		elsif ($Guard_cycle != nil and $Blur_cycle == nil)
			fput "'=pronounce :loud Casting Guards in two minutes! Please add Blurs or Colors if you can!" if ($AnnounceRoom)
			LNet.send_message(attr={'type'=>'channel', 'channel'=>$lnetAnnounceChannel}, "Casting Guards in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Blurs and Colors if you can!") if ($lnetAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
			fput "think on #[$espAnnounceChannel] Casting Guards in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Guards and Colors if you can!" if ($espAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
		elsif ($Guard_cycle != nil and $Blur_cycle != nil)
			fput "'=pronounce :loud Casting Blurs and Guards in two minutes! Please add Colors if you can!" if ($AnnounceRoom)
			LNet.send_message(attr={'type'=>'channel', 'channel'=>$lnetAnnounceChannel}, "Casting Blurs and Guards in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Colors if you can!") if ($lnetAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
			fput "think on #[$espAnnounceChannel] Casting Blurs and Guards in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Guards and Colors if you can!" if ($espAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
		elsif ($Color_cycle != nil)
			fput "'=pronounce :loud Casting Colors in two minutes! Please add Blurs or Guards if you can!" if ($AnnounceRoom)
			LNet.send_message(attr={'type'=>'channel', 'channel'=>$lnetAnnounceChannel}, "Casting Colors in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Blurs and Guards if you can!") if ($lnetAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
			fput "think on #[$espAnnounceChannel] Casting Colors in two minutes in #{$Room_Location} at #{$Room_Title}!  Please add Guards and Colors if you can!" if ($espAnnounceChannel != nil and $Room_Location != nil and $Room_Title != nil)
		else
			echo "It shouldn't be possible to get here, if this displays, something is really messed up!"
			exit
		end

		pause 30
		echo "90 seconds"
		pause 30
		echo "60 seconds"
		pause 30
		echo "30 seconds"
		

		if ($Blur_cycle != nil and $Guard_cycle == nil)
			fput "'=inform :loud Casting Blurs in 30 seconds! Please add Guards or Colors if you can!" if ($AnnounceRoom)
			#LNet.send_message(attr={'type'=>'channel', 'channel'=>send_channel}, "Casting Blurs in 30 seconds at #{Loc}, Room Number: #{Room.current.id}!  Please add Guards and Colors if you can! Last call!") if (send_channel != nil and Loc != nil)
			#fput "think Casting Blurs in 30 seconds at #{Loc}!  Please add Guards and Colors if you can! Last call!" if (Loc != nil)
		elsif ($Guard_cycle != nil and $Blur_cycle == nil)
			fput "'=inform :loud Casting Guards in 30 seconds! Please add Blurs or Colors if you can!" if ($AnnounceRoom)
			#LNet.send_message(attr={'type'=>'channel', 'channel'=>send_channel}, "Casting Guards in 30 seconds at #{Loc}, Room Number: #{Room.current.id}!  Please add Blurs and Colors if you can! Last call!") if (send_channel != nil and Loc != nil)
			#fput "think Casting Guards in 30 seconds at #{Loc}!  Please add Blurs and Colors if you can! Last call!" if (Loc != nil)
		elsif ($Guard_cycle != nil and $Blur_cycle != nil)
			fput "'=inform :loud Casting Blurs and Guards in 30 seconds! Please add Colors if you can!" if ($AnnounceRoom)
			#LNet.send_message(attr={'type'=>'channel', 'channel'=>send_channel}, "Casting Blurs and Guards in 30 seconds at #{Loc}, Room Number: #{Room.current.id}!  Please add Colors if you can! Last call!") if (send_channel != nil and Loc != nil)
			#fput "think Casting Blurs and Guards in 30 seconds at #{Loc}!  Please add Colors if you can! Last call!" if (Loc != nil)
		elsif ($Color_cycle != nil)
			fput "'=inform :loud Casting Colors in 30 seconds! Please add Blurs and Guards if you can!" if ($AnnounceRoom)
			#LNet.send_message(attr={'type'=>'channel', 'channel'=>send_channel}, "Casting Colors in 30 seconds at #{Loc}, Room Number: #{Room.current.id}!  Please add Blurs and Guards if you can! Last call!") if (send_channel != nil and Loc != nil)
			#fput "think Casting Colors in 30 seconds at #{Loc}!  Please add Blurs and Guards if you can! Last call!" if (Loc != nil)
		else
			echo "It shouldn't be possible to get here, if this displays, something is really messed up!"
			exit
		end


		pause 20

		if ($Blur_cycle != nil or $Guard_cycle != nil or $Color_cycle != nil)
			fput "recite Casting in 10 seconds, be joined!  Last call!" if ($AnnounceRoom)
		end

		pause 10
	end
end

def castSpells()
	#Below sections cast the appropriate mass spell that you know.  If you do not have enough mana to finish the cycle, it will pause a few seconds and yell at you to get more mana.  Once you have the mana to continue, it will resume casting.
	if ($Blur_cycle != nil and $Blur_Planned)
		loop do
			if (Spell[911].affordable?)
				Spell[911].cast
				$Blur_cycle -= 1
				waitcastrt?
			else
				echo "You need more mana to continue, ask for it or use an ability!"
				pause 3
			end
			break if ($Blur_cycle == 0)
		end
	end

	if ($Guard_cycle != nil and $Guard_Planned)
		loop do
			if (Spell[419].affordable?)
				Spell[419].cast
				$Guard_cycle -= 1
				waitcastrt?
			else
				echo "You need more mana to continue, ask for it or use an ability!"
				pause 3
			end
			break if ($Guard_cycle == 0)
		end
	end

	if ($Color_cycle != nil and $Color_Planned)
		loop do
			if (Spell[611].affordable?)
				Spell[611].cast
				$Color_cycle -= 1
				waitcastrt?
			else
				echo "You need more mana to continue, ask for it or use an ability!"
				pause 3
			end
			break if ($Color_cycle == 0)
		end
	end
end 

def reportSpellsCast()
	if ($AnnounceRoom)
		#The script will now wait until you unpause it to disband the group, in the event others are casting mass spells still, or if you wish to add additional casts manually for those who joined late.
		fput "recite that should be four hours!  Stay safe!"
		echo "You are done casting.  use ;u to unpause this script when everyone else is done casting and you are ready to disband the group!"
		pause_script
		pause 1
		fput "disband group"
		fput "group open"
		exit
end
end

#Parse Variables if Any
$BlockAnnounce = false

if (variable[0])
	variable.each{ |variableEntry|
		if variableEntry.downcase =~ /help/
			call showHelp()
			exit
		elsif variableEntry.downcase =~ /now/
			#cast spells without waiting or announcing
			$AnnounceRoom = false
			$BlockAnnounce = true
			
		elsif variableEntry.downcase =~ /here/
			#cast spells announcing in this room and waiting for start
			$AnnounceRoom = true
			
		elsif variableEntry.downcase =~ /spell=/
			#cast only specified spell if able to cast both guards and blurs
			spellCast = variableEntry.gsub(/spell=/,"")
			
			if spellCast.downcase =~ /blur|blurs|911/
				$Guard_Planned = false
				$Color_Planned = false
			elsif spellCast.downcase =~ /guard|guards|brills|419/
				$Blur_Planned = false
				$Color_Planned = false
			elsif spellCast.downcase =~ /color|colors|611/
				$Blur_Planned = false
				$Guard_Planned = false
			else 
				echo "Selecting spell of [#spellCast] failed to match"
			end
		
		elsif variableEntry.downcase =~ /espchannel=/
			#announce initial message on esp general
			$espAnnounceChannel = variableEntry.gsub(/espchannel=/,"")
			
		elsif variableEntry.downcase =~ /lnetchannel=/
			#announce initial message on esp general
			$lnetAnnounceChannel = variableEntry.gsub(/lnetchannel=/,"")
			
		end
	}
else 
	showHelp()
	exit

end

$Blur_cycle = nil
$Guard_cycle = nil
$Color_cycle = nil


fput "Group open"
#Determine Spells to Case
determineSpellsToCast()
#Determine Number of Casts
calculateCasts()

#Determine Announcements
announceCasting()

#Count Down Announcements


#Cast Spells
castSpells()

#Report Spells
reportSpellsCast()






