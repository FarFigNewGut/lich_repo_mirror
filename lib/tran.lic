=begin
    Because I am sick of you terrible empaths that can't heal without a script...
    ;tran <target> - heal target
    ;tran imprint - toggle imprint mode true/false, auto imprint at end of healing

    -It spams that combat line to see the end of an appraise.  Ignore the 'Gladiator Arena' line. It's expected.
    -Will heal scars if you have correct lores
    -auto heals down to rank 1 wounds and removes major head/nerve scar to prevent exp loss
    -Not configurable. IF you want to tinker with the auto-healing part look at the last few lines under healing self.
    -Added workaround to detect scars underneath wounds
    -Fixed transferring blood to transfer all

    -Drafix
=end
CharSettings[:imprint] = true if CharSettings[:imprint].nil?

target = script.vars[1]
exit if target.nil?

if target =~ /^imprint$/
    CharSettings[:imprint] = !CharSettings[:imprint]
    echo "Setting imprint mode to #{CharSettings[:imprint]}"
    exit
end


def toBodyPart(wound)
    if wound =~ /(left|right) (eye|hand|arm|leg)/
        "#{$1} #{$2}"
    elsif wound =~ /slurred|twitching|convulsions/
         "nerves"
    elsif wound =~ /abdominal/
        "abdomen"
    elsif wound =~ /(chest|back|head|neck)/
        $1
    elsif wound =~ /face|facial/
        "head"
    else
        nil
    end
end

def appraise(person)
    put "appraise #{person}"
    put "combat"
    while line = get
        if line =~ /You take a quick appraisal of .+ and find that s?he has (.+)\./
            wounds = $1
        elsif line =~ /(?:She|He) has (.+)\./
            scars = $1
        elsif line =~ /That only works in the Gladiator Arenas\./
            break
        end
    end
    wound_array = wounds.split(/, | and /)
    wounds = Array.new
    wound_array.each {|wound| wounds.push(toBodyPart(wound))}
    scars_array = scars.split(/, | and /)
    scars = Array.new
    scars_array.each { |scar| scars.push(toBodyPart(scar))}
    scars = scars - wounds
    wounds.delete_if{|x| x.nil?}
    scars.delete_if{|x| x.nil?}
    [wounds, scars]
end

wounds, scars = appraise(target)
3.times{
    wounds.each{|part|
        fput "transfer #{target} #{part}" unless part.nil?
    }
    if(Skills.mltransference >= 50)
        scars.each{|part|
            fput "transfer #{target} #{part}" unless part.nil?
        }
    end
    wounds, scars = appraise(target)
    if(Skills.mltransference >= 50)
        break if (wounds+scars).empty?
    else
        break if wounds.empty?
    end
}

bloodContinue =  [
    'You infuse .+ with your own strength, and s?he loses some of (?:his|her) pallor\.',
    'You sacrifice your life\'s blood to restore some of .+\'s loss, leaving you weak and dizzy\.',
    'Your sense of your own dwindling health is distant as you work to restore some of .+\'s lost blood supply\.',
    'You feel some of your blood drain away, but .+ looks a little less wan\.',
    'Gently, you send a trickle of your own vitality into .+, restoring some of (?:his|her) blood loss\.',
    'Nebulous wisps drift around .+, revitalizing (?:his|her) somewhat at your expense\.',
    'A faint crimson haze flows from you and into .+, restoring some of (?:his|her) vigor\.',
]


bloodStop = [
    'Nothing happens\.',
    'doesn\'t look like (?:he|she) wants to be healed\.',
    'You infuse .+ with your own strength, and s?he appears entirely restored\.',
    'You sacrifice your life\'s blood to restore all of .+\'s loss, leaving you weak and dizzy\.',
    'You feel some of your blood drain away, but .+ takes on the flush of full health\.',
    'Nebulous wisps drift around .+, entirely revitalizing (?:his|her) at your expense\.',
    'Nebulous wisps drift around .+, entirely revitalizing (?:his|her) at your expense\.',
    'Your sense of your own dwindling health is distant as you work to restore all of .+\'s lost blood supply\.',
    'A faint crimson haze flows from you and into .+, restoring (?:his|her) to full vigor\.',
]

bloodStopRegex = /#{bloodStop.join('|')}/o
bloodRegex = /#{(bloodContinue+bloodStop).join('|')}/o

bloodline = String.new
until bloodline =~ bloodStopRegex || bloodline.nil?
    while health <= 75 or percenthealth < 51
        mana_cost = (maxhealth - health) / 10
        if mana >= mana_cost
            fput "cure"
            sleep 1
            waitrt?
            waitcastrt?
        else
            echo "** Not enough mana, waiting for mana to restore blood **"
            current_mana = mana
            wait_until{mana > current_mana}
        end
    end
    if bloodline.nil?
        echo "Unrecognized response from transferring blood... do you have a custom healing message?"
        echo "Skipping transfer of blood on #{target}"
        break
    end
    bloodline = dothistimeout "transfer #{target}", 3, bloodRegex
end
fput "imprint #{target}" if CharSettings[:imprint] && spirit > 2

bodyparts = ['head', 'nerves', 'rarm', 'larm', 'rhand', 'lhand', 'back', 'chest', 'abs', 'lleg', 'rleg', 'neck', 'reye', 'leye']
scarcost = Hash['rleg1',11,'rleg2',15,'rleg3',15,'rarm1',11,'rarm2',15,'rarm3',15,'rhand1',11,'rhand2',15,'rhand3',15,'lleg1',11,'lleg2',15,'lleg3',15,'larm1',11,'larm2',15,'larm3',15,'lhand1',11,'lhand2',15,'lhand3',15,'head1',13,'head2',17,'head3',17,'neck1',13,'neck2',17,'neck3',17,'nerves1',12,'nerves2',16,'nerves3',16,'back1',14,'back2',18,'back3',18,'chest1',14,'chest2',18,'chest3',18,'abs1',14,'abs2',18,'abs3',18,'reye1',14,'reye2',18,'reye3',18,'leye1',14,'leye2',18,'leye3',18]
convert_wound = proc { |wound|
    wound = wound.split.join(' ')
    if wound =~ /(l|r)(arm|hand|leg|eye)/
        "#{$1} #{$2}"
    elsif wound =~ /abs/
        "abdomen"
    elsif wound =~ /nerve/
        'nerves'
    elsif wound =~ /(head|neck|chest|back)/
        $1
    end
}

healscar = proc { |area|
    wait_until{ checkmana(scarcost["#{area}#{Scars.send(area)}"]) }
    waitrt?
    waitcastrt?
    fput "cure #{convert_wound.call(area)}"
    sleep 1
    $_SERVER_.puts "_injury 1"
}

healdown = proc { |area|
    if area =~ /head|neck/
        spell = 1104
        if Wounds.neck > 1 then cost = 9 else cost = 4 end
    elsif area =~ /hand|arm|leg/
        spell = 1102
        if Wounds.limbs > 1 then cost = 7 else cost = 2 end
    elsif area =~ /eye|ab|chest|back/
        spell = 1105
        if Wounds.torso > 1 then cost = 10 else cost = 5 end
    elsif area =~ /nerve/
        spell = 1103
        if Wounds.nerves > 1 then cost = 8 else cost = 3 end
    end
    unless mana?(cost)
        respond("Insufficient mana, will continue when you have enough...")
        until mana?(cost)
            sleep 1
        end
    end

    fput "cure #{convert_wound.call(area)}"
    sleep 1
    waitrt?
    waitcastrt?
}

echo "Healing Self"
bodyparts.each { |part|
    healdown.call(part) while Wounds.send(part) > 1
}
$_SERVER_.puts "_injury 1"
['head', 'nerves'].each{|part|
    healscar.call(part) while Scars.send(part) > 1
}