=begin
    newchrism.lic

    Simple script that will scan a sack, pull out each gem, make a chrism, (cutter optional) put the chrism
    in a cutter and cut it, then remove the cut chrism
    and stow it in another sack

    ;newchrism help
	
	    maintainer: elanthia-online
			  game: Gemstone
          tags: gems, chrisms, cutter, cleric, utility
      required: Lich > 5.0.4
       version: 1.0
        Source: https://github.com/elanthia-online/jinx

=end

#  Load GameObj data if it isn't already loaded.

GameObj.load_data if GameObj.type_data.empty? or GameObj.type_data.nil?

#  Function to return GameObj inventories for a requested storge container.  We will call
#  this function several times in the script.  This function defaults to the user's defined
#  lootsack if no parameter is passed

def findInv(sack = UserVars.orbsack)

    if sack.empty? or sack.nil?
        echo 'error:  you have not specified a container and have no orbsack saved'
        exit
    elsif !(sack.empty?)
        unless sackInv =
            GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(sack).sub(' ', ' .*')}/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(sack).sub(' ', ' .*')}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(sack.strip)}$/i }
                echo "error: failed to find your #{sack} "
            exit
        end
    end
    if sackInv.contents.empty?
        echo "error: failed to find any inventory in your #{sack}"
        exit
    end
    return sackInv
end


if script.vars.find { |val| val =~ /\bhelp\b/i }
    output = "\n"
    output.concat "   #{$clean_lich_char}#{script.name} (orb container) (chrism container) OPTIONAL:(gemcutter)\n"
    output.concat "   for a single run of the script (gemcutter is optional).  Use this if you need different sacks.\n\n"
    output.concat "   You can also define your 'orbsack' and 'chrismsack' containers as well as your 'gemcutter'\n"
    output.concat "   \n\n"
    output.concat "    Current Settings:\n"
    output.concat "    orbsack = #{UserVars.orbsack}\n"
    output.concat "    chrismsack = #{UserVars.chrismsack}\n"
    output.concat "    gemcutter = #{UserVars.gemcutter}\n\n"
    output.concat "   The script by itself will take each orb in an orbsack and create a chrism\n"
    output.concat "   then cut that chrism in the gemcutter.\n\n"
    output.concat "   You must be holding the cutter in your left hand, and you must be wearing both\n"
    output.concat "   your orbsack and your chrismsack.\n"
    output.concat "\n"
    respond output
    exit
end

####################
#
#  Initialize variables
#
####################

orbsack, chrismsack, gem = String.new
gems = Array.new
startnumber = gems.length
tick, tock, start_time = nil
time_total = 0


#  At this point, we're moving on the processing gems from sacks.  Check to see if
#  variables are passed first and if not, check UserVars for settings

if ( script.vars.empty? )
  t_orbsack = UserVars.orbsack unless UserVars.orbsack.empty?
  t_chrismsack = UserVars.chrismsack unless UserVars.chrismsack.empty?
  t_gemcutter = (UserVars.gemcutter.empty?) ? nil : UserVars.gemcutter
else
  script.vars.shift
  t_orbsack = script.vars.shift
  t_chrismsack = script.vars.shift
  t_gemcutter = (script.vars.length > 0) ? script.vars.shift : nil
end

#  Note to self:  FIXME - should be able to collapse / modularize check for container exists

if (t_orbsack.nil? or t_orbsack.empty?)
    echo 'error: orb sack is not set.  (;vars set orbsack=<container name>)'
    exit
elsif (t_chrismsack.nil? or t_chrismsack.empty?)
    echo 'error: chrism sack is not set.  (;vars set chrismsack=<container name>)'
    exit
elsif (t_gemcutter.nil?)
    echo "gemcutter is not set.  Proceeding without it (;vars set gemcutter=<gemcutter noun>)"
end


#  Let's get things rocking!  Here's where we'll load up an array with contents of
#  the loot sack, and pare it down to just gems, then check to see if we have any
#  gems to process.

orbsack = findInv(t_orbsack)
chrismsack = findInv(t_chrismsack)
sleep 1
if (orbsack.contents.nil? or orbsack.contents.empty?) then echo ("No inventory in your orbsack!"); exit end

gems = orbsack.contents
gems.delete_if { |obj| obj.type !~ /gem/ }
startnumber = gems.length
if gems.empty? then echo ("No gems in your inventory in that container"); exit end


#  define time proc.  This proc gets called each iteration to update the amount of time
#  spent on a gem.  That is then used to estimate time remaining, based on the number
#  of remaining gems detected

gemtime = proc {

    unless tock.nil?
        time_total += tock - tick
        avg_time = time_total.to_f / (startnumber - gems.length).to_f
    end
    tick = Time.now.to_f
    if time_total.nonzero?
        est_time_left = (avg_time * gems.length.to_f) / 60.00
        est_min = ' (estimated time left is ' + est_time_left.truncate.to_s; est_sec = ((est_time_left % 1) * 0.60).to_s.sub(/.*\.(\d\d).*/, '\1')
    else
        est_min = ' (estimated time left is ??'; est_sec = '??'
    end
    if gems.length > 1
        respond("#{gems.length} gems left" + est_min + ":" + est_sec + ').')
    else
        respond("#{gems.length} gem left" + est_min + ":" + est_sec + ').')
    end
}

#  define makechrism proc  This proc is called for each gem.

makechrism = proc {

    wait_until('Waiting on mana...') { mana(75) }
    waitcastrt?

    dothistimeout "take my #{gem} from my #{orbsack}", 3, /^You take|^You get|^You remove/
    dothistimeout "prep 325", 3, /^You intone|^You prepare/
    dothistimeout "cast at my #{gem}", 3, /^A quick prayer|^You cast/
    waitcastrt?
    dothistimeout "bless deity common 4", 3, /^You chant a quick prayer/
    dothistimeout "mark my #{gem}", 3, /^You carefully mark your/
}

#  define cutchrism proc.  This proc is called for each chrism

cutchrism = proc {


# FIXME:  checkleft for cutter, silent on success
# FIXME:  check for cutter holding gem, pattern in place, all silent on success
  if checkleft !~ /#{Regexp.quote(t_gemcutter)}/
    echo "error: Gemcutter not in left hand!\n"
    echo "Looking for #{UserVars.gemcutter}\n\n"
    echo "If you wish to clear this setting, run again without a third variable or clear out the variable by using\n"
    echo ";vars delete gemcutter\n"
    exit
  end
  dothistimeout "put #{gem} in my #{t_gemcutter}", 3, /^You carefully place/
  dothistimeout "turn my #{t_gemcutter}", 3, /^You wind up your/
  waitrt?
  dothistimeout "get #{gem} from #{t_gemcutter}", 3, /^You remove/

}


#  define stowchrism function  This proc is called after the gem is chrism and cut
#  it is defined this way so quick changes can be made

stowchrism = proc {

#FIXME: checkright for gem, silent on success

  dothistimeout "put my #{gem} in my #{chrismsack}", 3, /^You put|^You place/

}

#################
#  MAIN
#################

#  And after all that, here we are.  The work is done in this loop, consisting of
#  11 lines - including the 4 lines to report out and exit the program

start_time = Time.now.to_f

gems.length.times {

    gemtime.call

    gem = gems.shift
    if gem =~ /lapis lazuli/
#        gstore = "lapis lazuli"
        gem = "lapis"
#    else
#        gstore = gem.noun.dup
    end

    makechrism.call
    cutchrism.call if !t_gemcutter.nil?
    stowchrism.call

    tock = Time.now.to_f

}

exit
