# This calculated the max lock and trap with and without lore
$lock_ranges = []
$lock_ranges = [["a primitive lock", 35], ["a rudimentary lock", 75], ["an extremely easy lock", 115], ["a very easy lock", 155], ["an easy lock", 195], ["a very basic lock", 235], ["a fairly easy lock", 275], ["a simple lock", 315], ["a fairly simple lock", 355], ["a fairly plain lock", 395], ["a moderately well-crafted lock", 435], ["a well-crafted lock", 475], ["a tricky lock", 515], ["a somewhat difficult lock", 555], ["a moderately difficult lock", 595], ["a very well\-crafted lock", 635], ["a difficult lock", 675], ["a fairly complicated lock", 795], ["an intricate lock", 835],  ["an amazingly well\-crafted lock", 875], ["a very complex lock", 915], ["an impressively complicated lock", 955], ["an amazingly intricate lock", 995], ["an extremely difficult lock", 1035], ["an extremely complex lock", 1075], ["a masterfully well\-crafted lock", 1115],["an amazingly complicated lock", 1155], ["an astoundingly complex lock", 1195], ["an incredibly intricate lock", 1235], ["an absurdly well\-crafted lock", 1275], ["an exceedingly complex lock", 1315], ["an absurdly difficult lock", 1355], ["an unbelievably complicated lock", 1395], ["a masterfully intricate lock", 1435], ["an impossibly complex lock", 1485]]

$lockpick_list = []
$lockpick_list = [["copper", 1.00], ["brass", 1.00], ["steel", 1.10], ["ivory", 1.20], ["gold", 1.20], ["silver", 1.30], ["mithril", 1.45], ["ora", 1.55], ["glaes", 1.60], ["laje", 1.75], ["vultite", 1.80], ["rolaren", 1.90], ["veniom", 2.15], ["invar", 2.25], ["alum", 2.30], ["golvern", 2.35], ["kelyn", 2.40], ["vaalin", 2.5],["shadow", 2.5]]

def create_lock_table
	$my_range = []
	$lockpick_list.each{ |pick,mod|
		this_lock = []
		this_lock.push(pick)
		this_lock.push(((Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1]) * mod).round - 30)
		if Spells.minorelemental >= 3
			this_lock.push((((Stats.level / 2) + (Skills.pickinglocks / 10) + (Stats.dex[1] / 2) + (Stats.int[1] / 2) + 30 + Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1]) * mod).round - 30)
		else
			this_lock.push((mod * (((Stats.level / 2) + (Skills.pickinglocks / 10) + (Stats.dex[1] / 2) + (Stats.int[1] / 2) + 30) / 2 + Skills.to_bonus(Skills.pickinglocks) + Stats.dex[1])).round - 30)
		end
		$my_range.push(this_lock)
	}
	maxtrap = Stats.dex[1] + Skills.to_bonus(Skills.disarmingtraps)
	if Spells.minorelemental >= 4
		lored_trap = Stats.dex[1] + Skills.to_bonus(Skills.disarmingtraps) + (Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + (Stats.agi[1] / 2) + (Stats.dis[1] / 2)
	else
		lored_trap = Stats.dex[1] + Skills.to_bonus(Skills.disarmingtraps) + ((Stats.level / 2) + (Skills.to_bonus(Skills.disarmingtraps) / 10) + (Stats.agi[1] / 2) + (Stats.dis[1] / 2)) / 2 
	end
	$maxtrap = []
	$maxtrap = [maxtrap,lored_trap]
end

def max_lock
	create_lock_table
	respond "unlored    lored      lockpick"
	$my_range.each{ |pick,unlore,lore|
		array = [unlore,lore,pick]
		respond array.join("        ")
	}
	respond
	respond "trap    lored"
	respond "#{$maxtrap[0]}     #{$maxtrap[1]}"
end
	
max_lock
