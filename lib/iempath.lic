# Shattered Empath
# A script for cold, calculating afk empaths
# Author: Monotonous
# v1.0
# 04/26/2010
# CONFIGURATION	:	Use "setup" parameter at command line
# WARNING	:	This is not designed with sub-level 14 empaths in mind. Newbs will heal to death.

def TransferFrom(person, cureBlood)
	waitrt?
	waitcastrt?
	fput "appraise #{person}"
	line = matchtimeout 5, "You take a quick appraisal of "
	if not line or line !~ /You take a quick appraisal of/ then return end
	wounds = []
	if line =~ /head/ then wounds.push "head" end
	if line =~ /neck/ then wounds.push "neck" end
	if line =~ /right eye/ then wounds.push "right eye" end
	if line =~ /left eye/ then wounds.push "left eye" end
	if line =~ /back/ then wounds.push "back" end
	if line =~ /chest/ then wounds.push "chest" end
	if line =~ /abdomen|abdominal/ then wounds.push "abdomen" end
	if line =~ /left arm/ then wounds.push "left arm" end
	if line =~ /right arm/ then wounds.push "right arm" end
	if line =~ /left hand/ then wounds.push "left hand" end
	if line =~ /right hand/ then wounds.push "right hand" end
	if line =~ /left leg/ then wounds.push "left leg" end
	if line =~ /right leg/ then wounds.push "right leg" end
	if line =~ /twitching|convulsions/ then wounds.push "nerves" end
	if line =~ /no apparent injuries/ then wounds = [] end
	
	# --- Transfer scars with 50+ ranks of Metal Lore, Transference ---
	if Skills.mltransference >= 50 && line !~ /no apparent injuries/
		line = get	# Get the next line, since that's where scars show up.
		if line =~ /head/ then wounds.push "head" end
		if line =~ /neck/ then wounds.push "neck" end
		if line =~ /right eye/ then wounds.push "right eye" end
		if line =~ /left eye/ then wounds.push "left eye" end
		if line =~ /back/ then wounds.push "back" end
		if line =~ /chest/ then wounds.push "chest" end
		if line =~ /abdomen|abdominal/ then wounds.push "abdomen" end
		if line =~ /left arm/ then wounds.push "left arm" end
		if line =~ /right arm/ then wounds.push "right arm" end
		if line =~ /left hand/ then wounds.push "left hand" end
		if line =~ /right hand/ then wounds.push "right hand" end
		if line =~ /left leg/ then wounds.push "left leg" end
		if line =~ /right leg/ then wounds.push "right leg" end
		if line =~ /slurred|muscle/ then wounds.push "nerves" end
		if line =~ /no apparent injuries/ then wounds = [] end
	end

	wounds.each do |wound|
		fput "transfer #{person} #{wound}"
	end
	
	if cureBlood and wounds.length > 0
		line = "You infuse Adventurer with your own strength, and she loses some of her pallor."
		while checkhealth > (maxhealth / 2) and line =~ /loses some of .+ pallor/
            line = dothistimeout("transfer #{person}", 3, /You infuse|loses some of .+ pallor|Nothing happens|Transfer from whom|You cannot transfer/)
			#fput "transfer #{person}"
			#line = matchwait "You infuse", "Nothing happens.", "Transfer from whom"
		end
		#line = "You take some of sombody's blood loss."
		#while checkhealth > (maxhealth / 2) and line =~ /some of .+ blood loss/
		#	fput "transfer #{person}"
		#	line = matchwait "You take", "Nothing happens."
		#end
	end
end

def Cure(cureLocation, cureMana)	
	CheckHealth()
	
	while checkmana < cureMana
		CheckHealth()
		pause 5
	end
	
	waitrt?
	waitcastrt?
	fput "cure #{cureLocation}"
	pause 3
end

def CheckHealth
	while percenthealth < 100
		wait_while { checkmana < 1 }
		waitrt?
		waitcastrt?
		fput "cure blood"
		pause 3
	end
end

def CheckWoundsOfLevel(level, manaModifier)
	if Wounds.head == level			then Cure("head", 4+manaModifier) end
	if Wounds.neck == level			then Cure("neck", 4+manaModifier) end
	if Wounds.chest == level		then Cure("chest", 5+manaModifier) end
	if Wounds.abdomen == level		then Cure("abdomen", 5+manaModifier) end
	if Wounds.leftArm == level		then Cure("left arm", 2+manaModifier) end
	if Wounds.rightArm == level		then Cure("right arm", 2+manaModifier) end
	if Wounds.leftLeg == level		then Cure("left leg", 2+manaModifier) end
	if Wounds.rightLeg == level		then Cure("right leg", 2+manaModifier) end
	if Wounds.back == level			then Cure("back", 5+manaModifier) end
	if Wounds.leftHand == level		then Cure("left hand", 2+manaModifier) end
	if Wounds.rightHand == level	then Cure("right hand", 2+manaModifier) end
	if Wounds.nerves == level		then Cure("nerves", 3+manaModifier) end
	if Wounds.leftEye == level		then Cure("left eye", 5+manaModifier) end
	if Wounds.rightEye == level		then Cure("right eye", 5+manaModifier) end
end

def CheckScarsOfLevel(level, manaModifier)
	if Scars.head == level			then Cure("head", 13+manaModifier) end
	if Scars.nerves == level		then Cure("nerves", 12+manaModifier) end
	if Scars.neck == level			then Cure("neck", 13+manaModifier) end
	if Scars.chest == level			then Cure("chest", 14+manaModifier) end
	if Scars.abdomen == level		then Cure("abdomen", 14+manaModifier) end
	if Scars.leftArm == level		then Cure("left arm", 11+manaModifier) end
	if Scars.rightArm == level		then Cure("right arm", 11+manaModifier) end
	if Scars.leftLeg == level		then Cure("left leg", 11+manaModifier) end
	if Scars.rightLeg == level		then Cure("right leg", 11+manaModifier) end
	if Scars.back == level			then Cure("back", 14+manaModifier) end
	if Scars.leftHand == level		then Cure("left hand", 11+manaModifier) end
	if Scars.rightHand == level		then Cure("right hand", 11+manaModifier) end		
	if Scars.leftEye == level		then Cure("left eye", 14+manaModifier) end
	if Scars.rightEye == level		then Cure("right eye", 14+manaModifier) end
end

def CheckHeadAndNerves
	# This method forces head and nerves to be healed down, as xp absorption can be harmed
	while Wounds.head > 0
		Cure("head", 4+ Wounds.head * 5) 
	end
	while Wounds.nerves > 0
		Cure("nerves", 3+ Wounds.nerves * 5)
	end
	while Scars.head > 1
		Cure("head", 13+ Scars.head * 4)
	end
	while Scars.nerves > 1
		Cure("nerves", 12+ Scars.nerves * 4)
	end
end

############################################################################################################
############################################################################################################
############################################################################################################

	Settings.load
	Settings[Char.name] ||= Hash.new
	shatteredMode			= Settings[Char.name]['shatteredMode']
	cureBlood			= Settings[Char.name]['cureBlood']
	wounds_1			= Settings[Char.name]['wounds_1']
	wounds_2			= Settings[Char.name]['wounds_2']
	wounds_3			= Settings[Char.name]['wounds_3']
	scars_1				= Settings[Char.name]['scars_1']
	scars_2				= Settings[Char.name]['scars_2']
	scars_3				= Settings[Char.name]['scars_3']
	headAndNerves		        = Settings[Char.name]['headAndNerves']
	stopWhenFried		        = Settings[Char.name]['stopWhenFried']
	friendsList			= Settings[Char.name]['friendsList']	||	[]
	doNotHeal			= Settings[Char.name]['doNotHeal']	||	[]
	
if script.vars[1] =~ /^setup$|^options$/i
	window = window_action = nil
	Gtk.queue {
		button = Gtk::Button.new("Save")
		
		shatteredModeCheck = Gtk::CheckButton.new("Shattered Mode - Will heal everyone!")
		shatteredModeCheck.active = shatteredMode
		
		wound1Check = Gtk::CheckButton.new("1")
		wound2Check = Gtk::CheckButton.new("2")
		wound3Check = Gtk::CheckButton.new("3")	
		scar1Check = Gtk::CheckButton.new("1")
		scar2Check = Gtk::CheckButton.new("2")
		scar3Check = Gtk::CheckButton.new("3")
		
		wound1Check.active = wounds_1
		wound2Check.active = wounds_2
		wound3Check.active = wounds_3
		scar1Check.active = scars_1
		scar2Check.active = scars_2
		scar3Check.active = scars_3
		
		woundBox = Gtk::HBox.new(true, 0)
		woundBox.pack_start(wound1Check, false, false, 0)
		woundBox.pack_start(wound2Check, false, false, 0)
		woundBox.pack_start(wound3Check, false, false, 0)
		
		scarBox = Gtk::HBox.new(true, 0)
		scarBox.pack_start(scar1Check, false, false, 0)
		scarBox.pack_start(scar2Check, false, false, 0)	
		scarBox.pack_start(scar3Check, false, false, 0)
		
		noHealTextBox = Gtk::Entry.new
		noHealTextBox.text = doNotHeal.to_s
		
		friendsListTextBox = Gtk::Entry.new
		friendsListTextBox.text = friendsList.to_s
		
		cureBloodCheck = Gtk::CheckButton.new("Heal patient's blood loss (poor exp, wastes mana)")
		cureBloodCheck.active = cureBlood
		
		headAndNervesCheck = Gtk::CheckButton.new("Always heal down head and nerves to 1")
		headAndNervesCheck.active = headAndNerves
		
		stopWhenFriedCheck = Gtk::CheckButton.new("Stop healing others once mind is full")
		stopWhenFriedCheck.active = stopWhenFried
		
		saveButton = Gtk::Button.new("Save")
		
		main_box = Gtk::VBox.new(false, 0)	
		main_box.add(Gtk::HSeparator.new)
		main_box.add(Gtk::Label.new("Wound levels that will be cured down")) 
		main_box.add(woundBox)
		main_box.add(Gtk::HSeparator.new)
		main_box.add(Gtk::Label.new("Scar levels that will be cured down"))
		main_box.add(scarBox)
		main_box.add(Gtk::HSeparator.new)
		main_box.add(Gtk::Label.new("Do Not Heal List")) 
		main_box.add(Gtk::Label.new("[Name1],[Name2],etc")) 
		main_box.add(noHealTextBox)
		main_box.add(Gtk::HSeparator.new)
		main_box.add(Gtk::Label.new("Friends List")) 
		main_box.add(Gtk::Label.new("[Name1],[Name2],etc"))
		main_box.add(friendsListTextBox)
		main_box.add(shatteredModeCheck)
		main_box.add(stopWhenFriedCheck)
		main_box.add(cureBloodCheck)
		main_box.add(headAndNervesCheck)
		main_box.add(saveButton)
		
		window = Gtk::Window.new
		window.title = 'Shattered Empath Setup'
		window.border_width = 5	
		window.add(main_box)

		saveButton.signal_connect('clicked') {
					Gtk.queue {
						shatteredMode	= shatteredModeCheck.active?
						cureBlood	= cureBloodCheck.active?
						headAndNerves	= headAndNervesCheck.active?
						stopWhenFried	= stopWhenFriedCheck.active?
						wounds_1	= wound1Check.active?
						wounds_2	= wound2Check.active?
						wounds_3	= wound3Check.active?
						scars_1		= scar1Check.active?
						scars_2		= scar2Check.active?
						scars_3		= scar3Check.active?
						friendsList	= friendsListTextBox.text
						doNotHeal	= noHealTextBox.text
						puts "-=[ Settings Saved ]=-"
						window_action = :save
					}
			}
		window.signal_connect('delete_event') {window_action = :cancel}
		window.show_all
	}

	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }

	Settings[Char.name]['shatteredMode']	= shatteredMode
	Settings[Char.name]['cureBlood']	= cureBlood	
	Settings[Char.name]['headAndNerves']	= headAndNerves
	Settings[Char.name]['stopWhenFried']	= stopWhenFried
	Settings[Char.name]['wounds_1']		= wounds_1		
	Settings[Char.name]['wounds_2']		= wounds_2		
	Settings[Char.name]['wounds_3']		= wounds_3		
	Settings[Char.name]['scars_1']		= scars_1		
	Settings[Char.name]['scars_2']		= scars_2		
	Settings[Char.name]['scars_3']		= scars_3		
	Settings[Char.name]['friendsList']	= friendsList	
	Settings[Char.name]['doNotHeal']	= doNotHeal	
	Settings.save
	
end
	
	puts "-=[ Watching For Arrivals ]=-"

	# An array that remembers who we've seen in the room before
	knownPlayers = []
	loop {
		# Test for valid heal targets every 15 seconds, or whenever someone whispers, walks in, fogs in, arrives at a table, or rings in
		matchtimeout 15, "just", "appears", "arrive", "resolves"
		
		# Test for new arrivals and treat them
		checkpcs.each do |player|
			if stopWhenFried and checkfried then break end
			if doNotHeal.include?(player) then next end
			if knownPlayers.include?(player) then next end
			if shatteredMode or friendsList.include?(player) then TransferFrom(player, cureBlood) end
		end

		if !stopWhenFried or !checkfried 
			knownPlayers = checkpcs
		end
		
		CheckHealth()
		
		# Heal down wounds and scars
		if wounds_3 then CheckWoundsOfLevel(3,5) end
		if wounds_2 then CheckWoundsOfLevel(2,5) end
		if wounds_1 then CheckWoundsOfLevel(1,0) end
		if scars_3 then CheckScarsOfLevel(3,4) end
		if scars_2 then CheckScarsOfLevel(2,4) end
		if scars_1 then CheckScarsOfLevel(1,0) end		
		if headAndNerves then CheckHeadAndNerves() end
	}
