=begin

	This script creates a window that lists up 9 critters that are in your current room. The window will list each critter's name, their current status, and will have a button you can click so you will target that particular critter. Script will also list which critter you have targeted. Script will also state if someone in your current room is "obviously hiding" and will state which people are "possibly hiding" in your room based on their disk being in the room but they aren't currenty visible in your room.
	
	This is a work in progress at the moment and I am open to suggestions for what to add to the window.
	
	Changelog:

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 1

=end

require 'gtk3'

@someone_hiding_in_this_room = nil

def create_main_window
	combat_window = Gtk::Window.new(:toplevel)
		.set_title("Combat Window")
		.set_border_width(10)
		.set_default_size(300, 200)
		.set_type_hint(Gdk::WindowTypeHint::UTILITY)
		.set_keep_above(true)
		.set_position(Gtk::WindowPosition::CENTER)
		
	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(30)

	update_data = proc{	
		if GameObj.npcs.any?
			grid.each{ |child| grid.remove(child) }
			column = 0
			row = 0
			critter_count = 0
			GameObj.npcs.each do |npc|
				if npc.type =~ /aggressive/
					critter_count += 1
					if critter_count < 10
						label_critter_name = Gtk::Label.new(npc.name)
						if npc.status.nil?
							label_critter_status = Gtk::Label.new("Status: None")
						else
							label_critter_status = Gtk::Label.new("Status: #{npc.status}")
						end
						if npc.status =~ /dead/
							button = Gtk::Label.new("DEAD")
						elsif XMLData.current_target_id == npc.id
							button = Gtk::Label.new("TARGETED")
						else
							button = Gtk::Button.new(:label => "Target")
							button.signal_connect("clicked") do
								(put "target ##{npc.id}")
							end
						end
						grid.attach(label_critter_name, column, row*3, 5, 1)
						grid.attach(label_critter_status, column, row*3+1, 5, 1)
						grid.attach(button, column, row*3+2, 5, 1)
						column += 5
						if critter_count % 3 == 0
							column = 0
							row += 1
						end
					end
				end
			end
			row += 1
			total_critters_label = Gtk::Label.new("Total critters: #{critter_count}")
			grid.attach(total_critters_label, 0, row*3+2, 5, 1)
		else
			grid.each{ |child| grid.remove(child) }
		end

		if @someone_hiding_in_this_room
			row += 1
			obvious_hiding_label = Gtk::Label.new("Someone is obviously hiding in this room.")
			grid.attach(obvious_hiding_label, 0, row*3+2, 5, 1)
		end
		
		every_possible_person_hidden = Array.new
		GameObj.loot.each{ |item| 
			disk_owners_name = item.name.scan(/\b[A-Z][a-z]*\b/).first
			every_possible_person_hidden.push(disk_owners_name) if item.name =~ /disk|coffin/ && disk_owners_name != checkname && !checkpcs.include?(disk_owners_name)
		}
		if every_possible_person_hidden.any?
			row += 1
			possible_hiding_people_label = Gtk::Label.new("People possibly hiding: #{every_possible_person_hidden.join(", ")}")
			grid.attach(possible_hiding_people_label, 0, row*3+2, 5, 1)
		end
		combat_window.show_all
	}
	update_data.call

	timeout_source = GLib::Timeout.add(300) { update_data.call }
	
	stop_loop = lambda do
		GLib::Source.remove(timeout_source)
		Gtk.main_quit
	end
	
	combat_window.signal_connect('destroy') { stop_loop.call }
	
	combat_window.signal_connect('destroy') do
		kill_script "combat-window" if running? "combat-window"
	end

	combat_window.add(grid)
	combat_window.show_all
end

Gtk.queue {
	create_main_window
	Gtk.main
}

while line = get
	if line =~ /You also see|You notice/
		if line =~ /obvious signs of someone hiding/
			obvious_hiding = true
			hiding_room = Room.current.id
		else
			obvious_hiding = nil
			@someone_hiding_in_this_room = nil
		end
	elsif line =~ /Obvious (paths|exits):/ && hiding_room != Room.current.id
		obvious_hiding = nil
		@someone_hiding_in_this_room = nil
	end
	if hiding_room == Room.current.id && obvious_hiding
		@someone_hiding_in_this_room = true
	else
		@someone_hiding_in_this_room = nil
	end
end