=begin

	This script creates a window that lists up 9 critters that are in your current room and will be updated as you move between rooms. The window will list each critter's name, their current status, and will have a button you can click so you will target that particular critter. Script will also list which critter you have targeted. Script will also state if someone in your current room is "obviously hiding" and will state which people are "possibly hiding" in your room based on their disk being in the room but they aren't currently visible in your room.
	
	This is a work in progress at the moment and I am open to suggestions for what to add to the window.
	
	Changelog:
	Version 2: Added an "Action" indicator under every critter in the room. This will show if the critter has a spell prepared, if the critter is in RT, or will show "Unknown" if the script doesn't know what the critter is doing.
	Version 2: There is now an auto-targeting feature. You can have the script automatically target a critter based on if they are stunned, prone (plus a bunch of other status conditions), preparing a spell, or if they have no status conditions at all.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 2

=end

require 'gtk3'

all_critter_spell_prep_messages = /hurriedly incants a phrase of magic|gestures and utters a phrase of magic|mutters an incantation|mutters a frosty incantation/
all_critter_spell_cast_messages = /gestures mystically|gestures at|points an icy finger at|waves an icy hand|points a crooked icy finger at/

@combat_critter_round_time = 6

@critter_actions = {}

@someone_hiding_in_this_room = nil

def create_main_window
	def find_a_target(priority)
		if @combat_current_target.status !~ /#{priority}/
			new_target = GameObj.npcs.find{ |npc| npc.status =~ /#{priority}/ }
			if new_target
				put "target ##{new_target.id}"
			else
				new_target = GameObj.npcs.find{ |npc| npc.status } if @combat_current_target.status.nil?
			end
			put "target ##{new_target.id}" if new_target
		end
	end

	combat_window = Gtk::Window.new(:toplevel)
		.set_title("Combat Window")
		.set_border_width(10)
		.set_default_size(300, 300)
		.set_type_hint(Gdk::WindowTypeHint::UTILITY)
		.set_keep_above(true)
		.set_position(Gtk::WindowPosition::CENTER)

	grid = Gtk::Grid.new
	grid.set_row_spacing(0)
	grid.set_column_spacing(10)
	
	grid2 = Gtk::Grid.new
	grid2.set_row_spacing(10)
	grid2.set_column_spacing(30)
	
	target_status_priority = nil
	
	column_number = -1
	
	checkbox1 = Gtk::RadioButton.new("No Auto")
	checkbox1.set_tooltip_text("This turns off automatic targeting.")
	checkbox1.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = nil
		end
	end
	grid.attach(checkbox1, column_number += 1, 0, 1, 1)
	
	checkbox2 = Gtk::RadioButton.new(checkbox1, "Stunned")
	checkbox2.set_tooltip_text("This will automatically target critters that are currently stunned. If no critters are stunned then it will target a critter with any status.")
	checkbox2.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "stun"
		end
	end
	grid.attach(checkbox2, column_number += 1, 0, 1, 1)

	checkbox3 = Gtk::RadioButton.new(checkbox1, "Prone+")
	checkbox3.set_tooltip_text("This will automatically target critters that are currently prone, sleeping, kneeling, sitting, webbed, or frozen. If no critters have these statuses then it will target a critter with any status.")
	checkbox3.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "lay|prone|sleep|kneel|sit|web|frozen"
		end
	end
	grid.attach(checkbox3, column_number += 1, 0, 1, 1)
	
	checkbox4 = Gtk::RadioButton.new(checkbox1, "Preparing spell")
	checkbox4.set_tooltip_text("This will automatically target critters that are preparing a spell. If no critters are preparing a spell then it will target a critter with any status.")
	checkbox4.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "Preparing spell"
		end
	end
	grid.attach(checkbox4, column_number += 1, 0, 1, 1)

	checkbox5 = Gtk::RadioButton.new(checkbox1, "No status")
	checkbox5.set_tooltip_text("This will automatically target critters that have no status condition.")
	checkbox5.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "none"
		end
	end
	grid.attach(checkbox5, column_number += 1, 0, 1, 1)

	update_data = proc{	
		if GameObj.npcs.any?
			grid2.each{ |child| grid2.remove(child) }
			column = 0
			row = 0
			critter_count = 0
			GameObj.npcs.each do |npc|
				if npc.type =~ /aggressive/
					critter_count += 1
					if critter_count < 10
						label_critter_name = Gtk::Label.new(npc.name)
						if npc.status.nil?
							label_critter_status = Gtk::Label.new("Status: None")
						else
							label_critter_status = Gtk::Label.new("Status: #{npc.status}")
						end
						search_key = npc.id
						value = @critter_actions[search_key]
						if npc.status =~ /dead/
							label_critter_action = Gtk::Label.new("Action: DEAD")
						else
							if value == "Preparing spell"
								label_critter_action = Gtk::Label.new("Action: #{value}")
							elsif @critter_actions[npc.id].is_a?(Time)
								if Time.now - @critter_actions[npc.id] >= @combat_critter_round_time
									label_critter_action = Gtk::Label.new("Action: Unknown")
								else
									label_critter_action = Gtk::Label.new("Action: RT: #{@combat_critter_round_time - (Time.now - @critter_actions[npc.id]).round}")
								end
							else
							  label_critter_action = Gtk::Label.new("Action: Unknown")
							end
						end
						if npc.status =~ /dead/
							button = Gtk::Label.new("DEAD")
						elsif XMLData.current_target_id == npc.id
							button = Gtk::Label.new("TARGETED")
						else
							button = Gtk::Button.new(:label => "Target")
							button.signal_connect("clicked") do
								(put "target ##{npc.id}")
							end
						end
						grid2.attach(label_critter_name, column, row*3, 5, 1)
						grid2.attach(label_critter_status, column, row*3+1, 5, 1)
						grid2.attach(label_critter_action, column, row*3+2, 5, 1)
						grid2.attach(button, column, row*3+3, 5, 1)
						column += 5
						if critter_count % 3 == 0
							column = 0
							row += 2
						end
					end
				end
			end
			if critter_count > 0
				row += 1
				total_critters_label = Gtk::Label.new("Total critters: #{critter_count}")
				grid2.attach(total_critters_label, 0, row*3+2, 5, 1)
			end
			@combat_current_target = GameObj.npcs.find{ |npc| XMLData.current_target_id && XMLData.current_target_id == npc.id }
			if target_status_priority =~ /stun/
				find_a_target(target_status_priority)
			elsif target_status_priority =~ /(lay|prone|sleep|kneel|sit|web|frozen)/
				find_a_target(target_status_priority)
			elsif target_status_priority == "Preparing spell"
				search_key = XMLData.current_target_id
				value = @critter_actions[search_key]
				if value != "Preparing spell"
					new_target = @critter_actions.select { |key, value| value == "Preparing spell" }
					put "target ##{new_target.keys.first}" if new_target.count > 0
				end
			elsif target_status_priority == "none"
				if @combat_current_target.status
					new_target = GameObj.npcs.find{ |npc| npc.status.nil? && XMLData.current_target_id != npc.id }
					put "target ##{new_target.id}" if new_target
				end
			end
		else
			grid2.each{ |child| grid2.remove(child) }
		end

		if @someone_hiding_in_this_room
			row += 1
			obvious_hiding_label = Gtk::Label.new("Someone is obviously hiding in this room.")
			grid2.attach(obvious_hiding_label, 0, row*3+2, 5, 1)
		end
		
		every_possible_person_hidden = Array.new
		GameObj.loot.each{ |item| 
			disk_owners_name = item.name.scan(/\b[A-Z][a-z]*\b/).first
			every_possible_person_hidden.push(disk_owners_name) if item.name =~ /disk|coffin/ && disk_owners_name != checkname && !checkpcs.include?(disk_owners_name)
		}
		if every_possible_person_hidden.any?
			row += 1
			possible_hiding_people_label = Gtk::Label.new("People possibly hiding: #{every_possible_person_hidden.join(", ")}")
			grid2.attach(possible_hiding_people_label, 0, row*3+2, 5, 1)
		end
		combat_window.show_all
	}
	update_data.call

	timeout_source = GLib::Timeout.add(300) { update_data.call }
	
	stop_loop = lambda do
		GLib::Source.remove(timeout_source)
		Gtk.main_quit
	end
	
	combat_window.signal_connect('destroy') { stop_loop.call }
	
	combat_window.signal_connect('destroy') do
		kill_script "combat-window" if running? "combat-window"
	end
	
	box = Gtk::Box.new(:vertical, 0)
	box.pack_start(grid, :expand => true, :fill => true, :padding => 0)
	box.pack_start(grid2, :expand => true, :fill => true, :padding => 0)

	combat_window.add(box)
	combat_window.show_all
end

Gtk.queue {
	create_main_window
	Gtk.main
}

status_tags

while line = get
	if strip_xml(line) =~ /You also see|You notice/
		if strip_xml(line) =~ /obvious signs of someone hiding/
			obvious_hiding = true
			hiding_room = Room.current.id
		else
			obvious_hiding = nil
			@someone_hiding_in_this_room = nil
		end
	elsif strip_xml(line) =~ /Obvious (paths|exits):/ && hiding_room != Room.current.id
		obvious_hiding = nil
		@someone_hiding_in_this_room = nil
	elsif line =~ /\<pushBold\/\>(?:An?|The) \<a exist\=\"(\d+)\" noun\=\"/
		critter_id = $1
		if strip_xml(line) =~ /#{all_critter_spell_prep_messages}/
			@critter_actions[critter_id] = "Preparing spell"
		#elsif strip_xml(line) =~ /#{all_critter_spell_cast_messages}/
			#@critter_actions[critter_id] = "Unknown"
		else
			@critter_actions[critter_id] = Time.now
		end
	end
	if hiding_room == Room.current.id && obvious_hiding
		@someone_hiding_in_this_room = true
	else
		@someone_hiding_in_this_room = nil
	end
end