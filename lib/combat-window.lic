=begin

	This script creates a window that lists up 9 critters that are in your current room and will be updated as you move between rooms. The window will list each critter's name, their current status, and will have a button you can click so you will target that particular critter. Script will also list which critter you have targeted. Script will also state if someone in your current room is "obviously hiding" and will state which people are "possibly hiding" in your room based on their disk being in the room but they aren't currently visible in your room.
	
	This is a work in progress at the moment and I am open to suggestions for what to add to the window.
	
	Changelog:
	Version 2: Added an "Action" indicator under every critter in the room. This will show if the critter has a spell prepared, if the critter is in RT, or will show "Unknown" if the script doesn't know what the critter is doing.
	Version 2: There is now an auto-targeting feature. You can have the script automatically target a critter based on if they are stunned, prone (plus a bunch of other status conditions), preparing a spell, or if they have no status conditions at all.
	Version 3: Added a setup menu where you can customize the color of the Combat Window and all of the text.
	Version 4: Added an option to add up to 30 customizable buttons to the main window that can automatically enter commands when clicked. These buttons are totally optional so just set the number of buttons to 0 if you don't want to use these buttons.

	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 4

=end

require 'gtk3'

all_critter_spell_prep_messages = /hurriedly incants a phrase of magic|gestures and utters a phrase of magic|mutters an incantation|mutters a frosty incantation/
all_critter_spell_cast_messages = /gestures mystically|gestures at|points an icy finger at|waves an icy hand|points a crooked icy finger at/

@combat_critter_round_time = 6

@critter_actions = {}
@combat_saved_settings = {}

@someone_hiding_in_this_room = nil

@combat_command_sequence = "None"

@combat_color_magenta = [1, 0.4, 1, 1]
@combat_color_gold = [1, 215.0 / 255, 0, 1]
@combat_color_white = [1, 1, 1, 1]
@combat_color_black = [0, 0, 0, 1]
@combat_color_blue = [0, 0, 1, 1]
@combat_color_brown = [0.647, 0.165, 0.165, 1.0]
@combat_color_gray = [0.5, 0.5, 0.5, 1.0]
@combat_color_purple = [0.5, 0.0, 0.5, 1.0]
@combat_color_red = [1, 0, 0, 1.0]
@combat_color_green = [0, 1, 0, 1.0]

CharSettings['color_settings'] = {} unless CharSettings['color_settings']

CharSettings['color_settings']["window_color"] = @combat_color_white if CharSettings['color_settings']["window_color"].nil?
CharSettings['color_settings']["auto_target_button_color"] = @combat_color_black if CharSettings['color_settings']["auto_target_button_color"].nil?
CharSettings['color_settings']["critter_name_color"] = @combat_color_black if CharSettings['color_settings']["critter_name_color"].nil?
CharSettings['color_settings']["critter_status_stunned"] = @combat_color_black if CharSettings['color_settings']["critter_status_stunned"].nil?
CharSettings['color_settings']["critter_status_dead"] = @combat_color_black if CharSettings['color_settings']["critter_status_dead"].nil?
CharSettings['color_settings']["critter_status_none"] = @combat_color_black if CharSettings['color_settings']["critter_status_none"].nil?
CharSettings['color_settings']["critter_status_all_others"] = @combat_color_black if CharSettings['color_settings']["critter_status_all_others"].nil?
CharSettings['color_settings']["critter_action_dead"] = @combat_color_black if CharSettings['color_settings']["critter_action_dead"].nil?
CharSettings['color_settings']["critter_action_preparing_spell"] = @combat_color_black if CharSettings['color_settings']["critter_action_preparing_spell"].nil?
CharSettings['color_settings']["critter_action_unknown"] = @combat_color_black if CharSettings['color_settings']["critter_action_unknown"].nil?
CharSettings['color_settings']["critter_action_rt"] = @combat_color_black if CharSettings['color_settings']["critter_action_rt"].nil?
CharSettings['color_settings']["all_other_text"] = @combat_color_black if CharSettings['color_settings']["critter_action_rt"].nil?

CharSettings['color_settings']["numbers_of_buttons"] = 0 if CharSettings['color_settings']["numbers_of_buttons"].nil?
number = 1
30.times{
	CharSettings['color_settings'][number] = {} unless CharSettings['color_settings'][number]
	CharSettings['color_settings'][number]["label_name"] = "#{number}" unless CharSettings['color_settings'][number]["label_name"]
	CharSettings['color_settings'][number]["commands"] = "" unless CharSettings['color_settings'][number]["commands"]
	number += 1
}

@combat_saved_settings = CharSettings['color_settings'].dup

def create_main_window
	stop_script = true

	def find_a_target(priority)
		if @combat_current_target.status !~ /#{priority}/
			new_target = GameObj.npcs.find{ |npc| npc.status =~ /#{priority}/ }
			if new_target
				put "target ##{new_target.id}"
			else
				new_target = GameObj.npcs.find{ |npc| npc.status } if @combat_current_target.status.nil?
			end
			put "target ##{new_target.id}" if new_target
		end
	end

	@combat_main_window = Gtk::Window.new(:toplevel)
		.set_title("Combat Window")
		.set_border_width(10)
		.set_default_size(300, 300)
		.set_type_hint(Gdk::WindowTypeHint::UTILITY)
		.set_keep_above(true)
		.set_position(Gtk::WindowPosition::CENTER)

	grid = Gtk::Grid.new
	grid.set_row_spacing(0)
	grid.set_column_spacing(10)
	
	@combat_grid2_main_window = Gtk::Grid.new
	@combat_grid2_main_window.set_row_spacing(0)
	@combat_grid2_main_window.set_column_spacing(10)
	
	grid3 = Gtk::Grid.new
	grid3.set_row_spacing(10)
	grid3.set_column_spacing(30)
	
	@combat_sequence_grid = Gtk::Grid.new
	@combat_sequence_grid.set_row_spacing(10)
	@combat_sequence_grid.set_column_spacing(30)
	
	main_grid = Gtk::Grid.new
	main_grid.set_row_spacing(10)
	main_grid.set_column_spacing(10)
	
	main_grid.attach(grid, 0, 0, 2, 1)
	main_grid.attach(@combat_sequence_grid, 0, 1, 2, 1)
	main_grid.attach(@combat_grid2_main_window, 0, 2, 2, 1)
	main_grid.attach(grid3, 0, 3, 2, 1)
	
	@combat_button_input_sequence = Gtk::Label.new("Command queue: ")
	
	target_status_priority = nil
	
	column_number = -1
	
	checkbox1 = Gtk::RadioButton.new("No Auto")
	checkbox1.set_tooltip_text("This turns off automatic targeting.")
	checkbox1.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = nil
		end
	end
	grid.attach(checkbox1, column_number += 1, 0, 1, 1)
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["auto_target_button_color"])
	checkbox1.override_color(Gtk::StateFlags::NORMAL, rgba_color)
	
	checkbox2 = Gtk::RadioButton.new(checkbox1, "Stunned")
	checkbox2.set_tooltip_text("This will automatically target critters that are currently stunned. If no critters are stunned then it will target a critter with any status.")
	checkbox2.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "stun"
		end
	end
	grid.attach(checkbox2, column_number += 1, 0, 1, 1)
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["auto_target_button_color"])
	checkbox2.override_color(Gtk::StateFlags::NORMAL, rgba_color)

	checkbox3 = Gtk::RadioButton.new(checkbox1, "Prone+")
	checkbox3.set_tooltip_text("This will automatically target critters that are currently prone, sleeping, kneeling, sitting, webbed, or frozen. If no critters have these statuses then it will target a critter with any status.")
	checkbox3.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "lay|prone|sleep|kneel|sit|web|frozen"
		end
	end
	grid.attach(checkbox3, column_number += 1, 0, 1, 1)
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["auto_target_button_color"])
	checkbox3.override_color(Gtk::StateFlags::NORMAL, rgba_color)
	
	checkbox4 = Gtk::RadioButton.new(checkbox1, "Preparing spell")
	checkbox4.set_tooltip_text("This will automatically target critters that are preparing a spell. If no critters are preparing a spell then it will target a critter with any status.")
	checkbox4.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "Preparing spell"
		end
	end
	grid.attach(checkbox4, column_number += 1, 0, 1, 1)
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["auto_target_button_color"])
	checkbox4.override_color(Gtk::StateFlags::NORMAL, rgba_color)

	checkbox5 = Gtk::RadioButton.new(checkbox1, "No status")
	checkbox5.set_tooltip_text("This will automatically target critters that have no status condition.")
	checkbox5.signal_connect("toggled") do |widget|
		if widget.active?
			target_status_priority = "none"
		end
	end
	grid.attach(checkbox5, column_number += 1, 0, 1, 1)
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["auto_target_button_color"])
	checkbox5.override_color(Gtk::StateFlags::NORMAL, rgba_color)
	
	button = Gtk::Button.new(:label => "C")
	button.set_tooltip_text("Color setup menu.")
	button.signal_connect("clicked") do
		stop_script = nil
		@combat_main_window.close if @combat_main_window && !@combat_main_window.destroyed? && @combat_main_window.visible?
		combat_create_color_set_up_window
	end
	grid.attach(button, column_number += 1, 0, 1, 1)
	
	button = Gtk::Button.new(:label => "B")
	button.set_tooltip_text("Button setup menu.")
	button.signal_connect("clicked") do
		stop_script = nil
		@combat_main_window.close if @combat_main_window && !@combat_main_window.destroyed? && @combat_main_window.visible?
		combat_create_button_set_up_window
	end
	grid.attach(button, column_number += 1, 0, 1, 1)

	update_data = proc{	
		if @combat_command_sequence
			if @combat_command_sequence.is_a?(String)
				@combat_button_input_sequence.label = "Command queue: #{@combat_command_sequence}"
			elsif @combat_command_sequence.is_a?(Array)
				if @combat_command_sequence.count > 0
					@combat_button_input_sequence.label = "Command queue: #{@combat_command_sequence.join(", ")}"
				else
					@combat_button_input_sequence.label = "Command queue: None"
				end
			end
		end
		if GameObj.npcs.any?
			grid3.each{ |child| grid3.remove(child) }
			column = 0
			row = 0
			critter_count = 0
			GameObj.npcs.each do |npc|
				if npc.type =~ /aggressive/
					critter_count += 1
					if critter_count < 10
						label_critter_name = Gtk::Label.new(npc.name)
							rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_name_color"])
							label_critter_name.override_color(Gtk::StateFlags::NORMAL, rgba_color)
						if npc.status.nil?
							label_critter_status = Gtk::Label.new("Status: None")
							rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_status_none"])
						else
							label_critter_status = Gtk::Label.new("Status: #{npc.status}")
							if npc.status =~ /stun/
								rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_status_stunned"])
							elsif npc.status =~ /dead/
								rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_status_dead"])
							else
								rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_status_all_others"])
							end
						end
						label_critter_status.override_color(Gtk::StateFlags::NORMAL, rgba_color)
						search_key = npc.id
						value = @critter_actions[search_key]
						if npc.status =~ /dead/
							label_critter_action = Gtk::Label.new("Action: DEAD")
							rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_action_dead"])
						else
							if value == "Preparing spell"
								label_critter_action = Gtk::Label.new("Action: #{value}")
								rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_action_preparing_spell"])
							elsif @critter_actions[npc.id].is_a?(Time)
								if Time.now - @critter_actions[npc.id] >= @combat_critter_round_time
									label_critter_action = Gtk::Label.new("Action: Unknown")
									rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_action_unknown"])
								else
									label_critter_action = Gtk::Label.new("Action: RT: #{@combat_critter_round_time - (Time.now - @critter_actions[npc.id]).round}")
									rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_action_rt"])
								end
							else
							  label_critter_action = Gtk::Label.new("Action: Unknown")
							  rgba_color = Gdk::RGBA.new(*@combat_saved_settings["critter_action_unknown"])
							end
						end
						label_critter_action.override_color(Gtk::StateFlags::NORMAL, rgba_color)
						if npc.status =~ /dead/
							button = Gtk::Label.new("DEAD")
							rgba_color = Gdk::RGBA.new(*@combat_saved_settings["all_other_text"])
							button.override_color(Gtk::StateFlags::NORMAL, rgba_color)
						elsif XMLData.current_target_id == npc.id
							button = Gtk::Label.new("TARGETED")
							rgba_color = Gdk::RGBA.new(*@combat_saved_settings["all_other_text"])
							button.override_color(Gtk::StateFlags::NORMAL, rgba_color)
						else
							button = Gtk::Button.new(:label => "Target")
							button.signal_connect("clicked") do
								(put "target ##{npc.id}")
								
							end
						end
						grid3.attach(label_critter_name, column, row*3, 5, 1)
						grid3.attach(label_critter_status, column, row*3+1, 5, 1)
						grid3.attach(label_critter_action, column, row*3+2, 5, 1)
						grid3.attach(button, column, row*3+3, 5, 1)
						column += 5
						if critter_count % 3 == 0
							column = 0
							row += 2
						end
					end
				end
			end
			if critter_count > 0
				row += 1
				total_critters_label = Gtk::Label.new("Total critters: #{critter_count}")
				grid3.attach(total_critters_label, 0, row*3+2, 5, 1)
				rgba_color = Gdk::RGBA.new(*@combat_saved_settings["all_other_text"])
				total_critters_label.override_color(Gtk::StateFlags::NORMAL, rgba_color)
			end
			@combat_current_target = GameObj.npcs.find{ |npc| XMLData.current_target_id && XMLData.current_target_id == npc.id }
			if target_status_priority =~ /stun/
				find_a_target(target_status_priority)
			elsif target_status_priority =~ /(lay|prone|sleep|kneel|sit|web|frozen)/
				find_a_target(target_status_priority)
			elsif target_status_priority == "Preparing spell"
				search_key = XMLData.current_target_id
				value = @critter_actions[search_key]
				if value != "Preparing spell"
					new_target = @critter_actions.select { |key, value| value == "Preparing spell" }
					put "target ##{new_target.keys.first}" if new_target.count > 0
				end
			elsif target_status_priority == "none"
				if @combat_current_target.status
					new_target = GameObj.npcs.find{ |npc| npc.status.nil? && XMLData.current_target_id != npc.id }
					put "target ##{new_target.id}" if new_target
				end
			end
		else
			grid3.each{ |child| grid3.remove(child) }
		end
		
		if @someone_hiding_in_this_room
			row += 1
			obvious_hiding_label = Gtk::Label.new("Someone is obviously hiding in this room.")
			grid3.attach(obvious_hiding_label, 0, row*3+2, 5, 1)
			rgba_color = Gdk::RGBA.new(*@combat_saved_settings["all_other_text"])
			obvious_hiding_label.override_color(Gtk::StateFlags::NORMAL, rgba_color)
		end
		
		every_possible_person_hidden = Array.new
		GameObj.loot.each{ |item| 
			disk_owners_name = item.name.scan(/\b[A-Z][a-z]*\b/).first
			every_possible_person_hidden.push(disk_owners_name) if item.name =~ /disk|coffin/ && disk_owners_name != checkname && !checkpcs.include?(disk_owners_name)
		}
		if every_possible_person_hidden.any?
			row += 1
			possible_hiding_people_label = Gtk::Label.new("People possibly hiding: #{every_possible_person_hidden.join(", ")}")
			grid3.attach(possible_hiding_people_label, 0, row*3+2, 5, 1)
			rgba_color = Gdk::RGBA.new(*@combat_saved_settings["all_other_text"])
			possible_hiding_people_label.override_color(Gtk::StateFlags::NORMAL, rgba_color)
		end
		@combat_main_window.show_all
	}
	update_data.call

	timeout_source = GLib::Timeout.add(300) { update_data.call }
	
	stop_loop = lambda do
		GLib::Source.remove(timeout_source)
		Gtk.main_quit
	end
	
	@combat_main_window.signal_connect('destroy') { stop_loop.call }
	
	@combat_main_window.signal_connect('destroy') do
		if stop_script
			kill_script "combat-window" if running? "combat-window"
		end
	end
	
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["window_color"])
	@combat_main_window.override_background_color(Gtk::StateFlags::NORMAL, rgba_color)
	
	if @combat_saved_settings["numbers_of_buttons"].to_i > 0
		button = Gtk::Button.new(:label => "Cancel queue")
		button.set_tooltip_text("Click to cancel your queued up commands.")
		button.signal_connect("clicked") do
			@combat_commands_issued = nil
			update_data.call
		end
		@combat_sequence_grid.attach(button, column_number += 1, 0, 1, 1)
	
		number_of_buttons = @combat_saved_settings["numbers_of_buttons"]
		combat_create_buttons_for_main_window(number_of_buttons)
	end
	
	@combat_main_window.add(main_grid)
	@combat_main_window.show_all
end

def combat_create_customize_button_window(original_number_of_button)
	@do_not_create_another_window = true

	@combat_button_customize_window = Gtk::Window.new(:toplevel)
	@combat_button_customize_window.set_title("Customize button #{@combat_saved_settings[original_number_of_button]["label_name"]}")
	@combat_button_customize_window.set_border_width(10)
	@combat_button_customize_window.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	@combat_button_customize_window.set_keep_above(true)
	@combat_button_customize_window.set_position(Gtk::WindowPosition::CENTER)
	width = Gdk::Screen.default.width
	height = Gdk::Screen.default.height
	@combat_button_customize_window.move((width / 2) - 375, (height / 2) - 375)
		
	grid = Gtk::Grid.new
	grid.set_row_spacing(10)
	grid.set_column_spacing(10)
	
	label = Gtk::Label.new("Customizing #{@combat_saved_settings[original_number_of_button]["label_name"]} button")
	grid.attach(label, 0, 0, 1, 1)
	
	instruction_label_1 = Gtk::Label.new("Enter name for button:")
	grid.attach(instruction_label_1, 0, 1, 1, 1)
	
	entry = Gtk::Entry.new
	grid.attach(entry, 0, 2, 1, 1)
	
	entry.text = @combat_saved_settings[original_number_of_button]["label_name"]
	
	save_button = Gtk::Button.new(:label => "Save")
	grid.attach(save_button, 1, 2, 1, 1)
	
	save_button.signal_connect("clicked") do
		@combat_saved_settings[original_number_of_button]["label_name"] = entry.text
		number_of_buttons = @combat_saved_settings["numbers_of_buttons"]
		combat_create_buttons_for_setup_window(number_of_buttons)
	end
	
	instruction_label_2 = Gtk::Label.new("Enter action for button:")
	grid.attach(instruction_label_2, 0, 3, 1, 1)
	
	entry2 = Gtk::Entry.new
	grid.attach(entry2, 0, 4, 1, 1)
	
	entry2.text = @combat_saved_settings[original_number_of_button]["commands"]
	
	save_button2 = Gtk::Button.new(:label => "Save")
	grid.attach(save_button2, 1, 4, 1, 1)
	
	save_button2.signal_connect("clicked") do
		@combat_saved_settings[original_number_of_button]["commands"] = entry2.text
	end
	
	instruction_label_3 = Gtk::Label.new("Separate each command with a ;\nIf you want button to wait for RT or castRT then enter waitrt? or waitcastrt?\nUse \"target\" to specify your current target.\nExamples:\nSince you can LOOK while in RT you can just enter \"look\" and script will execute command even while in RT.\nThe following would wait until you're out of RT first then proceed with commands: waitrt?;stand;get my broadsword;attack\nThe following would wait until you're out of RT and castRT before proceeding: waitrt?;waitcastrt?;inc 911\nTo attack your current target: waitrt?;ambush target left leg")
	grid.attach(instruction_label_3, 0, 5, 1, 1)

	done_button = Gtk::Button.new(:label => "Done")
	grid.attach(done_button, 0, 6, 1, 1)
	
	done_button.signal_connect("clicked") do
		@combat_button_customize_window.close if @combat_button_customize_window && !@combat_button_customize_window.destroyed? && @combat_button_customize_window.visible?
	end
	
	@combat_button_customize_window.signal_connect('destroy') do
		@do_not_create_another_window = nil
	end
	
	@combat_button_customize_window.add(grid)
	@combat_button_customize_window.show_all
end

def combat_create_button_set_up_window
	@do_not_create_another_window = nil

	@combat_button_setup_window = Gtk::Window.new(:toplevel)
	@combat_button_setup_window.set_title("Buttons setup")
	@combat_button_setup_window.set_border_width(10)
	@combat_button_setup_window.set_type_hint(Gdk::WindowTypeHint::UTILITY)
	@combat_button_setup_window.set_keep_above(true)
	@combat_button_setup_window.set_position(Gtk::WindowPosition::CENTER)
		
	grid_do_not_delete_buttons = Gtk::Grid.new
	grid_do_not_delete_buttons.set_row_spacing(10)
	grid_do_not_delete_buttons.set_column_spacing(10)
	
	@grid_button_setup_win_delete_buttons = Gtk::Grid.new
	@grid_button_setup_win_delete_buttons.set_row_spacing(10)
	@grid_button_setup_win_delete_buttons.set_column_spacing(10)
	
	main_grid = Gtk::Grid.new
	main_grid.set_row_spacing(10)
	main_grid.set_column_spacing(10)
	
	main_grid.attach(grid_do_not_delete_buttons, 0, 0, 2, 1)
	main_grid.attach(@grid_button_setup_win_delete_buttons, 0, 1, 2, 1)

	label = Gtk::Label.new("Enter the number of buttons you want\nfrom 0-30, then click Save.\nClick each button to customize it.")
	grid_do_not_delete_buttons.attach(label, 0, 0, 1, 1)
	
	entry = Gtk::Entry.new
	grid_do_not_delete_buttons.attach(entry, 1, 0, 1, 1)
	
	entry.text = @combat_saved_settings["numbers_of_buttons"].to_s
	
	save_button = Gtk::Button.new(:label => "Save")
	grid_do_not_delete_buttons.attach(save_button, 0, 1, 2, 1)
	
	save_button.signal_connect("clicked") do
		number_of_buttons = entry.text
		if number_of_buttons.empty? || !number_of_buttons.match(/\A\d+\z/) || number_of_buttons.to_i < 0 || number_of_buttons.to_i > 30
			number_of_buttons = @combat_saved_settings["numbers_of_buttons"]
			entry.text = @combat_saved_settings["numbers_of_buttons"].to_s
		end

		if number_of_buttons && number_of_buttons.to_i <= 30
			@combat_saved_settings["numbers_of_buttons"] = number_of_buttons
			combat_create_buttons_for_setup_window(number_of_buttons)
			@combat_button_setup_window.show_all
		end
	end
		
	@combat_button_setup_window.signal_connect('destroy') do
		kill_script "combat-window" if running? "combat-window"
	end

	@combat_button_setup_window.add(main_grid)

	if @combat_saved_settings["numbers_of_buttons"].to_i > 0
		number_of_buttons = @combat_saved_settings["numbers_of_buttons"]
		combat_create_buttons_for_setup_window(number_of_buttons)
	end
	
	@combat_button_setup_window.show_all
end

def combat_create_buttons_for_main_window(number_of_buttons)
	@combat_button_input_sequence = Gtk::Label.new("Command queue: #{@combat_command_sequence}")
	@combat_sequence_grid.attach(@combat_button_input_sequence, 0, 0, 1, 1)
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["all_other_text"])
	@combat_button_input_sequence.override_color(Gtk::StateFlags::NORMAL, rgba_color)

	num_buttons = number_of_buttons.to_i
	num_rows = (num_buttons / 5.0).ceil
	num_cols = [num_buttons, 5].min
	@combat_buttons_created = 1
	
	(0...num_rows).each do |row|
		(0...num_cols).each do |col|
			if num_buttons >= @combat_buttons_created
				button = Gtk::Button.new(:label => "#{@combat_saved_settings[@combat_buttons_created]["label_name"]}")
				@combat_grid2_main_window.attach(button, col, row + 1, 1, 1)
				original_number_of_button = @combat_buttons_created.dup
				
				button.signal_connect("clicked") do
					sequence_check = @combat_saved_settings[original_number_of_button]["commands"].split(";")
					if sequence_check.any?{ |command| command == "waitrt?" || command == "waitcastrt?" }
						@combat_commands_issued = @combat_saved_settings[original_number_of_button]["commands"]
					else
						until sequence_check.count == 0
							command = sequence_check.shift
							command = command.gsub(/target/i, "##{XMLData.current_target_id}")
							put "#{command}"
						end
					end
				end
				@combat_buttons_created += 1
			end
		end
	end
end

def combat_create_buttons_for_setup_window(number_of_buttons)
	@grid_button_setup_win_delete_buttons.each{ |child| @grid_button_setup_win_delete_buttons.remove(child) }
	num_buttons = number_of_buttons.to_i
	num_rows = (num_buttons / 5.0).ceil
	num_cols = [num_buttons, 5].min
	@combat_buttons_created = 1
	
	(0...num_rows).each do |row|
		(0...num_cols).each do |col|
			if num_buttons >= @combat_buttons_created
				button = Gtk::Button.new(:label => "#{@combat_saved_settings[@combat_buttons_created]["label_name"]}")
				@grid_button_setup_win_delete_buttons.attach(button, col, row + 1, 1, 1)
				original_number_of_button = @combat_buttons_created.dup
				
				button.signal_connect("clicked") do
					combat_create_customize_button_window(original_number_of_button) if @do_not_create_another_window.nil?
				end

				@combat_buttons_created += 1
			end
		end
	end
	@combat_button_setup_window.show_all
end

def combat_create_color_set_up_window	
	all_settings_to_go_through = {}
	all_settings_to_go_through = {
		"window_color" => "Choose window color",
		"auto_target_button_color" => "Choose auto target button colors",
		"critter_name_color" => "Choose critter name color",
		"critter_status_stunned" => "Choose critter status stunned color",
		"critter_status_dead" => "Choose critter status dead color",
		"critter_status_none" => "Choose critter status none color",
		"critter_status_all_others" => "Choose critter status all other status color",
		"critter_action_dead" => "Choose critter action dead color",
		"critter_action_preparing_spell" => "Choose critter action preparing spell color",
		"critter_action_unknown" => "Choose critter action unknown color",
		"critter_action_rt" => "Choose critter action rt color",
		"all_other_text" => "Choose all other text color",
	}

	@combat_setup_window = Gtk::Window.new(:toplevel)
		.set_title("Text and window setup")
		.set_border_width(10)
		.set_type_hint(Gdk::WindowTypeHint::UTILITY)
		.set_keep_above(true)
		.set_position(Gtk::WindowPosition::CENTER)
		
	@combat_title_and_color_grid = Gtk::Grid.new
	@combat_title_and_color_grid.set_row_spacing(10)
	@combat_title_and_color_grid.set_column_spacing(10)
	
	save_button = Gtk::Button.new(:label => "Next")
	save_button.signal_connect("clicked") do
		first_pair = all_settings_to_go_through.shift
		if first_pair
			create_color_buttons(first_pair[0], first_pair[1])
		else
			@combat_setup_window.close if @combat_setup_window && !@combat_setup_window.destroyed? && @combat_setup_window.visible?
		end
	end
	@combat_title_and_color_grid.attach(save_button, 0, 0, 1, 1)
	
	first_pair = all_settings_to_go_through.shift
	create_color_buttons(first_pair[0], first_pair[1])
	
	@combat_setup_window.signal_connect('destroy') do
		kill_script "combat-window" if running? "combat-window"
	end

	@combat_setup_window.add(@combat_title_and_color_grid)
	@combat_setup_window.show_all
end

def create_color_buttons(hash_name, label_name)
	@combat_title_and_color_grid.each{ |child| @combat_title_and_color_grid.remove(child) if child.label != "Next" }
	title_label = Gtk::Label.new(label_name)
	label_texts = {
		"window_color" => nil,
		"auto_target_button_color" => "No Auto",
		"critter_name_color" => "frost giant",
		"critter_status_stunned" => "stunned",
		"critter_status_dead" => "dead",
		"critter_status_none" => "None",
		"critter_status_all_others" => "prone",
		"critter_action_dead" => "DEAD",
		"critter_action_preparing_spell" => "Preparing spell",
		"critter_action_unknown" => "Unknown",
		"critter_action_rt" => "RT: 5",
		"all_other_text" => "Total critters: 1",
	}

	example_text_label = if label_texts.has_key?(hash_name)
		label_text = label_texts[hash_name]
		label_text.nil? ? nil : Gtk::Label.new(label_text)
	else
		nil
	end

	@combat_title_and_color_grid.attach(title_label, 0, 0, 25, 1)
	@combat_title_and_color_grid.attach(example_text_label, 0, 1, 25, 1) if example_text_label
	
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings[hash_name])
	example_text_label.override_color(Gtk::StateFlags::NORMAL, rgba_color)
	
	rgba_color = Gdk::RGBA.new(*@combat_saved_settings["window_color"])
	@combat_setup_window.override_background_color(Gtk::StateFlags::NORMAL, rgba_color)
	
	color_values = [@combat_color_magenta, @combat_color_gold, @combat_color_white, @combat_color_black, @combat_color_blue, @combat_color_brown, @combat_color_gray, @combat_color_purple, @combat_color_red, @combat_color_green]
	color_labels = ["Magenta", "Gold", "White", "Black", "Blue", "Brown", "Gray", "Purple", "Red", "Green"]
		
	color_values.zip(color_labels).each_with_index do |(color, label), index|
		button = Gtk::Button.new(:label => label)
		button.set_size_request(100, 25)
		button.signal_connect("clicked") {
			@combat_saved_settings[hash_name] = color
			if hash_name == "window_color"
				rgba_color = Gdk::RGBA.new(*@combat_saved_settings["window_color"])
				@combat_setup_window.override_background_color(Gtk::StateFlags::NORMAL, rgba_color)
			else
				rgba_color = Gdk::RGBA.new(*@combat_saved_settings[hash_name])
				example_text_label.override_color(Gtk::StateFlags::NORMAL, rgba_color)
			end
		}
		@combat_title_and_color_grid.attach(button, (index % 5) * 5, 8 + (index / 5), 5, 1)
	end
	@combat_setup_window.show_all
end

Gtk.queue {
	create_main_window
	Gtk.main
}

before_dying{ 
	CharSettings['color_settings'] = @combat_saved_settings.dup
	DownstreamHook.remove("#{script.name}_combat_watching")
}

Thread.new{
	loop{
		wait_until{ @combat_commands_issued }
		@combat_command_sequence = @combat_commands_issued.split(";")
		until @combat_command_sequence.count == 0
			break if @combat_commands_issued.nil?
			command = @combat_command_sequence.shift
			if command == "waitrt?"
				until checkrt == 0
					break if @combat_commands_issued.nil?
					sleep 0.1
				end
			elsif command == "waitcastrt?"
				until checkcastrt == 0
					break if @combat_commands_issued.nil?
					sleep 0.1
				end
			else
				break if @combat_commands_issued.nil?
				command = command.gsub(/target/i, "##{XMLData.current_target_id}")
				fput "#{command}"
			end
		end
		@combat_commands_issued = nil
		@combat_command_sequence = Array.new
	}
}

hiding_room = nil
obvious_hiding = nil

Thread.new{
	loop{
		if hiding_room == Room.current.id && obvious_hiding
			@someone_hiding_in_this_room = true
		else
			@someone_hiding_in_this_room = nil
		end
		sleep 0.2
	}
}

combat_watching = proc{
	action = proc { |line|
		if strip_xml(line) =~ /You also see|You notice/
			if strip_xml(line) =~ /obvious signs of someone hiding/
				echo line
				obvious_hiding = true
				hiding_room = Room.current.id
			else
				obvious_hiding = nil
				@someone_hiding_in_this_room = nil
			end
		elsif strip_xml(line) =~ /Obvious (paths|exits):/ && hiding_room != Room.current.id
			obvious_hiding = nil
			@someone_hiding_in_this_room = nil
		elsif line =~ /\<pushBold\/\>(?:An?|The) \<a exist\=\"(\d+)\" noun\=\"/
			critter_id = $1
			if strip_xml(line) =~ /#{all_critter_spell_prep_messages}/
				@critter_actions[critter_id] = "Preparing spell"
			#elsif strip_xml(line) =~ /#{all_critter_spell_cast_messages}/
				#@critter_actions[critter_id] = "Unknown"
			else
				@critter_actions[critter_id] = Time.now
			end
		end
		line
	}
		DownstreamHook.add("#{script.name}_combat_watching", action)
}

combat_watching.call

sleep