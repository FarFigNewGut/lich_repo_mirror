#QUIET
=begin
	ShoppIn
	Created By: Vailan
	Date:       08.17.2023
	
	          author: Vailan (Vailan#0875 on discord)
            game: GS
            tags: playershop,playershops,shopping,shop
        		required: Lich >= 4.6.4 and StormFront
         		version: 2023.08.17.1
	
		This script will pull the list of shops for a given city and either list them alphabetically by name or
	if all or part of a shop name is provided it iwll look for possible matches and list them alphabetically or
	of there is only a single match it will also shop browse that shop for you.
	
	<How to setup and get help>
	Command: ;shoppin help 
		Will Display the help text and city abbreviations
		
		
	<Common Commands>	
	Command: ;shoppin [CITY] 
		Will return an alphabetical list of shop names in the specified city with their numbers. ("All" is not valid here)
		
	Command: ;shoppin [CITY] [Shop Name]
		For a single match will do a shop browse for that shop otherwise will return a list of shopnames matching the search
		CITY of "all" can be used here to look for a shop by name in all cities if you dont know where it is but takes longer.
		
	
	
	
	********change log***********
	2023.08.16.1 - Initial publication
	2023.08.16.2 - Updating Notes
	2023.08.16.3 - Silenced the retrieval of the list of shops
	2023.08.17.1 - Added feature to search through all cities for a shopname if you are not sure where it is.
	
	
	***********todo**************
	
	
	*********known issues********
	
	

=end

VERSION = "2023.08.17.1"

if $frontend != "stormfront"
  respond ""
  respond " Thank you for your interest in ShoppIn"
  respond " This version is specific to the Stormfront frontend"
 	respond ""
  respond ""
  respond " Closing now"
  respond ""
  exit
end

#Add Application Code Here

def commandHelp
	commandhelpText = ""
	commandhelpText += "This application accepts the below command syntaxes\r\n"
	commandhelpText += "Command:  ;shoppin [CITY] - Will return an alphabetical list of shop names in the specified city with their numbers\r\n"
	commandhelpText += "Command:  ;shoppin [CITY] [Shop Name] - For a single match will do a shop browse for that shop otherwise will return a list of shopnames matching the search\r\n"
	commandhelpText += "Command:  ;shoppin help - Which will display this set of instructions\r\n"
	commandhelpText += "\r\n"
	commandhelpText += "Parameter Explainations\r\n"
	commandhelpText += "CITY can be one of the below options and is only allowable as the first or only option\r\n"
	commandhelpText += "all - Will search through all cities for a shop name\r\n"
	commandhelpText += "weh - For Wehnimer's Landing\r\n"
	commandhelpText += "ter - For Solhave\r\n"
	commandhelpText += "riv - For River's Rest\r\n"
	commandhelpText += "ice - For Icemule Trace\r\n"
	commandhelpText += "zul - For Zul Logoth\r\n"
	commandhelpText += "tai - For Ta'Illistim\r\n"
	commandhelpText += "tav - For Ta'Vaalor\r\n"
	commandhelpText += "mis - For Mist Harbor\r\n"
	commandhelpText += "\r\n"
	
	

	if !$fake_stormfront
			puts "<output class=\"mono\"/>#{monsterbold_start}#{"Shoppin Help"}#{monsterbold_end}\r\n<output class=\"\"/>"
			puts "<output class=\"mono\"/>#{monsterbold_start}#{commandhelpText}#{monsterbold_end}\r\n<output class=\"\"/>"
		else
			puts "#{monsterbold_start}#{"Shoppin Help"}#{monsterbold_end}"
			puts "#{monsterbold_start}#{commandhelpText}#{monsterbold_end}"
		end

end

def quiet_command(command, start_pattern, end_pattern = /<prompt/, include_end = true, timeout=5)
  result = []
  name = self.anon_hook
  filter = false

  begin
      Timeout::timeout(timeout, Interrupt) {
          DownstreamHook.add(name, proc {|xml|
              if filter
                  if xml =~ end_pattern
                      DownstreamHook.remove(name)
                      filter = false
                      # result << xml.rstrip if include_end
                      # thread.raise(Interrupt)
                      # next(include_end ? nil : xml)
                  else
                      # result << xml.rstrip
                      next(nil)
                  end
              elsif xml =~ start_pattern
                  filter = true
                  # result << xml.rstrip
                  next(nil)
              else
                  xml
              end
          })
          fput command

          until (xml = get) =~ start_pattern; end
          result << xml.rstrip
          until (xml = get) =~ end_pattern
              result << xml.rstrip
          end
          if include_end
              result << xml.rstrip
          end
      }
  rescue Interrupt
      nil
  end
  return result
end




class ShopDirectory

	def initialize(shopCityAndID)
  	@shopCityAndID = shopCityAndID
  end
	
	def shopCityAndID
		@shopCityAndID
	end

	def shopCity
		@shopCity
	end
	
	def shopCity=(shopCity)
		@shopCity = shopCity
	end

	def shopID
		@shopID
	end
	
	def shopID=(shopID)
		@shopID = shopID
	end
	
	def shopName
		@shopName
	end
	
	def shopName=(shopName)
		@shopName = shopName
	end

end



def CityNameByID(cityID)
	if cityID == 0
		return "Wehnimer's Landing"

	elsif cityID == 1
		return "Kharam Dzu"

	elsif cityID == 2
		return "Vornavis"

	elsif cityID == 3
		return "the County of Torre"
	
	elsif cityID == 4
		return "Icemule Trace"
	
	elsif cityID == 5
		return "Kharag 'doth Dzulthu"
	
	elsif cityID == 6
		return "Ta'Illistim"
	
	elsif cityID == 7
		return "Ta'Vaalor"

	elsif cityID == 8
		return "Mist Harbor"

	else
		return "Unknown City"
	end


end

def CityIDbyName(cityname)
	if cityname =~ /weh|wehnimer|wehn|landing|land|lan|wl/
		return 0

	elsif cityname =~ /ter|kharam|teras/
		return 1

	elsif cityname =~ /sol|solhaven|solh|vorn|vor|vornavis/
		return 2

	elsif cityname =~ /riv|river|rr|rivers|rest|torre/
		return 3
	
	elsif cityname =~ /ice|im|imt|icemule|trace/
		return 4
	
	elsif cityname =~ /zul|kharag/
		return 5
	
	elsif cityname =~ /tai|illi|ill|illistim|taillistim|tailli/
		return 6
	
	elsif cityname =~ /tav|vaalor|vaa|vaal|tavallor|tavaa|tavaal/
		return 7

	elsif cityname =~ /mis|mist|mistharbor|mist|teras|ti/
		return 8

	else
		return 99
	end
end

def CityAbbrByID(cityID)
	if cityID == 0
		return "weh"

	elsif cityID == 1
		return "ter"

	elsif cityID == 2
		return "sol"

	elsif cityID == 3
		return "riv"
	
	elsif cityID == 4
		return "ice"
	
	elsif cityID == 5
		return "zul"
	
	elsif cityID == 6
		return "illi"
	
	elsif cityID == 7
		return "vaa"

	elsif cityID == 8
		return "mist"

	else
		return "None"
	end
end

def getCityShops(cityID)
	if cityID != 99
		echo "Name Matched #{CityNameByID(cityID)}"
		#dothistimeout "shop directory #{CityAbbrByID(cityID)}", 5, /command to browse the inventory of a particular shop/
		result = quiet_command(
	          "shop directory #{CityAbbrByID(cityID)}",
	          /\~\*\~/,
	          /command to browse the inventory of a particular shop/,
	          # /(?:<prompt)|(?:items displayed.\)\b)/,
	          false,
	          5
	      )
		cityShops = Array.new
		result = reget 150
		resultReversed = result.reverse
		#echo resultReversed
		firstLineFound = false
		lastLineFound  = false
		actualFirstLineFound = false
		resultReversed.to_a.each {|line|
			
			if line =~ /command to browse the inventory of a particular shop/
				firstLineFound = true
			end
			if line =~ /\~\*\~/ and line =~  /\~\*\~/
				lastLineFound = true
			end
			if firstLineFound and not lastLineFound
				if not actualFirstLineFound
					actualFirstLineFound = true
				else
					#We are a legit line presumable
					#echo line
					line.split("  ").each {|word|
						if word =~ /\)/
							shopitem = word.split(")")
							#echo "Shop ID:#{shopitem[0]} - Shop name: #{shopitem[1]}"
							shopToAdd = ShopDirectory.new("#{CityAbbrByID(cityID).strip}#{shopitem[0].strip}")
							shopToAdd.shopCity = cityID
							shopToAdd.shopID = shopitem[0].strip
							shopToAdd.shopName = shopitem[1].strip
							cityShops.push(shopToAdd)
						end
						}
				end
			end
		}
		"command to browse the inventory of a particular shop."
		#echo result
		#Start with Finding the First Line
		
		
		#Find until last line
		return cityShops
		
	else 
		echo "City Name provied is not valid"
	
	end
end


#Common Code
ParsedParams = Hash.new()
#Variable Parsing
def parseCommandVariables(variable)
	fullLine = variable[0]
	ignoreFullLine = true
	variable.each {|varValue|
		if ignoreFullLine
			ignoreFullLine = false
		else
			if varValue != nil
				#Add Commands to look for and values to see based on them
				echo "Param = #{varValue}"
				
			else 
			
			end
		end
	}
	
	if variable[1].downcase =~ /help/
		commandHelp
	elsif variable[1].downcase =~ /all/
		if variable[2] != nil
			matchedShops = Array.new
			shopIndex = 0
			shopFound = 0
			while shopIndex < 8
				cityShops = getCityShops(shopIndex).sort_by{|shop|shop.shopName}
				cityShops.each{|shop|
					if shop.shopName.downcase =~ /#{variable[2].downcase}/
						#echo shop.shopName
						#echo shop.shopID
						matchedShops.push(shop)
						shopFound += 1
					end
				}
				
					
				shopIndex += 1
			end
			
			if shopFound == 0
				echo "No shop matching that name was found"
			else
				if shopFound == 1
					echo "Single Shop found matching that name"
					matchedShops.each{|shop|
						#get shop inventory for each match
						dothistimeout "shop browse #{CityAbbrByID(shop.shopCity)} #{shop.shopID}",5,/You may also click the stock numbers above to SHOP INSPECT that particular item/	
					}
				else 
					echo "Multiple Shops (#{shopFound}) found"
				end
				
				matchedShops.each{|shop|
					echo "Shop City: #{CityNameByID(shop.shopCity)} -- Shop ID: #{shop.shopID} -- Shop Name: #{shop.shopName}"
				}
				
			end
		
		
		else 
			echo "Searching through all cities requires actually searching for something."
			echo "You did not specify a search parameter."
			
		end
	elsif CityIDbyName(variable[1].downcase) == 99
		echo "You entered an invalid city name"
		commandHelp
	else
		cityShops = getCityShops(CityIDbyName(variable[1].downcase)).sort_by{|shop|shop.shopName}
		
		if variable[2] != nil
			shopFound = 0
			matchedShops = Array.new
			cityShops.each{|shop|
				if shop.shopName.downcase =~ /#{variable[2].downcase}/
					#echo shop.shopName
					#echo shop.shopID
					matchedShops.push(shop)
					
					shopFound += 1
				end
			}
			if shopFound == 0
				echo "No shop matching that name was found"
			else
				if shopFound == 1
					echo "Single Shop found matching that name"
					matchedShops.each{|shop|
						#get shop inventory for each match
						dothistimeout "shop browse #{CityAbbrByID(shop.shopCity)} #{shop.shopID}",5,/You may also click the stock numbers above to SHOP INSPECT that particular item/	
					}
				else 
					echo "Multiple Shops (#{shopFound}) found"
				end
				
				matchedShops.each{|shop|
					echo "Shop ID: #{shop.shopID} -- Shop Name: #{shop.shopName}"
				}
				
			end
			
		else 
			cityShops.each{|shop|
				echo "Shop ID: #{shop.shopID} -- Shop Name: #{shop.shopName}"
			}
		end
	end
	

end

if variable[0] != nil
	parseCommandVariables(variable)
	
else
	#What to do if no variables are passed
	commandHelp
	
end


