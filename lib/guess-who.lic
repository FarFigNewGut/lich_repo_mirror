=begin

	GUESS WHO!
	
	How is it that your character knows EVERYONE'S name in game, even if they have never interacted with the person before or saw anyone else use their name? Well this script aims to remedy that! (eventually!)
	
	With this script running whenever you LOOK in a room you will only see people referred to as "Unknown", until you decide you have sufficiently been introduced to them (or found out their name some other way), then you can do:
	
	;send guess add name
	
	For example: ;send guess add Dreaven
	
	To add them to the list of characters you know. From that point on that person's name will show up as normal in the room list.
	
	All "Unknown" people will have a number after their name, and this number will forever identify the same person. For example if the script notes Dreaven as "Unknown123", then Dreaven will forever be known as "Unknown123" until you add his name to the list.
	
	Eventually the script will use this unknown identifier in ALL instances of the person's name being shown (when LOOKing at them, when they use a verb, say something, etc) but for now it's just when LOOKing in a room.
	
	Commands:
	
	To add someone you know to your list of known characters: ;send guess add name"
	To remove someone from your list of known characters: ;send guess remove name"
	To reset your known list: ;send guess reset known"
	To reset your unknown list: ;send guess reset unknown"
	To see everyone on your known list: ;send guess list"
	
	Changelog:
	Version 1: Initial release!
	Version 2: Every person is now identified with a unique number identifier, this number will be used to interact with this person in game and with the script. This number stops being shown once you have added the person to your known list.
	Version 2: You can now scan a room to give each person a unique name based on their race and physical features. These names are saved forever, well until you change them or reset all names.
	Version 2: You can now change a person's temporary name to anything you want. Be sure to check out the help menu for how to use these new features.
	Version 3: You can now interact with unknown people. Refer to their U#. For example if you see (U23) after someone's name then you can do: "wave u23" to wave at that person.
	Version 3: Script now replaces a person's real name in MOST instances. What I have noticed at the moment is it won't replace someone's real name when you LOOK at them or if more than 1 person is mentioned in the same line. This will be updated at some point.
	
	To do list:
	
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 3

=end

silence_me

LICH_GEM_REQUIRES = '5.5.0'
if Gem::Version.new(LICH_VERSION) < Gem::Version.new(LICH_GEM_REQUIRES)
	_respond "This script requires Lich Version #{LICH_GEM_REQUIRES} or greater. Please update to the latest version of Lich in order to use this script."
	exit
end

@guess_who_text_to_display = Array.new

@guess_who_action_to_perform = nil
@guess_who_person_to_interact_with = nil

def guess_who_display_message
	_respond
	longest_string = 0
	@guess_who_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@guess_who_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@guess_who_text_to_display = Array.new
end

def guess_who_help_menu
	@guess_who_text_to_display.push("guess-who commands:")
	@guess_who_text_to_display.push("To add someone you know to your list of known characters: ;send guess add name")
	@guess_who_text_to_display.push("To remove someone from your list of known characters: ;send guess remove name")
	@guess_who_text_to_display.push("To reset your known list: ;send guess reset known")
	@guess_who_text_to_display.push("To reset your unknown list: ;send guess reset unknown")
	@guess_who_text_to_display.push("To see everyone on your known list: ;send guess list")
	@guess_who_text_to_display.push("To scan everyone in the room to give them a unique name do: ;send guess scan")
	@guess_who_text_to_display.push("To see this help menu at anytime do: ;send guess help")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To change someone's name do: ;send guess change CURRENT_U_NAME to NEW NAME")
	@guess_who_text_to_display.push("Example if person's U name is U21: ;send guess change u21 to Bob")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To interact with an unknown person use their U number.")
	@guess_who_text_to_display.push("Example: If you see (U23) after someone's name, you could do: wave u23 to wave at them.")
	guess_who_display_message
end

CharSettings['list_of_all_known_characters'] = Array.new unless CharSettings['list_of_all_known_characters']
CharSettings['list_of_all_unknown_characters'] = Hash.new unless CharSettings['list_of_all_unknown_characters']
@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
@list_of_all_unknown_characters = CharSettings['list_of_all_unknown_characters']

hide_names = proc {
	action = proc { |server_string|
		if server_string =~ /^Also here\:/
			people_here = server_string.split(/Also here\: |\, /)
			new_line = "Also here: "
			people_here.each{ |full_info|
				if full_info =~ /noun="([a-zA-Z]+)"/
					name = $1
					if @list_of_all_known_characters.include?(name)
						new_line += "#{full_info}, "
					elsif @list_of_all_unknown_characters.include?(name)
						if @list_of_all_unknown_characters[name][:name_has_been_set]
							new_line += "#{@list_of_all_unknown_characters[name][:unknown_name]} (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]}), "
						elsif @list_of_all_unknown_characters[name][:unknown_name] == "NONE"
							new_line += "Unknown (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]}), "
						else
							new_line += "#{@list_of_all_unknown_characters[name][:race]} #{@list_of_all_unknown_characters[name][:unknown_name]} (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]}), "
						end
					else
						@list_of_all_unknown_characters.store(name, :real_name => name, :unknown_name => "NONE", :race => "UNKNOWN", :name_has_been_set => nil, :unique_number_indentifier => (@list_of_all_unknown_characters.count + 1))
						new_line += "Unknown (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]}), "
					end
					@guess_who_last_character = name
				end
			}
			new_line = new_line.chop.chop
			new_line += "\r\n" unless @list_of_all_known_characters.include?(@guess_who_last_character)
			new_line
		elsif server_string =~ /noun="([a-zA-Z]+)"/
			name = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:real_name] == $1 }
			name = name.first
			if name && !@list_of_all_known_characters.include?(name)
				server_string = strip_xml(server_string)
				if @list_of_all_unknown_characters[name][:name_has_been_set]
					new_name = "#{@list_of_all_unknown_characters[name][:unknown_name]} (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]})"
				elsif @list_of_all_unknown_characters[name][:unknown_name] == "NONE"
					new_name = "Unknown (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]})"
				else
					new_name = "#{@list_of_all_unknown_characters[name][:race]} #{@list_of_all_unknown_characters[name][:unknown_name]} (U#{@list_of_all_unknown_characters[name][:unique_number_indentifier]})"
				end
				server_string.sub! "#{name}", "#{new_name}"
				server_string
			else
				server_string
			end
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_hide_names", action)
}

interact_with_others = proc { |string|
	if string =~ /<c>(.*) u(\d+)/
		@guess_who_person_to_interact_with = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:unique_number_indentifier] == $2.to_i }
		@guess_who_action_to_perform = $1
		nil
	else
		string
	end
}

UpstreamHook.add('guess-who', interact_with_others)

before_dying{
	DownstreamHook.remove("#{script.name}_hide_names")
	UpstreamHook.remove('guess-who')
	CharSettings['list_of_all_unknown_characters'] = @list_of_all_unknown_characters
}

hide_names.call

guess_who_help_menu

toggle_upstream

Thread.new{
	loop{
		wait_until{ @guess_who_person_to_interact_with && @guess_who_action_to_perform}
		put "#{@guess_who_action_to_perform} #{@list_of_all_unknown_characters[@guess_who_person_to_interact_with.first][:real_name]}"
		@guess_who_action_to_perform = nil
		@guess_who_person_to_interact_with = nil
	}
}

while line = get
	if line =~ /guess add ([a-zA-Z]+)/
		CharSettings['list_of_all_known_characters'].push($1) unless CharSettings['list_of_all_known_characters'].include?($1)
		@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
		@guess_who_text_to_display.push("#{$1} has been added to the list of characters you know!")
		guess_who_display_message
	elsif line =~ /guess remove ([a-zA-Z]+)/
		CharSettings['list_of_all_known_characters'].delete($1)
		@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
		@guess_who_text_to_display.push("#{$1} has been removed from the list of characters you know!")
		guess_who_display_message
	elsif line =~ /guess reset known/
		CharSettings['list_of_all_known_characters'] = Array.new
		@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
		@guess_who_text_to_display.push("#{$1} Your list of known characters has been reset. You now know no one!")
		guess_who_display_message
	elsif line =~ /guess reset unknown/
		CharSettings['list_of_all_unknown_characters'] = Hash.new
		@list_of_all_unknown_characters = CharSettings['list_of_all_unknown_characters']
		@guess_who_text_to_display.push("#{$1} Your list of unknown characters has been reset. You now don't know you don't know anyone!")
		guess_who_display_message
	elsif line =~ /guess list/
		respond CharSettings['list_of_all_known_characters']
	elsif line =~ /guess change U(\d+) to (.*)/i
		person_to_change = nil
		person_to_change = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:unique_number_indentifier] == $1.to_i }
		person_to_change = person_to_change.first
		old_name = @list_of_all_unknown_characters[person_to_change][:unknown_name]
		@list_of_all_unknown_characters[person_to_change][:unknown_name] = $2
		@list_of_all_unknown_characters[person_to_change][:name_has_been_set] = true
		@guess_who_text_to_display.push("#{old_name} has been changed to #{@list_of_all_unknown_characters[person_to_change][:unknown_name]}")
		guess_who_display_message
	elsif line =~ /guess scan/
		@guess_who_text_to_display.push("STARTING SCAN. THIS MAY TAKE SEVERAL SECONDS.")
		@guess_who_text_to_display.push("THE MORE PEOPLE IN THE ROOM YOU HAVE NEVER SCANNED BEFORE, THE LONGER IT WILL TAKE.")
		@guess_who_text_to_display.push("PLEASE DO NOT ENTER ANY COMMANDS UNTIL THE SCAN IS COMPLETE.")
		guess_who_display_message
		@guess_who_people_here = nil
		result = Lich::Util.quiet_command_xml("look", /Also here|Obvious|You notice/)
		result.each{ |info|
			info = strip_xml(info)
			if info =~ /Also here\:/
				@guess_who_people_here = info.split(/Also here\: |\, /)
			end
		}
		@guess_who_people_here.each{ |name|
			if @list_of_all_unknown_characters[name][:unknown_name] == "NONE"
				result = Lich::Util.quiet_command_xml("look #{name}", /You see|It is difficult to get a good look|Flames dance around|Twisting vines writhe around/)
				result.each{ |info|
					info = strip_xml(info)
					if info =~ /appears to be an? /
						@guess_who_race = $1 if info =~ /(Aelotoi|Dwarf|Elf|Dark Elf|Half-Elf|Sylvan|Erithian|Burghal Gnome|Forest Gnome|Giantman|Halfling|Human|Half-Krolvin)/
					elsif info =~ /eyes/
						features = info.split(/\.|\, | and /)
						@guess_who_chosen_feature = features.sample
						if @guess_who_chosen_feature =~ /(?:He|She) (?:is|appears to (?:be|have)) (.*)/
							@guess_who_chosen_feature = $1
						elsif @guess_who_chosen_feature =~ /(?:He|She) has (.*)/
							@guess_who_chosen_feature = "with #{$1}"
						else
							@guess_who_chosen_feature = "with #{@guess_who_chosen_feature}"
						end
					end
				}
				@list_of_all_unknown_characters[name][:unknown_name] = @guess_who_chosen_feature
				@list_of_all_unknown_characters[name][:race] = @guess_who_race
			end
		}
		@guess_who_text_to_display.push("SCAN IS COMPLETE.")
		guess_who_display_message
	elsif line =~ /guess help/
		guess_who_help_menu
	end
end