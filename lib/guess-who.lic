=begin

	To see the help menu start the script then do: ;send guess help

	GUESS WHO!
	
	How is it that your character knows EVERYONE'S name in game, even if they have never interacted with the person before or saw anyone else use their name? Well this script aims to remedy that!
	
	With this script running whenever you LOOK in a room you will only see people referred to as "Stranger", until you decide you have sufficiently been introduced to them (or found out their name some other way), then you can do:
	
	;send guess add name
	
	For example: ;send guess add Dreaven
	
	To add them to the list of characters you know. From that point on that person's name will show up as normal in the room list.
	
	All "Stranger" people will have a number after their name, and this number will forever identify the same person. For example if the script notes Dreaven as "Stranger123", then Dreaven will forever be known as "Stranger" until you add his name to the list.
	
	You can also set a custom name for someone so they will always show as that name. For example you could set Dreaven's custom name to "Bob" and he will show up as "Bob" everywhere in the game. Fun for assigning unique names to your friends and enemies!
	
	Changelog:
	For previous changes check out this link: http://forum.gsplayers.com/showthread.php?133927-Uploaded-new-script-guess-who
	Version 5: Unfortunately all settings will be reset when you upgrade to this version. This shouldn't be required again for any future updates.
	Version 5: Got rid of all of the extra and unnecessary blank game lines that were showing up while script was running.
	Version 5: Disks will no longer show up as just "disk" and will now show the person's name; their real name if they are on your known list, and their unknown name if not.
	Version 5: Now ALL real names will be hidden (except for people on your known list of course), no matter how many people are mentioned in the same game line. Prior to this version only 1 person's name was hidden per game line, so if multiple people were mentioned on the same game line everyone past the first person would show their real name, but no more because this is fixed!
	Version 5: You can now change someone's custom name using their real name, you no longer have to use their U# (although U# still works too). Check the help menu for more info.
	Version 5: You can now reset someone's custom name. You can use either their U# or real name to reset their custom name. Check the help menu for more info.
	Version 5: You can now list everyone you have assigned a custom name to. There are two options: One will show their real name, U#, and their custom name, the other option just shows their U# and custom name. Check the help menu for more info.
	Version 5: There is now an option to show everyone's real name by default, and will show their custom name if you have set one for them. For example with this option on you will see everyone's real name, but if you have set Dreaven's custom name to "Bob" then Dreaven will show up as Bob and everyone else you haven't set custom names for will use their real names.
	
	########################################################
	Ways to contact me:
	In game: Dreaven
	Player's Corner: Tgo01
	Discord: Dreaven#6436
	Email: LordDreaven@gmail.com
	If you like my scripts feel free to send me a tip via Paypal at: LordDreaven@gmail.com
	########################################################
	
	Author: Dreaven
	Version: 5

=end

silence_me

LICH_GEM_REQUIRES = '5.5.0'
if Gem::Version.new(LICH_VERSION) < Gem::Version.new(LICH_GEM_REQUIRES)
	_respond "This script requires Lich Version #{LICH_GEM_REQUIRES} or greater. Please update to the latest version of Lich in order to use this script."
	exit
end

@guess_who_text_to_display = Array.new

@guess_who_first_action_to_perform = nil
@guess_who_person_to_interact_with = nil
@guess_who_second_action_to_perform = nil

def guess_who_display_message
	_respond
	longest_string = 0
	@guess_who_text_to_display.each{ |i| longest_string = (i.length + 12) if (i.length + 12) > longest_string }
	header_and_border = nil
	longest_string.times{ header_and_border += "#" }
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	@guess_who_text_to_display.each{ |i| 
		spaces_needed_length = longest_string - (i.length + 7)
		spaces_needed_text = nil
		spaces_needed_length.times { spaces_needed_text += " " }
		_respond "#{monsterbold_start}#     #{i}#{monsterbold_end}#{spaces_needed_text}#{monsterbold_start}##{monsterbold_end}\n"
	}
	_respond "#{monsterbold_start}#{header_and_border}#{monsterbold_end}\n"
	_respond
	@guess_who_text_to_display = Array.new
end

def guess_who_help_menu
	@guess_who_text_to_display.push("guess-who commands:")
	@guess_who_text_to_display.push("To see this help menu at anytime do: ;send guess help")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To add someone to your list of known characters: ;send guess add name")
	@guess_who_text_to_display.push("To remove someone from your list of known characters: ;send guess remove name")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To reset your known list: ;send guess reset known")
	@guess_who_text_to_display.push("To reset your unknown list: ;send guess reset unknown")
	@guess_who_text_to_display.push("To reset all custom names: ;send guess reset custom")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To see everyone on your known list: ;send guess list known")
	@guess_who_text_to_display.push("To see all custom names WIHOUT seeing real names: ;send guess list custom no")
	@guess_who_text_to_display.push("To see all custom names with seeing real names: ;send guess list custom yes")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To scan everyone in the room to give them a unique name do: ;send guess scan")
	@guess_who_text_to_display.push("To add everyone on your befriend list to your known list do: ;send guess befriend")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To change someone's custom name do: ;send guess change CURRENT_U# to NEW NAME")
	@guess_who_text_to_display.push("Example if person's U# is U21: ;send guess change 21 to Bob")
	@guess_who_text_to_display.push("You can also use someone's real name.")
	@guess_who_text_to_display.push("Example: ;send guess change Dreaven to Larry")
	@guess_who_text_to_display.push("You can also reset someone's custom name.")
	@guess_who_text_to_display.push("Example: ;send guess change Dreaven to reset")
	@guess_who_text_to_display.push("Example: ;send guess change 21 to reset")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To change default unknown name do: ;send guess default to NEW NAME")
	@guess_who_text_to_display.push("Example: ;send guess default to Mystery")
	@guess_who_text_to_display.push("Default is \"Stranger\"")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To use everyone's real name by default do: ;send guess real on")
	@guess_who_text_to_display.push("Everyone's real name will be shown by default unless you have assigned someone a custom name.")
	@guess_who_text_to_display.push("To turn this feature off do: ;send guess real off")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To use default race+random physical feature do: ;send guess unique default")
	@guess_who_text_to_display.push("To only see a person's race do: ;send guess unique race")
	@guess_who_text_to_display.push("To not see race or physical features do: ;send guess unique off")
	@guess_who_text_to_display.push("")
	@guess_who_text_to_display.push("To interact with an unknown person use their U#.")
	@guess_who_text_to_display.push("Example: If you see (U23) after someone's name, you could do: wave u23 to wave at them.")
	guess_who_display_message
end

def guess_who_who_full_confirm
	result = Lich::Util.quiet_command_xml("who full confirm", /Brave Adventurers Questing/)
	result.each{ |info|
		info = strip_xml(info)
		if info !~ /Active Players|Staff on duty/
			if info =~ /([a-zA-Z]+)(?:\s+)?([a-zA-Z]+)?(?:\s+)?([a-zA-Z]+)?(?:\s+)?([a-zA-Z]+)?/
				person_1 = $1
				person_2 = $2
				person_3 = $3
				person_4 = $4
				all_people = [ person_1, person_2, person_3, person_4 ]
				all_people.each{ |name|
					if name && !@list_of_all_unknown_characters.include?(name)
						@list_of_all_unknown_characters.store(name, :real_name => name, :physical_trait_name => "NONE", :race => "UNKNOWN", :custom_name => nil, :unique_number_indentifier => (@list_of_all_unknown_characters.count + 1))
					end
				}
			end
		end
	}
end

def guess_who_get_new_name
	@guess_who_change_the_name = nil			
	if @default_always_use_real_names
		if @list_of_all_unknown_characters[@guess_who_original_name][:custom_name]
			@guess_who_new_name = "#{@list_of_all_unknown_characters[@guess_who_original_name][:custom_name]} (U#{@list_of_all_unknown_characters[@guess_who_original_name][:unique_number_indentifier]})"
			@guess_who_change_the_name = true
		end
	else
		if @list_of_all_unknown_characters.include?(@guess_who_original_name)
			if @list_of_all_unknown_characters[@guess_who_original_name][:custom_name]
				@guess_who_new_name = "#{@list_of_all_unknown_characters[@guess_who_original_name][:custom_name]} (U#{@list_of_all_unknown_characters[@guess_who_original_name][:unique_number_indentifier]})"
			elsif @list_of_all_unknown_characters[@guess_who_original_name][:physical_trait_name] == "NONE"
				@guess_who_new_name = "#{@default_unknown_name} (U#{@list_of_all_unknown_characters[@guess_who_original_name][:unique_number_indentifier]})"
			else
				@guess_who_new_name = "#{@list_of_all_unknown_characters[@guess_who_original_name][:race]} #{@list_of_all_unknown_characters[@guess_who_original_name][:physical_trait_name]} (U#{@list_of_all_unknown_characters[@guess_who_original_name][:unique_number_indentifier]})"
			end
			@guess_who_change_the_name = true
		end
	end
end

CharSettings['list_of_all_known_characters'] = Array.new unless CharSettings['list_of_all_known_characters']
CharSettings['list_of_all_unknown_characters'] = Hash.new unless CharSettings['list_of_all_unknown_characters']
@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
@list_of_all_unknown_characters = CharSettings['list_of_all_unknown_characters']

CharSettings['default_unknown_name'] = "Stranger" unless CharSettings['default_unknown_name']
@default_unknown_name = CharSettings['default_unknown_name']

CharSettings['default_unique_name'] = "default" unless CharSettings['default_unique_name']
@default_unique_name = CharSettings['default_unique_name']

CharSettings['default_always_use_real_names'] = nil unless CharSettings['default_always_use_real_names']
@default_always_use_real_names = CharSettings['default_always_use_real_names']

do_not_repeat_lines = Array.new

hide_names = proc {
	action = proc { |server_string|
		if server_string =~ /id\=\"\"\/\>Also here\:|^Also here\:/
			people_here = server_string.split(/Also here\: |\, /)
			people_here.each{ |full_info|
				if full_info =~ /noun="([a-zA-Z]+)"/
					name = $1
					if name && !@list_of_all_unknown_characters.include?(name)
						@list_of_all_unknown_characters.store(name, :real_name => name, :physical_trait_name => "NONE", :race => "UNKNOWN", :custom_name => nil, :unique_number_indentifier => (@list_of_all_unknown_characters.count + 1))
					end
				end
			}
		end
		if server_string =~ /noun="(disk|coffin)"/
			all_people_scan = server_string.scan(/[a-zA-Z]+/)
			all_people_scan.each{ |noun|
				@guess_who_original_name = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:real_name] == noun }
				@guess_who_original_name = @guess_who_original_name.first
				if @guess_who_original_name && !@list_of_all_known_characters.include?(@guess_who_original_name)
					guess_who_get_new_name
					10.times{ server_string.sub! "#{@guess_who_original_name}", "#{@guess_who_new_name}" } if @guess_who_change_the_name
				end
			}
			server_string
		elsif server_string =~ /noun="([a-zA-Z]+)"/
			all_people_scan = server_string.scan(/noun="([a-zA-Z]+)"/)
			all_people_scan.each{ |noun|
				noun = noun.first
				@guess_who_original_name = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:real_name] == noun }
				@guess_who_original_name = @guess_who_original_name.first
				if @guess_who_original_name && !@list_of_all_known_characters.include?(@guess_who_original_name)
					guess_who_get_new_name
					10.times{ server_string.sub! "#{@guess_who_original_name}", "#{@guess_who_new_name}" } if @guess_who_change_the_name
				end
			}
			server_string
		elsif server_string =~ /^You see/
			words_to_check = server_string.split(/ |\./)
			@guess_who_original_name = @list_of_all_unknown_characters.find{ |key,value| words_to_check.include?(@list_of_all_unknown_characters[key][:real_name]) }
			@guess_who_original_name = @guess_who_original_name.first
			if @guess_who_original_name && !@list_of_all_known_characters.include?(@guess_who_original_name)
				guess_who_get_new_name
				server_string = "You see #{@guess_who_new_name}.\n" if @guess_who_change_the_name
			end
			server_string
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_hide_names", action)
}

interact_with_others = proc { |string|
	if string =~ /<c>(.*) u(\d+) ?(.*)?/
		@guess_who_person_to_interact_with = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:unique_number_indentifier] == $2.to_i }
		@guess_who_first_action_to_perform = $1
		@guess_who_second_action_to_perform = $3
		nil
	else
		string
	end
}

UpstreamHook.add('guess-who', interact_with_others)

before_dying{
	DownstreamHook.remove("#{script.name}_hide_names")
	UpstreamHook.remove('guess-who')
	CharSettings['list_of_all_unknown_characters'] = @list_of_all_unknown_characters
}

guess_who_help_menu

CharSettings['first_time_message'] = nil unless CharSettings['first_time_message']
if CharSettings['first_time_message'].nil?
	CharSettings['first_time_message'] = true
	CharSettings['list_of_all_known_characters'] = Array.new
	CharSettings['list_of_all_unknown_characters'] = Hash.new
	@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
	@list_of_all_unknown_characters = CharSettings['list_of_all_unknown_characters']

	CharSettings['default_unknown_name'] = "Stranger"
	@default_unknown_name = CharSettings['default_unknown_name']

	CharSettings['default_unique_name'] = "default"
	@default_unique_name = CharSettings['default_unique_name']

	CharSettings['default_always_use_real_names'] = nil
	@default_always_use_real_names = CharSettings['default_always_use_real_names']
	
	@guess_who_text_to_display.push("If you are updating from a previous version then unfortunately all your settings had to be reset.")
	@guess_who_text_to_display.push("This shouldn't be required again for any future updates.")
	guess_who_display_message
end

hide_names.call

guess_who_who_full_confirm

toggle_upstream

Thread.new{
	loop{
		wait_until{ @guess_who_person_to_interact_with && @guess_who_first_action_to_perform}
		put "#{@guess_who_first_action_to_perform} #{@list_of_all_unknown_characters[@guess_who_person_to_interact_with.first][:real_name]} #{@guess_who_second_action_to_perform}"
		@guess_who_first_action_to_perform = nil
		@guess_who_person_to_interact_with = nil
		@guess_who_second_action_to_perform = nil
	}
}

while line = get
	if line =~ /^guess add ([a-zA-Z]+)/i
		person = $1.capitalize
		CharSettings['list_of_all_known_characters'].push(person) unless CharSettings['list_of_all_known_characters'].include?(person)
		@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
		@guess_who_text_to_display.push("#{person} has been added to the list of characters you know!")
		guess_who_display_message
	elsif line =~ /^guess remove ([a-zA-Z]+)/i
		person = $1.capitalize
		CharSettings['list_of_all_known_characters'].delete(person)
		@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
		@guess_who_text_to_display.push("#{person} has been removed from the list of characters you know!")
		guess_who_display_message
	elsif line =~ /^guess reset known/i
		CharSettings['list_of_all_known_characters'] = Array.new
		@list_of_all_known_characters = CharSettings['list_of_all_known_characters']
		@guess_who_text_to_display.push("Your list of known characters has been reset. You now know no one!")
		guess_who_display_message
	elsif line =~ /^guess reset unknown/i
		CharSettings['list_of_all_unknown_characters'] = Hash.new
		@list_of_all_unknown_characters = CharSettings['list_of_all_unknown_characters']
		guess_who_who_full_confirm
		@guess_who_text_to_display.push("Your list of unknown characters has been reset. You now don't know you don't know anyone!")
		guess_who_display_message
	elsif line =~ /guess reset custom/
		CharSettings['list_of_all_unknown_characters'].each{ |key,value| CharSettings['list_of_all_unknown_characters'][key][:custom_name] = nil }
		@list_of_all_unknown_characters = CharSettings['list_of_all_unknown_characters']
		@guess_who_text_to_display.push("All custom names have been reset.")
		guess_who_display_message
	elsif line =~ /^guess list known/i
		respond CharSettings['list_of_all_known_characters']
	elsif line =~ /^guess list custom no/i
		@guess_who_text_to_display.push("All custom names:")
		CharSettings['list_of_all_unknown_characters'].each{ |key,value| @guess_who_text_to_display.push("U#{CharSettings['list_of_all_unknown_characters'][key][:unique_number_indentifier]}: #{CharSettings['list_of_all_unknown_characters'][key][:custom_name]}") if CharSettings['list_of_all_unknown_characters'][key][:custom_name]
		}
		guess_who_display_message
	elsif line =~ /^guess list custom yes/i
		@guess_who_text_to_display.push("All custom names:")
		CharSettings['list_of_all_unknown_characters'].each{ |key,value| @guess_who_text_to_display.push("#{CharSettings['list_of_all_unknown_characters'][key][:real_name]} (U#{CharSettings['list_of_all_unknown_characters'][key][:unique_number_indentifier]}): #{CharSettings['list_of_all_unknown_characters'][key][:custom_name]}") if CharSettings['list_of_all_unknown_characters'][key][:custom_name]
		}
		guess_who_display_message
	elsif line =~ /^guess change (\d+) to (.*)/i
		person_to_change = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:unique_number_indentifier] == $1.to_i }
		person_to_change = person_to_change.first
		new_name_change = $2
		if person_to_change
			old_name = "U#{@list_of_all_unknown_characters[person_to_change][:unique_number_indentifier]}"
			if new_name_change =~ /reset/i
				@list_of_all_unknown_characters[person_to_change][:custom_name] = nil
				@guess_who_text_to_display.push("#{old_name} has had their custom name reset.")
			else
				@list_of_all_unknown_characters[person_to_change][:custom_name] = new_name_change
				@guess_who_text_to_display.push("#{old_name} has been changed to #{@list_of_all_unknown_characters[person_to_change][:custom_name]}")
			end
		else
			@guess_who_text_to_display.push("No character by that U# was found.")
		end
		guess_who_display_message
	elsif line =~ /^guess change ([a-zA-Z]+) to (.*)/i
		person_to_change = @list_of_all_unknown_characters.find{ |key,value| @list_of_all_unknown_characters[key][:real_name] == $1.capitalize }
		person_to_change = person_to_change.first
		new_name_change = $2
		if person_to_change
			old_name = @list_of_all_unknown_characters[person_to_change][:real_name]
			if new_name_change =~ /reset/i
				@list_of_all_unknown_characters[person_to_change][:custom_name] = nil
				@guess_who_text_to_display.push("#{old_name} has had their custom name reset.")
			else
				@list_of_all_unknown_characters[person_to_change][:custom_name] = new_name_change
				@guess_who_text_to_display.push("#{old_name} has been changed to #{@list_of_all_unknown_characters[person_to_change][:custom_name]}")
			end
		else
			@guess_who_text_to_display.push("No character by that name was found.")
			@guess_who_text_to_display.push("A character needs to be logged on when script is started,")
			@guess_who_text_to_display.push("or needs to be seen in game while script is running to give them custom name.")
		end
		guess_who_display_message
	elsif line =~ /^guess befriend/i
		result = Lich::Util.quiet_command_xml("befriend list all", /Searching through the lands for your friends/)
		result.each{ |info|
			info = strip_xml(info)
			if info =~ /([a-zA-Z]+) (:?is|was)/
				person = $1.capitalize
				CharSettings['list_of_all_known_characters'].push(person) unless CharSettings['list_of_all_known_characters'].include?(person)
			end
		}
		@guess_who_text_to_display.push("All of your friends have been added to your known list!")
		guess_who_display_message
	elsif line =~ /^guess default to (.*)/i
		old_name = CharSettings['default_unknown_name']
		CharSettings['default_unknown_name'] = $1
		@default_unknown_name = CharSettings['default_unknown_name']
		@guess_who_text_to_display.push("Default name changed to \"#{CharSettings['default_unknown_name']}\". Was \"#{old_name}\"")
		guess_who_display_message
	elsif line =~ /^guess scan/i
		@guess_who_text_to_display.push("STARTING SCAN. THIS MAY TAKE SEVERAL SECONDS.")
		@guess_who_text_to_display.push("THE MORE PEOPLE IN THE ROOM YOU HAVE NEVER SCANNED BEFORE, THE LONGER IT WILL TAKE.")
		@guess_who_text_to_display.push("PLEASE DO NOT ENTER ANY COMMANDS UNTIL THE SCAN IS COMPLETE.")
		guess_who_display_message
		@guess_who_people_here = nil
		result = Lich::Util.quiet_command_xml("look", /Also here|Obvious|You notice/)
		result.each{ |info|
			info = strip_xml(info)
			if info =~ /Also here/
				@guess_who_people_here = info.split(/Also here\: |\, /)
			end
		}
		@guess_who_people_here.each{ |full_info|
			name = @list_of_all_unknown_characters.find{ |key,value| full_info =~ /#{key}/ }
			name = name.first
			if @list_of_all_unknown_characters[name][:physical_trait_name] == "NONE"
				result = Lich::Util.quiet_command_xml("look #{name}", /You see|It is difficult to get a good look|Flames dance around|Twisting vines writhe around/)
				result.each{ |info|
					info = strip_xml(info)
					if info =~ /appears to be an? /
						@guess_who_race = $1 if info =~ /(Aelotoi|Dwarf|Elf|Dark Elf|Half-Elf|Sylvan|Erithian|Burghal Gnome|Forest Gnome|Giantman|Halfling|Human|Half-Krolvin)/
					elsif info =~ /eyes/
						features = info.split(/\.|\, | and /)
						@guess_who_chosen_feature = features.sample
						if @guess_who_chosen_feature =~ /(?:He|She) (?:is|appears to (?:be|have)) (.*)/
							@guess_who_chosen_feature = $1
						elsif @guess_who_chosen_feature =~ /(?:He|She) has (.*)/
							@guess_who_chosen_feature = "with #{$1}"
						else
							@guess_who_chosen_feature = "with #{@guess_who_chosen_feature}"
						end
					end
				}
				@list_of_all_unknown_characters[name][:physical_trait_name] = @guess_who_chosen_feature
				@list_of_all_unknown_characters[name][:race] = @guess_who_race
			end
		}
		@guess_who_text_to_display.push("SCAN IS COMPLETE.")
		guess_who_display_message
	elsif line =~ /^guess real on/i
		CharSettings['default_always_use_real_names'] = true
		@default_always_use_real_names = CharSettings['default_always_use_real_names']
		@guess_who_text_to_display.push("Real names will be used unless you have set a custom name for someone.")
		guess_who_display_message
	elsif line =~ /^guess real off/i
		CharSettings['default_always_use_real_names'] = nil
		@default_always_use_real_names = CharSettings['default_always_use_real_names']
		@guess_who_text_to_display.push("Real names will no longer be used by default.")
		guess_who_display_message
	elsif line =~ /^guess unique default/i
		CharSettings['default_unique_name'] = "default"
		@default_unique_name = CharSettings['default_unique_name']
		@guess_who_text_to_display.push("Unique names are set to default, you will see their race, a random physical feature and their U#.")
		guess_who_display_message
	elsif line =~ /^guess unique race/i
		CharSettings['default_unique_name'] = "race"
		@default_unique_name = CharSettings['default_unique_name']
		@guess_who_text_to_display.push("Unique names are set to race only, you will only see the person's race and their U#.")
		guess_who_display_message
	elsif line =~ /^guess unique off/i
		CharSettings['default_unique_name'] = "off"
		@default_unique_name = CharSettings['default_unique_name']
		@guess_who_text_to_display.push("Unique names are now off, you will only see the name \"#{CharSettings['default_unknown_name']}\" and their U#.")
		guess_who_display_message
	elsif line =~ /^guess help/i
		guess_who_help_menu
	end
end