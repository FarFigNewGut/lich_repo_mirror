=begin

  Searches the Simucoin store or launches a Simucoin store page

  for usage info:
    ;simucoin help

   author: Lieo
     game: Gemstone
     tags: simucoin
  version: 2.0.0

  changelog:
    2.0
        - simplify launch command
        - save launch history
    1.2
        - fix opening website cross platform
    1.1
        - do a better search than the Simucoin site
    1.0
        - initial release
=end

require 'net/https'
require 'uri'

Settings.load

class Simucoin
    def initialize(args)
        @base_url = "https://store.play.net"
        @search_url = "#{@base_url}/Store/Purchase/gs?filter=ALL"
        @visit_url = "#{@base_url}/Store/PurchaseItem"
        @script_name = 'simucoin'
        @slowTime = 40
        @fastTime = 40
        @args = args
        parse_args
    end
  
    def get_results(term, announce=true)
        respond "** Pulling data from Simucoin store" if announce
        url = "#{@search_url}"
        uri = URI.parse(url)
        http = Net::HTTP.new(uri.host, uri.port)
        http.use_ssl = true
    
        req = Net::HTTP::Get.new(uri.request_uri)
        begin
            resp = http.request(req)
        rescue StandardError
            # Bummer
        end
        echo "There was an error searching the Simucoin store." unless resp.is_a? Net::HTTPSuccess
        parse_results(resp.body, term)
    end

    def parse_results(body, search)
        terms = search.downcase.split " "

        reg = /normal_item_name[\S\s]*?href=".+\/([0-9]+)\?gameCode=GS">(.*?)<\/a>[\S\s]*?<span style="vertical-align:middle">([0-9,]+)<\/span>/

        all = body.scan(reg).map { |r|
            { :name => r[1].sub("&#39;", "'"), :cost => r[2], :id => r[0] }
        }

        all if search == ""
        
        all.select { |r|
            terms.all? { |term| r[:name].downcase.include? term }
        }.sort_by { |r| r[:name] }
    end
  
    def print_results(results, header="")
        if header.length
            respond "**************************"
            respond header
        end
        respond "**************************"

        if results.count > 0
            results.each_with_index { |result, id|
                numb = id + 1
                tens = numb < 10 && results.count >= 10 ? " " : ""
                hunds = numb < 100 && results.count >= 100 ? " " : ""
                spacer = tens + hunds
                launch_str = "launch #{numb}"
                respond "    #{numb}.#{spacer} #{result[:name]} (#{result[:cost]}) - type \"#{launch_str}\" to buy"
            }
            respond "    Type anything else to exit."
        else
            respond "    Nothing found"
        end
        respond "**************************"
        listen results
    end
  
    def search_store
        search = @args[2..].join(" ")
        results = get_results search
        print_results results, "Simucoin store search results for '#{search}'"
    end

    def launch_store(id=@args[2])
        add_history id
        url = "#{@visit_url}/#{id}?gameCode=GS"
        if RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
            system "start #{url}"
        elsif RbConfig::CONFIG['host_os'] =~ /darwin/
            system "open #{url}"
        elsif RbConfig::CONFIG['host_os'] =~ /linux|bsd/
            system "xdg-open #{url}"
        end
    end

    def listen(results)
        if results.count > 0
            toggle_upstream
            add_time = Settings["maxWait"] ? @slowTime : @fastTime
            end_time = Time.new + add_time
            DownstreamHook.add("#{@script_name}_quiet", proc { |server_string|
                if server_string =~ /Please rephrase that command\./
                    DownstreamHook.remove("#{@script_name}_quiet")
                    nil
                else
                    server_string
                end
            })
            while graceful = Time.now < end_time
                got = upstream_get?
                if got =~ /launch ([0-9]+)/
                    num = $1.to_i
                    if results.count <= num || num < 1
                        respond "** Launch command recognized but try a different number"
                    else
                        respond "** Launching #{results[num - 1][:name]}"
                        launch_store results[num - 1][:id]
                        break
                    end
                elsif got
                    if got.downcase =~ /^.*;#{@script_name}(.*)$/
                        start_script(@script_name, [$1], { :quiet => true, :force => true })
                    end
                    break
                end
                sleep 0.2
            end
            DownstreamHook.remove("#{@script_name}_quiet")
            if !graceful
                echo "** No response recognized. Exiting"
            end
            toggle_upstream
        end
    end

    def add_history(id)
        Settings["history"] = [] if !Settings["history"].kind_of?(Array)

        curr = Settings["history"].find{ |h| h[:id] == id }

        if curr
            orig = curr[:times]
            curr[:times] = orig + 1
        else
            Settings["history"].push({ :id => id, :times => 1 })
        end

        Settings["history"] = Settings["history"].sort_by{ |h| h[:times] }.reverse
    end

    def show_history
        all_results = get_results "", false
        by_id = all_results.group_by{ |r| r[:id] }
        results = []
        i = 0

        Settings["history"].each { |h|
            results.push(by_id[h[:id]][0])
        }

        print_results results, "Simucoin store history"
    end
  
    def clear_history
        Settings["history"] = []
        respond "**************************"
        respond "History cleared"
        respond "**************************"
    end

    def parse_args
        if @args.count >= 3
            if @args[1].downcase == 'search'
                search_store
            elsif @args[1].downcase == 'launch'
                launch_store
            elsif @args[1].downcase == 'clear' && @args[2].downcase == "history"
                clear_history
            end
        elsif @args[1].downcase == 'history'
            show_history
        else
            respond 'usage:'
            respond "    ;#{@script_name} search <term> - Search the Simucoin store for a term"
            respond "    ;#{@script_name} launch <id> - Goes to the purchase page for that item"
            respond "    ;#{@script_name} history - View the simucoin items you've launched before"
            respond "    ;#{@script_name} set launch wait #{Settings["maxWait"] ? "shorter" : "longer"} - If you don't like how long the script stays running waiting for a response." 

            exit
        end
    end
end

Simucoin.new(script.vars)
