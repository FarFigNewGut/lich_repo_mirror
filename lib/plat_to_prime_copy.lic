=begin
  Copies your Plat lich settings to the profile for your character on Prime server
  Defaults to copying the current character, but input can specify otherwise

  ;plat_to_prime_copy
    or
  ;plat_to_prime from:Mymain to:Somealt

  Based off test_server_copy by Xanlin

          author: Tysong
            game: GS
            tags: lich, utility, platinum, lichdb, gsplat
  requires_trust: true
        required: Lich >= 5.0.0
         version: 1.0.0
=end

require 'fileutils'

@game_source = 'GSPlat'
@game_target = 'GSIV'

#------------------------------------------------------------------------------#
# Settings
#------------------------------------------------------------------------------#

@settings_source = nil
@settings_target = nil

if script.vars[0] =~ /\-?\-?from(?:[=: ])(\w+)/i
  @settings_source = $1.downcase.capitalize
else
  @settings_source = XMLData.name
end

if script.vars[0] =~ /\-?\-?to(?:[=: ])(\w+)/i
  @settings_target = $1.downcase.capitalize
else
  @settings_target = XMLData.name
end

echo("Existing lich.db3 backed up to #{File.join(DATA_DIR, "lich.db3-FROM-#{@game_source}_#{@settings_source}-TO-#{@game_target}_#{@settings_target}-#{Time.now.to_i}.bak")}")
FileUtils.cp(File.join(DATA_DIR, 'lich.db3'), File.join(DATA_DIR, "lich.db3-FROM-#{@game_source}_#{@settings_source}-TO-#{@game_target}_#{@settings_target}-#{Time.now.to_i}.bak"))

@copy_go2 = true

@delete_existing = true
@delete_uservars = true

@scope_source = "#{@game_source}:#{@settings_source}"
@scope_target = "#{@game_target}:#{@settings_target}"

respond "-" * 64
respond "copy from: #{@scope_source}"
respond "copy to:   #{@scope_target}"
respond "delete #{@scope_target} script settings: #{@delete_existing}"
respond "delete #{@scope_target} uservars       : #{@delete_uservars}"
respond "delete #{@game_target} go2 settings to overwrite with #{@game_source} data: #{@copy_go2}"
respond "!!! pausing script.  Unpause if input shown above is correct. "
respond "-" * 64
pause_script

#------------------------------------------------------------------------------#
# open the lich.db3
#------------------------------------------------------------------------------#
def self.lich_db_open
  require 'sqlite3'
  SQLite3::Database.open File.join(DATA_DIR, "lich.db3")
end

db = lich_db_open
#------------------------------------------------------------------------------#
# Delete script settings
#------------------------------------------------------------------------------#
if @delete_existing
  sql = "delete from script_auto_settings where scope='#{@scope_target}'"
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@scope_target} script settings deleted"
end
#------------------------------------------------------------------------------#
# overwrite uservars
#------------------------------------------------------------------------------#
if @delete_uservars
  sql = "delete from uservars where scope='#{@scope_target}'"
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@scope_target} uservars deleted"
  sql = "
    insert into uservars (hash, scope)
    select hash, '#{@scope_target}' from uservars
    where scope='#{@scope_source}'
  "
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@scope_source} uservars copied to #{@scope_target}"
  # db.close
end
#------------------------------------------------------------------------------#
# copy script settings
#------------------------------------------------------------------------------#
sql = "
  insert into script_auto_settings (script,scope,hash)
  select script, '#{@scope_target}', hash
  from script_auto_settings as sas
  where scope='#{@scope_source}'
    and not exists (
      select 1
      from script_auto_settings i
      where i.script = sas.script
        and i.scope  ='#{@scope_target}'
    )
"
begin
  db.execute(sql)
rescue SQLite3::BusyException
  sleep 0.1
  retry
end
respond "#{@scope_source} script settings copied to #{@scope_target}"
#------------------------------------------------------------------------------#
# overwrite global go2
#------------------------------------------------------------------------------#
if @copy_go2
  sql = "delete from script_auto_settings where script='go2' and scope in ('#{@game_target}:','#{@game_target}')"
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@game_target} go2 settings deleted"
end
#------------------------------------------------------------------------------#
# insert source go2 if test go2 doesn't exist
#------------------------------------------------------------------------------#
begin
  sql = "select 1
        from script_auto_settings
        where scope='#{@game_target}' and script='go2'
        "
  test_go2_settings_exist = db.get_first_value(sql) # null = nil
  if test_go2_settings_exist.nil?
    sql = "
      insert into script_auto_settings (script, hash, scope)
      select 'go2', hash, '#{@game_target}:' from script_auto_settings
      where scope='#{@game_source}:' and script='go2'
        and not exists (
          select 1
          from script_auto_settings
          where scope='#{@game_target}:' and script='go2'
          )
    "
    begin
      db.execute(sql)
    rescue SQLite3::BusyException
      sleep 0.1
      retry
    end
    sql = "
      insert into script_auto_settings (script, hash, scope)
      select 'go2', hash, '#{@game_target}' from script_auto_settings
      where scope='#{@game_source}' and script='go2'
        and not exists (
          select 1
          from script_auto_settings
          where scope='#{@game_target}' and script='go2'
          )
    "
    begin
      db.execute(sql)
    rescue SQLite3::BusyException
      sleep 0.1
      retry
    end
    respond "#{@game_source} go2 settings copied to #{@game_target}"
  end
end
#------------------------------------------------------------------------------#
# done
#------------------------------------------------------------------------------#
db.close
