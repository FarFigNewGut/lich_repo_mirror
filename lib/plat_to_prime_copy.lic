=begin
  Copies your Plat lich settings to the profile for your character on Prime server
  Defaults to copying the current character, but input can specify otherwise
  Defaults to copying from GSPlat to GSIV, can specify otherwise (GSF or GST)

  ;plat_to_prime_copy
  ;plat_to_prime from:Mymain to:Somealt
  ;plat_to_prime from:Mymain to:Somealt source:GSPlat target:GSIV

  Based off test_server_copy by Xanlin

          author: Tysong
            game: GS
            tags: lich, utility, platinum, lichdb, gsplat
  requires_trust: true
        required: Lich >= 5.0.0
         version: 1.1.1

  v1.1.1 - 2025-04-25
    * bugfix to prevent copying go2 settings if source/target the same
=end
=begin
  v1.1.0 - 2025-02-01
    * add support for source/target game support
  v1.0.3 - 2025-01-31
    * bugfix in in alias requiring downcase for tablename
  v1.0.2 - 2025-01-31
    * bugfix in variable calling missing @ sign
  v1.0.1 - 2025-01-31
    * add support for character aliases copy
  v1.0.0 - 2025-01-31
    * initial release

=end

require 'fileutils'
require 'sqlite3'

#------------------------------------------------------------------------------#
# Settings
#------------------------------------------------------------------------------#

@settings_source = XMLData.name
@settings_target = XMLData.name
@game_source = 'GSPlat'
@game_target = 'GSIV'

if script.vars[0] =~ /\-?\-?from(?:[=: ])(\w+)/i
  @settings_source = $1.downcase.capitalize
end

if script.vars[0] =~ /\-?\-?to(?:[=: ])(\w+)/i
  @settings_target = $1.downcase.capitalize
end

if script.vars[0] =~ /\-?\-?source(?:[=: ])([\w\d]+)/i
  case $1
  when /gsplat/i
    @game_source = 'GSPlat'
  when /gsiv|gs4|gs3/i
    @game_source = 'GSIV'
  when /gsf/i
    @game_source = 'GSF'
  when /gst/i
    @game_source = 'GST'
  end
end

if script.vars[0] =~ /\-?\-?target(?:[=: ])([\w\d]+)/i
  case $1
  when /gsplat/i
    @game_target = 'GSPlat'
  when /gsiv|gs4|gs3/i
    @game_target = 'GSIV'
  when /gsf/i
    @game_target = 'GSF'
  when /gst/i
    @game_target = 'GST'
  end
end

echo("Existing alias.db3 backed up to #{File.join(DATA_DIR, "alias.db3-FROM-#{@game_source}_#{@settings_source}-TO-#{@game_target}_#{@settings_target}-#{Time.now.to_i}.bak")}")
FileUtils.cp(File.join(DATA_DIR, 'alias.db3'), File.join(DATA_DIR, "alias.db3-FROM-#{@game_source}_#{@settings_source}-TO-#{@game_target}_#{@settings_target}-#{Time.now.to_i}.bak"))
echo("Existing lich.db3 backed up to #{File.join(DATA_DIR, "lich.db3-FROM-#{@game_source}_#{@settings_source}-TO-#{@game_target}_#{@settings_target}-#{Time.now.to_i}.bak")}")
FileUtils.cp(File.join(DATA_DIR, 'lich.db3'), File.join(DATA_DIR, "lich.db3-FROM-#{@game_source}_#{@settings_source}-TO-#{@game_target}_#{@settings_target}-#{Time.now.to_i}.bak"))

if @game_source == @game_target
  @copy_go2 = false
else
  @copy_go2 = true
end

@delete_existing = true
@delete_uservars = true

@scope_source = "#{@game_source}:#{@settings_source}"
@scope_target = "#{@game_target}:#{@settings_target}"

respond "-" * 64
respond "copy from: #{@scope_source}"
respond "copy to:   #{@scope_target}"
respond "will overwrite existing UserVars, Script GameSettings/CharSettings/Settings, and character aliases for #{@scope_target}"
respond "!!! pausing script.  Unpause if input shown above is correct. "
respond "-" * 64
pause_script

#------------------------------------------------------------------------------#
# open the lich.db3
#------------------------------------------------------------------------------#
db = SQLite3::Database.open File.join(DATA_DIR, "lich.db3")

#------------------------------------------------------------------------------#
# Update Alias character settings
#------------------------------------------------------------------------------#
Script.run("alias", "stop")
alias_db = SQLite3::Database.open File.join(DATA_DIR, "alias.db3")
@alias_source = "#{@game_source.downcase}_#{@settings_source.downcase}".gsub(/[^a-z_]/, '').encode('UTF-8')
@alias_target = "#{@game_target.downcase}_#{@settings_target.downcase}".gsub(/[^a-z_]/, '').encode('UTF-8')
alias_db.execute("DROP TABLE IF EXISTS #{@alias_target};")
alias_db.execute("CREATE TABLE IF NOT EXISTS #{@alias_target} (trigger TEXT NOT NULL, target TEXT NOT NULL, UNIQUE(trigger));")
sql = "
  INSERT INTO #{@alias_target} (trigger, target)
  SELECT trigger, target FROM #{@alias_source};
"
begin
  alias_db.execute(sql)
rescue SQLite3::BusyException
  sleep 0.1
  retry
end
respond "#{@alias_source} aliases copied to #{@alias_target}"
alias_db.close
Script.run("alias")

#------------------------------------------------------------------------------#
# Delete script settings
#------------------------------------------------------------------------------#
if @delete_existing
  sql = "delete from script_auto_settings where scope='#{@scope_target}'"
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@scope_target} script settings deleted"
end
#------------------------------------------------------------------------------#
# overwrite uservars
#------------------------------------------------------------------------------#
if @delete_uservars
  sql = "delete from uservars where scope='#{@scope_target}'"
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@scope_target} uservars deleted"
  sql = "
    insert into uservars (hash, scope)
    select hash, '#{@scope_target}' from uservars
    where scope='#{@scope_source}'
  "
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@scope_source} uservars copied to #{@scope_target}"
  # db.close
end
#------------------------------------------------------------------------------#
# copy script settings
#------------------------------------------------------------------------------#
sql = "
  insert into script_auto_settings (script,scope,hash)
  select script, '#{@scope_target}', hash
  from script_auto_settings as sas
  where scope='#{@scope_source}'
    and not exists (
      select 1
      from script_auto_settings i
      where i.script = sas.script
        and i.scope  ='#{@scope_target}'
    )
"
begin
  db.execute(sql)
rescue SQLite3::BusyException
  sleep 0.1
  retry
end
respond "#{@scope_source} script settings copied to #{@scope_target}"
#------------------------------------------------------------------------------#
# overwrite global go2
#------------------------------------------------------------------------------#
if @copy_go2
  sql = "delete from script_auto_settings where script='go2' and scope in ('#{@game_target}:','#{@game_target}')"
  begin
    db.execute(sql)
  rescue SQLite3::BusyException
    sleep 0.1
    retry
  end
  respond "#{@game_target} go2 settings deleted"
end
#------------------------------------------------------------------------------#
# insert source go2 if test go2 doesn't exist
#------------------------------------------------------------------------------#
if @copy_go2
  begin
    sql = "select 1
        from script_auto_settings
        where scope='#{@game_target}' and script='go2'
        "
    test_go2_settings_exist = db.get_first_value(sql) # null = nil
    if test_go2_settings_exist.nil?
      sql = "
      insert into script_auto_settings (script, hash, scope)
      select 'go2', hash, '#{@game_target}:' from script_auto_settings
      where scope='#{@game_source}:' and script='go2'
        and not exists (
          select 1
          from script_auto_settings
          where scope='#{@game_target}:' and script='go2'
          )
    "
      begin
        db.execute(sql)
      rescue SQLite3::BusyException
        sleep 0.1
        retry
      end
      sql = "
      insert into script_auto_settings (script, hash, scope)
      select 'go2', hash, '#{@game_target}' from script_auto_settings
      where scope='#{@game_source}' and script='go2'
        and not exists (
          select 1
          from script_auto_settings
          where scope='#{@game_target}' and script='go2'
          )
    "
      begin
        db.execute(sql)
      rescue SQLite3::BusyException
        sleep 0.1
        retry
      end
      respond "#{@game_source} go2 settings copied to #{@game_target}"
    end
  end
end
#------------------------------------------------------------------------------#
# done
#------------------------------------------------------------------------------#
db.close
