=begin

warcampfind...
This is just a modified version of Tillmen's wander, set to find warcamps instead
of NPC's.  It will remember what rooms it has already checked.
Use it like you would wander (only with word warcampfind), so set boundaries,
put your butt in an area within the boundaries, and do ;warcampfind

Shattered is where it's at folks. - casis

=end

Settings.load
Settings['warboundary'] ||= Array.new

@checked_rooms = Array.new
def msg(text)
  stringArray = Array.new
  custPrefix = [':.   ..',':..  ..',':... ..',':......']
  stringArray = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
  if $fake_stormfront
    preface_text = "\034GSL\r\n "
    end_text = "\034GSM\r\n "
  else
    preface_text = "<pushBold\/>"
    end_text = "<popBold\/>"
  end
  stringArray.each { |line|
    puts "#{preface_text}#{custPrefix[rand(custPrefix.size)]} #{line.gsub('\n','')}#{end_text}"
    }  
end
def check_room_for_warcamp
    if @checked_rooms.include?(Room.current.id)
        return false
    else
        exec_cmd = "sigil of loc"
        expire_after=1
        not_warm = true
	waitrt?
	waitcastrt?
        room_has_warcamp = false
	start_time = Time.now
	fput exec_cmd
	rline = Array.new
	until room_has_warcamp || Time.now > start_time+expire_after
	   rline.push(get?)
	end
	rline = rline.join(sep=" ")
	if rline =~ /shimmering patch of air/
	    room_has_warcamp = true
	    msg "*"
	    msg "*"
	    msg "*  Warcamp found!  Room: #{Room.current.id}"
	    msg "*"
	    msg "*"
	elsif rline !~ /faint interference/
	   msg "** Warcamp is NOT nearby, you may want to look elsewhere."
	end
        @checked_rooms.push(Room.current.id)if !room_has_warcamp
        room_has_warcamp
    end
end

warcampfind = proc {
	$warcampfind_last_room ||= nil
	room = Room.current
	next_room_options = room.wayto.keys - Settings['warboundary']
	if next_room_options.length > 1
		next_room_options.delete_if { |option| option == $warcampfind_last_room }
	end
	next_room = next_room_options[rand(next_room_options.length)]
	way = room.wayto[next_room]
	if way.class == String 
		move(way)
	else
		way.call
	end
	$warcampfind_last_room = room.id.to_s
}

if script.vars[1] =~ /help/i
	msg ' '
	msg ' ;warcampfind add             adds the current room to the boundary list'
	msg ' ;warcampfind add <room id>   adds the given room id to the boundary list'
	msg ' ;warcampfind del             deletes the current room to the boundary list'
	msg ' ;warcampfind del <room id>   deletes the given room id to the boundary list'
	msg ' ;warcampfind list            shows saved boundaries'
	msg ' ;warcampfind 		  starts searching for warcamps (um do this IN the boundaries)'
        
elsif script.vars[1] =~ /^add$|^set$/i
	if script.vars[2] and script.vars[2] =~ /^[0-9]+$/
		Settings['warboundary'].push(script.vars[2])
		Settings.save
		echo "room #{script.vars[2]} has been added to the boundary list"
	elsif room = Room.current
		Settings['warboundary'].push(room.id.to_s)
		Settings.save
		echo "this room (#{room.id}) has been added to the boundary list"
	else
		echo 'current room is uknown'
	end
elsif script.vars[1] =~ /^del(?:ete)?$|^rem(?:ove)?$/i
	if script.vars[2] and script.vars[2] =~ /^[0-9]+$/
		if Settings['warboundary'].delete(script.vars[2])
			echo "room #{script.vars[2]} has been removed from the boundary list"
			Settings.save
		else
			echo "room #{script.vars[2]} was not found in the boundary list"
		end
	elsif room = Room.current
		if Settings['warboundary'].delete(room.id.to_s)
			echo "this room (#{room.id}) has been removed from the boundary list"
			Settings.save
		else
			echo "this room (#{room.id}) was not found in the boundary list"
		end
	else
		echo 'current room is uknown'
	end
elsif script.vars[1] =~ /^list$/i
	respond
	if Settings['warboundary'].empty?
		respond '       boundaries: none'
	else
		respond "       boundaries: #{Settings['warboundary'].join(', ')}"
	end
	respond
elsif script.vars.empty?
	before_dying { Settings.save}
	group = checkpcs.to_a
        warcampfound = false
	loop {
		warcampfind.call
		sleep 0.1
		#
		# remove names from the group list if they didnt follow you
		#
		group = group & checkpcs.to_a
		#
		# stop to look for warcamp
		#
                break if check_room_for_warcamp
	}
else
	group = checkpcs.to_a
        warcampfound = false
	loop {
		warcampfind.call
		sleep 0.1
		#
		# remove names from the group list if they didnt follow you
		#
		group = group & checkpcs.to_a
                #
		# stop to look for warcamp
		#
                break if check_room_for_warcamp
	}
end
