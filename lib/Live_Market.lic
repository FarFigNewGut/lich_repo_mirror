=begin

    Live_Market by: Spifal

    - This script is meant to aid in merchanting silvers and services
    - Only set up for selling silvers and services for now but will add support for items eventualy
    - Only sellers need to run the script
    - Buyers can just chat one of the triggers on the merchant channel to get a list of whats available from anyone running Live_Market
      - Triggers are "!silver" "!enchanting" "!ensorcell" "!tatoo" "!bardunlock"
      - Example ;chat on merchant !silver
    - The script will use the settings you put in and automate messages on the merchant channel
      - There is a tab for each service, leave it blank and the script will not advertise that service
    - The script will watch the merchant channel for anyone to type one of the triggers and automaticly msg them with your offer.
    - Plan on adding other triggers like "!ohe" or "!fixstat" etc later on for buying and selling items

    - Special thanks to Xanlin for helping out with the code in here, total pro

          author: Spifal
            name: Live_Market.lic
    contributers: Xanlin
            tags: Merchant
         version: 0.1 (beta)
=end

@debug = false;
@script_name = script.name

UserVars.live_market ||= {};
UserVars.live_market["your_silver"]            = 0 if UserVars.live_market["your_silver"].nil?;
UserVars.live_market["your_silver_price"]      = 0 if UserVars.live_market["your_silver_price"].nil?;
UserVars.live_market["broadcast_delay"]        = 90 if UserVars.live_market["broadcast_delay"].nil?;
UserVars.live_market["your_essence"]           = 0 if UserVars.live_market["your_essence"].nil?;
UserVars.live_market["your_essence_price"]     = 0 if UserVars.live_market["your_essence_price"].nil?;
UserVars.live_market["enchanting_bonus"]       = 0 if UserVars.live_market["enchanting_bonus"].nil?;
UserVars.live_market["your_necro_weeks"]       = 0 if UserVars.live_market["your_necro_weeks"].nil?;
UserVars.live_market["your_necro_price"]       = 0 if UserVars.live_market["your_necro_price"].nil?;
UserVars.live_market["ensorcell_bonus"]        = 0 if UserVars.live_market["ensorcell_bonus"].nil?;
UserVars.live_market["your_ink_weeks"]         = 0 if UserVars.live_market["your_ink_weeks"].nil?;
UserVars.live_market["your_ink_price"]         = 0 if UserVars.live_market["your_ink_price"].nil?;
UserVars.live_market["max_tatoo_tier"]         = 0 if UserVars.live_market["max_tatoo_tier"].nil?;
UserVars.live_market["your_lkp"]               = 0 if UserVars.live_market["your_lkp"].nil?;
UserVars.live_market["your_lkp_price"]         = 0 if UserVars.live_market["your_lkp_price"].nil?;
UserVars.live_market["your_unlock_bonus"]      = 0 if UserVars.live_market["your_unlock_bonus"].nil?;
UserVars.live_market["only_join_live_market"]  = false if UserVars.live_market["only_join_live_market"].nil?;
UserVars.live_market["sell_silver"]            = false if UserVars.live_market["sell_silver"].nil?;
UserVars.live_market["sell_enchanting"]        = false if UserVars.live_market["sell_enchanting"].nil?;
UserVars.live_market["sell_ensorcell"]         = false if UserVars.live_market["sell_ensorcell"].nil?;
UserVars.live_market["sell_tatoo"]             = false if UserVars.live_market["sell_tatoo"].nil?;
UserVars.live_market["sell_bardunlock"]        = false if UserVars.live_market["sell_bardunlock"].nil?;
UserVars.live_market["lnet_delay"]             = 3 if UserVars.live_market["lnet_delay"].nil?;
UserVars.live_market["last_announcement_sent"] = 0 if UserVars.live_market["last_announcement_sent"].nil?;
UserVars.live_market["last_announcement"]      = "" if UserVars.live_market["last_announcement_sent"].nil?;

CharSettings.load
CharSettings['live_market_first_time_run']     = 0 unless CharSettings['live_market_first_time_run']
before_dying { CharSettings.save; };

settings = CharSettings.to_hash;

setup = proc {
  gtk_globals = Hash.new;
  gtk_locals = Hash.new;

  window = window_action = nil;
  
  Gtk.queue {
    ttips = Gtk::Tooltips.new.enable
    ttips_text = {
      'your_silver'             => "How much silver you're selling in millions",
      'your_silver_price'       => "Price per million you want to get",
      'broadcast_delay'         => "How long to wait between messages on the merchant channel in mins",
      'your_essence'            => "How much wizard essence you have to sell",
      'your_essence_price'      => "Price per essence point you want to get in silvers",
      'enchanting_bonus'        => "Your enchanting bonus",
      'your_necro_weeks'        => "How many weeks of necro energy you have to sell",
      'your_necro_price'        => "Price per week of necro energy you want to get in millions",
      'ensorcell_bonus'         => "Your ensorcell bonus",
      'your_ink_weeks'          => "How many ink weeks you have to sell",
      'your_ink_price'          => "Price per ink week you want to get in millions",
      'max_tatoo_tier'          => "Max tier tatoo you are able to do",
      'your_lkp'                => "How many song weeks you have to sell",
      'your_lkp_price'          => "Price per LKP you want to get in silvers",
      'your_unlock_bonus'       => "Your song unlock bonus",
      "only_join_live_market"   => "With this option checked, the script will not advertise on the merchant channel, it will only watch for the \"\!silver\" or other triggers to advertise",
    }

    gtk_globals['your_silver'] = Gtk::Entry.new.set_text(UserVars.live_market["your_silver"].to_s);
    gtk_globals['your_silver_price'] = Gtk::Entry.new.set_text(UserVars.live_market["your_silver_price"].to_s);
    gtk_globals['broadcast_delay'] = Gtk::Entry.new.set_text(UserVars.live_market["broadcast_delay"].to_s);
    gtk_globals['your_essence'] = Gtk::Entry.new.set_text(UserVars.live_market["your_essence"].to_s);
    gtk_globals['your_essence_price'] = Gtk::Entry.new.set_text(UserVars.live_market["your_essence_price"].to_s);
    gtk_globals['enchanting_bonus'] = Gtk::Entry.new.set_text(UserVars.live_market["enchanting_bonus"].to_s);
    gtk_globals['your_necro_weeks'] = Gtk::Entry.new.set_text(UserVars.live_market["your_necro_weeks"].to_s);
    gtk_globals['your_necro_price'] = Gtk::Entry.new.set_text(UserVars.live_market["your_necro_price"].to_s);
    gtk_globals['ensorcell_bonus'] = Gtk::Entry.new.set_text(UserVars.live_market["ensorcell_bonus"].to_s);
    gtk_globals['your_ink_weeks'] = Gtk::Entry.new.set_text(UserVars.live_market["your_ink_weeks"].to_s);
    gtk_globals['your_ink_price'] = Gtk::Entry.new.set_text(UserVars.live_market["your_ink_price"].to_s);
    gtk_globals['max_tatoo_tier'] = Gtk::Entry.new.set_text(UserVars.live_market["max_tatoo_tier"].to_s);
    gtk_globals['your_lkp'] = Gtk::Entry.new.set_text(UserVars.live_market["your_lkp"].to_s);
    gtk_globals['your_lkp_price'] = Gtk::Entry.new.set_text(UserVars.live_market["your_lkp_price"].to_s);
    gtk_globals['your_unlock_bonus'] = Gtk::Entry.new.set_text(UserVars.live_market["your_unlock_bonus"].to_s);
    gtk_locals["only_join_live_market"] = Gtk::CheckButton.new('Only join live market').set_active(UserVars.live_market["only_join_live_market"]);

    # Add tooltips
    ttips_text.each_pair { |widget,tip|
      if widget = gtk_globals[widget] || gtk_locals[widget]
        ttips.set_tip(widget,tip,'');
      end
    };

    # Primary Window
    window              = Gtk::Window.new;
    window.title        = "Spifal\'s Live Market";
    window.border_width = 3;
    window.resizable    = false;
    #window.resize(450, 300)

    # Notebooks for tabs at the top
    nb = Gtk::Notebook.new.set_show_border(true).set_tab_border(3);

    #
    # Notebook Pages
    #
    vb_pg1 = Gtk::VBox.new(false,1).set_border_width(3);
    vb_pg2 = Gtk::VBox.new(false,1).set_border_width(3);
    vb_pg3 = Gtk::VBox.new(false,1).set_border_width(3);
    vb_pg4 = Gtk::VBox.new(false,1).set_border_width(3);
    vb_pg5 = Gtk::VBox.new(false,1).set_border_width(3);

    #
    # Page 1, Silver
    #
    vb_pg1_1 = Gtk::VBox.new(false,1).set_border_width(3);
    fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<b>Silver Options</b>'));
    fr_pg1_1.add(vb_pg1_1);
    vb_pg1.pack_start(fr_pg1_1,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Amount to sell: ')),true);
    hb.pack_start(gtk_globals['your_silver'],false);
    vb_pg1_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Price per mil: ')),true);
    hb.pack_start(gtk_globals['your_silver_price'],false);
    vb_pg1_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Spam delay: ')),true);
    hb.pack_start(gtk_globals['broadcast_delay'],false);
    vb_pg1_1.pack_start(hb,false);
    
    hb = Gtk::HBox.new(false,1);
    hb.pack_start(gtk_locals['only_join_live_market'].set_width_request(145),false);
    vb_pg1_1.pack_start(hb,false);

    #
    # Page 2, Enchanting
    #
    vb_pg2_1 = Gtk::VBox.new(false,1).set_border_width(3);
    fr_pg2_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<b>Enchanting Options</b>'));
    fr_pg2_1.add(vb_pg2_1);
    vb_pg2.pack_start(fr_pg2_1,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Essence available: ')),true);
    hb.pack_start(gtk_globals['your_essence'],false);
    vb_pg2_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Price per essence: ')),true);
    hb.pack_start(gtk_globals['your_essence_price'],false);
    vb_pg2_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Enchanting bonus: ')),true);
    hb.pack_start(gtk_globals['enchanting_bonus'],false);
    vb_pg2_1.pack_start(hb,false);

    #
    # Page 3, Ensorcell
    #
    vb_pg3_1 = Gtk::VBox.new(false,1).set_border_width(3);
    fr_pg3_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<b>Ensorcell Options</b>'));
    fr_pg3_1.add(vb_pg3_1);
    vb_pg3.pack_start(fr_pg3_1,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Necro weeks available: ')),true);
    hb.pack_start(gtk_globals['your_necro_weeks'],false);
    vb_pg3_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Price per necro week: ')),true);
    hb.pack_start(gtk_globals['your_necro_price'],false);
    vb_pg3_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Ensorcell bonus: ')),true);
    hb.pack_start(gtk_globals['ensorcell_bonus'],false);
    vb_pg3_1.pack_start(hb,false);

    #
    # Page 4, Tatoos
    #
    vb_pg4_1 = Gtk::VBox.new(false,1).set_border_width(3);
    fr_pg4_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<b>Tatoo Options</b>'));
    fr_pg4_1.add(vb_pg4_1);
    vb_pg4.pack_start(fr_pg4_1,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Ink weeks available: ')),true);
    hb.pack_start(gtk_globals['your_ink_weeks'],false);
    vb_pg4_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Price per ink week: ')),true);
    hb.pack_start(gtk_globals['your_ink_price'],false);
    vb_pg4_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Max tatoo tier: ')),true);
    hb.pack_start(gtk_globals['max_tatoo_tier'],false);
    vb_pg4_1.pack_start(hb,false);

    #
    # Page 5, Bard song unlocks
    #
    vb_pg5_1 = Gtk::VBox.new(false,1).set_border_width(3);
    fr_pg5_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<b>Song unlock Options</b>'));
    fr_pg5_1.add(vb_pg5_1);
    vb_pg5.pack_start(fr_pg5_1,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Lore kill points available: ')),true);
    hb.pack_start(gtk_globals['your_lkp'],false);
    vb_pg5_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Price per LKP: ')),true);
    hb.pack_start(gtk_globals['your_lkp_price'],false);
    vb_pg5_1.pack_start(hb,false);

    hb = Gtk::HBox.new(false,1);
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Unlock bonus: ')),true);
    hb.pack_start(gtk_globals['your_unlock_bonus'],false);
    vb_pg5_1.pack_start(hb,false);

    nb.append_page(vb_pg1,Gtk::Label.new('Silver'));
    nb.append_page(vb_pg2,Gtk::Label.new('Enchanting'));
    nb.append_page(vb_pg3,Gtk::Label.new('Ensorcell'));
    nb.append_page(vb_pg4,Gtk::Label.new('Tatoo'));
    nb.append_page(vb_pg5,Gtk::Label.new('Song unlock'));

    # Save/Close buttons
    hb_saveclose = Gtk::HBox.new;
    save = Gtk::Button.new('_Save & Close');
    close = Gtk::Button.new('E_xit');

    save.signal_connect('clicked') { window_action = :save };
    close.signal_connect('clicked') { window_action = :done };

    hb_saveclose.pack_start(save,false);
    hb_saveclose.pack_start(close,false);

    # Primary VerticalBox to split up Notebook and Save/Close buttons
    vb_main = Gtk::VBox.new(false,5);
    vb_main.border_width = 3;

    vb_main.pack_start(nb,false);
    vb_main.pack_start(Gtk::Alignment.new(1,0,0,0).add(hb_saveclose),false);

    window.signal_connect('delete_event') { window_action = :exit };

    window.add(vb_main);
    window.show_all;
    window.keep_above = true; # On windows keep_above is required AFTER show_all
  }

  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
  undo_before_dying # Don't ask me what this does - I stripped it from Tillmen's code
  Gtk.queue { window.destroy }

  clean_entry = proc { |entry|
    entry.text = entry.text.strip
    if entry.text.empty?
      entry.text = nil
    end

    entry.text
  }

  if window_action == :save
    gtk_globals.each_pair { |option,widget|
      if widget.class == Gtk::CheckButton
        UserVars.live_market[option] = widget.active?
      elsif widget.class == Gtk::Entry
        UserVars.live_market[option] = clean_entry.call(gtk_globals[option]);
      else
        echo "error: unknown global widget #{option} [#{widget.class}]"
      end
    }

    gtk_locals.each_pair { |option,widget|
      if widget.class == Gtk::CheckButton
        #echo "#{option} #{widget.active?}"
        UserVars.live_market[option] = widget.active?
      elsif widget.class == Gtk::Entry
        UserVars.live_market[option] = clean_entry.call(gtk_globals[option]);
      else
        echo "error: unknown global widget #{option} [#{widget.class}]"
      end
    }

  else
    echo 'closed without saving'
  end
};

#------------------------------------------------------------------------------#
# methods
#------------------------------------------------------------------------------#

def self.int_to_time(var);return (var.is_a? Integer) ? Time.at(var.to_i).strftime("%Y-%m-%d %H:%M") : var; end;

def self.my_silver_price();return (UserVars.live_market["your_silver"].to_f*UserVars.live_market["your_silver_price"].to_f);end;

def self.can_announce();
  return true if !UserVars.live_market["only_join_live_market"] and (Time.now.to_i - UserVars.live_market["last_announcement_sent"]) > (UserVars.live_market["broadcast_delay"].to_f*60).to_i
  return false;
end;

def self.announce();
  message_key, message = self.get_next_message
  UserVars.live_market["last_announcement_sent"] = Time.now.to_i;;
  UserVars.live_market["last_announcement"] = message_key;
  channel = "merchant"
  send_to_script "lnet", "chat on #{channel} #{message}" 
end;

def self.get_last_message_index();
  last_index = @messages.keys.index(UserVars.live_market["last_announcement"]);
  last_index = 0 if last_index.nil?;
  return last_index;
end

def self.get_next_message();
  next_index = self.get_last_message_index() - 1;
  key = @messages.keys[next_index];
  return key, @messages[key];
end

def self.notify(person,message_key);
  message = @messages[message_key]
  random_pause = rand(3)
  echo "pauseing #{random_pause} seconds to not bombard the lnet server" if random_pause > 0
  pause random_pause.to_i
  send_to_script "lnet", "chat to #{person} #{message}"
end;

#------------------------------------------------------------------------------#
# messages
#------------------------------------------------------------------------------#

silver_message = "Selling #{UserVars.live_market["your_silver"]}m silver for $#{self.my_silver_price} PayPal \($#{UserVars.live_market["your_silver_price"]}\/mil\)\.  Send a pm if interested\.";
enchanting_message = "Selling up to #{UserVars.live_market["your_essence"]} wizard essence\, #{UserVars.live_market["enchanting_bonus"]} bonus\, #{UserVars.live_market["your_essence_price"]} silver\/essence\.  Send a pm if interested\."
ensorcell_message = "Selling up to #{UserVars.live_market["your_necro_weeks"]} weeks of necrotic energy for ensorcelling\, #{UserVars.live_market["ensorcell_bonus"]} bonus\, #{UserVars.live_market["your_necro_price"]} mil\/necro week\.  Send a pm if interested\."
tatoo_message = "Selling a T#{UserVars.live_market["max_tatoo_tier"]} monk tatoo, #{UserVars.live_market["your_ink_price"]} mil\/ink week\.  Send a pm if interested\."
bard_unlock_message = "Selling bard loresong unlocks\, #{UserVars.live_market["your_lkp"]} LKP available\, #{UserVars.live_market["your_lkp_price"]} silver\/LKP\.  Send a pm if interested\."

@messages = {};
@messages["silver"] = silver_message if UserVars.live_market["your_silver"].to_i > 0;
@messages["enchanting"] = enchanting_message if UserVars.live_market["your_essence"].to_i > 0;
@messages["ensorcell"] = ensorcell_message if UserVars.live_market["your_necro_weeks"].to_i > 0;
@messages["tatoo"] = tatoo_message if UserVars.live_market["your_ink_weeks"].to_i > 0;
@messages["bardunlock"] = bard_unlock_message if UserVars.live_market["your_lkp"].to_i > 0;

echo @messages.inspect if @debug
#------------------------------------------------------------------------------#
# madness
#------------------------------------------------------------------------------#

if script.vars[1] =~ /^setup$|^options$/i or !CharSettings['live_market_first_time_run']
    CharSettings['live_market_first_time_run'] = true
    setup.call
    exit;
end

echo "Live Market by\: Spifal"
echo "Last announcement was: #{self.int_to_time(UserVars.live_market["last_announcement_sent"])}"

@last_message_sent = Time.now.to_i-UserVars.live_market["lnet_delay"].to_i;
@last_announcement_sent = UserVars.live_market["last_announcement_sent"].to_i;
@last_notify_person = nil
@last_notify_key = nil
@notify_list = [];

#starting a notifier thread
Thread.abort_on_exception = true; #doesn't work in this implementation, but is a nice sentiment.
notifier = Thread.new {;
  Thread.current[:name] = @script_name + "$thread:notifier";
  begin;
    loop {;
      if @notify_list.size > 0 and Time.now.to_i > (@last_message_sent + UserVars.live_market["lnet_delay"].to_i);
        request = @notify_list.pop;
        person = request[0]
        message_key = request[1]
        echo "request: #{request.inspect}" if @debug
        if person == @last_notify_person and (Time.now.to_i - @last_message_sent) < 10
          echo "already sent to #{person}, so we will skip them" if @debug
        else
          echo "notify requestor:#{person}" if @debug
          self.notify(person,message_key);
        end;
        @last_message_sent = Time.now.to_i;
        @last_notify_person = person;
        @last_notify_key = message_key;
      end;
      if self.can_announce();
        self.announce();
      end
      sleep 1;
      };
  end;
};

#watching game lines
person_pattern = /^\[Merchant\]\-GSIV\:(?<person>.*)\: \"\!(?<key>#{@messages.keys.join('|')})\"/i;
loop {
  line = get;
  if m = person_pattern.match(line);
    person = m[:person]
    message_key = m[:key]
    @notify_list << [person, message_key] if !@notify_list.include?([person,message_key]);
    echo "notify #{person}, requesting: #{message_key}" if @debug;
    m = nil;
  end;
};
