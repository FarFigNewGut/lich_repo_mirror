#Gibreficul's version of Shaelun's PURE.LIC script.
# Will purify the contents of your container with 1004 (purification song), while being conscious of mana and checking for orbs/rechargables; defaults to stopping at a 'safe' point, but enter 'full' as the first command line variable and it will go until the gem shatters or is fully purified.
# Can also transfer all recognized gems from containers to another container.  For full usage info, start the script with the `help' command line variable (as in type `;pure help').
#This script has been modified from it's original version by Gibreficul and shared only because certain critical issues have been fixed.
#Certain things have been fixed, such as singing to a non-gems
#The bulk of the work (I'd say 99.999%) was done by Shaelun, so credit where due.  Thank you.
#May I suggest, for empaths, healblown2.lic for healing bards who are purifying gems.
silence_me
gemdb = [ "jade", "spherine", "egg", "thunderstone", "faenor-bloom", "star ruby", "aetherstone", "agate",  "azurite", "beryl", "bloodjewel", "bloodstone", "bluerock", "caederine", "cordierite", "deathstone", "doomstone", "dreamstone", "eostone", "firestone", "galena", "geode", "hyacinth", "onyx", "pyrite", "peridot", "rhimar", "riftshard", "riftstone", "rosepar", "wyrdshard", "spinel", "shard", "faenor", "blazestar", "despanal", "feystone", "diamond", "emerald", "ruby", "pearl", "sapphire", "opal", "jacinth", "garnet", "moonstone", "stone", "topaz", "gem", "coral", "sunstone", "starstone", "quartz", "heliodor", "glimaerstone", "carbuncle", "turquoise", "chalcedony", "tourmaline", "obsidian", "zircon", "amethyst",  "amber","lazuli","mithril-bloom","rhimar-bloom","ivory" ]

if script.vars[1] =~ /\btransfer\b/i
	script.vars[2].split(',').each { |from_container|
		fput("look in my #{from_container}").scan(/\b(?:#{gemdb.join('|')})(?=,|\.|\sand)/).each { |gem|
			if gem =~ /lazuli/
			gem = "lapis"
			end
			fput "take my #{gem} from my #{script.vars[2]}"
			fput "put my #{gem} in my #{script.vars[3]}"
#			fput "drop my #{gem}" if(checkright == gem or checkleft = gem)
		}
	}
	exit
end

loresong = " so damn bright and true;Tell me your purpose before i fucking sell you"

if script.vars.find { |val| val =~ /\bhelp\b/i }
	respond("Syntax:   ;pure (container) (done_container) (orb_container)")
	echo
	respond("You can also define your 'lootsack', 'gemsack' and 'puregemsack' containers (type ';settings' for info).")
	respond("If you don't specify a container for orb gems, they won't be separated.")
	echo
	respond("You can also enter:  #{$clean_lich_char}pure transfer (from) (to)  to transfer any gems from (from) container to (to) container.")
	respond "Additionally, you can specify multiple containers to transfer from by separating them with commas (e.g. `#{$clean_lich_char}pure transfer cloak,sack pouch')."
	exit
end

unless  (script.vars.empty? || script.vars[1] =~ /full/i)
	if (Lich.lootsack.empty? or Lich.gemsack.empty?)
		unless script.vars[2]
			echo("Error! You must either have your 'lootsack'/'gemsack' settings defined, or provide the container names on the command line!")
			echo("Syntax:   ;pure (container) (done_container) (orb_container)")
			echo("If the container for orb gems is omitted, they'll be put in whatever container you provide for 'done_container'")
			exit
		end
	end
	script.vars.shift
	lootsack = script.vars.shift
	gemsack = script.vars.shift
	orbsack = script.vars.shift
	if orbsack.nil? then orbsack = gemsack.dup end
else
	script.vars.shift
#	lootsack = script.vars.shift
#	gemsack = script.vars.shift
#	orbsack = script.vars.shift
	lootsack = Lich.lootsack.clone
	gemsack = Lich.gemsack.clone
	orbsack = Lich.puregemsack.clone
	if orbsack.nil? then orbsack = gemsack.dup end
end

if running? "closecontainers"
	before_dying {
		unpause_script "closecontainers" if Script.find("closecontainers").paused
	}
	pause_script "closecontainers"
end

fput "look in my #{lootsack}"
contents = waitfor("In the .+ you see").gsub(/ and (?:an|a|some)/, ',')

# Ignore glowing essence shards
contents.gsub!("a glowing essence shard", '')

gems = contents.scan(/\b(?:#{gemdb.join('|')})(?=,|\.)/)
result = String.new
close_when_done = false
numbershattered = 0
startnumber = gems.length
madeorb = false
tick = nil; tock = nil
time_total = 0
gems.length.times {
	unless tock.nil?
		time_total += tock - tick
		avg_time = time_total.to_f / (startnumber - gems.length).to_f
	end
	tick = Time.now.to_f
	if time_total.nonzero?
		est_time_left = (avg_time * gems.length.to_f) / 60.00
		est_min = ' (estimated time left is ' + est_time_left.truncate.to_s; est_sec = ((est_time_left % 1) * 0.60).to_s.sub(/.*\.(\d\d).*/, '\1')
	else
		est_min = ' (estimated time left is ??'; est_sec = '??'
	end
	if gems.length > 1
		respond("#{gems.length} gems left" + est_min + ":" + est_sec + ').')
	else
		respond("#{gems.length} gem left" + est_min + ":" + est_sec + ').')
	end
	gem = gems.shift
	if gem =~ /lazuli/
		gstore = "lapis lazuli"
		gem = "lapis"
	else
		gstore = gem.dup
	end
	orbcheck = true ; oncemore = false
#In my own version, Kristianna sends mana on a script when my bard fidgets at her, and is done by the commented out line below.
#	fput "fidget Kristianna" if checkmana < 9
	wait_until('Waiting on mana...') { mana(4) }
	loresing = false
	fput "take my #{gem} from my #{lootsack}"
	until result =~ /what were you|cannot|must be holding|shatter|song misfires/
#In my own version, Kristianna sends mana on a script when my bard fidgets at her, and is done by the commented out line below.i
#		fput "fidget Kristianna" if checkmana < 9
		wait_until('Waiting on mana...') { mana(4) }
		fput 'prep 1004' if mana(4)
		fput "cast at my #{gem}" if mana(4)
		result = matchwait("turn as the very essence","gem becomes more perfect","shatter","crack","must be holding","what were you","appearing smoother and more pure", "improves somewhat","cannot be", "Sing Roundtime",'Spell Hindrance',"song misfires")
		if script.vars.first =~ /full/i
			if result =~ /cannot/
				(loresing = true) if orbcheck
				break
			elsif result =~ /crack/
				orbcheck = false
			end
		else
			if result =~ /more perfect|what were you|improves somewhat|crack|shatter|cannot be|must be holding|smoother and more pure in color/
				nextline = get
				if (nextline =~ /very essence/) then madeorb = true; break end
				if result =~ /smoother and more pure in color/
					if oncemore
						oncemore = false
						break
					else
						oncemore = true
					end
				end
				(loresing = true) if (result =~ /cannot be/)
				(numbershattered += 1) if (result =~ /shatter/)
				if result =~ /crack|somewhat|What were|cannot|must be holding|song misfires/ then break end
			end
		end
		sleep 3
	end
	if loresing
#In my own version, Kristianna sends mana on a script when my bard fidgets at her, and is done by the commented out line below.
#		fput "fidget Kristianna" if checkmana < 9
		wait_until('Waiting on mana...') { mana(4) }
		fput("loresing " + gstore + loresong) if mana(4)
		result = waitfor("pulse", "pulses", "draw power", "gem of some kind")
		if result =~ /pulse/
			echo("*** THIS GEM IS MAGE RECHARGABLE ***")
			exit
		end
		waitrt?
		fput "put my #{gem} in my #{orbsack}"
	elsif madeorb
		madeorb = false
		fput "put my #{gem} in my #{orbsack}"
		sleep 2.5
	else
		fput("put my #{gem} in my #{gemsack}") unless (result =~ /shatter/)
		sleep 2.5
		wait_until('Waiting on mana...') { mana(4) }
	end
	unless result =~ /shatter/
		if waitfor('closed!', 'You put', 'what\?', 'could not find') =~ /closed!/
			fput "open my #{gemsack}"
			fput "put my #{gem} in my #{gemsack}"
			close_when_done = true
		end
	end
	result = String.new
	tock = Time.now.to_f
}

if close_when_done
	fput "close my #{gemsack}"
end
respond ""
if startnumber == 0
	echo("Did not recognize any gems in your container")
else
	echo("Purified #{startnumber - numbershattered} #{if (startnumber - numbershattered) == 1 then 'gem' else 'gems' end}; #{numbershattered} #{if numbershattered == 1 then 'gem was' else 'gems were' end} shattered (sung to #{startnumber} total)")
end
