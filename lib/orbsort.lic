=begin
--------------------------------------------------------------------------------
 Title : Orbsort
 Date : 11/07/2011
 Author : Oweodry

 Details :
  Just a quick & dirty script to sort orbs from a heap of gems. I've mixed up my
  gems a couple of times and had to split up my orbs. Or maybe you want to sort
  orbs of specific types/values, etc.

 Notes :
  - Oddball gem noun support was added without testing (should work though)
  - Starting container must be in right hand, no safety checks are made
  - Destination container must be worn
  - Value parameter is not optional. Use 0 if you want all orbs sorted.

 Updates :
  - 08/24/2011 Released
  - 11/07/2011 Changed containers to ids (fixes various container name issues).

 Thanks :
  - Grabbed a couple lines from Gib's scripts.

--------------------------------------------------------------------------------
=end

# Help text
if script.vars.find { |val| val =~ /\bhelp\b/i }
	respond("Sorts through gems in right hand container and places orbs of some value into a new (worn) container.")
	respond("Syntax:   ;orbsort (orb bag) (orb value)")
	exit
end

# ---------------------------------------------------------------------------- #
# Editable values (start)
#
gemlist=['diamond','emerald','ruby','sapphire']			# Gem nouns
gemname=['uncut diamond']				# Gem names
# Comprehensive noun/name list (from Gib's purify. I may have fixed a couple of items like nuggets or tusks or something):
gemlist = ["aetherstone", "agate", "amber", "ambergris", "amethyst", "azurite", "beryl", "blazestar", "bloodjewel", "bloodstone", "bluerock", "caederine", "carbuncle", "chalcedony", "coral", "cordierite", "deathstone", "despanal", "diamond", "diopside", "doomstone", "dreamstone", "^egg$", "emerald", "eostone", "faenor", "faenor\-bloom", "^fang$", "feystone", "firestone", "galena", "garnet", "^gem$", "geode", "glimaerstone", "heliodor", "hyacinth", "ivory", "jacinth", "jade", "jasper", "lapis", "lazuli", "mithril\-bloom", "moonstone", "obsidian", "onyx", "opal", "pearl", "peridot", "pyrite", "quartz", "rhimar", "riftshard", "riftstone", "rosepar", "ruby", "sapphire", "spherine", "spinel", "starstone", "^stone$", "sunstone", "thunderstone", "topaz", "tourmaline", "turquoise", "wyrdshard", "zircon"]
gemname = ["shimmertine shard","tigerfang crystal", "quartz crystal", "platinum fang", "gold dust","platinum dust", "glaes dust", "gold fang", "rock crystal"]
#
# Editable values (end)
# ---------------------------------------------------------------------------- #

# Set the variables
orbbag=GameObj.inv.find { |obj| obj.name =~ /#{variable[1]}/ }.id
orbval=variable[2].to_i

# Open up containers. Sometimes the GameObj contents array doesn't populate unless you actively look into the container.
multifput "open ##{GameObj.right_hand.id}","open ##{orbbag}","look in ##{GameObj.right_hand.id}"
# Uncomment if you don't want to be embarassed by the lame loresong
#fput "speak bard"

GameObj.right_hand.contents.each{ |obj|
	if gemlist.include?(obj.noun) or gemname.include?(obj.name)
		fput "get ##{obj.id}"; wait_until { checkmana > 10 }; waitrt?

		# Check if it's an orb
		fput "loresing ::##{obj.id} #{obj.noun}, bright as a star to be sure; Share your purpose if you're pure;"
		gempurity = matchtimeout(3, "is as a gem of some .*"); waitrt?

		# Orb:
		if gempurity =~ /you feel it trying to draw power from you/

			# Check the orb value
			echo "### Orb gem, checking value"
			fput "loresing ::##{obj.id} #{obj.noun}, sparkling, shining, true; Reveal to me your value;"
			gemvalue = matchtimeout(3, "worth about .* silvers"); waitrt?

			# String to int workaround with gem value
			# Ganked this from Gib's purify script. Git 'r done!
			newgem = gemvalue.split
			newgemvalue = newgem[15]
			newgemvalue = (newgemvalue.delete(",")).to_i
			echo "#{newgemvalue}"

			# Orb is valuable enough
			if newgemvalue > orbval
				echo "### Value is sufficient, putting in orb bag"
				fput "put ##{obj.id} in ##{orbbag}"

			# Orb is too cheap
			else
				echo "### Value isn't sufficient"
				fput "put ##{obj.id} in ##{GameObj.right_hand.id}"
			end

		# Non-orb:
		else
			echo "### Not an orb"
			fput "put ##{obj.id} in ##{GameObj.right_hand.id}"
		end

	end
}
