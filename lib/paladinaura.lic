=begin

	Name: paladinaura
	Author: Demandred
	Version: 2025.03.08
	Tags: paladin, upkeep, auras
	
	Will let you set an aura to upkeep and try to make sure it's maintained through death, dispel, etc..

	Set UserVars.paladin_aura to whichever aura you want to maintain. Easy.

	Sets the var to Divine Shield by default.

=end

#hide_me

unless Spell[1609].known?
	echo "You don't know any aura spells"
	echo "Exiting."
	exit
end

if scrip.vars[1] =~ /help/i
	Lich::Messaging.msg("info", "Just set the UserVars.paladin_aura var to whichever aura you wish to maintain. It can be any of: Divine Shield, 1609, Zealot, 1617, Fervor, and 1618. So for instance:")
	Lich::Messaging.msg("info", ";e echo UserVars.paladin_aura = 1609")
	Lich::Messaging.msg("info", "or")
	Lich::Messaging.msg("info", ";e echo UserVars.paladin_aura = \"Fervor\"")
	Lich::Messaging.msg("info", "or")
	Lich::Messaging.msg("info", ";e echo UserVars.paladin_aura = \"zealot\"")
	Lich::Messaging.msg("info", "or")
	Lich::Messaging.msg("info", ";e echo UserVars.paladin_aura = \"1617\"")
	Lich::Messaging.msg("info", "These are all viable. If it's the number it can have the quotes or not, if it's the words it needs to be wrapped in quotes. No need for case to be obeyed.")
	exit
end

UserVars.paladin_aura = 1609 if UserVars.paladin_aura.nil?
time_for_next_cast = Time.now

unpauseall = proc do
	for s in Script.running
		s.unpause if s.paused?
	end
end

pauseall = proc do
	for s in Script.running
		s.pause unless ( s == Script.self or s.to_s =~ /^(?:map|briefcombat|ecaster)$/ )
	end
	before_dying do
		unpauseall.call
	end
end

loop do

	# Changes permitted on the fly!
	if UserVars.paladin_aura.to_s =~ /Divine Shield|1609/i
		my_aura = [1609, "Divine Shield"]
	elsif UserVars.paladin_aura.to_s =~ /Zealot|1617/i
		my_aura = [1617, "Zealot"]
	elsif UserVars.paladin_aura.to_s =~ /Fervor|1618/i
		my_aura = [1618, "Fervor"]
	elsif UserVars.paladin_aura.to_s !~ /Divine Shield|1609|Zealot|1617|Fervor|1618/i
		Lich::Messaging.msg("bold", "You screwed up your aura choice. Fix UserVars.paladin_aura to include a proper choice then restart me. Divine Shield, 1609, Zealot, 1617, Fervor, and 1618 are your choices.")
		exit
	end

	sleep 1

	next if Effects::Spells.active?(my_aura[1])

	sleep 1 while dead? || Script.running?(/(?:e|use)herbs/) || (XMLData.injuries["head"]["wound"] >= 2 || XMLData.injuries["head"]["scar"] >= 2 || XMLData.injuries["rightEye"]["wound"] >= 2 || XMLData.injuries["rightEye"]["scar"] >= 2 || XMLData.injuries["leftEye"]["wound"] >= 2 || XMLData.injuries["leftEye"]["scar"] >= 2 || ( (XMLData.injuries["rightArm"]["wound"] >= 2 || XMLData.injuries["rightArm"]["scar"] >= 2) && (XMLData.injuries["leftArm"]["wound"] >= 1 || XMLData.injuries["leftArm"]["scar"] >= 1) ) || ( (XMLData.injuries["leftArm"]["wound"] >= 2 || XMLData.injuries["leftArm"]["scar"] >= 2) && (XMLData.injuries["rightArm"]["wound"] >= 1 || XMLData.injuries["rightArm"]["scar"] >= 1) ) || XMLData.injuries["rightArm"]["wound"] == 3 || XMLData.injuries["leftArm"]["wound"] == 3 || XMLData.injuries["rightArm"]["scar"] == 3 || XMLData.injuries["leftArm"]["scar"] == 3)

	sleep 1 until Spell[my_aura[0].to_i].affordable?
	sleep 1 until Time.now > time_for_next_cast
	pauseall.call
	waitrt?
	waitcastrt?
	sleep 1
	wait_for_recast = 0
	line = nil
	line = dothistimeout "incant #{my_aura[0].to_s}", 5, /your shield arm feels much more nimble|Your spirit is empowered with an overwhelming sense of determination and resolve|a divine force suddenly radiates around you|You must wait (\d+) seconds before switching auras\./
	if line =~ /You must wait (\d+) seconds before switching auras\./
		wait_for_recast = $1.to_i
		wait_for_recast += 1
		time_for_next_cast = Time.now + wait_for_recast
	elsif line =~ /your shield arm feels much more nimble|Your spirit is empowered with an overwhelming sense of determination and resolve|a divine force suddenly radiates around you/
		time_for_next_cast = Time.now + 61
	end
	unpauseall.call

end
