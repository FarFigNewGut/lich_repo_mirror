=begin
    perday.lic: automates use of 1x per-day items

	This script helps manage a bag of 1x/day items. See
    command-line help for more.

    author: Ponclast
       game: Gemstone
       tags: loot, magic, miu, duskruin
    version: 1.6

    changelog:
	    1.7 Minor fixes.
		1.6 Rewrote again, this time assuming use of FWI
		    labels.
        1.x Bunch of garbage that didn't work.
=end

$perday_test_mode = false
$perday_max_items = 20
$perday_day_in_seconds = 24 * 60 * 60

$adjs = [nil, 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelfth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth', 'eighteenth', 'nineteenth', 'twentieth']

def refresh_charges()
	if !$perday_refreshed_this_login
		echo "Illegal call of expire_charges before refresh_items! Bye!"
		exit
	end

	print "rc1: #{CharSettings['items']}\n\n" if $perday_test_mode

	now = Time.now.to_i()
	day_ago = now - $perday_day_in_seconds
#	if $perday_test_mode
#		day_ago = now - 120
#	end

	n = 0
	while n < CharSettings['num']
		item = CharSettings['items'][n]
		if item[:used] && item[:timestamp] < day_ago
			echo "Refreshing charge on item #{n}!"
			item[:used] = false
			item[:timestamp] = 0
			CharSettings['items'][n] = item
			CharSettings['cur_charges'] += 1
		end
		n += 1
	end

	print "rc2: #{CharSettings['items']}\n\n" if $perday_test_mode
end

# XXX This is a debugging function not hooked up to any command
def fix_charges()
	print "fc1: #{CharSettings['items']}\n\n"
	
	n = 0
	while n < CharSettings['num']
		fput "get my #{$adjs[CharSettings['num']]} #{CharSettings['noun']} from my #{CharSettings['container']}"
		wait_while{checkleft !~ /#{CharSettings['noun']}/ && checkright !~ /#{CharSettings['noun']}/}

		res = dothistimeout("read my #{CharSettings['noun']}", 5, /reads, "(\d+?)\."/)
		if res =~ /reads, "(\d+?)\."/
			i = $1.to_i()
		else
			echo "Wut1?"
			exit
		end

		item = CharSettings['items'][i - 1]

        dothistimeout("prep 405", 5, /Detection/)
		res = dothistimeout("cast my #{CharSettings['noun']}", 5, /hasn't been used|has used at least/)
		waitcastrt?
		if res =~ /hasn't been used/
			if item[:used]
				echo "Item #{i} isn't used but is marked as used! Fixing..."
				item[:used] = false
				item[:timestamp] = 0
			end
		elsif res =~ /has used at least/
			if !item[:used]
				echo "Item #{i} is used but is marked as unused! Fixing..."
				item[:used] = true
				item[:timestamp] = Time.now.to_i()
			end
		else
			echo "Wut2?"
		end

		CharSettings['items'][i - 1] = item

		fput "put my #{CharSettings['noun']} in my #{CharSettings['container']}"
		wait_while{checkleft =~ /#{CharSettings['noun']}/ || checkright =~ /#{CharSettings['noun']}/}
		n += 1
	end

	print "fc2: #{CharSettings['items']}\n\n"
end

def refresh_items(force=false)
	if !force && $perday_refreshed_this_login
		return
	end

	print "ri1: #{CharSettings['items']}\n\n" if $perday_test_mode
	
	seen = []
	n = 1
	while n <= CharSettings['num']
		res = dothistimeout("read my #{$adjs[n]} #{CharSettings['noun']} in my #{CharSettings['container']}", 5, /reads, "(\d+?)\."/)
		if res =~ /reads, "(\d+?)\."/
			i = $1.to_i()
			if seen.include? i
				echo "We already read the number #{i} on another item! Bye!"
				exit
			elsif i < 1 || i > CharSettings['num']
				echo "We read the number #{i}, which is out-of-bounds! Bye!"
				exit			
			end
			seen.append(i)
			CharSettings['items'][i - 1][:cur_num] = n
		else
			echo "Can't read label on your #{$adjs[n]} #{CharSettings['noun']}! Bye!"
			exit
		end
		n += 1
	end
	$perday_refreshed_this_login = true

	print "ri2: #{CharSettings['items']}\n\n" if $perday_test_mode
end

def init_items_array()
    CharSettings['cur_charges'] = CharSettings['num']
	CharSettings['items'] = []
	n = 0
	while n < CharSettings['num']
		item = {cur_num: 0, used: false, timestamp: 0}
		CharSettings['items'].append(item)
		n += 1
	end
end

def check_settings()
	if !CharSettings['container']
		echo "Please set 'container' first."
		exit
	elsif !CharSettings['noun']
		echo "Please set 'noun' first."
		exit
	elsif !CharSettings['verb']
		echo "Please set 'verb' first."
		exit
	elsif !CharSettings['num']
		echo "Please set 'num' first."
		exit
	elsif CharSettings['num'] > $perday_max_items
		echo "Max items is #{$perday_max_items}, please set again..."
		exit
	end
end

def use_charge()
	if CharSettings['cur_charges'] <= 0
		echo "You are out of charges! Too bad!"
		exit
	end

	echo "Attempting to use a charge, you have #{CharSettings['cur_charges']} left..."

	if checkleft && checkleft
		echo "Free a hand first!"
		exit
	end
	
	# find unused item
	n = 0
	while n < CharSettings['num']
		if !CharSettings['items'][n][:used]
			used_cur_num = CharSettings['items'][n][:cur_num]
			echo "Found item label #{n + 1}, container location #{used_cur_num}" if $perday_test_mode
			break
		end
		n += 1
	end
	
	if n == CharSettings['num']
		echo "Something went wrong, all items used, that's messed up?!?"
		exit
	end

    # get the item, use it, and put it back
	fput "get my #{$adjs[used_cur_num]} #{CharSettings['noun']} from my #{CharSettings['container']}"
	wait_while{checkleft !~ /#{CharSettings['noun']}/ && checkright !~ /#{CharSettings['noun']}/}

	done_trying = false
	while !done_trying
		res = dothistimeout("#{CharSettings['verb']} my #{CharSettings['noun']}", 5, /Wait (\d+?) sec|Cast Roundtime/)
		if res =~ /Wait (\d+?) sec/
			secs = $1.to_i
			echo "We were told to wait #{secs} seconds, sleeping..."
			sleep secs
		elsif res =~ /Cast Roundtime/
			echo "Successfully cast!"
			waitcastrt?
			done_trying = true
		else
			echo "We might have failed??? Oops"
			done_trying = true
		end
	end

	fput "put my #{CharSettings['noun']} in my #{CharSettings['container']}"
	wait_while{checkleft =~ /#{CharSettings['noun']}/ || checkright =~ /#{CharSettings['noun']}/}
	
	# Fixup the item array. The used item goes to the front of the list.
	print "uc1: #{CharSettings['items']}\n\n" if $perday_test_mode

	i = 0
	while i < CharSettings['num']
		old_cur_num = CharSettings['items'][i][:cur_num]
		if old_cur_num < used_cur_num
			CharSettings['items'][i][:cur_num] = old_cur_num + 1
		end
		i += 1
	end

	CharSettings['items'][n][:cur_num] = 1
	CharSettings['items'][n][:used] = true
	CharSettings['items'][n][:timestamp] = Time.now.to_i()

	print "uc2: #{CharSettings['items']}\n\n" if $perday_test_mode

	CharSettings['cur_charges'] -= 1
	echo "Successfully used a charge (we hope)!"
end

if script.vars[1].downcase == 'list'
	output = "perday.lic\n"
    output.concat "   container:       #{CharSettings['container']}\n"
    output.concat "   noun:            #{CharSettings['noun']}\n"
    output.concat "   verb:            #{CharSettings['verb']}\n"
    output.concat "   num:             #{CharSettings['num']}\n"
    respond output
elsif script.vars[1].downcase == 'set'
    if (script.vars[2].downcase == 'container') and script.vars[3]
		CharSettings['container'] = script.vars[3]
		echo 'Setting saved.'
	elsif (script.vars[2].downcase == 'noun') and script.vars[3]
		CharSettings['noun'] = script.vars[3]
		echo 'Setting saved.'
	elsif (script.vars[2].downcase == 'verb') and script.vars[3]
		CharSettings['verb'] = script.vars[3]
		echo 'Setting saved.'
	elsif (script.vars[2].downcase == 'num') and script.vars[3]
		num = script.vars[3].to_i()
		if num > $perday_max_items
			echo "Max items is #{$perday_max_items}, try again..."
			exit
		end
		CharSettings['num'] = num
		init_items_array()
		echo 'Setting saved.'
	else
		echo "You're doing it wrong; try #{$clean_lich_char}#{script.name} help."
	end
elsif script.vars[1].downcase == 'charges'
	check_settings()
	refresh_items()
	refresh_charges()
	echo "Number of current charges is #{CharSettings['cur_charges']}."
elsif script.vars[1].downcase == 'use'
	check_settings()
	refresh_items()
	refresh_charges()
	echo "Number of current charges is #{CharSettings['cur_charges']}."
	use_charge()
elsif script.vars[1].downcase == 'refresh'
	check_settings()
	refresh_items(true)
	refresh_charges()
elsif script.vars[1].downcase == 'forget'
	check_settings()
	init_items_array()
	refresh_items(true)
	echo "Successfully forgot info about used charges!"
else
	output = "perday.lic\n\n"
	output.concat "This script helps manage a bag of 1x/day items. You must set all four variables before first use.\n"
	output.concat "It remembers how many charges have been used and when. You must first label each item using a FWI\n"
	output.concat "paper label (see https://gswiki.play.net/Label). Each label should just be a number from 1 to n, \n"
	output.concat "where n is the number of items.\n\n"
	output.concat "setup:\n"
	output.concat "   #{$clean_lich_char}#{script.name} set container <container>   Where the 1x/day items live.\n"
	output.concat "   #{$clean_lich_char}#{script.name} set noun <noun>             Noun of the 1x/day items.\n"
	output.concat "   #{$clean_lich_char}#{script.name} set verb <verb>             Activator verb for the items.\n"
	output.concat "   #{$clean_lich_char}#{script.name} set num <integer>           Number of items in the container (max 20).\n"
	output.concat "\n"
	output.concat "commands:\n"
	output.concat "   #{$clean_lich_char}#{script.name} list                        Show current settings.\n"
	output.concat "   #{$clean_lich_char}#{script.name} charges                     Prints how many charges total are left.\n"
	output.concat "   #{$clean_lich_char}#{script.name} use                         Uses one of the charges, if any are left.\n"
	output.concat "   #{$clean_lich_char}#{script.name} refresh                     Double-checks order of items in container.\n"
	output.concat "   #{$clean_lich_char}#{script.name} forget                      Forgets all info about used charges (caution!).\n"
	respond output 
end
