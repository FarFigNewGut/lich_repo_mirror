=begin
Sanctum Watch
=end
creature = nil
line = nil

def upstream_matchtimeout(secs, *strings)
    unless script = Script.current then echo("An unknown script thread tried to fetch a game line from the queue, but Lich can't process the call without knowing which script is calling! Aborting...") ; Thread.current.kill ; return false end
    unless (secs.class == Float || secs.class == Fixnum)
        echo('matchtimeout error! You appear to have given it a string, not a #! Syntax:  matchtimeout(30, "You stand up")')
        return false
    end
    strings.flatten!
    if strings.empty?
        echo("matchtimeout without any strings to wait for!")
        sleep 1
        return false
    end
    regexpstr = strings.join('|')
    end_time = Time.now.to_f + secs
    loop {
        line = upstream_get?
        if line.nil?
            sleep 0.1
        elsif line =~ /#{regexpstr}/i
            return line
        end
        if (Time.now.to_f > end_time)
            return false
        end
    }
end

toggle_upstream
loop {
    line = get
    if line =~ /Striking with a serpent's unsettling quickness, a lithe veiled sentinel lashes out and grabs your (?:.*)\.  Vile (?:.*) energy lances down (?:his|her) arm and into the (?:.*), kindling it into an unholy semblance of life.  The (?:.*) form twists and mutates, sprouting scales and cold eyes as it transforms into a (.*)\!/
        creature = $+.split.last
        Thread.new {
            echo "Initial Clench Attempt on Creature: #{creature}"
            waitrt?
            fput "clench #{creature}"
        }
    
    elsif line =~ /You try to reach for a (?:.*) but your interference only enrages it!  Striking like lightning, (?:.*) bites down on your (?:.*)\!/
        Thread.new {
            echo "Failed Clench Attempt on Creature: #{creature}"
            waitrt?
            fput "clench #{creature}"
        }

    elsif line =~ /The flesh around the wound feels hot and cold at the same time, heavy with infection./
        Thread.new {
            _respond ("You've been INFECTED with an unholy snake stank! You have 10 seconds to NOD if you want to go to the vat!")
            cleaninfection = upstream_matchtimeout 10, "nod", "NOD", "Nod"
            if cleaninfection
                waitrt?
                start_script('go2', ['25250'])
                wait_while { running?('go2') }
                waitrt?
                fput "clean vat"
                _respond ("You have cleansed the unholy snake stank from your body!")
            end
        }
        
    end
}