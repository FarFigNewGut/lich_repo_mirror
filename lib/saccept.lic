=begin

     author: Demandred
       name: saccept
       tags: inventory
    version: 1.6
		
		saccept is my new auto-accept and stow solution.
		It requires at least one empty hand to function.
		If you don't have an empty hand it will exit.
		
		Usage: 	
				;saccept # <container noun or stow type>
				;saccept <container noun or stow type> #
					These uses will accept # of items and stow them in the container you have
					setup under stow set <stow selection>
					i.e. - ;saccept 8 satchel --- This will accept 8 items and stow them in your satchel
								 ;saccept gem 4 --- accepts 4 items and stows them in your listed gem stow container
				
				;saccept #
					This will accept # of items and stow them in your default stow container
				
				;saccept <container noun or stow type>
					This will accept items forever and put them into <container noun or stow type>
				
				;saccept
					This will accept items forever and stow them in your default stow container.
					
						If you mispell the <container noun> it should still stow in default stow container.

		If problems are found, let me know! Enjoy!

			changelog:
				1.6 	- (3-22-2021) - Minor changes in bag/id handling
				1.5		- (3-19-2021) - Minor bug fix.
				1.4		-	(3-19-2021) - Added both functionalities back. If you
									specify one of the valid "stow types" listed under
									<stow set> in game, it will use stow with that type.
									If you instead name a container properly, it will
									attempt to find and put the item in that container.
				1.3		- (3-6-2021) - under rewrite to use container names
									Changed to use a container noun as the variable,
									with fallback to the default stow container if
									GameObj can't find a container matching the entry.
				1.2   - (1-24-2021)
									Added a single waitrt? to help if you're trying
									to accept things while doing other things. Might
									not work every time, but most times, perhaps.
				1.1		-	(1-20-2021)
									Added support for Ruby versions pre 2.4
									- Follow the directions on lines 54 and	77 to use this pre-2.4 ruby.
										To see your ruby version, try ;version
				1.01 	- (1-20-2021)
									Added ;saccept usage to header.
				1.0 	- (1-19-2021)
									Initial release.

=end


@bag = nil
@thebag = nil
@counter = 0
@currentitem = nil
@stow_by_type = false
all_vars = script.vars[0]
VARS_PATTERN = /(?'bag'^[-a-zA-Z]+$)|(?'counter'^\d+$)|(?'counter1'\d+) (?'bag1'[-a-zA-Z]+$)|(?'bag2'^[-a-zA-Z]+) (?'counter2'\d+$)/

# In order to use this with a ruby version less than 2.4 
# remove the # before the =begin on line 63 and the =end
# on line 81
#=begin
match = all_vars.match(VARS_PATTERN)

if match&.named_captures&.fetch('bag') != nil
	@bag = match&.named_captures&.fetch('bag')
elsif match&.named_captures&.fetch('bag1') != nil
	@bag = match&.named_captures&.fetch('bag1')
elsif match&.named_captures&.fetch('bag2') != nil
	@bag = match&.named_captures&.fetch('bag2')
end
	
if match&.named_captures&.fetch('counter') != nil
	@counter = match&.named_captures&.fetch('counter')
elsif match&.named_captures&.fetch('counter1') != nil
	@counter = match&.named_captures&.fetch('counter1')
elsif match&.named_captures&.fetch('counter2') != nil
	@counter = match&.named_captures&.fetch('counter2')
end
#=end

# In order to use this with a ruby version less than 2.4
# add a # before the =begin on line 86 and the =end
# on line 104
=begin
match = all_vars.match(VARS_PATTERN) || {}

if match[:bag] != nil
	@bag = match[:bag]
elsif match[:bag1] != nil
	@bag = match[:bag1]
elsif match[:bag2] != nil
	@bag = match[:bag2]
end
	
if match[:counter] != nil
	@counter = match[:counter]
elsif match[:counter1] != nil
	@counter = match[:counter1]
elsif match[:counter2] != nil
	@counter = match[:counter2]
end
=end

if @bag != nil
	if @bag =~ /default|box|gem|herb|skin|wand|scroll|potion|reagent|trinket|lockpick|treasure|forageable|collectible/
		@stow_by_type = true
	else
		GameObj.inv.find { |i| 
			if i.name =~ /#{@bag}/
				@thebag = i
			end
		}
	end
end

if (@thebag.id.nil? || @thebag.id.empty?) && !@stow_by_type
	@bag = nil
end

if @counter == 0
	status_tags
	while line = get
		#echo line
		if line =~ /<a exist="[-\d]+" noun="[^"]+">[^"]+<\/a> offers you[a-z\s]+<a exist="(\d+)" noun=.* The offer will expire in 30 seconds\./
			@currentitem = $1
			waitrt?
			if !checkright || !checkleft
				put "accept"
				if @bag == nil
					put "stow ##{@currentitem}"
				elsif @stow_by_type
					put "stow #{@bag} ##{@currentitem}"
				else
					put "put ##{@currentitem} in ##{@thebag.id}"
				end
				next
			else
				echo "**** YOU HAVE NO EMPTY HAND TO ACCEPT SOMETHING, EMPTY A/BOTH HAND/S AND RESTART THIS SCRIPT ****"
				exit
			end
		end
	end
else
	status_tags
	@counter = @counter.to_i
	while line = get
		if line =~ /<a exist="[-\d]+" noun="[^"]+">[^"]+<\/a> offers you[a-z\s]+<a exist="(\d+)" noun=.* The offer will expire in 30 seconds\./
			@currentitem = $1
			waitrt?
			if !checkright || !checkleft
				put "accept"
				if @bag == nil
					put "stow ##{@currentitem}"
				elsif @stow_by_type
					put "stow #{@bag} ##{@currentitem}"
				else
					put "put ##{@currentitem} in ##{@thebag.id}"
				end
				@counter = (@counter - 1)
				if @counter == 0
					exit
				end
			else
				echo "**** YOU HAVE NO EMPTY HAND TO ACCEPT SOMETHING, EMPTY A HAND AND RESTART THIS SCRIPT ****"
				exit
			end
		end
	end
end
