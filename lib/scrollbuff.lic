=begin

	Attempts to cast defensive spells from your collection of scrolls,
    vellums, parchments, etc.
    
    Before running, you must set your scrollsack with a command like:
        ;vars set scrollsack=pouch
        
    Use only the noun of your container (no "my" or adjectives).  The
    script will only use containers you are wearing or holding.
        
    Your right hand must be empty.
    
    Only casts/refreshes spells that are not running or have under 
    90 minutes left.  The script will tell you which spells it cast and
    which it skipped.

    The script will NOT cast any non-defensive spell.
    
    Usage: ;scrollbuff 101 107 509 ... (up to 30 spell numbers)
    
    author: Sulien (SulienWaggles on PC, sulieneq@gmail.com)
      game: gs
      tags: invoke, scroll, scrolls, hunting
   version: 0.0.1

   
    CHANGELOG:
    
    0.0.1 - Initial version
    
=end

def echofmt(*lines)
    maxlen = lines.map(&:length).max + 1
    echo "=" * maxlen
    lines.each do |line|
        echo line + (" " * (maxlen - line.length))
    end
    echo "=" * maxlen
end

ScrollSackVar = Vars["scrollsack"]
unless ScrollSackVar
    echofmt "Please set your scroll container with a",
            "command like:",
            "    ;vars set scrollsack=backpack",
            "",
            "Use only the noun (no \"my\" or adjectives).",
            "",
            "This will only work with containers you are",
            "wearing or holding."
    
    exit
end

ScrollSack = GameObj[ScrollSackVar]
unless ScrollSack
    echofmt "Couldn't find your scrollsack \"#{ScrollSackVar}\"",
            "Fetch that and try again, would ya?"
    
    exit
end

unless checkright.nil?
    echofmt "Empty your right hand and try again."
    exit
end

SpellNums = script.vars[1..-1]

if SpellNums.nil? || SpellNums.count == 0 || SpellNums.first.start_with?("h")
    echofmt "Attempts to cast defensive spells from your collection of scrolls,",
            "vellums, parchments, etc.",
            "",
            "Before running, you must set your scrollsack with a command like:",
            "   ;vars set scrollsack=pouch",
            "",
            "Use only the noun of your container (no \"my\" or adjectives).  The",
            "script will only use containers you are wearing or holding.",
            "",
            "Only casts/refreshes spells that are not running or have under",
            "90 minutes left.  The script will tell you which spells it cast and",
            "which it skipped.",
            "",
            "Usage: ;#{script.name} 101 107 509 ...",
            "List up to 30 spell numbers separated by a space."

    exit
end

SpellNumsNeeded = SpellNums.find_all do |spell_num|
    spell = Spell[spell_num]
    spell && spell.type == "defense" && (!spell.active || spell.timeleft <= 90.0)
end

if SpellNumsNeeded.count.zero?
    echofmt "NO SPELLS NEEDED",
            "",
            "All spells are active with at least 90 minutes remaining."
    
    exit
end

fput "open ##{ScrollSack.id}"

SpellNumsNeeded.each do |spell_num|

    spell = Spell[spell_num]
    
    if spell && spell.type == "defense"

        result = dothis "rummage in ##{ScrollSack.id} spell #{spell_num}", /You rummage through .+ (and remove .+ with .+ scrawled upon it|but can't seem to locate anything with that spell on it)/

        if checkright
            2.times {
                fput "invoke #{spell_num} from ##{GameObj.right_hand.id}"
                fput "cast"
                waitcastrt?
                waitrt?
            }
            
            fput "put right in ##{ScrollSack.id}"
        end

    end
    
end

fput "close ##{ScrollSack.id}"

echofmt "SCROLL BUFFS COMPLETE",
        "",
        "Spells cast: #{SpellNumsNeeded.join(" ")}",
        "Spells skipped: #{(SpellNums - SpellNumsNeeded).join(" ")}"
