=begin
    Bolt DF Summary Charts
    A simple script to output known bolt spells and their modified DF values.
	
    SYNTAX - ;boltdf <BASE/LORE/CLOTH/LEATHER/SCALE/CHAIN/PLATE/ALL/ALL_LORE>
	
    See ;boltdf help
    For additional setup/help info.
	
       todo: unsure
     author: Tysong (horibu on PC)
       name: boltdf
       tags: bolt, df, spells
    version: 2.2

    changelog:
        2.2 (2019-07-04)
            Added Undead, Living, & Evoke 306 DFs to the chart
            Added base 6mana 1206 DF to the chart
        2.1 (2019-07-04)
            Added All and All_Lore
            Made variables case-insensitive
        2.0 (2019-04-26)
            Updated with Spring Spectacular lore changes
        1.0 (2018-04-17)
            initial release

    credit & thanks:
        Ragz for asking about a script to display modified DF values
=end
=begin
=end

bolt_spells = {
	111 => {
		base_dfs: [0.400, 0.333, 0.270, 0.256, 0.244],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.slsummoning],
		known: Spell[111].known?
	},
	118 => {
		base_dfs: [0.520, 0.420, 0.330, 0.300, 0.210],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.slsummoning],
		known: Spell[118].known?
	},
	"306U" => {
		base_dfs: [0.750, 0.500, 0.405, 0.400, 0.265],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.slreligion],
		known: Spell[306].known?
	},
	"306L" => {
		base_dfs: [0.455, 0.345, 0.283, 0.242, 0.173],
		lore_dfs: [],
		bonus: 0,
		lores: [0],
		known: Spell[306].known?
	},
	"306E" => {
		base_dfs: [0.600, 0.410, 0.310, 0.290, 0.270],
		lore_dfs: [],
		bonus: 0,
		lores: [((Skills.slreligion > 30)? Skills.slreligion - 30 : 0)],
		known: Spell[306].known?
	},
	505 => {
		base_dfs: [0.520, 0.420, 0.330, 0.300, 0.210],
		lore_dfs: [],
		bonus: 0,
		#lores: [Skills.elair],
		lores: [((Skills.elfire > Skills.elair )? Skills.elfire : Skills.elair)],
		known: Spell[505].known?
	},
	510 => {
		base_dfs: [0.710, 0.520, 0.460, 0.435, 0.440],
		lore_dfs: [],
		bonus: 0,
		#lores: [Skills.elearth],
		lores: [((Skills.elfire > Skills.elearth )? Skills.elfire : Skills.elearth)],
		known: Spell[510].known?
	},
	705 => {
		base_dfs: [0.525, 0.383, 0.314, 0.350, 0.197],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.slnecromancy],
		known: Spell[705].known?
	},
	713 => {
		base_dfs: [0.435, 0.360, 0.325, 0.310, 0.295],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.sldemonology],
		known: Spell[713].known?
	},
	901 => {
		base_dfs: [0.149, 0.133, 0.111, 0.122, 0.128],
		lore_dfs: [],
		bonus: 0,
		#lores: [Skills.elwater, Skills.elair],
		lores: [((Skills.elwater < Skills.elair && Skills.elfire > Skills.elwater)? Skills.elfire : Skills.elwater), ((Skills.elair <= Skills.elwater && Skills.elfire > Skills.elair)? Skills.elfire : Skills.elair)],
		known: Spell[901].known?
	},
	903 => {
		base_dfs: [0.455, 0.345, 0.283, 0.242, 0.173],
		lore_dfs: [],
		bonus: 0,
		lores: [((Skills.elfire > Skills.elwater )? Skills.elfire : Skills.elwater)],
		#lores: [Skills.elwater],
		known: Spell[903].known?
	},
	904 => {
		base_dfs: [0.525, 0.383, 0.314, 0.350, 0.197],
		lore_dfs: [],
		bonus: 0,
		#lores: [Skills.elwater, Skills.elearth],
		lores: [((Skills.elwater < Skills.elearth && Skills.elfire > Skills.elwater)? Skills.elfire : Skills.elwater), ((Skills.elearth <= Skills.elwater && Skills.elfire > Skills.elearth)? Skills.elfire : Skills.elearth)],
		known: Spell[904].known?
	},
	906 => {
		base_dfs: [0.667, 0.455, 0.345, 0.323, 0.303],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.elfire],
		known: Spell[906].known?
	},
	907 => {
		base_dfs: [0.445, 0.350, 0.245, 0.217, 0.208],
		lore_dfs: [],
		bonus: 0,
		lores: [((Skills.elfire > Skills.elwater )? Skills.elfire : Skills.elwater)],
		known: Spell[907].known?
	},
	908 => {
		base_dfs: [0.400, 0.333, 0.270, 0.256, 0.244],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.elfire],
		known: Spell[908].known?
	},
	910 => {
		base_dfs: [0.750, 0.555, 0.433, 0.415, 0.433],
		lore_dfs: [],
		bonus: 0,
		#lores: [Skills.elair, Skills.elwater],
		lores: [((Skills.elwater < Skills.elair && Skills.elfire > Skills.elwater)? Skills.elfire : Skills.elwater), ((Skills.elair <= Skills.elwater && Skills.elfire > Skills.elair)? Skills.elfire : Skills.elair)],
		known: Spell[910].known?
	},
	1110 => {
		base_dfs: [0.680, 0.490, 0.365, 0.280, 0.205],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.mltransformation],
		known: Spell[1110].known?
	},
	1206 => {
		base_dfs: [0.600, 0.410, 0.310, 0.290, 0.270],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.mlmanipulation],
		known: Spell[1206].known?
	},
	1707 => {
		base_dfs: [0.600, 0.550, 0.385, 0.333, 0.267],
		lore_dfs: [],
		bonus: 0,
		lores: [Skills.elfire, Skills.elwater],
		known: true
	},
	1709 => {
		base_dfs: [0.667, 0.460, 0.385, 0.375, 0.355],
		lore_dfs: [],
		bonus: 0,
		lores: [((Skills.elfire > Skills.elwater )? Skills.elfire : Skills.elwater)],
		known: true
	},
	1710 => {
		base_dfs: [0.600, 0.333, 0.275, 0.370, 0.196],
		lore_dfs: [],
		bonus: 0,
		lores: [((Skills.elearth < Skills.elwater && Skills.elfire > Skills.elearth)? Skills.elfire : Skills.elearth), ((Skills.elwater <= Skills.elearth && Skills.elfire > Skills.elwater)? Skills.elfire : Skills.elwater)],
		known: true
	},
}

#Populate Modified Lore Version of Spell DF
bolt_spells.each { |spell|
	if spell[1][:lores].size == 1
		total_lore = spell[1][:lores].reduce(0, &:+)
		if total_lore >= 101
			skill_bonus = ((0.001 * 50) + (0.001 * (50 / 2)) + (0.001 * ((total_lore - 100) / 4)))
		elsif total_lore >= 51
			skill_bonus = ((0.001 * 50) + (0.001 * ((total_lore - 50) / 2)))
		elsif total_lore >= 1
			skill_bonus = (0.001 * total_lore)
		else
			skill_bonus = 0
		end
	else
		total_lore = spell[1][:lores].reduce(0, &:+)
		if total_lore >= 101
			skill_bonus = ((0.001 * (100 / 2)) + (0.001 * ((total_lore - 100) / 4)))
		elsif total_lore >= 1
			skill_bonus = (0.001 * ((total_lore / 2)))
		else
			skill_bonus = 0
		end
	end
	skill_bonus = (skill_bonus * 1000).floor / 1000.0
	spell[1][:base_dfs].each { |df|
		spell[1][:lore_dfs].push((df+skill_bonus))
	}
	spell[1][:bonus] = skill_bonus
}

if script.vars[1] =~ /base/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE"
	respond "-----------------------------------------------"
	bolt_spells.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:base_dfs][0]} |  #{"%.3f" % spell[1][:base_dfs][1]}  | #{"%.3f" % spell[1][:base_dfs][2]} | #{"%.3f" % spell[1][:base_dfs][3]} | #{"%.3f" % spell[1][:base_dfs][4]}"
		end
	}
elsif script.vars[1] =~ /alllore|all_lore/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.each { |spell|
		respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
	}
elsif script.vars[1] =~ /all/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE"
	respond "-----------------------------------------------"
	bolt_spells.each { |spell|
		respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:base_dfs][0]} |  #{"%.3f" % spell[1][:base_dfs][1]}  | #{"%.3f" % spell[1][:base_dfs][2]} | #{"%.3f" % spell[1][:base_dfs][3]} | #{"%.3f" % spell[1][:base_dfs][4]}"
	}
elsif script.vars[1] =~ /lore|modified/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
		end
	}
elsif script.vars[1] =~ /cloth/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.sort_by{ |k| k[1][:lore_dfs][0] }.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
		end
	}
elsif script.vars[1] =~ /leather/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.sort_by{ |k| k[1][:lore_dfs][1] }.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
		end
	}
elsif script.vars[1] =~ /scale/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.sort_by{ |k| k[1][:lore_dfs][2] }.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
		end
	}
elsif script.vars[1] =~ /chain/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.sort_by{ |k| k[1][:lore_dfs][3] }.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
		end
	}
elsif script.vars[1] =~ /plate/i
	respond "SPELL | CLOTH | LEATHER | SCALE | CHAIN | PLATE | BONUS"
	respond "-------------------------------------------------------"
	bolt_spells.sort_by{ |k| k[1][:lore_dfs][4] }.each { |spell|
		if spell[1][:known]
			respond " #{spell[0].to_s.rjust(4)} | #{"%.3f" % spell[1][:lore_dfs][0]} |  #{"%.3f" % spell[1][:lore_dfs][1]}  | #{"%.3f" % spell[1][:lore_dfs][2]} | #{"%.3f" % spell[1][:lore_dfs][3]} | #{"%.3f" % spell[1][:lore_dfs][4]} | #{"%.3f" % spell[1][:bonus]}"
		end
	}
else
	respond "HELP MENU HERE"
	respond "    SYNTAX - ;boltdf <BASE/LORE/CLOTH/LEATHER/SCALE/CHAIN/PLATE/ALL/ALL_LORE>"
	respond ""
	respond " using CLOTH/LEATHER/SCALE/CHAIN/PLATE will output modified lore DF values sorted by AG type"
end
exit