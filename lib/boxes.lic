require "Olib"

SOURCE  = Room.current.id

module Boxes
  @list = Loot.new do |item| item.tags.include?(:box) end

  def self.each(&block)
    @list.each(&block)
  end

  def self.method_missing(method, *args, &block)
    @list.send(method, *args, &block)
  end

  def self.leave_locker
    multifput "close locker", "go open"
    SOURCE.go2
    exit
  end

  def self.cleanup
    target = Container.new(Boxes.first)
    Boxes[1..-1].each do |b| 
      b.take; fput "put ##{b.id} in ##{target.id}" 
    end
    exit
  end

  def self.add_to_locker
    Script.run "locker2"

    Boxes.fetch.each do |box|
      box.take unless Char.right
      fput "put ##{box.id} in locker"
    end
  
    leave_locker
  end

  def self.fetch_from_locker
    Script.run "locker2"

    wait_until do 
      GameObj.loot.find do |i| i.name =~ /chest/ end 
    end

    wait_until do GameObj.loot.size > 1 end

    Containers.lootsack.add Boxes.take(4)

    leave_locker
  end

  def self.flip_disk()
    disk = GameObj.loot.find do |item| item.noun.eql?("disk") and item.name.include?(Char.name) end
    fput "turn ##{disk.id}" unless disk.nil?
  end

  def self.is_box?(t)
    t.type.include?(:box)
  end

  def self.fetch()
    [Char.right, Char.left].select do |hand| is_box?(hand) end + 
    Inventory.items.select do |item| is_box?(item) end
  end

  def self.drop()
    flip_disk
    [GameObj.right_hand, GameObj.left_hand].each do |hand|
      fput "drop ##{hand.id}" if hand.type.include?("box")
    end
    Inventory.items
      .select do |i| i.tags.include?(:box) end
      .each do |box|
        box.take
        fput "drop ##{box.id}"
      end
  end

  def self.raw_trash_bin()
    GameObj.loot.find do |item|
      %w{wastebasket crucible}.include?(item.noun)
    end
  end

  def self.wastebin()
    Container.new(raw_trash_bin)
  end

  def self.trash(empty)
    if Room.current.title.first.include?("Table")
      return 
    elsif raw_trash_bin
      wastebin.add(empty)
    end
  end

  def self.peek(box)
    result = dothistimeout("look in ##{box.id}", 1, /There is nothing in the #{box.noun}|There is a small amount in the|That is closed|In the/)
    if result =~ /There is nothing in the #{box.noun}|There is a small amount in the/
      
      trash(box)
      return :err
    end
    if result =~ /That is closed./
      return :err
    end

    return :ok
  end

  def self.gc(die = false)
    return fput "clean table" if Room.current.title.first.include?("Table")
    return if raw_trash_bin.nil?
    loop do
      [Area.herbs, Area.junk, Area.clothing, Area.food].flatten.each do |item|
        trash(item)
      end
  
      Boxes.each do |box| Boxes.peek(box) end
      exit if die
      sleep 120
    end
  end

  def self.loot
    Boxes.each do |box|
      begin 
        err = Boxes.peek(box)
        unless err.eql?(:err)
          box = Container.new(box)
          unless box.where(noun: "coins").empty?
            fput "get coins from ##{box.id}" 
            sleep 0.1
            waitrt?
          end
          box.contents.compact.each do |item|
            if item.type.include?("junk") or item.type.include?("herb") or item.type.include?("food")
              trash(item)
            else
              Containers.lootsack.add(item)
            end
          end
          Script.run("coins", %(Rjol)) if GameObj.pcs.map(&:noun).include?("Rjol") and percentencumbrance > 60
          Boxes.peek(box)
        end
      rescue Exception => e
        respond(e.message)
        respond(e.backtrace)
      end
    end
  end

  def self.fog(to)
    # A silvery fog envelops you
    # Your spell misfires.
    return unless checkmana > 25
    waitcastrt?
    start_count = XMLData.room_count
    fput "prep 225"
    dothistimeout "cast #{to}", 5, /A silvery fog envelops you|Your spell misfires|Cast at what/
    if XMLData.room_count.eql?(start_count)
      raise Exception.new %{could not teleport}
    end
  end

  def self.loot_area()
    Containers.lootsack.add([
      Area.valuables, Area.jewelry, Area.gems, 
      Area.scrolls, Area.wands, Area.magics
    ].flatten)
  end

  def self.fog_and_drop(to)
    Spell.lock_cast
    Group.check
    fog(to)
    Boxes.drop
    fog(%{##{Group.leader.id}})
    fput "join ##{Group.leader.id}"
    Spell.unlock_cast
  end
end


case Script.current.vars.first
when %r{cleanup}
  Boxes.cleanup
when %r{locker}
  Boxes.add_to_locker
when %r{drop}
  Boxes.drop
when %r{fetch|get}
  Boxes.fetch_from_locker
when %r{trash|gc}
  Boxes.gc
when %r{loot}
  Boxes.loot
when %r{area}
  Boxes.loot_area()
when %r{fog}
  Boxes.fog_and_drop(Script.current.vars.last)
else
  raise Exception.new %{unknown command}
end