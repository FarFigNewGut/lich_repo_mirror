=begin
A basic script to animate the dead, currently had little testing. Fairly dumb script with little checking,
but should brute force its way to the end and you can simply re-run (eg. if you animate cast fails).

Script assumes you have an empty hand, though not picky as to which one. Has the following features:

    -- Defaults to tell aniamte to attack and follow (can turn off via flags)
    -- Can optionaly get a gem out 
    -- Can optionally use salt
    -- Can optionall use animate weapon wands
    -- can tell animate to drop something (eg. its weapon so you can use your animate wand)
    
    Start script with just the world help for details

  maintainer: Dalazashel
      author: Dalazashel
        game: Gemstone
        tags: sorc, animate
    required: Lich > 5.0.1
     version: 0.0.1

  changelog:
    
    v0.0.1(2023-08-22)
      Initial release  
=end

debug = false
animateName = nil
animateSack = UserVars.animateSack || nil
animateWand = nil
animateGem = nil
useSalt = false
noFollow = false
noAttack = false
# echo Script.current.vars[1..-1]

if Script.current.vars[1] == "help"
    respond "  All items are expected to be in your animateSack (;var set animateSack=container) and will not get items from any other container."
    respond "  All flags are not case sanstive, captalisation used for easier reading, and can be used in any order."
    respond "  "
    respond "  --wand=noun  : Sets the noun of your animate dead wand to be used."
    respond "  --drop=noun  : Sets the nounf of the item you want your animate to drop (eg. its weapon)"
    respond "  --gem=noun   : Sets the noun of the gem to get to boost your animates level, hollow gem will be dropped (Known bug, if animate cast fails will still drop the gem anyway)"
    respond "  --useSalt    : Enables the use of salt crystals, will gran them from your animateSack and spread on corpse."
    respond "  --noFollow   : Disables telling of animate to follow."
    respond "  --noAttack   : Disabled telling of animate to attack"
    respond "  The first word that does not match the above is the name of the thing you want to animate, this is checked against the dead creatures in the room and will animate the first one that matches. "
    respond "  "
    respond "  Examples:"
    respond "  "
    respond "  ;animate orc  : Animates the first dead orc it finds(without salt), will tell it to attack and follow but nothing else"
    respond "  ;animate orc --usesalt --wand=branch  : Aniamtes the first dead orc it finds(using salt), waves your animate wand at it (branch) amd will tell it to attack and follow."
    respond "  ;animate --noAttack witch --wand=branch --drop=axe  : Aniamtes the first dead witch it finds(without salt), tells it to drop the axe is is carrying, waves your animate wand at it (branch) amd will tell it to follow (but not attack)."
    
    exit
end



for var in Script.current.vars[1..-1]
    if var =~ /--wand=(\w+)/i
        animateWand = $1
        echo "animate wand: #{animateWand}" if debug
    elsif var =~ /--drop=(\w+)/i
        animateDrop = $1
        echo "animate drop: #{animateDrop}" if debug
    elsif var =~ /--gem=(\w+)/i
        animateGem = $1
        echo "animate gem: #{animateGem}" if debug
    elsif var =~ /--useSalt/i
        useSalt = true
        echo "use salt: #{useSalt}" if debug
        
    elsif var =~ /--noFollow/i
        noFollow = true
        echo "no follow: #{noFollow}" if debug
    elsif var =~ /--noAttack/i
        noAttack = true
        echo "no attack: #{noAttack}" if debug
    elsif var =~ /--debug/i
        debug = true
    else
        animateName = var if animateName.nil? # take the first ignore the rest, maybe want to warn/error for this?
        echo "animate name: #{animateName}" if debug
    end


end

if animateSack.nil?
    respond "  The script needs to know your animateSack, this is the container all animate items will be drawn from (salt, wand, gems)"
    respond "  To set this use ';var set animateSack=container'"
    exit
end
if animateName.nil?
    respond "  No name of creature to animate found, stopping."
    exit
end

def getDeadNpcByNoun(noun)
    creature = GameObj.npcs.find{ |npc| npc.status == "dead" && npc.name.include?(noun)}
    return creature.id # will be nil if none found
end

animateId = getDeadNpcByNoun(animateName)
if animateId.nil?
    respond "  No dead creature matching '#{animateName}' found"
    exit
end

put "wave ##{animateId}" if debug

if useSalt
    fput "get my crim crystals from my #{UserVars.animateSack}"
    fput "spread crystals crystals on ##{animateId}"
    fput "put my crystals in my #{UserVars.animateSack}" if checkleft == "crystals" || checkright == "crystals"
end

fput "get #{animateGem} from my #{UserVars.animateSack}" if animateGem
waitcastrt?
fput "prep 730"
fput "cast ##{animateId}"
fput "drop #{animateGem}" if animateGem # will drop even if animate fails, GameObj.left_hand does not appear to include the hollow part
fput "tell animate drop #{animateDrop}" if animateDrop

if animateWand
    fput "get my #{animateWand} from my #{UserVars.animateSack}"
    dothistimeout "wave my #{animateWand} at ##{animateId}", 3, /You wave your /
    waitrt?
    fput "put my #{animateWand} in my #{UserVars.animateSack}"
end
fput "tell animate follow" unless noFollow
fput "tell animate attack" unless noAttack