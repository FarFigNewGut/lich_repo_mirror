=begin
A script to appraise skins at a furrier allowing for easy silling of the most valueable with the itention of being used to maximise BP returns for bounty tasks.

For example this could sell the 5 most expesnive skins or any skin geather than a fixed amount. See the help command for more info.

  maintainer: Dalz
  author: Dalz
  game: Gemstone
  tags: sorc, animate
  required: Lich > 5.0.1
  version: 0.0.1

  changelog:
    v0.0.1(2023-09-25)
      Initial release
=end

module Appraiser
  @container = @container || nil
  @appraised_items = @appraised_items || Hash.new
  @items_to_appraise = []

  def self.init
    unless UserVars.skinsack # for now default to skin sack, likely be useful to make configureable by cli option.
      respond ""
      respond " You need to make sure you have your skin sack set."
      respond " To set this use ';var set skinsack=container'"
      respond ""
      exit
    end
    @container = GameObj.inv.find { |container| container.name =~ /#{UserVars.skinsack}/ }
    unless @container
      respond ""
      respond " Unable to find your skinsack: #{UserVars.skinsack}"
      respond " If that is the wrong container you can correct that with ';var set skinsack=container'"
      respond ""
      exit
    end
  end

  def self.get_container_by_name(container_name)
    return GameObj.inv.find { |container| container.name =~ /#{container_name}/ }
  end

  def self.find_items_by_name(item_name)
    init unless @container
    if @container.contents.length == 0
      fput "look in ##{@container.id}"
      sleep(0.5)
      if @container.contents.length == 0 # don't like this if nesting
        respond ""
        respond " It looks like your skinsack (#{UserVars.skinsack}) is empty."
        respond " If that is the wrong container you can correct that with ';var set skinsack=container'"
        respond ""
        exit
      end
    end

    items_to_appraise = @container.contents.select { |item| item.name =~ /#{item_name}/ && item.type == "skin" }
    return items_to_appraise
  end

  def self.appraise_item(item)
    fput "get ##{item.id}"
    30.times {
      break if (GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id)
      sleep(0.1)
    }
    unless (GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id)
      respond " Failed to get #{item.name}, skipping"
      return
    end
    fput "appraise ##{item.id}"
    result = waitfor("I'll pay you", "Get what", "need a free hand")
    if /.+I'll pay you (?<amount>[\d+,]+) silvers for it./ =~ result
      amount = amount.gsub(",", "").to_i # Don't think appraise has commas but just in case.
      @appraised_items["#{item.id}"] = amount
    else
      echo "Something went wrong! Failed to appriase item, stopping..."
      exit # see if we can fail more gracefuly
    end
    fput "put ##{item.id} in ##{@container.id}"
  end

  def self.appraise_items(items_to_appraise)
    return unless items_to_appraise
    items_to_appraise.each { |item| appraise_item(item) unless @appraised_items[item.id] }
  end

  def self.find_items_to_sell(item_name, sell_type = nil, amount = 0)
    current_items = find_items_by_name(item_name)
    available_items = current_items.select { |item| @appraised_items.keys.include?(item.id) }
    if sell_type == ">"
      available_items = available_items.select { |item| @appraised_items[item.id].to_i > amount }
    elsif sell_type == "best"
      available_items = available_items.sort_by { |item| -@appraised_items[item.id] } # sort high to low by cost
      if amount > available_items.length
        respond " You asked for #{amount} but only have #{available_items.length}, working with what you have."
        amount = available_items.length
      end
      available_items = available_items.take(amount) # Get first amount items
    end
    return available_items
  end

  def self.sell_report(items)
    respond ""
    items.each { |item| respond " #{item.name} - #{@appraised_items[item.id]}" }
    respond " No items!" unless items.length > 0
    respond ""
  end

  def self.sell_items(items, sell_type = "")
    items.each { |item| 
      fput "get ##{item.id}"
      30.times {
        break if (GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id)
        sleep(0.1)
      }
      unless (GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id)
        respond " Failed to get #{item.name}, skipping"
        next
      end
      if sell_type == "bounty"
        echo "TODO: this"
        exit
      end
      fput "sell ##{item.id}"
      30.times {
        break unless (GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id)
        sleep(0.1)
      }
      if (GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id)
        respond " Failed to sell #{item.name}, stopping."
        exit
      end
    }
  end

  # debugging methods
  def self.debug
    echo "debug!!"
    echo @appraised_items
  end

  def self.clear_items
    echo "Clearing items..."
    @appraised_items = Hash.new
  end
end

sell_type = nil
amount = nil
item_name = nil
report = false
x = 1
while x <= Script.current.vars.length
  current_var = Script.current.vars[x]
  next_var = Script.current.vars[x + 1]
  if current_var == "help"
    item_name = nil
    break
  elsif current_var == "report"
    report = true
  elsif current_var == "clear"
    clear = true
  elsif current_var == "best" || current_var == ">"
    unless (next_var && next_var.to_i > 0)
      respond ""
      respond " Please include a quanity, for example: "
      respond " ;#{Script.current.name} itemName > 1000"
      respond " ;#{Script.current.name} best 5 itemName"
      respond ""
      exit
    end
    sell_type = current_var
    amount = next_var.to_i
    x += 1 # Skip next var as we akready consumed it
  else
    # will take the first think that does not match and assume it is the item name
    # might make things simpler to statically assing order of command as typos could cause confusing results.
    item_name = current_var unless item_name
  end
  x += 1
end
unless item_name
  respond ""
  respond " To use this script please see the example below:"
  respond " ;#{Script.current.name} itemName > 1000'        - will sell all items worth more than 1000"
  respond " ;#{Script.current.name} best 5 itemName'        - will sell the most expensive 5 items"
  respond " ;#{Script.current.name} itemName'               - will appraise all items but take no action (results are saved to be used by above commands)"
  respond " ;#{Script.current.name} best 5 itemName report' - will appraise all items and report what it would sell (but not actually sell)"
  respond ""
  exit
end

unless Room.current.tags.include?("furrier")
  respond ""
  respond " This script only works if you are at the furrier, script will take you there in the future..."
  respond ""
  exit
end

if clear
  Appraiser.clear_items
  exit
end

items_to_appraise = Appraiser.find_items_by_name(item_name)
unless items_to_appraise.length > 0
  respond ""
  respond " No items found in your #{UserVars.skinsack} with the name: #{item_name}"
  respond ""
end
Appraiser.appraise_items(items_to_appraise)

items_to_sell = Appraiser.find_items_to_sell(item_name, sell_type, amount)
if sell_type.nil? || report
  respond ""
  respond " Appraise has finished this is the list of items that would be sold, or all items if no filter was provided."
  Appraiser.sell_report(items_to_sell)
  respond " If you wanted to sell something and don't know how try starting the script with the word 'help'"
  exit
end

Appraiser.sell_items(items_to_sell)
