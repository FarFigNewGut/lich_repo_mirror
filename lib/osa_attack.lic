#osa_attack.lic

$osa_spawn_list = Regexp.union(
	/An (.*) makes a rude gesture as (?:he|she) ambles in./,
	/Arms waving, a (.*) races in./,
	/A (.*) glowers dubiously as (?:he|she) strides in./,
	/A (.*) makes a rude gesture as (?:he|she) ambles in./,
	/A (.*) rushes in with a toothy grin./,
	/A (.*) slinks in./,

	/Glowing brightly, an unworldly (.*) strides in!/,

	/Glowing brightly, an ethereal (.*) strides in!/,
	)

def cast_spell
	loop do
		line = get
		if line =~ $osa_spawn_list
			cast
		end
	end
end

def cast
	loop do
		fput 'stance offensive'
		waitcastrt?
		result = dothistimeout "incant #{UserVars.osa_spell}", 5, /You gesture.|You do not currently have a target./
		if result =~ /You gesture.|You do not currently have a target./
			break
		elsif result =~ /You gesture./
		end
		fput 'stance guarded'
	end
end

def do_attack
	loop {
		line = get
		if line =~ $osa_spawn_list
			waitrt?
			attack
		end
		}
end

def attack
	waitrt?
	waitcastrt?
	loop do
		if Spell[506].known? and !Spell[506].active?
			fput 'incant 506'
		end
		waitrt?
		waitcastrt?
		fput 'stance offensive'
		result = dothistimeout 'attack', 3, /You thrust|You currently have no valid target.  You will need to specify one./
		if result =~ /You (?:swing|thrust)/
			fput 'attack'
		elsif result =~ /You currently have no valid target.  You will need to specify one./
			#Script.run "#{Vars.lootscript}"
			break
		end
	end
end

if script.vars[1] =~ /(\d)/
	UserVars.osa_spell = script.vars[1]
	echo "OSA spell set to "+ script.vars[1]
	cast_spell
elsif script.vars[1] =~ /attack/
	echo "OSA set to attack."
	do_attack
elsif script.vars.empty?
	echo 'This script requires a spell number or the word attack.'
end