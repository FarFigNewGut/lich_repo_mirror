=begin

	set the script to autostart
	look in your locker
	type  ;locker  whenever you feel like it to see what's in there

	this is a personal script that was not written to share, so no promises

	author: Tillmen
	game: Gemstone
	version: 0.1

=end

hide_me
settings = CharSettings.to_hash
script.want_downstream = false
script.want_downstream_xml = true
settings['screen_width'] = 156

best_column_count = proc { |list|
	num_columns = 1
	loop {
		items_per_column = (list.length / num_columns.to_f).ceil
		total_width = 0
		for column_num in 0...num_columns
			max_width = 0
			list[(column_num*items_per_column)...((column_num+1)*items_per_column)].each { |item_name| max_width = [ max_width, item_name.length ].max }
			total_width += max_width
		end
		total_width += (num_columns - 1) * 8
		if total_width > settings['screen_width'] - 8
			num_columns -= 1
			break
		elsif num_columns >= list.length
			break
		end
		num_columns += 1
	}
	num_columns
}

show_contents = proc { |line|
	if line =~ /^(?:<container.*?\/>)?<clearContainer id="\-?[0-9]+"\/><inv id='\-?[0-9]+'>In the <a exist="\-?[0-9]+" noun="locker">locker<\/a>:<\/inv>(<inv .*><\/inv>)/
		container = 'locker'
		contents = $1
		contents.sub!(/^<inv.*?>/, '')
		contents.sub!(/<\/inv>$/, '')
		contents = contents.split(/<\/inv><inv.*?>/)
		contents = contents.collect { |item|
			before_name = item.slice!(/^[^<]+/).strip
			item.sub!('<a exist="', '')
			id = item.slice!(/^\-?[0-9]+/)
			item.sub!('" noun="', '')
			noun = item.slice!(/^[^"]+/)
			item.sub!('">', '')
			name = item.slice!(/^[^<]+/)
			item.sub!('</a>', '')
			after_name = item.strip
			before_name = nil if before_name.empty?
			after_name = nil if after_name.empty?
			GameObj.new(id, noun, name, before_name, after_name)
		}
		sorted_contents = Hash.new
		for item in contents
			category_name = item.type || 'other'
			sorted_contents[category_name] ||= Hash.new
			if item.full_name =~ /^a crystalline flask containing/
				item_name = item.full_name.sub(/^a crystalline flask containing /, '')
			else
				item_name = item.full_name.sub(/containing (.*)$/) { "(#{$1})" }
			end
			if sorted_contents[category_name][item_name].nil?
				sorted_contents[category_name][item_name] = Hash.new
				sorted_contents[category_name][item_name]['noun'] = item.noun
				sorted_contents[category_name][item_name]['exist'] = item.id
				sorted_contents[category_name][item_name]['count'] = 1
			else
				sorted_contents[category_name][item_name]['count'] += 1
			end
		end
		output = "#{container}:\n"
		if settings['screen_width']
			for category_name, category_contents in sorted_contents
				count = 0
				category_contents.values.each { |value| count += value['count'] }
				output.concat "#{monsterbold_start}#{category_name} (#{count}):#{monsterbold_end} \n"
				category_contents = category_contents.sort { |a,b| a[0].split(/\s/).last <=>  b[0].split(/\s/).last }
				column_count = best_column_count.call(category_contents.collect { |a| a[0] })
				row_count = (category_contents.length / column_count.to_f).ceil
				column_count = (category_contents.length / row_count.to_f).ceil
				column_widths = Array.new
				for column_num in 0...column_count
					category_contents[(column_num*row_count)...((column_num+1)*row_count)].each { |item_name,item_info| column_widths[column_num] = [ column_widths[column_num].to_i, item_name.length ].max }
				end
				for row_num in 0...row_count
					output.concat '    '
					for column_num in 0...column_count
						item_name, item_info = category_contents[(column_num*row_count) + row_num]
						if item_info['count'] > 1
							str = "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a> (#{item_info['count']})"
						else
							str = "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a>"
						end
						str = str.ljust(column_widths[column_num] + str.slice(/<a.*?>/).length + 12)
						if column_num == column_count - 1
							str = str.strip
						end
						output.concat str
					end
					output.concat "\n"
				end
				output.concat "\n"
			end
		else
			for category_name, category_contents in sorted_contents
				count = 0
				category_contents.values.each { |value| count += value['count'] }
				output.concat "#{monsterbold_start}#{category_name} (#{count}):#{monsterbold_end} "
				category_contents = category_contents.sort { |a,b| a[0].split(/\s/).last <=>  b[0].split(/\s/).last }
				for item_name, item_info in category_contents
					if item_info['count'] > 1
						output.concat "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a> (#{item_info['count']}), "
					else
						output.concat "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a>, "
					end
				end
				output.chop!
				output.chop!
				output.concat ".\n"
			end
		end
		output.gsub!(/<.*?>/, '') unless $frontend == 'stormfront'
		_respond output
	else
		echo 'fixme'
	end
}

hook_proc = proc { |client_string|
	if client_string =~ /^(?:<c>)?#{$lich_char}locker/
		if s = (Script.running + Script.hidden).find { |val| val.name == 'sorter' }
			show_contents.call(settings['locker contents'].to_s)
		end
		nil
	else
		client_string
	end
}

begin
	UpstreamHook.add('watch-locker', hook_proc)
	while (line = get)
		if line =~ /^(?:<container.*?\/>)?<clearContainer id="\-?[0-9]+"\/><inv id='\-?[0-9]+'>In the <a exist="\-?[0-9]+" noun="locker">locker<\/a>:<\/inv>(<inv .*><\/inv>)/
			#contents = $1
			#contents.sub!(/^<inv.*?>/, '')
			#contents.sub!(/<\/inv>$/, '')
			settings['locker contents'] = line
		end
	end
ensure
	UpstreamHook.remove('watch-locker')
end
