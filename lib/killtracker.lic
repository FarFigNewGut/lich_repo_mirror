#killtracker.lic
=begin

;killtracker announce     - To watch kills increment in the speech window.
;killtracker announce msg - Alternate between two announce messages.
;killtracker summary      - Will provide an output of your search stats.
;killtracker jewel report - Time stamped log of jewel finds with search counts.
;killtracker dust report  - Time stamped log of dust finds with search counts.

It will announce when a gemstone is found to the Wrayth speech window, and reset the counter.


Author: Alastir
Major Contributor: Nisugi
Date: 3/15/2025

=end

no_kill_all
no_pause_all

module Killtracker
  require 'yaml'

  @filename = File.join(DATA_DIR, XMLData.game, Char.name, "Killtracker.yaml")
  game_dir = File.join(DATA_DIR, XMLData.game)
  char_dir = File.join(game_dir, Char.name)
  Dir.mkdir(game_dir) unless File.exist?(game_dir)
  Dir.mkdir(char_dir) unless File.exist?(char_dir)

  if File.exist?(@filename)
    $killtracker = YAML.load_file(@filename)
    echo('Yaml found, loading data.')
    echo $killtracker
  else
    echo('Yaml NOT found, fresh start!')
    $killtracker = {}
    $killtracker[:jewel_found] = {}
    $killtracker[:dust_found] = {}
    $killtracker[:searches_since_jewel] = 0
    $killtracker[:searches_since_dust] = 0
    $killtracker[:total_searches] = 0
    $killtracker[:silent] = true
    if defined?(Vars['killtracker'])
      if $killtracker[:total_searches] > Vars['killtracker'].to_i
        Vars['killtracker'] = $killtracker[:total_searches]
        echo 'Setting the Vars to match the current global variable count.'
        echo Vars['killtracker']
        echo $killtracker[:total_searches]
      else
        echo 'Vars is higher than the global counter.'
        $killtracker[:total_searches] = Vars['killtracker'].to_i
        sleep 0.3
        $killtracker[:searches_since_jewel] = Vars['killtracker'].to_i
        sleep 0.3
        $killtracker[:searches_since_dust] = Vars['killtracker'].to_i        
        sleep 0.3
        echo Vars['killtracker']
        echo $killtracker[:total_searches]
      end
    end
    File.write(@filename, $killtracker.to_yaml)
  end
  
  CMD_QUEUE = Queue.new
  $killtracker_creatures = Regexp.union(
    /armored battle mastodon/,
    /black valravn/,
    /boreal undansormr/,
    /crimson angargeist/,
    /fork-tongued wendigo/,
    /giant warg/,
    /gigas berserker/,
    /gigas disciple/,
    /gigas shield-maiden/,
    /gigas skald/,
    /gold-bristled hinterboar/,
    /gorefrost golem/,
    /halfling bloodspeaker/,
    /halfling cannibal/,
    /reptilian mutant/,
    /sanguine ooze/,
    /shadow-cloaked draugr/,
    /winged disir/,
    /basalt grotesque/,
    /death knight/,
    /mist-wreathed banshee/,
    /patrician vampire/,
    /phantasmic conjurer/,
    /skeletal dreadsteed/,
    /tatterdemalion ghast/,
    /hive thrall/,
    /kiramon broodtender/,
    /kiramon myrmidon/,
    /kiramon stalker/,
    /kiramon strandweaver/,
    /kresh ravager/,
  )

  downstream_proc = proc do |server_string|
    case server_string
    
    when %r{<pushBold/> \*\* A glint of light catches your eye, and you notice an? <a exist="\d+" noun="\w+">([^<]+)</a> at your feet! \*\*}
      name = $1
      key = Time.now.to_i.to_s
      $killtracker[:jewel_found][key] = { searches: $killtracker[:searches_since_jewel], name: name }
      report = "jewel_found_#{$killtracker[:searches_since_jewel].to_s}"
      $killtracker[:searches_since_jewel] = 0
      CMD_QUEUE.push(report)

    when %r{<pushBold/>You notice a scintillating mote of gemstone dust on the ground and gather it quickly.}
      key = Time.now.to_i.to_s
      $killtracker[:dust_found][key] = { searches: $killtracker[:searches_since_dust] }
      report = "dust_found_#{$killtracker[:searches_since_dust].to_s}"
      $killtracker[:searches_since_dust] = 0
      CMD_QUEUE.push(report)

    when %r{You search the <pushBold/><a exist="\d+" noun="[^"]+">([^<]+)</a><popBold/>.}
      name = $1
      if name =~ $killtracker_creatures
        $killtracker[:total_searches] += 1
        $killtracker[:searches_since_jewel] += 1
        $killtracker[:searches_since_dust] += 1
        report = "search_report_#{name}:#{$killtracker[:total_searches].to_s}:#{$killtracker[:searches_since_jewel].to_s}:#{$killtracker[:searches_since_dust].to_s}"
        CMD_QUEUE.push(report) unless $killtracker[:silent]
      end

    end
    server_string
  end

  DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
  DownstreamHook.add(DOWNSTREAM_HOOK_ID, downstream_proc)
  UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"
  HOOK_CMD_RX = %r{^(?:<c>)?;#{Script.current.name} (?:(.*))?$}i
  UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
    if command =~ HOOK_CMD_RX
      CMD_QUEUE.push($1)
      nil
    else
      command
    end
  end)

  before_dying { DownstreamHook.remove(DOWNSTREAM_HOOK_ID); UpstreamHook.remove(UPSTREAM_HOOK_ID); File.write(@filename, $killtracker.to_yaml) }

  def self.summary_report
    total_searches = $killtracker[:total_searches] || 0
  
    jewel_events = $killtracker[:jewel_found] || {}
    dust_events  = $killtracker[:dust_found]  || {}
  
    total_jewels = jewel_events.size
    total_dust   = dust_events.size
  
    # Extract the number of searches from each event in the hash values
    jewel_search_counts = jewel_events.values.map { |event| event[:searches].to_i }
    dust_search_counts  = dust_events.values.map  { |event| event[:searches].to_i }
  
    avg_jewel = total_jewels > 0 ? jewel_search_counts.sum.to_f / total_jewels : 0
    avg_dust  = total_dust   > 0 ? dust_search_counts.sum.to_f  / total_dust   : 0
  
    respond "   === Summary Report ==="
    respond " #{format('%6d', total_searches)}: Total Searches"
    respond ""
    respond " #{format('%6d', total_jewels)}: Jewels Found"
    respond " #{format('%6d', $killtracker[:searches_since_jewel])}: Since last Jewel"
    respond " #{format('%6d', avg_jewel.to_i)}: Avg per Jewel"
    respond ""
    respond " #{format('%6d', total_dust)}: Dust Found"
    respond " #{format('%6d', $killtracker[:searches_since_dust])}: Since last Dust"
    respond " #{format('%6d', avg_dust.to_i)}: Avg per Dust"
    respond ""

  end

  def self.detailed_jewel_report
    jewel_events = $killtracker[:jewel_found] || {}
    # Sort keys (timestamps) in chronological order
    sorted_keys = jewel_events.keys.sort_by(&:to_i)
  
    respond "=== Detailed Jewel Event Log ==="
    sorted_keys.each do |key|
      event = jewel_events[key]
      time = Time.at(key.to_i)
      formatted_time = time.strftime("%m/%d/%Y - %H:%M:%S")
      respond "Time: #{formatted_time} | Searches: #{event[:searches]} | Name: #{event[:name]}"
    end
    respond ""
  end

  def self.detailed_dust_report
    dust_events = $killtracker[:dust_found] || {}
    sorted_keys = dust_events.keys.sort_by(&:to_i)

    respond "=== Detailed Dust Event Log ==="
    sorted_keys.each do |key|
      event = dust_events[key]
      time = Time.at(key.to_i)
      formatted_time = time.strftime("%m/%d/%Y - %H:%M:%S")
      respond "Time: #{formatted_time} | Searches: #{event[:searches]}"
    end
    respond ""
  end

  loop do
    unless CMD_QUEUE.empty?
      command = CMD_QUEUE.pop
      return if command.nil?
      case command
      when /search_report/
        creature, count, jewel, dust = command.gsub("search_report_", "").split(":")
        Lich::Messaging.stream_window("Kills: (#{count}) - (#{creature})", "speech") if $killtracker[:announce_msg]
        Lich::Messaging.stream_window("Kills since last Jewel: (#{jewel}) Dust: (#{dust}) - (#{creature})", "speech") if !$killtracker[:announce_msg]
      when /dust_found/
        Lich::Messaging.stream_window("Found dust after #{command.gsub("dust_found_", "")} kills.", "speech")
      when /jewel_found/
        Lich::Messaging.stream_window("Found a gemstone in #{command.gsub("jewel_found_", "")} kills.", "speech")
      when /summary/
        Killtracker.summary_report
      when /jewel report/
        Killtracker.detailed_jewel_report
      when /dust report/
        Killtracker.detailed_dust_report
      when /announce$/
        $killtracker[:silent] = !$killtracker[:silent] # toggle setting
        msg = $killtracker[:silent] ? 'Reporting only upon a find.' : 'Reporting after each kill.'
        Lich::Messaging.stream_window(msg, "speech")
      when /announce msg/
        $killtracker[:announce_msg] ||= false
        $killtracker[:announce_msg] = !$killtracker[:announce_msg]
        msg = $killtracker[:announce_msg] ? 'Announce shows total search count.' : 'Announce shows searches since last find'
        Lich::Messaging.stream_window(msg, "speech")
      end
    end
    sleep(1)
  end

end

# {:jewel_found=>{"1742098558"=>{:searches=>1007, :name=>"knapped emerald jewel haloed by veniom"}}, :dust_found=>{"1742082231"=>{:searches=>29}, "1742085144"=>{:searches=>237}, "1742097816"=>{:searches=>706}, "1742097846"=>{:searches=>1}, "1742098523"=>{:searches=>16}, "1742119053"=>{:searches=>94}}, :searches_since_jewel=>105, :searches_since_dust=>14, :total_searches=>1112}