=begin
	Rest assistance script designed to to start resting scripts (i.e. waggle)
	Kill scripts that shouldn't be run when you go afk (i.e. bigshot)
	And wait until your mind is empty to log you out (REQUIRES KEEPALIVE, ;repo download keepalive)
	Will log out earlier (clear, but not belled) if gift is active to avoid wasting gift on a partial pulse
	Can also restart specificed scripts if killed early (i.e. if you kill watchdog so it doesn't log you out early,
								  you will want to make sure its restarted if you decide
								  not to go afk)

	
	defaults:
		to kill: bigshot, watchdog (both very highly reccomended you not change)
		to start: waggle
                to ensure restarted: watchdog (very highly reccomended)

	version: 1
	author: Eldra
=end


before_dying {
        $ensure_restarted_scripts.each { |k,v| start_if_not(k, v) }
	kill_if_run('keepalive')
}

$kill_scripts = CharSettings['kill_scripts'] || ['bigshot', 'watchdog']
$start_scripts = CharSettings['start_scripts'] || {'waggle' =>  []}
$ensure_restarted_scripts = CharSettings['ensure_restarted_scripts'] || {'watchdog' => []}

def kill_if_run(the_script)
	if running? the_script
		kill_script(the_script)
	end
end

def start_if_not(the_script, args_array)
	if not running? the_script
		start_script(the_script, args_array)
	end
end

def pretty_up_hash(the_hash)
	pretty_out = []
        the_hash.each { |k,v| pretty_out.push((k + ' ' + v.join(' ')).strip()) }
	return pretty_out.join(', ')
end

def list_settings()
        echo "Scripts to kill: %s" % [$kill_scripts.join(', ')]
        echo "Scripts to start: %s" % [pretty_up_hash($start_scripts)]
        echo "Scripts to ensure restarted on exit: %s" % [pretty_up_hash($ensure_restarted_scripts)]
        exit
end

if script.vars[1] =~ /list/i
	list_settings()
elsif script.vars[1] =~ /help|usage/
	respond "This script is designed to kill other scripts you may have running (i.e. bigshot)"
	respond "Start resting scripts you may want to run while resting (i.e. waggle)"
	respond "And keep you logged in (requires keepalive, ;repo download keepalive) until your mind is empty"
	respond "If you are on gift, it will logout earlier (25% mind) to avoid wasting gift with a partial pulse"
	respond "When killed the script can also ensure certain scripts (i.e. watchdog) are restarted"
	respond ""
	respond "Usage:"
	respond ";restfull list"
	respond "		list current settings for start, kill and ensure scripts"
	respond ";restfull add kill <script name>"
	respond "		add a script to kill when this script is launched"
	respond "		example: ;restull add kill bigshot"
	respond ";restfull add start <script name>"
	respond "		add a script to start when this is launched, with or without additional arguments"
	respond "		example: ;restfull add start waggle"
	respond "		example: ;restfull add start go2 town"
	respond ";restfull add ensure <script name>"
	respond "		similar to start, but for scripts to ensure are launched if you kill restfull early"
	respond "		example: ;restfull add ensure watchdog 10"
	respond ""
	respond ";restfull rem (start|kill|ensure) <script name>"
	respond "		remove scripts from start/kill/ensure lists"
	respond "		example: ;restfull rem start go2"
	respond "		example: ;restfull rem kill bigshot <--- NOT RECCCOMENDED"
	respond "		example: ;restfull rem ensure breakgs"
	respond ""
	respond ";restfull help"
	respond "		:)"
	exit
elsif script.vars[1] =~ /add/i
	if script.vars[2] =~ /start/i
		(echo "Error!";exit) if script.vars[3].nil?
		$start_scripts[script.vars[3]] = script.vars[4..99]
		CharSettings['start_scripts'] = $start_scripts
		echo "Sttings updated!"
	elsif script.vars[2] =~ /kill/i
		(echo "Error!";exit) if script.vars[3].nil?
                $kill_scripts.push(script.vars[3])
                CharSettings['kill_scripts'] = $kill_scripts
		echo "Sttings updated!"
	elsif script.vars[2] =~ /ensure/i
		(echo "Error!";exit) if script.vars[3].nil?
                $ensure_restarted_scripts[script.vars[3]] = script.vars[4..99]
                CharSettings['ensure_restarted_scripts'] = $ensure_restarted_scripts
		echo "Sttings updated!"
	else
		echo "Error!"
	end
	list_settings()
elsif script.vars[1] =~ /rem/i
	if script.vars[2] =~ /start/i
		(echo "Error!";exit) if script.vars[3].nil?
		$start_scripts.delete(script.vars[3])
                CharSettings['start_scripts'] = $start_scripts
                echo "Sttings updated!"
	elsif script.vars[2] =~ /kill/i
		(echo "Error!";exit) if script.vars[3].nil?
		$kill_scripts.delete(script.vars[3])
                CharSettings['kill_scripts'] = $kill_scripts
                echo "Sttings updated!"
	elsif script.vars[2] =~ /ensure/i
		(echo "Error!";exit) if script.vars[3].nil?
                $ensure_restarted_scripts.delete(script.vars[3])
                CharSettings['ensure_restarted_scripts'] = $ensure_restarted_scripts
                echo "Sttings updated!"
	else
		echo "Error!"
	end
	list_settings()
end

$kill_scripts.each { |s| kill_if_run(s) }
$start_scripts.each { |k,v| start_if_not(k, v) }
start_if_not('keepalive', [])

if Gift.remaining == 0
	wait_mind = 0
else
	wait_mind = 25
end

wait_until { percentmind == wait_mind }
echo "Logging you out as your EXP bucket is empty or close to it!"
fput('quit')
