=begin

  Shattered target switch script

   authors: Tykus
      game: Gemstone
      tags: shattered, targets, bigshot
   version: 0.1
  requried: Lich >= 4.6.54

  changelog:
    0.1 (20-03-26):
      Initial creation of script based on previously created community script
  
  This script can changed bigshot targets based on room tags. It is super experimental at this point and sketchy beyond belief. Do not believe anything it says!
  

=end

# Verify this is running in shattered
unless XMLData.game =~ /^GSF/
  output = "\n"
  output.concat "switch_target.lic is intended to be used in Gemstone IV: Shattered\n"
  output.concat "\n"
  output.concat "Please come and join us in Shattered if you would like to know more!\n"
  output.concat "\n"
  respond output
  exit
end

tagged_rooms = Array.new
nearest_tagged_room_finder = Array.new
boundary_rooms = Array.new
target_list = Array.new
boundary_rooms_string = nil
target_list_string = nil
creature = nil
location = nil
good_location = 0

find_bandit_rooms = proc {
  Room.list.each { |r|
    if r.location.include?($bounty_parser_location)
        tagged_rooms.push(r)
    end
  }
}

find_target_rooms = proc {
  Room.list.each { |r|
    if r.location == location && r.tags.include?(creature)
      good_location += 1
    end
  }
  if good_location == 0 
    split_location = location.split(" ")
    split_location.each {|w|
      if w =~ /the|and|of|or/
        next
      end
      Room.list.each { |r|
        if r.location.include?(w) && r.tags.include?(creature)      
          good_location += 1
          location = w
          break 
        end
      }
    }
  end
  if good_location == 0
    respond "Something is amiss with the location. MapDB likely missing LOCATION data"
  end  
  
  Room.list.each { |r|
    if r.tags.include?(creature) && location == nil
        tagged_rooms.push(r)
    elsif r.tags.include?(creature) && r.location.include?(location)
        tagged_rooms.push(r)    
    end
  }
  if location == nil
   if Room.current.id == 20239
      location = Room[Room[UserVars.shattered_nexus_exit].find_nearest(tagged_rooms)].location
      if location != nil
        tagged_rooms = []
        find_target_rooms.call
      end
   else
      location = Room[Room.current.find_nearest(tagged_rooms)].location
      if location != nil
        tagged_rooms = []
        find_target_rooms.call
      end
   end  
  end
}

if script.vars[0] != nil
  creature = "creature:#{script.vars[0]}"
  Room.list.each { |r|
    if r.tags.include?(creature)
        nearest_tagged_room_finder.push(r)
    end
  }
  if Room.current.id == 20239
    location = Room[Room[UserVars.shattered_nexus_exit].find_nearest(nearest_tagged_room_finder)].location
  else
    location = Room[Room.current.find_nearest(nearest_tagged_room_finder)].location
  end  
  find_target_rooms.call
elsif $bounty_parser_target != nil
  if $bounty_parser_target == "bandit"
    find_bandit_rooms.call
  else 
    creature = "creature:#{$bounty_parser_target}"
    location = $bounty_parser_location
    find_target_rooms.call
  end
elsif checkbounty =~ /You are not currently assigned a task./
  respond "No target given.... No current bounty"
  respond "Exiting"
  exit
else
  respond "If you want to switch to targets based on your bounty task"
  respond "please download shat_bounty_parser.lic"
  respond "You will then be able to run the script without a stated target and"
  respond "it will get the correct target and location"
  exit
end



tagged_rooms.each { |t|
  if $bounty_parser_target != "bandit" || script.vars[0] != nil
    t.tags.each { |m|
      if m.include?("creature:") && !target_list.include?(m[9..-1])
        target_list.push(m[9..-1])
      end
    }
    UserVars.op["wander_wait"]=1
  elsif $bounty_parser_target == "bandit" && script.vars[0] == nil
     target_list = ["bandit","thug","robber","brigand","outlaw","highwayman","mugger","marauder","thief"]
     UserVars.op["wander_wait"]=5
  end
      
  t.wayto.each_pair { |r,d|
    if !tagged_rooms.include?(Room[r]) && !boundary_rooms.include?(r.to_i)
      boundary_rooms.push(r.to_i)
    end
  }
}

boundary_rooms.each { |br|
  boundary_rooms_string = boundary_rooms_string + "#{br},"
}

respond "Intended Target: #{creature}"
respond "Targets within area: #{target_list}"
target_list.each {|t| 
  just_noun = t.split(/[\s,:]/).last
  target_list[target_list.index(t)] = just_noun
}

target_list.each { |tl|
  if !target_list_string.include?(tl)
    target_list_string = target_list_string + "#{tl},"
  end
    
}

UserVars.op["hunting_room_id"] = Room.current.find_nearest(tagged_rooms).to_s
UserVars.op["hunting_boundaries"] = boundary_rooms_string[0...-1]
UserVars.op["targets"] = target_list_string[0...-1]


respond "Starting Room: #{Room.current.find_nearest(tagged_rooms)}"
respond "Boundary Rooms: #{boundary_rooms}"
respond "Number of rooms within boundaries: #{tagged_rooms.length}"
respond "Using nouns:  #{UserVars.op["targets"] = target_list_string[0...-1]}"
    
    


