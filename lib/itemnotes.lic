#Itemnotes - add notes to yer stuff. 


class GameObjNote < GameObj
  attr_reader :id
	attr_accessor :noun, :name, :status, :spell, :activator, :charges, :note
  Settings.load
  Settings[Char.name] ||= Hash.new
  @@notes = Settings[Char.name]['notes'] ||= Array.new
  
  def initialize(id, noun, name, status=nil, spell=nil, activator=nil, charges=nil, note=nil)
    super(id, noun, name, status)
    @spell = spell
    @activator = activator
    @charges = charges
    @note = note
	end
  def GameObjNote
		@noun
	end
  	def GameObjNote.new_note(id, noun, name, status=nil, spell=nil, activator=nil, charges=nil, note=nil)
		obj = GameObjNote.new(id, noun, name, status, spell, activator, charges, note)
		@@notes.push(obj)
    Settings['notes']  = @@notes
    Settings.save
	end
  def GameObjNote.notes
		if @@notes.empty?
			nil
		else
			@@notes.dup
		end
	end
  def GameObjNote.clear_notes
		@@notes.clear
	end
  def GameObjNote.remove(obj)
    if obj =~ /[0-9]+/
      removeobj = @@notes[obj.to_i]
    else
      removeobj = @@notes.find {|note| note.name == obj.name} 
    end
    if removeobj
      @@notes.delete(removeobj)
      Settings['notes']  = @@notes
      Settings.save
      return true
    else
      return false
    end
  end
end

def New_note(obj, spell, activator, charges, note)
  GameObjNote.new_note(obj.id, obj.noun, obj.name, obj.status, spell, activator, charges, note)
end

def What_note(obj)
  note = GameObjNote.notes.find { |note| note.id == obj.id }
  responce = "your #{obj.noun} has"
  responce += " this note: '#{note.note}'" if note.note
  responce += " no note" if !note.note
  return responce
end

def Find_notes(find_string)
  notes = GameObjNote.notes.find_all {|note| note.note =~ /#{find_string}/i }
  if notes.empty? 
    echo "no matching notes found"
  else
   respond "            these objects found:"
   respond " Object Name:                    Note:"
    for note in notes
      respond sprintf( "%-30s  %s", note.name, note.note)
    end
  end
end

def Get_item(find_string)
  notes = GameObjNote.notes.find_all {|note| note.note =~ /#{find_string}/i }
  if notes.empty?
    echo "not matches found"
  else
    for item in notes
      result = dothistimeout "get #{item.name}", 5, /You already have that|Get what?|You remove|You need a free hand to pick that up|You pick up/i
      if result =~ /You already have that/i
        unless GameObj.left_hand.name == item.name or GameObj.right_hand.name == item.name 
          fput "remove #{item.name}"
          returnthis = true
          break
        end
      elsif result =~ /Get what?/i
        returnthis = false
      elsif result =~ /You need a free hand to pick that up/i
        returnthis = false
        break
      elsif result = /You remove|You pick up/i
        returnthis = true
        break
      end
    end
  end
  echo "found #{notes.length} match(es), but couldn't find them" if returnthis == false
  return returnthis
end

def Use_item(search_string)
    notes = GameObjNote.notes.find_all {|note| note.note =~ /#{search_string}/i }
    found_item = nil
  if notes.empty?
    echo "not matches found"
  else
    for item in notes 
      found_item = GameObj.inv.find {|thing| thing.name =~ /#{item.name}/ } 
      found_item = GameObj.left_hand if GameObj.left_hand.name=~ /#{item.name}/
      found_item = GameObj.right_hand if GameObj.right_hand.name =~ /#{item.name}/ 
      if found_item
        found_item_note = item
        break
      end
    end
    unless found_item
      if checkleft and checkright
        fput "stow right"
      end
      for item in notes 
        unless found_item
          result = dothistimeout "get #{item.name}", 5, /You already have that|Get what?|You remove|You need a free hand to pick that up|You pick up/i
          if result =~ /Get what?/i
            returnthis = false
          elsif result =~ /You need a free hand to pick that up/i
            returnthis = false
            break
          elsif result = /You remove|You pick up/i
            found_item = GameObj.right_hand if GameObj.right_hand.name == item.name
            found_item = GameObj.left_hand if GameObj.left_hand.name == item.name
            found_item_note = item
            break
          end
        end
      end
    end
    if found_item
      loop {
      do_this = "rub ##{found_item.id}" if  found_item_note.activator == "rub" 
      do_this = "tap ##{found_item.id}" if  found_item_note.activator == "tap" 
      do_this = "raise ##{found_item.id}" if  found_item_note.activator == "raise"
      do_this = "wave ##{found_item.id}" if  found_item_note.activator == "wave" 
      use_result = dothistimeout do_this, 3, /(?:Cast|Sing) Roundtime [0-9]+ Seconds|You lose control|Maybe you have to wear it first/
      if use_result =~ /Maybe you have to wear it first/
        fput "wear ##{found_item.id}"
        next
      elsif use_result.nil?
      else
        returnthis = true
        if found_item_note.charges
          notebefore, noteafter = found_item_note.note.split(" #{found_item_note.charges} ")
          newnote = notebefore + " #{found_item_note.charges.to_i - 1} " + noteafter
          GameObjNote.remove(found_item_note)
          New_note(found_item_note, found_item_note.spell, found_item_note.activator, ((found_item_note.charges).to_i - 1).to_s, newnote)
        end
      end
      break
      }
    end
    echo "found #{notes.length} match(es), but couldn't find them" if returnthis == false
    return returnthis
  end
end

if script.vars[1] =~ /^get$/i
  Get_item(script.vars[2..-1].join(" "))
  exit
elsif script.vars[1] =~ /^use$/i
  Use_item(script.vars[2..-1].join(" "))
  exit
elsif script.vars[1] =~ /^find$/i
  Find_notes(script.vars[2..-1].join(" "))
  exit
elsif script.vars[1] =~ /^list$/i
  respond "#   Object Name:                    Note:"
  for note in GameObjNote.notes
    respond sprintf( "%-2d %-30s  %-s", GameObjNote.notes.index(note), note.name, note.note)
  end
  exit
elsif script.vars[1] =~ /^rem(?:ove)?$|^del(?:ete)?$/i
  if GameObjNote.remove(script.vars[2])
    echo "item #{script.vars[2]} removed"
  else
    echo "item #{script.vars[2]} could not be found"
  end
  exit
elsif script.vars[0].nil?
  if checkright
    responce = What_note(GameObj.right_hand)
    echo responce
    exit
  else 
  end
elsif script.vars[1] =~ /^help$/i
else
  sent_string = script.vars[0]
  activator = nil
  activator = "wave" if sent_string =~ /wave/i
  activator = "tap" if sent_string =~ /tap/i
  activator = "rub" if sent_string =~ /rub/i
  activator = "raise" if sent_string =~ /raise/i
  spell, charges, waste = sent_string.scan(/\d+/)
  spell = nil unless Spell[spell.to_i]
  charges = nil unless sent_string =~ /charge/i
  
  if checkright
    if GameObjNote.notes.find { |note| note.name == GameObj.right_hand.name }
      string = What_note(GameObj.right_hand)
      echo string + "... replacing it"
      GameObjNote.remove(GameObj.right_hand)
    end
    New_note(GameObj.right_hand, spell, activator, charges, script.vars[0])
    echo "The note '#{script.vars[0]}' was attached to your #{GameObj.right_hand}"
    exit
  else
  end
end  

  respond "   Itemnotes usage:"
  respond "   #{$clean_lich_char}#{script.name} list                 lists all yer notes"
  respond "   #{$clean_lich_char}#{script.name} find <search string> lists all items whose notes match"
  respond "   #{$clean_lich_char}#{script.name} get <search string>  gets an item whose note matches"
  respond "   #{$clean_lich_char}#{script.name} remove <#>           the number when you do list"
  respond "   #{$clean_lich_char}#{script.name} <note>               add a note the the item in your right hand"
  respond "   #{$clean_lich_char}#{script.name}                      find the note for whats in your right hand"



# imbed <spell> in <item> using <activator> for <number> charges
# You feel that you have successfully placed 5 charges of the Elemental Deflection spell into it
