=begin
  daemon script to use your fated fortune item

  ;vars set fated-fortune/talisman=<full item name>
  ;fated-fortune

  changelong:
   - 1.0.0: will use a fated fortune charge if charges == max charges

  Author: Ondreian
  version: 1.0.0
=end

module FatedFortune
  ChargesAvailable = %r{It currently has (?<charges>\d)/(?<maximum_charges>\d) of Fated Fortune charges}

  @charges         ||= -1
  @maximum_charges ||= -1

  def self.charges
    @charges
  end

  def self.maximum_charges
    @maximum_charges
  end

  def self.setting()
    Vars["fated-fortune/talisman"]
  end

  def self.talisman()
    @_talisman ||= GameObj.inv.find { |i| i.name.eql?(self.setting) }
  end

  def self.parse()
    res = dothistimeout("anal #%s" % self.talisman.id, 3, ChargesAvailable)
    fail "unknown analyze outcome for Luck talisman" unless res
    data = res.match(ChargesAvailable)
    @charges = data[:charges].to_i
    @maximum_charges = data[:maximum_charges].to_i
  end

  def self.add_charge!
    @charges = @charges + 1
  end

  def self.activate!
    res = dothistimeout("rub #%s" % self.talisman.id, 3, /In deliberate sequence, your fingertips brush a pattern over your/)
    res or fail "unknown outcome when activating Luck talisman"
  end

  def self.watch()
    DownstreamHook.add(self.name, -> line {
      if line.start_with?(%[Coruscant motes of light spiral out from the])
        FatedFortune.add_charge!
      end

      return line
    })
    before_dying {DownstreamHook.remove(self.name)}
  end

  def self.needs_parsing?
    self.charges < 0 or self.maximum_charges < 0
  end

  def self.main()
    self.parse if self.needs_parsing? or Script.current.vars.include?("--flush")
    fail "something bad happened while parsing Fated Fortune output" if self.needs_parsing?
    self.watch
    loop {
      wait_while {self.charges < self.maximum_charges}
    }
  end

  self.main()
end