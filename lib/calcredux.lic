#!/usr/bin/env ruby
# This monstrosity of a script monitors all game data, and calculates your redux everytime it sees you take a hit from a weapon it has in its database. This includes virtually every OHE (aliases included), and also all standard brawling/2H/pole/blunt base weapons (switchable weapons, such as bastard swords and katanas, have been excluded because it's either impossible to figure out which it is, or so hard I just don't want to bother). All crit messages I could find damage values for are included -- however, this unfortunately doesn't include neck crits... still, about 75-95% of hits you take are able to be calculated. It automatically saves your history, so that over time, the value it provides for your redux is about as close as you can possibly get without knowing the formula.

setpriority(-5)

# Infomonitor occasionally isn't getting enough time to load the player's level when Lich starts up, so...

script_dir = $script_dir.dup
type_ahead_wait = false		# Another make-shift flag, just stores whether the user already heard "sorry, we caused a type ahead error..."
history = { "count" => 0, "sum" => 0.00 }	# This is called a hash, and it simply initializes the hash itself. The values get read below
history_level = "0"				# Just initializes the variable so we don't have to juggle it between methods
history_string = String.new

# Since Lich tracks char name/level now (w/ infomonitor.lic), no need to interact with the game unless we don't have the info for some reason... check for that.
char_name = Char.name
level = Stats.level

# Now if either of those are still unknown, interact w/ the game to collect the necessary info...
if char_name.nil? or level.nil?
# Scan Lich's cached history and pick up the user's name/level from there, if possible. Since 'regetall' turns the string into a regular expression, we can't give it a regular expression... but the standard syntax will work just fine (hence the funky chars in the string).
	if regetall("Name:.+Race:.+Profession:.+")
		char_name = matchfindword('Name: ?')
		clear
		regetall("Gender:.+Age:.+Expr:.+Level:")
		level = matchfindword('Level:  ?').to_i
		clear
	else
# Lich doesn't have any cached game lines with the info we need, so send 'info' to the game and read it in.
		put("info")
		char_name = matchfindword('Name: ?')
		level = matchfindword('Level:  ?').to_i
	end
end

if level == 0
	sleep 1
	level = Stats.level
end

# This handles opening/reading char data from files...
begin
	File.open("#{script_dir}calcredux-history-#{char_name}.txt") { |file|
		data = file.readlines
		history_level = data.last.to_s.split(':')[0].to_i
		history["count"] = data.last.to_s.split(':')[1].to_i
		history["sum"] = data.last.to_s.split(':')[2].to_f
	}
	if history_level != level
		echo("Happy birthday! Congrats on training; your history's been reset to make sure your average stays accurate.") unless history_level.nil?
		File.open("#{script_dir}calcredux-history-#{char_name}.txt", "w") { |file|
			history_string = level.to_s + ':' + '0' + ':' + '0.00'
			file.print("# DO NOT edit by hand unless it's necessary -- just delete the file to reset these values.\r\n#{history_string}")
		} unless history_level.nil?
		history["count"] = 0
		history["sum"] = 0.00
	end
rescue SystemCallError
	sleep 0.2
	echo("Did not find your character's history file! A fresh one was created for you.")
	history["count"] = 0 ; history["sum"] = 0.00
	File.open("#{script_dir}calcredux-history-#{char_name}.txt", "w") { |file|
		history_string = level.to_s + ':' + history["count"].to_s + ':' + history["sum"].to_s
		file.print("# DO NOT edit by hand unless it's necessary -- just delete the file to reset these values.\r\n#{history_string}")
	}
	history["count"] = 0 ; history["sum"] = 0.00
rescue
	echo("Unknown error during history file interaction! Continuing w/o taking any action...")
end

# This chunk checks for any armor settings, and autoscans if none are found, etc.
begin
	armor_array = File.open("#{script_dir}calcredux-armor-#{char_name}.txt") { |file| file.readlines }
	armor_array.delete_if { |line| line =~ /^\#/ }
	until armor_array[0].nil?
		if armor_array[0].downcase =~ /skin|leather|scale|chain|plate/i
			armor = $~.to_s
			echo("Armor type '#{armor}' has been loaded from your settings file.")
		end
		armor_array.shift
	end
rescue SystemCallError
	sleep 0.2
	echo("Did not find your character's armor setting file! A blank one was created for you.")
		armor_file = File.open("#{script_dir}calcredux-armor-#{char_name}.txt", "w") { |file|
			file.print("# Just put your armor type on the next line to avoid calcredux.lic trying to detect it every run (skin/leather/scale/chain/plate)\r\n")
		}
rescue
	echo("unknown error during armor file interaction! Continuing w/o taking any action...")
#ensure
#	armor_file.close unless (armor_file.nil? or armor_file.closed?)
end

# Process the game data received from sending 'inventory' (this is the autoscan part)
if armor.nil? then put("inventory armor") end
while armor.nil?
  inventory = get
	if inventory =~ /^You are wearing/i
		case inventory
		when /sonic barrier/i
			if regetall('\[Creating a swirling sonic barrier around you equivalent of ASG')
				armor_temp = get
				armor_temp_num = armor_temp.sub(/\.\]/, '').split.last.to_i
				if armor_temp_num < 5 and armor_temp_num > 0
					armor = "skin"
				elsif armor_temp_num < 9
					armor = "leather"
				elsif armor_temp_num < 13
					armor = "scale"
				elsif armor_temp_num < 17
					armor = "chain"
				elsif armor_temp_num > 16 and armor_temp_num < 21
					armor = "plate"
				end
			else
				echo("inventory scan has detected sonic armor; you can either PREP 1014 and SING your armor type again for a renewal cost of 6 mana, set your most frequently used armor type in your settings file 'calcredux-armor-#{char_name}' in the Lich scripts directory, or use the Lich command ';send' and send the string 'armor_to <type>', where type is your desired armor group.")
				while armor.nil?
					sonic = get
					if sonic =~ /\[Creating a swirling sonic barrier around you equivalent of ASG |^armor_to /
						armor_temp = $'.chomp
	                                        if armor_temp =~ /skin|leather|scale|chain|plate/
        	                                        armor_temp_num = 21
                	                        else
                        	                        armor_temp_num = armor_temp.sub(/\.\]/, '').to_i
                                	        end
                                        	if armor_temp_num < 5 and armor_temp_num > 0
							armor = "skin"
        	                                elsif armor_temp_num < 9
							armor = "leather"
                        	                elsif armor_temp_num < 13
							armor = "scale"
                                        	elsif armor_temp_num < 17
							armor = "chain"
        	                                elsif armor_temp_num > 16 and armor_temp_num < 21
							armor = "plate"
                        	                elsif armor_temp =~ /skin/
							armor = "skin"
                                        	elsif armor_temp =~ /leather/
							armor = "leather"
        	                                elsif armor_temp =~ /scale/
							armor = "scale"
                        	                elsif armor_temp =~ /chain/
							armor = "chain"
                                        	elsif armor_temp =~ /plate/
							armor = "plate"
						else
							echo("was not able to detect your armor type! Please repeat.")
						end
					end
				end
			end
			echo("sonic barrier identified as #{armor} class protection.")
		when /brigandine/i
			armor = "scale"
		when /robes/i
			armor = "skin"
		when /leather breastplate/i
			armor = "scale"
		when /plate/i
			armor = "plate"
		when /chain/i
			armor = "chain"
		when /leather/i
			armor = "leather"
		when /no armor at this time/i
			armor = "skin"
		else
			echo("Your armor class was not successfully determined, and without this information, it is impossible to determine your redux. Please either edit the file 'calcredux-armor-#{char_name}' in your Lich scripts directory and restart the script, or send the armor type manually. Defaulting to chain for now.")
			armor = "chain"
		end
	elsif inventory =~ /Sorry, you may only type ahead/
			echo("command rejected due to your type ahead limit! Please send 'i' to the game at your convenience so your inventory can be autoscanned for your armor type (or you can edit the file 'calcredux-armor-#{char_name}.txt' in your Lich scripts directory).")
	end
end

# Quick check to make sure that somehow (shouldn't be possible, but it doesn't hurt) the user's armor wasn't identified as an impossible value
if armor !~ /skin|leather|scale|chain|plate/i
	echo("Error... somehow your armor value is not one of the 5 possible types! This shouldn't be possible; if you haven't been tinkering with this file, please send me email with any info you have so I can fix this bug (including an exact cut/paste of the armor value that follows): #{armor.to_s.dump}")
	exit
end

$avg_redux = (history["sum"].to_f / history["count"].to_f)

# This is an array that's used to minimize some of the processing necessary to check if a weapon's known or not (faster to scan what's already an array than to isolate the hash keys of a given armor group, then scan it exactly the same way)
weapons = [ "dagger" , "main gauche" , "rapier" , "whip-blade" , "estoc" , "scimitar" , "short sword" , "handaxe" , "broadsword" , "falchion" ,
	"longsword" , "backsword" , "mace" , "dhara" , "staff" , "military pick" , "flail" , "flamberge" , "war mattock" , "two-handed sword" ,
	"twohanded sword" , "battle axe" , "whip" , "crowbill" , "cudgel" , "ball & chain" , "war hammer" , "morning star" , "pilum" , "javelin" ,
	"halberd" , "naginata" , "jeddart-axe" , "hammer of kai" , "awl-pike" , "lance" , "closed fist" , "paingrip" , "cestus" , "knuckle-duster" ,
	"hook-knife" , "tiger-claw" , "knuckle-blade" , "yierka-spur" , "blackjack" , "jackblade" , "troll-claw" , "fist-scythe" , "katar" , "flyssa",
	"goliah" , "katzbalger" , "machera" , "palache" , "schiavona" , "seax" , "spadroon" , "spatha" , "talon sword" , "xiphos" , "badelaire" ,
	"craquemarte" , "khopesh" , "machete" , "takouba" , "balta" , "broad axe" , "crescent axe" , "francisca" , "hatchet" , "meat cleaver" , 
	"moon axe" , "sparte" , "taper" , "toporok" , "kaskara" , "bilbo" , "colichemarde" , "epee" , "fleuret" , "foil" , "schlager" , "tuck" , 
	"tock" , "tocke" , "verdun" , "cutlass" , "kilij" , "palache" , "sabre" , "sapara" , "yataghan" , "kama" , "antler sword" , "braquemar" , 
	"baselard" , "chereb" , "gladius" , "kris" , "sica" , "wakizashi" , "bodkin" , "butcher knife" , "cinquedea" , "dirk" , "misericord" , 
	"parazonium" , "pavade" , "poignard" , "pugio" , "scramasax" , "sgian achlais" , "sgian dubh" , "stiletto" , "tanto" , "kozuka" , 
	"mining pick" , "two handed sword", "greatsword", "claidhmore"]


# Tons & tons of DF's... section for each armor group to again keep the number of processes necessary to a reasonable few
df_skin = { "dagger" => 0.250,
	"bodkin" => 0.250,
	"butcher knife" => 0.250,
	"cinquedea" => 0.250,
	"dirk" => 0.250,
	"misericord" => 0.250,
	"parazonium" => 0.250,
	"pavade" => 0.250,
	"poignard" => 0.250,
	"pugio" => 0.250,
	"scramasax" => 0.250,
	"sgian achlais" => 0.250,
	"sgian dubh" => 0.250,
	"stiletto" => 0.250,
	"tanto" => 0.250,
	"kozuka" => 0.250,
	"main gauche" => 0.275,
	"rapier" => 0.325,
	"bilbo" => 0.325,
	"colichemarde" => 0.325,
	"epee" => 0.325,
	"fleuret" => 0.325,
	"foil" => 0.325,
	"schlager" => 0.325,
	"tuck" => 0.325,
	"tocke" => 0.325,
	"tock" => 0.325,
	"verdun" => 0.325,
	"whip-blade" => 0.333,
	"estoc" => 0.425,
	"scimitar" => 0.375,
	"cutlass" => 0.375,
	"kilij" => 0.375,
	"palache" => 0.375,
	"sabre" => 0.375,
	"sapara" => 0.375,
	"yataghan" => 0.375,
	"kama" => 0.375,
	"short sword" => 0.350,
	"antler sword" => 0.350,
	"braquemar" => 0.350,
	"baselard" => 0.350,
	"chereb" => 0.350,
	"gladius" => 0.350,
	"kris" => 0.350,
	"sica" => 0.350,
	"wakizashi" => 0.350,
	"handaxe" => 0.420,
	"mining pick" => 0.420,
	"balta" => 0.420,
	"broad axe" => 0.420,
	"crescent axe" => 0.420,
	"francisca" => 0.420,
	"hatchet" => 0.420,
	"meat cleaver" => 0.420,
	"moon axe" => 0.420,
	"sparte" => 0.420,
	"taper" => 0.420,
	"toporok" => 0.420,
	"broadsword" => 0.450,
	"flyssa" => 0.450,
	"goliah" => 0.450,
	"katzbalger" => 0.450,
	"machera" => 0.450,
	"palache" => 0.450,
	"schiavona" => 0.450,
	"seax" => 0.450,
	"spadroon" => 0.450,
	"spatha" => 0.450,
	"talon sword" => 0.450,
	"xiphos" => 0.450,
	"falchion" => 0.450,
	"badelaire" => 0.450,
	"craquemarte" => 0.450,
	"khopesh" => 0.450,
	"machete" => 0.450,
	"takouba" => 0.450,
	"longsword" => 0.425,
	"kaskara" => 0.425,
	"backsword" => 0.440,
#
	"mace" => 0.400,
	"dhara" => 0.400,
	"whip" => 0.275,
	"crowbill" => 0.300,
	"cudgel" => 0.300,
	"ball & chain" => 0.400,
	"war hammer" => 0.410,
	"morning star" => 0.425,
#
	"staff" => 0.350,
	"military pick" => 0.500,
	"flail" => 0.575,
	"flamberge" => 0.600,
	"war mattock" => 0.525,
	"two-handed sword" => 0.625,
	"twohanded sword" => 0.625,
	"two handed sword" => 0.625,
	"claidhmore" => 0.625,
	"battle axe" => 0.650,
#
	"pilum" => 0.300,
	"javelin" => 0.350,
	"halberd" => 0.550,
	"naginata" => 0.550,
	"jeddart-axe" => 0.550,
	"hammer of kai" => 0.550,
	"awl-pike" => 0.600,
	"lance" => 0.725,
#
	"closed fist" => 0.100,
	"razorpaw" => 0.150,
	"paingrip" => 0.150,
	"cestus" => 0.150,
	"knuckle-duster" => 0.175,
	"hook-knife" => 0.250,
	"tiger-claw" => 0.250,
	"knuckle-blade" => 0.200,
	"yierka-spur" => 0.175,
	"blackjack" => 0.250,
	"jackblade" => 0.250,
	"troll-claw" => 0.325,
	"fist-scythe" => 0.325,
	"katar" => 0.325,
	}


df_leather = { "dagger" => 0.200,
	"bodkin" => 0.200,
	"butcher knife" => 0.200,
	"cinquedea" => 0.200,
	"dirk" => 0.200,
	"misericord" => 0.200,
	"parazonium" => 0.200,
	"pavade" => 0.200,
	"poignard" => 0.200,
	"pugio" => 0.200,
	"scramasax" => 0.200,
	"sgian achlais" => 0.200,
	"sgian dubh" => 0.200,
	"stiletto" => 0.200,
	"tanto" => 0.200,
	"kozuka" => 0.200,
	"main gauche" => 0.210,
	"rapier" => 0.225,
	"bilbo" => 0.225,
	"colichemarde" => 0.225,
	"epee" => 0.225,
	"fleuret" => 0.225,
	"foil" => 0.225,
	"schlager" => 0.225,
	"tuck" => 0.225,
	"tocke" => 0.225,
	"tock" => 0.225,
	"verdun" => 0.225,
	"whip-blade" => 0.225,
	"estoc" => 0.300,
	"scimitar" => 0.260,
	"cutlass" => 0.260,
	"kilij" => 0.260,
	"palache" => 0.260,
	"sabre" => 0.260,
	"sapara" => 0.260,
	"yataghan" => 0.260,
	"kama" => 0.260,
	"short sword" => 0.240,
	"antler sword" => 0.240,
	"braquemar" => 0.240,
	"baselard" => 0.240,
	"chereb" => 0.240,
	"gladius" => 0.240,
	"kris" => 0.240,
	"sica" => 0.240,
	"wakizashi" => 0.240,
	"handaxe" => 0.300,
	"mining pick" => 0.300,
	"balta" => 0.300,
	"broad axe" => 0.300,
	"crescent axe" => 0.300,
	"francisca" => 0.300,
	"hatchet" => 0.300,
	"meat cleaver" => 0.300,
	"moon axe" => 0.300,
	"sparte" => 0.300,
	"taper" => 0.300,
	"toporok" => 0.300,
	"broadsword" => 0.300,
	"flyssa" => 0.300,
	"goliah" => 0.300,
	"katzbalger" => 0.300,
	"machera" => 0.300,
	"palache" => 0.300,
	"schiavona" => 0.300,
	"seax" => 0.300,
	"spadroon" => 0.300,
	"spatha" => 0.300,
	"talon sword" => 0.300,
	"xiphos" => 0.300,
	"falchion" => 0.325,
	"badelaire" => 0.325,
	"craquemarte" => 0.325,
	"khopesh" => 0.325,
	"machete" => 0.325,
	"takouba" => 0.325,
	"longsword" => 0.275,
	"kaskara" => 0.275,
	"backsword" => 0.310,
#
	"mace" => 0.300,
	"dhara" => 0.300,
	"whip" => 0.150,
	"crowbill" => 0.220,
	"cudgel" => 0.250,
	"ball & chain" => 0.300,
	"war hammer" => 0.290,
	"morning star" => 0.325,
#
	"staff" => 0.275,
	"military pick" => 0.375,
	"flail" => 0.425,
	"flamberge" => 0.450,
	"war mattock" => 0.425,
	"two-handed sword" => 0.500,
	"two handed sword" => 0.500,
	"twohanded sword" => 0.500,
	"claidhmore" => 0.475,
	"battle axe" => 0.450,
#
	"pilum" => 0.200,
	"javelin" => 0.250,
	"halberd" => 0.400,
	"naginata" => 0.400,
	"jeddart-axe" => 0.425,
	"hammer of kai" => 0.425,
	"awl-pike" => 0.550,
	"lance" => 0.525,
#
	"closed fist" => 0.075,
	"razorpaw" => 0.100,
	"paingrip" => 0.100,
	"cestus" => 0.100,
	"knuckle-duster" => 0.125,
	"hook-knife" => 0.120,
	"tiger-claw" => 0.150,
	"knuckle-blade" => 0.150,
	"yierka-spur" => 0.150,
	"blackjack" => 0.140,
	"jackblade" => 0.175,
	"troll-claw" => 0.175,
	"fist-scythe" => 0.225,
	"katar" => 0.250,
	}

df_scale = { "dagger" => 0.100,
	"bodkin" => 0.100,
	"butcher knife" => 0.100,
	"cinquedea" => 0.100,
	"dirk" => 0.100,
	"misericord" => 0.100,
	"parazonium" => 0.100,
	"pavade" => 0.100,
	"poignard" => 0.100,
	"pugio" => 0.100,
	"scramasax" => 0.100,
	"sgian achlais" => 0.100,
	"sgian dubh" => 0.100,
	"stiletto" => 0.100,
	"tanto" => 0.100,
	"kozuka" => 0.100,
	"main gauche" => 0.110,
	"rapier" => 0.125,
	"bilbo" => 0.125,
	"colichemarde" => 0.125,
	"epee" => 0.125,
	"fleuret" => 0.125,
	"foil" => 0.125,
	"schlager" => 0.125,
	"tuck" => 0.125,
	"tocke" => 0.125,
	"tock" => 0.125,
	"verdun" => 0.125,
	"whip-blade" => 0.125,
	"estoc" => 0.200,
	"scimitar" => 0.210,
	"cutlass" => 0.210,
	"kilij" => 0.210,
	"palache" => 0.210,
	"sabre" => 0.210,
	"sapara" => 0.210,
	"yataghan" => 0.210,
	"kama" => 0.210,
	"short sword" => 0.200,
	"antler sword" => 0.200,
	"braquemar" => 0.200,
	"baselard" => 0.200,
	"chereb" => 0.200,
	"gladius" => 0.200,
	"kris" => 0.200,
	"sica" => 0.200,
	"wakizashi" => 0.200,
	"handaxe" => 0.270,
	"mining pick" => 0.270,
	"balta" => 0.270,
	"broad axe" => 0.270,
	"crescent axe" => 0.270,
	"francisca" => 0.270,
	"hatchet" => 0.270,
	"meat cleaver" => 0.270,
	"moon axe" => 0.270,
	"sparte" => 0.270,
	"taper" => 0.270,
	"toporok" => 0.270,
	"broadsword" => 0.250,
	"flyssa" => 0.250,
	"goliah" => 0.250,
	"katzbalger" => 0.250,
	"machera" => 0.250,
	"palache" => 0.250,
	"schiavona" => 0.250,
	"seax" => 0.250,
	"spadroon" => 0.250,
	"spatha" => 0.250,
	"talon sword" => 0.250,
	"xiphos" => 0.250,
	"falchion" => 0.250,
	"badelaire" => 0.250,
	"craquemarte" => 0.250,
	"khopesh" => 0.250,
	"machete" => 0.250,
	"takouba" => 0.250,
	"longsword" => 0.225,
	"kaskara" => 0.225,
	"backsword" => 0.225,
#
	"mace" => 0.225,
	"dhara" => 0.225,
	"whip" => 0.087,
	"crowbill" => 0.200,
	"cudgel" => 0.200,
	"ball & chain" => 0.230,
	"war hammer" => 0.250,
	"morning star" => 0.275,
#
	"staff" => 0.225,
	"military pick" => 0.425,
	"flail" => 0.400,
	"flamberge" => 0.475,
	"war mattock" => 0.425,
	"two-handed sword" => 0.500,
	"twohanded sword" => 0.500,
	"two handed sword" => 0.500,
	"claidhmore" => 0.500,
	"battle axe" => 0.500,
#
	"pilum" => 0.225,
	"javelin" => 0.275,
	"halberd" => 0.400,
	"naginata" => 0.400,
	"jeddart-axe" => 0.425,
	"hammer of kai" => 0.450,
	"awl-pike" => 0.575,
	"lance" => 0.550,
#
	"closed fist" => 0.040,
	"razorpaw" => 0.050,
	"paingrip" => 0.050,
	"cestus" => 0.050,
	"knuckle-duster" => 0.085,
	"hook-knife" => 0.070,
	"tiger-claw" => 0.075,
	"knuckle-blade" => 0.100,
	"yierka-spur" => 0.125,
	"blackjack" => 0.090,
	"jackblade" => 0.150,
	"troll-claw" => 0.140,
	"fist-scythe" => 0.200,
	"katar" => 0.225,
	}

df_chain = { "dagger" => 0.125,
	"bodkin" => 0.125,
	"butcher knife" => 0.125,
	"cinquedea" => 0.125,
	"dirk" => 0.125,
	"misericord" => 0.125,
	"parazonium" => 0.125,
	"pavade" => 0.125,
	"poignard" => 0.125,
	"pugio" => 0.125,
	"scramasax" => 0.125,
	"sgian achlais" => 0.125,
	"sgian dubh" => 0.125,
	"stiletto" => 0.125,
	"tanto" => 0.125,
	"kozuka" => 0.125,
	"main gauche" => 0.125,
        "rapier" => 0.125,
	"bilbo" => 0.125,
	"colichemarde" => 0.125,
	"epee" => 0.125,
	"fleuret" => 0.125,
	"foil" => 0.125,
	"schlager" => 0.125,
	"tuck" => 0.125,
	"tocke" => 0.125,
	"tock" => 0.125,
	"verdun" => 0.125,
        "whip-blade" => 0.115,
        "estoc" => 0.200,
        "scimitar" => 0.200,
	"cutlass" => 0.200,
	"kilij" => 0.200,
	"palache" => 0.200,
	"sabre" => 0.200,
	"sapara" => 0.200,
	"yataghan" => 0.200,
	"kama" => 0.200,
        "short sword" => 0.150,
	"antler sword" => 0.150,
	"braquemar" => 0.150,
	"baselard" => 0.150,
	"chereb" => 0.150,
	"gladius" => 0.150,
	"kris" => 0.150,
	"sica" => 0.150,
	"wakizashi" => 0.150,
        "handaxe" => 0.240,
	"mining pick" => 0.240,
	"balta" => 0.240,
	"broad axe" => 0.240,
	"crescent axe" => 0.240,
	"francisca" => 0.240,
	"hatchet" => 0.240,
	"meat cleaver" => 0.240,
	"moon axe" => 0.240,
	"sparte" => 0.240,
	"taper" => 0.240,
	"toporok" => 0.240,
        "broadsword" => 0.225,
	"flyssa" => 0.225,
	"goliah" => 0.225,
	"katzbalger" => 0.225,
	"machera" => 0.225,
	"palache" => 0.225,
	"schiavona" => 0.225,
	"seax" => 0.225,
	"spadroon" => 0.225,
	"spatha" => 0.225,
	"talon sword" => 0.225,
	"xiphos" => 0.225,
        "falchion" => 0.250,
	"badelaire" => 0.250,
	"craquemarte" => 0.250,
	"khopesh" => 0.250,
	"machete" => 0.250,
	"takouba" => 0.250,
        "longsword" => 0.200,
	"kaskara" => 0.200,
        "backsword" => 0.240,
#
	"mace" => 0.250,
	"dhara" => 0.250,
	"whip" => 0.100,
	"crowbill" => 0.150,
	"cudgel" => 0.225,
	"ball & chain" => 0.260,
	"war hammer" => 0.275,
	"morning star" => 0.300,
#
	"staff" => 0.175,
	"military pick" => 0.375,
	"flail" => 0.350,
	"flamberge" => 0.325,
	"war mattock" => 0.375,
	"two-handed sword" => 0.350,
	"twohanded sword" => 0.350,
	"two handed sword" => 0.350,
	"claidhmore" => 0.350,
	"battle axe" => 0.375,
#
	"pilum" => 0.175,
	"javelin" => 0.225,
	"halberd" => 0.300,
	"naginata" => 0.300,
	"jeddart-axe" => 0.325,
	"hammer of kai" => 0.350,
	"awl-pike" => 0.450,
	"lance" => 0.475,
#
	"closed fist" => 0.035,
	"razorpaw" => 0.050,
	"paingrip" => 0.075,
	"cestus" => 0.075,
	"knuckle-duster" => 0.100,
	"hook-knife" => 0.070,
	"tiger-claw" => 0.050,
	"knuckle-blade" => 0.075,
	"yierka-spur" => 0.125,
	"blackjack" => 0.110,
	"jackblade" => 0.150,
	"troll-claw" => 0.120,
	"fist-scythe" => 0.200,
	"katar" => 0.200,
	}

df_plate = { "dagger" => 0.075,
	"bodkin" => 0.075,
	"butcher knife" => 0.075,
	"cinquedea" => 0.075,
	"dirk" => 0.075,
	"misericord" => 0.075,
	"parazonium" => 0.075,
	"pavade" => 0.075,
	"poignard" => 0.075,
	"pugio" => 0.075,
	"scramasax" => 0.075,
	"sgian achlais" => 0.075,
	"sgian dubh" => 0.075,
	"stiletto" => 0.075,
	"tanto" => 0.075,
	"kozuka" => 0.075,
        "main gauche" => 0.075,
        "rapier" => 0.075,
	"bilbo" => 0.075,
	"colichemarde" => 0.075,
	"epee" => 0.075,
	"fleuret" => 0.075,
	"foil" => 0.075,
	"schlager" => 0.075,
	"tuck" => 0.075,
	"tocke" => 0.075,
	"tock" => 0.075,
	"verdun" => 0.075,
        "whip-blade" => 0.065,
        "estoc" => 0.150,
        "scimitar" => 0.165,
	"cutlass" => 0.165,
	"kilij" => 0.165,
	"palache" => 0.165,
	"sabre" => 0.165,
	"sapara" => 0.165,
	"yataghan" => 0.165,
	"kama" => 0.165,
        "short sword" => 0.125,
	"antler sword" => 0.125,
	"braquemar" => 0.125,
	"baselard" => 0.125,
	"chereb" => 0.125,
	"gladius" => 0.125,
	"kris" => 0.125,
	"sica" => 0.125,
	"wakizashi" => 0.125,
        "handaxe" => 0.210,
	"mining pick" => 0.210,
	"balta" => 0.210,
	"broad axe" => 0.210,
	"crescent axe" => 0.210,
	"francisca" => 0.210,
	"hatchet" => 0.210,
	"meat cleaver" => 0.210,
	"moon axe" => 0.210,
	"sparte" => 0.210,
	"taper" => 0.210,
	"toporok" => 0.210,
        "broadsword" => 0.200,
	"flyssa" => 0.200,
	"goliah" => 0.200,
	"katzbalger" => 0.200,
	"machera" => 0.200,
	"palache" => 0.200,
	"schiavona" => 0.200,
	"seax" => 0.200,
	"spadroon" => 0.200,
	"spatha" => 0.200,
	"talon sword" => 0.200,
	"xiphos" => 0.200,
        "falchion" => 0.175,
	"badelaire" => 0.175,
	"craquemarte" => 0.175,
	"khopesh" => 0.175,
	"machete" => 0.175,
	"takouba" => 0.175,
        "longsword" => 0.175,
	"kaskara" => 0.175,
        "backsword" => 0.150,
#
	"mace" => 0.175,
	"dhara" => 0.175,
	"whip" => 0.087,
	"crowbill" => 0.125,
	"cudgel" => 0.150,
	"ball & chain" => 0.175,
	"war hammer" => 0.200,
	"morning star" => 0.225,
#
	"staff" => 0.100,
	"military pick" => 0.275,
	"flail" => 0.225,
	"flamberge" => 0.200,
	"war mattock" => 0.275,
	"two-handed sword" => 0.275,
	"twohanded sword" => 0.275,
	"two handed sword" => 0.275,
	"claidhmore" => 0.225,
	"battle axe" => 0.245,
#
	"pilum" => 0.060,
	"javelin" => 0.100,
	"halberd" => 0.200,
	"naginata" => 0.200,
	"jeddart-axe" => 0.225,
	"hammer of kai" => 0.250,
	"awl-pike" => 0.350,
	"lance" => 0.350,
#
	"closed fist" => 0.035,
	"razorpaw" => 0.030,
	"paingrip" => 0.030,
	"cestus" => 0.035,
	"knuckle-duster" => 0.040,
	"hook-knife" => 0.035,
	"tiger-claw" => 0.035,
	"knuckle-blade" => 0.075,
	"yierka-spur" => 0.075,
	"blackjack" => 0.075,
	"jackblade" => 0.110,
	"troll-claw" => 0.090,
	"fist-scythe" => 0.100,
	"katar" => 0.175,
	}


# These are the crit messages calcredux tracks, and their corresponding damage adders. I can't find a list of neck crits, but if you have one or know of one, please let me know somehow (email GS4Lich@yahoo.com, psinet mail Shaelun, whatever)
crits = { "Hit glances off your hip" => 0,
	"Stomach shot lands with a hollow" => 5,
	"Grazing blow to the stomach" => 10,
	"Internal organs bruised." => 15,
	"Stomach ripped open by mighty blow!" => 20,
	"Knocked back several feet by blow to abdomen." => 25,
	"Blow ruptures the stomach!" => 30,
	"Blow to stomach rearranges some organs!" => 50,
	"Incredible smash to what used to be a stomach!" => 60,
	"A mighty hit turns your insides to outsides!" => 75,
#
	"Blow glances off your shoulder." => 0,
	"Jarring blow to your back." => 3,
	"Blow to back cracks several vertebrae." => 10,
	"Respectable shot to the back." => 15,
	"Flesh ripped from back, muscles exposed." => 20,
	"Knocked sideways several feet by blow to back." => 25,
	"Spinal cord damaged by smash to the back." => 30,
	"Crushing blow to the spine!" => 50,
	"Body pulped to a gooey mass." => 60,
	"A mighty blow cleaves a swath through" => 75,
#
	"Thumped your chest." => 0,
	"Blow leaves an imprint on your chest!" => 5,
	"Mighty blow cracks several ribs." => 10,
	"Blow to chest causes your heart to skip a beat." => 15,
#	"Whoosh! Several ribs driven into lungs."	20 and 25 both, another random element -- omitted to maximize accuracy
	"Awesome shot collapses a lung!" => 45,
	"Blow cracks a rib and punctures a lung." => 60,
	"Massive blow punches a hole through your chest!" => 65,
	"Massive blow smashes through ribs and drives" => 70,
#
	"A nice bruise on your neck!" => 0,	# I'm getting confused... I think this is the right crit (blunt head), but the dmg is right either way
	"Love tap upside your head!" => 0,
#	"Whiplash!" => 5,			# Appears inaccurate. I can't find a list of neck crits & their damage, so.......
	"You hear a buzzing in your ears from that blow!" => 5,
	"Hearty smack to the head." => 10,
	"nose!" => 15,
	"Skull cracks in several places." => 20,
	"Solid strike caves your skull in, resulting in instant death!" => 25,
	"Mighty swing separates head from shoulers." => 30,
	"Tremendous blow crushes skull like a ripe melon." => 35,
	"Brain driven into neck by mammoth downswing!" => 40,
	"Incredible blast shatters head into a red spray." => 50,
#
	"A feeble blow to your" => 0,
	"Blow raises a welt on your" => 3,
	"Bones in right arm" => 7,
	"Bones in left arm" => 7,
	"Large gash to the" => 8,
	"elbow smashed into a thousand pieces." => 10,
	"arm mangled horribly." => 15,
	"Hard hit shatters" => 20,
	"arm ripped from socket at the blow!" => 25,
	"Lucky shot rips through bone and muscle sending left arm flying" => 35,
	"Lucky shot rips through bone and muscle sending right arm flying" => 35,
	"arm removed at the shoulder!" => 40,
#
	"Blow nicks your" => 0,
	"Broken finger on your" => 1,
	"Flattened your" => 3,
	"Finger ripped away from" => 5,
	"hand mangled horribly." => 5,
	"hand smashed into a pulpy mass." => 7,
	"Blast to hand reduces it to pulp!" => 10,
	"Blast to hand sends fingers flying in several different directions." => 15,
	"Lucky shot severs" => 25,
	"hand severed at the wrist!" => 30,
#
	"Swing at your eye catches an eyebrow instead!" => 0,
	"Cut over your" => 1,
	"Strike to the eye clips" => 3,
	"Smack to the eye bursts blood vessels" => 5,
	"head swells eye shut" => 10,
	"Eye crushed by a hard blow to the face" => 15,
	"Crushing blow to head closes that eye for good" => 20,
	"Blow to eye impacts the brain" => 40,
	"eye ripped from head, along with most of brain" => 45,
	"Smash to cheek driving bone through the eye and into" => 50,
#
	"Glancing blow to your left leg" => 0,
	"Glancing blow to your right leg" => 0,
	"Torn muscle in your left leg" => 7,
	"Torn muscle in your right leg" => 7,
	"Smash to the kneecap" => 10,
	"ripped a chunk out of your left leg with that one" => 15,
	"ripped a chunk out of your right leg with that one" => 15,
	"kneecap smashed into pulp" => 17,
	"leg mangled horribly" => 20,
	"Hard blow breaks the femur" => 25,
	"leg ripped from socket at the knee" => 30,
	"Lucky shot rips through bone and muscle sending left leg flying" => 40,
	"Lucky shot rips through bone and muscle sending right leg flying" => 40,
	"hip pulped, severing the leg" => 45,
#
	"Light slash to your abdomen" => 0,
	"Awkward slash to your stomach" => 5,
	"Smooth slash to your hip!" => 10,
	"Hard slash to belly severs a few nerve endings" => 15,
	"Diagonal slash leaves a bloody trail across" => 20,
	"backed up by a strong slash to your abdomen" => 25,
	"backed up by a strong slash to abdomen" => 25,
	"Deep slash to your right side!" => 30,
	"Amazing slash to your belly!" => 50,
	"Amazing slash to belly!" => 50,
	"Bloody slash to your side!" => 60,
	"Bloody slash to side!" => 60,
	"Terrible slash to your side!" => 75,
	"Terrible slash to side!" => 75,
#
	"Glancing blow to your back." => 0,
	"Weak slash to your lower back!" => 3,
	"Feint to the left goes astray as" => 10,
	"Slash along your lower back." => 15,
	"Slash along lower back." => 15,
	"Slash to your lower back!" => 20,
	"Slash to lower back!" => 20,
	"Feint left spins" => 25,
	"You twist away but are caught with a hard slash!" => 30,
	"Deft slash!" => 50,
	"Slash to your lower back!" => 60,
	"Masterful slash to your lower back!" => 75,
	"Masterful slash to lower back!" => 75,
#
	"Weak slash across chest!" => 0,
	"Deft slash across chest draws blood!" => 1,
	"Slash to your chest!" => 10,
	"Slash to your chest." => 15,
	"Slashing blow to chest knocks you back a few paces!" => 20,
	"Crossing slash to the chest catches your attention!" => 25,
	"Crossing slash to chest catches your attention!" => 25,
	"Hard slash to your side opens spleen!" => 45,
	"Hard slash to side opens your spleen!" => 45,
	"Quick, powerful slash!" => 60,
	"Slash to your ribs opens a sucking chest wound!" => 65,
	"Wicked slash slices open" => 70,
#
	"Flashy swing!" => 0,
	"Quick slash catches your cheek!" => 5,
	"Blade slashes across your face!" => 10,
	"Blade slashes across face!" => 10,
	"Blow to head!" => 15,
	"Quick flick of the wrist!" => 20,
	"Hard blow to your ear!" => 25,
	"Hard blow to ear!" => 25,
	"Gruesome slash opens your forehead!" => 30,
	"Gruesome slash opens forehead!" => 30,
	"Wild upward slash removes" => 35,
	"Horrible slash to your head!" => 40,
	"Horrible slash to head!" => 40,
	"Gruesome, slashing blow to the side of" => 50,
#
	"Hard blow, but deflected." => 0,
	"Quick slash to your upper" => 3,
	"Slash to your shield arm!" => 7,
	"Glancing slash to your shield arm!" => 8,
	"Powerful slash just cracks your shield arm!" => 10,
	"Powerful slash just cracks your weapon arm!" => 10,
	"Deep slash to your left forearm!" => 15,
	"Deep slash to your right forearm!" => 15,
	"Off-balance slash to your left arm shatters" => 20,
	"Hard slash to your side!" => 25,
	"Spectacular slash!" => 35,
	"Awesome slash severs your left arm!" => 40,
	"Awesome slash severs your right arm!" => 40,
#
	"Weak slash to your right arm." => 0,
	"Hesitant slash to your upper!" => 7,
	"Slash to your right arm!" => 8,
	"Quick, hard slash to your right arm!" => 20,
#
	"Near-miss!" => 0,
	"Diagonal slash to your weapon arm." => 1,
	"Wild slash bounces off the back of your" => 3,
	"Feint to your head!" => 5,
	"hand cuts deep." => 7,
	"Slash to your weapon hand!" => 5,	# <-- Don't ask me... what QRS says, and notes it's not a typo. Simu screwed up (again), I t'ink ;)
	"knuckles hard!" => 10,
	"Jagged slash to your right arm!" => 15,
	"Jagged slash to your left arm!" => 15,
	"fingernails..." => 25,
	"Off-balanced slash!" => 30,
#
	"Slash to your shield arm." => 1,
	"Wild slash scratches the back of" => 3,
	"Slice to your left fingers." => 5,
	"Deep cut to your left hand!" => 7,
	"Slash to your left hand!" => 8,
#
	"Quick slash to your left eye." => 0,
	"Slashing strike near forehead nicks an" => 3,
	"Gash to your left eyebrow." => 3,
	"Grazing slash to your face!" => 5,
	"Upward slash gouges your cheek!" => 20,
	"Slash strikes your left eye." => 25,
	"Slash to head destroys your left eye!" => 30,
	"Slash to your left eye!" => 40,
	"Horrifying slash to your head!" => 45,
	"Blast to your head destroys left eye!" => 50,
#
	"Quick slash at your right eye." => 0,
	"Gash to your right eyebrow." => 3,
	"Slash strikes your right eye." => 25,
	"Slash to head destroys your right eye!" => 30,
	"Slash to your right eye!" => 40,
	"Blast to your head destroys right eye!" => 50,
#
	"Light, bruising slash to your left thigh." => 0,
	"Light, bruising slash to your right thigh." => 0,
	"Slash to your left leg hits high!" => 5,
	"Slash to your right leg hits high!" => 5,
	"Banged your left shin." => 10,
	"Banged your right shin." => 10,
	"Downward slash across your left thigh!" => 10,
	"Downward slash across your right thigh!" => 10,
	"Deft slash to your left leg digs deep!" => 17,
	"Quick, powerful slash to your left knee!" => 20,
	"Quick, powerful slash to your right knee!" => 20,
	"Weak diagonal slash catches your left knee!" => 25,
	"Wild downward slash severs your left foot!" => 30,
	"Wild downward slash severs your right foot!" => 30,
	"Powerful slash!" => 40,
	"Powerful slash leaves you without a left leg!" => 45,
	"Powerful slash leaves you without a right leg!" => 45,
#
	"Deep, bloody slash to your right thigh!" => 17,
	"Strong slash to your right leg!" => 25,
#
	"Poked in the tummy." => 0,
	"Minor puncture to the abdomen." => 5,
	"Nice puncture to the abdomen, just missed vital organs!" => 10,
	"Strike pierces gall bladder!" => 15,
	"Strike to abdomen punctures stomach!" => 20,
	"Vicious strike punctures intestines!" => 25,
	"Bladder impaled, what a mess!" => 25,
	"Deft strike to abdomen penetrates several useful organs!" => 30,
	"Strike to abdomen skewers" => 40,
	"Perfect strike to the abdomen." => 50,
#
	"Thrust slides along the back." => 0,
	"Minor puncture to the back." => 5,
	"Nice puncture to the back, just grazed the spine!" => 10,
	"Strike connects with shoulder blade!" => 15,
	"Nailed in the lower back!" => 20,
	"Well placed strike to back shatters vertebrae!" => 25,
	"Deft strike to the back cracks vertebrae!" => 30,
	"Awesome shot shatters spine and punctures lung!" => 35,
	"Shot to back shatters bone and vertebrae!" => 40,
	"Incredible shot impales a kidney." => 50,
#
	"Blow slides along ribs." => 0,
	"Minor puncture to the chest." => 5,
	"Strike to the chest breaks a rib!" => 10,
	"Loud *crack* as your sternum breaks!" => 15,
	"Well placed strike shatters a rib!" => 20,
	"Damaging strike to chest, several ribs shattered!" => 25,
	"Strong strike, punctures lung!" => 30,
	"Awesome shot shatters ribs and punctures lung!" => 35,
	"Beautiful shot pierces both lungs," => 40,
	"Incredible strike pierces heart and runs" => 50,
#
	"Thrust catches chin." => 0,
	"Glancing strike to the head!" => 5,
	"Nice shot to the head gouges your cheek!" => 8,
	"Beautiful head shot!" => 10,
	"Strike to temple!" => 15,
	"Beautiful shot pierces skull!" => 20,
	"Amazing shot through your nose enters the brain!" => 25,
	"Strike through both ears, foe is quite dead!" => 30,
	"Strike pierces temple and kills foe instantly!" => 35,
	"Awesome shot skewers skull!" => 40,
#
	"Tap to the arm pricks some interest but not much else." => 0,
	"Minor puncture to the left arm." => 3,
	"Strike pierces upper arm!" => 5,
	"Well aimed shot, punctures upper arm!" => 7,
	"Strike pierces forearm!" => 10,
	"Elbow punctured, oh what pain!" => 14,
	"Well aimed strike shatters bone in left arm!" => 17,
	"Strike to the left arm cleanly severs it at the shoulder!" => 22,
	"Strike to the left arm shatters elbow and severs forearm!" => 25,
	"Shot shatters shoulder and severs left arm!" => 25,
#
	"Minor puncture to the right arm." => 3,
	"Well aimed strike shatters bone in right arm!" => 17,
	"Strike to the right arm cleanly severs it at the shoulder!" => 22,
	"Strike to the right arm shatters elbow and severs forearm!" => 25,
	"Shot shatters shoulder and severs right arm!" => 25,
#
	"Strikes a fingernail." => 0,
	"Strike to left hand breaks a fingernail!" => 1,
	"Strike through palm!" => 3,
	"Shot to the hand slices a finger to the bone!" => 5,
	"Shot pierces a wrist!" => 7,
	"Slash across back of hand, tendons sliced!" => 9,
	"Impressive shot shatters wrist!" => 12,
#	"Strike to wrist severs left hand!" => 15 & 18 both, omitted for accuracy
	"Strike to wrist severs left hand quite neatly!" => 20,
#
	"Strike to right hand breaks a fingernail!" => 1,
	"Strike through the palm!" => 3,
#	"Strike to wrist severs right hand!" => 15 & 18 both, omitted for accuracy
	"Strike to wrist severs right hand quite neatly!" => 20,
#
	"Attack bumps an eyebrow." => 0,
	"Minor strike under the left eye, that was close!" => 1,
	"Well aimed shot almost removes an eye!" => 5,
	"Surgical strike removes your left eye!" => 10,
	"Attack punctures the eye and connects with something really vital!" => 17,
	"Shot knocks your head back by pushing on the inside of the skull!" => 20,
	"Incredible shot to the eye penetrates deep into skull!" => 25,
	"Shot destroys eye and the brain behind it!" => 30,
	"Strike through eye," => 35,
	"Strike to the eye penetrates skull, ocular fluid sprays widely!" => 40,
#
	"Minor strike under the right eye, that was close!" => 1,
	"Slash across right eye!" => 10,
#
	"Thrust glances off your knee without a lot of effect." => 0,
	"Minor puncture to the left leg." => 5,
	"Strike pierces thigh!" => 9,
	"Well aimed shot, punctures calf!" => 13,
	"Strike pierces calf!" => 17,
	"Well placed shot pierces knee, that hurt!" => 20,
	"Great shot penetrates thigh and shatters bone!" => 23,
	"Blow shatters knee and severs lower leg!" => 27,
	"Strike punctures thigh and shatters femur!" => 30,
	"Shot shatters hip and severs left leg!" => 35,
#
	"Minor puncture to the right leg." => 5,
	"Shot shatters hip and severs right leg!" => 35,
	}


# This is the actual script. The rest is just defining of the necessary data, etc. I don't know about you, but I'm surprised at how short and
# efficient it came out the second time... first write was just a mess, but this is really very clean and functional. I'm happy with it, anyway.

sleep 0.2
history_string = level.to_s + ':' + history["count"].to_s + ':' + history["sum"].to_s
echo("Type ';send calcredux help' for information about the script")

before_dying {
	file = File.open("#{$script_dir}calcredux-history-#{Char.name}.txt", "w")
	file.puts("# DO NOT edit by hand unless it's necessary -- just delete the file to reset these values.", "#{level.to_s}:#{history["count"]}:#{history["sum"]}")
	file.close
}

calcdebug = false
average_redux = (history["sum"].to_f / history["count"].to_f)
while string = script.gets
	if string =~ / at you!$|^(?i:average )?(?i:redux)$|^(?i:calcredux save)(?i: armor)?$|^(?i:calcredux getpast)$|^(?i:armor to \w+)$|^(?i:calcredux help)$/
		if string =~ / at you!$/
			weapon = weapons.find { |weap| string =~ /\b#{weap}\b/ }
		elsif string =~ /^calcredux_help$|^calcredux help$/i
			respond("")
			respond("   This script will automatically monitor for attacks against you, and calculate your redux when it sees you take a hit.")
			respond("   Not every hit can be calculated, but 75-95% of the necessary data is in calcredux.lic's database, so you'll find many - or even most - hits will result in a reading.")
			respond("   Your current armor is set to #{armor}.  It can be set anytime by ';send armor to [type]'.")
			respond("   You can also change 'calcredux-armor-#{char_name}.txt' in your scripts dir for convenience (or just send 'calcredux save armor' and the script will do that for you).")
			respond("   Also at anytime, type ';send calcredux getpast', and Lich will re-send all cached data so it can be calculated (this allows you to use calcredux to calculate hits even if it wasn't running at the time).")
			respond("   Additionally, you can check your average at anytime by sending 'average redux' or 'redux', or manually save your history by sending 'calcredux save'.")
			respond("(manually saving is unnecessary, it's done automatically every 2 minutes, but you can if you wish).")
			respond("")
			next
		elsif string =~ /^(?:average )?redux$/i
			if history["count"] == 0
				echo("Average redux is (insufficient data)")
			else
				echo("Average redux is #{average_redux.to_s[0..5]}%")	# <-- As noted above, it remains unchanged if the hit's too inaccurate
			end
			next
		elsif string =~ /^calcredux save( armor)?$/i
			begin
				if $1.nil?
					save_thread.wakeup
					echo("History has been saved")
				else
					File.open($script_dir + "calcredux-armor-#{char_name}.txt","w") { |file| file.puts(armor) }
					echo("Armor has been saved; it will be automatically loaded next run")
				end
			rescue
				echo("Error attempting to save history to disk; please try again: #{$!}")
			end
			next
		elsif string =~ /^calcredux getpast$/i
			echo("Acknowledged, processing all lines Lich still has cached. If that doesn't include any calculable hits, nothing will happen.")
			sleep 1
			clear
			regetall
			next
		elsif string =~ /^armor to (\w+)$/
			new_armor = $1.to_s.downcase
			case new_armor
			when /skin/
				armor = "skin"
				echo("Armor is now #{armor}")
			when /leather/
				armor = "leather"
				echo("Armor is now #{armor}")
			when /scale/
				armor = "scale"
				echo("Armor is now #{armor}")
			when /chain/
				armor = "chain"
				echo("Armor is now #{armor}")
			when /plate/
				armor = "plate"
				echo("Armor is now #{armor}")
			else
				echo("Detected the 'armor to' command, but did not recognize a known armor type! It remains as #{armor}")
			end
			next
		else
			next
		end
	else
		next
	end
	if weapon.nil? then next end
	string = get
	outcome = (string.split.last.to_i - 100)
	if outcome < 1 then next end
	string = get
	taken_damage = string.split[-4].to_i
	if taken_damage.nil? then next end
	string = get
	crit_damage = crits[crits.keys.find { |val| string =~ /#{val}/ }]
	if crit_damage.nil? then next end
	if armor == "skin"
		df_hash = df_skin
	elsif armor == "leather"
		df_hash = df_leather
	elsif armor == "scale"
		df_hash = df_scale
	elsif armor == "chain"
		df_hash = df_chain
	elsif armor == "plate"
		df_hash = df_plate
	else
		next
	end
	if df_hash.nil? then next end
	df = df_hash[weapon]
	if df.nil? then next end
	calculated_damage = df * outcome
	if calculated_damage.nil? then next end
	redux = ((1 - ((taken_damage.to_f - crit_damage.to_f) / calculated_damage.to_f)) * 100)
	if redux.nil? then next end
	history["count"] += 1 unless (outcome.to_f < 10 || calculated_damage.to_f < 6)	# <-- Doesn't record the value if under 110 roll or calc'd dmg below 6
	history["sum"] = (history["sum"].to_f + redux.to_f) unless (outcome.to_f < 10 || calculated_damage.to_f < 6)	# <-- Ditto
	average_redux = (history["sum"].to_f / history["count"].to_f)	# <-- Always calculates your overall average, just leaves those low instances out

# If you find "23.326%" just an irritatingly long number to see over & over, change the '[0..5]' in both of these next two lines so that it reads
# '[0..x]', where 'x' is the number of digits you want displayed. For instance, to cut it down to "23.3%", make it '[0..3]'. DO NOT change anything
# but that one number, however, or you'll likely break the script unless you're somewhat familiar with Ruby syntax already. If you want, you can
# of course always change whatever you damn well please, and just restore a backup if you totally frag it or something. Just be careful not to touch
# the quotes, squiggly-brackets, or anything like that, and so long as those are properly placed around text and whatnot, by all means, try changing
# the message it shows you everytime to something you like. It's really a lot easier than it probably looks staring at this block of gibberish, I
# promise ;)  In all things, one must begin somewhere -- just as all who came before have done, and all who come after will do.
	if redux.to_f < 0 then redux = 0 elsif redux.to_f > 99 then redux = 99 end
	if average_redux.to_f <= 0 then average_redux = 0 end
	echo("Instance redux is #{redux.to_s[0..5]}%")	# <-- No matter what kind of hit it was, this is always calc'd the same
	if history["count"] == 0
		echo("Average redux is (insufficient data)")
	else
		echo("Average redux is #{average_redux.to_s[0..5]}%")	# <-- As noted above, it remains unchanged if the hit's too inaccurate
	end
end
