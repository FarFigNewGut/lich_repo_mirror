=begin
  ledger which tracks:
    1. silvers
    2. bounty points

  todo:
    - experience
    - bloodscrip

  requirements:
    - sequel gem
    - ascii_charts gem
  
  Author: Ondreian
=end

require 'sequel'
require 'ascii_charts'

module Bank
  module History
    @file = File.join($data_dir, "ledger.db")
    Self = Sequel.sqlite(@file)
    
    Self.create_table?(:transactions) do
      primary_key :id
      String  :character
      String  :type
      Integer :amount
      Date    :created_at
      Integer :year
      Integer :month
      Integer :day
      Integer :hour
    end

    # alias for ease of use
    Transactions  = Self[:transactions]

    module Migrations
      # none yet
    end

    module Query
      def self.monthly_gain_loss(month: Time.now.month, year: Time.now.year, type:)
        Transactions
          .where(month: month, year: year, type: type)
          .sum(:amount) || 0
      end

      def self.daily_gain_loss(day: Time.now.day, month: Time.now.month, year: Time.now.year, type:)
        Transactions
          .where(month: month, year: year, day: day, type: type)
          .sum(:amount) || 0
      end
    end

    def self.allowed_types
      %w(silver bounty)
    end

    def self.record_transaction(amount:, type:)
      return Log.out("type=%s is not an allowed resource: {%s}" % [type, allowed_types.join(',')]) unless allowed_types.include?(type)
      transaction              = {}
      now                      = Time.now
      # info fields
      transaction[:character]  = Char.name
      transaction[:amount]     = amount
      transaction[:type]       = type
      # timestamp fields
      transaction[:created_at] = now
      transaction[:year]       = now.year
      transaction[:month]      = now.month
      transaction[:day]        = now.day
      transaction[:hour]       = now.hour
      @last_transaction_id     = Transactions.insert(transaction)
    end

    def self.print()
      respond "-- monthly --"
      allowed_types.each {|resource| respond "%s: %s" % [resource.ljust(10), Query.monthly_gain_loss(type: resource)] }
      respond "-- daily --"
      allowed_types.each {|resource| respond "%s: %s" % [resource.ljust(10), Query.daily_gain_loss(type: resource)] }
    end

    def self.main()
      while line = get
        # todo: bloodscrip tracking deposit/withdraw
        if line =~ /Very well, a withdrawal of ([\d,]+) silver|That's a total of ([\d,]+) silver|That's ([\d,]+) (?:silver|silvers) to your account|scrip for ([\d,]+) silvers, with a ([\d,]+) silver fee for the scrip|I have a bill of ([\d,]+) silvers presented by your creditors|teller carefully records the transaction, (?:and then )?hands you ([\d,]+) silver|You deposit ([\d,]+) (?:silver|silvers) into your account|You deposit your note worth ([\d,]+) into your account|teller scribbles the transaction into a book and hands you ([\d,]+) (?:silver|silvers)|You hand your notes to the teller, who glances over each one and scribbles the amounts in a book.  She says, "They add up to ([\d,]+) (?:silver|silvers)/
          withdraws = $1.delete(',').to_i + $4.delete(',').to_i + $5.delete(',').to_i + $6.delete(',').to_i + $7.delete(',').to_i + $10.delete(',').to_i
          deposits = $2.delete(',').to_i + $3.delete(',').to_i + $8.delete(',').to_i + $9.delete(',').to_i + $11.delete(',').to_i
          Log.out "recorded : #{withdraws}", label: %i(withdraw) if withdraws > 0
          Log.out "recorded : #{deposits}", label: %i(deposits) if deposits > 0
          self.record_transaction(amount: deposits - withdraws, type: "silver")
        elsif line =~ /\[You have earned ([\d,]+) bounty points/
          self.record_transaction(amount: $1.delete(',').to_i, type: "bounty")
        elsif line =~ /inter-town bank transfer options? available/
          self.print()
        end
      end
    end

    self.main()
  end
end