#ebonarena

=begin
    Ebon Gate Arena Script
    Simple arena automation for Ebon Gate Arena
    
    SYNTAX - ;ebonarena
    
    author: Fulmen
    name: ebonarena
    version: 1.0
=end

# Configuration
SAFE_ROOM = 28549
ARENA_ROOM = 28564
REWARD_ROOM = 28556

# Initialize
UserVars.ebonarena ||= {}
UserVars.ebonarena[:wave_number] = 0
UserVars.ebonarena[:activescripts] = ['stand'] if UserVars.ebonarena[:activescripts].nil?
UserVars.ebonarena[:pause_timer] = 0 if UserVars.ebonarena[:pause_timer].nil?
UserVars.ebonarena[:waggle_me] = true if UserVars.ebonarena[:waggle_me].nil?
UserVars.ebonarena[:absorb_me] = false if UserVars.ebonarena[:absorb_me].nil?

# Combat routines
def attack
	GameObj.targets.shuffle.each do |npc|
		next if npc.status =~ /dead|gone/
		put "target ##{npc.id}"
		
		if Char.name =~ /Fulmen/
			fulmen_attack(npc)
		elsif Char.name =~ /Numindor/
			numindor_attack(npc)
		else
			# Default to bigshot if no custom routine
			default_attack(npc)
		end
	end
end

def default_attack(npc)
	echo "Using bigshot for combat..."
	Script.kill("bigshot") if Script.running?("bigshot")
	sleep 0.1 until !Script.running?("bigshot")
	Script.start("bigshot", "quick")
	wait_while { npc.status !~ /dead|gone/ && !dead? && Script.running?("bigshot") }
end

def fulmen_attack(npc)
	fput "stance defensive"
	waitrt?
	waitcastrt?
	
	while npc.status !~ /dead|gone/ && !dead?
		waitrt?
		waitcastrt?
		
		if checkmana >= 20
			fput "incant 1615"
		else
			fput "stance offensive"
			fput "kick"
		end
		pause 0.1
	end
end

def numindor_attack(npc)
	fput "stow left" if checkleft !~ /buckler/
	fput "ready shield" if GameObj.left_hand.noun.nil?
	fput "stow right" if checkright !~ /star/
	fput "unsheath" if GameObj.right_hand.noun.nil?
	waitrt?
	
	berserk_active = false
	
	while npc.status !~ /dead|gone/ && !dead?
		waitrt?
		fput "stance offensive" if checkstance !~ /offensive/
		waitrt?
		
		unless berserk_active
			result = dothistimeout "berserk", 3, /You scream with a maniacal bloodlust!|You cannot do that while berserking/
			berserk_active = true if result =~ /You scream with a maniacal bloodlust!/
		end
		
		waitrt?
		fput "kill" if checkstamina <= 35
		waitrt?
	end
end

# Start active support scripts
def start_active_scripts
	UserVars.ebonarena[:activescripts].each do |script|
		next unless Script.exists?(script)
		Script.start(script) unless Script.running?(script)
		Script.unpause(script) if Script.paused?(script)
	end
end

# Pause active support scripts
def pause_active_scripts
	UserVars.ebonarena[:activescripts].each do |script|
		Script.pause(script) if Script.running?(script) && !Script.paused?(script)
	end
end

# Absorb experience if mind is saturated/fried
def absorb_experience
	if UserVars.ebonarena[:absorb_me] && (percentmind >= 100 || XMLData.mind_text =~ /saturated|fried/)
		waitrt?
		fput "boost absorb"
		echo "Absorbed experience - mind was full"
	end
end

# Cleanup on exit
before_dying {
	UserVars.ebonarena[:activescripts].each { |script|
		Script.kill(script) if Script.running?(script)
	}
}

# Start script
if variable[1].to_s.downcase == "help"
	respond "\n=== Ebon Gate Arena Script Help ==="
	respond "SYNTAX: ;ebonarena"
	respond "        ;ebonarena pause <seconds>"
	respond "\nThis script automates the Ebon Gate Arena."
	respond "Start the script in the safe room (28549) with cubes in your lootsack."
	respond "\nSettings:"
	respond "  Active support scripts: #{UserVars.ebonarena[:activescripts]}"
	respond "  ;e UserVars.ebonarena[:activescripts] = ['stand', 'script1', 'script2']"
	respond "\n  Lootsack container: #{Vars.lootsack}"
	respond "  ;vars set lootsack=CONTAINERHERE"
	respond "\n  Pause timer (seconds): #{UserVars.ebonarena[:pause_timer]}"
	respond "  ;ebonarena pause 240  (or any number of seconds)"
	respond "  Set to 0 to pause indefinitely until manual unpause. Set to 240 to pause for 240 seconds before running again, etc."
	respond "\n  Waggle between runs: #{UserVars.ebonarena[:waggle_me]}"
	respond "  ;e UserVars.ebonarena[:waggle_me] = true/false"
	respond "\n  Auto-absorb when mind full: #{UserVars.ebonarena[:absorb_me]}"
	respond "  ;e UserVars.ebonarena[:absorb_me] = true/false"
	respond "  If you have BOOST ABSORBs available, it will use them when your mind is at 100%, right before pausing at the end of a run."
	respond "\nThe script will:"
	respond "  - Pay with a cube and enter the arena"
	respond "  - Execute your character's combat routine"
	respond "  - Collect rewards"
	respond "  - Return to Arena entrance and pause"
	respond "  - Auto-unpause after timer (if set) or wait for manual unpause"
	respond "\nSupport scripts are started before combat and paused after each run."
	exit
elsif variable[1].to_s.downcase == "pause" && variable[2].to_i > 0
	UserVars.ebonarena[:pause_timer] = variable[2].to_i
	echo "Pause timer set to #{UserVars.ebonarena[:pause_timer]} seconds"
	exit
elsif variable[1].to_s.downcase == "pause"
	echo "Current pause timer: #{UserVars.ebonarena[:pause_timer]} seconds"
	echo "Usage: ;ebonarena pause <seconds>"
	echo "Set to 0 for indefinite pause (manual unpause required)"
	exit
end

fput "store all"
pause 1
fput "get my cube from my #{Vars.lootsack}"
pause 1
fput "pay"
wait_until { Room.current.id == ARENA_ROOM }

loop do
	line = get
	
	# Arena starting
	if line =~ /A sinister voice announces.*We have another living one/ && Room.current.id == ARENA_ROOM
		fput "put my cube in my #{Vars.lootsack}"
		fput "stow all"
		UserVars.ebonarena[:wave_number] = 0
		fput "gird"
		start_active_scripts
		fput "beg"
		echo "Arena starting!"
		
	# Enemy wave
	elsif line =~ /A crimson bolt of lightning strikes/ || 
	      (GameObj.targets.any? { |npc| npc.status !~ /dead|gone/ } && 
	       Room.current.id == ARENA_ROOM && 
	       UserVars.ebonarena[:wave_number] > 0)
		
		UserVars.ebonarena[:wave_number] += 1
		echo "Wave #{UserVars.ebonarena[:wave_number]}"
		attack
		
	# Victory
	elsif line =~ /#{Char.name} is triumphant/ && Room.current.id == ARENA_ROOM
		echo "Victory!"
		fput "store all"
		
	# Reward received in reward room
	elsif line =~ /a huge incarnadine vathor heals you of your injuries/ && Room.current.id == REWARD_ROOM
		waitrt?
		
		# Store weapons first to make room for reward
		fput "store all"
		pause 1
		
		# Check if reward was dropped at your feet and capture what it was
		if line =~ /regurgitates (?:a|an) (.*?) at your feet/
			reward_noun = $1.split.last
			# Wait for the item to appear
			pause 0.5
			fput "get #{reward_noun}"
			pause 0.5
		end
		
		# Stow everything
		fput "stow all"
		pause 2
		
		# Return to safe room
		echo "Returning to safe room..."
		start_script("go2", ["28549"])
		wait_while { running?("go2") }
		pause 1
		
		# Waggle if enabled
		if UserVars.ebonarena[:waggle_me]
			start_script("waggle")
			wait_while { running?("waggle") }
		end
		
		# Pause support scripts
		pause_active_scripts
		
		# Absorb experience if enabled and mind full
		absorb_experience
		
		echo "Run complete. Pausing script."
		if UserVars.ebonarena[:pause_timer] > 0
			echo "Auto-unpausing in #{UserVars.ebonarena[:pause_timer]} seconds..."
			pause UserVars.ebonarena[:pause_timer]
		else
			echo "Type ;unpause ebonarena to continue"
			pause_script
		end
		
		# Get next cube and re-enter
		fput "get my cube from my #{Vars.lootsack}"
		fput "pay"
		wait_until { Room.current.id == ARENA_ROOM }
		
	# Death
	elsif line =~ /drags you out of the arena/ || dead?
		echo "Defeated!"
		exit
	end
end