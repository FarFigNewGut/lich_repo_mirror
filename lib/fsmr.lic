=begin
    fsmr.lic - Reformat SMR/SSR outcomes to look more like AS/DS and CS/TD resolutions

    Examples:
      Tapping the moons above, you draw down a shaft of dappled moonlight and bathe a stunted halfling bloodspeaker in its lucent glow.
      SMR skill: +128 + o100 roll: +82 == +210
      
      Dozens of long thorns suddenly grow out from the ground underneath a stunted halfling bloodspeaker!
      SMR skill: +128 + Bonus: +102 + o100 roll: +72 == +302

        author: Kaetel
          name: fsmr
          tags: cosmetic, maneuvers
          game: gs
      required: Lich > 5.7.0
       version: 0.1.0
=end
=begin    
    Version Control:
        v0.1.0   (2024-01-10)
            - initial release
=end

module FormatSmr
    SMR_SSR_RESULT_RX = /\[(SMR|SSR) result: (-?\d+) \(Open d100: (-?\d+)(?:, (Bonus|Penalty): (-?\d+))?\)\]/
    HOOK_NAME = 'FSMR::Hook'

    def FormatSmr.running?
        DownstreamHook.list.include?(HOOK_NAME)
    end

    def FormatSmr.watch
      @@monitor = proc { |line|
        FormatSmr.handle(line)
      }

      DownstreamHook.add(HOOK_NAME, @@monitor)
    end

    def FormatSmr.end
      return unless FormatSmr.running?
      DownstreamHook.remove(HOOK_NAME)
    end

    def FormatSmr.handle(line)
        if (line =~ SMR_SSR_RESULT_RX)
            line = formatManeuverRoll(line)
        end

        line
    end

    def FormatSmr.formatManeuverRoll(line)
        if (line =~ SMR_SSR_RESULT_RX)
            original = line
            type = $1
            result = $2.to_i
            roll = $3.to_i
            penalty_or_bonus = $4
            penalty_or_bonus_v = $5.to_i
            skill = result - roll
            penalty_or_bonus_s = ''
            roll_s = FormatSmr.signed(roll)

            if (roll.abs > 100)
                roll_s = Lich::Messaging.monsterbold(roll_s)
            end

            unless penalty_or_bonus.nil?
                sign = (penalty_or_bonus == 'Penalty' ? -1 : 1)
                skill = skill - (penalty_or_bonus_v * sign)
                penalty_or_bonus_s = " #{sign > 0 ? '+' : '-'} #{penalty_or_bonus}: #{FormatSmr.signed(penalty_or_bonus_v)}"
            end
            
            line = "  #{type} skill: #{FormatSmr.signed(skill)}#{penalty_or_bonus_s} + o100 roll: #{roll_s} == #{FormatSmr.signed(result)}\n"
            line = line + original if (Vars.fsmr_keeporig)
        end

        line
    end

    def FormatSmr.signed(num)
        num > 0 ? "+#{num.to_s}" : num.to_s
    end

    if (Script.current.vars[1] =~ /help/i)
        [
            'This script will hijack SMR/SSR output and reformat it with the following template:',
            '  {type} skill: +{skill} (+/- Penalty/Bonus: {penalty_or_bonus}) + o100 roll: +{roll} == +{result}',
            '',
            'If you would like to keep the original output in addition, set Vars.fsmr_keeporig to true:',
            "  ;eq echo Vars.fsmr_keeporig=true (currently: #{Vars.fsmr_keeporig ? 'on' : 'off'})",
        ].each{|help| Lich::Messaging.msg('info', help)}
        exit
    end

    FormatSmr.watch

    sleep(1) while true
end