=begin
    fsmr.lic - Reformat SMR/SSR outcomes to look more like AS/DS and CS/TD resolutions

    Examples:
      Tapping the moons above, you draw down a shaft of dappled moonlight and bathe a stunted halfling bloodspeaker in its lucent glow.
      SMR SvD: +128 + o100 roll: +82 == +210
      
      Dozens of long thorns suddenly grow out from the ground underneath a stunted halfling bloodspeaker!
      SMR SvD: +128 + Bonus: +102 + o100 roll: +72 == +302

        author: Kaetel
          name: fsmr
          tags: cosmetic, maneuvers
          game: gs
      required: Lich > 5.7.0
       version: 0.1.2
=end
=begin    
    Version Control:
        v0.1.2   (2024-11-04)
            - clean up hook before dying
            - add templating
        v0.1.1   (2024-01-11)
            - changed skill to SvD
        v0.1.0   (2024-01-10)
            - initial release
=end

module FormatSmr
    DEFAULT_TEMPLATE = '<type> SvD: <+skill><bonus> + o100 roll: <+roll> == <+result>'
    DEFAULT_BONUS_TEMPLATE = ' <sign> <label>: <+bonus>'
    SMR_SSR_RESULT_RX = /\[(SMR|SSR) result: (-?\d+) \(Open d100: (-?\d+)(?:, (Bonus|Penalty): (-?\d+))?\)\]/
    HOOK_NAME = 'FSMR::Hook'

    Vars.fsmr ||= {
        :bold_open_roll => true,
        :keeporig       => false,
        :template       => DEFAULT_TEMPLATE,
        :bonus_template => DEFAULT_BONUS_TEMPLATE,
    }

    # Migrate old configurations if any
    unless (Vars.fsmr_keeporig.nil?)
        Vars.fsmr[:keeporig] = Vars.fsmr_keeporig
        Vars.fsmr_keeporig = nil
    end

    def FormatSmr.watch
      @@monitor = proc { |line|
        FormatSmr.handle(line)
      }

      DownstreamHook.add(HOOK_NAME, @@monitor)

      before_dying {
        DownstreamHook.remove(HOOK_NAME)
      }
    end

    def FormatSmr.handle(line)
        if (line =~ SMR_SSR_RESULT_RX)
            line = formatManeuverRoll(line)
        end

        line
    end

    def FormatSmr.template
        Vars.fsmr[:template] || DEFAULT_TEMPLATE
    end

    def FormatSmr.bonus_template
        Vars.fsmr[:bonus_template] || DEFAULT_BONUS_TEMPLATE
    end

    def FormatSmr.formatManeuverRoll(line)
        if (line =~ SMR_SSR_RESULT_RX)
            original = line
            type = $1
            result = $2.to_i
            roll = $3.to_i
            penalty_or_bonus = $4
            penalty_or_bonus_v = $5.to_i
            skill = result - roll
            
            line = FormatSmr.fillTemplate(type, skill, roll, result, penalty_or_bonus, penalty_or_bonus_v)
            line = line + "\n"
            line = line + original if (Vars.fsmr[:keeporig])
        end

        line
    end

    def FormatSmr.fillTemplate(type, skill, roll, result, penalty_or_bonus, penalty_or_bonus_v)
        penalty_or_bonus_s = ''

        unless (penalty_or_bonus.nil?)
            sign = (penalty_or_bonus == 'Penalty' ? -1 : 1)
            skill = skill - (penalty_or_bonus_v * sign)
            #penalty_or_bonus_s = " #{sign > 0 ? '+' : '-'} #{penalty_or_bonus}: #{FormatSmr.signed(penalty_or_bonus_v)}"

            penalty_or_bonus_s = bonus_template()
                .gsub('<sign>', sign > 0 ? '+' : '-')
                .gsub('<label>', penalty_or_bonus)
                .gsub('<bonus>', penalty_or_bonus_v.to_s)
                .gsub('<+bonus>', FormatSmr.signed(penalty_or_bonus_v))
        end

        template()
            .gsub('<type>', type)
            .gsub('<skill>', skill.to_s)
            .gsub('<+skill>', FormatSmr.signed(skill))
            .gsub('<roll>', FormatSmr.bold(roll))
            .gsub('<+roll>', FormatSmr.bold(FormatSmr.signed(roll)))
            .gsub('<result>', result.to_s)
            .gsub('<+result>', FormatSmr.signed(result))
            .gsub('<bonus>', penalty_or_bonus_s)
    end

    def FormatSmr.bold(num)
        if (Vars.fsmr[:bold_open_roll] && num.to_i.abs > 100)
            return Lich::Messaging.monsterbold(num.to_s)
        end

        num.to_s
    end

    def FormatSmr.signed(num)
        num > 0 ? "+#{num.to_s}" : num.to_s
    end

    if (Script.current.vars[1].downcase.eql?('help'))
        [
            'This script will hijack SMR/SSR output and reformat it',
            'The default template is:',
            "   #{DEFAULT_TEMPLATE}",
            'Where SvD is the difference between the attacker\'s (S)kill (v)s the defender\'s (D)efense',
            '',
            'Current tamplate:',
            "   #{template().eql?(DEFAULT_TEMPLATE) ? '(default)' : template()}",
            '',
            'If you would like to use a different template, set Vars.fsmr[:template]:',
            "  ;eq echo Vars.fsmr[:template] = '[SMR result: <result> (Skill: <skill>, Open d100: <roll><bonus>)]'",
            '',
            'You can include the following tokens: <type>, <skill>, <+skill>, <roll>, <+roll>, <result>, <+result>, and <bonus>.',
            'The <+n> tokens are signed values, for example +50',
            '<bonus> is a special token that represents the entire optional Bonus/Penalty values, if they are present',
            '',
            'The default bonus template is:',
            "   #{DEFAULT_BONUS_TEMPLATE}",
            'with the following tokens: <label>, <bonus>, <+bonus>, <sign>',
            '',
            'Current bonus template:',
            "   #{bonus_template().eql?(DEFAULT_BONUS_TEMPLATE) ? '(default)' : bonus_template()}",
            '',
            'If you would like to use a different template, set Vars.fsmr[:bonus_template]:',
            "  ;eq echo Vars.fsmr[:bonus_template] = ', <label>: <bonus>'",
            '',
            'By default, open rolls will be BOLDed with monsterbold. You can disable this by setting Vars.fsmr[:bold_open_roll] to true',
            "  ;eq echo Vars.fsmr[:bold_open_roll] = false (currently: #{Vars.fsmr[:bold_open_roll].to_s})",
            '',
            'If you would like to keep the original output in addition to the modified output, set Vars.fsmr[:keeporig] to true:',
            "  ;eq echo Vars.fsmr[:keeporig] = true (currently: #{Vars.fsmr[:keeporig].to_s})",
            '',
            'Use ;fsmr test to run example data through the templating system',
            
        ].each{|help| Lich::Messaging.msg('info', help)}
        exit
    elsif (Script.current.vars[1].downcase.eql?('test'))
        Lich::Messaging.msg('info', "Template: #{template()}")
        Lich::Messaging.msg('info', "Bonus template: #{bonus_template()}")
        Lich::Messaging.msg('', FormatSmr.handle('[SMR result: 138 (Open d100: 31)]'))
        Lich::Messaging.msg('', FormatSmr.handle('[SMR result: 138 (Open d100: 31, Bonus: 55)]'))
        Lich::Messaging.msg('', FormatSmr.handle('[SMR result: 138 (Open d100: 31, Penalty: 25)]'))
        exit
    end

    FormatSmr.watch

    sleep(1) while true
end