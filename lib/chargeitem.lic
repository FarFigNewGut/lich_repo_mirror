=begin

Charge Item Script

Things to do:::
    v1.0.8 add check silvers proc, add withdraw proc, deposit proc, read menu proc, buy potion proc. go2 alchemist proc, buy potion proc
    v1.0.7 add capability to check to see if orb gem has already been poured spell[405]
    v1.0.6 (pending) add capability to check # charges, subtract number of already charged and add the remaining charges
    add gtk3 gui with tickboxes for already poured gems
        baggage information
        tickboxes say if you only want to charge small statues, quartz orbs or only granite triangles
    calculate mana usage per charge per item
    v1.0.6  ability to purchase grot t'kel potions, get coin, purchase, return coin, return to workshop
    use Alchemy script to make grot t'kel potions instead of purchasing them
    

Currently you need to set ;vars add orbsack, lootsack, magicsack
Currently uses go2 "wizard workshop"

Contributors: Althias, Doug, Aethor
=end

Author = "salasin"
Version = "1.0.8"
magic_item = ["small statue", "quartz orb", "triangle", "gold coin", "blue crystal", "black crystal", "white crystal", "heavy cube"]
workshop = "6354"
#checks for lootsack
if Vars.lootsack.nil?
    echo "You need to have a lootsack set. This is where  your uncharged magic items should be. ;vars set lootsack = <container>"
    exit
end
#checks for orbsack
if Vars.orbsack.nil?
  echo "You need to have a orbsack set.  This is where your orb gems should be.  ;vars set orbsack = <container>"
  exit
end
#checks for magic sack
if Vars.magicsack.nil?
  echo "You need to have a magicsack set.  this is where your chrism'd gems will be kept ;vars set magicsack=<container>"
  exit
end
#checks to make sure your a wizard
unless Char.prof == 'Wizard'
  echo "You're not a wizard and thus this script does not apply to you."
  exit
end
#checks your location to make sure you are in a wizard workshop in elanthia
location = proc {
    if Room.current.tags.to_s != /wizard workshop/
        Script.run "go2", "wizard workshop"
        wait_while {running? 'go2'}
    end
   }

check_silvers = proc {
    action = proc { |server_string|
       if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
          nil
       elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+[0-9]+/
          DownstreamHook.remove("#{script.name}_check_silvers")
          nil
       else
          server_string
       end
    }
    DownstreamHook.add("#{script.name}_check_silvers", action)
    silence_me unless undo_silence = silence_me
    clear
    put 'info'
    silence_me if undo_silence
    while line = get
       if line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
          silvers = $1.to_i
          break
       end
    end
    silvers
 }
 
 withdraw = proc {
    Script.run('go2', 'bank --disable-confirm')
    fput 'unhide' if invisible?
    if XMLData.room_title == '[Pinefar, Depository]'
       if GameObj.npcs.any? { |npc| npc.noun == 'banker' }
          fput "ask banker for #{[withdraw_amount.to_i, 20].max} silvers"
             # The banker nods and says, "Alright, here ye go.  Ye understand I be takin' a little more than that from ye account in the 'Mule.  I don't works for free!"
             # The banker looks at you suspiciously and says, "Hmm, I don't think ye be havin' enough in ye account to cover that and my fee.  Ye tryin' to pull one over on me?"
       else
          if icemule_bank = Room.list.find { |room| room.location == 'Icemule Trace' and room.tags.include?('bank') }
             Script.run('go2', icemule_bank.id.to_s)
             result = dothistimeout "withdraw #{withdraw_amount} silvers", 1, /debt collector/
             if result =~ /debt collector/
                fput "withdraw #{withdraw_amount} silvers"
             end
          else
             echo 'waiting for banker...'
             wait_until { GameObj.npcs.any? { |npc| npc.noun == 'banker' } }
             fput "ask banker for #{[withdraw_amount.to_i, 20].max} silvers"
          end
       end
    else
       result = dothistimeout "withdraw #{withdraw_amount} silvers", 1, /debt collector/
       if result =~ /debt collector/
          fput "withdraw #{withdraw_amount} silvers"
       end
    end
    silvers += withdraw_amount
    should_deposit = true
 }
 #deposits silvers
 deposit = proc {
    if should_deposit
       Script.run('go2', 'bank --disable-confirm')
       if XMLData.room_title == '[Pinefar, Depository]'
          if GameObj.npcs.any? { |npc| npc.noun == 'banker' }
             fput "give banker #{check_silvers.call} silvers"
          end
       else
          fput "deposit #{check_silvers.call}"
       end
    end
 }
#reads the menu
read_menu = proc { 
    status_tags
    clear
    fput 'unhide' if hidden? or invisible?
    fput 'order'
    menu = Hash.new
    while (line = get) and (line !~ /ORDER|BUY/)
       for item in line.scan(/<d.*?cmd=["']order ([0-9]+).*?>(.*?)<\/d>/)
          menu[item[1].sub(/^a /, '')] = item[0]
       end
    end
    status_tags
    clear
    menu
 }
#goes to the alchemsit
 go_to_alchemist = proc {
    if working_alchemist = Room.current.find_nearest(Room.list.find_all { |room| room.tags.include?('alchemist') and not room.title.any? { |t| t =~ /Sorena's Emporium/ } })
       Script.run('go2', working_alchemist.to_s)
    else
       Script.run('go2', 'alchemist --disable-confirm')
    end
 
#buy the grot t'kel potion
 buy_potion = proc { |potion_type|
    unless silvers
        silvers = check_silvers.call
     end
     unless alchemy_shop_menu
        alchemy_shop_menu = read_menu.call
     end
     potion_name = alchemy_shop_menu.keys.find { |name| $known_potions.any? { |h| (h[:type] == potion_type) and (name =~ /#{h[:name]}/ or name =~ /#{h[:name].sub(/grot t'kel/, '')}/) } }}
     unless order_number = alchemy_shop_menu[potion_name]
        echo "error: failed to find a potion for #{potion_type} in the menu"
        exit
     end
     dothistimeout "order #{order_number}", 3, /BUY/
     buy_result = dothistimeout 'buy', 3, /Sold for [0-9]+ silver|^But you do not have enough silver!/
     if buy_result =~ /Sold for ([0-9]+) silver/
        silvers -= $1.to_i
     elsif buy_result =~ /^But you do not have enough silver!/
        withdraw.call
        go_to_alchemist.call
        redo
     else
        silvers = check_silvers.call
     end
     if checkleft
        GameObj.left_hand
     else
        nil
     end
}

#finds and preps the orb gem with a grot t'kel potion
prep = proc {
    unless container = GameObj.inv.find { |obj| obj.noun.downcase == Vars.orbsack.downcase }
        unless container = GameObj.inv.find { |obj| obj.name =~ /#{Vars.orbsack.join(' ')}$/ }
            unless container = GameObj.inv.find { |obj| obj.name =~ /#{Vars.orbsack.join('.*?')}/ }
                echo "error: can't find container \"#{Vars.orbsack.join(' ')}\""
                exit
            end
        end
    end
    
    if container.contents.nil?
        open_result = dothistimeout "open ##{container.id}", 5, /^You open|^That is already open\.$/
        unless open_result =~ /^You open/
            dothistimeout "look in ##{container.id}", 5, /In .*? you see/
            if container.contents.nil?
                echo "error: failed to find contents of container \"#{container.name}\""
                exit
            end
        end
    end
    gem_list = container.contents.find_all { |obj| obj.type =~ /gem/ }
    if gem_list.empty?
        echo "error: no orb gems found in container \"#{container.name}\""
        exit
    end
    for gem in gem_list
    if (mana < 100)
      echo "waiting for mana..."
      wait_until { mana >= 100 }
    end
    waitrt?
    waitcastrt?
    fput "get ##{gem.id} from #{UserVars.orbsack}" ,5, /You remove/
    fput "prep 405"
    resulth = dothistimeout("cast at ##{gem.id}" ,3, /flows of essence|You can't make any sense/)
    if resulth =~ /flows of essence/
        charge.call
    end
    resultt = dothistimeout("get my grot pot",3, /Get what|You remove/)
    if resultt =~ /Get what/
        withdraw.call 
        go_to_alchemist.call 
        buy_potion.call
        deposit.call 
        Script.run("go2", "wizard workshop")
        wait_while(running? "go2")
        if checkleft =~ /package/
            multifput "open my package", "empty my package into #{UserVars.lootsack}", "throw package", "get my grot pot"
        end
    end
    fput "pour my pot on ##{gem.id}" ,5, /You carefully work the liquid in until it is all absorbed/
    fput "put #{GameObj.left_hand.id} in #{UserVars.lootsack}"
    echo "prep work complete, you should now be holding a prepped orb gem and begin the casting and charging process"
    end
}
#initial cast of 517 to make the pulsating orb
charge = proc {
   target = GameObj.right_hand.id
   if Spell[517].known? && Spell[517].affordable?
      waitcastrt?
      fput "prep 517"
      fput "cast at ##{target}"
  end
}
#charge up the pulsating orb until it is humming with tones of enchantment
charge_orb = proc {
  if Spell[517].known? && Spell[517].affordable?
      fput "517 p orb"
      while target_line = waitfor("grows in size", "oblivion",  "concentrate completely", "humming tones of enchantment")   
         waitcastrt?
         if (target_line =~ /grows in size|concentrate completely/)
            charge_orb.call
         elsif (target_line =~ /oblivion/)
            exit
         end
      end
   end
}
#charges the items in your lootsack from the magicitem_list array
def charge_item(magic_item)
  fput "get #{magic_item} from #{UserVars.lootsack}"
  #fput "prep 405"
  #result2 = dothistimeout("cast at #{cur_item}" ,3, /with #{num_charges} charges|maximum of #{max_charges} charges/)
    #if result2 = /with #{num_charges} charges|maxiumum of #{max_charges} charges/
        #subtract(#{num_charges} from #{max_charges}) = #{num_charging}
    #end
  result = dothistimeout("rub pulsating orb", 5, /fingers of essence caress it|You are unable to add any more charges|You do not have enough mana|The orb isn't properly prepared for recharging|You are unable to properly channel the flows|It flares a sickening green and then goes dim/)
  if result =~ /fingers of essence caress it/
    return result 
  elsif result =~ /You are unable to add any more charges/
    fput "put #{cur_item} in my #{UserVars.magicsack}"
    return result
  elsif result =~  /You do not have enough mana/
    sleep 60
  elsif result =~ /The orb isn't properly prepared for recharging/
    orbmaint()
  elsif result =~ /You are unable to properly channel the flows/
    echo "You do not have the skillset required for this action, please consider another profession"
  elsif result =~ /It flares a sickening green and then goes dim/
    echo "Major Failure   Greening"
    fput "put #{GameObj.right_hand.id} in #{UserVars.magicsack}"
    chargeitem(cur_item)
  end
  return result
end
#maintains the pulsating orb
def orbmaint
  waitfor /The pulsating orb shrinks somewhat/
  if Spell[517].known? && Spell[517].affordable?
    fput "prep 517"
    resultx = dothistimeout("cast at p orb", 5, /humming tones of enchantment/) 
    if resultx =~ /humming tones of enchantment/
      return result
    end
  end
end


empty_hands
location.call
prep.call
charge.cal
charge_orb.call
magicitem_list = container.contents.find_all { |obj| obj.type =~ /magicitem/ }
magicitem_list.each { |magicitem|
  chargeitem(magicitem)
  orbmaint
}