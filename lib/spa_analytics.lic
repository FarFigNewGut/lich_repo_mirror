require 'sequel'
require 'ascii_charts'

module Spa
  module Analytics
    @file = File.join($data_dir, "spa.db")
    Self = Sequel.sqlite(@file)
    
    Self.create_table?(:tasks) do
      primary_key :id
      String  :creature
      Integer :tip
      Integer :level
      Date    :created_at
      Integer :year
      Integer :month
      Integer :day
      Integer :hour
    end

    Spa::Analytics::Self.alter_table(:tasks) do add_column :hour, Integer end if Script.current.vars.include?("--migrate-0")

    Tasks  = Self[:tasks]

    def self.avg_tips_per_creature(levels: 0..110, n: 10, min_sample_size: 5)
      Tasks
        .where(level: levels)
        .to_hash_groups(:creature, :tip)
        .transform_values {|tips| tips.reduce(&:+) / tips.size}
        .sort {|a,b| b.last - a.last}
        .take(n)
    end

    def self.lifetime_tips()
      Tasks.select(:tip)
        .sum(:tip)
    end

    def self.monthly_tips(month: Time.now.month, year: Time.now.year)
      Tasks
        .where(month: month, year: year)
        .sum(:tip)
    end

    def self.insert_task(task)
      task = task.to_h unless task.is_a?(Hash)
      now = Time.now
      task[:created_at] = now
      task[:year]       = now.year
      task[:month]      = now.month
      task[:day]        = now.day
      task[:hour]       = now.hour
      task = Hash[Tasks.columns
          .zip(task.values_at(*Tasks.columns))
          .reject {|pair| pair.last.nil?}]
      @task_id = Tasks.insert(task)
    end

    def self.graph_monthly_tips(from: Time.now.month, number: 12)
      months = (0...number).to_a.map {|offset| 
        position = from - offset
        # handle underflow
        month = position < 1 ? 12 + position : position
        year  = position < 1 ? (Time.now.year - 1) : Time.now.year
        ["%s-%s" % [month, year.to_s.slice(-2..-1)], self.monthly_tips(month: month, year: year) || 0]
      }.reverse
      
      _respond AsciiCharts::Cartesian.new(months, title: "monthly tips", bar: true).draw
    end

    def self.graph_hourly_tips(from: Time.now, number: 6)
      initial_hour = from.hour
      initial_day  = from.day

      hours = (0...number).to_a.map {|offset| 
        position = initial_hour - offset
        # handle underflow
        hour = position < 1 ? 24 + position : position
        [hour, Tasks.where(day: initial_day, hour: hour).sum(:tip) || 0]
      }.reverse
      
      _respond AsciiCharts::Cartesian.new(hours, title: "hourly tips", bar: true).draw
    end
  end
end