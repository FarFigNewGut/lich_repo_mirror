=begin
  be a better giver.
  works great with ;autoaccept

  examples:
    ;give all blue sapphire Ondreian
    ;give 3 white crystal Ondreian
    ;give all skins Ondreian
    ;give all gems Ondreian
    ;give all boxes Ondreian
    ;give all wands Wizard
  
  Required: Lich 4.3.12, Olib
  Tags: lockers, movers, move
  Author: Ondreian

=end

require "Olib"

class Tries
  def initialize(tries = 3)
    i = 0
    begin  
      i = i + 1
      yield i
    rescue Exception => e
      respond e.message
      if i >= tries
        raise Exception.new "all tries exhausted #{tries}"
      else 
        retry
      end
    end
  end
end

module Giver
  ALL      = "all"
  args     = Script.current.vars[1..-1]
  @@many   = args.shift
  @@to     = args.pop
  @@target = GameObj.pcs.find do |pc| pc.name.split(" ").last.downcase =~ /#{@@to.downcase}/ end
  (@@tags, @@query) = args.partition do |arg| arg.start_with?(":") end

  @@tags  = @@tags.map do |tag| tag[1..-1].to_sym end
  @@query = %r(#{@@query.join(" ")})

  Log.out({tags: @@tags, query: @@query})


  CONTAINERS = %i[lootsack].map do |kind| Containers[kind] end.compact

  def self.is_i?(thing)
    !!(thing =~ /\A[-+]?[0-9]+\z/)
  end

  if @@target.nil?
    echo "could not find character: #{@@to}"
    exit
  end

  if @@many != ALL && !is_i?(@@many)
    fput Script.current.vars
    fail Exception, "bad amount"
  end

  def self.give(id, player_id)
    Tries.new(3) do
      dothistimeout("give ##{id} to ##{@@target.id}", 
        30, 
        /has accepted your offer/) or fail "unable to give"
    end
  end

  contents = if @@tags.empty? then
    Containers.lootsack.select do |item| item.name =~ @@query end
  else
    Containers.lootsack.reject do |item| (item.tags & @@tags).empty? end
  end 
  
  contents = if @@many == ALL
    contents
  else
    contents.take @@many.to_i
  end

  empty_right_hand

  contents.map(&:id).uniq.each do |id|
    sleep 0.5
    fput "get ##{id}"
    
    give(id, @@target.id)
    
    wait_until { Char.right.nil? }
  end

  fill_right_hand
end