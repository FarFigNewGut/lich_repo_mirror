=begin

Self-healing script. The aim is also to be able to use this script
while simultaneously taking wounds from others. This
will hopefully prevent you from taking too much without
dedicating some time to heal yourself.

=====================================================
|SYNTAX: ;nurse self -- to heal yourself            |
|        ;nurse      -- to heal yourself only when  |
|                       starting to heal others     |
=====================================================

written by: Zadrix
Version v0.01 : "Made healing more efficient - no more wasted casts."

=end

no_kill_all
no_pause_all
silence_me

# Create array to hold all body parts
# to be healed.
############################################
## FIX!! Use Hash in future with body part #
## as key and internal/external/both as    #
## possible values                         #
############################################
wounds_to_heal = Array.new
scars_to_heal = Array.new
has_wounds = false

# Variable noting if this is going to be a self-heal
# or we're going to wait for the user to initiate a
# empathic link before beginning. The latter is the 
# default case.
self_heal = variable[1]

if self_heal == "self"
  goto "heal_self"
else
  goto "initiatelink"
end

heal_self:
   fput "heal"
   pause 1

check_for_wounds:

   line = get
   match = line.match(/^You have \w* .*/)

   #puts "Line is #{line}."

   if line.include? 'You have no significant injuries'
      goto "done"
#   elsif line.include? 'Bleeding'
#      goto "ask_keep_bleeder"
   elsif line.include? 'You have a'
#      puts "Setting wounds to true."
#      has_wounds = true
      goto "check_for_wounds2"
   elsif line.include? 'You have some'
#      puts "Setting wounds to true."
#      has_wounds = true
      goto "check_for_wounds2"
#   elsif line.include? 'Your spirit'
#      goto "check_for_wounds"
#   elsif line.include? 'Your body'
#      goto "check_for_wounds"
#   else
#      goto "check_for_wounds2"
   end

check_for_wounds2:

   #puts "Match is: #{match}."
   if match.nil?
     goto "check_for_wounds"
   end

   unless match.nil?
      ailments = match.string.split(',')

      ailments.each{ |ailment|
         wound_match = ailment.match(/minor abrasions (.*)|cuts and bruises (.*)|tiny scratches (.*)|black and blue (.*)|slightly tender (.*)|bruised (.*)|minor swelling and bruising (.*)|severely swollen (.*)|some minor twitching|some severe twitching|difficulty controlling actions|partial paralysis of the entire body|severe paralysis of the entire body|complete paralysis of the entire body/)

         scar_match = ailment.match(/few nearly invisible scars (.*)|tiny scars (.*)|minor scars (.*)|severe scarring (.*)|ugly gashes (.*)|minor scarring (.*)|missing chunks (.*)|mangled and malformed (.*)|a stump for (.*)|chunks of flesh missing (.*)|ugly flesh stump (.*)|a mostly non-existent (.*)|an empty (.*)|loss of skin tone (.*)|minor skin discoloration (.*)|some shriveled and oddly folded skin (.*)|severely stiff and shriveled (.*)|severe skin loss exposing bone (.*)|an occasional twitch (.*)|an occasional twitching (.*)|a constant twitching (.*)|minor internal scarring (.*)|a confused look with sporadic (.*)|a blank stare (.*)|a partially paralyzed (.*)|a severely paralyzed (.*)|a completely paralyzed (.*)|a painful (.*)|a severely painful (.*)|an extremely painful (.*)|a somewhat emaciated (.*)|a clouded (.*)|a completely clouded (.*)|a blind (.*)|numbness/)
         
         unless wound_match.nil?
            #puts "Wound match would be: #{wound_match}."

            if wound_match.string.include? 'head'
               wounds_to_heal.push("head")
            elsif wound_match.string.include? 'neck'
               wounds_to_heal.push("neck")
            elsif wound_match.string.include? 'chest'
               wounds_to_heal.push("chest")
            elsif wound_match.string.include? 'abdomen'
               wounds_to_heal.push("abdomen")
            elsif wound_match.string.include? 'back'
               wounds_to_heal.push("back")
            elsif wound_match.string.include? 'left hand'
               wounds_to_heal.push("left hand")
            elsif wound_match.string.include? 'left leg'
               wounds_to_heal.push("left leg")
            elsif wound_match.string.include? 'left arm'
               wounds_to_heal.push("left arm")
            elsif wound_match.string.include? 'right hand'
               wounds_to_heal.push("right hand")
            elsif wound_match.string.include? 'right leg'
               wounds_to_heal.push("right leg")
            elsif wound_match.string.include? 'right arm'
               wounds_to_heal.push("right arm")
            elsif wound_match.string.include? 'right eye'
               wounds_to_heal.push("right eye")
            elsif wound_match.string.include? 'left eye'
               wounds_to_heal.push("left eye")
            elsif wound_match.string.include? 'skin'
               wounds_to_heal.push("skin")
            # Some weird edge cases
            elsif wound_match.string.include? 'controlling actions'
               wounds_to_heal.push("skin")
            elsif wound_match.string.include? 'minor twitching'
               wounds_to_heal.push("skin")
            elsif wound_match.string.include? 'severe twitching'
               wounds_to_heal.push("skin")
            elsif wound_match.string.include? 'paralysis'
               wounds_to_heal.push("skin")
            end
         end

         unless scar_match.nil?
            #puts "Scar match would be: #{scar_match}."

            if scar_match.string.include? 'head'
               scars_to_heal.push("head")
            elsif scar_match.string.include? 'neck'
               scars_to_heal.push("neck")
            elsif scar_match.string.include? 'chest'
               scars_to_heal.push("chest")
            elsif scar_match.string.include? 'abdomen'
               scars_to_heal.push("abdomen")
            elsif scar_match.string.include? 'back'
               scars_to_heal.push("back")
            elsif scar_match.string.include? 'left hand'
               scars_to_heal.push("left hand")
            elsif scar_match.string.include? 'left leg'
               scars_to_heal.push("left leg")
            elsif scar_match.string.include? 'left arm'
               scars_to_heal.push("left arm")
            elsif scar_match.string.include? 'right hand'
               scars_to_heal.push("right hand")
            elsif scar_match.string.include? 'right leg'
               scars_to_heal.push("right leg")
            elsif scar_match.string.include? 'right arm'
               scars_to_heal.push("right arm")
            elsif scar_match.string.include? 'right eye'
               scars_to_heal.push("right eye")
            elsif scar_match.string.include? 'left eye'
               scars_to_heal.push("left eye")
            elsif scar_match.string.include? 'skin'
               scars_to_heal.push("skin")
            # Weird edge cases
            elsif scar_match.string.include? 'blank stare'
               scars_to_heal.push("head")
            elsif scar_match.string.include? 'pallor'
               scars_to_heal.push("abdomen")
            elsif scar_match.string.include? 'numbness'
               scars_to_heal.push("skin")
            end
         end
      }

      goto "heal_all"

   end

ask_keep_bleeder:
   echo "*** Would you like to keep your bleeder? (Yes or Nope) ***"
   toggle_upstream

ask_again:
   user_input = upstream_get

   if user_input.eql? '<c>Nope'
     toggle_upstream
     goto "heal_all"
   elsif user_input.eql? '<c>Yes'
     toggle_upstream
     goto "keep_bleeder"
   else
     goto "ask_again"
   end

head:
  wounds_to_heal.push("head")
   
heal_all:
   #echo "Got to heal_all"
   #heal_messages = ["appear completely healed"]
   internals = false
   externals = false

   while wounds_to_heal.count > 0
      all_healed = false # Set this default to false
      iterations = 1

      fput "prep hw 10"
#      puts "Going to heal #{wounds_to_heal[0]}"

      waitfor "You feel fully prepared"

      if externals == true and internals == false
         # We only have INTERNALS left to heal, so let's
         # dedicate all the mana to internals.

         fput "cast #{wounds_to_heal[0]} internal"
      elsif externals == false and internals == true
         # We only have EXTERNALS left to heal, so let's
         # dedicate all the mana to externals.

         fput "cast #{wounds_to_heal[0]} external"
      else
         fput "cast #{wounds_to_heal[0]}"
      end
      pause 2

      begin
         cast_result = get      
         did_heal = cast_result.match(/(.*) appear completely healed/)[1]

         #puts "cast result is: #{cast_result}."

         if did_heal.include? 'internal'
           #puts "Healed all internal wounds for this body part."
           internals = true
         end
         if did_heal.include? 'external'
           #puts "Healed all external wounds for this body part."
           externals = true
         end

         if cast_result.include? 'cannot heal what is not injured'
            #Add this wound to the scar array
            unless scars_to_heal.include? '#{wounds_to_heal[0]'
               scars_to_heal.push("#{wounds_to_heal[0]}")
            end
            wounds_to_heal.delete_at(0)

            # Reset external/internal variables
            externals = false
            internals = false

            all_healed = true
            break
         end

         if externals == true and internals == true
           #Add this wound to the scar array if it's not
           #already in there
           unless scars_to_heal.include? '#{wounds_to_heal[0]'
               scars_to_heal.push("#{wounds_to_heal[0]}")
            end

           wounds_to_heal.delete_at(0)

           # Reset external/internal variables
           externals = false
           internals = false

           all_healed = true
           break
         elsif iterations >= 3
           break
         end

         iterations += 1
      end while all_healed == false

      puts "Internals was #{internals} and externals was #{externals}."
      #puts "AFTER -- All healed was: #{all_healed}."

   end

   while scars_to_heal.count > 0
      all_healed = false # Set this default to false
      iterations = 1

      #puts "BEFORE -- All healed was: #{all_healed}."

      fput "prep hs 15"
      #puts "Going to heal #{scars_to_heal[0]}"

      waitfor "You feel fully prepared"
      if externals == true and internals == false
         fput "cast #{scars_to_heal[0]} internal"
      elsif externals == false and internals == true
         fput "cast #{scars_to_heal[0]} external"
      else
         fput "cast #{scars_to_heal[0]}"
      end
      pause 2

      begin
         cast_result = get      
         did_heal = cast_result.match(/(.*) appear completely healed/)[1]

         if did_heal.include? 'internal'
           #puts "Healed all internal scars for this body part."
           internals = true
         end
         if did_heal.include? 'external'
           #puts "Healed all external scars for this body part."
           externals = true
         end

         if cast_result.include? 'cannot heal what is not injured'
            scars_to_heal.delete_at(0)

            # Reset external/internal variables
            externals = false
            internals = false

            all_healed = true
            break
         end

         if externals == true and internals == true
           scars_to_heal.delete_at(0)

           # Reset external/internal variables
           externals = false
           internals = false

           all_healed = true
           break
         elsif iterations >= 3
           break
         end

         iterations += 1
      end while all_healed == false

      #puts "AFTER -- All healed was: #{all_healed}."

   end

   goto "done"

keep_bleeder:
   echo "***Keep Bleeder: Not implemented yet..."
   exit

initiatelink:
   echo "Do nothing"
   exit

done:
   echo "***Done!"
   exit
