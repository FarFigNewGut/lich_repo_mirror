=begin
  Necromancer healing script
  Run to area defined in YAML and kill creatures until fully healed
  Uses combat trainer and YAML file
  Consume logic via combat trainer
  v.01 by Kalros

TO DO:
  - Need to see if there is a graceful exit for combat trainer
    potential for items to get left behind.

=end

## USER VARIABLES - Set

## Uses base-hunting.Yaml
$huntZone = 'goblins'

## Set to your Name-heal.yaml file.
$yamlFile = 'heal'

if $huntZone == 'XXX'
  echo "You must open the script and set your hunting zone and yamlFile"
  exit
end

custom_require.call(%w(common common-arcana common-items common-travel drinfomon events spellmonitor equipmanager))

## Class NecroHeal uses several of Hunting Buddy's methods to move
## to a hunting zone based on base-hunting.yaml.
class NecroHeal
  include DRC
  include DRCA
  include DRCI
  include DRCT

  ## Copy from Hunting Buddy
  def initialize
    arg_definitions = [[]]
    args = parse_args(arg_definitions, true)

    @settings = get_settings
    data = get_data('hunting')
    @escort_zones = data.escort_zones
    @hunting_zones = data.hunting_zones

    hunting_info = []
    if @settings.hunting_file_list || args.flex.any?
      (args.flex.any? ? args.flex : @settings.hunting_file_list).each do |file|
        hunting_info += file == 'setup' ? get_settings.hunting_info : get_settings([file]).hunting_info
      end
    else
      hunting_info = @settings.hunting_info
    end

    @hunting_info = format_hunting_info(hunting_info)

    ## start change from hunting buddy method
  end

  ## Copy from Hunting Buddy
  def format_hunting_info(hunting_info_raw)
    hunting_info = []
    hunting_info_raw.each do |info|
      if hunting_info.empty? || hunting_info.last[:zone] != info[:zone]
        if info['args'].flatten == info['args']
          info['args'] = [info['args'] || []]
          info[:duration] = [info[:duration]]
          info['stop_on'] = [info['stop_on']]
        end
        hunting_info << info
      else
        hunting_info.last['args'] << info['args']
        hunting_info.last[:duration] << info[:duration]
        hunting_info.last['stop_on'] << info['stop_on']
      end
    end
    hunting_info
  end

  ## Copy from Hunting Buddy
  def find_hunting_room?(zone_name)
    UserVars.friends = @settings.hunting_buddies || []
    if rooms = @hunting_zones[zone_name]
      @exit = nil
      find_empty_room(rooms, @settings.safe_room,
                      lambda do
                        return true if (DRRoom.pcs & UserVars.friends).any?
                        return false if (DRRoom.pcs - DRRoom.group_members).any?
                        # No visible friends in the room and no visible people
                        UserVars.friends.each { |friend| Flags.add("room-check-#{friend}", friend) }
                        Flags.add('room-check', 'says, ', 'say, ', 'You hear')
                        fput("say #{@settings.empty_hunting_room_messages.sample}")
                        bput('search', 'roundtime')
                        data = reget(40).reverse.take_while { |x| x !~ /You search around/ }
                        if data.grep(/vague silhouette|You notice \w+, who is|see signs that/).any?
                          pause
                          waitrt?
                          return UserVars.friends.find { |friend| Flags["room-check-#{friend}"] }
                        end
                        20.times do |_|
                          pause 0.5
                          return true if UserVars.friends.find { |friend| Flags["room-check-#{friend}"] }
                          return false if Flags['room-check'] || !(DRRoom.pcs - DRRoom.group_members - UserVars.friends).empty?
                        end
                        true
                      end)
    else
      escort_info = @escort_zones[zone_name]
      unless escort_info
        echo "FAILED TO FIND HUNTING ZONE #{zone_name} IN BASE.YAML"
        return false
      end
      walk_to(escort_info['base'])
      wait_for_script_to_complete('bescort', [escort_info['area'], escort_info['enter']])
      @exit = [escort_info['area'], 'exit']
    end

    true
  end

  ## new method for running a script and waiting for it to finish
  def runWaitScript(script, var1)
    start_script "#{script}", ["#{var1}"] if var1 !~ /xx/
    start_script "#{script}" if var1 =~ /xx/
    sleep 1
    wait_while { running?("#{script}")}
    waitrt?
    sleep 1
  end

  ## Start new code for necrohealing
  def main

    ## Sets flag to check for game line to determine when no wounds exist
  
    ## Flag uses consume logic from combat-training. If no wounds are left
    ## then combat-training uses dissect or harvest. Regex tests for both rituals.
    Flags.add('noWounds', '(You carefully position the corpse and make a cut|You bend over .* to make a few quick)')
    Flags['noWounds'] = false
    
    ## Run to hunting zones
    find_hunting_room?($huntZone)

    ## Checks for status of wound flag in background
    Thread.new {
      loop {
        sleep 3
        if Flags['noWounds']
          # Need to add graceful exit from combat-training
          kill_script 'combat-trainer' if running?('combat-trainer') 
        end
      }
    }

    ## Run YAML script via combat trainer
    runWaitScript("combat-trainer", $yamlFile)
    
    ## Clean up functions once healing is done
    bput('loot', "(You search|I could not)")
    echo 'Healing done!'
  end

end

before_dying do
  kill_script 'combat-trainer' if running?('combat-trainer') 
end

$NecroHeal = NecroHeal.new
$NecroHeal.main