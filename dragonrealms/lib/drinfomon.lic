# quiet
=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  Updated info tracking for use in other scripts in DragonRealms:
    -skill tracking
      name/rank/xp
    -info tracking
      everything listed under info other than debt wealth and birthdate

  Provides some additional commands to the user:
    ;banks
      Tracks your money and converts copper strings to plat format. Not all locations tracked.
    ;vault
      Tracks vault contents and location. -not all location included

  Display experience gain in your Field Experience window:
    ;e UserVars.track_exp=true
=end

unless XMLData.game =~ /^(?:DRF|DR|DRPlat)$/
  echo "This script is meant for DragonRealms Prime, Platinum, or Fallen.  It will likely cause problems on whatever game you're trying to run it on..."
  exit
end

no_kill_all
no_pause_all
# hide_me
setpriority(0)

class DRStats
  @@race ||= 'unknown'
  @@guild ||= 'unknown'
  @@gender ||= 'unknown'
  @@age ||= 0
  @@circle ||= 0
  @@strength ||= 0
  @@stamina ||= 0
  @@reflex ||= 0
  @@agility ||= 0
  @@intelligence ||= 0
  @@wisdom ||= 0
  @@discipline ||= 0
  @@charisma ||= 0
  @@concentration ||= 0
  @@favors ||= 0
  @@tdps ||= 0
  @@encumbrance ||= 'unknown'
  @@health ||= 100
  @@mana ||= 100
  @@fatigue ||= 100
  @@spirit ||= 100

  def self.race
    @@race
  end

  def self.race=(val)
    @@race = val
  end

  def self.guild
    @@guild
  end

  def self.guild=(val)
    @@guild = val
  end

  def self.gender
    @@gender
  end

  def self.gender=(val)
    @@gender = val
  end

  def self.age
    @@age
  end

  def self.age=(val)
    @@age = val
  end

  def self.circle
    @@circle
  end

  def self.circle=(val)
    @@circle = val
  end

  def self.strength
    @@strength
  end

  def self.strength=(val)
    @@strength = val
  end

  def self.stamina
    @@stamina
  end

  def self.stamina=(val)
    @@stamina = val
  end

  def self.reflex
    @@reflex
  end

  def self.reflex=(val)
    @@reflex = val
  end

  def self.agility
    @@agility
  end

  def self.agility=(val)
    @@agility = val
  end

  def self.intelligence
    @@intelligence
  end

  def self.intelligence=(val)
    @@intelligence = val
  end

  def self.wisdom
    @@wisdom
  end

  def self.wisdom=(val)
    @@wisdom = val
  end

  def self.discipline
    @@discipline
  end

  def self.discipline=(val)
    @@discipline = val
  end

  def self.charisma
    @@charisma
  end

  def self.charisma=(val)
    @@charisma = val
  end

  def self.concentration
    @@concentration
  end

  def self.concentration=(val)
    @@concentration = val
  end

  def self.favors
    @@favors
  end

  def self.favors=(val)
    @@favors = val
  end

  def self.tdps
    @@tdps
  end

  def self.tdps=(val)
    @@tdps = val
  end

  def self.encumbrance
    @@encumbrance
  end

  def self.encumbrance=(val)
    @@encumbrance = val
  end

  def self.health
    @@health
  end

  def self.health=(val)
    @@health = val
  end

  def self.mana
    @@mana
  end

  def self.mana=(val)
    @@mana = val
  end

  def self.fatigue
    @@fatigue
  end

  def self.fatigue=(val)
    @@fatigue = val
  end

  def self.spirit
    @@spirit
  end

  def self.spirit=(val)
    @@spirit = val
  end

  def self.serialize
    [@@race, @@guild, @@gender, @@age, @@circle, @@strength, @@stamina, @@reflex, @@agility, @@intelligence, @@wisdom, @@discipline, @@charisma, @@concentration, @@favors, @@tdps, @@encumbrance, @@health, @@mana, @@fatigue, @@spirit]
  end

  def self.load_serialized=(array)
    @@race, @@guild, @@gender, @@age = array[0..3]
    @@circle, @@strength, @@stamina, @@reflex, @@agility, @@intelligence, @@wisdom, @@discipline, @@charisma, @@concentration, @@favors, @@tdps, @@encumbrance, @@health, @@mana, @@fatigue, @@spirit = array[5..21]
  end
end

class DRSkill
  @@list ||= []
  attr_reader :name, :rank, :exp, :percent, :current, :baseline
  attr_writer :rank, :exp, :percent, :current
  def initialize(name, rank, exp, percent)
    #UserVars.athletics = ra.to_i if name == 'Athletics'
    @name = name
    @rank = rank
    @exp = exp
    @percent = percent
    @baseline = rank.to_i + (percent.to_i / 100.0)
    @current = rank.to_i + (percent.to_i / 100.0)
    @@list.push(self) unless @@list.find { |skill| skill.name == @name }
  end

  def self.gained_exp(val)
    ary = @@list.collect(&:name)
    if i = ary.index(val)
      return @@list[i].current ? (@@list[i].current - @@list[i].baseline).round(2) : 0.00
    end
  end

  def self.include?(val)
    ary = @@list.collect(&:name)
    ary.include?(val)
  end

  def self.update(name, ra, xp, per)
    #UserVars.athletics = ra.to_i if name == 'Athletics'
    ary = @@list.collect(&:name)
    if i = ary.index(name)
      @@list[i].rank = ra
      @@list[i].exp = xp
      @@list[i].percent = per
      @@list[i].current = ra.to_i + (per.to_i / 100.0)
    end
  end

  def self.getrank(val)
    ary = @@list.collect(&:name)
    if i = ary.index(val)
      return @@list[i].rank
    end
  end

  def self.getxp(val)
    ary = @@list.collect(&:name)
    if i = ary.index(val)
      return @@list[i].exp
    end
  end

  def self.getpercent(val)
    ary = @@list.collect(&:name)
    if i = ary.index(val)
      return @@list[i].percent
    end
  end

  def self.listall
    @@list.each do |i|
      puts i.name + ': ' + i.rank + '.' + i.percent + '% [' + i.exp + '/34] --'
    end
  end

  def self.list
    @@list
  end
end

class DRRoom
  @@npcs ||= []
  @@pcs ||= []
  @@dead_npcs ||= []
  @@room_objs ||= []
  def self.npcs
    @@npcs
  end

  def self.npcs=(val)
    @@npcs = val
  end

  def self.pcs
    @@pcs
  end

  def self.pcs=(val)
    @@pcs = val
  end

  def self.dead_npcs
    @@dead_npcs
  end

  def self.dead_npcs=(val)
    @@dead_npcs = val
  end

  def self.room_objs
    @@room_objs
  end

  def self.room_objs=(val)
    @@room_objs = val
  end
end

def convert2copper(amt, denomination)
  if denomination =~ /platinum/
    return (amt.to_i * 10_000)
  elsif denomination =~ /gold/
    return (amt.to_i * 1000)
  elsif denomination =~ /silver/
    return (amt.to_i * 100)
  elsif denomination =~ /bronze/
    return (amt.to_i * 10)
  else
    return amt
  end
end

def convert2plats(copper)
  coins = copper.to_s.reverse
  coins = coins.scan(/(?:\d*\.)?\d{1,4}-?/) # if it has plats move them to their own index
  coins[1] = coins[1].reverse + ' platinum' if coins[1]
  coins[0] = coins[0].scan(/\d/)
  coins[0][3] = coins[0][3] + ' gold' if coins[0][3]
  coins[0][2] = coins[0][2] + ' silver' if coins[0][2]
  coins[0][1] = coins[0][1] + ' bronze' if coins[0][1]
  coins[0][0] = coins[0][0] + ' copper'

  coins[0].delete_if { |x| x =~ /0/ }
  coins[0].reverse!
  coins[0].flatten!
  coins.reverse!
  coins = coins.join(', ')
  coins
end

def clean_and_split(room_objs)
  room_objs.sub(/You also see/, '').strip.split(/,|\sand\s/)
end

def find_pcs(room_players)
  room_players.sub(/ and (.*)$/) { ", #{Regexp.last_match(1)}" }
              .split(', ')
              .map { |obj| obj.sub(/ who (has|is) .+/, '').sub(/ \(.+\)/, '') }
              .map { |obj| obj.strip.scan(/\w+$/).first }
end

def find_npcs(room_objs)
  clean_and_split(room_objs)
    .select { |obj| obj =~ /pushBold/ }
    .reject { |obj| obj =~ /which appears dead/ }
    .map { |obj| obj.sub('<pushBold/>', '').sub(/\<popBold\/\>.*/, '') }
    .map { |obj| obj.strip.scan(/[A-z']+$/).first }
end

def find_dead_npcs(room_objs)
  clean_and_split(room_objs)
    .select { |obj| obj =~ /pushBold/ }
    .select { |obj| obj =~ /which appears dead/ }
    .map { |obj| obj.sub('<pushBold/>', '').sub(/\<popBold\/\>.*/, '') }
    .map { |obj| obj.strip.scan(/[A-z']+$/).first }
end

def find_objects(room_objs)
  clean_and_split(room_objs)
    .reject { |obj| obj =~ /pushBold/ }
    .map { |obj| obj.sub(/\.$/, '').strip.sub(/^a /, '').strip.sub(/^some /, '') }
end

sleep(0.1) until Char.name && !Char.name.empty?
CharSettings['bank_accounts'] = {} unless CharSettings['bank_accounts'].class == Hash
CharSettings['vault_info'] = {} unless CharSettings['vault_info'].class == Hash

kronar_banks = ['Crossings', 'Dirge', 'Leth Deriel', 'Ilaya Taipa']
lirum_banks = ["Aesry Surlaenis'a", "Hara'jaal", "Mer'Kresh", "Muspar'i", 'Ratha', 'Riverhaven', "Rossman's Landing", 'Therenborough', 'Throne City']
dokora_banks = ['Ain Ghazal', 'Boar Clan', "Chyolvea Tayeu'a", 'Hibarnhvidar', 'Shard']

bank_titles = {
  "Aesry Surlaenis'a"			=> ['[[Tona Kertigen, Deposit Window]]'],
  'Ain Ghazal'				=> ['Unknown Description'],
  'Boar Clan'					=> ['Unknown Description'],
  "Chyolvea Tayeu'a"			=> ["[[Chyolvea Tayeu'a, Teller]]"],
  'Crossings'					=> ['[[Provincial Bank, Teller]]'],
  'Dirge'						=> ['Unknown Description'],
  "Hara'jaal"					=> ['Unknown Description'],
  'Hibarnhvidar'				=> ['[[Second Provincial Bank of Hibarnhvidar, Teller]]'],
  'Ilaya Taipa'				=> ['Unknown Description'],
  'Leth Deriel'				=> ['[[Imperial Depository, Domestic Branch]]'],
  "Mer'Kresh"					=> ['Unknown Description'],
  "Muspar'i"					=> ['Unknown Description'],
  'Ratha'						=> ['[[Lower Bank of Ratha, Cashier]]', '[[Sshoi-sson Palace, Grand Provincial Bank, Bursarium]]'],
  'Riverhaven'				=> ['[[Bank of Riverhaven, Teller]]'],
  "Rossman's Landing"			=> ['Unknown Description'],
  'Shard'						=> ["[[First Bank of Ilithi, Teller's Windows]]"],
  'Therenborough'				=> ['[[Bank of Therenborough, Teller]]'],
  'Throne City'				=> ['[[Faldesu Exchequer, Teller]]']
}

vault_titles = {
  'Crossings'					=> ['[[Crossing, Carousel Chamber]]'],
  'Leth Deriel'				=> ['[[Leth Deriel, Carousel Chamber]]'],
  "Muspar'i"					=> ["[[Muspar'i, Carousel Square]]"],
  'Ratha'						=> ['[[Ratha, Carousel Square]]'],
  'Riverhaven'				=> ['[[Riverhaven, Carousel Chamber]]'],
  'Shard'						=> ['[[Shard, Carousel Square]]'],
  "Mer'Kresh"					=> ["[[Mer'Kresh, Carousel Square]]"],
  'Therenborough'				=> ['[[Therenborough, Carousel Square]]']
}
#
# Register ;banks ;vault commands
action = proc do |client_string|
  if client_string =~ /^(?:<c>)?#{$lich_char}((?:banks|vault).*)/i
    if scr = Script.running.find { |val| val.name == 'drinfomon' }
      scr.downstream_buffer.shove("#{$clean_lich_char}#{Regexp.last_match(1)}") # if this script is still running send the command
    else
      UpstreamHook.remove('drinfomon') # if the script isnt running remove the hook
    end
    nil # its a command that shouldnt be sent to the game
  else
    client_string # didnt find a command we should watch for send the string as normal
  end
end
UpstreamHook.remove('drinfomon')
UpstreamHook.add('drinfomon', action)
# End Register commands
xp_pools = ['clear', 'dabbling', 'perusing', 'learning', 'thoughtful', 'thinking', 'considering', 'pondering', 'ruminating',
            'concentrating', 'attentive', 'deliberative', 'interested', 'examining', 'understanding', 'absorbing', 'intrigued',
            'scrutinizing', 'analyzing', 'studious', 'focused', 'very focused', 'engaged', 'very engaged', 'cogitating', 'fascinated',
            'captivated', 'engrossed', 'riveted', 'very riveted', 'rapt', 'very rapt', 'enthralled', 'nearly locked', 'mind lock']
xp_action = proc do |server_string|
  if server_string =~ /\<d cmd..skill (.*)\'.*:\s+(.*)\s(\d+)%\s*\[\s?(\d+)\/34\]\</
    skill = Regexp.last_match(1)
    rank = Regexp.last_match(2)
    xp = Regexp.last_match(4)
    perc = Regexp.last_match(3)
    if DRSkill.include?(skill)
      DRSkill.update(skill, rank, xp, perc)
    else
      DRSkill.new(skill, rank, xp, perc)
    end
    if UserVars.track_exp
      server_string.sub!(/\]\</, "] #{DRSkill.gained_exp(skill)}<")
    end
  elsif server_string =~ /><preset id='whisper'>\s+(.*):\s+(\d+) (\d+)% (.*)<\/preset>/
    skill = Regexp.last_match(1)
    rank = Regexp.last_match(2)
    xp = Regexp.last_match(4).strip
    perc = Regexp.last_match(3)
    if DRSkill.include?(skill)
      DRSkill.update(skill, rank, xp_pools.index(xp), perc)
    else
      DRSkill.new(skill, rank, xp_pools.index(xp), perc)
    end
  elsif server_string =~ /<component id='exp .*'>\s+(.*):\s+(\d+) (\d+)% (.*)<\/component>/
    skill = Regexp.last_match(1)
    rank = Regexp.last_match(2)
    xp = Regexp.last_match(4).strip
    perc = Regexp.last_match(3)
    if DRSkill.include?(skill)
      DRSkill.update(skill, rank, xp_pools.index(xp), perc)
    else
      DRSkill.new(skill, rank, xp_pools.index(xp), perc)
    end
  elsif server_string =~ /([^:\(\)]+):\s+(\d+)\s(\d+)%[^\(\)]*\((\d+)\/\d+\)([^:\(\)]+):\s+(\d+)\s(\d+)%[^\(\)]*\((\d+)\/\d+\)/
    skill = Regexp.last_match(1).strip
    rank = Regexp.last_match(2)
    xp = Regexp.last_match(4)
    perc = Regexp.last_match(3)
    skill2 = Regexp.last_match(5).strip
    rank2 = Regexp.last_match(6)
    xp2 = Regexp.last_match(8)
    perc2 = Regexp.last_match(7)
    if DRSkill.include?(skill)
      DRSkill.update(skill, rank, xp, perc)
    else
      DRSkill.new(skill, rank, xp, perc)
    end
    if DRSkill.include?(skill2)
      DRSkill.update(skill2, rank2, xp2, perc2)
    else
      DRSkill.new(skill2, rank2, xp2, perc2)
    end
  elsif server_string =~ /([^:\(\)]+):\s+(\d+)\s(\d+)%[^\(\)]*\((\d+)\/\d+\)/
    skill = Regexp.last_match(1).strip
    rank = Regexp.last_match(2)
    xp = Regexp.last_match(4)
    perc = Regexp.last_match(3)
    if DRSkill.include?(skill)
      DRSkill.update(skill, rank, xp, perc)
    else
      DRSkill.new(skill, rank, xp, perc)
    end
  end
  server_string
end
DownstreamHook.remove('xp_action')
DownstreamHook.add('xp_action', xp_action)

status_action = proc do |server_string|
  if server_string =~ /\<progressBar id='mana' value='(\d+)'/
    DRStats.mana = Regexp.last_match(1).to_i
  elsif server_string =~ /\<progressBar id='stamina' value='(\d+)'/
    DRStats.fatigue = Regexp.last_match(1).to_i
  elsif server_string =~ /\<progressBar id='health' value='(\d+)'/
    DRStats.health = Regexp.last_match(1).to_i
  elsif server_string =~ /\<progressBar id='concentration' value='(\d+)'/
    DRStats.concentration = Regexp.last_match(1).to_i
  elsif server_string =~ /\<progressBar id='spirit' value='(\d+)'/
    DRStats.spirit = Regexp.last_match(1).to_i
  elsif server_string =~ /\'room players\'\>Also here: (.*)\.\<\/component\>/
    DRRoom.pcs = find_pcs(Regexp.last_match(1).dup)
  elsif server_string =~ /\'room players\'\>\<\/component\>/
    DRRoom.pcs = []
  elsif server_string =~ /\'room objs\'\>(.*)\<\/component\>/
    DRRoom.npcs = find_npcs(Regexp.last_match(1).dup)
    DRRoom.dead_npcs = find_dead_npcs(Regexp.last_match(1).dup)
    DRRoom.room_objs = find_objects(Regexp.last_match(1).dup)
  elsif server_string =~ /\'room objs\'\>\<\/component\>/
    DRRoom.npcs = []
    DRRoom.dead_npcs = []
    DRRoom.room_objs = []
  end
  server_string
end
DownstreamHook.remove('status_action')
DownstreamHook.add('status_action', status_action)

save_proc = proc do
  CharSettings.save
end
#
# Save current status every five minutes in case of crash
#
Thread.new do
  begin
    loop do
      sleep 300
      save_proc.call
    end
  rescue
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace[0..1]
  end
end # end save ever 5 min

before_dying do
  save_proc.call
  UpstreamHook.remove('drinfomon')
  DownstreamHook.remove('xp_action')
  DownstreamHook.remove('status_action')
end

put('exp all')
pause 1
put('info')

while line = script.gets
  begin
    if line =~ /Log-on system converted \d+% of your character/
      put('exp all')
    elsif line =~ /^#{$lich_char}banks$/
      if CharSettings['bank_accounts'].empty?
        respond
        respond 'No bank account info recorded.'
        respond
      else
        respond
        CharSettings['bank_accounts'].each do |town, amount|
          respond "#{town.rjust(27)}:#{amount.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse.rjust(13)}" + ' or ' + convert2plats(amount).to_s
        end
        respond '                      ------------------------------------------------------------------------------------------'
        total = 0
        kronar_banks.each do |city|
          if CharSettings['bank_accounts'][city]
            total += CharSettings['bank_accounts'].fetch(city)
          end
        end
        respond "                     Kronar Total:#{total.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse.rjust(13)}" + ' or ' + convert2plats(total).to_s
        total = 0
        lirum_banks.each do |city|
          if CharSettings['bank_accounts'][city]
            total += CharSettings['bank_accounts'].fetch(city)
          end
        end
        respond "                     Lirum Total:#{total.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse.rjust(13)}" + ' or ' + convert2plats(total).to_s
        total = 0
        dokora_banks.each do |city|
          if CharSettings['bank_accounts'][city]
            total += CharSettings['bank_accounts'].fetch(city)
          end
        end
        respond "                     Dokora Total:#{total.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse.rjust(13)}" + ' or ' + convert2plats(total).to_s
      end
    elsif line =~ /^#{$lich_char}vault$/
      if CharSettings['vault_info'].empty?
        respond
        respond 'No vault info recorded.'
        respond
      else
        respond
        respond "					Your vault is located in #{CharSettings['vault_info']['location']}"
        respond '					---------------------------------------'
        respond "					#{CharSettings['vault_info']['contents']}"
        respond
      end
    elsif line =~ /(?:In the secure vault you see|You rummage through a secure vault and see)\s(.*)\./
      vault_titles.each do |_town, titles|
        next unless titles.include?(checkroom)
        contents = Regexp.last_match(1)
        if line =~ /a (\w+ shelf|rack|box|case|tree) with some stuff (on|in) it/
          fput 'look ' + Regexp.last_match(2) + ' ' + Regexp.last_match(1)
          if get =~ /(?:On|In) the \w+ (?:shelf|rack|box|case|tree) you see(.*)\./
            contents += Regexp.last_match(1)
          end
        end
        CharSettings['vault_info']['location'] = checkarea.slice(/\w+/)
        CharSettings['vault_info']['contents'] = contents
      end
    elsif line =~ /^Circle: (\d+)/
      DRStats.circle = Regexp.last_match(1).to_i
    elsif line =~ /^Name:\s+.+Race:\s+(.+)\s+Guild:\s+(.+)/
      # info checked record stats
      DRStats.race = Regexp.last_match(1).strip
      DRStats.guild = Regexp.last_match(2).strip
      if get =~ /Gender:\s+([A-z]+)\s+Age:\s+([0-9]+)\s+Circle:\s+([0-9]+)/
        DRStats.gender = Regexp.last_match(1)
        DRStats.age = Regexp.last_match(2).to_i
        DRStats.circle = Regexp.last_match(3).to_i
        get
        get
        while get =~ /((?:Strength||Agility|Discipline|Intelligence|Concentration|Favors|TDPs|Encumbrance)\s:\s.*)/
          # keep checking the next line until it doesnt match a stat.
          line = Regexp.last_match(1) # save $1 since it'll be overwritten in the if statements
          if line =~ /^\s*(Strength||Agility|Discipline|Intelligence|Concentration)\s:\s{1,3}([0-9]+)\s*(Stamina|Reflex|Charisma|Wisdom)\s:\s{1,3}([0-9]+)/
            if Regexp.last_match(3) && Regexp.last_match(3) == 'Max'
              # if we see max only record current concentration.
              DRStats.send("#{Regexp.last_match(1).downcase}=", Regexp.last_match(2).to_i)
            else
              # otherwise record both stats on the line
              DRStats.send("#{Regexp.last_match(1).downcase}=", Regexp.last_match(2).to_i)
              DRStats.send("#{Regexp.last_match(3).downcase}=", Regexp.last_match(4).to_i)
            end
          elsif line =~ /^\s*(Favors|TDPs|Encumbrance)\s:\s(.*)/
            # only one stat on these lines
            if Regexp.last_match(1) == 'Encumbrance'
              DRStats.send("#{Regexp.last_match(1).downcase}=", Regexp.last_match(2))
            else
              DRStats.send("#{Regexp.last_match(1).downcase}=", Regexp.last_match(2).to_i)
            end
          end
        end
      end
      CharSettings['Stats'] = DRStats.serialize
    elsif line =~ /The clerk slides a small metal box across the counter into which you drop (\d+) (\w+) (?:Kronars|Lirums|Dokoras)./
      # you deposited a portion of your money
      bank_titles.each do |town, titles|
        next unless titles.include?(checkroom)
        copper = convert2copper(Regexp.last_match(1).to_i, Regexp.last_match(2))
        CharSettings['bank_accounts'][town] = CharSettings['bank_accounts'][town].to_i + copper
        break
      end
    elsif line =~ /^The clerk slides a small metal box across the counter into which you drop all your (?:Kronars|Lirums|Dokoras).  She counts them carefully and records the deposit in her ledger\./
      # you deposited all your money
      fput 'balance'
    elsif line =~ /^The clerk counts out ([0-9]+) (platinum|gold|silver|bronze|copper) (?:Kronars|Lirums|Dokoras) and hands them over, making a notation in her ledger\./
      # you withdrew some money
      bank_titles.each do |town, titles|
        next unless titles.include?(checkroom)
        copper = convert2copper(Regexp.last_match(1).to_i, Regexp.last_match(2))
        CharSettings['bank_accounts'][town] = CharSettings['bank_accounts'][town].to_i - copper
        break
      end
    elsif line =~ /^The clerk counts out all your (?:Kronars|Lirums|Dokoras) and hands them over, making a notation in her ledger\./
      # you withdrew all your money
      bank_titles.each do |town, titles|
        if titles.include?(checkroom)
          CharSettings['bank_accounts'][town] = 0
          break
        end
      end
    elsif line =~ /[it looks like|\"Here we are.]\s[y]our current balance is (.*)\s(?:Kronars|Lirums|Dokoras)\.\"/i
      # you checked your balance
      copper = 0
      # echo $1
      Regexp.last_match(1).each_line(', ') do |m|
        m.to_s
        a = m.match(/([0-9]+).[a-z]+/)
        copper += convert2copper(a.to_s.to_i, m)
      end
      bank_titles.each do |town, titles|
        if titles.include?(checkroom)
          CharSettings['bank_accounts'][town] = copper.to_i
          break
        end
      end
    elsif line =~ /you do not seem to have an account with us/
      # you have no account
      bank_titles.each do |town, titles|
        if titles.include?(checkroom)
          CharSettings['bank_accounts'][town] = 0
          break
        end
      end
    end
  rescue
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  end
end
