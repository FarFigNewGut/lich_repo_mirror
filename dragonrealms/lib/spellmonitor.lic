# quiet
=begin
  Spell Tracking by Seped (Etreu/Menacra in DR)

  Current functionality

  DRSpells.prep_spell  --- Returns the string name of the currently preparing spell or nil
  DRSpells.active_spells --- returns hash of spells keyed to duration e.g. {"Bless"=>5, "Minor Physical Protection"=>12} 0 means fading,
                 removed from the hash is worn off.
  #Update remove prep_time due to rare concurrency crashes, use events library for casting spells instead.
=end

unless XMLData.game =~ /^(?:DRF|DR|DRPlat)$/
  echo "This script is meant for DragonRealms Prime, Platinum, or Fallen.  It will likely cause problems on whatever game you're trying to run it on..."
  exit
end

no_kill_all
no_pause_all
# hide_me
setpriority(0)

class DRSpells
  @@active_spells = {}
  @@prep_spell = nil
  @@refresh_data = {}

  def self.active_spells
    @@active_spells
  end

  def self.refresh_data
    @@refresh_data
  end

  def self.prep_spell
    @@prep_spell
  end

  def self.prep_spell=(val)
    @@prep_spell = val
  end
end

spellAction = proc do |server_string|
  if server_string =~ / exist='spell'\>(.+)\<\/spell\>\<castTime value=\'(\d+)\'/
    echo "1-#{Regexp.last_match(1)}:#{Regexp.last_match(2)}" if UserVars.debug['spellmon']
    DRSpells.prep_spell = Regexp.last_match(1)
  elsif server_string =~ / exist='spell'\>(.+)\</
    echo "2-#{Regexp.last_match(1)}" if UserVars.debug['spellmon']
    DRSpells.prep_spell = Regexp.last_match(1)
  elsif server_string =~ /\<spell\>None\<\/spell\>/
    echo '3-CLEAR' if UserVars.debug['spellmon']
    DRSpells.prep_spell = nil
  elsif server_string =~ /\<clearStream id=\"percWindow\"\/\>/
    DRSpells.refresh_data.each { |k, _| DRSpells.refresh_data[k] = false }
    Thread.new do
      sleep 0.5
      DRSpells.refresh_data.each do |key, state|
        unless state
          DRSpells.active_spells.delete(key)
          DRSpells.refresh_data.delete(key)
        end
      end
    end
    # <pushStream id="percWindow"/> Khri Focus  (9 roisaen)
  elsif server_string =~ /pushStream id=\"percWindow\"\/\>\s([^\<\>]+)\s\s\((\d+) roisaen\)/
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ /pushStream id=\"percWindow\"\/\>\s([^\<\>]+)\s\s\((\d+) roisan\)/
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ /pushStream id=\"percWindow\"\/\>(.+)\<popStream\/\>\<pushStream id=\"percWindow\"\/\>  \((\d+) roisaen\)/
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ /pushStream id=\"percWindow\"\/\>(.+)\<popStream\/\>\<pushStream id=\"percWindow\"\/\>  \((\d+) roisan\)/
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ /pushStream id=\"percWindow\"\/\>(.+)\<popStream\/\>\<pushStream id=\"percWindow\"\/\>  \(Indefinite\)/
    DRSpells.active_spells[Regexp.last_match(1)] = 1000 # is there a better solution?
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ /pushStream id=\"percWindow\"\/\>(.+)\<popStream\/\>\<pushStream id=\"percWindow\"\/\>  \(Fading\)/
    DRSpells.active_spells[Regexp.last_match(1)] = 0
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  end

  server_string
end

DownstreamHook.remove('spellAction')
DownstreamHook.add('spellAction', spellAction)

before_dying do
  DownstreamHook.remove('spellAction')
end

while line = script.gets
  begin
  rescue Exception
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue ThreadError
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  end
end
