=begin
game: dr
tags: empath
  The Crutch
    Creates a window for clickable healing.
		-may be buggy.
		-right click wounds for more options.
		-self healing doesnt do anything.
    

	gtk code borrowed from narost and spellbargtk -- thanks!
	
=end
#todo: 
#     -Change image Layout
#	  -Maybe change to gtk drawings
#	  -popout estimate of what your wounds will look like
#	  -list window for patients rather than dropdown maybe

unless HAVE_GTK
	respond
	respond 'error: ruby-gtk bindings are not installed or failed to load'
	respond
	exit
end

unless defined?(Gtk.queue)
	respond
	respond 'Your version of Lich is too old for this script.'
	respond
	exit
end
if $SAFE > 0
  echo "error: This script needs to be trusted to work. (;trust #{script.name.downcase})"
  exit
end

respond 
echo ""
respond


#Creates the mannequin image files unless they already exit
unless File.exists?("#{$lich_dir}scripts/injpan.png") 
	File.open("#{$lich_dir}scripts/injpan.png", 'wb') {|f| f.puts('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'.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj1.png") 
File.open("#{$lich_dir}scripts/inj1.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAI5JREFUOMvFktEJhEAMRJ9WYAdawpZkh3KVuB24dnAd5H5GySpejkNwQn7CzAuEwNNqThOjAwYgAb2mK5CBQsP7Gmd0GCPGhLFgey2ajVrwNTy74LHma4iRtCWqCSNtsdYhkjpS5fOAXseLNLjjVoC/5AErUH7IFHlPgKyOVPnaA/kVQLI85bZHuvmVn9AH2Rtgx/g/MSYAAAAASUVORK5CYII='.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj3.png") 
File.open("#{$lich_dir}scripts/inj3.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAJZJREFUOMvFksENhCAQRR9WYAdSAp3sdrI3i/BmJ9oJJWAH24F7+SaDoiRmE1/ChZn/IJOBp3H7i2GlBTwQgE7XCxCB1Du+pwKF38BLAq9SkmAGJitxhfBH4RIRGK2kMUVvXj4jqGf7WSYIlXCxzwo6a77Am+FmgltYwaJp10jqPQiiTo2sr9mZ54pk24X0/0W6u8rP8wPHUy4UUR3TUQAAAABJRU5ErkJggg=='.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj5.png") 
File.open("#{$lich_dir}scripts/inj5.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAJdJREFUOMvFktENgzAMRB+IAdiAjJBNugIbVp2EbEDYoANYMj/+MCmQCiFx0v1Ydy9WZHhaTTkQpQcCEIHBxguQgNw1fA9povSijKK8RZlFUfNss9EeOC1Prlh6KiGtYwTgZasfKVom7AFipbyb84DBk08U3OduAJfkAQuQ/+hky/4AkrmmTa4tyJ8KJFkm33ZI957yI1oBTYxt3QpUv6EAAAAASUVORK5CYII='.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj7.png") 
File.open("#{$lich_dir}scripts/inj7.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9sIBg4eBQ+DtAsAAAC9SURBVDjLzdKxEQFBGMXx3wlEJGQiNRBRgEwBChBKFSEVKkABMj1cAyKRjIRIQvIFe7hjRsCb2dmZ/d77z+zu49fKHg9uCx30MY4dcmyQZ3OHUkCEZ5igjUaMLjhijWUKyV6EpxF+pSNWKaSWDLvoVYTFrBdej4ABhh+82zC8T4BGcucqFXy1b78xBeSx3qngSwG7WO9U8KWAPZZRmDJtwrMvK1I92jcqaeI22nitqnIdTbRihzNOOKfh/9Adeecs3MNNYZwAAAAASUVORK5CYII='.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj9.png") 
File.open("#{$lich_dir}scripts/inj9.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAALtJREFUOMvN0jFuwkAUhOHPFHQ0KX0AX4CKQ3AmSm7CAeAO0EDO4CodaUyV5qV5SGuQ7UgUYaTRSm9n/pV2l/9W9TgI5ljgI1fo8I2u4meQFsyDVbAJzkGkzzlb5QGj5X1RfPR+EBI0wW6kfPcuaO69WcFoFBsj6uVKwDI9pV5u9uozloBbekq9XAk44fgHwDGzT4AWn7iOlK+ZaYf+Qh1sgzboiqfrcrYN6qmvXOctr4vbvuCAS8WXt9Iv42Bgy8llfZwAAAAASUVORK5CYII='.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj11.png") 
File.open("#{$lich_dir}scripts/inj11.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAALtJREFUOMvFkr0NwjAQhT9CQ+kN4pImkkdgAyjSwBLMRANVJLIBI0TKApcNSJeS5iJd/rAERZ7k5vzeZ+v0YG1txoPHBQd4IACpjhugAuR8570I0PAJOCrA65UooASeFrKdCV+BA+AM2wF7BbZ5hhQ1HUBiTN68vKSgnv5nA0CIhGd9FpBa8hd5s9wB4CdZQKPbjknUOwFUemIa+JIRuYxA+i7IpAdFTZdnCNDqaGe6IMALuI2L9HeV19cHr1MyHArSOIcAAAAASUVORK5CYII='.unpack('m').join('')) }
end
unless File.exists?("#{$lich_dir}scripts/inj13.png") 
File.open("#{$lich_dir}scripts/inj13.png", 'wb') {|f| f.puts('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAQ1JREFUOMvFkqFuwzAQhm+uWhBohxsEBd0DGISN5AmCA6KQvYfpSDXgl8g7GA4YBRs3thSWNpI75Ghr1lTaQH/ppNNJ/3dn6wd4tl5uB0qpJoTQeu9z59weAIAxNlNKe0LIsa7rj7sApVQzDMO71vpgjAFrLQAAcM4BEUEIcUnT9O0WspillGdEvALAr4WIVynlWSnVRB+JTQihjZvvyRgDWutDCKFdAbz3+Zb5O8R7n68Azrl9fPOWrLUQP/cH4K9aAIyxmXP+0MA5B8bYvAJQSntEfAhARKCU9isAIeQohLhsQWIWCCHHONvFpuu6z6qqTlmWvSZJspumCcZxXM4uigLKslwF6d9Rfr6+AK37h5DD/mIbAAAAAElFTkSuQmCC'.unpack('m').join('')) }
end
no_kill_all
no_pause_all
debug = false
#
# *** Loading Settings
#
Settings.load
window_width =  220
window_height =  325 #350
window_position = Settings['window_position']
window_decorated = Settings['window_decorated']
window_start_hidden = Settings['window_start_hidden']

sleep(0.1) until Char.name and not Char.name.empty?
CharSettings['crutch_settings'] = Hash.new unless CharSettings['crutch_settings'].class == Hash
	touch_output = CharSettings['crutch_settings']['Touch_Output']
		touch_output = true if touch_output.nil?
	minor_thresh = CharSettings['crutch_settings']['Minor_Threshhold']
		minor_thresh = 3 if minor_thresh.class != Fixnum
	always_ontop = CharSettings['crutch_settings']['Always_OnTop']
		always_ontop = true if always_ontop.nil?
	take_speed = CharSettings['crutch_settings']['Take_Speed']
		take_speed = "" if take_speed.nil?
	saved_patients = CharSettings['crutch_settings']['Saved_Patients']
		
#
# End Load Settings
#
class Patient
	@@list ||= Array.new
	@@dispMode = "wounds"
	attr_reader   :name, :wlist, :slist, :dispMode, :vitality, :poison, :disease
	attr_writer   :name, :wlist, :slist, :dispMode, :vitality, :poison, :disease
	attr_accessor :name, :wlist, :slist, :dispMode, :vitality, :poison, :disease
	
	def initialize(name)
		@wlist ||= Hash.new
		@slist ||= Hash.new
		@vitality = 0
		@poison = 0
		@disease = 0
		@name = name
		@@list.push(self) unless @@list.find { |patient| patient.name == @name }
	end
	def resetwounds
		@wlist.clear
		@slist.clear
	end
	def Patient.dispMode
		@@dispMode
	end
	def Patient.list
		@@list
	end
	def Patient.getDispMode
		@@dispMode
	end
	def Patient.setDispMode=(var)
		@@dispMode = var
	end	
	def Patient.include?(query)
		array = @@list.collect{|x| x.name}
		return array.include?(query)
	end
	def Patient.getPatient(query)
		if Patient.include?(query)
			array = @@list.collect{|x| x.name}
			i = array.index(query)
			return @@list[i]
		end
	end
	def Patient.remove(val)
		@@list.delete_if{|x| x.name == val}
		return
	end
end

areas = { 																	#injury areas [0] = Gtk::Image [1],[2] coords to place them
	"head int"		 => ["x",45,47],  "head"	   => ["x",165,47],  "right eye int" => ["x",20,46],  "right eye" => ["x",140,46],  "left eye int"  => ["x",70,46],   "left eye"  => ["x",190,46],  "neck int"     => ["x",45,60],  "neck"	  => ["x",165,60],
	"chest int"		 => ["x",45,78],  "chest"	   => ["x",165,78],  "abdomen int"   => ["x",45,100], "abdomen"	  => ["x",165,100], "right arm int" => ["x",25,95],   "right arm" => ["x",145,95],  "left arm int" => ["x",67,95],  "left arm" => ["x",187,95],
	"right hand int" => ["x",20,115], "right hand" => ["x",140,115], "left hand int" => ["x",75,115], "left hand" => ["x",195,115], "right leg int" => ["x",35,140],  "right leg" => ["x",155,140], "left leg int" => ["x",58,140], "left leg" => ["x",178,140],
	"back int"		 => ["x",15,65],  "back"	   => ["x",135,65],  "skin"		     => ["x",30,180], "skin int"  => ["x",65,180],  "poison"		=> ["x",150,180], "disease"   => ["x",183,180],
}	
woundColors = [] #array that stores pixbufs
done = nil

patient_change = display_change = button_click = wound_click = window_close = nil
window = layout = nil
pList_combo = vitality_button = display_button = save_button = nil
take_amount = ""
woundArea = currentPatient = nil

update_display = proc{
	if pList_combo.active_text != currentPatient.name
		if currentPatient.name == Char.name
			Gtk.queue{ pList_combo.set_active(0) }
		else
			Gtk.queue{ pList_combo.set_active(pList_combo.active+1) }
		end
	else
		display_change = true
	end
}

prep_transfer = proc{|loc,portion|
	 opts = ""
	 if Patient.dispMode == "scars" then opts = "scars" end
	 if take_speed == "fast" or take_speed == "slow" then opts = opts+" "+take_speed; end
	 wound_click = "take #{currentPatient.name} #{loc} #{opts} #{portion}"
}

woundSeverity = ["insignificant","negligible","minor","more than minor","harmful","very harmful","damaging","very damaging","severe","very severe","devastating","very devastating","useless"]
action  = proc { |server_string|
	if server_string =~ /You sense a successful empathic link has been forged between you and (\w+)\./
		if not Patient.include?($1)
			currentPatient = Patient.new($1);	
			name = $1
			Gtk.queue {
				pList_combo.insert_text(pList_combo.active + 1,name) 
				#pList_combo.set_active(pList_combo.active + 1)
			}
		else
			currentPatient = Patient.getPatient("#{$1}") ;
			currentPatient.resetwounds	
		end
		if touch_output then	server_string;	end
	elsif server_string =~ /drawing out the truth of your own injuries./
		currentPatient = Patient.getPatient("#{Char.name}")
		currentPatient.resetwounds	
		# if pList_combo.active != 0 
			# pList_combo.set_active(0)
		# else
			# display_change = true
		# end
		if touch_output then	server_string;	end
	elsif server_string =~ /\.\.\. no injuries to speak of\./
		currentPatient.resetwounds
		if not saved_patients.include?(currentPatient.name) and currentPatient.name != Char.name
			Gtk.queue{ 
				if pList_combo.active <= 0 
					pList_combo.set_active(0)
				else
					pList_combo.set_active(pList_combo.active-1)
				end
				pList_combo.remove_text(pList_combo.active+1)
			}
			Patient.remove(currentPatient.name)
			currentPatient = Patient.getPatient(pList_combo.active_text)
		end
		if touch_output then	server_string;	end
	elsif server_string =~ /Wounds to the (HEAD|LEFT EYE|RIGHT EYE|NECK|CHEST|BACK|ABDOMEN|LEFT ARM|RIGHT ARM|LEFT HAND|RIGHT HAND|LEFT LEG|RIGHT LEG|SKIN):/
		woundArea = $1.downcase
		if touch_output then	server_string;	end
	elsif server_string =~ /(Fresh External|Scars External|Fresh Internal|Scars Internal):.* -- (insignificant|negligible|minor|more than minor|harmful|very harmful|damaging|very damaging|severe|very severe|devastating|very devastating|useless)/
		woundValue = woundSeverity.index($2) + 1
		if $1 == "Fresh External"
			currentPatient.wlist[woundArea] = woundValue
		elsif $1 == "Scars External"
			currentPatient.slist[woundArea] = woundValue
		elsif $1 == "Fresh Internal"
			currentPatient.wlist["#{woundArea} int"] = woundValue
		elsif $1 == "Scars Internal"
			currentPatient.slist["#{woundArea} int"] = woundValue
		end	
		if touch_output then	server_string;	end
	elsif server_string =~ /(?:#{currentPatient.name}|You).*loss of vitality.+\((\d)+%\)\./
		currentPatient.vitality = $1.to_i
		update_display.call()
		if touch_output then	server_string;	end
	elsif server_string =~ /(?:You|#{currentPatient.name}) (?:have|has) normal vitality./
		currentPatient.vitality = 0
		update_display.call()
		if touch_output then	server_string;	end
	else
		server_string
	end
}
DownstreamHook.remove('crutchAction')
DownstreamHook.add('crutchAction', action)

switch_view = proc {
	if Patient.getDispMode == "wounds"
		display_button.set_label("Show Wounds")
		Patient.setDispMode = "scars"
	elsif Patient.getDispMode == "scars"
		display_button.set_label("   Show Scars   ")
		Patient.setDispMode = "wounds"
	end
	display_change = true
}

Gtk.queue{
	window = Gtk::Window.new
	window.title = "The Crutch"
	window.signal_connect('delete_event'){ window_close = true }
	layout = Gtk::Layout.new;	window.add(layout);
#background displays
  	internal_label = Gtk::Label.new("Internal");  		layout.put(internal_label, 33,30);
	external_label = Gtk::Label.new("External");   		layout.put(external_label, 153,30);
	skin_label 	   = Gtk::Label.new("S");					layout.put(skin_label, 33,192);
	nerve_label    = Gtk::Label.new("N");					layout.put(nerve_label, 67,192);
	poison_label   = Gtk::Label.new("P");					layout.put(poison_label, 155,192);
	disease_label  = Gtk::Label.new("D");				layout.put(disease_label, 187,192);
#Create Pixbufs	
  	panelbuf = Gdk::Pixbuf.new("#{$lich_dir}scripts/injpan.png")
	inj13buf = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj13.png"); woundColors.push(inj13buf);	
	inj1buf  = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj1.png");	 woundColors.push(inj1buf);  woundColors.push(inj1buf);
	inj3buf  = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj3.png");	 woundColors.push(inj3buf);  woundColors.push(inj3buf);
	inj5buf  = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj5.png");	 woundColors.push(inj5buf);  woundColors.push(inj5buf);
	inj7buf  = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj7.png");	 woundColors.push(inj7buf);  woundColors.push(inj7buf);
	inj9buf  = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj9.png");	 woundColors.push(inj9buf);  woundColors.push(inj9buf);
	inj11buf = Gdk::Pixbuf.new("#{$lich_dir}scripts/inj11.png"); woundColors.push(inj11buf); woundColors.push(inj11buf); woundColors.push(inj13buf);
#Create Images
	lpanel_image = Gtk::Image.new;	lpanel_image.set_pixbuf(panelbuf);	layout.put(lpanel_image, 15,47)
	rpanel_image = Gtk::Image.new;	rpanel_image.set_pixbuf(panelbuf);	layout.put(rpanel_image, 135, 47)	
	areas.each{|key, val|
		val[0] = Gtk::Image.new;  layout.put(val[0], val[1], val[2]);	val[0].set_pixbuf(inj1buf);
	}
#
# *** Create Widgets ***
#
	pList_combo = Gtk::ComboBox.new(true);				layout.put(pList_combo,0,0);	pList_combo.set_size_request(95,22);
		Patient.new(Char.name); 	pList_combo.append_text(Char.name); 
		saved_patients.each{|x|	Patient.new(x); }
		Patient.list.each { |x|	
			pList_combo.append_text(x.name) unless x.name == Char.name; 
		}
		
	vitality_button = Gtk::Button.new("Vitality Loss: 0%");		layout.put(vitality_button,60,210);
	
	row1_buttons = Gtk::HBox.new; layout.put(row1_buttons,18,235);
		display_button = Gtk::Button.new("   Show Scars   ");			row1_buttons.add(display_button);
		touch_button = Gtk::Button.new("Touch");					row1_buttons.add(touch_button);
		break_button = Gtk::Button.new("Break All");					row1_buttons.add(break_button);
		
	row2_buttons = Gtk::HBox.new; layout.put(row2_buttons,5,263);
		takeall_button = Gtk::Button.new("Take All");				row2_buttons.add(takeall_button);
		takenonvital_button = Gtk::Button.new("Take Non-Vital");	row2_buttons.add(takenonvital_button);
		takeminor_button = Gtk::Button.new("Take Minor");			row2_buttons.add(takeminor_button);
		
	# row3_buttons = Gtk::HBox.new; layout.put(row3_buttons,20,290);
		# cust1_button = Gtk::Button.new("Custom 1");		row3_buttons.add(cust1_button);
		# cust2_button = Gtk::Button.new("Custom 2");		row3_buttons.add(cust2_button);
		# cust3_button = Gtk::Button.new("Custom 3");		row3_buttons.add(cust3_button);
		
	row4_buttons = Gtk::HBox.new; layout.put(row4_buttons,20,290);
		remove_button = Gtk::Button.new("Remove Patient");  row4_buttons.add(remove_button);
		save_button = Gtk::CheckButton.new("Save Patient");  row4_buttons.add(save_button);
#Menus and Menu Items	
	sep_opt = Gtk::SeparatorMenuItem.new	
	main_options = Gtk::Menu.new
		alwaysontop_menu = Gtk::CheckMenuItem.new('Always on top')
			alwaysontop_menu.active = always_ontop
			alwaysontop_menu.signal_connect('toggled') { |owner| always_ontop = window.keep_above = owner.active? }
		
		touchoutput_menu = Gtk::CheckMenuItem.new('Display touch messaging')
			touchoutput_menu.active = touch_output
			touchoutput_menu.signal_connect('toggled') { |owner| touch_output = owner.active? }		
		
		speed_menu = Gtk::MenuItem.new("Tansfer Speed")
			spdFast_menu = Gtk::RadioMenuItem.new('Fast',false)
				spdFast_menu.set_active(false)
				spdFast_menu.signal_connect('toggled') { |owner| if owner.active? then take_speed = "fast"; end}			
			
			spdNrml_menu = Gtk::RadioMenuItem.new(spdFast_menu,'Normal',false)
				spdNrml_menu.set_active(true)
				spdNrml_menu.signal_connect('toggled') { |owner| if owner.active? then take_speed = ""; end}
			
			spdSlow_menu = Gtk::RadioMenuItem.new(spdFast_menu,'Slow',false)
				spdSlow_menu.set_active(false)
				spdSlow_menu.signal_connect('toggled') { |owner| if owner.active? then take_speed = "slow"; end}
		speed_list = Gtk::Menu.new
		speed_menu.set_submenu(speed_list)
			speed_list.append(spdFast_menu)
			speed_list.append(spdNrml_menu)
			speed_list.append(spdSlow_menu)
		minor_menu = Gtk::MenuItem.new("Change Minor Threshhold")
			minor_menu.signal_connect('activate'){
				thresh_wind = Gtk::Window.new('Minor Wound Threshhold')
				thresh_list = Gtk::ComboBox.new(true)
				thresh_wind.add(thresh_list)
				woundSeverity.each{|x| thresh_list.append_text(x)}
				thresh_list.set_active(minor_thresh-1)
				thresh_list.signal_connect('changed'){
					minor_thresh = thresh_list.active+1
					thresh_wind.destroy
				}
				thresh_wind.show_all
			}
	main_options.append(speed_menu)
	main_options.append(sep_opt)
	main_options.append(alwaysontop_menu)
	main_options.append(touchoutput_menu)
	main_options.append(minor_menu)
	main_options.show_all

	wound_options = Gtk::Menu.new
		wlbl_opt = Gtk::MenuItem.new("Injury",true)
		wlbl_opt.sensitive = (false)	
		wound_options.append(wlbl_opt)
		sep1_opt = Gtk::SeparatorMenuItem.new
		sep2_opt = Gtk::SeparatorMenuItem.new
		sep3_opt = Gtk::SeparatorMenuItem.new
	wound_options.append(sep1_opt)
		tpart_opt = Gtk::MenuItem.new('Take Part')
		wound_options.append(tpart_opt)
		thalf_opt = Gtk::MenuItem.new('Take Half')
		wound_options.append(thalf_opt)
		tmost_opt = Gtk::MenuItem.new('Take Most')
		wound_options.append(tmost_opt)
	wound_options.append(sep2_opt)
		tpois_opt = Gtk::MenuItem.new('Take Poison')
		wound_options.append(tpois_opt)
	wound_options.append(sep3_opt)
		tend_opt = Gtk::MenuItem.new('Tend Wound')
		wound_options.append(tend_opt)
	wound_options.show_all
		
#		
# *** Events ***
#	
	layout.add_events(Gdk::Event::BUTTON_PRESS_MASK)
	layout.signal_connect('button_press_event'){|owner, ev| 
		pointer_x, pointer_y = layout.pointer #where did the window get clicked
		click_x = (pointer_x.to_i)
		click_y = (pointer_y.to_i)
		if ev.button == 1 #Left
			areas.each{|key,val|	 #loop through coordinates and find out which control was clicked
				if click_x.between?(val[1], val[1]+16) and click_y.between?(val[2], val[2]+16) and val[0].pixbuf
					# if Patient.dispMode == "scars" then opts = "scars" end
					# if take_speed == "fast" or take_speed == "slow" then opts = opts+" "+take_speed; end
					# wound_click = "take #{currentPatient.name} #{key} #{opts}"
					prep_transfer.call(key,"")
					break
				end
			}			
		elsif ev.button == 3 #Right		#todo: finish menus
			wound_hit = false
			areas.each{|key,val|	 #loop through coordinates and find out which control was clicked
				if click_x.between?(val[1], val[1]+16) and click_y.between?(val[2], val[2]+16) and val[0].pixbuf
					wound_hit = true
					if wlbl_opt.children[0].methods.include?("set_text") then wlbl_opt.children[0].set_text(key); end #feels sloppy and seems like it's prone to breakage
					if val[1] > 100 
						tend_opt.sensitive = (true)	
					else 				
						tend_opt.sensitive = (false)
					end
					tend_opt.signal_connect('activate'){ wound_click = "tend #{currentPatient.name} #{key}"}
					tpart_opt.signal_connect('activate'){ prep_transfer.call(key,"part")  }
					thalf_opt.signal_connect('activate'){ prep_transfer.call(key,"half")  }
					tmost_opt.signal_connect('activate'){ prep_transfer.call(key,"most")  }
					tpois_opt.signal_connect('activate'){ wound_click = "take #{currentPatient.name} #{key} poison #{take_speed}" }
					wound_options.popup(nil, nil, ev.button, ev.time)
					break
				end
			}		
			if wound_hit == false
				main_options.popup(nil, nil, ev.button, ev.time)
			end
		elsif ev.button == 2 #Middle Click
			switch_view.call()
		elsif ev.button == 4 or ev.button == 5 # Mouse 4 and 5
			if Patient.list.length - 1 == ( pList_combo.active ) ## attempting to add one to the index when index+1 doesnt exit is bad
				pList_combo.set_active(0)
			else
				pList_combo.set_active(pList_combo.active + 1) 	
			end
		end
	}

	pList_combo.signal_connect('changed'){ 
			currentPatient = Patient.getPatient("#{pList_combo.active_text}")
			display_change = true
	}
	
	vitality_button.signal_connect('clicked'){ button_click = "vitality" }
	display_button.signal_connect('clicked'){ switch_view.call() }
	touch_button.signal_connect('clicked'){ button_click = "touch" }
	break_button.signal_connect('clicked'){ button_click = "break" }
	takeall_button.signal_connect('clicked'){ button_click = "all" }
	takeminor_button.signal_connect('clicked'){ button_click = "minor" }
	takenonvital_button.signal_connect('clicked'){ button_click = "non-vital" }
	
	remove_button.signal_connect('clicked'){ 
		if currentPatient.name != Char.name
			active = pList_combo.active
			pList_combo.remove_text(active)
			Patient.remove(currentPatient.name)
			pList_combo.set_active(active-1)
		end
	}
	save_button.signal_connect('clicked'){ |owner, ev|
		if save_button.active? == false and ev.button == 1||3
			saved_patients.delete(currentPatient.name)
		elsif save_button.active? == true and currentPatient.name != Char.name and ev.button == 1||3
			saved_patients.push(currentPatient.name)
		end
	}	
	

	
	window.show_all
	window.decorated = window_decorated unless window_decorated.nil?
	window.resize(window_width.to_i, window_height.to_i)
	window_position[0] = [[0, window_position[0].to_i].max, (Gdk.screen_width-window_width.to_i)].min
	window_position[1] = [[0, window_position[1].to_i].max, (Gdk.screen_height-window_height.to_i)].min
	window.move(window_position[0].to_i, window_position[1].to_i)
	window.keep_above = always_ontop
	
	#prevents from showing up in taskbar
	window.set_skip_taskbar_hint(true)
 done = true	
}

wait_until { done }
Gtk.queue{ 	pList_combo.set_active(0); currentPatient = Patient.getPatient(Char.name); }


before_dying {
	done = false
	DownstreamHook.remove('crutchAction')
	Gtk.queue {
		window.map
		window_width = window.allocation.width
		window_height = window.allocation.height
		window_decorated = window.decorated?
		window_position = window.position
		window.destroy
		done = true
	}
	wait_until { done }
	Settings['window_width'] = window_width
	Settings['window_height'] = window_height
	Settings['window_decorated'] = window_decorated
	Settings['window_position'] = window_position #if (window_position.class == Array) and (window_position[0].to_i > -5) and (window_position[1].to_i > -5)
	Settings['window_start_hidden'] = window_start_hidden
	Settings.save
	CharSettings['crutch_settings']['Saved_Patients'] = saved_patients
	CharSettings['crutch_settings']['Minor_Threshhold'] = minor_thresh
	CharSettings['crutch_settings']['Take_Speed'] = take_speed
	CharSettings['crutch_settings']['Touch_Output'] = touch_output
	CharSettings['crutch_settings']['Always_OnTop'] = always_ontop
	CharSettings.save
}

loop{
	wait_until{ display_change or button_click or wound_click or window_close }
 	if window_close then echo "close window clicked" if debug; break end
#Display Change ****************	
	if display_change == true
		if saved_patients.include?(currentPatient.name) then save_button.set_active(true); else save_button.set_active(false); end
		if Patient.dispMode == "wounds"
			areas.each { |key, value| 												 #loop through every area
				if currentPatient.wlist.include?(key) 					#if the list of wounds include current area? 
					Gtk.queue{ areas[key][0].set_pixbuf(woundColors[currentPatient.wlist[key]]) }#			set the pixbuf to wound list's value		
				else  																 #if it doesnt exit dont display it
					Gtk.queue{ areas[key][0].clear }
				end
			}		
		elsif Patient.dispMode == "scars"
			areas.each { |key, value|											#loop through every area
				if currentPatient.slist.include?(key) 							#does the list of scars include current area?
					Gtk.queue{  value[0].set_pixbuf(woundColors[currentPatient.slist[key]]) }#			set the pixbuf to scar list's value			
				else															#if it doesnt exist don't display it
					Gtk.queue{ value[0].clear }
				end
			}
		end		
		vitality_button.set_label("Vitality Loss: #{currentPatient.vitality.to_s}%")
		display_change = false
	end
#Wound Click ******************
	if wound_click
		if currentPatient.name != Char.name
			fput "#{wound_click}"
		else
			echo "once a good method is decided we should cast heal spells on ourself"
		end
		wound_click = nil
	end
#Button Click *****************	
	if button_click
		if button_click == "vitality"		#Vitality *************
			fput "take #{currentPatient.name} vitality #{take_amount} #{take_speed}"
		elsif button_click == "touch"		#Touch ****************
			if currentPatient.name == Char.name
				fput "pow heal self"
			else
				fput "touch #{currentPatient.name}"
			end
		elsif button_click == "break"		#Break ***************
			if currentPatient.name != Char.name
				fput "break all"
			end
		elsif button_click == "all"			#All *****************
			if Patient.name != "#{Char.name}"
				if Patient.dispMode == "wounds"
					 fput "take #{currentPatient.name} EVERYTHING"
					# currentPatient.wlist.each{|key,val|
						# fput "take #{currentPatient.name} #{key} #{take_speed}"
						# pause 1.5
					# }
				elsif Patient.dispMode == "scars"
					 fput "take #{currentPatient.name} EVERYTHING"
					# currentPatient.slist.each{|key,val|
						# fput "take #{currentPatient.name} #{key} scar #{take_speed}"
						# pause 1.5
					# }
				end
			end			
		elsif button_click == "non-vital"	#Non-Vital ***********
			if currentPatient.name != "#{Char.name}"
				if Patient.dispMode == "wounds"
					currentPatient.wlist.each{|key,val|
						if key =~ /chest|abdomen|neck|head|back/
						else
							fput "take #{currentPatient.name} #{key} #{take_speed}"
							pause 1.5
						end
					}
				elsif Patient.dispMode == "scars"
					currentPatient.slist.each{|key,val|
						if key =~ /chest|abdomen|neck|head|back/
						else
							fput "take #{currentPatient.name} #{key} scar #{take_speed}"
							pause 1.5
						end
					}
				end
			end			
		elsif button_click == "minor"		#Minor	**************
			if currentPatient.name != "#{Char.name}"
				if Patient.dispMode == "wounds"
						currentPatient.wlist.each{|key,val|
						fput "take #{currentPatient.name} #{key} #{take_speed}" unless val > minor_thresh
						pause 1.5
					}
				elsif Patient.dispMode == "scars"
					currentPatient.slist.each{|key,val|
						fput "take #{currentPatient.name} #{key} #{take_speed}" unless val > minor_thresh
						pause 1.5
					}
				end
			end			
		else
			echo "button click was set wrong setting it to nil"
		end
	button_click = nil
	end
}














