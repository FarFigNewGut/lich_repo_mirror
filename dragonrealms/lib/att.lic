=begin
Analyzes a random critter in the room and then attacks it with the required moves

Takes a breather when stamina is below 80%

When the critter is dead, the script will run 'skin.lic' which is also in the repository.

Only recognizes a very small fraction of death messaging right now...

If you have suggestions for making this script better, let me know: jonas@andersson.io

author: Crannach
game: dr
tags: combat, tactics, ruby, lich API
version: 2015.05.10
=end

#Todo: Advance on non melee critters
#TODO: FIX being prone
# P>
#     [att]>analyze
# You should stand up first.
class Character
  attr_accessor :guild, :harvest_if_unskinnable
  def initialize
    fput "info" if DRStats.guild =~ /unknown/
    @guild = DRStats.guild
    @shield = nil
    @weapon = nil
    @harvest_if_unskinnable = true
  end

  def to_s
    printf("Guild: %s\n", @guild)
  end

  def do_analyze
    if @guild == "Barbarian"
      analyze("fire")
    else
      analyze
    end
  end
end

class Critter
  attr_accessor :name, :is_alive

  def initialize
    @name = nil
    @is_alive = true
  end

end

if variable[1] == "forever"
  $forever = true
else
  $forever = false
end

death = [
    /The .* falls to the ground and lies still\./,
    /A .* howls and falls on its side, dead\./,
    /The .* screams one last time and lies still\./,
    /A .* collapses to the ground, shuddering and moaning until it ceases all movement/,
    /A .* whines loudly before it dies/,
    /A .* sinks to the ground in a rustle of cloth and covers its face with the hood of its cloak/,
    /A .* shudders and then suddenly stops all movement/,
    /The .* lets loose a scream like a howling blizzard and lies still/,
    /The .* lets loose an ear-shattering scream and lies still/,
    /A .* collapses with a heavy thud/,
    /The .* lets loose a scream like a howling blizzard and falls still/,
    /growls one last time and collapses/,
    /whines briefly before closing its eyes forever/,
    /screams and collapses, her dance stilled at last/,
    /Gasping out in terror, a .* crumples to the ground/,
    /The .* is cleanly sliced in two/,
    /A .* coils and uncoils rapidly before expiring/,
    /A .* thrashes about wildly for a few seconds, then lies still/,
    /A .* utters one last howl of outrage before tumbling to the ground, dead/,
    /A .* fiery eyes close, its hatred stilled/,
    /A .* skin turns coal black/,
    /stares ahead in disbelief before falling to the ground in a crumpled heap/
  ]

$not_melee = /You aren't close enough to attack/
$roundtime = [
    /\[Roundtime [0-9]* sec\.\]/,
    /Roundtime: \d* sec\./
  ]
$messages = []

$roundtime.each {|item| $messages.push(item) }
death.each {|item| $messages.push(item)}

$messages.push($not_melee)

$re_death = Regexp.union(death)
$re_roundtime = Regexp.union($roundtime)
$use_skinning_script = true

def rest
  echo("Resting until stamina is above threshold")
  waitrt?
  fput('bob')
  sleep(1) until XMLData.stamina > 80
end

def load
  dothis("load", /You load the .* with a .*|You reach into your .* to load the .* with a .*/)
end

def analyze(extra=nil)
  messages = {
      'four moves' => /by landing [an]+ (?<attack1>[a-z]*), [an]+ (?<attack2>[a-z]*), [an]+ (?<attack3>[a-z]*) and [an]+ (?<attack4>[a-z]*)\./,
      'three moves' => /by landing [an]+ (?<attack1>[a-z]*), [an]+ (?<attack2>[a-z]*) and [an]+ (?<attack3>[a-z]*)\./,
      'two moves' => /by landing [an]+ (?<attack1>[a-z]*) and [an]+ (?<attack2>[a-z]*)\./,
      'one move' => /by landing [an]+ (?<attack1>[a-z]*)\./,
      'get closer' => /You must be closer to use tactical abilities on your opponent\./,
      'analyze this' => /Analyze what\?/,
      'retry' => /You fail to find any holes in the [a-zA-Z' -]* defenses\./,
      'prone' => /You had better stand up first\./
  }
  waitrt?
  status = dothis("analyze #{extra}", Regexp.union(messages['four moves'], messages['three moves'], messages['two moves'], messages['one move'], messages['retry'], messages['get closer'], messages['analyze this']))
  if messages['four moves'] =~ status
    return attacks = [$1, $2, $3, $4]
  elsif messages['three moves'] =~ status
    return attacks = [$1, $2, $3]
  elsif messages['two moves'] =~ status
    return attacks = [$1, $2]
  elsif messages['one move'] =~ status
    return attacks = [$1]
  elsif messages['retry'] =~ status
    return []
  elsif messages['get closer'] =~ status
    return false
  elsif messages['analyze this'] =~ status
    face_status = dothis("face next", /There is nothing else to face!|You are already facing .*|You turn to face .*/)
      if face_status =~ /There is nothing else/
        exit
      end
    return []
  end
end


def attack(critter, move='att')
  if XMLData.stamina > 80
    waitrt?
    status = dothis(move, Regexp.union($messages))
    if status =~ $re_roundtime
      return
    elsif status =~ $re_death
      critter.is_alive = false
    elsif status =~ $not_melee
      waitforre(/melee range/)
    end
  else
    rest
    return false
  end
end

def advance
  dothis("advance", /melee range/)
end



def main
  my_character = Character.new
  critter = Critter.new
  loop do
    while critter.is_alive
      if my_character.guild == "Barbarian"
        moves = analyze("flame")
      else moves = analyze
      end
      advance if not moves
      attack(critter, moves.shift) while not moves.empty? and critter.is_alive
    end
    start_script "skin" if $use_skinning_script

    break if not $forever
  end
end

main
