=begin
A trading script for the Crossing area. Does one contract at a time (for now). If you already have a caravan the script needs to be started with it in the room. If you have a caravan and no contract, then it needs to be started with the caravan waiting at the nearest outpost. If you have a caravan and a contract, it will resume trading as long as the caravan is in the same room as you.

This script assumes you have a worn feedbag

## YAML Settings ###
trade_contract_container: pack
###

Uses dependency, so please install that
;repo download dependency
;dependency install

Huge work in progress, let me know about problems

author: Dijkstra
game: dr
tags: trading
version: 2017.12
=end

#TODO: Track caravan last seen room to help recover it
#TODO: Clean up debug chatter and set as an arg flag

custom_require.call(%w(common common-items common-money common-travel equipmanager))
$debug = UserVars.trade_debug

class Trade
  include DRC
  include DRCT
  include DRCI
  include DRCM

  def initialize
    @town_data = get_data('town')
    @caravan_noun = nil
    @caravan_adjective = nil
    @equipment_manager = EquipmentManager.new
    settings = get_settings
    contract_container = settings.trade_contract_container
    @hometown = settings.hometown
    bput("open my #{contract_container}", 'You open', 'That is already')
    @equipment_manager.empty_hands
    recall_caravan
  end

  def run
    unless exists?('contract')
      nearest_minister = find_closest_id('trade_minister')
      get_new_contract(nearest_minister)
    end
    contract = parse_contract
    unless contract.presented
      load_caravan(contract.origin_clerk) 
      recall_caravan
      walk_to(contract.origin_outpost)
    end
    feed_caravan
    take_caravan_to(contract.destination_outpost)
    fput("get my contract")
    deliver_contract(contract.destination_clerk)
    pay_dues(contract.destination_clerk)
  end

  def find_closest_id(entity)
    rooms = @town_data.to_h.values.select { |data| data[entity] }
                             .map{ |data| data[entity]['id'] }
    echo "rooms: #{rooms}" if $debug
    return sort_destinations(rooms).first
  end

  def parse_contract(name=nil)
    destination_re = /The guild office at (?:The )?(?<destination>.*) requires .*/
    payment_re = /You estimate these goods are currently worth (.*) (Kronars|Dokoras|Lirums) on delivery\./
    origin_re = /Trading Contract Issued by:  (?:The )?(?<origin>.*)/
    contract = OpenStruct.new
    contract.presented = true
    contract.expired = false
    fput("read my #{name} contract")
    while line = get
      echo line if $debug
      if line =~ destination_re
        contract.destination_town = line.match(destination_re).captures.first
        contract.destination_outpost = @town_data[contract.destination_town]['trader_outpost']['id']
        contract.destination_clerk = @town_data[contract.destination_town]['shipment_clerk']['id']
        contract.destination_minister = @town_data[contract.destination_town]['trade_minister']['id']
      elsif line =~ payment_re
        # This is the last line of the contract so break when finished
        contract.payment, contract.currency = line.match(payment_re).captures
        break
      elsif line =~ origin_re
        contract.origin_town = line.match(origin_re).captures.first
        contract.origin_clerk = @town_data[contract.origin_town]['shipment_clerk']['id']
        contract.origin_minister = @town_data[contract.origin_town]['trade_minister']['id']
        contract.origin_outpost = @town_data[contract.origin_town]['trader_outpost']['id']
      elsif line =~ /This contract has yet to be/
        contract.presented = false
      elsif line =~ /The contract is now useless since it has expired\./
        contract.expired = true
        break
      end
    end
    if $debug
      echo "Contract origin: #{contract.origin_town}"
      echo "Contract origin clerk room: #{contract.origin_clerk}"
      echo "Contract origin minister room: #{contract.origin_minister}"
      echo "Contract destination town: #{contract.destination_town}"
      echo "Contracted presented to clerk? #{contract.presented}"
    end
    return contract
  end

  def recall_caravan
    recall_messages = [
        /You seem to recall that you left your(?<description>.*) (?<name>.*) right behind you/,
        /You recall that your (?<description>.*) (?<name>.*) should be located in/,
        /You don't recall where you left your caravan\./,
        /You don't recall having a caravan\./
    ]
    response = bput("recall caravan", recall_messages)
    echo("Response: #{response}") if $debug
    case response
    when /You don't recall where you left your caravan/, /You don't recall having a caravan/
      echo("No caravan found") if $debug
    when /You seem to recall that you left your (?<description>.*) (?<name>.*) right behind you/
      /You to recall that you left your (?<description>.*) (?<name>.*) right behind you/ =~ response
      @caravan_noun = name
      echo "@caravan_noun: #{@caravan_noun}" if $debug
      @caravan_adjective = description
      echo "@caravan_description: #{@caravan_adjective}" if $debug
    when /You recall that your (?<description>.*) (?<name>.*) should be located in/
      /You recall that your (?<description>.*) (?<name>.*) should be located in/ =~ response
      @caravan_noun = name
      echo "@caravan_noun: #{@caravan_noun}" if $debug
      @caravan_adjective = description
      echo "@caravan_description: #{@caravan_adjective}" if $debug
    end
  end

  def compute_path(destination)
    previous, _shortest_paths = Map.dijkstra(Room.current.id, destination)
    path = [destination]
    path.push(previous[path[-1]]) until previous[path[-1]].nil?
    path.reverse!
    return path
  end

  def step(dir)
    echo "step dir: #{dir}" if $debug
    case dir
    when String
      move(dir)
    when Proc, StringProc
      dir.call
    end
  end

  def get_next_dir(path)
    return Room.current.wayto[path[path.index(Room.current.id)+1].to_s]
  end

  def take_caravan_to(outpost_id)
    command_caravan('follow')
    path = compute_path(outpost_id)
    until Room.current.id == outpost_id
      dir = get_next_dir(path)
      step(dir) if caravan_present?
      waitfor 'following you'
      echo "Caravan arrival detected" if $debug
    end
    command_caravan('wait')
  end

  def command_caravan(command, destination = nil)
    case command
    when 'follow'
      follow_messages = [
        "You grab hold of your .* harness and make it follow.",
        "You pass on the order to follow to your driver, who makes sure your .* does your bidding."
      ]
      bput("tell #{@caravan_noun} to follow", follow_messages)
    when 'wait'
      wait_messages = [
        "You pass on the order to wait to your driver, who makes sure your .* does your bidding"
      ]
      bput("tell #{@caravan_noun} to wait", wait_messages)
    when 'lead'
      # TODO: Switch to bput
      # TODO: Implement leading logic
      fput("tell caravan to lead to #{destination}")
    end
  end

  def deliver_contract(clerk_id)
    walk_to(clerk_id)
    clerk_messages = [
      '^The \w+ clerk finds everything in order with your merchandise',
    ]
    bput("give my contract to clerk", clerk_messages)
  end

  def pay_dues(clerk_id)
    echo "Paying dues at clerk_room: #{clerk_id}" if $debug
    clerk_messages = [
        /^You don't have any coins on you to pay dues\./,
        /^You count out some coins, and the clerk notes that your dues are settled\./,
        /^You count out some coins, and the clerk notes that your dues are now (.*)\./,
        /^The clerk says, "You do not owe dues, .*!"/
    ]
    walk_to(clerk_id)
    bput("pay clerk", clerk_messages)
  end

  def feed_caravan
    feed_messages = [
      "The driver takes the feedbag from you",
      "You offer the .* feedbag to the caravan driver",
      "The .* sniffs disinterestedly at your .* feedbag",
      'The .* sticks its nose into your feedbag and munches away happily'
    ]
    @equipment_manager.empty_hands
    bput('remove feedbag', 'You remove')
    bput("give #{@caravan_noun}", feed_messages)
    bput('wear feedbag', 'You attach')
  end

  def load_caravan(clerk_id)
    echo "Presenting contract to clerk in room: #{clerk_id}" if $debug
    walk_to(clerk_id)
    give_clerk(clerk_id)
  end

  def get_new_contract(minister_id)
    echo "Getting a new contract from room #{minister_id}" if $debug
    walk_to(minister_id)
    minister_messages = [
      "The minister plucks a contract from the hands",
      "The minister reminds you that you still owe .*" 
    ]
    response = bput("ask minister for contract", minister_messages)
    case response  
    when /The minister reminds you/
      /The minister reminds you that you still owe (?<dues_amt>.*) (?<dues_currency>Kronars|Lirums|Dokoras) in dues to (?:The )?(?<outpost>.*) and asks that you pay the clerk before s?he issues you a new contract\./ =~ response
      echo "Need to pay #{dues_amt} #{dues_currency} to #{outpost}" if $debug
      ensure_copper_on_hand(dues_amt.to_i, @hometown)
      pay_dues(@town_data[outpost]['shipment_clerk']['id'])
      get_new_contract(minister_id)
    end
  end

  def caravan_present?
    return unless @caravan_adjective
    return unless @caravan_noun
    return DRRoom.room_objs.find{ |obj| obj =~ /#{@caravan_adjective} #{@caravan_noun}/}
  end

  def give_clerk(clerk_id)
    walk_to(clerk_id)
    fput("get my contract")
    Flags.add('caravan-upgrade', /Unfortunately, this load would kill/)
    bput("give my contract to clerk", /The .* clerk accepts your contract and peruses it\./)
    recall_caravan if Flags['caravan-upgrade']
    Flags.delete('caravan-upgrade')
  end
end

trade = Trade.new
loop { trade.run }
