=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#performance-monitor
=end

unless HAVE_GTK
  respond
  respond 'error: ruby-gtk bindings are not installed or failed to load'
  respond
  exit
end

custom_require.call(%w(textsubs))

class PerformanceFilter
  if $frontend == 'stormfront'
    $atmos_window_begin = "<pushStream id=\"atmospherics\" ifClosedStyle=\"watching\"/>"
    $atmos_window_end   = "<popStream/>\r\n"
    $assess_window_begin = "<pushStream id=\"assess\" ifClosedStyle=\"watching\"/>"
    $assess_window_end   = "<popStream/>\r\n"
  else
    $atmos_window_begin = "\034GSe\r\n"
    $atmos_window_end   = "\034GSf\r\n"
  end
  def initialize
    @settings = get_settings
    @weapon_hits = {}
    @weapon_rts = {}
    @settings.performance_monitor_weapons.each do |x|
      @weapon_hits[x] = []
      @weapon_rts[x] = []
    end
    @weapon_stats = []
    @last_weapon = nil
    @new_hit = false
    @increment = 0
    @damage_subs = [
      ['a light hit', 'a light hit (1/23)'],
      ['a good hit', 'a good hit (2/23)'],
      ['a good strike', 'a good strike (3/23)'],
      ['a solid hit', 'a solid hit (4/23)'],
      ['a hard hit', 'a hard hit (5/23)'],
      ['a strong hit', 'a strong hit (6/23)'],
      ['a heavy strike', 'a heavy strike (7/23)'],
      ['a very heavy hit', 'a very heavy hit (8/23)'],
      ['an extremely heavy hit', 'an extremely heavy hit (9/23)'],
      ['a powerful strike', 'a powerful strike (10/23)'],
      ['a massive strike', 'a massive strike (11/23)'],
      ['an awesome strike', 'an awesome strike (12/23)'],
      ['a vicious strike', 'a vicious strike (13/23)'],
      ['an earth-shaking strike', 'an earth-shaking strike (14/23)'],
      ['a demolishing hit', 'a demolishing hit (15/23)'],
      ['a spine-rattling strike', 'a spine-rattling strike (16/23)'],
      ["a devastating hit(?! \(That'll leave a mark!\))", 'a devastating hit (17/23)'],
      ["a devastating hit \(That'll leave a mark!\)", "a devastating hit (That'll leave a mark!) (18/23)"],
      ['an overwhelming strike', 'an overwhelming strike (19/23)'],
      ['an obliterating hit', 'an obliterating hit (20/23)'],
      ['an annihilating strike', 'an annihilating strike (21/23)'],
      ['a cataclysmic strike', 'a cataclysmic strike (22/23)'],
      ['an apocalyptic strike', 'an apocalyptic strike (23/23)']
    ]
  end

  def weapon_list
    @settings.performance_monitor_weapons
  end

  def process_line(line)
    @damage_subs.each { |x| line.gsub!(x.first, x.last) }
    weapon_name = @settings.performance_monitor_weapons.find { |weapon_name| %r{^<.*\b#{weapon_name}\b.*\((\d+)/23\)} =~ line }
    if weapon_name
      @weapon_hits[weapon_name].push(Regexp.last_match(1).to_i)
      @last_weapon = weapon_name
      @new_hit = true
    end

    if @new_hit && /roundtime.*(\d+)/i =~ line
      @new_hit = false
      @weapon_rts[@last_weapon].push(Regexp.last_match(1).to_i)
      update_stats
      true
    else
      false
    end
  end

  def update_stats
    @weapon_stats = []
    @weapon_hits.each do |weapon, hits|
      dmg = hits.inject(&:+)
      rt = @weapon_rts[weapon].inject(&:+)
      @weapon_stats.push(weapon: weapon, avgrt: rt * 1.0 / hits.size, avgdps: dmg * 1.0 / rt)
    end
  end

  attr_reader :weapon_stats
end

def update_stat_bar(entry, data)
  @increment = (@increment + 1)
  if @increment > 5
    clear_window
	@increment = 1
  end
  entry.text = "#{data[:weapon].upcase}: \tavg RT:#{data[:avgrt].round(1)} \tavg DPS:#{data[:avgdps].round(1)}"
  puts("#$assess_window_begin#{"#{entry.text}      "}#{$assess_window_end}")
end

def clear_window
  _respond("<clearStream id=\"assess\"/>\r\n")
end

filter = PerformanceFilter.new
window = nil
window_done = false
load_window_position = CharSettings['window_position'] || []
load_window_width    = CharSettings['window_width'] || 300
load_window_height   = CharSettings['window_height'] || 100
window_title = "#{checkname} Performance Monitor"
save_window_position = nil
save_window_width    = nil
save_window_height   = nil

before_dying do
  CharSettings['window_position'] = save_window_position if (save_window_position.class == Array) && (save_window_position[0].to_i >= 0) && (save_window_position[1].to_i >= 0)
  CharSettings['window_width']    = save_window_width    if (save_window_width.class == Integer) && (save_window_width > 100)
  CharSettings['window_height']   = save_window_height   if (save_window_height.class == Integer) && (save_window_height > 100)
  Gtk.queue { window.destroy }
end

begin
  weapon_ets = {}

  Gtk.queue do
    vbox = Gtk::VBox.new
    filter.weapon_list.each do |weapon|
      stats_et = Gtk::Entry.new
      stats_et.editable = false
      display_font = Pango::FontDescription.new
      display_font.weight = Pango::FontDescription::WEIGHT_BOLD
      stats_et.modify_font(display_font)
      weapon_ets[weapon] = stats_et
      vbox.pack_start(stats_et)
    end

    window              = Gtk::Window.new
    window.title        = window_title
    window.keep_above = true
    window.border_width = 1
    window.resize(load_window_width, load_window_height)
    unless load_window_position.empty?
      window.move(load_window_position[0], load_window_position[1])
    end
    window.add(vbox)

    window.signal_connect('delete_event') do
      save_window_position = window.position
      save_window_width    = window.allocation.width
      save_window_height   = window.allocation.height
      window_done = true
    end
    window.hide
  end

  loop do
    line = script.gets?
    break if window_done
    pause 0.05 unless line
    next unless line

    next unless filter.process_line(line)
    filter.weapon_stats.each do |data|
      update_stat_bar(weapon_ets[data[:weapon]], data)
    end
  end
end
