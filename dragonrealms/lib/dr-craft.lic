=begin

Quick and dirty smelting script for DR

As you complete working the fire dies down and needs more fuel

 of molten metal accumulating along the crucible's sides.

Grunting, you begin stirring the contents of the crucible with your rod.  Every so often you stop to wipe the end clean of accumulated slag.  A scant few mistakes can be seen in the smelted metal.
Roundtime: 17 sec.
At last the metal appears to be thoroughly mixed and you pour it into an ingot mold.  The metal quickly cools and you pick up the copper ingot.

You can only mix a crucible if it has something inside of it.

As you finish the fire flickers and is unable to consume its fuel.


Grunting, you begin stirring the contents of the crucible with your rod.  Every so often you stop to wipe the end clean of accumulated slag.  A scant few mistakes can be seen in the smelted metal.
Roundtime: 16 sec.
At last the metal appears to be thoroughly mixed and you pour it into an ingot mold.  The metal quickly cools, but your hands are full so you set it down upon the ground.



=end


activity = script.vars[1]
emptyhands = proc {waitrt?; multifput "stow right", "stow left"}
$toolbag = Vars['toolbag'] || 'backpack'
mark = Vars['mark'] || false

def set_hands (right=nil, left=nil, right_from: $toolbag, right_to: $toolbag, left_from: $toolbag, left_to: $toolbag)

	current_right = right =~ /\s/ ? GameObj.right_hand.name : GameObj.right_hand.noun
	current_left  = left =~ /\s/ ? GameObj.left_hand.name : GameObj.left_hand.noun
#	right_from 	= right_from || toolbag
#	right_to 	= right_to  || toolbag
#	left_from	= left_from || toolbag
#	left_to		= left_to 	|| toolbag
	

	if !right and !left
		respond "set_hands: nothing to do"
	else
		case right.downcase		# Right hand first
		when nil
			nil
		when current_right
			respond "set_hands: right hand already has #{right}"
		when /empty/
			if current_right == nil or current_right.downcase =~ /empty/
				respond "set_hands: right hand is already empty"
			else
				fput "stow right"
			end
		when current_left		#Any issues with this besides getting two of something to combine, which probably wouldn't use set_hands method?
			fput "swap"
			current_right, current_left = current_left, current_right		#Update this
		else
			if current_right != nil and current_right.downcase != 'empty'
				preposition = right_to =~ /(in)|(on)|(under)/ ? nil : "in my"	#Allow location to be specified by caller.  Defaults to "in my"
				stow_command = right_to == nil ? "stow right" : "put my #{current_right} #{preposition} #{right_to}"
				fput stow_command
			end
			
			suffix = right_from == nil ? nil : " from my #{right_from}"
			fput "get #{right}#{suffix}"
		end	
		
		case left.downcase		# left hand next
		when nil
			nil
		when current_left
			respond "set_hands: left hand already has #{left}"
		when /empty/
			if current_left == nil or current_left.downcase == 'empty'
				respond "set_hands: left hand is already empty"
			else
				fput "stow left"
			end
		when current_right		#Any issues with this besides getting two of something to combine, which probably wouldn't use set_hands method?
			fput "swap"
		else
			if current_left != nil and current_left.downcase != 'empty'
				preposition = left_to =~ /(in)|(on)|(under)/ ? nil : "in my"	#Allow location to be specified by caller.  Defaults to "in my"
				stow_command = left_to == nil ? "stow left" : "put my #{current_left} #{preposition} #{left_to}"
				fput stow_command
			end
			
			suffix = left_from == nil ? nil : " from my #{left_from}"
			fput "get #{left}#{suffix}"
			
			fput "swap" if right.downcase == 'empty' or (right==nil and current_right==nil)  #corner case

		end	#case left hand	
						
	end 
end #set_hands

case activity
#todo: pick item from current work order
#todo: get the workorder
#todo: find book entry based on work-rder
#todo: read all books and index chapter and paged based on item
#todo: if crafting from work-order, automatically bundle
#todo: save state and check for restart: continue
#todo: create recipe script to know/include other components, a la Tillmen's famous alchemy

when "help"
	respond "help"
when "list"
	respond "list"
when "status"
	respond "status"
when "smelt"
	respond "smelt"

	rod = Vars['smelting-rod'] || "rod"
	bellows = Vars['bellows'] || "bellows"
	shovel = Vars['smelting-shovel'] || "shovel"
	project = "ingot"
	material = script.vars[2] || "steel"
	echo script.vars
	continue = script.vars.index('continue') ? true : false
	flux = script.vars.index('flux') ? true : false
	
	#todo: add the analyze messages as well
	smelt_regex = /(fire dies down and needs more fuel)|(unable to consume its fuel)|(Upon finishing you observe clumps)|(thoroughly mixed and you pour it into an ingot mold)|(You can only mix a crucible)|(^Roundtime)/
	
	#todo: check crucible before trying
	
	set_hands rod, "empty"
	
	done, smelt_error = false

	if continue
		result = dothistimeout "analyze #{material}", 4, smelt_regex
	elsif flux
		set_hands rod, "flux"
		result = dothistimeout "pour flux in crucible", 4, smelt_regex
		sleep 0.5
		waitrt?
		set_hands rod, "empty"
	else
		result = dothistimeout "stir crucible with my #{rod}", 4, smelt_regex
		sleep 0.5
		waitrt?
	end
	
	until done or smelt_error
		case result
		when /^Roundtime/
			result = dothistimeout "stir crucible with my #{rod}", 4, smelt_regex
			sleep 0.5
			waitrt?
		when /(fire dies down and needs more fuel)/
			set_hands rod, shovel
			result = dothistimeout "push fuel with my #{shovel}", 4, smelt_regex
			waitrt
			set_hands rod, "empty"	#Keep left hand clean... no documented penalty, but why not
		when /(unable to consume its fuel)/
			set_hands rod, bellows
			result = dothistimeout "push my #{bellows}", 4, smelt_regex
			waitrt
			set_hands rod, "empty"	#Keep left hand clean... no documented penalty, but why not
		when /(Upon finishing you observe clumps)/
			result = dothistimeout "turn crucible", 4, smelt_regex
			waitrt
		when /(You can only mix a crucible)/		#REally need to find or write a multiline dothistimeout in lich to catch the "done" messages after Roundtime
			done = true
		end
		
	end #until
	
	fput "analyze my #{GameObj.left_hand.noun}"
	waitrt
	fput "appraise my #{GameObj.left_hand.noun}"
	waitrt
	set_hands "empty","empty"
	
	
	
when /forge|black|blacksmith|armor|armorsmith|weapon|weaponsmith/
	#fixme: You need a larger volume of metal to continue crafting.
	respond "forge"
	if activity =~ /armor|armorsmithing/
		skill = 'armorsmithing'
	elsif activity =~ /(weapon)|(weaponsmith)|(weaponsmithing)/
		skill = 'weaponsmithing'
	else
		skill = 'blacksmithing'
	end

	
	material = script.vars[2]
  temper  = material == "temper" ? true: false
  reinforce = material == "reinforce" ? true: false
  lighten = material == "lighten" ? true: false

	restart = script.vars[3] =~ /(continue)|(restart)/ ? true : false
	project	= Vars['item']	#Need to figure this out
	hammer 	= Vars['hammer'] 	|| "hammer"
	tongs 	= Vars['tongs'] 	|| "tongs"
	shovel	= Vars['shovel']	|| "shovel"
	bellows = Vars['bellows'] 	|| "bellows"
	pliers 	= Vars['pliers']	|| "pliers"
	
	
	part = Vars['part'] || "backing"	#Where to put this?

  forge_action = temper ? "turn #{project} on forge with my tongs" : "pound #{project} on anvil with my #{hammer}"
  forge_tool = temper ? tongs : hammer
#now need to be cleaned of the clay by pouring oil on it.
	forge_regex = /(^The \w+ looks ready to be pounded)|(^The \w+ appears ready for more pounding)|(^You do not see anything that would obstruct pounding)|(^Almost all of the coal has been consumed)|(needs? (some )?more fuel)|(^The forge fire has died down)|(unable to consume its fuel)|(fire dims and produces less heat)|(could use some straightening)|(benefit from some soft reworking)|(^The metal is ready to be pulled into wire)|(drawn into wire on a mandrel)|(turned into wire using a mandrel)|(ready for cooling)|(^The metal is ready to be cooled in a slack tub)|(ready for a quench hardening)|(^The links appear ready to be woven)|(weaving using a pair of pliers)|(secured into place by using pliers)|(woven into place by using pliers)|(ready for stitching together)|(ready for riveting together)|(ready for bending)|(ready for more bending of links)|(^Although finished, the metal will quickly rust)|(need of some oil)|(cleaned of the clay by pouring oil)|(You need a larger volume of metal to continue crafting)|(You believe you can assemble)|(ready to be reinforced)|(^You think that thinning)|(grinding away of the excess)|(ground away at a grindstone)|(The grinding wheel is not spinning)|(adjusting the armor at a grindstone)|(Just TURN a grindstone)|(PULL it with some pliers)|(^Roundtime:)/

#You think that thinning the armor's metal at a grindstone could lighten it further. 

	
	time_start = Time.now.to_i
  if project == 'shield' or project == 'buckler'
	  part = "handle"
	end

	if restart
		result = dothistimeout "analyze #{project}", 4, forge_regex
		waitrt
	elsif temper
		set_hands tongs, project
		fput "put my #{project} on forge"
		result = dothistimeout "put my #{project} on forge", 4, forge_regex
		sleep 1
		waitrt?
	elsif reinforce or lighten
		page = reinforce ? "3" : "1" # Same procedure for lightening or reinforcing.  Just a diffrent page #, and we don't use the strips.
		part = "strips"
		set_hands pliers, "#{skill} book"
		fput "turn my book to chapter 5"
		fput "turn my book to page #{page}"
		fput "study my book"
		waitrt
		set_hands pliers, project
		fput "pull my #{project} with my #{pliers}"
		#Several pieces of the armor are stuck together and (must be pounded free).
		sleep 1
		waitrt?
		fput "put my #{project} on anvil"
		set_hands hammer, tongs
		result = dothistimeout "pound #{project} on anvil with my #{hammer}", 4, forge_regex
		sleep 1
		waitrt?
		
	else
		set_hands hammer, "#{skill} book"
		fput "study my #{skill} book"
		waitrt
		set_hands nil, "#{material} ingot"
		fput "put my #{material} ingot on anvil"
		set_hands hammer, tongs
		result = dothistimeout "pound ingot on anvil with my #{hammer}", 4, forge_regex
		sleep 1
		waitrt? #If it errors out, there might not be any RT
	
	end
	
#You gently grasp the 
# The armor pieces are ready to be (ground away at a grindstone).

#SSeveral pieces of the armor are stuck together and must be pounded free
#You think adjusting the armor at a grindstone would let you reinforce it further.
#Straining a bit less you maintain force to the grindstone, keeping it spinning fast.
#With the grinding complete, the armor now needs reassembly with a hammer.
#With the grinding complete, the armor now needs reassembly with a hammer.  
#The cuirass appears ready to be reinforced with some leather strips.                                                                           |
#Some pliers are now required to stitch the armor's smaller sections back together.            

#The armor is ready for grinding away of the excess metal. 
# (grinding away of the excess)|(ground away at a grindstone)|(The grinding wheel is not spinning)|(adjusting the armor at a grindstone)

#todo: The gloves has already been reinforced, and further modification would only damage it. 

	done, forge_error, assembled = false

	until done or forge_error
		case result
		when /(^The \w+ looks ready to be pounded)|(^The \w+ appears ready for more pounding)|(^You do not see anything that would obstruct pounding)|(^Roundtime:)/
			result = dothistimeout forge_action, 4, forge_regex
			sleep 0.5
			waitrt?
			
		when /(^Almost all of the coal has been consumed)|(needs? (some )?more fuel)/	# shovel
			set_hands shovel
			result = dothistimeout "push fuel with my #{shovel}", 4, forge_regex
			waitrt
			set_hands forge_tool
		when /(^The forge fire has died down)|(unable to consume its fuel)|(fire dims and produces less heat)/	# bellows
			set_hands bellows
			result = dothistimeout "push my #{bellows}", 4, forge_regex
			waitrt
			set_hands forge_tool

		when /(benefit from some soft reworking)|(could use some straightening)|(^The metal is ready to be pulled into wire)|(drawn into wire on a mandrel)|(turned into wire using a mandrel)/
			result = dothistimeout "turn #{project} on anvil with my #{tongs}", 4, forge_regex		#Do we need to always specify anvil? Armor moves to mandrels, which may not really exist as an item  #Answer: Yes, we do.... otherwise we try to turn something in our backpack.
			waitrt
		when /(ready for cooling)|(^The metal is ready to be cooled in a slack tub)|(ready for a quench hardening)/
			result = dothistimeout "push tub", 4, forge_regex
			waitrt
		#The metal now looks ready to be turned into wire using a mandrel or mold set.
		#The individual chain links are now ready for stitching together using pliers
		#Metal links can be woven into place by using pliers to pull them together.
		when /(^The links appear ready to be woven)|(weaving using a pair of pliers)|(secured into place by using pliers)|(woven into place by using pliers)|(ready for stitching together)|(ready for riveting together)|(ready for bending)|(ready for more bending of links)|(PULL it with some pliers)/
			if !assembled
#fixme			set_hands project, part, right_from: "on anvil"
				set_hands project, part, right_from: nil
#				set_hands "empty", part
#				fput "get #{project} on anvil"
				
				fput "assemble my #{part} with my #{project}"
				set_hands nil, pliers
				assembled = true
			end
			result = dothistimeout "pull my #{project} with my #{pliers}", 4, forge_regex
			waitrt
		when /(^You think that thinning)|(grinding away of the excess)|(ground away at a grindstone)|(The grinding wheel is not spinning)|(adjusting the armor at a grindstone)|(Just TURN a grindstone)/
			fput "turn grindstone"
			sleep 1
			waitrt?
			result = dothistimeout "push grindstone with #{project} on anvil", 4, forge_regex
			sleep 1
			waitrt?
		when /(^Although finished, the metal will quickly rust)|(need of some oil)|(cleaned of the clay by pouring oil)/
			if !assembled and (project == "shield" or project == 'buckler')
				set_hands project, "long cord", right_from: nil
				fput "assemble my #{project} with my long cord"
				set_hands nil, "oil"
			else
			  set_hands "empty", "oil" #We do this in two steps in case our project is a forging hammer (or any hammer
			  set_hands project, right_from: nil
			end
			  
			sleep 0.5	#timing issue for checking if we have the oil. Could do this cleaner, I guess
			
		  if GameObj.left_hand.noun != "oil"
				forge_error = true
				echo "Out of oil: cannot finish the #{project}"
			else
				result = dothistimeout "pour my oil on my #{project}", 4, forge_regex
				sleep 0.5
				waitrt?
				if result =~ /You believe you can assemble/  #kinda hacky... 
					next
				else 
					done = true
				end
			end
		when /(You believe you can assemble)|(ready to be reinforced)/
			set_hands project, part, right_from: nil
			fput "assemble my #{part} with my #{project}"
			if project == 'shield' or project == 'buckler'
				fput "put my #{project} on anvil"
				set_hands hammer, tongs
				result = dothistimeout forge_action, 4, forge_regex
			else
			  result = dothistimeout "analyze my #{project}", 4, forge_regex
			end
			
			waitrt
		else
			echo "Unknown response.  Attempting to recover"
			result = dothistimeout "analyze #{project}", 4, forge_regex
		end
	end #until loop
if mark and !temper and !reinforce and !lighten
		set_hands project, "stamp"
		fput "mark my #{project} with my stamp"
		sleep 1
		waitrt?
	end
	time_stop = Time.now.to_i
	
	fput "analyze my #{project}"
	waitrt

  fput "appraise my #{project}"
	waitrt
	set_hands "empty","empty"
	
	respond
	respond "Total time to complete #{project} excluding final analyze is #{time_stop - time_start} seconds"
	respond "This was for the continue" if continue
	
	
when /(carve)|(carving)/
	respond "carve"
	#You have no idea how to craft a shallow bone cup from this.
	#developed an uneven texture
	#you determine the cup is uneven
	#notice several rough, jagged shards
	#analy: ^Several rough, jagged shards stick up
	#analyYou do not see anything that would prevent carving 
	#analy: The cup's surface looks smooth and ready for further carving.
	#analy The cup appears free of defects
	#^Upon finishing you see some discolored areas 
	#^A discolored section mars
	#When crafting is complete
	
	material = script.vars[2]
	restart = script.vars[3] =~ /(restart)|(continue)/ ? true : false
	carver = Vars['carver'] || "chisels"
	rasp = Vars['rasp'] || "rasp"
	riffler = Vars['riffler'] || "riffler"
	part = Vars['part']
        project = Vars['item']
	my = "my "

	if material =~/soapstone|alabaster|basalt|sandstone|travertine|dolomite|marble|breccia|schist|andesite|limestone|granite|serpentine|quartzite|jade|gabro|onyx|pumice|obsidian/
		my = ""
		matnoun = Vars['stone'] || "rock"
		carver = Vars['carver'] || "chisels"
	else
		my = "my "
		matnoun = "stack"
		carver = Vars['carver'] || "saw"
 	end

	carve_regex = /(^You do not see anything that would prevent carving)|(^The .\w+'s surface looks smooth and ready for further carving)|(^The \w+ appears free of defects)|(carefully mark where it will attach)|(developed an uneven texture)|(determine the \w+ is uneven)|(no longer level)|([Ss]everal rough, jagged)|(^Upon finishing you see some discolored areas)|(^A discolored section mars)|(applying some polish)|(^You cannot figure out how to do that)|(You believe you can assemble)|(^Roundtime)/
	
	if !restart
		set_hands carver, "carving book"
		fput "study my book"
		waitrt
		
		set_hands nil, "#{material} #{matnoun}"  #with a strict

		result = dothistimeout "carve #{my}#{matnoun} with my #{carver}", 4, carve_regex
		waitrt
#		project = GameObj.left_hand.noun
		project = Vars['item']		
		set_hands "stack", nil, right_from: nil
		fput "stow right"
		sleep 0.5
		set_hands carver
	else
		#project = GameObj.left_hand.noun
		set_hands carver
		result = dothistimeout "analyze #{my}#{project}", 4, carve_regex
		waitrt	
	end
	
	done, carve_error = false
	until done or carve_error
		case result
		when /(^Roundtime)|(^You do not see anything that would prevent carving)|(^The .\w+'s surface looks smooth and ready for further carving)|(^The \w+ appears free of defects)|(carefully mark where it will attach)/
			result = dothistimeout "carve #{my}#{project} with my #{carver}", 4, carve_regex
			sleep 1
			waitrt?
		when /(developed an uneven texture)|(determine the \w+ is uneven)|(no longer level)/
			set_hands rasp
			result = dothistimeout "scrape #{my}#{project} with my #{rasp}", 4, carve_regex
			waitrt
			set_hands carver
		when /([Ss]everal rough, jagged)/
			set_hands riffler
			result = dothistimeout "rub #{my}#{project} with my #{riffler}", 4, carve_regex
			waitrt
			set_hands carver
		when /(^Upon finishing you see some discolored areas)|(^A discolored section mars)|(applying some polish)/
			set_hands "polish"
			result = dothistimeout "apply my polish to #{my}#{project}", 4, carve_regex
			waitrt
			set_hands carver
		when /^You cannot figure out how to do that/		#Technically, this is the error for carving something not carvable, like a finished project.  fixme!
			done = true
		when /You believe you can assemble/
			set_hands part
			result = dothistimeout "assemble my #{part} with #{my}#{project}", 4, carve_regex
			set_hands carver
		#	done = true
		else
			echo "Unknown"
			carve_error = true
			
		end
	end	

if mark
		set_hands project, "stamp", right_from: nil
	  fput "mark #{my} #{project} with my stamp"
		sleep 1
		waitrt?
	end

  fput "analyze #{my} #{project}"
	waitrt
	fput "appraise #{my}#{project}"
	waitrt
	set_hands "empty","empty"
	
	
	
when /knit/
	respond "Let's knit something: book needs to be at current page right now"
	
  material = script.vars[2]  #Not actually used right now
restart = (script.vars.include? 'continue' or script.vars.include? 'restart') ? true : false

	knitting_regex = /(^Now the needles must be turned)|(^Some ribbing should be added)|(^Next the needles must be pushed)|(ready to be pushed)|(^The garment is nearly complete)|(^Some purl stitching is needed)|(^The needles need to be turned)|(must be cast to finish)|(^Roundtime)/

	if restart
		result = dothistimeout "analyze my needles", 4, knitting_regex
	else
		set_hands "tailoring book", "empty"
		fput "study my book"
		waitrt
		set_hands "knitting needles", "yarn"
		result = dothistimeout "knit my yarn with my needles", 4, /Roundtime|insufficient message|no yarn/
		waitrt
		set_hands "knitting needles", "empty"
	end	
	

#	result = dothistimeout "knit my needles", 4, knitting_regex
#	waitrt
	#fixme: You need a larger amount of material to continue crafting.

	done, knit_error = false
	until done or knit_error

		case result
		when /(^Now the needles must be turned)|(^Some ribbing should be added)|(^The needles need to be turned)/
			result = dothistimeout "turn my needles", 4, knitting_regex
			waitrt
		when /(^Next the needles must be pushed)|(ready to be pushed)|(^Some purl stitching is needed)/
			result = dothistimeout "push my needles", 4, knitting_regex
			waitrt
		when /^Roundtime/
			result = dothistimeout "knit my needles", 4, knitting_regex
			
			waitrt
		when /(^The garment is nearly complete)|(must be cast to finish)/
			fput "cast my needles"
			waitrt
			done = true
		end
	end
	
  if mark
		set_hands "stamp"
		fput "mark my #{GameObj.left_hand.noun} with my stamp"
	end
	fput "analyze my #{GameObj.left_hand.noun}"
	waitrt
	fput "appraise my #{GameObj.left_hand.noun}"
	waitrt
	set_hands "empty","empty"


	#end
when /get|pickup|put|drop|dropoff/

	clerk = "clerk"
	tools = case script.vars[2]
	when /all/		#Well, this will be spammy...
		%w[hammer tongs bellows shovel saw rasp riffler chisel rod pliers needle yardstick scissors needle awl needle scraper]
	when /black|blacksmith|weapon|weaponsmith/
		%w[hammer tongs bellows shovel]
	when /armor|armorsmith|forge|forging/
		%w[hammer tongs bellows shovel pliers]
	when /smelt/
		%w[shovel bellows rod]
	when /carve|carving/
		%w[saw rasp riffler chisel]
	when /tailor|tailoring|outfit|outfitting/
		%w[scissors yardstick needle needle awl]
	end
	
	if activity =~ /put|drop|dropoff/
		tools.each do |tool|
			fput "get #{tool} from my #{$toolbag}"
			fput "put my #{tool} on counter"
		end
	elsif activity =~ /get|pickup/
		tools.each do |tool|
			fput "ask #{clerk} for #{tool}"
			fput "put my #{tool} in my #{$toolbag}"
		end
	else
		echo "Wait, what are we doing again?"
	end
		

when "test"
	respond "Testing stuff"
	
=begin
	set_hands "empty", "empty"

	pause 3
	set_hands
	pause 3
	set_hands "hammer", "tongs"
	pause 3
	set_hands nil, nil
	pause 3
	set_hands 'empty', 'empty'
	pause 3
	set_hands "hammer", "tongs"
	pause 3
	set_hands "armorsmithing book", "runestone"
	pause 3

	set_hands "hammer", "tongs"
	echo "Last one..."
	pause 3
	set_hands "tongs", "hammer"
	pause 3
	echo "I wonder if that worked.  Tongs in right hand?"
=end
	set_hands "empty", "empty"
	pause 3
	set_hands nil, "rod"
	pause 5
	set_hands "bellows", "rod"
	pause 10
	set_hands nil, "empty"
	pause 3
	set_hands "stem", 'rock', right_from: nil, left_from: nil
	pause 3
	set_hands "empty", "empty", right_to: nil, left_to: nil
#	set_hands "armorsmithing book", "blacksmithing book"
#	pause 3
#	set_hands "blacksmithing book", "carving book"
#	pause 3
#	set_hands "carving book", "armorsmithing book"

else
	respond "Sorry, I'm not familiar with the skill #{activity}"
end
