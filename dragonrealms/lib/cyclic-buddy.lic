=begin
        Alternative trainer script which kicks off sub-scripts based on
        current mindstates.  See Leustyin-setup and Chuno-setup for examples
        This script uses the `training_list` key to define the skills to train
        and thresholds in which the scrips should be started
=end

###################################################
###  cyclic-buddy is a background script that   ###
###  monitors and refreshes cyclic spells to    ###
###  train magic.                               ###
###                By: Aeridal                  ###
###                                             ###
###  settings example (for yaml)                ###
###  cyclic_training_spells:                    ###
###    abbrev: GHS                              ###  
###    mana: 8                                  ###
###    cyclic: true                             ###
###  Utility:                                   ###
###    abbrev: REV                              ###
###    mana: 8                                  ###
###    cyclic: true                             ###
###  Augmentation:                              ###
###    abbrev: REV                              ###
###    mana: 8                                  ###
###   cyclic: true                              ###
###                                             ###
###  cyclic_cycle_skills:                       ###
###  - Utility                                  ###
###  - Warding                                  ###
###  - Augmentation                             ###
###                                             ###
###  cyclic_no_use_scripts:                     ###
###  - combat-trainer                           ###
###                                             ###
###################################################
no_pause_all
custom_require.call(%w[drinfomon equipmanager events spellmonitor common common-arcana common-crafting common-healing common-items common-money common-travel common-summoning])

class Cyclic_Buddy
  include DRC
  include DRCA
  include DRCC
  include DRCH
  include DRCI
  include DRCM
  include DRCS
  include DRCT
  
  def initialize
    @settings = get_settings
    @cyclic_cycle_timer = Time.now - 251
	@no_use_scripts = @settings.cyclic_no_use_scripts
    Flags.add('cyclic_lost', 'Your spell cannot maintain itself in this magically inert area.', 'Something in the area interferes with your spell preparations.', 'You really should concentrate on your journey', 'Something in the area prevents your spell from working', 'You don\'t have a spell prepared')
    Flags.add('need_pause', 'stop playing', 'backfires')
    loop do
      pause 1
#	  echo Flags['cyclic_lost']
	  if Flags['need_pause'].include?('backfires')
	    @cyclic_cycle_timer = Time.now - 251
		Flags['need_pause'] = 'Timer rest'
      end
      refresh_cyclic
    end
  end
  
  def refresh_cyclic
    return if DRStats.concentration <= 90
    if Flags['need_pause'].include?('stop playing')
	  Script.running.find_all { |s| !s.paused? && !s.no_pause_all && s.name != 'om' }.each(&:pause)
      waitrt?
      fput 'stop play'
      Flags['need_pause'] = 'Pause Done'
      Script.running.find_all { |s| s.paused? && !s.no_pause_all && s.name != 'om' }.each(&:unpause)
    end
    if Flags['cyclic_lost'].include?('Something in the area interferes with your spell preparations.') || Flags['cyclic_lost'].include?('You really should concentrate on your journey') || Flags['cyclic_lost'].include?('Something in the area prevents your spell from working') || Flags['cyclic_lost'].include?('You don\'t have a spell prepared')
      @cyclic_cycle_timer = Time.now - 241
  	  Flags['cyclic_lost'] = 'timer-reset'
      refresh_cyclic
    end	  
    return if @no_use_scripts.any? { |name| Script.running?(name) }
    if Flags['cyclic_lost'].include?('Your spell cannot maintain itself in this magically inert area.')
	  @cyclic_cycle_timer = Time.now - 245
	  Flags['cyclic_lost'] = 'timer-reset'
	end
#    echo @cyclic_cycle_timer
#    echo Time.now - @cyclic_cycle_timer
    return unless @settings.cyclic_training_spells
    return unless Time.now - @cyclic_cycle_timer > 250

    $cyclic_skill = @settings.cyclic_cycle_skills
                            .min_by { |s| DRSkill.getxp(s) }

    if DRSkill.getxp($cyclic_skill) >= 32
      release_cyclics
      return
    end
    cast_spell(@settings.cyclic_training_spells[$cyclic_skill], $cyclic_skill)
    @cyclic_cycle_timer = Time.now
  end
  
  def cast_spell(data, skill)
    data = @settings.cyclic_training_spells[$cyclic_skill]
    if data['abbrev'] =~ /^comp/i
      walk_to @settings.compost_room
      return unless DRRoom.npcs.empty?
      fput(['\'Had this been a real compost your belongings would be gone. Composting soon', '\'Compost', '\'Compost incoming', '\'This is a code green, compost alert', '\'Pick up your valuables, compost time', '\'If it\'s on the ground it\'s gone, Compost incoming'].sample)
    end

    if (data['abbrev'] =~ /locat/i) && !DRSpells.active_spells['Clear Vision']
      fput('prep cv')
      pause 5
      cast?
    end

    if data['moon']
      # Look for a moon that will be up for the next few minutes
      check_moonwatch
      unless set_moon_data(data)
        weather = bput('weather', 'inside', 'You glance up at the sky.')
        walk_to @settings.outdoor_room if weather =~ /inside/
        fput('perceive moons')
        # Look for a moon that will be up for the next few minutes
        return unless set_moon_data(data)
      end
      data = set_moon_data(data)
    end

    release_cyclics if data['cyclic']
    return unless prepare?(data['abbrev'], data['mana'], data['symbiosis'])
    unless @settings.cambrinth_items[0]['name']
      @settings.cambrinth_items = [{
        'name' => @settings.cambrinth,
        'cap' => @settings.cambrinth_cap,
        'stored' => @settings.stored_cambrinth
      }]
    end
    @settings.cambrinth_items.each_with_index do |item, index|
      if data['cambrinth'][index][0]
        find_charge_invoke_stow(item['name'], item['stored'], item['cap'], @settings.dedicated_camb_use, data['cambrinth'][index], @settings.cambrinth_invoke_exact_amount)
      end
    end
    waitcastrt?
    snapshot = DRSkill.getxp(skill) if data['symbiosis']

    success = cast?(data['cast'], data['symbiosis'], data['before'], data['after'])

    return unless data['symbiosis']

    start = Time.now

    pause 0.5 until snapshot != DRSkill.getxp(skill) || Time.now - start > 10 || !success
    if !success
      UserVars.discerns[data['abbrev']]['more'] = [UserVars.discerns[data['abbrev']]['more'] - 1, 0].max
    elsif DRSkill.getxp(skill) - snapshot < @settings.symbiosis_learning_threshold
      UserVars.discerns[data['abbrev']]['more'] = UserVars.discerns[data['abbrev']]['more'] + 1
	Flags['cyclic_lost']='Cyclic active'
    end
  end
end

Cyclic_Buddy.new