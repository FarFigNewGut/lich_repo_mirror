# quiet
=begin
    Automatic listener, if someone teaches you an approved class you'll start listening.

    The default list is all non necromancer skills and no sorcery or thievery. You can customize the list
    by putting your character name into a When clause (see the script for examples).

    defaults + ['The', 'Other', 'Skills']

    Before running this script for the first time:
    * Download script "common".
    * ;trust the above script.

    To stop listening automatically
    ;k smartlisten

    Make suggestions or find other scripts at https://github.com/rpherbig/dr-scripts
=end

defaults = [
  'Large Edged', 'Twohanded Edged', 'Small Blunt', 'Light Thrown', 'Brawling', 'Offhand Weapon',
  'Melee Mastery', 'Missile Mastery', 'Life Magic', 'Attunement', 'Arcana', 'Augmentation',
  'Utility', 'Warding', 'Athletics', 'Perception', 'First Aid', 'Outdoorsmanship', 'Scholarship',
  'Mechanical Lore', 'Appraisal', 'Performance', 'Tactics', 'Stealth', 'Bow',
  'Evasion', 'Parry Ability', 'Small Edged', 'Defending', 'Light Armor', 'Chain Armor',
  'Shield Usage', 'Targeted Magic', 'Debilitation', 'Brigandine', 'Plate Armor', 'Large Blunt',
  'Twohanded Blunt', 'Slings', 'Crossbow', 'Staves', 'Polearms', 'Heavy Thrown', 'Locksmithing',
  'Skinning', 'Forging', 'Engineering', 'Outfitting', 'Alchemy']

case checkname
when 'Etreu'
  UserVars.listen_skills = defaults + ['Scouting']
when 'Menacra'
  UserVars.listen_skills = defaults + ['Theurgy']
when 'Selanas'
  UserVars.listen_skills = defaults + ['Empathy']
when 'Sheltim'
  UserVars.listen_skills = defaults + ['Expertise']
else
  UserVars.listen_skills = defaults
end

%w(common).each do |script_name|
  unless running?(script_name)
    start_script script_name
    pause 0.5
  end
end

while line = script.gets
  if line =~ /(.*) begins to lecture you on the proper usage of the (.*) skill/
    DRC.bput("listen to #{Regexp.last_match(1)}", '^You begin to listen to') if UserVars.listen_skills.include?(Regexp.last_match(2))
  end
  begin
  rescue Exception
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue ThreadError
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  end
end
