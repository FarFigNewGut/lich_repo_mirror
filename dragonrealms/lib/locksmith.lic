=begin
author: Crannach

Opens a box, disarms the traps, harvests the components, and then picks the lock. Box should be in your hands. I am newbie ruby and lich developer so any advice would be appreciated at jonas@andersson.io

=end
#TODO: implement lock analyze
#TODO: implement all traps
#TODO: simplify regular expression matching & processing, the current method is likely retarded
#TODO: issue: disarm identify goes straight to pick identify and does not attempt to harvest the trap
class Box
  attr_accessor :trap_disarmed, :trap_identified, :trap_harvested, :lock_identified, :lock_picked, :opened
  def initialize
    @trap_identified = false
    @trap_disarmed = false
    @trap_harvested = false
    @lock_identified = false
    @lock_picked = false
    @opened = false
  end

  def to_s
    "Trap
     identified? #{@trap_identified}\n
    "
  end

  def identify_lock
    messages = [
        # Still trapped!
        /However, a .* is not fully disarmed, making any chance of picking it unlikely/,

        # Failed to ID lock
        /Careful probing of the .* fails to teach you anything about the lock guarding it/,

        # Already IDed
        /Somebody has already inspected the current lock on this/,

        # Difficulty
        /An aged grandmother could open this in her sleep/,
        /This lock is a laughable matter, you could do it blindfolded/,
        /Opening the .* would be a longshot/,
        /Prayer would be a good start for any attempt of yours at picking open the/,
        /You have some chance of being able to pick open the/,
        /You think this lock is precisely at your skill level/,
        /will be a simple matter for you to unlock/,
        /The lock is a trivially constructed piece of junk barely worth your time/,
        /should not take long with your skills/,
        /It's not even locked, why bother/,
        /You can unlock the .* with only minor troubles/,
        /This lock is a laughable matter, you could do it blindfolded/,
        /If you're going to use a lockpick from the lockpick ring you'd better have an empty hand first/,
        /It's not even locked, why bother/,
        /The odds are against you/,
        /The lock has the edge on you, but you've got a good shot at picking open the .*/

    ]
    waitrt?
    status = dothis("pick identify", Regexp.union(messages))
    if status =~ /However, a .* is not fully disarmed, making any chance of picking it unlikely\./
    elsif status =~ /Opening the .* would be a longshot|The lock has the edge on you|An aged grandmother could open this in her sleep|The odds are against you|You can unlock the .* with only minor troubles/
      @lock_identified = true
    elsif status =~ /Somebody has already inspected the current lock on this [a-zA-Z]*\.\.\./
      @lock_identified = true
    elsif status =~ /Prayer would be a good start for any attempt of yours at picking open the [a-z ]*\./
      @lock_identified = true
    elsif status =~ /The lock is a trivially constructed piece of junk barely worth your time\./
      @lock_identified = true
    elsif status =~ /You can unlock the [a-z ]* with only minor troubles\./
      @lock_identified = true
    elsif status =~ /The [a-z ]* will be a simple matter for you to unlock\./
      @lock_identified = true
    elsif /If you're going to use a lockpick from the lockpick ring you'd better have an empty hand first\./
      fput('empty left hand')
    elsif status =~ /It's not even locked, why bother\?/
      @opened = true
      @lock_identified = true
      @lock_picked = true
    elsif status =~ /This lock is a laughable matter, you could do it blindfolded/
    elsif status =~ /The odds are against you, but with persistence you believe you could pick open the [a-z ]*\./
    elsif status =~ /The lock has the edge on you, but you've got a good shot at picking open the .*/
      @lock_identified = true
    end
  end

  def identify_trap
    messages = [
        #Not even trapped
        /It seems harmless/,

        #Trap already identified
        /Somebody has already located and identified the current trap on the/,

        /Two sets of six pinholes on either side of the .* lock are sealed with dirt, blocking whatever would have come out/,
        /While checking the .* with a careful eye, you notice a lumpy green rune hidden inside the box near the lock/,
        /You see a pin and shaft lodged into the frame of the .*/,
        /Looking into the keyhole you see what seems to be a pin lodged against the tumblers of the lock/,
        /Examining the box for traps reveals a tiny glass tube filled with a black gaseous substance of some sort and a tiny hammer at the ready to do what it was designed for/,
        /Two sets of six pinholes on either side of the .* lock indicate that something is awry/,
        /You see a shattered glass tube with a tiny hammer inside the lock/,
        /While scanning the .* with a careful eye, you notice a small black crystal deep in the shadows of the .*/,
        /You see nothing of interest in the .*/,
        /You see a lumpy green rune pushed deep within the .*/,
        /Careful probing of the [a-z -]* fails to reveal to you what type of trap protects it\./,
        /While checking the [a-z]* for traps, you notice a bronze seal over the [a-z']* lock\.  The seal is covered in strange runes and a glass sphere is embedded within it\./,
        /While examining the [a-z]* for traps, you notice a bronze seal with a glass sphere in it\.  The seal has been pried away from the lid\./,
        /Embedded in the front of the [a-z ]* is a small glass tube of milky-white opacity\.  Small black dots bounce inside, though the lack of transparency makes it impossible to be certain what they are\./,
        /A tiny hammer and milky-white tube on the front of the [a-z ]* have been bent away from each other\./,
        /A tiny bronze face, Fae in appearance, grins ridiculously from its place on the [a-z ]*\.  Some sort of fatty bladder sticks out from the edges of this miniature metallic visage\./,
        /Still grinning ridiculously is a tiny bronze face, loosened from the wood\.  Behind this metallic visage rests a small deflated bladder\./,
        /You notice a tiny needle with a greenish discoloration on its tip hidden next to the keyhole\./,
        /Disarm what\?/,
        /You don't see any reason to attempt to disarm that\./,
        /You notice two silver studs right below the keyhole which look dangerously out of place there\./,
        /It looks like there used to be something in them, but whatever it was has been pried out\./,
        /Looking closely at the [a-z ]*, you notice a vial of lime green liquid attached to the lid\.  Someone has unhooked the stopper, rendering it harmless\./,
        /A bent needle sticks harmlessly out from its hidden compartment near the lock/,
        /This trap is a laughable matter, you could do it blindfolded/
    ]
    waitrt?
    status = dothis("disarm identify", Regexp.union(messages))
    echo status
    if status =~ /Disarm what/
      exit
    elsif status =~ /Somebody has already located and identified the current trap/
      echo "debug: Trap already located/identified"
      @trap_identified = true
      # Trap already disarmed
    elsif status =~ /Two sets of six pinholes on either side of the .* lock are sealed with dirt, blocking whatever would have come out|It looks like there used to be something in them, but whatever it was has been pried out|You deem it quite safe|Someone has unhooked the stopper, rendering it harmless|A bent needle sticks harmlessly out from its hidden compartment near the lock|Behind this metallic visage rests a small deflated bladder|It seems harmless|You see a lumpy green rune pushed deep within the .*/
      @trap_identified = true
      @trap_disarmed = true
      puts "All traps disarmed! Yay.."
      # Found the trap
    elsif status =~ /While checking the .* with a careful eye, you notice a lumpy green rune hidden inside the box near the lock|You notice two silver studs right below the keyhole which look dangerously out of place there|Embedded in the front of the .* is a small glass tube of milky-white opacity|This trap is a laughable matter, you could do it blindfolded/
      @trap_identified = true
    elsif status =~ /You see a pin and shaft lodged into the frame of the [a-z ]*\.  It looks safe enough\./
      @trap_identified = true
    elsif status =~ /Looking into the keyhole you see what seems to be a pin lodged against the tumblers of the lock\.  Connected to the pin is a small shaft that runs downward into a shadow\./
      @trap_identified = true
    elsif status =~ /Examining the box for traps reveals a tiny glass tube filled with a black gaseous substance of some sort and a tiny hammer at the ready to do what it was designed for\./
      @trap_identified = true
    elsif status =~ /Two sets of six pinholes on either side of the [a-z ']* lock indicate that something is awry\./
      @trap_identified = true
    elsif status =~ /While scanning the [a-z]* with a careful eye, you notice a small black crystal deep in the shadows of the [a-z ]*\./
      @trap_identified = true
    elsif status =~ /You see nothing of interest in the [a-z]*.  It seems harmless\./
      @trap_identified = true
    elsif status =~ /You see a lumpy green rune pushed deep within the .*/
      @trap_identified = true
    elsif status =~ /While checking the [a-z]* for traps, you notice a bronze seal over the [a-z']* lock\.  The seal is covered in strange runes and a glass sphere is embedded within it\./
      @trap_identified = true
    elsif status =~ /While examining the [a-z]* for traps, you notice a bronze seal with a glass sphere in it\.  The seal has been pried away from the lid\./
      @trap_identified = true
    elsif status =~ /Embedded in the front of the [a-z ]* is a small glass tube of milky-white opacity\.  Small black dots bounce inside, though the lack of transparency makes it impossible to be certain what they are\./
      @trap_identified = true
    elsif status =~ /A tiny hammer and milky-white tube on the front of the [a-z ]* have been bent away from each other\./
      @trap_identified = true
    elsif status =~ /A tiny bronze face, Fae in appearance, grins ridiculously from its place on the [a-z ]*\.  Some sort of fatty bladder sticks out from the edges of this miniature metallic visage\./
      @trap_identified = true
    elsif status =~ /Still grinning ridiculously is a tiny bronze face, loosened from the wood\.  Behind this metallic visage rests a small deflated bladder\./
      @trap_identified = true
    elsif status =~ /You notice a tiny needle with a greenish discoloration on its tip hidden next to the keyhole/
      @trap_identified = true
    end
  end

  def disarm
    messages = [
        /Careful not to jostle the .*, you reach down and scoop a pinchful of dirt from the ground, then pack it into the pinholes, blocking them/,
        /With precise control, you shove the pin away from the tumblers and it springs upward and lodges into the frame of the [a-z ]* itself\./,
        /You work with the trap for a while but are unable to make any progress/,
        /You believe that the .* is not yet fully disarmed/,
        /With a smirk you wedge a small stick between the tiny hammer and the tube forcing it back until you hear a\.\.\."CLICK"\.  The hammer seems to be in a locked position/,
        /With the precision and grace of a skilled craftsman, you nudge the black crystal away from its position next to the lock/,
        /With sweat forming on your brow, you slowly move the rune away from the lock and push it deep inside the .*/,
        /You cautiously pry the seal away from the lid, being extremely careful not to break it/,
        /After wiggling the milky-white tube back and forth for a few moments, you manage to bend it away from the tiny hammer set to break it\.  Just for fun, you flick the tube a couple of times with the tip of your finger, which seems to annoy the heck out of the little black dots inside\./,
        /Carefully, you pry the bronze face away from .*, then moving even more cautiously, pierce the bladder and allow its unsavory contents to spray harmlessly upon the ground./,
        #Disarm Failed!
        /Like a Halfling blowing smoke rings, the .* spits several clouds of coarse black powder onto you/,
        /A tiny hammer and milky-white tube on the front of .* have been bent away from each other/,
        /Working slowly, you carefully pry at the studs working them away from what you surmise are contacts located somewhere under the keyhole/,
        /Working slowly, you carefully bend the head of the needle so that it can no longer spring out from its hidden compartment/
    ]
    waitrt?
    status = dothis("disarm", Regexp.union(messages))
    if status =~ /You believe that the .* is not yet fully disarmed/
      return
    elsif status =~ /Careful not to jostle the .*, you reach down and scoop a pinchful of dirt from the ground, then pack it into the pinholes, blocking them|Carefully, you pry the bronze face away from .*, then moving even more cautiously, pierce the bladder and allow its unsavory contents to spray harmlessly upon the ground.|Behind this metallic visage rests a small deflated bladder|Working slowly, you carefully pry at the studs working them away from what you surmise are contacts located somewhere under the keyhole|Working slowly, you carefully bend the head of the needle so that it can no longer spring out from its hidden compartment/
      @trap_disarmed = true
    elsif status =~ /With precise control, you shove the pin away from the tumblers and it springs upward and lodges into the frame of the .* itself\./
      @trap_disarmed = true
    elsif status =~ /With a smirk you wedge a small stick between the tiny hammer and the tube forcing it back until you hear a\.\.\."CLICK"\.  The hammer seems to be in a locked position\./
      @trap_disarmed = true
    elsif status =~ /With the precision and grace of a skilled craftsman, you nudge the black crystal away from its position next to the lock\./
      @trap_disarmed = true
    elsif status =~ /With sweat forming on your brow, you slowly move the rune away from the lock and push it deep inside the [a-z]*\./
      @trap_disarmed = true
    elsif status =~ /You cautiously pry the seal away from the lid, being extremely careful not to break it\./
      @trap_disarmed = true
    elsif status =~ /After wiggling the milky-white tube back and forth for a few moments, you manage to bend it away from the tiny hammer set to break it/
      @trap_disarmed = true
    end
  end

  def pick(level = nil)
    # The message "Soft click" appears before the message mentioning the existence of more locks so more locks detection will never occur
    messages = [
        /You are unable to make any progress towards opening the lock/,
        /You discover another lock protecting/,
        #/With a soft click, you remove your lockpick and open and remove the lock/,
        /It's not even locked, why bother/,
        /Find a more appropriate tool and try again!/
    ]
    waitrt?
    status = dothis("pick #{level}", Regexp.union(messages))
    echo status
    if status =~ /You discover another lock protecting/
      @lock_identified = false
      @lock_picked = false
#    elsif status =~ /With a soft click,/
      #@lock_picked = true
      #@opened = true
    elsif status =~ /It's not even locked, why bother/
      @opened = true
      @lock_identified = true
      @lock_picked = true
    elsif status =~ /Find a more appropriate tool and try again!/
      exit
    end
  end

  def harvest_trap
    messages = [
        /With great care, you begin to work on prying the lumpy rune free of the box.  Just when you begin to feel as if it may be slipping loose, the rune snaps in half\.  Though the damage has likely ruined its magic, you still retrieve the pieces\./,
        /The remnants of this [a-z ']* previous trap have already been completely harvested\./,
        /You fumble around with the trap apparatus, but are unable to extract anything of value\./,
        /Your inept fumblings have damaged the remnants of the trap apparatus too much for it to be successfully harvested\./,
        /The mangled remnants of this [a-z ']* previous trap are completely unsuitable for harvesting\./,
        /You are unable to determine a proper method of extracting part of the box's trap\./,
        /After some cautious twisting in order to weaken the metal that attaches the hammer to the [a-z]*, you give it a quick yank that breaks it free\./,
        /You carefully begin to pry the steel pin free of the frame of the [a-z ]*\.  Once it finally slips loose, you begin turning it in an effort to disengage it from the mechanism\.  A bit more careful maneuvering and the pin finally slides free\./,
        /With great care, you begin to clear out the dirt around just one of the holes in order to regain access to the trap\.  Leaning closer to have a better view while you work, you nudge the edge of the glass tube gently out of position, then turn the [a-z]* over\.  With a gentle shake the tube falls free and you catch it\./,
        /With care, you nudge the crystal in an effort to pry it free of the trap\.  After a few moments of effort the crystal slips free, but not before a slight tremor in your hand fractures its delicate structure\./,
        /Careful probing of the trap mechanism allows you to free the component from its mounting\./,
        /Working slowly, and being careful to keep it away from the milky-white tube, you bend the hammer back and forth until you finally manage to break it free of the [a-z ]*\./,
        /You carefully begin to work at freeing the bronze face\.  A few cautious twists later, it breaks loose, revealing for the first time that there was a secondary fatty bladder concealed behind it\.  It's a good thing you didn't just rip the face off!/,
        /With a solid shake, the studs finally slide easily out of their casings and into your palm/

    ]
    waitrt?
    status = dothis("disarm harvest", Regexp.union(messages))
    if status =~ /With great care, you begin to work on prying the lumpy rune free of the box.  Just when you begin to feel as if it may be slipping loose, the rune snaps in half\.  Though the damage has likely ruined its magic, you still retrieve the pieces\./
      fput "stow rune"
      @trap_harvested = true
    elsif status =~ /The remnants of this [a-z ']* previous trap have already been completely harvested\./
      @trap_harvested = true
    elsif status =~ /Your inept fumblings have damaged the remnants of the trap apparatus too much for it to be successfully harvested\./
      @trap_harvested = true
    elsif status =~ /The mangled remnants of this [a-z ']* previous trap are completely unsuitable for harvesting\./
      @trap_harvested = true
    # elsif status =~ /After some cautious twisting in order to weaken the metal that attaches the hammer to the [a-z]*, you give it a quick yank that breaks it free\./
    #   @trap_harvested = true
    #   waitrt?
    #   fput 'stow hammer'
    # elsif status =~ /You carefully begin to pry the steel pin free of the frame of the [a-z ]*\.  Once it finally slips loose, you begin turning it in an effort to disengage it from the mechanism\.  A bit more careful maneuvering and the pin finally slides free\./
    #   @trap_harvested = true
    #   waitrt?
    #   fput 'stow pin'
    elsif status =~ /With great care, you begin to clear out the dirt around just one of the holes in order to regain access to the trap\.  Leaning closer to have a better view while you work, you nudge the edge of the glass tube gently out of position, then turn the [a-z]* over\.  With a gentle shake the tube falls free and you catch it\./
      @trap_harvested = true
      waitrt?
      fput('stow tube')
    elsif status =~ /With care, you nudge the crystal in an effort to pry it free of the trap\.  After a few moments of effort the crystal slips free, but not before a slight tremor in your hand fractures its delicate structure\./
      @trap_harvested = true
      waitrt?
      fput('stow crystal')
    elsif status =~ /Careful probing of the trap mechanism allows you to free the component from its mounting\./
      @trap_harvested = true
      waitrt?
      fput('stow seal')
    elsif status =~ /Working slowly, and being careful to keep it away from the milky-white tube, you bend the (hammer) back and forth until you finally manage to break it free of the|It's a good thing you didn't just rip the (face) off|A bit more careful maneuvering and the (pin) finally slides free/
      @trap_harvested = true
      waitrt?
      fput("stow #{$1}")
    # elsif status =~ /You carefully begin to work at freeing the bronze face\.  A few cautious twists later, it breaks loose, revealing for the first time that there was a secondary fatty bladder concealed behind it\.  It's a good thing you didn't just rip the face off!/
    #   @trap_harvested = true
    #   waitrt?
    #   fput('stow face')
    elsif status =~ /With a solid shake, the studs finally slide easily out of their casings and into your palm/
      @trap_harvested = true
      waitrt?
      fput "stow studs"
    end
  end

  def analyze_components
    messages = [
        /After further examination, you believe that you may be able to safely retrieve the rune for your own uses\./,
        /You've already analyzed this trap in preparation for harvesting, there's no need to do so again\./,
        /You are unable to determine a proper method of extracting part of the [a-z']* trap\./,
        /Giving the design of the trap careful consideration, you decide that it may be possible to retrieve one of the glass tubes built into the trap\.  Perhaps they'd be worth something to the right buyer\./,
        /With the hammer shifted out of striking position, the thought strikes you that perhaps with a bit more twisting you could break the hammer off entirely\./,
        /With some work and luck, it may be possible to pull the crystal out of the trap entirely/,
        /Despite being lodged into the frame, it appears that you may be able to pry the pin free with some effort\./,
        /With the seal already partially pried away, you believe you may be able to completely detach the seal with a little more work\./,
        /With the hammer now out of line with the tube, perhaps with a bit more work you could remove the hammer entirely\./,
        /You examine the bronze face more closely and decide that you could probably free it with some effort\./,
        /It is likely you can extract the needle by stressing the metal repeatedly to cause it to break near the point of attachment/,
        /You believe you may be able to safely extract the silver studs by carefully manipulating them to widen the casings that hold them firmly in place/
    ]
    waitrt?
    status = dothis("disarm analyze", Regexp.union(messages))
    if status =~ /After further examination, you believe that you may be able to safely retrieve the rune for your own uses|Perhaps they'd be worth something to the right buyer|With the hammer shifted out of striking position, the thought strikes you that perhaps with a bit more twisting you could break the hammer off entirely|With some work and luck, it may be possible to pull the crystal out of the trap entirely|Despite being lodged into the frame, it appears that you may be able to pry the pin free with some effort|With the seal already partially pried away, you believe you may be able to completely detach the seal with a little more work|You've already analyzed this trap in preparation for harvesting, there's no need to do so again|It is likely you can extract the needle by stressing the metal repeatedly to cause it to break near the point of attachment|With the hammer now out of line with the tube, perhaps with a bit more work you could remove the hammer entirely|You believe you may be able to safely extract the silver studs by carefully manipulating them to widen the casings that hold them firmly in place/
      harvest_trap
    end
  end

end

## Global State
$traps_disarmed = false


def main
  my_box = Box.new
  while not my_box.opened
    while not my_box.trap_disarmed
      if not my_box.trap_identified
        my_box.identify_trap
      elsif not my_box.trap_disarmed
        my_box.disarm
      elsif not my_box.trap_harvested
        my_box.analyze_components
      else my_box.identify_trap
      end
    end
    while not my_box.lock_identified
      my_box.identify_lock
    end
    while not my_box.lock_picked
      my_box.pick
    end
  end
end

def loot
  dothis("open")
end

main


# LAUGHING GAS
# You begin work at disarming the chest.
#                                     Your armor hinders your attempt.
#                                                                 You wiggle the milky-white tube back and forth for a few moments in an attempt to remove it from the brass chest, but the sudden *SNAP* of breaking glass indicates you were less than successful.

# FLEAS
#
#                                                                                                                                                                                                                                                            Like a Halfling blowing smoke rings, the brass chest spits several clouds of coarse black powder onto you.  As the powder scurries quickly into your clothing, you realize it was actually a swarm of fleas, and a big one at that!
#                                                                                                                You realize that despite this mishap, the chest still has more to torment you with..
#                                                                                                                                                                                                  Roundtime: 8 sec.
#
# You begin work at disarming the chest.
#                                     Your armor hinders your attempt.
#                                                                 Slowly, you push on the green rune and attempt to move it away from the lock, but your finger slips slightly causing you to rub it.  It glows a bright green then dims and you notice the world around you has gotten much bigger!
#     Roundtime: 9 sec.
# Almost casually, you press on the tiny hammer set to break the tube.  The hammer slips from its locked position and strikes the tube with a tiny "clink", shattering it!  Free from the glass prison, the black substance bursts into a cloud of sweet smelling, multi-hued mist!  You get the feeling that life suddenly got a lot funnier!