=begin
Name: Skinner
author: Crannach
category: loot
game: dr
tags: ruby, lich API, skinning
version: 2015.05.27

This script requires drinfomon.lic to be running

A skinning script. Performs necromancy rituals if you set the appropriate variables to true.
A huge work in progress.
There is a big flaw in the existing code in that if you do not arrange the corpse, the script does not know what you are skinning and will fail

  Version 2015.05.27 - Add character class
=end
# You make a mistake in the arranging process, but manage not to damage the corpse.
# You make a serious mistake in the arranging process, damaging the very trophy you were hoping to get!  The corpse is worthless now
# A small slip at the last moment renders your skinning attempt an unfortunate failure.
#TODO: If wearing skinnable knife, don't wear the shield, sheath the weapon instead
#TODO: If no wearable skinning knife and using a shield then wield the knife, wear the shield and skin
#Todo: Check for bundle, if it doesn't exist, grab a rope and make one

VERSION = "2015.05.30"

class Character
  attr_accessor :guild, :harvest_if_unskinnable, :skinning_tool, :worn_skinning_tool, :weapon, :shield, :arrange_corpses

  def initialize
    fput "info" if DRStats.guild =~ /unknown/
    @arrange_corpses = true # Arrange corpses?
    @skinning_tool = "blade" # Whats your skinning weapon?
    @worn_skinning_tool = false # Is your skinning weapon worn?
    @guild = DRStats.guild
    @shield = GameObj.left_hand.name if GameObj.left_hand.name =~ /shield|sipar/
    @weapon = GameObj.right_hand.name
    @harvest_if_unskinnable = true
  end

  def to_s
    printf("Guild: %s\nWeapon: %s\nShield: %s\n", @guild, @weapon, @shield)
  end

end

class Critter
  attr_accessor :name, :arranged, :skinnable

  def initialize
    @name = nil
    @arranged = false
    @skinnable = nil
  end

end

### Global State
### User Specified Settings
$perform_preserve = true # Necromancers: Do preservation ritual?
$perform_harvest = false # Necromancers: Do harvest ritual?

## Weapons Checker

$shield = GameObj.left_hand.name if GameObj.left_hand.name =~ /shield|sipar/

## Critter
$target = 'goblin'
$bestiary = {
    "goblin shaman" => /goblin shaman/,
    "goblin" => /goblin/
}

## Moonblade Checker
$moonblade = false
$moonblade = true if GameObj.right_hand.name =~ /moonblade/

## Regex
skin_messages = [
    # From best to worst
    # Accomplished with arranging
    /Moving with impressive skill and grace, you effortlessly retrieve a|some perfect .* from the .*/,
    /Your .* moves as a fluid extension of your hand, harnessed to your single-minded drive for a|some .*/,
    /You skillfully peel .* off .*/,
    # Accomplished without arranging
    /With preternatural poise, you work loose a sterling example of a|some .* from the .* carcass/,
    /Working deftly, you skillfully remove .* from the remains of .*/,
    /You slice away a bloody trophy from the dripping flesh that was .*, gaining a|some superior .* for your efforts/,
    /You work diligently at skinning .*, peeling the .* away from the oozing flesh beneath it/,
    /You work hard at peeling .* away from the bloody carcass of .*, managing to get it without too much damage or splashing of gore/,
    /You skin .* fairly well, getting a decent quality .* only slightly tainted with gore and fluids from the carcass/,
    /You struggle with .* and manage to remove the .*/,
    # Cannot be skinned
    /The (?<critter>[a-z]*) cannot be skinned/,
    # Failure
    /You hideously bungle the attempt, destroying the .* corpse in a laughable display of sheer incompetence/,
    /You struggle with the .*, making a bloody mess even bloodier/
    ]
$re_skin = Regexp.union(skin_messages)

### Helper functions

def melee?
  result = dothistimeout('assess', 10, /melee range/)
  if result =~ /melee range/
    return true
  else
    return false
  end
end

def rituals(critter)
  waitrt?
  if $perform_preserve
    preserve_ritual(critter)
  end
  if $perform_harvest
    harvest_ritual(critter)
  end
  waitrt?
end

def preserve_ritual(critter)
  waitrt?
  status = dothis("perform preserve on #{critter.name}", /^You bend over|^Rituals do not work/)
  waitrt?
end

def harvest_ritual(critter)
  waitrt?
  status = dothis("perform harvest on #{critter.name}", /You bend over/)
  waitrt?
  fput("drop mat")
end

def arrange(critter)
  arranged = false
  messages = [
      /The (?<target>[a-z]*) cannot be skinned, so you can't arrange it either\./,
      /You begin to arrange the (?<target>[a-z]*)'s corpse in a manner that, while making the process of obtaining a [a-z]* more difficult, guarantees a greater reward\./,
      /You continue arranging the (?<target>[a-z]*)'s corpse in a manner that, while making the process of obtaining a [a-z]* more difficult, guarantees a greater reward\./,
      /You complete arranging the (?<target>[a-z '-]*) corpse in a manner that, while making the process of obtaining a [a-z]* more difficult, guarantees a greater reward\./,
      /That has already been arranged as much as you can manage\./,
      /You make a mistake in the arranging process, but manage not to damage the corpse/,
      /You make a serious mistake in the arranging process, damaging the very trophy you were hoping to get!  The corpse is worthless now/,
      /Arrange what\?/
  ]
  waitrt?
  message = dothis("arrange", Regexp.union(messages))
  if message =~ /The (?<target>[a-z]*) cannot be skinned, so you can't arrange it either\./
    arranged = true
    critter.name = $1
    critter.skinnable = false
  elsif message =~ /That has already been arranged as much as you can manage\./
    arranged = true
  elsif message =~ /You begin to arrange the (?<target>[a-z]*)'s corpse in a manner that, while making the process of obtaining .* more difficult, guarantees a greater reward\./
    #$target = $1
    critter.name = $1
    critter.skinnable = true if critter.skinnable == nil
    arranged = false
  elsif message =~ /Arrange what\?/
    echo "Boy, you really messed that one up"
    fput 'loot'
    exit
  end
end

def skin
  my_character = Character.new
  critter = Critter.new
  waitrt?
  fput 'retreat'
  waitrt?
  fput 'retreat'
  waitrt?
  if my_character.arrange_corpses
    until arrange critter
      break if not critter.skinnable
    end
  end
  rituals(critter) if my_character.guild == "Necromancer"
  fput "sheath #{my_character.weapon}" if (my_character.weapon != "Empty") and not $moonblade
  fput "wield #{my_character.skinning_tool}" if not ($moonblade or my_character.worn_skinning_tool)
  fput "wear #{my_character.shield}" if my_character.shield and not my_character.worn_skinning_tool
  #FIXME: $perform_harvest is poorly named
  #FIXME: wrapping the
  if not $perform_harvest
    fput 'skin'
    while line = get
      if line =~ $re_skin
        waitrt?
        if (line =~ /The (?<critter>[a-z]*) cannot be skinned\./) && my_character.guild == "Necromancer" and my_character.harvest_if_unskinnable
          harvest_ritual(critter)
        end
        fput "remove #{my_character.shield}" if my_character.shield and not my_character.worn_skinning_tool
        waitrt?
        fput "sheath #{my_character.skinning_tool}" if not $moonblade or my_character.worn_skinning_tool
        fput "wield #{my_character.weapon}" if my_character.weapon != "Empty" and not $moonblade
        break
      end
    end
  end
end
skin
fput 'loot'
