=begin
    Basic self healing script, seems mostly functional but still under work.
    Requires the common.lic and event.lic scripts to be downloaded

    Make sure to open this script and edit your spells to use the appropriate amount of mana
    so you train and heal fast.

    All user configuration is available at the top of the file.
=end

# ***USER CONFIG***

# Specify how much mana to prepare your spells with, and how much to charge into a cambrinth item.
# "mana"=>5, "cambrinth"=> [6,7]
# The above would 'prep spell 5', 'charge my item 6', 'charge my item 7', 'invoke my item'
UserVars.my_spells = {
  'HW' => { 'abbrev' => 'HW', 'mana' => 5,
            'cambrinth' => [5, 5]
      },
  'HS' => { 'abbrev' => 'HS', 'mana' => 10,
            'cambrinth' => [7, 7]
      }
}

# Set one of these two items
UserVars.held_cambrinth = nil # Worn item that needs to be held to charge
UserVars.worn_cambrinth = 'armband' # cambrinth you can charge while wearing.

UserVars.healme_debug = false # turn on echos in the script

# ***END OF USER CONFIG***

class HealMe
  include DRC

  def initialize
    %w(common events).each do |script_name|
      unless running?(script_name)
        start_script script_name
        pause 2
      end
    end
    @wound_map = {
      'insignificant' => 1,
      'negligible' => 2,
      'minor' => 3,
      'more than minor' => 4,
      'harmful' => 5,
      'very harmful' => 6,
      'damaging' => 7,
      'very damaging' => 8,
      'severe' => 9,
      'very severe' => 10,
      'devastating' => 11,
      'very devastating' => 12,
      'useless' => 13
    }

    @deadly_wounds = %w(SKIN HEAD NECK CHEST ABDOMEN BACK)
  end

  def get_wounds
    bput('perc heal self', 'Roundtime')
    data = reget 100
    data = data.reverse.take_while { |item| item != "Your injuries include...\r" }.reverse
    wounds = {}
    part = nil
    data.each do |line|
      if line =~ /Wounds to the (.+):/
        part = Regexp.last_match(1)
        wounds[part] = []
      end
      wounds[part] += [{ 'part' => part, 'location' => Regexp.last_match(2), 'type' => Regexp.last_match(1), 'level' => @wound_map[Regexp.last_match(3)] }] if line =~ /(\w+) (\w+):.*\-\- (.*)\r/
    end
    waitrt?
    wounds
  end

  def severity(wounds)
    wounds.map { |wound| wound['level'] }.inject(&:+)
  end

  def cast_spell(data, part, internal = false)
    pause 1 while checkmana < 25
    Flags.reset('hm-spellcast')
    bput("prepare #{data['abbrev']} #{data['mana']}", '^With tense movements ')
    if data['cambrinth']
      data['cambrinth'].each { |mana| bput("charge my #{UserVars.cambrinth} #{mana}", '^You harness a', 'You are in no condition to do that'); waitrt? }
      bput("invoke my #{UserVars.cambrinth}", 'You reach for its center', 'You are in no condition to do that', 'intact')
    end
    pause 0.5 until Flags['hm-spellcast']
    Flags.reset('hm-partial-heal')
    if internal
      bput("cast #{part} internal", '^You gesture')
    else
      bput("cast #{part}", '^You gesture')
    end
    pause 0.5
    echo "partial: #{Flags['hm-partial-heal']}" if UserVars.healme_debug
    Flags['hm-partial-heal']
  end

  def heal_wound(part, internal)
    pause 0.5 while cast_spell(UserVars.my_spells['HW'], part, internal)
  end

  def heal_scar(part)
    pause 0.5 while cast_spell(UserVars.my_spells['HS'], part)
  end

  def heal_wounds(wounds, skip_parts)
    echo "healing: #{wounds}" if UserVars.healme_debug

    if wounds.count { |wound| wound['type'] == 'Fresh' } > 0
      heal_wound(wounds.first['part'], skip_parts.include?(wounds.first['part']))
    end
    heal_scar(wounds.first['part'])
  end

  def heal_self
    Flags.delete('hm-spellcast')
    Flags.add('hm-spellcast', '^You feel fully prepared to cast your spell\.')

    Flags.delete('hm-partial-heal')
    Flags.add('hm-partial-heal',
              'appear very slightly improved\.',
              'appear slightly improved\.',
              'appear better\.',
              'appear greatly improved\.',
              'appear almost completely healed\.',
              'but it is ineffective\.',
              'appear somewhat better\.',
              'appear considerably better\.'
             )

    fput "remove #{UserVars.held_cambrinth}" if UserVars.held_cambrinth
    UserVars.cambrinth = UserVars.held_cambrinth || UserVars.worn_cambrinth
    wounds = get_wounds

    skip_parts = variable[1..-1]

    skip_parts.map!(&:upcase)

    echo("wounds: #{wounds}") if UserVars.healme_debug
    echo("dw: #{@deadly_wounds}") if UserVars.healme_debug
    danger_wounds = wounds.select { |part, _| @deadly_wounds.include?(part) }.sort_by { |_, val| severity(val) }.reverse

    echo("bad wounds: #{danger_wounds}") if UserVars.healme_debug

    danger_wounds.each do |part, _|
      heal_wounds(wounds[part], skip_parts)
      wounds.delete(part)
    end

    wounds.sort_by { |_, val| severity(val) }.reverse_each { |_, wound| heal_wounds(wound, skip_parts) }
    fput "wear #{UserVars.held_cambrinth}" if UserVars.held_cambrinth
  end
end

HealMe.new.heal_self
