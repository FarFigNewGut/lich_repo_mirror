# quiet
=begin
    Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

    A large set of helper functions for common actions shared by many scripts
=end

$FAILED_COMMAND = '*FAILED*'
$ORDINALS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth thirteenth)

# blocking put
# bput is designed to be a more robust version of fput in situations where you know the desired response from the game
# unlike fput which will resend the same command repeatedly until it sees the desired message first from the game, bput only
# sends a given command one time (unless round time or type ahead errors occur) and then waits for the desired response.
# if the desired response isn't seen bput will eventually time out and echo debugging information.

# fput "forage grass", 'Roundtime' < This would never work because the game sends a response line "You search around..." before "Roundtime" is encountered.

# Similarly a command that can only succeed once can cause fput to hang.
# fput "get box", 'you pick up', 'get what?' < You have to deal with the failure case and just spam
# the command until failure in a noisy room with fput.
# bput "get box", 'you pick up', 'get what?' < lets you know with confidence if a box was picked up or if the item was missing.

module DRC
  def bput(message, *matches)
    timer = Time.now
    log = []
    matches.flatten!
    matches.map! { |item| item.is_a?(Regexp) ? item : /#{item}/i }
    clear
    put message
    while Time.now - timer < 15
      response = get?

      if response.nil?
        pause 0.1
        next
      end

      log += [response]

      case response
      when /(?:\.\.\.wait |Wait |\.\.\. wait )([0-9]+)/
        pause Regexp.last_match(1).to_i
        put message
        timer = Time.now
        next
      when /Sorry, you may only type ahead/
        pause 1
        put message
        timer = Time.now
        next
      when /^You are a bit too busy performing to do that/
        put 'stop play'
        put message
        timer = Time.now
        next
      when /^You are still stunned/
        pause 0.5
        put message
        timer = Time.now
        next
      end

      matches.each do |match|
        if (result = response.match(match))
          return result.to_a.first
        end
      end
    end
    echo '*** No match was found after 15 seconds, dumping info'
    echo "messages seen length: #{log.length}"
    log.each { |message| echo "message: #{message}" }
    echo "checked against #{matches}"
    $FAILED_COMMAND
  end
  module_function :bput

  def wait_for_script_to_complete(name, args = [])
    success = start_script name, args
    if success
      pause 2
      pause 1 while running? name
    end
    success
  end
  module_function :wait_for_script_to_complete

  def remove_armor(armors)
    armors.each do |piece|
      fput "remove my #{piece}"
      fput "stow my #{piece}"
      pause 0.25
    end
  end
  module_function :remove_armor

  def wear_armor(armors)
    armors.each do |piece|
      fput "get my #{piece}"
      fput "wear my #{piece}"
      pause 0.25
    end
  end
  module_function :wear_armor

  def forage(item)
    snapshot = "#{checkright}#{checkleft}"
    while "#{checkright}#{checkleft}" == snapshot
      case bput("forage #{item}", 'Roundtime', 'The room is too cluttered to find anything here', 'You really need to have at least one hand free to forage properly')
      when 'The room is too cluttered to find anything here'
        fput('kick pile')
      when 'You really need to have at least one hand free to forage properly'
        empty_hands
      end
      waitrt?
    end
  end
  module_function :forage

  def hand_over(items, person)
    items.each do |item|
      fput("get my #{item}")
      bput("give #{item} to #{person}", '^You offer your .* to')
      waitfor('has accepted your offer')
    end
  end
  module_function :hand_over

  def rummage(parameter, container)
    result = DRC.bput("rummage /#{parameter} my #{container}", 'but there is nothing in there like that\.', 'looking for .* and see .*', 'While it\'s closed', 'I don\'t know what you are referring to')

    case result
    when 'but there is nothing in there like that.', 'While it\'s closed', 'I don\'t know what you are referring to'
      return []
    end

    text = extract_rummage_text(result)

    list_to_nouns(text)
  end
  module_function :rummage

  def extract_rummage_text(raw)
    raw.match(/looking for .* and see (.*)\.$/).to_a[1]
  end
  module_function :extract_rummage_text

  def get_boxes(container)
    rummage('B', container)
  end
  module_function :get_boxes

  def get_skins(container)
    rummage('S', container)
  end
  module_function :get_skins

  def get_gems(container)
    rummage('G', container)
  end
  module_function :get_gems

  def get_materials(container)
    rummage('M', container)
  end
  module_function :get_materials

  # Take a game formatted list "an arrow, silver coins and a deobar strongbox"
  # And return an array ["an arrow", "silver coins", "a deobar strongbox"]
  # is this ever useful compared to the list_to_nouns?
  def list_to_array(list)
    list.strip.split(/,|\sand\s/)
  end
  module_function :list_to_array

  # Take a game formatted list "an arrow, silver coins and a deobar strongbox"
  # And return an array of nouns ["arrow", "coins", "strongbox"]
  def list_to_nouns(list)
    list_to_array(list)
      .map { |long_name| get_noun(long_name) }
      .compact
      .select { |noun| noun != '' }
  end
  module_function :list_to_nouns

  def get_noun(long_name)
    long_name.strip.scan(/[a-z\-]+$/i).first
  end
  module_function :get_noun

  def empty_hands
    fput 'stow right' until checkright.nil?

    fput 'stow left' until checkleft.nil?
  end
  module_function :empty_hands

  def walk_to(target_room)
    return if target_room.nil?
    room_num = target_room.to_i
    return if room_num == Room.current.id.to_i
    fput('stand') unless checkstanding

    if Room.current.id.nil?
      echo "In an unknown room, manually attempting to navigate to #{room_num}"
      rooms = Map.list.select { |room| room.description.include?(XMLData.room_description.strip) && room.title.include?(XMLData.room_title) }
      if rooms.empty? || rooms.length > 1
        echo 'failed to find a matching room'
        return
      end
      room = rooms.first
      return if room_num == room.id
      if room.wayto["#{room_num}"]
        move room.wayto["#{room_num}"]
        return
      end
      path = Map.findpath(room, Map[room_num])
      move room.wayto["#{path.first}"]
      walk_to(room_num)
      return
    end

    retreat

    start_script 'go2', ["#{room_num}"]
    timer = Time.now
    while running?('go2')
      if (Time.now - timer) > 30
        kill_script 'go2'
        timer = Time.now
        start_script 'go2', ["#{room_num}"]
      end
      pause 0.5
    end

    # Consider just returning this boolean and letting callers decide what to do on a failed move.
    if room_num != Room.current.id.to_i
      echo "Failed to navigate to room #{room_num}, attempting again"
      walk_to room_num
    end
  end
  module_function :walk_to

  # Items class. Name is the noun of the object. Leather/metal boolean. Is the item worn (defaults to true). Does it hinder lockpicking? (false)
  # full description is the line you would see if you looked at your inventory output.
  # combat is if the item should be worn before engaging in combat.
  # Item.new(name:'gloves', leather:true, hinders_locks:true, description:'some coarse gargoyle-hide gloves with fitted seams', combat:true)
  class Item
    attr_accessor :name, :is_leather, :is_worn, :hinders_lockpicking, :description, :combat, :container, :swappable

    def initialize(name:nil, leather:nil, worn:true, hinders_locks:nil, description:nil, combat:nil, container:nil, swappable:false)
      @name = name
      @is_leather = leather
      @is_worn = worn
      @hinders_lockpicking = hinders_locks
      @description = description
      @combat = combat
      @container = container
      @swappable = swappable
    end

    def is_leather?
      @is_leather
    end

    def is_worn?
      @is_worn
    end

    attr_reader :name

    def hinders_lockpicking?
      @hinders_lockpicking
    end

    attr_reader :description

    def combat?
      @combat
    end
  end

  class SpellData
    attr_accessor :name, :abbrev, :min_prep, :cyclical, :after, :needs_moon, :cast, :expire, :skill, :cast_message, :before, :prep_message

    def initialize(name:nil, abbrev:nil, min_prep:nil, cyclical:nil, after:nil, needs_moon:nil, cast:nil, expire:nil, skill:nil, cast_message:nil, before:nil, prep_message:nil)
      @name = name
      @abbrev = abbrev
      @min_prep = min_prep
      @cyclical = cyclical
      @after = after
      @needs_moon = needs_moon
      @cast = cast
      @expire = expire
      @skill = skill
      @cast_message = cast_message
      @before = before
      @prep_message = prep_message
    end
  end

  @@Spells = {
    'EY' => SpellData.new(name: 'Essence of Yew')
  }

  class Spell
    attr_accessor :mana, :cambrinth, :snap, :symbiosis

    def initialize(abbrev:nil, spell_data:nil, mana:nil, cambrinth:nil, snap:false, symbiosis:nil)
      if abbrev
        @data = DRC.Spells[abbrev.upcase] || DRC.Spells.find { |key, _val| /^#{abbrev}/i =~ key }.last
      else
        @data = spell_data
      end
      fail(ArgumentError, 'Spell requires a known name or spell data object') unless @data
    end

    def method_missing(method, *args, &block)
      @data.__send__ method, *args, &block
    end
  end

  # windows only I believe.
  def beep
    echo("\a")
  end
  module_function :beep

  def retreat
    escape_messages = ['You are already as far away as you can get', 'You retreat from combat', 'You sneak back out of combat']
    result = nil
    until escape_messages.include?(result = bput('retreat', *(escape_messages + ['retreat', 'You try to back ', 'sneak', 'grip remains solid', 'You must stand first', 'grip on you', 'You stop advancing'])))
      fput('stand') if result == 'You must stand first'
    end
  end
  module_function :retreat

  def dispose_trash(item)
    trashcan = DRRoom.room_objs
               .map { |long_name| get_noun(long_name) }
               .find { |obj| UserVars.trash_storage.include?(obj) }
    if trashcan == 'gloop'
      trashcan = 'bucket' if DRRoom.room_objs.include? 'bucket of viscous gloop'
      trashcan = 'cauldron' if DRRoom.room_objs.include? 'small bubbling cauldron of viscous gloop'
    end

    if trashcan
      bput("put my #{item} in #{trashcan}", '^You drop')
    else
      fput "drop my #{item}"
    end
  end
  module_function :dispose_trash

  def bind_wound(part, person="my")
    bput("tend #{person} #{part}", 'You work carefully at tending', 'That area has already been tended to', 'That area is not bleeding')
    waitrt?
  end
  module_function :bind_wound

  def unwrap_wound(part)
    waitrt?
    case bput("unwrap my #{part}", 'You unwrap your bandages') # Are there other messages?
    when $FAILED_COMMAND
      pause 5
      bind_wound(part)
    end
    waitrt?
  end
  module_function :unwrap_wound

  def minimize_coins(copper)
    coins = copper.to_s.reverse
    coins = coins.scan(/(?:\d*\.)?\d{1,4}-?/) # if it has plats move them to their own index
    coins[1] = coins[1].reverse + ' platinum' if coins[1]
    coins[0] = coins[0].scan(/\d/)
    coins[0][3] = coins[0][3] + ' gold' if coins[0][3]
    coins[0][2] = coins[0][2] + ' silver' if coins[0][2]
    coins[0][1] = coins[0][1] + ' bronze' if coins[0][1]
    coins[0][0] = coins[0][0] + ' copper'

    coins[0].delete_if { |x| x =~ /0/ }
    coins[0].reverse!
    coins[0].flatten!
    coins.reverse
      .flatten
  end
  module_function :minimize_coins

  def convert_to_copper(amt, denomination)
    if 'platinum' =~ /^#{denomination}/
      return (amt.to_i * 10_000)
    elsif 'gold' =~ /^#{denomination}/
      return (amt.to_i * 1000)
    elsif 'silver' =~ /^#{denomination}/
      return (amt.to_i * 100)
    elsif 'bronze' =~ /^#{denomination}/
      return (amt.to_i * 10)
    else
      return amt
    end
  end
  module_function :convert_to_copper

  def get_wealth
    fput 'wealth'
    wealth = matchfind '\\(? copper Kronars\\)\\.', 'No Kronars?'
    wealth == '.' ? 0 : wealth
  end
  module_function :get_wealth

  def ensure_copper_on_hand(copper)
    wealth = get_wealth
    return if wealth.to_i >= copper
    walk_to 1900
    withdrawals = minimize_coins(copper)
    withdrawals.each { |amount| fput "withdraw #{amount}" }
  end
  module_function :ensure_copper_on_hand

  def find_empty_room?(rooms, predicate = true)
    rooms.each do |room_id|
      walk_to(room_id)
      return true if checkpcs.nil? && predicate.call
    end
    false
  end
  module_function :find_empty_room?
end

UserVars.box_nouns = %w(coffer strongbox chest caddy trunk casket skippet crate box)

UserVars.gem_nouns = %w(tsavorite zircon quartz chalcedony diopside coral moonstone onyx topaz amber pearl chryso
                        lazuli turquoise bloodstone hematite morganite sapphire agate carnelian diamond crystal emerald
                        ruby tourmaline tanzanite jade ivory sunstone iolite beryl garnet alexandrite amethyst citrine
                        aquamarine star-stone crystal kunzite stones spinel opal peridot andalusite)

UserVars.treasure_nouns = %w(map scroll bark parchment)

UserVars.trash_nouns = %w(leaf pestle mortar label runestone flower flowers arrowhead root stem grass needle sap glue hilt thread flint nugget dira)

UserVars.trash_storage = %w(bin gloop barrel bucket)
