=begin
 
    This script runs non-combat tasks (except halfling poke) for sleeping dragon maze.  You start it for EACH task from the room 3 east of entrance. This version only loots passes.
	Note: This requires stormfront.
 
=end

custom_require.call(%w(common drinfomon textsubs common-travel events common-items))
 
$done = false
$task_count = 0
$type_ahead_size = 1
$current_type_ahead = 0
$looting = true
 
$maze_path = ['south', 'south', 'south', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'go tunnel', 'east', 'south', 'south', 'southeast', 'southeast', 'go tunnel', 'southwest', 'southwest', 'south', 'south', 'go tunnel', 'north', 'north', 'go tunnel', 'north', 'east', 'north', 'west', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']
 
$mice_path = ['east', 'east', 'south', 'west', 'east', 'south', 'west', 'west', 'south', 'west', 'north', 'north', 'west', 'west', 'south', 'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'go tunnel', 'east', 'south', 'south', 'southeast', 'southeast', 'go tunnel', 'southwest', 'southwest', 'south', 'south', 'go tunnel', 'north', 'north', 'go tunnel', 'north', 'east', 'north', 'west', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']
 
$scream_path = ['scream', 'south', 'south', 'south', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'go tunnel', 'scream', 'east', 'south', 'south', 'southeast', 'southeast', 'northeast', 'northeast', 'go tunnel', 'scream', 'go tunnel', 'southwest', 'southwest', 'go tunnel', 'scream', 'southwest', 'southwest', 'south', 'south', 'go tunnel', 'scream', 'north', 'north', 'go tunnel', 'north', 'east', 'north', 'west', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']
 
$landmark_path = ['east', 'east', 'east', 'east', 'west', 'west', 'south', 'south', 'west', 'west', 'south', 'west', 'north', 'north', 'west', 'west', 'south', 'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'east', 'south', 'west', 'south', 'go tunnel', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'north', 'north', 'north', 'east', 'south', 'east', 'north', 'east', 'east', 'south', 'south', 'south', 'east', 'east', 'east', 'north', 'north', 'east', 'west', 'west', 'north', 'south', 'west', 'north', 'west', 'west', 'north', 'west', 'west', 'west', 'north', 'north', 'north', 'north', 'north', 'go tunnel', 'north', 'north', 'northeast', 'northeast', 'go tunnel', 'northwest', 'northwest', 'north', 'north', 'north', 'south', 'west', 'go tunnel', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']
 
$full_path = [
  'west', 'west', 'west', 'east', 'east', 'east', 'loot',
  'south', 'east', 'west', 'north', 'east', 'east', 'east', 'east', 'southwest', 'north', 'west', 'south', 'loot',
  'south', 'loot',
  'southwest', 'north', 'west', 'south', 'west', 'north', 'loot',
  'north', 'west', 'west', 'south', 'loot',
  'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'loot',
  'west', 'west', 'south', 'east', 'east', 'loot',
  'west', 'south', 'north', 'west', 'south', 'south', 'south', 'loot',
  'south', 'south', 'south', 'south', 'loot',
  'east', 'west', 'south', 'east', 'east', 'west', 'south', 'loot',
  'west', 'south', 'go tunnel', 'south', 'loot',
  'south', 'loot',
  'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'north', 'north', 'loot',
  'north', 'east', 'south', 'loot',
  'south', 'east', 'east', 'north', 'loot',
  'south', 'west', 'west', 'north', 'east', 'north', 'east', 'east', 'south', 'south', 'south', 'loot',
  'east', 'east', 'east', 'north', 'north', 'loot',
  'east', 'west', 'west', 'north', 'loot',
  'south', 'west', 'south', 'loot',
  'north', 'north', 'west', 'west', 'north', 'west', 'loot',
  'west', 'west', 'north', 'north', 'north', 'north', 'north', 'go tunnel', 'north', 'north', 'loot',
  'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
  'northwest', 'north', 'north', 'west', 'east', 'north', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'loot',
  'north', 'southeast', 'loot',
  'south', 'southwest', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
  'southwest', 'southwest', 'south', 'southeast', 'southeast', 'west', 'east', 'north', 'northwest', 'north', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'southwest', 'south', 'southwest', 'loot',
  'southwest', 'southwest', 'southwest', 'southwest', 'northeast', 'east', 'south', 'north', 'southeast', 'north', 'loot',
  'north', 'east', 'north', 'south', 'south', 'southwest', 'southwest', 'northwest', 'loot',
  'southeast', 'go tunnel', 'northeast', 'south', 'northeast', 'northeast', 'northeast', 'loot',
  'north', 'north', 'north', 'northeast', 'northeast', 'loot',
  'northeast', 'northeast', 'east', 'east', 'east', 'east', 'east', 'loot',
  'east', 'southwest', 'west', 'west', 'west', 'west', 'loot',
  'southwest', 'southwest', 'southwest', 'southwest', 'south', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'east', 'southwest', 'southwest', 'southwest', 'loot',
  'southwest', 'southwest', 'south', 'east', 'southwest', 'west', 'north', 'southwest', 'loot',
  'south', 'north', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
  'west', 'northeast', 'southwest', 'east', 'northeast', 'east', 'northeast', 'east', 'northeast', 'west', 'east', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'loot',
  'north', 'northeast', 'northeast', 'southwest', 'go tunnel', 'south', 'loot',
  'south', 'west', 'southwest', 'loot',
  'east', 'north', 'east', 'north', 'north', 'east', 'east', 'south', 'loot',
  'north', 'north', 'north', 'loot',
  'north', 'east', 'south', 'east', 'loot',
  'west', 'south', 'east', 'east', 'north', 'loot',
  'south', 'south', 'south', 'west', 'south', 'west', 'south', 'east', 'east', 'loot',
  'south', 'south', 'west', 'south', 'west', 'south', 'loot',
  'east', 'south', 'loot',
  'north', 'west', 'north', 'north', 'north', 'west', 'loot',
  'east', 'south', 'west', 'loot',
  'south', 'go tunnel', 'west', 'northwest', 'north', 'loot',
  'southwest', 'west', 'northwest', 'loot',
  'southeast', 'east', 'east', 'southeast', 'southeast', 'south', 'loot',
  'southeast', 'southeast', 'southeast', 'southeast', 'loot',
  'northwest', 'south', 'south', 'south', 'southwest', 'southwest', 'loot',
  'west', 'west', 'west', 'west', 'west', 'southwest', 'loot',
  'go tunnel', 'south', 'south', 'west', 'west', 'east', 'east', 'east', 'loot',
  'east', 'west', 'north', 'east', 'east', 'south', 'east', 'north', 'north', 'east', 'loot',
  'east', 'east', 'north', 'east', 'north', 'south', 'south', 'south', 'loot',
  'west', 'south', 'loot',
  'west', 'west', 'north', 'east', 'west', 'west', 'south', 'west', 'north', 'north', 'loot',
  'west', 'west', 'west', 'go tunnel', 'southwest', 'southwest', 'southwest', 'north', 'northeast', 'loot',
  'northeast', 'northeast', 'east', 'east', 'loot',
  'east', 'east', 'northeast', 'loot',
  'go tunnel', 'north', 'loot',
  'west', 'northwest', 'east', 'northwest', 'west', 'northwest', 'east', 'loot',
  'northwest', 'west', 'east', 'north', 'south', 'west', 'southwest', 'southwest', 'west', 'northeast', 'loot',
  'west', 'northeast', 'west', 'northeast', 'east', 'north', 'northeast', 'loot',
  'southwest', 'west', 'west', 'west', 'southwest', 'southwest', 'southwest', 'loot',
  'west', 'northeast', 'southwest', 'west', 'northeast', 'east', 'loot',
  'northeast', 'north', 'east', 'west', 'southwest', 'west', 'southwest', 'loot',
  'go tunnel', 'southwest', 'south', 'southeast', 'east', 'east', 'east', 'northwest', 'loot',
  'east', 'southeast', 'east', 'northwest', 'southeast', 'loot',
  'east', 'southeast', 'east', 'southeast', 'west', 'loot',
  'west', 'west', 'southwest', 'west', 'loot',
  'northeast', 'northwest', 'southeast', 'southwest', 'west', 'northeast', 'west', 'west', 'west', 'loot',
  'west', 'west', 'northwest', 'northwest', 'north', 'north', 'north', 'loot',
  'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
  'northwest', 'north', 'north', 'west', 'go tunnel', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']
 
$poke_path = [
  'south', 'south', 'south', 'south', 'west', 'west', 'west',
  'south', 'south', 'south', 'south', 'south', 'go tunnel',
  'east', 'south', 'south', 'southeast', 'southeast', 'go tunnel', 'southwest', 'southwest', 'south', 'south',
  'north', 'north', 'loot',
  'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
  'northwest', 'north', 'north', 'west', 'east', 'north', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'loot',
  'north', 'southeast', 'loot',
  'south', 'southwest', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
  'southwest', 'southwest', 'south', 'southeast', 'southeast', 'west', 'east', 'north', 'northwest', 'north', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'southwest', 'south', 'southwest', 'loot',
  'southwest', 'southwest', 'southwest', 'southwest', 'northeast', 'east', 'south', 'north', 'southeast', 'north', 'loot',
  'north', 'east', 'north', 'south', 'south', 'southwest', 'southwest', 'northwest', 'loot',
  'southeast', 'go tunnel', 'northeast', 'south', 'northeast', 'northeast', 'northeast', 'loot',
  'north', 'north', 'north', 'northeast', 'northeast', 'loot',
  'northeast', 'northeast', 'east', 'east', 'east', 'east', 'east', 'loot',
  'east', 'southwest', 'west', 'west', 'west', 'west', 'loot',
  'southwest', 'southwest', 'southwest', 'southwest', 'south', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'east', 'southwest', 'southwest', 'southwest', 'loot',
  'southwest', 'southwest', 'south', 'east', 'southwest', 'west', 'north', 'southwest', 'loot',
  'south', 'north', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
  'west', 'northeast', 'southwest', 'east', 'northeast', 'east', 'northeast', 'east', 'northeast', 'west', 'east', 'loot',
  'northeast', 'northeast', 'northeast', 'northeast', 'loot',
  'north', 'northeast', 'northeast', 'southwest',
  'southwest', 'south', 'southwest', 'southwest', 'southwest', 'southwest',
  'go tunnel', 'east', 'southeast', 'east', 'east', 'southeast', 'southeast',
  'south', 'southeast', 'southeast', 'southeast',
  'south', 'south', 'south', 'southwest', 'southwest', 'loot',
  'west', 'west', 'west', 'west', 'west', 'southwest', 'loot',
  'go tunnel', 'south', 'south', 'west', 'west', 'east', 'east', 'east', 'loot',
  'east', 'west', 'north', 'east', 'east', 'south', 'east', 'north', 'north', 'east', 'loot',
  'east', 'east', 'north', 'east', 'north', 'south', 'south', 'south', 'loot',
  'west', 'south', 'loot',
  'west', 'west', 'north', 'east', 'west', 'west', 'south', 'west', 'north', 'north', 'loot',
  'west', 'west', 'west', 'go tunnel', 'southwest', 'southwest', 'southwest', 'north', 'northeast', 'loot',
  'northeast', 'northeast', 'east', 'east', 'loot',
  'east', 'east', 'northeast', 'loot',
  'go tunnel', 'north', 'loot',
  'west', 'northwest', 'east', 'northwest', 'west', 'northwest', 'east', 'loot',
  'northwest', 'west', 'east', 'north', 'south', 'west', 'southwest', 'southwest', 'west', 'northeast', 'loot',
  'west', 'northeast', 'west', 'northeast', 'east', 'north', 'northeast', 'loot',
  'southwest', 'west', 'west', 'west', 'southwest', 'southwest', 'southwest', 'loot',
  'west', 'northeast', 'southwest', 'west', 'northeast', 'east', 'loot',
  'northeast', 'north', 'east', 'west', 'southwest', 'west', 'southwest', 'loot',
  'go tunnel', 'southwest', 'south', 'southeast', 'east', 'east', 'east', 'northwest', 'loot',
  'east', 'southeast', 'east', 'northwest', 'southeast', 'loot',
  'east', 'southeast', 'east', 'southeast', 'west', 'loot',
  'west', 'west', 'southwest', 'west', 'loot',
  'northeast', 'northwest', 'southeast', 'southwest', 'west', 'northeast', 'west', 'west', 'west', 'loot',
  'west', 'west', 'northwest', 'northwest', 'north', 'north', 'north', 'loot',
  'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
  'northwest', 'north', 'north', 'west', 'go tunnel', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']
 
 
$halfling_path = ['west', 'west', 'west', 'east', 'east', 'east', 'south', 'east', 'west', 'north', 'east', 'east', 'east', 'east', 'southwest', 'north', 'west', 'south', 'south', 'southwest', 'north', 'west', 'south', 'west', 'north', 'north', 'west', 'west', 'south', 'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'west', 'west', 'south', 'east', 'east', 'west', 'south', 'north', 'west', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'east', 'west', 'south', 'east', 'east', 'west', 'south', 'west', 'south', 'north', 'east', 'north', 'west']
 
Flags.add('maze_done', 'leads you through the twisting passages and brings you to the exit')
Flags.add('Task_done', '10 of 10', '10 of the 10', '5 of the 5', '5 of 5', 'return to one of the Halflings and ASK HALFLING ABOUT TASK again')
 
def wait_for_command
  Flags.reset('Task_done')
  Flags.add('scarecrow', 'need to BUILD SCARECROW')
  Flags.add('mice', 'need to WAVE to scare off the mice')
  Flags.add('weeds', 'need to walk around the maze and PULL WEED')
  Flags.add('traps', 'need to first SEARCH out a trap in each room')
  Flags.add('grasshoppers', 'need to SEARCH in the rooms to find and catch the grasshoppers')
  Flags.add('scream', 'need to move to different rooms in the maze and SCREAM')
  Flags.add('landmarks', 'need to go around finding landmarks')
  Flags.add('tokens', 'move around and SEARCH to find golden tokens')
  Flags.add('corn', 'need to FORAGE CORN inside the maze')
  Flags.add('halflings', 'need to go up to each Halfling and POKE them')
  Flags.add('loot', 'You are not currently on a task in the Corn Maze')
 
  fput "TASK"
  pause 2
  if Flags['scarecrow']
    scarecrow_task
  elsif Flags['mice']
    mice_task
  elsif Flags['weeds']
    weeds_task
  elsif Flags['traps']
    traps_task
  elsif Flags['grasshoppers']
    grasshopper_task
  elsif Flags['scream']
    scream_task
  elsif Flags['landmarks']
    landmarks_task
  elsif Flags['tokens']
    tokens_task
  elsif Flags['corn']
    corn_task
  elsif Flags['halflings']
    halfling_task
  elsif Flags['loot']
    loot_task
  else
    echo "COMBAT TASK - CANCELING"
	cancel_task
  end
end

def cancel_task
  DRC.bput 'TASK CANCEL', 'TASK CANCEL again in 30 seconds', 'Your current task has been canceled'
  DRC.bput 'TASK CANCEL', 'TASK CANCEL again in 30 seconds', 'Your current task has been canceled'
  pause 300
  get_task
end  

def traps_task
  Flags.add('poisoned', 'You choke and gag on the poisonous gas')
  $maze_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      case DRC.bput('search', 'You don\'t think there are any traps here', 'tiny black dots are jumping around inside', 'You notice', 'already looked for traps around here')
      when 'You notice'
        waitrt?
        fput 'disarm trap'
        while checkstunned || checkwebbed
          pause 1
        end
        waitrt?
        while !checkstanding
          fput 'stand'
        end
        DRC.fix_standing
      end
      custom_move "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  Flags.delete('poisoned')
  reset_flags
end
 
def scarecrow_task
  Flags.add('scarecrow_done', 'You put the finishing touches')
  Flags.add('already_built', 'already built a scarecrow here')
  $maze_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      if !DRRoom.room_objs.include? "corn husk scarecrow"
        while !Flags['scarecrow_done'] && !Flags['maze_done']
          fput "build scarecrow"
          pause 1
          waitrt?
        end
      end
    end
    custom_move "#{x}"
    Flags.reset('scarecrow_done')
  end
  reset_flags
end
 
def mice_task
  $mice_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      fput 'wave'
      pause 1
      waitrt?
      DRC.fix_standing
      fput "TASK"
      custom_move "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  reset_flags
end
 
def scream_task
  $scream_path.each do |x|
    exit if Flags['maze_done']
    if x == 'scream'
      wait_on_done_move
      fput "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  reset_flags
end
 
def weeds_task
  $maze_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      fput 'pull weeds'
      pause 1
      waitrt?
      while !checkstanding
        fput 'stand'
      end
      DRC.fix_standing
      fput "TASK"
      custom_move "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  reset_flags
end
 
def corn_task
  $maze_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      fput 'forage corn'
      pause 1
      waitrt?
      DRC.fix_standing
      fput "TASK"
      custom_move "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  reset_flags
end
 
def tokens_task
  $maze_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      fput 'search'
      pause 1
      waitrt?
      DRC.fix_standing
      fput "TASK"
      custom_move "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  reset_flags
end
 
def grasshopper_task
  $mice_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      fput 'search'
      pause 1
      waitrt?
      DRC.fix_standing
      custom_move "#{x}"
      fput "TASK"
    else
      custom_move("#{x}",true)
    end
  end
  echo "TURN IN TASK THEN RETURN HERE!"
  reset_flags
end
 
def landmarks_task
  $landmark_path.each do |x|
    exit if Flags['maze_done']
    if !Flags['Task_done']
      if DRRoom.room_objs.count > 0
        touch_room
      end
      custom_move "#{x}"
    else
      custom_move("#{x}",true)
    end
  end
  reset_flags
end
 
def touch_room
  targets = DRRoom.room_objs.grep(/rake|stones|hay|wood|basket|boulder|wheel|spiderweb|straw|statue|pail|fence|wagon|burrow|hut|scarecrow/)
  targets.each do |target|
    put("touch #{target.split.last}")
  end
end
 
def halfling_task
  $poke_path.each do |x|
    next if x == 'loot'
    exit if Flags['maze_done']
    if DRRoom.npcs.include? 'Halfling'
      fput 'poke halfling'
      pause
      put('TASK')
    end
    if DRRoom.npcs.include? 'Gor\'Tog'
      fput 'poke gor\'tog'
      while checkstunned
        pause 2
      end
      waitrt?
      while !checkstanding
        fput 'stand'
      end
      DRC.fix_standing
      pause 1
      put('TASK')
    end
    unless Flags['Task_done']
      custom_move "#{x}"
    else
      custom_move("#{x}", true)
    end
  end
  reset_flags
end
 
def loot_task
  $looting = false
  $full_path.each do |x|
    exit if Flags['maze_done']
    if x == 'loot'
      wait_on_done_move
      loot_room
    else
      custom_move("#{x}",true)
    end
  end
  reset_flags
end
 
def loot_room
  pause 0.1 until XMLData.room_count != $last_looted
  targets = DRRoom.room_objs.grep(/rake|stones|hay|wood|basket|boulder|wheel|spiderweb|straw|statue|pail|fence|wagon|burrow|hut/)
  targets.each do |target|
    if /manage/ =~ DRC.bput("search #{target.split.last}", "Sadly, you don't find anything", 'You manage to find', 'already been picked clean', 'I could not find what you were referring to', 'not in any condition', 'nothing of special interest about it')
      if DRC.right_hand.include?('pass') || DRC.left_hand.include?('pass')
        fput("stow #{checkright || checkleft}") if DRC.left_hand || DRC.right_hand
      else
        fput("drop #{checkright || checkleft}") if DRC.left_hand || DRC.right_hand
      end
    end
  end
  $last_looted = XMLData.room_count
end
 
def wait_on_done_move
  last_room = XMLData.room_count
  pause 0.5
  while last_room != XMLData.room_count
    last_room = XMLData.room_count
    pause 0.5
  end
end
 
def get_task
  wait_on_done_move
  $halfling_path.each do |x|
    exit if Flags['maze_done']
    if DRRoom.npcs.include? 'Halfling'
      break
    else
      custom_move "#{x}"
    end
  end
  fput 'ask halfling about task'
  echo "Task count = #{$task_count}"
  if $looting == false
    fput 'ask halfling for task'
  end
  $done = false
  find_start
  $done = false
  wait_for_command
end
 
def find_start
  wait_on_done_move
  until $done
    exit if Flags['maze_done']
    find_exits = DRC.bput("look",/Obvious paths: .*\./,)
    exits = find_exits.match(/^Obvious paths: (.*)\./).to_a[1].split(', ')
    if (exits.include? 'north')
      custom_move 'north'
    elsif (exits.include? 'east')
      custom_move 'east'
    elsif (exits.include? 'south')
      custom_move 'south'
      custom_move 'south'
      custom_move 'east'
    elsif exits.include?('west') && !exits.include?('southwest') && !exits.include?('east') && !exits.include?('south') && !exits.include?('north') && !exits.include?('southeast') && !exits.include?('northwest') && !exits.include?('northeast')
      custom_move 'west'
      custom_move 'west'
    elsif ((exits.include? 'west') && (exits.include? 'southwest'))
      custom_move 'west'
      custom_move 'west'
      custom_move 'west'
      custom_move 'west'
      $done = true
    end
  end
end
 
def reset_flags
  Flags.reset('scarecrow')
  Flags.reset('mice')
  Flags.reset('weeds')
  Flags.reset('traps')
  Flags.reset('grasshoppers')
  Flags.reset('scream')
  Flags.reset('landmarks')
  Flags.reset('tokens')
  Flags.reset('corn')
  Flags.reset('halflings')
  Flags.reset('loot')
  $task_count = $task_count + 1
  get_task
end
 
def custom_move(dir, fast=false)
  if fast
    put dir
    $current_type_ahead += 1
    if $type_ahead_size < $current_type_ahead
      pause 0.35
      $current_type_ahead = 0
    end
  else
    move dir
  end
end

def initial_loot
  $looting = true
end
 
 
if script.vars.include?('no loot') || script.vars.include?('noloot')
  $looting = false
end
find_start
get_task
