=begin
  Author: Chuno
    - Yes I'm a Barb, shut up.
  Version:
    v1.0.0 - 6/23/2019
      - Initial Release
    v1.0.1 - 7/21/2019
      - Removed initial settings variable, wasn't used
      - Minor output edits for clarity
    v1.0.2 - 8/2/2019
      - Added support for auto mana
      - Added support for a max training time

  Dragonrealms Magic Training Script
  This is mainly useful in befores and afters (You should set a go2 room). It doesn't use combat_spell_training:
    Reason: It supports sorcery
    Requirements:
      Dependency: https://elanthipedia.play.net/Dependency 
      You can remove or add any of the magics listed below and it will adjust.
      YAML Setup with a "magic_training" section:
        magic_training
          Augmentation:
            abbrev: sap
            symbiosis: true
            cast: cast debil
            mana: 25
            cambrinth:
            - 25
          Warding:
            abbrev: maf
            symbiosis: true
            mana: 25
            cambrinth:
            - 25
          Utility:
            abbrev: bless
            symbiosis: true
            mana: 25
            cambrinth:
            - 25
          Sorcery:
            abbrev: pg
            symbiosis: false
            mana: 15
            cambrinth:
            - 15
      YAML before example:
        hunting_info:
        - :zone:
          - void_moths
          - cabalist
          - archons
          args:
          - d0
          before:
          - go2 1234
          - magic-training
          stop_on:
          - Targeted Magic
          - Debilitation
          stop_on_low:
          - Athletics
          - Locksmithing

  Note:
    You can change and save settings on the fly, and the trainer will adjust the 
      new mana levels/spell on the next time through. 
        * This is very useful for finding max training limits for spells
    You can use auto mana for training
    You can add a max timer, in minutes, that you will want to train. It will exit
      if that timer is surpassed. The below example will train for 20 minutes max.
        * ;magic-training 20 
=end

@@time_in = Time.now
@@aug_in = DRSkill.getxp('Augmentation')
@@ward_in = DRSkill.getxp('Warding')
@@util_in = DRSkill.getxp('Utility')
@@sorc_in = DRSkill.getxp('Sorcery')

custom_require.call(%w[common common-arcana])

class MagicTraining
  include DRC
  include DRCA

  def initialize
    #Change these values to whatever you want in your yaml, or use these defaults
    #stops training if mana falls below threshold and waits for more mana
    mana_threshold = get_settings.training_spell_mana_threshold || 40 #percentage
    #stops training specfic skill after threshold, and quits program when all are above
    exp_threshold = get_settings.combat_spell_training_max_threshold || 20 

    arg_definitions = [
      [
        { name: 'timer', regex: /\d+/, description: 'Max time, in minutes, spent in Magic-Training. (Optional)' }
      ],
      []
    ]

    args = parse_args(arg_definitions)

    pause

    max_time = args.timer*60 if args.timer # Timer in minutes

    loop do
      if max_time
        if Time.now - @@time_in > max_time
          echo "Max time alloted for Magic Training reached. Now exiting..."
          exit
        end
      end

      if mana > mana_threshold
        return unless train_magics(mana_threshold, exp_threshold)
      else
        echo "Waiting for mana..."
        pause 10
      end
    end
  end

  def train_magics(mana_threshold, exp_threshold)
    settings = get_settings # This is reassigned purposely so you can adjust this on the fly, it's great for finding mana values
    magics = settings.magic_training
    skills_to_train = magics.keys
                            .select { |skill| %w[Utility Warding Augmentation Sorcery].include? skill }
                            .reject { |skill| DRSkill.getxp(skill) > exp_threshold }
                            .sort_by { |skill| DRSkill.getxp(skill) }
    
    return false if skills_to_train.empty?

    skills_to_train.each  { |skill|
                            # Get settings here so I can update on the fly
                            echo "Next skill to train: #{skill}"
                            spell_data = magics[skill]
                            before_xp = DRSkill.getxp(skill)
                            if mana < mana_threshold
                              echo "Waiting on mana... Current Mana %: #{mana}"  
                              pause 2 until mana > mana_threshold
                            end
                            check_discern(spell_data, settings) if spell_data['use_auto_mana']
                            cast_spell(spell_data, settings, true)
                            echo "#{skill} gains: #{DRSkill.getxp(skill) - before_xp}"
                          }
    true
  end
end

before_dying do
  fput('release spell')
  fput('release sym')

  total_time = (Time.now - @@time_in) / 60
  echo "Total time in Magic-Training: #{total_time.to_i} minutes."
  echo "Total xp gained in Augmentation: #{DRSkill.getxp('Augmentation') - @@aug_in}"
  echo "Total xp gained in Warding: #{DRSkill.getxp('Warding') - @@ward_in}"
  echo "Total xp gained in Utility: #{DRSkill.getxp('Utility') - @@util_in}"
  echo "Total xp gained in Sorcery: #{DRSkill.getxp('Sorcery') - @@sorc_in}"
end

MagicTraining.new