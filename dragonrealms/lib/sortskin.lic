=begin
  Search a container for skins. Removes skin, does a careful appraise, and sorts the skins based on the quality level you're looking for.
  TODO:
  - Add more sell response matches
=end

custom_require.call(%w[common common-items])

class SkinSort
  def initialize
    arg_definitions = [
      [
        { name: 'skin', regex: /\w+/i, optional: false, description: 'REQUIRED: Type of skin to look for (hide, pelt, etc.)' },
        { name: 'source', regex: /\w+/i, optional: false, description: 'REQUIRED: Source container for the skins (bundle, backpack, etc.)' },
        { name: 'qdest', regex: /\w+/i, optional: false, description: 'REQUIRED: Destination for quality skins' },
        { name: 'pdest', regex: /\w+/i, optional: false, description: 'REQUIRED: Destination for poor skins' },
        { name: 'quality', regex: /\d+/i, optional: false, description: 'REQUIRED: Quality Threshold' },
        { name: 'sell', regex: /sell/i, optional: true, description: 'OPTIONAL: If standing at a furrier, can set this to "sell" to sell skins that are below the specified threshold after appraising' }
      ]
    ]

    args = parse_args(arg_definitions)
	  @skin = args.skin
    @source = args.source
    @qdest = args.qdest
	  @pdest = args.pdest
	  @quality = args.quality = args.quality.to_i
    @sell = args.sell
    
    if args.source == args.pdest || args.qdest
      DRC.message('Source and destination containers cannot be identical')
      exit
    end

    DRCI.stow_hands
    while DRCI.get_item?(args.skin, args.source)
      appraise(args.skin, args.qdest, args.pdest, args.quality)
    end

    DRC.message("Done sorting your #{args.skin}s.")
  end

  def appraise(skin, qdest, pdest, quality)
    /(\d+)/ =~ DRC.bput("appraise my #{skin} careful", 'has a quality of \d+')
	  value = Regexp.last_match(1).to_i
	  if value >= quality
	    DRC.bput("put my #{skin} in my #{qdest}", 'You put')
    elsif @sell == "sell"
      DRC.bput("sell my #{skin}", 'You ask')
	  else
	    DRC.bput("put my #{skin} in my #{pdest}", 'You put')
	  end
  end
end

SkinSort.new
