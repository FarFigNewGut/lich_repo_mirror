# author: Slarc
#  Manage resting state, script will toggle to a deep sleep as soon as REXP is drained to
#  prepare for the next cycle.
#
#  Allows you to more efficiently script for extended periods of time, and updates
#  UserVars.rexp_mode to be inline with whether or not it's gaining REXP. Use this variable in your
#  scripts to allow them to be more lenient with experience gain while your character is sleeping.
#  
#   Required YAML settings:
#     Enter your rexp cap amount.
#     rexp_hours = 4 


custom_require.call("common")
include DRC

class RexpManager
  
  def initialize
    @settings = get_settings
    @buffer_time = Time.new 
    @FULL_REXP = (@settings.rexp_hours || 4) * 60
    @gathering_rexp = false
    @BUFFER = 5
    debug = true
    run_loop
  end

  def is_sleeping(rexp_line)
    case rexp_line
    when /You are relaxed/i
      return true
    end
    return false
  end
    
  def toggle_rexp_state(rexp_line)
    if is_sleeping(rexp_line)
      fput("awaken") 
    else 
      fput("sleep")
      fput("sleep")
    end
  end

  def get_usable_amount(line)
    case line
    when /Usable This Cycle: (\d+):(\d+) hour[s]?/i
        usable_rexp = ($1.to_i * 60) + $2.to_i
        return usable_rexp
    when /Usable This Cycle: ([0-9 a-z]+) minute[s]?/i
        if $1 == "less than a minute" || $1 == "just a few minutes" || $1 == "none" then
          usable_rexp = 0
        else
          usable_rexp = $1.to_i
        end
        return $2.to_i
    end

    return usable_rexp || 0
  end
  
  def get_rexp_amount(line)
    case line
    when /Rested EXP Stored: (\d+)[:]?(\d+)? hour[s]?/i
        echo "#{$1.to_i} #{$2.to_i}"
        stored_rexp = ($1.to_i * 60) + $2.to_i
        return stored_rexp
    when /Rested EXP Stored: ([0-9]+) minute[s]?/i
        if $1 == "less than a minute" || $1 == "just a few minutes" || $1 == "none" then
          stored_rexp = 0
        else
          stored_rexp = $1.to_i
        end      
        return $2.to_i
    end

    return stored_rexp || 0
  end
    
  def need_to_sleep(rexp_stored, usable_rexp)
    if usable_rexp == 0 && rexp_stored < @FULL_REXP then #need to sleep
      return true
    elseif rexp_stored == 0
      return true
    end

    return false
  end

  def run_loop
    loop do
      bput('exp', '^Rested EXP.*')
    
      rexp_line = reget.join
      rexp_stored = get_rexp_amount(rexp_line)
      usable_rexp = get_usable_amount(rexp_line)
    
      pause_amount = 0
      sleep_amount = @FULL_REXP - rexp_stored
      sleeping = is_sleeping(rexp_line)
      
      if need_to_sleep(rexp_stored, usable_rexp) then
        toggle_rexp_state(rexp_line) if not sleeping
        pause_amount = sleep_amount
        UserVars.rexp_mode = true
        echo " [ Sleeping for #{pause_amount} minutes ] "
      elsif sleeping && rexp_stored < @FULL_REXP
        echo "#{rexp_stored}"
        pause_amount = @FULL_REXP - rexp_stored
        UserVars.rexp_mode = true
        echo " [ Waking up in #{pause_amount} minutes ] "
      elsif sleeping && rexp_stored == @FULL_REXP
        toggle_rexp_state(rexp_line) if sleeping
        pause_amount = @FULL_REXP
        UserVars.rexp_mode = false
        echo " [ Waking up, draining REXP pool over - #{pause_amount} minutes ] "
      elsif usable_rexp < rexp_stored then
        pause_amount = usable_rexp
        UserVars.rexp_mode = false
        echo " [ More stored than usable, sleeping in #{usable_rexp} minutes ] "
      else
        toggle_rexp_state(rexp_line) if sleeping
        UserVars.rexp_mode = false
        pause_amount = rexp_stored 
        echo " [ Sleeping in #{pause_amount} minutes ] "
      end
    
        # Pause for the alloted amount of minute pool-size
        # Multiply by 60 to convert to seconds
        # Multiply by 2, because it's a 2/1 refill ratio
        # Add 120 seconds for padding, to ensure we've fully cycled.
      pause ((pause_amount * 60) * 2 ) + 120
    end
  end
end

manager = RexpManager.new()
