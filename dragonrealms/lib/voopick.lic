=begin
##################################
#######Voodoo's Box Script########
##################################
This script will check your backpack for box's, disarm them,
pick them, loot the coins, and fill gem pouches.

it currently requires you to be wearing a gem pouch and have a lockpick ring.


Will cycle through all your box's.

please run the setup first --
;voopick setup

to run the script after the setup --
;voopick


=end



settings = CharSettings.to_hash
settings['box_sack'] ||= UserVars.boxsack
settings['loot_sack'] ||= UserVars.lootsack
settings['empty_sack'] ||= ""

#Ripped setup from sloot, no clue what is going on here but it works!


setup = proc {
	
	
	
	gtk_global = Hash.new
	window = window_action = nil
	Gtk.queue {
		ttips = Gtk::Tooltips.new.enable
		ttips_text = {
			'box_sack' => 'This is the container where you keep your boxes',
			'loot_sack' => 'This is the container you put and keep your gem pouches that are not full',
			'empty_sack' => 'this is the container where you keep your empty gem pouches',
		}
		
		gtk_global['box_sack'] = Gtk::Entry.new.set_text(settings['box_sack'])
		gtk_global['loot_sack'] = Gtk::Entry.new.set_text(settings['loot_sack'])
		gtk_global['empty_sack'] = Gtk::Entry.new.set_text(settings['empty_sack'])
		
		
		ttips_text.each_pair { |widget,tip|
			if widget = gtk_global[widget]# || gtk_locals[widget]
				ttips.set_tip(widget,tip,'')
			end
		}
		
		window = Gtk::Window.new
		window.title = "VooPick"
		window.border_width = 3
		window.resizable = true
		#window.resize(10, 10)
		
		settings_page = Gtk::VBox.new(false,1).set_border_width(3)
		vb_pg1_1 = Gtk::VBox.new(false,1).set_border_width(3)
		fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>Voodoo\'s Lockpicking Script Settings:</b></big>'))
		fr_pg1_1.add(vb_pg1_1)
		settings_page.pack_start(fr_pg1_1,false)
		
		lbl = Gtk::Label.new.set_markup("<i>This is a modified lockpicking script written by Algion and converted to lich!</i>")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_1.pack_start(lbl,false)
		
		#random note to self width will be ignored if text is longer
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Box Container: ')).set_width_request(150))
		hb.pack_start(gtk_global['box_sack'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Full Gem pouch Container: ')).set_width_request(150))
		hb.pack_start(gtk_global['loot_sack'],false)
		vb_pg1_1.pack_start(hb,false)
		
		hb = Gtk::HBox.new(false,1)
		hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Empty Pouch Container: ')).set_width_request(150))
		hb.pack_start(gtk_global['empty_sack'],false)
		vb_pg1_1.pack_start(hb,false)
		
		lbl = Gtk::Label.new.set_markup("Mouse over each box for more help")
		lbl.set_wrap(true).set_padding(0,10)
		vb_pg1_1.pack_start(lbl,false)
		
		hb_saveclose = Gtk::HBox.new(false,1)
		save = Gtk::Button.new('_Save & Close')
		close = Gtk::Button.new('E_xit')
		save.signal_connect('clicked') { window_action = :save }
		close.signal_connect('clicked') { window_action = :done }
		hb_saveclose.pack_start(save,false)
		hb_saveclose.pack_start(close,false)
		vb_pg1_1.pack_start(hb_saveclose,false)
		
		
		
		
		
		# Primary VerticalBox to split up Notebook and Save/Close buttons
		#vb_main = Gtk::VBox.new(false,1)
		#vb_main.border_width = 3
		
		#vb_main.pack_start(nb,false)
		#vb_main.pack_start(hb_saveclose,false)
		
		window.signal_connect('delete_event') { respond window.allocation.width; respond window.allocation.height; window_action = :exit }
		
		#window.add(vb_main)	
		
		
		window.add(settings_page)
		
		
		
		window.show_all
		window.keep_above = true # On windows keep_above is required AFTER show_all
		
	}
	before_dying { Gtk.queue { window.destroy } }
	wait_while { window_action.nil? }
	undo_before_dying
	Gtk.queue { window.destroy }
	clean_entry = proc { |entry|
		entry.text = entry.text.strip
		if entry.text.empty?
			entry.text = nil
		end
		
		entry.text
	}
		
	if window_action == :save		
		gtk_global.each_pair { |option,widget|
			
			if widget.class == Gtk::CheckButton
				settings[option] = widget.active?
			elsif widget.class == Gtk::Entry
				settings[option] = clean_entry.call(widget)
			elsif widget.class == Gtk::ComboBox
				settings[option] = widget.active
			else
				echo "error: unknown local widget #{option} [#{widget.class}]"
			end
		}
		
		#attempt some error checking
		warning = ""
		if settings['box_sack'] == ""
			warning += "the box container is not set, please rerun setup and set this now.\r\n"
		end
		if settings['loot_sack'] == ""
			warning += "The container where you which to keep your full pouches is not set. Please rerun the setup and set this now.\r\n"
		end
		if settings['empty_sack'] == ""
			warning += "I have no idea where you keep your empty pouches! rerun setup and fix this!.\r\n"
		end
		if warning.length > 0
			if !$fake_stormfront
				puts "<output class=\"mono\"/>#{monsterbold_start}#{warning}#{monsterbold_end}\r\n<output class=\"\"/>"
			else
				puts "#{monsterbold_start}#{warning}#{monsterbold_end}"
			end
		end
		echo 'settings saved'
	else
		echo 'closed without saving'
	end
}


if variable[0] =~ /setup|config|configure/i
	setup.call
	exit
else
	goto "boxstart"
	exit
end






boxstart:
waitrt?
clear
put "look in my #{settings['box_sack']}"
put "enc"
match "chest", "chest"
match "skippet", "skippet"
match "casket", "casket"
match "trunk", "trunk"
match "caddy", "caddy"
match "strongbox", "strongbox"
match "box", "box"
match "crate", "crate"
match "coffer", "coffer"
match "done", "Encumbrance"
matchwait

skippet:
box = "skippet"
goto "getbox"

box:
box = "box"
goto "getbox"

crate:
box = "crate"
goto "getbox"

coffer:
box = "coffer"
goto "getbox"

strongbox:
box = "strongbox"
goto "getbox"

caddy:
box = "caddy"
goto "getbox"

trunk:
box = "trunk"
goto "getbox"

chest:
box = "chest"
goto "getbox"

casket:
box = "casket"
goto "getbox"

getbox:
match "getbox", "...wait"
match "disarm", "you get"
fput "get #{box}"
matchwait

disarm:
pause
waitrt?
match "quick", "a simple matter for you to disarm"
match "quick", "a trivially constructed gadget"
match "quick", "should not take long"
match "disarm", "...wait 1 seconds."
match "disarm", "fails to reveal to you"
match "normal", "with only minor troubles"
match "normal", "precisely at your skill level"
match "normal", "has the edge on you"
match "blind", "could defeat this trap in her sleep"
match "blind", "you could do it blindfolded"
match "careful", "would be a longshot."
match "careful", "You have some chance"
match "careful", "Prayer would be a good"
match "careful", "The odds are against"
match "disarm", "...wait"
match "harvesty", "blocking whatever would have come out"
match "harvesty", "safe"
match "harvesty", "harmless"
fput "disarm ident"
matchwait

blind:
pause
waitrt?
fput "disarm blind"
match "disarm", "that despite this mishap"
match "blind", "feeling your manipulation"
match "disarm", "not yet fully disarmed."
match "blind", "...wait 1 seconds."
match "quick", "unable to make any progress"
match "harvesty", "roundtime"
matchwait

quick:
pause
waitrt?
fput "disarm quick"
match "disarm", "that despite this mishap"
match "blind", "feeling your manipulation"
match "disarm", "not yet fully disarmed."
match "blind", "...wait 1 seconds."
match "quick", "unable to make any progress"
match "harvesty", "roundtime"
matchwait

normal:
pause
waitrt?
fput "disarm"
match "disarm", "that despite this mishap"
match "blind", "feeling your manipulation"
match "disarm", "not yet fully disarmed."
match "blind", "...wait 1 seconds"
match "quick", "unable to make any progress"
match "harvesty", "roundtime"
matchwait

careful:
pause
waitrt?
fput "disarm careful"
match "disarm", "that despite this mishap"
match "blind", "feeling your manipulation"
match "disarm", "not yet fully disarmed."
match "blind", "...wait"
match "quick", "unable to make any progress"
match "harvesty", "roundtime"
matchwait

harvesty:
goto "analyze"

harvestn:
goto "pident"

analyze:
waitrt?
fput "disarm analyze"
match "analyze", "...wait"
match "harvest", "You've already analyzed this trap in preparation for harvesting"
match "analyze", "unable to determine"
match "pident", "inept fumblings"
match "harvest", "roundtime"
matchwait

harvest:
waitrt?
fput "disarm harvest"
match "harvest", "...wait"
match "harvest", "fumble around"
match "pident", "inept fumblings"
match "pident", "completely harvested"
match "lefthand", "roundtime"
matchwait

lefthand:
waitrt?
match "lefthand", "...wait"
match "pident", "You drop"
match "pident", "already empty."
match "pident", "You put"
fput "stow left"
matchwait

pident:
waitrt?
match "disarm", "making any chance of picking it unlikely"
match "pident", "fails to teach you anything again"
match "pnormal", "precisely at your skill level."
match "pquick", "should not take long with your skills."
match "pquick", "junk barely worth your time."
match "pquick", "a simple matter for you"
match "pblind", "you could do it blindfolded"
match "pblind", "could open this in her sleep."
match "pnormal", "with only minor troubles."
match "pnormal", "some chance of being able"
match "pcareful", "has the edge on you"
match "pcareful", "Prayer would be a good start"
match "pcareful", "would be a longshot"
match "pcareful", "The odds are against you"
match "pident", "...wait 1 seconds."
match "pident", "roundtime"
match "clean", "why bother?"
fput "pick my #{box} ident"
matchwait

pblind:
waitrt?
match "pquick", "You are unable to make any progress"
match "pident", "With a soft click"
match "clean", "It's not even locked"
fput "pick my #{box} blind"
matchwait

pquick:
waitrt?
match "pquick", "You are unable to make any progress"
match "pident", "With a soft click"
match "clean", "It's not even locked"
fput "pick my #{box} quick"
matchwait

pnormal:
waitrt?
match "pquick", "You are unable to make any progress"
match "pident", "With a soft click"
match "clean", "It's not even locked"
fput "pick my #{box}"
matchwait

pcareful:
waitrt?
match "pquick", "You are unable to make any progress"
match "pident", "With a soft click"
match "clean", "It's not even locked"
fput "pick my #{box} careful"
matchwait

clean:
waitrt?
match "clean", "...wait"
match "coin", "you open"
fput "open my #{box}"
matchwait

coin:
waitrt?
match "coin", "...wait"
match "coin", "You pick up"
match "fill", "What"
fput "get coin"
matchwait

fill:
waitrt?
match "dismantle", "pouch and quickly fill it"
match "dismantle", "fill your"
match "dismantle", "There aren't any gems"
match "tie", "You can't fit anything else"
fput "fill my pouch with my #{box}"
matchwait

dismantle:
match "dismantle", "...wait"
match "dismantle2", "repeat this request"
match "boxstart", "You move your hands"
fput "dismantle my #{box}"
matchwait

dismantle2:
match "dismantle2", "...wait"
match "boxstart", "You move your hands"
fput "dismantle my #{box}"
matchwait

Tie:
waitrt?
fput "remove my pouch"
fput "tie my pouch"
fput "put my pouch in my #{settings['loot_sack']}
match "newpouch", "you put"
match "tie", "...wait"
matchwait

newpouch
put "get pouch in my #{settings['empty_sack']}
waitrt?
fput "wear my pouch"
fput "fill my pouch with my #{box}"
goto "dismantle"

done:
echo "**************done****************"
