=begin
"It's free real estate"  

Runs to your local NPC Healer, touches the plant to transfer wounds, and heals. Intended to be used to train Empathy (will cycle until Empathy is mindlocked), but options include healing past mindlocked.
  
  Can be used with or without Adaptive Curing, though ADC will help speed things up.
  
  Logic Flow:
  - Stows hands (we don't want to be dropping things if our hands disappear!)
  - If adc is true, uses a waggle_set plant_heal to pre-cast healing spells, preferably Heal and Blood Staunching. If false, skips pre-casting.
  - If custom_room is set, runs to that room. Else will walk_to your nearest npchealer (or Fang Cove healer if set to hometown override)
  - Performs a series of "evcatch" functions to check for the following:
    - If a plant is in the room and you have EV up.
    - If the plant is in the room but you don't have EV up.
    - If there's no plant in the room but you have EV up.
    - If there's no plant in the room and you don't have EV up.
  - Based on that, will take a follow-on series of actions
    - If prep_room is set, will walk to the specified room to prepare the spell (great for Dokt's!)
    - Otherwise, prepares/casts spell in the room you're in
  - Uses waggle_set ev to recast ev if needed (make sure recast timer is set).
  - If adc is true, will touch the plant and wait for Heal to pulse. Will continue to do so until Heal expires.
    -- Once Heal expires, will touch the plant number of times set in touchcount.
    -- If adc is false, will only touch plant the number of times set in touchcount.
  - Returns to your safe_room or healing_room override and runs healme script (make sure this is configured to run correctly! Need the appropriate waggle_set)
  - Check Empathy mindstate. If at or above threshold, will exit script unless healpastML is true. If true, will restart process.

  YAML Settings required to make this work:

  plant_adc: true  ## Set to true/false to pre-cast your plant_heal waggle set. Recommend at least BS and Heal.
  plant_total_touch_count: 3  ## Total number of times you want to touch your plant. This will be used as the max count without ADC, or will be used once Heal is expired if using ADC. Be mindful of bleeders and overhealing!
  plant_custom_room:  ## Add a custom room to drop your plant in. Otherwise will use npc healer room assigned to your hometown (or Fang Cove if you're using FC override)
  plant_heal_past_ML: false  ## Set to true if you want to fully heal the plant. Can take a *long* time in busy areas.  
  plant_healing_room:  ## Add custom room to return to heal. Otherwise will use safe_room settings.
  plant_empathy_threshold: 24  ## Empathy mind state you want to stop returning/healing your plant.
  plant_prep_room: 1234 ## Newly added feature to let you prep in a room outside of the plant_room you want to cast in. Defaults to the same room as plant_room.

  Required waggle_sets:
  ev = Create a waggle set to cast your ev spell. Set the recast timer appropriately so that it doesn't expire prior to you re-running the script.
  plant_heal = If you intend to use ADC to pre-cast healing spells, this is the waggle_set to use.

  TODO:
  - Verify new plant nouns work.
  - Run through all cases where evcatch calls prep_room and validate functions
=end

custom_require.call(%w[common common-items events common-arcana common-healing common-money common-travel common-validation drinfomon])

class PlantHeal
  
  unless DRStats.empath?
    DRC.message('***Must be an Empath with the Embrace of the Vela\'Tohr spell to run this!***')
    exit
  end

  def initialize

    settings = get_settings
    @settings = settings

    town_data = get_data('town')
    if settings.force_healer_town
      hometown_name = settings.force_healer_town
      hometown = town_data[settings.force_healer_town]
    else
      hometown_name = settings.hometown
      hometown = town_data[settings.hometown]
    end

    @adc = settings.plant_adc = settings.plant_adc.to_s
    @totaltouchcount = settings.plant_total_touch_count = settings.plant_total_touch_count.to_i
    @customroom = settings.plant_custom_room = settings.plant_custom_room.to_i
	  @healpastML = settings.plant_heal_past_ML = settings.plant_heal_past_ML.to_s
	  @healingroom = settings.plant_healing_room = settings.plant_healing_room.to_i
    @currenttouchcount = 1
    @ev = settings.waggle_sets['ev']
    @plant_heal = settings.waggle_sets['plant_heal']
    @threshold = settings.plant_empathy_threshold = settings.plant_empathy_threshold.to_i
    @prep_room = settings.plant_prep_room = settings.plant_prep_room.to_i
    
    if @customroom == 0
      @plantroom = hometown['npc_empath']['id']
    elsif
      @plantroom = @customroom
    end

    if @healingroom == 0
      @healingroom = settings.safe_room
    end

    if @ev.nil?
      DRC.message("Missing ev waggle_set!")
      exit
    end

    if @adc == 'true' && @plant_heal.nil?
      DRC.message("adc is set to true but missing the plant_heal waggle_set!")
      exit
    end
  
    Flags.add('heal-expire', 'You feel the warmth in your flesh gradually subside.')
    
    DRCI.stow_hands
    healplant(@adc,@totaltouchcount,@plantroom,@currenttouchcount,@healingroom,@healpastML,@threshold)
  end

  def healer_run(plantroom)
    DRCT.walk_to(plantroom)
  end

  def evcatch
    if /.*vela.tohr (\w+)/ =~ DRRoom.room_objs.grep(/vela'tohr (plant|thicket|bush|briar|shrub|thornbush)/).to_s
      if DRSpells.active_spells.include?('Embrace of the Vela\'Tohr')
        return
      else
        if @prep_room == 0
          DRC.wait_for_script_to_complete('buff', ['ev'])
        else
          DRCT.walk_to(@prep_room)
          prep_spell
          return
        end
      end
    else
      if DRSpells.active_spells.include?('Embrace of the Vela\'Tohr')
        release_check = DRC.bput('release ev', 'You feel the Embrace of the Vela\'Tohr spell fade away.', 'Release what?')
        case release_check
        when 'You feel the Embrace of the Vela\'Tohr spell fade away.'
          if @prep_room == 0
            DRC.wait_for_script_to_complete('buff', ['ev'])
          else
            DRCT.walk_to(@prep_room)
            prep_spell
            return
          end
        when 'Release what?'
          if @prep_room == 0
            DRC.wait_for_script_to_complete('buff', ['ev'])
          else
            DRCT.walk_to(@prep_room)
            prep_spell
          end
        end
      else
        if @prep_room == 0
          DRC.wait_for_script_to_complete('buff', ['ev'])
        else
          DRCT.walk_to(@prep_room)
          prep_spell
          return
        end
      end
    end
  end

  def touchplantheal(healingroom)
    return if Flags['heal-expire']
    evcatch
    until Flags['heal-expire']
      if /.*vela.tohr (\w+)/ =~ DRRoom.room_objs.grep(/vela'tohr (plant|thicket|bush|briar|shrub|thornbush)/).to_s
        result = DRC.bput("touch #{Regexp.last_match(1)}", 'Roundtime', 'indicating your vela\'tohr plant has no need of healing.', 'indicating your vela\'tohr thicket within the thicket has no need of healing.', 'has no need of healing.', 'you have no empathic bond', 'Touch what?')
        case result
        when 'indicating your vela\'tohr plant has no need of healing.', 'indicating your vela\'tohr thicket within the thicket has no need of healing.', 'has no need of healing.'
          DRC.message("Plant doesn't require healing!")
          if @prep_room == 0
            DRC.wait_for_script_to_complete('buff', ['ev'])
          else
            DRCT.walk_to(@prep_room)
            prep_spell
          end
          planthealed(healingroom)
        when 'you have no empathic bond'
          fput('release ev')
          if @prep_room == 0
            DRC.wait_for_script_to_complete('buff', ['ev'])
          else
            DRCT.walk_to(@prep_room)
            prep_spell
          end
        when 'Roundtime'
          break if Flags['heal-expire']
          waitfor('A nearly painful prickling sensation surges through you.')
          touchplantheal(healingroom)
        when 'Touch what?'
          evcatch
        end
      end
    end
  end

  def touchplantcount(healingroom,totaltouchcount,currenttouchcount)
    evcatch
    while currenttouchcount <= totaltouchcount do
      if /.*vela.tohr (\w+)/ =~ DRRoom.room_objs.grep(/vela'tohr (plant|thicket|bush|briar|shrub|thornbush)/).to_s
        result = DRC.bput("touch #{Regexp.last_match(1)}", 'Roundtime', 'indicating your vela\'tohr plant has no need of healing.', 'indicating your vela\'tohr thicket within the thicket has no need of healing.', 'has no need of healing.', 'you have no empathic bond', 'Touch what?')
        case result
        when 'indicating your vela\'tohr plant has no need of healing.', 'indicating your vela\'tohr thicket within the thicket has no need of healing.', 'has no need of healing.'
          DRC.message("Plant doesn't require healing!")
          if @prep_room == 0
            DRC.wait_for_script_to_complete('buff', ['ev'])
          else
            DRCT.walk_to(@prep_room)
            prep_spell
          end
          planthealed(healingroom)
          return
        when 'you have no empathic bond'
          fput('release ev')
          if @prep_room == 0
            DRC.wait_for_script_to_complete('buff', ['ev'])
          else
            DRCT.walk_to(@prep_room)
            prep_spell
          end
        when 'Roundtime'
          currenttouchcount += 1
        when 'Touch what?'
          evcatch
        end
      end
    end
  end

  def wrapup(healingroom,healpastML)
    if @prep_room == 0
      DRC.wait_for_script_to_complete('buff', ['ev'])
    else
      DRCT.walk_to(@prep_room)
      prep_spell
    end
    DRCT.walk_to(healingroom)
    DRC.wait_for_script_to_complete("healme")
  end

  def planthealed(healingroom)
    DRCT.walk_to(healingroom)
    DRC.wait_for_script_to_complete("healme")
    DRC.message("Plant was fully healed, exiting script!")
    exit
  end

  def mindstate_check(healpastML,threshold)
    if healpastML == 'true'
      return
    elsif DRSkill.getxp('Empathy') >= threshold
      DRC.message("Mind State at target, exiting script!")
      exit
    end
  end

 def prep_spell
    ev_data = @ev['Embrace of the Vela\'Tohr']
    command = 'prepare'

    abbrev = ev_data['abbrev']
    mana = ev_data['mana']
    symbiosis = ev_data['symbiosis']
    

    DRCA.prepare?(abbrev, mana, symbiosis)

    prepare_time = Time.now
    DRCA.find_focus(ev_data['focus'], ev_data['worn_focus'], ev_data['tied_focus'], ev_data['sheathed_focus'])

    DRCA.invoke(ev_data['focus'], nil, nil)
    DRCA.stow_focus(ev_data['focus'], ev_data['worn_focus'], ev_data['tied_focus'], ev_data['sheathed_focus'])

    if ev_data['prep_time']
      pause until Time.now - prepare_time >= ev_data['prep_time']
    else
      waitcastrt?
    end
    
    DRCT.walk_to(@plantroom)
    DRCA.cast?(ev_data['cast'], ev_data['symbiosis'], ev_data['before'], ev_data['after'])
    pause 3
  end
    
  def healplant(adc,totaltouchcount,plantroom,currenttouchcount,healingroom,healpastML,threshold)
    loop do
      if adc == 'true'
        DRC.wait_for_script_to_complete('buff', ['plant_heal'])
      end
  
      healer_run(plantroom)

      evcatch
      if @prep_room == 0
        DRC.wait_for_script_to_complete('buff', ['ev'])
      else
        DRCT.walk_to(@prep_room)
        prep_spell
      end
            
      if adc == 'true'
        if !DRSpells.active_spells.include?('Heal')
          DRC.wait_for_script_to_complete('buff', ['plant_heal'])
        end
        touchplantheal(healingroom)
        touchplantcount(healingroom,totaltouchcount,currenttouchcount)
      elsif
        touchplantcount(healingroom,totaltouchcount,currenttouchcount)
      end
      
      wrapup(healingroom,healpastML)
      mindstate_check(healpastML,threshold)
    end
  end
end

before_dying do
  Flags.delete('heal-expire')
end

PlantHeal.new