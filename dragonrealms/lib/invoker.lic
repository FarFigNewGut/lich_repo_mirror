=begin

This script will create a Wraythe window which counts down until the next invoker showtime.
When the invoker is available, it will get spells.

author: Alastir
tags: invoker
version: 1.0

Changelog
  1.0 - Stole a bunch of code, then tested it.

Changelog
  0.4 - permanent fix for DST, fixed pre alert message, added main window message, reduced check interval
  0.3.1b - temp fix for DST and new invoker schedule
  0.3.1 - added priority flag to avoid intereference with other scripts
  0.3 - changed to use local clock
  0.2 - alpha release
=end

no_kill_all
hide_me
setpriority(-1)

invoked = false

# Settings
invokerDuration = 15 # in minutes
preAlert = 5 # minutes before invoker when extra messaging starts
invokerSoonMessage = "=== INVOKER SOON ==="
invokerHereMessage = "=== INVOKER TIME ==="
checkInterval = 60 # seconds

# server time offset and invoker arrival schedule
if Time.now.dst?
  elanthianTimeOffset = -14400 # UTC(-04:00) in seconds
  invokerTimes = [0, 2, 4, 6,    10,     14,     18, 20, 22]
  echo "DST Schedule Active"
else
  elanthianTimeOffset = -18000 # UTC(-05:00) in seconds
  invokerTimes = [0, 2, 4,    8,     12,     16, 18, 20, 22]
  echo "Regular Schedule Active"
end

localTimeOffset = elanthianTimeOffset - Time.now.utc_offset

before_dying {
  message = "#{script.name}.lic is not running :("
  Invoker_Window(message)
}

  def ask_for_spells
 	loop {
		findinv = nil
		GameObj.npcs.find { |npc| findinv = 1 if npc.noun =~ /invoker/i }
		if findinv
			fput 'ask invoker for spells'
			break
		end
		sleep 0.5
	}
  end

  def self.go2(cur_loc)
    set_locations = {
      "park"    => "288",
      "fwi"     => "3668",
    }

    if set_locations.include? cur_loc
      location = set_locations[cur_loc]
    else
      location = cur_loc
    end

    return if Room.current.id == location.to_i or Room.current.tags.include?(location)

    fput "unhide" if hidden? or invisible?
    waitrt?
    waitcastrt?
    Script.run("go2", "#{location.to_s} --disable-confirm", flags = { :quiet => true })
    sleep 0.2
  end

def invoker_loop
	ebounty = false
	if Script.running? 'ebounty'
		ebounty = true
		Script.pause 'ebounty'
	end
	bigshot = false
	if Script.running? 'bigshot'
		bigshot = true
		Script.kill 'bigshot'
	end
	if Script.running? 'go2'
		Script.kill 'go2'
	end
    # Capture current location
    current_room = Room.current.id
    # Go to the park
    go2('park')
    # Ask the invoker for spells
    ask_for_spells
    # Return to previous location
    go2(current_room)
	Script.unpause 'ebounty' if ebounty 
end

def Invoker_Window(message)
  puts "<clearStream id=\"invoker\"/><pushStream id=\"invoker\"/>#{message}<popStream/>"
end

# open Wrayth window
puts "<closeDialog id='invoker'/><streamWindow id='invoker' title='Invoker' location='left' resident='true'></streamWindow>"

mainWindowMessageSoon = true
mainWindowMessageHere = true

loop {
  # get server time
  elanthianTime = Time.now + localTimeOffset
  currentHour = elanthianTime.strftime('%H').to_i
  currentMinute = elanthianTime.strftime('%M').to_i

  # retrieve closest time within duration
  if currentHour > invokerTimes.last then currentHour = currentHour - 24 end
  currentInvokerHour = invokerTimes.detect {|time| time if time >= currentHour}
  nextInvokerHour = invokerTimes.detect {|time| time if time > currentInvokerHour}
  if nextInvokerHour.nil? then nextInvokerHour = invokerTimes.first + 24 end #rollover to next day

  # create message for Invoker window
  diffHours = currentInvokerHour - currentHour
  nextHours = nextInvokerHour - currentHour
  diffMinutes = 60 - currentMinute
  if (diffHours == 0) and (currentMinute < invokerDuration) then
    message = "The invoker is here for #{invokerDuration - currentMinute} more minute"
    if (invokerDuration - currentMinute) > 1 then message += "s" end
    message += "!\n\n#{invokerHereMessage}"
    respond "\n#{invokerHereMessage}\n\n" if mainWindowMessageHere
    mainWindowMessageHere = false
    mainWindowMessageSoon = true
	if invoked == false
	  #Hacking the script to do the invoker routine.
	  invoker_loop
	  #Script.run('invoker','auto')
	  
	  invoked = true
	  #echo 'Setting invoked to true.'
	else
	  #echo "You've been invoked!"
	end
  else
	if invoked == true
	  #echo 'Setting invoked to false.'
	  invoked = false
	else
	  #echo 'Invoked is set to false.'
	end
    message += "The invoker should arrive in "
    if diffHours == 0 # still in the current hour, so use the next one
      diffHours = nextHours
    end
    if diffHours > 1
      message += "#{diffHours-1} hour"
        if diffHours > 2 then message += "s" end
      message += " and "
    end
    message += "#{diffMinutes} minute"
    if diffMinutes > 1 then message += "s" end
		message += "."
    if (diffHours == 1) and (diffMinutes <= preAlert)
      message += "\n\n#{invokerSoonMessage}"
      respond "\n#{invokerSoonMessage}\n\n" if mainWindowMessageSoon
      mainWindowMessageHere = true
      mainWindowMessageSoon = false
    end
  end

  Invoker_Window(message)
  sleep checkInterval
}
