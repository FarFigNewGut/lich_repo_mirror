# quiet
=begin
    Events for better scripting

    Make suggestions or find other scripts at https://github.com/rpherbig/dr-scripts

FLAGS: Flags are simple true false string detectors.
    Usage Example:

        Flags.add(<key>, <trigger>|[<trigger1,...,triggerN])

        Flags.add('test', 'exp help')
        Flags.add('another', ['exp help', 'a second message'])
            This creates a new flag "test", which will return the matched string any time you see a message containing "exp help". Note that
            the message will be treated as a regular expression and is case insensitive (google for more info) so be careful with
            special characters, remember to use single quote strings if you're going to use special characters.
            Calling add with the same key will overwrite any previous matchers and reset the flag.
            Alternatively you can add an array with multiple matchers. If multiple messages match the flag will be set to the first match found.

        Flags.add('skillexp', '(\w[^:\(\)]+):\s+(\d+)\s\d+\.\d+%[^\(\)]*\((\d+)\/\d+\)')
            This example will add a flag watching for the results of an exp message, specifically "exp skillname".
            After sending "exp mech" to the game Flags['skillexp'] would contain...

            ["Mechanical Lore:    146 16.82% focused       (20/34)", "Mechanical Lore", "146", "20"]

            You can see the array containing entire matched string and the three capture groups containing
            skill name, ranks, and mind state.

        Flags['test']
            Returns the match if you've seen any message matching after you called add (or reset); false otherwise

        Flags['test'] = false
        Flags.reset('test')
            Both of these commands have the same effect, reseting a flag as if it hasn't been seen yet.

        Flags.delete('test')
            Removes a flag, stopping any tracking of it.

=end

no_kill_all
no_pause_all
# hide_me
setpriority(0)

class Flags
  @@flags = {}
  @@matchers = {}

  def self.[](key)
    @@flags[key]
  end

  def self.[]=(key, value)
    @@flags[key] = value
  end

  def self.add(key, *matchers)
    @@flags[key] = false
    @@matchers[key] = matchers
  end

  def self.reset(key)
    @@flags[key] = false
  end

  def self.delete(key)
    @@matchers.delete key
    @@flags.delete key
  end

  def self.flags
    @@flags
  end

  def self.matchers
    @@matchers
  end
end

eventsAction = proc do |server_string|
  Thread.new(server_string.dup) do|server_string|
    sleep 0.01
    Flags.matchers.each do |key, regexes|
      regexes.each do |regex|
        if matches = server_string.match(/#{regex}/i)
          Flags.flags[key] = matches.to_a
          break
        end
      end
    end
  end
  server_string
end

DownstreamHook.remove('eventsAction')
DownstreamHook.add('eventsAction', eventsAction)

before_dying do
  DownstreamHook.remove('eventsAction')
end

while line = script.gets
  begin
  rescue Exception
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue ThreadError
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  rescue
    echo $ERROR_INFO
    echo $ERROR_INFO.backtrace.first
    sleep 1
  end
end
