=begin
    Author: Damiza Nihshyde
    Credits: Dreamheart, Neryndil

    Add the following settings to your yaml to specify your own:
      crafting_arrowhead_item
      crafting_arrowhead_type
      crafting_arrowhead_tool
    These settings haven't been added to base.yaml or validate.lic yet.

    Arrowhead item would be: arrowhead or bolthead
    Arrowhead type would be: horn, fang, claws, tusk, or tooth
    Arrowhead tool would be: hammer, knife, shaper, weapons of various types, drawknife
    If no crafting_arrowhead_tool is listed, default will be a drawknife.

    Unfortunately does not work with crafting belts yet.
    Shapes any items 90 count and above.  If you want more counts, add more of this on line 63 with
    the number you want (ninety, eighty, seventy, sixty, fifty, fourty, thirty, twenty, ten)
      || x.include?('ninety')
=end

custom_require.call(%w[common])

class Arrowhead
  include DRC
  include DRCI

  def initialize
    @container = get_settings.crafting_container
    @item = get_settings.crafting_arrowhead_item
    @arrow_type = get_settings.crafting_arrowhead_type
    @tool = get_settings.crafting_arrowhead_tool.nil? ? "drawknife" : get_settings.crafting_arrowhead_tool

    loop do
      stow_hands
      get_fang
      shaped = count_fang
      if shaped then
        combine_fang
      end
    end
  end

  def get_fang
    case bput('get my ' + @tool, /You get a.*/, /What were you referring to/)
    when /What were you referring to/
      echo 'Cannot find a tool!'
      stow_hands
      exit
    end
    case bput('get ' + @item + ' in bundle', /You carefully remove.*/, /What were you referring to/)
    when /What were you referring to/
      echo 'No more ' + @item + '!'
      stow_hands
      fput('stow rope')
      exit
    end
  end

  def count_fang
    bput('count my ' + @item, /There are (.*) parts left/) =~ /There are (.*) parts left/
    x = Regexp.last_match(1)
    if x.include?('hundred') || x.include?('ninety')
      fput('shape my ' + @item + ' into ' + @arrow_type)
      waitrt
      return true
    else
      fput('put ' + @item + ' in my ' + @container)
      return false
    end
  end

  def combine_fang
    fput('stow ' + @tool)
    fput('get my ' + @arrow_type + ' from my ' + @container )
    fput('combine')
    fput('put ' + @arrow_type + ' in my ' + @container)
    waitfor 'You put your'
  end
end

Arrowhead.new